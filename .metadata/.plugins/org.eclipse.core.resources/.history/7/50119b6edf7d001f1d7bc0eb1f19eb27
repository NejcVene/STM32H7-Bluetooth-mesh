#include <gui/adddevicescreen_screen/AddDeviceScreenView.hpp>
#include "node_config.h"
#include "command.h"

AddDeviceScreenView::AddDeviceScreenView()
{

}

void AddDeviceScreenView::setupScreen()
{
    AddDeviceScreenViewBase::setupScreen();
    for (int i = 0; i<maxButtons; i++) {
    	deviceFoundBtn[i].setBitmaps(Bitmap(BITMAP_H7LINEMEDIUM_ID), Bitmap(BITMAP_H7LINEMEDIUM_ID));
    	deviceFoundBtn[i].setBitmapXY(0, 0);
    	deviceFoundBtn[i].setWildcardText(TypedText(T___SINGLEUSE_MVY0));
    	deviceFoundBtn[i].setWildcardTextBuffer(TypedText(T___SINGLEUSE_JF9F).getText());
    	deviceFoundBtn[i].setWildcardTextPosition(0, 16, 460, 60);
    	deviceFoundBtn[i].setWildcardTextColors(touchgfx::Color::getColorFromRGB(10, 10, 10), touchgfx::Color::getColorFromRGB(10, 10, 10));
    	deviceFoundBtn[i].setAction(flexButtonCallback);
    	deviceFoundBtn[i].setPosition(10, 14 + (60 * i), 460, 60);
    	scrollableContainer1.add(deviceFoundBtn[i]);
    }
    foudNodeBtn.setVisible(false);
    // modalWindow1.show();
    presenter->GUI_SendCommand(CMD_MESH_ATEP_SCAN);
}

void AddDeviceScreenView::tearDownScreen()
{
    AddDeviceScreenViewBase::tearDownScreen();
}

void AddDeviceScreenView::handleTickEvent() {

	int currentValue = circleProgress1.getValue();
	int16_t max = 100;
	int16_t min = 0;
	circleProgress1.getRange(min, max);

	if (currentValue == min) {
		increase = true;
	} else if (currentValue == max) {
		increase = false;
		modalWindow1.hide();
	} else if (currentValue == 50) {
		foudNodeBtn.setVisible(true);
		foudNodeBtn.invalidate();
	}
	int nextValue = increase == true ? currentValue + 1 : currentValue - 1;
	circleProgress1.setValue(nextValue);

}

void AddDeviceScreenView::GUI_SetDevicesFound(Node_NetworkAddress_t *foundDevices) {

	uint32_t address;
	for (int i = 0; i<5; i++) {
		address = foundDevices[i].nodeAddress;
	}

}
