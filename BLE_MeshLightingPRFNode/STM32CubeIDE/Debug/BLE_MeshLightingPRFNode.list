
BLE_MeshLightingPRFNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028f9c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .RamFunc      0000007c  080290dc  080290dc  0002a0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000061f8  08029158  08029158  0002a158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0802f350  0802f350  00030350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0802f358  0802f358  00030358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0802f35c  0802f35c  0003035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000002a0  20000008  0802f360  00031008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000049  200002a8  0802f600  000312a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200002f4  0802f649  000312f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00007efc  20000308  0802f65a  00031308  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  20008204  0802f65a  00032204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00031305  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00032000  2**2
                  ALLOC
 14 MB_MEM1       000001bc  20030028  20030028  00032028  2**2
                  ALLOC
 15 MB_MEM2       00000883  200301e4  200301e4  00032028  2**2
                  ALLOC
 16 .debug_info   0004aae2  00000000  00000000  00031335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000a3bf  00000000  00000000  0007be17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000042d8  00000000  00000000  000861d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000033c2  00000000  00000000  0008a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00038755  00000000  00000000  0008d872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00057bcd  00000000  00000000  000c5fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0011f33c  00000000  00000000  0011db94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000086  00000000  00000000  0023ced0  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00012f18  00000000  00000000  0023cf58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000081  00000000  00000000  0024fe70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000308 	.word	0x20000308
 800015c:	00000000 	.word	0x00000000
 8000160:	080290c4 	.word	0x080290c4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000030c 	.word	0x2000030c
 800017c:	080290c4 	.word	0x080290c4

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b96a 	b.w	8000e64 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	460c      	mov	r4, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d14e      	bne.n	8000c52 <__udivmoddi4+0xaa>
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	458c      	cmp	ip, r1
 8000bb8:	4686      	mov	lr, r0
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	d962      	bls.n	8000c86 <__udivmoddi4+0xde>
 8000bc0:	b14a      	cbz	r2, 8000bd6 <__udivmoddi4+0x2e>
 8000bc2:	f1c2 0320 	rsb	r3, r2, #32
 8000bc6:	4091      	lsls	r1, r2
 8000bc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd0:	4319      	orrs	r1, r3
 8000bd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f f68c 	uxth.w	r6, ip
 8000bde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bee:	fb04 f106 	mul.w	r1, r4, r6
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x64>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bfe:	f080 8112 	bcs.w	8000e26 <__udivmoddi4+0x27e>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 810f 	bls.w	8000e26 <__udivmoddi4+0x27e>
 8000c08:	3c02      	subs	r4, #2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	1a59      	subs	r1, r3, r1
 8000c0e:	fa1f f38e 	uxth.w	r3, lr
 8000c12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c16:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb00 f606 	mul.w	r6, r0, r6
 8000c22:	429e      	cmp	r6, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x94>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c2e:	f080 80fc 	bcs.w	8000e2a <__udivmoddi4+0x282>
 8000c32:	429e      	cmp	r6, r3
 8000c34:	f240 80f9 	bls.w	8000e2a <__udivmoddi4+0x282>
 8000c38:	4463      	add	r3, ip
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	1b9b      	subs	r3, r3, r6
 8000c3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c42:	2100      	movs	r1, #0
 8000c44:	b11d      	cbz	r5, 8000c4e <__udivmoddi4+0xa6>
 8000c46:	40d3      	lsrs	r3, r2
 8000c48:	2200      	movs	r2, #0
 8000c4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d905      	bls.n	8000c62 <__udivmoddi4+0xba>
 8000c56:	b10d      	cbz	r5, 8000c5c <__udivmoddi4+0xb4>
 8000c58:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4608      	mov	r0, r1
 8000c60:	e7f5      	b.n	8000c4e <__udivmoddi4+0xa6>
 8000c62:	fab3 f183 	clz	r1, r3
 8000c66:	2900      	cmp	r1, #0
 8000c68:	d146      	bne.n	8000cf8 <__udivmoddi4+0x150>
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0xcc>
 8000c6e:	4290      	cmp	r0, r2
 8000c70:	f0c0 80f0 	bcc.w	8000e54 <__udivmoddi4+0x2ac>
 8000c74:	1a86      	subs	r6, r0, r2
 8000c76:	eb64 0303 	sbc.w	r3, r4, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d0e6      	beq.n	8000c4e <__udivmoddi4+0xa6>
 8000c80:	e9c5 6300 	strd	r6, r3, [r5]
 8000c84:	e7e3      	b.n	8000c4e <__udivmoddi4+0xa6>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	f040 8090 	bne.w	8000dac <__udivmoddi4+0x204>
 8000c8c:	eba1 040c 	sub.w	r4, r1, ip
 8000c90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c94:	fa1f f78c 	uxth.w	r7, ip
 8000c98:	2101      	movs	r1, #1
 8000c9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ca6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000caa:	fb07 f006 	mul.w	r0, r7, r6
 8000cae:	4298      	cmp	r0, r3
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x11c>
 8000cb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x11a>
 8000cbc:	4298      	cmp	r0, r3
 8000cbe:	f200 80cd 	bhi.w	8000e5c <__udivmoddi4+0x2b4>
 8000cc2:	4626      	mov	r6, r4
 8000cc4:	1a1c      	subs	r4, r3, r0
 8000cc6:	fa1f f38e 	uxth.w	r3, lr
 8000cca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cce:	fb08 4410 	mls	r4, r8, r0, r4
 8000cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd6:	fb00 f707 	mul.w	r7, r0, r7
 8000cda:	429f      	cmp	r7, r3
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x148>
 8000cde:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x146>
 8000ce8:	429f      	cmp	r7, r3
 8000cea:	f200 80b0 	bhi.w	8000e4e <__udivmoddi4+0x2a6>
 8000cee:	4620      	mov	r0, r4
 8000cf0:	1bdb      	subs	r3, r3, r7
 8000cf2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cf6:	e7a5      	b.n	8000c44 <__udivmoddi4+0x9c>
 8000cf8:	f1c1 0620 	rsb	r6, r1, #32
 8000cfc:	408b      	lsls	r3, r1
 8000cfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000d02:	431f      	orrs	r7, r3
 8000d04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d08:	fa04 f301 	lsl.w	r3, r4, r1
 8000d0c:	ea43 030c 	orr.w	r3, r3, ip
 8000d10:	40f4      	lsrs	r4, r6
 8000d12:	fa00 f801 	lsl.w	r8, r0, r1
 8000d16:	0c38      	lsrs	r0, r7, #16
 8000d18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d20:	fa1f fc87 	uxth.w	ip, r7
 8000d24:	fb00 441e 	mls	r4, r0, lr, r4
 8000d28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d30:	45a1      	cmp	r9, r4
 8000d32:	fa02 f201 	lsl.w	r2, r2, r1
 8000d36:	d90a      	bls.n	8000d4e <__udivmoddi4+0x1a6>
 8000d38:	193c      	adds	r4, r7, r4
 8000d3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d3e:	f080 8084 	bcs.w	8000e4a <__udivmoddi4+0x2a2>
 8000d42:	45a1      	cmp	r9, r4
 8000d44:	f240 8081 	bls.w	8000e4a <__udivmoddi4+0x2a2>
 8000d48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d4c:	443c      	add	r4, r7
 8000d4e:	eba4 0409 	sub.w	r4, r4, r9
 8000d52:	fa1f f983 	uxth.w	r9, r3
 8000d56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x1d2>
 8000d6a:	193c      	adds	r4, r7, r4
 8000d6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d70:	d267      	bcs.n	8000e42 <__udivmoddi4+0x29a>
 8000d72:	45a4      	cmp	ip, r4
 8000d74:	d965      	bls.n	8000e42 <__udivmoddi4+0x29a>
 8000d76:	3b02      	subs	r3, #2
 8000d78:	443c      	add	r4, r7
 8000d7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d82:	eba4 040c 	sub.w	r4, r4, ip
 8000d86:	429c      	cmp	r4, r3
 8000d88:	46ce      	mov	lr, r9
 8000d8a:	469c      	mov	ip, r3
 8000d8c:	d351      	bcc.n	8000e32 <__udivmoddi4+0x28a>
 8000d8e:	d04e      	beq.n	8000e2e <__udivmoddi4+0x286>
 8000d90:	b155      	cbz	r5, 8000da8 <__udivmoddi4+0x200>
 8000d92:	ebb8 030e 	subs.w	r3, r8, lr
 8000d96:	eb64 040c 	sbc.w	r4, r4, ip
 8000d9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d9e:	40cb      	lsrs	r3, r1
 8000da0:	431e      	orrs	r6, r3
 8000da2:	40cc      	lsrs	r4, r1
 8000da4:	e9c5 6400 	strd	r6, r4, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	e750      	b.n	8000c4e <__udivmoddi4+0xa6>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f103 	lsr.w	r1, r0, r3
 8000db4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dbc:	4094      	lsls	r4, r2
 8000dbe:	430c      	orrs	r4, r1
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc8:	fa1f f78c 	uxth.w	r7, ip
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd4:	0c23      	lsrs	r3, r4, #16
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f107 	mul.w	r1, r0, r7
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x24c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dea:	d22c      	bcs.n	8000e46 <__udivmoddi4+0x29e>
 8000dec:	4299      	cmp	r1, r3
 8000dee:	d92a      	bls.n	8000e46 <__udivmoddi4+0x29e>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dfc:	fb08 3311 	mls	r3, r8, r1, r3
 8000e00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e04:	fb01 f307 	mul.w	r3, r1, r7
 8000e08:	42a3      	cmp	r3, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x276>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e14:	d213      	bcs.n	8000e3e <__udivmoddi4+0x296>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d911      	bls.n	8000e3e <__udivmoddi4+0x296>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4464      	add	r4, ip
 8000e1e:	1ae4      	subs	r4, r4, r3
 8000e20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e24:	e739      	b.n	8000c9a <__udivmoddi4+0xf2>
 8000e26:	4604      	mov	r4, r0
 8000e28:	e6f0      	b.n	8000c0c <__udivmoddi4+0x64>
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e706      	b.n	8000c3c <__udivmoddi4+0x94>
 8000e2e:	45c8      	cmp	r8, r9
 8000e30:	d2ae      	bcs.n	8000d90 <__udivmoddi4+0x1e8>
 8000e32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e3a:	3801      	subs	r0, #1
 8000e3c:	e7a8      	b.n	8000d90 <__udivmoddi4+0x1e8>
 8000e3e:	4631      	mov	r1, r6
 8000e40:	e7ed      	b.n	8000e1e <__udivmoddi4+0x276>
 8000e42:	4603      	mov	r3, r0
 8000e44:	e799      	b.n	8000d7a <__udivmoddi4+0x1d2>
 8000e46:	4630      	mov	r0, r6
 8000e48:	e7d4      	b.n	8000df4 <__udivmoddi4+0x24c>
 8000e4a:	46d6      	mov	lr, sl
 8000e4c:	e77f      	b.n	8000d4e <__udivmoddi4+0x1a6>
 8000e4e:	4463      	add	r3, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e74d      	b.n	8000cf0 <__udivmoddi4+0x148>
 8000e54:	4606      	mov	r6, r0
 8000e56:	4623      	mov	r3, r4
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e70f      	b.n	8000c7c <__udivmoddi4+0xd4>
 8000e5c:	3e02      	subs	r6, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	e730      	b.n	8000cc4 <__udivmoddi4+0x11c>
 8000e62:	bf00      	nop

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <LL_EXTI_EnableIT_32_63+0x24>)
 8000e72:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000e76:	4905      	ldr	r1, [pc, #20]	@ (8000e8c <LL_EXTI_EnableIT_32_63+0x24>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	58000800 	.word	0x58000800

08000e90 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b085      	sub	sp, #20
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ece:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000ed2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000ede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ee2:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eec:	68fb      	ldr	r3, [r7, #12]
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000efe:	f005 fe35 	bl	8006b6c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000f02:	f005 fe39 	bl	8006b78 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000f06:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000f0a:	f7ff ffad 	bl	8000e68 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000f0e:	f012 fdbd 	bl	8013a8c <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000f12:	f000 f821 	bl	8000f58 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000f16:	f000 f8c1 	bl	800109c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000f1a:	bf00      	nop
}
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f26:	4b0b      	ldr	r3, [pc, #44]	@ (8000f54 <APPD_EnableCPU2+0x34>)
 8000f28:	1d3c      	adds	r4, r7, #4
 8000f2a:	461d      	mov	r5, r3
 8000f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f34:	c403      	stmia	r4!, {r0, r1}
 8000f36:	8022      	strh	r2, [r4, #0]
 8000f38:	3402      	adds	r4, #2
 8000f3a:	0c13      	lsrs	r3, r2, #16
 8000f3c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f3e:	f012 fce1 	bl	8013904 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	4618      	mov	r0, r3
 8000f46:	f011 ff5a 	bl	8012dfe <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f4a:	bf00      	nop
}
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bdb0      	pop	{r4, r5, r7, pc}
 8000f52:	bf00      	nop
 8000f54:	08029158 	.word	0x08029158

08000f58 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	77fb      	strb	r3, [r7, #31]
 8000f7c:	e036      	b.n	8000fec <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000f7e:	7ffb      	ldrb	r3, [r7, #31]
 8000f80:	4a43      	ldr	r2, [pc, #268]	@ (8001090 <APPD_SetCPU2GpioConfig+0x138>)
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	4413      	add	r3, r2
 8000f86:	799b      	ldrb	r3, [r3, #6]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d02c      	beq.n	8000fe6 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000f8c:	7ffb      	ldrb	r3, [r7, #31]
 8000f8e:	4a40      	ldr	r2, [pc, #256]	@ (8001090 <APPD_SetCPU2GpioConfig+0x138>)
 8000f90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f94:	4a3f      	ldr	r2, [pc, #252]	@ (8001094 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d01b      	beq.n	8000fd2 <APPD_SetCPU2GpioConfig+0x7a>
 8000f9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001094 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d821      	bhi.n	8000fe4 <APPD_SetCPU2GpioConfig+0x8c>
 8000fa0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fa4:	d003      	beq.n	8000fae <APPD_SetCPU2GpioConfig+0x56>
 8000fa6:	4a3c      	ldr	r2, [pc, #240]	@ (8001098 <APPD_SetCPU2GpioConfig+0x140>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d009      	beq.n	8000fc0 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000fac:	e01a      	b.n	8000fe4 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000fae:	7ffb      	ldrb	r3, [r7, #31]
 8000fb0:	4a37      	ldr	r2, [pc, #220]	@ (8001090 <APPD_SetCPU2GpioConfig+0x138>)
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	4413      	add	r3, r2
 8000fb6:	889a      	ldrh	r2, [r3, #4]
 8000fb8:	8bbb      	ldrh	r3, [r7, #28]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	83bb      	strh	r3, [r7, #28]
          break;
 8000fbe:	e012      	b.n	8000fe6 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000fc0:	7ffb      	ldrb	r3, [r7, #31]
 8000fc2:	4a33      	ldr	r2, [pc, #204]	@ (8001090 <APPD_SetCPU2GpioConfig+0x138>)
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	4413      	add	r3, r2
 8000fc8:	889a      	ldrh	r2, [r3, #4]
 8000fca:	8b7b      	ldrh	r3, [r7, #26]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	837b      	strh	r3, [r7, #26]
          break;
 8000fd0:	e009      	b.n	8000fe6 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
 8000fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8001090 <APPD_SetCPU2GpioConfig+0x138>)
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	4413      	add	r3, r2
 8000fda:	889a      	ldrh	r2, [r3, #4]
 8000fdc:	8b3b      	ldrh	r3, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	833b      	strh	r3, [r7, #24]
          break;
 8000fe2:	e000      	b.n	8000fe6 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000fe4:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000fe6:	7ffb      	ldrb	r3, [r7, #31]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	77fb      	strb	r3, [r7, #31]
 8000fec:	7ffb      	ldrb	r3, [r7, #31]
 8000fee:	2b25      	cmp	r3, #37	@ 0x25
 8000ff0:	d9c5      	bls.n	8000f7e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000ffe:	8bbb      	ldrh	r3, [r7, #28]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d014      	beq.n	800102e <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001004:	8bbb      	ldrh	r3, [r7, #28]
 8001006:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff ff41 	bl	8000e90 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800100e:	2001      	movs	r0, #1
 8001010:	f7ff ff57 	bl	8000ec2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4619      	mov	r1, r3
 8001018:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800101c:	f006 fc78 	bl	8007910 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001020:	8bbb      	ldrh	r3, [r7, #28]
 8001022:	2200      	movs	r2, #0
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102a:	f006 fdf9 	bl	8007c20 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800102e:	8b7b      	ldrh	r3, [r7, #26]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d012      	beq.n	800105a <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001034:	8b7b      	ldrh	r3, [r7, #26]
 8001036:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001038:	2002      	movs	r0, #2
 800103a:	f7ff ff29 	bl	8000e90 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800103e:	2002      	movs	r0, #2
 8001040:	f7ff ff3f 	bl	8000ec2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4619      	mov	r1, r3
 8001048:	4813      	ldr	r0, [pc, #76]	@ (8001098 <APPD_SetCPU2GpioConfig+0x140>)
 800104a:	f006 fc61 	bl	8007910 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800104e:	8b7b      	ldrh	r3, [r7, #26]
 8001050:	2200      	movs	r2, #0
 8001052:	4619      	mov	r1, r3
 8001054:	4810      	ldr	r0, [pc, #64]	@ (8001098 <APPD_SetCPU2GpioConfig+0x140>)
 8001056:	f006 fde3 	bl	8007c20 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800105a:	8b3b      	ldrh	r3, [r7, #24]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d013      	beq.n	8001088 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001060:	8b3b      	ldrh	r3, [r7, #24]
 8001062:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001064:	2004      	movs	r0, #4
 8001066:	f7ff ff13 	bl	8000e90 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800106a:	2004      	movs	r0, #4
 800106c:	f7ff ff29 	bl	8000ec2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	4619      	mov	r1, r3
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <APPD_SetCPU2GpioConfig+0x13c>)
 8001076:	f006 fc4b 	bl	8007910 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800107a:	8b3b      	ldrh	r3, [r7, #24]
 800107c:	2200      	movs	r2, #0
 800107e:	4619      	mov	r1, r3
 8001080:	4804      	ldr	r0, [pc, #16]	@ (8001094 <APPD_SetCPU2GpioConfig+0x13c>)
 8001082:	f006 fdcd 	bl	8007c20 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001086:	bf00      	nop
 8001088:	bf00      	nop
}
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	0802dcc0 	.word	0x0802dcc0
 8001094:	48000800 	.word	0x48000800
 8001098:	48000400 	.word	0x48000400

0800109c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80010a0:	bf00      	nop
}
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN DbgOutputInit */
	HW_UART_Init(CFG_DEBUG_TRACE_UART);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f001 fc7f 	bl	80029b2 <HW_UART_Init>
/* USER CODE END DbgOutputInit */
  return;
 80010b4:	bf00      	nop
}
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	460b      	mov	r3, r1
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80010c6:	897a      	ldrh	r2, [r7, #10]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68f9      	ldr	r1, [r7, #12]
 80010cc:	2000      	movs	r0, #0
 80010ce:	f001 fca5 	bl	8002a1c <HW_UART_Transmit_DMA>
/* USER CODE END DbgOutputTraces */
  return;
 80010d2:	bf00      	nop
}
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <LL_EXTI_EnableIT_32_63>:
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <LL_EXTI_EnableIT_32_63+0x24>)
 80010e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80010ea:	4905      	ldr	r1, [pc, #20]	@ (8001100 <LL_EXTI_EnableIT_32_63+0x24>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	58000800 	.word	0x58000800

08001104 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <LL_C2_PWR_SetPowerMode+0x28>)
 800110e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001112:	f023 0207 	bic.w	r2, r3, #7
 8001116:	4905      	ldr	r1, [pc, #20]	@ (800112c <LL_C2_PWR_SetPowerMode+0x28>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4313      	orrs	r3, r2
 800111c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	58000400 	.word	0x58000400

08001130 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800113c:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800113e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001146:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800114a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001156:	4313      	orrs	r3, r2
 8001158:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	cafecafe 	.word	0xcafecafe

0800116c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800117e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4313      	orrs	r3, r2
 8001186:	608b      	str	r3, [r1, #8]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800119c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80011ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80011dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80011ec:	d101      	bne.n	80011f2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800120a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001212:	d101      	bne.n	8001218 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_AHB3_GRP1_EnableClock>:
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001230:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001232:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4313      	orrs	r3, r2
 800123a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800123c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001240:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4013      	ands	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001248:	68fb      	ldr	r3, [r7, #12]
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800125c:	4b04      	ldr	r3, [pc, #16]	@ (8001270 <LL_DBGMCU_GetDeviceID+0x18>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e0042000 	.word	0xe0042000

08001274 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001278:	4b04      	ldr	r3, [pc, #16]	@ (800128c <LL_DBGMCU_GetRevisionID+0x18>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	0c1b      	lsrs	r3, r3, #16
 800127e:	b29b      	uxth	r3, r3
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e0042000 	.word	0xe0042000

08001290 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	041b      	lsls	r3, r3, #16
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	605a      	str	r2, [r3, #4]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	605a      	str	r2, [r3, #4]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695a      	ldr	r2, [r3, #20]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	041b      	lsls	r3, r3, #16
 80012e8:	431a      	orrs	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	615a      	str	r2, [r3, #20]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695a      	ldr	r2, [r3, #20]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	615a      	str	r2, [r3, #20]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	609a      	str	r2, [r3, #8]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	619a      	str	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001358:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <LL_LPM_EnableSleep+0x1c>)
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	4a04      	ldr	r2, [pc, #16]	@ (8001370 <LL_LPM_EnableSleep+0x1c>)
 800135e:	f023 0304 	bic.w	r3, r3, #4
 8001362:	6113      	str	r3, [r2, #16]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	22ff      	movs	r2, #255	@ 0xff
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	22ca      	movs	r2, #202	@ 0xca
 800139a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2253      	movs	r2, #83	@ 0x53
 80013a0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f023 0207 	bic.w	r2, r3, #7
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	609a      	str	r2, [r3, #8]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <MX_APPE_Config>:

uint8_t Mesh_Stop_Mode;

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <MX_APPE_Config+0x18>)
 80013da:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013de:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 80013e0:	f000 f854 	bl	800148c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80013e4:	f000 f894 	bl	8001510 <Config_HSE>

  return;
 80013e8:	bf00      	nop
}
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	58004000 	.word	0x58004000

080013f0 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
#ifdef STM32WB15xx
  MOBLEUINT32 last_user_flash_address = ((READ_BIT(FLASH->SFR, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos) << 11) + FLASH_BASE;
#endif
#ifdef STM32WB55xx
  MOBLEUINT32 last_user_flash_address = ((READ_BIT(FLASH->SFR, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos) << 12) + FLASH_BASE;
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <MX_APPE_Init+0x6c>)
 80013f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013fc:	031b      	lsls	r3, r3, #12
 80013fe:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8001402:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001406:	607b      	str	r3, [r7, #4]
#endif
  
  System_Init( );       /**< System initialization */
 8001408:	f000 f896 	bl	8001538 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800140c:	f000 f8ae 	bl	800156c <SystemPower_Config>
  
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001410:	4913      	ldr	r1, [pc, #76]	@ (8001460 <MX_APPE_Init+0x70>)
 8001412:	2000      	movs	r0, #0
 8001414:	f001 f862 	bl	80024dc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init( );
 8001418:	f7ff fd6f 	bl	8000efa <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800141c:	2101      	movs	r1, #1
 800141e:	2001      	movs	r0, #1
 8001420:	f012 fc1c 	bl	8013c5c <UTIL_LPM_SetOffMode>

  Led_Init();
 8001424:	f000 fa04 	bl	8001830 <Led_Init>

  Button_Init();
 8001428:	f000 fa0f 	bl	800184a <Button_Init>
  
  mobleNvmBase = (const void *)(last_user_flash_address - NVM_SIZE);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8001432:	461a      	mov	r2, r3
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <MX_APPE_Init+0x74>)
 8001436:	601a      	str	r2, [r3, #0]
  appNvmBase   = (const void *)(last_user_flash_address - NVM_SIZE - APP_NVM_SIZE);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 800143e:	461a      	mov	r2, r3
 8001440:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <MX_APPE_Init+0x78>)
 8001442:	601a      	str	r2, [r3, #0]
  prvsnr_data  = (const void *)(last_user_flash_address - NVM_SIZE - APP_NVM_SIZE - PRVN_NVM_PAGE_SIZE);    
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800144a:	461a      	mov	r2, r3
 800144c:	4b07      	ldr	r3, [pc, #28]	@ (800146c <MX_APPE_Init+0x7c>)
 800144e:	601a      	str	r2, [r3, #0]

  /* For MESH done in serial_if.c */
//  RxUART_Init();

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/*  Initialize all transport layers */
 8001450:	f000 f89a 	bl	8001588 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  return;
 8001454:	bf00      	nop
}
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	58004000 	.word	0x58004000
 8001460:	200043e0 	.word	0x200043e0
 8001464:	200045b0 	.word	0x200045b0
 8001468:	200045b4 	.word	0x200045b4
 800146c:	200045b8 	.word	0x200045b8

08001470 <Init_Smps>:

void Init_Smps( void )
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001474:	bf00      	nop
}
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <Init_Exti>:

void Init_Exti( void )
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001482:	2050      	movs	r0, #80	@ 0x50
 8001484:	f7ff fe2a 	bl	80010dc <LL_EXTI_EnableIT_32_63>


  return;
 8001488:	bf00      	nop
}
 800148a:	bd80      	pop	{r7, pc}

0800148c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8001490:	f000 f804 	bl	800149c <Reset_BackupDomain>

  Reset_IPCC();
 8001494:	f000 f81a 	bl	80014cc <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001498:	bf00      	nop
}
 800149a:	bd80      	pop	{r7, pc}

0800149c <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80014a0:	f7ff fe9a 	bl	80011d8 <LL_RCC_IsActiveFlag_PINRST>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00d      	beq.n	80014c6 <Reset_BackupDomain+0x2a>
 80014aa:	f7ff fea8 	bl	80011fe <LL_RCC_IsActiveFlag_SFTRST>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d108      	bne.n	80014c6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80014b4:	f006 fc8e 	bl	8007dd4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80014b8:	f006 fc8c 	bl	8007dd4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80014bc:	f7ff fe6a 	bl	8001194 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80014c0:	f7ff fe79 	bl	80011b6 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
}
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <Reset_IPCC>:

static void Reset_IPCC( void )
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80014d0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80014d4:	f7ff fea6 	bl	8001224 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80014d8:	213f      	movs	r1, #63	@ 0x3f
 80014da:	480c      	ldr	r0, [pc, #48]	@ (800150c <Reset_IPCC+0x40>)
 80014dc:	f7ff ff1e 	bl	800131c <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80014e0:	213f      	movs	r1, #63	@ 0x3f
 80014e2:	480a      	ldr	r0, [pc, #40]	@ (800150c <Reset_IPCC+0x40>)
 80014e4:	f7ff ff28 	bl	8001338 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80014e8:	213f      	movs	r1, #63	@ 0x3f
 80014ea:	4808      	ldr	r0, [pc, #32]	@ (800150c <Reset_IPCC+0x40>)
 80014ec:	f7ff fed0 	bl	8001290 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80014f0:	213f      	movs	r1, #63	@ 0x3f
 80014f2:	4806      	ldr	r0, [pc, #24]	@ (800150c <Reset_IPCC+0x40>)
 80014f4:	f7ff feef 	bl	80012d6 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80014f8:	213f      	movs	r1, #63	@ 0x3f
 80014fa:	4804      	ldr	r0, [pc, #16]	@ (800150c <Reset_IPCC+0x40>)
 80014fc:	f7ff feda 	bl	80012b4 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001500:	213f      	movs	r1, #63	@ 0x3f
 8001502:	4802      	ldr	r0, [pc, #8]	@ (800150c <Reset_IPCC+0x40>)
 8001504:	f7ff fef9 	bl	80012fa <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001508:	bf00      	nop
}
 800150a:	bd80      	pop	{r7, pc}
 800150c:	58000c00 	.word	0x58000c00

08001510 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001516:	2000      	movs	r0, #0
 8001518:	f012 fb36 	bl	8013b88 <OTP_Read>
 800151c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	799b      	ldrb	r3, [r3, #6]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fe01 	bl	8001130 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800152e:	bf00      	nop
 8001530:	bf00      	nop
}
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <System_Init>:

static void System_Init( void )
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  Init_Smps( );
 800153c:	f7ff ff98 	bl	8001470 <Init_Smps>

  Init_Exti( );
 8001540:	f7ff ff9d 	bl	800147e <Init_Exti>

  Init_Rtc( );
 8001544:	f000 f802 	bl	800154c <Init_Rtc>

  return;
 8001548:	bf00      	nop
}
 800154a:	bd80      	pop	{r7, pc}

0800154c <Init_Rtc>:

static void Init_Rtc( void )
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <Init_Rtc+0x1c>)
 8001552:	f7ff ff1c 	bl	800138e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001556:	2100      	movs	r1, #0
 8001558:	4803      	ldr	r0, [pc, #12]	@ (8001568 <Init_Rtc+0x1c>)
 800155a:	f7ff ff28 	bl	80013ae <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800155e:	4802      	ldr	r0, [pc, #8]	@ (8001568 <Init_Rtc+0x1c>)
 8001560:	f7ff ff08 	bl	8001374 <LL_RTC_EnableWriteProtection>

  return;
 8001564:	bf00      	nop
}
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40002800 	.word	0x40002800

0800156c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001570:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001574:	f7ff fdfa 	bl	800116c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001578:	f012 fb2e 	bl	8013bd8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800157c:	2004      	movs	r0, #4
 800157e:	f7ff fdc1 	bl	8001104 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001582:	bf00      	nop
}
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800158e:	f012 f803 	bl	8013598 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8001592:	4a11      	ldr	r2, [pc, #68]	@ (80015d8 <appe_Tl_Init+0x50>)
 8001594:	2100      	movs	r1, #0
 8001596:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800159a:	f012 fc8b 	bl	8013eb4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800159e:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <appe_Tl_Init+0x54>)
 80015a0:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <appe_Tl_Init+0x58>)
 80015a4:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80015a6:	463b      	mov	r3, r7
 80015a8:	4619      	mov	r1, r3
 80015aa:	480e      	ldr	r0, [pc, #56]	@ (80015e4 <appe_Tl_Init+0x5c>)
 80015ac:	f011 feb6 	bl	801331c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80015b0:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <appe_Tl_Init+0x60>)
 80015b2:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <appe_Tl_Init+0x64>)
 80015b6:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <appe_Tl_Init+0x68>)
 80015ba:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80015bc:	f240 533c 	movw	r3, #1340	@ 0x53c
 80015c0:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	4618      	mov	r0, r3
 80015c8:	f012 f928 	bl	801381c <TL_MM_Init>

  TL_Enable();
 80015cc:	f011 ffde 	bl	801358c <TL_Enable>

  return;
 80015d0:	bf00      	nop
}
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	08013355 	.word	0x08013355
 80015dc:	20030734 	.word	0x20030734
 80015e0:	080015f5 	.word	0x080015f5
 80015e4:	0800160d 	.word	0x0800160d
 80015e8:	2003094c 	.word	0x2003094c
 80015ec:	20030840 	.word	0x20030840
 80015f0:	200301f8 	.word	0x200301f8

080015f4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80015fe:	bf00      	nop
}
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <APPE_SysUserEvtRx>:
* The buffer shall not be released
* ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
* When the status is not filled, the buffer is released by default
*/
static void APPE_SysUserEvtRx( void * pPayload )
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;
  
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	330b      	adds	r3, #11
 800161a:	61fb      	str	r3, [r7, #28]
  
  switch(p_sys_event->subevtcode)
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	b29b      	uxth	r3, r3
 8001622:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001626:	2b07      	cmp	r3, #7
 8001628:	d860      	bhi.n	80016ec <APPE_SysUserEvtRx+0xe0>
 800162a:	a201      	add	r2, pc, #4	@ (adr r2, 8001630 <APPE_SysUserEvtRx+0x24>)
 800162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001630:	08001651 	.word	0x08001651
 8001634:	08001693 	.word	0x08001693
 8001638:	080016a1 	.word	0x080016a1
 800163c:	080016ed 	.word	0x080016ed
 8001640:	080016bd 	.word	0x080016bd
 8001644:	080016cd 	.word	0x080016cd
 8001648:	080016d5 	.word	0x080016d5
 800164c:	080016e5 	.word	0x080016e5
  {
  case SHCI_SUB_EVT_CODE_READY:
  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	4618      	mov	r0, r3
 8001656:	f011 fc17 	bl	8012e88 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800165a:	7b3b      	ldrb	r3, [r7, #12]
 800165c:	4619      	mov	r1, r3
 800165e:	7b7b      	ldrb	r3, [r7, #13]
 8001660:	461a      	mov	r2, r3
 8001662:	7bbb      	ldrb	r3, [r7, #14]
 8001664:	4824      	ldr	r0, [pc, #144]	@ (80016f8 <APPE_SysUserEvtRx+0xec>)
 8001666:	f025 f915 	bl	8026894 <iprintf>
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800166a:	7c3b      	ldrb	r3, [r7, #16]
 800166c:	4619      	mov	r1, r3
 800166e:	4823      	ldr	r0, [pc, #140]	@ (80016fc <APPE_SysUserEvtRx+0xf0>)
 8001670:	f025 f910 	bl	8026894 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001674:	7dbb      	ldrb	r3, [r7, #22]
 8001676:	4619      	mov	r1, r3
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	461a      	mov	r2, r3
 800167c:	7e3b      	ldrb	r3, [r7, #24]
 800167e:	4820      	ldr	r0, [pc, #128]	@ (8001700 <APPE_SysUserEvtRx+0xf4>)
 8001680:	f025 f908 	bl	8026894 <iprintf>
  
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001684:	481f      	ldr	r0, [pc, #124]	@ (8001704 <APPE_SysUserEvtRx+0xf8>)
 8001686:	f025 f905 	bl	8026894 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f870 	bl	8001770 <APPE_SysEvtReadyProcessing>
    break;
 8001690:	e02d      	b.n	80016ee <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001692:	481d      	ldr	r0, [pc, #116]	@ (8001708 <APPE_SysUserEvtRx+0xfc>)
 8001694:	f025 f8fe 	bl	8026894 <iprintf>
    APPE_SysEvtError(pPayload);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f843 	bl	8001724 <APPE_SysEvtError>
    break;
 800169e:	e026      	b.n	80016ee <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 80016a0:	481a      	ldr	r0, [pc, #104]	@ (800170c <APPE_SysUserEvtRx+0x100>)
 80016a2:	f025 f95f 	bl	8026964 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80016aa:	6819      	ldr	r1, [r3, #0]
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	461a      	mov	r2, r3
 80016b4:	4816      	ldr	r0, [pc, #88]	@ (8001710 <APPE_SysUserEvtRx+0x104>)
 80016b6:	f025 f8ed 	bl	8026894 <iprintf>
    break;
 80016ba:	e018      	b.n	80016ee <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4619      	mov	r1, r3
 80016c4:	4813      	ldr	r0, [pc, #76]	@ (8001714 <APPE_SysUserEvtRx+0x108>)
 80016c6:	f025 f8e5 	bl	8026894 <iprintf>
    break;
 80016ca:	e010      	b.n	80016ee <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80016cc:	4812      	ldr	r0, [pc, #72]	@ (8001718 <APPE_SysUserEvtRx+0x10c>)
 80016ce:	f025 f8e1 	bl	8026894 <iprintf>
    break;
 80016d2:	e00c      	b.n	80016ee <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4619      	mov	r1, r3
 80016dc:	480f      	ldr	r0, [pc, #60]	@ (800171c <APPE_SysUserEvtRx+0x110>)
 80016de:	f025 f8d9 	bl	8026894 <iprintf>
    break;
 80016e2:	e004      	b.n	80016ee <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80016e4:	480e      	ldr	r0, [pc, #56]	@ (8001720 <APPE_SysUserEvtRx+0x114>)
 80016e6:	f025 f8d5 	bl	8026894 <iprintf>
    break;
 80016ea:	e000      	b.n	80016ee <APPE_SysUserEvtRx+0xe2>
    
  default:
    break;
 80016ec:	bf00      	nop
  }
  
  return;
 80016ee:	bf00      	nop
}
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	08029174 	.word	0x08029174
 80016fc:	08029198 	.word	0x08029198
 8001700:	080291b4 	.word	0x080291b4
 8001704:	080291cc 	.word	0x080291cc
 8001708:	080291ec 	.word	0x080291ec
 800170c:	08029210 	.word	0x08029210
 8001710:	08029260 	.word	0x08029260
 8001714:	08029288 	.word	0x08029288
 8001718:	080292c4 	.word	0x080292c4
 800171c:	080292e8 	.word	0x080292e8
 8001720:	08029324 	.word	0x08029324

08001724 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
*/
static void APPE_SysEvtError(void * pPayload)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	330b      	adds	r3, #11
 8001732:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3302      	adds	r3, #2
 8001738:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	4619      	mov	r1, r3
 8001740:	4808      	ldr	r0, [pc, #32]	@ (8001764 <APPE_SysEvtError+0x40>)
 8001742:	f025 f8a7 	bl	8026894 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d103      	bne.n	8001756 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800174e:	4806      	ldr	r0, [pc, #24]	@ (8001768 <APPE_SysEvtError+0x44>)
 8001750:	f025 f908 	bl	8026964 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001754:	e003      	b.n	800175e <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <APPE_SysEvtError+0x48>)
 8001758:	f025 f904 	bl	8026964 <puts>
  return;
 800175c:	bf00      	nop
}
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	08029348 	.word	0x08029348
 8001768:	08029378 	.word	0x08029378
 800176c:	080293b4 	.word	0x080293b4

08001770 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	@ 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;
  
  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001778:	f107 0308 	add.w	r3, r7, #8
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	330b      	adds	r3, #11
 8001794:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3302      	adds	r3, #2
 800179a:	61bb      	str	r3, [r7, #24]
  
  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d128      	bne.n	80017f6 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80017a4:	481d      	ldr	r0, [pc, #116]	@ (800181c <APPE_SysEvtReadyProcessing+0xac>)
 80017a6:	f025 f8dd 	bl	8026964 <puts>
    
    /* Traces channel initialization */
    APPD_EnableCPU2( );
 80017aa:	f7ff fbb9 	bl	8000f20 <APPD_EnableCPU2>
    
    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80017ae:	230f      	movs	r3, #15
 80017b0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE  
 80017b2:	237f      	movs	r3, #127	@ 0x7f
 80017b4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80017b6:	f7ff fd5d 	bl	8001274 <LL_DBGMCU_GetRevisionID>
 80017ba:	6278      	str	r0, [r7, #36]	@ 0x24
    
    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80017bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017be:	4818      	ldr	r0, [pc, #96]	@ (8001820 <APPE_SysEvtReadyProcessing+0xb0>)
 80017c0:	f025 f868 	bl	8026894 <iprintf>
    
    config_param.RevisionID = (uint16_t)RevisionID;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	82bb      	strh	r3, [r7, #20]
    
    DeviceID = LL_DBGMCU_GetDeviceID();
 80017ca:	f7ff fd45 	bl	8001258 <LL_DBGMCU_GetDeviceID>
 80017ce:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80017d0:	6a39      	ldr	r1, [r7, #32]
 80017d2:	4814      	ldr	r0, [pc, #80]	@ (8001824 <APPE_SysEvtReadyProcessing+0xb4>)
 80017d4:	f025 f85e 	bl	8026894 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	4618      	mov	r0, r3
 80017e4:	f011 fb3b 	bl	8012e5e <SHCI_C2_Config>
    
    APP_BLE_Init( );
 80017e8:	f002 f8d8 	bl	800399c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80017ec:	2100      	movs	r1, #0
 80017ee:	2001      	movs	r0, #1
 80017f0:	f012 fa34 	bl	8013c5c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
}

  return;
 80017f4:	e00e      	b.n	8001814 <APPE_SysEvtReadyProcessing+0xa4>
  else  if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING) 
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d106      	bne.n	800180c <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80017fe:	480a      	ldr	r0, [pc, #40]	@ (8001828 <APPE_SysEvtReadyProcessing+0xb8>)
 8001800:	f025 f848 	bl	8026894 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
  return;
 800180a:	e003      	b.n	8001814 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 800180c:	4807      	ldr	r0, [pc, #28]	@ (800182c <APPE_SysEvtReadyProcessing+0xbc>)
 800180e:	f025 f841 	bl	8026894 <iprintf>
  return;
 8001812:	bf00      	nop
}
 8001814:	3728      	adds	r7, #40	@ 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	080293ec 	.word	0x080293ec
 8001820:	08029408 	.word	0x08029408
 8001824:	0802942c 	.word	0x0802942c
 8001828:	0802944c 	.word	0x0802944c
 800182c:	08029480 	.word	0x08029480

08001830 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */
  BSP_LED_Init(LED_BLUE);
 8001834:	2000      	movs	r0, #0
 8001836:	f004 ff99 	bl	800676c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800183a:	2001      	movs	r0, #1
 800183c:	f004 ff96 	bl	800676c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001840:	2002      	movs	r0, #2
 8001842:	f004 ff93 	bl	800676c <BSP_LED_Init>
#endif

    return;
 8001846:	bf00      	nop
}
 8001848:	bd80      	pop	{r7, pc}

0800184a <Button_Init>:

static void Button_Init( void )
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800184e:	2101      	movs	r1, #1
 8001850:	2000      	movs	r0, #0
 8001852:	f004 fff9 	bl	8006848 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8001856:	2101      	movs	r1, #1
 8001858:	2001      	movs	r0, #1
 800185a:	f004 fff5 	bl	8006848 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 800185e:	2101      	movs	r1, #1
 8001860:	2002      	movs	r0, #2
 8001862:	f004 fff1 	bl	8006848 <BSP_PB_Init>
#endif

  return;
 8001866:	bf00      	nop
}
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001872:	f005 f957 	bl	8006b24 <HAL_GetTick>
 8001876:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001882:	d00a      	beq.n	800189a <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001884:	f005 f966 	bl	8006b54 <HAL_GetTickFreq>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001892:	e002      	b.n	800189a <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001894:	f7ff fd5e 	bl	8001354 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /*__ARMCC_VERSION */

    __WFI( );
 8001898:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800189a:	f005 f943 	bl	8006b24 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d8f4      	bhi.n	8001894 <HAL_Delay+0x2a>
  }
}
 80018aa:	bf00      	nop
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f012 f9fe 	bl	8013cbc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  {
    UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);
  }
#endif
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80018c8:	bf00      	nop
}
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]
#if (LOW_POWER_FEATURE == 1)
  UTIL_SEQ_Run( 0 );
#else
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f012 f9ec 	bl	8013cbc <UTIL_SEQ_Run>
#endif

  return;
 80018e4:	bf00      	nop
}
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80018f4:	2100      	movs	r1, #0
 80018f6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80018fa:	f012 fafd 	bl	8013ef8 <UTIL_SEQ_SetTask>
  return;
 80018fe:	bf00      	nop
}
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800190e:	2002      	movs	r0, #2
 8001910:	f012 fb5e 	bl	8013fd0 <UTIL_SEQ_SetEvt>
  return;
 8001914:	bf00      	nop
}
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8001924:	2002      	movs	r0, #2
 8001926:	f012 fb73 	bl	8014010 <UTIL_SEQ_WaitEvt>
  return;
 800192a:	bf00      	nop
}
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	2b10      	cmp	r3, #16
 8001940:	d104      	bne.n	800194c <HAL_GPIO_EXTI_Callback+0x1a>
      break;
#endif

    case BUTTON_SW1_PIN:
      {
        UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_SW1_REQ_ID, CFG_SCH_PRIO_0);
 8001942:	2100      	movs	r1, #0
 8001944:	2040      	movs	r0, #64	@ 0x40
 8001946:	f012 fad7 	bl	8013ef8 <UTIL_SEQ_SetTask>
      }
      break;
 800194a:	e000      	b.n	800194e <HAL_GPIO_EXTI_Callback+0x1c>
      break;
#endif

      
  default:
      break;
 800194c:	bf00      	nop

  }
  return;
 800194e:	bf00      	nop
}
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 800195c:	4b07      	ldr	r3, [pc, #28]	@ (800197c <LL_FLASH_IsActiveFlag_OperationSuspended+0x24>)
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001964:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001968:	d101      	bne.n	800196e <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	58004000 	.word	0x58004000

08001980 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	3220      	adds	r2, #32
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	4a05      	ldr	r2, [pc, #20]	@ (80019ac <LL_HSEM_1StepLock+0x2c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d001      	beq.n	800199e <LL_HSEM_1StepLock+0x1e>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <LL_HSEM_1StepLock+0x20>
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	80000400 	.word	0x80000400

080019b0 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	68ba      	ldr	r2, [r7, #8]
 80019c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_HSEM_GetStatus>:
  * @rmtoll R            LOCK          LL_HSEM_GetStatus
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 0 semaphore is free, 1 semaphore is locked  */
__STATIC_INLINE uint32_t LL_HSEM_GetStatus(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  return ((HSEMx->R[Semaphore] != 0U) ? 1UL : 0UL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <LL_HSEM_GetStatus+0x1a>
 80019ec:	2301      	movs	r3, #1
 80019ee:	e000      	b.n	80019f2 <LL_HSEM_GetStatus+0x1c>
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <FD_EraseSectors>:
static SingleFlashOperationStatus_t ProcessSingleFlashOperation(FlashOperationType_t FlashOperationType,
                                                                uint32_t SectorNumberOrDestAddress,
                                                                uint64_t Data);
/* Public functions ----------------------------------------------------------*/
uint32_t FD_EraseSectors(uint32_t FirstSector, uint32_t NbrOfSectors)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t loop_flash;
  uint32_t return_value;
  SingleFlashOperationStatus_t single_flash_operation_status;

  single_flash_operation_status = SINGLE_FLASH_OPERATION_DONE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]

  /**
   *  Take the semaphore to take ownership of the Flash IP
   */
  while(LL_HSEM_1StepLock(HSEM, CFG_HW_FLASH_SEMID));
 8001a0e:	bf00      	nop
 8001a10:	2102      	movs	r1, #2
 8001a12:	481d      	ldr	r0, [pc, #116]	@ (8001a88 <FD_EraseSectors+0x88>)
 8001a14:	f7ff ffb4 	bl	8001980 <LL_HSEM_1StepLock>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f8      	bne.n	8001a10 <FD_EraseSectors+0x10>

  HAL_FLASH_Unlock();
 8001a1e:	f005 fde3 	bl	80075e8 <HAL_FLASH_Unlock>
   *  Notify the CPU2 that some flash erase activity may be executed
   *  On reception of this command, the CPU2 enables the BLE timing protection versus flash erase processing
   *  The Erase flash activity will be executed only when the BLE RF is idle for at least 25ms
   *  The CPU2 will prevent all flash activity (write or erase) in all cases when the BL RF Idle is shorter than 25ms.
   */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
 8001a22:	2001      	movs	r0, #1
 8001a24:	f011 fa02 	bl	8012e2c <SHCI_C2_FLASH_EraseActivity>

  for(loop_flash = 0; (loop_flash < NbrOfSectors) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	e00a      	b.n	8001a44 <FD_EraseSectors+0x44>
  {
    single_flash_operation_status = FD_EraseSingleSector(FirstSector+loop_flash);
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	4413      	add	r3, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 f871 	bl	8001b1c <FD_EraseSingleSector>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	73fb      	strb	r3, [r7, #15]
  for(loop_flash = 0; (loop_flash < NbrOfSectors) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	3301      	adds	r3, #1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d202      	bcs.n	8001a52 <FD_EraseSectors+0x52>
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0ed      	beq.n	8001a2e <FD_EraseSectors+0x2e>
  }

  if(single_flash_operation_status != SINGLE_FLASH_OPERATION_DONE)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <FD_EraseSectors+0x64>
  {
    return_value = NbrOfSectors - loop_flash + 1;
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	3301      	adds	r3, #1
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	e00b      	b.n	8001a7c <FD_EraseSectors+0x7c>
    /**
     *  Notify the CPU2 there will be no request anymore to erase the flash
     *  On reception of this command, the CPU2 will disables the BLE timing protection versus flash erase processing
     *  The protection is active until next end of radio event.
     */
    SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f011 f9e1 	bl	8012e2c <SHCI_C2_FLASH_EraseActivity>

    HAL_FLASH_Lock();
 8001a6a:	f005 fddf 	bl	800762c <HAL_FLASH_Lock>

    /**
     *  Release the ownership of the Flash IP
     */
    LL_HSEM_ReleaseLock(HSEM, CFG_HW_FLASH_SEMID, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2102      	movs	r1, #2
 8001a72:	4805      	ldr	r0, [pc, #20]	@ (8001a88 <FD_EraseSectors+0x88>)
 8001a74:	f7ff ff9c 	bl	80019b0 <LL_HSEM_ReleaseLock>

    return_value = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
  }

  return return_value;
 8001a7c:	693b      	ldr	r3, [r7, #16]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	58001400 	.word	0x58001400

08001a8c <FD_WriteData>:

uint32_t FD_WriteData(uint32_t DestAddress, uint64_t * pSrcBuffer, uint32_t NbrOfData)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t loop_flash;
  uint32_t return_value;
  SingleFlashOperationStatus_t single_flash_operation_status;

  single_flash_operation_status = SINGLE_FLASH_OPERATION_DONE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	75fb      	strb	r3, [r7, #23]

  /**
   *  Take the semaphore to take ownership of the Flash IP
   */
  while(LL_HSEM_1StepLock(HSEM, CFG_HW_FLASH_SEMID));
 8001a9c:	bf00      	nop
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	481d      	ldr	r0, [pc, #116]	@ (8001b18 <FD_WriteData+0x8c>)
 8001aa2:	f7ff ff6d 	bl	8001980 <LL_HSEM_1StepLock>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f8      	bne.n	8001a9e <FD_WriteData+0x12>

  HAL_FLASH_Unlock();
 8001aac:	f005 fd9c 	bl	80075e8 <HAL_FLASH_Unlock>

  for(loop_flash = 0; (loop_flash < NbrOfData) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
 8001ab4:	e011      	b.n	8001ada <FD_WriteData+0x4e>
  {
    single_flash_operation_status = FD_WriteSingleData(DestAddress+(8*loop_flash), *(pSrcBuffer+loop_flash));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	00da      	lsls	r2, r3, #3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	18d1      	adds	r1, r2, r3
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	4608      	mov	r0, r1
 8001acc:	f000 f842 	bl	8001b54 <FD_WriteSingleData>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	75fb      	strb	r3, [r7, #23]
  for(loop_flash = 0; (loop_flash < NbrOfData) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d202      	bcs.n	8001ae8 <FD_WriteData+0x5c>
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0e6      	beq.n	8001ab6 <FD_WriteData+0x2a>
  }

  if(single_flash_operation_status != SINGLE_FLASH_OPERATION_DONE)
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <FD_WriteData+0x6e>
  {
    return_value = NbrOfData - loop_flash + 1;
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	3301      	adds	r3, #1
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	e008      	b.n	8001b0c <FD_WriteData+0x80>
  }
  else
  {
    HAL_FLASH_Lock();
 8001afa:	f005 fd97 	bl	800762c <HAL_FLASH_Lock>

    /**
     *  Release the ownership of the Flash IP
     */
    LL_HSEM_ReleaseLock(HSEM, CFG_HW_FLASH_SEMID, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	2102      	movs	r1, #2
 8001b02:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <FD_WriteData+0x8c>)
 8001b04:	f7ff ff54 	bl	80019b0 <LL_HSEM_ReleaseLock>

    return_value = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
  }

  return return_value;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	58001400 	.word	0x58001400

08001b1c <FD_EraseSingleSector>:

SingleFlashOperationStatus_t FD_EraseSingleSector(uint32_t SectorNumber)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  SingleFlashOperationStatus_t return_value;

   /* Add at least 5us (CPU1 up to 64MHz) to guarantee that CPU2 can take SEM7 to protect BLE timing */ 
   for (volatile uint32_t i = 0; i < 35; i++);
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	e002      	b.n	8001b30 <FD_EraseSingleSector+0x14>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b22      	cmp	r3, #34	@ 0x22
 8001b34:	d9f9      	bls.n	8001b2a <FD_EraseSingleSector+0xe>
   
  /* The last parameter is unused in that case and set to 0 */
  return_value =  ProcessSingleFlashOperation(FLASH_ERASE, SectorNumber, 0);
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	2000      	movs	r0, #0
 8001b42:	f000 f81b 	bl	8001b7c <ProcessSingleFlashOperation>
 8001b46:	4603      	mov	r3, r0
 8001b48:	73fb      	strb	r3, [r7, #15]

  return return_value;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <FD_WriteSingleData>:

SingleFlashOperationStatus_t FD_WriteSingleData(uint32_t DestAddress, uint64_t Data)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	e9c7 2300 	strd	r2, r3, [r7]
  SingleFlashOperationStatus_t return_value;

  return_value =  ProcessSingleFlashOperation(FLASH_WRITE, DestAddress, Data);
 8001b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b64:	68f9      	ldr	r1, [r7, #12]
 8001b66:	2001      	movs	r0, #1
 8001b68:	f000 f808 	bl	8001b7c <ProcessSingleFlashOperation>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	75fb      	strb	r3, [r7, #23]

  return return_value;
 8001b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <ProcessSingleFlashOperation>:
 *
 *************************************************************/
static SingleFlashOperationStatus_t ProcessSingleFlashOperation(FlashOperationType_t FlashOperationType,
                                                                uint32_t SectorNumberOrDestAddress,
                                                                uint64_t Data)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08e      	sub	sp, #56	@ 0x38
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	e9c7 2300 	strd	r2, r3, [r7]
 8001b88:	4603      	mov	r3, r0
 8001b8a:	73fb      	strb	r3, [r7, #15]
  SingleFlashOperationStatus_t return_status;

  uint32_t page_error;
  FLASH_EraseInitTypeDef p_erase_init;

  waited_sem_status = WAITED_SEM_FREE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

  p_erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001b92:	2302      	movs	r3, #2
 8001b94:	617b      	str	r3, [r7, #20]
  p_erase_init.NbPages = 1;
 8001b96:	2301      	movs	r3, #1
 8001b98:	61fb      	str	r3, [r7, #28]
  p_erase_init.Page = SectorNumberOrDestAddress;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	61bb      	str	r3, [r7, #24]
     * the flash processing has been requested but suspended due to the PESD bit.
     *
     * Note: This code is required only when the PESD mechanism is used to protect the CPU2 timing.
     * However, keeping that code make it compatible with the two mechanisms.
     */
    while(LL_FLASH_IsActiveFlag_OperationSuspended());
 8001b9e:	bf00      	nop
 8001ba0:	f7ff feda 	bl	8001958 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1fa      	bne.n	8001ba0 <ProcessSingleFlashOperation+0x24>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001baa:	f3ef 8310 	mrs	r3, PRIMASK
 8001bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8001bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    UTILS_ENTER_CRITICAL_SECTION();
 8001bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb4:	b672      	cpsid	i
}
 8001bb6:	bf00      	nop
     *  some latency in critical code execution
     *  When flash processing is ongoing, the CPU cannot access the flash anymore.
     *  Trying to access the flash during that time stalls the CPU.
     *  The only way for CPU1 to disallow flash processing is to take CFG_HW_BLOCK_FLASH_REQ_BY_CPU1_SEMID.
     */
    cpu1_sem_status = (SemStatus_t)LL_HSEM_GetStatus(HSEM, CFG_HW_BLOCK_FLASH_REQ_BY_CPU1_SEMID);
 8001bb8:	2106      	movs	r1, #6
 8001bba:	4836      	ldr	r0, [pc, #216]	@ (8001c94 <ProcessSingleFlashOperation+0x118>)
 8001bbc:	f7ff ff0b 	bl	80019d6 <LL_HSEM_GetStatus>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if(cpu1_sem_status == SEM_LOCK_SUCCESSFUL)
 8001bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d121      	bne.n	8001c12 <ProcessSingleFlashOperation+0x96>
       *
       *  However, keeping that code make it compatible with the two mechanisms.
       *  The protection by semaphore is enabled on CPU2 side with the command SHCI_C2_SetFlashActivityControl()
       *
       */
      cpu2_sem_status = (SemStatus_t)LL_HSEM_1StepLock(HSEM, CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID);
 8001bce:	2107      	movs	r1, #7
 8001bd0:	4830      	ldr	r0, [pc, #192]	@ (8001c94 <ProcessSingleFlashOperation+0x118>)
 8001bd2:	f7ff fed5 	bl	8001980 <LL_HSEM_1StepLock>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      if(cpu2_sem_status == SEM_LOCK_SUCCESSFUL)
 8001bdc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d116      	bne.n	8001c12 <ProcessSingleFlashOperation+0x96>
         * When CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID is taken, it is allowed to only erase one sector or
         * write one single 64bits data
         * When either several sectors need to be erased or several 64bits data need to be written,
         * the application shall first exit from the critical section and try again.
         */
        if(FlashOperationType == FLASH_ERASE)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d108      	bne.n	8001bfc <ProcessSingleFlashOperation+0x80>
        {
          HAL_FLASHEx_Erase(&p_erase_init, &page_error);
 8001bea:	f107 0220 	add.w	r2, r7, #32
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f005 fdc7 	bl	8007788 <HAL_FLASHEx_Erase>
 8001bfa:	e005      	b.n	8001c08 <ProcessSingleFlashOperation+0x8c>
        }
        else
        {
          HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, SectorNumberOrDestAddress, Data);
 8001bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	2001      	movs	r0, #1
 8001c04:	f005 fcac 	bl	8007560 <HAL_FLASH_Program>
         *  Release the semaphore to give the opportunity to CPU2 to protect its timing versus the next flash operation
         *  by taking this semaphore.
         *  Note that the CPU2 is polling on this semaphore so CPU1 shall release it as fast as possible.
         *  This is why this code is protected by a critical section.
         */
        LL_HSEM_ReleaseLock(HSEM, CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2107      	movs	r1, #7
 8001c0c:	4821      	ldr	r0, [pc, #132]	@ (8001c94 <ProcessSingleFlashOperation+0x118>)
 8001c0e:	f7ff fecf 	bl	80019b0 <LL_HSEM_ReleaseLock>
 8001c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	f383 8810 	msr	PRIMASK, r3
}
 8001c1c:	bf00      	nop
      }
    }

    UTILS_EXIT_CRITICAL_SECTION();

    if(cpu1_sem_status != SEM_LOCK_SUCCESSFUL)
 8001c1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <ProcessSingleFlashOperation+0xb8>
    {
      /**
       * To avoid looping in ProcessSingleFlashOperation(), FD_WaitForSemAvailable() should implement a mechanism to
       * continue only when CFG_HW_BLOCK_FLASH_REQ_BY_CPU1_SEMID is free
       */
      waited_sem_status = FD_WaitForSemAvailable(WAIT_FOR_SEM_BLOCK_FLASH_REQ_BY_CPU1);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 f838 	bl	8001c9c <FD_WaitForSemAvailable>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001c32:	e009      	b.n	8001c48 <ProcessSingleFlashOperation+0xcc>
    }
    else if(cpu2_sem_status != SEM_LOCK_SUCCESSFUL)
 8001c34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <ProcessSingleFlashOperation+0xcc>
    {
      /**
       * To avoid looping in ProcessSingleFlashOperation(), FD_WaitForSemAvailable() should implement a mechanism to
       * continue only when CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID is free
       */
      waited_sem_status = FD_WaitForSemAvailable(WAIT_FOR_SEM_BLOCK_FLASH_REQ_BY_CPU2);
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f000 f82d 	bl	8001c9c <FD_WaitForSemAvailable>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  while( ((cpu2_sem_status != SEM_LOCK_SUCCESSFUL) || (cpu1_sem_status != SEM_LOCK_SUCCESSFUL))
      && (waited_sem_status != WAITED_SEM_BUSY) );
 8001c48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d103      	bne.n	8001c58 <ProcessSingleFlashOperation+0xdc>
  while( ((cpu2_sem_status != SEM_LOCK_SUCCESSFUL) || (cpu1_sem_status != SEM_LOCK_SUCCESSFUL))
 8001c50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <ProcessSingleFlashOperation+0xe4>
      && (waited_sem_status != WAITED_SEM_BUSY) );
 8001c58:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d19e      	bne.n	8001b9e <ProcessSingleFlashOperation+0x22>
   * way to recover than applying a device reset.
   *
   * Note: This code is required only when the PESD mechanism is used to protect the CPU2 timing.
   * However, keeping that code make it compatible with the two mechanisms.
   */
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY));
 8001c60:	bf00      	nop
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <ProcessSingleFlashOperation+0x11c>)
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001c6e:	d0f8      	beq.n	8001c62 <ProcessSingleFlashOperation+0xe6>

  if(waited_sem_status != WAITED_SEM_BUSY)
 8001c70:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <ProcessSingleFlashOperation+0x104>
  {
    /**
     * The flash processing has been done. It has not been checked whether it has been successful or not.
     * The only commitment is that it is possible to request a new flash processing
     */
    return_status = SINGLE_FLASH_OPERATION_DONE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001c7e:	e002      	b.n	8001c86 <ProcessSingleFlashOperation+0x10a>
    /**
     * The flash processing has not been executed due to timing protection from either the CPU1 or the CPU2.
     * This status is reported up to the user that should retry after checking that each CPU do not
     * protect its timing anymore.
     */
    return_status = SINGLE_FLASH_OPERATION_NOT_EXECUTED;
 8001c80:	2301      	movs	r3, #1
 8001c82:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  }

  return return_status;
 8001c86:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3738      	adds	r7, #56	@ 0x38
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	58001400 	.word	0x58001400
 8001c98:	58004000 	.word	0x58004000

08001c9c <FD_WaitForSemAvailable>:
 *
 * WEAK FUNCTIONS
 *
 *************************************************************/
__WEAK WaitedSemStatus_t FD_WaitForSemAvailable(WaitedSemId_t WaitedSemId)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
   * WAITED_SEM_FREE keep looping in the driver until the action is executed. This will result in the current stack looping
   * until this is done. In a bare metal implementation, only the code within interrupt handler can be executed. With an OS,
   * only task with higher priority can be processed
   *
   */
  return WAITED_SEM_BUSY;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_EXTI_EnableIT_0_31>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001cbe:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001cc2:	4905      	ldr	r1, [pc, #20]	@ (8001cd8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	58000800 	.word	0x58000800

08001cdc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001ce4:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4904      	ldr	r1, [pc, #16]	@ (8001cfc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]

}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	58000800 	.word	0x58000800

08001d00 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d06:	4b0d      	ldr	r3, [pc, #52]	@ (8001d3c <ReadRtcSsrValue+0x3c>)
 8001d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <ReadRtcSsrValue+0x3c>)
 8001d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001d16:	e005      	b.n	8001d24 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d1c:	4b07      	ldr	r3, [pc, #28]	@ (8001d3c <ReadRtcSsrValue+0x3c>)
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1f5      	bne.n	8001d18 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001d2c:	683b      	ldr	r3, [r7, #0]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40002800 	.word	0x40002800

08001d40 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	460a      	mov	r2, r1
 8001d4a:	71fb      	strb	r3, [r7, #7]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001d50:	79ba      	ldrb	r2, [r7, #6]
 8001d52:	491d      	ldr	r1, [pc, #116]	@ (8001dc8 <LinkTimerAfter+0x88>)
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3315      	adds	r3, #21
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d009      	beq.n	8001d7e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	4916      	ldr	r1, [pc, #88]	@ (8001dc8 <LinkTimerAfter+0x88>)
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	3314      	adds	r3, #20
 8001d7a:	79fa      	ldrb	r2, [r7, #7]
 8001d7c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001d7e:	79fa      	ldrb	r2, [r7, #7]
 8001d80:	4911      	ldr	r1, [pc, #68]	@ (8001dc8 <LinkTimerAfter+0x88>)
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3315      	adds	r3, #21
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001d92:	79fa      	ldrb	r2, [r7, #7]
 8001d94:	490c      	ldr	r1, [pc, #48]	@ (8001dc8 <LinkTimerAfter+0x88>)
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	440b      	add	r3, r1
 8001da0:	3314      	adds	r3, #20
 8001da2:	79ba      	ldrb	r2, [r7, #6]
 8001da4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001da6:	79ba      	ldrb	r2, [r7, #6]
 8001da8:	4907      	ldr	r1, [pc, #28]	@ (8001dc8 <LinkTimerAfter+0x88>)
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	3315      	adds	r3, #21
 8001db6:	79fa      	ldrb	r2, [r7, #7]
 8001db8:	701a      	strb	r2, [r3, #0]

  return;
 8001dba:	bf00      	nop
}
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	200040fc 	.word	0x200040fc

08001dcc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	460a      	mov	r2, r1
 8001dd6:	71fb      	strb	r3, [r7, #7]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001ddc:	4b29      	ldr	r3, [pc, #164]	@ (8001e84 <LinkTimerBefore+0xb8>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	79ba      	ldrb	r2, [r7, #6]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d032      	beq.n	8001e4e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001de8:	79ba      	ldrb	r2, [r7, #6]
 8001dea:	4927      	ldr	r1, [pc, #156]	@ (8001e88 <LinkTimerBefore+0xbc>)
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	440b      	add	r3, r1
 8001df6:	3314      	adds	r3, #20
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	4922      	ldr	r1, [pc, #136]	@ (8001e88 <LinkTimerBefore+0xbc>)
 8001e00:	4613      	mov	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	440b      	add	r3, r1
 8001e0a:	3315      	adds	r3, #21
 8001e0c:	79fa      	ldrb	r2, [r7, #7]
 8001e0e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e10:	79fa      	ldrb	r2, [r7, #7]
 8001e12:	491d      	ldr	r1, [pc, #116]	@ (8001e88 <LinkTimerBefore+0xbc>)
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3315      	adds	r3, #21
 8001e20:	79ba      	ldrb	r2, [r7, #6]
 8001e22:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001e24:	79fa      	ldrb	r2, [r7, #7]
 8001e26:	4918      	ldr	r1, [pc, #96]	@ (8001e88 <LinkTimerBefore+0xbc>)
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	3314      	adds	r3, #20
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e38:	79ba      	ldrb	r2, [r7, #6]
 8001e3a:	4913      	ldr	r1, [pc, #76]	@ (8001e88 <LinkTimerBefore+0xbc>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	3314      	adds	r3, #20
 8001e48:	79fa      	ldrb	r2, [r7, #7]
 8001e4a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001e4c:	e014      	b.n	8001e78 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e4e:	79fa      	ldrb	r2, [r7, #7]
 8001e50:	490d      	ldr	r1, [pc, #52]	@ (8001e88 <LinkTimerBefore+0xbc>)
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3315      	adds	r3, #21
 8001e5e:	79ba      	ldrb	r2, [r7, #6]
 8001e60:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e62:	79ba      	ldrb	r2, [r7, #6]
 8001e64:	4908      	ldr	r1, [pc, #32]	@ (8001e88 <LinkTimerBefore+0xbc>)
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	3314      	adds	r3, #20
 8001e72:	79fa      	ldrb	r2, [r7, #7]
 8001e74:	701a      	strb	r2, [r3, #0]
  return;
 8001e76:	bf00      	nop
}
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	2000418c 	.word	0x2000418c
 8001e88:	200040fc 	.word	0x200040fc

08001e8c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e96:	4b4e      	ldr	r3, [pc, #312]	@ (8001fd0 <linkTimer+0x144>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b06      	cmp	r3, #6
 8001e9e:	d118      	bne.n	8001ed2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ea0:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd0 <linkTimer+0x144>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd4 <linkTimer+0x148>)
 8001ea8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001eaa:	4a49      	ldr	r2, [pc, #292]	@ (8001fd0 <linkTimer+0x144>)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001eb0:	79fa      	ldrb	r2, [r7, #7]
 8001eb2:	4949      	ldr	r1, [pc, #292]	@ (8001fd8 <linkTimer+0x14c>)
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3315      	adds	r3, #21
 8001ec0:	2206      	movs	r2, #6
 8001ec2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001ec4:	4b45      	ldr	r3, [pc, #276]	@ (8001fdc <linkTimer+0x150>)
 8001ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eca:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	81fb      	strh	r3, [r7, #14]
 8001ed0:	e078      	b.n	8001fc4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001ed2:	f000 f909 	bl	80020e8 <ReturnTimeElapsed>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001eda:	79fa      	ldrb	r2, [r7, #7]
 8001edc:	493e      	ldr	r1, [pc, #248]	@ (8001fd8 <linkTimer+0x14c>)
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3308      	adds	r3, #8
 8001eea:	6819      	ldr	r1, [r3, #0]
 8001eec:	89fb      	ldrh	r3, [r7, #14]
 8001eee:	79fa      	ldrb	r2, [r7, #7]
 8001ef0:	4419      	add	r1, r3
 8001ef2:	4839      	ldr	r0, [pc, #228]	@ (8001fd8 <linkTimer+0x14c>)
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4403      	add	r3, r0
 8001efe:	3308      	adds	r3, #8
 8001f00:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001f02:	79fa      	ldrb	r2, [r7, #7]
 8001f04:	4934      	ldr	r1, [pc, #208]	@ (8001fd8 <linkTimer+0x14c>)
 8001f06:	4613      	mov	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	3308      	adds	r3, #8
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001f16:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd0 <linkTimer+0x144>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd8 <linkTimer+0x14c>)
 8001f20:	460b      	mov	r3, r1
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	440b      	add	r3, r1
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	3308      	adds	r3, #8
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d337      	bcc.n	8001fa4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001f34:	4b26      	ldr	r3, [pc, #152]	@ (8001fd0 <linkTimer+0x144>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001f3a:	7b7a      	ldrb	r2, [r7, #13]
 8001f3c:	4926      	ldr	r1, [pc, #152]	@ (8001fd8 <linkTimer+0x14c>)
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	3315      	adds	r3, #21
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f4e:	e013      	b.n	8001f78 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001f50:	7b7a      	ldrb	r2, [r7, #13]
 8001f52:	4921      	ldr	r1, [pc, #132]	@ (8001fd8 <linkTimer+0x14c>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3315      	adds	r3, #21
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001f64:	7b7a      	ldrb	r2, [r7, #13]
 8001f66:	491c      	ldr	r1, [pc, #112]	@ (8001fd8 <linkTimer+0x14c>)
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	3315      	adds	r3, #21
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f78:	7b3b      	ldrb	r3, [r7, #12]
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d00b      	beq.n	8001f96 <linkTimer+0x10a>
 8001f7e:	7b3a      	ldrb	r2, [r7, #12]
 8001f80:	4915      	ldr	r1, [pc, #84]	@ (8001fd8 <linkTimer+0x14c>)
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3308      	adds	r3, #8
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d2dc      	bcs.n	8001f50 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001f96:	7b7a      	ldrb	r2, [r7, #13]
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fecf 	bl	8001d40 <LinkTimerAfter>
 8001fa2:	e00f      	b.n	8001fc4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd0 <linkTimer+0x144>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff0c 	bl	8001dcc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <linkTimer+0x144>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <linkTimer+0x148>)
 8001fbc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	@ (8001fd0 <linkTimer+0x144>)
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001fc4:	89fb      	ldrh	r3, [r7, #14]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000418c 	.word	0x2000418c
 8001fd4:	2000418d 	.word	0x2000418d
 8001fd8:	200040fc 	.word	0x200040fc
 8001fdc:	20004190 	.word	0x20004190

08001fe0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	460a      	mov	r2, r1
 8001fea:	71fb      	strb	r3, [r7, #7]
 8001fec:	4613      	mov	r3, r2
 8001fee:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001ff0:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <UnlinkTimer+0xf8>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	79fa      	ldrb	r2, [r7, #7]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d111      	bne.n	8002020 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ffc:	4b36      	ldr	r3, [pc, #216]	@ (80020d8 <UnlinkTimer+0xf8>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b36      	ldr	r3, [pc, #216]	@ (80020dc <UnlinkTimer+0xfc>)
 8002004:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002006:	79fa      	ldrb	r2, [r7, #7]
 8002008:	4935      	ldr	r1, [pc, #212]	@ (80020e0 <UnlinkTimer+0x100>)
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	3315      	adds	r3, #21
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b2f      	ldr	r3, [pc, #188]	@ (80020d8 <UnlinkTimer+0xf8>)
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e03e      	b.n	800209e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002020:	79fa      	ldrb	r2, [r7, #7]
 8002022:	492f      	ldr	r1, [pc, #188]	@ (80020e0 <UnlinkTimer+0x100>)
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	3314      	adds	r3, #20
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002034:	79fa      	ldrb	r2, [r7, #7]
 8002036:	492a      	ldr	r1, [pc, #168]	@ (80020e0 <UnlinkTimer+0x100>)
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	3315      	adds	r3, #21
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002048:	79f9      	ldrb	r1, [r7, #7]
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	4824      	ldr	r0, [pc, #144]	@ (80020e0 <UnlinkTimer+0x100>)
 800204e:	460b      	mov	r3, r1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	440b      	add	r3, r1
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4403      	add	r3, r0
 8002058:	3315      	adds	r3, #21
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b2d8      	uxtb	r0, r3
 800205e:	4920      	ldr	r1, [pc, #128]	@ (80020e0 <UnlinkTimer+0x100>)
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	3315      	adds	r3, #21
 800206c:	4602      	mov	r2, r0
 800206e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002070:	7bbb      	ldrb	r3, [r7, #14]
 8002072:	2b06      	cmp	r3, #6
 8002074:	d013      	beq.n	800209e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002076:	79f9      	ldrb	r1, [r7, #7]
 8002078:	7bba      	ldrb	r2, [r7, #14]
 800207a:	4819      	ldr	r0, [pc, #100]	@ (80020e0 <UnlinkTimer+0x100>)
 800207c:	460b      	mov	r3, r1
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	440b      	add	r3, r1
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4403      	add	r3, r0
 8002086:	3314      	adds	r3, #20
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b2d8      	uxtb	r0, r3
 800208c:	4914      	ldr	r1, [pc, #80]	@ (80020e0 <UnlinkTimer+0x100>)
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	3314      	adds	r3, #20
 800209a:	4602      	mov	r2, r0
 800209c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800209e:	79fa      	ldrb	r2, [r7, #7]
 80020a0:	490f      	ldr	r1, [pc, #60]	@ (80020e0 <UnlinkTimer+0x100>)
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	330c      	adds	r3, #12
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80020b2:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <UnlinkTimer+0xf8>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b06      	cmp	r3, #6
 80020ba:	d107      	bne.n	80020cc <UnlinkTimer+0xec>
 80020bc:	79bb      	ldrb	r3, [r7, #6]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d104      	bne.n	80020cc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80020c2:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <UnlinkTimer+0x104>)
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295
 80020c8:	601a      	str	r2, [r3, #0]
  }

  return;
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
}
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	2000418c 	.word	0x2000418c
 80020dc:	2000418d 	.word	0x2000418d
 80020e0:	200040fc 	.word	0x200040fc
 80020e4:	20004190 	.word	0x20004190

080020e8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80020ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <ReturnTimeElapsed+0x70>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f6:	d026      	beq.n	8002146 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80020f8:	f7ff fe02 	bl	8001d00 <ReadRtcSsrValue>
 80020fc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80020fe:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <ReturnTimeElapsed+0x70>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	d805      	bhi.n	8002114 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002108:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <ReturnTimeElapsed+0x70>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	e00a      	b.n	800212a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002114:	4b11      	ldr	r3, [pc, #68]	@ (800215c <ReturnTimeElapsed+0x74>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002120:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <ReturnTimeElapsed+0x70>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4413      	add	r3, r2
 8002128:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800212a:	4b0d      	ldr	r3, [pc, #52]	@ (8002160 <ReturnTimeElapsed+0x78>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002138:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <ReturnTimeElapsed+0x7c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	40d3      	lsrs	r3, r2
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	e001      	b.n	800214a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	b29b      	uxth	r3, r3
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20004190 	.word	0x20004190
 800215c:	20004198 	.word	0x20004198
 8002160:	20004196 	.word	0x20004196
 8002164:	20004195 	.word	0x20004195

08002168 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d108      	bne.n	800218a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002178:	f7ff fdc2 	bl	8001d00 <ReadRtcSsrValue>
 800217c:	4603      	mov	r3, r0
 800217e:	4a21      	ldr	r2, [pc, #132]	@ (8002204 <RestartWakeupCounter+0x9c>)
 8002180:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002182:	2003      	movs	r0, #3
 8002184:	f004 fe7b 	bl	8006e7e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002188:	e039      	b.n	80021fe <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d803      	bhi.n	8002198 <RestartWakeupCounter+0x30>
 8002190:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <RestartWakeupCounter+0xa0>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d002      	beq.n	800219e <RestartWakeupCounter+0x36>
      Value -= 1;
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	3b01      	subs	r3, #1
 800219c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800219e:	bf00      	nop
 80021a0:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <RestartWakeupCounter+0xa4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f8      	beq.n	80021a0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80021ae:	4b17      	ldr	r3, [pc, #92]	@ (800220c <RestartWakeupCounter+0xa4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b15      	ldr	r3, [pc, #84]	@ (800220c <RestartWakeupCounter+0xa4>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80021be:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80021c0:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <RestartWakeupCounter+0xa8>)
 80021c2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80021c6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80021c8:	2003      	movs	r0, #3
 80021ca:	f004 fe66 	bl	8006e9a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80021ce:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <RestartWakeupCounter+0xac>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	0c1b      	lsrs	r3, r3, #16
 80021d4:	041b      	lsls	r3, r3, #16
 80021d6:	88fa      	ldrh	r2, [r7, #6]
 80021d8:	490e      	ldr	r1, [pc, #56]	@ (8002214 <RestartWakeupCounter+0xac>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80021de:	f7ff fd8f 	bl	8001d00 <ReadRtcSsrValue>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4a07      	ldr	r2, [pc, #28]	@ (8002204 <RestartWakeupCounter+0x9c>)
 80021e6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80021e8:	4b08      	ldr	r3, [pc, #32]	@ (800220c <RestartWakeupCounter+0xa4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	4b07      	ldr	r3, [pc, #28]	@ (800220c <RestartWakeupCounter+0xa4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021f6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80021f8:	f3af 8000 	nop.w
  return ;
 80021fc:	bf00      	nop
}
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20004190 	.word	0x20004190
 8002208:	20004195 	.word	0x20004195
 800220c:	200043e0 	.word	0x200043e0
 8002210:	58000800 	.word	0x58000800
 8002214:	40002800 	.word	0x40002800

08002218 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800221e:	4b45      	ldr	r3, [pc, #276]	@ (8002334 <RescheduleTimerList+0x11c>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800222a:	d107      	bne.n	800223c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800222c:	bf00      	nop
 800222e:	4b42      	ldr	r3, [pc, #264]	@ (8002338 <RescheduleTimerList+0x120>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f8      	bne.n	800222e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800223c:	4b3e      	ldr	r3, [pc, #248]	@ (8002338 <RescheduleTimerList+0x120>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	4b3d      	ldr	r3, [pc, #244]	@ (8002338 <RescheduleTimerList+0x120>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800224a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800224c:	4b3b      	ldr	r3, [pc, #236]	@ (800233c <RescheduleTimerList+0x124>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002252:	7bfa      	ldrb	r2, [r7, #15]
 8002254:	493a      	ldr	r1, [pc, #232]	@ (8002340 <RescheduleTimerList+0x128>)
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	440b      	add	r3, r1
 8002260:	3308      	adds	r3, #8
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002266:	f7ff ff3f 	bl	80020e8 <ReturnTimeElapsed>
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	429a      	cmp	r2, r3
 8002274:	d205      	bcs.n	8002282 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800227a:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <RescheduleTimerList+0x12c>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e04d      	b.n	800231e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	4a30      	ldr	r2, [pc, #192]	@ (8002348 <RescheduleTimerList+0x130>)
 8002286:	8812      	ldrh	r2, [r2, #0]
 8002288:	b292      	uxth	r2, r2
 800228a:	4413      	add	r3, r2
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	4293      	cmp	r3, r2
 8002292:	d906      	bls.n	80022a2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002294:	4b2c      	ldr	r3, [pc, #176]	@ (8002348 <RescheduleTimerList+0x130>)
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800229a:	4b2a      	ldr	r3, [pc, #168]	@ (8002344 <RescheduleTimerList+0x12c>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	e03d      	b.n	800231e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80022ac:	4b25      	ldr	r3, [pc, #148]	@ (8002344 <RescheduleTimerList+0x12c>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80022b2:	e034      	b.n	800231e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	4922      	ldr	r1, [pc, #136]	@ (8002340 <RescheduleTimerList+0x128>)
 80022b8:	4613      	mov	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	440b      	add	r3, r1
 80022c2:	3308      	adds	r3, #8
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d20a      	bcs.n	80022e2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	491c      	ldr	r1, [pc, #112]	@ (8002340 <RescheduleTimerList+0x128>)
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	3308      	adds	r3, #8
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e013      	b.n	800230a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	4916      	ldr	r1, [pc, #88]	@ (8002340 <RescheduleTimerList+0x128>)
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	440b      	add	r3, r1
 80022f0:	3308      	adds	r3, #8
 80022f2:	6819      	ldr	r1, [r3, #0]
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	1ac9      	subs	r1, r1, r3
 80022fa:	4811      	ldr	r0, [pc, #68]	@ (8002340 <RescheduleTimerList+0x128>)
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4403      	add	r3, r0
 8002306:	3308      	adds	r3, #8
 8002308:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	490c      	ldr	r1, [pc, #48]	@ (8002340 <RescheduleTimerList+0x128>)
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	3315      	adds	r3, #21
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	2b06      	cmp	r3, #6
 8002322:	d1c7      	bne.n	80022b4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002324:	89bb      	ldrh	r3, [r7, #12]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff1e 	bl	8002168 <RestartWakeupCounter>

  return ;
 800232c:	bf00      	nop
}
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40002800 	.word	0x40002800
 8002338:	200043e0 	.word	0x200043e0
 800233c:	2000418c 	.word	0x2000418c
 8002340:	200040fc 	.word	0x200040fc
 8002344:	20004194 	.word	0x20004194
 8002348:	2000419a 	.word	0x2000419a

0800234c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	@ 0x28
 8002350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002352:	f3ef 8310 	mrs	r3, PRIMASK
 8002356:	617b      	str	r3, [r7, #20]
  return(result);
 8002358:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800235c:	b672      	cpsid	i
}
 800235e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002360:	4b59      	ldr	r3, [pc, #356]	@ (80024c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	22ca      	movs	r2, #202	@ 0xca
 8002366:	625a      	str	r2, [r3, #36]	@ 0x24
 8002368:	4b57      	ldr	r3, [pc, #348]	@ (80024c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2253      	movs	r2, #83	@ 0x53
 800236e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002370:	4b55      	ldr	r3, [pc, #340]	@ (80024c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	4b54      	ldr	r3, [pc, #336]	@ (80024c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800237e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002380:	4b52      	ldr	r3, [pc, #328]	@ (80024cc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002388:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800238c:	4950      	ldr	r1, [pc, #320]	@ (80024d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	330c      	adds	r3, #12
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d16e      	bne.n	8002480 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80023a2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023a6:	494a      	ldr	r1, [pc, #296]	@ (80024d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	440b      	add	r3, r1
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80023b6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023ba:	4945      	ldr	r1, [pc, #276]	@ (80024d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	3310      	adds	r3, #16
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80023cc:	4b41      	ldr	r3, [pc, #260]	@ (80024d4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d04c      	beq.n	8002470 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80023d6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023da:	493d      	ldr	r1, [pc, #244]	@ (80024d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	440b      	add	r3, r1
 80023e6:	330d      	adds	r3, #13
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d124      	bne.n	800243a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80023f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023f4:	2101      	movs	r1, #1
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fdf2 	bl	8001fe0 <UnlinkTimer>
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f383 8810 	msr	PRIMASK, r3
}
 8002406:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002408:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800240c:	4930      	ldr	r1, [pc, #192]	@ (80024d0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	3304      	adds	r3, #4
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fa32 	bl	800288c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002428:	4b27      	ldr	r3, [pc, #156]	@ (80024c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	22ca      	movs	r2, #202	@ 0xca
 800242e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002430:	4b25      	ldr	r3, [pc, #148]	@ (80024c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2253      	movs	r2, #83	@ 0x53
 8002436:	625a      	str	r2, [r3, #36]	@ 0x24
 8002438:	e012      	b.n	8002460 <HW_TS_RTC_Wakeup_Handler+0x114>
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f383 8810 	msr	PRIMASK, r3
}
 8002444:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002446:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f99a 	bl	8002784 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002450:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	22ca      	movs	r2, #202	@ 0xca
 8002456:	625a      	str	r2, [r3, #36]	@ 0x24
 8002458:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2253      	movs	r2, #83	@ 0x53
 800245e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002460:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002464:	69fa      	ldr	r2, [r7, #28]
 8002466:	4619      	mov	r1, r3
 8002468:	69b8      	ldr	r0, [r7, #24]
 800246a:	f000 fa95 	bl	8002998 <HW_TS_RTC_Int_AppNot>
 800246e:	e022      	b.n	80024b6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002470:	f7ff fed2 	bl	8002218 <RescheduleTimerList>
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f383 8810 	msr	PRIMASK, r3
}
 800247e:	e01a      	b.n	80024b6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002480:	bf00      	nop
 8002482:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f8      	beq.n	8002482 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002490:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80024a0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80024a2:	4b0d      	ldr	r3, [pc, #52]	@ (80024d8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80024a4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f383 8810 	msr	PRIMASK, r3
}
 80024b4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024b6:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	22ff      	movs	r2, #255	@ 0xff
 80024bc:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80024be:	bf00      	nop
}
 80024c0:	3728      	adds	r7, #40	@ 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200043e0 	.word	0x200043e0
 80024cc:	2000418c 	.word	0x2000418c
 80024d0:	200040fc 	.word	0x200040fc
 80024d4:	20004194 	.word	0x20004194
 80024d8:	58000800 	.word	0x58000800

080024dc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002664 <HW_TS_Init+0x188>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	22ca      	movs	r2, #202	@ 0xca
 80024ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80024f0:	4b5c      	ldr	r3, [pc, #368]	@ (8002664 <HW_TS_Init+0x188>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2253      	movs	r2, #83	@ 0x53
 80024f6:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80024f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002668 <HW_TS_Init+0x18c>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a5a      	ldr	r2, [pc, #360]	@ (8002668 <HW_TS_Init+0x18c>)
 80024fe:	f043 0320 	orr.w	r3, r3, #32
 8002502:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002504:	4b58      	ldr	r3, [pc, #352]	@ (8002668 <HW_TS_Init+0x18c>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f1c3 0304 	rsb	r3, r3, #4
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b55      	ldr	r3, [pc, #340]	@ (800266c <HW_TS_Init+0x190>)
 8002518:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800251a:	4b53      	ldr	r3, [pc, #332]	@ (8002668 <HW_TS_Init+0x18c>)
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002522:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8002526:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	fa92 f2a2 	rbit	r2, r2
 800252e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	2a00      	cmp	r2, #0
 8002538:	d101      	bne.n	800253e <HW_TS_Init+0x62>
  {
    return 32U;
 800253a:	2220      	movs	r2, #32
 800253c:	e003      	b.n	8002546 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	fab2 f282 	clz	r2, r2
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	40d3      	lsrs	r3, r2
 8002548:	b2db      	uxtb	r3, r3
 800254a:	3301      	adds	r3, #1
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b48      	ldr	r3, [pc, #288]	@ (8002670 <HW_TS_Init+0x194>)
 8002550:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002552:	4b45      	ldr	r3, [pc, #276]	@ (8002668 <HW_TS_Init+0x18c>)
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	b29b      	uxth	r3, r3
 8002558:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800255c:	b29b      	uxth	r3, r3
 800255e:	3301      	adds	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	4b44      	ldr	r3, [pc, #272]	@ (8002674 <HW_TS_Init+0x198>)
 8002564:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002566:	4b43      	ldr	r3, [pc, #268]	@ (8002674 <HW_TS_Init+0x198>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	3b01      	subs	r3, #1
 800256c:	4a40      	ldr	r2, [pc, #256]	@ (8002670 <HW_TS_Init+0x194>)
 800256e:	7812      	ldrb	r2, [r2, #0]
 8002570:	fb02 f303 	mul.w	r3, r2, r3
 8002574:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002578:	4a3c      	ldr	r2, [pc, #240]	@ (800266c <HW_TS_Init+0x190>)
 800257a:	7812      	ldrb	r2, [r2, #0]
 800257c:	40d3      	lsrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002586:	4293      	cmp	r3, r2
 8002588:	d904      	bls.n	8002594 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800258a:	4b3b      	ldr	r3, [pc, #236]	@ (8002678 <HW_TS_Init+0x19c>)
 800258c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002590:	801a      	strh	r2, [r3, #0]
 8002592:	e003      	b.n	800259c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	b29a      	uxth	r2, r3
 8002598:	4b37      	ldr	r3, [pc, #220]	@ (8002678 <HW_TS_Init+0x19c>)
 800259a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800259c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80025a0:	f7ff fb9c 	bl	8001cdc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80025a4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80025a8:	f7ff fb84 	bl	8001cb4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d13d      	bne.n	800262e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80025b2:	4b32      	ldr	r3, [pc, #200]	@ (800267c <HW_TS_Init+0x1a0>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80025b8:	4b31      	ldr	r3, [pc, #196]	@ (8002680 <HW_TS_Init+0x1a4>)
 80025ba:	f04f 32ff 	mov.w	r2, #4294967295
 80025be:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80025c0:	2300      	movs	r3, #0
 80025c2:	77fb      	strb	r3, [r7, #31]
 80025c4:	e00c      	b.n	80025e0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80025c6:	7ffa      	ldrb	r2, [r7, #31]
 80025c8:	492e      	ldr	r1, [pc, #184]	@ (8002684 <HW_TS_Init+0x1a8>)
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	330c      	adds	r3, #12
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80025da:	7ffb      	ldrb	r3, [r7, #31]
 80025dc:	3301      	adds	r3, #1
 80025de:	77fb      	strb	r3, [r7, #31]
 80025e0:	7ffb      	ldrb	r3, [r7, #31]
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	d9ef      	bls.n	80025c6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80025e6:	4b28      	ldr	r3, [pc, #160]	@ (8002688 <HW_TS_Init+0x1ac>)
 80025e8:	2206      	movs	r2, #6
 80025ea:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80025ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <HW_TS_Init+0x188>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <HW_TS_Init+0x188>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025fa:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80025fc:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <HW_TS_Init+0x188>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <HW_TS_Init+0x188>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800260c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800260e:	4b1f      	ldr	r3, [pc, #124]	@ (800268c <HW_TS_Init+0x1b0>)
 8002610:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002614:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002616:	2003      	movs	r0, #3
 8002618:	f004 fc3f 	bl	8006e9a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800261c:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <HW_TS_Init+0x188>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <HW_TS_Init+0x188>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	e009      	b.n	8002642 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HW_TS_Init+0x188>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800263c:	2003      	movs	r0, #3
 800263e:	f004 fc1e 	bl	8006e7e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002642:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <HW_TS_Init+0x188>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	22ff      	movs	r2, #255	@ 0xff
 8002648:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800264a:	2200      	movs	r2, #0
 800264c:	2103      	movs	r1, #3
 800264e:	2003      	movs	r0, #3
 8002650:	f004 fbd3 	bl	8006dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002654:	2003      	movs	r0, #3
 8002656:	f004 fbea 	bl	8006e2e <HAL_NVIC_EnableIRQ>

  return;
 800265a:	bf00      	nop
}
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200043e0 	.word	0x200043e0
 8002668:	40002800 	.word	0x40002800
 800266c:	20004195 	.word	0x20004195
 8002670:	20004196 	.word	0x20004196
 8002674:	20004198 	.word	0x20004198
 8002678:	2000419a 	.word	0x2000419a
 800267c:	20004194 	.word	0x20004194
 8002680:	20004190 	.word	0x20004190
 8002684:	200040fc 	.word	0x200040fc
 8002688:	2000418c 	.word	0x2000418c
 800268c:	58000800 	.word	0x58000800

08002690 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002690:	b480      	push	{r7}
 8002692:	b08b      	sub	sp, #44	@ 0x2c
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a6:	f3ef 8310 	mrs	r3, PRIMASK
 80026aa:	61fb      	str	r3, [r7, #28]
  return(result);
 80026ac:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80026ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80026b0:	b672      	cpsid	i
}
 80026b2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80026b4:	e004      	b.n	80026c0 <HW_TS_Create+0x30>
  {
    loop++;
 80026b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80026ba:	3301      	adds	r3, #1
 80026bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80026c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80026c4:	2b05      	cmp	r3, #5
 80026c6:	d80c      	bhi.n	80026e2 <HW_TS_Create+0x52>
 80026c8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80026cc:	492c      	ldr	r1, [pc, #176]	@ (8002780 <HW_TS_Create+0xf0>)
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	330c      	adds	r3, #12
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1e9      	bne.n	80026b6 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80026e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d038      	beq.n	800275c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80026ea:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80026ee:	4924      	ldr	r1, [pc, #144]	@ (8002780 <HW_TS_Create+0xf0>)
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	330c      	adds	r3, #12
 80026fc:	2201      	movs	r2, #1
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	f383 8810 	msr	PRIMASK, r3
}
 800270a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800270c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002710:	491b      	ldr	r1, [pc, #108]	@ (8002780 <HW_TS_Create+0xf0>)
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	440b      	add	r3, r1
 800271c:	3310      	adds	r3, #16
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002722:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002726:	4916      	ldr	r1, [pc, #88]	@ (8002780 <HW_TS_Create+0xf0>)
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	330d      	adds	r3, #13
 8002734:	79fa      	ldrb	r2, [r7, #7]
 8002736:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002738:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800273c:	4910      	ldr	r1, [pc, #64]	@ (8002780 <HW_TS_Create+0xf0>)
 800273e:	4613      	mov	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002752:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002754:	2300      	movs	r3, #0
 8002756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800275a:	e008      	b.n	800276e <HW_TS_Create+0xde>
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f383 8810 	msr	PRIMASK, r3
}
 8002766:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 800276e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002772:	4618      	mov	r0, r3
 8002774:	372c      	adds	r7, #44	@ 0x2c
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	200040fc 	.word	0x200040fc

08002784 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800278e:	f3ef 8310 	mrs	r3, PRIMASK
 8002792:	60fb      	str	r3, [r7, #12]
  return(result);
 8002794:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002796:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002798:	b672      	cpsid	i
}
 800279a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800279c:	2003      	movs	r0, #3
 800279e:	f004 fb54 	bl	8006e4a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80027a2:	4b34      	ldr	r3, [pc, #208]	@ (8002874 <HW_TS_Stop+0xf0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	22ca      	movs	r2, #202	@ 0xca
 80027a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80027aa:	4b32      	ldr	r3, [pc, #200]	@ (8002874 <HW_TS_Stop+0xf0>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2253      	movs	r2, #83	@ 0x53
 80027b0:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80027b2:	79fa      	ldrb	r2, [r7, #7]
 80027b4:	4930      	ldr	r1, [pc, #192]	@ (8002878 <HW_TS_Stop+0xf4>)
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	330c      	adds	r3, #12
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d142      	bne.n	8002850 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fc06 	bl	8001fe0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80027d4:	4b29      	ldr	r3, [pc, #164]	@ (800287c <HW_TS_Stop+0xf8>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80027da:	7cfb      	ldrb	r3, [r7, #19]
 80027dc:	2b06      	cmp	r3, #6
 80027de:	d12f      	bne.n	8002840 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80027e0:	4b27      	ldr	r3, [pc, #156]	@ (8002880 <HW_TS_Stop+0xfc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ec:	d107      	bne.n	80027fe <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80027ee:	bf00      	nop
 80027f0:	4b20      	ldr	r3, [pc, #128]	@ (8002874 <HW_TS_Stop+0xf0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f8      	bne.n	80027f0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80027fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <HW_TS_Stop+0xf0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <HW_TS_Stop+0xf0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800280c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800280e:	bf00      	nop
 8002810:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <HW_TS_Stop+0xf0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f8      	beq.n	8002810 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <HW_TS_Stop+0xf0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4b13      	ldr	r3, [pc, #76]	@ (8002874 <HW_TS_Stop+0xf0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800282e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002830:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <HW_TS_Stop+0x100>)
 8002832:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002836:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002838:	2003      	movs	r0, #3
 800283a:	f004 fb2e 	bl	8006e9a <HAL_NVIC_ClearPendingIRQ>
 800283e:	e007      	b.n	8002850 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HW_TS_Stop+0x104>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	7cfa      	ldrb	r2, [r7, #19]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800284c:	f7ff fce4 	bl	8002218 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002850:	4b08      	ldr	r3, [pc, #32]	@ (8002874 <HW_TS_Stop+0xf0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	22ff      	movs	r2, #255	@ 0xff
 8002856:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002858:	2003      	movs	r0, #3
 800285a:	f004 fae8 	bl	8006e2e <HAL_NVIC_EnableIRQ>
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f383 8810 	msr	PRIMASK, r3
}
 8002868:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800286a:	bf00      	nop
}
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200043e0 	.word	0x200043e0
 8002878:	200040fc 	.word	0x200040fc
 800287c:	2000418c 	.word	0x2000418c
 8002880:	40002800 	.word	0x40002800
 8002884:	58000800 	.word	0x58000800
 8002888:	2000418d 	.word	0x2000418d

0800288c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002898:	79fa      	ldrb	r2, [r7, #7]
 800289a:	493b      	ldr	r1, [pc, #236]	@ (8002988 <HW_TS_Start+0xfc>)
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	440b      	add	r3, r1
 80028a6:	330c      	adds	r3, #12
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d103      	bne.n	80028b8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff66 	bl	8002784 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b8:	f3ef 8310 	mrs	r3, PRIMASK
 80028bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80028be:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80028c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80028c2:	b672      	cpsid	i
}
 80028c4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80028c6:	2003      	movs	r0, #3
 80028c8:	f004 fabf 	bl	8006e4a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80028cc:	4b2f      	ldr	r3, [pc, #188]	@ (800298c <HW_TS_Start+0x100>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	22ca      	movs	r2, #202	@ 0xca
 80028d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80028d4:	4b2d      	ldr	r3, [pc, #180]	@ (800298c <HW_TS_Start+0x100>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2253      	movs	r2, #83	@ 0x53
 80028da:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80028dc:	79fa      	ldrb	r2, [r7, #7]
 80028de:	492a      	ldr	r1, [pc, #168]	@ (8002988 <HW_TS_Start+0xfc>)
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	440b      	add	r3, r1
 80028ea:	330c      	adds	r3, #12
 80028ec:	2202      	movs	r2, #2
 80028ee:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80028f0:	79fa      	ldrb	r2, [r7, #7]
 80028f2:	4925      	ldr	r1, [pc, #148]	@ (8002988 <HW_TS_Start+0xfc>)
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	440b      	add	r3, r1
 80028fe:	3308      	adds	r3, #8
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002904:	79fa      	ldrb	r2, [r7, #7]
 8002906:	4920      	ldr	r1, [pc, #128]	@ (8002988 <HW_TS_Start+0xfc>)
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	440b      	add	r3, r1
 8002912:	3304      	adds	r3, #4
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fab6 	bl	8001e8c <linkTimer>
 8002920:	4603      	mov	r3, r0
 8002922:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002924:	4b1a      	ldr	r3, [pc, #104]	@ (8002990 <HW_TS_Start+0x104>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800292a:	4b1a      	ldr	r3, [pc, #104]	@ (8002994 <HW_TS_Start+0x108>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	7c7a      	ldrb	r2, [r7, #17]
 8002932:	429a      	cmp	r2, r3
 8002934:	d002      	beq.n	800293c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002936:	f7ff fc6f 	bl	8002218 <RescheduleTimerList>
 800293a:	e013      	b.n	8002964 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800293c:	79fa      	ldrb	r2, [r7, #7]
 800293e:	4912      	ldr	r1, [pc, #72]	@ (8002988 <HW_TS_Start+0xfc>)
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	3308      	adds	r3, #8
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	8a7b      	ldrh	r3, [r7, #18]
 8002950:	79fa      	ldrb	r2, [r7, #7]
 8002952:	1ac9      	subs	r1, r1, r3
 8002954:	480c      	ldr	r0, [pc, #48]	@ (8002988 <HW_TS_Start+0xfc>)
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4403      	add	r3, r0
 8002960:	3308      	adds	r3, #8
 8002962:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002964:	4b09      	ldr	r3, [pc, #36]	@ (800298c <HW_TS_Start+0x100>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	22ff      	movs	r2, #255	@ 0xff
 800296a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800296c:	2003      	movs	r0, #3
 800296e:	f004 fa5e 	bl	8006e2e <HAL_NVIC_EnableIRQ>
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f383 8810 	msr	PRIMASK, r3
}
 800297c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800297e:	bf00      	nop
}
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200040fc 	.word	0x200040fc
 800298c:	200043e0 	.word	0x200043e0
 8002990:	2000418c 	.word	0x2000418c
 8002994:	2000418d 	.word	0x2000418d

08002998 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	460b      	mov	r3, r1
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4798      	blx	r3

  return;
 80029aa:	bf00      	nop
}
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HW_UART_Init>:
#endif

volatile struct APC1_Device_Settings *devSettings;

void HW_UART_Init(hw_uart_id_t hw_uart_id)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	71fb      	strb	r3, [r7, #7]
	switch (hw_uart_id)
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d102      	bne.n	80029c8 <HW_UART_Init+0x16>
	{
#if (CFG_HW_USART1_ENABLED == 1)
		case hw_uart1:
			MX_USART1_UART_Init();
 80029c2:	f000 fa27 	bl	8002e14 <MX_USART1_UART_Init>
			break;
 80029c6:	e000      	b.n	80029ca <HW_UART_Init+0x18>
			MX_LPUART1_UART_Init();
			break;
#endif

		default:
			break;
 80029c8:	bf00      	nop
		}
	return;
 80029ca:	bf00      	nop
}
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HW_UART_Receive_IT>:

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	4603      	mov	r3, r0
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	4613      	mov	r3, r2
 80029e4:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10c      	bne.n	8002a06 <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 80029ec:	4a08      	ldr	r2, [pc, #32]	@ (8002a10 <HW_UART_Receive_IT+0x3c>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b08      	ldr	r3, [pc, #32]	@ (8002a14 <HW_UART_Receive_IT+0x40>)
 80029f4:	4a08      	ldr	r2, [pc, #32]	@ (8002a18 <HW_UART_Receive_IT+0x44>)
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	89bb      	ldrh	r3, [r7, #12]
 80029fa:	461a      	mov	r2, r3
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	4805      	ldr	r0, [pc, #20]	@ (8002a14 <HW_UART_Receive_IT+0x40>)
 8002a00:	f008 f996 	bl	800ad30 <HAL_UART_Receive_IT>
            break;
 8002a04:	e000      	b.n	8002a08 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002a06:	bf00      	nop
    }

    return;
 8002a08:	bf00      	nop
}
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	2000419c 	.word	0x2000419c
 8002a14:	20004278 	.word	0x20004278
 8002a18:	40013800 	.word	0x40013800

08002a1c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607b      	str	r3, [r7, #4]
 8002a26:	4603      	mov	r3, r0
 8002a28:	73fb      	strb	r3, [r7, #15]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002a32:	2300      	movs	r3, #0
 8002a34:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10e      	bne.n	8002a5a <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002a3c:	4a17      	ldr	r2, [pc, #92]	@ (8002a9c <HW_UART_Transmit_DMA+0x80>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002a42:	4b17      	ldr	r3, [pc, #92]	@ (8002aa0 <HW_UART_Transmit_DMA+0x84>)
 8002a44:	4a17      	ldr	r2, [pc, #92]	@ (8002aa4 <HW_UART_Transmit_DMA+0x88>)
 8002a46:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002a48:	89bb      	ldrh	r3, [r7, #12]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	4814      	ldr	r0, [pc, #80]	@ (8002aa0 <HW_UART_Transmit_DMA+0x84>)
 8002a50:	f008 f9ba 	bl	800adc8 <HAL_UART_Transmit_DMA>
 8002a54:	4603      	mov	r3, r0
 8002a56:	75fb      	strb	r3, [r7, #23]
            break;
 8002a58:	e000      	b.n	8002a5c <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002a5a:	bf00      	nop
    }

    switch (hal_status)
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d816      	bhi.n	8002a90 <HW_UART_Transmit_DMA+0x74>
 8002a62:	a201      	add	r2, pc, #4	@ (adr r2, 8002a68 <HW_UART_Transmit_DMA+0x4c>)
 8002a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a68:	08002a79 	.word	0x08002a79
 8002a6c:	08002a7f 	.word	0x08002a7f
 8002a70:	08002a85 	.word	0x08002a85
 8002a74:	08002a8b 	.word	0x08002a8b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	75bb      	strb	r3, [r7, #22]
            break;
 8002a7c:	e009      	b.n	8002a92 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75bb      	strb	r3, [r7, #22]
            break;
 8002a82:	e006      	b.n	8002a92 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002a84:	2302      	movs	r3, #2
 8002a86:	75bb      	strb	r3, [r7, #22]
            break;
 8002a88:	e003      	b.n	8002a92 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	75bb      	strb	r3, [r7, #22]
            break;
 8002a8e:	e000      	b.n	8002a92 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002a90:	bf00      	nop
    }

    return hw_status;
 8002a92:	7dbb      	ldrb	r3, [r7, #22]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	200041a0 	.word	0x200041a0
 8002aa0:	20004278 	.word	0x20004278
 8002aa4:	40013800 	.word	0x40013800

08002aa8 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	devSettings = APC1_Get_Device_Settings();
 8002ab0:	f000 fe96 	bl	80037e0 <APC1_Get_Device_Settings>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4a13      	ldr	r2, [pc, #76]	@ (8002b04 <HAL_UART_RxCpltCallback+0x5c>)
 8002ab8:	6013      	str	r3, [r2, #0]
    switch ((uint32_t)huart->Instance)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a12      	ldr	r2, [pc, #72]	@ (8002b08 <HAL_UART_RxCpltCallback+0x60>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00a      	beq.n	8002ada <HAL_UART_RxCpltCallback+0x32>
 8002ac4:	4a11      	ldr	r2, [pc, #68]	@ (8002b0c <HAL_UART_RxCpltCallback+0x64>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d112      	bne.n	8002af0 <HAL_UART_RxCpltCallback+0x48>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002aca:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <HAL_UART_RxCpltCallback+0x68>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d010      	beq.n	8002af4 <HAL_UART_RxCpltCallback+0x4c>
            {
                HW_huart1RxCb();
 8002ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b10 <HAL_UART_RxCpltCallback+0x68>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4798      	blx	r3
            }
            break;
 8002ad8:	e00c      	b.n	8002af4 <HAL_UART_RxCpltCallback+0x4c>
#endif

// #if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
        	if (huart == devSettings->sensor_uart) {
 8002ada:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <HAL_UART_RxCpltCallback+0x5c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d108      	bne.n	8002af8 <HAL_UART_RxCpltCallback+0x50>
        		devSettings->received_response = 1;
 8002ae6:	4b07      	ldr	r3, [pc, #28]	@ (8002b04 <HAL_UART_RxCpltCallback+0x5c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2201      	movs	r2, #1
 8002aec:	605a      	str	r2, [r3, #4]
        	}
//            if(HW_hlpuart1RxCb)
//            {
//                HW_hlpuart1RxCb();
//            }
            break;
 8002aee:	e003      	b.n	8002af8 <HAL_UART_RxCpltCallback+0x50>
// #endif

        default:
            break;
 8002af0:	bf00      	nop
 8002af2:	e002      	b.n	8002afa <HAL_UART_RxCpltCallback+0x52>
            break;
 8002af4:	bf00      	nop
 8002af6:	e000      	b.n	8002afa <HAL_UART_RxCpltCallback+0x52>
            break;
 8002af8:	bf00      	nop
    }

    return;
 8002afa:	bf00      	nop
}
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200041a4 	.word	0x200041a4
 8002b08:	40008000 	.word	0x40008000
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	2000419c 	.word	0x2000419c

08002b14 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <HAL_UART_TxCpltCallback+0x34>)
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d107      	bne.n	8002b38 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002b28:	4b08      	ldr	r3, [pc, #32]	@ (8002b4c <HAL_UART_TxCpltCallback+0x38>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002b30:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_UART_TxCpltCallback+0x38>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4798      	blx	r3
            }
            break;
 8002b36:	e001      	b.n	8002b3c <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002b38:	bf00      	nop
 8002b3a:	e000      	b.n	8002b3e <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002b3c:	bf00      	nop
    }

    return;
 8002b3e:	bf00      	nop
}
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40013800 	.word	0x40013800
 8002b4c:	200041a0 	.word	0x200041a0

08002b50 <LL_RCC_LSE_SetDriveCapability>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b60:	f023 0218 	bic.w	r2, r3, #24
 8002b64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_AHB1_GRP1_EnableClock>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <LL_AHB2_GRP1_EnableClock>:
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002be4:	f003 ff30 	bl	8006a48 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002be8:	f7fe fbf4 	bl	80013d4 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bec:	f000 f834 	bl	8002c58 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002bf0:	f000 f890 	bl	8002d14 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8002bf4:	f000 f8ae 	bl	8002d54 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bf8:	f000 f9ca 	bl	8002f90 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bfc:	f000 f9aa 	bl	8002f54 <MX_DMA_Init>
  MX_RF_Init();
 8002c00:	f000 f956 	bl	8002eb0 <MX_RF_Init>
  MX_RTC_Init();
 8002c04:	f000 f972 	bl	8002eec <MX_RTC_Init>
  MX_RNG_Init();
 8002c08:	f000 f95a 	bl	8002ec0 <MX_RNG_Init>
  MX_LPUART1_UART_Init();
 8002c0c:	f000 f8b6 	bl	8002d7c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Enable CRC clock */
  __HAL_RCC_CRC_CLK_ENABLE();
 8002c10:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002c14:	f7ff ffb2 	bl	8002b7c <LL_AHB1_GRP1_EnableClock>
  MX_TIM2_Init();
 8002c18:	f000 f9e6 	bl	8002fe8 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002c1c:	f7fe fbe8 	bl	80013f0 <MX_APPE_Init>
  if (APC1_Init_Sensor(&hlpuart1) != APC1_OK) {
 8002c20:	480a      	ldr	r0, [pc, #40]	@ (8002c4c <main+0x6c>)
 8002c22:	f000 fdb7 	bl	8003794 <APC1_Init_Sensor>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <main+0x50>
	  Error_Handler();
 8002c2c:	f000 fa52 	bl	80030d4 <Error_Handler>
  }
  dimmer = DC_CreateControl(&htim2, TIM_CHANNEL_1);
 8002c30:	2100      	movs	r1, #0
 8002c32:	4807      	ldr	r0, [pc, #28]	@ (8002c50 <main+0x70>)
 8002c34:	f000 fdde 	bl	80037f4 <DC_CreateControl>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4a06      	ldr	r2, [pc, #24]	@ (8002c54 <main+0x74>)
 8002c3c:	6013      	str	r3, [r2, #0]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4803      	ldr	r0, [pc, #12]	@ (8002c50 <main+0x70>)
 8002c42:	f007 f93d 	bl	8009ec0 <HAL_TIM_PWM_Start>
  // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);

	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002c46:	f7fe fe35 	bl	80018b4 <MX_APPE_Process>
 8002c4a:	e7fc      	b.n	8002c46 <main+0x66>
 8002c4c:	200041e4 	.word	0x200041e4
 8002c50:	20004404 	.word	0x20004404
 8002c54:	20004450 	.word	0x20004450

08002c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b09a      	sub	sp, #104	@ 0x68
 8002c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c5e:	f107 0320 	add.w	r3, r7, #32
 8002c62:	2248      	movs	r2, #72	@ 0x48
 8002c64:	2100      	movs	r1, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f023 ffb2 	bl	8026bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	611a      	str	r2, [r3, #16]
 8002c7a:	615a      	str	r2, [r3, #20]
 8002c7c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002c7e:	f005 f8a9 	bl	8007dd4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c82:	2000      	movs	r0, #0
 8002c84:	f7ff ff64 	bl	8002b50 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c88:	4b21      	ldr	r3, [pc, #132]	@ (8002d10 <SystemClock_Config+0xb8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c90:	4a1f      	ldr	r2, [pc, #124]	@ (8002d10 <SystemClock_Config+0xb8>)
 8002c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	4b1d      	ldr	r3, [pc, #116]	@ (8002d10 <SystemClock_Config+0xb8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002ca4:	2347      	movs	r3, #71	@ 0x47
 8002ca6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ca8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cbc:	2340      	movs	r3, #64	@ 0x40
 8002cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc4:	f107 0320 	add.w	r3, r7, #32
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f005 fc17 	bl	80084fc <HAL_RCC_OscConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002cd4:	f000 f9fe 	bl	80030d4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002cd8:	236f      	movs	r3, #111	@ 0x6f
 8002cda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f005 ff73 	bl	8008be4 <HAL_RCC_ClockConfig>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002d04:	f000 f9e6 	bl	80030d4 <Error_Handler>
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3768      	adds	r7, #104	@ 0x68
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	58000400 	.word	0x58000400

08002d14 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b094      	sub	sp, #80	@ 0x50
 8002d18:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d1a:	463b      	mov	r3, r7
 8002d1c:	2250      	movs	r2, #80	@ 0x50
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f023 ff55 	bl	8026bd0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002d26:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002d2a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002d2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d30:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002d32:	2302      	movs	r3, #2
 8002d34:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002d36:	2310      	movs	r3, #16
 8002d38:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d3a:	463b      	mov	r3, r7
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f006 fb8e 	bl	800945e <HAL_RCCEx_PeriphCLKConfig>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002d48:	f000 f9c4 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002d4c:	bf00      	nop
 8002d4e:	3750      	adds	r7, #80	@ 0x50
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002d58:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <MX_IPCC_Init+0x20>)
 8002d5a:	4a07      	ldr	r2, [pc, #28]	@ (8002d78 <MX_IPCC_Init+0x24>)
 8002d5c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002d5e:	4805      	ldr	r0, [pc, #20]	@ (8002d74 <MX_IPCC_Init+0x20>)
 8002d60:	f004 ffb2 	bl	8007cc8 <HAL_IPCC_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002d6a:	f000 f9b3 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	200041a8 	.word	0x200041a8
 8002d78:	58000c00 	.word	0x58000c00

08002d7c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002d80:	4b22      	ldr	r3, [pc, #136]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002d82:	4a23      	ldr	r2, [pc, #140]	@ (8002e10 <MX_LPUART1_UART_Init+0x94>)
 8002d84:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002d86:	4b21      	ldr	r3, [pc, #132]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002d88:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002d8c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002d94:	4b1d      	ldr	r3, [pc, #116]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002da0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002da2:	220c      	movs	r2, #12
 8002da4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da6:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dac:	4b17      	ldr	r3, [pc, #92]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002db2:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002db8:	4b14      	ldr	r3, [pc, #80]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002dbe:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002dc4:	4811      	ldr	r0, [pc, #68]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002dc6:	f007 ff63 	bl	800ac90 <HAL_UART_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002dd0:	f000 f980 	bl	80030d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	480d      	ldr	r0, [pc, #52]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002dd8:	f009 fff0 	bl	800cdbc <HAL_UARTEx_SetTxFifoThreshold>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002de2:	f000 f977 	bl	80030d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002de6:	2100      	movs	r1, #0
 8002de8:	4808      	ldr	r0, [pc, #32]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002dea:	f00a f825 	bl	800ce38 <HAL_UARTEx_SetRxFifoThreshold>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002df4:	f000 f96e 	bl	80030d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002df8:	4804      	ldr	r0, [pc, #16]	@ (8002e0c <MX_LPUART1_UART_Init+0x90>)
 8002dfa:	f009 ffa6 	bl	800cd4a <HAL_UARTEx_DisableFifoMode>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002e04:	f000 f966 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002e08:	bf00      	nop
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	200041e4 	.word	0x200041e4
 8002e10:	40008000 	.word	0x40008000

08002e14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e18:	4b23      	ldr	r3, [pc, #140]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e1a:	4a24      	ldr	r2, [pc, #144]	@ (8002eac <MX_USART1_UART_Init+0x98>)
 8002e1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e1e:	4b22      	ldr	r3, [pc, #136]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e26:	4b20      	ldr	r3, [pc, #128]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e3a:	220c      	movs	r2, #12
 8002e3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002e44:	4b18      	ldr	r3, [pc, #96]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e46:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002e4a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e52:	4b15      	ldr	r3, [pc, #84]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e58:	4b13      	ldr	r3, [pc, #76]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e5e:	4812      	ldr	r0, [pc, #72]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e60:	f007 ff16 	bl	800ac90 <HAL_UART_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002e6a:	f000 f933 	bl	80030d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e6e:	2100      	movs	r1, #0
 8002e70:	480d      	ldr	r0, [pc, #52]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e72:	f009 ffa3 	bl	800cdbc <HAL_UARTEx_SetTxFifoThreshold>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002e7c:	f000 f92a 	bl	80030d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002e80:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8002e84:	4808      	ldr	r0, [pc, #32]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e86:	f009 ffd7 	bl	800ce38 <HAL_UARTEx_SetRxFifoThreshold>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8002e90:	f000 f920 	bl	80030d4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002e94:	4804      	ldr	r0, [pc, #16]	@ (8002ea8 <MX_USART1_UART_Init+0x94>)
 8002e96:	f009 ff1d 	bl	800ccd4 <HAL_UARTEx_EnableFifoMode>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8002ea0:	f000 f918 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20004278 	.word	0x20004278
 8002eac:	40013800 	.word	0x40013800

08002eb0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002ec4:	4b07      	ldr	r3, [pc, #28]	@ (8002ee4 <MX_RNG_Init+0x24>)
 8002ec6:	4a08      	ldr	r2, [pc, #32]	@ (8002ee8 <MX_RNG_Init+0x28>)
 8002ec8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <MX_RNG_Init+0x24>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002ed0:	4804      	ldr	r0, [pc, #16]	@ (8002ee4 <MX_RNG_Init+0x24>)
 8002ed2:	f006 fd4b 	bl	800996c <HAL_RNG_Init>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002edc:	f000 f8fa 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	200043cc 	.word	0x200043cc
 8002ee8:	58001000 	.word	0x58001000

08002eec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ef0:	4b16      	ldr	r3, [pc, #88]	@ (8002f4c <MX_RTC_Init+0x60>)
 8002ef2:	4a17      	ldr	r2, [pc, #92]	@ (8002f50 <MX_RTC_Init+0x64>)
 8002ef4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ef6:	4b15      	ldr	r3, [pc, #84]	@ (8002f4c <MX_RTC_Init+0x60>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002efc:	4b13      	ldr	r3, [pc, #76]	@ (8002f4c <MX_RTC_Init+0x60>)
 8002efe:	220f      	movs	r2, #15
 8002f00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002f02:	4b12      	ldr	r3, [pc, #72]	@ (8002f4c <MX_RTC_Init+0x60>)
 8002f04:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002f08:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f0a:	4b10      	ldr	r3, [pc, #64]	@ (8002f4c <MX_RTC_Init+0x60>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f10:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <MX_RTC_Init+0x60>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f16:	4b0d      	ldr	r3, [pc, #52]	@ (8002f4c <MX_RTC_Init+0x60>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <MX_RTC_Init+0x60>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f22:	480a      	ldr	r0, [pc, #40]	@ (8002f4c <MX_RTC_Init+0x60>)
 8002f24:	f006 fd58 	bl	80099d8 <HAL_RTC_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002f2e:	f000 f8d1 	bl	80030d4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002f32:	2200      	movs	r2, #0
 8002f34:	2100      	movs	r1, #0
 8002f36:	4805      	ldr	r0, [pc, #20]	@ (8002f4c <MX_RTC_Init+0x60>)
 8002f38:	f006 fe4e 	bl	8009bd8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002f42:	f000 f8c7 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	200043e0 	.word	0x200043e0
 8002f50:	40002800 	.word	0x40002800

08002f54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002f58:	2004      	movs	r0, #4
 8002f5a:	f7ff fe0f 	bl	8002b7c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f7ff fe0c 	bl	8002b7c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f64:	2002      	movs	r0, #2
 8002f66:	f7ff fe09 	bl	8002b7c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	210f      	movs	r1, #15
 8002f6e:	200e      	movs	r0, #14
 8002f70:	f003 ff43 	bl	8006dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002f74:	200e      	movs	r0, #14
 8002f76:	f003 ff5a 	bl	8006e2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	210f      	movs	r1, #15
 8002f7e:	203a      	movs	r0, #58	@ 0x3a
 8002f80:	f003 ff3b 	bl	8006dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002f84:	203a      	movs	r0, #58	@ 0x3a
 8002f86:	f003 ff52 	bl	8006e2e <HAL_NVIC_EnableIRQ>

}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f96:	2004      	movs	r0, #4
 8002f98:	f7ff fe09 	bl	8002bae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	f7ff fe06 	bl	8002bae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa2:	2002      	movs	r0, #2
 8002fa4:	f7ff fe03 	bl	8002bae <LL_AHB2_GRP1_EnableClock>

  // Configure GPIO pin output level
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2101      	movs	r1, #1
 8002fac:	480d      	ldr	r0, [pc, #52]	@ (8002fe4 <MX_GPIO_Init+0x54>)
 8002fae:	f004 fe37 	bl	8007c20 <HAL_GPIO_WritePin>

  // Configure GPIO pin PC0 (PA0 on board)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb2:	1d3b      	adds	r3, r7, #4
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fd0:	1d3b      	adds	r3, r7, #4
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4803      	ldr	r0, [pc, #12]	@ (8002fe4 <MX_GPIO_Init+0x54>)
 8002fd6:	f004 fc9b 	bl	8007910 <HAL_GPIO_Init>

}
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	48000800 	.word	0x48000800

08002fe8 <MX_TIM2_Init>:

/* USER CODE BEGIN 4 */

static void MX_TIM2_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08e      	sub	sp, #56	@ 0x38
 8002fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	605a      	str	r2, [r3, #4]
 8002ff8:	609a      	str	r2, [r3, #8]
 8002ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003008:	463b      	mov	r3, r7
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	60da      	str	r2, [r3, #12]
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	615a      	str	r2, [r3, #20]
 8003018:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800301a:	4b2d      	ldr	r3, [pc, #180]	@ (80030d0 <MX_TIM2_Init+0xe8>)
 800301c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003020:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8003022:	4b2b      	ldr	r3, [pc, #172]	@ (80030d0 <MX_TIM2_Init+0xe8>)
 8003024:	221f      	movs	r2, #31
 8003026:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003028:	4b29      	ldr	r3, [pc, #164]	@ (80030d0 <MX_TIM2_Init+0xe8>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 800302e:	4b28      	ldr	r3, [pc, #160]	@ (80030d0 <MX_TIM2_Init+0xe8>)
 8003030:	22c7      	movs	r2, #199	@ 0xc7
 8003032:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003034:	4b26      	ldr	r3, [pc, #152]	@ (80030d0 <MX_TIM2_Init+0xe8>)
 8003036:	2200      	movs	r2, #0
 8003038:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800303a:	4b25      	ldr	r3, [pc, #148]	@ (80030d0 <MX_TIM2_Init+0xe8>)
 800303c:	2200      	movs	r2, #0
 800303e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003040:	4823      	ldr	r0, [pc, #140]	@ (80030d0 <MX_TIM2_Init+0xe8>)
 8003042:	f006 fe85 	bl	8009d50 <HAL_TIM_Base_Init>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800304c:	f000 f842 	bl	80030d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003054:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800305a:	4619      	mov	r1, r3
 800305c:	481c      	ldr	r0, [pc, #112]	@ (80030d0 <MX_TIM2_Init+0xe8>)
 800305e:	f007 f91d 	bl	800a29c <HAL_TIM_ConfigClockSource>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003068:	f000 f834 	bl	80030d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800306c:	4818      	ldr	r0, [pc, #96]	@ (80030d0 <MX_TIM2_Init+0xe8>)
 800306e:	f006 fec6 	bl	8009dfe <HAL_TIM_PWM_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003078:	f000 f82c 	bl	80030d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003080:	2300      	movs	r3, #0
 8003082:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003084:	f107 031c 	add.w	r3, r7, #28
 8003088:	4619      	mov	r1, r3
 800308a:	4811      	ldr	r0, [pc, #68]	@ (80030d0 <MX_TIM2_Init+0xe8>)
 800308c:	f007 fd80 	bl	800ab90 <HAL_TIMEx_MasterConfigSynchronization>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003096:	f000 f81d 	bl	80030d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800309a:	2360      	movs	r3, #96	@ 0x60
 800309c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030aa:	463b      	mov	r3, r7
 80030ac:	2200      	movs	r2, #0
 80030ae:	4619      	mov	r1, r3
 80030b0:	4807      	ldr	r0, [pc, #28]	@ (80030d0 <MX_TIM2_Init+0xe8>)
 80030b2:	f006 ffdf 	bl	800a074 <HAL_TIM_PWM_ConfigChannel>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80030bc:	f000 f80a 	bl	80030d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80030c0:	4803      	ldr	r0, [pc, #12]	@ (80030d0 <MX_TIM2_Init+0xe8>)
 80030c2:	f000 f8ac 	bl	800321e <HAL_TIM_MspPostInit>

}
 80030c6:	bf00      	nop
 80030c8:	3738      	adds	r7, #56	@ 0x38
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20004404 	.word	0x20004404

080030d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <LL_RCC_EnableRTC>:
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80030e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80030fa:	bf00      	nop
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <LL_AHB2_GRP1_EnableClock>:
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003110:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003112:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4313      	orrs	r3, r2
 800311a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003120:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4013      	ands	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003128:	68fb      	ldr	r3, [r7, #12]
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <LL_AHB3_GRP1_EnableClock>:
{
 8003136:	b480      	push	{r7}
 8003138:	b085      	sub	sp, #20
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800313e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003142:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003144:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4313      	orrs	r3, r2
 800314c:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800314e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003152:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4013      	ands	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800315a:	68fb      	ldr	r3, [r7, #12]
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_APB1_GRP1_EnableClock>:
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003174:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003176:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4313      	orrs	r3, r2
 800317e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003184:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4013      	ands	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800318c:	68fb      	ldr	r3, [r7, #12]
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <LL_APB1_GRP2_EnableClock>:
{
 800319a:	b480      	push	{r7}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80031a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80031b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4013      	ands	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031be:	68fb      	ldr	r3, [r7, #12]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_APB2_GRP1_EnableClock>:
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80031d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4013      	ands	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031f0:	68fb      	ldr	r3, [r7, #12]
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320e:	d102      	bne.n	8003216 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003210:	2001      	movs	r0, #1
 8003212:	f7ff ffa9 	bl	8003168 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b088      	sub	sp, #32
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003226:	f107 030c 	add.w	r3, r7, #12
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	609a      	str	r2, [r3, #8]
 8003232:	60da      	str	r2, [r3, #12]
 8003234:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323e:	d113      	bne.n	8003268 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003240:	2001      	movs	r0, #1
 8003242:	f7ff ff5f 	bl	8003104 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003246:	2301      	movs	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003256:	2301      	movs	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325a:	f107 030c 	add.w	r3, r7, #12
 800325e:	4619      	mov	r1, r3
 8003260:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003264:	f004 fb54 	bl	8007910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003268:	bf00      	nop
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003274:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003278:	f7ff ff5d 	bl	8003136 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800327c:	2200      	movs	r2, #0
 800327e:	2100      	movs	r1, #0
 8003280:	202e      	movs	r0, #46	@ 0x2e
 8003282:	f003 fdba 	bl	8006dfa <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003286:	202e      	movs	r0, #46	@ 0x2e
 8003288:	f003 fdd1 	bl	8006e2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800328c:	bf00      	nop
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a0d      	ldr	r2, [pc, #52]	@ (80032d4 <HAL_IPCC_MspInit+0x44>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d113      	bne.n	80032ca <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80032a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80032a6:	f7ff ff46 	bl	8003136 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2100      	movs	r1, #0
 80032ae:	202c      	movs	r0, #44	@ 0x2c
 80032b0:	f003 fda3 	bl	8006dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80032b4:	202c      	movs	r0, #44	@ 0x2c
 80032b6:	f003 fdba 	bl	8006e2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2100      	movs	r1, #0
 80032be:	202d      	movs	r0, #45	@ 0x2d
 80032c0:	f003 fd9b 	bl	8006dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80032c4:	202d      	movs	r0, #45	@ 0x2d
 80032c6:	f003 fdb2 	bl	8006e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	58000c00 	.word	0x58000c00

080032d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b0a0      	sub	sp, #128	@ 0x80
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	2250      	movs	r2, #80	@ 0x50
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f023 fc69 	bl	8026bd0 <memset>
  if(huart->Instance==LPUART1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a51      	ldr	r2, [pc, #324]	@ (8003448 <HAL_UART_MspInit+0x170>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d140      	bne.n	800338a <HAL_UART_MspInit+0xb2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003308:	2302      	movs	r3, #2
 800330a:	60fb      	str	r3, [r7, #12]
	  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800330c:	2300      	movs	r3, #0
 800330e:	62bb      	str	r3, [r7, #40]	@ 0x28
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003310:	f107 030c 	add.w	r3, r7, #12
 8003314:	4618      	mov	r0, r3
 8003316:	f006 f8a2 	bl	800945e <HAL_RCCEx_PeriphCLKConfig>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_UART_MspInit+0x4c>
	  {
		  Error_Handler();
 8003320:	f7ff fed8 	bl	80030d4 <Error_Handler>
	  }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003324:	2001      	movs	r0, #1
 8003326:	f7ff ff38 	bl	800319a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800332a:	2004      	movs	r0, #4
 800332c:	f7ff feea 	bl	8003104 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003330:	2001      	movs	r0, #1
 8003332:	f7ff fee7 	bl	8003104 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
     * PC1     ------> LPUART1_TX
     * PA3     ------> LPUART1_RX
     */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003336:	2302      	movs	r3, #2
 8003338:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333a:	2302      	movs	r3, #2
 800333c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003342:	2300      	movs	r3, #0
 8003344:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003346:	2308      	movs	r3, #8
 8003348:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800334a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800334e:	4619      	mov	r1, r3
 8003350:	483e      	ldr	r0, [pc, #248]	@ (800344c <HAL_UART_MspInit+0x174>)
 8003352:	f004 fadd 	bl	8007910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003356:	2308      	movs	r3, #8
 8003358:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335a:	2302      	movs	r3, #2
 800335c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003362:	2300      	movs	r3, #0
 8003364:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003366:	2308      	movs	r3, #8
 8003368:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800336e:	4619      	mov	r1, r3
 8003370:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003374:	f004 facc 	bl	8007910 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003378:	2200      	movs	r2, #0
 800337a:	2100      	movs	r1, #0
 800337c:	2025      	movs	r0, #37	@ 0x25
 800337e:	f003 fd3c 	bl	8006dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003382:	2025      	movs	r0, #37	@ 0x25
 8003384:	f003 fd53 	bl	8006e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003388:	e05a      	b.n	8003440 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a30      	ldr	r2, [pc, #192]	@ (8003450 <HAL_UART_MspInit+0x178>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d155      	bne.n	8003440 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003394:	2301      	movs	r3, #1
 8003396:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	4618      	mov	r0, r3
 80033a2:	f006 f85c 	bl	800945e <HAL_RCCEx_PeriphCLKConfig>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80033ac:	f7ff fe92 	bl	80030d4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80033b0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80033b4:	f7ff ff0a 	bl	80031cc <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b8:	2002      	movs	r0, #2
 80033ba:	f7ff fea3 	bl	8003104 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033be:	23c0      	movs	r3, #192	@ 0xc0
 80033c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ca:	2303      	movs	r3, #3
 80033cc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033ce:	2307      	movs	r3, #7
 80033d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80033d6:	4619      	mov	r1, r3
 80033d8:	481e      	ldr	r0, [pc, #120]	@ (8003454 <HAL_UART_MspInit+0x17c>)
 80033da:	f004 fa99 	bl	8007910 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80033de:	4b1e      	ldr	r3, [pc, #120]	@ (8003458 <HAL_UART_MspInit+0x180>)
 80033e0:	4a1e      	ldr	r2, [pc, #120]	@ (800345c <HAL_UART_MspInit+0x184>)
 80033e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80033e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003458 <HAL_UART_MspInit+0x180>)
 80033e6:	220f      	movs	r2, #15
 80033e8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <HAL_UART_MspInit+0x180>)
 80033ec:	2210      	movs	r2, #16
 80033ee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f0:	4b19      	ldr	r3, [pc, #100]	@ (8003458 <HAL_UART_MspInit+0x180>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033f6:	4b18      	ldr	r3, [pc, #96]	@ (8003458 <HAL_UART_MspInit+0x180>)
 80033f8:	2280      	movs	r2, #128	@ 0x80
 80033fa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033fc:	4b16      	ldr	r3, [pc, #88]	@ (8003458 <HAL_UART_MspInit+0x180>)
 80033fe:	2200      	movs	r2, #0
 8003400:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003402:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <HAL_UART_MspInit+0x180>)
 8003404:	2200      	movs	r2, #0
 8003406:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003408:	4b13      	ldr	r3, [pc, #76]	@ (8003458 <HAL_UART_MspInit+0x180>)
 800340a:	2200      	movs	r2, #0
 800340c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800340e:	4b12      	ldr	r3, [pc, #72]	@ (8003458 <HAL_UART_MspInit+0x180>)
 8003410:	2200      	movs	r2, #0
 8003412:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003414:	4810      	ldr	r0, [pc, #64]	@ (8003458 <HAL_UART_MspInit+0x180>)
 8003416:	f003 fd4f 	bl	8006eb8 <HAL_DMA_Init>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8003420:	f7ff fe58 	bl	80030d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a0c      	ldr	r2, [pc, #48]	@ (8003458 <HAL_UART_MspInit+0x180>)
 8003428:	67da      	str	r2, [r3, #124]	@ 0x7c
 800342a:	4a0b      	ldr	r2, [pc, #44]	@ (8003458 <HAL_UART_MspInit+0x180>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003430:	2200      	movs	r2, #0
 8003432:	2100      	movs	r1, #0
 8003434:	2024      	movs	r0, #36	@ 0x24
 8003436:	f003 fce0 	bl	8006dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800343a:	2024      	movs	r0, #36	@ 0x24
 800343c:	f003 fcf7 	bl	8006e2e <HAL_NVIC_EnableIRQ>
}
 8003440:	bf00      	nop
 8003442:	3780      	adds	r7, #128	@ 0x80
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40008000 	.word	0x40008000
 800344c:	48000800 	.word	0x48000800
 8003450:	40013800 	.word	0x40013800
 8003454:	48000400 	.word	0x48000400
 8003458:	2000436c 	.word	0x2000436c
 800345c:	40020444 	.word	0x40020444

08003460 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b096      	sub	sp, #88	@ 0x58
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003468:	f107 0308 	add.w	r3, r7, #8
 800346c:	2250      	movs	r2, #80	@ 0x50
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f023 fbad 	bl	8026bd0 <memset>
  if(hrng->Instance==RNG)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a0d      	ldr	r2, [pc, #52]	@ (80034b0 <HAL_RNG_MspInit+0x50>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d113      	bne.n	80034a8 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003480:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003484:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8003486:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800348a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800348c:	f107 0308 	add.w	r3, r7, #8
 8003490:	4618      	mov	r0, r3
 8003492:	f005 ffe4 	bl	800945e <HAL_RCCEx_PeriphCLKConfig>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800349c:	f7ff fe1a 	bl	80030d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80034a0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80034a4:	f7ff fe47 	bl	8003136 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80034a8:	bf00      	nop
 80034aa:	3758      	adds	r7, #88	@ 0x58
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	58001000 	.word	0x58001000

080034b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b096      	sub	sp, #88	@ 0x58
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034bc:	f107 0308 	add.w	r3, r7, #8
 80034c0:	2250      	movs	r2, #80	@ 0x50
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f023 fb83 	bl	8026bd0 <memset>
  if(hrtc->Instance==RTC)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a12      	ldr	r2, [pc, #72]	@ (8003518 <HAL_RTC_MspInit+0x64>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d11d      	bne.n	8003510 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80034d4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80034da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034de:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034e0:	f107 0308 	add.w	r3, r7, #8
 80034e4:	4618      	mov	r0, r3
 80034e6:	f005 ffba 	bl	800945e <HAL_RCCEx_PeriphCLKConfig>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80034f0:	f7ff fdf0 	bl	80030d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034f4:	f7ff fdf5 	bl	80030e2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80034f8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80034fc:	f7ff fe34 	bl	8003168 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003500:	2200      	movs	r2, #0
 8003502:	2100      	movs	r1, #0
 8003504:	2003      	movs	r0, #3
 8003506:	f003 fc78 	bl	8006dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800350a:	2003      	movs	r0, #3
 800350c:	f003 fc8f 	bl	8006e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003510:	bf00      	nop
 8003512:	3758      	adds	r7, #88	@ 0x58
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40002800 	.word	0x40002800

0800351c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  BSP_LED_On(LED_RED);
 8003530:	2002      	movs	r0, #2
 8003532:	f003 f955 	bl	80067e0 <BSP_LED_On>
#ifndef DISABLE_TRACES
  printf("HARDFAULT !\r\n");
 8003536:	4802      	ldr	r0, [pc, #8]	@ (8003540 <HardFault_Handler+0x14>)
 8003538:	f023 fa14 	bl	8026964 <puts>
#endif
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800353c:	bf00      	nop
 800353e:	e7fd      	b.n	800353c <HardFault_Handler+0x10>
 8003540:	080294b4 	.word	0x080294b4

08003544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003548:	bf00      	nop
 800354a:	e7fd      	b.n	8003548 <MemManage_Handler+0x4>

0800354c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003550:	bf00      	nop
 8003552:	e7fd      	b.n	8003550 <BusFault_Handler+0x4>

08003554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003558:	bf00      	nop
 800355a:	e7fd      	b.n	8003558 <UsageFault_Handler+0x4>

0800355c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800358a:	f003 fab7 	bl	8006afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}

08003592 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003596:	f7fe fed9 	bl	800234c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80035a4:	4802      	ldr	r0, [pc, #8]	@ (80035b0 <DMA1_Channel4_IRQHandler+0x10>)
 80035a6:	f003 fe68 	bl	800727a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	2000430c 	.word	0x2000430c

080035b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035b8:	4802      	ldr	r0, [pc, #8]	@ (80035c4 <USART1_IRQHandler+0x10>)
 80035ba:	f007 fc85 	bl	800aec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20004278 	.word	0x20004278

080035c8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80035cc:	4802      	ldr	r0, [pc, #8]	@ (80035d8 <LPUART1_IRQHandler+0x10>)
 80035ce:	f007 fc7b 	bl	800aec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	200041e4 	.word	0x200041e4

080035dc <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80035e0:	f002 ff36 	bl	8006450 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80035ec:	f002 ff66 	bl	80064bc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80035f0:	bf00      	nop
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80035f8:	f004 fb42 	bl	8007c80 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80035fc:	bf00      	nop
 80035fe:	bd80      	pop	{r7, pc}

08003600 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003604:	4802      	ldr	r0, [pc, #8]	@ (8003610 <DMA2_Channel4_IRQHandler+0x10>)
 8003606:	f003 fe38 	bl	800727a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	2000436c 	.word	0x2000436c

08003614 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8003618:	2010      	movs	r0, #16
 800361a:	f004 fb19 	bl	8007c50 <HAL_GPIO_EXTI_IRQHandler>
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}

08003622 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8003626:	2001      	movs	r0, #1
 8003628:	f004 fb12 	bl	8007c50 <HAL_GPIO_EXTI_IRQHandler>
}
 800362c:	bf00      	nop
 800362e:	bd80      	pop	{r7, pc}

08003630 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8003634:	2002      	movs	r0, #2
 8003636:	f004 fb0b 	bl	8007c50 <HAL_GPIO_EXTI_IRQHandler>
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}

0800363e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0
  return 1;
 8003642:	2301      	movs	r3, #1
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <_kill>:

int _kill(int pid, int sig)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003658:	f023 fb3e 	bl	8026cd8 <__errno>
 800365c:	4603      	mov	r3, r0
 800365e:	2216      	movs	r2, #22
 8003660:	601a      	str	r2, [r3, #0]
  return -1;
 8003662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <_exit>:

void _exit (int status)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003676:	f04f 31ff 	mov.w	r1, #4294967295
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff ffe7 	bl	800364e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003680:	bf00      	nop
 8003682:	e7fd      	b.n	8003680 <_exit+0x12>

08003684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e00a      	b.n	80036ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003696:	f3af 8000 	nop.w
 800369a:	4601      	mov	r1, r0
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	60ba      	str	r2, [r7, #8]
 80036a2:	b2ca      	uxtb	r2, r1
 80036a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	3301      	adds	r3, #1
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	dbf0      	blt.n	8003696 <_read+0x12>
  }

  return len;
 80036b4:	687b      	ldr	r3, [r7, #4]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <_close>:
  }
  return len;
}

int _close(int file)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036e6:	605a      	str	r2, [r3, #4]
  return 0;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <_isatty>:

int _isatty(int file)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036fe:	2301      	movs	r3, #1
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003730:	4a14      	ldr	r2, [pc, #80]	@ (8003784 <_sbrk+0x5c>)
 8003732:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <_sbrk+0x60>)
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800373c:	4b13      	ldr	r3, [pc, #76]	@ (800378c <_sbrk+0x64>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003744:	4b11      	ldr	r3, [pc, #68]	@ (800378c <_sbrk+0x64>)
 8003746:	4a12      	ldr	r2, [pc, #72]	@ (8003790 <_sbrk+0x68>)
 8003748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800374a:	4b10      	ldr	r3, [pc, #64]	@ (800378c <_sbrk+0x64>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4413      	add	r3, r2
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	429a      	cmp	r2, r3
 8003756:	d207      	bcs.n	8003768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003758:	f023 fabe 	bl	8026cd8 <__errno>
 800375c:	4603      	mov	r3, r0
 800375e:	220c      	movs	r2, #12
 8003760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003762:	f04f 33ff 	mov.w	r3, #4294967295
 8003766:	e009      	b.n	800377c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003768:	4b08      	ldr	r3, [pc, #32]	@ (800378c <_sbrk+0x64>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800376e:	4b07      	ldr	r3, [pc, #28]	@ (800378c <_sbrk+0x64>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4413      	add	r3, r2
 8003776:	4a05      	ldr	r2, [pc, #20]	@ (800378c <_sbrk+0x64>)
 8003778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800377a:	68fb      	ldr	r3, [r7, #12]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20030000 	.word	0x20030000
 8003788:	00001000 	.word	0x00001000
 800378c:	20004454 	.word	0x20004454
 8003790:	20008208 	.word	0x20008208

08003794 <APC1_Init_Sensor>:
  * @brief  Initializes the APC1 sensor.
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval APC1 status
  */
enum APC1_Status APC1_Init_Sensor(UART_HandleTypeDef *huart) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]

	if (huart == NULL) {
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d107      	bne.n	80037b2 <APC1_Init_Sensor+0x1e>
		APC1_Error_Buffer_Append(error_buffer, 10);
 80037a2:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <APC1_Init_Sensor+0x40>)
 80037a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a6:	4619      	mov	r1, r3
 80037a8:	480b      	ldr	r0, [pc, #44]	@ (80037d8 <APC1_Init_Sensor+0x44>)
 80037aa:	f023 fa19 	bl	8026be0 <strcat>
		return APC1_ERROR_NULL_POINTER;
 80037ae:	2382      	movs	r3, #130	@ 0x82
 80037b0:	e00c      	b.n	80037cc <APC1_Init_Sensor+0x38>
	}

	dev_settings = (struct APC1_Device_Settings) {
 80037b2:	4a0a      	ldr	r2, [pc, #40]	@ (80037dc <APC1_Init_Sensor+0x48>)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <APC1_Init_Sensor+0x48>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	4b07      	ldr	r3, [pc, #28]	@ (80037dc <APC1_Init_Sensor+0x48>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	721a      	strb	r2, [r3, #8]
 80037c4:	4b05      	ldr	r3, [pc, #20]	@ (80037dc <APC1_Init_Sensor+0x48>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	725a      	strb	r2, [r3, #9]
			.mode = APC1_PASSIVE_MODE,
			.fw_vesion = 0,
			.received_response = 0
	};

	return APC1_OK;
 80037ca:	2300      	movs	r3, #0

}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000074 	.word	0x20000074
 80037d8:	20004458 	.word	0x20004458
 80037dc:	20004558 	.word	0x20004558

080037e0 <APC1_Get_Device_Settings>:

	return &processed_data;

}

struct APC1_Device_Settings *APC1_Get_Device_Settings(void) {
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0

	return &dev_settings;
 80037e4:	4b02      	ldr	r3, [pc, #8]	@ (80037f0 <APC1_Get_Device_Settings+0x10>)

}
 80037e6:	4618      	mov	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	20004558 	.word	0x20004558

080037f4 <DC_CreateControl>:
 *      Author: Nejc
 */

#include "dimmer_control.h"

DC_Dimmer_t *DC_CreateControl(TIM_HandleTypeDef *timer, uint32_t channel) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]

	DC_Dimmer_t *tmp;

	if (!timer || !(tmp = (DC_Dimmer_t *) malloc(sizeof(DC_Dimmer_t)))) {
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <DC_CreateControl+0x20>
 8003804:	2008      	movs	r0, #8
 8003806:	f022 fa63 	bl	8025cd0 <malloc>
 800380a:	4603      	mov	r3, r0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <DC_CreateControl+0x24>
		return NULL;
 8003814:	2300      	movs	r3, #0
 8003816:	e006      	b.n	8003826 <DC_CreateControl+0x32>
	}
	tmp->timer = timer;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	601a      	str	r2, [r3, #0]
	tmp->channel = channel;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	605a      	str	r2, [r3, #4]

	return tmp;
 8003824:	68fb      	ldr	r3, [r7, #12]

}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <DC_MapSliderToGenericLevelRange>:
		free(dimmer);
	}

}

int16_t DC_MapSliderToGenericLevelRange(int16_t sliderValue) {
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	80fb      	strh	r3, [r7, #6]

	return (int16_t) ((65535 * sliderValue) / 100) - 32768;
 800383a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800383e:	4613      	mov	r3, r2
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	4a08      	ldr	r2, [pc, #32]	@ (8003868 <DC_MapSliderToGenericLevelRange+0x38>)
 8003846:	fb82 1203 	smull	r1, r2, r2, r3
 800384a:	1152      	asrs	r2, r2, #5
 800384c:	17db      	asrs	r3, r3, #31
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	b29b      	uxth	r3, r3
 8003852:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8003856:	b29b      	uxth	r3, r3
 8003858:	b21b      	sxth	r3, r3

}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	51eb851f 	.word	0x51eb851f

0800386c <DC_CalcNewDutyCycle>:

uint16_t DC_CalcNewDutyCycle(DC_Dimmer_t *dimmer, int16_t levelSet) {
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]

	uint8_t dutyPercent = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	73fb      	strb	r3, [r7, #15]
	uint16_t newDutyCycle = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	81bb      	strh	r3, [r7, #12]

	dutyPercent = (levelSet + 32768) * 100 / 65535;
 8003880:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003884:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003888:	2264      	movs	r2, #100	@ 0x64
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	4a0d      	ldr	r2, [pc, #52]	@ (80038c4 <DC_CalcNewDutyCycle+0x58>)
 8003890:	fb82 1203 	smull	r1, r2, r2, r3
 8003894:	441a      	add	r2, r3
 8003896:	13d2      	asrs	r2, r2, #15
 8003898:	17db      	asrs	r3, r3, #31
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	73fb      	strb	r3, [r7, #15]
	newDutyCycle = (dutyPercent * (dimmer->timer->Init.Period + 1)) / 100;
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	68d2      	ldr	r2, [r2, #12]
 80038a6:	3201      	adds	r2, #1
 80038a8:	fb02 f303 	mul.w	r3, r2, r3
 80038ac:	4a06      	ldr	r2, [pc, #24]	@ (80038c8 <DC_CalcNewDutyCycle+0x5c>)
 80038ae:	fba2 2303 	umull	r2, r3, r2, r3
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	81bb      	strh	r3, [r7, #12]

	return newDutyCycle;
 80038b6:	89bb      	ldrh	r3, [r7, #12]

}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	80008001 	.word	0x80008001
 80038c8:	51eb851f 	.word	0x51eb851f

080038cc <DC_SetTimerCCR>:

void DC_SetTimerCCR(DC_Dimmer_t *dimmer, uint16_t dutyCycle) {
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	807b      	strh	r3, [r7, #2]

	__HAL_TIM_SET_COMPARE(dimmer->timer, dimmer->channel, dutyCycle);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d105      	bne.n	80038ec <DC_SetTimerCCR+0x20>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	887a      	ldrh	r2, [r7, #2]
 80038e8:	635a      	str	r2, [r3, #52]	@ 0x34

}
 80038ea:	e02c      	b.n	8003946 <DC_SetTimerCCR+0x7a>
	__HAL_TIM_SET_COMPARE(dimmer->timer, dimmer->channel, dutyCycle);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d105      	bne.n	8003900 <DC_SetTimerCCR+0x34>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	887b      	ldrh	r3, [r7, #2]
 80038fc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80038fe:	e022      	b.n	8003946 <DC_SetTimerCCR+0x7a>
	__HAL_TIM_SET_COMPARE(dimmer->timer, dimmer->channel, dutyCycle);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d105      	bne.n	8003914 <DC_SetTimerCCR+0x48>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	887b      	ldrh	r3, [r7, #2]
 8003910:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003912:	e018      	b.n	8003946 <DC_SetTimerCCR+0x7a>
	__HAL_TIM_SET_COMPARE(dimmer->timer, dimmer->channel, dutyCycle);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b0c      	cmp	r3, #12
 800391a:	d105      	bne.n	8003928 <DC_SetTimerCCR+0x5c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	887b      	ldrh	r3, [r7, #2]
 8003924:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003926:	e00e      	b.n	8003946 <DC_SetTimerCCR+0x7a>
	__HAL_TIM_SET_COMPARE(dimmer->timer, dimmer->channel, dutyCycle);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b10      	cmp	r3, #16
 800392e:	d105      	bne.n	800393c <DC_SetTimerCCR+0x70>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800393a:	e004      	b.n	8003946 <DC_SetTimerCCR+0x7a>
	__HAL_TIM_SET_COMPARE(dimmer->timer, dimmer->channel, dutyCycle);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	887b      	ldrh	r3, [r7, #2]
 8003944:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8003958:	4b03      	ldr	r3, [pc, #12]	@ (8003968 <LL_FLASH_GetUDN+0x14>)
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	1fff7580 	.word	0x1fff7580

0800396c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8003970:	4b03      	ldr	r3, [pc, #12]	@ (8003980 <LL_FLASH_GetDeviceID+0x14>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	b2db      	uxtb	r3, r3
}
 8003976:	4618      	mov	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	1fff7584 	.word	0x1fff7584

08003984 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8003988:	4b03      	ldr	r3, [pc, #12]	@ (8003998 <LL_FLASH_GetSTCompanyID+0x14>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	0a1b      	lsrs	r3, r3, #8
}
 800398e:	4618      	mov	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	1fff7584 	.word	0x1fff7584

0800399c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800399c:	b5b0      	push	{r4, r5, r7, lr}
 800399e:	b096      	sub	sp, #88	@ 0x58
 80039a0:	af04      	add	r7, sp, #16
  SHCI_CmdStatus_t status;
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80039a2:	4b3a      	ldr	r3, [pc, #232]	@ (8003a8c <APP_BLE_Init+0xf0>)
 80039a4:	1d3c      	adds	r4, r7, #4
 80039a6:	461d      	mov	r5, r3
 80039a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80039b8:	c403      	stmia	r4!, {r0, r1}
 80039ba:	8022      	strh	r2, [r4, #0]
  };

  /**
     * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 80039bc:	f000 f880 	bl	8003ac0 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80039c0:	2101      	movs	r1, #1
 80039c2:	2002      	movs	r0, #2
 80039c4:	f010 f94a 	bl	8013c5c <UTIL_LPM_SetOffMode>

  /**
   * Do not allow stop mode in the application
   */
#if (LOW_POWER_FEATURE == 0)
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80039c8:	2101      	movs	r1, #1
 80039ca:	2002      	movs	r0, #2
 80039cc:	f010 f916 	bl	8013bfc <UTIL_LPM_SetStopMode>
#endif

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80039d0:	4a2f      	ldr	r2, [pc, #188]	@ (8003a90 <APP_BLE_Init+0xf4>)
 80039d2:	2100      	movs	r1, #0
 80039d4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80039d8:	f010 fa6c 	bl	8013eb4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80039dc:	1d3b      	adds	r3, r7, #4
 80039de:	4618      	mov	r0, r3
 80039e0:	f00f f9f6 	bl	8012dd0 <SHCI_C2_BLE_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  if (status != SHCI_Success)
 80039ea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80039f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80039f6:	4619      	mov	r1, r3
 80039f8:	4826      	ldr	r0, [pc, #152]	@ (8003a94 <APP_BLE_Init+0xf8>)
 80039fa:	f022 ff4b 	bl	8026894 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80039fe:	f7ff fb69 	bl	80030d4 <Error_Handler>
 8003a02:	e002      	b.n	8003a0a <APP_BLE_Init+0x6e>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8003a04:	4824      	ldr	r0, [pc, #144]	@ (8003a98 <APP_BLE_Init+0xfc>)
 8003a06:	f022 ff45 	bl	8026894 <iprintf>
  /**
   * Initialization of HCI & GATT & GAP layer
   */
  {
    const uint8_t *p_bd_addr;
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003a0a:	2392      	movs	r3, #146	@ 0x92
 8003a0c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    /**
     * Write the BD Address
     */
    p_bd_addr = BleGetBdAddress();
 8003a10:	f000 f86c 	bl	8003aec <BleGetBdAddress>
 8003a14:	6438      	str	r0, [r7, #64]	@ 0x40
    ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8003a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a18:	2106      	movs	r1, #6
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f00e fda8 	bl	8012570 <aci_hal_write_config_data>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    if (ret != BLE_STATUS_SUCCESS)
 8003a26:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d006      	beq.n	8003a3c <APP_BLE_Init+0xa0>
    {
      APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8003a2e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003a32:	4619      	mov	r1, r3
 8003a34:	4819      	ldr	r0, [pc, #100]	@ (8003a9c <APP_BLE_Init+0x100>)
 8003a36:	f022 ff2d 	bl	8026894 <iprintf>
 8003a3a:	e021      	b.n	8003a80 <APP_BLE_Init+0xe4>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8003a3c:	4818      	ldr	r0, [pc, #96]	@ (8003aa0 <APP_BLE_Init+0x104>)
 8003a3e:	f022 ff91 	bl	8026964 <puts>
      APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8003a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a44:	3305      	adds	r3, #5
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	461c      	mov	r4, r3
 8003a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a54:	3303      	adds	r3, #3
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	461d      	mov	r5, r3
 8003a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a5c:	3302      	adds	r3, #2
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a64:	3301      	adds	r3, #1
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	9302      	str	r3, [sp, #8]
 8003a70:	9101      	str	r1, [sp, #4]
 8003a72:	9200      	str	r2, [sp, #0]
 8003a74:	462b      	mov	r3, r5
 8003a76:	4622      	mov	r2, r4
 8003a78:	4601      	mov	r1, r0
 8003a7a:	480a      	ldr	r0, [pc, #40]	@ (8003aa4 <APP_BLE_Init+0x108>)
 8003a7c:	f022 ff0a 	bl	8026894 <iprintf>
    }
  }
  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8003a80:	f00d fa84 	bl	8010f8c <SVCCTL_Init>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */

  return;
 8003a84:	bf00      	nop
}
 8003a86:	3748      	adds	r7, #72	@ 0x48
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8c:	08029738 	.word	0x08029738
 8003a90:	0801301d 	.word	0x0801301d
 8003a94:	080295f4 	.word	0x080295f4
 8003a98:	0802962c 	.word	0x0802962c
 8003a9c:	08029654 	.word	0x08029654
 8003aa0:	080296b0 	.word	0x080296b0
 8003aa4:	080296fc 	.word	0x080296fc

08003aa8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *p_Pckt )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* callback of mesh Library to receive all GAP/GATT events*/  
  HCI_Event_CB(p_Pckt);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f018 fef7 	bl	801c8a4 <HCI_Event_CB>

#if (LOW_POWER_FEATURE == 1)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);
#endif

  return (SVCCTL_UserEvtFlowEnable);
 8003ab6:	2301      	movs	r3, #1
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8003ac6:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <Ble_Tl_Init+0x20>)
 8003ac8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8003aca:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <Ble_Tl_Init+0x24>)
 8003acc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8003ace:	463b      	mov	r3, r7
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4805      	ldr	r0, [pc, #20]	@ (8003ae8 <Ble_Tl_Init+0x28>)
 8003ad4:	f00f fa86 	bl	8012fe4 <hci_init>

  return;
 8003ad8:	bf00      	nop
}
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20030028 	.word	0x20030028
 8003ae4:	08003bf3 	.word	0x08003bf3
 8003ae8:	08003bbb 	.word	0x08003bbb

08003aec <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8003af2:	f7ff ff2f 	bl	8003954 <LL_FLASH_GetUDN>
 8003af6:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d023      	beq.n	8003b48 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8003b00:	f7ff ff40 	bl	8003984 <LL_FLASH_GetSTCompanyID>
 8003b04:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8003b06:	f7ff ff31 	bl	800396c <LL_FLASH_GetDeviceID>
 8003b0a:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	4b16      	ldr	r3, [pc, #88]	@ (8003b6c <BleGetBdAddress+0x80>)
 8003b12:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	4b14      	ldr	r3, [pc, #80]	@ (8003b6c <BleGetBdAddress+0x80>)
 8003b1c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4b12      	ldr	r3, [pc, #72]	@ (8003b6c <BleGetBdAddress+0x80>)
 8003b24:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	4b10      	ldr	r3, [pc, #64]	@ (8003b6c <BleGetBdAddress+0x80>)
 8003b2c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <BleGetBdAddress+0x80>)
 8003b36:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	0c1b      	lsrs	r3, r3, #16
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <BleGetBdAddress+0x80>)
 8003b40:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8003b42:	4b0a      	ldr	r3, [pc, #40]	@ (8003b6c <BleGetBdAddress+0x80>)
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	e00b      	b.n	8003b60 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f010 f81d 	bl	8013b88 <OTP_Read>
 8003b4e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	e001      	b.n	8003b60 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8003b5c:	4b04      	ldr	r3, [pc, #16]	@ (8003b70 <BleGetBdAddress+0x84>)
 8003b5e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8003b60:	697b      	ldr	r3, [r7, #20]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20004564 	.word	0x20004564
 8003b70:	0802ddf0 	.word	0x0802ddf0

08003b74 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003b82:	f010 f9b9 	bl	8013ef8 <UTIL_SEQ_SetTask>

  return;
 8003b86:	bf00      	nop
}
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <hci_cmd_resp_release>:
#if (LOW_POWER_FEATURE == 1)
static volatile uint8_t HciResponse = 0;
#endif

void hci_cmd_resp_release(uint32_t Flag)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003b96:	2001      	movs	r0, #1
 8003b98:	f010 fa1a 	bl	8013fd0 <UTIL_SEQ_SetEvt>
#else
  HciResponse = 1;
#endif
  return;
 8003b9c:	bf00      	nop
}
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003bac:	2001      	movs	r0, #1
 8003bae:	f010 fa2f 	bl	8014010 <UTIL_SEQ_WaitEvt>
#else
  while(HciResponse == 0);
  HciResponse = 0;
#endif  
  return;
 8003bb2:	bf00      	nop
}
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * p_Payload )
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	60fb      	str	r3, [r7, #12]
  
  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	3308      	adds	r3, #8
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f00d fa15 	bl	8010ffc <SVCCTL_UserEvtRx>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8003bd6:	7afb      	ldrb	r3, [r7, #11]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2201      	movs	r2, #1
 8003be0:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8003be2:	e003      	b.n	8003bec <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]
  return;
 8003bea:	bf00      	nop
}
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t Status )
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <BLE_StatusNot+0x16>
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d007      	beq.n	8003c16 <BLE_StatusNot+0x24>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8003c06:	e00d      	b.n	8003c24 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003c08:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8003c0c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f010 f99e 	bl	8013f50 <UTIL_SEQ_PauseTask>
      break;
 8003c14:	e006      	b.n	8003c24 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003c16:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8003c1a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f010 f9b7 	bl	8013f90 <UTIL_SEQ_ResumeTask>
      break;
 8003c22:	bf00      	nop
  }

  return;
 8003c24:	bf00      	nop
}
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <Appli_GetAppKeyAddParamsCb>:
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndex
*                                               appKey, keySize & status
* @retval none
*/ 
void Appli_GetAppKeyAddParamsCb(model_securityKeyParams_t* appKeyAddParams)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"AppKey Add received for netKeyIndex %.2x, appKeyIndex %.2x \r\n",\
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	885b      	ldrh	r3, [r3, #2]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4816      	ldr	r0, [pc, #88]	@ (8003c9c <Appli_GetAppKeyAddParamsCb+0x70>)
 8003c42:	f022 fe27 	bl	8026894 <iprintf>
          appKeyAddParams->netKeyIndex, appKeyAddParams->appKeyIndex);

  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyAddParams->status);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	7b5b      	ldrb	r3, [r3, #13]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4814      	ldr	r0, [pc, #80]	@ (8003ca0 <Appli_GetAppKeyAddParamsCb+0x74>)
 8003c4e:	f022 fe21 	bl	8026894 <iprintf>
  /*Success Command*/
  if(appKeyAddParams->status == 0x00)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	7b5b      	ldrb	r3, [r3, #13]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d11c      	bne.n	8003c94 <Appli_GetAppKeyAddParamsCb+0x68>
  {
    TRACE_I(TF_CONFIG_SERVER,"AppKey is: ");
 8003c5a:	4812      	ldr	r0, [pc, #72]	@ (8003ca4 <Appli_GetAppKeyAddParamsCb+0x78>)
 8003c5c:	f022 fe1a 	bl	8026894 <iprintf>
    for (MOBLEUINT8 count=0 ; count<appKeyAddParams->keySize; count++)
 8003c60:	2300      	movs	r3, #0
 8003c62:	73fb      	strb	r3, [r7, #15]
 8003c64:	e00e      	b.n	8003c84 <Appli_GetAppKeyAddParamsCb+0x58>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(appKeyAddParams->appKey));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	480e      	ldr	r0, [pc, #56]	@ (8003ca8 <Appli_GetAppKeyAddParamsCb+0x7c>)
 8003c70:	f022 fe10 	bl	8026894 <iprintf>
      appKeyAddParams->appKey++;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	609a      	str	r2, [r3, #8]
    for (MOBLEUINT8 count=0 ; count<appKeyAddParams->keySize; count++)
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	3301      	adds	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	7b1b      	ldrb	r3, [r3, #12]
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d3eb      	bcc.n	8003c66 <Appli_GetAppKeyAddParamsCb+0x3a>
    }  
    TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003c8e:	4807      	ldr	r0, [pc, #28]	@ (8003cac <Appli_GetAppKeyAddParamsCb+0x80>)
 8003c90:	f022 fe68 	bl	8026964 <puts>
  }
}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	08029774 	.word	0x08029774
 8003ca0:	080297b4 	.word	0x080297b4
 8003ca4:	080297c8 	.word	0x080297c8
 8003ca8:	080297d4 	.word	0x080297d4
 8003cac:	080297dc 	.word	0x080297dc

08003cb0 <Appli_GetAppKeyDeleteParamsCb>:
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndex
*                                               appKey, keySize & status
* @retval none
*/ 
void Appli_GetAppKeyDeleteParamsCb(model_securityKeyParams_t* appKeyDeleteParams)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"App Key Delete received for netKeyIndex %.2x, appKeyIndex %.2x \r\n",\
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	885b      	ldrh	r3, [r3, #2]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4806      	ldr	r0, [pc, #24]	@ (8003ce0 <Appli_GetAppKeyDeleteParamsCb+0x30>)
 8003cc6:	f022 fde5 	bl	8026894 <iprintf>
          appKeyDeleteParams->netKeyIndex, appKeyDeleteParams->appKeyIndex);
  
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyDeleteParams->status);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7b5b      	ldrb	r3, [r3, #13]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4804      	ldr	r0, [pc, #16]	@ (8003ce4 <Appli_GetAppKeyDeleteParamsCb+0x34>)
 8003cd2:	f022 fddf 	bl	8026894 <iprintf>
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	080297e0 	.word	0x080297e0
 8003ce4:	080297b4 	.word	0x080297b4

08003ce8 <Appli_GetAppKeyListParamsCb>:
* @brief  Callback from Config Model to receive the AppKey List
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndexes & appKeyListParams Size
* @retval none
*/ 
void Appli_GetAppKeyListParamsCb(model_appKeyListParams_t* appKeyListParams)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"App Key List for netKeyIndex %.2x is \r\n", appKeyListParams->netKeyIndex);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4817      	ldr	r0, [pc, #92]	@ (8003d54 <Appli_GetAppKeyListParamsCb+0x6c>)
 8003cf8:	f022 fdcc 	bl	8026894 <iprintf>
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyListParams->status);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	7a9b      	ldrb	r3, [r3, #10]
 8003d00:	4619      	mov	r1, r3
 8003d02:	4815      	ldr	r0, [pc, #84]	@ (8003d58 <Appli_GetAppKeyListParamsCb+0x70>)
 8003d04:	f022 fdc6 	bl	8026894 <iprintf>
  /*Success*/
  if(appKeyListParams->status == 0x00)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	7a9b      	ldrb	r3, [r3, #10]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11d      	bne.n	8003d4c <Appli_GetAppKeyListParamsCb+0x64>
  {
    TRACE_I(TF_CONFIG_SERVER,"AppKey Indexes are: \r\n");
 8003d10:	4812      	ldr	r0, [pc, #72]	@ (8003d5c <Appli_GetAppKeyListParamsCb+0x74>)
 8003d12:	f022 fe27 	bl	8026964 <puts>
    for (MOBLEUINT8 count=0 ; count< appKeyListParams->appKeyIndexList_size; count++)
 8003d16:	2300      	movs	r3, #0
 8003d18:	73fb      	strb	r3, [r7, #15]
 8003d1a:	e00e      	b.n	8003d3a <Appli_GetAppKeyListParamsCb+0x52>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(appKeyListParams->appKeyIndexList));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	4619      	mov	r1, r3
 8003d24:	480e      	ldr	r0, [pc, #56]	@ (8003d60 <Appli_GetAppKeyListParamsCb+0x78>)
 8003d26:	f022 fdb5 	bl	8026894 <iprintf>
      appKeyListParams->appKeyIndexList++;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	1c9a      	adds	r2, r3, #2
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	605a      	str	r2, [r3, #4]
    for (MOBLEUINT8 count=0 ; count< appKeyListParams->appKeyIndexList_size; count++)
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	3301      	adds	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	891b      	ldrh	r3, [r3, #8]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d3ea      	bcc.n	8003d1c <Appli_GetAppKeyListParamsCb+0x34>
    }  
   TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003d46:	4807      	ldr	r0, [pc, #28]	@ (8003d64 <Appli_GetAppKeyListParamsCb+0x7c>)
 8003d48:	f022 fe0c 	bl	8026964 <puts>
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	08029824 	.word	0x08029824
 8003d58:	080297b4 	.word	0x080297b4
 8003d5c:	0802984c 	.word	0x0802984c
 8003d60:	080297d4 	.word	0x080297d4
 8003d64:	080297dc 	.word	0x080297dc

08003d68 <Appli_GetAppKeyUpdateParamsCb>:
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndex
*                                               appKey, keySize & status
* @retval none
*/ 
void Appli_GetAppKeyUpdateParamsCb(model_securityKeyParams_t* appKeyUpdatedParams)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"App Key Update received for netKeyIndex %.2x, appKeyIndex %.2x \r\n",\
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	4619      	mov	r1, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	885b      	ldrh	r3, [r3, #2]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4818      	ldr	r0, [pc, #96]	@ (8003de0 <Appli_GetAppKeyUpdateParamsCb+0x78>)
 8003d7e:	f022 fd89 	bl	8026894 <iprintf>
          appKeyUpdatedParams->netKeyIndex, appKeyUpdatedParams->appKeyIndex);

  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyUpdatedParams->status);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	7b5b      	ldrb	r3, [r3, #13]
 8003d86:	4619      	mov	r1, r3
 8003d88:	4816      	ldr	r0, [pc, #88]	@ (8003de4 <Appli_GetAppKeyUpdateParamsCb+0x7c>)
 8003d8a:	f022 fd83 	bl	8026894 <iprintf>
  
  /*Success Command*/
  if(appKeyUpdatedParams->status == 0x00)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	7b5b      	ldrb	r3, [r3, #13]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d11f      	bne.n	8003dd6 <Appli_GetAppKeyUpdateParamsCb+0x6e>
  {
    TRACE_I(TF_CONFIG_SERVER,"Updated AppKey is: ");
 8003d96:	4814      	ldr	r0, [pc, #80]	@ (8003de8 <Appli_GetAppKeyUpdateParamsCb+0x80>)
 8003d98:	f022 fd7c 	bl	8026894 <iprintf>
    for (MOBLEUINT8 count=0 ; count<appKeyUpdatedParams->keySize; count++)
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	73fb      	strb	r3, [r7, #15]
 8003da0:	e00e      	b.n	8003dc0 <Appli_GetAppKeyUpdateParamsCb+0x58>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(appKeyUpdatedParams->appKey));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	4619      	mov	r1, r3
 8003daa:	4810      	ldr	r0, [pc, #64]	@ (8003dec <Appli_GetAppKeyUpdateParamsCb+0x84>)
 8003dac:	f022 fd72 	bl	8026894 <iprintf>
      appKeyUpdatedParams->appKey++;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	609a      	str	r2, [r3, #8]
    for (MOBLEUINT8 count=0 ; count<appKeyUpdatedParams->keySize; count++)
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	7b1b      	ldrb	r3, [r3, #12]
 8003dc4:	7bfa      	ldrb	r2, [r7, #15]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d3eb      	bcc.n	8003da2 <Appli_GetAppKeyUpdateParamsCb+0x3a>
    }
    TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003dca:	4809      	ldr	r0, [pc, #36]	@ (8003df0 <Appli_GetAppKeyUpdateParamsCb+0x88>)
 8003dcc:	f022 fdca 	bl	8026964 <puts>
    TRACE_I(TF_CONFIG_SERVER,"It will be replaced by old appKey after Key Refresh \r\n");
 8003dd0:	4808      	ldr	r0, [pc, #32]	@ (8003df4 <Appli_GetAppKeyUpdateParamsCb+0x8c>)
 8003dd2:	f022 fdc7 	bl	8026964 <puts>
  }
  
}
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	08029864 	.word	0x08029864
 8003de4:	080297b4 	.word	0x080297b4
 8003de8:	080298a8 	.word	0x080298a8
 8003dec:	080297d4 	.word	0x080297d4
 8003df0:	080297dc 	.word	0x080297dc
 8003df4:	080298bc 	.word	0x080298bc

08003df8 <Appli_GetNetKeyAddParamsCb>:
* @brief  Callback from Config Model to receive the NetKey Add Command
* @param  Structure Pointer having parameters - netKeyIndex & netKey
* @retval none
*/ 
void Appli_GetNetKeyAddParamsCb(model_securityKeyParams_t* netKeyAddParams)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Net Key Add received for netKeyIndex %.2x \r\n",\
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	4619      	mov	r1, r3
 8003e06:	4817      	ldr	r0, [pc, #92]	@ (8003e64 <Appli_GetNetKeyAddParamsCb+0x6c>)
 8003e08:	f022 fd44 	bl	8026894 <iprintf>
                                               netKeyAddParams->netKeyIndex);

  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyAddParams->status);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	7b5b      	ldrb	r3, [r3, #13]
 8003e10:	4619      	mov	r1, r3
 8003e12:	4815      	ldr	r0, [pc, #84]	@ (8003e68 <Appli_GetNetKeyAddParamsCb+0x70>)
 8003e14:	f022 fd3e 	bl	8026894 <iprintf>

  /*Success Command*/
  if(netKeyAddParams->status == 0x00)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	7b5b      	ldrb	r3, [r3, #13]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d11c      	bne.n	8003e5a <Appli_GetNetKeyAddParamsCb+0x62>
  {
    TRACE_I(TF_CONFIG_SERVER,"NetKey is: ");
 8003e20:	4812      	ldr	r0, [pc, #72]	@ (8003e6c <Appli_GetNetKeyAddParamsCb+0x74>)
 8003e22:	f022 fd37 	bl	8026894 <iprintf>
    for (MOBLEUINT8 count=0 ; count < netKeyAddParams->keySize; count++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]
 8003e2a:	e00e      	b.n	8003e4a <Appli_GetNetKeyAddParamsCb+0x52>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(netKeyAddParams->netKey));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	4619      	mov	r1, r3
 8003e34:	480e      	ldr	r0, [pc, #56]	@ (8003e70 <Appli_GetNetKeyAddParamsCb+0x78>)
 8003e36:	f022 fd2d 	bl	8026894 <iprintf>
      netKeyAddParams->netKey++;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	605a      	str	r2, [r3, #4]
    for (MOBLEUINT8 count=0 ; count < netKeyAddParams->keySize; count++)
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	3301      	adds	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	7b1b      	ldrb	r3, [r3, #12]
 8003e4e:	7bfa      	ldrb	r2, [r7, #15]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d3eb      	bcc.n	8003e2c <Appli_GetNetKeyAddParamsCb+0x34>
    } 
    TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003e54:	4807      	ldr	r0, [pc, #28]	@ (8003e74 <Appli_GetNetKeyAddParamsCb+0x7c>)
 8003e56:	f022 fd85 	bl	8026964 <puts>
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	080298f4 	.word	0x080298f4
 8003e68:	080297b4 	.word	0x080297b4
 8003e6c:	08029924 	.word	0x08029924
 8003e70:	080297d4 	.word	0x080297d4
 8003e74:	080297dc 	.word	0x080297dc

08003e78 <Appli_GetNetKeyDeleteParamsCb>:
* @brief  Callback from Config Model to receive the NetKey Delete Command
* @param  Structure Pointer having parameters - netKeyIndex & netKey
* @retval none
*/ 
void Appli_GetNetKeyDeleteParamsCb(model_securityKeyParams_t* netKeyDeleteParams)
{ 
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
   TRACE_I(TF_CONFIG_SERVER,"Net Key Delete received for netKeyIndex %d \r\n",\
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	4619      	mov	r1, r3
 8003e86:	4806      	ldr	r0, [pc, #24]	@ (8003ea0 <Appli_GetNetKeyDeleteParamsCb+0x28>)
 8003e88:	f022 fd04 	bl	8026894 <iprintf>
                                               netKeyDeleteParams->netKeyIndex);
   TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyDeleteParams->status);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	7b5b      	ldrb	r3, [r3, #13]
 8003e90:	4619      	mov	r1, r3
 8003e92:	4804      	ldr	r0, [pc, #16]	@ (8003ea4 <Appli_GetNetKeyDeleteParamsCb+0x2c>)
 8003e94:	f022 fcfe 	bl	8026894 <iprintf>
}
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	08029930 	.word	0x08029930
 8003ea4:	080297b4 	.word	0x080297b4

08003ea8 <Appli_GetNetKeyListParamsCb>:
* @brief  Callback from Config Model to receive the NetKey List
* @param  Structure Pointer having parameters - netKeyIndexes & netKeyListParams Size
* @retval none
*/ 
void Appli_GetNetKeyListParamsCb(model_netKeyListParams_t* netKeyListParams)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyListParams->status);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	799b      	ldrb	r3, [r3, #6]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4812      	ldr	r0, [pc, #72]	@ (8003f00 <Appli_GetNetKeyListParamsCb+0x58>)
 8003eb8:	f022 fcec 	bl	8026894 <iprintf>
  TRACE_I(TF_CONFIG_SERVER,"NetKey Indexes are: \r\n");
 8003ebc:	4811      	ldr	r0, [pc, #68]	@ (8003f04 <Appli_GetNetKeyListParamsCb+0x5c>)
 8003ebe:	f022 fd51 	bl	8026964 <puts>
  for (MOBLEUINT8 count=0 ; count< netKeyListParams->netKeyIndexList_size; count++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
 8003ec6:	e00e      	b.n	8003ee6 <Appli_GetNetKeyListParamsCb+0x3e>
  {
    TRACE_I(TF_CONFIG_SERVER,"%.2x", *(netKeyListParams->netKeyIndexList));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	480d      	ldr	r0, [pc, #52]	@ (8003f08 <Appli_GetNetKeyListParamsCb+0x60>)
 8003ed2:	f022 fcdf 	bl	8026894 <iprintf>
    netKeyListParams->netKeyIndexList++;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	1c9a      	adds	r2, r3, #2
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	601a      	str	r2, [r3, #0]
  for (MOBLEUINT8 count=0 ; count< netKeyListParams->netKeyIndexList_size; count++)
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	889b      	ldrh	r3, [r3, #4]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d3ea      	bcc.n	8003ec8 <Appli_GetNetKeyListParamsCb+0x20>
  }
  TRACE_I(TF_CONFIG_SERVER," \r\n");  
 8003ef2:	4806      	ldr	r0, [pc, #24]	@ (8003f0c <Appli_GetNetKeyListParamsCb+0x64>)
 8003ef4:	f022 fd36 	bl	8026964 <puts>
}
 8003ef8:	bf00      	nop
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	080297b4 	.word	0x080297b4
 8003f04:	08029960 	.word	0x08029960
 8003f08:	080297d4 	.word	0x080297d4
 8003f0c:	080297dc 	.word	0x080297dc

08003f10 <Appli_GetNetKeyUpdateParamsCb>:
* @brief  Callback from Config Model to receive the Updated NetKey Command
* @param  Structure Pointer having parameters - netKeyIndex & netKey
* @retval none
*/ 
void Appli_GetNetKeyUpdateParamsCb(model_securityKeyParams_t* netKeyUpdatedParams)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Net Key Update received for netKeyIndex %d \r\n",\
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4818      	ldr	r0, [pc, #96]	@ (8003f80 <Appli_GetNetKeyUpdateParamsCb+0x70>)
 8003f20:	f022 fcb8 	bl	8026894 <iprintf>
                                     netKeyUpdatedParams->netKeyIndex);
  
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyUpdatedParams->status);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	7b5b      	ldrb	r3, [r3, #13]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4816      	ldr	r0, [pc, #88]	@ (8003f84 <Appli_GetNetKeyUpdateParamsCb+0x74>)
 8003f2c:	f022 fcb2 	bl	8026894 <iprintf>
  if(netKeyUpdatedParams->status == 0)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	7b5b      	ldrb	r3, [r3, #13]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d11f      	bne.n	8003f78 <Appli_GetNetKeyUpdateParamsCb+0x68>
  {
    TRACE_I(TF_CONFIG_SERVER,"Updated NetKey is:");
 8003f38:	4813      	ldr	r0, [pc, #76]	@ (8003f88 <Appli_GetNetKeyUpdateParamsCb+0x78>)
 8003f3a:	f022 fcab 	bl	8026894 <iprintf>
    for (MOBLEUINT8 count=0; count<netKeyUpdatedParams->keySize; count++)
 8003f3e:	2300      	movs	r3, #0
 8003f40:	73fb      	strb	r3, [r7, #15]
 8003f42:	e00e      	b.n	8003f62 <Appli_GetNetKeyUpdateParamsCb+0x52>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(netKeyUpdatedParams->netKey));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	480f      	ldr	r0, [pc, #60]	@ (8003f8c <Appli_GetNetKeyUpdateParamsCb+0x7c>)
 8003f4e:	f022 fca1 	bl	8026894 <iprintf>
      netKeyUpdatedParams->netKey++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	605a      	str	r2, [r3, #4]
    for (MOBLEUINT8 count=0; count<netKeyUpdatedParams->keySize; count++)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	7b1b      	ldrb	r3, [r3, #12]
 8003f66:	7bfa      	ldrb	r2, [r7, #15]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d3eb      	bcc.n	8003f44 <Appli_GetNetKeyUpdateParamsCb+0x34>
    }
  TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003f6c:	4808      	ldr	r0, [pc, #32]	@ (8003f90 <Appli_GetNetKeyUpdateParamsCb+0x80>)
 8003f6e:	f022 fcf9 	bl	8026964 <puts>
  TRACE_I(TF_CONFIG_SERVER,"It will be replaced by old netKey after Key Refresh \r\n");
 8003f72:	4808      	ldr	r0, [pc, #32]	@ (8003f94 <Appli_GetNetKeyUpdateParamsCb+0x84>)
 8003f74:	f022 fcf6 	bl	8026964 <puts>
  }
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	08029978 	.word	0x08029978
 8003f84:	080297b4 	.word	0x080297b4
 8003f88:	080299a8 	.word	0x080299a8
 8003f8c:	080297d4 	.word	0x080297d4
 8003f90:	080297dc 	.word	0x080297dc
 8003f94:	080299bc 	.word	0x080299bc

08003f98 <Appli_GetAppKeyBindingParamsCb>:
* @brief  Callback from Config Model to receive the AppKey binding params
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex & modelID
* @retval none
*/ 
void Appli_GetAppKeyBindingParamsCb(model_appKeyBindingParams_t* appKeyBindParams)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"AppKey binding received for elementIndex %d, modelID %.2lx,\
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	885b      	ldrh	r3, [r3, #2]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	7a1b      	ldrb	r3, [r3, #8]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4803      	ldr	r0, [pc, #12]	@ (8003fc8 <Appli_GetAppKeyBindingParamsCb+0x30>)
 8003fba:	f022 fc6b 	bl	8026894 <iprintf>
          appKeyIndex %.2x & status %.2x \r\n", appKeyBindParams->elementIndex,\
          appKeyBindParams->modelID, appKeyBindParams->appKeyIndex, appKeyBindParams->status);
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	080299f4 	.word	0x080299f4

08003fcc <Appli_GetAppKeyUnBindingParamsCb>:
* @brief  Callback from Config Model to receive the AppKey Unbinding params
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex & modelID
* @retval none
*/ 
void Appli_GetAppKeyUnBindingParamsCb(model_appKeyBindingParams_t* appKeyUnbindParams)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"AppKey unbinding received for elementIndex %d, modelID %.2lx,\
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	885b      	ldrh	r3, [r3, #2]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	7a1b      	ldrb	r3, [r3, #8]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	4603      	mov	r3, r0
 8003fec:	4803      	ldr	r0, [pc, #12]	@ (8003ffc <Appli_GetAppKeyUnBindingParamsCb+0x30>)
 8003fee:	f022 fc51 	bl	8026894 <iprintf>
          appKeyIndex %.2x & status %.2x \r\n",appKeyUnbindParams->elementIndex,\
          appKeyUnbindParams->modelID, appKeyUnbindParams->appKeyIndex,\
          appKeyUnbindParams->status);  
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	08029a5c 	.word	0x08029a5c

08004000 <Appli_GetSubAddParamsCb>:
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex, modelID
*            subAddress, isVirtual & allSubDeleted
* @retval none
*/ 
void Appli_GetSubAddParamsCb(model_subParams_t* subAddParams)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", subAddParams->status); 
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	7a9b      	ldrb	r3, [r3, #10]
 800400c:	4619      	mov	r1, r3
 800400e:	4810      	ldr	r0, [pc, #64]	@ (8004050 <Appli_GetSubAddParamsCb+0x50>)
 8004010:	f022 fc40 	bl	8026894 <iprintf>
  if(subAddParams->isVirtual)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	7adb      	ldrb	r3, [r3, #11]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <Appli_GetSubAddParamsCb+0x32>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Virtual Add received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	4619      	mov	r1, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	891b      	ldrh	r3, [r3, #8]
 800402a:	480a      	ldr	r0, [pc, #40]	@ (8004054 <Appli_GetSubAddParamsCb+0x54>)
 800402c:	f022 fc32 	bl	8026894 <iprintf>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Add received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
                              subAddParams->elementIndex, subAddParams->modelID,\
                                                 subAddParams->subAddress); 
  }
}
 8004030:	e009      	b.n	8004046 <Appli_GetSubAddParamsCb+0x46>
    TRACE_I(TF_CONFIG_SERVER,"Subscription Add received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	4619      	mov	r1, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	891b      	ldrh	r3, [r3, #8]
 8004040:	4805      	ldr	r0, [pc, #20]	@ (8004058 <Appli_GetSubAddParamsCb+0x58>)
 8004042:	f022 fc27 	bl	8026894 <iprintf>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	080297b4 	.word	0x080297b4
 8004054:	08029ac8 	.word	0x08029ac8
 8004058:	08029b24 	.word	0x08029b24

0800405c <Appli_GetSubDeleteParamsCb>:
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex, modelID
*            subAddress, isVirtual & allSubDeleted
* @retval none
*/ 
void Appli_GetSubDeleteParamsCb(model_subParams_t* subDeleteParams)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", subDeleteParams->status); 
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	7a9b      	ldrb	r3, [r3, #10]
 8004068:	4619      	mov	r1, r3
 800406a:	4817      	ldr	r0, [pc, #92]	@ (80040c8 <Appli_GetSubDeleteParamsCb+0x6c>)
 800406c:	f022 fc12 	bl	8026894 <iprintf>
  if(subDeleteParams->isVirtual)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	7adb      	ldrb	r3, [r3, #11]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <Appli_GetSubDeleteParamsCb+0x32>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Virtual Add Delete received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	4619      	mov	r1, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	891b      	ldrh	r3, [r3, #8]
 8004086:	4811      	ldr	r0, [pc, #68]	@ (80040cc <Appli_GetSubDeleteParamsCb+0x70>)
 8004088:	f022 fc04 	bl	8026894 <iprintf>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Delete received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
                              subDeleteParams->elementIndex, subDeleteParams->modelID,\
                                                 subDeleteParams->subAddress); 
  }  
}
 800408c:	e017      	b.n	80040be <Appli_GetSubDeleteParamsCb+0x62>
  else if(subDeleteParams->allSubDeleted)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	7b1b      	ldrb	r3, [r3, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <Appli_GetSubDeleteParamsCb+0x4e>
     TRACE_I(TF_CONFIG_SERVER,"Delete All Subscription received for elementIndex %d, modelID %.2lx \r\n",\
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	4619      	mov	r1, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	461a      	mov	r2, r3
 80040a2:	480b      	ldr	r0, [pc, #44]	@ (80040d0 <Appli_GetSubDeleteParamsCb+0x74>)
 80040a4:	f022 fbf6 	bl	8026894 <iprintf>
}
 80040a8:	e009      	b.n	80040be <Appli_GetSubDeleteParamsCb+0x62>
    TRACE_I(TF_CONFIG_SERVER,"Subscription Delete received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	4619      	mov	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	891b      	ldrh	r3, [r3, #8]
 80040b8:	4806      	ldr	r0, [pc, #24]	@ (80040d4 <Appli_GetSubDeleteParamsCb+0x78>)
 80040ba:	f022 fbeb 	bl	8026894 <iprintf>
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	080297b4 	.word	0x080297b4
 80040cc:	08029b78 	.word	0x08029b78
 80040d0:	08029bdc 	.word	0x08029bdc
 80040d4:	08029c24 	.word	0x08029c24

080040d8 <Appli_GetSubOverwriteParamsCb>:
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex, modelID
*            subAddress, isVirtual & allSubDeleted
* @retval none
*/ 
void Appli_GetSubOverwriteParamsCb(model_subParams_t* subOverwriteParams)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", subOverwriteParams->status); 
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	7a9b      	ldrb	r3, [r3, #10]
 80040e4:	4619      	mov	r1, r3
 80040e6:	4810      	ldr	r0, [pc, #64]	@ (8004128 <Appli_GetSubOverwriteParamsCb+0x50>)
 80040e8:	f022 fbd4 	bl	8026894 <iprintf>
  if(subOverwriteParams->isVirtual)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7adb      	ldrb	r3, [r3, #11]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <Appli_GetSubOverwriteParamsCb+0x32>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Virtual Overwrite received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	4619      	mov	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	891b      	ldrh	r3, [r3, #8]
 8004102:	480a      	ldr	r0, [pc, #40]	@ (800412c <Appli_GetSubOverwriteParamsCb+0x54>)
 8004104:	f022 fbc6 	bl	8026894 <iprintf>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Overwrite received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
                     subOverwriteParams->elementIndex, subOverwriteParams->modelID,\
                                                 subOverwriteParams->subAddress); 
  }  
}
 8004108:	e009      	b.n	800411e <Appli_GetSubOverwriteParamsCb+0x46>
    TRACE_I(TF_CONFIG_SERVER,"Subscription Overwrite received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	4619      	mov	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	891b      	ldrh	r3, [r3, #8]
 8004118:	4805      	ldr	r0, [pc, #20]	@ (8004130 <Appli_GetSubOverwriteParamsCb+0x58>)
 800411a:	f022 fbbb 	bl	8026894 <iprintf>
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	080297b4 	.word	0x080297b4
 800412c:	08029c7c 	.word	0x08029c7c
 8004130:	08029cdc 	.word	0x08029cdc

08004134 <Appli_GetPublicationSetParamsCb>:
*         Publish Address, PublishPeriod, PublishTTL, Credential Flag, 
*         Publish AppKeyIndex, Retransmit Count, Restransmit Interval Steps & status
* @retval none
*/ 
void Appli_GetPublicationSetParamsCb(model_publicationparams_t* pPubParameters)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Publication Add received for modelID %.2lx & elementAddress %.2x \r\n",
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	4807      	ldr	r0, [pc, #28]	@ (8004164 <Appli_GetPublicationSetParamsCb+0x30>)
 8004148:	f022 fba4 	bl	8026894 <iprintf>
          pPubParameters->modelID,
          pPubParameters->elementAddress); 
  if(pPubParameters->modelID == SENSOR_SERVER_MODEL_ID)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 8004154:	d102      	bne.n	800415c <Appli_GetPublicationSetParamsCb+0x28>
  {
    Sensor_ModelPublishSet(pPubParameters);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f00c fe18 	bl	8010d8c <Sensor_ModelPublishSet>
  }
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	08029d34 	.word	0x08029d34

08004168 <Appli_GetPublicationGetParamsCb>:
*         Publish Address, PublishPeriod, PublishTTL, Credential Flag, 
*         Publish AppKeyIndex, Retransmit Count, Restransmit Interval Steps & status
* @retval none
*/ 
void Appli_GetPublicationGetParamsCb(model_publicationparams_t* pPubParameters)
{
 8004168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800416a:	b089      	sub	sp, #36	@ 0x24
 800416c:	af06      	add	r7, sp, #24
 800416e:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", pPubParameters->status); 
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7c5b      	ldrb	r3, [r3, #17]
 8004174:	4619      	mov	r1, r3
 8004176:	4814      	ldr	r0, [pc, #80]	@ (80041c8 <Appli_GetPublicationGetParamsCb+0x60>)
 8004178:	f022 fb8c 	bl	8026894 <iprintf>
  TRACE_I(TF_CONFIG_SERVER,"Received Publication parameters:  credentialFlag = %.2x,\
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	7b1b      	ldrb	r3, [r3, #12]
 8004180:	461e      	mov	r6, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	469c      	mov	ip, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	895b      	ldrh	r3, [r3, #10]
 8004190:	4619      	mov	r1, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7b9b      	ldrb	r3, [r3, #14]
 8004196:	4618      	mov	r0, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	7bdb      	ldrb	r3, [r3, #15]
 800419c:	461c      	mov	r4, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	7c1b      	ldrb	r3, [r3, #16]
 80041a2:	461d      	mov	r5, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	7b5b      	ldrb	r3, [r3, #13]
 80041a8:	9304      	str	r3, [sp, #16]
 80041aa:	9503      	str	r5, [sp, #12]
 80041ac:	9402      	str	r4, [sp, #8]
 80041ae:	9001      	str	r0, [sp, #4]
 80041b0:	9100      	str	r1, [sp, #0]
 80041b2:	4613      	mov	r3, r2
 80041b4:	4662      	mov	r2, ip
 80041b6:	4631      	mov	r1, r6
 80041b8:	4804      	ldr	r0, [pc, #16]	@ (80041cc <Appli_GetPublicationGetParamsCb+0x64>)
 80041ba:	f022 fb6b 	bl	8026894 <iprintf>
          elementAddress = %.2x, modelID = %.2lx, appKeyIndex = %.2x,\
          publishPeriod = %.2x, publishRetransmitCount = %.2x, publishRetransmitIntervalSteps = %.2x,\
          publishTTL = %.2x \r\n", pPubParameters->credentialFlag, pPubParameters->elementAddress, pPubParameters->modelID,\
          pPubParameters->publishAppKeyIndex, pPubParameters->publishPeriod, pPubParameters->publishRetransmitCount,\
          pPubParameters->publishRetransmitIntervalSteps, pPubParameters->publishTTL);
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c6:	bf00      	nop
 80041c8:	080297b4 	.word	0x080297b4
 80041cc:	08029d78 	.word	0x08029d78

080041d0 <Appli_Generic_OnOff_Set>:
*/ 
MOBLE_RESULT Appli_Generic_OnOff_Set(Generic_OnOffStatus_t* pGeneric_OnOffParam, 
                                     MOBLEUINT8 OptionalValid,
                                     MOBLEUINT16 dstPeer,
                                     MOBLEUINT8 elementIndex)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	4608      	mov	r0, r1
 80041da:	4611      	mov	r1, r2
 80041dc:	461a      	mov	r2, r3
 80041de:	4603      	mov	r3, r0
 80041e0:	70fb      	strb	r3, [r7, #3]
 80041e2:	460b      	mov	r3, r1
 80041e4:	803b      	strh	r3, [r7, #0]
 80041e6:	4613      	mov	r3, r2
 80041e8:	70bb      	strb	r3, [r7, #2]
  /* LED control only for main element */
  if(elementIndex == GENERIC_SERVER_MAIN_ELEMENT_INDEX)
 80041ea:	78bb      	ldrb	r3, [r7, #2]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d16d      	bne.n	80042cc <Appli_Generic_OnOff_Set+0xfc>
  {
    /*User need to modify the parameters as per the number of elements per node*/
    AppliOnOffSet[elementIndex].Present_OnOff = pGeneric_OnOffParam->Present_OnOff_State;
 80041f0:	78ba      	ldrb	r2, [r7, #2]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	7818      	ldrb	r0, [r3, #0]
 80041f6:	4943      	ldr	r1, [pc, #268]	@ (8004304 <Appli_Generic_OnOff_Set+0x134>)
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	440b      	add	r3, r1
 8004200:	4602      	mov	r2, r0
 8004202:	701a      	strb	r2, [r3, #0]
    AppliOnOffSet[elementIndex].Present_OnOffValue = pGeneric_OnOffParam->Present_OnOff_Value; 
 8004204:	78ba      	ldrb	r2, [r7, #2]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800420c:	b298      	uxth	r0, r3
 800420e:	493d      	ldr	r1, [pc, #244]	@ (8004304 <Appli_Generic_OnOff_Set+0x134>)
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	440b      	add	r3, r1
 8004218:	4602      	mov	r2, r0
 800421a:	f8a3 2001 	strh.w	r2, [r3, #1]

    /* This condition is applicable when user want to on off the light with some 
      default transition value, or optionalValid =IN_TRANSITION ,
      transition is in progress.
    */
    if((OptionalValid == DEFAULT_TRANSITION) || (OptionalValid == IN_TRANSITION))
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d002      	beq.n	800422a <Appli_Generic_OnOff_Set+0x5a>
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d133      	bne.n	8004292 <Appli_Generic_OnOff_Set+0xc2>
      else
      {
        AppliOnOffSet[elementIndex].TargetValue = APPLI_LED_OFF;
      }
  #else
      AppliOnOffSet[elementIndex].TargetValue = pGeneric_OnOffParam->Target_OnOff; 
 800422a:	78ba      	ldrb	r2, [r7, #2]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004232:	b298      	uxth	r0, r3
 8004234:	4933      	ldr	r1, [pc, #204]	@ (8004304 <Appli_Generic_OnOff_Set+0x134>)
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	440b      	add	r3, r1
 800423e:	4602      	mov	r2, r0
 8004240:	f8a3 2003 	strh.w	r2, [r3, #3]
  #endif /* EME */

      if(AppliOnOffSet[elementIndex].Present_OnOffValue == AppliOnOffSet[elementIndex].TargetValue)
 8004244:	78ba      	ldrb	r2, [r7, #2]
 8004246:	492f      	ldr	r1, [pc, #188]	@ (8004304 <Appli_Generic_OnOff_Set+0x134>)
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	440b      	add	r3, r1
 8004250:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004254:	b299      	uxth	r1, r3
 8004256:	78ba      	ldrb	r2, [r7, #2]
 8004258:	482a      	ldr	r0, [pc, #168]	@ (8004304 <Appli_Generic_OnOff_Set+0x134>)
 800425a:	4613      	mov	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	4403      	add	r3, r0
 8004262:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004266:	b29b      	uxth	r3, r3
 8004268:	4299      	cmp	r1, r3
 800426a:	d12f      	bne.n	80042cc <Appli_Generic_OnOff_Set+0xfc>
      {
        if(AppliOnOffSet[elementIndex].Present_OnOffValue > 0)
 800426c:	78ba      	ldrb	r2, [r7, #2]
 800426e:	4925      	ldr	r1, [pc, #148]	@ (8004304 <Appli_Generic_OnOff_Set+0x134>)
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	440b      	add	r3, r1
 8004278:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <Appli_Generic_OnOff_Set+0xba>
        {
          BSP_LED_On(LED_BLUE);
 8004282:	2000      	movs	r0, #0
 8004284:	f002 faac 	bl	80067e0 <BSP_LED_On>
      if(AppliOnOffSet[elementIndex].Present_OnOffValue == AppliOnOffSet[elementIndex].TargetValue)
 8004288:	e020      	b.n	80042cc <Appli_Generic_OnOff_Set+0xfc>
          // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); IT CAN BE DONE!
        }
        else
        {
          BSP_LED_Off(LED_BLUE);
 800428a:	2000      	movs	r0, #0
 800428c:	f002 fac2 	bl	8006814 <BSP_LED_Off>
      if(AppliOnOffSet[elementIndex].Present_OnOffValue == AppliOnOffSet[elementIndex].TargetValue)
 8004290:	e01c      	b.n	80042cc <Appli_Generic_OnOff_Set+0xfc>
        }
      }
    }  
    else
    {
      if((AppliOnOffSet[elementIndex].Present_OnOff == APPLI_LED_ON) && (OptionalValid == NO_TRANSITION))
 8004292:	78ba      	ldrb	r2, [r7, #2]
 8004294:	491b      	ldr	r1, [pc, #108]	@ (8004304 <Appli_Generic_OnOff_Set+0x134>)
 8004296:	4613      	mov	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	440b      	add	r3, r1
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d10b      	bne.n	80042bc <Appli_Generic_OnOff_Set+0xec>
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d108      	bne.n	80042bc <Appli_Generic_OnOff_Set+0xec>
      { 
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
        Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
#endif
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80042aa:	2201      	movs	r2, #1
 80042ac:	2101      	movs	r1, #1
 80042ae:	4816      	ldr	r0, [pc, #88]	@ (8004308 <Appli_Generic_OnOff_Set+0x138>)
 80042b0:	f003 fcb6 	bl	8007c20 <HAL_GPIO_WritePin>
        BSP_LED_On(LED_BLUE);
 80042b4:	2000      	movs	r0, #0
 80042b6:	f002 fa93 	bl	80067e0 <BSP_LED_On>
 80042ba:	e007      	b.n	80042cc <Appli_Generic_OnOff_Set+0xfc>
      {  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
        Appli_LightPwmValue.IntensityValue = PWM_VALUE_OFF;
        Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);
#endif
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80042bc:	2200      	movs	r2, #0
 80042be:	2101      	movs	r1, #1
 80042c0:	4811      	ldr	r0, [pc, #68]	@ (8004308 <Appli_Generic_OnOff_Set+0x138>)
 80042c2:	f003 fcad 	bl	8007c20 <HAL_GPIO_WritePin>
        BSP_LED_Off(LED_BLUE);
 80042c6:	2000      	movs	r0, #0
 80042c8:	f002 faa4 	bl	8006814 <BSP_LED_Off>
      }
    } 
  }
  
  TRACE_M(TF_GENERIC, "Appli_Generic_OnOff_Set callback received for elementIndex %d \r\n", elementIndex);           
 80042cc:	2100      	movs	r1, #0
 80042ce:	480f      	ldr	r0, [pc, #60]	@ (800430c <Appli_Generic_OnOff_Set+0x13c>)
 80042d0:	f008 fec6 	bl	800d060 <TraceHeader>
 80042d4:	78bb      	ldrb	r3, [r7, #2]
 80042d6:	4619      	mov	r1, r3
 80042d8:	480d      	ldr	r0, [pc, #52]	@ (8004310 <Appli_Generic_OnOff_Set+0x140>)
 80042da:	f022 fadb 	bl	8026894 <iprintf>
  TRACE_M(TF_SERIAL_CTRL, "#8202!for elementIndex %d \r\n", elementIndex);
 80042de:	2100      	movs	r1, #0
 80042e0:	480a      	ldr	r0, [pc, #40]	@ (800430c <Appli_Generic_OnOff_Set+0x13c>)
 80042e2:	f008 febd 	bl	800d060 <TraceHeader>
 80042e6:	78bb      	ldrb	r3, [r7, #2]
 80042e8:	4619      	mov	r1, r3
 80042ea:	480a      	ldr	r0, [pc, #40]	@ (8004314 <Appli_Generic_OnOff_Set+0x144>)
 80042ec:	f022 fad2 	bl	8026894 <iprintf>

  NvmStatePowerFlag_Set(GENERIC_ON_OFF_NVM_FLAG, elementIndex);
 80042f0:	78bb      	ldrb	r3, [r7, #2]
 80042f2:	4619      	mov	r1, r3
 80042f4:	2001      	movs	r0, #1
 80042f6:	f009 f89f 	bl	800d438 <NvmStatePowerFlag_Set>

  return MOBLE_RESULT_SUCCESS;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	2000456c 	.word	0x2000456c
 8004308:	48000800 	.word	0x48000800
 800430c:	0802ddf8 	.word	0x0802ddf8
 8004310:	08029e7c 	.word	0x08029e7c
 8004314:	08029ec0 	.word	0x08029ec0

08004318 <Appli_Generic_Level_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_Level_Set(Generic_LevelStatus_t* plevelParam, 
                                     MOBLEUINT8 OptionalValid,MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	4608      	mov	r0, r1
 8004322:	4611      	mov	r1, r2
 8004324:	461a      	mov	r2, r3
 8004326:	4603      	mov	r3, r0
 8004328:	70fb      	strb	r3, [r7, #3]
 800432a:	460b      	mov	r3, r1
 800432c:	803b      	strh	r3, [r7, #0]
 800432e:	4613      	mov	r3, r2
 8004330:	70bb      	strb	r3, [r7, #2]
  MOBLEUINT16 duty;
  static MOBLEUINT16 previousIntensity = 0;
   
  AppliLevelSet[elementIndex].Present_Level16= plevelParam->Present_Level16;
 8004332:	78ba      	ldrb	r2, [r7, #2]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800433a:	b218      	sxth	r0, r3
 800433c:	4939      	ldr	r1, [pc, #228]	@ (8004424 <Appli_Generic_Level_Set+0x10c>)
 800433e:	4613      	mov	r3, r2
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	4602      	mov	r2, r0
 800434a:	801a      	strh	r2, [r3, #0]
  if(AppliLevelSet[elementIndex].Present_Level16 <= 0)
 800434c:	78ba      	ldrb	r2, [r7, #2]
 800434e:	4935      	ldr	r1, [pc, #212]	@ (8004424 <Appli_Generic_Level_Set+0x10c>)
 8004350:	4613      	mov	r3, r2
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800435e:	2b00      	cmp	r3, #0
 8004360:	dc08      	bgt.n	8004374 <Appli_Generic_Level_Set+0x5c>
  {
    AppliLevelSet[elementIndex].Present_Level16 = 0;
 8004362:	78ba      	ldrb	r2, [r7, #2]
 8004364:	492f      	ldr	r1, [pc, #188]	@ (8004424 <Appli_Generic_Level_Set+0x10c>)
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	2200      	movs	r2, #0
 8004372:	801a      	strh	r2, [r3, #0]
  }
  
  IntensityValue =  AppliLevelSet[elementIndex].Present_Level16;
 8004374:	78ba      	ldrb	r2, [r7, #2]
 8004376:	492b      	ldr	r1, [pc, #172]	@ (8004424 <Appli_Generic_Level_Set+0x10c>)
 8004378:	4613      	mov	r3, r2
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004386:	b29a      	uxth	r2, r3
 8004388:	4b27      	ldr	r3, [pc, #156]	@ (8004428 <Appli_Generic_Level_Set+0x110>)
 800438a:	801a      	strh	r2, [r3, #0]
  
  if(((IntensityValue > previousIntensity) && (IntensityValue <PWM_TIME_PERIOD)) ||
 800438c:	4b26      	ldr	r3, [pc, #152]	@ (8004428 <Appli_Generic_Level_Set+0x110>)
 800438e:	881a      	ldrh	r2, [r3, #0]
 8004390:	4b26      	ldr	r3, [pc, #152]	@ (800442c <Appli_Generic_Level_Set+0x114>)
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d905      	bls.n	80043a4 <Appli_Generic_Level_Set+0x8c>
 8004398:	4b23      	ldr	r3, [pc, #140]	@ (8004428 <Appli_Generic_Level_Set+0x110>)
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	f647 42f5 	movw	r2, #31989	@ 0x7cf5
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d903      	bls.n	80043ac <Appli_Generic_Level_Set+0x94>
     IntensityValue == INTENSITY_LEVEL_ZERO)
 80043a4:	4b20      	ldr	r3, [pc, #128]	@ (8004428 <Appli_Generic_Level_Set+0x110>)
 80043a6:	881b      	ldrh	r3, [r3, #0]
  if(((IntensityValue > previousIntensity) && (IntensityValue <PWM_TIME_PERIOD)) ||
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d103      	bne.n	80043b4 <Appli_Generic_Level_Set+0x9c>
  {
    IntensityFlag = MOBLE_FALSE;
 80043ac:	4b20      	ldr	r3, [pc, #128]	@ (8004430 <Appli_Generic_Level_Set+0x118>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	e002      	b.n	80043ba <Appli_Generic_Level_Set+0xa2>
  }
  else
  {
    IntensityFlag = MOBLE_TRUE;
 80043b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004430 <Appli_Generic_Level_Set+0x118>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]
  }
  previousIntensity = IntensityValue;     
 80043ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004428 <Appli_Generic_Level_Set+0x110>)
 80043bc:	881a      	ldrh	r2, [r3, #0]
 80043be:	4b1b      	ldr	r3, [pc, #108]	@ (800442c <Appli_Generic_Level_Set+0x114>)
 80043c0:	801a      	strh	r2, [r3, #0]
  
  if(AppliLevelSet[elementIndex].Present_Level16 < 0x00)
 80043c2:	78ba      	ldrb	r2, [r7, #2]
 80043c4:	4917      	ldr	r1, [pc, #92]	@ (8004424 <Appli_Generic_Level_Set+0x10c>)
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	da08      	bge.n	80043ea <Appli_Generic_Level_Set+0xd2>
  {
     AppliLevelSet[elementIndex].Present_Level16 = 0;
 80043d8:	78ba      	ldrb	r2, [r7, #2]
 80043da:	4912      	ldr	r1, [pc, #72]	@ (8004424 <Appli_Generic_Level_Set+0x10c>)
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	2200      	movs	r2, #0
 80043e8:	801a      	strh	r2, [r3, #0]
  duty = PwmValueMapping(AppliLevelSet[elementIndex].Present_Level16 , 0x7FFF ,0x0000); 
  Appli_LightPwmValue.IntensityValue = duty;
  Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
#endif
  
  TRACE_M(TF_GENERIC,"Appli_Generic_Level_Set callback received for elementIndex %d \r\n", elementIndex);
 80043ea:	2100      	movs	r1, #0
 80043ec:	4811      	ldr	r0, [pc, #68]	@ (8004434 <Appli_Generic_Level_Set+0x11c>)
 80043ee:	f008 fe37 	bl	800d060 <TraceHeader>
 80043f2:	78bb      	ldrb	r3, [r7, #2]
 80043f4:	4619      	mov	r1, r3
 80043f6:	4810      	ldr	r0, [pc, #64]	@ (8004438 <Appli_Generic_Level_Set+0x120>)
 80043f8:	f022 fa4c 	bl	8026894 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8206!for elementIndex %d \r\n", elementIndex);
 80043fc:	2100      	movs	r1, #0
 80043fe:	480d      	ldr	r0, [pc, #52]	@ (8004434 <Appli_Generic_Level_Set+0x11c>)
 8004400:	f008 fe2e 	bl	800d060 <TraceHeader>
 8004404:	78bb      	ldrb	r3, [r7, #2]
 8004406:	4619      	mov	r1, r3
 8004408:	480c      	ldr	r0, [pc, #48]	@ (800443c <Appli_Generic_Level_Set+0x124>)
 800440a:	f022 fa43 	bl	8026894 <iprintf>
  
  NvmStatePowerFlag_Set(GENERIC_LEVEL_NVM_FLAG, elementIndex);
 800440e:	78bb      	ldrb	r3, [r7, #2]
 8004410:	4619      	mov	r1, r3
 8004412:	2002      	movs	r0, #2
 8004414:	f009 f810 	bl	800d438 <NvmStatePowerFlag_Set>
    
  return MOBLE_RESULT_SUCCESS;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20004574 	.word	0x20004574
 8004428:	20004596 	.word	0x20004596
 800442c:	20004586 	.word	0x20004586
 8004430:	20004598 	.word	0x20004598
 8004434:	0802de10 	.word	0x0802de10
 8004438:	08029ee0 	.word	0x08029ee0
 800443c:	08029f24 	.word	0x08029f24

08004440 <Appli_Generic_Delta_Set>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_Delta_Set(Generic_LevelStatus_t* pdeltalevelParam, 
                                          MOBLEUINT8 OptionalValid,MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex) {
 8004440:	b590      	push	{r4, r7, lr}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	4608      	mov	r0, r1
 800444a:	4611      	mov	r1, r2
 800444c:	461a      	mov	r2, r3
 800444e:	4603      	mov	r3, r0
 8004450:	70fb      	strb	r3, [r7, #3]
 8004452:	460b      	mov	r3, r1
 8004454:	803b      	strh	r3, [r7, #0]
 8004456:	4613      	mov	r3, r2
 8004458:	70bb      	strb	r3, [r7, #2]

	uint16_t dutyCycle = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	81fb      	strh	r3, [r7, #14]
	int16_t correctRange = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	81bb      	strh	r3, [r7, #12]
	int16_t diff = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	817b      	strh	r3, [r7, #10]
	int16_t dynamicStep = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	813b      	strh	r3, [r7, #8]
//	AppliLevelSet[elementIndex].Present_Level16 = pdeltalevelParam->Present_Level16;
//	correctRange = DC_MapSliderToGenericLevelRange(pdeltalevelParam->Present_Level16);
	AppliLevelSet[elementIndex].Target_Level16 = DC_MapSliderToGenericLevelRange(pdeltalevelParam->Present_Level16);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004470:	b21b      	sxth	r3, r3
 8004472:	78bc      	ldrb	r4, [r7, #2]
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff f9db 	bl	8003830 <DC_MapSliderToGenericLevelRange>
 800447a:	4603      	mov	r3, r0
 800447c:	4619      	mov	r1, r3
 800447e:	4a7f      	ldr	r2, [pc, #508]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 8004480:	4623      	mov	r3, r4
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4423      	add	r3, r4
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	3302      	adds	r3, #2
 800448c:	460a      	mov	r2, r1
 800448e:	801a      	strh	r2, [r3, #0]
	TRACE_M(TF_GENERIC,"Generic_LevelDelta_Set level value: %d \r\n", AppliLevelSet[elementIndex].Target_Level16);
 8004490:	2100      	movs	r1, #0
 8004492:	487b      	ldr	r0, [pc, #492]	@ (8004680 <Appli_Generic_Delta_Set+0x240>)
 8004494:	f008 fde4 	bl	800d060 <TraceHeader>
 8004498:	78ba      	ldrb	r2, [r7, #2]
 800449a:	4978      	ldr	r1, [pc, #480]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 800449c:	4613      	mov	r3, r2
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	3302      	adds	r3, #2
 80044a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044ac:	4619      	mov	r1, r3
 80044ae:	4875      	ldr	r0, [pc, #468]	@ (8004684 <Appli_Generic_Delta_Set+0x244>)
 80044b0:	f022 f9f0 	bl	8026894 <iprintf>

	while (AppliLevelSet[elementIndex].Present_Level16 != AppliLevelSet[elementIndex].Target_Level16) {
 80044b4:	e0b6      	b.n	8004624 <Appli_Generic_Delta_Set+0x1e4>
		diff = AppliLevelSet[elementIndex].Target_Level16 - AppliLevelSet[elementIndex].Present_Level16;
 80044b6:	78ba      	ldrb	r2, [r7, #2]
 80044b8:	4970      	ldr	r1, [pc, #448]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 80044ba:	4613      	mov	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	3302      	adds	r3, #2
 80044c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044ca:	b299      	uxth	r1, r3
 80044cc:	78ba      	ldrb	r2, [r7, #2]
 80044ce:	486b      	ldr	r0, [pc, #428]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 80044d0:	4613      	mov	r3, r2
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4403      	add	r3, r0
 80044da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	1acb      	subs	r3, r1, r3
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	817b      	strh	r3, [r7, #10]
		dynamicStep = (abs(diff) < STEP_SIZE) ? abs(diff) : STEP_SIZE;
 80044e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bfb8      	it	lt
 80044ee:	425b      	neglt	r3, r3
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044f6:	bf28      	it	cs
 80044f8:	f44f 737a 	movcs.w	r3, #1000	@ 0x3e8
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	813b      	strh	r3, [r7, #8]
		if (diff > 0) {
 8004500:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004504:	2b00      	cmp	r3, #0
 8004506:	dd17      	ble.n	8004538 <Appli_Generic_Delta_Set+0xf8>
			AppliLevelSet[elementIndex].Present_Level16 += dynamicStep;
 8004508:	78ba      	ldrb	r2, [r7, #2]
 800450a:	495c      	ldr	r1, [pc, #368]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 800450c:	4613      	mov	r3, r2
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800451a:	b29a      	uxth	r2, r3
 800451c:	893b      	ldrh	r3, [r7, #8]
 800451e:	4413      	add	r3, r2
 8004520:	b29b      	uxth	r3, r3
 8004522:	78ba      	ldrb	r2, [r7, #2]
 8004524:	b218      	sxth	r0, r3
 8004526:	4955      	ldr	r1, [pc, #340]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 8004528:	4613      	mov	r3, r2
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	4602      	mov	r2, r0
 8004534:	801a      	strh	r2, [r3, #0]
 8004536:	e016      	b.n	8004566 <Appli_Generic_Delta_Set+0x126>
		} else {
			AppliLevelSet[elementIndex].Present_Level16 -= dynamicStep;
 8004538:	78ba      	ldrb	r2, [r7, #2]
 800453a:	4950      	ldr	r1, [pc, #320]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 800453c:	4613      	mov	r3, r2
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800454a:	b29a      	uxth	r2, r3
 800454c:	893b      	ldrh	r3, [r7, #8]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	b29b      	uxth	r3, r3
 8004552:	78ba      	ldrb	r2, [r7, #2]
 8004554:	b218      	sxth	r0, r3
 8004556:	4949      	ldr	r1, [pc, #292]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 8004558:	4613      	mov	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	4602      	mov	r2, r0
 8004564:	801a      	strh	r2, [r3, #0]
		}
		if ((diff > 0 && AppliLevelSet[elementIndex].Present_Level16 > AppliLevelSet[elementIndex].Target_Level16) ||
 8004566:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800456a:	2b00      	cmp	r3, #0
 800456c:	dd14      	ble.n	8004598 <Appli_Generic_Delta_Set+0x158>
 800456e:	78ba      	ldrb	r2, [r7, #2]
 8004570:	4942      	ldr	r1, [pc, #264]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 8004572:	4613      	mov	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004580:	78ba      	ldrb	r2, [r7, #2]
 8004582:	483e      	ldr	r0, [pc, #248]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 8004584:	4613      	mov	r3, r2
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4403      	add	r3, r0
 800458e:	3302      	adds	r3, #2
 8004590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004594:	4299      	cmp	r1, r3
 8004596:	dc18      	bgt.n	80045ca <Appli_Generic_Delta_Set+0x18a>
 8004598:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800459c:	2b00      	cmp	r3, #0
 800459e:	da27      	bge.n	80045f0 <Appli_Generic_Delta_Set+0x1b0>
			(diff < 0 && AppliLevelSet[elementIndex].Present_Level16 < AppliLevelSet[elementIndex].Target_Level16)) {
 80045a0:	78ba      	ldrb	r2, [r7, #2]
 80045a2:	4936      	ldr	r1, [pc, #216]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 80045a4:	4613      	mov	r3, r2
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	f9b3 1000 	ldrsh.w	r1, [r3]
 80045b2:	78ba      	ldrb	r2, [r7, #2]
 80045b4:	4831      	ldr	r0, [pc, #196]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 80045b6:	4613      	mov	r3, r2
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4403      	add	r3, r0
 80045c0:	3302      	adds	r3, #2
 80045c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045c6:	4299      	cmp	r1, r3
 80045c8:	da12      	bge.n	80045f0 <Appli_Generic_Delta_Set+0x1b0>
			AppliLevelSet[elementIndex].Present_Level16 = AppliLevelSet[elementIndex].Target_Level16;
 80045ca:	78b9      	ldrb	r1, [r7, #2]
 80045cc:	78ba      	ldrb	r2, [r7, #2]
 80045ce:	482b      	ldr	r0, [pc, #172]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 80045d0:	460b      	mov	r3, r1
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	440b      	add	r3, r1
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4403      	add	r3, r0
 80045da:	3302      	adds	r3, #2
 80045dc:	f9b3 0000 	ldrsh.w	r0, [r3]
 80045e0:	4926      	ldr	r1, [pc, #152]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 80045e2:	4613      	mov	r3, r2
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	4602      	mov	r2, r0
 80045ee:	801a      	strh	r2, [r3, #0]
		}
		dutyCycle = DC_CalcNewDutyCycle(dimmer, AppliLevelSet[elementIndex].Present_Level16);
 80045f0:	4b25      	ldr	r3, [pc, #148]	@ (8004688 <Appli_Generic_Delta_Set+0x248>)
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	78ba      	ldrb	r2, [r7, #2]
 80045f6:	4921      	ldr	r1, [pc, #132]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 80045f8:	4613      	mov	r3, r2
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004606:	4619      	mov	r1, r3
 8004608:	f7ff f930 	bl	800386c <DC_CalcNewDutyCycle>
 800460c:	4603      	mov	r3, r0
 800460e:	81fb      	strh	r3, [r7, #14]
		DC_SetTimerCCR(dimmer, dutyCycle);
 8004610:	4b1d      	ldr	r3, [pc, #116]	@ (8004688 <Appli_Generic_Delta_Set+0x248>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	89fa      	ldrh	r2, [r7, #14]
 8004616:	4611      	mov	r1, r2
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff f957 	bl	80038cc <DC_SetTimerCCR>
		HAL_Delay(50);
 800461e:	2032      	movs	r0, #50	@ 0x32
 8004620:	f7fd f923 	bl	800186a <HAL_Delay>
	while (AppliLevelSet[elementIndex].Present_Level16 != AppliLevelSet[elementIndex].Target_Level16) {
 8004624:	78ba      	ldrb	r2, [r7, #2]
 8004626:	4915      	ldr	r1, [pc, #84]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 8004628:	4613      	mov	r3, r2
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004636:	78ba      	ldrb	r2, [r7, #2]
 8004638:	4810      	ldr	r0, [pc, #64]	@ (800467c <Appli_Generic_Delta_Set+0x23c>)
 800463a:	4613      	mov	r3, r2
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4403      	add	r3, r0
 8004644:	3302      	adds	r3, #2
 8004646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800464a:	4299      	cmp	r1, r3
 800464c:	f47f af33 	bne.w	80044b6 <Appli_Generic_Delta_Set+0x76>
//    Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);
//#endif
//    BSP_LED_Off(LED_BLUE);
//  }
  
	TRACE_M(TF_GENERIC,"Generic_LevelDelta_Set callback received for element %d \r\n", elementIndex);
 8004650:	2100      	movs	r1, #0
 8004652:	480b      	ldr	r0, [pc, #44]	@ (8004680 <Appli_Generic_Delta_Set+0x240>)
 8004654:	f008 fd04 	bl	800d060 <TraceHeader>
 8004658:	78bb      	ldrb	r3, [r7, #2]
 800465a:	4619      	mov	r1, r3
 800465c:	480b      	ldr	r0, [pc, #44]	@ (800468c <Appli_Generic_Delta_Set+0x24c>)
 800465e:	f022 f919 	bl	8026894 <iprintf>
	TRACE_M(TF_SERIAL_CTRL,"#8209!\r\n");
 8004662:	2100      	movs	r1, #0
 8004664:	4806      	ldr	r0, [pc, #24]	@ (8004680 <Appli_Generic_Delta_Set+0x240>)
 8004666:	f008 fcfb 	bl	800d060 <TraceHeader>
 800466a:	4809      	ldr	r0, [pc, #36]	@ (8004690 <Appli_Generic_Delta_Set+0x250>)
 800466c:	f022 f97a 	bl	8026964 <puts>

	return MOBLE_RESULT_SUCCESS;
 8004670:	2300      	movs	r3, #0

}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	bd90      	pop	{r4, r7, pc}
 800467a:	bf00      	nop
 800467c:	20004574 	.word	0x20004574
 8004680:	0802de28 	.word	0x0802de28
 8004684:	08029f44 	.word	0x08029f44
 8004688:	20004450 	.word	0x20004450
 800468c:	08029f70 	.word	0x08029f70
 8004690:	08029fac 	.word	0x08029fac

08004694 <Appli_Generic_Move_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_Move_Set(Generic_LevelStatus_t* pdeltaMoveParam, 
                                         MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                         MOBLEUINT8 elementIndex)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	4608      	mov	r0, r1
 800469e:	4611      	mov	r1, r2
 80046a0:	461a      	mov	r2, r3
 80046a2:	4603      	mov	r3, r0
 80046a4:	70fb      	strb	r3, [r7, #3]
 80046a6:	460b      	mov	r3, r1
 80046a8:	803b      	strh	r3, [r7, #0]
 80046aa:	4613      	mov	r3, r2
 80046ac:	70bb      	strb	r3, [r7, #2]
//  if(OptionalValid == 1)
//  {
    AppliLevelSet[elementIndex].Last_delta_level     = pdeltaMoveParam->Last_delta_level;
 80046ae:	78ba      	ldrb	r2, [r7, #2]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6899      	ldr	r1, [r3, #8]
 80046b4:	482e      	ldr	r0, [pc, #184]	@ (8004770 <Appli_Generic_Move_Set+0xdc>)
 80046b6:	4613      	mov	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4403      	add	r3, r0
 80046c0:	3308      	adds	r3, #8
 80046c2:	6019      	str	r1, [r3, #0]
    AppliLevelSet[elementIndex].Last_Level_TID       = pdeltaMoveParam->Last_Level_TID;
 80046c4:	78ba      	ldrb	r2, [r7, #2]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	7958      	ldrb	r0, [r3, #5]
 80046ca:	4929      	ldr	r1, [pc, #164]	@ (8004770 <Appli_Generic_Move_Set+0xdc>)
 80046cc:	4613      	mov	r3, r2
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	3305      	adds	r3, #5
 80046d8:	4602      	mov	r2, r0
 80046da:	701a      	strb	r2, [r3, #0]
    AppliLevelSet[elementIndex].Last_Present_Level16 = pdeltaMoveParam->Last_Present_Level16;
 80046dc:	78ba      	ldrb	r2, [r7, #2]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80046e4:	b218      	sxth	r0, r3
 80046e6:	4922      	ldr	r1, [pc, #136]	@ (8004770 <Appli_Generic_Move_Set+0xdc>)
 80046e8:	4613      	mov	r3, r2
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	3306      	adds	r3, #6
 80046f4:	4602      	mov	r2, r0
 80046f6:	801a      	strh	r2, [r3, #0]
    AppliLevelSet[elementIndex].Present_Level16      = pdeltaMoveParam->Present_Level16;   
 80046f8:	78ba      	ldrb	r2, [r7, #2]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004700:	b218      	sxth	r0, r3
 8004702:	491b      	ldr	r1, [pc, #108]	@ (8004770 <Appli_Generic_Move_Set+0xdc>)
 8004704:	4613      	mov	r3, r2
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	4602      	mov	r2, r0
 8004710:	801a      	strh	r2, [r3, #0]
    AppliLevelSet[elementIndex].RemainingTime        = pdeltaMoveParam->RemainingTime;
 8004712:	78ba      	ldrb	r2, [r7, #2]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	7918      	ldrb	r0, [r3, #4]
 8004718:	4915      	ldr	r1, [pc, #84]	@ (8004770 <Appli_Generic_Move_Set+0xdc>)
 800471a:	4613      	mov	r3, r2
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3304      	adds	r3, #4
 8004726:	4602      	mov	r2, r0
 8004728:	701a      	strb	r2, [r3, #0]
    AppliLevelSet[elementIndex].Target_Level16       = pdeltaMoveParam->Target_Level16;
 800472a:	78ba      	ldrb	r2, [r7, #2]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004732:	b218      	sxth	r0, r3
 8004734:	490e      	ldr	r1, [pc, #56]	@ (8004770 <Appli_Generic_Move_Set+0xdc>)
 8004736:	4613      	mov	r3, r2
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	3302      	adds	r3, #2
 8004742:	4602      	mov	r2, r0
 8004744:	801a      	strh	r2, [r3, #0]
//  }
  
    TRACE_M(TF_GENERIC,"Generic_LevelMove_Set callback received for element %d \r\n", elementIndex);
 8004746:	2100      	movs	r1, #0
 8004748:	480a      	ldr	r0, [pc, #40]	@ (8004774 <Appli_Generic_Move_Set+0xe0>)
 800474a:	f008 fc89 	bl	800d060 <TraceHeader>
 800474e:	78bb      	ldrb	r3, [r7, #2]
 8004750:	4619      	mov	r1, r3
 8004752:	4809      	ldr	r0, [pc, #36]	@ (8004778 <Appli_Generic_Move_Set+0xe4>)
 8004754:	f022 f89e 	bl	8026894 <iprintf>
    TRACE_M(TF_SERIAL_CTRL,"#820B! \r\n");
 8004758:	2100      	movs	r1, #0
 800475a:	4806      	ldr	r0, [pc, #24]	@ (8004774 <Appli_Generic_Move_Set+0xe0>)
 800475c:	f008 fc80 	bl	800d060 <TraceHeader>
 8004760:	4806      	ldr	r0, [pc, #24]	@ (800477c <Appli_Generic_Move_Set+0xe8>)
 8004762:	f022 f8ff 	bl	8026964 <puts>
    return MOBLE_RESULT_SUCCESS;
 8004766:	2300      	movs	r3, #0
  
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20004574 	.word	0x20004574
 8004774:	0802de40 	.word	0x0802de40
 8004778:	08029fb4 	.word	0x08029fb4
 800477c:	08029ff0 	.word	0x08029ff0

08004780 <Appli_Generic_PowerOnOff_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_PowerOnOff_Set(Generic_PowerOnOffParam_t* pPowerOnOffParam, 
                                         MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{ 
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	4608      	mov	r0, r1
 800478a:	4611      	mov	r1, r2
 800478c:	461a      	mov	r2, r3
 800478e:	4603      	mov	r3, r0
 8004790:	70fb      	strb	r3, [r7, #3]
 8004792:	460b      	mov	r3, r1
 8004794:	803b      	strh	r3, [r7, #0]
 8004796:	4613      	mov	r3, r2
 8004798:	70bb      	strb	r3, [r7, #2]
  
  AppliPowerOnSet[elementIndex].PowerOnState = pPowerOnOffParam->PowerOnOffState;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	781a      	ldrb	r2, [r3, #0]
 800479e:	78bb      	ldrb	r3, [r7, #2]
 80047a0:	b211      	sxth	r1, r2
 80047a2:	4a12      	ldr	r2, [pc, #72]	@ (80047ec <Appli_Generic_PowerOnOff_Set+0x6c>)
 80047a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  TRACE_M(TF_SERIAL_CTRL,"#8213! for elementIndex %d \r\n", elementIndex);
 80047a8:	2100      	movs	r1, #0
 80047aa:	4811      	ldr	r0, [pc, #68]	@ (80047f0 <Appli_Generic_PowerOnOff_Set+0x70>)
 80047ac:	f008 fc58 	bl	800d060 <TraceHeader>
 80047b0:	78bb      	ldrb	r3, [r7, #2]
 80047b2:	4619      	mov	r1, r3
 80047b4:	480f      	ldr	r0, [pc, #60]	@ (80047f4 <Appli_Generic_PowerOnOff_Set+0x74>)
 80047b6:	f022 f86d 	bl	8026894 <iprintf>
  TRACE_M(TF_GENERIC,"Appli_Generic_PowerOnOff_Set callback received for elementIndex %d \r\n", elementIndex);
 80047ba:	2100      	movs	r1, #0
 80047bc:	480c      	ldr	r0, [pc, #48]	@ (80047f0 <Appli_Generic_PowerOnOff_Set+0x70>)
 80047be:	f008 fc4f 	bl	800d060 <TraceHeader>
 80047c2:	78bb      	ldrb	r3, [r7, #2]
 80047c4:	4619      	mov	r1, r3
 80047c6:	480c      	ldr	r0, [pc, #48]	@ (80047f8 <Appli_Generic_PowerOnOff_Set+0x78>)
 80047c8:	f022 f864 	bl	8026894 <iprintf>

  if(AppliPowerOnSet[elementIndex].PowerOnState == GENERIC_POWER_ON_STATE)
 80047cc:	78bb      	ldrb	r3, [r7, #2]
 80047ce:	4a07      	ldr	r2, [pc, #28]	@ (80047ec <Appli_Generic_PowerOnOff_Set+0x6c>)
 80047d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d102      	bne.n	80047de <Appli_Generic_PowerOnOff_Set+0x5e>
  {
    /* set the flag value for NVM store */
    RestoreFlag = GENERIC_ON_OFF_NVM_FLAG;
 80047d8:	4b08      	ldr	r3, [pc, #32]	@ (80047fc <Appli_Generic_PowerOnOff_Set+0x7c>)
 80047da:	2201      	movs	r2, #1
 80047dc:	701a      	strb	r2, [r3, #0]
  }

  AppliNvm_SaveMessageParam();
 80047de:	f000 febf 	bl	8005560 <AppliNvm_SaveMessageParam>
    
  return MOBLE_RESULT_SUCCESS;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20004580 	.word	0x20004580
 80047f0:	0802de58 	.word	0x0802de58
 80047f4:	08029ffc 	.word	0x08029ffc
 80047f8:	0802a01c 	.word	0x0802a01c
 80047fc:	200046ac 	.word	0x200046ac

08004800 <Appli_Generic_GetOnOffStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetOnOffStatus(MOBLEUINT8* pOnOff_Status,MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex)                                        
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	807b      	strh	r3, [r7, #2]
 800480c:	4613      	mov	r3, r2
 800480e:	707b      	strb	r3, [r7, #1]
  
  *pOnOff_Status = AppliOnOffSet[elementIndex].Present_OnOff;
 8004810:	787a      	ldrb	r2, [r7, #1]
 8004812:	4907      	ldr	r1, [pc, #28]	@ (8004830 <Appli_Generic_GetOnOffStatus+0x30>)
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	440b      	add	r3, r1
 800481c:	781a      	ldrb	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS; 
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	2000456c 	.word	0x2000456c

08004834 <Appli_Generic_GetOnOffValue>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetOnOffValue(MOBLEUINT8* pOnOff_Value, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex)                                        
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	807b      	strh	r3, [r7, #2]
 8004840:	4613      	mov	r3, r2
 8004842:	707b      	strb	r3, [r7, #1]
  
  *pOnOff_Value = AppliOnOffSet[elementIndex].Present_OnOffValue;
 8004844:	787a      	ldrb	r2, [r7, #1]
 8004846:	491e      	ldr	r1, [pc, #120]	@ (80048c0 <Appli_Generic_GetOnOffValue+0x8c>)
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	440b      	add	r3, r1
 8004850:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004854:	b29b      	uxth	r3, r3
 8004856:	b2da      	uxtb	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	701a      	strb	r2, [r3, #0]
  *(pOnOff_Value+1) = AppliOnOffSet[elementIndex].Present_OnOffValue >> 8;
 800485c:	787a      	ldrb	r2, [r7, #1]
 800485e:	4918      	ldr	r1, [pc, #96]	@ (80048c0 <Appli_Generic_GetOnOffValue+0x8c>)
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	440b      	add	r3, r1
 8004868:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800486c:	b29b      	uxth	r3, r3
 800486e:	0a1b      	lsrs	r3, r3, #8
 8004870:	b29a      	uxth	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3301      	adds	r3, #1
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
  *(pOnOff_Value+2) = AppliOnOffSet[elementIndex].TargetValue;
 800487a:	787a      	ldrb	r2, [r7, #1]
 800487c:	4910      	ldr	r1, [pc, #64]	@ (80048c0 <Appli_Generic_GetOnOffValue+0x8c>)
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	440b      	add	r3, r1
 8004886:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800488a:	b29a      	uxth	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3302      	adds	r3, #2
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	701a      	strb	r2, [r3, #0]
  *(pOnOff_Value+3) = AppliOnOffSet[elementIndex].TargetValue >> 8;
 8004894:	787a      	ldrb	r2, [r7, #1]
 8004896:	490a      	ldr	r1, [pc, #40]	@ (80048c0 <Appli_Generic_GetOnOffValue+0x8c>)
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	440b      	add	r3, r1
 80048a0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	0a1b      	lsrs	r3, r3, #8
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3303      	adds	r3, #3
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS; 
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	2000456c 	.word	0x2000456c

080048c4 <Appli_Generic_GetLevelStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetLevelStatus(MOBLEUINT8* pLevel_Status, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{ 
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	807b      	strh	r3, [r7, #2]
 80048d0:	4613      	mov	r3, r2
 80048d2:	707b      	strb	r3, [r7, #1]

   *pLevel_Status = AppliLevelSet[elementIndex].Present_Level16;
 80048d4:	787a      	ldrb	r2, [r7, #1]
 80048d6:	491f      	ldr	r1, [pc, #124]	@ (8004954 <Appli_Generic_GetLevelStatus+0x90>)
 80048d8:	4613      	mov	r3, r2
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	4413      	add	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	701a      	strb	r2, [r3, #0]
   *(pLevel_Status+1) = AppliLevelSet[elementIndex].Present_Level16 >> 8;
 80048ec:	787a      	ldrb	r2, [r7, #1]
 80048ee:	4919      	ldr	r1, [pc, #100]	@ (8004954 <Appli_Generic_GetLevelStatus+0x90>)
 80048f0:	4613      	mov	r3, r2
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048fe:	121b      	asrs	r3, r3, #8
 8004900:	b21a      	sxth	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3301      	adds	r3, #1
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]
   *(pLevel_Status+2) = AppliLevelSet[elementIndex].Target_Level16;
 800490a:	787a      	ldrb	r2, [r7, #1]
 800490c:	4911      	ldr	r1, [pc, #68]	@ (8004954 <Appli_Generic_GetLevelStatus+0x90>)
 800490e:	4613      	mov	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	3302      	adds	r3, #2
 800491a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3302      	adds	r3, #2
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]
   *(pLevel_Status+3) = AppliLevelSet[elementIndex].Target_Level16 >> 8;
 8004926:	787a      	ldrb	r2, [r7, #1]
 8004928:	490a      	ldr	r1, [pc, #40]	@ (8004954 <Appli_Generic_GetLevelStatus+0x90>)
 800492a:	4613      	mov	r3, r2
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	3302      	adds	r3, #2
 8004936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800493a:	121b      	asrs	r3, r3, #8
 800493c:	b21a      	sxth	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3303      	adds	r3, #3
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS; 
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	20004574 	.word	0x20004574

08004958 <Appli_Generic_GetPowerOnOffStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetPowerOnOffStatus(MOBLEUINT8* pPower_Status, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{ 
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	807b      	strh	r3, [r7, #2]
 8004964:	4613      	mov	r3, r2
 8004966:	707b      	strb	r3, [r7, #1]

  *pPower_Status = AppliPowerOnSet[elementIndex].PowerOnState;
 8004968:	787b      	ldrb	r3, [r7, #1]
 800496a:	4a06      	ldr	r2, [pc, #24]	@ (8004984 <Appli_Generic_GetPowerOnOffStatus+0x2c>)
 800496c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004970:	b2da      	uxtb	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS; 
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	20004580 	.word	0x20004580

08004988 <Appli_Generic_GetDefaultTransitionStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetDefaultTransitionStatus(MOBLEUINT8* pTransition_Status,MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{ 
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	807b      	strh	r3, [r7, #2]
 8004994:	4613      	mov	r3, r2
 8004996:	707b      	strb	r3, [r7, #1]

  *pTransition_Status = AppliDefaultTransitionSet[elementIndex].DefaultTransitionTime;
 8004998:	787b      	ldrb	r3, [r7, #1]
 800499a:	4a05      	ldr	r2, [pc, #20]	@ (80049b0 <Appli_Generic_GetDefaultTransitionStatus+0x28>)
 800499c:	5cd2      	ldrb	r2, [r2, r3]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS; 
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	20004584 	.word	0x20004584

080049b4 <Appli_Generic_OnOff_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_OnOff_Status(MOBLEUINT8 const *pOnOff_status, MOBLEUINT32 plength, 
                                        MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	4611      	mov	r1, r2
 80049c0:	461a      	mov	r2, r3
 80049c2:	460b      	mov	r3, r1
 80049c4:	80fb      	strh	r3, [r7, #6]
 80049c6:	4613      	mov	r3, r2
 80049c8:	717b      	strb	r3, [r7, #5]
  MOBLEUINT8 i;
  
  TRACE_M(TF_GENERIC,"Generic_OnOff_Status callback received for element %d \r\n", elementIndex);
 80049ca:	2100      	movs	r1, #0
 80049cc:	4826      	ldr	r0, [pc, #152]	@ (8004a68 <Appli_Generic_OnOff_Status+0xb4>)
 80049ce:	f008 fb47 	bl	800d060 <TraceHeader>
 80049d2:	797b      	ldrb	r3, [r7, #5]
 80049d4:	4619      	mov	r1, r3
 80049d6:	4825      	ldr	r0, [pc, #148]	@ (8004a6c <Appli_Generic_OnOff_Status+0xb8>)
 80049d8:	f021 ff5c 	bl	8026894 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8204!\r\n");
 80049dc:	2100      	movs	r1, #0
 80049de:	4822      	ldr	r0, [pc, #136]	@ (8004a68 <Appli_Generic_OnOff_Status+0xb4>)
 80049e0:	f008 fb3e 	bl	800d060 <TraceHeader>
 80049e4:	4822      	ldr	r0, [pc, #136]	@ (8004a70 <Appli_Generic_OnOff_Status+0xbc>)
 80049e6:	f021 ffbd 	bl	8026964 <puts>
  
  for(i = 0; i < plength; i++)
 80049ea:	2300      	movs	r3, #0
 80049ec:	75fb      	strb	r3, [r7, #23]
 80049ee:	e031      	b.n	8004a54 <Appli_Generic_OnOff_Status+0xa0>
  {
    if(i == 0)
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10c      	bne.n	8004a10 <Appli_Generic_OnOff_Status+0x5c>
      TRACE_M(TF_SERIAL_CTRL,"Present OnOff value: %d\n\r", pOnOff_status[i]);
 80049f6:	2100      	movs	r1, #0
 80049f8:	481b      	ldr	r0, [pc, #108]	@ (8004a68 <Appli_Generic_OnOff_Status+0xb4>)
 80049fa:	f008 fb31 	bl	800d060 <TraceHeader>
 80049fe:	7dfb      	ldrb	r3, [r7, #23]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4413      	add	r3, r2
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	4619      	mov	r1, r3
 8004a08:	481a      	ldr	r0, [pc, #104]	@ (8004a74 <Appli_Generic_OnOff_Status+0xc0>)
 8004a0a:	f021 ff43 	bl	8026894 <iprintf>
 8004a0e:	e01e      	b.n	8004a4e <Appli_Generic_OnOff_Status+0x9a>
    else if(i == 1)
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d10c      	bne.n	8004a30 <Appli_Generic_OnOff_Status+0x7c>
      TRACE_M(TF_SERIAL_CTRL,"Target OnOff value: %d\n\r", pOnOff_status[i]);
 8004a16:	2100      	movs	r1, #0
 8004a18:	4813      	ldr	r0, [pc, #76]	@ (8004a68 <Appli_Generic_OnOff_Status+0xb4>)
 8004a1a:	f008 fb21 	bl	800d060 <TraceHeader>
 8004a1e:	7dfb      	ldrb	r3, [r7, #23]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	4619      	mov	r1, r3
 8004a28:	4813      	ldr	r0, [pc, #76]	@ (8004a78 <Appli_Generic_OnOff_Status+0xc4>)
 8004a2a:	f021 ff33 	bl	8026894 <iprintf>
 8004a2e:	e00e      	b.n	8004a4e <Appli_Generic_OnOff_Status+0x9a>
    else if(i == 2)
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d10b      	bne.n	8004a4e <Appli_Generic_OnOff_Status+0x9a>
      TRACE_M(TF_SERIAL_CTRL,"Remaining Time value: %d\n\r", pOnOff_status[i]);
 8004a36:	2100      	movs	r1, #0
 8004a38:	480b      	ldr	r0, [pc, #44]	@ (8004a68 <Appli_Generic_OnOff_Status+0xb4>)
 8004a3a:	f008 fb11 	bl	800d060 <TraceHeader>
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	4619      	mov	r1, r3
 8004a48:	480c      	ldr	r0, [pc, #48]	@ (8004a7c <Appli_Generic_OnOff_Status+0xc8>)
 8004a4a:	f021 ff23 	bl	8026894 <iprintf>
  for(i = 0; i < plength; i++)
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
 8004a50:	3301      	adds	r3, #1
 8004a52:	75fb      	strb	r3, [r7, #23]
 8004a54:	7dfb      	ldrb	r3, [r7, #23]
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d8c9      	bhi.n	80049f0 <Appli_Generic_OnOff_Status+0x3c>
  }
  
  return MOBLE_RESULT_SUCCESS;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	0802de78 	.word	0x0802de78
 8004a6c:	0802a064 	.word	0x0802a064
 8004a70:	0802a0a0 	.word	0x0802a0a0
 8004a74:	0802a0a8 	.word	0x0802a0a8
 8004a78:	0802a0c4 	.word	0x0802a0c4
 8004a7c:	0802a0e0 	.word	0x0802a0e0

08004a80 <Appli_Generic_DefaultTransitionTime_Status>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Generic_DefaultTransitionTime_Status(MOBLEUINT8 const *pTransition_status , MOBLEUINT32 plength,MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{  
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	460b      	mov	r3, r1
 8004a90:	80fb      	strh	r3, [r7, #6]
 8004a92:	4613      	mov	r3, r2
 8004a94:	717b      	strb	r3, [r7, #5]

  TRACE_M(TF_GENERIC,"Generic_DefaultTransitionTime_Status callback received for element %d \r\n", elementIndex);
 8004a96:	2100      	movs	r1, #0
 8004a98:	4809      	ldr	r0, [pc, #36]	@ (8004ac0 <Appli_Generic_DefaultTransitionTime_Status+0x40>)
 8004a9a:	f008 fae1 	bl	800d060 <TraceHeader>
 8004a9e:	797b      	ldrb	r3, [r7, #5]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4808      	ldr	r0, [pc, #32]	@ (8004ac4 <Appli_Generic_DefaultTransitionTime_Status+0x44>)
 8004aa4:	f021 fef6 	bl	8026894 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8210!\r\n");
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4805      	ldr	r0, [pc, #20]	@ (8004ac0 <Appli_Generic_DefaultTransitionTime_Status+0x40>)
 8004aac:	f008 fad8 	bl	800d060 <TraceHeader>
 8004ab0:	4805      	ldr	r0, [pc, #20]	@ (8004ac8 <Appli_Generic_DefaultTransitionTime_Status+0x48>)
 8004ab2:	f021 ff57 	bl	8026964 <puts>
  
  return MOBLE_RESULT_SUCCESS;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	0802de94 	.word	0x0802de94
 8004ac4:	0802a0fc 	.word	0x0802a0fc
 8004ac8:	0802a148 	.word	0x0802a148

08004acc <Appli_Generic_PowerOnOff_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_PowerOnOff_Status(MOBLEUINT8 const *powerOnOff_status,\
                 MOBLEUINT32 plength, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{  
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	460b      	mov	r3, r1
 8004adc:	80fb      	strh	r3, [r7, #6]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	717b      	strb	r3, [r7, #5]
  MOBLEUINT8 i;

  TRACE_M(TF_GENERIC,"Generic_PowerOnOff_Status callback received for element %d \r\n", elementIndex);
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	4816      	ldr	r0, [pc, #88]	@ (8004b40 <Appli_Generic_PowerOnOff_Status+0x74>)
 8004ae6:	f008 fabb 	bl	800d060 <TraceHeader>
 8004aea:	797b      	ldrb	r3, [r7, #5]
 8004aec:	4619      	mov	r1, r3
 8004aee:	4815      	ldr	r0, [pc, #84]	@ (8004b44 <Appli_Generic_PowerOnOff_Status+0x78>)
 8004af0:	f021 fed0 	bl	8026894 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8212!\r\n");
 8004af4:	2100      	movs	r1, #0
 8004af6:	4812      	ldr	r0, [pc, #72]	@ (8004b40 <Appli_Generic_PowerOnOff_Status+0x74>)
 8004af8:	f008 fab2 	bl	800d060 <TraceHeader>
 8004afc:	4812      	ldr	r0, [pc, #72]	@ (8004b48 <Appli_Generic_PowerOnOff_Status+0x7c>)
 8004afe:	f021 ff31 	bl	8026964 <puts>
  
  for(i = 0; i < plength; i++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	75fb      	strb	r3, [r7, #23]
 8004b06:	e011      	b.n	8004b2c <Appli_Generic_PowerOnOff_Status+0x60>
  {
    if(i == 0)
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10b      	bne.n	8004b26 <Appli_Generic_PowerOnOff_Status+0x5a>
      TRACE_M(TF_SERIAL_CTRL,"On Power up value: %d\n\r", 
 8004b0e:	2100      	movs	r1, #0
 8004b10:	480b      	ldr	r0, [pc, #44]	@ (8004b40 <Appli_Generic_PowerOnOff_Status+0x74>)
 8004b12:	f008 faa5 	bl	800d060 <TraceHeader>
 8004b16:	7dfb      	ldrb	r3, [r7, #23]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	4619      	mov	r1, r3
 8004b20:	480a      	ldr	r0, [pc, #40]	@ (8004b4c <Appli_Generic_PowerOnOff_Status+0x80>)
 8004b22:	f021 feb7 	bl	8026894 <iprintf>
  for(i = 0; i < plength; i++)
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	75fb      	strb	r3, [r7, #23]
 8004b2c:	7dfb      	ldrb	r3, [r7, #23]
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d8e9      	bhi.n	8004b08 <Appli_Generic_PowerOnOff_Status+0x3c>
              powerOnOff_status[i]);
  }

  return MOBLE_RESULT_SUCCESS;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	0802dec0 	.word	0x0802dec0
 8004b44:	0802a150 	.word	0x0802a150
 8004b48:	0802a190 	.word	0x0802a190
 8004b4c:	0802a198 	.word	0x0802a198

08004b50 <Light_UpdateLedValue>:
* @brief  Function to set the values for PWM for RGB board.
* @param  state: decided the state of PWM according to the condition.
* @retval void
*/
void Light_UpdateLedValue(MOBLEUINT8 state ,Appli_LightPwmValue_t light_state)
{
 8004b50:	b490      	push	{r4, r7}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4604      	mov	r4, r0
 8004b58:	4638      	mov	r0, r7
 8004b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004b5e:	4623      	mov	r3, r4
 8004b60:	73fb      	strb	r3, [r7, #15]
    Modify_PWM(RED_LED, light_state.PwmRedValue); 
    Modify_PWM(GREEN_LED, light_state.PwmGreenValue); 
    Modify_PWM(BLUE_LED, light_state.PwmBlueValue); 
#endif    
  } 
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc90      	pop	{r4, r7}
 8004b6a:	4770      	bx	lr

08004b6c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004b70:	f3bf 8f4f 	dsb	sy
}
 8004b74:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004b76:	4b06      	ldr	r3, [pc, #24]	@ (8004b90 <__NVIC_SystemReset+0x24>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004b7e:	4904      	ldr	r1, [pc, #16]	@ (8004b90 <__NVIC_SystemReset+0x24>)
 8004b80:	4b04      	ldr	r3, [pc, #16]	@ (8004b94 <__NVIC_SystemReset+0x28>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b86:	f3bf 8f4f 	dsb	sy
}
 8004b8a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004b8c:	bf00      	nop
 8004b8e:	e7fd      	b.n	8004b8c <__NVIC_SystemReset+0x20>
 8004b90:	e000ed00 	.word	0xe000ed00
 8004b94:	05fa0004 	.word	0x05fa0004

08004b98 <LL_FLASH_IsActiveFlag_OperationSuspended>:
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8004b9c:	4b07      	ldr	r3, [pc, #28]	@ (8004bbc <LL_FLASH_IsActiveFlag_OperationSuspended+0x24>)
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ba4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ba8:	d101      	bne.n	8004bae <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	58004000 	.word	0x58004000

08004bc0 <Appli_ShortButtonPress>:
* @brief  Function calls when a button is pressed for short duration  
* @param  void
* @retval void
*/ 
static void Appli_ShortButtonPress(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  BLEMesh_ModelsCommand();
 8004bc4:	f001 f89e 	bl	8005d04 <BLEMesh_ModelsCommand>
}
 8004bc8:	bf00      	nop
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <Appli_LongButtonPress>:
* @brief  Function calls when a button is pressed for Long duration  
* @param  void
* @retval void
*/ 
static void Appli_LongButtonPress(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
//  TRACE_I(TF_LIGHT_CLIENT_M, "----------- API LIGHT LC ON OFF GET ------------- \r\n");
//  Appli_LightClient_API(0, LIGHT_LC_ON_OFF_GET, NULL);
  
  /** LIGHT LC PROPERTY **/
//LIGHT_CONTROL_AMBIENT_LUXLEVEL_ON_PID  : 0x002B
  pPropertyId[0]= 0x2B;           // Property ID byte 0 : Property ID identifying a Light LC Property.
 8004bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bfc <Appli_LongButtonPress+0x30>)
 8004bd2:	222b      	movs	r2, #43	@ 0x2b
 8004bd4:	701a      	strb	r2, [r3, #0]
  pPropertyId[1]= 0x00;           // Property ID byte 1 : Property ID identifying a Light LC Property.
 8004bd6:	4b09      	ldr	r3, [pc, #36]	@ (8004bfc <Appli_LongButtonPress+0x30>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	705a      	strb	r2, [r3, #1]
//  Appli_LightClient_API(0, LIGHT_LC_PROPERTY_GET, pPropertyId);
  

  /* SENSOR APIs */
  //PRESENT_AMBIENT_TEMPERATURE_PID : 0x004F
  pPropertyId[0]= 0x4F;           // Property ID byte 0 : Property ID for the sensor
 8004bdc:	4b07      	ldr	r3, [pc, #28]	@ (8004bfc <Appli_LongButtonPress+0x30>)
 8004bde:	224f      	movs	r2, #79	@ 0x4f
 8004be0:	701a      	strb	r2, [r3, #0]
  pPropertyId[1]= 0x00;           // Property ID byte 1 : Property ID for the sensor
 8004be2:	4b06      	ldr	r3, [pc, #24]	@ (8004bfc <Appli_LongButtonPress+0x30>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	705a      	strb	r2, [r3, #1]
    /** SENSOR SETTINGS **/
//  TRACE_I(TF_SENSOR_CLIENT_M, "----------- API SENSOR SETTINGS GET ------------- \r\n");
//  Appli_SensorsClient_API(0, SENSOR_SETTINGS_GET, pPropertyId);
  
    /** SENSOR SETTING **/
  pPropertyId[2]= 0xAD;           // Sensor Setting Property ID byte 0 : Property ID for the sensor setting
 8004be8:	4b04      	ldr	r3, [pc, #16]	@ (8004bfc <Appli_LongButtonPress+0x30>)
 8004bea:	22ad      	movs	r2, #173	@ 0xad
 8004bec:	709a      	strb	r2, [r3, #2]
  pPropertyId[3]= 0x00;           // Sensor Setting Property ID byte 1 : Property ID for the sensor setting
 8004bee:	4b03      	ldr	r3, [pc, #12]	@ (8004bfc <Appli_LongButtonPress+0x30>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	70da      	strb	r2, [r3, #3]
//  pPropertyId[2]= 0x01;           // Raw Value X1 byte 0 : Raw value identifying a starting column.
//  pPropertyId[3]= 0x02;           // Raw Value X2 byte 0 : Raw value identifying an ending column.
//  TRACE_I(TF_SENSOR_CLIENT_M, "----------- API SENSOR SERIES GET ------------- \r\n");
//  Appli_SensorsClient_API(0, SENSOR_SERIES_GET, pPropertyId);
  
  IntensityPublish();
 8004bf4:	f000 fbee 	bl	80053d4 <IntensityPublish>
  
}
 8004bf8:	bf00      	nop
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	200045a4 	.word	0x200045a4

08004c00 <Appli_UpdateButtonState>:
* @brief  Updates the button status  
* @param  int isPressed
* @retval void
*/ 
static void Appli_UpdateButtonState(int isPressed)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t t0 = 0,t1 = 1;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	60bb      	str	r3, [r7, #8]

  t0 = Clock_Time(); /* SW1 press timing */
 8004c10:	f001 ff88 	bl	8006b24 <HAL_GetTick>
 8004c14:	60f8      	str	r0, [r7, #12]
  
  while(BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED);
 8004c16:	bf00      	nop
 8004c18:	2000      	movs	r0, #0
 8004c1a:	f001 fe85 	bl	8006928 <BSP_PB_GetState>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f9      	beq.n	8004c18 <Appli_UpdateButtonState+0x18>
  t1 = Clock_Time(); /* SW1 release timing */
 8004c24:	f001 ff7e 	bl	8006b24 <HAL_GetTick>
 8004c28:	60b8      	str	r0, [r7, #8]
  
  if((t1 - t0) > LONG_PRESS_THRESHOLD)
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c34:	d902      	bls.n	8004c3c <Appli_UpdateButtonState+0x3c>
  {
    Appli_LongButtonPress();
 8004c36:	f7ff ffc9 	bl	8004bcc <Appli_LongButtonPress>
  else if((t1 - t0) > BOUNCE_THRESHOLD)
  {
    /* Button 1 short press action */
    Appli_ShortButtonPress();
  }
}
 8004c3a:	e006      	b.n	8004c4a <Appli_UpdateButtonState+0x4a>
  else if((t1 - t0) > BOUNCE_THRESHOLD)
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b14      	cmp	r3, #20
 8004c44:	d901      	bls.n	8004c4a <Appli_UpdateButtonState+0x4a>
    Appli_ShortButtonPress();
 8004c46:	f7ff ffbb 	bl	8004bc0 <Appli_ShortButtonPress>
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <Mesh_Task>:
* @brief  task for the BLE MESH, the MESH Models and the Appli processes  
* @param  void
* @retval void
*/ 
static void Mesh_Task()
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  BLEMesh_Process();
 8004c58:	f01e fd98 	bl	802378c <BLEMesh_Process>
  BLEMesh_ModelsProcess(); /* Models Processing */
 8004c5c:	f001 f84a 	bl	8005cf4 <BLEMesh_ModelsProcess>
  
  if((UnprovisionInProgress > 0) &&
 8004c60:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca0 <Mesh_Task+0x4c>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d015      	beq.n	8004c94 <Mesh_Task+0x40>
     (!LL_FLASH_IsActiveFlag_OperationSuspended()))
 8004c68:	f7ff ff96 	bl	8004b98 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8004c6c:	4603      	mov	r3, r0
  if((UnprovisionInProgress > 0) &&
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d110      	bne.n	8004c94 <Mesh_Task+0x40>
  {
    UnprovisionInProgress = 0;
 8004c72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca0 <Mesh_Task+0x4c>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
    AppliNvm_ClearModelState();
 8004c78:	f000 fc57 	bl	800552a <AppliNvm_ClearModelState>
    PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 8004c7c:	4b09      	ldr	r3, [pc, #36]	@ (8004ca4 <Mesh_Task+0x50>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2104      	movs	r1, #4
 8004c82:	4618      	mov	r0, r3
 8004c84:	f001 fa5c 	bl	8006140 <PalNvmErase>
    TRACE_I(TF_PROVISION,"NVM erased\r\n");      
 8004c88:	4807      	ldr	r0, [pc, #28]	@ (8004ca8 <Mesh_Task+0x54>)
 8004c8a:	f021 fe6b 	bl	8026964 <puts>
    TRACE_I(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 8004c8e:	4807      	ldr	r0, [pc, #28]	@ (8004cac <Mesh_Task+0x58>)
 8004c90:	f021 fe68 	bl	8026964 <puts>
  }
    
#if (APPLI_OPTIM == 0)
  /* Set the task in the scheduler for the next execution */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);
 8004c94:	2100      	movs	r1, #0
 8004c96:	2002      	movs	r0, #2
 8004c98:	f00f f92e 	bl	8013ef8 <UTIL_SEQ_SetTask>
#endif
#endif
}
 8004c9c:	bf00      	nop
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	2000459b 	.word	0x2000459b
 8004ca4:	200045b8 	.word	0x200045b8
 8004ca8:	0802a1cc 	.word	0x0802a1cc
 8004cac:	0802a1d8 	.word	0x0802a1d8

08004cb0 <Appli_Task>:
* @brief  task for the BLE MESH, the MESH Models and the Appli processes  
* @param  void
* @retval void
*/ 
static void Appli_Task()
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  Appli_Process();
 8004cb4:	f000 fb95 	bl	80053e2 <Appli_Process>
  
#if (APPLI_OPTIM == 0)
  /* Set the task in the scheduler for the next execution */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_APPLI_REQ_ID, CFG_SCH_PRIO_0);
 8004cb8:	2100      	movs	r1, #0
 8004cba:	2020      	movs	r0, #32
 8004cbc:	f00f f91c 	bl	8013ef8 <UTIL_SEQ_SetTask>
#endif
#endif
}
 8004cc0:	bf00      	nop
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <Appli_LedCtrl>:
* @brief  Controls the state of on board LED
* @param  void
* @retval void
*/ 
void Appli_LedCtrl(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  if(Appli_LedState)
 8004cc8:	4b06      	ldr	r3, [pc, #24]	@ (8004ce4 <Appli_LedCtrl+0x20>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <Appli_LedCtrl+0x14>
  {
    BSP_LED_On(LED_BLUE);
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f001 fd85 	bl	80067e0 <BSP_LED_On>
  else
  {
    BSP_LED_Off(LED_BLUE);

  }
}
 8004cd6:	e002      	b.n	8004cde <Appli_LedCtrl+0x1a>
    BSP_LED_Off(LED_BLUE);
 8004cd8:	2000      	movs	r0, #0
 8004cda:	f001 fd9b 	bl	8006814 <BSP_LED_Off>
}
 8004cde:	bf00      	nop
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20004594 	.word	0x20004594

08004ce8 <Appli_LedBlink>:
* @brief  Blinks the on board LED  
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_LedBlink(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* Switch On the LED */
  Appli_LedState = 1;
 8004cec:	4b0a      	ldr	r3, [pc, #40]	@ (8004d18 <Appli_LedBlink+0x30>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]
  Appli_LedCtrl();
 8004cf2:	f7ff ffe7 	bl	8004cc4 <Appli_LedCtrl>
  Clock_Wait(500);
 8004cf6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004cfa:	f7fc fdb6 	bl	800186a <HAL_Delay>
  
  /* Switch Off the LED */
  Appli_LedState = 0;
 8004cfe:	4b06      	ldr	r3, [pc, #24]	@ (8004d18 <Appli_LedBlink+0x30>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
  Appli_LedCtrl();
 8004d04:	f7ff ffde 	bl	8004cc4 <Appli_LedCtrl>
  Clock_Wait(500);
 8004d08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004d0c:	f7fc fdad 	bl	800186a <HAL_Delay>
  
  return MOBLE_RESULT_SUCCESS;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20004594 	.word	0x20004594

08004d1c <Appli_BleStackInitCb>:
* @brief  initializes BLE Stack    
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleStackInitCb()
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* BLE Stack initialization */
  /* Not Required in BLE */
  return MOBLE_RESULT_SUCCESS;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <Appli_BleSetTxPowerCb>:
* @brief  Sets transmission power of RF 
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleSetTxPowerCb(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
  /* API to change the Transmission power of BLE Device */
  /* uint8_t en_high_power, uint8_t pa_level
  en_high_power Can be only 0 or 1. Set high power bit on or off.
  pa_level Can be from 0 to 7. Set the PA level value
  */ 
  status = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8004d32:	2118      	movs	r1, #24
 8004d34:	2001      	movs	r0, #1
 8004d36:	f00d fd25 	bl	8012784 <aci_hal_set_tx_power_level>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	71fb      	strb	r3, [r7, #7]
  if (status)
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <Appli_BleSetTxPowerCb+0x1c>
    return MOBLE_RESULT_FAIL;
 8004d44:	2302      	movs	r3, #2
 8004d46:	e000      	b.n	8004d4a <Appli_BleSetTxPowerCb+0x1e>
  else
    return MOBLE_RESULT_SUCCESS;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <Appli_BleSetUUIDCb>:
* @brief  SET UUID value 
* @param  uuid_prefix_data : Pointer of UUID buffer data
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleSetUUIDCb(MOBLEUINT8 *uuid_prefix_data)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
      Y = 4 i.e. Conforming to the current spec 
    For UUID information refer RFC4122
  */
  
  /* copy UUID prefix data*/
  uint8_t uuid_buff[10] = {NC_NODE_CONFIG_FEATURES, NC_NODE_CONFIG_MODELS, 0x4F, 0xAE, 0x7D, 0xEC};/*random value by user */
 8004d5c:	4a16      	ldr	r2, [pc, #88]	@ (8004db8 <Appli_BleSetUUIDCb+0x64>)
 8004d5e:	f107 030c 	add.w	r3, r7, #12
 8004d62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d66:	6018      	str	r0, [r3, #0]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	8019      	strh	r1, [r3, #0]
 8004d6c:	3302      	adds	r3, #2
 8004d6e:	0c0a      	lsrs	r2, r1, #16
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	f107 0313 	add.w	r3, r7, #19
 8004d76:	2200      	movs	r2, #0
 8004d78:	801a      	strh	r2, [r3, #0]
 8004d7a:	709a      	strb	r2, [r3, #2]

   uuid_buff[6] = 0x4B;  /* 0x4B => 4 : Random */
 8004d7c:	234b      	movs	r3, #75	@ 0x4b
 8004d7e:	74bb      	strb	r3, [r7, #18]
   uuid_buff[7] = 'S' ;  /* User define value */
 8004d80:	2353      	movs	r3, #83	@ 0x53
 8004d82:	74fb      	strb	r3, [r7, #19]
   uuid_buff[8] = 0xA1;  /* 0xA1 => A : Conforming to the current Spec */
 8004d84:	23a1      	movs	r3, #161	@ 0xa1
 8004d86:	753b      	strb	r3, [r7, #20]
   uuid_buff[9] = 'T' ;  /* User define value */  
 8004d88:	2354      	movs	r3, #84	@ 0x54
 8004d8a:	757b      	strb	r3, [r7, #21]

   memcpy(uuid_prefix_data,uuid_buff,sizeof(uuid_buff));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f107 030c 	add.w	r3, r7, #12
 8004d94:	cb03      	ldmia	r3!, {r0, r1}
 8004d96:	6010      	str	r0, [r2, #0]
 8004d98:	6051      	str	r1, [r2, #4]
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	8113      	strh	r3, [r2, #8]
   memcpy(&uuid_prefix_data[10],bdaddr,6);  /* Copy bdaddr to last 6 bytes of UUID */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	330a      	adds	r3, #10
 8004da2:	2206      	movs	r2, #6
 8004da4:	4905      	ldr	r1, [pc, #20]	@ (8004dbc <Appli_BleSetUUIDCb+0x68>)
 8004da6:	4618      	mov	r0, r3
 8004da8:	f021 ffc3 	bl	8026d32 <memcpy>
   
   return MOBLE_RESULT_SUCCESS;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	0802a204 	.word	0x0802a204
 8004dbc:	200045a8 	.word	0x200045a8

08004dc0 <Appli_BleSetProductInfoCB>:
* @brief  SET CID , PID and VID values 
* @param  company_product_info : vendor fill product information in this buffer
* @retval MOBLE_RESULT status of result
*/
MOBLE_RESULT Appli_BleSetProductInfoCB(MOBLEUINT8 *company_product_info)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* CID : provide 16-bit company identifier assigned by the Bluetooth SIG */
  uint16_t company_id                   = COMPANY_ID;
 8004dc8:	2330      	movs	r3, #48	@ 0x30
 8004dca:	81fb      	strh	r3, [r7, #14]
  
  /* PID : Provide 16-bit vendor-assigned product identifier */
  uint16_t product_id                   = PRODUCT_ID;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	81bb      	strh	r3, [r7, #12]
  
  /* VID : Provide 16-bit vendor-assigned product version identifier*/
  uint16_t product_version_id           = PRODUCT_VERSION_ID;
 8004dd0:	f44f 7385 	mov.w	r3, #266	@ 0x10a
 8004dd4:	817b      	strh	r3, [r7, #10]
  
  memcpy(company_product_info + 0,(void *)&company_id,sizeof(company_id));
 8004dd6:	89fa      	ldrh	r2, [r7, #14]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	801a      	strh	r2, [r3, #0]
  memcpy(company_product_info + 2 ,(void *)&product_id,sizeof(product_id));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3302      	adds	r3, #2
 8004de0:	89ba      	ldrh	r2, [r7, #12]
 8004de2:	801a      	strh	r2, [r3, #0]
  memcpy(company_product_info + 4 ,(void *)&product_version_id,sizeof(product_version_id));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3304      	adds	r3, #4
 8004de8:	897a      	ldrh	r2, [r7, #10]
 8004dea:	801a      	strh	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <Appli_BleGattConnectionCompleteCb>:
* @brief  Call back function called when GATT Connection Created  
* @param  none
* @retval none
*/ 
void Appli_BleGattConnectionCompleteCb(void)
{ 
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  ProvisionFlag = 1;
 8004e00:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <Appli_BleGattConnectionCompleteCb+0x1c>)
 8004e02:	2201      	movs	r2, #1
 8004e04:	701a      	strb	r2, [r3, #0]
  /* Proxy Node, will be called whenever Gatt connection is established */
  /* Turn ON Red LED*/
  ProxyFlag = 1;
 8004e06:	4b05      	ldr	r3, [pc, #20]	@ (8004e1c <Appli_BleGattConnectionCompleteCb+0x20>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	701a      	strb	r2, [r3, #0]
  BSP_LED_On(LED_GREEN);
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	f001 fce7 	bl	80067e0 <BSP_LED_On>
}
 8004e12:	bf00      	nop
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	2000459a 	.word	0x2000459a
 8004e1c:	20004599 	.word	0x20004599

08004e20 <Appli_BleGattDisconnectionCompleteCb>:
* @brief  Call back function called when GATT Disconnection Complete  
* @param  none
* @retval none
*/ 
void Appli_BleGattDisconnectionCompleteCb(void)
{ 
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  ProvisionFlag = 0;
 8004e24:	4b05      	ldr	r3, [pc, #20]	@ (8004e3c <Appli_BleGattDisconnectionCompleteCb+0x1c>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	701a      	strb	r2, [r3, #0]
  /* Proxy Node, will be called whenever Gatt disconnected */
  /* Turn Off Red LED*/
  ProxyFlag = 0;
 8004e2a:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <Appli_BleGattDisconnectionCompleteCb+0x20>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
  BSP_LED_Off(LED_GREEN);
 8004e30:	2001      	movs	r0, #1
 8004e32:	f001 fcef 	bl	8006814 <BSP_LED_Off>
}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	2000459a 	.word	0x2000459a
 8004e40:	20004599 	.word	0x20004599

08004e44 <Appli_BleUnprovisionedIdentifyCb>:
* @brief Unprovisioned Node Identification
* @param MOBLEUINT8 data 
* @retval none
*/
void Appli_BleUnprovisionedIdentifyCb(MOBLEUINT8 data)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
#ifdef ENABLE_AUTH_TYPE_OUTPUT_OOB
  PrvngInProcess = 1;  
#endif   
  TRACE_I(TF_PROVISION,"Unprovisioned Node Identifier received: %02x\n\r", data);    
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	4619      	mov	r1, r3
 8004e52:	4803      	ldr	r0, [pc, #12]	@ (8004e60 <Appli_BleUnprovisionedIdentifyCb+0x1c>)
 8004e54:	f021 fd1e 	bl	8026894 <iprintf>
}
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	0802a210 	.word	0x0802a210

08004e64 <Appli_BleSetNumberOfElementsCb>:
* @brief  Set Number of Elements in a Node
* @param  none
* @retval Sending the value to BLE Mesh Library
*/ 
MOBLEUINT8 Appli_BleSetNumberOfElementsCb(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  if(NumberOfElements > BLEMesh_GetNumberOfElements())
 8004e68:	f015 fa9a 	bl	801a3a0 <BLEMesh_GetNumberOfElements>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea0 <Appli_BleSetNumberOfElementsCb+0x3c>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d206      	bcs.n	8004e86 <Appli_BleSetNumberOfElementsCb+0x22>
  {
    TRACE_I(TF_MISC, "Number of Elements enabled in application exceeding from Library Capability!\r\n"); 
 8004e78:	480a      	ldr	r0, [pc, #40]	@ (8004ea4 <Appli_BleSetNumberOfElementsCb+0x40>)
 8004e7a:	f021 fd73 	bl	8026964 <puts>
    return BLEMesh_GetNumberOfElements();
 8004e7e:	f015 fa8f 	bl	801a3a0 <BLEMesh_GetNumberOfElements>
 8004e82:	4603      	mov	r3, r0
 8004e84:	e00a      	b.n	8004e9c <Appli_BleSetNumberOfElementsCb+0x38>
  }
  
  else if(NumberOfElements == 0)
 8004e86:	4b06      	ldr	r3, [pc, #24]	@ (8004ea0 <Appli_BleSetNumberOfElementsCb+0x3c>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d104      	bne.n	8004e98 <Appli_BleSetNumberOfElementsCb+0x34>
  {
    TRACE_I(TF_MISC,"Number Of Elements must be 1 or greater than 1!\r\n"); 
 8004e8e:	4806      	ldr	r0, [pc, #24]	@ (8004ea8 <Appli_BleSetNumberOfElementsCb+0x44>)
 8004e90:	f021 fd68 	bl	8026964 <puts>
    return 1;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e001      	b.n	8004e9c <Appli_BleSetNumberOfElementsCb+0x38>
  }
  
  else
  {
    return NumberOfElements;
 8004e98:	4b01      	ldr	r3, [pc, #4]	@ (8004ea0 <Appli_BleSetNumberOfElementsCb+0x3c>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	200000a0 	.word	0x200000a0
 8004ea4:	0802a240 	.word	0x0802a240
 8004ea8:	0802a290 	.word	0x0802a290

08004eac <Appli_BleAttentionTimerCb>:
* @brief  Sets the Attention Timer Callback function
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleAttentionTimerCb(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
/* avoid printf, if low power feature is supported */  
#if (LOW_POWER_FEATURE == 0)
/*  TRACE_I(TF_MISC, " \r\n"); */
#endif /* LOW_POWER_FEATURE == 0 */
  return MOBLE_RESULT_SUCCESS;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <Appli_BleOutputOOBAuthCb>:
* @param  MOBLEUINT8* output_oob
* @param  MOBLEUINT8 size
* @retval void
*/ 
void Appli_BleOutputOOBAuthCb(MOBLEUINT8* output_oob, MOBLEUINT8 size)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	70fb      	strb	r3, [r7, #3]
        ooBData |= (output_oob[i] << 8*i);
    }
    OutputOobData = ooBData;
    TRACE_I(TF_PROVISION,"Output OOB information for provisioner: %ld\n\r", ooBData);
  #endif
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <Appli_BleInputOOBAuthCb>:
* @brief  Call back function to provide Input OOB information
* @param  MOBLEUINT8 size
* @retval MOBLEUINT8*  
*/ 
MOBLEUINT8* Appli_BleInputOOBAuthCb(MOBLEUINT8 size)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	71fb      	strb	r3, [r7, #7]
  
  inputOOBDataReady = 0;
  return InputOobData; 
#endif
#else
  return NULL;
 8004ede:	2300      	movs	r3, #0
#endif
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <Appli_BleDisableFilterCb>:
* @brief  Application BLE Disable Filter 
* @param  none
* @retval Status is replied
*/
MOBLEUINT8 Appli_BleDisableFilterCb(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
    return DisableFilter;
 8004ef0:	4b03      	ldr	r3, [pc, #12]	@ (8004f00 <Appli_BleDisableFilterCb+0x14>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	2000459c 	.word	0x2000459c

08004f04 <Appli_CheckForUnprovision>:
* @brief  Checks and do Manual Unprovision of board  
* @param  void
* @retval void
*/ 
void Appli_CheckForUnprovision(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
  /* Checks if the User button is pressed or not at the startup */
  if (BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED)
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f001 fd0c 	bl	8006928 <BSP_PB_GetState>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d14b      	bne.n	8004fae <Appli_CheckForUnprovision+0xaa>
  {
    BSP_LED_On(LED_BLUE);
 8004f16:	2000      	movs	r0, #0
 8004f18:	f001 fc62 	bl	80067e0 <BSP_LED_On>
    tClockTime t = Clock_Time();
 8004f1c:	f001 fe02 	bl	8006b24 <HAL_GetTick>
 8004f20:	6038      	str	r0, [r7, #0]
    int interrupted = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	607b      	str	r3, [r7, #4]
    
    /*Wait to check if user is pressing the button persistently*/
    while ((Clock_Time() - t) < MANUAL_UNPROVISION_TIMER)
 8004f26:	e008      	b.n	8004f3a <Appli_CheckForUnprovision+0x36>
    {
      if (BSP_PB_GetState(BUTTON_SW1) != BUTTON_PRESSED)
 8004f28:	2000      	movs	r0, #0
 8004f2a:	f001 fcfd 	bl	8006928 <BSP_PB_GetState>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <Appli_CheckForUnprovision+0x36>
      {
        interrupted = 1;
 8004f34:	2301      	movs	r3, #1
 8004f36:	607b      	str	r3, [r7, #4]
        break;
 8004f38:	e008      	b.n	8004f4c <Appli_CheckForUnprovision+0x48>
    while ((Clock_Time() - t) < MANUAL_UNPROVISION_TIMER)
 8004f3a:	f001 fdf3 	bl	8006b24 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d9ed      	bls.n	8004f28 <Appli_CheckForUnprovision+0x24>
      }
    }
    /* Unprovision, show that unprovisioning is completed, and 
    wait until user releases button*/
    if (!interrupted)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d12a      	bne.n	8004fa8 <Appli_CheckForUnprovision+0xa4>
    {
      /* No GATT connection */
      BLEMesh_StopAdvScan();
 8004f52:	f017 fc6c 	bl	801c82e <BLEMesh_StopAdvScan>
      HAL_Delay(10);
 8004f56:	200a      	movs	r0, #10
 8004f58:	f7fc fc87 	bl	800186a <HAL_Delay>

      PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 8004f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fdc <Appli_CheckForUnprovision+0xd8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2104      	movs	r1, #4
 8004f62:	4618      	mov	r0, r3
 8004f64:	f001 f8ec 	bl	8006140 <PalNvmErase>
      TRACE_I(TF_PROVISION,"NVM erased\r\n");      
 8004f68:	481d      	ldr	r0, [pc, #116]	@ (8004fe0 <Appli_CheckForUnprovision+0xdc>)
 8004f6a:	f021 fcfb 	bl	8026964 <puts>
      
      BLEMesh_Unprovision();
 8004f6e:	f019 f993 	bl	801e298 <BLEMesh_Unprovision>
      AppliNvm_ClearModelState();     
 8004f72:	f000 fada 	bl	800552a <AppliNvm_ClearModelState>
      TRACE_I(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 8004f76:	481b      	ldr	r0, [pc, #108]	@ (8004fe4 <Appli_CheckForUnprovision+0xe0>)
 8004f78:	f021 fcf4 	bl	8026964 <puts>
      t = Clock_Time();
 8004f7c:	f001 fdd2 	bl	8006b24 <HAL_GetTick>
 8004f80:	6038      	str	r0, [r7, #0]
      while ((Clock_Time() - t) < FLASH_ERASE_TIME)
 8004f82:	e001      	b.n	8004f88 <Appli_CheckForUnprovision+0x84>
      {
        BLEMesh_Process();
 8004f84:	f01e fc02 	bl	802378c <BLEMesh_Process>
      while ((Clock_Time() - t) < FLASH_ERASE_TIME)
 8004f88:	f001 fdcc 	bl	8006b24 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b63      	cmp	r3, #99	@ 0x63
 8004f94:	d9f6      	bls.n	8004f84 <Appli_CheckForUnprovision+0x80>
      }
      
      while (BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED)
 8004f96:	e001      	b.n	8004f9c <Appli_CheckForUnprovision+0x98>
      {
        Appli_LedBlink();
 8004f98:	f7ff fea6 	bl	8004ce8 <Appli_LedBlink>
      while (BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED)
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f001 fcc3 	bl	8006928 <BSP_PB_GetState>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f7      	beq.n	8004f98 <Appli_CheckForUnprovision+0x94>
      }
    }
    BSP_LED_Off(LED_BLUE);
 8004fa8:	2000      	movs	r0, #0
 8004faa:	f001 fc33 	bl	8006814 <BSP_LED_Off>
  }
  
  /* Register the task for all MESH dedicated processes */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_REQ_ID, UTIL_SEQ_RFU, Mesh_Task );
 8004fae:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe8 <Appli_CheckForUnprovision+0xe4>)
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	2002      	movs	r0, #2
 8004fb4:	f00e ff7e 	bl	8013eb4 <UTIL_SEQ_RegTask>
  /* Set the task in the scheduler for the next scheduling */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);  
 8004fb8:	2100      	movs	r1, #0
 8004fba:	2002      	movs	r0, #2
 8004fbc:	f00e ff9c 	bl	8013ef8 <UTIL_SEQ_SetTask>
#else
  BleProcessInit = 1;
#endif
  
  /* Register the task for all MESH dedicated processes */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_APPLI_REQ_ID, UTIL_SEQ_RFU, Appli_Task );
 8004fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8004fec <Appli_CheckForUnprovision+0xe8>)
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	2020      	movs	r0, #32
 8004fc6:	f00e ff75 	bl	8013eb4 <UTIL_SEQ_RegTask>
  /* Set the task in the scheduler for the next scheduling */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_APPLI_REQ_ID, CFG_SCH_PRIO_0);
 8004fca:	2100      	movs	r1, #0
 8004fcc:	2020      	movs	r0, #32
 8004fce:	f00e ff93 	bl	8013ef8 <UTIL_SEQ_SetTask>
#if (APPLI_OPTIM == 1)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &appliTaskTimer_Id, hw_ts_Repeated, AppliMeshTask);
  
  HW_TS_Start(appliTaskTimer_Id, APPLI_MESH_TIMER_INTERVAL);
#endif
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	200045b8 	.word	0x200045b8
 8004fe0:	0802a1cc 	.word	0x0802a1cc
 8004fe4:	0802a1d8 	.word	0x0802a1d8
 8004fe8:	08004c55 	.word	0x08004c55
 8004fec:	08004cb1 	.word	0x08004cb1

08004ff0 <Appli_Unprovision>:

void Appli_Unprovision(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  if(!ProxyFlag)
 8004ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800502c <Appli_Unprovision+0x3c>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d114      	bne.n	8005026 <Appli_Unprovision+0x36>
  {
    /* No GATT connection */
    BLEMesh_StopAdvScan();
 8004ffc:	f017 fc17 	bl	801c82e <BLEMesh_StopAdvScan>
    HAL_Delay(10);
 8005000:	200a      	movs	r0, #10
 8005002:	f7fc fc32 	bl	800186a <HAL_Delay>
      
    PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 8005006:	4b0a      	ldr	r3, [pc, #40]	@ (8005030 <Appli_Unprovision+0x40>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2104      	movs	r1, #4
 800500c:	4618      	mov	r0, r3
 800500e:	f001 f897 	bl	8006140 <PalNvmErase>
    TRACE_I(TF_PROVISION,"NVM erased\r\n");      
 8005012:	4808      	ldr	r0, [pc, #32]	@ (8005034 <Appli_Unprovision+0x44>)
 8005014:	f021 fca6 	bl	8026964 <puts>
  
    TRACE_I(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 8005018:	4807      	ldr	r0, [pc, #28]	@ (8005038 <Appli_Unprovision+0x48>)
 800501a:	f021 fca3 	bl	8026964 <puts>

    BLEMesh_Process();
 800501e:	f01e fbb5 	bl	802378c <BLEMesh_Process>
    NVIC_SystemReset();
 8005022:	f7ff fda3 	bl	8004b6c <__NVIC_SystemReset>
  }
}
 8005026:	bf00      	nop
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20004599 	.word	0x20004599
 8005030:	200045b8 	.word	0x200045b8
 8005034:	0802a1cc 	.word	0x0802a1cc
 8005038:	0802a1d8 	.word	0x0802a1d8

0800503c <Appli_CheckBdMacAddr>:
* @brief  Checks and updates Mac address to generate MAC Address
* @param  void
* @retval MOBLEUINT8 sum return the sum calculated mac
*/ 
int Appli_CheckBdMacAddr(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
  MOBLEUINT8 sum = 239;
 8005042:	23ef      	movs	r3, #239	@ 0xef
 8005044:	73fb      	strb	r3, [r7, #15]
  MOBLEUINT8 result = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	73bb      	strb	r3, [r7, #14]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800504a:	2300      	movs	r3, #0
 800504c:	71fb      	strb	r3, [r7, #7]
  memcpy(bdaddr, (MOBLEUINT8 *)CFG_ADV_BD_ADDRESS, 7);
  bdaddr[7] = (EXTERNAL_MAC_ADDR_MGMT | EXTERNAL_MAC_TYPE);
#endif
  
#ifdef INTERNAL_UNIQUE_NUMBER_MAC
  status = aci_hal_read_config_data(CONFIG_DATA_PUBADDR_OFFSET, 
 800504e:	4a1c      	ldr	r2, [pc, #112]	@ (80050c0 <Appli_CheckBdMacAddr+0x84>)
 8005050:	491c      	ldr	r1, [pc, #112]	@ (80050c4 <Appli_CheckBdMacAddr+0x88>)
 8005052:	2000      	movs	r0, #0
 8005054:	f00d fb11 	bl	801267a <aci_hal_read_config_data>
 8005058:	4603      	mov	r3, r0
 800505a:	71fb      	strb	r3, [r7, #7]
                                    &bdaddr[7],
                                    bdaddr); 
  if(status != BLE_STATUS_SUCCESS) 
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d004      	beq.n	800506c <Appli_CheckBdMacAddr+0x30>
  {
    TRACE_I(TF_PROVISION, "Failed to read Public Address %d", status);
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	4619      	mov	r1, r3
 8005066:	4818      	ldr	r0, [pc, #96]	@ (80050c8 <Appli_CheckBdMacAddr+0x8c>)
 8005068:	f021 fc14 	bl	8026894 <iprintf>
  }

  Appli_GetMACfromUniqueNumber();
 800506c:	f000 f82e 	bl	80050cc <Appli_GetMACfromUniqueNumber>
  bdaddr[7] = INTERNAL_UNIQUE_NUMBER_MAC;
 8005070:	4b13      	ldr	r3, [pc, #76]	@ (80050c0 <Appli_CheckBdMacAddr+0x84>)
 8005072:	2203      	movs	r2, #3
 8005074:	71da      	strb	r2, [r3, #7]
#endif

  for (int i = 0; i < 6; ++i)
 8005076:	2300      	movs	r3, #0
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	e00b      	b.n	8005094 <Appli_CheckBdMacAddr+0x58>
  {
    sum = (sum << 1) + bdaddr[i];
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	b2da      	uxtb	r2, r3
 8005082:	490f      	ldr	r1, [pc, #60]	@ (80050c0 <Appli_CheckBdMacAddr+0x84>)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	440b      	add	r3, r1
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	4413      	add	r3, r2
 800508c:	73fb      	strb	r3, [r7, #15]
  for (int i = 0; i < 6; ++i)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	3301      	adds	r3, #1
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b05      	cmp	r3, #5
 8005098:	ddf0      	ble.n	800507c <Appli_CheckBdMacAddr+0x40>
  }

  if (sum == bdaddr[6])
 800509a:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <Appli_CheckBdMacAddr+0x84>)
 800509c:	799b      	ldrb	r3, [r3, #6]
 800509e:	7bfa      	ldrb	r2, [r7, #15]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d101      	bne.n	80050a8 <Appli_CheckBdMacAddr+0x6c>
  {
    result = 1;
 80050a4:	2301      	movs	r3, #1
 80050a6:	73bb      	strb	r3, [r7, #14]
  }
  
#if defined(EXTERNAL_MAC_ADDR_MGMT) && defined(EXTERNAL_MAC_IS_PUBLIC_ADDR)
   /* Do nothing for modification of 2 MSb */
#else
  bdaddr[5] |= 0xC0;    /* 2 Msb bits shall be 11b for Static Random Address */
 80050a8:	4b05      	ldr	r3, [pc, #20]	@ (80050c0 <Appli_CheckBdMacAddr+0x84>)
 80050aa:	795b      	ldrb	r3, [r3, #5]
 80050ac:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	4b03      	ldr	r3, [pc, #12]	@ (80050c0 <Appli_CheckBdMacAddr+0x84>)
 80050b4:	715a      	strb	r2, [r3, #5]
                      /* Do nothing for bdaddr, just pass the identification */
  result = 1;         /* This will overwrite the above for loop result, 
                          which is redundant for this case */
#endif  
  
  return result;
 80050b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	200045a8 	.word	0x200045a8
 80050c4:	200045af 	.word	0x200045af
 80050c8:	0802a2c4 	.word	0x0802a2c4

080050cc <Appli_GetMACfromUniqueNumber>:
* @param  void
* @retval void
*/
#ifdef INTERNAL_UNIQUE_NUMBER_MAC
static void Appli_GetMACfromUniqueNumber(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
  DEVICE_ID_REG1 could be identical for same batch samples, 
  4 bytes have been taken from DEVICE_ID_REG2
  */
  
  uint8_t i;
  uint8_t sum = 239;
 80050d2:	23ef      	movs	r3, #239	@ 0xef
 80050d4:	71bb      	strb	r3, [r7, #6]
  /* Static Device Address: 
  The two most significant bits 
  of the address shall be equal to 1, 
  hence ORed with 0xC0)*/
  
  for (i = 0; i < 6; ++i)
 80050d6:	2300      	movs	r3, #0
 80050d8:	71fb      	strb	r3, [r7, #7]
 80050da:	e00a      	b.n	80050f2 <Appli_GetMACfromUniqueNumber+0x26>
  {
    sum = (sum << 1) + bdaddr[i];
 80050dc:	79bb      	ldrb	r3, [r7, #6]
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	4909      	ldr	r1, [pc, #36]	@ (800510c <Appli_GetMACfromUniqueNumber+0x40>)
 80050e6:	5ccb      	ldrb	r3, [r1, r3]
 80050e8:	4413      	add	r3, r2
 80050ea:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 6; ++i)
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	3301      	adds	r3, #1
 80050f0:	71fb      	strb	r3, [r7, #7]
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	2b05      	cmp	r3, #5
 80050f6:	d9f1      	bls.n	80050dc <Appli_GetMACfromUniqueNumber+0x10>
  }
  bdaddr[6] = sum;
 80050f8:	4a04      	ldr	r2, [pc, #16]	@ (800510c <Appli_GetMACfromUniqueNumber+0x40>)
 80050fa:	79bb      	ldrb	r3, [r7, #6]
 80050fc:	7193      	strb	r3, [r2, #6]
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	200045a8 	.word	0x200045a8

08005110 <BLEMesh_UnprovisionCallback>:
* @brief  callback for unprovision the node by provisioner.
* @param  status reserved for future 
* @retval void
*/
void BLEMesh_UnprovisionCallback(MOBLEUINT8 reason)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	71fb      	strb	r3, [r7, #7]
  ProvisionFlag = 0; 
 800511a:	4b12      	ldr	r3, [pc, #72]	@ (8005164 <BLEMesh_UnprovisionCallback+0x54>)
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]
  
  BLEMesh_Process();
 8005120:	f01e fb34 	bl	802378c <BLEMesh_Process>
  HAL_Delay(100);
 8005124:	2064      	movs	r0, #100	@ 0x64
 8005126:	f7fc fba0 	bl	800186a <HAL_Delay>
#if PB_ADV_SUPPORTED
  BLEMesh_SetUnprovisionedDevBeaconInterval(PBADV_UNPROV_DEV_BEACON_INTERVAL);
 800512a:	2064      	movs	r0, #100	@ 0x64
 800512c:	f015 f974 	bl	801a418 <BLEMesh_SetUnprovisionedDevBeaconInterval>
#endif
  BLEMesh_StopAdvScan();
 8005130:	f017 fb7d 	bl	801c82e <BLEMesh_StopAdvScan>
  HAL_Delay(100);
 8005134:	2064      	movs	r0, #100	@ 0x64
 8005136:	f7fc fb98 	bl	800186a <HAL_Delay>
    
  TRACE_I(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 800513a:	480b      	ldr	r0, [pc, #44]	@ (8005168 <BLEMesh_UnprovisionCallback+0x58>)
 800513c:	f021 fc12 	bl	8026964 <puts>

  PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 8005140:	4b0a      	ldr	r3, [pc, #40]	@ (800516c <BLEMesh_UnprovisionCallback+0x5c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2104      	movs	r1, #4
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fffa 	bl	8006140 <PalNvmErase>
  TRACE_I(TF_PROVISION,"NVM erased\r\n");      
 800514c:	4808      	ldr	r0, [pc, #32]	@ (8005170 <BLEMesh_UnprovisionCallback+0x60>)
 800514e:	f021 fc09 	bl	8026964 <puts>
  TRACE_I(TF_PROVISION,"Reset Device\r\n");      
 8005152:	4808      	ldr	r0, [pc, #32]	@ (8005174 <BLEMesh_UnprovisionCallback+0x64>)
 8005154:	f021 fc06 	bl	8026964 <puts>

  HAL_Delay(100);
 8005158:	2064      	movs	r0, #100	@ 0x64
 800515a:	f7fc fb86 	bl	800186a <HAL_Delay>

  NVIC_SystemReset();
 800515e:	f7ff fd05 	bl	8004b6c <__NVIC_SystemReset>
 8005162:	bf00      	nop
 8005164:	2000459a 	.word	0x2000459a
 8005168:	0802a1d8 	.word	0x0802a1d8
 800516c:	200045b8 	.word	0x200045b8
 8005170:	0802a1cc 	.word	0x0802a1cc
 8005174:	0802a2e8 	.word	0x0802a2e8

08005178 <BLEMesh_PbAdvLinkOpenCb>:
* @brief  Call back function called when PB-ADV link Opened  
* @param  none
* @retval none
*/ 
void BLEMesh_PbAdvLinkOpenCb(void)
{ 
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  ProvisionFlag = 0;
 800517c:	4b05      	ldr	r3, [pc, #20]	@ (8005194 <BLEMesh_PbAdvLinkOpenCb+0x1c>)
 800517e:	2200      	movs	r2, #0
 8005180:	701a      	strb	r2, [r3, #0]
  TRACE_I(TF_PROVISION,"PB-ADV Link opened successfully \n\r");    
 8005182:	4805      	ldr	r0, [pc, #20]	@ (8005198 <BLEMesh_PbAdvLinkOpenCb+0x20>)
 8005184:	f021 fb86 	bl	8026894 <iprintf>
  /* Turn ON Red LED*/
#if LOW_POWER_FEATURE
  /* do nothing */
#else
  BSP_LED_On(LED_RED);
 8005188:	2002      	movs	r0, #2
 800518a:	f001 fb29 	bl	80067e0 <BSP_LED_On>
#endif
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	2000459a 	.word	0x2000459a
 8005198:	0802a32c 	.word	0x0802a32c

0800519c <BLEMesh_ProvisionCallback>:
* @brief  callback for provision the node by provisioner.
* @param  void
* @retval void
*/
void BLEMesh_ProvisionCallback(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  ProvisionFlag = 1;
 80051a0:	4b03      	ldr	r3, [pc, #12]	@ (80051b0 <BLEMesh_ProvisionCallback+0x14>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_AUTH_TYPE_OUTPUT_OOB
  PrvngInProcess = 0;
#endif
  TRACE_I(TF_PROVISION,"Device is provisioned by provisioner \r\n");
 80051a6:	4803      	ldr	r0, [pc, #12]	@ (80051b4 <BLEMesh_ProvisionCallback+0x18>)
 80051a8:	f021 fbdc 	bl	8026964 <puts>
  
#if (LOW_POWER_FEATURE == 1)
  /* Call API LPN_API_TIMER_INTERVAL after LPN provisioning */
//  HW_TS_Start(lowPowerNodeApiTimer_Id, LPN_API_TIMER_INTERVAL);
#endif
}
 80051ac:	bf00      	nop
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	2000459a 	.word	0x2000459a
 80051b4:	0802a374 	.word	0x0802a374

080051b8 <BLEMesh_ConfigurationCallback>:
* @brief  callback for configuration the node by provisioner.
* @param  void
* @retval void
*/
void BLEMesh_ConfigurationCallback(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  {
    HW_TS_Start(lowPowerNodeApiTimer_Id, LPN_API_TIMER_INTERVAL);
    LPN_scan_enabled = MOBLE_TRUE;
  }
#endif
}
 80051bc:	bf00      	nop
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
	...

080051c8 <BLEMesh_FnFriendshipEstablishedCallback>:
void BLEMesh_FnFriendshipEstablishedCallback(MOBLE_ADDRESS lpnAddress,
                                             MOBLEUINT8 lpnReceiveDelay,
                                             MOBLEUINT32 lpnPollTimeout,
                                             MOBLEUINT8 lpnNumElements,
                                             MOBLE_ADDRESS lpnPrevFriendAddress)
{ 
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	603a      	str	r2, [r7, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	4603      	mov	r3, r0
 80051d4:	80fb      	strh	r3, [r7, #6]
 80051d6:	460b      	mov	r3, r1
 80051d8:	717b      	strb	r3, [r7, #5]
 80051da:	4613      	mov	r3, r2
 80051dc:	713b      	strb	r3, [r7, #4]
  TRACE_I(TF_LPN_FRND,"Friendship established. Low power node address 0x%.4X \r\n", lpnAddress);
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	4619      	mov	r1, r3
 80051e2:	4810      	ldr	r0, [pc, #64]	@ (8005224 <BLEMesh_FnFriendshipEstablishedCallback+0x5c>)
 80051e4:	f021 fb56 	bl	8026894 <iprintf>
  TRACE_I(TF_LPN_FRND,"Low power node receive delay %dms \r\n", lpnReceiveDelay);
 80051e8:	797b      	ldrb	r3, [r7, #5]
 80051ea:	4619      	mov	r1, r3
 80051ec:	480e      	ldr	r0, [pc, #56]	@ (8005228 <BLEMesh_FnFriendshipEstablishedCallback+0x60>)
 80051ee:	f021 fb51 	bl	8026894 <iprintf>
  TRACE_I(TF_LPN_FRND,"Low power node poll timeout %ldms \r\n", lpnPollTimeout*100);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2264      	movs	r2, #100	@ 0x64
 80051f6:	fb02 f303 	mul.w	r3, r2, r3
 80051fa:	4619      	mov	r1, r3
 80051fc:	480b      	ldr	r0, [pc, #44]	@ (800522c <BLEMesh_FnFriendshipEstablishedCallback+0x64>)
 80051fe:	f021 fb49 	bl	8026894 <iprintf>
  TRACE_I(TF_LPN_FRND,"Low power node number of elements %d \r\n", lpnNumElements);
 8005202:	793b      	ldrb	r3, [r7, #4]
 8005204:	4619      	mov	r1, r3
 8005206:	480a      	ldr	r0, [pc, #40]	@ (8005230 <BLEMesh_FnFriendshipEstablishedCallback+0x68>)
 8005208:	f021 fb44 	bl	8026894 <iprintf>
  if (lpnPrevFriendAddress != MOBLE_ADDRESS_UNASSIGNED)
 800520c:	8a3b      	ldrh	r3, [r7, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <BLEMesh_FnFriendshipEstablishedCallback+0x54>
  {
    TRACE_I(TF_LPN_FRND,"Low power node previous friend address 0x%.4X \r\n", lpnPrevFriendAddress);
 8005212:	8a3b      	ldrh	r3, [r7, #16]
 8005214:	4619      	mov	r1, r3
 8005216:	4807      	ldr	r0, [pc, #28]	@ (8005234 <BLEMesh_FnFriendshipEstablishedCallback+0x6c>)
 8005218:	f021 fb3c 	bl	8026894 <iprintf>
  }
}
 800521c:	bf00      	nop
 800521e:	3708      	adds	r7, #8
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	0802a39c 	.word	0x0802a39c
 8005228:	0802a3d8 	.word	0x0802a3d8
 800522c:	0802a400 	.word	0x0802a400
 8005230:	0802a428 	.word	0x0802a428
 8005234:	0802a450 	.word	0x0802a450

08005238 <BLEMesh_FnFriendshipClearedCallback>:
*         3: friend clear received
* @param  previous friend address of low power node (can be invalid address)
* @retval void
*/
void BLEMesh_FnFriendshipClearedCallback(MOBLEUINT8 reason, MOBLE_ADDRESS lpnAddress)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	4603      	mov	r3, r0
 8005240:	460a      	mov	r2, r1
 8005242:	71fb      	strb	r3, [r7, #7]
 8005244:	4613      	mov	r3, r2
 8005246:	80bb      	strh	r3, [r7, #4]
  TRACE_I(TF_LPN_FRND,"Friendship cleared. Low power node address 0x%.4X \r\n", lpnAddress);
 8005248:	88bb      	ldrh	r3, [r7, #4]
 800524a:	4619      	mov	r1, r3
 800524c:	4810      	ldr	r0, [pc, #64]	@ (8005290 <BLEMesh_FnFriendshipClearedCallback+0x58>)
 800524e:	f021 fb21 	bl	8026894 <iprintf>
  
  switch(reason)
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	2b03      	cmp	r3, #3
 8005256:	d00e      	beq.n	8005276 <BLEMesh_FnFriendshipClearedCallback+0x3e>
 8005258:	2b03      	cmp	r3, #3
 800525a:	dc10      	bgt.n	800527e <BLEMesh_FnFriendshipClearedCallback+0x46>
 800525c:	2b01      	cmp	r3, #1
 800525e:	d002      	beq.n	8005266 <BLEMesh_FnFriendshipClearedCallback+0x2e>
 8005260:	2b02      	cmp	r3, #2
 8005262:	d004      	beq.n	800526e <BLEMesh_FnFriendshipClearedCallback+0x36>
 8005264:	e00b      	b.n	800527e <BLEMesh_FnFriendshipClearedCallback+0x46>
  {
  case FN_CLEARED_REPEAT_REQUEST: 
    TRACE_I(TF_LPN_FRND,"Reason: New friend request received from existing low power node \r\n");
 8005266:	480b      	ldr	r0, [pc, #44]	@ (8005294 <BLEMesh_FnFriendshipClearedCallback+0x5c>)
 8005268:	f021 fb7c 	bl	8026964 <puts>
    break;
 800526c:	e00b      	b.n	8005286 <BLEMesh_FnFriendshipClearedCallback+0x4e>
  case FN_CLEARED_POLL_TIMEOUT:
    TRACE_I(TF_LPN_FRND,"Reason: Low power node poll timeout occurred \r\n");
 800526e:	480a      	ldr	r0, [pc, #40]	@ (8005298 <BLEMesh_FnFriendshipClearedCallback+0x60>)
 8005270:	f021 fb78 	bl	8026964 <puts>
    break;
 8005274:	e007      	b.n	8005286 <BLEMesh_FnFriendshipClearedCallback+0x4e>
  case FN_CLEARED_FRIEND_CLEAR:
    TRACE_I(TF_LPN_FRND,"Reason: Friend clear received \r\n");
 8005276:	4809      	ldr	r0, [pc, #36]	@ (800529c <BLEMesh_FnFriendshipClearedCallback+0x64>)
 8005278:	f021 fb74 	bl	8026964 <puts>
    break;
 800527c:	e003      	b.n	8005286 <BLEMesh_FnFriendshipClearedCallback+0x4e>
  default:
    TRACE_I(TF_LPN_FRND,"Reason: Invalid \r\n");
 800527e:	4808      	ldr	r0, [pc, #32]	@ (80052a0 <BLEMesh_FnFriendshipClearedCallback+0x68>)
 8005280:	f021 fb70 	bl	8026964 <puts>
    break;
 8005284:	bf00      	nop
  }
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	0802a484 	.word	0x0802a484
 8005294:	0802a4bc 	.word	0x0802a4bc
 8005298:	0802a500 	.word	0x0802a500
 800529c:	0802a530 	.word	0x0802a530
 80052a0:	0802a550 	.word	0x0802a550

080052a4 <BLEMesh_NeighborAppearedCallback>:
void BLEMesh_NeighborAppearedCallback(const MOBLEUINT8* bdAddr,
                                          MOBLEBOOL provisioned,
                                          const MOBLEUINT8* uuid,
                                          MOBLE_ADDRESS networkAddress,
                                          MOBLEINT8 rssi)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	461a      	mov	r2, r3
 80052b0:	460b      	mov	r3, r1
 80052b2:	72fb      	strb	r3, [r7, #11]
 80052b4:	4613      	mov	r3, r2
 80052b6:	813b      	strh	r3, [r7, #8]
  TRACE_I(TF_NEIGHBOUR,"New neighbor appeared. Neighbor MAC address:");
  
  for (MOBLEUINT8 count=0 ; count<6; count++)
 80052b8:	2300      	movs	r3, #0
 80052ba:	75fb      	strb	r3, [r7, #23]
 80052bc:	e002      	b.n	80052c4 <BLEMesh_NeighborAppearedCallback+0x20>
 80052be:	7dfb      	ldrb	r3, [r7, #23]
 80052c0:	3301      	adds	r3, #1
 80052c2:	75fb      	strb	r3, [r7, #23]
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d9f9      	bls.n	80052be <BLEMesh_NeighborAppearedCallback+0x1a>
  else
  {
    TRACE_I(TF_NEIGHBOUR,"Network address not available\n\r");
  }

  for (MOBLEUINT8 i=0; i<16; i++)
 80052ca:	2300      	movs	r3, #0
 80052cc:	75bb      	strb	r3, [r7, #22]
 80052ce:	e013      	b.n	80052f8 <BLEMesh_NeighborAppearedCallback+0x54>
  {
    if (uuid[i] == 0x00)
 80052d0:	7dbb      	ldrb	r3, [r7, #22]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	4413      	add	r3, r2
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d009      	beq.n	80052f0 <BLEMesh_NeighborAppearedCallback+0x4c>
    }
    else
    {
      TRACE_I(TF_NEIGHBOUR,"UUID: ");
      
      for (MOBLEUINT8 count=0 ; count<16; count++)
 80052dc:	2300      	movs	r3, #0
 80052de:	757b      	strb	r3, [r7, #21]
 80052e0:	e002      	b.n	80052e8 <BLEMesh_NeighborAppearedCallback+0x44>
 80052e2:	7d7b      	ldrb	r3, [r7, #21]
 80052e4:	3301      	adds	r3, #1
 80052e6:	757b      	strb	r3, [r7, #21]
 80052e8:	7d7b      	ldrb	r3, [r7, #21]
 80052ea:	2b0f      	cmp	r3, #15
 80052ec:	d9f9      	bls.n	80052e2 <BLEMesh_NeighborAppearedCallback+0x3e>
      {
        TRACE_I(TF_NEIGHBOUR,"%.2x ", uuid[count]);
      }
      
      break;
 80052ee:	e007      	b.n	8005300 <BLEMesh_NeighborAppearedCallback+0x5c>
      continue;
 80052f0:	bf00      	nop
  for (MOBLEUINT8 i=0; i<16; i++)
 80052f2:	7dbb      	ldrb	r3, [r7, #22]
 80052f4:	3301      	adds	r3, #1
 80052f6:	75bb      	strb	r3, [r7, #22]
 80052f8:	7dbb      	ldrb	r3, [r7, #22]
 80052fa:	2b0f      	cmp	r3, #15
 80052fc:	d9e8      	bls.n	80052d0 <BLEMesh_NeighborAppearedCallback+0x2c>
    }
  }
  
  TRACE_I(TF_NEIGHBOUR,"\n\r");
}
 80052fe:	bf00      	nop
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <BLEMesh_NeighborRefreshedCallback>:
void BLEMesh_NeighborRefreshedCallback(const MOBLEUINT8* bdAddr,
                                          MOBLEBOOL provisioned,
                                          const MOBLEUINT8* uuid,
                                          MOBLE_ADDRESS networkAddress,
                                          MOBLEINT8 rssi)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	461a      	mov	r2, r3
 8005318:	460b      	mov	r3, r1
 800531a:	72fb      	strb	r3, [r7, #11]
 800531c:	4613      	mov	r3, r2
 800531e:	813b      	strh	r3, [r7, #8]
  TRACE_I(TF_NEIGHBOUR,"Existing neighbor refreshed. Neighbor MAC address:");
  
  for (MOBLEUINT8 count=0 ; count<6; count++)
 8005320:	2300      	movs	r3, #0
 8005322:	75fb      	strb	r3, [r7, #23]
 8005324:	e002      	b.n	800532c <BLEMesh_NeighborRefreshedCallback+0x20>
 8005326:	7dfb      	ldrb	r3, [r7, #23]
 8005328:	3301      	adds	r3, #1
 800532a:	75fb      	strb	r3, [r7, #23]
 800532c:	7dfb      	ldrb	r3, [r7, #23]
 800532e:	2b05      	cmp	r3, #5
 8005330:	d9f9      	bls.n	8005326 <BLEMesh_NeighborRefreshedCallback+0x1a>
  else
  {
    TRACE_I(TF_NEIGHBOUR,"Network address not available\n\r");
  }
  
  for (MOBLEUINT8 i=0; i<16; i++)
 8005332:	2300      	movs	r3, #0
 8005334:	75bb      	strb	r3, [r7, #22]
 8005336:	e013      	b.n	8005360 <BLEMesh_NeighborRefreshedCallback+0x54>
  {
    if (uuid[i] == 0x00)
 8005338:	7dbb      	ldrb	r3, [r7, #22]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	4413      	add	r3, r2
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d009      	beq.n	8005358 <BLEMesh_NeighborRefreshedCallback+0x4c>
    }
    else
    {
      TRACE_I(TF_NEIGHBOUR,"UUID: ");
      
      for (MOBLEUINT8 count=0 ; count<16; count++)
 8005344:	2300      	movs	r3, #0
 8005346:	757b      	strb	r3, [r7, #21]
 8005348:	e002      	b.n	8005350 <BLEMesh_NeighborRefreshedCallback+0x44>
 800534a:	7d7b      	ldrb	r3, [r7, #21]
 800534c:	3301      	adds	r3, #1
 800534e:	757b      	strb	r3, [r7, #21]
 8005350:	7d7b      	ldrb	r3, [r7, #21]
 8005352:	2b0f      	cmp	r3, #15
 8005354:	d9f9      	bls.n	800534a <BLEMesh_NeighborRefreshedCallback+0x3e>
      {
        TRACE_I(TF_NEIGHBOUR,"%.2x ", uuid[count]);
      }
      
      break;
 8005356:	e007      	b.n	8005368 <BLEMesh_NeighborRefreshedCallback+0x5c>
      continue;
 8005358:	bf00      	nop
  for (MOBLEUINT8 i=0; i<16; i++)
 800535a:	7dbb      	ldrb	r3, [r7, #22]
 800535c:	3301      	adds	r3, #1
 800535e:	75bb      	strb	r3, [r7, #22]
 8005360:	7dbb      	ldrb	r3, [r7, #22]
 8005362:	2b0f      	cmp	r3, #15
 8005364:	d9e8      	bls.n	8005338 <BLEMesh_NeighborRefreshedCallback+0x2c>
    }
  }
  
  TRACE_I(TF_NEIGHBOUR,"\n\r");
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <BLEMesh_CustomBeaconGeneratorCallback>:
* @param  beacon data buffer. It includes length and AD type fields
*         buffer size
* @retval void
*/
void BLEMesh_CustomBeaconGeneratorCallback(void* buffer, MOBLEUINT8* size)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 adType = CUSTOM_BEACON_AD_TYPE;
 800537e:	2300      	movs	r3, #0
 8005380:	75fb      	strb	r3, [r7, #23]
  MOBLEUINT8 dataLength = 5;
 8005382:	2305      	movs	r3, #5
 8005384:	75bb      	strb	r3, [r7, #22]
  MOBLEUINT8 data[5] = {0x00,0x01,0x02,0x03,0x04};
 8005386:	4a12      	ldr	r2, [pc, #72]	@ (80053d0 <BLEMesh_CustomBeaconGeneratorCallback+0x5c>)
 8005388:	f107 0308 	add.w	r3, r7, #8
 800538c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005390:	6018      	str	r0, [r3, #0]
 8005392:	3304      	adds	r3, #4
 8005394:	7019      	strb	r1, [r3, #0]
  MOBLEUINT8* buf = (MOBLEUINT8*)buffer;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	613b      	str	r3, [r7, #16]
  
  buf[0] = dataLength+1;
 800539a:	7dbb      	ldrb	r3, [r7, #22]
 800539c:	3301      	adds	r3, #1
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	701a      	strb	r2, [r3, #0]
  buf[1] = adType;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	3301      	adds	r3, #1
 80053a8:	7dfa      	ldrb	r2, [r7, #23]
 80053aa:	701a      	strb	r2, [r3, #0]
  memcpy(buf+2, data, dataLength);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	3302      	adds	r3, #2
 80053b0:	7dba      	ldrb	r2, [r7, #22]
 80053b2:	f107 0108 	add.w	r1, r7, #8
 80053b6:	4618      	mov	r0, r3
 80053b8:	f021 fcbb 	bl	8026d32 <memcpy>
  
  *size = dataLength+2;  
 80053bc:	7dbb      	ldrb	r3, [r7, #22]
 80053be:	3302      	adds	r3, #2
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	701a      	strb	r2, [r3, #0]
}
 80053c6:	bf00      	nop
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	0802a5f4 	.word	0x0802a5f4

080053d4 <IntensityPublish>:
*         This function should be called in main loop
* @param  void
* @retval void
*/
void IntensityPublish(void)
{  
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  
  Appli_IntensityControlPublishing(pGeneric_LevelParam);
  Appli_GenericClient_API(elementIndex, GENERIC_LEVEL_SET_ACK, pGeneric_LevelParam); 
#endif  
#endif
}
 80053d8:	bf00      	nop
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <Appli_Process>:
*         This function should be called in main loop
* @param  void
* @retval void
*/
void Appli_Process(void)
{
 80053e2:	b480      	push	{r7}
 80053e4:	af00      	add	r7, sp, #0
  else
  {
    //SdkEvalLedOff(LED1);
  }
#endif      
}
 80053e6:	bf00      	nop
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <UnprovisionedDeviceBeaconApp>:

#if PB_ADV_SUPPORTED
static void UnprovisionedDeviceBeaconApp(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  BLEMesh_SetUnprovisionedDevBeaconInterval(0);
 80053f4:	2000      	movs	r0, #0
 80053f6:	f015 f80f 	bl	801a418 <BLEMesh_SetUnprovisionedDevBeaconInterval>
}
 80053fa:	bf00      	nop
 80053fc:	bd80      	pop	{r7, pc}

080053fe <UnprovisionedDeviceBeaconTask>:

static void UnprovisionedDeviceBeaconTask(void)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_BEACON_REQ_ID, CFG_SCH_PRIO_0);
 8005402:	2100      	movs	r1, #0
 8005404:	2004      	movs	r0, #4
 8005406:	f00e fd77 	bl	8013ef8 <UTIL_SEQ_SetTask>

  return;
 800540a:	bf00      	nop
}
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <AppliMeshSW1Task>:
  return;
}
#endif

static void AppliMeshSW1Task(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* Check if button action is emulated with SW1 command on USART1 */
#if ENABLE_SERIAL_INTERFACE
  if(!button_emulation)
 8005414:	4b0b      	ldr	r3, [pc, #44]	@ (8005444 <AppliMeshSW1Task+0x34>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10c      	bne.n	8005436 <AppliMeshSW1Task+0x26>
  {
  Appli_UpdateButtonState(BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED);
 800541c:	2000      	movs	r0, #0
 800541e:	f001 fa83 	bl	8006928 <BSP_PB_GetState>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf0c      	ite	eq
 8005428:	2301      	moveq	r3, #1
 800542a:	2300      	movne	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff fbe6 	bl	8004c00 <Appli_UpdateButtonState>
    button_emulation = 0;
  }
#else
  Appli_UpdateButtonState(BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED);
#endif  
  return;
 8005434:	e005      	b.n	8005442 <AppliMeshSW1Task+0x32>
    Appli_ShortButtonPress();
 8005436:	f7ff fbc3 	bl	8004bc0 <Appli_ShortButtonPress>
    button_emulation = 0;
 800543a:	4b02      	ldr	r3, [pc, #8]	@ (8005444 <AppliMeshSW1Task+0x34>)
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]
  return;
 8005440:	bf00      	nop
}
 8005442:	bd80      	pop	{r7, pc}
 8005444:	20004760 	.word	0x20004760

08005448 <Appli_Init>:
* @brief  Initializes the Application  
* @param  void
* @retval void
*/
void Appli_Init(MOBLEUINT8 *flag)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  AppliNvm_FactorySettingReset();
#endif
#endif
  
#if PB_ADV_SUPPORTED
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_BEACON_REQ_ID, UTIL_SEQ_RFU, UnprovisionedDeviceBeaconApp );
 8005450:	4a0d      	ldr	r2, [pc, #52]	@ (8005488 <Appli_Init+0x40>)
 8005452:	2100      	movs	r1, #0
 8005454:	2004      	movs	r0, #4
 8005456:	f00e fd2d 	bl	8013eb4 <UTIL_SEQ_RegTask>
  /**
   * Create Timer to control unprovisioned device beacons
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &discoverTimer_Id, hw_ts_SingleShot, UnprovisionedDeviceBeaconTask);
 800545a:	4b0c      	ldr	r3, [pc, #48]	@ (800548c <Appli_Init+0x44>)
 800545c:	2200      	movs	r2, #0
 800545e:	490c      	ldr	r1, [pc, #48]	@ (8005490 <Appli_Init+0x48>)
 8005460:	2000      	movs	r0, #0
 8005462:	f7fd f915 	bl	8002690 <HW_TS_Create>
  
  HW_TS_Start(discoverTimer_Id, DISCOVER_TIMER_INTERVAL);
 8005466:	4b0a      	ldr	r3, [pc, #40]	@ (8005490 <Appli_Init+0x48>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	490a      	ldr	r1, [pc, #40]	@ (8005494 <Appli_Init+0x4c>)
 800546c:	4618      	mov	r0, r3
 800546e:	f7fd fa0d 	bl	800288c <HW_TS_Start>
#endif
  
#if ENABLE_SERIAL_INTERFACE
  Serial_Init();
 8005472:	f00a fbbb 	bl	800fbec <Serial_Init>
  Modify_PWM(BLUE_LED, 1);
#endif
#endif
#endif
  
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_SW1_REQ_ID, UTIL_SEQ_RFU, AppliMeshSW1Task );
 8005476:	4a08      	ldr	r2, [pc, #32]	@ (8005498 <Appli_Init+0x50>)
 8005478:	2100      	movs	r1, #0
 800547a:	2040      	movs	r0, #64	@ 0x40
 800547c:	f00e fd1a 	bl	8013eb4 <UTIL_SEQ_RegTask>
  * Create Timer to control Input OOB information
  */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &InputOOBTimeOut_Id, hw_ts_SingleShot, InputOOBTimeOutTask);
#endif

}
 8005480:	bf00      	nop
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	080053f1 	.word	0x080053f1
 800548c:	080053ff 	.word	0x080053ff
 8005490:	200045a0 	.word	0x200045a0
 8005494:	0012c258 	.word	0x0012c258
 8005498:	08005411 	.word	0x08005411

0800549c <PwmValueMapping>:
* @param  maxRange: Max range of the parameter
* @param  minRange: Min range of the parameter
* @retval MOBLEUINT8
*/
MOBLEUINT16 PwmValueMapping(MOBLEUINT16 setValue , MOBLEUINT16 maxRange , MOBLEINT16 minRange)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	80fb      	strh	r3, [r7, #6]
 80054a6:	460b      	mov	r3, r1
 80054a8:	80bb      	strh	r3, [r7, #4]
 80054aa:	4613      	mov	r3, r2
 80054ac:	807b      	strh	r3, [r7, #2]
   else if(percentValue > 90)
   {
     duty = 10;
   }
#else
   if(minRange > 0x00)
 80054ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	dd15      	ble.n	80054e2 <PwmValueMapping+0x46>
   {
     percentValue =  (setValue - 800)/ (maxRange - minRange);
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	f5a3 7248 	sub.w	r2, r3, #800	@ 0x320
 80054bc:	88b9      	ldrh	r1, [r7, #4]
 80054be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054c2:	1acb      	subs	r3, r1, r3
 80054c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80054c8:	81fb      	strh	r3, [r7, #14]
     percentValue = (percentValue*100);
 80054ca:	89fb      	ldrh	r3, [r7, #14]
 80054cc:	461a      	mov	r2, r3
 80054ce:	0092      	lsls	r2, r2, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	461a      	mov	r2, r3
 80054d4:	0091      	lsls	r1, r2, #2
 80054d6:	461a      	mov	r2, r3
 80054d8:	460b      	mov	r3, r1
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	81fb      	strh	r3, [r7, #14]
 80054e0:	e00a      	b.n	80054f8 <PwmValueMapping+0x5c>
   }
   else
   {
     percentValue =  (setValue * 100)/ (maxRange - minRange);
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	2264      	movs	r2, #100	@ 0x64
 80054e6:	fb03 f202 	mul.w	r2, r3, r2
 80054ea:	88b9      	ldrh	r1, [r7, #4]
 80054ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054f0:	1acb      	subs	r3, r1, r3
 80054f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80054f6:	81fb      	strh	r3, [r7, #14]
   }
   
   duty = percentValue*320 ;
 80054f8:	89fb      	ldrh	r3, [r7, #14]
 80054fa:	461a      	mov	r2, r3
 80054fc:	0092      	lsls	r2, r2, #2
 80054fe:	4413      	add	r3, r2
 8005500:	019b      	lsls	r3, r3, #6
 8005502:	81bb      	strh	r3, [r7, #12]
   
   if(duty >= 32000)
 8005504:	89bb      	ldrh	r3, [r7, #12]
 8005506:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800550a:	d302      	bcc.n	8005512 <PwmValueMapping+0x76>
   {
     duty = 31999;
 800550c:	f647 43ff 	movw	r3, #31999	@ 0x7cff
 8005510:	81bb      	strh	r3, [r7, #12]
   }
   if(duty == 0)
 8005512:	89bb      	ldrh	r3, [r7, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <PwmValueMapping+0x80>
   {
     duty = 1;
 8005518:	2301      	movs	r3, #1
 800551a:	81bb      	strh	r3, [r7, #12]
   }
#endif
     
   return duty;
 800551c:	89bb      	ldrh	r3, [r7, #12]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <AppliNvm_ClearModelState>:
* @brief  Clear model states in nvm
* @param  none
* @retval MOBLE_RESULT_SUCCESS on success
*/
MOBLE_RESULT AppliNvm_ClearModelState(void)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
  MOBLE_RESULT result = MOBLE_RESULT_FAIL; /* if save model state not defined, return MOBLE_RESULT_FAIL */
 8005530:	2302      	movs	r3, #2
 8005532:	71fb      	strb	r3, [r7, #7]
                                     (uint32_t*)&subPageTemp, 
                                     APP_NVM_SUBPAGE_SIZE);
    }
  }
#endif /* SAVE_MODEL_STATE_NVM */  
  return result;
 8005534:	79fb      	ldrb	r3, [r7, #7]
}
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <AppliNvm_LoadModelState>:
* @param  model state buff size
* @retval MOBLE_RESULT_SUCCESS on success
*/
MOBLE_RESULT AppliNvm_LoadModelState(uint8_t state[], 
                                     uint16_t* size)
{  
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
      *size = APP_NVM_MODEL_SIZE;
    }
  }
  return result;  
#else /* SAVE_MODEL_STATE_NVM */  
  *size = 0;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2200      	movs	r2, #0
 8005550:	801a      	strh	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS;
 8005552:	2300      	movs	r3, #0
#endif /* SAVE_MODEL_STATE_NVM */
}
 8005554:	4618      	mov	r0, r3
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <AppliNvm_SaveMessageParam>:
  states in flash.
* @param  void
* @retval void
*/
void AppliNvm_SaveMessageParam (void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
#ifdef SAVE_MODEL_STATE_FOR_ALL_MESSAGES
  PowerOnOff_flag = FLAG_SET;
#endif 
} 
 8005564:	bf00      	nop
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <Appli_Vendor_DeviceInfo>:
* @param  data: Pointer to the data received from peer_addr
* @param  length: Length of the data
* @retval MOBLE_RESULT status of result
*/          
MOBLE_RESULT Appli_Vendor_DeviceInfo(MOBLEUINT8 const *data, MOBLEUINT32 length)
{
 8005570:	b590      	push	{r4, r7, lr}
 8005572:	b089      	sub	sp, #36	@ 0x24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 tempBuffer[10];
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;  
 800557a:	2300      	movs	r3, #0
 800557c:	77fb      	strb	r3, [r7, #31]
  
  MOBLEUINT8 subCmd = data[0];
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	74bb      	strb	r3, [r7, #18]
  char *libVersion;
  char *subLibVersion;
  MOBLEUINT8 inc = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	74fb      	strb	r3, [r7, #19]
        /*First Byte is sending the Sub Command*/      
  ResponseBuffer[0] = subCmd;
 8005588:	4a78      	ldr	r2, [pc, #480]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 800558a:	7cbb      	ldrb	r3, [r7, #18]
 800558c:	7013      	strb	r3, [r2, #0]
        TRACE_M(TF_VENDOR,"#02-%02hx! \n\r",data[0]);
 800558e:	2100      	movs	r1, #0
 8005590:	4877      	ldr	r0, [pc, #476]	@ (8005770 <Appli_Vendor_DeviceInfo+0x200>)
 8005592:	f007 fd65 	bl	800d060 <TraceHeader>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	4619      	mov	r1, r3
 800559c:	4875      	ldr	r0, [pc, #468]	@ (8005774 <Appli_Vendor_DeviceInfo+0x204>)
 800559e:	f021 f979 	bl	8026894 <iprintf>
  
  switch(subCmd)
 80055a2:	7cbb      	ldrb	r3, [r7, #18]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	f200 80d7 	bhi.w	800575a <Appli_Vendor_DeviceInfo+0x1ea>
 80055ac:	a201      	add	r2, pc, #4	@ (adr r2, 80055b4 <Appli_Vendor_DeviceInfo+0x44>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	080055c5 	.word	0x080055c5
 80055b8:	080055d3 	.word	0x080055d3
 80055bc:	08005693 	.word	0x08005693
 80055c0:	08005761 	.word	0x08005761
#ifdef BLUENRG_MS    
      ResponseBuffer[1] = BLUENRG_MS_BRD;               
#endif
      
#ifdef STM32WB55xx
      ResponseBuffer[1] = STM32WB55XX_BRD;               
 80055c4:	4b69      	ldr	r3, [pc, #420]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 80055c6:	2204      	movs	r2, #4
 80055c8:	705a      	strb	r2, [r3, #1]
#endif      

      BuffLength = 2;
 80055ca:	4b6b      	ldr	r3, [pc, #428]	@ (8005778 <Appli_Vendor_DeviceInfo+0x208>)
 80055cc:	2202      	movs	r2, #2
 80055ce:	801a      	strh	r2, [r3, #0]
      break;
 80055d0:	e0c7      	b.n	8005762 <Appli_Vendor_DeviceInfo+0x1f2>
    }
  case LIB_VER:
    {
      libVersion = BLEMesh_GetLibraryVersion();
 80055d2:	f015 f907 	bl	801a7e4 <BLEMesh_GetLibraryVersion>
 80055d6:	61b8      	str	r0, [r7, #24]
      while(*libVersion != '\0')
 80055d8:	e03e      	b.n	8005658 <Appli_Vendor_DeviceInfo+0xe8>
      {
        tempBuffer[inc] = *libVersion;
 80055da:	7cfb      	ldrb	r3, [r7, #19]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	7812      	ldrb	r2, [r2, #0]
 80055e0:	3320      	adds	r3, #32
 80055e2:	443b      	add	r3, r7
 80055e4:	f803 2c18 	strb.w	r2, [r3, #-24]
        if(tempBuffer[inc] != 0x2E)
 80055e8:	7cfb      	ldrb	r3, [r7, #19]
 80055ea:	3320      	adds	r3, #32
 80055ec:	443b      	add	r3, r7
 80055ee:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80055f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80055f4:	d01d      	beq.n	8005632 <Appli_Vendor_DeviceInfo+0xc2>
        {
          tempBuffer[inc] = BLEMesh_ModelsASCII_To_Char(tempBuffer[inc]);
 80055f6:	7cfb      	ldrb	r3, [r7, #19]
 80055f8:	3320      	adds	r3, #32
 80055fa:	443b      	add	r3, r7
 80055fc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005600:	7cfc      	ldrb	r4, [r7, #19]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fcb4 	bl	8005f70 <BLEMesh_ModelsASCII_To_Char>
 8005608:	4603      	mov	r3, r0
 800560a:	461a      	mov	r2, r3
 800560c:	f104 0320 	add.w	r3, r4, #32
 8005610:	443b      	add	r3, r7
 8005612:	f803 2c18 	strb.w	r2, [r3, #-24]
          TRACE_M(TF_VENDOR,"Lib version is %x\n\r" ,(unsigned char)tempBuffer[inc]);
 8005616:	2100      	movs	r1, #0
 8005618:	4855      	ldr	r0, [pc, #340]	@ (8005770 <Appli_Vendor_DeviceInfo+0x200>)
 800561a:	f007 fd21 	bl	800d060 <TraceHeader>
 800561e:	7cfb      	ldrb	r3, [r7, #19]
 8005620:	3320      	adds	r3, #32
 8005622:	443b      	add	r3, r7
 8005624:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005628:	4619      	mov	r1, r3
 800562a:	4854      	ldr	r0, [pc, #336]	@ (800577c <Appli_Vendor_DeviceInfo+0x20c>)
 800562c:	f021 f932 	bl	8026894 <iprintf>
 8005630:	e00c      	b.n	800564c <Appli_Vendor_DeviceInfo+0xdc>
        }
        else
        {
          TRACE_M(TF_VENDOR,"Lib version is %c\n\r" ,(unsigned char)tempBuffer[inc]);
 8005632:	2100      	movs	r1, #0
 8005634:	484e      	ldr	r0, [pc, #312]	@ (8005770 <Appli_Vendor_DeviceInfo+0x200>)
 8005636:	f007 fd13 	bl	800d060 <TraceHeader>
 800563a:	7cfb      	ldrb	r3, [r7, #19]
 800563c:	3320      	adds	r3, #32
 800563e:	443b      	add	r3, r7
 8005640:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005644:	4619      	mov	r1, r3
 8005646:	484e      	ldr	r0, [pc, #312]	@ (8005780 <Appli_Vendor_DeviceInfo+0x210>)
 8005648:	f021 f924 	bl	8026894 <iprintf>
        }             
        libVersion++;  
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	3301      	adds	r3, #1
 8005650:	61bb      	str	r3, [r7, #24]
             
        inc++;
 8005652:	7cfb      	ldrb	r3, [r7, #19]
 8005654:	3301      	adds	r3, #1
 8005656:	74fb      	strb	r3, [r7, #19]
      while(*libVersion != '\0')
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1bc      	bne.n	80055da <Appli_Vendor_DeviceInfo+0x6a>
      } 
      ResponseBuffer[1]= tempBuffer[0];
 8005660:	7a3a      	ldrb	r2, [r7, #8]
 8005662:	4b42      	ldr	r3, [pc, #264]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 8005664:	705a      	strb	r2, [r3, #1]
      ResponseBuffer[2]= tempBuffer[1];
 8005666:	7a7a      	ldrb	r2, [r7, #9]
 8005668:	4b40      	ldr	r3, [pc, #256]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 800566a:	709a      	strb	r2, [r3, #2]
      ResponseBuffer[3]= tempBuffer[3];
 800566c:	7afa      	ldrb	r2, [r7, #11]
 800566e:	4b3f      	ldr	r3, [pc, #252]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 8005670:	70da      	strb	r2, [r3, #3]
      ResponseBuffer[4]= tempBuffer[4];
 8005672:	7b3a      	ldrb	r2, [r7, #12]
 8005674:	4b3d      	ldr	r3, [pc, #244]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 8005676:	711a      	strb	r2, [r3, #4]
      ResponseBuffer[5]= tempBuffer[6];
 8005678:	7bba      	ldrb	r2, [r7, #14]
 800567a:	4b3c      	ldr	r3, [pc, #240]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 800567c:	715a      	strb	r2, [r3, #5]
      ResponseBuffer[6]= tempBuffer[7];
 800567e:	7bfa      	ldrb	r2, [r7, #15]
 8005680:	4b3a      	ldr	r3, [pc, #232]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 8005682:	719a      	strb	r2, [r3, #6]
      ResponseBuffer[7]= tempBuffer[8];
 8005684:	7c3a      	ldrb	r2, [r7, #16]
 8005686:	4b39      	ldr	r3, [pc, #228]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 8005688:	71da      	strb	r2, [r3, #7]
      BuffLength = 8;      
 800568a:	4b3b      	ldr	r3, [pc, #236]	@ (8005778 <Appli_Vendor_DeviceInfo+0x208>)
 800568c:	2208      	movs	r2, #8
 800568e:	801a      	strh	r2, [r3, #0]
      break;
 8005690:	e067      	b.n	8005762 <Appli_Vendor_DeviceInfo+0x1f2>
    }
  case LIB_SUB_VER:
    {
      subLibVersion = BLEMesh_GetLibrarySubVersion();
 8005692:	f015 f8ab 	bl	801a7ec <BLEMesh_GetLibrarySubVersion>
 8005696:	6178      	str	r0, [r7, #20]
      while(*subLibVersion != '\0')
 8005698:	e045      	b.n	8005726 <Appli_Vendor_DeviceInfo+0x1b6>
      {
        tempBuffer[inc] = * subLibVersion;
 800569a:	7cfb      	ldrb	r3, [r7, #19]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	7812      	ldrb	r2, [r2, #0]
 80056a0:	3320      	adds	r3, #32
 80056a2:	443b      	add	r3, r7
 80056a4:	f803 2c18 	strb.w	r2, [r3, #-24]
        if((tempBuffer[inc] != 0x2E) && (tempBuffer[inc] != 0x52))
 80056a8:	7cfb      	ldrb	r3, [r7, #19]
 80056aa:	3320      	adds	r3, #32
 80056ac:	443b      	add	r3, r7
 80056ae:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80056b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80056b4:	d024      	beq.n	8005700 <Appli_Vendor_DeviceInfo+0x190>
 80056b6:	7cfb      	ldrb	r3, [r7, #19]
 80056b8:	3320      	adds	r3, #32
 80056ba:	443b      	add	r3, r7
 80056bc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80056c0:	2b52      	cmp	r3, #82	@ 0x52
 80056c2:	d01d      	beq.n	8005700 <Appli_Vendor_DeviceInfo+0x190>
        {               
          tempBuffer[inc] = BLEMesh_ModelsASCII_To_Char(tempBuffer[inc]);
 80056c4:	7cfb      	ldrb	r3, [r7, #19]
 80056c6:	3320      	adds	r3, #32
 80056c8:	443b      	add	r3, r7
 80056ca:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80056ce:	7cfc      	ldrb	r4, [r7, #19]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 fc4d 	bl	8005f70 <BLEMesh_ModelsASCII_To_Char>
 80056d6:	4603      	mov	r3, r0
 80056d8:	461a      	mov	r2, r3
 80056da:	f104 0320 	add.w	r3, r4, #32
 80056de:	443b      	add	r3, r7
 80056e0:	f803 2c18 	strb.w	r2, [r3, #-24]
          TRACE_M(TF_VENDOR,"Sub Lib version is %x\n\r" ,(unsigned char)tempBuffer[inc]);
 80056e4:	2100      	movs	r1, #0
 80056e6:	4822      	ldr	r0, [pc, #136]	@ (8005770 <Appli_Vendor_DeviceInfo+0x200>)
 80056e8:	f007 fcba 	bl	800d060 <TraceHeader>
 80056ec:	7cfb      	ldrb	r3, [r7, #19]
 80056ee:	3320      	adds	r3, #32
 80056f0:	443b      	add	r3, r7
 80056f2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80056f6:	4619      	mov	r1, r3
 80056f8:	4822      	ldr	r0, [pc, #136]	@ (8005784 <Appli_Vendor_DeviceInfo+0x214>)
 80056fa:	f021 f8cb 	bl	8026894 <iprintf>
 80056fe:	e00c      	b.n	800571a <Appli_Vendor_DeviceInfo+0x1aa>
        }
        else
        {
          TRACE_M(TF_VENDOR,"Sub Lib version is %c\n\r" ,(unsigned char)tempBuffer[inc]);
 8005700:	2100      	movs	r1, #0
 8005702:	481b      	ldr	r0, [pc, #108]	@ (8005770 <Appli_Vendor_DeviceInfo+0x200>)
 8005704:	f007 fcac 	bl	800d060 <TraceHeader>
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	3320      	adds	r3, #32
 800570c:	443b      	add	r3, r7
 800570e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005712:	4619      	mov	r1, r3
 8005714:	481c      	ldr	r0, [pc, #112]	@ (8005788 <Appli_Vendor_DeviceInfo+0x218>)
 8005716:	f021 f8bd 	bl	8026894 <iprintf>
        } 
        subLibVersion++;  
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	3301      	adds	r3, #1
 800571e:	617b      	str	r3, [r7, #20]
        inc++;
 8005720:	7cfb      	ldrb	r3, [r7, #19]
 8005722:	3301      	adds	r3, #1
 8005724:	74fb      	strb	r3, [r7, #19]
      while(*subLibVersion != '\0')
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1b5      	bne.n	800569a <Appli_Vendor_DeviceInfo+0x12a>
      } 
      ResponseBuffer[1]= tempBuffer[0];
 800572e:	7a3a      	ldrb	r2, [r7, #8]
 8005730:	4b0e      	ldr	r3, [pc, #56]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 8005732:	705a      	strb	r2, [r3, #1]
      ResponseBuffer[2]= tempBuffer[1];
 8005734:	7a7a      	ldrb	r2, [r7, #9]
 8005736:	4b0d      	ldr	r3, [pc, #52]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 8005738:	709a      	strb	r2, [r3, #2]
      ResponseBuffer[3]= tempBuffer[3];
 800573a:	7afa      	ldrb	r2, [r7, #11]
 800573c:	4b0b      	ldr	r3, [pc, #44]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 800573e:	70da      	strb	r2, [r3, #3]
      ResponseBuffer[4]= tempBuffer[5];
 8005740:	7b7a      	ldrb	r2, [r7, #13]
 8005742:	4b0a      	ldr	r3, [pc, #40]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 8005744:	711a      	strb	r2, [r3, #4]
      ResponseBuffer[5]= tempBuffer[7];
 8005746:	7bfa      	ldrb	r2, [r7, #15]
 8005748:	4b08      	ldr	r3, [pc, #32]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 800574a:	715a      	strb	r2, [r3, #5]
      ResponseBuffer[6]= tempBuffer[9];
 800574c:	7c7a      	ldrb	r2, [r7, #17]
 800574e:	4b07      	ldr	r3, [pc, #28]	@ (800576c <Appli_Vendor_DeviceInfo+0x1fc>)
 8005750:	719a      	strb	r2, [r3, #6]
      
      BuffLength = 7;
 8005752:	4b09      	ldr	r3, [pc, #36]	@ (8005778 <Appli_Vendor_DeviceInfo+0x208>)
 8005754:	2207      	movs	r2, #7
 8005756:	801a      	strh	r2, [r3, #0]
      
      break;
 8005758:	e003      	b.n	8005762 <Appli_Vendor_DeviceInfo+0x1f2>
      break;
    }
    
  default:
    {
      status = MOBLE_RESULT_FALSE;
 800575a:	2301      	movs	r3, #1
 800575c:	77fb      	strb	r3, [r7, #31]
      break;
 800575e:	e000      	b.n	8005762 <Appli_Vendor_DeviceInfo+0x1f2>
      break;
 8005760:	bf00      	nop
    }
    
  }
  
  return status;
 8005762:	7ffb      	ldrb	r3, [r7, #31]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3724      	adds	r7, #36	@ 0x24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd90      	pop	{r4, r7, pc}
 800576c:	200045bc 	.word	0x200045bc
 8005770:	0802df44 	.word	0x0802df44
 8005774:	0802a5fc 	.word	0x0802a5fc
 8005778:	200045f8 	.word	0x200045f8
 800577c:	0802a60c 	.word	0x0802a60c
 8005780:	0802a620 	.word	0x0802a620
 8005784:	0802a634 	.word	0x0802a634
 8005788:	0802a64c 	.word	0x0802a64c

0800578c <Appli_Vendor_Test>:
* @param  data: Pointer to the data received from peer_addr
* @param  length: Length of the data
* @retval MOBLE_RESULT status of result
*/          
MOBLE_RESULT Appli_Vendor_Test(MOBLEUINT8 const *data, MOBLEUINT32 length)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;  
 8005796:	2300      	movs	r3, #0
 8005798:	73fb      	strb	r3, [r7, #15]
  MOBLEUINT8 subCmd = data[0];
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	737b      	strb	r3, [r7, #13]
       /*First Byte is sending the Sub Command*/      
       ResponseBuffer[0]=subCmd;
 80057a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005850 <Appli_Vendor_Test+0xc4>)
 80057a2:	7b7b      	ldrb	r3, [r7, #13]
 80057a4:	7013      	strb	r3, [r2, #0]
       TRACE_M(TF_VENDOR,"#01-%02hx! \n\r",data[0]);
 80057a6:	2100      	movs	r1, #0
 80057a8:	482a      	ldr	r0, [pc, #168]	@ (8005854 <Appli_Vendor_Test+0xc8>)
 80057aa:	f007 fc59 	bl	800d060 <TraceHeader>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	4619      	mov	r1, r3
 80057b4:	4828      	ldr	r0, [pc, #160]	@ (8005858 <Appli_Vendor_Test+0xcc>)
 80057b6:	f021 f86d 	bl	8026894 <iprintf>
  switch(subCmd)
 80057ba:	7b7b      	ldrb	r3, [r7, #13]
 80057bc:	3b02      	subs	r3, #2
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d83c      	bhi.n	800583c <Appli_Vendor_Test+0xb0>
 80057c2:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <Appli_Vendor_Test+0x3c>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057dd 	.word	0x080057dd
 80057cc:	08005843 	.word	0x08005843
 80057d0:	08005843 	.word	0x08005843
 80057d4:	08005843 	.word	0x08005843
 80057d8:	0800580f 	.word	0x0800580f
  {             
  case APPLI_TEST_ECHO: 
    {
      if(length > sizeof(ResponseBuffer))
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b3c      	cmp	r3, #60	@ 0x3c
 80057e0:	d908      	bls.n	80057f4 <Appli_Vendor_Test+0x68>
      {
        length = sizeof(ResponseBuffer);
 80057e2:	233c      	movs	r3, #60	@ 0x3c
 80057e4:	603b      	str	r3, [r7, #0]
        TRACE_M(TF_VENDOR,"Length received greater than size of response buffer \r\n");
 80057e6:	2100      	movs	r1, #0
 80057e8:	481a      	ldr	r0, [pc, #104]	@ (8005854 <Appli_Vendor_Test+0xc8>)
 80057ea:	f007 fc39 	bl	800d060 <TraceHeader>
 80057ee:	481b      	ldr	r0, [pc, #108]	@ (800585c <Appli_Vendor_Test+0xd0>)
 80057f0:	f021 f8b8 	bl	8026964 <puts>
      }
      memcpy (&(ResponseBuffer[1]),&(data[1]),(length-1));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	1c59      	adds	r1, r3, #1
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	461a      	mov	r2, r3
 80057fe:	4818      	ldr	r0, [pc, #96]	@ (8005860 <Appli_Vendor_Test+0xd4>)
 8005800:	f021 fa97 	bl	8026d32 <memcpy>
      BuffLength = length;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	b29a      	uxth	r2, r3
 8005808:	4b16      	ldr	r3, [pc, #88]	@ (8005864 <Appli_Vendor_Test+0xd8>)
 800580a:	801a      	strh	r2, [r3, #0]
      break;
 800580c:	e01a      	b.n	8005844 <Appli_Vendor_Test+0xb8>
      /*Insert Test related Commands here*/
      break;
    }
  case APPLI_MODEL_PUBLISH_SELECT:
    {
       for (MOBLEUINT8 idx=0; idx<length; idx++)
 800580e:	2300      	movs	r3, #0
 8005810:	73bb      	strb	r3, [r7, #14]
 8005812:	e00e      	b.n	8005832 <Appli_Vendor_Test+0xa6>
       {
         TRACE_I(TF_VENDOR,"data[%d]= %d",idx,data[idx]);  
 8005814:	7bb9      	ldrb	r1, [r7, #14]
 8005816:	7bbb      	ldrb	r3, [r7, #14]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	4413      	add	r3, r2
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	4811      	ldr	r0, [pc, #68]	@ (8005868 <Appli_Vendor_Test+0xdc>)
 8005822:	f021 f837 	bl	8026894 <iprintf>
         TRACE_I(TF_VENDOR,"\n\r");
 8005826:	4811      	ldr	r0, [pc, #68]	@ (800586c <Appli_Vendor_Test+0xe0>)
 8005828:	f021 f834 	bl	8026894 <iprintf>
       for (MOBLEUINT8 idx=0; idx<length; idx++)
 800582c:	7bbb      	ldrb	r3, [r7, #14]
 800582e:	3301      	adds	r3, #1
 8005830:	73bb      	strb	r3, [r7, #14]
 8005832:	7bbb      	ldrb	r3, [r7, #14]
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d8ec      	bhi.n	8005814 <Appli_Vendor_Test+0x88>
       } 
       break;
 800583a:	e003      	b.n	8005844 <Appli_Vendor_Test+0xb8>
     }
             
  default:
    {
      status = MOBLE_RESULT_FALSE;
 800583c:	2301      	movs	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]
      break;
 8005840:	e000      	b.n	8005844 <Appli_Vendor_Test+0xb8>
      break;
 8005842:	bf00      	nop
    }
  }
       
  return status;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	200045bc 	.word	0x200045bc
 8005854:	0802df5c 	.word	0x0802df5c
 8005858:	0802a664 	.word	0x0802a664
 800585c:	0802a674 	.word	0x0802a674
 8005860:	200045bd 	.word	0x200045bd
 8005864:	200045f8 	.word	0x200045f8
 8005868:	0802a6ac 	.word	0x0802a6ac
 800586c:	0802a6bc 	.word	0x0802a6bc

08005870 <Appli_Vendor_LEDControl>:
* @param  elementIndex : selected element where '0' is first element       
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_Vendor_LEDControl( MOBLEUINT8 const *data, MOBLEUINT32 length,
                                       MOBLEUINT8 elementIndex , MOBLE_ADDRESS dst_peer)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	4611      	mov	r1, r2
 800587c:	461a      	mov	r2, r3
 800587e:	460b      	mov	r3, r1
 8005880:	71fb      	strb	r3, [r7, #7]
 8005882:	4613      	mov	r3, r2
 8005884:	80bb      	strh	r3, [r7, #4]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8005886:	2300      	movs	r3, #0
 8005888:	75fb      	strb	r3, [r7, #23]
  MOBLEUINT8 subCommand; 
  subCommand = data[0];
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	74fb      	strb	r3, [r7, #19]
  MOBLEUINT16 duty;
  MOBLEUINT16 intensityValue = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	82bb      	strh	r3, [r7, #20]
      
  TRACE_M(TF_VENDOR,"#03-%02hx!\n\r",data[0]);
 8005894:	2100      	movs	r1, #0
 8005896:	488a      	ldr	r0, [pc, #552]	@ (8005ac0 <Appli_Vendor_LEDControl+0x250>)
 8005898:	f007 fbe2 	bl	800d060 <TraceHeader>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	4619      	mov	r1, r3
 80058a2:	4888      	ldr	r0, [pc, #544]	@ (8005ac4 <Appli_Vendor_LEDControl+0x254>)
 80058a4:	f020 fff6 	bl	8026894 <iprintf>
  switch(subCommand)
 80058a8:	7cfb      	ldrb	r3, [r7, #19]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	2b05      	cmp	r3, #5
 80058ae:	f200 80e3 	bhi.w	8005a78 <Appli_Vendor_LEDControl+0x208>
 80058b2:	a201      	add	r2, pc, #4	@ (adr r2, 80058b8 <Appli_Vendor_LEDControl+0x48>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	08005983 	.word	0x08005983
 80058bc:	080059c9 	.word	0x080059c9
 80058c0:	08005905 	.word	0x08005905
 80058c4:	08005a79 	.word	0x08005a79
 80058c8:	080058d1 	.word	0x080058d1
 80058cc:	08005a0b 	.word	0x08005a0b
    */
  case APPLI_CMD_LED_BULB:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_Control callback received for elementIndex %d \r\n", elementIndex);
 80058d0:	2100      	movs	r1, #0
 80058d2:	487b      	ldr	r0, [pc, #492]	@ (8005ac0 <Appli_Vendor_LEDControl+0x250>)
 80058d4:	f007 fbc4 	bl	800d060 <TraceHeader>
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	4619      	mov	r1, r3
 80058dc:	487a      	ldr	r0, [pc, #488]	@ (8005ac8 <Appli_Vendor_LEDControl+0x258>)
 80058de:	f020 ffd9 	bl	8026894 <iprintf>
      Appli_LedState = *(data+1); /* Toggle the state of the Blue LED */
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3301      	adds	r3, #1
 80058e6:	781a      	ldrb	r2, [r3, #0]
 80058e8:	4b78      	ldr	r3, [pc, #480]	@ (8005acc <Appli_Vendor_LEDControl+0x25c>)
 80058ea:	701a      	strb	r2, [r3, #0]
      if( Appli_LedState == 1)
 80058ec:	4b77      	ldr	r3, [pc, #476]	@ (8005acc <Appli_Vendor_LEDControl+0x25c>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d103      	bne.n	80058fc <Appli_Vendor_LEDControl+0x8c>
      {
        BSP_LED_On(LED_BLUE);
 80058f4:	2000      	movs	r0, #0
 80058f6:	f000 ff73 	bl	80067e0 <BSP_LED_On>
      }
      else
      {
        BSP_LED_Off(LED_BLUE);
      }  
      break;
 80058fa:	e0c0      	b.n	8005a7e <Appli_Vendor_LEDControl+0x20e>
        BSP_LED_Off(LED_BLUE);
 80058fc:	2000      	movs	r0, #0
 80058fe:	f000 ff89 	bl	8006814 <BSP_LED_Off>
      break;
 8005902:	e0bc      	b.n	8005a7e <Appli_Vendor_LEDControl+0x20e>
    /* Toggle Command */  
  case APPLI_CMD_TOGGLE:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_Toggle callback received for elementIndex %d \r\n", elementIndex);
 8005904:	2100      	movs	r1, #0
 8005906:	486e      	ldr	r0, [pc, #440]	@ (8005ac0 <Appli_Vendor_LEDControl+0x250>)
 8005908:	f007 fbaa 	bl	800d060 <TraceHeader>
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	4619      	mov	r1, r3
 8005910:	486f      	ldr	r0, [pc, #444]	@ (8005ad0 <Appli_Vendor_LEDControl+0x260>)
 8005912:	f020 ffbf 	bl	8026894 <iprintf>
      if(Appli_LedState == 1)
 8005916:	4b6d      	ldr	r3, [pc, #436]	@ (8005acc <Appli_Vendor_LEDControl+0x25c>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d117      	bne.n	800594e <Appli_Vendor_LEDControl+0xde>
      {
        Appli_LightPwmValue.IntensityValue = LED_OFF_VALUE;
 800591e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ad4 <Appli_Vendor_LEDControl+0x264>)
 8005920:	2200      	movs	r2, #0
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	2200      	movs	r2, #0
 800592a:	705a      	strb	r2, [r3, #1]
                                    
#ifndef CUSTOM_BOARD_PWM_SELECTION            
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
 800592c:	4b69      	ldr	r3, [pc, #420]	@ (8005ad4 <Appli_Vendor_LEDControl+0x264>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	4611      	mov	r1, r2
 8005932:	6858      	ldr	r0, [r3, #4]
 8005934:	4602      	mov	r2, r0
 8005936:	6898      	ldr	r0, [r3, #8]
 8005938:	4603      	mov	r3, r0
 800593a:	2004      	movs	r0, #4
 800593c:	f7ff f908 	bl	8004b50 <Light_UpdateLedValue>
#else
        Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
#endif            
        Appli_LedState = 0;
 8005940:	4b62      	ldr	r3, [pc, #392]	@ (8005acc <Appli_Vendor_LEDControl+0x25c>)
 8005942:	2200      	movs	r2, #0
 8005944:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED_BLUE);
 8005946:	2000      	movs	r0, #0
 8005948:	f000 ff64 	bl	8006814 <BSP_LED_Off>
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
        Appli_LedState = 1;
        BSP_LED_On(LED_BLUE);
      }
              
      break;
 800594c:	e097      	b.n	8005a7e <Appli_Vendor_LEDControl+0x20e>
        Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
 800594e:	4b61      	ldr	r3, [pc, #388]	@ (8005ad4 <Appli_Vendor_LEDControl+0x264>)
 8005950:	2200      	movs	r2, #0
 8005952:	f062 0209 	orn	r2, r2, #9
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	2200      	movs	r2, #0
 800595a:	f042 027c 	orr.w	r2, r2, #124	@ 0x7c
 800595e:	705a      	strb	r2, [r3, #1]
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 8005960:	4b5c      	ldr	r3, [pc, #368]	@ (8005ad4 <Appli_Vendor_LEDControl+0x264>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	4611      	mov	r1, r2
 8005966:	6858      	ldr	r0, [r3, #4]
 8005968:	4602      	mov	r2, r0
 800596a:	6898      	ldr	r0, [r3, #8]
 800596c:	4603      	mov	r3, r0
 800596e:	2004      	movs	r0, #4
 8005970:	f7ff f8ee 	bl	8004b50 <Light_UpdateLedValue>
        Appli_LedState = 1;
 8005974:	4b55      	ldr	r3, [pc, #340]	@ (8005acc <Appli_Vendor_LEDControl+0x25c>)
 8005976:	2201      	movs	r2, #1
 8005978:	701a      	strb	r2, [r3, #0]
        BSP_LED_On(LED_BLUE);
 800597a:	2000      	movs	r0, #0
 800597c:	f000 ff30 	bl	80067e0 <BSP_LED_On>
      break;
 8005980:	e07d      	b.n	8005a7e <Appli_Vendor_LEDControl+0x20e>
    /* On Command */  
  case APPLI_CMD_ON:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_ON callback received for elementIndex %d \r\n", elementIndex);     
 8005982:	2100      	movs	r1, #0
 8005984:	484e      	ldr	r0, [pc, #312]	@ (8005ac0 <Appli_Vendor_LEDControl+0x250>)
 8005986:	f007 fb6b 	bl	800d060 <TraceHeader>
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	4619      	mov	r1, r3
 800598e:	4852      	ldr	r0, [pc, #328]	@ (8005ad8 <Appli_Vendor_LEDControl+0x268>)
 8005990:	f020 ff80 	bl	8026894 <iprintf>
      Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
 8005994:	4b4f      	ldr	r3, [pc, #316]	@ (8005ad4 <Appli_Vendor_LEDControl+0x264>)
 8005996:	2200      	movs	r2, #0
 8005998:	f062 0209 	orn	r2, r2, #9
 800599c:	701a      	strb	r2, [r3, #0]
 800599e:	2200      	movs	r2, #0
 80059a0:	f042 027c 	orr.w	r2, r2, #124	@ 0x7c
 80059a4:	705a      	strb	r2, [r3, #1]
      Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
 80059a6:	4b4b      	ldr	r3, [pc, #300]	@ (8005ad4 <Appli_Vendor_LEDControl+0x264>)
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	4611      	mov	r1, r2
 80059ac:	6858      	ldr	r0, [r3, #4]
 80059ae:	4602      	mov	r2, r0
 80059b0:	6898      	ldr	r0, [r3, #8]
 80059b2:	4603      	mov	r3, r0
 80059b4:	2004      	movs	r0, #4
 80059b6:	f7ff f8cb 	bl	8004b50 <Light_UpdateLedValue>
      BSP_LED_On(LED_BLUE);
 80059ba:	2000      	movs	r0, #0
 80059bc:	f000 ff10 	bl	80067e0 <BSP_LED_On>
      Appli_LedState = 1;
 80059c0:	4b42      	ldr	r3, [pc, #264]	@ (8005acc <Appli_Vendor_LEDControl+0x25c>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
          
      break;
 80059c6:	e05a      	b.n	8005a7e <Appli_Vendor_LEDControl+0x20e>
    /* Off Command */  
  case APPLI_CMD_OFF:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_OFF callback received for elementIndex %d \r\n", elementIndex);                   
 80059c8:	2100      	movs	r1, #0
 80059ca:	483d      	ldr	r0, [pc, #244]	@ (8005ac0 <Appli_Vendor_LEDControl+0x250>)
 80059cc:	f007 fb48 	bl	800d060 <TraceHeader>
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	4619      	mov	r1, r3
 80059d4:	4841      	ldr	r0, [pc, #260]	@ (8005adc <Appli_Vendor_LEDControl+0x26c>)
 80059d6:	f020 ff5d 	bl	8026894 <iprintf>
      Appli_LightPwmValue.IntensityValue = LED_OFF_VALUE;
 80059da:	4b3e      	ldr	r3, [pc, #248]	@ (8005ad4 <Appli_Vendor_LEDControl+0x264>)
 80059dc:	2200      	movs	r2, #0
 80059de:	f042 0201 	orr.w	r2, r2, #1
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	2200      	movs	r2, #0
 80059e6:	705a      	strb	r2, [r3, #1]
            
#ifndef CUSTOM_BOARD_PWM_SELECTION            
      Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
 80059e8:	4b3a      	ldr	r3, [pc, #232]	@ (8005ad4 <Appli_Vendor_LEDControl+0x264>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4611      	mov	r1, r2
 80059ee:	6858      	ldr	r0, [r3, #4]
 80059f0:	4602      	mov	r2, r0
 80059f2:	6898      	ldr	r0, [r3, #8]
 80059f4:	4603      	mov	r3, r0
 80059f6:	2004      	movs	r0, #4
 80059f8:	f7ff f8aa 	bl	8004b50 <Light_UpdateLedValue>
#else
      Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
#endif            
      Appli_LedState = 0;
 80059fc:	4b33      	ldr	r3, [pc, #204]	@ (8005acc <Appli_Vendor_LEDControl+0x25c>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
      BSP_LED_Off(LED_BLUE);
 8005a02:	2000      	movs	r0, #0
 8005a04:	f000 ff06 	bl	8006814 <BSP_LED_Off>
          
      break;
 8005a08:	e039      	b.n	8005a7e <Appli_Vendor_LEDControl+0x20e>
        /* intensity command */
    case APPLI_CMD_LED_INTENSITY:
      {
        /*User Need to write the commands as per the element selected*/
          
        TRACE_M(TF_VENDOR,"Appli_LED_Intensity callback received for elementIndex %d \r\n", elementIndex);    
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	482c      	ldr	r0, [pc, #176]	@ (8005ac0 <Appli_Vendor_LEDControl+0x250>)
 8005a0e:	f007 fb27 	bl	800d060 <TraceHeader>
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	4619      	mov	r1, r3
 8005a16:	4832      	ldr	r0, [pc, #200]	@ (8005ae0 <Appli_Vendor_LEDControl+0x270>)
 8005a18:	f020 ff3c 	bl	8026894 <iprintf>
        intensityValue = data[2] << 8;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3302      	adds	r3, #2
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	82bb      	strh	r3, [r7, #20]
        intensityValue |= data[1];
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	8abb      	ldrh	r3, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	82bb      	strh	r3, [r7, #20]
                    
        duty = PwmValueMapping(intensityValue , 0x7FFF ,0);                         
 8005a34:	8abb      	ldrh	r3, [r7, #20]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff fd2d 	bl	800549c <PwmValueMapping>
 8005a42:	4603      	mov	r3, r0
 8005a44:	823b      	strh	r3, [r7, #16]
        Appli_LightPwmValue.IntensityValue = duty;
 8005a46:	4b23      	ldr	r3, [pc, #140]	@ (8005ad4 <Appli_Vendor_LEDControl+0x264>)
 8005a48:	8a3a      	ldrh	r2, [r7, #16]
 8005a4a:	801a      	strh	r2, [r3, #0]
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);             
 8005a4c:	4b21      	ldr	r3, [pc, #132]	@ (8005ad4 <Appli_Vendor_LEDControl+0x264>)
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	4611      	mov	r1, r2
 8005a52:	6858      	ldr	r0, [r3, #4]
 8005a54:	4602      	mov	r2, r0
 8005a56:	6898      	ldr	r0, [r3, #8]
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2004      	movs	r0, #4
 8005a5c:	f7ff f878 	bl	8004b50 <Light_UpdateLedValue>
        if(duty > 16000)
 8005a60:	8a3b      	ldrh	r3, [r7, #16]
 8005a62:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8005a66:	d903      	bls.n	8005a70 <Appli_Vendor_LEDControl+0x200>
        {
          BSP_LED_On(LED_BLUE);
 8005a68:	2000      	movs	r0, #0
 8005a6a:	f000 feb9 	bl	80067e0 <BSP_LED_On>
        }
        else
        {
          BSP_LED_Off(LED_BLUE);
        }
        break;
 8005a6e:	e006      	b.n	8005a7e <Appli_Vendor_LEDControl+0x20e>
          BSP_LED_Off(LED_BLUE);
 8005a70:	2000      	movs	r0, #0
 8005a72:	f000 fecf 	bl	8006814 <BSP_LED_Off>
        break;
 8005a76:	e002      	b.n	8005a7e <Appli_Vendor_LEDControl+0x20e>
      }
    /* Default case - Not valid command */
  default:
    {
      status = MOBLE_RESULT_FALSE;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a7c:	bf00      	nop
    }
  }
  /*Buffer will be sent for Reliable Response*/
  /*First Byte is Sub Command and 2nd Byte is LED Status*/
  ResponseBuffer[0] = subCommand;
 8005a7e:	4a19      	ldr	r2, [pc, #100]	@ (8005ae4 <Appli_Vendor_LEDControl+0x274>)
 8005a80:	7cfb      	ldrb	r3, [r7, #19]
 8005a82:	7013      	strb	r3, [r2, #0]
  if(subCommand == APPLI_CMD_LED_INTENSITY)
 8005a84:	7cfb      	ldrb	r3, [r7, #19]
 8005a86:	2b06      	cmp	r3, #6
 8005a88:	d10d      	bne.n	8005aa6 <Appli_Vendor_LEDControl+0x236>
  {
    ResponseBuffer[1] = intensityValue >> 8 ;
 8005a8a:	8abb      	ldrh	r3, [r7, #20]
 8005a8c:	0a1b      	lsrs	r3, r3, #8
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	4b14      	ldr	r3, [pc, #80]	@ (8005ae4 <Appli_Vendor_LEDControl+0x274>)
 8005a94:	705a      	strb	r2, [r3, #1]
    ResponseBuffer[2] = intensityValue ;
 8005a96:	8abb      	ldrh	r3, [r7, #20]
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ae4 <Appli_Vendor_LEDControl+0x274>)
 8005a9c:	709a      	strb	r2, [r3, #2]
    BuffLength = 3;
 8005a9e:	4b12      	ldr	r3, [pc, #72]	@ (8005ae8 <Appli_Vendor_LEDControl+0x278>)
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	e006      	b.n	8005ab4 <Appli_Vendor_LEDControl+0x244>
  }
  else
  {
    ResponseBuffer[1] = Appli_LedState ;
 8005aa6:	4b09      	ldr	r3, [pc, #36]	@ (8005acc <Appli_Vendor_LEDControl+0x25c>)
 8005aa8:	781a      	ldrb	r2, [r3, #0]
 8005aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8005ae4 <Appli_Vendor_LEDControl+0x274>)
 8005aac:	705a      	strb	r2, [r3, #1]
    BuffLength = 2; 
 8005aae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ae8 <Appli_Vendor_LEDControl+0x278>)
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	801a      	strh	r2, [r3, #0]
  }
      
  return status;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	0802df70 	.word	0x0802df70
 8005ac4:	0802a6c0 	.word	0x0802a6c0
 8005ac8:	0802a6d0 	.word	0x0802a6d0
 8005acc:	20004594 	.word	0x20004594
 8005ad0:	0802a70c 	.word	0x0802a70c
 8005ad4:	20004588 	.word	0x20004588
 8005ad8:	0802a748 	.word	0x0802a748
 8005adc:	0802a780 	.word	0x0802a780
 8005ae0:	0802a7b8 	.word	0x0802a7b8
 8005ae4:	200045bc 	.word	0x200045bc
 8005ae8:	200045f8 	.word	0x200045f8

08005aec <Appli_Vendor_Data_write>:
* @param  data: Pointer to the data received from peer_addr
* @param  length: Length of the data
* @retval MOBLE_RESULT status of result
*/          
MOBLE_RESULT Appli_Vendor_Data_write(MOBLEUINT8 const *data, MOBLEUINT32 length)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;  
 8005af6:	2300      	movs	r3, #0
 8005af8:	73fb      	strb	r3, [r7, #15]
  MOBLEUINT8 subCmd = data[0];
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	72fb      	strb	r3, [r7, #11]
  /*First Byte is sending the Sub Command*/      
  ResponseBuffer[0]=subCmd;
 8005b00:	4a1b      	ldr	r2, [pc, #108]	@ (8005b70 <Appli_Vendor_Data_write+0x84>)
 8005b02:	7afb      	ldrb	r3, [r7, #11]
 8005b04:	7013      	strb	r3, [r2, #0]
       
  TRACE_M(TF_VENDOR, "#0E-%02hx %02lx! \n\r",data[0], length);
 8005b06:	2100      	movs	r1, #0
 8005b08:	481a      	ldr	r0, [pc, #104]	@ (8005b74 <Appli_Vendor_Data_write+0x88>)
 8005b0a:	f007 faa9 	bl	800d060 <TraceHeader>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	4619      	mov	r1, r3
 8005b16:	4818      	ldr	r0, [pc, #96]	@ (8005b78 <Appli_Vendor_Data_write+0x8c>)
 8005b18:	f020 febc 	bl	8026894 <iprintf>
  for(MOBLEUINT16 i=0; i<length; i++)
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	81bb      	strh	r3, [r7, #12]
 8005b20:	e00a      	b.n	8005b38 <Appli_Vendor_Data_write+0x4c>
  {
    TRACE_I(TF_VENDOR,"%02hx ",data[i]);
 8005b22:	89bb      	ldrh	r3, [r7, #12]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	4413      	add	r3, r2
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	4813      	ldr	r0, [pc, #76]	@ (8005b7c <Appli_Vendor_Data_write+0x90>)
 8005b2e:	f020 feb1 	bl	8026894 <iprintf>
  for(MOBLEUINT16 i=0; i<length; i++)
 8005b32:	89bb      	ldrh	r3, [r7, #12]
 8005b34:	3301      	adds	r3, #1
 8005b36:	81bb      	strh	r3, [r7, #12]
 8005b38:	89bb      	ldrh	r3, [r7, #12]
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d8f0      	bhi.n	8005b22 <Appli_Vendor_Data_write+0x36>
  }
  TRACE_I(TF_VENDOR,"\n\r");
 8005b40:	480f      	ldr	r0, [pc, #60]	@ (8005b80 <Appli_Vendor_Data_write+0x94>)
 8005b42:	f020 fea7 	bl	8026894 <iprintf>
  switch(subCmd)
 8005b46:	7afb      	ldrb	r3, [r7, #11]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d109      	bne.n	8005b60 <Appli_Vendor_Data_write+0x74>
  {     
    case APPLI_STRING_WRITE:
    {            
      memcpy(&ResponseBuffer,data,length);
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	4807      	ldr	r0, [pc, #28]	@ (8005b70 <Appli_Vendor_Data_write+0x84>)
 8005b52:	f021 f8ee 	bl	8026d32 <memcpy>
      BuffLength = length;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b84 <Appli_Vendor_Data_write+0x98>)
 8005b5c:	801a      	strh	r2, [r3, #0]
      break;
 8005b5e:	e002      	b.n	8005b66 <Appli_Vendor_Data_write+0x7a>
    }
    default:
    {
      status = MOBLE_RESULT_FALSE;
 8005b60:	2301      	movs	r3, #1
 8005b62:	73fb      	strb	r3, [r7, #15]
      break;
 8005b64:	bf00      	nop
    }
  }
  return status;        
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	200045bc 	.word	0x200045bc
 8005b74:	0802df88 	.word	0x0802df88
 8005b78:	0802a7f8 	.word	0x0802a7f8
 8005b7c:	0802a80c 	.word	0x0802a80c
 8005b80:	0802a6bc 	.word	0x0802a6bc
 8005b84:	200045f8 	.word	0x200045f8

08005b88 <Appli_GetTestValue>:
*          when Vensor application test command received then status message is to be provided
* @param  responseValue: Pointer to the status message
* @retval void
*/ 
void Appli_GetTestValue (MOBLEUINT8 *responseValue)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  *responseValue = TestHitCounter;
 8005b90:	4b11      	ldr	r3, [pc, #68]	@ (8005bd8 <Appli_GetTestValue+0x50>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	b2da      	uxtb	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	701a      	strb	r2, [r3, #0]
  *(responseValue+1)  = TestHitCounter >> 8;
 8005b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd8 <Appli_GetTestValue+0x50>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	0a1a      	lsrs	r2, r3, #8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	b2d2      	uxtb	r2, r2
 8005ba6:	701a      	strb	r2, [r3, #0]
  *(responseValue+2)  = TestHitCounter >> 16;
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd8 <Appli_GetTestValue+0x50>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	0c1a      	lsrs	r2, r3, #16
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3302      	adds	r3, #2
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]
  *(responseValue+3)  = TestHitCounter >> 24;
 8005bb6:	4b08      	ldr	r3, [pc, #32]	@ (8005bd8 <Appli_GetTestValue+0x50>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	0e1a      	lsrs	r2, r3, #24
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3303      	adds	r3, #3
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]
  TestHitCounter = 0;
 8005bc4:	4b04      	ldr	r3, [pc, #16]	@ (8005bd8 <Appli_GetTestValue+0x50>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	601a      	str	r2, [r3, #0]
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	20004644 	.word	0x20004644

08005bdc <Appli_Vendor_SetBigDataPacket>:
* @param  dst_peer : Destination address
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_Vendor_SetBigDataPacket(MOBLEUINT8 *data, MOBLEUINT32 length,
                                       MOBLEUINT8 elementIndex , MOBLE_ADDRESS dst_peer)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	4611      	mov	r1, r2
 8005be8:	461a      	mov	r2, r3
 8005bea:	460b      	mov	r3, r1
 8005bec:	71fb      	strb	r3, [r7, #7]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	80bb      	strh	r3, [r7, #4]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]
  
  if (length > VENDOR_DATA_BUFFER_SIZE)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b3c      	cmp	r3, #60	@ 0x3c
 8005bfa:	d901      	bls.n	8005c00 <Appli_Vendor_SetBigDataPacket+0x24>
  {
    status = MOBLE_RESULT_INVALIDARG;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	75fb      	strb	r3, [r7, #23]
  }
  memmove(Appli_VendorBigData.data, data, length);
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	68f9      	ldr	r1, [r7, #12]
 8005c04:	4808      	ldr	r0, [pc, #32]	@ (8005c28 <Appli_Vendor_SetBigDataPacket+0x4c>)
 8005c06:	f020 ffc9 	bl	8026b9c <memmove>
  Appli_VendorBigData.dst = dst_peer;
 8005c0a:	4a08      	ldr	r2, [pc, #32]	@ (8005c2c <Appli_Vendor_SetBigDataPacket+0x50>)
 8005c0c:	88bb      	ldrh	r3, [r7, #4]
 8005c0e:	8013      	strh	r3, [r2, #0]
  Appli_VendorBigData.length = length;
 8005c10:	4a06      	ldr	r2, [pc, #24]	@ (8005c2c <Appli_Vendor_SetBigDataPacket+0x50>)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6413      	str	r3, [r2, #64]	@ 0x40
  Appli_VendorBigData.elementIndex = elementIndex;
 8005c16:	4a05      	ldr	r2, [pc, #20]	@ (8005c2c <Appli_Vendor_SetBigDataPacket+0x50>)
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	f882 3044 	strb.w	r3, [r2, #68]	@ 0x44
  return status;
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	200045fe 	.word	0x200045fe
 8005c2c:	200045fc 	.word	0x200045fc

08005c30 <Appli_Vendor_SendBigDataPacket>:
* @brief  Send Vendor big data packet
* @param  void      
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_Vendor_SendBigDataPacket(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af04      	add	r7, sp, #16
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8005c36:	2300      	movs	r3, #0
 8005c38:	71fb      	strb	r3, [r7, #7]
  
  if(BLEMesh_TrsptIsBusyState())
 8005c3a:	f014 fc23 	bl	801a484 <BLEMesh_TrsptIsBusyState>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <Appli_Vendor_SendBigDataPacket+0x20>
  {
    BSP_LED_On(LED_BLUE);
 8005c44:	2000      	movs	r0, #0
 8005c46:	f000 fdcb 	bl	80067e0 <BSP_LED_On>
    status = MOBLE_RESULT_FALSE;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	71fb      	strb	r3, [r7, #7]
 8005c4e:	e014      	b.n	8005c7a <Appli_Vendor_SendBigDataPacket+0x4a>
  }
  else
  {
    BSP_LED_Off(LED_BLUE);
 8005c50:	2000      	movs	r0, #0
 8005c52:	f000 fddf 	bl	8006814 <BSP_LED_Off>
    status = BLEMesh_SetRemoteData(Appli_VendorBigData.dst,
 8005c56:	4b0b      	ldr	r3, [pc, #44]	@ (8005c84 <Appli_Vendor_SendBigDataPacket+0x54>)
 8005c58:	8818      	ldrh	r0, [r3, #0]
 8005c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c84 <Appli_Vendor_SendBigDataPacket+0x54>)
 8005c5c:	f893 1044 	ldrb.w	r1, [r3, #68]	@ 0x44
 8005c60:	4b08      	ldr	r3, [pc, #32]	@ (8005c84 <Appli_Vendor_SendBigDataPacket+0x54>)
 8005c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c64:	2201      	movs	r2, #1
 8005c66:	9202      	str	r2, [sp, #8]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	9201      	str	r2, [sp, #4]
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	4b06      	ldr	r3, [pc, #24]	@ (8005c88 <Appli_Vendor_SendBigDataPacket+0x58>)
 8005c70:	220e      	movs	r2, #14
 8005c72:	f01f fd63 	bl	802573c <BLEMesh_SetRemoteData>
 8005c76:	4603      	mov	r3, r0
 8005c78:	71fb      	strb	r3, [r7, #7]
                                       Appli_VendorBigData.length,
                                       MOBLE_FALSE, 
                                       MOBLE_TRUE);

  }
  return status;
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	200045fc 	.word	0x200045fc
 8005c88:	200045fe 	.word	0x200045fe

08005c8c <GetApplicationVendorModels>:

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

void GetApplicationVendorModels(const MODEL_Vendor_cb_t** pModelsTable, MOBLEUINT32* VendorModelscount)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
#ifdef ENABLE_VENDOR_MODEL_SERVER
  *pModelsTable = Model_Vendor_cb       ;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a05      	ldr	r2, [pc, #20]	@ (8005cb0 <GetApplicationVendorModels+0x24>)
 8005c9a:	601a      	str	r2, [r3, #0]
  *VendorModelscount = MODEL_VENDOR_COUNT;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
  
   TRACE_M(TF_VENDOR_M, "GetApplicationVendorModels \r\n");
#endif
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	0802e00c 	.word	0x0802e00c

08005cb4 <BLEMesh_ModelsInit>:
* @brief  Initialization Commands for Models
* @param  void
* @retval void
*/    
void BLEMesh_ModelsInit(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b092      	sub	sp, #72	@ 0x48
 8005cb8:	af00      	add	r7, sp, #0
  /* Inintialise the light model range states with default values */
  Light_ModelRangeInit();
#endif
  
  /* Callbacks used by BlueNRG-Mesh Models */
  BLEMesh_SetSIGModelsCbMap(Model_SIG_cb, MODEL_SIG_COUNT);
 8005cba:	2101      	movs	r1, #1
 8005cbc:	480c      	ldr	r0, [pc, #48]	@ (8005cf0 <BLEMesh_ModelsInit+0x3c>)
 8005cbe:	f01f fc4d 	bl	802555c <BLEMesh_SetSIGModelsCbMap>
#ifdef ENABLE_LIGHT_MODEL_SERVER_LC
  Appli_Light_LCs_Init();
#endif
  
  /* Load generic model states from nvm */
  AppliNvm_LoadModelState(modelStateLoadBuff, &modelStateLoad_Size);
 8005cc2:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 8005cc6:	1d3b      	adds	r3, r7, #4
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7ff fc39 	bl	8005542 <AppliNvm_LoadModelState>
  if (modelStateLoad_Size != 0)
 8005cd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d007      	beq.n	8005ce8 <BLEMesh_ModelsInit+0x34>
  {
    /* update states of generic model */
    Model_RestoreStates(modelStateLoadBuff, modelStateLoad_Size);
 8005cd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	1d3b      	adds	r3, r7, #4
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f007 f9de 	bl	800d0a4 <Model_RestoreStates>
  }
}
 8005ce8:	bf00      	nop
 8005cea:	3748      	adds	r7, #72	@ 0x48
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	0802dff4 	.word	0x0802dff4

08005cf4 <BLEMesh_ModelsProcess>:
* @brief  Process Commands for Models
* @param  void
* @retval void
*/    
void BLEMesh_ModelsProcess(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
#ifdef ENABLE_GENERIC_MODEL_SERVER  
  Generic_Process();
 8005cf8:	f008 fe92 	bl	800ea20 <Generic_Process>
#ifdef ENABLE_LIGHT_MODEL_SERVER  
  Lighting_Process();
#endif

#ifdef ENABLE_VENDOR_MODEL_SERVER  
  Vendor_Process();
 8005cfc:	f00b fbf0 	bl	80114e0 <Vendor_Process>
#endif
  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LC   
  Light_LC_Process();
#endif
}
 8005d00:	bf00      	nop
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <BLEMesh_ModelsCommand>:
* @brief  Publish Command for Models
* @param  void
* @retval void
*/    
void BLEMesh_ModelsCommand(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  
      
/* if CLIENT and SERVER => Publish is already done in CLIENT */
#ifdef GENERIC_SERVER_MODEL_PUBLISH 
#ifndef GENERIC_CLIENT_MODEL_PUBLISH  
  Generic_Publish(BLEMesh_GetAddress());
 8005d08:	f014 fb14 	bl	801a334 <BLEMesh_GetAddress>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f009 f81e 	bl	800ed50 <Generic_Publish>
#endif
#endif
}
 8005d14:	bf00      	nop
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <BLEMesh_ModelsDelayPacket>:
*/ 
void BLEMesh_ModelsDelayPacket(MODEL_MessageHeader_t *pmsgParams,
                               MOBLEUINT8 command, 
                               MOBLEUINT8 const * data, 
                               MOBLEUINT32 length)
{
 8005d18:	b590      	push	{r4, r7, lr}
 8005d1a:	b089      	sub	sp, #36	@ 0x24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	460b      	mov	r3, r1
 8005d26:	72fb      	strb	r3, [r7, #11]
  MOBLEUINT8 random_time[8];
  
  if (Appli_PendingPackets.packet_count == 0)
 8005d28:	4b55      	ldr	r3, [pc, #340]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d136      	bne.n	8005d9e <BLEMesh_ModelsDelayPacket+0x86>
  {
    Appli_PendingPackets.packet_count = 1;
 8005d30:	4b53      	ldr	r3, [pc, #332]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	701a      	strb	r2, [r3, #0]
    hci_le_rand(random_time);
 8005d36:	f107 0314 	add.w	r3, r7, #20
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f00c ff51 	bl	8012be2 <hci_le_rand>
    Appli_PendingPackets.send_time = Clock_Time() + 
 8005d40:	f000 fef0 	bl	8006b24 <HAL_GetTick>
 8005d44:	4601      	mov	r1, r0
      DEFAULT_DELAY_PACKET_FROM + 
        (random_time[0] + random_time[1]*256)\
 8005d46:	7d3b      	ldrb	r3, [r7, #20]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	7d7b      	ldrb	r3, [r7, #21]
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	4413      	add	r3, r2
 8005d50:	461a      	mov	r2, r3
          %DEFAULT_DELAY_PACKET_RANDOM_TIME;    
 8005d52:	4b4c      	ldr	r3, [pc, #304]	@ (8005e84 <BLEMesh_ModelsDelayPacket+0x16c>)
 8005d54:	fba3 0302 	umull	r0, r3, r3, r2
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005d5e:	fb00 f303 	mul.w	r3, r0, r3
 8005d62:	1ad3      	subs	r3, r2, r3
      DEFAULT_DELAY_PACKET_FROM + 
 8005d64:	440b      	add	r3, r1
 8005d66:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
    Appli_PendingPackets.send_time = Clock_Time() + 
 8005d6a:	4a45      	ldr	r2, [pc, #276]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005d6c:	f8c2 3001 	str.w	r3, [r2, #1]
    Appli_PendingPackets.head = Appli_PendingPackets.packet;
 8005d70:	4b43      	ldr	r3, [pc, #268]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005d72:	4a45      	ldr	r2, [pc, #276]	@ (8005e88 <BLEMesh_ModelsDelayPacket+0x170>)
 8005d74:	f8c3 2005 	str.w	r2, [r3, #5]
    Appli_PendingPackets.head_index = 0;
 8005d78:	4b41      	ldr	r3, [pc, #260]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	725a      	strb	r2, [r3, #9]
    TRACE_M(TF_MISC, "Randomized time: %ld\n\r", Appli_PendingPackets.send_time - Clock_Time());
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4842      	ldr	r0, [pc, #264]	@ (8005e8c <BLEMesh_ModelsDelayPacket+0x174>)
 8005d82:	f007 f96d 	bl	800d060 <TraceHeader>
 8005d86:	4b3e      	ldr	r3, [pc, #248]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005d88:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8005d8c:	f000 feca 	bl	8006b24 <HAL_GetTick>
 8005d90:	4603      	mov	r3, r0
 8005d92:	1ae3      	subs	r3, r4, r3
 8005d94:	4619      	mov	r1, r3
 8005d96:	483e      	ldr	r0, [pc, #248]	@ (8005e90 <BLEMesh_ModelsDelayPacket+0x178>)
 8005d98:	f020 fd7c 	bl	8026894 <iprintf>
 8005d9c:	e02d      	b.n	8005dfa <BLEMesh_ModelsDelayPacket+0xe2>
  }
  else 
  {
    Appli_PendingPackets.packet_count += 1;
 8005d9e:	4b38      	ldr	r3, [pc, #224]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	3301      	adds	r3, #1
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	4b36      	ldr	r3, [pc, #216]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005da8:	701a      	strb	r2, [r3, #0]
    Appli_PendingPackets.packet_count = (Appli_PendingPackets.packet_count)%\
 8005daa:	4b35      	ldr	r3, [pc, #212]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	4b39      	ldr	r3, [pc, #228]	@ (8005e94 <BLEMesh_ModelsDelayPacket+0x17c>)
 8005db0:	fba3 1302 	umull	r1, r3, r3, r2
 8005db4:	0859      	lsrs	r1, r3, #1
 8005db6:	460b      	mov	r3, r1
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	440b      	add	r3, r1
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	4b2f      	ldr	r3, [pc, #188]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005dc2:	701a      	strb	r2, [r3, #0]
      (MAX_PENDING_PACKETS_QUE_SIZE+1);
    
    if (Appli_PendingPackets.head != (Appli_PendingPackets.packet + \
 8005dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005dc6:	f8d3 3005 	ldr.w	r3, [r3, #5]
      MAX_PENDING_PACKETS_QUE_SIZE - 1))
 8005dca:	4a33      	ldr	r2, [pc, #204]	@ (8005e98 <BLEMesh_ModelsDelayPacket+0x180>)
    if (Appli_PendingPackets.head != (Appli_PendingPackets.packet + \
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00d      	beq.n	8005dec <BLEMesh_ModelsDelayPacket+0xd4>
    {
      Appli_PendingPackets.head = Appli_PendingPackets.head +1;
 8005dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005dd2:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8005dd6:	331c      	adds	r3, #28
 8005dd8:	4a29      	ldr	r2, [pc, #164]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005dda:	f8c2 3005 	str.w	r3, [r2, #5]
      Appli_PendingPackets.head_index = Appli_PendingPackets.head_index+1;
 8005dde:	4b28      	ldr	r3, [pc, #160]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005de0:	7a5b      	ldrb	r3, [r3, #9]
 8005de2:	3301      	adds	r3, #1
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	4b26      	ldr	r3, [pc, #152]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005de8:	725a      	strb	r2, [r3, #9]
 8005dea:	e006      	b.n	8005dfa <BLEMesh_ModelsDelayPacket+0xe2>
    }
    else
    {
      Appli_PendingPackets.head = Appli_PendingPackets.packet;
 8005dec:	4b24      	ldr	r3, [pc, #144]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005dee:	4a26      	ldr	r2, [pc, #152]	@ (8005e88 <BLEMesh_ModelsDelayPacket+0x170>)
 8005df0:	f8c3 2005 	str.w	r2, [r3, #5]
      Appli_PendingPackets.head_index = 0;
 8005df4:	4b22      	ldr	r3, [pc, #136]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	725a      	strb	r2, [r3, #9]
    }
  }  
  
  Appli_PendingPackets.head->peer = pmsgParams->peer_addr;
 8005dfa:	4b21      	ldr	r3, [pc, #132]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005dfc:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	8892      	ldrh	r2, [r2, #4]
 8005e04:	801a      	strh	r2, [r3, #0]
  Appli_PendingPackets.head->dst = pmsgParams->dst_peer;
 8005e06:	4b1e      	ldr	r3, [pc, #120]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005e08:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	88d2      	ldrh	r2, [r2, #6]
 8005e10:	805a      	strh	r2, [r3, #2]
  Appli_PendingPackets.head->elementIndex = pmsgParams->elementIndex;
 8005e12:	4b1b      	ldr	r3, [pc, #108]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005e14:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	7812      	ldrb	r2, [r2, #0]
 8005e1c:	715a      	strb	r2, [r3, #5]
  Appli_PendingPackets.head->appKeyOffset = pmsgParams->rcvdAppKeyOffset;
 8005e1e:	4b18      	ldr	r3, [pc, #96]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005e20:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	7a92      	ldrb	r2, [r2, #10]
 8005e28:	719a      	strb	r2, [r3, #6]
  Appli_PendingPackets.head->netKeyOffset = pmsgParams->rcvdNetKeyOffset;
 8005e2a:	4b15      	ldr	r3, [pc, #84]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005e2c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	7ad2      	ldrb	r2, [r2, #11]
 8005e34:	71da      	strb	r2, [r3, #7]
  Appli_PendingPackets.head->command = command;
 8005e36:	4b12      	ldr	r3, [pc, #72]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005e38:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8005e3c:	7afa      	ldrb	r2, [r7, #11]
 8005e3e:	711a      	strb	r2, [r3, #4]
  Appli_PendingPackets.head->length = length;
 8005e40:	4b0f      	ldr	r3, [pc, #60]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005e42:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	619a      	str	r2, [r3, #24]
  for (MOBLEUINT8 count=0; count<length; count++)
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	e00d      	b.n	8005e6c <BLEMesh_ModelsDelayPacket+0x154>
    Appli_PendingPackets.head->data[count] = data[count];
 8005e50:	7ffb      	ldrb	r3, [r7, #31]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	18d1      	adds	r1, r2, r3
 8005e56:	4b0a      	ldr	r3, [pc, #40]	@ (8005e80 <BLEMesh_ModelsDelayPacket+0x168>)
 8005e58:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8005e5c:	7ffb      	ldrb	r3, [r7, #31]
 8005e5e:	7809      	ldrb	r1, [r1, #0]
 8005e60:	4413      	add	r3, r2
 8005e62:	460a      	mov	r2, r1
 8005e64:	721a      	strb	r2, [r3, #8]
  for (MOBLEUINT8 count=0; count<length; count++)
 8005e66:	7ffb      	ldrb	r3, [r7, #31]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	77fb      	strb	r3, [r7, #31]
 8005e6c:	7ffb      	ldrb	r3, [r7, #31]
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d8ed      	bhi.n	8005e50 <BLEMesh_ModelsDelayPacket+0x138>
}   
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop
 8005e78:	3724      	adds	r7, #36	@ 0x24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd90      	pop	{r4, r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20004648 	.word	0x20004648
 8005e84:	10624dd3 	.word	0x10624dd3
 8005e88:	20004652 	.word	0x20004652
 8005e8c:	0802e024 	.word	0x0802e024
 8005e90:	0802a814 	.word	0x0802a814
 8005e94:	aaaaaaab 	.word	0xaaaaaaab
 8005e98:	2000466e 	.word	0x2000466e

08005e9c <BLEMesh_ModelsSendDelayedPacket>:
* @brief  If send timestamp is reached and que is not empty, send all packets
* @param  None
* @retval None
*/
void BLEMesh_ModelsSendDelayedPacket(void)
{
 8005e9c:	b590      	push	{r4, r7, lr}
 8005e9e:	b089      	sub	sp, #36	@ 0x24
 8005ea0:	af02      	add	r7, sp, #8
  APPLI_SEND_RESPONSE_MODULE* ptr;
  MODEL_MessageHeader_t msgParam;
  MOBLEUINT8 temp_index;
  
  if ((Appli_PendingPackets.packet_count != 0) && 
 8005ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8005f60 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d055      	beq.n	8005f56 <BLEMesh_ModelsSendDelayedPacket+0xba>
      (Appli_PendingPackets.send_time <= Clock_Time()))
 8005eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8005f60 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 8005eac:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8005eb0:	f000 fe38 	bl	8006b24 <HAL_GetTick>
 8005eb4:	4603      	mov	r3, r0
  if ((Appli_PendingPackets.packet_count != 0) && 
 8005eb6:	429c      	cmp	r4, r3
 8005eb8:	d84d      	bhi.n	8005f56 <BLEMesh_ModelsSendDelayedPacket+0xba>
  {
    for (MOBLEUINT8 count=Appli_PendingPackets.packet_count; count!=0; count--)
 8005eba:	4b29      	ldr	r3, [pc, #164]	@ (8005f60 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	75fb      	strb	r3, [r7, #23]
 8005ec0:	e043      	b.n	8005f4a <BLEMesh_ModelsSendDelayedPacket+0xae>
    {
    TRACE_M(TF_MISC, "Sending randomized packets. Packet count: %d \n\r",\
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	4827      	ldr	r0, [pc, #156]	@ (8005f64 <BLEMesh_ModelsSendDelayedPacket+0xc8>)
 8005ec6:	f007 f8cb 	bl	800d060 <TraceHeader>
 8005eca:	4b25      	ldr	r3, [pc, #148]	@ (8005f60 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4823      	ldr	r0, [pc, #140]	@ (8005f68 <BLEMesh_ModelsSendDelayedPacket+0xcc>)
 8005eda:	f020 fcdb 	bl	8026894 <iprintf>
        Appli_PendingPackets.packet_count - count + 1);
      temp_index = ((Appli_PendingPackets.head_index+MAX_PENDING_PACKETS_QUE_SIZE+1)\
 8005ede:	4b20      	ldr	r3, [pc, #128]	@ (8005f60 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 8005ee0:	7a5b      	ldrb	r3, [r3, #9]
 8005ee2:	1cda      	adds	r2, r3, #3
        -count)%MAX_PENDING_PACKETS_QUE_SIZE;
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	bfb8      	it	lt
 8005ef0:	425b      	neglt	r3, r3
      temp_index = ((Appli_PendingPackets.head_index+MAX_PENDING_PACKETS_QUE_SIZE+1)\
 8005ef2:	75bb      	strb	r3, [r7, #22]
      ptr = Appli_PendingPackets.packet + temp_index;
 8005ef4:	7dba      	ldrb	r2, [r7, #22]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	1a9b      	subs	r3, r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	461a      	mov	r2, r3
 8005f00:	4b1a      	ldr	r3, [pc, #104]	@ (8005f6c <BLEMesh_ModelsSendDelayedPacket+0xd0>)
 8005f02:	4413      	add	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]
      
      /* Initialize the messageParam*/
      msgParam.dst_peer = ptr->dst;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	885b      	ldrh	r3, [r3, #2]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	817b      	strh	r3, [r7, #10]
      msgParam.peer_addr = ptr->peer;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	813b      	strh	r3, [r7, #8]
      msgParam.elementIndex = 0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	713b      	strb	r3, [r7, #4]
      msgParam.rcvdAppKeyOffset = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	73bb      	strb	r3, [r7, #14]
      msgParam.rcvdNetKeyOffset = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]
      msgParam.rssi = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	737b      	strb	r3, [r7, #13]
      msgParam.ttl = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	733b      	strb	r3, [r7, #12]
      
      VendorModel_SendResponse(VENDOR_STMICRO_CID, 
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	791a      	ldrb	r2, [r3, #4]
                               &msgParam,
                               ptr->command,
                               ptr->data,
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f103 0008 	add.w	r0, r3, #8
      VendorModel_SendResponse(VENDOR_STMICRO_CID, 
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	1d39      	adds	r1, r7, #4
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2030      	movs	r0, #48	@ 0x30
 8005f40:	f01c fe70 	bl	8022c24 <VendorModel_SendResponse>
    for (MOBLEUINT8 count=Appli_PendingPackets.packet_count; count!=0; count--)
 8005f44:	7dfb      	ldrb	r3, [r7, #23]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	75fb      	strb	r3, [r7, #23]
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1b8      	bne.n	8005ec2 <BLEMesh_ModelsSendDelayedPacket+0x26>
                               ptr->length);
    }
    
    Appli_PendingPackets.packet_count = 0;
 8005f50:	4b03      	ldr	r3, [pc, #12]	@ (8005f60 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	701a      	strb	r2, [r3, #0]
  }
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd90      	pop	{r4, r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20004648 	.word	0x20004648
 8005f64:	0802e040 	.word	0x0802e040
 8005f68:	0802a82c 	.word	0x0802a82c
 8005f6c:	20004652 	.word	0x20004652

08005f70 <BLEMesh_ModelsASCII_To_Char>:
* @brief  Convert ASCII value into Character
* @param  tempValue : 8bit value for conversion
* @retval MOBLEUINT8 
*/         
MOBLEUINT8 BLEMesh_ModelsASCII_To_Char(MOBLEUINT8 tempValue)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	71fb      	strb	r3, [r7, #7]
  tempValue = tempValue - 0x30;
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	3b30      	subs	r3, #48	@ 0x30
 8005f7e:	71fb      	strb	r3, [r7, #7]
  return tempValue;
 8005f80:	79fb      	ldrb	r3, [r7, #7]
} 
 8005f82:	4618      	mov	r0, r3
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
	...

08005f90 <GetPage>:
  * @brief  Gets the page of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The page of a given address
  */
static MOBLEUINT32 GetPage(MOBLEUINT32 Addr)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  MOBLEUINT32 page = 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8005f9c:	4b10      	ldr	r3, [pc, #64]	@ (8005fe0 <GetPage+0x50>)
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	029a      	lsls	r2, r3, #10
 8005fa2:	4b10      	ldr	r3, [pc, #64]	@ (8005fe4 <GetPage+0x54>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d205      	bcs.n	8005fbc <GetPage+0x2c>
  {
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8005fb6:	0b1b      	lsrs	r3, r3, #12
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	e00a      	b.n	8005fd2 <GetPage+0x42>
  }
  else
  {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8005fbc:	4b08      	ldr	r3, [pc, #32]	@ (8005fe0 <GetPage+0x50>)
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	029a      	lsls	r2, r3, #10
 8005fc2:	4b08      	ldr	r3, [pc, #32]	@ (8005fe4 <GetPage+0x54>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8005fce:	0b1b      	lsrs	r3, r3, #12
 8005fd0:	60fb      	str	r3, [r7, #12]
  }

  return page;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	1fff75e0 	.word	0x1fff75e0
 8005fe4:	001ffc00 	.word	0x001ffc00

08005fe8 <PalNvmIsWriteProtected>:
* @brief  returns NVM write protect status
* @param  None
* @retval TRUE if flash is write protected
*/
MOBLEBOOL PalNvmIsWriteProtected(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
    /* All flash is writable */
    return MOBLE_FALSE;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <PalNvmRead>:
*/
MOBLE_RESULT PalNvmRead(MOBLEUINT32 address,
                        void *buf, 
                        MOBLEUINT32 size, 
                        MOBLEBOOL backup)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	70fb      	strb	r3, [r7, #3]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8006006:	2300      	movs	r3, #0
 8006008:	75fb      	strb	r3, [r7, #23]
  
//  printf("MoblePalNvmRead >>>\r\n");  

  if (address > (NVM_BASE + NVM_SIZE))
 800600a:	4b13      	ldr	r3, [pc, #76]	@ (8006058 <PalNvmRead+0x60>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	429a      	cmp	r2, r3
 8006016:	d902      	bls.n	800601e <PalNvmRead+0x26>
  {
    result = MOBLE_RESULT_INVALIDARG;
 8006018:	2303      	movs	r3, #3
 800601a:	75fb      	strb	r3, [r7, #23]
 800601c:	e017      	b.n	800604e <PalNvmRead+0x56>
  }
  else if (size == 0)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <PalNvmRead+0x32>
  {
    result = MOBLE_RESULT_FALSE;
 8006024:	2301      	movs	r3, #1
 8006026:	75fb      	strb	r3, [r7, #23]
 8006028:	e011      	b.n	800604e <PalNvmRead+0x56>
  }
  else if ((address + size) > (NVM_BASE + NVM_SIZE))
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	441a      	add	r2, r3
 8006030:	4b09      	ldr	r3, [pc, #36]	@ (8006058 <PalNvmRead+0x60>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006038:	429a      	cmp	r2, r3
 800603a:	d902      	bls.n	8006042 <PalNvmRead+0x4a>
  {
    result = MOBLE_RESULT_INVALIDARG;
 800603c:	2303      	movs	r3, #3
 800603e:	75fb      	strb	r3, [r7, #23]
 8006040:	e005      	b.n	800604e <PalNvmRead+0x56>
  }
  else
  {
    memcpy(buf, (void *)(address), size);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	4619      	mov	r1, r3
 8006048:	68b8      	ldr	r0, [r7, #8]
 800604a:	f020 fe72 	bl	8026d32 <memcpy>
  }
  
//  printf("MoblePalNvmRead <<<\r\n");  
  return result;
 800604e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	200045b0 	.word	0x200045b0

0800605c <PalNvmCompare>:
*/
MOBLE_RESULT PalNvmCompare(MOBLEUINT32 address,
                           void const *buf, 
                           MOBLEUINT32 size, 
                           MOBLE_NVM_COMPARE* comparison)
{
 800605c:	b480      	push	{r7}
 800605e:	b089      	sub	sp, #36	@ 0x24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800606a:	2300      	movs	r3, #0
 800606c:	77fb      	strb	r3, [r7, #31]
  MOBLEUINT32 i;

//  printf("MoblePalNvmCompare >>>\r\n");
  
  if ((comparison == NULL) || (buf == NULL))
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <PalNvmCompare+0x1e>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d102      	bne.n	8006080 <PalNvmCompare+0x24>
  {
    result = MOBLE_RESULT_INVALIDARG;
 800607a:	2303      	movs	r3, #3
 800607c:	77fb      	strb	r3, [r7, #31]
 800607e:	e055      	b.n	800612c <PalNvmCompare+0xd0>
  }
  else if (address > (NVM_BASE + NVM_SIZE))
 8006080:	4b2e      	ldr	r3, [pc, #184]	@ (800613c <PalNvmCompare+0xe0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	429a      	cmp	r2, r3
 800608c:	d902      	bls.n	8006094 <PalNvmCompare+0x38>
  {
    result = MOBLE_RESULT_INVALIDARG;
 800608e:	2303      	movs	r3, #3
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e04b      	b.n	800612c <PalNvmCompare+0xd0>
  }
  else if (size == 0)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d102      	bne.n	80060a0 <PalNvmCompare+0x44>
  {
    result = MOBLE_RESULT_FALSE;
 800609a:	2301      	movs	r3, #1
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e045      	b.n	800612c <PalNvmCompare+0xd0>
  }
  else if ((address + size) > (NVM_BASE + NVM_SIZE))
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	441a      	add	r2, r3
 80060a6:	4b25      	ldr	r3, [pc, #148]	@ (800613c <PalNvmCompare+0xe0>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d902      	bls.n	80060b8 <PalNvmCompare+0x5c>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80060b2:	2303      	movs	r3, #3
 80060b4:	77fb      	strb	r3, [r7, #31]
 80060b6:	e039      	b.n	800612c <PalNvmCompare+0xd0>
  }
  else if (address & 3)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <PalNvmCompare+0x6c>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80060c2:	2303      	movs	r3, #3
 80060c4:	77fb      	strb	r3, [r7, #31]
 80060c6:	e031      	b.n	800612c <PalNvmCompare+0xd0>
  }
  else if (size & 3)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <PalNvmCompare+0x7c>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80060d2:	2303      	movs	r3, #3
 80060d4:	77fb      	strb	r3, [r7, #31]
 80060d6:	e029      	b.n	800612c <PalNvmCompare+0xd0>
  }
  else
  {
    *comparison = MOBLE_NVM_COMPARE_EQUAL;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2200      	movs	r2, #0
 80060dc:	701a      	strb	r2, [r3, #0]
    size >>= 2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	089b      	lsrs	r3, r3, #2
 80060e2:	607b      	str	r3, [r7, #4]

    MOBLEUINT32 * src = (MOBLEUINT32*)buf;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	617b      	str	r3, [r7, #20]
    MOBLEUINT32 * dst = (MOBLEUINT32*)(address);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	613b      	str	r3, [r7, #16]
    
    i = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61bb      	str	r3, [r7, #24]
    do
    {
      if ((src[i] != dst[i]) && (*comparison == MOBLE_NVM_COMPARE_EQUAL))
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	4413      	add	r3, r2
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	6939      	ldr	r1, [r7, #16]
 8006100:	440b      	add	r3, r1
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d006      	beq.n	8006116 <PalNvmCompare+0xba>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d102      	bne.n	8006116 <PalNvmCompare+0xba>
      {
        *comparison = MOBLE_NVM_COMPARE_NOT_EQUAL;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2201      	movs	r2, #1
 8006114:	701a      	strb	r2, [r3, #0]
      }
      i++;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	3301      	adds	r3, #1
 800611a:	61bb      	str	r3, [r7, #24]
    } while((*comparison != MOBLE_NVM_COMPARE_NOT_EQUAL) && (i < size));
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d003      	beq.n	800612c <PalNvmCompare+0xd0>
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	429a      	cmp	r2, r3
 800612a:	d3e1      	bcc.n	80060f0 <PalNvmCompare+0x94>
  }
  
//  printf("MoblePalNvmCompare <<<\r\n");
  return result;
 800612c:	7ffb      	ldrb	r3, [r7, #31]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3724      	adds	r7, #36	@ 0x24
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	200045b0 	.word	0x200045b0

08006140 <PalNvmErase>:
* @param  None
* @retval Result
*/
MOBLE_RESULT PalNvmErase(MOBLEUINT32 address,
                         MOBLEUINT8 nb_pages)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
  if(FD_EraseSectors(GetPage(address), nb_pages) != 0)
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff ff1f 	bl	8005f90 <GetPage>
 8006152:	4602      	mov	r2, r0
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	4619      	mov	r1, r3
 8006158:	4610      	mov	r0, r2
 800615a:	f7fb fc51 	bl	8001a00 <FD_EraseSectors>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <PalNvmErase+0x28>
  {
    return MOBLE_RESULT_FAIL;
 8006164:	2302      	movs	r3, #2
 8006166:	e000      	b.n	800616a <PalNvmErase+0x2a>
  }

  return MOBLE_RESULT_SUCCESS;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <PalNvmWrite>:
* @retval Result
*/
MOBLE_RESULT PalNvmWrite(MOBLEUINT32 address,
                          void const *buf, 
                          MOBLEUINT32 size)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8006180:	2300      	movs	r3, #0
 8006182:	77fb      	strb	r3, [r7, #31]

  if (address > (NVM_BASE + NVM_SIZE))
 8006184:	4b27      	ldr	r3, [pc, #156]	@ (8006224 <PalNvmWrite+0xb0>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	429a      	cmp	r2, r3
 8006190:	d902      	bls.n	8006198 <PalNvmWrite+0x24>
  {
    result = MOBLE_RESULT_INVALIDARG;
 8006192:	2303      	movs	r3, #3
 8006194:	77fb      	strb	r3, [r7, #31]
 8006196:	e03d      	b.n	8006214 <PalNvmWrite+0xa0>
  }
  else if (size == 0)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d102      	bne.n	80061a4 <PalNvmWrite+0x30>
  {
    result = MOBLE_RESULT_FALSE;
 800619e:	2301      	movs	r3, #1
 80061a0:	77fb      	strb	r3, [r7, #31]
 80061a2:	e037      	b.n	8006214 <PalNvmWrite+0xa0>
  }
  else if ((address + size) > (NVM_BASE + NVM_SIZE))
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	441a      	add	r2, r3
 80061aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006224 <PalNvmWrite+0xb0>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d902      	bls.n	80061bc <PalNvmWrite+0x48>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80061b6:	2303      	movs	r3, #3
 80061b8:	77fb      	strb	r3, [r7, #31]
 80061ba:	e02b      	b.n	8006214 <PalNvmWrite+0xa0>
  }
  else if (address & 3)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <PalNvmWrite+0x58>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80061c6:	2303      	movs	r3, #3
 80061c8:	77fb      	strb	r3, [r7, #31]
 80061ca:	e023      	b.n	8006214 <PalNvmWrite+0xa0>
  }
  else if (size & 3)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <PalNvmWrite+0x68>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80061d6:	2303      	movs	r3, #3
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e01b      	b.n	8006214 <PalNvmWrite+0xa0>
  }
  else
  {
    MOBLEUINT32 remain = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	617b      	str	r3, [r7, #20]
    MOBLEUINT32 nb_dword = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61bb      	str	r3, [r7, #24]
  
    nb_dword = (size >> 3);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	08db      	lsrs	r3, r3, #3
 80061e8:	61bb      	str	r3, [r7, #24]
    remain = size - ((nb_dword) << 3);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	617b      	str	r3, [r7, #20]
    if(remain > 0)
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <PalNvmWrite+0x8c>
      nb_dword += 1;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	3301      	adds	r3, #1
 80061fe:	61bb      	str	r3, [r7, #24]
    
  if(FD_WriteData(address, (uint64_t*)buf, nb_dword) != 0)
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7fb fc41 	bl	8001a8c <FD_WriteData>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <PalNvmWrite+0xa0>
    result = MOBLE_RESULT_FAIL;
 8006210:	2302      	movs	r3, #2
 8006212:	77fb      	strb	r3, [r7, #31]
  }
  
  TRACE_I(TF_PROVISION,"NVM updated\r\n");      
 8006214:	4804      	ldr	r0, [pc, #16]	@ (8006228 <PalNvmWrite+0xb4>)
 8006216:	f020 fba5 	bl	8026964 <puts>
  return result;
 800621a:	7ffb      	ldrb	r3, [r7, #31]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3720      	adds	r7, #32
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	200045b0 	.word	0x200045b0
 8006228:	0802a85c 	.word	0x0802a85c

0800622c <PalNvmProcess>:
* @brief  NVM process
* @param  None
* @retval Result
*/
MOBLE_RESULT PalNvmProcess(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  /* do nothing */
  return MOBLE_RESULT_SUCCESS;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8006244:	4b06      	ldr	r3, [pc, #24]	@ (8006260 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006246:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800624a:	4905      	ldr	r1, [pc, #20]	@ (8006260 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	58000800 	.word	0x58000800

08006264 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800626c:	4b05      	ldr	r3, [pc, #20]	@ (8006284 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800626e:	6a1a      	ldr	r2, [r3, #32]
 8006270:	4904      	ldr	r1, [pc, #16]	@ (8006284 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4313      	orrs	r3, r2
 8006276:	620b      	str	r3, [r1, #32]
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	58000800 	.word	0x58000800

08006288 <LL_PWR_EnableBootC2>:
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800628c:	4b05      	ldr	r3, [pc, #20]	@ (80062a4 <LL_PWR_EnableBootC2+0x1c>)
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	4a04      	ldr	r2, [pc, #16]	@ (80062a4 <LL_PWR_EnableBootC2+0x1c>)
 8006292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006296:	60d3      	str	r3, [r2, #12]
}
 8006298:	bf00      	nop
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	58000400 	.word	0x58000400

080062a8 <LL_AHB3_GRP1_EnableClock>:
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80062b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4313      	orrs	r3, r2
 80062be:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80062c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4013      	ands	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80062cc:	68fb      	ldr	r3, [r7, #12]
}
 80062ce:	bf00      	nop
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80062e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062e6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80062ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80062f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062fa:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4013      	ands	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006304:	68fb      	ldr	r3, [r7, #12]
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <LL_C1_IPCC_EnableIT_TXF>:
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	601a      	str	r2, [r3, #0]
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <LL_C1_IPCC_EnableIT_RXO>:
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f043 0201 	orr.w	r2, r3, #1
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	601a      	str	r2, [r3, #0]
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	041b      	lsls	r3, r3, #16
 8006364:	43db      	mvns	r3, r3
 8006366:	401a      	ands	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	605a      	str	r2, [r3, #4]
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	041b      	lsls	r3, r3, #16
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	605a      	str	r2, [r3, #4]
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	43db      	mvns	r3, r3
 80063ae:	401a      	ands	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	605a      	str	r2, [r3, #4]
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	609a      	str	r2, [r3, #8]
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <LL_C1_IPCC_SetFlag_CHx>:
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	041a      	lsls	r2, r3, #16
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	609a      	str	r2, [r3, #8]
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68da      	ldr	r2, [r3, #12]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	4013      	ands	r3, r2
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d101      	bne.n	8006416 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69da      	ldr	r2, [r3, #28]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	4013      	ands	r3, r2
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d101      	bne.n	8006440 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
	...

08006450 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006454:	2102      	movs	r1, #2
 8006456:	4818      	ldr	r0, [pc, #96]	@ (80064b8 <HW_IPCC_Rx_Handler+0x68>)
 8006458:	f7ff ffe4 	bl	8006424 <LL_C2_IPCC_IsActiveFlag_CHx>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d008      	beq.n	8006474 <HW_IPCC_Rx_Handler+0x24>
 8006462:	4b15      	ldr	r3, [pc, #84]	@ (80064b8 <HW_IPCC_Rx_Handler+0x68>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d102      	bne.n	8006474 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800646e:	f000 f8d5 	bl	800661c <HW_IPCC_SYS_EvtHandler>
 8006472:	e01e      	b.n	80064b2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8006474:	2101      	movs	r1, #1
 8006476:	4810      	ldr	r0, [pc, #64]	@ (80064b8 <HW_IPCC_Rx_Handler+0x68>)
 8006478:	f7ff ffd4 	bl	8006424 <LL_C2_IPCC_IsActiveFlag_CHx>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d008      	beq.n	8006494 <HW_IPCC_Rx_Handler+0x44>
 8006482:	4b0d      	ldr	r3, [pc, #52]	@ (80064b8 <HW_IPCC_Rx_Handler+0x68>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d102      	bne.n	8006494 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800648e:	f000 f889 	bl	80065a4 <HW_IPCC_BLE_EvtHandler>
 8006492:	e00e      	b.n	80064b2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8006494:	2108      	movs	r1, #8
 8006496:	4808      	ldr	r0, [pc, #32]	@ (80064b8 <HW_IPCC_Rx_Handler+0x68>)
 8006498:	f7ff ffc4 	bl	8006424 <LL_C2_IPCC_IsActiveFlag_CHx>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d008      	beq.n	80064b4 <HW_IPCC_Rx_Handler+0x64>
 80064a2:	4b05      	ldr	r3, [pc, #20]	@ (80064b8 <HW_IPCC_Rx_Handler+0x68>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d102      	bne.n	80064b4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80064ae:	f000 f901 	bl	80066b4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80064b2:	bf00      	nop
 80064b4:	bf00      	nop
}
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	58000c00 	.word	0x58000c00

080064bc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80064c0:	2102      	movs	r1, #2
 80064c2:	4818      	ldr	r0, [pc, #96]	@ (8006524 <HW_IPCC_Tx_Handler+0x68>)
 80064c4:	f7ff ff99 	bl	80063fa <LL_C1_IPCC_IsActiveFlag_CHx>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d108      	bne.n	80064e0 <HW_IPCC_Tx_Handler+0x24>
 80064ce:	4b15      	ldr	r3, [pc, #84]	@ (8006524 <HW_IPCC_Tx_Handler+0x68>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d102      	bne.n	80064e0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80064da:	f000 f893 	bl	8006604 <HW_IPCC_SYS_CmdEvtHandler>
 80064de:	e01e      	b.n	800651e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80064e0:	2108      	movs	r1, #8
 80064e2:	4810      	ldr	r0, [pc, #64]	@ (8006524 <HW_IPCC_Tx_Handler+0x68>)
 80064e4:	f7ff ff89 	bl	80063fa <LL_C1_IPCC_IsActiveFlag_CHx>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d108      	bne.n	8006500 <HW_IPCC_Tx_Handler+0x44>
 80064ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006524 <HW_IPCC_Tx_Handler+0x68>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80064fa:	f000 f8bd 	bl	8006678 <HW_IPCC_MM_FreeBufHandler>
 80064fe:	e00e      	b.n	800651e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8006500:	2120      	movs	r1, #32
 8006502:	4808      	ldr	r0, [pc, #32]	@ (8006524 <HW_IPCC_Tx_Handler+0x68>)
 8006504:	f7ff ff79 	bl	80063fa <LL_C1_IPCC_IsActiveFlag_CHx>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d108      	bne.n	8006520 <HW_IPCC_Tx_Handler+0x64>
 800650e:	4b05      	ldr	r3, [pc, #20]	@ (8006524 <HW_IPCC_Tx_Handler+0x68>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d102      	bne.n	8006520 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800651a:	f000 f84f 	bl	80065bc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800651e:	bf00      	nop
 8006520:	bf00      	nop
}
 8006522:	bd80      	pop	{r7, pc}
 8006524:	58000c00 	.word	0x58000c00

08006528 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800652c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006530:	f7ff fed3 	bl	80062da <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006534:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006538:	f7ff fe94 	bl	8006264 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800653c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8006540:	f7ff fe7c 	bl	800623c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006544:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006546:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006548:	f7ff fe9e 	bl	8006288 <LL_PWR_EnableBootC2>

  return;
 800654c:	bf00      	nop
}
 800654e:	bd80      	pop	{r7, pc}

08006550 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006554:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006558:	f7ff fea6 	bl	80062a8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800655c:	4806      	ldr	r0, [pc, #24]	@ (8006578 <HW_IPCC_Init+0x28>)
 800655e:	f7ff fee8 	bl	8006332 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006562:	4805      	ldr	r0, [pc, #20]	@ (8006578 <HW_IPCC_Init+0x28>)
 8006564:	f7ff fed5 	bl	8006312 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006568:	202c      	movs	r0, #44	@ 0x2c
 800656a:	f000 fc60 	bl	8006e2e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800656e:	202d      	movs	r0, #45	@ 0x2d
 8006570:	f000 fc5d 	bl	8006e2e <HAL_NVIC_EnableIRQ>

  return;
 8006574:	bf00      	nop
}
 8006576:	bd80      	pop	{r7, pc}
 8006578:	58000c00 	.word	0x58000c00

0800657c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006580:	2101      	movs	r1, #1
 8006582:	4802      	ldr	r0, [pc, #8]	@ (800658c <HW_IPCC_BLE_Init+0x10>)
 8006584:	f7ff ff0a 	bl	800639c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006588:	bf00      	nop
}
 800658a:	bd80      	pop	{r7, pc}
 800658c:	58000c00 	.word	0x58000c00

08006590 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8006594:	2101      	movs	r1, #1
 8006596:	4802      	ldr	r0, [pc, #8]	@ (80065a0 <HW_IPCC_BLE_SendCmd+0x10>)
 8006598:	f7ff ff20 	bl	80063dc <LL_C1_IPCC_SetFlag_CHx>

  return;
 800659c:	bf00      	nop
}
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	58000c00 	.word	0x58000c00

080065a4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80065a8:	f00d f880 	bl	80136ac <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80065ac:	2101      	movs	r1, #1
 80065ae:	4802      	ldr	r0, [pc, #8]	@ (80065b8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80065b0:	f7ff ff06 	bl	80063c0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80065b4:	bf00      	nop
}
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	58000c00 	.word	0x58000c00

080065bc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80065c0:	2120      	movs	r1, #32
 80065c2:	4803      	ldr	r0, [pc, #12]	@ (80065d0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80065c4:	f7ff fed8 	bl	8006378 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80065c8:	f00d f8a0 	bl	801370c <HW_IPCC_BLE_AclDataAckNot>

  return;
 80065cc:	bf00      	nop
}
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	58000c00 	.word	0x58000c00

080065d4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80065d8:	2102      	movs	r1, #2
 80065da:	4802      	ldr	r0, [pc, #8]	@ (80065e4 <HW_IPCC_SYS_Init+0x10>)
 80065dc:	f7ff fede 	bl	800639c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80065e0:	bf00      	nop
}
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	58000c00 	.word	0x58000c00

080065e8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80065ec:	2102      	movs	r1, #2
 80065ee:	4804      	ldr	r0, [pc, #16]	@ (8006600 <HW_IPCC_SYS_SendCmd+0x18>)
 80065f0:	f7ff fef4 	bl	80063dc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80065f4:	2102      	movs	r1, #2
 80065f6:	4802      	ldr	r0, [pc, #8]	@ (8006600 <HW_IPCC_SYS_SendCmd+0x18>)
 80065f8:	f7ff feab 	bl	8006352 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80065fc:	bf00      	nop
}
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	58000c00 	.word	0x58000c00

08006604 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006608:	2102      	movs	r1, #2
 800660a:	4803      	ldr	r0, [pc, #12]	@ (8006618 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800660c:	f7ff feb4 	bl	8006378 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8006610:	f00d f8cc 	bl	80137ac <HW_IPCC_SYS_CmdEvtNot>

  return;
 8006614:	bf00      	nop
}
 8006616:	bd80      	pop	{r7, pc}
 8006618:	58000c00 	.word	0x58000c00

0800661c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8006620:	f00d f8da 	bl	80137d8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006624:	2102      	movs	r1, #2
 8006626:	4802      	ldr	r0, [pc, #8]	@ (8006630 <HW_IPCC_SYS_EvtHandler+0x14>)
 8006628:	f7ff feca 	bl	80063c0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800662c:	bf00      	nop
}
 800662e:	bd80      	pop	{r7, pc}
 8006630:	58000c00 	.word	0x58000c00

08006634 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800663c:	2108      	movs	r1, #8
 800663e:	480c      	ldr	r0, [pc, #48]	@ (8006670 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006640:	f7ff fedb 	bl	80063fa <LL_C1_IPCC_IsActiveFlag_CHx>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800664a:	4a0a      	ldr	r2, [pc, #40]	@ (8006674 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006650:	2108      	movs	r1, #8
 8006652:	4807      	ldr	r0, [pc, #28]	@ (8006670 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006654:	f7ff fe7d 	bl	8006352 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8006658:	e006      	b.n	8006668 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800665e:	2108      	movs	r1, #8
 8006660:	4803      	ldr	r0, [pc, #12]	@ (8006670 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006662:	f7ff febb 	bl	80063dc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8006666:	bf00      	nop
}
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	58000c00 	.word	0x58000c00
 8006674:	2000468c 	.word	0x2000468c

08006678 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800667c:	2108      	movs	r1, #8
 800667e:	4806      	ldr	r0, [pc, #24]	@ (8006698 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006680:	f7ff fe7a 	bl	8006378 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8006684:	4b05      	ldr	r3, [pc, #20]	@ (800669c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800668a:	2108      	movs	r1, #8
 800668c:	4802      	ldr	r0, [pc, #8]	@ (8006698 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800668e:	f7ff fea5 	bl	80063dc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006692:	bf00      	nop
}
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	58000c00 	.word	0x58000c00
 800669c:	2000468c 	.word	0x2000468c

080066a0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80066a4:	2108      	movs	r1, #8
 80066a6:	4802      	ldr	r0, [pc, #8]	@ (80066b0 <HW_IPCC_TRACES_Init+0x10>)
 80066a8:	f7ff fe78 	bl	800639c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80066ac:	bf00      	nop
}
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	58000c00 	.word	0x58000c00

080066b4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80066b8:	f00d f936 	bl	8013928 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80066bc:	2108      	movs	r1, #8
 80066be:	4802      	ldr	r0, [pc, #8]	@ (80066c8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80066c0:	f7ff fe7e 	bl	80063c0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80066c4:	bf00      	nop
}
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	58000c00 	.word	0x58000c00

080066cc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80066cc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066ce:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066d0:	3304      	adds	r3, #4

080066d2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066d2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066d4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80066d6:	d3f9      	bcc.n	80066cc <CopyDataInit>
  bx lr
 80066d8:	4770      	bx	lr

080066da <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80066da:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80066dc:	3004      	adds	r0, #4

080066de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80066de:	4288      	cmp	r0, r1
  bcc FillZerobss
 80066e0:	d3fb      	bcc.n	80066da <FillZerobss>
  bx lr
 80066e2:	4770      	bx	lr

080066e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80066e4:	480c      	ldr	r0, [pc, #48]	@ (8006718 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80066e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80066e8:	f000 f938 	bl	800695c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80066ec:	480b      	ldr	r0, [pc, #44]	@ (800671c <LoopForever+0x8>)
 80066ee:	490c      	ldr	r1, [pc, #48]	@ (8006720 <LoopForever+0xc>)
 80066f0:	4a0c      	ldr	r2, [pc, #48]	@ (8006724 <LoopForever+0x10>)
 80066f2:	2300      	movs	r3, #0
 80066f4:	f7ff ffed 	bl	80066d2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80066f8:	480b      	ldr	r0, [pc, #44]	@ (8006728 <LoopForever+0x14>)
 80066fa:	490c      	ldr	r1, [pc, #48]	@ (800672c <LoopForever+0x18>)
 80066fc:	2300      	movs	r3, #0
 80066fe:	f7ff ffee 	bl	80066de <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006702:	480b      	ldr	r0, [pc, #44]	@ (8006730 <LoopForever+0x1c>)
 8006704:	490b      	ldr	r1, [pc, #44]	@ (8006734 <LoopForever+0x20>)
 8006706:	2300      	movs	r3, #0
 8006708:	f7ff ffe9 	bl	80066de <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800670c:	f020 faea 	bl	8026ce4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8006710:	f7fc fa66 	bl	8002be0 <main>

08006714 <LoopForever>:

LoopForever:
  b LoopForever
 8006714:	e7fe      	b.n	8006714 <LoopForever>
 8006716:	0000      	.short	0x0000
  ldr   r0, =_estack
 8006718:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800671c:	20000008 	.word	0x20000008
 8006720:	200002a8 	.word	0x200002a8
 8006724:	0802f360 	.word	0x0802f360
  INIT_BSS _sbss, _ebss
 8006728:	20000308 	.word	0x20000308
 800672c:	20008204 	.word	0x20008204
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006730:	200301e4 	.word	0x200301e4
 8006734:	20030a67 	.word	0x20030a67

08006738 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006738:	e7fe      	b.n	8006738 <ADC1_IRQHandler>

0800673a <LL_AHB2_GRP1_EnableClock>:
{
 800673a:	b480      	push	{r7}
 800673c:	b085      	sub	sp, #20
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006746:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006748:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4313      	orrs	r3, r2
 8006750:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4013      	ands	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800675e:	68fb      	ldr	r3, [r7, #12]
}
 8006760:	bf00      	nop
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af00      	add	r7, sp, #0
 8006772:	4603      	mov	r3, r0
 8006774:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8006776:	f107 030c 	add.w	r3, r7, #12
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	605a      	str	r2, [r3, #4]
 8006780:	609a      	str	r2, [r3, #8]
 8006782:	60da      	str	r2, [r3, #12]
 8006784:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8006786:	2002      	movs	r0, #2
 8006788:	f7ff ffd7 	bl	800673a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	4a12      	ldr	r2, [pc, #72]	@ (80067d8 <BSP_LED_Init+0x6c>)
 8006790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006794:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006796:	2301      	movs	r3, #1
 8006798:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800679e:	2302      	movs	r3, #2
 80067a0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	4a0d      	ldr	r2, [pc, #52]	@ (80067dc <BSP_LED_Init+0x70>)
 80067a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067aa:	f107 020c 	add.w	r2, r7, #12
 80067ae:	4611      	mov	r1, r2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 f8ad 	bl	8007910 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80067b6:	79fb      	ldrb	r3, [r7, #7]
 80067b8:	4a08      	ldr	r2, [pc, #32]	@ (80067dc <BSP_LED_Init+0x70>)
 80067ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	4a05      	ldr	r2, [pc, #20]	@ (80067d8 <BSP_LED_Init+0x6c>)
 80067c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c6:	2200      	movs	r2, #0
 80067c8:	4619      	mov	r1, r3
 80067ca:	f001 fa29 	bl	8007c20 <HAL_GPIO_WritePin>
}
 80067ce:	bf00      	nop
 80067d0:	3720      	adds	r7, #32
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	0802e060 	.word	0x0802e060
 80067dc:	200000a4 	.word	0x200000a4

080067e0 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	4603      	mov	r3, r0
 80067e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80067ea:	79fb      	ldrb	r3, [r7, #7]
 80067ec:	4a07      	ldr	r2, [pc, #28]	@ (800680c <BSP_LED_On+0x2c>)
 80067ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80067f2:	79fb      	ldrb	r3, [r7, #7]
 80067f4:	4a06      	ldr	r2, [pc, #24]	@ (8006810 <BSP_LED_On+0x30>)
 80067f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067fa:	2201      	movs	r2, #1
 80067fc:	4619      	mov	r1, r3
 80067fe:	f001 fa0f 	bl	8007c20 <HAL_GPIO_WritePin>
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	200000a4 	.word	0x200000a4
 8006810:	0802e060 	.word	0x0802e060

08006814 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800681e:	79fb      	ldrb	r3, [r7, #7]
 8006820:	4a07      	ldr	r2, [pc, #28]	@ (8006840 <BSP_LED_Off+0x2c>)
 8006822:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006826:	79fb      	ldrb	r3, [r7, #7]
 8006828:	4a06      	ldr	r2, [pc, #24]	@ (8006844 <BSP_LED_Off+0x30>)
 800682a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800682e:	2200      	movs	r2, #0
 8006830:	4619      	mov	r1, r3
 8006832:	f001 f9f5 	bl	8007c20 <HAL_GPIO_WritePin>
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	200000a4 	.word	0x200000a4
 8006844:	0802e060 	.word	0x0802e060

08006848 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	460a      	mov	r2, r1
 8006852:	71fb      	strb	r3, [r7, #7]
 8006854:	4613      	mov	r3, r2
 8006856:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8006858:	f107 030c 	add.w	r3, r7, #12
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	605a      	str	r2, [r3, #4]
 8006862:	609a      	str	r2, [r3, #8]
 8006864:	60da      	str	r2, [r3, #12]
 8006866:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d103      	bne.n	8006876 <BSP_PB_Init+0x2e>
 800686e:	2004      	movs	r0, #4
 8006870:	f7ff ff63 	bl	800673a <LL_AHB2_GRP1_EnableClock>
 8006874:	e00c      	b.n	8006890 <BSP_PB_Init+0x48>
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d103      	bne.n	8006884 <BSP_PB_Init+0x3c>
 800687c:	2008      	movs	r0, #8
 800687e:	f7ff ff5c 	bl	800673a <LL_AHB2_GRP1_EnableClock>
 8006882:	e005      	b.n	8006890 <BSP_PB_Init+0x48>
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	2b02      	cmp	r3, #2
 8006888:	d102      	bne.n	8006890 <BSP_PB_Init+0x48>
 800688a:	2008      	movs	r0, #8
 800688c:	f7ff ff55 	bl	800673a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8006890:	79bb      	ldrb	r3, [r7, #6]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d117      	bne.n	80068c6 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8006896:	79fb      	ldrb	r3, [r7, #7]
 8006898:	4a20      	ldr	r2, [pc, #128]	@ (800691c <BSP_PB_Init+0xd4>)
 800689a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800689e:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80068a0:	2300      	movs	r3, #0
 80068a2:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80068a4:	2301      	movs	r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068a8:	2302      	movs	r3, #2
 80068aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006920 <BSP_PB_Init+0xd8>)
 80068b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b4:	f107 020c 	add.w	r2, r7, #12
 80068b8:	4611      	mov	r1, r2
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 f828 	bl	8007910 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80068c0:	2001      	movs	r0, #1
 80068c2:	f7fa ffd2 	bl	800186a <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80068c6:	79bb      	ldrb	r3, [r7, #6]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d123      	bne.n	8006914 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	4a13      	ldr	r2, [pc, #76]	@ (800691c <BSP_PB_Init+0xd4>)
 80068d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068d4:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80068d6:	2301      	movs	r3, #1
 80068d8:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80068da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80068de:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	4a0f      	ldr	r2, [pc, #60]	@ (8006920 <BSP_PB_Init+0xd8>)
 80068e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e8:	f107 020c 	add.w	r2, r7, #12
 80068ec:	4611      	mov	r1, r2
 80068ee:	4618      	mov	r0, r3
 80068f0:	f001 f80e 	bl	8007910 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	4a0b      	ldr	r2, [pc, #44]	@ (8006924 <BSP_PB_Init+0xdc>)
 80068f8:	5cd3      	ldrb	r3, [r2, r3]
 80068fa:	b25b      	sxtb	r3, r3
 80068fc:	2200      	movs	r2, #0
 80068fe:	210f      	movs	r1, #15
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fa7a 	bl	8006dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8006906:	79fb      	ldrb	r3, [r7, #7]
 8006908:	4a06      	ldr	r2, [pc, #24]	@ (8006924 <BSP_PB_Init+0xdc>)
 800690a:	5cd3      	ldrb	r3, [r2, r3]
 800690c:	b25b      	sxtb	r3, r3
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fa8d 	bl	8006e2e <HAL_NVIC_EnableIRQ>
  }
}
 8006914:	bf00      	nop
 8006916:	3720      	adds	r7, #32
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	0802e068 	.word	0x0802e068
 8006920:	200000b0 	.word	0x200000b0
 8006924:	0802e070 	.word	0x0802e070

08006928 <BSP_PB_GetState>:
  *     @arg BUTTON_SW2
  *     @arg BUTTON_SW3
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	4a07      	ldr	r2, [pc, #28]	@ (8006954 <BSP_PB_GetState+0x2c>)
 8006936:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	4906      	ldr	r1, [pc, #24]	@ (8006958 <BSP_PB_GetState+0x30>)
 800693e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006942:	4619      	mov	r1, r3
 8006944:	4610      	mov	r0, r2
 8006946:	f001 f953 	bl	8007bf0 <HAL_GPIO_ReadPin>
 800694a:	4603      	mov	r3, r0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	200000b0 	.word	0x200000b0
 8006958:	0802e068 	.word	0x0802e068

0800695c <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8006960:	4b26      	ldr	r3, [pc, #152]	@ (80069fc <SystemInit+0xa0>)
 8006962:	2200      	movs	r2, #0
 8006964:	609a      	str	r2, [r3, #8]
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8006966:	4b25      	ldr	r3, [pc, #148]	@ (80069fc <SystemInit+0xa0>)
 8006968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800696c:	4a23      	ldr	r2, [pc, #140]	@ (80069fc <SystemInit+0xa0>)
 800696e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006972:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8006986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800698a:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800698e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8006990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800699a:	4b19      	ldr	r3, [pc, #100]	@ (8006a00 <SystemInit+0xa4>)
 800699c:	4013      	ands	r3, r2
 800699e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80069a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069ac:	f023 0305 	bic.w	r3, r3, #5
 80069b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80069b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069c0:	f023 0301 	bic.w	r3, r3, #1
 80069c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80069c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069cc:	4a0d      	ldr	r2, [pc, #52]	@ (8006a04 <SystemInit+0xa8>)
 80069ce:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80069d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069d4:	4a0b      	ldr	r2, [pc, #44]	@ (8006a04 <SystemInit+0xa8>)
 80069d6:	611a      	str	r2, [r3, #16]
#endif

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80069d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80069e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069ec:	2200      	movs	r2, #0
 80069ee:	619a      	str	r2, [r3, #24]
}
 80069f0:	bf00      	nop
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	e000ed00 	.word	0xe000ed00
 8006a00:	faf6fefb 	.word	0xfaf6fefb
 8006a04:	22041000 	.word	0x22041000

08006a08 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8006a08:	b480      	push	{r7}
 8006a0a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8006a0c:	4b05      	ldr	r3, [pc, #20]	@ (8006a24 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4a04      	ldr	r2, [pc, #16]	@ (8006a24 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8006a12:	f043 0301 	orr.w	r3, r3, #1
 8006a16:	6053      	str	r3, [r2, #4]
}
 8006a18:	bf00      	nop
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	e0042000 	.word	0xe0042000

08006a28 <LL_DBGMCU_EnableDBGStopMode>:
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006a2c:	4b05      	ldr	r3, [pc, #20]	@ (8006a44 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	4a04      	ldr	r2, [pc, #16]	@ (8006a44 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8006a32:	f043 0302 	orr.w	r3, r3, #2
 8006a36:	6053      	str	r3, [r2, #4]
}
 8006a38:	bf00      	nop
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	e0042000 	.word	0xe0042000

08006a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a52:	4b0c      	ldr	r3, [pc, #48]	@ (8006a84 <HAL_Init+0x3c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a0b      	ldr	r2, [pc, #44]	@ (8006a84 <HAL_Init+0x3c>)
 8006a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a5e:	2003      	movs	r0, #3
 8006a60:	f000 f9c0 	bl	8006de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a64:	2000      	movs	r0, #0
 8006a66:	f000 f80f 	bl	8006a88 <HAL_InitTick>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	71fb      	strb	r3, [r7, #7]
 8006a74:	e001      	b.n	8006a7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006a76:	f7fc fbfb 	bl	8003270 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	58004000 	.word	0x58004000

08006a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8006a94:	4b17      	ldr	r3, [pc, #92]	@ (8006af4 <HAL_InitTick+0x6c>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d024      	beq.n	8006ae6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006a9c:	f002 fa4e 	bl	8008f3c <HAL_RCC_GetHCLKFreq>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	4b14      	ldr	r3, [pc, #80]	@ (8006af4 <HAL_InitTick+0x6c>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006aac:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 f9d6 	bl	8006e66 <HAL_SYSTICK_Config>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10f      	bne.n	8006ae0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b0f      	cmp	r3, #15
 8006ac4:	d809      	bhi.n	8006ada <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	6879      	ldr	r1, [r7, #4]
 8006aca:	f04f 30ff 	mov.w	r0, #4294967295
 8006ace:	f000 f994 	bl	8006dfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006ad2:	4a09      	ldr	r2, [pc, #36]	@ (8006af8 <HAL_InitTick+0x70>)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	e007      	b.n	8006aea <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	73fb      	strb	r3, [r7, #15]
 8006ade:	e004      	b.n	8006aea <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	73fb      	strb	r3, [r7, #15]
 8006ae4:	e001      	b.n	8006aea <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	200000c4 	.word	0x200000c4
 8006af8:	200000c0 	.word	0x200000c0

08006afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006b00:	4b06      	ldr	r3, [pc, #24]	@ (8006b1c <HAL_IncTick+0x20>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	4b06      	ldr	r3, [pc, #24]	@ (8006b20 <HAL_IncTick+0x24>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	4a04      	ldr	r2, [pc, #16]	@ (8006b20 <HAL_IncTick+0x24>)
 8006b0e:	6013      	str	r3, [r2, #0]
}
 8006b10:	bf00      	nop
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	200000c4 	.word	0x200000c4
 8006b20:	20004690 	.word	0x20004690

08006b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
  return uwTick;
 8006b28:	4b03      	ldr	r3, [pc, #12]	@ (8006b38 <HAL_GetTick+0x14>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	20004690 	.word	0x20004690

08006b3c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006b40:	4b03      	ldr	r3, [pc, #12]	@ (8006b50 <HAL_GetTickPrio+0x14>)
 8006b42:	681b      	ldr	r3, [r3, #0]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	200000c0 	.word	0x200000c0

08006b54 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8006b58:	4b03      	ldr	r3, [pc, #12]	@ (8006b68 <HAL_GetTickFreq+0x14>)
 8006b5a:	781b      	ldrb	r3, [r3, #0]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	200000c4 	.word	0x200000c4

08006b6c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8006b70:	f7ff ff4a 	bl	8006a08 <LL_DBGMCU_EnableDBGSleepMode>
}
 8006b74:	bf00      	nop
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8006b7c:	f7ff ff54 	bl	8006a28 <LL_DBGMCU_EnableDBGStopMode>
}
 8006b80:	bf00      	nop
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <__NVIC_SetPriorityGrouping>:
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b94:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006bac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bb6:	4a04      	ldr	r2, [pc, #16]	@ (8006bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	60d3      	str	r3, [r2, #12]
}
 8006bbc:	bf00      	nop
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	e000ed00 	.word	0xe000ed00

08006bcc <__NVIC_GetPriorityGrouping>:
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bd0:	4b04      	ldr	r3, [pc, #16]	@ (8006be4 <__NVIC_GetPriorityGrouping+0x18>)
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	0a1b      	lsrs	r3, r3, #8
 8006bd6:	f003 0307 	and.w	r3, r3, #7
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	e000ed00 	.word	0xe000ed00

08006be8 <__NVIC_EnableIRQ>:
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	db0b      	blt.n	8006c12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bfa:	79fb      	ldrb	r3, [r7, #7]
 8006bfc:	f003 021f 	and.w	r2, r3, #31
 8006c00:	4907      	ldr	r1, [pc, #28]	@ (8006c20 <__NVIC_EnableIRQ+0x38>)
 8006c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c06:	095b      	lsrs	r3, r3, #5
 8006c08:	2001      	movs	r0, #1
 8006c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c12:	bf00      	nop
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	e000e100 	.word	0xe000e100

08006c24 <__NVIC_DisableIRQ>:
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	db12      	blt.n	8006c5c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	f003 021f 	and.w	r2, r3, #31
 8006c3c:	490a      	ldr	r1, [pc, #40]	@ (8006c68 <__NVIC_DisableIRQ+0x44>)
 8006c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c42:	095b      	lsrs	r3, r3, #5
 8006c44:	2001      	movs	r0, #1
 8006c46:	fa00 f202 	lsl.w	r2, r0, r2
 8006c4a:	3320      	adds	r3, #32
 8006c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006c50:	f3bf 8f4f 	dsb	sy
}
 8006c54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006c56:	f3bf 8f6f 	isb	sy
}
 8006c5a:	bf00      	nop
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	e000e100 	.word	0xe000e100

08006c6c <__NVIC_SetPendingIRQ>:
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	4603      	mov	r3, r0
 8006c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	db0c      	blt.n	8006c98 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c7e:	79fb      	ldrb	r3, [r7, #7]
 8006c80:	f003 021f 	and.w	r2, r3, #31
 8006c84:	4907      	ldr	r1, [pc, #28]	@ (8006ca4 <__NVIC_SetPendingIRQ+0x38>)
 8006c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8006c92:	3340      	adds	r3, #64	@ 0x40
 8006c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	e000e100 	.word	0xe000e100

08006ca8 <__NVIC_ClearPendingIRQ>:
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	db0c      	blt.n	8006cd4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	f003 021f 	and.w	r2, r3, #31
 8006cc0:	4907      	ldr	r1, [pc, #28]	@ (8006ce0 <__NVIC_ClearPendingIRQ+0x38>)
 8006cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cc6:	095b      	lsrs	r3, r3, #5
 8006cc8:	2001      	movs	r0, #1
 8006cca:	fa00 f202 	lsl.w	r2, r0, r2
 8006cce:	3360      	adds	r3, #96	@ 0x60
 8006cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	e000e100 	.word	0xe000e100

08006ce4 <__NVIC_SetPriority>:
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	4603      	mov	r3, r0
 8006cec:	6039      	str	r1, [r7, #0]
 8006cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	db0a      	blt.n	8006d0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	490c      	ldr	r1, [pc, #48]	@ (8006d30 <__NVIC_SetPriority+0x4c>)
 8006cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d02:	0112      	lsls	r2, r2, #4
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	440b      	add	r3, r1
 8006d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006d0c:	e00a      	b.n	8006d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	4908      	ldr	r1, [pc, #32]	@ (8006d34 <__NVIC_SetPriority+0x50>)
 8006d14:	79fb      	ldrb	r3, [r7, #7]
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	3b04      	subs	r3, #4
 8006d1c:	0112      	lsls	r2, r2, #4
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	440b      	add	r3, r1
 8006d22:	761a      	strb	r2, [r3, #24]
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	e000e100 	.word	0xe000e100
 8006d34:	e000ed00 	.word	0xe000ed00

08006d38 <NVIC_EncodePriority>:
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b089      	sub	sp, #36	@ 0x24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f1c3 0307 	rsb	r3, r3, #7
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	bf28      	it	cs
 8006d56:	2304      	movcs	r3, #4
 8006d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	2b06      	cmp	r3, #6
 8006d60:	d902      	bls.n	8006d68 <NVIC_EncodePriority+0x30>
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	3b03      	subs	r3, #3
 8006d66:	e000      	b.n	8006d6a <NVIC_EncodePriority+0x32>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	fa02 f303 	lsl.w	r3, r2, r3
 8006d76:	43da      	mvns	r2, r3
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	401a      	ands	r2, r3
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d80:	f04f 31ff 	mov.w	r1, #4294967295
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8a:	43d9      	mvns	r1, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d90:	4313      	orrs	r3, r2
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3724      	adds	r7, #36	@ 0x24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006db0:	d301      	bcc.n	8006db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006db2:	2301      	movs	r3, #1
 8006db4:	e00f      	b.n	8006dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006db6:	4a0a      	ldr	r2, [pc, #40]	@ (8006de0 <SysTick_Config+0x40>)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006dbe:	210f      	movs	r1, #15
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	f7ff ff8e 	bl	8006ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006dc8:	4b05      	ldr	r3, [pc, #20]	@ (8006de0 <SysTick_Config+0x40>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006dce:	4b04      	ldr	r3, [pc, #16]	@ (8006de0 <SysTick_Config+0x40>)
 8006dd0:	2207      	movs	r2, #7
 8006dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	e000e010 	.word	0xe000e010

08006de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff fec9 	bl	8006b84 <__NVIC_SetPriorityGrouping>
}
 8006df2:	bf00      	nop
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	4603      	mov	r3, r0
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607a      	str	r2, [r7, #4]
 8006e06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e08:	f7ff fee0 	bl	8006bcc <__NVIC_GetPriorityGrouping>
 8006e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	68b9      	ldr	r1, [r7, #8]
 8006e12:	6978      	ldr	r0, [r7, #20]
 8006e14:	f7ff ff90 	bl	8006d38 <NVIC_EncodePriority>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e1e:	4611      	mov	r1, r2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff ff5f 	bl	8006ce4 <__NVIC_SetPriority>
}
 8006e26:	bf00      	nop
 8006e28:	3718      	adds	r7, #24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b082      	sub	sp, #8
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	4603      	mov	r3, r0
 8006e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff fed3 	bl	8006be8 <__NVIC_EnableIRQ>
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b082      	sub	sp, #8
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	4603      	mov	r3, r0
 8006e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff fee3 	bl	8006c24 <__NVIC_DisableIRQ>
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff ff96 	bl	8006da0 <SysTick_Config>
 8006e74:	4603      	mov	r3, r0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	4603      	mov	r3, r0
 8006e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8006e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff feed 	bl	8006c6c <__NVIC_SetPendingIRQ>
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b082      	sub	sp, #8
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8006ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff fefd 	bl	8006ca8 <__NVIC_ClearPendingIRQ>
}
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e08e      	b.n	8006fe8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	4b47      	ldr	r3, [pc, #284]	@ (8006ff0 <HAL_DMA_Init+0x138>)
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d80f      	bhi.n	8006ef6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	4b45      	ldr	r3, [pc, #276]	@ (8006ff4 <HAL_DMA_Init+0x13c>)
 8006ede:	4413      	add	r3, r2
 8006ee0:	4a45      	ldr	r2, [pc, #276]	@ (8006ff8 <HAL_DMA_Init+0x140>)
 8006ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee6:	091b      	lsrs	r3, r3, #4
 8006ee8:	009a      	lsls	r2, r3, #2
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a42      	ldr	r2, [pc, #264]	@ (8006ffc <HAL_DMA_Init+0x144>)
 8006ef2:	641a      	str	r2, [r3, #64]	@ 0x40
 8006ef4:	e00e      	b.n	8006f14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	4b40      	ldr	r3, [pc, #256]	@ (8007000 <HAL_DMA_Init+0x148>)
 8006efe:	4413      	add	r3, r2
 8006f00:	4a3d      	ldr	r2, [pc, #244]	@ (8006ff8 <HAL_DMA_Init+0x140>)
 8006f02:	fba2 2303 	umull	r2, r3, r2, r3
 8006f06:	091b      	lsrs	r3, r3, #4
 8006f08:	009a      	lsls	r2, r3, #2
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a3c      	ldr	r2, [pc, #240]	@ (8007004 <HAL_DMA_Init+0x14c>)
 8006f12:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fa74 	bl	8007454 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f74:	d102      	bne.n	8006f7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f84:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006f88:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006f92:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d010      	beq.n	8006fbe <HAL_DMA_Init+0x106>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d80c      	bhi.n	8006fbe <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fa93 	bl	80074d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fae:	2200      	movs	r2, #0
 8006fb0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006fba:	605a      	str	r2, [r3, #4]
 8006fbc:	e008      	b.n	8006fd0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40020407 	.word	0x40020407
 8006ff4:	bffdfff8 	.word	0xbffdfff8
 8006ff8:	cccccccd 	.word	0xcccccccd
 8006ffc:	40020000 	.word	0x40020000
 8007000:	bffdfbf8 	.word	0xbffdfbf8
 8007004:	40020400 	.word	0x40020400

08007008 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <HAL_DMA_Start_IT+0x20>
 8007024:	2302      	movs	r3, #2
 8007026:	e066      	b.n	80070f6 <HAL_DMA_Start_IT+0xee>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b01      	cmp	r3, #1
 800703a:	d155      	bne.n	80070e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0201 	bic.w	r2, r2, #1
 8007058:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	68b9      	ldr	r1, [r7, #8]
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f9b9 	bl	80073d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706a:	2b00      	cmp	r3, #0
 800706c:	d008      	beq.n	8007080 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 020e 	orr.w	r2, r2, #14
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	e00f      	b.n	80070a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0204 	bic.w	r2, r2, #4
 800708e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 020a 	orr.w	r2, r2, #10
 800709e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d007      	beq.n	80070be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d007      	beq.n	80070d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f042 0201 	orr.w	r2, r2, #1
 80070e4:	601a      	str	r2, [r3, #0]
 80070e6:	e005      	b.n	80070f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80070f0:	2302      	movs	r3, #2
 80070f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e04f      	b.n	80071b0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d008      	beq.n	800712e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2204      	movs	r2, #4
 8007120:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e040      	b.n	80071b0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 020e 	bic.w	r2, r2, #14
 800713c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007148:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800714c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 0201 	bic.w	r2, r2, #1
 800715c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007162:	f003 021c 	and.w	r2, r3, #28
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716a:	2101      	movs	r1, #1
 800716c:	fa01 f202 	lsl.w	r2, r1, r2
 8007170:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800717a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00c      	beq.n	800719e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800718e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007192:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800719c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d005      	beq.n	80071e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2204      	movs	r2, #4
 80071d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	73fb      	strb	r3, [r7, #15]
 80071de:	e047      	b.n	8007270 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 020e 	bic.w	r2, r2, #14
 80071ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 0201 	bic.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800720a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800720e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007214:	f003 021c 	and.w	r2, r3, #28
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721c:	2101      	movs	r1, #1
 800721e:	fa01 f202 	lsl.w	r2, r1, r2
 8007222:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800722c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00c      	beq.n	8007250 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007240:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007244:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800724e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	4798      	blx	r3
    }
  }
  return status;
 8007270:	7bfb      	ldrb	r3, [r7, #15]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007296:	f003 031c 	and.w	r3, r3, #28
 800729a:	2204      	movs	r2, #4
 800729c:	409a      	lsls	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	4013      	ands	r3, r2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d026      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x7a>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	f003 0304 	and.w	r3, r3, #4
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d021      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0320 	and.w	r3, r3, #32
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d107      	bne.n	80072ce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 0204 	bic.w	r2, r2, #4
 80072cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d2:	f003 021c 	and.w	r2, r3, #28
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072da:	2104      	movs	r1, #4
 80072dc:	fa01 f202 	lsl.w	r2, r1, r2
 80072e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d071      	beq.n	80073ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80072f2:	e06c      	b.n	80073ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f8:	f003 031c 	and.w	r3, r3, #28
 80072fc:	2202      	movs	r2, #2
 80072fe:	409a      	lsls	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4013      	ands	r3, r2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d02e      	beq.n	8007366 <HAL_DMA_IRQHandler+0xec>
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d029      	beq.n	8007366 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0320 	and.w	r3, r3, #32
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10b      	bne.n	8007338 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 020a 	bic.w	r2, r2, #10
 800732e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800733c:	f003 021c 	and.w	r2, r3, #28
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007344:	2102      	movs	r1, #2
 8007346:	fa01 f202 	lsl.w	r2, r1, r2
 800734a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007358:	2b00      	cmp	r3, #0
 800735a:	d038      	beq.n	80073ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007364:	e033      	b.n	80073ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800736a:	f003 031c 	and.w	r3, r3, #28
 800736e:	2208      	movs	r2, #8
 8007370:	409a      	lsls	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4013      	ands	r3, r2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d02a      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x156>
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f003 0308 	and.w	r3, r3, #8
 8007380:	2b00      	cmp	r3, #0
 8007382:	d025      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 020e 	bic.w	r2, r2, #14
 8007392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007398:	f003 021c 	and.w	r2, r3, #28
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a0:	2101      	movs	r1, #1
 80073a2:	fa01 f202 	lsl.w	r2, r1, r2
 80073a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d004      	beq.n	80073d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80073ce:	bf00      	nop
 80073d0:	bf00      	nop
}
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80073ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d004      	beq.n	8007402 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007400:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007406:	f003 021c 	and.w	r2, r3, #28
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	2101      	movs	r1, #1
 8007410:	fa01 f202 	lsl.w	r2, r1, r2
 8007414:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	2b10      	cmp	r3, #16
 8007424:	d108      	bne.n	8007438 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007436:	e007      	b.n	8007448 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	60da      	str	r2, [r3, #12]
}
 8007448:	bf00      	nop
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	461a      	mov	r2, r3
 8007462:	4b17      	ldr	r3, [pc, #92]	@ (80074c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007464:	429a      	cmp	r2, r3
 8007466:	d80a      	bhi.n	800747e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800746c:	089b      	lsrs	r3, r3, #2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007474:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6493      	str	r3, [r2, #72]	@ 0x48
 800747c:	e007      	b.n	800748e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007482:	089b      	lsrs	r3, r3, #2
 8007484:	009a      	lsls	r2, r3, #2
 8007486:	4b0f      	ldr	r3, [pc, #60]	@ (80074c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007488:	4413      	add	r3, r2
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	3b08      	subs	r3, #8
 8007496:	4a0c      	ldr	r2, [pc, #48]	@ (80074c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007498:	fba2 2303 	umull	r2, r3, r2, r3
 800749c:	091b      	lsrs	r3, r3, #4
 800749e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a0a      	ldr	r2, [pc, #40]	@ (80074cc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80074a4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f003 031f 	and.w	r3, r3, #31
 80074ac:	2201      	movs	r2, #1
 80074ae:	409a      	lsls	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80074b4:	bf00      	nop
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	40020407 	.word	0x40020407
 80074c4:	4002081c 	.word	0x4002081c
 80074c8:	cccccccd 	.word	0xcccccccd
 80074cc:	40020880 	.word	0x40020880

080074d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074e0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	461a      	mov	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a09      	ldr	r2, [pc, #36]	@ (8007518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80074f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2201      	movs	r2, #1
 8007500:	409a      	lsls	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007506:	bf00      	nop
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	1000823f 	.word	0x1000823f
 8007518:	40020940 	.word	0x40020940

0800751c <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	0c1b      	lsrs	r3, r3, #16
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	2201      	movs	r2, #1
 800753a:	fa02 f303 	lsl.w	r3, r2, r3
 800753e:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	015b      	lsls	r3, r3, #5
 8007544:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8007548:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 800754c:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	601a      	str	r2, [r3, #0]
}
 8007554:	bf00      	nop
 8007556:	371c      	adds	r7, #28
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800756e:	4b1c      	ldr	r3, [pc, #112]	@ (80075e0 <HAL_FLASH_Program+0x80>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d101      	bne.n	800757a <HAL_FLASH_Program+0x1a>
 8007576:	2302      	movs	r3, #2
 8007578:	e02d      	b.n	80075d6 <HAL_FLASH_Program+0x76>
 800757a:	4b19      	ldr	r3, [pc, #100]	@ (80075e0 <HAL_FLASH_Program+0x80>)
 800757c:	2201      	movs	r2, #1
 800757e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007580:	4b17      	ldr	r3, [pc, #92]	@ (80075e0 <HAL_FLASH_Program+0x80>)
 8007582:	2200      	movs	r2, #0
 8007584:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007586:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800758a:	f000 f869 	bl	8007660 <FLASH_WaitForLastOperation>
 800758e:	4603      	mov	r3, r0
 8007590:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d11a      	bne.n	80075ce <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d105      	bne.n	80075aa <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800759e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a2:	68b8      	ldr	r0, [r7, #8]
 80075a4:	f000 f8ca 	bl	800773c <FLASH_Program_DoubleWord>
 80075a8:	e004      	b.n	80075b4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	4619      	mov	r1, r3
 80075ae:	68b8      	ldr	r0, [r7, #8]
 80075b0:	f021 fd94 	bl	80290dc <_etext>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80075b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80075b8:	f000 f852 	bl	8007660 <FLASH_WaitForLastOperation>
 80075bc:	4603      	mov	r3, r0
 80075be:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80075c0:	4b08      	ldr	r3, [pc, #32]	@ (80075e4 <HAL_FLASH_Program+0x84>)
 80075c2:	695a      	ldr	r2, [r3, #20]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	43db      	mvns	r3, r3
 80075c8:	4906      	ldr	r1, [pc, #24]	@ (80075e4 <HAL_FLASH_Program+0x84>)
 80075ca:	4013      	ands	r3, r2
 80075cc:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80075ce:	4b04      	ldr	r3, [pc, #16]	@ (80075e0 <HAL_FLASH_Program+0x80>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20004694 	.word	0x20004694
 80075e4:	58004000 	.word	0x58004000

080075e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80075f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007620 <HAL_FLASH_Unlock+0x38>)
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	da0b      	bge.n	8007612 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80075fa:	4b09      	ldr	r3, [pc, #36]	@ (8007620 <HAL_FLASH_Unlock+0x38>)
 80075fc:	4a09      	ldr	r2, [pc, #36]	@ (8007624 <HAL_FLASH_Unlock+0x3c>)
 80075fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007600:	4b07      	ldr	r3, [pc, #28]	@ (8007620 <HAL_FLASH_Unlock+0x38>)
 8007602:	4a09      	ldr	r2, [pc, #36]	@ (8007628 <HAL_FLASH_Unlock+0x40>)
 8007604:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007606:	4b06      	ldr	r3, [pc, #24]	@ (8007620 <HAL_FLASH_Unlock+0x38>)
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	2b00      	cmp	r3, #0
 800760c:	da01      	bge.n	8007612 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007612:	79fb      	ldrb	r3, [r7, #7]
}
 8007614:	4618      	mov	r0, r3
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	58004000 	.word	0x58004000
 8007624:	45670123 	.word	0x45670123
 8007628:	cdef89ab 	.word	0xcdef89ab

0800762c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007636:	4b09      	ldr	r3, [pc, #36]	@ (800765c <HAL_FLASH_Lock+0x30>)
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	4a08      	ldr	r2, [pc, #32]	@ (800765c <HAL_FLASH_Lock+0x30>)
 800763c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007640:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8007642:	4b06      	ldr	r3, [pc, #24]	@ (800765c <HAL_FLASH_Lock+0x30>)
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	2b00      	cmp	r3, #0
 8007648:	db01      	blt.n	800764e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800764e:	79fb      	ldrb	r3, [r7, #7]
}
 8007650:	4618      	mov	r0, r3
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	58004000 	.word	0x58004000

08007660 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8007668:	f7ff fa5c 	bl	8006b24 <HAL_GetTick>
 800766c:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800766e:	e009      	b.n	8007684 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8007670:	f7ff fa58 	bl	8006b24 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	429a      	cmp	r2, r3
 800767e:	d801      	bhi.n	8007684 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e053      	b.n	800772c <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007684:	4b2b      	ldr	r3, [pc, #172]	@ (8007734 <FLASH_WaitForLastOperation+0xd4>)
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800768c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007690:	d0ee      	beq.n	8007670 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8007692:	4b28      	ldr	r3, [pc, #160]	@ (8007734 <FLASH_WaitForLastOperation+0xd4>)
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80076a2:	4b24      	ldr	r3, [pc, #144]	@ (8007734 <FLASH_WaitForLastOperation+0xd4>)
 80076a4:	2201      	movs	r2, #1
 80076a6:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d007      	beq.n	80076c2 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80076b2:	4b20      	ldr	r3, [pc, #128]	@ (8007734 <FLASH_WaitForLastOperation+0xd4>)
 80076b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80076b8:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80076c0:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80076c8:	4013      	ands	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d2:	d307      	bcc.n	80076e4 <FLASH_WaitForLastOperation+0x84>
 80076d4:	4b17      	ldr	r3, [pc, #92]	@ (8007734 <FLASH_WaitForLastOperation+0xd4>)
 80076d6:	699a      	ldr	r2, [r3, #24]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80076de:	4915      	ldr	r1, [pc, #84]	@ (8007734 <FLASH_WaitForLastOperation+0xd4>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	618b      	str	r3, [r1, #24]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d004      	beq.n	80076f8 <FLASH_WaitForLastOperation+0x98>
 80076ee:	4a11      	ldr	r2, [pc, #68]	@ (8007734 <FLASH_WaitForLastOperation+0xd4>)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80076f6:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00e      	beq.n	800771c <FLASH_WaitForLastOperation+0xbc>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80076fe:	4a0e      	ldr	r2, [pc, #56]	@ (8007738 <FLASH_WaitForLastOperation+0xd8>)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e011      	b.n	800772c <FLASH_WaitForLastOperation+0xcc>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8007708:	f7ff fa0c 	bl	8006b24 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	429a      	cmp	r2, r3
 8007716:	d801      	bhi.n	800771c <FLASH_WaitForLastOperation+0xbc>
    {
      return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e007      	b.n	800772c <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800771c:	4b05      	ldr	r3, [pc, #20]	@ (8007734 <FLASH_WaitForLastOperation+0xd4>)
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007724:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007728:	d0ee      	beq.n	8007708 <FLASH_WaitForLastOperation+0xa8>
    }
  }

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	58004000 	.word	0x58004000
 8007738:	20004694 	.word	0x20004694

0800773c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007748:	4b0e      	ldr	r3, [pc, #56]	@ (8007784 <FLASH_Program_DoubleWord+0x48>)
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	4a0d      	ldr	r2, [pc, #52]	@ (8007784 <FLASH_Program_DoubleWord+0x48>)
 800774e:	f043 0301 	orr.w	r3, r3, #1
 8007752:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800775a:	f3bf 8f6f 	isb	sy
}
 800775e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007760:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	000a      	movs	r2, r1
 800776e:	2300      	movs	r3, #0
 8007770:	68f9      	ldr	r1, [r7, #12]
 8007772:	3104      	adds	r1, #4
 8007774:	4613      	mov	r3, r2
 8007776:	600b      	str	r3, [r1, #0]
}
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	58004000 	.word	0x58004000

08007788 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007792:	4b24      	ldr	r3, [pc, #144]	@ (8007824 <HAL_FLASHEx_Erase+0x9c>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d101      	bne.n	800779e <HAL_FLASHEx_Erase+0x16>
 800779a:	2302      	movs	r3, #2
 800779c:	e03d      	b.n	800781a <HAL_FLASHEx_Erase+0x92>
 800779e:	4b21      	ldr	r3, [pc, #132]	@ (8007824 <HAL_FLASHEx_Erase+0x9c>)
 80077a0:	2201      	movs	r2, #1
 80077a2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80077a4:	4b1f      	ldr	r3, [pc, #124]	@ (8007824 <HAL_FLASHEx_Erase+0x9c>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80077aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80077ae:	f7ff ff57 	bl	8007660 <FLASH_WaitForLastOperation>
 80077b2:	4603      	mov	r3, r0
 80077b4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d12a      	bne.n	8007812 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d124      	bne.n	800780e <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ca:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	60bb      	str	r3, [r7, #8]
 80077d2:	e012      	b.n	80077fa <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80077d4:	68b8      	ldr	r0, [r7, #8]
 80077d6:	f000 f827 	bl	8007828 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80077da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80077de:	f7ff ff3f 	bl	8007660 <FLASH_WaitForLastOperation>
 80077e2:	4603      	mov	r3, r0
 80077e4:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	601a      	str	r2, [r3, #0]
          break;
 80077f2:	e00a      	b.n	800780a <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	3301      	adds	r3, #1
 80077f8:	60bb      	str	r3, [r7, #8]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	4413      	add	r3, r2
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	429a      	cmp	r2, r3
 8007808:	d3e4      	bcc.n	80077d4 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800780a:	f000 f86f 	bl	80078ec <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800780e:	f000 f825 	bl	800785c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007812:	4b04      	ldr	r3, [pc, #16]	@ (8007824 <HAL_FLASHEx_Erase+0x9c>)
 8007814:	2200      	movs	r2, #0
 8007816:	701a      	strb	r2, [r3, #0]

  return status;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20004694 	.word	0x20004694

08007828 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8007830:	4b09      	ldr	r3, [pc, #36]	@ (8007858 <FLASH_PageErase+0x30>)
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	4313      	orrs	r3, r2
 800783e:	4a06      	ldr	r2, [pc, #24]	@ (8007858 <FLASH_PageErase+0x30>)
 8007840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007844:	f043 0302 	orr.w	r3, r3, #2
 8007848:	6153      	str	r3, [r2, #20]
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	58004000 	.word	0x58004000

0800785c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8007860:	4b21      	ldr	r3, [pc, #132]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800786c:	d117      	bne.n	800789e <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800786e:	4b1e      	ldr	r3, [pc, #120]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a1d      	ldr	r2, [pc, #116]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 8007874:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007878:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800787a:	4b1b      	ldr	r3, [pc, #108]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a1a      	ldr	r2, [pc, #104]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 8007880:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	4b18      	ldr	r3, [pc, #96]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a17      	ldr	r2, [pc, #92]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 800788c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007890:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007892:	4b15      	ldr	r3, [pc, #84]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a14      	ldr	r2, [pc, #80]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 8007898:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800789c:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800789e:	4b12      	ldr	r3, [pc, #72]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078aa:	d117      	bne.n	80078dc <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80078ac:	4b0e      	ldr	r3, [pc, #56]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a0d      	ldr	r2, [pc, #52]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 80078b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80078b6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80078b8:	4b0b      	ldr	r3, [pc, #44]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a0a      	ldr	r2, [pc, #40]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 80078be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	4b08      	ldr	r3, [pc, #32]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a07      	ldr	r2, [pc, #28]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 80078ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078ce:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80078d0:	4b05      	ldr	r3, [pc, #20]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a04      	ldr	r2, [pc, #16]	@ (80078e8 <FLASH_FlushCaches+0x8c>)
 80078d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80078da:	6013      	str	r3, [r2, #0]
  }
}
 80078dc:	bf00      	nop
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	58004000 	.word	0x58004000

080078ec <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80078f0:	4b06      	ldr	r3, [pc, #24]	@ (800790c <FLASH_AcknowledgePageErase+0x20>)
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	4a05      	ldr	r2, [pc, #20]	@ (800790c <FLASH_AcknowledgePageErase+0x20>)
 80078f6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80078fa:	f023 0302 	bic.w	r3, r3, #2
 80078fe:	6153      	str	r3, [r2, #20]
}
 8007900:	bf00      	nop
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	58004000 	.word	0x58004000

08007910 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800791a:	2300      	movs	r3, #0
 800791c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800791e:	e14c      	b.n	8007bba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	2101      	movs	r1, #1
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	fa01 f303 	lsl.w	r3, r1, r3
 800792c:	4013      	ands	r3, r2
 800792e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 813e 	beq.w	8007bb4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	2b01      	cmp	r3, #1
 8007942:	d005      	beq.n	8007950 <HAL_GPIO_Init+0x40>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f003 0303 	and.w	r3, r3, #3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d130      	bne.n	80079b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	2203      	movs	r2, #3
 800795c:	fa02 f303 	lsl.w	r3, r2, r3
 8007960:	43db      	mvns	r3, r3
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	4013      	ands	r3, r2
 8007966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	68da      	ldr	r2, [r3, #12]
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	fa02 f303 	lsl.w	r3, r2, r3
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	4313      	orrs	r3, r2
 8007978:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007986:	2201      	movs	r2, #1
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	43db      	mvns	r3, r3
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	4013      	ands	r3, r2
 8007994:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	091b      	lsrs	r3, r3, #4
 800799c:	f003 0201 	and.w	r2, r3, #1
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	fa02 f303 	lsl.w	r3, r2, r3
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d017      	beq.n	80079ee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	2203      	movs	r2, #3
 80079ca:	fa02 f303 	lsl.w	r3, r2, r3
 80079ce:	43db      	mvns	r3, r3
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4013      	ands	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	689a      	ldr	r2, [r3, #8]
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	fa02 f303 	lsl.w	r3, r2, r3
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d123      	bne.n	8007a42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	08da      	lsrs	r2, r3, #3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3208      	adds	r2, #8
 8007a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f003 0307 	and.w	r3, r3, #7
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	220f      	movs	r2, #15
 8007a12:	fa02 f303 	lsl.w	r3, r2, r3
 8007a16:	43db      	mvns	r3, r3
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	691a      	ldr	r2, [r3, #16]
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f003 0307 	and.w	r3, r3, #7
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	08da      	lsrs	r2, r3, #3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3208      	adds	r2, #8
 8007a3c:	6939      	ldr	r1, [r7, #16]
 8007a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	005b      	lsls	r3, r3, #1
 8007a4c:	2203      	movs	r2, #3
 8007a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a52:	43db      	mvns	r3, r3
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	4013      	ands	r3, r2
 8007a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f003 0203 	and.w	r2, r3, #3
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6a:	693a      	ldr	r2, [r7, #16]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 8098 	beq.w	8007bb4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007a84:	4a54      	ldr	r2, [pc, #336]	@ (8007bd8 <HAL_GPIO_Init+0x2c8>)
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	089b      	lsrs	r3, r3, #2
 8007a8a:	3302      	adds	r3, #2
 8007a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f003 0303 	and.w	r3, r3, #3
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	220f      	movs	r2, #15
 8007a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa0:	43db      	mvns	r3, r3
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007aae:	d019      	beq.n	8007ae4 <HAL_GPIO_Init+0x1d4>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a4a      	ldr	r2, [pc, #296]	@ (8007bdc <HAL_GPIO_Init+0x2cc>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d013      	beq.n	8007ae0 <HAL_GPIO_Init+0x1d0>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a49      	ldr	r2, [pc, #292]	@ (8007be0 <HAL_GPIO_Init+0x2d0>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00d      	beq.n	8007adc <HAL_GPIO_Init+0x1cc>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a48      	ldr	r2, [pc, #288]	@ (8007be4 <HAL_GPIO_Init+0x2d4>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d007      	beq.n	8007ad8 <HAL_GPIO_Init+0x1c8>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a47      	ldr	r2, [pc, #284]	@ (8007be8 <HAL_GPIO_Init+0x2d8>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d101      	bne.n	8007ad4 <HAL_GPIO_Init+0x1c4>
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	e008      	b.n	8007ae6 <HAL_GPIO_Init+0x1d6>
 8007ad4:	2307      	movs	r3, #7
 8007ad6:	e006      	b.n	8007ae6 <HAL_GPIO_Init+0x1d6>
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e004      	b.n	8007ae6 <HAL_GPIO_Init+0x1d6>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e002      	b.n	8007ae6 <HAL_GPIO_Init+0x1d6>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e000      	b.n	8007ae6 <HAL_GPIO_Init+0x1d6>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	f002 0203 	and.w	r2, r2, #3
 8007aec:	0092      	lsls	r2, r2, #2
 8007aee:	4093      	lsls	r3, r2
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007af6:	4938      	ldr	r1, [pc, #224]	@ (8007bd8 <HAL_GPIO_Init+0x2c8>)
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	089b      	lsrs	r3, r3, #2
 8007afc:	3302      	adds	r3, #2
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b04:	4b39      	ldr	r3, [pc, #228]	@ (8007bec <HAL_GPIO_Init+0x2dc>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	43db      	mvns	r3, r3
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4013      	ands	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d003      	beq.n	8007b28 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007b28:	4a30      	ldr	r2, [pc, #192]	@ (8007bec <HAL_GPIO_Init+0x2dc>)
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8007bec <HAL_GPIO_Init+0x2dc>)
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	43db      	mvns	r3, r3
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d003      	beq.n	8007b52 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007b52:	4a26      	ldr	r2, [pc, #152]	@ (8007bec <HAL_GPIO_Init+0x2dc>)
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007b58:	4b24      	ldr	r3, [pc, #144]	@ (8007bec <HAL_GPIO_Init+0x2dc>)
 8007b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	43db      	mvns	r3, r3
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4013      	ands	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8007bec <HAL_GPIO_Init+0x2dc>)
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8007b86:	4b19      	ldr	r3, [pc, #100]	@ (8007bec <HAL_GPIO_Init+0x2dc>)
 8007b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	43db      	mvns	r3, r3
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	4013      	ands	r3, r2
 8007b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007bac:	4a0f      	ldr	r2, [pc, #60]	@ (8007bec <HAL_GPIO_Init+0x2dc>)
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f47f aeab 	bne.w	8007920 <HAL_GPIO_Init+0x10>
  }
}
 8007bca:	bf00      	nop
 8007bcc:	bf00      	nop
 8007bce:	371c      	adds	r7, #28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr
 8007bd8:	40010000 	.word	0x40010000
 8007bdc:	48000400 	.word	0x48000400
 8007be0:	48000800 	.word	0x48000800
 8007be4:	48000c00 	.word	0x48000c00
 8007be8:	48001000 	.word	0x48001000
 8007bec:	58000800 	.word	0x58000800

08007bf0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	691a      	ldr	r2, [r3, #16]
 8007c00:	887b      	ldrh	r3, [r7, #2]
 8007c02:	4013      	ands	r3, r2
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	73fb      	strb	r3, [r7, #15]
 8007c0c:	e001      	b.n	8007c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	807b      	strh	r3, [r7, #2]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c30:	787b      	ldrb	r3, [r7, #1]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007c36:	887a      	ldrh	r2, [r7, #2]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007c3c:	e002      	b.n	8007c44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007c3e:	887a      	ldrh	r2, [r7, #2]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	4603      	mov	r3, r0
 8007c58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007c5a:	4b08      	ldr	r3, [pc, #32]	@ (8007c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c5c:	68da      	ldr	r2, [r3, #12]
 8007c5e:	88fb      	ldrh	r3, [r7, #6]
 8007c60:	4013      	ands	r3, r2
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d006      	beq.n	8007c74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c66:	4a05      	ldr	r2, [pc, #20]	@ (8007c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c68:	88fb      	ldrh	r3, [r7, #6]
 8007c6a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c6c:	88fb      	ldrh	r3, [r7, #6]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7f9 fe5f 	bl	8001932 <HAL_GPIO_EXTI_Callback>
  }
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	58000800 	.word	0x58000800

08007c80 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8007c86:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb0 <HAL_HSEM_IRQHandler+0x30>)
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8007c8c:	4b08      	ldr	r3, [pc, #32]	@ (8007cb0 <HAL_HSEM_IRQHandler+0x30>)
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	43db      	mvns	r3, r3
 8007c94:	4906      	ldr	r1, [pc, #24]	@ (8007cb0 <HAL_HSEM_IRQHandler+0x30>)
 8007c96:	4013      	ands	r3, r2
 8007c98:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8007c9a:	4a05      	ldr	r2, [pc, #20]	@ (8007cb0 <HAL_HSEM_IRQHandler+0x30>)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f807 	bl	8007cb4 <HAL_HSEM_FreeCallback>
}
 8007ca6:	bf00      	nop
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	58001500 	.word	0x58001500

08007cb4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d01e      	beq.n	8007d18 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8007cda:	4b13      	ldr	r3, [pc, #76]	@ (8007d28 <HAL_IPCC_Init+0x60>)
 8007cdc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d102      	bne.n	8007cf0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7fb fad0 	bl	8003290 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8007cf0:	68b8      	ldr	r0, [r7, #8]
 8007cf2:	f000 f85b 	bl	8007dac <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f82c 	bl	8007d60 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8007d16:	e001      	b.n	8007d1c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	58000c00 	.word	0x58000c00

08007d2c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8007d3a:	bf00      	nop
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b085      	sub	sp, #20
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	4613      	mov	r3, r2
 8007d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8007d54:	bf00      	nop
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	e00f      	b.n	8007d8e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	4413      	add	r3, r2
 8007d76:	4a0b      	ldr	r2, [pc, #44]	@ (8007da4 <IPCC_SetDefaultCallbacks+0x44>)
 8007d78:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3306      	adds	r3, #6
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	4a08      	ldr	r2, [pc, #32]	@ (8007da8 <IPCC_SetDefaultCallbacks+0x48>)
 8007d86:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	60fb      	str	r3, [r7, #12]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b05      	cmp	r3, #5
 8007d92:	d9ec      	bls.n	8007d6e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	08007d2d 	.word	0x08007d2d
 8007da8:	08007d47 	.word	0x08007d47

08007dac <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8007dc0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	223f      	movs	r2, #63	@ 0x3f
 8007dc6:	609a      	str	r2, [r3, #8]
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007dd8:	4b05      	ldr	r3, [pc, #20]	@ (8007df0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a04      	ldr	r2, [pc, #16]	@ (8007df0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007de2:	6013      	str	r3, [r2, #0]
}
 8007de4:	bf00      	nop
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	58000400 	.word	0x58000400

08007df4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007df4:	b480      	push	{r7}
 8007df6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007df8:	4b04      	ldr	r3, [pc, #16]	@ (8007e0c <HAL_PWREx_GetVoltageRange+0x18>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	58000400 	.word	0x58000400

08007e10 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007e10:	b480      	push	{r7}
 8007e12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e22:	d101      	bne.n	8007e28 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007e24:	2301      	movs	r3, #1
 8007e26:	e000      	b.n	8007e2a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <LL_RCC_HSE_Enable>:
{
 8007e34:	b480      	push	{r7}
 8007e36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e46:	6013      	str	r3, [r2, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <LL_RCC_HSE_Disable>:
{
 8007e52:	b480      	push	{r7}
 8007e54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e64:	6013      	str	r3, [r2, #0]
}
 8007e66:	bf00      	nop
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <LL_RCC_HSE_IsReady>:
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e82:	d101      	bne.n	8007e88 <LL_RCC_HSE_IsReady+0x18>
 8007e84:	2301      	movs	r3, #1
 8007e86:	e000      	b.n	8007e8a <LL_RCC_HSE_IsReady+0x1a>
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <LL_RCC_HSI_Enable>:
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ea6:	6013      	str	r3, [r2, #0]
}
 8007ea8:	bf00      	nop
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <LL_RCC_HSI_Disable>:
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007eb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ec4:	6013      	str	r3, [r2, #0]
}
 8007ec6:	bf00      	nop
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <LL_RCC_HSI_IsReady>:
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ee2:	d101      	bne.n	8007ee8 <LL_RCC_HSI_IsReady+0x18>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e000      	b.n	8007eea <LL_RCC_HSI_IsReady+0x1a>
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	061b      	lsls	r3, r3, #24
 8007f0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	604b      	str	r3, [r1, #4]
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <LL_RCC_HSI48_Enable>:
{
 8007f1e:	b480      	push	{r7}
 8007f20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f2e:	f043 0301 	orr.w	r3, r3, #1
 8007f32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8007f36:	bf00      	nop
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <LL_RCC_HSI48_Disable>:
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f50:	f023 0301 	bic.w	r3, r3, #1
 8007f54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8007f58:	bf00      	nop
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <LL_RCC_HSI48_IsReady>:
{
 8007f62:	b480      	push	{r7}
 8007f64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d101      	bne.n	8007f7a <LL_RCC_HSI48_IsReady+0x18>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <LL_RCC_HSI48_IsReady+0x1a>
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <LL_RCC_LSE_Enable>:
{
 8007f86:	b480      	push	{r7}
 8007f88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f96:	f043 0301 	orr.w	r3, r3, #1
 8007f9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007f9e:	bf00      	nop
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <LL_RCC_LSE_Disable>:
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fb8:	f023 0301 	bic.w	r3, r3, #1
 8007fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007fc0:	bf00      	nop
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <LL_RCC_LSE_EnableBypass>:
{
 8007fca:	b480      	push	{r7}
 8007fcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fda:	f043 0304 	orr.w	r3, r3, #4
 8007fde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007fe2:	bf00      	nop
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <LL_RCC_LSE_DisableBypass>:
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ff8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ffc:	f023 0304 	bic.w	r3, r3, #4
 8008000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008004:	bf00      	nop
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <LL_RCC_LSE_IsReady>:
{
 800800e:	b480      	push	{r7}
 8008010:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800801a:	f003 0302 	and.w	r3, r3, #2
 800801e:	2b02      	cmp	r3, #2
 8008020:	d101      	bne.n	8008026 <LL_RCC_LSE_IsReady+0x18>
 8008022:	2301      	movs	r3, #1
 8008024:	e000      	b.n	8008028 <LL_RCC_LSE_IsReady+0x1a>
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <LL_RCC_LSI1_Enable>:
{
 8008032:	b480      	push	{r7}
 8008034:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800803a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800803e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008042:	f043 0301 	orr.w	r3, r3, #1
 8008046:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800804a:	bf00      	nop
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <LL_RCC_LSI1_Disable>:
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800805c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008060:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008064:	f023 0301 	bic.w	r3, r3, #1
 8008068:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800806c:	bf00      	nop
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <LL_RCC_LSI1_IsReady>:
{
 8008076:	b480      	push	{r7}
 8008078:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800807a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800807e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b02      	cmp	r3, #2
 8008088:	d101      	bne.n	800808e <LL_RCC_LSI1_IsReady+0x18>
 800808a:	2301      	movs	r3, #1
 800808c:	e000      	b.n	8008090 <LL_RCC_LSI1_IsReady+0x1a>
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <LL_RCC_LSI2_Enable>:
{
 800809a:	b480      	push	{r7}
 800809c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800809e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080aa:	f043 0304 	orr.w	r3, r3, #4
 80080ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80080b2:	bf00      	nop
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <LL_RCC_LSI2_Disable>:
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80080c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080cc:	f023 0304 	bic.w	r3, r3, #4
 80080d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80080d4:	bf00      	nop
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <LL_RCC_LSI2_IsReady>:
{
 80080de:	b480      	push	{r7}
 80080e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80080e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080ea:	f003 0308 	and.w	r3, r3, #8
 80080ee:	2b08      	cmp	r3, #8
 80080f0:	d101      	bne.n	80080f6 <LL_RCC_LSI2_IsReady+0x18>
 80080f2:	2301      	movs	r3, #1
 80080f4:	e000      	b.n	80080f8 <LL_RCC_LSI2_IsReady+0x1a>
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <LL_RCC_LSI2_SetTrimming>:
{
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800810a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800810e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008112:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	021b      	lsls	r3, r3, #8
 800811a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800811e:	4313      	orrs	r3, r2
 8008120:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <LL_RCC_MSI_Enable>:
{
 8008130:	b480      	push	{r7}
 8008132:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800813e:	f043 0301 	orr.w	r3, r3, #1
 8008142:	6013      	str	r3, [r2, #0]
}
 8008144:	bf00      	nop
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <LL_RCC_MSI_Disable>:
{
 800814e:	b480      	push	{r7}
 8008150:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8008152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800815c:	f023 0301 	bic.w	r3, r3, #1
 8008160:	6013      	str	r3, [r2, #0]
}
 8008162:	bf00      	nop
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <LL_RCC_MSI_IsReady>:
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b02      	cmp	r3, #2
 800817c:	d101      	bne.n	8008182 <LL_RCC_MSI_IsReady+0x16>
 800817e:	2301      	movs	r3, #1
 8008180:	e000      	b.n	8008184 <LL_RCC_MSI_IsReady+0x18>
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <LL_RCC_MSI_SetRange>:
{
 800818e:	b480      	push	{r7}
 8008190:	b083      	sub	sp, #12
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80081a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	600b      	str	r3, [r1, #0]
}
 80081aa:	bf00      	nop
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <LL_RCC_MSI_GetRange>:
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80081bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081c6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2bb0      	cmp	r3, #176	@ 0xb0
 80081cc:	d901      	bls.n	80081d2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80081ce:	23b0      	movs	r3, #176	@ 0xb0
 80081d0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80081d2:	687b      	ldr	r3, [r7, #4]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80081e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	021b      	lsls	r3, r3, #8
 80081f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081fa:	4313      	orrs	r3, r2
 80081fc:	604b      	str	r3, [r1, #4]
}
 80081fe:	bf00      	nop
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <LL_RCC_SetSysClkSource>:
{
 800820a:	b480      	push	{r7}
 800820c:	b083      	sub	sp, #12
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f023 0203 	bic.w	r2, r3, #3
 800821c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4313      	orrs	r3, r2
 8008224:	608b      	str	r3, [r1, #8]
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <LL_RCC_GetSysClkSource>:
{
 8008232:	b480      	push	{r7}
 8008234:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f003 030c 	and.w	r3, r3, #12
}
 8008240:	4618      	mov	r0, r3
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <LL_RCC_SetAHBPrescaler>:
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800825c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4313      	orrs	r3, r2
 8008264:	608b      	str	r3, [r1, #8]
}
 8008266:	bf00      	nop
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <LL_C2_RCC_SetAHBPrescaler>:
{
 8008272:	b480      	push	{r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800827a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800827e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008282:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008286:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4313      	orrs	r3, r2
 800828e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8008292:	bf00      	nop
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <LL_RCC_SetAHB4Prescaler>:
{
 800829e:	b480      	push	{r7}
 80082a0:	b083      	sub	sp, #12
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80082a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80082ae:	f023 020f 	bic.w	r2, r3, #15
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	091b      	lsrs	r3, r3, #4
 80082b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082ba:	4313      	orrs	r3, r2
 80082bc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <LL_RCC_SetAPB1Prescaler>:
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80082d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80082de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	608b      	str	r3, [r1, #8]
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <LL_RCC_SetAPB2Prescaler>:
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80082fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008306:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4313      	orrs	r3, r2
 800830e:	608b      	str	r3, [r1, #8]
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <LL_RCC_GetAHBPrescaler>:
{
 800831c:	b480      	push	{r7}
 800831e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800832a:	4618      	mov	r0, r3
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <LL_RCC_GetAHB4Prescaler>:
{
 8008334:	b480      	push	{r7}
 8008336:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800833c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008340:	011b      	lsls	r3, r3, #4
 8008342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8008346:	4618      	mov	r0, r3
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <LL_RCC_GetAPB1Prescaler>:
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800835e:	4618      	mov	r0, r3
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <LL_RCC_GetAPB2Prescaler>:
{
 8008368:	b480      	push	{r7}
 800836a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800836c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8008376:	4618      	mov	r0, r3
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <LL_RCC_PLL_Enable>:
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800838e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008392:	6013      	str	r3, [r2, #0]
}
 8008394:	bf00      	nop
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <LL_RCC_PLL_Disable>:
{
 800839e:	b480      	push	{r7}
 80083a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80083a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80083ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80083b0:	6013      	str	r3, [r2, #0]
}
 80083b2:	bf00      	nop
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <LL_RCC_PLL_IsReady>:
{
 80083bc:	b480      	push	{r7}
 80083be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80083c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083ce:	d101      	bne.n	80083d4 <LL_RCC_PLL_IsReady+0x18>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e000      	b.n	80083d6 <LL_RCC_PLL_IsReady+0x1a>
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <LL_RCC_PLL_GetN>:
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80083e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	0a1b      	lsrs	r3, r3, #8
 80083ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <LL_RCC_PLL_GetR>:
{
 80083fa:	b480      	push	{r7}
 80083fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80083fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8008408:	4618      	mov	r0, r3
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <LL_RCC_PLL_GetDivider>:
{
 8008412:	b480      	push	{r7}
 8008414:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8008420:	4618      	mov	r0, r3
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <LL_RCC_PLL_GetMainSource>:
{
 800842a:	b480      	push	{r7}
 800842c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800842e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f003 0303 	and.w	r3, r3, #3
}
 8008438:	4618      	mov	r0, r3
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <LL_RCC_IsActiveFlag_HPRE>:
{
 8008442:	b480      	push	{r7}
 8008444:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008446:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008454:	d101      	bne.n	800845a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008456:	2301      	movs	r3, #1
 8008458:	e000      	b.n	800845c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8008466:	b480      	push	{r7}
 8008468:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800846a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800846e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008476:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800847a:	d101      	bne.n	8008480 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800847c:	2301      	movs	r3, #1
 800847e:	e000      	b.n	8008482 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008494:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800849c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084a0:	d101      	bne.n	80084a6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e000      	b.n	80084a8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80084b2:	b480      	push	{r7}
 80084b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80084b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084c4:	d101      	bne.n	80084ca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80084c6:	2301      	movs	r3, #1
 80084c8:	e000      	b.n	80084cc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80084d6:	b480      	push	{r7}
 80084d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80084da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80084e8:	d101      	bne.n	80084ee <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
	...

080084fc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084fc:	b590      	push	{r4, r7, lr}
 80084fe:	b08d      	sub	sp, #52	@ 0x34
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e363      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0320 	and.w	r3, r3, #32
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 808d 	beq.w	8008636 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800851c:	f7ff fe89 	bl	8008232 <LL_RCC_GetSysClkSource>
 8008520:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008522:	f7ff ff82 	bl	800842a <LL_RCC_PLL_GetMainSource>
 8008526:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800852a:	2b00      	cmp	r3, #0
 800852c:	d005      	beq.n	800853a <HAL_RCC_OscConfig+0x3e>
 800852e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008530:	2b0c      	cmp	r3, #12
 8008532:	d147      	bne.n	80085c4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008536:	2b01      	cmp	r3, #1
 8008538:	d144      	bne.n	80085c4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e347      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800854a:	f7ff fe34 	bl	80081b6 <LL_RCC_MSI_GetRange>
 800854e:	4603      	mov	r3, r0
 8008550:	429c      	cmp	r4, r3
 8008552:	d914      	bls.n	800857e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008558:	4618      	mov	r0, r3
 800855a:	f000 fd2f 	bl	8008fbc <RCC_SetFlashLatencyFromMSIRange>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e336      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff fe0e 	bl	800818e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff fe32 	bl	80081e0 <LL_RCC_MSI_SetCalibTrimming>
 800857c:	e013      	b.n	80085a6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008582:	4618      	mov	r0, r3
 8008584:	f7ff fe03 	bl	800818e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a1b      	ldr	r3, [r3, #32]
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff fe27 	bl	80081e0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fd10 	bl	8008fbc <RCC_SetFlashLatencyFromMSIRange>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e317      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80085a6:	f000 fcc9 	bl	8008f3c <HAL_RCC_GetHCLKFreq>
 80085aa:	4603      	mov	r3, r0
 80085ac:	4aa4      	ldr	r2, [pc, #656]	@ (8008840 <HAL_RCC_OscConfig+0x344>)
 80085ae:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80085b0:	4ba4      	ldr	r3, [pc, #656]	@ (8008844 <HAL_RCC_OscConfig+0x348>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe fa67 	bl	8006a88 <HAL_InitTick>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d039      	beq.n	8008634 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e308      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01e      	beq.n	800860a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80085cc:	f7ff fdb0 	bl	8008130 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80085d0:	f7fe faa8 	bl	8006b24 <HAL_GetTick>
 80085d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80085d6:	e008      	b.n	80085ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80085d8:	f7fe faa4 	bl	8006b24 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d901      	bls.n	80085ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e2f5      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80085ea:	f7ff fdbf 	bl	800816c <LL_RCC_MSI_IsReady>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d0f1      	beq.n	80085d8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7ff fdc8 	bl	800818e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff fdec 	bl	80081e0 <LL_RCC_MSI_SetCalibTrimming>
 8008608:	e015      	b.n	8008636 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800860a:	f7ff fda0 	bl	800814e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800860e:	f7fe fa89 	bl	8006b24 <HAL_GetTick>
 8008612:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008614:	e008      	b.n	8008628 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008616:	f7fe fa85 	bl	8006b24 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	2b02      	cmp	r3, #2
 8008622:	d901      	bls.n	8008628 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e2d6      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008628:	f7ff fda0 	bl	800816c <LL_RCC_MSI_IsReady>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1f1      	bne.n	8008616 <HAL_RCC_OscConfig+0x11a>
 8008632:	e000      	b.n	8008636 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008634:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d047      	beq.n	80086d2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008642:	f7ff fdf6 	bl	8008232 <LL_RCC_GetSysClkSource>
 8008646:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008648:	f7ff feef 	bl	800842a <LL_RCC_PLL_GetMainSource>
 800864c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	2b08      	cmp	r3, #8
 8008652:	d005      	beq.n	8008660 <HAL_RCC_OscConfig+0x164>
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	2b0c      	cmp	r3, #12
 8008658:	d108      	bne.n	800866c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	2b03      	cmp	r3, #3
 800865e:	d105      	bne.n	800866c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d134      	bne.n	80086d2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e2b4      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008674:	d102      	bne.n	800867c <HAL_RCC_OscConfig+0x180>
 8008676:	f7ff fbdd 	bl	8007e34 <LL_RCC_HSE_Enable>
 800867a:	e001      	b.n	8008680 <HAL_RCC_OscConfig+0x184>
 800867c:	f7ff fbe9 	bl	8007e52 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d012      	beq.n	80086ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008688:	f7fe fa4c 	bl	8006b24 <HAL_GetTick>
 800868c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800868e:	e008      	b.n	80086a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008690:	f7fe fa48 	bl	8006b24 <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	2b64      	cmp	r3, #100	@ 0x64
 800869c:	d901      	bls.n	80086a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e299      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80086a2:	f7ff fbe5 	bl	8007e70 <LL_RCC_HSE_IsReady>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0f1      	beq.n	8008690 <HAL_RCC_OscConfig+0x194>
 80086ac:	e011      	b.n	80086d2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ae:	f7fe fa39 	bl	8006b24 <HAL_GetTick>
 80086b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80086b4:	e008      	b.n	80086c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086b6:	f7fe fa35 	bl	8006b24 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	2b64      	cmp	r3, #100	@ 0x64
 80086c2:	d901      	bls.n	80086c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e286      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80086c8:	f7ff fbd2 	bl	8007e70 <LL_RCC_HSE_IsReady>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1f1      	bne.n	80086b6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d04c      	beq.n	8008778 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086de:	f7ff fda8 	bl	8008232 <LL_RCC_GetSysClkSource>
 80086e2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086e4:	f7ff fea1 	bl	800842a <LL_RCC_PLL_GetMainSource>
 80086e8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d005      	beq.n	80086fc <HAL_RCC_OscConfig+0x200>
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	2b0c      	cmp	r3, #12
 80086f4:	d10e      	bne.n	8008714 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d10b      	bne.n	8008714 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e266      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	4618      	mov	r0, r3
 800870e:	f7ff fbf1 	bl	8007ef4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008712:	e031      	b.n	8008778 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d019      	beq.n	8008750 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800871c:	f7ff fbba 	bl	8007e94 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008720:	f7fe fa00 	bl	8006b24 <HAL_GetTick>
 8008724:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008726:	e008      	b.n	800873a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008728:	f7fe f9fc 	bl	8006b24 <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	2b02      	cmp	r3, #2
 8008734:	d901      	bls.n	800873a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e24d      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800873a:	f7ff fbc9 	bl	8007ed0 <LL_RCC_HSI_IsReady>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d0f1      	beq.n	8008728 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff fbd3 	bl	8007ef4 <LL_RCC_HSI_SetCalibTrimming>
 800874e:	e013      	b.n	8008778 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008750:	f7ff fbaf 	bl	8007eb2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008754:	f7fe f9e6 	bl	8006b24 <HAL_GetTick>
 8008758:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800875a:	e008      	b.n	800876e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800875c:	f7fe f9e2 	bl	8006b24 <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	2b02      	cmp	r3, #2
 8008768:	d901      	bls.n	800876e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	e233      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800876e:	f7ff fbaf 	bl	8007ed0 <LL_RCC_HSI_IsReady>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1f1      	bne.n	800875c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0308 	and.w	r3, r3, #8
 8008780:	2b00      	cmp	r3, #0
 8008782:	d106      	bne.n	8008792 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 80a3 	beq.w	80088d8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d076      	beq.n	8008888 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 0310 	and.w	r3, r3, #16
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d046      	beq.n	8008834 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80087a6:	f7ff fc66 	bl	8008076 <LL_RCC_LSI1_IsReady>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d113      	bne.n	80087d8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80087b0:	f7ff fc3f 	bl	8008032 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80087b4:	f7fe f9b6 	bl	8006b24 <HAL_GetTick>
 80087b8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80087ba:	e008      	b.n	80087ce <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80087bc:	f7fe f9b2 	bl	8006b24 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d901      	bls.n	80087ce <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e203      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80087ce:	f7ff fc52 	bl	8008076 <LL_RCC_LSI1_IsReady>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0f1      	beq.n	80087bc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80087d8:	f7ff fc5f 	bl	800809a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087dc:	f7fe f9a2 	bl	8006b24 <HAL_GetTick>
 80087e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80087e2:	e008      	b.n	80087f6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80087e4:	f7fe f99e 	bl	8006b24 <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d901      	bls.n	80087f6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e1ef      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80087f6:	f7ff fc72 	bl	80080de <LL_RCC_LSI2_IsReady>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0f1      	beq.n	80087e4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff fc7c 	bl	8008102 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800880a:	f7ff fc23 	bl	8008054 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880e:	f7fe f989 	bl	8006b24 <HAL_GetTick>
 8008812:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008814:	e008      	b.n	8008828 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008816:	f7fe f985 	bl	8006b24 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e1d6      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008828:	f7ff fc25 	bl	8008076 <LL_RCC_LSI1_IsReady>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1f1      	bne.n	8008816 <HAL_RCC_OscConfig+0x31a>
 8008832:	e051      	b.n	80088d8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008834:	f7ff fbfd 	bl	8008032 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008838:	f7fe f974 	bl	8006b24 <HAL_GetTick>
 800883c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800883e:	e00c      	b.n	800885a <HAL_RCC_OscConfig+0x35e>
 8008840:	200000bc 	.word	0x200000bc
 8008844:	200000c0 	.word	0x200000c0
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008848:	f7fe f96c 	bl	8006b24 <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b02      	cmp	r3, #2
 8008854:	d901      	bls.n	800885a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e1bd      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800885a:	f7ff fc0c 	bl	8008076 <LL_RCC_LSI1_IsReady>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0f1      	beq.n	8008848 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8008864:	f7ff fc2a 	bl	80080bc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008868:	e008      	b.n	800887c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800886a:	f7fe f95b 	bl	8006b24 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b03      	cmp	r3, #3
 8008876:	d901      	bls.n	800887c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e1ac      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800887c:	f7ff fc2f 	bl	80080de <LL_RCC_LSI2_IsReady>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1f1      	bne.n	800886a <HAL_RCC_OscConfig+0x36e>
 8008886:	e027      	b.n	80088d8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008888:	f7ff fc18 	bl	80080bc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800888c:	f7fe f94a 	bl	8006b24 <HAL_GetTick>
 8008890:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008892:	e008      	b.n	80088a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008894:	f7fe f946 	bl	8006b24 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e197      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80088a6:	f7ff fc1a 	bl	80080de <LL_RCC_LSI2_IsReady>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1f1      	bne.n	8008894 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80088b0:	f7ff fbd0 	bl	8008054 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088b4:	f7fe f936 	bl	8006b24 <HAL_GetTick>
 80088b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80088ba:	e008      	b.n	80088ce <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80088bc:	f7fe f932 	bl	8006b24 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e183      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80088ce:	f7ff fbd2 	bl	8008076 <LL_RCC_LSI1_IsReady>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1f1      	bne.n	80088bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d05b      	beq.n	800899c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088e4:	4ba7      	ldr	r3, [pc, #668]	@ (8008b84 <HAL_RCC_OscConfig+0x688>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d114      	bne.n	800891a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80088f0:	f7ff fa70 	bl	8007dd4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088f4:	f7fe f916 	bl	8006b24 <HAL_GetTick>
 80088f8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088fa:	e008      	b.n	800890e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088fc:	f7fe f912 	bl	8006b24 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b02      	cmp	r3, #2
 8008908:	d901      	bls.n	800890e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e163      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800890e:	4b9d      	ldr	r3, [pc, #628]	@ (8008b84 <HAL_RCC_OscConfig+0x688>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0f0      	beq.n	80088fc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d102      	bne.n	8008928 <HAL_RCC_OscConfig+0x42c>
 8008922:	f7ff fb30 	bl	8007f86 <LL_RCC_LSE_Enable>
 8008926:	e00c      	b.n	8008942 <HAL_RCC_OscConfig+0x446>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	2b05      	cmp	r3, #5
 800892e:	d104      	bne.n	800893a <HAL_RCC_OscConfig+0x43e>
 8008930:	f7ff fb4b 	bl	8007fca <LL_RCC_LSE_EnableBypass>
 8008934:	f7ff fb27 	bl	8007f86 <LL_RCC_LSE_Enable>
 8008938:	e003      	b.n	8008942 <HAL_RCC_OscConfig+0x446>
 800893a:	f7ff fb35 	bl	8007fa8 <LL_RCC_LSE_Disable>
 800893e:	f7ff fb55 	bl	8007fec <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d014      	beq.n	8008974 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800894a:	f7fe f8eb 	bl	8006b24 <HAL_GetTick>
 800894e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008950:	e00a      	b.n	8008968 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008952:	f7fe f8e7 	bl	8006b24 <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008960:	4293      	cmp	r3, r2
 8008962:	d901      	bls.n	8008968 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e136      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008968:	f7ff fb51 	bl	800800e <LL_RCC_LSE_IsReady>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d0ef      	beq.n	8008952 <HAL_RCC_OscConfig+0x456>
 8008972:	e013      	b.n	800899c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008974:	f7fe f8d6 	bl	8006b24 <HAL_GetTick>
 8008978:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800897a:	e00a      	b.n	8008992 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800897c:	f7fe f8d2 	bl	8006b24 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800898a:	4293      	cmp	r3, r2
 800898c:	d901      	bls.n	8008992 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e121      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008992:	f7ff fb3c 	bl	800800e <LL_RCC_LSE_IsReady>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1ef      	bne.n	800897c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d02c      	beq.n	8008a02 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d014      	beq.n	80089da <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80089b0:	f7ff fab5 	bl	8007f1e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089b4:	f7fe f8b6 	bl	8006b24 <HAL_GetTick>
 80089b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80089ba:	e008      	b.n	80089ce <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089bc:	f7fe f8b2 	bl	8006b24 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e103      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80089ce:	f7ff fac8 	bl	8007f62 <LL_RCC_HSI48_IsReady>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0f1      	beq.n	80089bc <HAL_RCC_OscConfig+0x4c0>
 80089d8:	e013      	b.n	8008a02 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80089da:	f7ff fab1 	bl	8007f40 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089de:	f7fe f8a1 	bl	8006b24 <HAL_GetTick>
 80089e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80089e4:	e008      	b.n	80089f8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089e6:	f7fe f89d 	bl	8006b24 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d901      	bls.n	80089f8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e0ee      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80089f8:	f7ff fab3 	bl	8007f62 <LL_RCC_HSI48_IsReady>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1f1      	bne.n	80089e6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 80e4 	beq.w	8008bd4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a0c:	f7ff fc11 	bl	8008232 <LL_RCC_GetSysClkSource>
 8008a10:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	f040 80b4 	bne.w	8008b8c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f003 0203 	and.w	r2, r3, #3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d123      	bne.n	8008a7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d11c      	bne.n	8008a7a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	0a1b      	lsrs	r3, r3, #8
 8008a44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d114      	bne.n	8008a7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d10d      	bne.n	8008a7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d106      	bne.n	8008a7a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d05d      	beq.n	8008b36 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	2b0c      	cmp	r3, #12
 8008a7e:	d058      	beq.n	8008b32 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e0a1      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008a92:	f7ff fc84 	bl	800839e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008a96:	f7fe f845 	bl	8006b24 <HAL_GetTick>
 8008a9a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a9c:	e008      	b.n	8008ab0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a9e:	f7fe f841 	bl	8006b24 <HAL_GetTick>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d901      	bls.n	8008ab0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e092      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1ef      	bne.n	8008a9e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ac2:	68da      	ldr	r2, [r3, #12]
 8008ac4:	4b30      	ldr	r3, [pc, #192]	@ (8008b88 <HAL_RCC_OscConfig+0x68c>)
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008ad0:	4311      	orrs	r1, r2
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008ad6:	0212      	lsls	r2, r2, #8
 8008ad8:	4311      	orrs	r1, r2
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008ade:	4311      	orrs	r1, r2
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008ae4:	4311      	orrs	r1, r2
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008aea:	430a      	orrs	r2, r1
 8008aec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008af0:	4313      	orrs	r3, r2
 8008af2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008af4:	f7ff fc44 	bl	8008380 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008b08:	f7fe f80c 	bl	8006b24 <HAL_GetTick>
 8008b0c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b0e:	e008      	b.n	8008b22 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b10:	f7fe f808 	bl	8006b24 <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d901      	bls.n	8008b22 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e059      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0ef      	beq.n	8008b10 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b30:	e050      	b.n	8008bd4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e04f      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d147      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008b44:	f7ff fc1c 	bl	8008380 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b58:	f7fd ffe4 	bl	8006b24 <HAL_GetTick>
 8008b5c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b5e:	e008      	b.n	8008b72 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b60:	f7fd ffe0 	bl	8006b24 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e031      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d0ef      	beq.n	8008b60 <HAL_RCC_OscConfig+0x664>
 8008b80:	e028      	b.n	8008bd4 <HAL_RCC_OscConfig+0x6d8>
 8008b82:	bf00      	nop
 8008b84:	58000400 	.word	0x58000400
 8008b88:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	2b0c      	cmp	r3, #12
 8008b90:	d01e      	beq.n	8008bd0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b92:	f7ff fc04 	bl	800839e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b96:	f7fd ffc5 	bl	8006b24 <HAL_GetTick>
 8008b9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b9c:	e008      	b.n	8008bb0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b9e:	f7fd ffc1 	bl	8006b24 <HAL_GetTick>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d901      	bls.n	8008bb0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e012      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1ef      	bne.n	8008b9e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bc2:	68da      	ldr	r2, [r3, #12]
 8008bc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008bc8:	4b05      	ldr	r3, [pc, #20]	@ (8008be0 <HAL_RCC_OscConfig+0x6e4>)
 8008bca:	4013      	ands	r3, r2
 8008bcc:	60cb      	str	r3, [r1, #12]
 8008bce:	e001      	b.n	8008bd4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e000      	b.n	8008bd6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3734      	adds	r7, #52	@ 0x34
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd90      	pop	{r4, r7, pc}
 8008bde:	bf00      	nop
 8008be0:	eefefffc 	.word	0xeefefffc

08008be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e12d      	b.n	8008e54 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bf8:	4b98      	ldr	r3, [pc, #608]	@ (8008e5c <HAL_RCC_ClockConfig+0x278>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0307 	and.w	r3, r3, #7
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d91b      	bls.n	8008c3e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c06:	4b95      	ldr	r3, [pc, #596]	@ (8008e5c <HAL_RCC_ClockConfig+0x278>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f023 0207 	bic.w	r2, r3, #7
 8008c0e:	4993      	ldr	r1, [pc, #588]	@ (8008e5c <HAL_RCC_ClockConfig+0x278>)
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c16:	f7fd ff85 	bl	8006b24 <HAL_GetTick>
 8008c1a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c1c:	e008      	b.n	8008c30 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008c1e:	f7fd ff81 	bl	8006b24 <HAL_GetTick>
 8008c22:	4602      	mov	r2, r0
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d901      	bls.n	8008c30 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e111      	b.n	8008e54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c30:	4b8a      	ldr	r3, [pc, #552]	@ (8008e5c <HAL_RCC_ClockConfig+0x278>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0307 	and.w	r3, r3, #7
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d1ef      	bne.n	8008c1e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0302 	and.w	r3, r3, #2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d016      	beq.n	8008c78 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7ff fafb 	bl	800824a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008c54:	f7fd ff66 	bl	8006b24 <HAL_GetTick>
 8008c58:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008c5a:	e008      	b.n	8008c6e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008c5c:	f7fd ff62 	bl	8006b24 <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d901      	bls.n	8008c6e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e0f2      	b.n	8008e54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008c6e:	f7ff fbe8 	bl	8008442 <LL_RCC_IsActiveFlag_HPRE>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d0f1      	beq.n	8008c5c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0320 	and.w	r3, r3, #32
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d016      	beq.n	8008cb2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff faf2 	bl	8008272 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008c8e:	f7fd ff49 	bl	8006b24 <HAL_GetTick>
 8008c92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008c94:	e008      	b.n	8008ca8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008c96:	f7fd ff45 	bl	8006b24 <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d901      	bls.n	8008ca8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e0d5      	b.n	8008e54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008ca8:	f7ff fbdd 	bl	8008466 <LL_RCC_IsActiveFlag_C2HPRE>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0f1      	beq.n	8008c96 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d016      	beq.n	8008cec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff faeb 	bl	800829e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008cc8:	f7fd ff2c 	bl	8006b24 <HAL_GetTick>
 8008ccc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008cce:	e008      	b.n	8008ce2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008cd0:	f7fd ff28 	bl	8006b24 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e0b8      	b.n	8008e54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008ce2:	f7ff fbd3 	bl	800848c <LL_RCC_IsActiveFlag_SHDHPRE>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d0f1      	beq.n	8008cd0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d016      	beq.n	8008d26 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7ff fae5 	bl	80082cc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d02:	f7fd ff0f 	bl	8006b24 <HAL_GetTick>
 8008d06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008d08:	e008      	b.n	8008d1c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d0a:	f7fd ff0b 	bl	8006b24 <HAL_GetTick>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d901      	bls.n	8008d1c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e09b      	b.n	8008e54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008d1c:	f7ff fbc9 	bl	80084b2 <LL_RCC_IsActiveFlag_PPRE1>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0f1      	beq.n	8008d0a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0308 	and.w	r3, r3, #8
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d017      	beq.n	8008d62 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	00db      	lsls	r3, r3, #3
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7ff fadb 	bl	80082f4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d3e:	f7fd fef1 	bl	8006b24 <HAL_GetTick>
 8008d42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008d44:	e008      	b.n	8008d58 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d46:	f7fd feed 	bl	8006b24 <HAL_GetTick>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d901      	bls.n	8008d58 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	e07d      	b.n	8008e54 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008d58:	f7ff fbbd 	bl	80084d6 <LL_RCC_IsActiveFlag_PPRE2>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0f1      	beq.n	8008d46 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d043      	beq.n	8008df6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d106      	bne.n	8008d84 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008d76:	f7ff f87b 	bl	8007e70 <LL_RCC_HSE_IsReady>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d11e      	bne.n	8008dbe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e067      	b.n	8008e54 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d106      	bne.n	8008d9a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008d8c:	f7ff fb16 	bl	80083bc <LL_RCC_PLL_IsReady>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d113      	bne.n	8008dbe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e05c      	b.n	8008e54 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d106      	bne.n	8008db0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008da2:	f7ff f9e3 	bl	800816c <LL_RCC_MSI_IsReady>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d108      	bne.n	8008dbe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e051      	b.n	8008e54 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008db0:	f7ff f88e 	bl	8007ed0 <LL_RCC_HSI_IsReady>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e04a      	b.n	8008e54 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7ff fa21 	bl	800820a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dc8:	f7fd feac 	bl	8006b24 <HAL_GetTick>
 8008dcc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dce:	e00a      	b.n	8008de6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dd0:	f7fd fea8 	bl	8006b24 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d901      	bls.n	8008de6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e036      	b.n	8008e54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008de6:	f7ff fa24 	bl	8008232 <LL_RCC_GetSysClkSource>
 8008dea:	4602      	mov	r2, r0
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d1ec      	bne.n	8008dd0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008df6:	4b19      	ldr	r3, [pc, #100]	@ (8008e5c <HAL_RCC_ClockConfig+0x278>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d21b      	bcs.n	8008e3c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e04:	4b15      	ldr	r3, [pc, #84]	@ (8008e5c <HAL_RCC_ClockConfig+0x278>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f023 0207 	bic.w	r2, r3, #7
 8008e0c:	4913      	ldr	r1, [pc, #76]	@ (8008e5c <HAL_RCC_ClockConfig+0x278>)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e14:	f7fd fe86 	bl	8006b24 <HAL_GetTick>
 8008e18:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e1a:	e008      	b.n	8008e2e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008e1c:	f7fd fe82 	bl	8006b24 <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d901      	bls.n	8008e2e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e012      	b.n	8008e54 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e5c <HAL_RCC_ClockConfig+0x278>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d1ef      	bne.n	8008e1c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008e3c:	f000 f87e 	bl	8008f3c <HAL_RCC_GetHCLKFreq>
 8008e40:	4603      	mov	r3, r0
 8008e42:	4a07      	ldr	r2, [pc, #28]	@ (8008e60 <HAL_RCC_ClockConfig+0x27c>)
 8008e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008e46:	f7fd fe79 	bl	8006b3c <HAL_GetTickPrio>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7fd fe1b 	bl	8006a88 <HAL_InitTick>
 8008e52:	4603      	mov	r3, r0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	58004000 	.word	0x58004000
 8008e60:	200000bc 	.word	0x200000bc

08008e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e64:	b590      	push	{r4, r7, lr}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e6a:	f7ff f9e2 	bl	8008232 <LL_RCC_GetSysClkSource>
 8008e6e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10a      	bne.n	8008e8c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008e76:	f7ff f99e 	bl	80081b6 <LL_RCC_MSI_GetRange>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	091b      	lsrs	r3, r3, #4
 8008e7e:	f003 030f 	and.w	r3, r3, #15
 8008e82:	4a2b      	ldr	r2, [pc, #172]	@ (8008f30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e88:	60fb      	str	r3, [r7, #12]
 8008e8a:	e04b      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b04      	cmp	r3, #4
 8008e90:	d102      	bne.n	8008e98 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008e92:	4b28      	ldr	r3, [pc, #160]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008e94:	60fb      	str	r3, [r7, #12]
 8008e96:	e045      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b08      	cmp	r3, #8
 8008e9c:	d10a      	bne.n	8008eb4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008e9e:	f7fe ffb7 	bl	8007e10 <LL_RCC_HSE_IsEnabledDiv2>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d102      	bne.n	8008eae <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008ea8:	4b22      	ldr	r3, [pc, #136]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	e03a      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008eae:	4b22      	ldr	r3, [pc, #136]	@ (8008f38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008eb0:	60fb      	str	r3, [r7, #12]
 8008eb2:	e037      	b.n	8008f24 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008eb4:	f7ff fab9 	bl	800842a <LL_RCC_PLL_GetMainSource>
 8008eb8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d003      	beq.n	8008ec8 <HAL_RCC_GetSysClockFreq+0x64>
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d003      	beq.n	8008ece <HAL_RCC_GetSysClockFreq+0x6a>
 8008ec6:	e00d      	b.n	8008ee4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008eca:	60bb      	str	r3, [r7, #8]
        break;
 8008ecc:	e015      	b.n	8008efa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008ece:	f7fe ff9f 	bl	8007e10 <LL_RCC_HSE_IsEnabledDiv2>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d102      	bne.n	8008ede <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008ed8:	4b16      	ldr	r3, [pc, #88]	@ (8008f34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008eda:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008edc:	e00d      	b.n	8008efa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008ede:	4b16      	ldr	r3, [pc, #88]	@ (8008f38 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008ee0:	60bb      	str	r3, [r7, #8]
        break;
 8008ee2:	e00a      	b.n	8008efa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008ee4:	f7ff f967 	bl	80081b6 <LL_RCC_MSI_GetRange>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	091b      	lsrs	r3, r3, #4
 8008eec:	f003 030f 	and.w	r3, r3, #15
 8008ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8008f30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ef6:	60bb      	str	r3, [r7, #8]
        break;
 8008ef8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008efa:	f7ff fa71 	bl	80083e0 <LL_RCC_PLL_GetN>
 8008efe:	4602      	mov	r2, r0
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	fb03 f402 	mul.w	r4, r3, r2
 8008f06:	f7ff fa84 	bl	8008412 <LL_RCC_PLL_GetDivider>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	091b      	lsrs	r3, r3, #4
 8008f0e:	3301      	adds	r3, #1
 8008f10:	fbb4 f4f3 	udiv	r4, r4, r3
 8008f14:	f7ff fa71 	bl	80083fa <LL_RCC_PLL_GetR>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	0f5b      	lsrs	r3, r3, #29
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	fbb4 f3f3 	udiv	r3, r4, r3
 8008f22:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008f24:	68fb      	ldr	r3, [r7, #12]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3714      	adds	r7, #20
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd90      	pop	{r4, r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	0802e0d4 	.word	0x0802e0d4
 8008f34:	00f42400 	.word	0x00f42400
 8008f38:	01e84800 	.word	0x01e84800

08008f3c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f3c:	b598      	push	{r3, r4, r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008f40:	f7ff ff90 	bl	8008e64 <HAL_RCC_GetSysClockFreq>
 8008f44:	4604      	mov	r4, r0
 8008f46:	f7ff f9e9 	bl	800831c <LL_RCC_GetAHBPrescaler>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	091b      	lsrs	r3, r3, #4
 8008f4e:	f003 030f 	and.w	r3, r3, #15
 8008f52:	4a03      	ldr	r2, [pc, #12]	@ (8008f60 <HAL_RCC_GetHCLKFreq+0x24>)
 8008f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f58:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	bd98      	pop	{r3, r4, r7, pc}
 8008f60:	0802e074 	.word	0x0802e074

08008f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f64:	b598      	push	{r3, r4, r7, lr}
 8008f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008f68:	f7ff ffe8 	bl	8008f3c <HAL_RCC_GetHCLKFreq>
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	f7ff f9ef 	bl	8008350 <LL_RCC_GetAPB1Prescaler>
 8008f72:	4603      	mov	r3, r0
 8008f74:	0a1b      	lsrs	r3, r3, #8
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	4a04      	ldr	r2, [pc, #16]	@ (8008f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f80:	f003 031f 	and.w	r3, r3, #31
 8008f84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	bd98      	pop	{r3, r4, r7, pc}
 8008f8c:	0802e0b4 	.word	0x0802e0b4

08008f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f90:	b598      	push	{r3, r4, r7, lr}
 8008f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008f94:	f7ff ffd2 	bl	8008f3c <HAL_RCC_GetHCLKFreq>
 8008f98:	4604      	mov	r4, r0
 8008f9a:	f7ff f9e5 	bl	8008368 <LL_RCC_GetAPB2Prescaler>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	0adb      	lsrs	r3, r3, #11
 8008fa2:	f003 0307 	and.w	r3, r3, #7
 8008fa6:	4a04      	ldr	r2, [pc, #16]	@ (8008fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fac:	f003 031f 	and.w	r3, r3, #31
 8008fb0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	bd98      	pop	{r3, r4, r7, pc}
 8008fb8:	0802e0b4 	.word	0x0802e0b4

08008fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008fbc:	b590      	push	{r4, r7, lr}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2bb0      	cmp	r3, #176	@ 0xb0
 8008fc8:	d903      	bls.n	8008fd2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008fca:	4b15      	ldr	r3, [pc, #84]	@ (8009020 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fce:	60fb      	str	r3, [r7, #12]
 8008fd0:	e007      	b.n	8008fe2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	091b      	lsrs	r3, r3, #4
 8008fd6:	f003 030f 	and.w	r3, r3, #15
 8008fda:	4a11      	ldr	r2, [pc, #68]	@ (8009020 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fe0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008fe2:	f7ff f9a7 	bl	8008334 <LL_RCC_GetAHB4Prescaler>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	091b      	lsrs	r3, r3, #4
 8008fea:	f003 030f 	and.w	r3, r3, #15
 8008fee:	4a0d      	ldr	r2, [pc, #52]	@ (8009024 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ffa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8009028 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8009000:	fba2 2303 	umull	r2, r3, r2, r3
 8009004:	0c9c      	lsrs	r4, r3, #18
 8009006:	f7fe fef5 	bl	8007df4 <HAL_PWREx_GetVoltageRange>
 800900a:	4603      	mov	r3, r0
 800900c:	4619      	mov	r1, r3
 800900e:	4620      	mov	r0, r4
 8009010:	f000 f80c 	bl	800902c <RCC_SetFlashLatency>
 8009014:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	bd90      	pop	{r4, r7, pc}
 800901e:	bf00      	nop
 8009020:	0802e0d4 	.word	0x0802e0d4
 8009024:	0802e074 	.word	0x0802e074
 8009028:	431bde83 	.word	0x431bde83

0800902c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800902c:	b590      	push	{r4, r7, lr}
 800902e:	b093      	sub	sp, #76	@ 0x4c
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8009036:	4b37      	ldr	r3, [pc, #220]	@ (8009114 <RCC_SetFlashLatency+0xe8>)
 8009038:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800903c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800903e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8009042:	4a35      	ldr	r2, [pc, #212]	@ (8009118 <RCC_SetFlashLatency+0xec>)
 8009044:	f107 031c 	add.w	r3, r7, #28
 8009048:	ca07      	ldmia	r2, {r0, r1, r2}
 800904a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800904e:	4b33      	ldr	r3, [pc, #204]	@ (800911c <RCC_SetFlashLatency+0xf0>)
 8009050:	f107 040c 	add.w	r4, r7, #12
 8009054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800905a:	2300      	movs	r3, #0
 800905c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009064:	d11a      	bne.n	800909c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009066:	2300      	movs	r3, #0
 8009068:	643b      	str	r3, [r7, #64]	@ 0x40
 800906a:	e013      	b.n	8009094 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800906c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	3348      	adds	r3, #72	@ 0x48
 8009072:	443b      	add	r3, r7
 8009074:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	429a      	cmp	r2, r3
 800907c:	d807      	bhi.n	800908e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800907e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	3348      	adds	r3, #72	@ 0x48
 8009084:	443b      	add	r3, r7
 8009086:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800908a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800908c:	e020      	b.n	80090d0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800908e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009090:	3301      	adds	r3, #1
 8009092:	643b      	str	r3, [r7, #64]	@ 0x40
 8009094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009096:	2b03      	cmp	r3, #3
 8009098:	d9e8      	bls.n	800906c <RCC_SetFlashLatency+0x40>
 800909a:	e019      	b.n	80090d0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800909c:	2300      	movs	r3, #0
 800909e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090a0:	e013      	b.n	80090ca <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80090a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	3348      	adds	r3, #72	@ 0x48
 80090a8:	443b      	add	r3, r7
 80090aa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d807      	bhi.n	80090c4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80090b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	3348      	adds	r3, #72	@ 0x48
 80090ba:	443b      	add	r3, r7
 80090bc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80090c0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80090c2:	e005      	b.n	80090d0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80090c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090c6:	3301      	adds	r3, #1
 80090c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d9e8      	bls.n	80090a2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80090d0:	4b13      	ldr	r3, [pc, #76]	@ (8009120 <RCC_SetFlashLatency+0xf4>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f023 0207 	bic.w	r2, r3, #7
 80090d8:	4911      	ldr	r1, [pc, #68]	@ (8009120 <RCC_SetFlashLatency+0xf4>)
 80090da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090dc:	4313      	orrs	r3, r2
 80090de:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80090e0:	f7fd fd20 	bl	8006b24 <HAL_GetTick>
 80090e4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80090e6:	e008      	b.n	80090fa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80090e8:	f7fd fd1c 	bl	8006b24 <HAL_GetTick>
 80090ec:	4602      	mov	r2, r0
 80090ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d901      	bls.n	80090fa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e007      	b.n	800910a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80090fa:	4b09      	ldr	r3, [pc, #36]	@ (8009120 <RCC_SetFlashLatency+0xf4>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0307 	and.w	r3, r3, #7
 8009102:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009104:	429a      	cmp	r2, r3
 8009106:	d1ef      	bne.n	80090e8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	374c      	adds	r7, #76	@ 0x4c
 800910e:	46bd      	mov	sp, r7
 8009110:	bd90      	pop	{r4, r7, pc}
 8009112:	bf00      	nop
 8009114:	0802a86c 	.word	0x0802a86c
 8009118:	0802a87c 	.word	0x0802a87c
 800911c:	0802a888 	.word	0x0802a888
 8009120:	58004000 	.word	0x58004000

08009124 <LL_RCC_LSE_IsEnabled>:
{
 8009124:	b480      	push	{r7}
 8009126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8009128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800912c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b01      	cmp	r3, #1
 8009136:	d101      	bne.n	800913c <LL_RCC_LSE_IsEnabled+0x18>
 8009138:	2301      	movs	r3, #1
 800913a:	e000      	b.n	800913e <LL_RCC_LSE_IsEnabled+0x1a>
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <LL_RCC_LSE_IsReady>:
{
 8009148:	b480      	push	{r7}
 800914a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800914c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009154:	f003 0302 	and.w	r3, r3, #2
 8009158:	2b02      	cmp	r3, #2
 800915a:	d101      	bne.n	8009160 <LL_RCC_LSE_IsReady+0x18>
 800915c:	2301      	movs	r3, #1
 800915e:	e000      	b.n	8009162 <LL_RCC_LSE_IsReady+0x1a>
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <LL_RCC_SetRFWKPClockSource>:
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8009174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800917c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009180:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4313      	orrs	r3, r2
 8009188:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <LL_RCC_SetSMPSClockSource>:
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80091a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a6:	f023 0203 	bic.w	r2, r3, #3
 80091aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <LL_RCC_SetSMPSPrescaler>:
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80091c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ce:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80091d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4313      	orrs	r3, r2
 80091da:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <LL_RCC_SetUSARTClockSource>:
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80091f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091f8:	f023 0203 	bic.w	r2, r3, #3
 80091fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4313      	orrs	r3, r2
 8009204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <LL_RCC_SetLPUARTClockSource>:
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800921c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009224:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009228:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4313      	orrs	r3, r2
 8009230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <LL_RCC_SetI2CClockSource>:
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800924c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	091b      	lsrs	r3, r3, #4
 8009254:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8009258:	43db      	mvns	r3, r3
 800925a:	401a      	ands	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	011b      	lsls	r3, r3, #4
 8009260:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8009264:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009268:	4313      	orrs	r3, r2
 800926a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <LL_RCC_SetLPTIMClockSource>:
{
 800927a:	b480      	push	{r7}
 800927c:	b083      	sub	sp, #12
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8009282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009286:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	0c1b      	lsrs	r3, r3, #16
 800928e:	041b      	lsls	r3, r3, #16
 8009290:	43db      	mvns	r3, r3
 8009292:	401a      	ands	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	041b      	lsls	r3, r3, #16
 8009298:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800929c:	4313      	orrs	r3, r2
 800929e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80092a2:	bf00      	nop
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <LL_RCC_SetSAIClockSource>:
{
 80092ae:	b480      	push	{r7}
 80092b0:	b083      	sub	sp, #12
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80092b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80092c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80092ce:	bf00      	nop
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <LL_RCC_SetRNGClockSource>:
{
 80092da:	b480      	push	{r7}
 80092dc:	b083      	sub	sp, #12
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80092e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092ea:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80092ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80092fa:	bf00      	nop
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <LL_RCC_SetCLK48ClockSource>:
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800930e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009316:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800931a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4313      	orrs	r3, r2
 8009322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009326:	bf00      	nop
 8009328:	370c      	adds	r7, #12
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr

08009332 <LL_RCC_SetUSBClockSource>:
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b082      	sub	sp, #8
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f7ff ffe3 	bl	8009306 <LL_RCC_SetCLK48ClockSource>
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <LL_RCC_SetADCClockSource>:
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009358:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800935c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4313      	orrs	r3, r2
 8009364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <LL_RCC_SetRTCClockSource>:
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800937c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009384:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009388:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4313      	orrs	r3, r2
 8009390:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <LL_RCC_GetRTCClockSource>:
{
 80093a0:	b480      	push	{r7}
 80093a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80093a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <LL_RCC_ForceBackupDomainReset>:
{
 80093ba:	b480      	push	{r7}
 80093bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80093be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80093ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80093d2:	bf00      	nop
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <LL_RCC_ReleaseBackupDomainReset>:
{
 80093dc:	b480      	push	{r7}
 80093de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80093e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80093ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80093f4:	bf00      	nop
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <LL_RCC_PLLSAI1_Enable>:
{
 80093fe:	b480      	push	{r7}
 8009400:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800940c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009410:	6013      	str	r3, [r2, #0]
}
 8009412:	bf00      	nop
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <LL_RCC_PLLSAI1_Disable>:
{
 800941c:	b480      	push	{r7}
 800941e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800942a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800942e:	6013      	str	r3, [r2, #0]
}
 8009430:	bf00      	nop
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <LL_RCC_PLLSAI1_IsReady>:
{
 800943a:	b480      	push	{r7}
 800943c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800943e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009448:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800944c:	d101      	bne.n	8009452 <LL_RCC_PLLSAI1_IsReady+0x18>
 800944e:	2301      	movs	r3, #1
 8009450:	e000      	b.n	8009454 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b088      	sub	sp, #32
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8009466:	2300      	movs	r3, #0
 8009468:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800946a:	2300      	movs	r3, #0
 800946c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009476:	2b00      	cmp	r3, #0
 8009478:	d034      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800947e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009482:	d021      	beq.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009484:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009488:	d81b      	bhi.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800948a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800948e:	d01d      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009490:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009494:	d815      	bhi.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00b      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800949a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800949e:	d110      	bne.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80094a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80094aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094ae:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80094b0:	e00d      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3304      	adds	r3, #4
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 f947 	bl	800974a <RCCEx_PLLSAI1_ConfigNP>
 80094bc:	4603      	mov	r3, r0
 80094be:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80094c0:	e005      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	77fb      	strb	r3, [r7, #31]
        break;
 80094c6:	e002      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80094c8:	bf00      	nop
 80094ca:	e000      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80094cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ce:	7ffb      	ldrb	r3, [r7, #31]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d105      	bne.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d8:	4618      	mov	r0, r3
 80094da:	f7ff fee8 	bl	80092ae <LL_RCC_SetSAIClockSource>
 80094de:	e001      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e0:	7ffb      	ldrb	r3, [r7, #31]
 80094e2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d046      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80094f0:	f7ff ff56 	bl	80093a0 <LL_RCC_GetRTCClockSource>
 80094f4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094fa:	69ba      	ldr	r2, [r7, #24]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d03c      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009500:	f7fe fc68 	bl	8007dd4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d105      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff ff30 	bl	8009374 <LL_RCC_SetRTCClockSource>
 8009514:	e02e      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8009516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800951a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800951e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8009520:	f7ff ff4b 	bl	80093ba <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009524:	f7ff ff5a 	bl	80093dc <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009532:	4313      	orrs	r3, r2
 8009534:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009536:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009540:	f7ff fdf0 	bl	8009124 <LL_RCC_LSE_IsEnabled>
 8009544:	4603      	mov	r3, r0
 8009546:	2b01      	cmp	r3, #1
 8009548:	d114      	bne.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800954a:	f7fd faeb 	bl	8006b24 <HAL_GetTick>
 800954e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009550:	e00b      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009552:	f7fd fae7 	bl	8006b24 <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009560:	4293      	cmp	r3, r2
 8009562:	d902      	bls.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	77fb      	strb	r3, [r7, #31]
              break;
 8009568:	e004      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800956a:	f7ff fded 	bl	8009148 <LL_RCC_LSE_IsReady>
 800956e:	4603      	mov	r3, r0
 8009570:	2b01      	cmp	r3, #1
 8009572:	d1ee      	bne.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8009574:	7ffb      	ldrb	r3, [r7, #31]
 8009576:	77bb      	strb	r3, [r7, #30]
 8009578:	e001      	b.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800957a:	7ffb      	ldrb	r3, [r7, #31]
 800957c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	2b00      	cmp	r3, #0
 8009588:	d004      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	4618      	mov	r0, r3
 8009590:	f7ff fe2a 	bl	80091e8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0302 	and.w	r3, r3, #2
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	69db      	ldr	r3, [r3, #28]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7ff fe35 	bl	8009214 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0310 	and.w	r3, r3, #16
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d004      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7ff fe5d 	bl	800927a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 0320 	and.w	r3, r3, #32
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d004      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff fe52 	bl	800927a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0304 	and.w	r3, r3, #4
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d004      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7ff fe2a 	bl	8009240 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0308 	and.w	r3, r3, #8
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d004      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7ff fe1f 	bl	8009240 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800960a:	2b00      	cmp	r3, #0
 800960c:	d022      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009612:	4618      	mov	r0, r3
 8009614:	f7ff fe8d 	bl	8009332 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800961c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009620:	d107      	bne.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800962c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009630:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009636:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800963a:	d10b      	bne.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	3304      	adds	r3, #4
 8009640:	4618      	mov	r0, r3
 8009642:	f000 f8dd 	bl	8009800 <RCCEx_PLLSAI1_ConfigNQ>
 8009646:	4603      	mov	r3, r0
 8009648:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800964a:	7ffb      	ldrb	r3, [r7, #31]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8009650:	7ffb      	ldrb	r3, [r7, #31]
 8009652:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800965c:	2b00      	cmp	r3, #0
 800965e:	d02b      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009668:	d008      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800966e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009672:	d003      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009678:	2b00      	cmp	r3, #0
 800967a:	d105      	bne.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009680:	4618      	mov	r0, r3
 8009682:	f7ff fe2a 	bl	80092da <LL_RCC_SetRNGClockSource>
 8009686:	e00a      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800968c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009690:	60fb      	str	r3, [r7, #12]
 8009692:	2000      	movs	r0, #0
 8009694:	f7ff fe21 	bl	80092da <LL_RCC_SetRNGClockSource>
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f7ff fe34 	bl	8009306 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80096a6:	d107      	bne.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80096a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80096b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80096b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d022      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7ff fe3d 	bl	8009348 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096d6:	d107      	bne.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80096d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80096e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096e6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096f0:	d10b      	bne.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3304      	adds	r3, #4
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 f8dd 	bl	80098b6 <RCCEx_PLLSAI1_ConfigNR>
 80096fc:	4603      	mov	r3, r0
 80096fe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009700:	7ffb      	ldrb	r3, [r7, #31]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8009706:	7ffb      	ldrb	r3, [r7, #31]
 8009708:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009712:	2b00      	cmp	r3, #0
 8009714:	d004      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800971a:	4618      	mov	r0, r3
 800971c:	f7ff fd26 	bl	800916c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d009      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009730:	4618      	mov	r0, r3
 8009732:	f7ff fd45 	bl	80091c0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800973a:	4618      	mov	r0, r3
 800973c:	f7ff fd2c 	bl	8009198 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8009740:	7fbb      	ldrb	r3, [r7, #30]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3720      	adds	r7, #32
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b084      	sub	sp, #16
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009756:	f7ff fe61 	bl	800941c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800975a:	f7fd f9e3 	bl	8006b24 <HAL_GetTick>
 800975e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009760:	e009      	b.n	8009776 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009762:	f7fd f9df 	bl	8006b24 <HAL_GetTick>
 8009766:	4602      	mov	r2, r0
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	1ad3      	subs	r3, r2, r3
 800976c:	2b02      	cmp	r3, #2
 800976e:	d902      	bls.n	8009776 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009770:	2303      	movs	r3, #3
 8009772:	73fb      	strb	r3, [r7, #15]
      break;
 8009774:	e004      	b.n	8009780 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009776:	f7ff fe60 	bl	800943a <LL_RCC_PLLSAI1_IsReady>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1f0      	bne.n	8009762 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009780:	7bfb      	ldrb	r3, [r7, #15]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d137      	bne.n	80097f6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	021b      	lsls	r3, r3, #8
 8009796:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800979a:	4313      	orrs	r3, r2
 800979c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800979e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80097b0:	4313      	orrs	r3, r2
 80097b2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80097b4:	f7ff fe23 	bl	80093fe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097b8:	f7fd f9b4 	bl	8006b24 <HAL_GetTick>
 80097bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80097be:	e009      	b.n	80097d4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80097c0:	f7fd f9b0 	bl	8006b24 <HAL_GetTick>
 80097c4:	4602      	mov	r2, r0
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d902      	bls.n	80097d4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	73fb      	strb	r3, [r7, #15]
        break;
 80097d2:	e004      	b.n	80097de <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80097d4:	f7ff fe31 	bl	800943a <LL_RCC_PLLSAI1_IsReady>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d1f0      	bne.n	80097c0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80097de:	7bfb      	ldrb	r3, [r7, #15]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d108      	bne.n	80097f6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80097e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097e8:	691a      	ldr	r2, [r3, #16]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80097f2:	4313      	orrs	r3, r2
 80097f4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800980c:	f7ff fe06 	bl	800941c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009810:	f7fd f988 	bl	8006b24 <HAL_GetTick>
 8009814:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009816:	e009      	b.n	800982c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009818:	f7fd f984 	bl	8006b24 <HAL_GetTick>
 800981c:	4602      	mov	r2, r0
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	2b02      	cmp	r3, #2
 8009824:	d902      	bls.n	800982c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	73fb      	strb	r3, [r7, #15]
      break;
 800982a:	e004      	b.n	8009836 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800982c:	f7ff fe05 	bl	800943a <LL_RCC_PLLSAI1_IsReady>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1f0      	bne.n	8009818 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d137      	bne.n	80098ac <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800983c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	021b      	lsls	r3, r3, #8
 800984c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009850:	4313      	orrs	r3, r2
 8009852:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009866:	4313      	orrs	r3, r2
 8009868:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800986a:	f7ff fdc8 	bl	80093fe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800986e:	f7fd f959 	bl	8006b24 <HAL_GetTick>
 8009872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009874:	e009      	b.n	800988a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009876:	f7fd f955 	bl	8006b24 <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	2b02      	cmp	r3, #2
 8009882:	d902      	bls.n	800988a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	73fb      	strb	r3, [r7, #15]
        break;
 8009888:	e004      	b.n	8009894 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800988a:	f7ff fdd6 	bl	800943a <LL_RCC_PLLSAI1_IsReady>
 800988e:	4603      	mov	r3, r0
 8009890:	2b01      	cmp	r3, #1
 8009892:	d1f0      	bne.n	8009876 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d108      	bne.n	80098ac <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800989a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800989e:	691a      	ldr	r2, [r3, #16]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80098a8:	4313      	orrs	r3, r2
 80098aa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b084      	sub	sp, #16
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80098c2:	f7ff fdab 	bl	800941c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80098c6:	f7fd f92d 	bl	8006b24 <HAL_GetTick>
 80098ca:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80098cc:	e009      	b.n	80098e2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80098ce:	f7fd f929 	bl	8006b24 <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d902      	bls.n	80098e2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	73fb      	strb	r3, [r7, #15]
      break;
 80098e0:	e004      	b.n	80098ec <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80098e2:	f7ff fdaa 	bl	800943a <LL_RCC_PLLSAI1_IsReady>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1f0      	bne.n	80098ce <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d137      	bne.n	8009962 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80098f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	021b      	lsls	r3, r3, #8
 8009902:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009906:	4313      	orrs	r3, r2
 8009908:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800990a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800991c:	4313      	orrs	r3, r2
 800991e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009920:	f7ff fd6d 	bl	80093fe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009924:	f7fd f8fe 	bl	8006b24 <HAL_GetTick>
 8009928:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800992a:	e009      	b.n	8009940 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800992c:	f7fd f8fa 	bl	8006b24 <HAL_GetTick>
 8009930:	4602      	mov	r2, r0
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	2b02      	cmp	r3, #2
 8009938:	d902      	bls.n	8009940 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	73fb      	strb	r3, [r7, #15]
        break;
 800993e:	e004      	b.n	800994a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009940:	f7ff fd7b 	bl	800943a <LL_RCC_PLLSAI1_IsReady>
 8009944:	4603      	mov	r3, r0
 8009946:	2b01      	cmp	r3, #1
 8009948:	d1f0      	bne.n	800992c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800994a:	7bfb      	ldrb	r3, [r7, #15]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d108      	bne.n	8009962 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009954:	691a      	ldr	r2, [r3, #16]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800995e:	4313      	orrs	r3, r2
 8009960:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009962:	7bfb      	ldrb	r3, [r7, #15]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d101      	bne.n	800997e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e027      	b.n	80099ce <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	7a5b      	ldrb	r3, [r3, #9]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	2b00      	cmp	r3, #0
 8009986:	d105      	bne.n	8009994 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7f9 fd66 	bl	8003460 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2202      	movs	r2, #2
 8009998:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f023 0120 	bic.w	r1, r3, #32
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	430a      	orrs	r2, r1
 80099ae:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f042 0204 	orr.w	r2, r2, #4
 80099be:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
	...

080099d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d101      	bne.n	80099ea <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e09f      	b.n	8009b2a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d106      	bne.n	8009a04 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7f9 fd58 	bl	80034b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2202      	movs	r2, #2
 8009a08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009a0c:	4b49      	ldr	r3, [pc, #292]	@ (8009b34 <HAL_RTC_Init+0x15c>)
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	f003 0310 	and.w	r3, r3, #16
 8009a14:	2b10      	cmp	r3, #16
 8009a16:	d07e      	beq.n	8009b16 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	22ca      	movs	r2, #202	@ 0xca
 8009a1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2253      	movs	r2, #83	@ 0x53
 8009a26:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f8ab 	bl	8009b84 <RTC_EnterInitMode>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00a      	beq.n	8009a4a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	22ff      	movs	r2, #255	@ 0xff
 8009a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2204      	movs	r2, #4
 8009a40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	73fb      	strb	r3, [r7, #15]
 8009a48:	e067      	b.n	8009b1a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	6812      	ldr	r2, [r2, #0]
 8009a54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009a58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a5c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6899      	ldr	r1, [r3, #8]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	431a      	orrs	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	68d2      	ldr	r2, [r2, #12]
 8009a84:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6919      	ldr	r1, [r3, #16]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	041a      	lsls	r2, r3, #16
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	430a      	orrs	r2, r1
 8009a98:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68da      	ldr	r2, [r3, #12]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009aa8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f022 0203 	bic.w	r2, r2, #3
 8009ab8:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	69da      	ldr	r2, [r3, #28]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	431a      	orrs	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d113      	bne.n	8009b08 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f829 	bl	8009b38 <HAL_RTC_WaitForSynchro>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00d      	beq.n	8009b08 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	22ff      	movs	r2, #255	@ 0xff
 8009af2:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2204      	movs	r2, #4
 8009af8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e010      	b.n	8009b2a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	22ff      	movs	r2, #255	@ 0xff
 8009b0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	73fb      	strb	r3, [r7, #15]
 8009b14:	e001      	b.n	8009b1a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009b1a:	7bfb      	ldrb	r3, [r7, #15]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d103      	bne.n	8009b28 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	40002800 	.word	0x40002800

08009b38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68da      	ldr	r2, [r3, #12]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009b4e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009b50:	f7fc ffe8 	bl	8006b24 <HAL_GetTick>
 8009b54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009b56:	e009      	b.n	8009b6c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b58:	f7fc ffe4 	bl	8006b24 <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b66:	d901      	bls.n	8009b6c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	e007      	b.n	8009b7c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	f003 0320 	and.w	r3, r3, #32
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d0ee      	beq.n	8009b58 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d119      	bne.n	8009bce <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009ba4:	f7fc ffbe 	bl	8006b24 <HAL_GetTick>
 8009ba8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009baa:	e009      	b.n	8009bc0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009bac:	f7fc ffba 	bl	8006b24 <HAL_GetTick>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009bba:	d901      	bls.n	8009bc0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e007      	b.n	8009bd0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d0ee      	beq.n	8009bac <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d101      	bne.n	8009bf2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8009bee:	2302      	movs	r3, #2
 8009bf0:	e0a8      	b.n	8009d44 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	22ca      	movs	r2, #202	@ 0xca
 8009c08:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2253      	movs	r2, #83	@ 0x53
 8009c10:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d020      	beq.n	8009c62 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8009c20:	f7fc ff80 	bl	8006b24 <HAL_GetTick>
 8009c24:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009c26:	e015      	b.n	8009c54 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c28:	f7fc ff7c 	bl	8006b24 <HAL_GetTick>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c36:	d90d      	bls.n	8009c54 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	22ff      	movs	r2, #255	@ 0xff
 8009c3e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2203      	movs	r2, #3
 8009c44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8009c50:	2303      	movs	r3, #3
 8009c52:	e077      	b.n	8009d44 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	f003 0304 	and.w	r3, r3, #4
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1e2      	bne.n	8009c28 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009c70:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8009c82:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009c84:	f7fc ff4e 	bl	8006b24 <HAL_GetTick>
 8009c88:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009c8a:	e015      	b.n	8009cb8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c8c:	f7fc ff4a 	bl	8006b24 <HAL_GetTick>
 8009c90:	4602      	mov	r2, r0
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c9a:	d90d      	bls.n	8009cb8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	22ff      	movs	r2, #255	@ 0xff
 8009ca2:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2203      	movs	r2, #3
 8009ca8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	e045      	b.n	8009d44 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	f003 0304 	and.w	r3, r3, #4
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d0e2      	beq.n	8009c8c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f022 0207 	bic.w	r2, r2, #7
 8009cdc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	6899      	ldr	r1, [r3, #8]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	430a      	orrs	r2, r1
 8009cec:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009cee:	4b17      	ldr	r3, [pc, #92]	@ (8009d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cf4:	4a15      	ldr	r2, [pc, #84]	@ (8009d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009cf6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009cfa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8009cfe:	4b13      	ldr	r3, [pc, #76]	@ (8009d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a12      	ldr	r2, [pc, #72]	@ (8009d4c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009d04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d08:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	689a      	ldr	r2, [r3, #8]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d18:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	689a      	ldr	r2, [r3, #8]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009d28:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	22ff      	movs	r2, #255	@ 0xff
 8009d30:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	58000800 	.word	0x58000800

08009d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e049      	b.n	8009df6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d106      	bne.n	8009d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7f9 fa41 	bl	80031fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2202      	movs	r2, #2
 8009d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	3304      	adds	r3, #4
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	4610      	mov	r0, r2
 8009d90:	f000 fb4e 	bl	800a430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b082      	sub	sp, #8
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e049      	b.n	8009ea4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d106      	bne.n	8009e2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f841 	bl	8009eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2202      	movs	r2, #2
 8009e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	3304      	adds	r3, #4
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	f000 faf7 	bl	800a430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2201      	movs	r2, #1
 8009e56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d109      	bne.n	8009ee4 <HAL_TIM_PWM_Start+0x24>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	bf14      	ite	ne
 8009edc:	2301      	movne	r3, #1
 8009ede:	2300      	moveq	r3, #0
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	e03c      	b.n	8009f5e <HAL_TIM_PWM_Start+0x9e>
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	2b04      	cmp	r3, #4
 8009ee8:	d109      	bne.n	8009efe <HAL_TIM_PWM_Start+0x3e>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	bf14      	ite	ne
 8009ef6:	2301      	movne	r3, #1
 8009ef8:	2300      	moveq	r3, #0
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	e02f      	b.n	8009f5e <HAL_TIM_PWM_Start+0x9e>
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	2b08      	cmp	r3, #8
 8009f02:	d109      	bne.n	8009f18 <HAL_TIM_PWM_Start+0x58>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	bf14      	ite	ne
 8009f10:	2301      	movne	r3, #1
 8009f12:	2300      	moveq	r3, #0
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	e022      	b.n	8009f5e <HAL_TIM_PWM_Start+0x9e>
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	2b0c      	cmp	r3, #12
 8009f1c:	d109      	bne.n	8009f32 <HAL_TIM_PWM_Start+0x72>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	bf14      	ite	ne
 8009f2a:	2301      	movne	r3, #1
 8009f2c:	2300      	moveq	r3, #0
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	e015      	b.n	8009f5e <HAL_TIM_PWM_Start+0x9e>
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	2b10      	cmp	r3, #16
 8009f36:	d109      	bne.n	8009f4c <HAL_TIM_PWM_Start+0x8c>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	bf14      	ite	ne
 8009f44:	2301      	movne	r3, #1
 8009f46:	2300      	moveq	r3, #0
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	e008      	b.n	8009f5e <HAL_TIM_PWM_Start+0x9e>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	bf14      	ite	ne
 8009f58:	2301      	movne	r3, #1
 8009f5a:	2300      	moveq	r3, #0
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e079      	b.n	800a05a <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d104      	bne.n	8009f76 <HAL_TIM_PWM_Start+0xb6>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2202      	movs	r2, #2
 8009f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f74:	e023      	b.n	8009fbe <HAL_TIM_PWM_Start+0xfe>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b04      	cmp	r3, #4
 8009f7a:	d104      	bne.n	8009f86 <HAL_TIM_PWM_Start+0xc6>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f84:	e01b      	b.n	8009fbe <HAL_TIM_PWM_Start+0xfe>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	2b08      	cmp	r3, #8
 8009f8a:	d104      	bne.n	8009f96 <HAL_TIM_PWM_Start+0xd6>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2202      	movs	r2, #2
 8009f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f94:	e013      	b.n	8009fbe <HAL_TIM_PWM_Start+0xfe>
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	2b0c      	cmp	r3, #12
 8009f9a:	d104      	bne.n	8009fa6 <HAL_TIM_PWM_Start+0xe6>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009fa4:	e00b      	b.n	8009fbe <HAL_TIM_PWM_Start+0xfe>
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b10      	cmp	r3, #16
 8009faa:	d104      	bne.n	8009fb6 <HAL_TIM_PWM_Start+0xf6>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2202      	movs	r2, #2
 8009fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009fb4:	e003      	b.n	8009fbe <HAL_TIM_PWM_Start+0xfe>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2202      	movs	r2, #2
 8009fba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 fdbc 	bl	800ab44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a24      	ldr	r2, [pc, #144]	@ (800a064 <HAL_TIM_PWM_Start+0x1a4>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d009      	beq.n	8009fea <HAL_TIM_PWM_Start+0x12a>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a23      	ldr	r2, [pc, #140]	@ (800a068 <HAL_TIM_PWM_Start+0x1a8>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d004      	beq.n	8009fea <HAL_TIM_PWM_Start+0x12a>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a21      	ldr	r2, [pc, #132]	@ (800a06c <HAL_TIM_PWM_Start+0x1ac>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d101      	bne.n	8009fee <HAL_TIM_PWM_Start+0x12e>
 8009fea:	2301      	movs	r3, #1
 8009fec:	e000      	b.n	8009ff0 <HAL_TIM_PWM_Start+0x130>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d007      	beq.n	800a004 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a002:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a16      	ldr	r2, [pc, #88]	@ (800a064 <HAL_TIM_PWM_Start+0x1a4>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d004      	beq.n	800a018 <HAL_TIM_PWM_Start+0x158>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a016:	d115      	bne.n	800a044 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	689a      	ldr	r2, [r3, #8]
 800a01e:	4b14      	ldr	r3, [pc, #80]	@ (800a070 <HAL_TIM_PWM_Start+0x1b0>)
 800a020:	4013      	ands	r3, r2
 800a022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2b06      	cmp	r3, #6
 800a028:	d015      	beq.n	800a056 <HAL_TIM_PWM_Start+0x196>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a030:	d011      	beq.n	800a056 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f042 0201 	orr.w	r2, r2, #1
 800a040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a042:	e008      	b.n	800a056 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f042 0201 	orr.w	r2, r2, #1
 800a052:	601a      	str	r2, [r3, #0]
 800a054:	e000      	b.n	800a058 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a056:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	40012c00 	.word	0x40012c00
 800a068:	40014400 	.word	0x40014400
 800a06c:	40014800 	.word	0x40014800
 800a070:	00010007 	.word	0x00010007

0800a074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d101      	bne.n	800a092 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a08e:	2302      	movs	r3, #2
 800a090:	e0ff      	b.n	800a292 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b14      	cmp	r3, #20
 800a09e:	f200 80f0 	bhi.w	800a282 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a8:	0800a0fd 	.word	0x0800a0fd
 800a0ac:	0800a283 	.word	0x0800a283
 800a0b0:	0800a283 	.word	0x0800a283
 800a0b4:	0800a283 	.word	0x0800a283
 800a0b8:	0800a13d 	.word	0x0800a13d
 800a0bc:	0800a283 	.word	0x0800a283
 800a0c0:	0800a283 	.word	0x0800a283
 800a0c4:	0800a283 	.word	0x0800a283
 800a0c8:	0800a17f 	.word	0x0800a17f
 800a0cc:	0800a283 	.word	0x0800a283
 800a0d0:	0800a283 	.word	0x0800a283
 800a0d4:	0800a283 	.word	0x0800a283
 800a0d8:	0800a1bf 	.word	0x0800a1bf
 800a0dc:	0800a283 	.word	0x0800a283
 800a0e0:	0800a283 	.word	0x0800a283
 800a0e4:	0800a283 	.word	0x0800a283
 800a0e8:	0800a201 	.word	0x0800a201
 800a0ec:	0800a283 	.word	0x0800a283
 800a0f0:	0800a283 	.word	0x0800a283
 800a0f4:	0800a283 	.word	0x0800a283
 800a0f8:	0800a241 	.word	0x0800a241
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68b9      	ldr	r1, [r7, #8]
 800a102:	4618      	mov	r0, r3
 800a104:	f000 fa04 	bl	800a510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	699a      	ldr	r2, [r3, #24]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f042 0208 	orr.w	r2, r2, #8
 800a116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	699a      	ldr	r2, [r3, #24]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f022 0204 	bic.w	r2, r2, #4
 800a126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6999      	ldr	r1, [r3, #24]
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	691a      	ldr	r2, [r3, #16]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	430a      	orrs	r2, r1
 800a138:	619a      	str	r2, [r3, #24]
      break;
 800a13a:	e0a5      	b.n	800a288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68b9      	ldr	r1, [r7, #8]
 800a142:	4618      	mov	r0, r3
 800a144:	f000 fa60 	bl	800a608 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	699a      	ldr	r2, [r3, #24]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	699a      	ldr	r2, [r3, #24]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6999      	ldr	r1, [r3, #24]
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	021a      	lsls	r2, r3, #8
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	430a      	orrs	r2, r1
 800a17a:	619a      	str	r2, [r3, #24]
      break;
 800a17c:	e084      	b.n	800a288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68b9      	ldr	r1, [r7, #8]
 800a184:	4618      	mov	r0, r3
 800a186:	f000 fab9 	bl	800a6fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	69da      	ldr	r2, [r3, #28]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f042 0208 	orr.w	r2, r2, #8
 800a198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	69da      	ldr	r2, [r3, #28]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f022 0204 	bic.w	r2, r2, #4
 800a1a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	69d9      	ldr	r1, [r3, #28]
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	691a      	ldr	r2, [r3, #16]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	430a      	orrs	r2, r1
 800a1ba:	61da      	str	r2, [r3, #28]
      break;
 800a1bc:	e064      	b.n	800a288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68b9      	ldr	r1, [r7, #8]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f000 fb11 	bl	800a7ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	69da      	ldr	r2, [r3, #28]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	69da      	ldr	r2, [r3, #28]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	69d9      	ldr	r1, [r3, #28]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	021a      	lsls	r2, r3, #8
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	61da      	str	r2, [r3, #28]
      break;
 800a1fe:	e043      	b.n	800a288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68b9      	ldr	r1, [r7, #8]
 800a206:	4618      	mov	r0, r3
 800a208:	f000 fb4e 	bl	800a8a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f042 0208 	orr.w	r2, r2, #8
 800a21a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f022 0204 	bic.w	r2, r2, #4
 800a22a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	691a      	ldr	r2, [r3, #16]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	430a      	orrs	r2, r1
 800a23c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a23e:	e023      	b.n	800a288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68b9      	ldr	r1, [r7, #8]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 fb86 	bl	800a958 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a25a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a26a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	021a      	lsls	r2, r3, #8
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	430a      	orrs	r2, r1
 800a27e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a280:	e002      	b.n	800a288 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	75fb      	strb	r3, [r7, #23]
      break;
 800a286:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a290:	7dfb      	ldrb	r3, [r7, #23]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop

0800a29c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d101      	bne.n	800a2b8 <HAL_TIM_ConfigClockSource+0x1c>
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	e0b6      	b.n	800a426 <HAL_TIM_ConfigClockSource+0x18a>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a2d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a2da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2f4:	d03e      	beq.n	800a374 <HAL_TIM_ConfigClockSource+0xd8>
 800a2f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2fa:	f200 8087 	bhi.w	800a40c <HAL_TIM_ConfigClockSource+0x170>
 800a2fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a302:	f000 8086 	beq.w	800a412 <HAL_TIM_ConfigClockSource+0x176>
 800a306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a30a:	d87f      	bhi.n	800a40c <HAL_TIM_ConfigClockSource+0x170>
 800a30c:	2b70      	cmp	r3, #112	@ 0x70
 800a30e:	d01a      	beq.n	800a346 <HAL_TIM_ConfigClockSource+0xaa>
 800a310:	2b70      	cmp	r3, #112	@ 0x70
 800a312:	d87b      	bhi.n	800a40c <HAL_TIM_ConfigClockSource+0x170>
 800a314:	2b60      	cmp	r3, #96	@ 0x60
 800a316:	d050      	beq.n	800a3ba <HAL_TIM_ConfigClockSource+0x11e>
 800a318:	2b60      	cmp	r3, #96	@ 0x60
 800a31a:	d877      	bhi.n	800a40c <HAL_TIM_ConfigClockSource+0x170>
 800a31c:	2b50      	cmp	r3, #80	@ 0x50
 800a31e:	d03c      	beq.n	800a39a <HAL_TIM_ConfigClockSource+0xfe>
 800a320:	2b50      	cmp	r3, #80	@ 0x50
 800a322:	d873      	bhi.n	800a40c <HAL_TIM_ConfigClockSource+0x170>
 800a324:	2b40      	cmp	r3, #64	@ 0x40
 800a326:	d058      	beq.n	800a3da <HAL_TIM_ConfigClockSource+0x13e>
 800a328:	2b40      	cmp	r3, #64	@ 0x40
 800a32a:	d86f      	bhi.n	800a40c <HAL_TIM_ConfigClockSource+0x170>
 800a32c:	2b30      	cmp	r3, #48	@ 0x30
 800a32e:	d064      	beq.n	800a3fa <HAL_TIM_ConfigClockSource+0x15e>
 800a330:	2b30      	cmp	r3, #48	@ 0x30
 800a332:	d86b      	bhi.n	800a40c <HAL_TIM_ConfigClockSource+0x170>
 800a334:	2b20      	cmp	r3, #32
 800a336:	d060      	beq.n	800a3fa <HAL_TIM_ConfigClockSource+0x15e>
 800a338:	2b20      	cmp	r3, #32
 800a33a:	d867      	bhi.n	800a40c <HAL_TIM_ConfigClockSource+0x170>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d05c      	beq.n	800a3fa <HAL_TIM_ConfigClockSource+0x15e>
 800a340:	2b10      	cmp	r3, #16
 800a342:	d05a      	beq.n	800a3fa <HAL_TIM_ConfigClockSource+0x15e>
 800a344:	e062      	b.n	800a40c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a356:	f000 fbd5 	bl	800ab04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	609a      	str	r2, [r3, #8]
      break;
 800a372:	e04f      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a384:	f000 fbbe 	bl	800ab04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689a      	ldr	r2, [r3, #8]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a396:	609a      	str	r2, [r3, #8]
      break;
 800a398:	e03c      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f000 fb30 	bl	800aa0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2150      	movs	r1, #80	@ 0x50
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 fb89 	bl	800aaca <TIM_ITRx_SetConfig>
      break;
 800a3b8:	e02c      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	f000 fb4f 	bl	800aa6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2160      	movs	r1, #96	@ 0x60
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 fb79 	bl	800aaca <TIM_ITRx_SetConfig>
      break;
 800a3d8:	e01c      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	f000 fb10 	bl	800aa0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2140      	movs	r1, #64	@ 0x40
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 fb69 	bl	800aaca <TIM_ITRx_SetConfig>
      break;
 800a3f8:	e00c      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4619      	mov	r1, r3
 800a404:	4610      	mov	r0, r2
 800a406:	f000 fb60 	bl	800aaca <TIM_ITRx_SetConfig>
      break;
 800a40a:	e003      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	73fb      	strb	r3, [r7, #15]
      break;
 800a410:	e000      	b.n	800a414 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a424:	7bfb      	ldrb	r3, [r7, #15]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
	...

0800a430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a30      	ldr	r2, [pc, #192]	@ (800a504 <TIM_Base_SetConfig+0xd4>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d003      	beq.n	800a450 <TIM_Base_SetConfig+0x20>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a44e:	d108      	bne.n	800a462 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	4313      	orrs	r3, r2
 800a460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a27      	ldr	r2, [pc, #156]	@ (800a504 <TIM_Base_SetConfig+0xd4>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d00b      	beq.n	800a482 <TIM_Base_SetConfig+0x52>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a470:	d007      	beq.n	800a482 <TIM_Base_SetConfig+0x52>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a24      	ldr	r2, [pc, #144]	@ (800a508 <TIM_Base_SetConfig+0xd8>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d003      	beq.n	800a482 <TIM_Base_SetConfig+0x52>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a23      	ldr	r2, [pc, #140]	@ (800a50c <TIM_Base_SetConfig+0xdc>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d108      	bne.n	800a494 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	4313      	orrs	r3, r2
 800a492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	695b      	ldr	r3, [r3, #20]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	689a      	ldr	r2, [r3, #8]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a12      	ldr	r2, [pc, #72]	@ (800a504 <TIM_Base_SetConfig+0xd4>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d007      	beq.n	800a4d0 <TIM_Base_SetConfig+0xa0>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a11      	ldr	r2, [pc, #68]	@ (800a508 <TIM_Base_SetConfig+0xd8>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d003      	beq.n	800a4d0 <TIM_Base_SetConfig+0xa0>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a10      	ldr	r2, [pc, #64]	@ (800a50c <TIM_Base_SetConfig+0xdc>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d103      	bne.n	800a4d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	691a      	ldr	r2, [r3, #16]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	f003 0301 	and.w	r3, r3, #1
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d105      	bne.n	800a4f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	f023 0201 	bic.w	r2, r3, #1
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	611a      	str	r2, [r3, #16]
  }
}
 800a4f6:	bf00      	nop
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	40012c00 	.word	0x40012c00
 800a508:	40014400 	.word	0x40014400
 800a50c:	40014800 	.word	0x40014800

0800a510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a510:	b480      	push	{r7}
 800a512:	b087      	sub	sp, #28
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a1b      	ldr	r3, [r3, #32]
 800a51e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a1b      	ldr	r3, [r3, #32]
 800a524:	f023 0201 	bic.w	r2, r3, #1
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a53e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 0303 	bic.w	r3, r3, #3
 800a54a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f023 0302 	bic.w	r3, r3, #2
 800a55c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	4313      	orrs	r3, r2
 800a566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a24      	ldr	r2, [pc, #144]	@ (800a5fc <TIM_OC1_SetConfig+0xec>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d007      	beq.n	800a580 <TIM_OC1_SetConfig+0x70>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a23      	ldr	r2, [pc, #140]	@ (800a600 <TIM_OC1_SetConfig+0xf0>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d003      	beq.n	800a580 <TIM_OC1_SetConfig+0x70>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a22      	ldr	r2, [pc, #136]	@ (800a604 <TIM_OC1_SetConfig+0xf4>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d10c      	bne.n	800a59a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	f023 0308 	bic.w	r3, r3, #8
 800a586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	4313      	orrs	r3, r2
 800a590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f023 0304 	bic.w	r3, r3, #4
 800a598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4a17      	ldr	r2, [pc, #92]	@ (800a5fc <TIM_OC1_SetConfig+0xec>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d007      	beq.n	800a5b2 <TIM_OC1_SetConfig+0xa2>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4a17      	ldr	r2, [pc, #92]	@ (800a604 <TIM_OC1_SetConfig+0xf4>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d003      	beq.n	800a5b2 <TIM_OC1_SetConfig+0xa2>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a14      	ldr	r2, [pc, #80]	@ (800a600 <TIM_OC1_SetConfig+0xf0>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d111      	bne.n	800a5d6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a5c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	685a      	ldr	r2, [r3, #4]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	621a      	str	r2, [r3, #32]
}
 800a5f0:	bf00      	nop
 800a5f2:	371c      	adds	r7, #28
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	40012c00 	.word	0x40012c00
 800a600:	40014800 	.word	0x40014800
 800a604:	40014400 	.word	0x40014400

0800a608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a608:	b480      	push	{r7}
 800a60a:	b087      	sub	sp, #28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a1b      	ldr	r3, [r3, #32]
 800a61c:	f023 0210 	bic.w	r2, r3, #16
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a63a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	021b      	lsls	r3, r3, #8
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	f023 0320 	bic.w	r3, r3, #32
 800a656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	011b      	lsls	r3, r3, #4
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	4313      	orrs	r3, r2
 800a662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4a22      	ldr	r2, [pc, #136]	@ (800a6f0 <TIM_OC2_SetConfig+0xe8>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d10d      	bne.n	800a688 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	011b      	lsls	r3, r3, #4
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a686:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a19      	ldr	r2, [pc, #100]	@ (800a6f0 <TIM_OC2_SetConfig+0xe8>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d007      	beq.n	800a6a0 <TIM_OC2_SetConfig+0x98>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4a18      	ldr	r2, [pc, #96]	@ (800a6f4 <TIM_OC2_SetConfig+0xec>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d003      	beq.n	800a6a0 <TIM_OC2_SetConfig+0x98>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4a17      	ldr	r2, [pc, #92]	@ (800a6f8 <TIM_OC2_SetConfig+0xf0>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d113      	bne.n	800a6c8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a6a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a6ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	693a      	ldr	r2, [r7, #16]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	693a      	ldr	r2, [r7, #16]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	693a      	ldr	r2, [r7, #16]
 800a6cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	621a      	str	r2, [r3, #32]
}
 800a6e2:	bf00      	nop
 800a6e4:	371c      	adds	r7, #28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	40012c00 	.word	0x40012c00
 800a6f4:	40014400 	.word	0x40014400
 800a6f8:	40014800 	.word	0x40014800

0800a6fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a1b      	ldr	r3, [r3, #32]
 800a710:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	69db      	ldr	r3, [r3, #28]
 800a722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a72a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a72e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f023 0303 	bic.w	r3, r3, #3
 800a736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	4313      	orrs	r3, r2
 800a740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	021b      	lsls	r3, r3, #8
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	4313      	orrs	r3, r2
 800a754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a21      	ldr	r2, [pc, #132]	@ (800a7e0 <TIM_OC3_SetConfig+0xe4>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d10d      	bne.n	800a77a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	021b      	lsls	r3, r3, #8
 800a76c:	697a      	ldr	r2, [r7, #20]
 800a76e:	4313      	orrs	r3, r2
 800a770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a18      	ldr	r2, [pc, #96]	@ (800a7e0 <TIM_OC3_SetConfig+0xe4>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d007      	beq.n	800a792 <TIM_OC3_SetConfig+0x96>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a17      	ldr	r2, [pc, #92]	@ (800a7e4 <TIM_OC3_SetConfig+0xe8>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d003      	beq.n	800a792 <TIM_OC3_SetConfig+0x96>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a16      	ldr	r2, [pc, #88]	@ (800a7e8 <TIM_OC3_SetConfig+0xec>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d113      	bne.n	800a7ba <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a7a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	011b      	lsls	r3, r3, #4
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	011b      	lsls	r3, r3, #4
 800a7b4:	693a      	ldr	r2, [r7, #16]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	697a      	ldr	r2, [r7, #20]
 800a7d2:	621a      	str	r2, [r3, #32]
}
 800a7d4:	bf00      	nop
 800a7d6:	371c      	adds	r7, #28
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	40012c00 	.word	0x40012c00
 800a7e4:	40014400 	.word	0x40014400
 800a7e8:	40014800 	.word	0x40014800

0800a7ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a1b      	ldr	r3, [r3, #32]
 800a7fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	69db      	ldr	r3, [r3, #28]
 800a812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a81a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a81e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	021b      	lsls	r3, r3, #8
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	4313      	orrs	r3, r2
 800a832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a83a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	031b      	lsls	r3, r3, #12
 800a842:	693a      	ldr	r2, [r7, #16]
 800a844:	4313      	orrs	r3, r2
 800a846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a14      	ldr	r2, [pc, #80]	@ (800a89c <TIM_OC4_SetConfig+0xb0>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d007      	beq.n	800a860 <TIM_OC4_SetConfig+0x74>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a13      	ldr	r2, [pc, #76]	@ (800a8a0 <TIM_OC4_SetConfig+0xb4>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d003      	beq.n	800a860 <TIM_OC4_SetConfig+0x74>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a12      	ldr	r2, [pc, #72]	@ (800a8a4 <TIM_OC4_SetConfig+0xb8>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d109      	bne.n	800a874 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a866:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	019b      	lsls	r3, r3, #6
 800a86e:	697a      	ldr	r2, [r7, #20]
 800a870:	4313      	orrs	r3, r2
 800a872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	621a      	str	r2, [r3, #32]
}
 800a88e:	bf00      	nop
 800a890:	371c      	adds	r7, #28
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	40012c00 	.word	0x40012c00
 800a8a0:	40014400 	.word	0x40014400
 800a8a4:	40014800 	.word	0x40014800

0800a8a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b087      	sub	sp, #28
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a1b      	ldr	r3, [r3, #32]
 800a8bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a8ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	041b      	lsls	r3, r3, #16
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4a13      	ldr	r2, [pc, #76]	@ (800a94c <TIM_OC5_SetConfig+0xa4>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d007      	beq.n	800a912 <TIM_OC5_SetConfig+0x6a>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a12      	ldr	r2, [pc, #72]	@ (800a950 <TIM_OC5_SetConfig+0xa8>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d003      	beq.n	800a912 <TIM_OC5_SetConfig+0x6a>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a11      	ldr	r2, [pc, #68]	@ (800a954 <TIM_OC5_SetConfig+0xac>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d109      	bne.n	800a926 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a918:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	021b      	lsls	r3, r3, #8
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	4313      	orrs	r3, r2
 800a924:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	685a      	ldr	r2, [r3, #4]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	693a      	ldr	r2, [r7, #16]
 800a93e:	621a      	str	r2, [r3, #32]
}
 800a940:	bf00      	nop
 800a942:	371c      	adds	r7, #28
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	40012c00 	.word	0x40012c00
 800a950:	40014400 	.word	0x40014400
 800a954:	40014800 	.word	0x40014800

0800a958 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a958:	b480      	push	{r7}
 800a95a:	b087      	sub	sp, #28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a1b      	ldr	r3, [r3, #32]
 800a96c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a97e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a98a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	021b      	lsls	r3, r3, #8
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	4313      	orrs	r3, r2
 800a996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a99e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	051b      	lsls	r3, r3, #20
 800a9a6:	693a      	ldr	r2, [r7, #16]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a14      	ldr	r2, [pc, #80]	@ (800aa00 <TIM_OC6_SetConfig+0xa8>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d007      	beq.n	800a9c4 <TIM_OC6_SetConfig+0x6c>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a13      	ldr	r2, [pc, #76]	@ (800aa04 <TIM_OC6_SetConfig+0xac>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d003      	beq.n	800a9c4 <TIM_OC6_SetConfig+0x6c>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a12      	ldr	r2, [pc, #72]	@ (800aa08 <TIM_OC6_SetConfig+0xb0>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d109      	bne.n	800a9d8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a9ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	695b      	ldr	r3, [r3, #20]
 800a9d0:	029b      	lsls	r3, r3, #10
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	693a      	ldr	r2, [r7, #16]
 800a9f0:	621a      	str	r2, [r3, #32]
}
 800a9f2:	bf00      	nop
 800a9f4:	371c      	adds	r7, #28
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	40012c00 	.word	0x40012c00
 800aa04:	40014400 	.word	0x40014400
 800aa08:	40014800 	.word	0x40014800

0800aa0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6a1b      	ldr	r3, [r3, #32]
 800aa1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	f023 0201 	bic.w	r2, r3, #1
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aa36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	011b      	lsls	r3, r3, #4
 800aa3c:	693a      	ldr	r2, [r7, #16]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f023 030a 	bic.w	r3, r3, #10
 800aa48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa4a:	697a      	ldr	r2, [r7, #20]
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	693a      	ldr	r2, [r7, #16]
 800aa56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	697a      	ldr	r2, [r7, #20]
 800aa5c:	621a      	str	r2, [r3, #32]
}
 800aa5e:	bf00      	nop
 800aa60:	371c      	adds	r7, #28
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b087      	sub	sp, #28
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6a1b      	ldr	r3, [r3, #32]
 800aa7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6a1b      	ldr	r3, [r3, #32]
 800aa80:	f023 0210 	bic.w	r2, r3, #16
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aa94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	031b      	lsls	r3, r3, #12
 800aa9a:	693a      	ldr	r2, [r7, #16]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aaa6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	011b      	lsls	r3, r3, #4
 800aaac:	697a      	ldr	r2, [r7, #20]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	697a      	ldr	r2, [r7, #20]
 800aabc:	621a      	str	r2, [r3, #32]
}
 800aabe:	bf00      	nop
 800aac0:	371c      	adds	r7, #28
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aaca:	b480      	push	{r7}
 800aacc:	b085      	sub	sp, #20
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800aae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	f043 0307 	orr.w	r3, r3, #7
 800aaf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	609a      	str	r2, [r3, #8]
}
 800aaf8:	bf00      	nop
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b087      	sub	sp, #28
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
 800ab10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	021a      	lsls	r2, r3, #8
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	431a      	orrs	r2, r3
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	697a      	ldr	r2, [r7, #20]
 800ab36:	609a      	str	r2, [r3, #8]
}
 800ab38:	bf00      	nop
 800ab3a:	371c      	adds	r7, #28
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	f003 031f 	and.w	r3, r3, #31
 800ab56:	2201      	movs	r2, #1
 800ab58:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6a1a      	ldr	r2, [r3, #32]
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	43db      	mvns	r3, r3
 800ab66:	401a      	ands	r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6a1a      	ldr	r2, [r3, #32]
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	f003 031f 	and.w	r3, r3, #31
 800ab76:	6879      	ldr	r1, [r7, #4]
 800ab78:	fa01 f303 	lsl.w	r3, r1, r3
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	621a      	str	r2, [r3, #32]
}
 800ab82:	bf00      	nop
 800ab84:	371c      	adds	r7, #28
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
	...

0800ab90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d101      	bne.n	800aba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aba4:	2302      	movs	r3, #2
 800aba6:	e04a      	b.n	800ac3e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2202      	movs	r2, #2
 800abb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a1f      	ldr	r2, [pc, #124]	@ (800ac4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d108      	bne.n	800abe4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800abd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a12      	ldr	r2, [pc, #72]	@ (800ac4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d004      	beq.n	800ac12 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac10:	d10c      	bne.n	800ac2c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68ba      	ldr	r2, [r7, #8]
 800ac2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	40012c00 	.word	0x40012c00

0800ac50 <LL_RCC_GetUSARTClockSource>:
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800ac58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4013      	ands	r3, r2
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <LL_RCC_GetLPUARTClockSource>:
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800ac78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4013      	ands	r3, r2
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d101      	bne.n	800aca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e042      	b.n	800ad28 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d106      	bne.n	800acba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f7f8 fb0f 	bl	80032d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2224      	movs	r2, #36	@ 0x24
 800acbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f022 0201 	bic.w	r2, r2, #1
 800acd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d002      	beq.n	800ace0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fe60 	bl	800b9a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fc35 	bl	800b550 <UART_SetConfig>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d101      	bne.n	800acf0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	e01b      	b.n	800ad28 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	685a      	ldr	r2, [r3, #4]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800acfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	689a      	ldr	r2, [r3, #8]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ad0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f042 0201 	orr.w	r2, r2, #1
 800ad1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fedf 	bl	800bae4 <UART_CheckIdleState>
 800ad26:	4603      	mov	r3, r0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b08a      	sub	sp, #40	@ 0x28
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad44:	2b20      	cmp	r3, #32
 800ad46:	d137      	bne.n	800adb8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d002      	beq.n	800ad54 <HAL_UART_Receive_IT+0x24>
 800ad4e:	88fb      	ldrh	r3, [r7, #6]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d101      	bne.n	800ad58 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	e030      	b.n	800adba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a18      	ldr	r2, [pc, #96]	@ (800adc4 <HAL_UART_Receive_IT+0x94>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d01f      	beq.n	800ada8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d018      	beq.n	800ada8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	e853 3f00 	ldrex	r3, [r3]
 800ad82:	613b      	str	r3, [r7, #16]
   return(result);
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ad8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	461a      	mov	r2, r3
 800ad92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad94:	623b      	str	r3, [r7, #32]
 800ad96:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad98:	69f9      	ldr	r1, [r7, #28]
 800ad9a:	6a3a      	ldr	r2, [r7, #32]
 800ad9c:	e841 2300 	strex	r3, r2, [r1]
 800ada0:	61bb      	str	r3, [r7, #24]
   return(result);
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1e6      	bne.n	800ad76 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ada8:	88fb      	ldrh	r3, [r7, #6]
 800adaa:	461a      	mov	r2, r3
 800adac:	68b9      	ldr	r1, [r7, #8]
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f000 ffb0 	bl	800bd14 <UART_Start_Receive_IT>
 800adb4:	4603      	mov	r3, r0
 800adb6:	e000      	b.n	800adba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800adb8:	2302      	movs	r3, #2
  }
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3728      	adds	r7, #40	@ 0x28
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	40008000 	.word	0x40008000

0800adc8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08a      	sub	sp, #40	@ 0x28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800addc:	2b20      	cmp	r3, #32
 800adde:	d167      	bne.n	800aeb0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d002      	beq.n	800adec <HAL_UART_Transmit_DMA+0x24>
 800ade6:	88fb      	ldrh	r3, [r7, #6]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d101      	bne.n	800adf0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	e060      	b.n	800aeb2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	88fa      	ldrh	r2, [r7, #6]
 800adfa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	88fa      	ldrh	r2, [r7, #6]
 800ae02:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2221      	movs	r2, #33	@ 0x21
 800ae12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d028      	beq.n	800ae70 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae22:	4a26      	ldr	r2, [pc, #152]	@ (800aebc <HAL_UART_Transmit_DMA+0xf4>)
 800ae24:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae2a:	4a25      	ldr	r2, [pc, #148]	@ (800aec0 <HAL_UART_Transmit_DMA+0xf8>)
 800ae2c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae32:	4a24      	ldr	r2, [pc, #144]	@ (800aec4 <HAL_UART_Transmit_DMA+0xfc>)
 800ae34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae46:	4619      	mov	r1, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	3328      	adds	r3, #40	@ 0x28
 800ae4e:	461a      	mov	r2, r3
 800ae50:	88fb      	ldrh	r3, [r7, #6]
 800ae52:	f7fc f8d9 	bl	8007008 <HAL_DMA_Start_IT>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d009      	beq.n	800ae70 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2210      	movs	r2, #16
 800ae60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2220      	movs	r2, #32
 800ae68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e020      	b.n	800aeb2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2240      	movs	r2, #64	@ 0x40
 800ae76:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3308      	adds	r3, #8
 800ae7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	e853 3f00 	ldrex	r3, [r3]
 800ae86:	613b      	str	r3, [r7, #16]
   return(result);
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	3308      	adds	r3, #8
 800ae96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae98:	623a      	str	r2, [r7, #32]
 800ae9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9c:	69f9      	ldr	r1, [r7, #28]
 800ae9e:	6a3a      	ldr	r2, [r7, #32]
 800aea0:	e841 2300 	strex	r3, r2, [r1]
 800aea4:	61bb      	str	r3, [r7, #24]
   return(result);
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1e5      	bne.n	800ae78 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	e000      	b.n	800aeb2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aeb0:	2302      	movs	r3, #2
  }
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3728      	adds	r7, #40	@ 0x28
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	0800c0a7 	.word	0x0800c0a7
 800aec0:	0800c141 	.word	0x0800c141
 800aec4:	0800c15d 	.word	0x0800c15d

0800aec8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b0ba      	sub	sp, #232	@ 0xe8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aeee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aef2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aef6:	4013      	ands	r3, r2
 800aef8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aefc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af00:	2b00      	cmp	r3, #0
 800af02:	d11b      	bne.n	800af3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af08:	f003 0320 	and.w	r3, r3, #32
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d015      	beq.n	800af3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af14:	f003 0320 	and.w	r3, r3, #32
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d105      	bne.n	800af28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af24:	2b00      	cmp	r3, #0
 800af26:	d009      	beq.n	800af3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 82e3 	beq.w	800b4f8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	4798      	blx	r3
      }
      return;
 800af3a:	e2dd      	b.n	800b4f8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800af3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af40:	2b00      	cmp	r3, #0
 800af42:	f000 8123 	beq.w	800b18c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800af46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800af4a:	4b8d      	ldr	r3, [pc, #564]	@ (800b180 <HAL_UART_IRQHandler+0x2b8>)
 800af4c:	4013      	ands	r3, r2
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d106      	bne.n	800af60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800af52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800af56:	4b8b      	ldr	r3, [pc, #556]	@ (800b184 <HAL_UART_IRQHandler+0x2bc>)
 800af58:	4013      	ands	r3, r2
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f000 8116 	beq.w	800b18c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af64:	f003 0301 	and.w	r3, r3, #1
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d011      	beq.n	800af90 <HAL_UART_IRQHandler+0xc8>
 800af6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af74:	2b00      	cmp	r3, #0
 800af76:	d00b      	beq.n	800af90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2201      	movs	r2, #1
 800af7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af86:	f043 0201 	orr.w	r2, r3, #1
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af94:	f003 0302 	and.w	r3, r3, #2
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d011      	beq.n	800afc0 <HAL_UART_IRQHandler+0xf8>
 800af9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800afa0:	f003 0301 	and.w	r3, r3, #1
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00b      	beq.n	800afc0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2202      	movs	r2, #2
 800afae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afb6:	f043 0204 	orr.w	r2, r3, #4
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afc4:	f003 0304 	and.w	r3, r3, #4
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d011      	beq.n	800aff0 <HAL_UART_IRQHandler+0x128>
 800afcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800afd0:	f003 0301 	and.w	r3, r3, #1
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00b      	beq.n	800aff0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2204      	movs	r2, #4
 800afde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afe6:	f043 0202 	orr.w	r2, r3, #2
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aff4:	f003 0308 	and.w	r3, r3, #8
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d017      	beq.n	800b02c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800affc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b000:	f003 0320 	and.w	r3, r3, #32
 800b004:	2b00      	cmp	r3, #0
 800b006:	d105      	bne.n	800b014 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b008:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b00c:	4b5c      	ldr	r3, [pc, #368]	@ (800b180 <HAL_UART_IRQHandler+0x2b8>)
 800b00e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00b      	beq.n	800b02c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2208      	movs	r2, #8
 800b01a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b022:	f043 0208 	orr.w	r2, r3, #8
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b034:	2b00      	cmp	r3, #0
 800b036:	d012      	beq.n	800b05e <HAL_UART_IRQHandler+0x196>
 800b038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b03c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00c      	beq.n	800b05e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b04c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b054:	f043 0220 	orr.w	r2, r3, #32
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 8249 	beq.w	800b4fc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b06e:	f003 0320 	and.w	r3, r3, #32
 800b072:	2b00      	cmp	r3, #0
 800b074:	d013      	beq.n	800b09e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b07a:	f003 0320 	and.w	r3, r3, #32
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d105      	bne.n	800b08e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d007      	beq.n	800b09e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0b2:	2b40      	cmp	r3, #64	@ 0x40
 800b0b4:	d005      	beq.n	800b0c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b0b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b0ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d054      	beq.n	800b16c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 ff89 	bl	800bfda <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0d2:	2b40      	cmp	r3, #64	@ 0x40
 800b0d4:	d146      	bne.n	800b164 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	3308      	adds	r3, #8
 800b0dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b0e4:	e853 3f00 	ldrex	r3, [r3]
 800b0e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b0ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b0f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	3308      	adds	r3, #8
 800b0fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b102:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b106:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b10e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b112:	e841 2300 	strex	r3, r2, [r1]
 800b116:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b11a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1d9      	bne.n	800b0d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d017      	beq.n	800b15c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b132:	4a15      	ldr	r2, [pc, #84]	@ (800b188 <HAL_UART_IRQHandler+0x2c0>)
 800b134:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7fc f83d 	bl	80071bc <HAL_DMA_Abort_IT>
 800b142:	4603      	mov	r3, r0
 800b144:	2b00      	cmp	r3, #0
 800b146:	d019      	beq.n	800b17c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b14e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b156:	4610      	mov	r0, r2
 800b158:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b15a:	e00f      	b.n	800b17c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f9e1 	bl	800b524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b162:	e00b      	b.n	800b17c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f9dd 	bl	800b524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b16a:	e007      	b.n	800b17c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 f9d9 	bl	800b524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b17a:	e1bf      	b.n	800b4fc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b17c:	bf00      	nop
    return;
 800b17e:	e1bd      	b.n	800b4fc <HAL_UART_IRQHandler+0x634>
 800b180:	10000001 	.word	0x10000001
 800b184:	04000120 	.word	0x04000120
 800b188:	0800c1dd 	.word	0x0800c1dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b190:	2b01      	cmp	r3, #1
 800b192:	f040 8153 	bne.w	800b43c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b19a:	f003 0310 	and.w	r3, r3, #16
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	f000 814c 	beq.w	800b43c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b1a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1a8:	f003 0310 	and.w	r3, r3, #16
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f000 8145 	beq.w	800b43c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2210      	movs	r2, #16
 800b1b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1c4:	2b40      	cmp	r3, #64	@ 0x40
 800b1c6:	f040 80bb 	bne.w	800b340 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b1d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f000 818f 	beq.w	800b500 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b1e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	f080 8187 	bcs.w	800b500 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b1f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f003 0320 	and.w	r3, r3, #32
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f040 8087 	bne.w	800b31e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b218:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b21c:	e853 3f00 	ldrex	r3, [r3]
 800b220:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b224:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b22c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	461a      	mov	r2, r3
 800b236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b23a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b23e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b242:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b246:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b24a:	e841 2300 	strex	r3, r2, [r1]
 800b24e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b252:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1da      	bne.n	800b210 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	3308      	adds	r3, #8
 800b260:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b262:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b264:	e853 3f00 	ldrex	r3, [r3]
 800b268:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b26a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b26c:	f023 0301 	bic.w	r3, r3, #1
 800b270:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3308      	adds	r3, #8
 800b27a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b27e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b282:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b284:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b286:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b28a:	e841 2300 	strex	r3, r2, [r1]
 800b28e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b290:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e1      	bne.n	800b25a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3308      	adds	r3, #8
 800b29c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b2a0:	e853 3f00 	ldrex	r3, [r3]
 800b2a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b2a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3308      	adds	r3, #8
 800b2b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b2ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b2bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b2c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b2c2:	e841 2300 	strex	r3, r2, [r1]
 800b2c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b2c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1e3      	bne.n	800b296 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2220      	movs	r2, #32
 800b2d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2e4:	e853 3f00 	ldrex	r3, [r3]
 800b2e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b2ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2ec:	f023 0310 	bic.w	r3, r3, #16
 800b2f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b300:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b302:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b304:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b306:	e841 2300 	strex	r3, r2, [r1]
 800b30a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b30c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e4      	bne.n	800b2dc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fb fef0 	bl	80070fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2202      	movs	r2, #2
 800b322:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b330:	b29b      	uxth	r3, r3
 800b332:	1ad3      	subs	r3, r2, r3
 800b334:	b29b      	uxth	r3, r3
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f8fd 	bl	800b538 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b33e:	e0df      	b.n	800b500 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f000 80d1 	beq.w	800b504 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b362:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b366:	2b00      	cmp	r3, #0
 800b368:	f000 80cc 	beq.w	800b504 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b374:	e853 3f00 	ldrex	r3, [r3]
 800b378:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b37a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b37c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	461a      	mov	r2, r3
 800b38a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b38e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b390:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b396:	e841 2300 	strex	r3, r2, [r1]
 800b39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b39c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1e4      	bne.n	800b36c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ac:	e853 3f00 	ldrex	r3, [r3]
 800b3b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3b8:	f023 0301 	bic.w	r3, r3, #1
 800b3bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3308      	adds	r3, #8
 800b3c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b3ca:	633a      	str	r2, [r7, #48]	@ 0x30
 800b3cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e1      	bne.n	800b3a2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2220      	movs	r2, #32
 800b3e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	e853 3f00 	ldrex	r3, [r3]
 800b3fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f023 0310 	bic.w	r3, r3, #16
 800b406:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	461a      	mov	r2, r3
 800b410:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b414:	61fb      	str	r3, [r7, #28]
 800b416:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b418:	69b9      	ldr	r1, [r7, #24]
 800b41a:	69fa      	ldr	r2, [r7, #28]
 800b41c:	e841 2300 	strex	r3, r2, [r1]
 800b420:	617b      	str	r3, [r7, #20]
   return(result);
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1e4      	bne.n	800b3f2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2202      	movs	r2, #2
 800b42c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b42e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b432:	4619      	mov	r1, r3
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 f87f 	bl	800b538 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b43a:	e063      	b.n	800b504 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00e      	beq.n	800b466 <HAL_UART_IRQHandler+0x59e>
 800b448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b44c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b450:	2b00      	cmp	r3, #0
 800b452:	d008      	beq.n	800b466 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b45c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f001 fc1a 	bl	800cc98 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b464:	e051      	b.n	800b50a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b46a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d014      	beq.n	800b49c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d105      	bne.n	800b48a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b47e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b482:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b486:	2b00      	cmp	r3, #0
 800b488:	d008      	beq.n	800b49c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d03a      	beq.n	800b508 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	4798      	blx	r3
    }
    return;
 800b49a:	e035      	b.n	800b508 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d009      	beq.n	800b4bc <HAL_UART_IRQHandler+0x5f4>
 800b4a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d003      	beq.n	800b4bc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 fea7 	bl	800c208 <UART_EndTransmit_IT>
    return;
 800b4ba:	e026      	b.n	800b50a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d009      	beq.n	800b4dc <HAL_UART_IRQHandler+0x614>
 800b4c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d003      	beq.n	800b4dc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f001 fbf3 	bl	800ccc0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4da:	e016      	b.n	800b50a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b4dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d010      	beq.n	800b50a <HAL_UART_IRQHandler+0x642>
 800b4e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	da0c      	bge.n	800b50a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f001 fbdb 	bl	800ccac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4f6:	e008      	b.n	800b50a <HAL_UART_IRQHandler+0x642>
      return;
 800b4f8:	bf00      	nop
 800b4fa:	e006      	b.n	800b50a <HAL_UART_IRQHandler+0x642>
    return;
 800b4fc:	bf00      	nop
 800b4fe:	e004      	b.n	800b50a <HAL_UART_IRQHandler+0x642>
      return;
 800b500:	bf00      	nop
 800b502:	e002      	b.n	800b50a <HAL_UART_IRQHandler+0x642>
      return;
 800b504:	bf00      	nop
 800b506:	e000      	b.n	800b50a <HAL_UART_IRQHandler+0x642>
    return;
 800b508:	bf00      	nop
  }
}
 800b50a:	37e8      	adds	r7, #232	@ 0xe8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	460b      	mov	r3, r1
 800b542:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b544:	bf00      	nop
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b554:	b08c      	sub	sp, #48	@ 0x30
 800b556:	af00      	add	r7, sp, #0
 800b558:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b55a:	2300      	movs	r3, #0
 800b55c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	689a      	ldr	r2, [r3, #8]
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	431a      	orrs	r2, r3
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	695b      	ldr	r3, [r3, #20]
 800b56e:	431a      	orrs	r2, r3
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	69db      	ldr	r3, [r3, #28]
 800b574:	4313      	orrs	r3, r2
 800b576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	4baf      	ldr	r3, [pc, #700]	@ (800b83c <UART_SetConfig+0x2ec>)
 800b580:	4013      	ands	r3, r2
 800b582:	697a      	ldr	r2, [r7, #20]
 800b584:	6812      	ldr	r2, [r2, #0]
 800b586:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b588:	430b      	orrs	r3, r1
 800b58a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	68da      	ldr	r2, [r3, #12]
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	430a      	orrs	r2, r1
 800b5a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4aa4      	ldr	r2, [pc, #656]	@ (800b840 <UART_SetConfig+0x2f0>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d004      	beq.n	800b5bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	6a1b      	ldr	r3, [r3, #32]
 800b5b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b5c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b5ca:	697a      	ldr	r2, [r7, #20]
 800b5cc:	6812      	ldr	r2, [r2, #0]
 800b5ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5d0:	430b      	orrs	r3, r1
 800b5d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5da:	f023 010f 	bic.w	r1, r3, #15
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	430a      	orrs	r2, r1
 800b5e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a95      	ldr	r2, [pc, #596]	@ (800b844 <UART_SetConfig+0x2f4>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d125      	bne.n	800b640 <UART_SetConfig+0xf0>
 800b5f4:	2003      	movs	r0, #3
 800b5f6:	f7ff fb2b 	bl	800ac50 <LL_RCC_GetUSARTClockSource>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b03      	cmp	r3, #3
 800b5fe:	d81b      	bhi.n	800b638 <UART_SetConfig+0xe8>
 800b600:	a201      	add	r2, pc, #4	@ (adr r2, 800b608 <UART_SetConfig+0xb8>)
 800b602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b606:	bf00      	nop
 800b608:	0800b619 	.word	0x0800b619
 800b60c:	0800b629 	.word	0x0800b629
 800b610:	0800b621 	.word	0x0800b621
 800b614:	0800b631 	.word	0x0800b631
 800b618:	2301      	movs	r3, #1
 800b61a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b61e:	e042      	b.n	800b6a6 <UART_SetConfig+0x156>
 800b620:	2302      	movs	r3, #2
 800b622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b626:	e03e      	b.n	800b6a6 <UART_SetConfig+0x156>
 800b628:	2304      	movs	r3, #4
 800b62a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b62e:	e03a      	b.n	800b6a6 <UART_SetConfig+0x156>
 800b630:	2308      	movs	r3, #8
 800b632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b636:	e036      	b.n	800b6a6 <UART_SetConfig+0x156>
 800b638:	2310      	movs	r3, #16
 800b63a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b63e:	e032      	b.n	800b6a6 <UART_SetConfig+0x156>
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a7e      	ldr	r2, [pc, #504]	@ (800b840 <UART_SetConfig+0x2f0>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d12a      	bne.n	800b6a0 <UART_SetConfig+0x150>
 800b64a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800b64e:	f7ff fb0f 	bl	800ac70 <LL_RCC_GetLPUARTClockSource>
 800b652:	4603      	mov	r3, r0
 800b654:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b658:	d01a      	beq.n	800b690 <UART_SetConfig+0x140>
 800b65a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b65e:	d81b      	bhi.n	800b698 <UART_SetConfig+0x148>
 800b660:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b664:	d00c      	beq.n	800b680 <UART_SetConfig+0x130>
 800b666:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b66a:	d815      	bhi.n	800b698 <UART_SetConfig+0x148>
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d003      	beq.n	800b678 <UART_SetConfig+0x128>
 800b670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b674:	d008      	beq.n	800b688 <UART_SetConfig+0x138>
 800b676:	e00f      	b.n	800b698 <UART_SetConfig+0x148>
 800b678:	2300      	movs	r3, #0
 800b67a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b67e:	e012      	b.n	800b6a6 <UART_SetConfig+0x156>
 800b680:	2302      	movs	r3, #2
 800b682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b686:	e00e      	b.n	800b6a6 <UART_SetConfig+0x156>
 800b688:	2304      	movs	r3, #4
 800b68a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b68e:	e00a      	b.n	800b6a6 <UART_SetConfig+0x156>
 800b690:	2308      	movs	r3, #8
 800b692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b696:	e006      	b.n	800b6a6 <UART_SetConfig+0x156>
 800b698:	2310      	movs	r3, #16
 800b69a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b69e:	e002      	b.n	800b6a6 <UART_SetConfig+0x156>
 800b6a0:	2310      	movs	r3, #16
 800b6a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a65      	ldr	r2, [pc, #404]	@ (800b840 <UART_SetConfig+0x2f0>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	f040 8097 	bne.w	800b7e0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b6b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b6b6:	2b08      	cmp	r3, #8
 800b6b8:	d823      	bhi.n	800b702 <UART_SetConfig+0x1b2>
 800b6ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c0 <UART_SetConfig+0x170>)
 800b6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c0:	0800b6e5 	.word	0x0800b6e5
 800b6c4:	0800b703 	.word	0x0800b703
 800b6c8:	0800b6ed 	.word	0x0800b6ed
 800b6cc:	0800b703 	.word	0x0800b703
 800b6d0:	0800b6f3 	.word	0x0800b6f3
 800b6d4:	0800b703 	.word	0x0800b703
 800b6d8:	0800b703 	.word	0x0800b703
 800b6dc:	0800b703 	.word	0x0800b703
 800b6e0:	0800b6fb 	.word	0x0800b6fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6e4:	f7fd fc3e 	bl	8008f64 <HAL_RCC_GetPCLK1Freq>
 800b6e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b6ea:	e010      	b.n	800b70e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6ec:	4b56      	ldr	r3, [pc, #344]	@ (800b848 <UART_SetConfig+0x2f8>)
 800b6ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b6f0:	e00d      	b.n	800b70e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6f2:	f7fd fbb7 	bl	8008e64 <HAL_RCC_GetSysClockFreq>
 800b6f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b6f8:	e009      	b.n	800b70e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b700:	e005      	b.n	800b70e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800b702:	2300      	movs	r3, #0
 800b704:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b70c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 812b 	beq.w	800b96c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b71a:	4a4c      	ldr	r2, [pc, #304]	@ (800b84c <UART_SetConfig+0x2fc>)
 800b71c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b720:	461a      	mov	r2, r3
 800b722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b724:	fbb3 f3f2 	udiv	r3, r3, r2
 800b728:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	4613      	mov	r3, r2
 800b730:	005b      	lsls	r3, r3, #1
 800b732:	4413      	add	r3, r2
 800b734:	69ba      	ldr	r2, [r7, #24]
 800b736:	429a      	cmp	r2, r3
 800b738:	d305      	bcc.n	800b746 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b740:	69ba      	ldr	r2, [r7, #24]
 800b742:	429a      	cmp	r2, r3
 800b744:	d903      	bls.n	800b74e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b74c:	e10e      	b.n	800b96c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b750:	2200      	movs	r2, #0
 800b752:	60bb      	str	r3, [r7, #8]
 800b754:	60fa      	str	r2, [r7, #12]
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b75a:	4a3c      	ldr	r2, [pc, #240]	@ (800b84c <UART_SetConfig+0x2fc>)
 800b75c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b760:	b29b      	uxth	r3, r3
 800b762:	2200      	movs	r2, #0
 800b764:	603b      	str	r3, [r7, #0]
 800b766:	607a      	str	r2, [r7, #4]
 800b768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b76c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b770:	f7f5 fa02 	bl	8000b78 <__aeabi_uldivmod>
 800b774:	4602      	mov	r2, r0
 800b776:	460b      	mov	r3, r1
 800b778:	4610      	mov	r0, r2
 800b77a:	4619      	mov	r1, r3
 800b77c:	f04f 0200 	mov.w	r2, #0
 800b780:	f04f 0300 	mov.w	r3, #0
 800b784:	020b      	lsls	r3, r1, #8
 800b786:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b78a:	0202      	lsls	r2, r0, #8
 800b78c:	6979      	ldr	r1, [r7, #20]
 800b78e:	6849      	ldr	r1, [r1, #4]
 800b790:	0849      	lsrs	r1, r1, #1
 800b792:	2000      	movs	r0, #0
 800b794:	460c      	mov	r4, r1
 800b796:	4605      	mov	r5, r0
 800b798:	eb12 0804 	adds.w	r8, r2, r4
 800b79c:	eb43 0905 	adc.w	r9, r3, r5
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	469a      	mov	sl, r3
 800b7a8:	4693      	mov	fp, r2
 800b7aa:	4652      	mov	r2, sl
 800b7ac:	465b      	mov	r3, fp
 800b7ae:	4640      	mov	r0, r8
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	f7f5 f9e1 	bl	8000b78 <__aeabi_uldivmod>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7be:	6a3b      	ldr	r3, [r7, #32]
 800b7c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7c4:	d308      	bcc.n	800b7d8 <UART_SetConfig+0x288>
 800b7c6:	6a3b      	ldr	r3, [r7, #32]
 800b7c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7cc:	d204      	bcs.n	800b7d8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	6a3a      	ldr	r2, [r7, #32]
 800b7d4:	60da      	str	r2, [r3, #12]
 800b7d6:	e0c9      	b.n	800b96c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b7de:	e0c5      	b.n	800b96c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	69db      	ldr	r3, [r3, #28]
 800b7e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7e8:	d16d      	bne.n	800b8c6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800b7ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	2b07      	cmp	r3, #7
 800b7f2:	d82d      	bhi.n	800b850 <UART_SetConfig+0x300>
 800b7f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b7fc <UART_SetConfig+0x2ac>)
 800b7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7fa:	bf00      	nop
 800b7fc:	0800b81d 	.word	0x0800b81d
 800b800:	0800b825 	.word	0x0800b825
 800b804:	0800b851 	.word	0x0800b851
 800b808:	0800b82b 	.word	0x0800b82b
 800b80c:	0800b851 	.word	0x0800b851
 800b810:	0800b851 	.word	0x0800b851
 800b814:	0800b851 	.word	0x0800b851
 800b818:	0800b833 	.word	0x0800b833
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b81c:	f7fd fbb8 	bl	8008f90 <HAL_RCC_GetPCLK2Freq>
 800b820:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b822:	e01b      	b.n	800b85c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b824:	4b08      	ldr	r3, [pc, #32]	@ (800b848 <UART_SetConfig+0x2f8>)
 800b826:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b828:	e018      	b.n	800b85c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b82a:	f7fd fb1b 	bl	8008e64 <HAL_RCC_GetSysClockFreq>
 800b82e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b830:	e014      	b.n	800b85c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b836:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b838:	e010      	b.n	800b85c <UART_SetConfig+0x30c>
 800b83a:	bf00      	nop
 800b83c:	cfff69f3 	.word	0xcfff69f3
 800b840:	40008000 	.word	0x40008000
 800b844:	40013800 	.word	0x40013800
 800b848:	00f42400 	.word	0x00f42400
 800b84c:	0802e114 	.word	0x0802e114
      default:
        pclk = 0U;
 800b850:	2300      	movs	r3, #0
 800b852:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b854:	2301      	movs	r3, #1
 800b856:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b85a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85e:	2b00      	cmp	r3, #0
 800b860:	f000 8084 	beq.w	800b96c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b868:	4a4b      	ldr	r2, [pc, #300]	@ (800b998 <UART_SetConfig+0x448>)
 800b86a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b86e:	461a      	mov	r2, r3
 800b870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b872:	fbb3 f3f2 	udiv	r3, r3, r2
 800b876:	005a      	lsls	r2, r3, #1
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	085b      	lsrs	r3, r3, #1
 800b87e:	441a      	add	r2, r3
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	fbb2 f3f3 	udiv	r3, r2, r3
 800b888:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	2b0f      	cmp	r3, #15
 800b88e:	d916      	bls.n	800b8be <UART_SetConfig+0x36e>
 800b890:	6a3b      	ldr	r3, [r7, #32]
 800b892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b896:	d212      	bcs.n	800b8be <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b898:	6a3b      	ldr	r3, [r7, #32]
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	f023 030f 	bic.w	r3, r3, #15
 800b8a0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	085b      	lsrs	r3, r3, #1
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	f003 0307 	and.w	r3, r3, #7
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	8bfb      	ldrh	r3, [r7, #30]
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	8bfa      	ldrh	r2, [r7, #30]
 800b8ba:	60da      	str	r2, [r3, #12]
 800b8bc:	e056      	b.n	800b96c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b8c4:	e052      	b.n	800b96c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	2b07      	cmp	r3, #7
 800b8ce:	d822      	bhi.n	800b916 <UART_SetConfig+0x3c6>
 800b8d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d8 <UART_SetConfig+0x388>)
 800b8d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d6:	bf00      	nop
 800b8d8:	0800b8f9 	.word	0x0800b8f9
 800b8dc:	0800b901 	.word	0x0800b901
 800b8e0:	0800b917 	.word	0x0800b917
 800b8e4:	0800b907 	.word	0x0800b907
 800b8e8:	0800b917 	.word	0x0800b917
 800b8ec:	0800b917 	.word	0x0800b917
 800b8f0:	0800b917 	.word	0x0800b917
 800b8f4:	0800b90f 	.word	0x0800b90f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8f8:	f7fd fb4a 	bl	8008f90 <HAL_RCC_GetPCLK2Freq>
 800b8fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b8fe:	e010      	b.n	800b922 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b900:	4b26      	ldr	r3, [pc, #152]	@ (800b99c <UART_SetConfig+0x44c>)
 800b902:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b904:	e00d      	b.n	800b922 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b906:	f7fd faad 	bl	8008e64 <HAL_RCC_GetSysClockFreq>
 800b90a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b90c:	e009      	b.n	800b922 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b90e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b912:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b914:	e005      	b.n	800b922 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800b916:	2300      	movs	r3, #0
 800b918:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b920:	bf00      	nop
    }

    if (pclk != 0U)
 800b922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b924:	2b00      	cmp	r3, #0
 800b926:	d021      	beq.n	800b96c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b92c:	4a1a      	ldr	r2, [pc, #104]	@ (800b998 <UART_SetConfig+0x448>)
 800b92e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b932:	461a      	mov	r2, r3
 800b934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b936:	fbb3 f2f2 	udiv	r2, r3, r2
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	085b      	lsrs	r3, r3, #1
 800b940:	441a      	add	r2, r3
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	fbb2 f3f3 	udiv	r3, r2, r3
 800b94a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b94c:	6a3b      	ldr	r3, [r7, #32]
 800b94e:	2b0f      	cmp	r3, #15
 800b950:	d909      	bls.n	800b966 <UART_SetConfig+0x416>
 800b952:	6a3b      	ldr	r3, [r7, #32]
 800b954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b958:	d205      	bcs.n	800b966 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	b29a      	uxth	r2, r3
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	60da      	str	r2, [r3, #12]
 800b964:	e002      	b.n	800b96c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800b966:	2301      	movs	r3, #1
 800b968:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	2201      	movs	r2, #1
 800b970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	2201      	movs	r2, #1
 800b978:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	2200      	movs	r2, #0
 800b980:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	2200      	movs	r2, #0
 800b986:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b988:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3730      	adds	r7, #48	@ 0x30
 800b990:	46bd      	mov	sp, r7
 800b992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b996:	bf00      	nop
 800b998:	0802e114 	.word	0x0802e114
 800b99c:	00f42400 	.word	0x00f42400

0800b9a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ac:	f003 0308 	and.w	r3, r3, #8
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00a      	beq.n	800b9ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	430a      	orrs	r2, r1
 800b9c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ce:	f003 0301 	and.w	r3, r3, #1
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00a      	beq.n	800b9ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	430a      	orrs	r2, r1
 800b9ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f0:	f003 0302 	and.w	r3, r3, #2
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00a      	beq.n	800ba0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	430a      	orrs	r2, r1
 800ba0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba12:	f003 0304 	and.w	r3, r3, #4
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00a      	beq.n	800ba30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	430a      	orrs	r2, r1
 800ba2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba34:	f003 0310 	and.w	r3, r3, #16
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00a      	beq.n	800ba52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	430a      	orrs	r2, r1
 800ba50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba56:	f003 0320 	and.w	r3, r3, #32
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00a      	beq.n	800ba74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	430a      	orrs	r2, r1
 800ba72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d01a      	beq.n	800bab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	430a      	orrs	r2, r1
 800ba94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba9e:	d10a      	bne.n	800bab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	430a      	orrs	r2, r1
 800bab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00a      	beq.n	800bad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	430a      	orrs	r2, r1
 800bad6:	605a      	str	r2, [r3, #4]
  }
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b098      	sub	sp, #96	@ 0x60
 800bae8:	af02      	add	r7, sp, #8
 800baea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800baf4:	f7fb f816 	bl	8006b24 <HAL_GetTick>
 800baf8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f003 0308 	and.w	r3, r3, #8
 800bb04:	2b08      	cmp	r3, #8
 800bb06:	d12f      	bne.n	800bb68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb0c:	9300      	str	r3, [sp, #0]
 800bb0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb10:	2200      	movs	r2, #0
 800bb12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f88e 	bl	800bc38 <UART_WaitOnFlagUntilTimeout>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d022      	beq.n	800bb68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2a:	e853 3f00 	ldrex	r3, [r3]
 800bb2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bb30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb36:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb40:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb48:	e841 2300 	strex	r3, r2, [r1]
 800bb4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d1e6      	bne.n	800bb22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2220      	movs	r2, #32
 800bb58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb64:	2303      	movs	r3, #3
 800bb66:	e063      	b.n	800bc30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0304 	and.w	r3, r3, #4
 800bb72:	2b04      	cmp	r3, #4
 800bb74:	d149      	bne.n	800bc0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb7a:	9300      	str	r3, [sp, #0]
 800bb7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 f857 	bl	800bc38 <UART_WaitOnFlagUntilTimeout>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d03c      	beq.n	800bc0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb98:	e853 3f00 	ldrex	r3, [r3]
 800bb9c:	623b      	str	r3, [r7, #32]
   return(result);
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	461a      	mov	r2, r3
 800bbac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbae:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bbb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbb6:	e841 2300 	strex	r3, r2, [r1]
 800bbba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bbbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1e6      	bne.n	800bb90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	3308      	adds	r3, #8
 800bbc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	e853 3f00 	ldrex	r3, [r3]
 800bbd0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f023 0301 	bic.w	r3, r3, #1
 800bbd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	3308      	adds	r3, #8
 800bbe0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbe2:	61fa      	str	r2, [r7, #28]
 800bbe4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe6:	69b9      	ldr	r1, [r7, #24]
 800bbe8:	69fa      	ldr	r2, [r7, #28]
 800bbea:	e841 2300 	strex	r3, r2, [r1]
 800bbee:	617b      	str	r3, [r7, #20]
   return(result);
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1e5      	bne.n	800bbc2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2220      	movs	r2, #32
 800bbfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc06:	2303      	movs	r3, #3
 800bc08:	e012      	b.n	800bc30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2220      	movs	r2, #32
 800bc0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2220      	movs	r2, #32
 800bc16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3758      	adds	r7, #88	@ 0x58
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	603b      	str	r3, [r7, #0]
 800bc44:	4613      	mov	r3, r2
 800bc46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc48:	e04f      	b.n	800bcea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc50:	d04b      	beq.n	800bcea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc52:	f7fa ff67 	bl	8006b24 <HAL_GetTick>
 800bc56:	4602      	mov	r2, r0
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	69ba      	ldr	r2, [r7, #24]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d302      	bcc.n	800bc68 <UART_WaitOnFlagUntilTimeout+0x30>
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d101      	bne.n	800bc6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	e04e      	b.n	800bd0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 0304 	and.w	r3, r3, #4
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d037      	beq.n	800bcea <UART_WaitOnFlagUntilTimeout+0xb2>
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	2b80      	cmp	r3, #128	@ 0x80
 800bc7e:	d034      	beq.n	800bcea <UART_WaitOnFlagUntilTimeout+0xb2>
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	2b40      	cmp	r3, #64	@ 0x40
 800bc84:	d031      	beq.n	800bcea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	69db      	ldr	r3, [r3, #28]
 800bc8c:	f003 0308 	and.w	r3, r3, #8
 800bc90:	2b08      	cmp	r3, #8
 800bc92:	d110      	bne.n	800bcb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2208      	movs	r2, #8
 800bc9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f000 f99c 	bl	800bfda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2208      	movs	r2, #8
 800bca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e029      	b.n	800bd0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	69db      	ldr	r3, [r3, #28]
 800bcbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bcc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bcc4:	d111      	bne.n	800bcea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bcce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f000 f982 	bl	800bfda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2220      	movs	r2, #32
 800bcda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bce6:	2303      	movs	r3, #3
 800bce8:	e00f      	b.n	800bd0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	69da      	ldr	r2, [r3, #28]
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	4013      	ands	r3, r2
 800bcf4:	68ba      	ldr	r2, [r7, #8]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	bf0c      	ite	eq
 800bcfa:	2301      	moveq	r3, #1
 800bcfc:	2300      	movne	r3, #0
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	461a      	mov	r2, r3
 800bd02:	79fb      	ldrb	r3, [r7, #7]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d0a0      	beq.n	800bc4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b0a3      	sub	sp, #140	@ 0x8c
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	88fa      	ldrh	r2, [r7, #6]
 800bd2c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	88fa      	ldrh	r2, [r7, #6]
 800bd34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd46:	d10e      	bne.n	800bd66 <UART_Start_Receive_IT+0x52>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	691b      	ldr	r3, [r3, #16]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d105      	bne.n	800bd5c <UART_Start_Receive_IT+0x48>
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800bd56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bd5a:	e02d      	b.n	800bdb8 <UART_Start_Receive_IT+0xa4>
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	22ff      	movs	r2, #255	@ 0xff
 800bd60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bd64:	e028      	b.n	800bdb8 <UART_Start_Receive_IT+0xa4>
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10d      	bne.n	800bd8a <UART_Start_Receive_IT+0x76>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d104      	bne.n	800bd80 <UART_Start_Receive_IT+0x6c>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	22ff      	movs	r2, #255	@ 0xff
 800bd7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bd7e:	e01b      	b.n	800bdb8 <UART_Start_Receive_IT+0xa4>
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	227f      	movs	r2, #127	@ 0x7f
 800bd84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bd88:	e016      	b.n	800bdb8 <UART_Start_Receive_IT+0xa4>
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd92:	d10d      	bne.n	800bdb0 <UART_Start_Receive_IT+0x9c>
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d104      	bne.n	800bda6 <UART_Start_Receive_IT+0x92>
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	227f      	movs	r2, #127	@ 0x7f
 800bda0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bda4:	e008      	b.n	800bdb8 <UART_Start_Receive_IT+0xa4>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	223f      	movs	r2, #63	@ 0x3f
 800bdaa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bdae:	e003      	b.n	800bdb8 <UART_Start_Receive_IT+0xa4>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2222      	movs	r2, #34	@ 0x22
 800bdc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	3308      	adds	r3, #8
 800bdce:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdd2:	e853 3f00 	ldrex	r3, [r3]
 800bdd6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800bdd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdda:	f043 0301 	orr.w	r3, r3, #1
 800bdde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	3308      	adds	r3, #8
 800bde8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800bdec:	673a      	str	r2, [r7, #112]	@ 0x70
 800bdee:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bdf2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800bdf4:	e841 2300 	strex	r3, r2, [r1]
 800bdf8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800bdfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1e3      	bne.n	800bdc8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be08:	d14f      	bne.n	800beaa <UART_Start_Receive_IT+0x196>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800be10:	88fa      	ldrh	r2, [r7, #6]
 800be12:	429a      	cmp	r2, r3
 800be14:	d349      	bcc.n	800beaa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be1e:	d107      	bne.n	800be30 <UART_Start_Receive_IT+0x11c>
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d103      	bne.n	800be30 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	4a47      	ldr	r2, [pc, #284]	@ (800bf48 <UART_Start_Receive_IT+0x234>)
 800be2c:	675a      	str	r2, [r3, #116]	@ 0x74
 800be2e:	e002      	b.n	800be36 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	4a46      	ldr	r2, [pc, #280]	@ (800bf4c <UART_Start_Receive_IT+0x238>)
 800be34:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d01a      	beq.n	800be74 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be46:	e853 3f00 	ldrex	r3, [r3]
 800be4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800be4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	461a      	mov	r2, r3
 800be5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800be60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800be62:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be64:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800be66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800be68:	e841 2300 	strex	r3, r2, [r1]
 800be6c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800be6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1e4      	bne.n	800be3e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3308      	adds	r3, #8
 800be7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be7e:	e853 3f00 	ldrex	r3, [r3]
 800be82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	3308      	adds	r3, #8
 800be92:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800be94:	64ba      	str	r2, [r7, #72]	@ 0x48
 800be96:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be9c:	e841 2300 	strex	r3, r2, [r1]
 800bea0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d1e5      	bne.n	800be74 <UART_Start_Receive_IT+0x160>
 800bea8:	e046      	b.n	800bf38 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800beb2:	d107      	bne.n	800bec4 <UART_Start_Receive_IT+0x1b0>
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d103      	bne.n	800bec4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	4a24      	ldr	r2, [pc, #144]	@ (800bf50 <UART_Start_Receive_IT+0x23c>)
 800bec0:	675a      	str	r2, [r3, #116]	@ 0x74
 800bec2:	e002      	b.n	800beca <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	4a23      	ldr	r2, [pc, #140]	@ (800bf54 <UART_Start_Receive_IT+0x240>)
 800bec8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d019      	beq.n	800bf06 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beda:	e853 3f00 	ldrex	r3, [r3]
 800bede:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800bee6:	677b      	str	r3, [r7, #116]	@ 0x74
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	461a      	mov	r2, r3
 800beee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bef0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bef2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bef6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bef8:	e841 2300 	strex	r3, r2, [r1]
 800befc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800befe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d1e6      	bne.n	800bed2 <UART_Start_Receive_IT+0x1be>
 800bf04:	e018      	b.n	800bf38 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	e853 3f00 	ldrex	r3, [r3]
 800bf12:	613b      	str	r3, [r7, #16]
   return(result);
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	f043 0320 	orr.w	r3, r3, #32
 800bf1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	461a      	mov	r2, r3
 800bf22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf24:	623b      	str	r3, [r7, #32]
 800bf26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf28:	69f9      	ldr	r1, [r7, #28]
 800bf2a:	6a3a      	ldr	r2, [r7, #32]
 800bf2c:	e841 2300 	strex	r3, r2, [r1]
 800bf30:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1e6      	bne.n	800bf06 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	378c      	adds	r7, #140	@ 0x8c
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	0800c931 	.word	0x0800c931
 800bf4c:	0800c5d1 	.word	0x0800c5d1
 800bf50:	0800c419 	.word	0x0800c419
 800bf54:	0800c261 	.word	0x0800c261

0800bf58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b08f      	sub	sp, #60	@ 0x3c
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	e853 3f00 	ldrex	r3, [r3]
 800bf6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bf74:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf80:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf86:	e841 2300 	strex	r3, r2, [r1]
 800bf8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1e6      	bne.n	800bf60 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	3308      	adds	r3, #8
 800bf98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	e853 3f00 	ldrex	r3, [r3]
 800bfa0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bfa8:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3308      	adds	r3, #8
 800bfb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfb2:	61ba      	str	r2, [r7, #24]
 800bfb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb6:	6979      	ldr	r1, [r7, #20]
 800bfb8:	69ba      	ldr	r2, [r7, #24]
 800bfba:	e841 2300 	strex	r3, r2, [r1]
 800bfbe:	613b      	str	r3, [r7, #16]
   return(result);
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d1e5      	bne.n	800bf92 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2220      	movs	r2, #32
 800bfca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800bfce:	bf00      	nop
 800bfd0:	373c      	adds	r7, #60	@ 0x3c
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr

0800bfda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfda:	b480      	push	{r7}
 800bfdc:	b095      	sub	sp, #84	@ 0x54
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfea:	e853 3f00 	ldrex	r3, [r3]
 800bfee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	461a      	mov	r2, r3
 800bffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c000:	643b      	str	r3, [r7, #64]	@ 0x40
 800c002:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c004:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c006:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c008:	e841 2300 	strex	r3, r2, [r1]
 800c00c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1e6      	bne.n	800bfe2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	3308      	adds	r3, #8
 800c01a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01c:	6a3b      	ldr	r3, [r7, #32]
 800c01e:	e853 3f00 	ldrex	r3, [r3]
 800c022:	61fb      	str	r3, [r7, #28]
   return(result);
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c02a:	f023 0301 	bic.w	r3, r3, #1
 800c02e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	3308      	adds	r3, #8
 800c036:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c038:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c03a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c03e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c040:	e841 2300 	strex	r3, r2, [r1]
 800c044:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1e3      	bne.n	800c014 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c050:	2b01      	cmp	r3, #1
 800c052:	d118      	bne.n	800c086 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	e853 3f00 	ldrex	r3, [r3]
 800c060:	60bb      	str	r3, [r7, #8]
   return(result);
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	f023 0310 	bic.w	r3, r3, #16
 800c068:	647b      	str	r3, [r7, #68]	@ 0x44
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	461a      	mov	r2, r3
 800c070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c072:	61bb      	str	r3, [r7, #24]
 800c074:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c076:	6979      	ldr	r1, [r7, #20]
 800c078:	69ba      	ldr	r2, [r7, #24]
 800c07a:	e841 2300 	strex	r3, r2, [r1]
 800c07e:	613b      	str	r3, [r7, #16]
   return(result);
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1e6      	bne.n	800c054 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2220      	movs	r2, #32
 800c08a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c09a:	bf00      	nop
 800c09c:	3754      	adds	r7, #84	@ 0x54
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b090      	sub	sp, #64	@ 0x40
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0320 	and.w	r3, r3, #32
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d137      	bne.n	800c132 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c0c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	3308      	adds	r3, #8
 800c0d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d4:	e853 3f00 	ldrex	r3, [r3]
 800c0d8:	623b      	str	r3, [r7, #32]
   return(result);
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c0e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3308      	adds	r3, #8
 800c0e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0ea:	633a      	str	r2, [r7, #48]	@ 0x30
 800c0ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0f2:	e841 2300 	strex	r3, r2, [r1]
 800c0f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1e5      	bne.n	800c0ca <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	e853 3f00 	ldrex	r3, [r3]
 800c10a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c112:	637b      	str	r3, [r7, #52]	@ 0x34
 800c114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	461a      	mov	r2, r3
 800c11a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c11c:	61fb      	str	r3, [r7, #28]
 800c11e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c120:	69b9      	ldr	r1, [r7, #24]
 800c122:	69fa      	ldr	r2, [r7, #28]
 800c124:	e841 2300 	strex	r3, r2, [r1]
 800c128:	617b      	str	r3, [r7, #20]
   return(result);
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d1e6      	bne.n	800c0fe <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c130:	e002      	b.n	800c138 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c132:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c134:	f7f6 fcee 	bl	8002b14 <HAL_UART_TxCpltCallback>
}
 800c138:	bf00      	nop
 800c13a:	3740      	adds	r7, #64	@ 0x40
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c14c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f7ff f9de 	bl	800b510 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c154:	bf00      	nop
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b086      	sub	sp, #24
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c168:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c170:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c178:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c184:	2b80      	cmp	r3, #128	@ 0x80
 800c186:	d109      	bne.n	800c19c <UART_DMAError+0x40>
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	2b21      	cmp	r3, #33	@ 0x21
 800c18c:	d106      	bne.n	800c19c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	2200      	movs	r2, #0
 800c192:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c196:	6978      	ldr	r0, [r7, #20]
 800c198:	f7ff fede 	bl	800bf58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1a6:	2b40      	cmp	r3, #64	@ 0x40
 800c1a8:	d109      	bne.n	800c1be <UART_DMAError+0x62>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2b22      	cmp	r3, #34	@ 0x22
 800c1ae:	d106      	bne.n	800c1be <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c1b8:	6978      	ldr	r0, [r7, #20]
 800c1ba:	f7ff ff0e 	bl	800bfda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1c4:	f043 0210 	orr.w	r2, r3, #16
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c1ce:	6978      	ldr	r0, [r7, #20]
 800c1d0:	f7ff f9a8 	bl	800b524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1d4:	bf00      	nop
 800c1d6:	3718      	adds	r7, #24
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f7ff f992 	bl	800b524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c200:	bf00      	nop
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b088      	sub	sp, #32
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	e853 3f00 	ldrex	r3, [r3]
 800c21c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c224:	61fb      	str	r3, [r7, #28]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	461a      	mov	r2, r3
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	61bb      	str	r3, [r7, #24]
 800c230:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c232:	6979      	ldr	r1, [r7, #20]
 800c234:	69ba      	ldr	r2, [r7, #24]
 800c236:	e841 2300 	strex	r3, r2, [r1]
 800c23a:	613b      	str	r3, [r7, #16]
   return(result);
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1e6      	bne.n	800c210 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2220      	movs	r2, #32
 800c246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f7f6 fc5f 	bl	8002b14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c256:	bf00      	nop
 800c258:	3720      	adds	r7, #32
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
	...

0800c260 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b09c      	sub	sp, #112	@ 0x70
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c26e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c278:	2b22      	cmp	r3, #34	@ 0x22
 800c27a:	f040 80be 	bne.w	800c3fa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c284:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c288:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c28c:	b2d9      	uxtb	r1, r3
 800c28e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c292:	b2da      	uxtb	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c298:	400a      	ands	r2, r1
 800c29a:	b2d2      	uxtb	r2, r2
 800c29c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2a2:	1c5a      	adds	r2, r3, #1
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f040 80a1 	bne.w	800c40a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2d0:	e853 3f00 	ldrex	r3, [r3]
 800c2d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c2d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c2e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c2e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c2ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c2ee:	e841 2300 	strex	r3, r2, [r1]
 800c2f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c2f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1e6      	bne.n	800c2c8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3308      	adds	r3, #8
 800c300:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c304:	e853 3f00 	ldrex	r3, [r3]
 800c308:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c30a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c30c:	f023 0301 	bic.w	r3, r3, #1
 800c310:	667b      	str	r3, [r7, #100]	@ 0x64
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	3308      	adds	r3, #8
 800c318:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c31a:	647a      	str	r2, [r7, #68]	@ 0x44
 800c31c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c31e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c320:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c322:	e841 2300 	strex	r3, r2, [r1]
 800c326:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1e5      	bne.n	800c2fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2220      	movs	r2, #32
 800c332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a33      	ldr	r2, [pc, #204]	@ (800c414 <UART_RxISR_8BIT+0x1b4>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d01f      	beq.n	800c38c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c356:	2b00      	cmp	r3, #0
 800c358:	d018      	beq.n	800c38c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c362:	e853 3f00 	ldrex	r3, [r3]
 800c366:	623b      	str	r3, [r7, #32]
   return(result);
 800c368:	6a3b      	ldr	r3, [r7, #32]
 800c36a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c36e:	663b      	str	r3, [r7, #96]	@ 0x60
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	461a      	mov	r2, r3
 800c376:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c378:	633b      	str	r3, [r7, #48]	@ 0x30
 800c37a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c37c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c37e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c380:	e841 2300 	strex	r3, r2, [r1]
 800c384:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1e6      	bne.n	800c35a <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c390:	2b01      	cmp	r3, #1
 800c392:	d12e      	bne.n	800c3f2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	e853 3f00 	ldrex	r3, [r3]
 800c3a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f023 0310 	bic.w	r3, r3, #16
 800c3ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3b8:	61fb      	str	r3, [r7, #28]
 800c3ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3bc:	69b9      	ldr	r1, [r7, #24]
 800c3be:	69fa      	ldr	r2, [r7, #28]
 800c3c0:	e841 2300 	strex	r3, r2, [r1]
 800c3c4:	617b      	str	r3, [r7, #20]
   return(result);
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d1e6      	bne.n	800c39a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	69db      	ldr	r3, [r3, #28]
 800c3d2:	f003 0310 	and.w	r3, r3, #16
 800c3d6:	2b10      	cmp	r3, #16
 800c3d8:	d103      	bne.n	800c3e2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2210      	movs	r2, #16
 800c3e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f7ff f8a4 	bl	800b538 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c3f0:	e00b      	b.n	800c40a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f7f6 fb58 	bl	8002aa8 <HAL_UART_RxCpltCallback>
}
 800c3f8:	e007      	b.n	800c40a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	699a      	ldr	r2, [r3, #24]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f042 0208 	orr.w	r2, r2, #8
 800c408:	619a      	str	r2, [r3, #24]
}
 800c40a:	bf00      	nop
 800c40c:	3770      	adds	r7, #112	@ 0x70
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	40008000 	.word	0x40008000

0800c418 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b09c      	sub	sp, #112	@ 0x70
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c426:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c430:	2b22      	cmp	r3, #34	@ 0x22
 800c432:	f040 80be 	bne.w	800c5b2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c43c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c444:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c446:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c44a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c44e:	4013      	ands	r3, r2
 800c450:	b29a      	uxth	r2, r3
 800c452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c454:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c45a:	1c9a      	adds	r2, r3, #2
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c466:	b29b      	uxth	r3, r3
 800c468:	3b01      	subs	r3, #1
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c478:	b29b      	uxth	r3, r3
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f040 80a1 	bne.w	800c5c2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c488:	e853 3f00 	ldrex	r3, [r3]
 800c48c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c48e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c490:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c494:	667b      	str	r3, [r7, #100]	@ 0x64
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	461a      	mov	r2, r3
 800c49c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c49e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c4a0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c4a6:	e841 2300 	strex	r3, r2, [r1]
 800c4aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c4ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d1e6      	bne.n	800c480 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	3308      	adds	r3, #8
 800c4b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4bc:	e853 3f00 	ldrex	r3, [r3]
 800c4c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c4:	f023 0301 	bic.w	r3, r3, #1
 800c4c8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	3308      	adds	r3, #8
 800c4d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c4d2:	643a      	str	r2, [r7, #64]	@ 0x40
 800c4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c4da:	e841 2300 	strex	r3, r2, [r1]
 800c4de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1e5      	bne.n	800c4b2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2220      	movs	r2, #32
 800c4ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a33      	ldr	r2, [pc, #204]	@ (800c5cc <UART_RxISR_16BIT+0x1b4>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d01f      	beq.n	800c544 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d018      	beq.n	800c544 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c518:	6a3b      	ldr	r3, [r7, #32]
 800c51a:	e853 3f00 	ldrex	r3, [r3]
 800c51e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c526:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	461a      	mov	r2, r3
 800c52e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c532:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c534:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c538:	e841 2300 	strex	r3, r2, [r1]
 800c53c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c540:	2b00      	cmp	r3, #0
 800c542:	d1e6      	bne.n	800c512 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d12e      	bne.n	800c5aa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2200      	movs	r2, #0
 800c550:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	e853 3f00 	ldrex	r3, [r3]
 800c55e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	f023 0310 	bic.w	r3, r3, #16
 800c566:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	461a      	mov	r2, r3
 800c56e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c570:	61bb      	str	r3, [r7, #24]
 800c572:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c574:	6979      	ldr	r1, [r7, #20]
 800c576:	69ba      	ldr	r2, [r7, #24]
 800c578:	e841 2300 	strex	r3, r2, [r1]
 800c57c:	613b      	str	r3, [r7, #16]
   return(result);
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1e6      	bne.n	800c552 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	69db      	ldr	r3, [r3, #28]
 800c58a:	f003 0310 	and.w	r3, r3, #16
 800c58e:	2b10      	cmp	r3, #16
 800c590:	d103      	bne.n	800c59a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2210      	movs	r2, #16
 800c598:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7fe ffc8 	bl	800b538 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c5a8:	e00b      	b.n	800c5c2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f7f6 fa7c 	bl	8002aa8 <HAL_UART_RxCpltCallback>
}
 800c5b0:	e007      	b.n	800c5c2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	699a      	ldr	r2, [r3, #24]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f042 0208 	orr.w	r2, r2, #8
 800c5c0:	619a      	str	r2, [r3, #24]
}
 800c5c2:	bf00      	nop
 800c5c4:	3770      	adds	r7, #112	@ 0x70
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	40008000 	.word	0x40008000

0800c5d0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b0ac      	sub	sp, #176	@ 0xb0
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c5de:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	69db      	ldr	r3, [r3, #28]
 800c5e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c606:	2b22      	cmp	r3, #34	@ 0x22
 800c608:	f040 8182 	bne.w	800c910 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c612:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c616:	e125      	b.n	800c864 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c61e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c622:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c626:	b2d9      	uxtb	r1, r3
 800c628:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c632:	400a      	ands	r2, r1
 800c634:	b2d2      	uxtb	r2, r2
 800c636:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c63c:	1c5a      	adds	r2, r3, #1
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c648:	b29b      	uxth	r3, r3
 800c64a:	3b01      	subs	r3, #1
 800c64c:	b29a      	uxth	r2, r3
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	69db      	ldr	r3, [r3, #28]
 800c65a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c65e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c662:	f003 0307 	and.w	r3, r3, #7
 800c666:	2b00      	cmp	r3, #0
 800c668:	d053      	beq.n	800c712 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c66a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c66e:	f003 0301 	and.w	r3, r3, #1
 800c672:	2b00      	cmp	r3, #0
 800c674:	d011      	beq.n	800c69a <UART_RxISR_8BIT_FIFOEN+0xca>
 800c676:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c67a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d00b      	beq.n	800c69a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2201      	movs	r2, #1
 800c688:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c690:	f043 0201 	orr.w	r2, r3, #1
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c69a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c69e:	f003 0302 	and.w	r3, r3, #2
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d011      	beq.n	800c6ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c6a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c6aa:	f003 0301 	and.w	r3, r3, #1
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00b      	beq.n	800c6ca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2202      	movs	r2, #2
 800c6b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6c0:	f043 0204 	orr.w	r2, r3, #4
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c6ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6ce:	f003 0304 	and.w	r3, r3, #4
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d011      	beq.n	800c6fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c6d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c6da:	f003 0301 	and.w	r3, r3, #1
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d00b      	beq.n	800c6fa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2204      	movs	r2, #4
 800c6e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6f0:	f043 0202 	orr.w	r2, r3, #2
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c700:	2b00      	cmp	r3, #0
 800c702:	d006      	beq.n	800c712 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7fe ff0d 	bl	800b524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c718:	b29b      	uxth	r3, r3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f040 80a2 	bne.w	800c864 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c726:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c728:	e853 3f00 	ldrex	r3, [r3]
 800c72c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c72e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c734:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	461a      	mov	r2, r3
 800c73e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c742:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c744:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c746:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c748:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c74a:	e841 2300 	strex	r3, r2, [r1]
 800c74e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c750:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1e4      	bne.n	800c720 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	3308      	adds	r3, #8
 800c75c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c760:	e853 3f00 	ldrex	r3, [r3]
 800c764:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c766:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c76c:	f023 0301 	bic.w	r3, r3, #1
 800c770:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	3308      	adds	r3, #8
 800c77a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c77e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c780:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c782:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c784:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c786:	e841 2300 	strex	r3, r2, [r1]
 800c78a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c78c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1e1      	bne.n	800c756 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2220      	movs	r2, #32
 800c796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a5f      	ldr	r2, [pc, #380]	@ (800c928 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d021      	beq.n	800c7f4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d01a      	beq.n	800c7f4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7c6:	e853 3f00 	ldrex	r3, [r3]
 800c7ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c7cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c7d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	461a      	mov	r2, r3
 800c7dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c7e0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c7e2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c7e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c7e8:	e841 2300 	strex	r3, r2, [r1]
 800c7ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c7ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d1e4      	bne.n	800c7be <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d130      	bne.n	800c85e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c80a:	e853 3f00 	ldrex	r3, [r3]
 800c80e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c812:	f023 0310 	bic.w	r3, r3, #16
 800c816:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	461a      	mov	r2, r3
 800c820:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c824:	643b      	str	r3, [r7, #64]	@ 0x40
 800c826:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c828:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c82a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c82c:	e841 2300 	strex	r3, r2, [r1]
 800c830:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c834:	2b00      	cmp	r3, #0
 800c836:	d1e4      	bne.n	800c802 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	69db      	ldr	r3, [r3, #28]
 800c83e:	f003 0310 	and.w	r3, r3, #16
 800c842:	2b10      	cmp	r3, #16
 800c844:	d103      	bne.n	800c84e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2210      	movs	r2, #16
 800c84c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c854:	4619      	mov	r1, r3
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7fe fe6e 	bl	800b538 <HAL_UARTEx_RxEventCallback>
 800c85c:	e002      	b.n	800c864 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f7f6 f922 	bl	8002aa8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c864:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d006      	beq.n	800c87a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c86c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c870:	f003 0320 	and.w	r3, r3, #32
 800c874:	2b00      	cmp	r3, #0
 800c876:	f47f aecf 	bne.w	800c618 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c880:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c884:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d049      	beq.n	800c920 <UART_RxISR_8BIT_FIFOEN+0x350>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c892:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800c896:	429a      	cmp	r2, r3
 800c898:	d242      	bcs.n	800c920 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	3308      	adds	r3, #8
 800c8a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a2:	6a3b      	ldr	r3, [r7, #32]
 800c8a4:	e853 3f00 	ldrex	r3, [r3]
 800c8a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c8b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3308      	adds	r3, #8
 800c8ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c8be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c8c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c8c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8c6:	e841 2300 	strex	r3, r2, [r1]
 800c8ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1e3      	bne.n	800c89a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4a15      	ldr	r2, [pc, #84]	@ (800c92c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c8d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	e853 3f00 	ldrex	r3, [r3]
 800c8e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	f043 0320 	orr.w	r3, r3, #32
 800c8ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c8fa:	61bb      	str	r3, [r7, #24]
 800c8fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8fe:	6979      	ldr	r1, [r7, #20]
 800c900:	69ba      	ldr	r2, [r7, #24]
 800c902:	e841 2300 	strex	r3, r2, [r1]
 800c906:	613b      	str	r3, [r7, #16]
   return(result);
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1e4      	bne.n	800c8d8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c90e:	e007      	b.n	800c920 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	699a      	ldr	r2, [r3, #24]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f042 0208 	orr.w	r2, r2, #8
 800c91e:	619a      	str	r2, [r3, #24]
}
 800c920:	bf00      	nop
 800c922:	37b0      	adds	r7, #176	@ 0xb0
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	40008000 	.word	0x40008000
 800c92c:	0800c261 	.word	0x0800c261

0800c930 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b0ae      	sub	sp, #184	@ 0xb8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c93e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	69db      	ldr	r3, [r3, #28]
 800c948:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c966:	2b22      	cmp	r3, #34	@ 0x22
 800c968:	f040 8186 	bne.w	800cc78 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c972:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c976:	e129      	b.n	800cbcc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c97e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c986:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c98a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800c98e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800c992:	4013      	ands	r3, r2
 800c994:	b29a      	uxth	r2, r3
 800c996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c99a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9a0:	1c9a      	adds	r2, r3, #2
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	69db      	ldr	r3, [r3, #28]
 800c9be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c9c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c9c6:	f003 0307 	and.w	r3, r3, #7
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d053      	beq.n	800ca76 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c9ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c9d2:	f003 0301 	and.w	r3, r3, #1
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d011      	beq.n	800c9fe <UART_RxISR_16BIT_FIFOEN+0xce>
 800c9da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00b      	beq.n	800c9fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9f4:	f043 0201 	orr.w	r2, r3, #1
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c9fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ca02:	f003 0302 	and.w	r3, r3, #2
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d011      	beq.n	800ca2e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ca0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ca0e:	f003 0301 	and.w	r3, r3, #1
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00b      	beq.n	800ca2e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2202      	movs	r2, #2
 800ca1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca24:	f043 0204 	orr.w	r2, r3, #4
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ca32:	f003 0304 	and.w	r3, r3, #4
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d011      	beq.n	800ca5e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ca3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00b      	beq.n	800ca5e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2204      	movs	r2, #4
 800ca4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca54:	f043 0202 	orr.w	r2, r3, #2
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d006      	beq.n	800ca76 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f7fe fd5b 	bl	800b524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f040 80a4 	bne.w	800cbcc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca8c:	e853 3f00 	ldrex	r3, [r3]
 800ca90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ca92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	461a      	mov	r2, r3
 800caa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800caa6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800caaa:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800caae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cab2:	e841 2300 	strex	r3, r2, [r1]
 800cab6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1e2      	bne.n	800ca84 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	3308      	adds	r3, #8
 800cac4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cac8:	e853 3f00 	ldrex	r3, [r3]
 800cacc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cace:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cad0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cad4:	f023 0301 	bic.w	r3, r3, #1
 800cad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	3308      	adds	r3, #8
 800cae2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cae6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cae8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800caec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800caee:	e841 2300 	strex	r3, r2, [r1]
 800caf2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800caf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1e1      	bne.n	800cabe <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2220      	movs	r2, #32
 800cafe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2200      	movs	r2, #0
 800cb06:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	4a5f      	ldr	r2, [pc, #380]	@ (800cc90 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d021      	beq.n	800cb5c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d01a      	beq.n	800cb5c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb2e:	e853 3f00 	ldrex	r3, [r3]
 800cb32:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cb34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cb3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	461a      	mov	r2, r3
 800cb44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cb48:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb4a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cb4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb50:	e841 2300 	strex	r3, r2, [r1]
 800cb54:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cb56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1e4      	bne.n	800cb26 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d130      	bne.n	800cbc6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb72:	e853 3f00 	ldrex	r3, [r3]
 800cb76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7a:	f023 0310 	bic.w	r3, r3, #16
 800cb7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	461a      	mov	r2, r3
 800cb88:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cb8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb94:	e841 2300 	strex	r3, r2, [r1]
 800cb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1e4      	bne.n	800cb6a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	69db      	ldr	r3, [r3, #28]
 800cba6:	f003 0310 	and.w	r3, r3, #16
 800cbaa:	2b10      	cmp	r3, #16
 800cbac:	d103      	bne.n	800cbb6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2210      	movs	r2, #16
 800cbb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f7fe fcba 	bl	800b538 <HAL_UARTEx_RxEventCallback>
 800cbc4:	e002      	b.n	800cbcc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7f5 ff6e 	bl	8002aa8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cbcc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d006      	beq.n	800cbe2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800cbd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cbd8:	f003 0320 	and.w	r3, r3, #32
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f47f aecb 	bne.w	800c978 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cbe8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cbec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d049      	beq.n	800cc88 <UART_RxISR_16BIT_FIFOEN+0x358>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cbfa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d242      	bcs.n	800cc88 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	3308      	adds	r3, #8
 800cc08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0c:	e853 3f00 	ldrex	r3, [r3]
 800cc10:	623b      	str	r3, [r7, #32]
   return(result);
 800cc12:	6a3b      	ldr	r3, [r7, #32]
 800cc14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cc18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	3308      	adds	r3, #8
 800cc22:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cc26:	633a      	str	r2, [r7, #48]	@ 0x30
 800cc28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc2e:	e841 2300 	strex	r3, r2, [r1]
 800cc32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1e3      	bne.n	800cc02 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4a15      	ldr	r2, [pc, #84]	@ (800cc94 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800cc3e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	e853 3f00 	ldrex	r3, [r3]
 800cc4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f043 0320 	orr.w	r3, r3, #32
 800cc54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cc62:	61fb      	str	r3, [r7, #28]
 800cc64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc66:	69b9      	ldr	r1, [r7, #24]
 800cc68:	69fa      	ldr	r2, [r7, #28]
 800cc6a:	e841 2300 	strex	r3, r2, [r1]
 800cc6e:	617b      	str	r3, [r7, #20]
   return(result);
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1e4      	bne.n	800cc40 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc76:	e007      	b.n	800cc88 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	699a      	ldr	r2, [r3, #24]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f042 0208 	orr.w	r2, r2, #8
 800cc86:	619a      	str	r2, [r3, #24]
}
 800cc88:	bf00      	nop
 800cc8a:	37b8      	adds	r7, #184	@ 0xb8
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	40008000 	.word	0x40008000
 800cc94:	0800c419 	.word	0x0800c419

0800cc98 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ccb4:	bf00      	nop
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ccc8:	bf00      	nop
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d101      	bne.n	800ccea <HAL_UARTEx_EnableFifoMode+0x16>
 800cce6:	2302      	movs	r3, #2
 800cce8:	e02b      	b.n	800cd42 <HAL_UARTEx_EnableFifoMode+0x6e>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2201      	movs	r2, #1
 800ccee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2224      	movs	r2, #36	@ 0x24
 800ccf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f022 0201 	bic.w	r2, r2, #1
 800cd10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cd18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800cd20:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 f8c2 	bl	800ceb4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2220      	movs	r2, #32
 800cd34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd40:	2300      	movs	r3, #0
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd4a:	b480      	push	{r7}
 800cd4c:	b085      	sub	sp, #20
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d101      	bne.n	800cd60 <HAL_UARTEx_DisableFifoMode+0x16>
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	e027      	b.n	800cdb0 <HAL_UARTEx_DisableFifoMode+0x66>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2201      	movs	r2, #1
 800cd64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2224      	movs	r2, #36	@ 0x24
 800cd6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f022 0201 	bic.w	r2, r2, #1
 800cd86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cd8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2220      	movs	r2, #32
 800cda2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cdcc:	2b01      	cmp	r3, #1
 800cdce:	d101      	bne.n	800cdd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cdd0:	2302      	movs	r3, #2
 800cdd2:	e02d      	b.n	800ce30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2224      	movs	r2, #36	@ 0x24
 800cde0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f022 0201 	bic.w	r2, r2, #1
 800cdfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	683a      	ldr	r2, [r7, #0]
 800ce0c:	430a      	orrs	r2, r1
 800ce0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 f84f 	bl	800ceb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2220      	movs	r2, #32
 800ce22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce2e:	2300      	movs	r3, #0
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d101      	bne.n	800ce50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	e02d      	b.n	800ceac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2201      	movs	r2, #1
 800ce54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2224      	movs	r2, #36	@ 0x24
 800ce5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	681a      	ldr	r2, [r3, #0]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f022 0201 	bic.w	r2, r2, #1
 800ce76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	683a      	ldr	r2, [r7, #0]
 800ce88:	430a      	orrs	r2, r1
 800ce8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 f811 	bl	800ceb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2220      	movs	r2, #32
 800ce9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3710      	adds	r7, #16
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d108      	bne.n	800ced6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2201      	movs	r2, #1
 800cec8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2201      	movs	r2, #1
 800ced0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ced4:	e031      	b.n	800cf3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ced6:	2308      	movs	r3, #8
 800ced8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ceda:	2308      	movs	r3, #8
 800cedc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	0e5b      	lsrs	r3, r3, #25
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	f003 0307 	and.w	r3, r3, #7
 800ceec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	0f5b      	lsrs	r3, r3, #29
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	f003 0307 	and.w	r3, r3, #7
 800cefc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cefe:	7bbb      	ldrb	r3, [r7, #14]
 800cf00:	7b3a      	ldrb	r2, [r7, #12]
 800cf02:	4911      	ldr	r1, [pc, #68]	@ (800cf48 <UARTEx_SetNbDataToProcess+0x94>)
 800cf04:	5c8a      	ldrb	r2, [r1, r2]
 800cf06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cf0a:	7b3a      	ldrb	r2, [r7, #12]
 800cf0c:	490f      	ldr	r1, [pc, #60]	@ (800cf4c <UARTEx_SetNbDataToProcess+0x98>)
 800cf0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf10:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf14:	b29a      	uxth	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
 800cf1e:	7b7a      	ldrb	r2, [r7, #13]
 800cf20:	4909      	ldr	r1, [pc, #36]	@ (800cf48 <UARTEx_SetNbDataToProcess+0x94>)
 800cf22:	5c8a      	ldrb	r2, [r1, r2]
 800cf24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cf28:	7b7a      	ldrb	r2, [r7, #13]
 800cf2a:	4908      	ldr	r1, [pc, #32]	@ (800cf4c <UARTEx_SetNbDataToProcess+0x98>)
 800cf2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf32:	b29a      	uxth	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cf3a:	bf00      	nop
 800cf3c:	3714      	adds	r7, #20
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop
 800cf48:	0802e12c 	.word	0x0802e12c
 800cf4c:	0802e134 	.word	0x0802e134

0800cf50 <Chk_ParamValidity>:
* @param  param: Parameter 
* @param  max_param_value: Max Parameter Value 
* @retval MOBLE_RESULT
*/ 
 MOBLE_RESULT Chk_ParamValidity(MOBLEUINT8 param, MOBLEUINT8 max_param_val )
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	4603      	mov	r3, r0
 800cf58:	460a      	mov	r2, r1
 800cf5a:	71fb      	strb	r3, [r7, #7]
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	71bb      	strb	r3, [r7, #6]
  if (param > max_param_val) 
 800cf60:	79fa      	ldrb	r2, [r7, #7]
 800cf62:	79bb      	ldrb	r3, [r7, #6]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d901      	bls.n	800cf6c <Chk_ParamValidity+0x1c>
  {
    return MOBLE_RESULT_INVALIDARG;
 800cf68:	2303      	movs	r3, #3
 800cf6a:	e000      	b.n	800cf6e <Chk_ParamValidity+0x1e>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800cf6c:	2300      	movs	r3, #0
  }
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	370c      	adds	r7, #12
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr

0800cf7a <Chk_OptionalParamValidity>:
*/ 
MOBLE_RESULT Chk_OptionalParamValidity(MOBLEUINT8 param_length,
                                       MOBLEUINT8 mandatory_length,
                                       MOBLEUINT8 param, 
                                       MOBLEUINT8 max_param_value  )
{
 800cf7a:	b490      	push	{r4, r7}
 800cf7c:	b082      	sub	sp, #8
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	4604      	mov	r4, r0
 800cf82:	4608      	mov	r0, r1
 800cf84:	4611      	mov	r1, r2
 800cf86:	461a      	mov	r2, r3
 800cf88:	4623      	mov	r3, r4
 800cf8a:	71fb      	strb	r3, [r7, #7]
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	71bb      	strb	r3, [r7, #6]
 800cf90:	460b      	mov	r3, r1
 800cf92:	717b      	strb	r3, [r7, #5]
 800cf94:	4613      	mov	r3, r2
 800cf96:	713b      	strb	r3, [r7, #4]
  if ((param_length > mandatory_length) && (param > max_param_value))
 800cf98:	79fa      	ldrb	r2, [r7, #7]
 800cf9a:	79bb      	ldrb	r3, [r7, #6]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d905      	bls.n	800cfac <Chk_OptionalParamValidity+0x32>
 800cfa0:	797a      	ldrb	r2, [r7, #5]
 800cfa2:	793b      	ldrb	r3, [r7, #4]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d901      	bls.n	800cfac <Chk_OptionalParamValidity+0x32>
  {
    return MOBLE_RESULT_INVALIDARG;
 800cfa8:	2303      	movs	r3, #3
 800cfaa:	e000      	b.n	800cfae <Chk_OptionalParamValidity+0x34>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800cfac:	2300      	movs	r3, #0
  }
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bc90      	pop	{r4, r7}
 800cfb6:	4770      	bx	lr

0800cfb8 <Chk_ParamMinMaxIntValidity>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Chk_ParamMinMaxIntValidity(MOBLEINT16 min_param_value,
                                        const MOBLEUINT8* param,
                                                     MOBLEINT16 max_param_value )
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	6039      	str	r1, [r7, #0]
 800cfc2:	80fb      	strh	r3, [r7, #6]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	80bb      	strh	r3, [r7, #4]
  MOBLEINT16 param_State1;
    
  param_State1 =  param[1] << 8;
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	021b      	lsls	r3, r3, #8
 800cfd0:	81fb      	strh	r3, [r7, #14]
  param_State1 |= param[0];
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	b21a      	sxth	r2, r3
 800cfd8:	89fb      	ldrh	r3, [r7, #14]
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	81fb      	strh	r3, [r7, #14]
    
  if((param_State1 < min_param_value) || (param_State1 > max_param_value))
 800cfde:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800cfe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	db05      	blt.n	800cff6 <Chk_ParamMinMaxIntValidity+0x3e>
 800cfea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800cfee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	dd01      	ble.n	800cffa <Chk_ParamMinMaxIntValidity+0x42>
  {
    return MOBLE_RESULT_INVALIDARG;
 800cff6:	2303      	movs	r3, #3
 800cff8:	e000      	b.n	800cffc <Chk_ParamMinMaxIntValidity+0x44>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800cffa:	2300      	movs	r3, #0
  }
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3714      	adds	r7, #20
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <Get_StepResolutionValue>:
* @brief  Get actual value in milliseconds from default transition step resolution 
* @param  time_param: integer value received for transition time
* @retval stepResolution 
 */                                         
MOBLEUINT32 Get_StepResolutionValue(MOBLEUINT8 time_param)
{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	4603      	mov	r3, r0
 800d010:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT32 stepResolution = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	60fb      	str	r3, [r7, #12]
  
  if(time_param == STEP_HEX_VALUE_0)
 800d016:	79fb      	ldrb	r3, [r7, #7]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d102      	bne.n	800d022 <Get_StepResolutionValue+0x1a>
  {
    stepResolution = STEP_RESOLUTION_100MS;   
 800d01c:	2364      	movs	r3, #100	@ 0x64
 800d01e:	60fb      	str	r3, [r7, #12]
 800d020:	e015      	b.n	800d04e <Get_StepResolutionValue+0x46>
  }
  else if(time_param == STEP_HEX_VALUE_1)
 800d022:	79fb      	ldrb	r3, [r7, #7]
 800d024:	2b01      	cmp	r3, #1
 800d026:	d103      	bne.n	800d030 <Get_StepResolutionValue+0x28>
  {
    stepResolution = STEP_RESOLUTION_1S;   
 800d028:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d02c:	60fb      	str	r3, [r7, #12]
 800d02e:	e00e      	b.n	800d04e <Get_StepResolutionValue+0x46>
  }
  else if(time_param == STEP_HEX_VALUE_2)
 800d030:	79fb      	ldrb	r3, [r7, #7]
 800d032:	2b02      	cmp	r3, #2
 800d034:	d103      	bne.n	800d03e <Get_StepResolutionValue+0x36>
  {
    stepResolution = STEP_RESOLUTION_10S;   
 800d036:	f242 7310 	movw	r3, #10000	@ 0x2710
 800d03a:	60fb      	str	r3, [r7, #12]
 800d03c:	e007      	b.n	800d04e <Get_StepResolutionValue+0x46>
  }
  else if(time_param == STEP_HEX_VALUE_3)
 800d03e:	79fb      	ldrb	r3, [r7, #7]
 800d040:	2b03      	cmp	r3, #3
 800d042:	d102      	bne.n	800d04a <Get_StepResolutionValue+0x42>
  {
    stepResolution = STEP_RESOLUTION_10M;
 800d044:	4b05      	ldr	r3, [pc, #20]	@ (800d05c <Get_StepResolutionValue+0x54>)
 800d046:	60fb      	str	r3, [r7, #12]
 800d048:	e001      	b.n	800d04e <Get_StepResolutionValue+0x46>
  }
  else
  {
    stepResolution = 0;   
 800d04a:	2300      	movs	r3, #0
 800d04c:	60fb      	str	r3, [r7, #12]
  }  
  
  return stepResolution;  
 800d04e:	68fb      	ldr	r3, [r7, #12]
}
 800d050:	4618      	mov	r0, r3
 800d052:	3714      	adds	r7, #20
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	000927c0 	.word	0x000927c0

0800d060 <TraceHeader>:
* @param  func_name: function pointer.
* @param  mode: Flag
* @retval void
*/ 
void TraceHeader(const char* func_name, int mode)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
    if (mode >= 0)
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	db08      	blt.n	800d082 <TraceHeader+0x22>
        printf("%ld %s - ", Clock_Time(), func_name);
 800d070:	f7f9 fd58 	bl	8006b24 <HAL_GetTick>
 800d074:	4603      	mov	r3, r0
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	4619      	mov	r1, r3
 800d07a:	4808      	ldr	r0, [pc, #32]	@ (800d09c <TraceHeader+0x3c>)
 800d07c:	f019 fc0a 	bl	8026894 <iprintf>
    else
        printf("%ld %s - <<<ERROR>>>", Clock_Time(), func_name);
}    
 800d080:	e007      	b.n	800d092 <TraceHeader+0x32>
        printf("%ld %s - <<<ERROR>>>", Clock_Time(), func_name);
 800d082:	f7f9 fd4f 	bl	8006b24 <HAL_GetTick>
 800d086:	4603      	mov	r3, r0
 800d088:	687a      	ldr	r2, [r7, #4]
 800d08a:	4619      	mov	r1, r3
 800d08c:	4804      	ldr	r0, [pc, #16]	@ (800d0a0 <TraceHeader+0x40>)
 800d08e:	f019 fc01 	bl	8026894 <iprintf>
}    
 800d092:	bf00      	nop
 800d094:	3708      	adds	r7, #8
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	0802a898 	.word	0x0802a898
 800d0a0:	0802a8a4 	.word	0x0802a8a4

0800d0a4 <Model_RestoreStates>:
*        saved states.
* @param void.
* return void.
*/
void Model_RestoreStates(MOBLEUINT8 const *pModelState_Load, MOBLEUINT8 size)
{ 
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b08e      	sub	sp, #56	@ 0x38
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	70fb      	strb	r3, [r7, #3]
  MOBLEUINT8 setData[4];
  MOBLE_ADDRESS publishAddress;
  MOBLEUINT16 model_ID = 0;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  MOBLEUINT16 opcode = 0;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	86bb      	strh	r3, [r7, #52]	@ 0x34
  MOBLEUINT32 length = 0;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MOBLEUINT16 dstPeer;
  MODEL_MessageHeader_t msgParam;
  
  MOBLEUINT16 saveBuffSize;
  
  my_Address = BLEMesh_GetAddress(); /* Get the Primary address */
 800d0bc:	f00d f93a 	bl	801a334 <BLEMesh_GetAddress>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	867b      	strh	r3, [r7, #50]	@ 0x32
  
  Models_ParamNvm_t Models_ParamNvm[APPLICATION_NUMBER_OF_ELEMENTS];
  
  saveBuffSize = sizeof(Models_ParamNvm);
 800d0c4:	2308      	movs	r3, #8
 800d0c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  
  TRACE_I(TF_NVM,"Retrieved data from flash \r\n");
  for(MOBLEUINT8 count=0;count<saveBuffSize;count++)
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800d0ce:	e004      	b.n	800d0da <Model_RestoreStates+0x36>
 800d0d0:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800d0da:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d8f4      	bhi.n	800d0d0 <Model_RestoreStates+0x2c>
  {
    TRACE_I(TF_NVM,"%.2x %c",pModelState_Load[count],' ');
  }
  TRACE_I(TF_NVM,"\r\n");
  
  if (size > 0)
 800d0e6:	78fb      	ldrb	r3, [r7, #3]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f000 80a9 	beq.w	800d240 <Model_RestoreStates+0x19c>
  {
    for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800d0f4:	e09f      	b.n	800d236 <Model_RestoreStates+0x192>
    {
      
      memcpy((void*)&Models_ParamNvm,pModelState_Load,sizeof(Models_ParamNvm));
 800d0f6:	f107 030c 	add.w	r3, r7, #12
 800d0fa:	2208      	movs	r2, #8
 800d0fc:	6879      	ldr	r1, [r7, #4]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f019 fe17 	bl	8026d32 <memcpy>
      
      Generic_RestoreModelStates(&Models_ParamNvm[elementIndex] , elementIndex);
 800d104:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d108:	f107 020c 	add.w	r2, r7, #12
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	4413      	add	r3, r2
 800d110:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800d114:	4611      	mov	r1, r2
 800d116:	4618      	mov	r0, r3
 800d118:	f001 ff1c 	bl	800ef54 <Generic_RestoreModelStates>
      Light_RestoreModelStates(&Models_ParamNvm[elementIndex] , elementIndex);
 800d11c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d120:	f107 020c 	add.w	r2, r7, #12
 800d124:	00db      	lsls	r3, r3, #3
 800d126:	4413      	add	r3, r2
 800d128:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800d12c:	4611      	mov	r1, r2
 800d12e:	4618      	mov	r0, r3
 800d130:	f002 f9f0 	bl	800f514 <Light_RestoreModelStates>
      
      dstPeer = my_Address+elementIndex;
 800d134:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d138:	b29a      	uxth	r2, r3
 800d13a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d13c:	4413      	add	r3, r2
 800d13e:	853b      	strh	r3, [r7, #40]	@ 0x28
    
      /* Initialize the messageParam */
      msgParam.dst_peer = dstPeer;
 800d140:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d142:	837b      	strh	r3, [r7, #26]
      msgParam.peer_addr = dstPeer;
 800d144:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d146:	833b      	strh	r3, [r7, #24]
      msgParam.elementIndex = elementIndex;
 800d148:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d14c:	753b      	strb	r3, [r7, #20]
      msgParam.rcvdAppKeyOffset = 0;
 800d14e:	2300      	movs	r3, #0
 800d150:	77bb      	strb	r3, [r7, #30]
      msgParam.rcvdNetKeyOffset = 0;
 800d152:	2300      	movs	r3, #0
 800d154:	77fb      	strb	r3, [r7, #31]
      msgParam.rssi = 0;
 800d156:	2300      	movs	r3, #0
 800d158:	777b      	strb	r3, [r7, #29]
      msgParam.ttl = 0;
 800d15a:	2300      	movs	r3, #0
 800d15c:	773b      	strb	r3, [r7, #28]
      
      switch(Models_ParamNvm[elementIndex].Restore_Flag)  
 800d15e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d162:	00db      	lsls	r3, r3, #3
 800d164:	3338      	adds	r3, #56	@ 0x38
 800d166:	443b      	add	r3, r7
 800d168:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d16c:	2bfe      	cmp	r3, #254	@ 0xfe
 800d16e:	d02f      	beq.n	800d1d0 <Model_RestoreStates+0x12c>
 800d170:	2bfe      	cmp	r3, #254	@ 0xfe
 800d172:	dc39      	bgt.n	800d1e8 <Model_RestoreStates+0x144>
 800d174:	2b01      	cmp	r3, #1
 800d176:	d002      	beq.n	800d17e <Model_RestoreStates+0xda>
 800d178:	2b02      	cmp	r3, #2
 800d17a:	d013      	beq.n	800d1a4 <Model_RestoreStates+0x100>
        }
        
        default: 
        {
          TRACE_M(TF_LIGHT_M, "No Saved Data Found \r\n");
          break;
 800d17c:	e034      	b.n	800d1e8 <Model_RestoreStates+0x144>
          Generic_OnOffPowerOnValue(&Models_ParamNvm[elementIndex], &msgParam);				
 800d17e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d182:	f107 020c 	add.w	r2, r7, #12
 800d186:	00db      	lsls	r3, r3, #3
 800d188:	4413      	add	r3, r2
 800d18a:	f107 0214 	add.w	r2, r7, #20
 800d18e:	4611      	mov	r1, r2
 800d190:	4618      	mov	r0, r3
 800d192:	f000 f85f 	bl	800d254 <Generic_OnOffPowerOnValue>
          opcode = GENERIC_ON_OFF_SET_UNACK;
 800d196:	f248 2303 	movw	r3, #33283	@ 0x8203
 800d19a:	86bb      	strh	r3, [r7, #52]	@ 0x34
          model_ID = GENERIC_ONOFF_SERVER_MODEL_ID;
 800d19c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d1a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
          break;
 800d1a2:	e022      	b.n	800d1ea <Model_RestoreStates+0x146>
          CopyU8LittleEndienArray_fromU16word (setData, Models_ParamNvm[elementIndex].Generic_Level);
 800d1a4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d1a8:	00db      	lsls	r3, r3, #3
 800d1aa:	3338      	adds	r3, #56	@ 0x38
 800d1ac:	443b      	add	r3, r7
 800d1ae:	f833 2c26 	ldrh.w	r2, [r3, #-38]
 800d1b2:	f107 0320 	add.w	r3, r7, #32
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f000 f8ff 	bl	800d3bc <CopyU8LittleEndienArray_fromU16word>
          Generic_Level_Set(setData,2, &msgParam);
 800d1be:	f107 0214 	add.w	r2, r7, #20
 800d1c2:	f107 0320 	add.w	r3, r7, #32
 800d1c6:	2102      	movs	r1, #2
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f000 fae1 	bl	800d790 <Generic_Level_Set>
          break;
 800d1ce:	e00c      	b.n	800d1ea <Model_RestoreStates+0x146>
          TRACE_M(TF_GENERIC_M, "Power OnOff value stored = %d \r\n",pModelState_Load[4]);
 800d1d0:	2100      	movs	r1, #0
 800d1d2:	481d      	ldr	r0, [pc, #116]	@ (800d248 <Model_RestoreStates+0x1a4>)
 800d1d4:	f7ff ff44 	bl	800d060 <TraceHeader>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	3304      	adds	r3, #4
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	4619      	mov	r1, r3
 800d1e0:	481a      	ldr	r0, [pc, #104]	@ (800d24c <Model_RestoreStates+0x1a8>)
 800d1e2:	f019 fb57 	bl	8026894 <iprintf>
          break;
 800d1e6:	e000      	b.n	800d1ea <Model_RestoreStates+0x146>
          break;
 800d1e8:	bf00      	nop
        }
        
      } /* switch(pModelState_Load[GENERIC_VALID_FLAG_OFFSET]) */    
    
      my_Address = BLEMesh_GetAddress();
 800d1ea:	f00d f8a3 	bl	801a334 <BLEMesh_GetAddress>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	867b      	strh	r3, [r7, #50]	@ 0x32
      publishAddress = BLEMesh_GetPublishAddress(elementIndex, model_ID);
 800d1f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d1f4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f00d f8aa 	bl	801a354 <BLEMesh_GetPublishAddress>
 800d200:	4603      	mov	r3, r0
 800d202:	84fb      	strh	r3, [r7, #38]	@ 0x26
      
      if(publishAddress != 0x0000 )
 800d204:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d206:	2b00      	cmp	r3, #0
 800d208:	d010      	beq.n	800d22c <Model_RestoreStates+0x188>
      {
        msgParam.peer_addr = publishAddress;
 800d20a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d20c:	833b      	strh	r3, [r7, #24]
        msgParam.dst_peer = dstPeer;
 800d20e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d210:	837b      	strh	r3, [r7, #26]
      
        Model_SendResponse(&msgParam, opcode, setData,length);
 800d212:	f107 0220 	add.w	r2, r7, #32
 800d216:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 800d218:	f107 0014 	add.w	r0, r7, #20
 800d21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d21e:	f018 fa3d 	bl	802569c <Model_SendResponse>
        TRACE_I(TF_COMMON,"Publishing the Power on state to address %.2X \r\n",publishAddress);
 800d222:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d224:	4619      	mov	r1, r3
 800d226:	480a      	ldr	r0, [pc, #40]	@ (800d250 <Model_RestoreStates+0x1ac>)
 800d228:	f019 fb34 	bl	8026894 <iprintf>
    for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800d22c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d230:	3301      	adds	r3, #1
 800d232:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800d236:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	f43f af5b 	beq.w	800d0f6 <Model_RestoreStates+0x52>
      } /* if(publishAddress != 0x0000) */
     
     // break; /* Run only once for element index 0 */
    } /* for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++) */
  } /* if (size > 0) */
}
 800d240:	bf00      	nop
 800d242:	3738      	adds	r7, #56	@ 0x38
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	0802e13c 	.word	0x0802e13c
 800d24c:	0802a8c8 	.word	0x0802a8c8
 800d250:	0802a8ec 	.word	0x0802a8ec

0800d254 <Generic_OnOffPowerOnValue>:
* @param  *pmsgParam: Pointer to structure of message header for parameters:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & ApkmpKey Offset
* @retval MOBLEUINT16
*/
void Generic_OnOffPowerOnValue(Models_ParamNvm_t *state_Value, MODEL_MessageHeader_t *pmsgParam)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 transitionStatus;
  MOBLEUINT8 setData[2]; 
  
  transitionStatus = state_Value->GenericTransitionStatus;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	789b      	ldrb	r3, [r3, #2]
 800d262:	73fb      	strb	r3, [r7, #15]
  
  if(transitionStatus)
 800d264:	7bfb      	ldrb	r3, [r7, #15]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d003      	beq.n	800d272 <Generic_OnOffPowerOnValue+0x1e>
  {
    setData[0] = state_Value->GenericTarget;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	795b      	ldrb	r3, [r3, #5]
 800d26e:	733b      	strb	r3, [r7, #12]
 800d270:	e002      	b.n	800d278 <Generic_OnOffPowerOnValue+0x24>
  }
  else
  {
    setData[0] = state_Value->Generic_OnOff;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	791b      	ldrb	r3, [r3, #4]
 800d276:	733b      	strb	r3, [r7, #12]
  }
  
  if(state_Value->PowerOnOff == GENERIC_POWER_OFF_STATE)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	78db      	ldrb	r3, [r3, #3]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d109      	bne.n	800d294 <Generic_OnOffPowerOnValue+0x40>
  {
    setData[0] = APPLI_LED_OFF;
 800d280:	2300      	movs	r3, #0
 800d282:	733b      	strb	r3, [r7, #12]
    Generic_OnOff_Set(setData,1,pmsgParam); 
 800d284:	f107 030c 	add.w	r3, r7, #12
 800d288:	683a      	ldr	r2, [r7, #0]
 800d28a:	2101      	movs	r1, #1
 800d28c:	4618      	mov	r0, r3
 800d28e:	f000 f919 	bl	800d4c4 <Generic_OnOff_Set>
  }
  else
  {
    
  }           
}
 800d292:	e018      	b.n	800d2c6 <Generic_OnOffPowerOnValue+0x72>
  else if(state_Value->PowerOnOff == GENERIC_POWER_ON_STATE)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	78db      	ldrb	r3, [r3, #3]
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d109      	bne.n	800d2b0 <Generic_OnOffPowerOnValue+0x5c>
    setData[0] = APPLI_LED_ON;
 800d29c:	2301      	movs	r3, #1
 800d29e:	733b      	strb	r3, [r7, #12]
    Generic_OnOff_Set(setData,1,pmsgParam);
 800d2a0:	f107 030c 	add.w	r3, r7, #12
 800d2a4:	683a      	ldr	r2, [r7, #0]
 800d2a6:	2101      	movs	r1, #1
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f000 f90b 	bl	800d4c4 <Generic_OnOff_Set>
}
 800d2ae:	e00a      	b.n	800d2c6 <Generic_OnOffPowerOnValue+0x72>
  else if(state_Value->PowerOnOff == GENERIC_POWER_RESTORE_STATE)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	78db      	ldrb	r3, [r3, #3]
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	d106      	bne.n	800d2c6 <Generic_OnOffPowerOnValue+0x72>
    Generic_OnOff_Set(setData, 1,pmsgParam);
 800d2b8:	f107 030c 	add.w	r3, r7, #12
 800d2bc:	683a      	ldr	r2, [r7, #0]
 800d2be:	2101      	movs	r1, #1
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f000 f8ff 	bl	800d4c4 <Generic_OnOff_Set>
}
 800d2c6:	bf00      	nop
 800d2c8:	3710      	adds	r7, #16
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
	...

0800d2d0 <Chk_TidValidity>:
  * @brief  
  * @param  
  * @retval 
  */
MOBLE_RESULT Chk_TidValidity(MOBLE_ADDRESS peerAddr, MOBLE_ADDRESS dstAddr, MOBLEUINT8 tidValue)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b084      	sub	sp, #16
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	80fb      	strh	r3, [r7, #6]
 800d2da:	460b      	mov	r3, r1
 800d2dc:	80bb      	strh	r3, [r7, #4]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	70fb      	strb	r3, [r7, #3]
  static MOBLEUINT32 Check_time;
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	73fb      	strb	r3, [r7, #15]
  
  TRACE_M(TF_COMMON, "dst_peer %.2X peer_add %.2X, tid %d\r\n", dstAddr, peerAddr, tidValue);
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	482d      	ldr	r0, [pc, #180]	@ (800d3a0 <Chk_TidValidity+0xd0>)
 800d2ea:	f7ff feb9 	bl	800d060 <TraceHeader>
 800d2ee:	88b9      	ldrh	r1, [r7, #4]
 800d2f0:	88fa      	ldrh	r2, [r7, #6]
 800d2f2:	78fb      	ldrb	r3, [r7, #3]
 800d2f4:	482b      	ldr	r0, [pc, #172]	@ (800d3a4 <Chk_TidValidity+0xd4>)
 800d2f6:	f019 facd 	bl	8026894 <iprintf>
  
  if(((Clock_Time()- Check_time) <= 6000))
 800d2fa:	f7f9 fc13 	bl	8006b24 <HAL_GetTick>
 800d2fe:	4602      	mov	r2, r0
 800d300:	4b29      	ldr	r3, [pc, #164]	@ (800d3a8 <Chk_TidValidity+0xd8>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	1ad3      	subs	r3, r2, r3
 800d306:	f241 7270 	movw	r2, #6000	@ 0x1770
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d82e      	bhi.n	800d36c <Chk_TidValidity+0x9c>
  {
    if((Model_Tid.Peer_Addrs == peerAddr)&&(Model_Tid.Dst_Addrs == dstAddr)&&(Model_Tid.Tid_Value == tidValue))
 800d30e:	4b27      	ldr	r3, [pc, #156]	@ (800d3ac <Chk_TidValidity+0xdc>)
 800d310:	885b      	ldrh	r3, [r3, #2]
 800d312:	88fa      	ldrh	r2, [r7, #6]
 800d314:	429a      	cmp	r2, r3
 800d316:	d113      	bne.n	800d340 <Chk_TidValidity+0x70>
 800d318:	4b24      	ldr	r3, [pc, #144]	@ (800d3ac <Chk_TidValidity+0xdc>)
 800d31a:	889b      	ldrh	r3, [r3, #4]
 800d31c:	88ba      	ldrh	r2, [r7, #4]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d10e      	bne.n	800d340 <Chk_TidValidity+0x70>
 800d322:	4b22      	ldr	r3, [pc, #136]	@ (800d3ac <Chk_TidValidity+0xdc>)
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	78fa      	ldrb	r2, [r7, #3]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d109      	bne.n	800d340 <Chk_TidValidity+0x70>
    {
      TRACE_M(TF_COMMON,"Duplicate Message Parameter within six second \r\n");
 800d32c:	2100      	movs	r1, #0
 800d32e:	481c      	ldr	r0, [pc, #112]	@ (800d3a0 <Chk_TidValidity+0xd0>)
 800d330:	f7ff fe96 	bl	800d060 <TraceHeader>
 800d334:	481e      	ldr	r0, [pc, #120]	@ (800d3b0 <Chk_TidValidity+0xe0>)
 800d336:	f019 fb15 	bl	8026964 <puts>
      status =  MOBLE_RESULT_INVALIDARG;       
 800d33a:	2303      	movs	r3, #3
 800d33c:	73fb      	strb	r3, [r7, #15]
 800d33e:	e02a      	b.n	800d396 <Chk_TidValidity+0xc6>
    }
    else
    {
      Check_time = Clock_Time();
 800d340:	f7f9 fbf0 	bl	8006b24 <HAL_GetTick>
 800d344:	4603      	mov	r3, r0
 800d346:	4a18      	ldr	r2, [pc, #96]	@ (800d3a8 <Chk_TidValidity+0xd8>)
 800d348:	6013      	str	r3, [r2, #0]
      Model_Tid.Peer_Addrs = peerAddr;
 800d34a:	4a18      	ldr	r2, [pc, #96]	@ (800d3ac <Chk_TidValidity+0xdc>)
 800d34c:	88fb      	ldrh	r3, [r7, #6]
 800d34e:	8053      	strh	r3, [r2, #2]
      Model_Tid.Dst_Addrs = dstAddr;
 800d350:	4a16      	ldr	r2, [pc, #88]	@ (800d3ac <Chk_TidValidity+0xdc>)
 800d352:	88bb      	ldrh	r3, [r7, #4]
 800d354:	8093      	strh	r3, [r2, #4]
      Model_Tid.Tid_Value = tidValue; 
 800d356:	4a15      	ldr	r2, [pc, #84]	@ (800d3ac <Chk_TidValidity+0xdc>)
 800d358:	78fb      	ldrb	r3, [r7, #3]
 800d35a:	7013      	strb	r3, [r2, #0]
      TRACE_M(TF_COMMON,"New Message Parameter within six second \r\n");
 800d35c:	2100      	movs	r1, #0
 800d35e:	4810      	ldr	r0, [pc, #64]	@ (800d3a0 <Chk_TidValidity+0xd0>)
 800d360:	f7ff fe7e 	bl	800d060 <TraceHeader>
 800d364:	4813      	ldr	r0, [pc, #76]	@ (800d3b4 <Chk_TidValidity+0xe4>)
 800d366:	f019 fafd 	bl	8026964 <puts>
 800d36a:	e014      	b.n	800d396 <Chk_TidValidity+0xc6>
    }
  }
  else
  {
    Check_time = Clock_Time();
 800d36c:	f7f9 fbda 	bl	8006b24 <HAL_GetTick>
 800d370:	4603      	mov	r3, r0
 800d372:	4a0d      	ldr	r2, [pc, #52]	@ (800d3a8 <Chk_TidValidity+0xd8>)
 800d374:	6013      	str	r3, [r2, #0]
    Model_Tid.Peer_Addrs = peerAddr;
 800d376:	4a0d      	ldr	r2, [pc, #52]	@ (800d3ac <Chk_TidValidity+0xdc>)
 800d378:	88fb      	ldrh	r3, [r7, #6]
 800d37a:	8053      	strh	r3, [r2, #2]
    Model_Tid.Dst_Addrs = dstAddr;
 800d37c:	4a0b      	ldr	r2, [pc, #44]	@ (800d3ac <Chk_TidValidity+0xdc>)
 800d37e:	88bb      	ldrh	r3, [r7, #4]
 800d380:	8093      	strh	r3, [r2, #4]
    Model_Tid.Tid_Value = tidValue;
 800d382:	4a0a      	ldr	r2, [pc, #40]	@ (800d3ac <Chk_TidValidity+0xdc>)
 800d384:	78fb      	ldrb	r3, [r7, #3]
 800d386:	7013      	strb	r3, [r2, #0]
    TRACE_M(TF_COMMON,"New Message Parameter after six second\r\n");
 800d388:	2100      	movs	r1, #0
 800d38a:	4805      	ldr	r0, [pc, #20]	@ (800d3a0 <Chk_TidValidity+0xd0>)
 800d38c:	f7ff fe68 	bl	800d060 <TraceHeader>
 800d390:	4809      	ldr	r0, [pc, #36]	@ (800d3b8 <Chk_TidValidity+0xe8>)
 800d392:	f019 fae7 	bl	8026964 <puts>
  }
  
  return status;
 800d396:	7bfb      	ldrb	r3, [r7, #15]
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3710      	adds	r7, #16
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	0802e150 	.word	0x0802e150
 800d3a4:	0802a920 	.word	0x0802a920
 800d3a8:	200046c0 	.word	0x200046c0
 800d3ac:	200046b0 	.word	0x200046b0
 800d3b0:	0802a948 	.word	0x0802a948
 800d3b4:	0802a978 	.word	0x0802a978
 800d3b8:	0802a9a4 	.word	0x0802a9a4

0800d3bc <CopyU8LittleEndienArray_fromU16word>:
  * and copy in one byte size array.  
  * @param pArray: pointer too the input array
  * @param inputWord: 16 bit variabale  
*/
void CopyU8LittleEndienArray_fromU16word (MOBLEUINT8* pArray, MOBLEUINT16 inputWord)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	807b      	strh	r3, [r7, #2]
  *(pArray) = (MOBLEUINT8)(inputWord & 0x00ff);  /* Copy the LSB first */
 800d3c8:	887b      	ldrh	r3, [r7, #2]
 800d3ca:	b2da      	uxtb	r2, r3
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	701a      	strb	r2, [r3, #0]
  *(pArray+1) = (MOBLEUINT8)((inputWord & 0xff00) >> 0x08); /* Copy the MSB later */
 800d3d0:	887b      	ldrh	r3, [r7, #2]
 800d3d2:	0a1b      	lsrs	r3, r3, #8
 800d3d4:	b29a      	uxth	r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	b2d2      	uxtb	r2, r2
 800d3dc:	701a      	strb	r2, [r3, #0]
}
 800d3de:	bf00      	nop
 800d3e0:	370c      	adds	r7, #12
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr

0800d3ea <CopyU8LittleEndienArrayToU16word>:
  * bit variable
  * @param pArray: pointer too the input array
  * @retval u16Word : 16 bit value. 
*/
MOBLEUINT16 CopyU8LittleEndienArrayToU16word (MOBLEUINT8* pArray) 
{
 800d3ea:	b480      	push	{r7}
 800d3ec:	b085      	sub	sp, #20
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
  MOBLEUINT16 u16Word=0;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	81fb      	strh	r3, [r7, #14]
  MOBLEUINT8 lsb_byte=0;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	737b      	strb	r3, [r7, #13]
  MOBLEUINT8 msb_byte=0;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	733b      	strb	r3, [r7, #12]
  
  lsb_byte = *pArray;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	737b      	strb	r3, [r7, #13]
  pArray++;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	3301      	adds	r3, #1
 800d408:	607b      	str	r3, [r7, #4]
  msb_byte = *pArray;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	733b      	strb	r3, [r7, #12]
  u16Word = (msb_byte<<8);
 800d410:	7b3b      	ldrb	r3, [r7, #12]
 800d412:	b29b      	uxth	r3, r3
 800d414:	021b      	lsls	r3, r3, #8
 800d416:	81fb      	strh	r3, [r7, #14]
  u16Word &= 0xFF00;
 800d418:	89fb      	ldrh	r3, [r7, #14]
 800d41a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d41e:	81fb      	strh	r3, [r7, #14]
  u16Word |= lsb_byte;
 800d420:	7b7b      	ldrb	r3, [r7, #13]
 800d422:	b29a      	uxth	r2, r3
 800d424:	89fb      	ldrh	r3, [r7, #14]
 800d426:	4313      	orrs	r3, r2
 800d428:	81fb      	strh	r3, [r7, #14]

  return u16Word;
 800d42a:	89fb      	ldrh	r3, [r7, #14]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3714      	adds	r7, #20
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <NvmStatePowerFlag_Set>:
* @brief  Update parameters for ModelSaveProcess to save model states
* @param  NVM flag for model
* @retval None
*/
void NvmStatePowerFlag_Set(MOBLEUINT8 nvmModelFlag, MOBLEUINT8 elementIndex)
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	4603      	mov	r3, r0
 800d440:	460a      	mov	r2, r1
 800d442:	71fb      	strb	r3, [r7, #7]
 800d444:	4613      	mov	r3, r2
 800d446:	71bb      	strb	r3, [r7, #6]
#ifdef SAVE_MODEL_STATE_FOR_ALL_MESSAGES
  PowerOnOff_flag = FLAG_SET;
  RestoreFlag[elementIndex] = nvmModelFlag;
#endif
}
 800d448:	bf00      	nop
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <Binding_GenericOnOff_LightLcLightOnOff>:
MOBLE_RESULT Binding_GenericOnOff_LightLcLightOnOff(MOBLEUINT8 genericElementIndex, 
                                                    MOBLEUINT8 genericOnOff,
                                                    MOBLEUINT8 optionalParams,
                                                    MOBLEUINT32 delayMs,
                                                      MOBLEUINT8 transitionParam)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b086      	sub	sp, #24
 800d458:	af02      	add	r7, sp, #8
 800d45a:	603b      	str	r3, [r7, #0]
 800d45c:	4603      	mov	r3, r0
 800d45e:	71fb      	strb	r3, [r7, #7]
 800d460:	460b      	mov	r3, r1
 800d462:	71bb      	strb	r3, [r7, #6]
 800d464:	4613      	mov	r3, r2
 800d466:	717b      	strb	r3, [r7, #5]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800d468:	2300      	movs	r3, #0
 800d46a:	73fb      	strb	r3, [r7, #15]
  
  /* optional params to be inserted */
  Light_LC_LcOnOffUpdate(genericElementIndex, genericOnOff, 0, 0, 0, 0);
 800d46c:	79b9      	ldrb	r1, [r7, #6]
 800d46e:	79f8      	ldrb	r0, [r7, #7]
 800d470:	2300      	movs	r3, #0
 800d472:	9301      	str	r3, [sp, #4]
 800d474:	2300      	movs	r3, #0
 800d476:	9300      	str	r3, [sp, #0]
 800d478:	2300      	movs	r3, #0
 800d47a:	2200      	movs	r2, #0
 800d47c:	f003 fb56 	bl	8010b2c <Light_LC_LcOnOffUpdate>
  
  return result;
 800d480:	7bfb      	ldrb	r3, [r7, #15]
}
 800d482:	4618      	mov	r0, r3
 800d484:	3710      	adds	r7, #16
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}

0800d48a <BindingDisable_LcLinearOut_LightLightnessLinear>:
  *         Extract target LC Server element index
  * @param  element index of Light Lightness Server
  * @retval None
  */
void BindingDisable_LcLinearOut_LightLightnessLinear(MOBLEUINT8 lightnessLinearElementIndex)
{
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b082      	sub	sp, #8
 800d48e:	af00      	add	r7, sp, #0
 800d490:	4603      	mov	r3, r0
 800d492:	71fb      	strb	r3, [r7, #7]
  if(lightnessLinearElementIndex == LIGHT_LIGHTNESS_SERVER_MAIN_ELEMENT_INDEX)
 800d494:	79fb      	ldrb	r3, [r7, #7]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d103      	bne.n	800d4a2 <BindingDisable_LcLinearOut_LightLightnessLinear+0x18>
  {
    Light_LC_LigtnessLinearUnsolicitedChange(lightnessLinearElementIndex);
 800d49a:	79fb      	ldrb	r3, [r7, #7]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f003 fb3a 	bl	8010b16 <Light_LC_LigtnessLinearUnsolicitedChange>
  }
}
 800d4a2:	bf00      	nop
 800d4a4:	3708      	adds	r7, #8
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <ApplicationGetConfigServerDeviceKey>:


WEAK_FUNCTION ( MOBLE_RESULT ApplicationGetConfigServerDeviceKey(MOBLE_ADDRESS src, 
                                                 const MOBLEUINT8 **ppkeyTbUse))
{
 800d4aa:	b480      	push	{r7}
 800d4ac:	b083      	sub	sp, #12
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	6039      	str	r1, [r7, #0]
 800d4b4:	80fb      	strh	r3, [r7, #6]
  return MOBLE_RESULT_SUCCESS;
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <Generic_OnOff_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_OnOff_Set(MOBLEUINT8 const *pOnOff_param, 
                               MOBLEUINT32 length,
                               MODEL_MessageHeader_t *pmsgParam)  
{
 800d4c4:	b590      	push	{r4, r7, lr}
 800d4c6:	b089      	sub	sp, #36	@ 0x24
 800d4c8:	af02      	add	r7, sp, #8
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	60b9      	str	r1, [r7, #8]
 800d4ce:	607a      	str	r2, [r7, #4]
  TID :  1B Transaction Identifier
  Transition Time: 1B Format as defined in Section 3.1.3. (Optional)
  Delay: 1B Message execution delay in 5 millisecond steps (C.1)
  */
  
  TRACE_M(TF_GENERIC_M, "Generic_OnOff_Set callback received \r\n");  
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	485c      	ldr	r0, [pc, #368]	@ (800d644 <Generic_OnOff_Set+0x180>)
 800d4d4:	f7ff fdc4 	bl	800d060 <TraceHeader>
 800d4d8:	485b      	ldr	r0, [pc, #364]	@ (800d648 <Generic_OnOff_Set+0x184>)
 800d4da:	f019 fa43 	bl	8026964 <puts>
  
  Generic_OnOffParam_t Generic_OnOffParam; 
  Generic_OnOffParam.TargetOnOffState = pOnOff_param[0];
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	753b      	strb	r3, [r7, #20]
  Generic_OnOffParam.Generic_TID = pOnOff_param[1];
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	757b      	strb	r3, [r7, #21]
  Generic_OnOffParam.Transition_Time = 0;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	75bb      	strb	r3, [r7, #22]
  Generic_OnOffParam.Delay_Time = 0;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	75fb      	strb	r3, [r7, #23]
  Checking for optional parameters
  length > 2 , 4 values  received(OnOff status, TID, Trasmisition time(optional),
  Delay(optional)),length < 2 OnOff status and TID   
  */
  
  if((length > 2) && (pOnOff_param[2] !=0))
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	d96f      	bls.n	800d5da <Generic_OnOff_Set+0x116>
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	3302      	adds	r3, #2
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d06a      	beq.n	800d5da <Generic_OnOff_Set+0x116>
  {
    /* Transition_Time & Delay_Time Present */
    Generic_OnOffParam.Transition_Time = pOnOff_param[2];
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	3302      	adds	r3, #2
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	75bb      	strb	r3, [r7, #22]
    Generic_OnOffParam.Delay_Time = pOnOff_param[3];
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	3303      	adds	r3, #3
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	75fb      	strb	r3, [r7, #23]
      
    /* 3.1.1.1 Binary state transitions: Because binary states cannot support transitions, 
       when changing to 0x01 (On), the Generic OnOff state shall change immediately 
       when the transition starts, and when changing to 0x00, the state shall
       change when the transition finishes.*/
    if(pOnOff_param[0] == 1)
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d10c      	bne.n	800d536 <Generic_OnOff_Set+0x72>
    {
      Generic_OnOffStatus[pmsgParam->elementIndex].Present_OnOff_State = pOnOff_param[0];
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	4619      	mov	r1, r3
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	7818      	ldrb	r0, [r3, #0]
 800d526:	4a49      	ldr	r2, [pc, #292]	@ (800d64c <Generic_OnOff_Set+0x188>)
 800d528:	460b      	mov	r3, r1
 800d52a:	005b      	lsls	r3, r3, #1
 800d52c:	440b      	add	r3, r1
 800d52e:	005b      	lsls	r3, r3, #1
 800d530:	4413      	add	r3, r2
 800d532:	4602      	mov	r2, r0
 800d534:	701a      	strb	r2, [r3, #0]
    }
    Generic_OnOffStatus[pmsgParam->elementIndex].Target_OnOff = Generic_OnOffParam.TargetOnOffState;
 800d536:	7d3a      	ldrb	r2, [r7, #20]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	4619      	mov	r1, r3
 800d53e:	4610      	mov	r0, r2
 800d540:	4a42      	ldr	r2, [pc, #264]	@ (800d64c <Generic_OnOff_Set+0x188>)
 800d542:	460b      	mov	r3, r1
 800d544:	005b      	lsls	r3, r3, #1
 800d546:	440b      	add	r3, r1
 800d548:	005b      	lsls	r3, r3, #1
 800d54a:	4413      	add	r3, r2
 800d54c:	4602      	mov	r2, r0
 800d54e:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_OnOffStatus[pmsgParam->elementIndex].RemainingTime = Generic_OnOffParam.Transition_Time;   
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	4619      	mov	r1, r3
 800d558:	7db8      	ldrb	r0, [r7, #22]
 800d55a:	4a3c      	ldr	r2, [pc, #240]	@ (800d64c <Generic_OnOff_Set+0x188>)
 800d55c:	460b      	mov	r3, r1
 800d55e:	005b      	lsls	r3, r3, #1
 800d560:	440b      	add	r3, r1
 800d562:	005b      	lsls	r3, r3, #1
 800d564:	4413      	add	r3, r2
 800d566:	3305      	adds	r3, #5
 800d568:	4602      	mov	r2, r0
 800d56a:	701a      	strb	r2, [r3, #0]
    
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Generic_OnOffStatus[pmsgParam->elementIndex].RemainingTime;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	4618      	mov	r0, r3
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	4619      	mov	r1, r3
 800d578:	4a34      	ldr	r2, [pc, #208]	@ (800d64c <Generic_OnOff_Set+0x188>)
 800d57a:	4603      	mov	r3, r0
 800d57c:	005b      	lsls	r3, r3, #1
 800d57e:	4403      	add	r3, r0
 800d580:	005b      	lsls	r3, r3, #1
 800d582:	4413      	add	r3, r2
 800d584:	3305      	adds	r3, #5
 800d586:	7818      	ldrb	r0, [r3, #0]
 800d588:	4a31      	ldr	r2, [pc, #196]	@ (800d650 <Generic_OnOff_Set+0x18c>)
 800d58a:	460b      	mov	r3, r1
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	440b      	add	r3, r1
 800d590:	4413      	add	r3, r2
 800d592:	4602      	mov	r2, r0
 800d594:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
      step size for transition state machine
    */
    Generic_GetStepValue(pOnOff_param[2], pmsgParam->elementIndex);   
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	3302      	adds	r3, #2
 800d59a:	781a      	ldrb	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	4610      	mov	r0, r2
 800d5a4:	f001 f992 	bl	800e8cc <Generic_GetStepValue>
    /*option parameter flag, enable to send optional parameters in status.*/         
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	4a29      	ldr	r2, [pc, #164]	@ (800d654 <Generic_OnOff_Set+0x190>)
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	005b      	lsls	r3, r3, #1
 800d5b4:	440b      	add	r3, r1
 800d5b6:	4413      	add	r3, r2
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	701a      	strb	r2, [r3, #0]
    /*Flag to enable the on Off transition state machine */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_ON_OFF_TRANSITION_START;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	4a23      	ldr	r2, [pc, #140]	@ (800d654 <Generic_OnOff_Set+0x190>)
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	005b      	lsls	r3, r3, #1
 800d5ca:	440b      	add	r3, r1
 800d5cc:	4413      	add	r3, r2
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	701a      	strb	r2, [r3, #0]
    /* flag is used for the application to get the information about the transition 
       time parameter is included or not in the received message.
    */
    OptionalParam = IN_TRANSITION;
 800d5d2:	4b21      	ldr	r3, [pc, #132]	@ (800d658 <Generic_OnOff_Set+0x194>)
 800d5d4:	2202      	movs	r2, #2
 800d5d6:	701a      	strb	r2, [r3, #0]
 800d5d8:	e013      	b.n	800d602 <Generic_OnOff_Set+0x13e>
/* EME END: management of Present_OnOff_Value and Target_OnOff on immediate transition */
#else
    /* When no optional parameter received, target value will be set as present
       value in application.
    */  
    OptionalParam = NO_TRANSITION;
 800d5da:	4b1f      	ldr	r3, [pc, #124]	@ (800d658 <Generic_OnOff_Set+0x194>)
 800d5dc:	2201      	movs	r2, #1
 800d5de:	701a      	strb	r2, [r3, #0]
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f001 fc89 	bl	800eefc <Generic_TransitionParameterReset>
#endif       
    
    Generic_OnOffStatus[pmsgParam->elementIndex].Present_OnOff_State = Generic_OnOffParam.TargetOnOffState;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	7d38      	ldrb	r0, [r7, #20]
 800d5f2:	4a16      	ldr	r2, [pc, #88]	@ (800d64c <Generic_OnOff_Set+0x188>)
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	005b      	lsls	r3, r3, #1
 800d5f8:	440b      	add	r3, r1
 800d5fa:	005b      	lsls	r3, r3, #1
 800d5fc:	4413      	add	r3, r2
 800d5fe:	4602      	mov	r2, r0
 800d600:	701a      	strb	r2, [r3, #0]
  }
  
  /* Application Callback */
  (GenericAppli_cb.OnOff_Set_cb)(&Generic_OnOffStatus[pmsgParam->elementIndex], OptionalParam, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800d602:	4b16      	ldr	r3, [pc, #88]	@ (800d65c <Generic_OnOff_Set+0x198>)
 800d604:	681c      	ldr	r4, [r3, #0]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	461a      	mov	r2, r3
 800d60c:	4613      	mov	r3, r2
 800d60e:	005b      	lsls	r3, r3, #1
 800d610:	4413      	add	r3, r2
 800d612:	005b      	lsls	r3, r3, #1
 800d614:	4a0d      	ldr	r2, [pc, #52]	@ (800d64c <Generic_OnOff_Set+0x188>)
 800d616:	1898      	adds	r0, r3, r2
 800d618:	4b0f      	ldr	r3, [pc, #60]	@ (800d658 <Generic_OnOff_Set+0x194>)
 800d61a:	7819      	ldrb	r1, [r3, #0]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	88da      	ldrh	r2, [r3, #6]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	47a0      	blx	r4
  GenericOnOff_LightActualBinding(&Generic_OnOffStatus[pmsgParam->elementIndex],pmsgParam->elementIndex,
           Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
#endif

  /* For corresponding element which supports Light LC Server */
  Binding_GenericOnOff_LightLcLightOnOff(pmsgParam->elementIndex,
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	7818      	ldrb	r0, [r3, #0]
 800d62a:	7d39      	ldrb	r1, [r7, #20]
 800d62c:	2300      	movs	r3, #0
 800d62e:	9300      	str	r3, [sp, #0]
 800d630:	2300      	movs	r3, #0
 800d632:	2200      	movs	r2, #0
 800d634:	f7ff ff0e 	bl	800d454 <Binding_GenericOnOff_LightLcLightOnOff>
                                         Generic_OnOffParam.TargetOnOffState,
                                          0, 0, 0);
  
#endif
  
  return MOBLE_RESULT_SUCCESS;
 800d638:	2300      	movs	r3, #0
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	371c      	adds	r7, #28
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd90      	pop	{r4, r7, pc}
 800d642:	bf00      	nop
 800d644:	0802e208 	.word	0x0802e208
 800d648:	0802aa08 	.word	0x0802aa08
 800d64c:	200046e4 	.word	0x200046e4
 800d650:	200046c4 	.word	0x200046c4
 800d654:	200046ec 	.word	0x200046ec
 800d658:	200046f0 	.word	0x200046f0
 800d65c:	0802dfb8 	.word	0x0802dfb8

0800d660 <Generic_OnOff_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_OnOff_Status(MOBLEUINT8* pOnOff_status, 
                                  MOBLEUINT32 *plength,
                                  MODEL_MessageHeader_t *pmsgParam) 
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	60f8      	str	r0, [r7, #12]
 800d668:	60b9      	str	r1, [r7, #8]
 800d66a:	607a      	str	r2, [r7, #4]
  Present OnOff The present value of the Generic OnOff state. 
  Target OnOff The target value of the Generic OnOff state (optional).
  Remaining Time is transition time. 
  */
  
  TRACE_M(TF_GENERIC_M, ">>>\r\n");
 800d66c:	2100      	movs	r1, #0
 800d66e:	483f      	ldr	r0, [pc, #252]	@ (800d76c <Generic_OnOff_Status+0x10c>)
 800d670:	f7ff fcf6 	bl	800d060 <TraceHeader>
 800d674:	483e      	ldr	r0, [pc, #248]	@ (800d770 <Generic_OnOff_Status+0x110>)
 800d676:	f019 f975 	bl	8026964 <puts>
  TRACE_M(TF_SERIAL_CTRL,"#8201! \n\r");
 800d67a:	2100      	movs	r1, #0
 800d67c:	483b      	ldr	r0, [pc, #236]	@ (800d76c <Generic_OnOff_Status+0x10c>)
 800d67e:	f7ff fcef 	bl	800d060 <TraceHeader>
 800d682:	483c      	ldr	r0, [pc, #240]	@ (800d774 <Generic_OnOff_Status+0x114>)
 800d684:	f019 f906 	bl	8026894 <iprintf>
  /* 
  Default value of GenericOptionalParam=0, 
  GenericOptionalParam set equal to 1 in Generic_OnOff_Set for Generic_OnOff_Status 
  */
  if((Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam == 1) || (Generic_TimeParam[pmsgParam->elementIndex].StepValue != 0))
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	4619      	mov	r1, r3
 800d68e:	4a3a      	ldr	r2, [pc, #232]	@ (800d778 <Generic_OnOff_Status+0x118>)
 800d690:	460b      	mov	r3, r1
 800d692:	005b      	lsls	r3, r3, #1
 800d694:	440b      	add	r3, r1
 800d696:	4413      	add	r3, r2
 800d698:	3301      	adds	r3, #1
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d00c      	beq.n	800d6ba <Generic_OnOff_Status+0x5a>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	4a35      	ldr	r2, [pc, #212]	@ (800d77c <Generic_OnOff_Status+0x11c>)
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	440b      	add	r3, r1
 800d6ae:	005b      	lsls	r3, r3, #1
 800d6b0:	4413      	add	r3, r2
 800d6b2:	f993 3000 	ldrsb.w	r3, [r3]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d033      	beq.n	800d722 <Generic_OnOff_Status+0xc2>
  {   
    /*  
    When optional parameter received present value,targert value, remaining time be sent in status message
    length of received data is equal to 4B
    */
    TRACE_M(TF_GENERIC_M, "Generic_OnOff_Status sent with Transition \r\n"); 
 800d6ba:	2100      	movs	r1, #0
 800d6bc:	482b      	ldr	r0, [pc, #172]	@ (800d76c <Generic_OnOff_Status+0x10c>)
 800d6be:	f7ff fccf 	bl	800d060 <TraceHeader>
 800d6c2:	482f      	ldr	r0, [pc, #188]	@ (800d780 <Generic_OnOff_Status+0x120>)
 800d6c4:	f019 f94e 	bl	8026964 <puts>

    *(pOnOff_status+1) = Generic_OnOffStatus[pmsgParam->elementIndex].Target_OnOff;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4a2d      	ldr	r2, [pc, #180]	@ (800d784 <Generic_OnOff_Status+0x124>)
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	005b      	lsls	r3, r3, #1
 800d6d4:	440b      	add	r3, r1
 800d6d6:	005b      	lsls	r3, r3, #1
 800d6d8:	4413      	add	r3, r2
 800d6da:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	b2d2      	uxtb	r2, r2
 800d6e6:	701a      	strb	r2, [r3, #0]
    *(pOnOff_status+2) = Generic_OnOffStatus[pmsgParam->elementIndex].RemainingTime;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	1c9a      	adds	r2, r3, #2
 800d6f2:	4924      	ldr	r1, [pc, #144]	@ (800d784 <Generic_OnOff_Status+0x124>)
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	4403      	add	r3, r0
 800d6fa:	005b      	lsls	r3, r3, #1
 800d6fc:	440b      	add	r3, r1
 800d6fe:	3305      	adds	r3, #5
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	7013      	strb	r3, [r2, #0]
       *plength = 3; 
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	2203      	movs	r2, #3
 800d708:	601a      	str	r2, [r3, #0]
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 0;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	4619      	mov	r1, r3
 800d710:	4a19      	ldr	r2, [pc, #100]	@ (800d778 <Generic_OnOff_Status+0x118>)
 800d712:	460b      	mov	r3, r1
 800d714:	005b      	lsls	r3, r3, #1
 800d716:	440b      	add	r3, r1
 800d718:	4413      	add	r3, r2
 800d71a:	3301      	adds	r3, #1
 800d71c:	2200      	movs	r2, #0
 800d71e:	701a      	strb	r2, [r3, #0]
 800d720:	e013      	b.n	800d74a <Generic_OnOff_Status+0xea>
  else
  { /* When no optional parameter received, target value will
       be sent in status message.
       length of received data is equal to 2B
    */
    TRACE_M(TF_GENERIC_M, "Generic_OnOff_Status sent without Transition \r\n"); 
 800d722:	2100      	movs	r1, #0
 800d724:	4811      	ldr	r0, [pc, #68]	@ (800d76c <Generic_OnOff_Status+0x10c>)
 800d726:	f7ff fc9b 	bl	800d060 <TraceHeader>
 800d72a:	4817      	ldr	r0, [pc, #92]	@ (800d788 <Generic_OnOff_Status+0x128>)
 800d72c:	f019 f91a 	bl	8026964 <puts>
    TRACE_M(TF_GENERIC_M, "%d \r\n",*pOnOff_status);
 800d730:	2100      	movs	r1, #0
 800d732:	480e      	ldr	r0, [pc, #56]	@ (800d76c <Generic_OnOff_Status+0x10c>)
 800d734:	f7ff fc94 	bl	800d060 <TraceHeader>
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	4619      	mov	r1, r3
 800d73e:	4813      	ldr	r0, [pc, #76]	@ (800d78c <Generic_OnOff_Status+0x12c>)
 800d740:	f019 f8a8 	bl	8026894 <iprintf>
    *plength = 1;
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	2201      	movs	r2, #1
 800d748:	601a      	str	r2, [r3, #0]
  }
  *pOnOff_status = Generic_OnOffStatus[pmsgParam->elementIndex].Present_OnOff_State; 
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	4619      	mov	r1, r3
 800d750:	4a0c      	ldr	r2, [pc, #48]	@ (800d784 <Generic_OnOff_Status+0x124>)
 800d752:	460b      	mov	r3, r1
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	440b      	add	r3, r1
 800d758:	005b      	lsls	r3, r3, #1
 800d75a:	4413      	add	r3, r2
 800d75c:	781a      	ldrb	r2, [r3, #0]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS;
 800d762:	2300      	movs	r3, #0
}
 800d764:	4618      	mov	r0, r3
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	0802e21c 	.word	0x0802e21c
 800d770:	0802aa30 	.word	0x0802aa30
 800d774:	0802aa38 	.word	0x0802aa38
 800d778:	200046ec 	.word	0x200046ec
 800d77c:	200046cc 	.word	0x200046cc
 800d780:	0802aa44 	.word	0x0802aa44
 800d784:	200046e4 	.word	0x200046e4
 800d788:	0802aa70 	.word	0x0802aa70
 800d78c:	0802aaa0 	.word	0x0802aaa0

0800d790 <Generic_Level_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Level_Set(const MOBLEUINT8* plevel_param, 
                               MOBLEUINT32 length,
                               MODEL_MessageHeader_t *pmsgParam) 
{
 800d790:	b5b0      	push	{r4, r5, r7, lr}
 800d792:	b088      	sub	sp, #32
 800d794:	af02      	add	r7, sp, #8
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	607a      	str	r2, [r7, #4]
  TID :  1B Transaction Identifier
  Transition Time: 1B Format as defined in Section 3.1.3. (Optional)
  Delay:1B Message execution delay in 5 milliseconds steps (C.1)
  */
  
  TRACE_M(TF_GENERIC_M, "Generic_Level_Set callback received \r\n");
 800d79c:	2100      	movs	r1, #0
 800d79e:	4878      	ldr	r0, [pc, #480]	@ (800d980 <Generic_Level_Set+0x1f0>)
 800d7a0:	f7ff fc5e 	bl	800d060 <TraceHeader>
 800d7a4:	4877      	ldr	r0, [pc, #476]	@ (800d984 <Generic_Level_Set+0x1f4>)
 800d7a6:	f019 f8dd 	bl	8026964 <puts>
  
  Generic_LevelParam_t Generic_LevelParam;
  MOBLEINT16 setValue;
  
  Generic_LevelParam.TargetLevel = CopyU8LittleEndienArrayToU16word((MOBLEUINT8*)plevel_param);
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f7ff fe1d 	bl	800d3ea <CopyU8LittleEndienArrayToU16word>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	b21b      	sxth	r3, r3
 800d7b4:	823b      	strh	r3, [r7, #16]
  Generic_LevelParam.Generic_TID = plevel_param[2]; 
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	3302      	adds	r3, #2
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	74bb      	strb	r3, [r7, #18]
  
  setValue =  Generic_LevelParam.TargetLevel;
 800d7be:	8a3b      	ldrh	r3, [r7, #16]
 800d7c0:	82fb      	strh	r3, [r7, #22]
  /* Check for Optional Parameters. 
     length > 3  plevel_param has level,TID,Transition Time, Delay      
     length < 3  plevel_param has level,TID
  */ 
  if((length > 3) && (plevel_param[3] !=0))
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	2b03      	cmp	r3, #3
 800d7c6:	d970      	bls.n	800d8aa <Generic_Level_Set+0x11a>
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	3303      	adds	r3, #3
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d06b      	beq.n	800d8aa <Generic_Level_Set+0x11a>
  {
     Generic_LevelParam.Transition_Time = plevel_param[3];
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	3303      	adds	r3, #3
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	74fb      	strb	r3, [r7, #19]
     Generic_LevelParam.Delay_Time = plevel_param[4];
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	3304      	adds	r3, #4
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	753b      	strb	r3, [r7, #20]
     /* Copy the data into status message which needs to be update in 
       application message.
     */
    Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = setValue;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	4a67      	ldr	r2, [pc, #412]	@ (800d988 <Generic_Level_Set+0x1f8>)
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	005b      	lsls	r3, r3, #1
 800d7ee:	440b      	add	r3, r1
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	4413      	add	r3, r2
 800d7f4:	3302      	adds	r3, #2
 800d7f6:	8afa      	ldrh	r2, [r7, #22]
 800d7f8:	801a      	strh	r2, [r3, #0]
    Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime = Generic_LevelParam.Transition_Time;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	4619      	mov	r1, r3
 800d800:	7cf8      	ldrb	r0, [r7, #19]
 800d802:	4a61      	ldr	r2, [pc, #388]	@ (800d988 <Generic_Level_Set+0x1f8>)
 800d804:	460b      	mov	r3, r1
 800d806:	005b      	lsls	r3, r3, #1
 800d808:	440b      	add	r3, r1
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	4413      	add	r3, r2
 800d80e:	3304      	adds	r3, #4
 800d810:	4602      	mov	r2, r0
 800d812:	701a      	strb	r2, [r3, #0]
    /* copy status parameters in Temporary parameters for transition 
       process.
    */
    Generic_TemporaryStatus[pmsgParam->elementIndex].TargetValue16 = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	4618      	mov	r0, r3
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	4619      	mov	r1, r3
 800d820:	4a59      	ldr	r2, [pc, #356]	@ (800d988 <Generic_Level_Set+0x1f8>)
 800d822:	4603      	mov	r3, r0
 800d824:	005b      	lsls	r3, r3, #1
 800d826:	4403      	add	r3, r0
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	4413      	add	r3, r2
 800d82c:	3302      	adds	r3, #2
 800d82e:	f9b3 0000 	ldrsh.w	r0, [r3]
 800d832:	4a56      	ldr	r2, [pc, #344]	@ (800d98c <Generic_Level_Set+0x1fc>)
 800d834:	460b      	mov	r3, r1
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	440b      	add	r3, r1
 800d83a:	4413      	add	r3, r2
 800d83c:	4602      	mov	r2, r0
 800d83e:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	4618      	mov	r0, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	4619      	mov	r1, r3
 800d84e:	4a4e      	ldr	r2, [pc, #312]	@ (800d988 <Generic_Level_Set+0x1f8>)
 800d850:	4603      	mov	r3, r0
 800d852:	005b      	lsls	r3, r3, #1
 800d854:	4403      	add	r3, r0
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	4413      	add	r3, r2
 800d85a:	3304      	adds	r3, #4
 800d85c:	7818      	ldrb	r0, [r3, #0]
 800d85e:	4a4b      	ldr	r2, [pc, #300]	@ (800d98c <Generic_Level_Set+0x1fc>)
 800d860:	460b      	mov	r3, r1
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	440b      	add	r3, r1
 800d866:	4413      	add	r3, r2
 800d868:	4602      	mov	r2, r0
 800d86a:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
      step size for transition state machine
    */
    Generic_GetStepValue(plevel_param[3], pmsgParam->elementIndex); 
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	3303      	adds	r3, #3
 800d870:	781a      	ldrb	r2, [r3, #0]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	4619      	mov	r1, r3
 800d878:	4610      	mov	r0, r2
 800d87a:	f001 f827 	bl	800e8cc <Generic_GetStepValue>
    /*option parameter flag, enable to sent all required parameter in status.*/
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	4619      	mov	r1, r3
 800d884:	4a42      	ldr	r2, [pc, #264]	@ (800d990 <Generic_Level_Set+0x200>)
 800d886:	460b      	mov	r3, r1
 800d888:	005b      	lsls	r3, r3, #1
 800d88a:	440b      	add	r3, r1
 800d88c:	4413      	add	r3, r2
 800d88e:	3301      	adds	r3, #1
 800d890:	2201      	movs	r2, #1
 800d892:	701a      	strb	r2, [r3, #0]
    /*transition process enable flag. */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_LEVEL_TRANSITION_START;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	4619      	mov	r1, r3
 800d89a:	4a3d      	ldr	r2, [pc, #244]	@ (800d990 <Generic_Level_Set+0x200>)
 800d89c:	460b      	mov	r3, r1
 800d89e:	005b      	lsls	r3, r3, #1
 800d8a0:	440b      	add	r3, r1
 800d8a2:	4413      	add	r3, r2
 800d8a4:	2202      	movs	r2, #2
 800d8a6:	701a      	strb	r2, [r3, #0]
 800d8a8:	e01a      	b.n	800d8e0 <Generic_Level_Set+0x150>

#else
     /* When no optional parameter received, target value will
         be set as present value in application.
     */
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f001 fb24 	bl	800eefc <Generic_TransitionParameterReset>
    Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16= setValue;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	4a33      	ldr	r2, [pc, #204]	@ (800d988 <Generic_Level_Set+0x1f8>)
 800d8bc:	460b      	mov	r3, r1
 800d8be:	005b      	lsls	r3, r3, #1
 800d8c0:	440b      	add	r3, r1
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	4413      	add	r3, r2
 800d8c6:	8afa      	ldrh	r2, [r7, #22]
 800d8c8:	801a      	strh	r2, [r3, #0]
    Generic_TimeParam[pmsgParam->elementIndex].StepValue = 0;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	4a30      	ldr	r2, [pc, #192]	@ (800d994 <Generic_Level_Set+0x204>)
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	440b      	add	r3, r1
 800d8d8:	005b      	lsls	r3, r3, #1
 800d8da:	4413      	add	r3, r2
 800d8dc:	2200      	movs	r2, #0
 800d8de:	701a      	strb	r2, [r3, #0]
#endif    
  }  
  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	4a26      	ldr	r2, [pc, #152]	@ (800d988 <Generic_Level_Set+0x1f8>)
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	005b      	lsls	r3, r3, #1
 800d8f2:	4403      	add	r3, r0
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	4413      	add	r3, r2
 800d8f8:	f9b3 0000 	ldrsh.w	r0, [r3]
 800d8fc:	4a22      	ldr	r2, [pc, #136]	@ (800d988 <Generic_Level_Set+0x1f8>)
 800d8fe:	460b      	mov	r3, r1
 800d900:	005b      	lsls	r3, r3, #1
 800d902:	440b      	add	r3, r1
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	4413      	add	r3, r2
 800d908:	3306      	adds	r3, #6
 800d90a:	4602      	mov	r2, r0
 800d90c:	801a      	strh	r2, [r3, #0]
 
  /* Application Callback */
  (GenericAppli_cb.Level_Set_cb)(&Generic_LevelStatus[pmsgParam->elementIndex], 0, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800d90e:	4b22      	ldr	r3, [pc, #136]	@ (800d998 <Generic_Level_Set+0x208>)
 800d910:	689c      	ldr	r4, [r3, #8]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	461a      	mov	r2, r3
 800d918:	4613      	mov	r3, r2
 800d91a:	005b      	lsls	r3, r3, #1
 800d91c:	4413      	add	r3, r2
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	4a19      	ldr	r2, [pc, #100]	@ (800d988 <Generic_Level_Set+0x1f8>)
 800d922:	1898      	adds	r0, r3, r2
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	88da      	ldrh	r2, [r3, #6]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	2100      	movs	r1, #0
 800d92e:	47a0      	blx	r4
#ifdef ENABLE_MODEL_BINDING       
  /* Binding of Generic level with light lightnes actual */
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET, pmsgParam->elementIndex,
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	461a      	mov	r2, r3
 800d936:	4613      	mov	r3, r2
 800d938:	005b      	lsls	r3, r3, #1
 800d93a:	4413      	add	r3, r2
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	4a12      	ldr	r2, [pc, #72]	@ (800d988 <Generic_Level_Set+0x1f8>)
 800d940:	1898      	adds	r0, r3, r2
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	781a      	ldrb	r2, [r3, #0]
        Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	461c      	mov	r4, r3
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET, pmsgParam->elementIndex,
 800d94c:	4910      	ldr	r1, [pc, #64]	@ (800d990 <Generic_Level_Set+0x200>)
 800d94e:	4623      	mov	r3, r4
 800d950:	005b      	lsls	r3, r3, #1
 800d952:	4423      	add	r3, r4
 800d954:	440b      	add	r3, r1
 800d956:	7819      	ldrb	r1, [r3, #0]
        Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	461d      	mov	r5, r3
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET, pmsgParam->elementIndex,
 800d95e:	4c0c      	ldr	r4, [pc, #48]	@ (800d990 <Generic_Level_Set+0x200>)
 800d960:	462b      	mov	r3, r5
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	442b      	add	r3, r5
 800d966:	4423      	add	r3, r4
 800d968:	3302      	adds	r3, #2
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	460b      	mov	r3, r1
 800d970:	2101      	movs	r1, #1
 800d972:	f001 fcf9 	bl	800f368 <GenericLevel_LightBinding>
#endif 
        
  return MOBLE_RESULT_SUCCESS;
 800d976:	2300      	movs	r3, #0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3718      	adds	r7, #24
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bdb0      	pop	{r4, r5, r7, pc}
 800d980:	0802e234 	.word	0x0802e234
 800d984:	0802aaa8 	.word	0x0802aaa8
 800d988:	200046d8 	.word	0x200046d8
 800d98c:	200046c4 	.word	0x200046c4
 800d990:	200046ec 	.word	0x200046ec
 800d994:	200046cc 	.word	0x200046cc
 800d998:	0802dfb8 	.word	0x0802dfb8

0800d99c <Generic_Delta_Set>:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & AppKey Offset
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Delta_Set(const MOBLEUINT8* plevel_param, MOBLEUINT32 length,\
                               MODEL_MessageHeader_t *pmsgParam) 
{
 800d99c:	b590      	push	{r4, r7, lr}
 800d99e:	b089      	sub	sp, #36	@ 0x24
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]
  TID:   1B Transaction Identifier
  Transition Time: 1B Format as defined in Section 3.1.3. (Optional)
  Delay: 1B Message execution delay in 5 milliseconds steps (C.1)
  */
  
  TRACE_M(TF_GENERIC_M, "Generic_Delta_Set callback received \r\n");
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	4895      	ldr	r0, [pc, #596]	@ (800dc00 <Generic_Delta_Set+0x264>)
 800d9ac:	f7ff fb58 	bl	800d060 <TraceHeader>
 800d9b0:	4894      	ldr	r0, [pc, #592]	@ (800dc04 <Generic_Delta_Set+0x268>)
 800d9b2:	f018 ffd7 	bl	8026964 <puts>
  
  Generic_DeltaLevelParam_t Generic_DeltaLevelParam ;
  MOBLEUINT32 delta;
  
  /* Copy the 4Bytes data to local variable */
  delta = (plevel_param[3] << 24);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	3303      	adds	r3, #3
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	061b      	lsls	r3, r3, #24
 800d9be:	61fb      	str	r3, [r7, #28]
  delta |= (plevel_param[2] << 16);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	3302      	adds	r3, #2
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	041b      	lsls	r3, r3, #16
 800d9c8:	69fa      	ldr	r2, [r7, #28]
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	61fb      	str	r3, [r7, #28]
  delta |= (plevel_param[1] << 8);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	021b      	lsls	r3, r3, #8
 800d9d6:	69fa      	ldr	r2, [r7, #28]
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	61fb      	str	r3, [r7, #28]
  delta |= (plevel_param[0]);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	61fb      	str	r3, [r7, #28]
  Generic_DeltaLevelParam.TargetDeltaLevel32 = delta;
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	617b      	str	r3, [r7, #20]
  
  TRACE_M(TF_GENERIC_M,"Generic delta value %.2lx \r\n",
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	4884      	ldr	r0, [pc, #528]	@ (800dc00 <Generic_Delta_Set+0x264>)
 800d9f0:	f7ff fb36 	bl	800d060 <TraceHeader>
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	4883      	ldr	r0, [pc, #524]	@ (800dc08 <Generic_Delta_Set+0x26c>)
 800d9fa:	f018 ff4b 	bl	8026894 <iprintf>
          Generic_DeltaLevelParam.TargetDeltaLevel32);
  
  Generic_DeltaLevelParam.Generic_TID = plevel_param[4];
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	3304      	adds	r3, #4
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	763b      	strb	r3, [r7, #24]
  /* 
     Check for Optional Parameters 
     length > 5  Delata level,TID, Trasition Time(optional),Delay(optional)
     length < 5  Delta level,TID
  */    
  if((length > 5) && (plevel_param[5] !=0))
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	2b05      	cmp	r3, #5
 800da0a:	f240 8082 	bls.w	800db12 <Generic_Delta_Set+0x176>
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	3305      	adds	r3, #5
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d07c      	beq.n	800db12 <Generic_Delta_Set+0x176>
  {
    Generic_DeltaLevelParam.Transition_Time = plevel_param[5];
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	3305      	adds	r3, #5
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	767b      	strb	r3, [r7, #25]
    Generic_DeltaLevelParam.Delay_Time = plevel_param[6];
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	3306      	adds	r3, #6
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	76bb      	strb	r3, [r7, #26]
    /* Copy the data into status message which needs to be update in 
     application message.
    */ 
    Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 + 
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	4619      	mov	r1, r3
 800da2e:	4a77      	ldr	r2, [pc, #476]	@ (800dc0c <Generic_Delta_Set+0x270>)
 800da30:	460b      	mov	r3, r1
 800da32:	005b      	lsls	r3, r3, #1
 800da34:	440b      	add	r3, r1
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	4413      	add	r3, r2
 800da3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da3e:	b29a      	uxth	r2, r3
                                                Generic_DeltaLevelParam.TargetDeltaLevel32;
 800da40:	697b      	ldr	r3, [r7, #20]
    Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 + 
 800da42:	b29b      	uxth	r3, r3
 800da44:	4413      	add	r3, r2
 800da46:	b29a      	uxth	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	4619      	mov	r1, r3
 800da4e:	b210      	sxth	r0, r2
 800da50:	4a6e      	ldr	r2, [pc, #440]	@ (800dc0c <Generic_Delta_Set+0x270>)
 800da52:	460b      	mov	r3, r1
 800da54:	005b      	lsls	r3, r3, #1
 800da56:	440b      	add	r3, r1
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	4413      	add	r3, r2
 800da5c:	3302      	adds	r3, #2
 800da5e:	4602      	mov	r2, r0
 800da60:	801a      	strh	r2, [r3, #0]
    Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime = Generic_DeltaLevelParam.Transition_Time;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	4619      	mov	r1, r3
 800da68:	7e78      	ldrb	r0, [r7, #25]
 800da6a:	4a68      	ldr	r2, [pc, #416]	@ (800dc0c <Generic_Delta_Set+0x270>)
 800da6c:	460b      	mov	r3, r1
 800da6e:	005b      	lsls	r3, r3, #1
 800da70:	440b      	add	r3, r1
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	4413      	add	r3, r2
 800da76:	3304      	adds	r3, #4
 800da78:	4602      	mov	r2, r0
 800da7a:	701a      	strb	r2, [r3, #0]
       
    /* copy status parameters in Temporary parameters for transition 
     process.
    */
    Generic_TemporaryStatus[pmsgParam->elementIndex].TargetValue16 = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	4618      	mov	r0, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	4619      	mov	r1, r3
 800da88:	4a60      	ldr	r2, [pc, #384]	@ (800dc0c <Generic_Delta_Set+0x270>)
 800da8a:	4603      	mov	r3, r0
 800da8c:	005b      	lsls	r3, r3, #1
 800da8e:	4403      	add	r3, r0
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	4413      	add	r3, r2
 800da94:	3302      	adds	r3, #2
 800da96:	f9b3 0000 	ldrsh.w	r0, [r3]
 800da9a:	4a5d      	ldr	r2, [pc, #372]	@ (800dc10 <Generic_Delta_Set+0x274>)
 800da9c:	460b      	mov	r3, r1
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	440b      	add	r3, r1
 800daa2:	4413      	add	r3, r2
 800daa4:	4602      	mov	r2, r0
 800daa6:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	4618      	mov	r0, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	4619      	mov	r1, r3
 800dab6:	4a55      	ldr	r2, [pc, #340]	@ (800dc0c <Generic_Delta_Set+0x270>)
 800dab8:	4603      	mov	r3, r0
 800daba:	005b      	lsls	r3, r3, #1
 800dabc:	4403      	add	r3, r0
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	4413      	add	r3, r2
 800dac2:	3304      	adds	r3, #4
 800dac4:	7818      	ldrb	r0, [r3, #0]
 800dac6:	4a52      	ldr	r2, [pc, #328]	@ (800dc10 <Generic_Delta_Set+0x274>)
 800dac8:	460b      	mov	r3, r1
 800daca:	009b      	lsls	r3, r3, #2
 800dacc:	440b      	add	r3, r1
 800dace:	4413      	add	r3, r2
 800dad0:	4602      	mov	r2, r0
 800dad2:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
    step size for transition state machine.
    */
    Generic_GetStepValue(plevel_param[5], pmsgParam->elementIndex);   
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	3305      	adds	r3, #5
 800dad8:	781a      	ldrb	r2, [r3, #0]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	4619      	mov	r1, r3
 800dae0:	4610      	mov	r0, r2
 800dae2:	f000 fef3 	bl	800e8cc <Generic_GetStepValue>
       
    /*option parameter flag, enable to sent all required parameter in status.*/ 
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	4619      	mov	r1, r3
 800daec:	4a49      	ldr	r2, [pc, #292]	@ (800dc14 <Generic_Delta_Set+0x278>)
 800daee:	460b      	mov	r3, r1
 800daf0:	005b      	lsls	r3, r3, #1
 800daf2:	440b      	add	r3, r1
 800daf4:	4413      	add	r3, r2
 800daf6:	3301      	adds	r3, #1
 800daf8:	2201      	movs	r2, #1
 800dafa:	701a      	strb	r2, [r3, #0]
       
    /*transition process enable flag. */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_LEVEL_TRANSITION_START;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	4619      	mov	r1, r3
 800db02:	4a44      	ldr	r2, [pc, #272]	@ (800dc14 <Generic_Delta_Set+0x278>)
 800db04:	460b      	mov	r3, r1
 800db06:	005b      	lsls	r3, r3, #1
 800db08:	440b      	add	r3, r1
 800db0a:	4413      	add	r3, r2
 800db0c:	2202      	movs	r2, #2
 800db0e:	701a      	strb	r2, [r3, #0]
 800db10:	e0a3      	b.n	800dc5a <Generic_Delta_Set+0x2be>
  }
  else
  {   
		
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	4618      	mov	r0, r3
 800db18:	f001 f9f0 	bl	800eefc <Generic_TransitionParameterReset>
    
    if(Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID == Generic_DeltaLevelParam.Generic_TID)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	4619      	mov	r1, r3
 800db22:	4a3a      	ldr	r2, [pc, #232]	@ (800dc0c <Generic_Delta_Set+0x270>)
 800db24:	460b      	mov	r3, r1
 800db26:	005b      	lsls	r3, r3, #1
 800db28:	440b      	add	r3, r1
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4413      	add	r3, r2
 800db2e:	3305      	adds	r3, #5
 800db30:	781a      	ldrb	r2, [r3, #0]
 800db32:	7e3b      	ldrb	r3, [r7, #24]
 800db34:	429a      	cmp	r2, r3
 800db36:	d16f      	bne.n	800dc18 <Generic_Delta_Set+0x27c>
    {
        if(Generic_DeltaLevelParam.TargetDeltaLevel32 > Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level)
 800db38:	697a      	ldr	r2, [r7, #20]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	4618      	mov	r0, r3
 800db40:	4932      	ldr	r1, [pc, #200]	@ (800dc0c <Generic_Delta_Set+0x270>)
 800db42:	4603      	mov	r3, r0
 800db44:	005b      	lsls	r3, r3, #1
 800db46:	4403      	add	r3, r0
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	440b      	add	r3, r1
 800db4c:	3308      	adds	r3, #8
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	429a      	cmp	r2, r3
 800db52:	dd2a      	ble.n	800dbaa <Generic_Delta_Set+0x20e>
      {
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 += (Generic_DeltaLevelParam.TargetDeltaLevel32  
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	4619      	mov	r1, r3
 800db5a:	4a2c      	ldr	r2, [pc, #176]	@ (800dc0c <Generic_Delta_Set+0x270>)
 800db5c:	460b      	mov	r3, r1
 800db5e:	005b      	lsls	r3, r3, #1
 800db60:	440b      	add	r3, r1
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	4413      	add	r3, r2
 800db66:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	697b      	ldr	r3, [r7, #20]
          - Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level);     
 800db6e:	b299      	uxth	r1, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	461c      	mov	r4, r3
 800db76:	4825      	ldr	r0, [pc, #148]	@ (800dc0c <Generic_Delta_Set+0x270>)
 800db78:	4623      	mov	r3, r4
 800db7a:	005b      	lsls	r3, r3, #1
 800db7c:	4423      	add	r3, r4
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	4403      	add	r3, r0
 800db82:	3308      	adds	r3, #8
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	b29b      	uxth	r3, r3
 800db88:	1acb      	subs	r3, r1, r3
 800db8a:	b29b      	uxth	r3, r3
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 += (Generic_DeltaLevelParam.TargetDeltaLevel32  
 800db8c:	4413      	add	r3, r2
 800db8e:	b29a      	uxth	r2, r3
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	4619      	mov	r1, r3
 800db96:	b210      	sxth	r0, r2
 800db98:	4a1c      	ldr	r2, [pc, #112]	@ (800dc0c <Generic_Delta_Set+0x270>)
 800db9a:	460b      	mov	r3, r1
 800db9c:	005b      	lsls	r3, r3, #1
 800db9e:	440b      	add	r3, r1
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	4413      	add	r3, r2
 800dba4:	4602      	mov	r2, r0
 800dba6:	801a      	strh	r2, [r3, #0]
 800dba8:	e052      	b.n	800dc50 <Generic_Delta_Set+0x2b4>
      }
      else
      {
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 -= (Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	4619      	mov	r1, r3
 800dbb0:	4a16      	ldr	r2, [pc, #88]	@ (800dc0c <Generic_Delta_Set+0x270>)
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	005b      	lsls	r3, r3, #1
 800dbb6:	440b      	add	r3, r1
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	4413      	add	r3, r2
 800dbbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbc0:	b29a      	uxth	r2, r3
            -Generic_DeltaLevelParam.TargetDeltaLevel32) ;           
 800dbc2:	697b      	ldr	r3, [r7, #20]
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 -= (Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level
 800dbc4:	b299      	uxth	r1, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	461c      	mov	r4, r3
 800dbcc:	480f      	ldr	r0, [pc, #60]	@ (800dc0c <Generic_Delta_Set+0x270>)
 800dbce:	4623      	mov	r3, r4
 800dbd0:	005b      	lsls	r3, r3, #1
 800dbd2:	4423      	add	r3, r4
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	4403      	add	r3, r0
 800dbd8:	3308      	adds	r3, #8
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	b29b      	uxth	r3, r3
 800dbde:	1acb      	subs	r3, r1, r3
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	4413      	add	r3, r2
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	4619      	mov	r1, r3
 800dbec:	b210      	sxth	r0, r2
 800dbee:	4a07      	ldr	r2, [pc, #28]	@ (800dc0c <Generic_Delta_Set+0x270>)
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	005b      	lsls	r3, r3, #1
 800dbf4:	440b      	add	r3, r1
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	4413      	add	r3, r2
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	801a      	strh	r2, [r3, #0]
 800dbfe:	e027      	b.n	800dc50 <Generic_Delta_Set+0x2b4>
 800dc00:	0802e248 	.word	0x0802e248
 800dc04:	0802aad0 	.word	0x0802aad0
 800dc08:	0802aaf8 	.word	0x0802aaf8
 800dc0c:	200046d8 	.word	0x200046d8
 800dc10:	200046c4 	.word	0x200046c4
 800dc14:	200046ec 	.word	0x200046ec
      }       
    }
    else
    {    /*If TID value is different from the last TID, then new transaction has been started*/
        Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 += Generic_DeltaLevelParam.TargetDeltaLevel32;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	4a30      	ldr	r2, [pc, #192]	@ (800dce0 <Generic_Delta_Set+0x344>)
 800dc20:	460b      	mov	r3, r1
 800dc22:	005b      	lsls	r3, r3, #1
 800dc24:	440b      	add	r3, r1
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4413      	add	r3, r2
 800dc2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc2e:	b29a      	uxth	r2, r3
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	4413      	add	r3, r2
 800dc36:	b29a      	uxth	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	b210      	sxth	r0, r2
 800dc40:	4a27      	ldr	r2, [pc, #156]	@ (800dce0 <Generic_Delta_Set+0x344>)
 800dc42:	460b      	mov	r3, r1
 800dc44:	005b      	lsls	r3, r3, #1
 800dc46:	440b      	add	r3, r1
 800dc48:	009b      	lsls	r3, r3, #2
 800dc4a:	4413      	add	r3, r2
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	801a      	strh	r2, [r3, #0]
    
#else
    /* When no optional parameter received, target value will
    be set as present value in application.
    */
	Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f001 f951 	bl	800eefc <Generic_TransitionParameterReset>
#endif   
  }
  
  TRACE_M(TF_GENERIC_M, "Generic Level value %.2x \r\n" ,Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16);
 800dc5a:	2100      	movs	r1, #0
 800dc5c:	4821      	ldr	r0, [pc, #132]	@ (800dce4 <Generic_Delta_Set+0x348>)
 800dc5e:	f7ff f9ff 	bl	800d060 <TraceHeader>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	4619      	mov	r1, r3
 800dc68:	4a1d      	ldr	r2, [pc, #116]	@ (800dce0 <Generic_Delta_Set+0x344>)
 800dc6a:	460b      	mov	r3, r1
 800dc6c:	005b      	lsls	r3, r3, #1
 800dc6e:	440b      	add	r3, r1
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	4413      	add	r3, r2
 800dc74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc78:	4619      	mov	r1, r3
 800dc7a:	481b      	ldr	r0, [pc, #108]	@ (800dce8 <Generic_Delta_Set+0x34c>)
 800dc7c:	f018 fe0a 	bl	8026894 <iprintf>
  
  Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level = Generic_DeltaLevelParam.TargetDeltaLevel32;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	4618      	mov	r0, r3
 800dc86:	697a      	ldr	r2, [r7, #20]
 800dc88:	4915      	ldr	r1, [pc, #84]	@ (800dce0 <Generic_Delta_Set+0x344>)
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	005b      	lsls	r3, r3, #1
 800dc8e:	4403      	add	r3, r0
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	440b      	add	r3, r1
 800dc94:	3308      	adds	r3, #8
 800dc96:	601a      	str	r2, [r3, #0]
  Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID = Generic_DeltaLevelParam.Generic_TID; 
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	7e38      	ldrb	r0, [r7, #24]
 800dca0:	4a0f      	ldr	r2, [pc, #60]	@ (800dce0 <Generic_Delta_Set+0x344>)
 800dca2:	460b      	mov	r3, r1
 800dca4:	005b      	lsls	r3, r3, #1
 800dca6:	440b      	add	r3, r1
 800dca8:	009b      	lsls	r3, r3, #2
 800dcaa:	4413      	add	r3, r2
 800dcac:	3305      	adds	r3, #5
 800dcae:	4602      	mov	r2, r0
 800dcb0:	701a      	strb	r2, [r3, #0]
      
  /* Application Callback */
  (GenericAppli_cb.LevelDelta_Set_cb)(&Generic_LevelStatus[pmsgParam->elementIndex], 0, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800dcb2:	4b0e      	ldr	r3, [pc, #56]	@ (800dcec <Generic_Delta_Set+0x350>)
 800dcb4:	68dc      	ldr	r4, [r3, #12]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	461a      	mov	r2, r3
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	005b      	lsls	r3, r3, #1
 800dcc0:	4413      	add	r3, r2
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	4a06      	ldr	r2, [pc, #24]	@ (800dce0 <Generic_Delta_Set+0x344>)
 800dcc6:	1898      	adds	r0, r3, r2
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	88da      	ldrh	r2, [r3, #6]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	2100      	movs	r1, #0
 800dcd2:	47a0      	blx	r4
  /* Binding of Generic level with light lightnes actual */
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET,pmsgParam->elementIndex,
         Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
#endif  
#endif  
  return MOBLE_RESULT_SUCCESS;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3724      	adds	r7, #36	@ 0x24
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd90      	pop	{r4, r7, pc}
 800dcde:	bf00      	nop
 800dce0:	200046d8 	.word	0x200046d8
 800dce4:	0802e248 	.word	0x0802e248
 800dce8:	0802ab18 	.word	0x0802ab18
 800dcec:	0802dfb8 	.word	0x0802dfb8

0800dcf0 <Generic_Move_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Move_Set(const MOBLEUINT8* plevel_param, 
                              MOBLEUINT32 length,
                              MODEL_MessageHeader_t *pmsgParam) 
{
 800dcf0:	b590      	push	{r4, r7, lr}
 800dcf2:	b087      	sub	sp, #28
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	607a      	str	r2, [r7, #4]
  Level: 2B The target value of the Generic Level state
  TID:   1B Transaction Identifier
  Transition Time: 1B Format as defined in Section 3.1.3. (Optional)
  Delay: 1B Message execution delay in 5 milliseconds steps (C.1)
  */
  TRACE_M(TF_GENERIC_M, "Generic_Move_Set callback received \r\n");
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	4871      	ldr	r0, [pc, #452]	@ (800dec4 <Generic_Move_Set+0x1d4>)
 800dd00:	f7ff f9ae 	bl	800d060 <TraceHeader>
 800dd04:	4870      	ldr	r0, [pc, #448]	@ (800dec8 <Generic_Move_Set+0x1d8>)
 800dd06:	f018 fe2d 	bl	8026964 <puts>
  
  Generic_LevelMoveParam_t  Generic_LevelMoveParam;
  
  Generic_LevelMoveParam.TargetMoveLevel16  = (plevel_param[1] << 8);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	021b      	lsls	r3, r3, #8
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	823b      	strh	r3, [r7, #16]
  Generic_LevelMoveParam.TargetMoveLevel16 |= (plevel_param[0]);
 800dd16:	8a3b      	ldrh	r3, [r7, #16]
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	7812      	ldrb	r2, [r2, #0]
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	823b      	strh	r3, [r7, #16]
  Generic_LevelMoveParam.Generic_TID = plevel_param[2];
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	3302      	adds	r3, #2
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	74bb      	strb	r3, [r7, #18]
  /* Check for Optional Parameters 
  
    length > 3 plevel_param has level,TID,Trasition Time,Delay
    length < 3 plevel_param has level,TID
  */     
  if((length > 3) && (plevel_param[3] !=0))
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	2b03      	cmp	r3, #3
 800dd2e:	d977      	bls.n	800de20 <Generic_Move_Set+0x130>
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	3303      	adds	r3, #3
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d072      	beq.n	800de20 <Generic_Move_Set+0x130>
  {
    Generic_LevelMoveParam.Transition_Time = plevel_param[3];
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	3303      	adds	r3, #3
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	74fb      	strb	r3, [r7, #19]
    Generic_LevelMoveParam.Delay_Time = plevel_param[4];
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	3304      	adds	r3, #4
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	753b      	strb	r3, [r7, #20]
    /* Copy the data into status message which needs to be update in 
      application message.
    */ 
    /* The assumption here is that the move command starts transition with each 
       step of size delta, which terminates only at max or min value */
    if (Generic_LevelMoveParam.TargetMoveLevel16 <= 0x7FFF)
 800dd4a:	8a3b      	ldrh	r3, [r7, #16]
 800dd4c:	b21b      	sxth	r3, r3
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	db0d      	blt.n	800dd6e <Generic_Move_Set+0x7e>
    {
        Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = 0x7FFF;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	4619      	mov	r1, r3
 800dd58:	4a5c      	ldr	r2, [pc, #368]	@ (800decc <Generic_Move_Set+0x1dc>)
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	005b      	lsls	r3, r3, #1
 800dd5e:	440b      	add	r3, r1
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	4413      	add	r3, r2
 800dd64:	3302      	adds	r3, #2
 800dd66:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800dd6a:	801a      	strh	r2, [r3, #0]
 800dd6c:	e00c      	b.n	800dd88 <Generic_Move_Set+0x98>
    }
    else
    {
        Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = 0x8000;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	4619      	mov	r1, r3
 800dd74:	4a55      	ldr	r2, [pc, #340]	@ (800decc <Generic_Move_Set+0x1dc>)
 800dd76:	460b      	mov	r3, r1
 800dd78:	005b      	lsls	r3, r3, #1
 800dd7a:	440b      	add	r3, r1
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	4413      	add	r3, r2
 800dd80:	3302      	adds	r3, #2
 800dd82:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800dd86:	801a      	strh	r2, [r3, #0]
    }
    Generic_TemporaryStatus[pmsgParam->elementIndex].TargetValue16 = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	4619      	mov	r1, r3
 800dd94:	4a4d      	ldr	r2, [pc, #308]	@ (800decc <Generic_Move_Set+0x1dc>)
 800dd96:	4603      	mov	r3, r0
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	4403      	add	r3, r0
 800dd9c:	009b      	lsls	r3, r3, #2
 800dd9e:	4413      	add	r3, r2
 800dda0:	3302      	adds	r3, #2
 800dda2:	f9b3 0000 	ldrsh.w	r0, [r3]
 800dda6:	4a4a      	ldr	r2, [pc, #296]	@ (800ded0 <Generic_Move_Set+0x1e0>)
 800dda8:	460b      	mov	r3, r1
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	440b      	add	r3, r1
 800ddae:	4413      	add	r3, r2
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = UNDEFSTEPVAL;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	4619      	mov	r1, r3
 800ddbc:	4a44      	ldr	r2, [pc, #272]	@ (800ded0 <Generic_Move_Set+0x1e0>)
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	440b      	add	r3, r1
 800ddc4:	4413      	add	r3, r2
 800ddc6:	223f      	movs	r2, #63	@ 0x3f
 800ddc8:	701a      	strb	r2, [r3, #0]
    Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime = UNDEFSTEPVAL;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	4619      	mov	r1, r3
 800ddd0:	4a3e      	ldr	r2, [pc, #248]	@ (800decc <Generic_Move_Set+0x1dc>)
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	005b      	lsls	r3, r3, #1
 800ddd6:	440b      	add	r3, r1
 800ddd8:	009b      	lsls	r3, r3, #2
 800ddda:	4413      	add	r3, r2
 800dddc:	3304      	adds	r3, #4
 800ddde:	223f      	movs	r2, #63	@ 0x3f
 800dde0:	701a      	strb	r2, [r3, #0]
    
    /* Function to calculate time parameters, step resolution
      step size for transition state machine.
    */
    Generic_GetStepValue(plevel_param[3], pmsgParam->elementIndex);   
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	3303      	adds	r3, #3
 800dde6:	781a      	ldrb	r2, [r3, #0]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	4619      	mov	r1, r3
 800ddee:	4610      	mov	r0, r2
 800ddf0:	f000 fd6c 	bl	800e8cc <Generic_GetStepValue>
    /* option parameter flag, enable to sent all required parameter in status.*/
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;  
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	4a36      	ldr	r2, [pc, #216]	@ (800ded4 <Generic_Move_Set+0x1e4>)
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	005b      	lsls	r3, r3, #1
 800de00:	440b      	add	r3, r1
 800de02:	4413      	add	r3, r2
 800de04:	3301      	adds	r3, #1
 800de06:	2201      	movs	r2, #1
 800de08:	701a      	strb	r2, [r3, #0]
    /* transition process enable flag. */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_LEVEL_TRANSITION_START;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	4619      	mov	r1, r3
 800de10:	4a30      	ldr	r2, [pc, #192]	@ (800ded4 <Generic_Move_Set+0x1e4>)
 800de12:	460b      	mov	r3, r1
 800de14:	005b      	lsls	r3, r3, #1
 800de16:	440b      	add	r3, r1
 800de18:	4413      	add	r3, r2
 800de1a:	2202      	movs	r2, #2
 800de1c:	701a      	strb	r2, [r3, #0]
 800de1e:	e02e      	b.n	800de7e <Generic_Move_Set+0x18e>
  }
  else
  {   
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	4618      	mov	r0, r3
 800de26:	f001 f869 	bl	800eefc <Generic_TransitionParameterReset>
    
    if(Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID == Generic_LevelMoveParam.Generic_TID)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	4619      	mov	r1, r3
 800de30:	4a26      	ldr	r2, [pc, #152]	@ (800decc <Generic_Move_Set+0x1dc>)
 800de32:	460b      	mov	r3, r1
 800de34:	005b      	lsls	r3, r3, #1
 800de36:	440b      	add	r3, r1
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	4413      	add	r3, r2
 800de3c:	3305      	adds	r3, #5
 800de3e:	781a      	ldrb	r2, [r3, #0]
 800de40:	7cbb      	ldrb	r3, [r7, #18]
 800de42:	429a      	cmp	r2, r3
 800de44:	d11b      	bne.n	800de7e <Generic_Move_Set+0x18e>
    {
      Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 =  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	4619      	mov	r1, r3
 800de4c:	4a1f      	ldr	r2, [pc, #124]	@ (800decc <Generic_Move_Set+0x1dc>)
 800de4e:	460b      	mov	r3, r1
 800de50:	005b      	lsls	r3, r3, #1
 800de52:	440b      	add	r3, r1
 800de54:	009b      	lsls	r3, r3, #2
 800de56:	4413      	add	r3, r2
 800de58:	3306      	adds	r3, #6
 800de5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de5e:	b29a      	uxth	r2, r3
        + Generic_LevelMoveParam.TargetMoveLevel16;
 800de60:	8a3b      	ldrh	r3, [r7, #16]
 800de62:	4413      	add	r3, r2
 800de64:	b29a      	uxth	r2, r3
      Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 =  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	4619      	mov	r1, r3
        + Generic_LevelMoveParam.TargetMoveLevel16;
 800de6c:	b210      	sxth	r0, r2
      Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 =  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 
 800de6e:	4a17      	ldr	r2, [pc, #92]	@ (800decc <Generic_Move_Set+0x1dc>)
 800de70:	460b      	mov	r3, r1
 800de72:	005b      	lsls	r3, r3, #1
 800de74:	440b      	add	r3, r1
 800de76:	009b      	lsls	r3, r3, #2
 800de78:	4413      	add	r3, r2
 800de7a:	4602      	mov	r2, r0
 800de7c:	801a      	strh	r2, [r3, #0]
    {
      
    }
    }
    
  Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID = Generic_LevelMoveParam.Generic_TID; 
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	4619      	mov	r1, r3
 800de84:	7cb8      	ldrb	r0, [r7, #18]
 800de86:	4a11      	ldr	r2, [pc, #68]	@ (800decc <Generic_Move_Set+0x1dc>)
 800de88:	460b      	mov	r3, r1
 800de8a:	005b      	lsls	r3, r3, #1
 800de8c:	440b      	add	r3, r1
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	4413      	add	r3, r2
 800de92:	3305      	adds	r3, #5
 800de94:	4602      	mov	r2, r0
 800de96:	701a      	strb	r2, [r3, #0]
 
  /* Application Callback */
  (GenericAppli_cb.LevelDeltaMove_Set_cb)(&Generic_LevelStatus[pmsgParam->elementIndex], 0, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800de98:	4b0f      	ldr	r3, [pc, #60]	@ (800ded8 <Generic_Move_Set+0x1e8>)
 800de9a:	691c      	ldr	r4, [r3, #16]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	461a      	mov	r2, r3
 800dea2:	4613      	mov	r3, r2
 800dea4:	005b      	lsls	r3, r3, #1
 800dea6:	4413      	add	r3, r2
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	4a08      	ldr	r2, [pc, #32]	@ (800decc <Generic_Move_Set+0x1dc>)
 800deac:	1898      	adds	r0, r3, r2
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	88da      	ldrh	r2, [r3, #6]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	2100      	movs	r1, #0
 800deb8:	47a0      	blx	r4
     
  return MOBLE_RESULT_SUCCESS;
 800deba:	2300      	movs	r3, #0
}
 800debc:	4618      	mov	r0, r3
 800debe:	371c      	adds	r7, #28
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd90      	pop	{r4, r7, pc}
 800dec4:	0802e25c 	.word	0x0802e25c
 800dec8:	0802ab34 	.word	0x0802ab34
 800decc:	200046d8 	.word	0x200046d8
 800ded0:	200046c4 	.word	0x200046c4
 800ded4:	200046ec 	.word	0x200046ec
 800ded8:	0802dfb8 	.word	0x0802dfb8

0800dedc <Generic_Level_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Level_Status(MOBLEUINT8* plevel_status, 
                                  MOBLEUINT32 *plength,
                                  MODEL_MessageHeader_t *pmsgParam) 
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	60f8      	str	r0, [r7, #12]
 800dee4:	60b9      	str	r1, [r7, #8]
 800dee6:	607a      	str	r2, [r7, #4]
  Target Level: 2B The target value of the Generic Level state (Optional). 
  Remaining Time: 1B Format as defined in Section 3.1.3 (C.1).
  
  */
  
  TRACE_M(TF_GENERIC_M, "Generic_Level_Status callback received \r\n");
 800dee8:	2100      	movs	r1, #0
 800deea:	4856      	ldr	r0, [pc, #344]	@ (800e044 <Generic_Level_Status+0x168>)
 800deec:	f7ff f8b8 	bl	800d060 <TraceHeader>
 800def0:	4855      	ldr	r0, [pc, #340]	@ (800e048 <Generic_Level_Status+0x16c>)
 800def2:	f018 fd37 	bl	8026964 <puts>
  TRACE_M(TF_SERIAL_CTRL,"#8205! \n\r");
 800def6:	2100      	movs	r1, #0
 800def8:	4852      	ldr	r0, [pc, #328]	@ (800e044 <Generic_Level_Status+0x168>)
 800defa:	f7ff f8b1 	bl	800d060 <TraceHeader>
 800defe:	4853      	ldr	r0, [pc, #332]	@ (800e04c <Generic_Level_Status+0x170>)
 800df00:	f018 fcc8 	bl	8026894 <iprintf>
  
  /* checking the transition is in process.
  checking for remaining time is not equal to zero.
  */
  
  if((Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam ==1) || (Generic_TimeParam[pmsgParam->elementIndex].StepValue != 0))
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	4619      	mov	r1, r3
 800df0a:	4a51      	ldr	r2, [pc, #324]	@ (800e050 <Generic_Level_Status+0x174>)
 800df0c:	460b      	mov	r3, r1
 800df0e:	005b      	lsls	r3, r3, #1
 800df10:	440b      	add	r3, r1
 800df12:	4413      	add	r3, r2
 800df14:	3301      	adds	r3, #1
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d00c      	beq.n	800df36 <Generic_Level_Status+0x5a>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	4619      	mov	r1, r3
 800df22:	4a4c      	ldr	r2, [pc, #304]	@ (800e054 <Generic_Level_Status+0x178>)
 800df24:	460b      	mov	r3, r1
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	440b      	add	r3, r1
 800df2a:	005b      	lsls	r3, r3, #1
 800df2c:	4413      	add	r3, r2
 800df2e:	f993 3000 	ldrsb.w	r3, [r3]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d045      	beq.n	800dfc2 <Generic_Level_Status+0xe6>
  {
    TRACE_M(TF_GENERIC_M, "Generic_Level_Status sent with Transition \r\n"); 
 800df36:	2100      	movs	r1, #0
 800df38:	4842      	ldr	r0, [pc, #264]	@ (800e044 <Generic_Level_Status+0x168>)
 800df3a:	f7ff f891 	bl	800d060 <TraceHeader>
 800df3e:	4846      	ldr	r0, [pc, #280]	@ (800e058 <Generic_Level_Status+0x17c>)
 800df40:	f018 fd10 	bl	8026964 <puts>

    *(plevel_status+2) = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	4619      	mov	r1, r3
 800df4a:	4a44      	ldr	r2, [pc, #272]	@ (800e05c <Generic_Level_Status+0x180>)
 800df4c:	460b      	mov	r3, r1
 800df4e:	005b      	lsls	r3, r3, #1
 800df50:	440b      	add	r3, r1
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	4413      	add	r3, r2
 800df56:	3302      	adds	r3, #2
 800df58:	f9b3 2000 	ldrsh.w	r2, [r3]
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	3302      	adds	r3, #2
 800df60:	b2d2      	uxtb	r2, r2
 800df62:	701a      	strb	r2, [r3, #0]
    *(plevel_status+3) = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 >> 8;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	4619      	mov	r1, r3
 800df6a:	4a3c      	ldr	r2, [pc, #240]	@ (800e05c <Generic_Level_Status+0x180>)
 800df6c:	460b      	mov	r3, r1
 800df6e:	005b      	lsls	r3, r3, #1
 800df70:	440b      	add	r3, r1
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	4413      	add	r3, r2
 800df76:	3302      	adds	r3, #2
 800df78:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df7c:	121b      	asrs	r3, r3, #8
 800df7e:	b21a      	sxth	r2, r3
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	3303      	adds	r3, #3
 800df84:	b2d2      	uxtb	r2, r2
 800df86:	701a      	strb	r2, [r3, #0]
    *(plevel_status+4) = Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	4618      	mov	r0, r3
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	1d1a      	adds	r2, r3, #4
 800df92:	4932      	ldr	r1, [pc, #200]	@ (800e05c <Generic_Level_Status+0x180>)
 800df94:	4603      	mov	r3, r0
 800df96:	005b      	lsls	r3, r3, #1
 800df98:	4403      	add	r3, r0
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	440b      	add	r3, r1
 800df9e:	3304      	adds	r3, #4
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	7013      	strb	r3, [r2, #0]
    *plength = 5;
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	2205      	movs	r2, #5
 800dfa8:	601a      	str	r2, [r3, #0]
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 0;    
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	4619      	mov	r1, r3
 800dfb0:	4a27      	ldr	r2, [pc, #156]	@ (800e050 <Generic_Level_Status+0x174>)
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	005b      	lsls	r3, r3, #1
 800dfb6:	440b      	add	r3, r1
 800dfb8:	4413      	add	r3, r2
 800dfba:	3301      	adds	r3, #1
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	701a      	strb	r2, [r3, #0]
 800dfc0:	e009      	b.n	800dfd6 <Generic_Level_Status+0xfa>
  }
  else
  {
    TRACE_M(TF_GENERIC_M, "Generic_Level_Status sent without Transition \r\n"); 
 800dfc2:	2100      	movs	r1, #0
 800dfc4:	481f      	ldr	r0, [pc, #124]	@ (800e044 <Generic_Level_Status+0x168>)
 800dfc6:	f7ff f84b 	bl	800d060 <TraceHeader>
 800dfca:	4825      	ldr	r0, [pc, #148]	@ (800e060 <Generic_Level_Status+0x184>)
 800dfcc:	f018 fcca 	bl	8026964 <puts>
    *plength = 2;             
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2202      	movs	r2, #2
 800dfd4:	601a      	str	r2, [r3, #0]
  }
     
  *(plevel_status) = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	4619      	mov	r1, r3
 800dfdc:	4a1f      	ldr	r2, [pc, #124]	@ (800e05c <Generic_Level_Status+0x180>)
 800dfde:	460b      	mov	r3, r1
 800dfe0:	005b      	lsls	r3, r3, #1
 800dfe2:	440b      	add	r3, r1
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	4413      	add	r3, r2
 800dfe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	701a      	strb	r2, [r3, #0]
  *(plevel_status+1) = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 >> 8;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	4619      	mov	r1, r3
 800dff8:	4a18      	ldr	r2, [pc, #96]	@ (800e05c <Generic_Level_Status+0x180>)
 800dffa:	460b      	mov	r3, r1
 800dffc:	005b      	lsls	r3, r3, #1
 800dffe:	440b      	add	r3, r1
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	4413      	add	r3, r2
 800e004:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e008:	121b      	asrs	r3, r3, #8
 800e00a:	b21a      	sxth	r2, r3
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	3301      	adds	r3, #1
 800e010:	b2d2      	uxtb	r2, r2
 800e012:	701a      	strb	r2, [r3, #0]
  TRACE_M(TF_GENERIC_M, "%d \r\n", Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16); 
 800e014:	2100      	movs	r1, #0
 800e016:	480b      	ldr	r0, [pc, #44]	@ (800e044 <Generic_Level_Status+0x168>)
 800e018:	f7ff f822 	bl	800d060 <TraceHeader>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	4619      	mov	r1, r3
 800e022:	4a0e      	ldr	r2, [pc, #56]	@ (800e05c <Generic_Level_Status+0x180>)
 800e024:	460b      	mov	r3, r1
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	440b      	add	r3, r1
 800e02a:	009b      	lsls	r3, r3, #2
 800e02c:	4413      	add	r3, r2
 800e02e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e032:	4619      	mov	r1, r3
 800e034:	480b      	ldr	r0, [pc, #44]	@ (800e064 <Generic_Level_Status+0x188>)
 800e036:	f018 fc2d 	bl	8026894 <iprintf>
  return MOBLE_RESULT_SUCCESS;   
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3710      	adds	r7, #16
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	0802e270 	.word	0x0802e270
 800e048:	0802ab5c 	.word	0x0802ab5c
 800e04c:	0802ab88 	.word	0x0802ab88
 800e050:	200046ec 	.word	0x200046ec
 800e054:	200046cc 	.word	0x200046cc
 800e058:	0802ab94 	.word	0x0802ab94
 800e05c:	200046d8 	.word	0x200046d8
 800e060:	0802abc0 	.word	0x0802abc0
 800e064:	0802aaa0 	.word	0x0802aaa0

0800e068 <Generic_PowerOnOff_Set>:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & AppKey Offset
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_PowerOnOff_Set(const MOBLEUINT8 *powerOnOff_param , MOBLEUINT32 length,\
                                   MODEL_MessageHeader_t *pmsgParam) 
{
 800e068:	b590      	push	{r4, r7, lr}
 800e06a:	b087      	sub	sp, #28
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]
  /* 
  3.2.4.2 Generic Power On Off Time
  Following is the set message:
  powerOnOff_param:1B parameter is received to set the power on off model.  
  */
  TRACE_M(TF_GENERIC_M, "Generic_PowerOnOff_Set callback received \r\n");
 800e074:	2100      	movs	r1, #0
 800e076:	4817      	ldr	r0, [pc, #92]	@ (800e0d4 <Generic_PowerOnOff_Set+0x6c>)
 800e078:	f7fe fff2 	bl	800d060 <TraceHeader>
 800e07c:	4816      	ldr	r0, [pc, #88]	@ (800e0d8 <Generic_PowerOnOff_Set+0x70>)
 800e07e:	f018 fc71 	bl	8026964 <puts>
  TRACE_M(TF_GENERIC_M,"Generic_PowerOnOff_Set is %d\r\n", powerOnOff_param[0]);
 800e082:	2100      	movs	r1, #0
 800e084:	4813      	ldr	r0, [pc, #76]	@ (800e0d4 <Generic_PowerOnOff_Set+0x6c>)
 800e086:	f7fe ffeb 	bl	800d060 <TraceHeader>
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	4619      	mov	r1, r3
 800e090:	4812      	ldr	r0, [pc, #72]	@ (800e0dc <Generic_PowerOnOff_Set+0x74>)
 800e092:	f018 fbff 	bl	8026894 <iprintf>
  
  Generic_PowerOnOffParam_t Generic_PowerOnOffParam[APPLICATION_NUMBER_OF_ELEMENTS];
  
  Generic_PowerOnOffParam[pmsgParam->elementIndex].PowerOnOffState = powerOnOff_param[0];
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	4619      	mov	r1, r3
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	781a      	ldrb	r2, [r3, #0]
 800e0a0:	f101 0318 	add.w	r3, r1, #24
 800e0a4:	443b      	add	r3, r7
 800e0a6:	f803 2c04 	strb.w	r2, [r3, #-4]
  
  /* Application Callback */
  (GenericAppli_cb.GenericPowerOnOff_cb)(&Generic_PowerOnOffParam[pmsgParam->elementIndex], length, pmsgParam->dst_peer,\
 800e0aa:	4b0d      	ldr	r3, [pc, #52]	@ (800e0e0 <Generic_PowerOnOff_Set+0x78>)
 800e0ac:	699c      	ldr	r4, [r3, #24]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	f107 0314 	add.w	r3, r7, #20
 800e0b8:	1898      	adds	r0, r3, r2
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	b2d9      	uxtb	r1, r3
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	88da      	ldrh	r2, [r3, #6]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	47a0      	blx	r4
                                                     pmsgParam->elementIndex);
  return MOBLE_RESULT_SUCCESS;
 800e0c8:	2300      	movs	r3, #0
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	371c      	adds	r7, #28
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd90      	pop	{r4, r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	0802e288 	.word	0x0802e288
 800e0d8:	0802abf0 	.word	0x0802abf0
 800e0dc:	0802ac1c 	.word	0x0802ac1c
 800e0e0:	0802dfb8 	.word	0x0802dfb8

0800e0e4 <Generic_PowerOnOff_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_PowerOnOff_Status(MOBLEUINT8 *powerOnOff_status , 
                                       MOBLEUINT32 *plength,
                                       MODEL_MessageHeader_t *pmsgParam) 
{  
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b086      	sub	sp, #24
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	607a      	str	r2, [r7, #4]
  3.2.4.4 Generic OnPowerUp Status
  Following is the status message:
  powerOnOff_status: 1B is the status parameter of the Power on off model. 
  */  
  MOBLEUINT8 Generic_GetBuff[2] ;
  TRACE_M(TF_GENERIC_M, "Generic_PowerOnOff_Status callback received \r\n");
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	4810      	ldr	r0, [pc, #64]	@ (800e134 <Generic_PowerOnOff_Status+0x50>)
 800e0f4:	f7fe ffb4 	bl	800d060 <TraceHeader>
 800e0f8:	480f      	ldr	r0, [pc, #60]	@ (800e138 <Generic_PowerOnOff_Status+0x54>)
 800e0fa:	f018 fc33 	bl	8026964 <puts>
  TRACE_M(TF_SERIAL_CTRL,"#8211! \n\r");
 800e0fe:	2100      	movs	r1, #0
 800e100:	480c      	ldr	r0, [pc, #48]	@ (800e134 <Generic_PowerOnOff_Status+0x50>)
 800e102:	f7fe ffad 	bl	800d060 <TraceHeader>
 800e106:	480d      	ldr	r0, [pc, #52]	@ (800e13c <Generic_PowerOnOff_Status+0x58>)
 800e108:	f018 fbc4 	bl	8026894 <iprintf>
  
  /* Function call back to get the values from application*/
  (Appli_GenericState_cb.GetPowerOnOffStatus_cb)(Generic_GetBuff, pmsgParam->dst_peer,\
 800e10c:	4b0c      	ldr	r3, [pc, #48]	@ (800e140 <Generic_PowerOnOff_Status+0x5c>)
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	88d1      	ldrh	r1, [r2, #6]
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	7812      	ldrb	r2, [r2, #0]
 800e118:	f107 0014 	add.w	r0, r7, #20
 800e11c:	4798      	blx	r3
                                                        pmsgParam->elementIndex);
   
  *(powerOnOff_status) = Generic_GetBuff[0];
 800e11e:	7d3a      	ldrb	r2, [r7, #20]
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	701a      	strb	r2, [r3, #0]
  *plength = 1;
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	2201      	movs	r2, #1
 800e128:	601a      	str	r2, [r3, #0]
 
  return MOBLE_RESULT_SUCCESS;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3718      	adds	r7, #24
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	0802e2a0 	.word	0x0802e2a0
 800e138:	0802ac3c 	.word	0x0802ac3c
 800e13c:	0802ac6c 	.word	0x0802ac6c
 800e140:	0802dfe0 	.word	0x0802dfe0

0800e144 <GenericModelServer_GetOpcodeTableCb>:
* @param  length: Pointer to the Length of Generic Model opcode array
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT GenericModelServer_GetOpcodeTableCb(const MODEL_OpcodeTableParam_t **data, 
                                                 MOBLEUINT16 *length)
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	6039      	str	r1, [r7, #0]
  *data = Generic_Opcodes_Table;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	4a05      	ldr	r2, [pc, #20]	@ (800e168 <GenericModelServer_GetOpcodeTableCb+0x24>)
 800e152:	601a      	str	r2, [r3, #0]
  *length = sizeof(Generic_Opcodes_Table)/sizeof(Generic_Opcodes_Table[0]);
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	220e      	movs	r2, #14
 800e158:	801a      	strh	r2, [r3, #0]

  return MOBLE_RESULT_SUCCESS;
 800e15a:	2300      	movs	r3, #0
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	370c      	adds	r7, #12
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr
 800e168:	0802e160 	.word	0x0802e160

0800e16c <GenericModelServer_GetStatusRequestCb>:
                                                   MOBLEUINT32 *plength, 
                                                   MOBLEUINT8 const *pRxData,
                                                   MOBLEUINT32 dataLength,
                                                   MOBLEBOOL response)

{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	607a      	str	r2, [r7, #4]
 800e176:	603b      	str	r3, [r7, #0]
 800e178:	460b      	mov	r3, r1
 800e17a:	817b      	strh	r3, [r7, #10]
  TRACE_M(TF_GENERIC_M, "response status enable \n\r");
 800e17c:	2100      	movs	r1, #0
 800e17e:	4818      	ldr	r0, [pc, #96]	@ (800e1e0 <GenericModelServer_GetStatusRequestCb+0x74>)
 800e180:	f7fe ff6e 	bl	800d060 <TraceHeader>
 800e184:	4817      	ldr	r0, [pc, #92]	@ (800e1e4 <GenericModelServer_GetStatusRequestCb+0x78>)
 800e186:	f018 fb85 	bl	8026894 <iprintf>
  switch(opcode)
 800e18a:	897b      	ldrh	r3, [r7, #10]
 800e18c:	f248 2212 	movw	r2, #33298	@ 0x8212
 800e190:	4293      	cmp	r3, r2
 800e192:	d018      	beq.n	800e1c6 <GenericModelServer_GetStatusRequestCb+0x5a>
 800e194:	f248 2212 	movw	r2, #33298	@ 0x8212
 800e198:	4293      	cmp	r3, r2
 800e19a:	dc1a      	bgt.n	800e1d2 <GenericModelServer_GetStatusRequestCb+0x66>
 800e19c:	f248 2204 	movw	r2, #33284	@ 0x8204
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d004      	beq.n	800e1ae <GenericModelServer_GetStatusRequestCb+0x42>
 800e1a4:	f248 2208 	movw	r2, #33288	@ 0x8208
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d006      	beq.n	800e1ba <GenericModelServer_GetStatusRequestCb+0x4e>
      Generic_DefaultTransitionTime_Status(pResponsedata, plength, pmsgParam);
    }
#endif    
    default:
    {
      break;
 800e1ac:	e011      	b.n	800e1d2 <GenericModelServer_GetStatusRequestCb+0x66>
      Generic_OnOff_Status(pResponsedata, plength, pmsgParam);       
 800e1ae:	68fa      	ldr	r2, [r7, #12]
 800e1b0:	6839      	ldr	r1, [r7, #0]
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7ff fa54 	bl	800d660 <Generic_OnOff_Status>
      break;
 800e1b8:	e00c      	b.n	800e1d4 <GenericModelServer_GetStatusRequestCb+0x68>
      Generic_Level_Status(pResponsedata, plength, pmsgParam);     
 800e1ba:	68fa      	ldr	r2, [r7, #12]
 800e1bc:	6839      	ldr	r1, [r7, #0]
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff fe8c 	bl	800dedc <Generic_Level_Status>
      break;
 800e1c4:	e006      	b.n	800e1d4 <GenericModelServer_GetStatusRequestCb+0x68>
      Generic_PowerOnOff_Status(pResponsedata, plength, pmsgParam);
 800e1c6:	68fa      	ldr	r2, [r7, #12]
 800e1c8:	6839      	ldr	r1, [r7, #0]
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f7ff ff8a 	bl	800e0e4 <Generic_PowerOnOff_Status>
      break;
 800e1d0:	e000      	b.n	800e1d4 <GenericModelServer_GetStatusRequestCb+0x68>
      break;
 800e1d2:	bf00      	nop
    }
  }
  return MOBLE_RESULT_SUCCESS;    
 800e1d4:	2300      	movs	r3, #0
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3710      	adds	r7, #16
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	0802e2bc 	.word	0x0802e2bc
 800e1e4:	0802ad54 	.word	0x0802ad54

0800e1e8 <GenericModelServer_ProcessMessageCb>:
MOBLE_RESULT GenericModelServer_ProcessMessageCb(MODEL_MessageHeader_t *pmsgParam,
                                                 MOBLEUINT16 opcode, 
                                                 MOBLEUINT8 const *pRxData, 
                                                 MOBLEUINT32 dataLength, 
                                                 MOBLEBOOL response)
{
 800e1e8:	b590      	push	{r4, r7, lr}
 800e1ea:	b089      	sub	sp, #36	@ 0x24
 800e1ec:	af02      	add	r7, sp, #8
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	607a      	str	r2, [r7, #4]
 800e1f2:	603b      	str	r3, [r7, #0]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	817b      	strh	r3, [r7, #10]
  Model_Binding_Var.Dst_Peer = pmsgParam->dst_peer;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	88da      	ldrh	r2, [r3, #6]
 800e1fc:	4b94      	ldr	r3, [pc, #592]	@ (800e450 <GenericModelServer_ProcessMessageCb+0x268>)
 800e1fe:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800e200:	2300      	movs	r3, #0
 800e202:	75fb      	strb	r3, [r7, #23]
  MOBLE_ADDRESS publishAddress;
  MOBLEUINT8 modelStateChangeFlag = MOBLE_FALSE; 
 800e204:	2300      	movs	r3, #0
 800e206:	75bb      	strb	r3, [r7, #22]
  
  TRACE_M(TF_GENERIC_M, "elementIndex %.2x dst_peer %.2X peer_add %.2X opcode %.2X response %.2X\r\n",
 800e208:	2100      	movs	r1, #0
 800e20a:	4892      	ldr	r0, [pc, #584]	@ (800e454 <GenericModelServer_ProcessMessageCb+0x26c>)
 800e20c:	f7fe ff28 	bl	800d060 <TraceHeader>
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	4619      	mov	r1, r3
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	88db      	ldrh	r3, [r3, #6]
 800e21a:	4618      	mov	r0, r3
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	889b      	ldrh	r3, [r3, #4]
 800e220:	461c      	mov	r4, r3
 800e222:	897b      	ldrh	r3, [r7, #10]
 800e224:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e228:	9201      	str	r2, [sp, #4]
 800e22a:	9300      	str	r3, [sp, #0]
 800e22c:	4623      	mov	r3, r4
 800e22e:	4602      	mov	r2, r0
 800e230:	4889      	ldr	r0, [pc, #548]	@ (800e458 <GenericModelServer_ProcessMessageCb+0x270>)
 800e232:	f018 fb2f 	bl	8026894 <iprintf>
          pmsgParam->elementIndex, pmsgParam->dst_peer, pmsgParam->peer_addr, opcode, response);   
                                                      
  switch(opcode)
 800e236:	897b      	ldrh	r3, [r7, #10]
 800e238:	f5a3 4302 	sub.w	r3, r3, #33280	@ 0x8200
 800e23c:	3b02      	subs	r3, #2
 800e23e:	2b12      	cmp	r3, #18
 800e240:	f200 80e4 	bhi.w	800e40c <GenericModelServer_ProcessMessageCb+0x224>
 800e244:	a201      	add	r2, pc, #4	@ (adr r2, 800e24c <GenericModelServer_ProcessMessageCb+0x64>)
 800e246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e24a:	bf00      	nop
 800e24c:	0800e299 	.word	0x0800e299
 800e250:	0800e299 	.word	0x0800e299
 800e254:	0800e40d 	.word	0x0800e40d
 800e258:	0800e40d 	.word	0x0800e40d
 800e25c:	0800e317 	.word	0x0800e317
 800e260:	0800e317 	.word	0x0800e317
 800e264:	0800e40d 	.word	0x0800e40d
 800e268:	0800e36f 	.word	0x0800e36f
 800e26c:	0800e36f 	.word	0x0800e36f
 800e270:	0800e393 	.word	0x0800e393
 800e274:	0800e393 	.word	0x0800e393
 800e278:	0800e40d 	.word	0x0800e40d
 800e27c:	0800e40d 	.word	0x0800e40d
 800e280:	0800e40d 	.word	0x0800e40d
 800e284:	0800e40d 	.word	0x0800e40d
 800e288:	0800e40d 	.word	0x0800e40d
 800e28c:	0800e40d 	.word	0x0800e40d
 800e290:	0800e3d3 	.word	0x0800e3d3
 800e294:	0800e3d3 	.word	0x0800e3d3
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF
    
    case GENERIC_ON_OFF_SET_ACK:
    case GENERIC_ON_OFF_SET_UNACK:
    {
      result = Chk_ParamValidity(pRxData[0], 1); 
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	2101      	movs	r1, #1
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fe fe56 	bl	800cf50 <Chk_ParamValidity>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	75fb      	strb	r3, [r7, #23]
      /* 3.2.1.2 Generic OnOff Set 
      Check if Transition Time field is present or Not,
      If present, Only values of 0x00 through 0x3E shall be used to specify 
      the value of the Transition Number of Steps field. */

      result |= Chk_OptionalParamValidity (dataLength, 2, (pRxData[2]&0x3F), 0x3E );        
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	b2d8      	uxtb	r0, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	3302      	adds	r3, #2
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e2b6:	b2da      	uxtb	r2, r3
 800e2b8:	233e      	movs	r3, #62	@ 0x3e
 800e2ba:	2102      	movs	r1, #2
 800e2bc:	f7fe fe5d 	bl	800cf7a <Chk_OptionalParamValidity>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	7dfb      	ldrb	r3, [r7, #23]
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	75fb      	strb	r3, [r7, #23]
    
      if(result == MOBLE_RESULT_SUCCESS)
 800e2ca:	7dfb      	ldrb	r3, [r7, #23]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f040 809f 	bne.w	800e410 <GenericModelServer_ProcessMessageCb+0x228>
      {
        /* when device is working as proxy and is a part of node
           delay is included in LED toggle */              
        if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr,\
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	8898      	ldrh	r0, [r3, #4]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	88d9      	ldrh	r1, [r3, #6]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	3301      	adds	r3, #1
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	f7fe fff5 	bl	800d2d0 <Chk_TidValidity>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	75fb      	strb	r3, [r7, #23]
 800e2ea:	7dfb      	ldrb	r3, [r7, #23]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	f200 808f 	bhi.w	800e410 <GenericModelServer_ProcessMessageCb+0x228>
                                             pmsgParam->dst_peer, pRxData[1])))
        {
          Generic_OnOff_Set(pRxData, dataLength, pmsgParam);  
 800e2f2:	68fa      	ldr	r2, [r7, #12]
 800e2f4:	6839      	ldr	r1, [r7, #0]
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7ff f8e4 	bl	800d4c4 <Generic_OnOff_Set>
          Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_ONOFF_SERVER_MODEL_ID;
 800e2fc:	4b54      	ldr	r3, [pc, #336]	@ (800e450 <GenericModelServer_ProcessMessageCb+0x268>)
 800e2fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800e302:	805a      	strh	r2, [r3, #2]
          Model_Binding_Var.Model_Rx_Opcode = opcode;
 800e304:	4a52      	ldr	r2, [pc, #328]	@ (800e450 <GenericModelServer_ProcessMessageCb+0x268>)
 800e306:	897b      	ldrh	r3, [r7, #10]
 800e308:	8013      	strh	r3, [r2, #0]
          modelStateChangeFlag = MOBLE_TRUE;
 800e30a:	2301      	movs	r3, #1
 800e30c:	75bb      	strb	r3, [r7, #22]
          Publication1SecFlag.count = 0;
 800e30e:	4b53      	ldr	r3, [pc, #332]	@ (800e45c <GenericModelServer_ProcessMessageCb+0x274>)
 800e310:	2200      	movs	r2, #0
 800e312:	709a      	strb	r2, [r3, #2]
        }
      }
        
      break;
 800e314:	e07c      	b.n	800e410 <GenericModelServer_ProcessMessageCb+0x228>
  
    case GENERIC_LEVEL_SET_ACK:
    case GENERIC_LEVEL_SET_UNACK: 
    {   
       
      result = Chk_ParamMinMaxIntValidity(INT16_MIN ,pRxData , INT16_MAX );        
 800e316:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e31a:	6879      	ldr	r1, [r7, #4]
 800e31c:	4850      	ldr	r0, [pc, #320]	@ (800e460 <GenericModelServer_ProcessMessageCb+0x278>)
 800e31e:	f7fe fe4b 	bl	800cfb8 <Chk_ParamMinMaxIntValidity>
 800e322:	4603      	mov	r3, r0
 800e324:	75fb      	strb	r3, [r7, #23]
      if(result == MOBLE_RESULT_SUCCESS)
 800e326:	7dfb      	ldrb	r3, [r7, #23]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d173      	bne.n	800e414 <GenericModelServer_ProcessMessageCb+0x22c>
      {
        if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr, 
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	8898      	ldrh	r0, [r3, #4]
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	88d9      	ldrh	r1, [r3, #6]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	3302      	adds	r3, #2
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	461a      	mov	r2, r3
 800e33c:	f7fe ffc8 	bl	800d2d0 <Chk_TidValidity>
 800e340:	4603      	mov	r3, r0
 800e342:	75fb      	strb	r3, [r7, #23]
 800e344:	7dfb      	ldrb	r3, [r7, #23]
 800e346:	2b01      	cmp	r3, #1
 800e348:	d864      	bhi.n	800e414 <GenericModelServer_ProcessMessageCb+0x22c>
                                                  pmsgParam->dst_peer,
                                                  pRxData[2])))
        {
          Generic_Level_Set(pRxData, dataLength, pmsgParam);  
 800e34a:	68fa      	ldr	r2, [r7, #12]
 800e34c:	6839      	ldr	r1, [r7, #0]
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7ff fa1e 	bl	800d790 <Generic_Level_Set>
          Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_LEVEL_SERVER_MODEL_ID;
 800e354:	4b3e      	ldr	r3, [pc, #248]	@ (800e450 <GenericModelServer_ProcessMessageCb+0x268>)
 800e356:	f241 0202 	movw	r2, #4098	@ 0x1002
 800e35a:	805a      	strh	r2, [r3, #2]
          Model_Binding_Var.Model_Rx_Opcode = opcode;
 800e35c:	4a3c      	ldr	r2, [pc, #240]	@ (800e450 <GenericModelServer_ProcessMessageCb+0x268>)
 800e35e:	897b      	ldrh	r3, [r7, #10]
 800e360:	8013      	strh	r3, [r2, #0]
          modelStateChangeFlag = MOBLE_TRUE;
 800e362:	2301      	movs	r3, #1
 800e364:	75bb      	strb	r3, [r7, #22]
          Publication1SecFlag.count = 0;
 800e366:	4b3d      	ldr	r3, [pc, #244]	@ (800e45c <GenericModelServer_ProcessMessageCb+0x274>)
 800e368:	2200      	movs	r2, #0
 800e36a:	709a      	strb	r2, [r3, #2]
        }
      }
       
      break;
 800e36c:	e052      	b.n	800e414 <GenericModelServer_ProcessMessageCb+0x22c>
        Delta Level 4 The Delta change of the Generic Level state 
        TID 1 Transaction Identifier 
        Transition Time 1 Format as defined in Section 3.1.3. (Optional) 
        Delay 1 Message execution delay in 5 milliseconds steps (C.1)
      */
      Generic_Delta_Set(pRxData,dataLength, pmsgParam);   
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	6839      	ldr	r1, [r7, #0]
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7ff fb12 	bl	800d99c <Generic_Delta_Set>
      Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_LEVEL_SERVER_MODEL_ID;
 800e378:	4b35      	ldr	r3, [pc, #212]	@ (800e450 <GenericModelServer_ProcessMessageCb+0x268>)
 800e37a:	f241 0202 	movw	r2, #4098	@ 0x1002
 800e37e:	805a      	strh	r2, [r3, #2]
      Model_Binding_Var.Model_Rx_Opcode = opcode;
 800e380:	4a33      	ldr	r2, [pc, #204]	@ (800e450 <GenericModelServer_ProcessMessageCb+0x268>)
 800e382:	897b      	ldrh	r3, [r7, #10]
 800e384:	8013      	strh	r3, [r2, #0]
      modelStateChangeFlag = MOBLE_TRUE;
 800e386:	2301      	movs	r3, #1
 800e388:	75bb      	strb	r3, [r7, #22]
      Publication1SecFlag.count = 0;
 800e38a:	4b34      	ldr	r3, [pc, #208]	@ (800e45c <GenericModelServer_ProcessMessageCb+0x274>)
 800e38c:	2200      	movs	r2, #0
 800e38e:	709a      	strb	r2, [r3, #2]
      break;
 800e390:	e045      	b.n	800e41e <GenericModelServer_ProcessMessageCb+0x236>
      
    case GENERIC_MOVE_SET:
    case GENERIC_MOVE_SET_UNACK:
    {    
       
      result = Chk_ParamMinMaxIntValidity(INT16_MIN ,pRxData , INT16_MAX );       
 800e392:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e396:	6879      	ldr	r1, [r7, #4]
 800e398:	4831      	ldr	r0, [pc, #196]	@ (800e460 <GenericModelServer_ProcessMessageCb+0x278>)
 800e39a:	f7fe fe0d 	bl	800cfb8 <Chk_ParamMinMaxIntValidity>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	75fb      	strb	r3, [r7, #23]
      if(result == MOBLE_RESULT_SUCCESS)
 800e3a2:	7dfb      	ldrb	r3, [r7, #23]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d137      	bne.n	800e418 <GenericModelServer_ProcessMessageCb+0x230>
      {
        if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr, 
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	8898      	ldrh	r0, [r3, #4]
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	88d9      	ldrh	r1, [r3, #6]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	3302      	adds	r3, #2
 800e3b4:	781b      	ldrb	r3, [r3, #0]
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	f7fe ff8a 	bl	800d2d0 <Chk_TidValidity>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	75fb      	strb	r3, [r7, #23]
 800e3c0:	7dfb      	ldrb	r3, [r7, #23]
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d828      	bhi.n	800e418 <GenericModelServer_ProcessMessageCb+0x230>
                                                  pmsgParam->dst_peer,
                                                  pRxData[2])))
        {
          Generic_Move_Set(pRxData, dataLength, pmsgParam);  
 800e3c6:	68fa      	ldr	r2, [r7, #12]
 800e3c8:	6839      	ldr	r1, [r7, #0]
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f7ff fc90 	bl	800dcf0 <Generic_Move_Set>
        }
      }
      break;
 800e3d0:	e022      	b.n	800e418 <GenericModelServer_ProcessMessageCb+0x230>
#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF
    
    case GENERIC_POWER_ON_OFF_SET: 
    case GENERIC_POWER_ON_OFF_SET_UNACK:
    {
      result = Chk_ParamValidity(pRxData[0], GENERIC_POWER_RESTORE_STATE); 
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	2102      	movs	r1, #2
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7fe fdb9 	bl	800cf50 <Chk_ParamValidity>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	75fb      	strb	r3, [r7, #23]
      if(result == MOBLE_RESULT_SUCCESS)
 800e3e2:	7dfb      	ldrb	r3, [r7, #23]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d119      	bne.n	800e41c <GenericModelServer_ProcessMessageCb+0x234>
      {
        Generic_PowerOnOff_Set(pRxData, dataLength, pmsgParam); 
 800e3e8:	68fa      	ldr	r2, [r7, #12]
 800e3ea:	6839      	ldr	r1, [r7, #0]
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7ff fe3b 	bl	800e068 <Generic_PowerOnOff_Set>
        Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_POWER_ONOFF_SERVER_MODEL_ID;
 800e3f2:	4b17      	ldr	r3, [pc, #92]	@ (800e450 <GenericModelServer_ProcessMessageCb+0x268>)
 800e3f4:	f241 0206 	movw	r2, #4102	@ 0x1006
 800e3f8:	805a      	strh	r2, [r3, #2]
        Model_Binding_Var.Model_Rx_Opcode = opcode;
 800e3fa:	4a15      	ldr	r2, [pc, #84]	@ (800e450 <GenericModelServer_ProcessMessageCb+0x268>)
 800e3fc:	897b      	ldrh	r3, [r7, #10]
 800e3fe:	8013      	strh	r3, [r2, #0]
        modelStateChangeFlag = MOBLE_TRUE;
 800e400:	2301      	movs	r3, #1
 800e402:	75bb      	strb	r3, [r7, #22]
        Publication1SecFlag.count = 0;
 800e404:	4b15      	ldr	r3, [pc, #84]	@ (800e45c <GenericModelServer_ProcessMessageCb+0x274>)
 800e406:	2200      	movs	r2, #0
 800e408:	709a      	strb	r2, [r3, #2]
      }
      break;
 800e40a:	e007      	b.n	800e41c <GenericModelServer_ProcessMessageCb+0x234>
  
#endif    
    
    default:
    {
      break;
 800e40c:	bf00      	nop
 800e40e:	e006      	b.n	800e41e <GenericModelServer_ProcessMessageCb+0x236>
      break;
 800e410:	bf00      	nop
 800e412:	e004      	b.n	800e41e <GenericModelServer_ProcessMessageCb+0x236>
      break;
 800e414:	bf00      	nop
 800e416:	e002      	b.n	800e41e <GenericModelServer_ProcessMessageCb+0x236>
      break;
 800e418:	bf00      	nop
 800e41a:	e000      	b.n	800e41e <GenericModelServer_ProcessMessageCb+0x236>
      break;
 800e41c:	bf00      	nop
    }          
  } /* Switch ends */
          
  if((result == MOBLE_RESULT_SUCCESS) && (response == MOBLE_TRUE))
 800e41e:	7dfb      	ldrb	r3, [r7, #23]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d12b      	bne.n	800e47c <GenericModelServer_ProcessMessageCb+0x294>
 800e424:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e428:	2b01      	cmp	r3, #1
 800e42a:	d127      	bne.n	800e47c <GenericModelServer_ProcessMessageCb+0x294>
  {
    if(ADDRESS_IS_UNICAST(pmsgParam->dst_peer))
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	88db      	ldrh	r3, [r3, #6]
 800e430:	b21b      	sxth	r3, r3
 800e432:	2b00      	cmp	r3, #0
 800e434:	dd16      	ble.n	800e464 <GenericModelServer_ProcessMessageCb+0x27c>
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	88db      	ldrh	r3, [r3, #6]
 800e43a:	b21b      	sxth	r3, r3
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	db11      	blt.n	800e464 <GenericModelServer_ProcessMessageCb+0x27c>
    {
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800e440:	8979      	ldrh	r1, [r7, #10]
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	68f8      	ldr	r0, [r7, #12]
 800e448:	f017 f928 	bl	802569c <Model_SendResponse>
 800e44c:	e016      	b.n	800e47c <GenericModelServer_ProcessMessageCb+0x294>
 800e44e:	bf00      	nop
 800e450:	200046b8 	.word	0x200046b8
 800e454:	0802e2e4 	.word	0x0802e2e4
 800e458:	0802ad70 	.word	0x0802ad70
 800e45c:	200046f8 	.word	0x200046f8
 800e460:	ffff8000 	.word	0xffff8000
    }
    else
    {

      pmsgParam->dst_peer = BLEMesh_GetAddress();       // Replace group address by the single node address for response
 800e464:	f00b ff66 	bl	801a334 <BLEMesh_GetAddress>
 800e468:	4603      	mov	r3, r0
 800e46a:	461a      	mov	r2, r3
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	80da      	strh	r2, [r3, #6]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800e470:	8979      	ldrh	r1, [r7, #10]
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f017 f910 	bl	802569c <Model_SendResponse>
     Publish the status to publish address if the publication is set by client 
     publication is independent of the response of the message.if thek condition 
     for publication is full filled as per specification then the status will be 
     published.
  */
  publishAddress = BLEMesh_GetPublishAddress(pmsgParam->elementIndex, Model_Binding_Var.Model_ID);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	4a1f      	ldr	r2, [pc, #124]	@ (800e500 <GenericModelServer_ProcessMessageCb+0x318>)
 800e482:	8852      	ldrh	r2, [r2, #2]
 800e484:	4611      	mov	r1, r2
 800e486:	4618      	mov	r0, r3
 800e488:	f00b ff64 	bl	801a354 <BLEMesh_GetPublishAddress>
 800e48c:	4603      	mov	r3, r0
 800e48e:	82bb      	strh	r3, [r7, #20]
    
  if((result == MOBLE_RESULT_SUCCESS) && 
 800e490:	7dfb      	ldrb	r3, [r7, #23]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d12f      	bne.n	800e4f6 <GenericModelServer_ProcessMessageCb+0x30e>
 800e496:	8abb      	ldrh	r3, [r7, #20]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d02c      	beq.n	800e4f6 <GenericModelServer_ProcessMessageCb+0x30e>
     (publishAddress != 0x0000) && 
 800e49c:	7dbb      	ldrb	r3, [r7, #22]
 800e49e:	2b01      	cmp	r3, #1
 800e4a0:	d129      	bne.n	800e4f6 <GenericModelServer_ProcessMessageCb+0x30e>
       (modelStateChangeFlag == MOBLE_TRUE))
  {
    if(ADDRESS_IS_UNICAST(pmsgParam->dst_peer))
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	88db      	ldrh	r3, [r3, #6]
 800e4a6:	b21b      	sxth	r3, r3
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	dd0e      	ble.n	800e4ca <GenericModelServer_ProcessMessageCb+0x2e2>
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	88db      	ldrh	r3, [r3, #6]
 800e4b0:	b21b      	sxth	r3, r3
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	db09      	blt.n	800e4ca <GenericModelServer_ProcessMessageCb+0x2e2>
    {
      pmsgParam->peer_addr = publishAddress;
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	8aba      	ldrh	r2, [r7, #20]
 800e4ba:	809a      	strh	r2, [r3, #4]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800e4bc:	8979      	ldrh	r1, [r7, #10]
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	687a      	ldr	r2, [r7, #4]
 800e4c2:	68f8      	ldr	r0, [r7, #12]
 800e4c4:	f017 f8ea 	bl	802569c <Model_SendResponse>
 800e4c8:	e00e      	b.n	800e4e8 <GenericModelServer_ProcessMessageCb+0x300>
    }
        else
    {

      pmsgParam->peer_addr = publishAddress;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	8aba      	ldrh	r2, [r7, #20]
 800e4ce:	809a      	strh	r2, [r3, #4]
      pmsgParam->dst_peer = BLEMesh_GetAddress();       // Replace group address by the single node address for response
 800e4d0:	f00b ff30 	bl	801a334 <BLEMesh_GetAddress>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	80da      	strh	r2, [r3, #6]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800e4dc:	8979      	ldrh	r1, [r7, #10]
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	68f8      	ldr	r0, [r7, #12]
 800e4e4:	f017 f8da 	bl	802569c <Model_SendResponse>
    }
                
      modelStateChangeFlag = MOBLE_FALSE;   
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	75bb      	strb	r3, [r7, #22]
      TRACE_I(TF_GENERIC_M,"Publishing state when change to the address %.2X \r\n",publishAddress);
 800e4ec:	8abb      	ldrh	r3, [r7, #20]
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	4804      	ldr	r0, [pc, #16]	@ (800e504 <GenericModelServer_ProcessMessageCb+0x31c>)
 800e4f2:	f018 f9cf 	bl	8026894 <iprintf>
  }
  return MOBLE_RESULT_SUCCESS;
 800e4f6:	2300      	movs	r3, #0
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	371c      	adds	r7, #28
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd90      	pop	{r4, r7, pc}
 800e500:	200046b8 	.word	0x200046b8
 800e504:	0802adbc 	.word	0x0802adbc

0800e508 <Generic_TransitionBehaviour>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Generic_TransitionBehaviour(MOBLEUINT8 *GetValue, 
                                         MOBLEUINT8 elementIndex)
{
 800e508:	b5b0      	push	{r4, r5, r7, lr}
 800e50a:	b086      	sub	sp, #24
 800e50c:	af02      	add	r7, sp, #8
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	460b      	mov	r3, r1
 800e512:	70fb      	strb	r3, [r7, #3]
  static MOBLEUINT32 Check_time;
  MOBLEUINT16 targetRange;
  MOBLEUINT16 targetSlot;
  
  /* Taking the time stamp for particular time */
  if(Clockflag == 0)
 800e514:	4b5e      	ldr	r3, [pc, #376]	@ (800e690 <Generic_TransitionBehaviour+0x188>)
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d107      	bne.n	800e52c <Generic_TransitionBehaviour+0x24>
  {
    Check_time = Clock_Time();
 800e51c:	f7f8 fb02 	bl	8006b24 <HAL_GetTick>
 800e520:	4603      	mov	r3, r0
 800e522:	4a5c      	ldr	r2, [pc, #368]	@ (800e694 <Generic_TransitionBehaviour+0x18c>)
 800e524:	6013      	str	r3, [r2, #0]
    Clockflag = 1;
 800e526:	4b5a      	ldr	r3, [pc, #360]	@ (800e690 <Generic_TransitionBehaviour+0x188>)
 800e528:	2201      	movs	r2, #1
 800e52a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Publication after 1 second if total transition time is greater than 2 sec.*/
  if(Generic_TimeParam[elementIndex].TotalTime >2000)
 800e52c:	78fa      	ldrb	r2, [r7, #3]
 800e52e:	495a      	ldr	r1, [pc, #360]	@ (800e698 <Generic_TransitionBehaviour+0x190>)
 800e530:	4613      	mov	r3, r2
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	4413      	add	r3, r2
 800e536:	005b      	lsls	r3, r3, #1
 800e538:	440b      	add	r3, r1
 800e53a:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800e53e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800e542:	d901      	bls.n	800e548 <Generic_TransitionBehaviour+0x40>
  {
    Punblication_OneSecTimer();
 800e544:	f000 ffc2 	bl	800f4cc <Punblication_OneSecTimer>
  }
  /* Values from application are copied into Temporary variables for processing */
  
  Generic_TemporaryStatus[elementIndex].PresentValue16  = GetValue[1] << 8;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	3301      	adds	r3, #1
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	021b      	lsls	r3, r3, #8
 800e550:	78fa      	ldrb	r2, [r7, #3]
 800e552:	b218      	sxth	r0, r3
 800e554:	4951      	ldr	r1, [pc, #324]	@ (800e69c <Generic_TransitionBehaviour+0x194>)
 800e556:	4613      	mov	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4413      	add	r3, r2
 800e55c:	440b      	add	r3, r1
 800e55e:	4602      	mov	r2, r0
 800e560:	f8a3 2001 	strh.w	r2, [r3, #1]
  Generic_TemporaryStatus[elementIndex].PresentValue16 |= GetValue[0];
 800e564:	78fa      	ldrb	r2, [r7, #3]
 800e566:	494d      	ldr	r1, [pc, #308]	@ (800e69c <Generic_TransitionBehaviour+0x194>)
 800e568:	4613      	mov	r3, r2
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	4413      	add	r3, r2
 800e56e:	440b      	add	r3, r1
 800e570:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800e574:	b219      	sxth	r1, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	b21b      	sxth	r3, r3
 800e57c:	78fa      	ldrb	r2, [r7, #3]
 800e57e:	430b      	orrs	r3, r1
 800e580:	b218      	sxth	r0, r3
 800e582:	4946      	ldr	r1, [pc, #280]	@ (800e69c <Generic_TransitionBehaviour+0x194>)
 800e584:	4613      	mov	r3, r2
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	4413      	add	r3, r2
 800e58a:	440b      	add	r3, r1
 800e58c:	4602      	mov	r2, r0
 800e58e:	f8a3 2001 	strh.w	r2, [r3, #1]
  /* if condition to wait until the time is equal to the given resolution time */
  if(((Clock_Time()- Check_time) >= Generic_TimeParam[elementIndex].Res_Value))
 800e592:	f7f8 fac7 	bl	8006b24 <HAL_GetTick>
 800e596:	4602      	mov	r2, r0
 800e598:	4b3e      	ldr	r3, [pc, #248]	@ (800e694 <Generic_TransitionBehaviour+0x18c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	1ad1      	subs	r1, r2, r3
 800e59e:	78fa      	ldrb	r2, [r7, #3]
 800e5a0:	483d      	ldr	r0, [pc, #244]	@ (800e698 <Generic_TransitionBehaviour+0x190>)
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	009b      	lsls	r3, r3, #2
 800e5a6:	4413      	add	r3, r2
 800e5a8:	005b      	lsls	r3, r3, #1
 800e5aa:	4403      	add	r3, r0
 800e5ac:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800e5b0:	4299      	cmp	r1, r3
 800e5b2:	f0c0 8171 	bcc.w	800e898 <Generic_TransitionBehaviour+0x390>
  {     
    if(Generic_TimeParam[elementIndex].StepValue == 0)
 800e5b6:	78fa      	ldrb	r2, [r7, #3]
 800e5b8:	4937      	ldr	r1, [pc, #220]	@ (800e698 <Generic_TransitionBehaviour+0x190>)
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	4413      	add	r3, r2
 800e5c0:	005b      	lsls	r3, r3, #1
 800e5c2:	440b      	add	r3, r1
 800e5c4:	f993 3000 	ldrsb.w	r3, [r3]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d108      	bne.n	800e5de <Generic_TransitionBehaviour+0xd6>
    {
      Generic_TimeParam[elementIndex].StepValue = 1;
 800e5cc:	78fa      	ldrb	r2, [r7, #3]
 800e5ce:	4932      	ldr	r1, [pc, #200]	@ (800e698 <Generic_TransitionBehaviour+0x190>)
 800e5d0:	4613      	mov	r3, r2
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	4413      	add	r3, r2
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	440b      	add	r3, r1
 800e5da:	2201      	movs	r2, #1
 800e5dc:	701a      	strb	r2, [r3, #0]
    }

    if(Generic_TemporaryStatus[elementIndex].TargetValue16 > Generic_TemporaryStatus[elementIndex].PresentValue16)
 800e5de:	78fa      	ldrb	r2, [r7, #3]
 800e5e0:	492e      	ldr	r1, [pc, #184]	@ (800e69c <Generic_TransitionBehaviour+0x194>)
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	009b      	lsls	r3, r3, #2
 800e5e6:	4413      	add	r3, r2
 800e5e8:	440b      	add	r3, r1
 800e5ea:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800e5ee:	b219      	sxth	r1, r3
 800e5f0:	78fa      	ldrb	r2, [r7, #3]
 800e5f2:	482a      	ldr	r0, [pc, #168]	@ (800e69c <Generic_TransitionBehaviour+0x194>)
 800e5f4:	4613      	mov	r3, r2
 800e5f6:	009b      	lsls	r3, r3, #2
 800e5f8:	4413      	add	r3, r2
 800e5fa:	4403      	add	r3, r0
 800e5fc:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800e600:	b21b      	sxth	r3, r3
 800e602:	4299      	cmp	r1, r3
 800e604:	dd4e      	ble.n	800e6a4 <Generic_TransitionBehaviour+0x19c>
    {
      Generic_OnOffStatus[elementIndex].Present_OnOff_State = 1;
 800e606:	78fa      	ldrb	r2, [r7, #3]
 800e608:	4925      	ldr	r1, [pc, #148]	@ (800e6a0 <Generic_TransitionBehaviour+0x198>)
 800e60a:	4613      	mov	r3, r2
 800e60c:	005b      	lsls	r3, r3, #1
 800e60e:	4413      	add	r3, r2
 800e610:	005b      	lsls	r3, r3, #1
 800e612:	440b      	add	r3, r1
 800e614:	2201      	movs	r2, #1
 800e616:	701a      	strb	r2, [r3, #0]
      /* target range = total range to be covered */
      targetRange = 
        Generic_TemporaryStatus[elementIndex].TargetValue16 - Generic_TemporaryStatus[elementIndex].PresentValue16;
 800e618:	78fa      	ldrb	r2, [r7, #3]
 800e61a:	4920      	ldr	r1, [pc, #128]	@ (800e69c <Generic_TransitionBehaviour+0x194>)
 800e61c:	4613      	mov	r3, r2
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	4413      	add	r3, r2
 800e622:	440b      	add	r3, r1
 800e624:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800e628:	b21b      	sxth	r3, r3
 800e62a:	b299      	uxth	r1, r3
 800e62c:	78fa      	ldrb	r2, [r7, #3]
 800e62e:	481b      	ldr	r0, [pc, #108]	@ (800e69c <Generic_TransitionBehaviour+0x194>)
 800e630:	4613      	mov	r3, r2
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	4413      	add	r3, r2
 800e636:	4403      	add	r3, r0
 800e638:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800e63c:	b21b      	sxth	r3, r3
 800e63e:	b29b      	uxth	r3, r3
      targetRange = 
 800e640:	1acb      	subs	r3, r1, r3
 800e642:	81fb      	strh	r3, [r7, #14]
      
      /* target slot = time to cover in single step */
      targetSlot = targetRange / Generic_TimeParam[elementIndex].StepValue;
 800e644:	89f9      	ldrh	r1, [r7, #14]
 800e646:	78fa      	ldrb	r2, [r7, #3]
 800e648:	4813      	ldr	r0, [pc, #76]	@ (800e698 <Generic_TransitionBehaviour+0x190>)
 800e64a:	4613      	mov	r3, r2
 800e64c:	009b      	lsls	r3, r3, #2
 800e64e:	4413      	add	r3, r2
 800e650:	005b      	lsls	r3, r3, #1
 800e652:	4403      	add	r3, r0
 800e654:	f993 3000 	ldrsb.w	r3, [r3]
 800e658:	fb91 f3f3 	sdiv	r3, r1, r3
 800e65c:	81bb      	strh	r3, [r7, #12]
      /* target slot added to present value to achieve target value */
      Generic_TemporaryStatus[elementIndex].PresentValue16 += targetSlot;      
 800e65e:	78fa      	ldrb	r2, [r7, #3]
 800e660:	490e      	ldr	r1, [pc, #56]	@ (800e69c <Generic_TransitionBehaviour+0x194>)
 800e662:	4613      	mov	r3, r2
 800e664:	009b      	lsls	r3, r3, #2
 800e666:	4413      	add	r3, r2
 800e668:	440b      	add	r3, r1
 800e66a:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800e66e:	b21b      	sxth	r3, r3
 800e670:	b29a      	uxth	r2, r3
 800e672:	89bb      	ldrh	r3, [r7, #12]
 800e674:	4413      	add	r3, r2
 800e676:	b29b      	uxth	r3, r3
 800e678:	78fa      	ldrb	r2, [r7, #3]
 800e67a:	b218      	sxth	r0, r3
 800e67c:	4907      	ldr	r1, [pc, #28]	@ (800e69c <Generic_TransitionBehaviour+0x194>)
 800e67e:	4613      	mov	r3, r2
 800e680:	009b      	lsls	r3, r3, #2
 800e682:	4413      	add	r3, r2
 800e684:	440b      	add	r3, r1
 800e686:	4602      	mov	r2, r0
 800e688:	f8a3 2001 	strh.w	r2, [r3, #1]
 800e68c:	e061      	b.n	800e752 <Generic_TransitionBehaviour+0x24a>
 800e68e:	bf00      	nop
 800e690:	200046f1 	.word	0x200046f1
 800e694:	200046f4 	.word	0x200046f4
 800e698:	200046cc 	.word	0x200046cc
 800e69c:	200046c4 	.word	0x200046c4
 800e6a0:	200046e4 	.word	0x200046e4
    }              
    else if(Generic_TemporaryStatus[elementIndex].TargetValue16 < Generic_TemporaryStatus[elementIndex].PresentValue16)
 800e6a4:	78fa      	ldrb	r2, [r7, #3]
 800e6a6:	497f      	ldr	r1, [pc, #508]	@ (800e8a4 <Generic_TransitionBehaviour+0x39c>)
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	009b      	lsls	r3, r3, #2
 800e6ac:	4413      	add	r3, r2
 800e6ae:	440b      	add	r3, r1
 800e6b0:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800e6b4:	b219      	sxth	r1, r3
 800e6b6:	78fa      	ldrb	r2, [r7, #3]
 800e6b8:	487a      	ldr	r0, [pc, #488]	@ (800e8a4 <Generic_TransitionBehaviour+0x39c>)
 800e6ba:	4613      	mov	r3, r2
 800e6bc:	009b      	lsls	r3, r3, #2
 800e6be:	4413      	add	r3, r2
 800e6c0:	4403      	add	r3, r0
 800e6c2:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800e6c6:	b21b      	sxth	r3, r3
 800e6c8:	4299      	cmp	r1, r3
 800e6ca:	da42      	bge.n	800e752 <Generic_TransitionBehaviour+0x24a>
    {  
      Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0;
 800e6cc:	78fa      	ldrb	r2, [r7, #3]
 800e6ce:	4976      	ldr	r1, [pc, #472]	@ (800e8a8 <Generic_TransitionBehaviour+0x3a0>)
 800e6d0:	4613      	mov	r3, r2
 800e6d2:	005b      	lsls	r3, r3, #1
 800e6d4:	4413      	add	r3, r2
 800e6d6:	005b      	lsls	r3, r3, #1
 800e6d8:	440b      	add	r3, r1
 800e6da:	2200      	movs	r2, #0
 800e6dc:	701a      	strb	r2, [r3, #0]
      /* condition execute when transition is negative */
      /* target range = total range to be covered */ 
      targetRange = Generic_TemporaryStatus[elementIndex].PresentValue16 - Generic_TemporaryStatus[elementIndex].TargetValue16;
 800e6de:	78fa      	ldrb	r2, [r7, #3]
 800e6e0:	4970      	ldr	r1, [pc, #448]	@ (800e8a4 <Generic_TransitionBehaviour+0x39c>)
 800e6e2:	4613      	mov	r3, r2
 800e6e4:	009b      	lsls	r3, r3, #2
 800e6e6:	4413      	add	r3, r2
 800e6e8:	440b      	add	r3, r1
 800e6ea:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800e6ee:	b21b      	sxth	r3, r3
 800e6f0:	b299      	uxth	r1, r3
 800e6f2:	78fa      	ldrb	r2, [r7, #3]
 800e6f4:	486b      	ldr	r0, [pc, #428]	@ (800e8a4 <Generic_TransitionBehaviour+0x39c>)
 800e6f6:	4613      	mov	r3, r2
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	4413      	add	r3, r2
 800e6fc:	4403      	add	r3, r0
 800e6fe:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800e702:	b21b      	sxth	r3, r3
 800e704:	b29b      	uxth	r3, r3
 800e706:	1acb      	subs	r3, r1, r3
 800e708:	81fb      	strh	r3, [r7, #14]
      /* target slot = time to cover in single step */
      targetSlot = targetRange / Generic_TimeParam[elementIndex].StepValue;
 800e70a:	89f9      	ldrh	r1, [r7, #14]
 800e70c:	78fa      	ldrb	r2, [r7, #3]
 800e70e:	4867      	ldr	r0, [pc, #412]	@ (800e8ac <Generic_TransitionBehaviour+0x3a4>)
 800e710:	4613      	mov	r3, r2
 800e712:	009b      	lsls	r3, r3, #2
 800e714:	4413      	add	r3, r2
 800e716:	005b      	lsls	r3, r3, #1
 800e718:	4403      	add	r3, r0
 800e71a:	f993 3000 	ldrsb.w	r3, [r3]
 800e71e:	fb91 f3f3 	sdiv	r3, r1, r3
 800e722:	81bb      	strh	r3, [r7, #12]
      /* target slot = time to cover in single step */
      Generic_TemporaryStatus[elementIndex].PresentValue16 -= targetSlot; 
 800e724:	78fa      	ldrb	r2, [r7, #3]
 800e726:	495f      	ldr	r1, [pc, #380]	@ (800e8a4 <Generic_TransitionBehaviour+0x39c>)
 800e728:	4613      	mov	r3, r2
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	4413      	add	r3, r2
 800e72e:	440b      	add	r3, r1
 800e730:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800e734:	b21b      	sxth	r3, r3
 800e736:	b29a      	uxth	r2, r3
 800e738:	89bb      	ldrh	r3, [r7, #12]
 800e73a:	1ad3      	subs	r3, r2, r3
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	78fa      	ldrb	r2, [r7, #3]
 800e740:	b218      	sxth	r0, r3
 800e742:	4958      	ldr	r1, [pc, #352]	@ (800e8a4 <Generic_TransitionBehaviour+0x39c>)
 800e744:	4613      	mov	r3, r2
 800e746:	009b      	lsls	r3, r3, #2
 800e748:	4413      	add	r3, r2
 800e74a:	440b      	add	r3, r1
 800e74c:	4602      	mov	r2, r0
 800e74e:	f8a3 2001 	strh.w	r2, [r3, #1]
    }     
    else
    {
      
    }
    Generic_TimeParam[elementIndex].StepValue--;
 800e752:	78fa      	ldrb	r2, [r7, #3]
 800e754:	4955      	ldr	r1, [pc, #340]	@ (800e8ac <Generic_TransitionBehaviour+0x3a4>)
 800e756:	4613      	mov	r3, r2
 800e758:	009b      	lsls	r3, r3, #2
 800e75a:	4413      	add	r3, r2
 800e75c:	005b      	lsls	r3, r3, #1
 800e75e:	440b      	add	r3, r1
 800e760:	f993 3000 	ldrsb.w	r3, [r3]
 800e764:	b2db      	uxtb	r3, r3
 800e766:	3b01      	subs	r3, #1
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	b258      	sxtb	r0, r3
 800e76c:	494f      	ldr	r1, [pc, #316]	@ (800e8ac <Generic_TransitionBehaviour+0x3a4>)
 800e76e:	4613      	mov	r3, r2
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	4413      	add	r3, r2
 800e774:	005b      	lsls	r3, r3, #1
 800e776:	440b      	add	r3, r1
 800e778:	4602      	mov	r2, r0
 800e77a:	701a      	strb	r2, [r3, #0]
    /* updating the remaining time after each step covered*/
    Generic_TemporaryStatus[elementIndex].RemainingTime = Generic_TimeParam[elementIndex].StepValue | (Generic_TimeParam[elementIndex].ResBitValue << 6) ;
 800e77c:	78fa      	ldrb	r2, [r7, #3]
 800e77e:	494b      	ldr	r1, [pc, #300]	@ (800e8ac <Generic_TransitionBehaviour+0x3a4>)
 800e780:	4613      	mov	r3, r2
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	4413      	add	r3, r2
 800e786:	005b      	lsls	r3, r3, #1
 800e788:	440b      	add	r3, r1
 800e78a:	f993 1000 	ldrsb.w	r1, [r3]
 800e78e:	78fa      	ldrb	r2, [r7, #3]
 800e790:	4846      	ldr	r0, [pc, #280]	@ (800e8ac <Generic_TransitionBehaviour+0x3a4>)
 800e792:	4613      	mov	r3, r2
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	4413      	add	r3, r2
 800e798:	005b      	lsls	r3, r3, #1
 800e79a:	4403      	add	r3, r0
 800e79c:	3301      	adds	r3, #1
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	019b      	lsls	r3, r3, #6
 800e7a2:	b25b      	sxtb	r3, r3
 800e7a4:	430b      	orrs	r3, r1
 800e7a6:	b25b      	sxtb	r3, r3
 800e7a8:	78fa      	ldrb	r2, [r7, #3]
 800e7aa:	b2d8      	uxtb	r0, r3
 800e7ac:	493d      	ldr	r1, [pc, #244]	@ (800e8a4 <Generic_TransitionBehaviour+0x39c>)
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	009b      	lsls	r3, r3, #2
 800e7b2:	4413      	add	r3, r2
 800e7b4:	440b      	add	r3, r1
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	701a      	strb	r2, [r3, #0]
   
    Check_time = 0;
 800e7ba:	4b3d      	ldr	r3, [pc, #244]	@ (800e8b0 <Generic_TransitionBehaviour+0x3a8>)
 800e7bc:	2200      	movs	r2, #0
 800e7be:	601a      	str	r2, [r3, #0]
    Clockflag = 0;
 800e7c0:	4b3c      	ldr	r3, [pc, #240]	@ (800e8b4 <Generic_TransitionBehaviour+0x3ac>)
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	701a      	strb	r2, [r3, #0]
    GenericUpdateFlag = VALUE_UPDATE_SET;
 800e7c6:	4b3c      	ldr	r3, [pc, #240]	@ (800e8b8 <Generic_TransitionBehaviour+0x3b0>)
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	701a      	strb	r2, [r3, #0]
    /* when transition is completed, disable the transition by disabling 
       transition flag
    */
    if(Generic_TimeParam[elementIndex].StepValue <= 0)
 800e7cc:	78fa      	ldrb	r2, [r7, #3]
 800e7ce:	4937      	ldr	r1, [pc, #220]	@ (800e8ac <Generic_TransitionBehaviour+0x3a4>)
 800e7d0:	4613      	mov	r3, r2
 800e7d2:	009b      	lsls	r3, r3, #2
 800e7d4:	4413      	add	r3, r2
 800e7d6:	005b      	lsls	r3, r3, #1
 800e7d8:	440b      	add	r3, r1
 800e7da:	f993 3000 	ldrsb.w	r3, [r3]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	dc32      	bgt.n	800e848 <Generic_TransitionBehaviour+0x340>
    {
      if((Generic_OnOffStatus[elementIndex].Present_OnOff_State == 1) && (Generic_OnOffStatus[elementIndex].Target_OnOff == 0))
 800e7e2:	78fa      	ldrb	r2, [r7, #3]
 800e7e4:	4930      	ldr	r1, [pc, #192]	@ (800e8a8 <Generic_TransitionBehaviour+0x3a0>)
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	005b      	lsls	r3, r3, #1
 800e7ea:	4413      	add	r3, r2
 800e7ec:	005b      	lsls	r3, r3, #1
 800e7ee:	440b      	add	r3, r1
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d114      	bne.n	800e820 <Generic_TransitionBehaviour+0x318>
 800e7f6:	78fa      	ldrb	r2, [r7, #3]
 800e7f8:	492b      	ldr	r1, [pc, #172]	@ (800e8a8 <Generic_TransitionBehaviour+0x3a0>)
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	005b      	lsls	r3, r3, #1
 800e7fe:	4413      	add	r3, r2
 800e800:	005b      	lsls	r3, r3, #1
 800e802:	440b      	add	r3, r1
 800e804:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e808:	b29b      	uxth	r3, r3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d108      	bne.n	800e820 <Generic_TransitionBehaviour+0x318>
      {
        Generic_OnOffStatus[elementIndex].Present_OnOff_State=0;
 800e80e:	78fa      	ldrb	r2, [r7, #3]
 800e810:	4925      	ldr	r1, [pc, #148]	@ (800e8a8 <Generic_TransitionBehaviour+0x3a0>)
 800e812:	4613      	mov	r3, r2
 800e814:	005b      	lsls	r3, r3, #1
 800e816:	4413      	add	r3, r2
 800e818:	005b      	lsls	r3, r3, #1
 800e81a:	440b      	add	r3, r1
 800e81c:	2200      	movs	r2, #0
 800e81e:	701a      	strb	r2, [r3, #0]
      }
      Generic_ModelFlag[elementIndex].GenericTransitionFlag = MODEL_TRANSITION_STOP; 
 800e820:	78fa      	ldrb	r2, [r7, #3]
 800e822:	4926      	ldr	r1, [pc, #152]	@ (800e8bc <Generic_TransitionBehaviour+0x3b4>)
 800e824:	4613      	mov	r3, r2
 800e826:	005b      	lsls	r3, r3, #1
 800e828:	4413      	add	r3, r2
 800e82a:	440b      	add	r3, r1
 800e82c:	2200      	movs	r2, #0
 800e82e:	701a      	strb	r2, [r3, #0]
      Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt = MOBLE_TRUE;
 800e830:	78fa      	ldrb	r2, [r7, #3]
 800e832:	4922      	ldr	r1, [pc, #136]	@ (800e8bc <Generic_TransitionBehaviour+0x3b4>)
 800e834:	4613      	mov	r3, r2
 800e836:	005b      	lsls	r3, r3, #1
 800e838:	4413      	add	r3, r2
 800e83a:	440b      	add	r3, r1
 800e83c:	3302      	adds	r3, #2
 800e83e:	2201      	movs	r2, #1
 800e840:	701a      	strb	r2, [r3, #0]
      Publication1SecFlag.TimeStampFlag = MOBLE_FALSE;  
 800e842:	4b1f      	ldr	r3, [pc, #124]	@ (800e8c0 <Generic_TransitionBehaviour+0x3b8>)
 800e844:	2200      	movs	r2, #0
 800e846:	705a      	strb	r2, [r3, #1]
    }
    TRACE_M(TF_GENERIC_M, "Inside virtual application at %ld, Current state 0x%.2x, Target state 0x%.2x, Remaining Time 0x%.2x \n\r",
 800e848:	2100      	movs	r1, #0
 800e84a:	481e      	ldr	r0, [pc, #120]	@ (800e8c4 <Generic_TransitionBehaviour+0x3bc>)
 800e84c:	f7fe fc08 	bl	800d060 <TraceHeader>
 800e850:	f7f8 f968 	bl	8006b24 <HAL_GetTick>
 800e854:	4601      	mov	r1, r0
 800e856:	78fa      	ldrb	r2, [r7, #3]
 800e858:	4812      	ldr	r0, [pc, #72]	@ (800e8a4 <Generic_TransitionBehaviour+0x39c>)
 800e85a:	4613      	mov	r3, r2
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	4413      	add	r3, r2
 800e860:	4403      	add	r3, r0
 800e862:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800e866:	b21b      	sxth	r3, r3
 800e868:	461c      	mov	r4, r3
 800e86a:	78fa      	ldrb	r2, [r7, #3]
 800e86c:	480d      	ldr	r0, [pc, #52]	@ (800e8a4 <Generic_TransitionBehaviour+0x39c>)
 800e86e:	4613      	mov	r3, r2
 800e870:	009b      	lsls	r3, r3, #2
 800e872:	4413      	add	r3, r2
 800e874:	4403      	add	r3, r0
 800e876:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800e87a:	b21b      	sxth	r3, r3
 800e87c:	461d      	mov	r5, r3
 800e87e:	78fa      	ldrb	r2, [r7, #3]
 800e880:	4808      	ldr	r0, [pc, #32]	@ (800e8a4 <Generic_TransitionBehaviour+0x39c>)
 800e882:	4613      	mov	r3, r2
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	4413      	add	r3, r2
 800e888:	4403      	add	r3, r0
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	9300      	str	r3, [sp, #0]
 800e88e:	462b      	mov	r3, r5
 800e890:	4622      	mov	r2, r4
 800e892:	480d      	ldr	r0, [pc, #52]	@ (800e8c8 <Generic_TransitionBehaviour+0x3c0>)
 800e894:	f017 fffe 	bl	8026894 <iprintf>
            Clock_Time(), Generic_TemporaryStatus[elementIndex].PresentValue16,Generic_TemporaryStatus[elementIndex].TargetValue16,Generic_TemporaryStatus[elementIndex].RemainingTime);                     
  }
  return MOBLE_RESULT_SUCCESS;       
 800e898:	2300      	movs	r3, #0

} 
 800e89a:	4618      	mov	r0, r3
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bdb0      	pop	{r4, r5, r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	200046c4 	.word	0x200046c4
 800e8a8:	200046e4 	.word	0x200046e4
 800e8ac:	200046cc 	.word	0x200046cc
 800e8b0:	200046f4 	.word	0x200046f4
 800e8b4:	200046f1 	.word	0x200046f1
 800e8b8:	200046ef 	.word	0x200046ef
 800e8bc:	200046ec 	.word	0x200046ec
 800e8c0:	200046f8 	.word	0x200046f8
 800e8c4:	0802e308 	.word	0x0802e308
 800e8c8:	0802adf0 	.word	0x0802adf0

0800e8cc <Generic_GetStepValue>:
*                     is elementNumber-1
* retval void
*/
void Generic_GetStepValue(MOBLEUINT8 stepParam, 
                          MOBLEUINT8 elementIndex)
{
 800e8cc:	b590      	push	{r4, r7, lr}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	460a      	mov	r2, r1
 800e8d6:	71fb      	strb	r3, [r7, #7]
 800e8d8:	4613      	mov	r3, r2
 800e8da:	71bb      	strb	r3, [r7, #6]
    10 = resolution is 10000 ms.
    11 = resolution is 600000 ms. 
    Last bits from 0 to 5th index is step number.
  */
  
  Generic_TimeParam[elementIndex].ResBitValue = stepParam >> 6 ;
 800e8dc:	79ba      	ldrb	r2, [r7, #6]
 800e8de:	79fb      	ldrb	r3, [r7, #7]
 800e8e0:	099b      	lsrs	r3, r3, #6
 800e8e2:	b2d8      	uxtb	r0, r3
 800e8e4:	494b      	ldr	r1, [pc, #300]	@ (800ea14 <Generic_GetStepValue+0x148>)
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4413      	add	r3, r2
 800e8ec:	005b      	lsls	r3, r3, #1
 800e8ee:	440b      	add	r3, r1
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	701a      	strb	r2, [r3, #0]
  Generic_TimeParam[elementIndex].Res_Value = Get_StepResolutionValue(Generic_TimeParam[elementIndex].ResBitValue);
 800e8f6:	79ba      	ldrb	r2, [r7, #6]
 800e8f8:	4946      	ldr	r1, [pc, #280]	@ (800ea14 <Generic_GetStepValue+0x148>)
 800e8fa:	4613      	mov	r3, r2
 800e8fc:	009b      	lsls	r3, r3, #2
 800e8fe:	4413      	add	r3, r2
 800e900:	005b      	lsls	r3, r3, #1
 800e902:	440b      	add	r3, r1
 800e904:	3301      	adds	r3, #1
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	79bc      	ldrb	r4, [r7, #6]
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fe fb7c 	bl	800d008 <Get_StepResolutionValue>
 800e910:	4602      	mov	r2, r0
 800e912:	4940      	ldr	r1, [pc, #256]	@ (800ea14 <Generic_GetStepValue+0x148>)
 800e914:	4623      	mov	r3, r4
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	4423      	add	r3, r4
 800e91a:	005b      	lsls	r3, r3, #1
 800e91c:	440b      	add	r3, r1
 800e91e:	f8c3 2002 	str.w	r2, [r3, #2]
  Generic_TimeParam[elementIndex].StepValue = stepParam & 0x3F ;
 800e922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e926:	79ba      	ldrb	r2, [r7, #6]
 800e928:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e92c:	b258      	sxtb	r0, r3
 800e92e:	4939      	ldr	r1, [pc, #228]	@ (800ea14 <Generic_GetStepValue+0x148>)
 800e930:	4613      	mov	r3, r2
 800e932:	009b      	lsls	r3, r3, #2
 800e934:	4413      	add	r3, r2
 800e936:	005b      	lsls	r3, r3, #1
 800e938:	440b      	add	r3, r1
 800e93a:	4602      	mov	r2, r0
 800e93c:	701a      	strb	r2, [r3, #0]
  Generic_TimeParam[elementIndex].TotalTime = (Generic_TimeParam[elementIndex].StepValue * Generic_TimeParam[elementIndex].Res_Value);
 800e93e:	79ba      	ldrb	r2, [r7, #6]
 800e940:	4934      	ldr	r1, [pc, #208]	@ (800ea14 <Generic_GetStepValue+0x148>)
 800e942:	4613      	mov	r3, r2
 800e944:	009b      	lsls	r3, r3, #2
 800e946:	4413      	add	r3, r2
 800e948:	005b      	lsls	r3, r3, #1
 800e94a:	440b      	add	r3, r1
 800e94c:	f993 3000 	ldrsb.w	r3, [r3]
 800e950:	4618      	mov	r0, r3
 800e952:	79ba      	ldrb	r2, [r7, #6]
 800e954:	492f      	ldr	r1, [pc, #188]	@ (800ea14 <Generic_GetStepValue+0x148>)
 800e956:	4613      	mov	r3, r2
 800e958:	009b      	lsls	r3, r3, #2
 800e95a:	4413      	add	r3, r2
 800e95c:	005b      	lsls	r3, r3, #1
 800e95e:	440b      	add	r3, r1
 800e960:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800e964:	79ba      	ldrb	r2, [r7, #6]
 800e966:	fb03 f100 	mul.w	r1, r3, r0
 800e96a:	482a      	ldr	r0, [pc, #168]	@ (800ea14 <Generic_GetStepValue+0x148>)
 800e96c:	4613      	mov	r3, r2
 800e96e:	009b      	lsls	r3, r3, #2
 800e970:	4413      	add	r3, r2
 800e972:	005b      	lsls	r3, r3, #1
 800e974:	4403      	add	r3, r0
 800e976:	f8c3 1006 	str.w	r1, [r3, #6]
  
  if(Generic_TimeParam[elementIndex].Res_Value >= 100)
 800e97a:	79ba      	ldrb	r2, [r7, #6]
 800e97c:	4925      	ldr	r1, [pc, #148]	@ (800ea14 <Generic_GetStepValue+0x148>)
 800e97e:	4613      	mov	r3, r2
 800e980:	009b      	lsls	r3, r3, #2
 800e982:	4413      	add	r3, r2
 800e984:	005b      	lsls	r3, r3, #1
 800e986:	440b      	add	r3, r1
 800e988:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800e98c:	2b63      	cmp	r3, #99	@ 0x63
 800e98e:	d923      	bls.n	800e9d8 <Generic_GetStepValue+0x10c>
  {
    Generic_TimeParam[elementIndex].Res_Value = Generic_TimeParam[elementIndex].Res_Value/TRANSITION_SCALER;
 800e990:	79b9      	ldrb	r1, [r7, #6]
 800e992:	79ba      	ldrb	r2, [r7, #6]
 800e994:	481f      	ldr	r0, [pc, #124]	@ (800ea14 <Generic_GetStepValue+0x148>)
 800e996:	460b      	mov	r3, r1
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	440b      	add	r3, r1
 800e99c:	005b      	lsls	r3, r3, #1
 800e99e:	4403      	add	r3, r0
 800e9a0:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800e9a4:	481b      	ldr	r0, [pc, #108]	@ (800ea14 <Generic_GetStepValue+0x148>)
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	4413      	add	r3, r2
 800e9ac:	005b      	lsls	r3, r3, #1
 800e9ae:	4403      	add	r3, r0
 800e9b0:	f8c3 1002 	str.w	r1, [r3, #2]
    Generic_TimeParam[elementIndex].StepValue = (Generic_TimeParam[elementIndex].StepValue * TRANSITION_SCALER);
 800e9b4:	79b9      	ldrb	r1, [r7, #6]
 800e9b6:	79ba      	ldrb	r2, [r7, #6]
 800e9b8:	4816      	ldr	r0, [pc, #88]	@ (800ea14 <Generic_GetStepValue+0x148>)
 800e9ba:	460b      	mov	r3, r1
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	440b      	add	r3, r1
 800e9c0:	005b      	lsls	r3, r3, #1
 800e9c2:	4403      	add	r3, r0
 800e9c4:	f993 0000 	ldrsb.w	r0, [r3]
 800e9c8:	4912      	ldr	r1, [pc, #72]	@ (800ea14 <Generic_GetStepValue+0x148>)
 800e9ca:	4613      	mov	r3, r2
 800e9cc:	009b      	lsls	r3, r3, #2
 800e9ce:	4413      	add	r3, r2
 800e9d0:	005b      	lsls	r3, r3, #1
 800e9d2:	440b      	add	r3, r1
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	701a      	strb	r2, [r3, #0]
  }
  
  TRACE_M(TF_GENERIC_M," step resolution 0x%.2lx, number of step 0x%.2x \r\n",
 800e9d8:	2100      	movs	r1, #0
 800e9da:	480f      	ldr	r0, [pc, #60]	@ (800ea18 <Generic_GetStepValue+0x14c>)
 800e9dc:	f7fe fb40 	bl	800d060 <TraceHeader>
 800e9e0:	79ba      	ldrb	r2, [r7, #6]
 800e9e2:	490c      	ldr	r1, [pc, #48]	@ (800ea14 <Generic_GetStepValue+0x148>)
 800e9e4:	4613      	mov	r3, r2
 800e9e6:	009b      	lsls	r3, r3, #2
 800e9e8:	4413      	add	r3, r2
 800e9ea:	005b      	lsls	r3, r3, #1
 800e9ec:	440b      	add	r3, r1
 800e9ee:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800e9f2:	79ba      	ldrb	r2, [r7, #6]
 800e9f4:	4807      	ldr	r0, [pc, #28]	@ (800ea14 <Generic_GetStepValue+0x148>)
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	009b      	lsls	r3, r3, #2
 800e9fa:	4413      	add	r3, r2
 800e9fc:	005b      	lsls	r3, r3, #1
 800e9fe:	4403      	add	r3, r0
 800ea00:	f993 3000 	ldrsb.w	r3, [r3]
 800ea04:	461a      	mov	r2, r3
 800ea06:	4805      	ldr	r0, [pc, #20]	@ (800ea1c <Generic_GetStepValue+0x150>)
 800ea08:	f017 ff44 	bl	8026894 <iprintf>
          Generic_TimeParam[elementIndex].Res_Value , Generic_TimeParam[elementIndex].StepValue );   
}
 800ea0c:	bf00      	nop
 800ea0e:	370c      	adds	r7, #12
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd90      	pop	{r4, r7, pc}
 800ea14:	200046cc 	.word	0x200046cc
 800ea18:	0802e324 	.word	0x0802e324
 800ea1c:	0802ae58 	.word	0x0802ae58

0800ea20 <Generic_Process>:
*         particular Generic Model
* @param  void
* @retval void
*/ 
void Generic_Process(void)
{       
 800ea20:	b590      	push	{r4, r7, lr}
 800ea22:	b08d      	sub	sp, #52	@ 0x34
 800ea24:	af02      	add	r7, sp, #8
  MOBLE_ADDRESS publishAddress;
  MOBLE_ADDRESS my_Address = BLEMesh_GetAddress();
 800ea26:	f00b fc85 	bl	801a334 <BLEMesh_GetAddress>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  MOBLEUINT8 elementIndex;
  MOBLEUINT8 const pRxData[8] = {0};
 800ea2e:	2300      	movs	r3, #0
 800ea30:	617b      	str	r3, [r7, #20]
 800ea32:	2300      	movs	r3, #0
 800ea34:	61bb      	str	r3, [r7, #24]
  MOBLEUINT32 dataLength = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	623b      	str	r3, [r7, #32]
  
#if defined ENABLE_GENERIC_MODEL_SERVER_ONOFF || defined ENABLE_GENERIC_MODEL_SERVER_LEVEL  
  MOBLEUINT8 Generic_GetBuff[8]; 
#endif     
  
  for(elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800ea40:	e10a      	b.n	800ec58 <Generic_Process+0x238>
  {
    my_Address = my_Address+elementIndex;
 800ea42:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ea46:	b29a      	uxth	r2, r3
 800ea48:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ea4a:	4413      	add	r3, r2
 800ea4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF   
    if(Generic_ModelFlag[elementIndex].GenericTransitionFlag == GENERIC_ON_OFF_TRANSITION_START)
 800ea4e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ea52:	4986      	ldr	r1, [pc, #536]	@ (800ec6c <Generic_Process+0x24c>)
 800ea54:	4613      	mov	r3, r2
 800ea56:	005b      	lsls	r3, r3, #1
 800ea58:	4413      	add	r3, r2
 800ea5a:	440b      	add	r3, r1
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d16e      	bne.n	800eb40 <Generic_Process+0x120>
    {   
      /* Fetching the state value from the application layer to middle layer */
      (Appli_GenericState_cb.GetOnOffValue_cb)(Generic_GetBuff, my_Address, elementIndex); 
 800ea62:	4b83      	ldr	r3, [pc, #524]	@ (800ec70 <Generic_Process+0x250>)
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ea6a:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 800ea6c:	f107 000c 	add.w	r0, r7, #12
 800ea70:	4798      	blx	r3
      
      Generic_TemporaryStatus[elementIndex].TargetValue16  = Generic_GetBuff[3] << 8;
 800ea72:	7bfb      	ldrb	r3, [r7, #15]
 800ea74:	021b      	lsls	r3, r3, #8
 800ea76:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ea7a:	b218      	sxth	r0, r3
 800ea7c:	497d      	ldr	r1, [pc, #500]	@ (800ec74 <Generic_Process+0x254>)
 800ea7e:	4613      	mov	r3, r2
 800ea80:	009b      	lsls	r3, r3, #2
 800ea82:	4413      	add	r3, r2
 800ea84:	440b      	add	r3, r1
 800ea86:	4602      	mov	r2, r0
 800ea88:	f8a3 2003 	strh.w	r2, [r3, #3]
      Generic_TemporaryStatus[elementIndex].TargetValue16 |= Generic_GetBuff[2];
 800ea8c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ea90:	4978      	ldr	r1, [pc, #480]	@ (800ec74 <Generic_Process+0x254>)
 800ea92:	4613      	mov	r3, r2
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	4413      	add	r3, r2
 800ea98:	440b      	add	r3, r1
 800ea9a:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ea9e:	b219      	sxth	r1, r3
 800eaa0:	7bbb      	ldrb	r3, [r7, #14]
 800eaa2:	b21b      	sxth	r3, r3
 800eaa4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eaa8:	430b      	orrs	r3, r1
 800eaaa:	b218      	sxth	r0, r3
 800eaac:	4971      	ldr	r1, [pc, #452]	@ (800ec74 <Generic_Process+0x254>)
 800eaae:	4613      	mov	r3, r2
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	4413      	add	r3, r2
 800eab4:	440b      	add	r3, r1
 800eab6:	4602      	mov	r2, r0
 800eab8:	f8a3 2003 	strh.w	r2, [r3, #3]
      
      /* Transition function called to change the state in transition */
      Generic_TransitionBehaviour(Generic_GetBuff, elementIndex); 
 800eabc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eac0:	f107 030c 	add.w	r3, r7, #12
 800eac4:	4611      	mov	r1, r2
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7ff fd1e 	bl	800e508 <Generic_TransitionBehaviour>
      if(GenericUpdateFlag == VALUE_UPDATE_SET)
 800eacc:	4b6a      	ldr	r3, [pc, #424]	@ (800ec78 <Generic_Process+0x258>)
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d135      	bne.n	800eb40 <Generic_Process+0x120>
      {
        /* updating the state value after the each transition step complete */
        Generic_OnOffStateUpdate_Process(elementIndex);
 800ead4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ead8:	4618      	mov	r0, r3
 800eada:	f000 f8d9 	bl	800ec90 <Generic_OnOffStateUpdate_Process>
        /* Application callback */
        (GenericAppli_cb.OnOff_Set_cb)(&Generic_OnOffStatus[elementIndex], OptionalParam, my_Address, elementIndex);  
 800eade:	4b67      	ldr	r3, [pc, #412]	@ (800ec7c <Generic_Process+0x25c>)
 800eae0:	681c      	ldr	r4, [r3, #0]
 800eae2:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eae6:	4613      	mov	r3, r2
 800eae8:	005b      	lsls	r3, r3, #1
 800eaea:	4413      	add	r3, r2
 800eaec:	005b      	lsls	r3, r3, #1
 800eaee:	4a64      	ldr	r2, [pc, #400]	@ (800ec80 <Generic_Process+0x260>)
 800eaf0:	1898      	adds	r0, r3, r2
 800eaf2:	4b64      	ldr	r3, [pc, #400]	@ (800ec84 <Generic_Process+0x264>)
 800eaf4:	7819      	ldrb	r1, [r3, #0]
 800eaf6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800eafa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800eafc:	47a0      	blx	r4
        /*binding of the generic on off with light model */
        GenericOnOff_LightActualBinding(&Generic_OnOffStatus[elementIndex],
 800eafe:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eb02:	4613      	mov	r3, r2
 800eb04:	005b      	lsls	r3, r3, #1
 800eb06:	4413      	add	r3, r2
 800eb08:	005b      	lsls	r3, r3, #1
 800eb0a:	4a5d      	ldr	r2, [pc, #372]	@ (800ec80 <Generic_Process+0x260>)
 800eb0c:	1898      	adds	r0, r3, r2
 800eb0e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eb12:	4956      	ldr	r1, [pc, #344]	@ (800ec6c <Generic_Process+0x24c>)
 800eb14:	4613      	mov	r3, r2
 800eb16:	005b      	lsls	r3, r3, #1
 800eb18:	4413      	add	r3, r2
 800eb1a:	440b      	add	r3, r1
 800eb1c:	781c      	ldrb	r4, [r3, #0]
 800eb1e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eb22:	4952      	ldr	r1, [pc, #328]	@ (800ec6c <Generic_Process+0x24c>)
 800eb24:	4613      	mov	r3, r2
 800eb26:	005b      	lsls	r3, r3, #1
 800eb28:	4413      	add	r3, r2
 800eb2a:	440b      	add	r3, r1
 800eb2c:	3302      	adds	r3, #2
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800eb34:	4622      	mov	r2, r4
 800eb36:	f000 fbfd 	bl	800f334 <GenericOnOff_LightActualBinding>
                                        elementIndex,
                                        Generic_ModelFlag[elementIndex].GenericTransitionFlag,
                                        Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt);
        GenericUpdateFlag = VALUE_UPDATE_RESET;     
 800eb3a:	4b4f      	ldr	r3, [pc, #316]	@ (800ec78 <Generic_Process+0x258>)
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	701a      	strb	r2, [r3, #0]
      }
    }    
#endif 
 
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL       
    if(Generic_ModelFlag[elementIndex].GenericTransitionFlag == GENERIC_LEVEL_TRANSITION_START)
 800eb40:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eb44:	4949      	ldr	r1, [pc, #292]	@ (800ec6c <Generic_Process+0x24c>)
 800eb46:	4613      	mov	r3, r2
 800eb48:	005b      	lsls	r3, r3, #1
 800eb4a:	4413      	add	r3, r2
 800eb4c:	440b      	add	r3, r1
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	2b02      	cmp	r3, #2
 800eb52:	d14a      	bne.n	800ebea <Generic_Process+0x1ca>
    {    
      /* Fetching the state value from the application layer to middle layer */
      (Appli_GenericState_cb.GetLevelStatus_cb)(Generic_GetBuff, my_Address, elementIndex); 
 800eb54:	4b46      	ldr	r3, [pc, #280]	@ (800ec70 <Generic_Process+0x250>)
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eb5c:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 800eb5e:	f107 000c 	add.w	r0, r7, #12
 800eb62:	4798      	blx	r3
      /* Transition function called to change the state in transition */
      Generic_TransitionBehaviour(Generic_GetBuff, elementIndex); 
 800eb64:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eb68:	f107 030c 	add.w	r3, r7, #12
 800eb6c:	4611      	mov	r1, r2
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7ff fcca 	bl	800e508 <Generic_TransitionBehaviour>
      if(GenericUpdateFlag == VALUE_UPDATE_SET)
 800eb74:	4b40      	ldr	r3, [pc, #256]	@ (800ec78 <Generic_Process+0x258>)
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d136      	bne.n	800ebea <Generic_Process+0x1ca>
      {
        /* updating the state value after the each transition step complete */
        Generic_LevelStateUpdate_Process(elementIndex);
 800eb7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800eb80:	4618      	mov	r0, r3
 800eb82:	f000 f931 	bl	800ede8 <Generic_LevelStateUpdate_Process>
        /* Application callback */
        (GenericAppli_cb.Level_Set_cb)(&Generic_LevelStatus[elementIndex], 0, my_Address, elementIndex);  
 800eb86:	4b3d      	ldr	r3, [pc, #244]	@ (800ec7c <Generic_Process+0x25c>)
 800eb88:	689c      	ldr	r4, [r3, #8]
 800eb8a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eb8e:	4613      	mov	r3, r2
 800eb90:	005b      	lsls	r3, r3, #1
 800eb92:	4413      	add	r3, r2
 800eb94:	009b      	lsls	r3, r3, #2
 800eb96:	4a3c      	ldr	r2, [pc, #240]	@ (800ec88 <Generic_Process+0x268>)
 800eb98:	1898      	adds	r0, r3, r2
 800eb9a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800eb9e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800eba0:	2100      	movs	r1, #0
 800eba2:	47a0      	blx	r4
        /*binding of the generic Level with light model */
        GenericLevel_LightBinding(&Generic_LevelStatus[elementIndex],BINDING_GENERIC_LEVEL_SET,
 800eba4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eba8:	4613      	mov	r3, r2
 800ebaa:	005b      	lsls	r3, r3, #1
 800ebac:	4413      	add	r3, r2
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	4a35      	ldr	r2, [pc, #212]	@ (800ec88 <Generic_Process+0x268>)
 800ebb2:	1898      	adds	r0, r3, r2
 800ebb4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ebb8:	492c      	ldr	r1, [pc, #176]	@ (800ec6c <Generic_Process+0x24c>)
 800ebba:	4613      	mov	r3, r2
 800ebbc:	005b      	lsls	r3, r3, #1
 800ebbe:	4413      	add	r3, r2
 800ebc0:	440b      	add	r3, r1
 800ebc2:	7819      	ldrb	r1, [r3, #0]
 800ebc4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ebc8:	4c28      	ldr	r4, [pc, #160]	@ (800ec6c <Generic_Process+0x24c>)
 800ebca:	4613      	mov	r3, r2
 800ebcc:	005b      	lsls	r3, r3, #1
 800ebce:	4413      	add	r3, r2
 800ebd0:	4423      	add	r3, r4
 800ebd2:	3302      	adds	r3, #2
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ebda:	9300      	str	r3, [sp, #0]
 800ebdc:	460b      	mov	r3, r1
 800ebde:	2101      	movs	r1, #1
 800ebe0:	f000 fbc2 	bl	800f368 <GenericLevel_LightBinding>
                                  elementIndex,
                                  Generic_ModelFlag[elementIndex].GenericTransitionFlag,
                                  Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt);
        GenericUpdateFlag = VALUE_UPDATE_RESET;
 800ebe4:	4b24      	ldr	r3, [pc, #144]	@ (800ec78 <Generic_Process+0x258>)
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	701a      	strb	r2, [r3, #0]
      }
      
    }   
#endif
  
    if(Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt == MOBLE_TRUE)
 800ebea:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ebee:	491f      	ldr	r1, [pc, #124]	@ (800ec6c <Generic_Process+0x24c>)
 800ebf0:	4613      	mov	r3, r2
 800ebf2:	005b      	lsls	r3, r3, #1
 800ebf4:	4413      	add	r3, r2
 800ebf6:	440b      	add	r3, r1
 800ebf8:	3302      	adds	r3, #2
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d126      	bne.n	800ec4e <Generic_Process+0x22e>
    {         
      publishAddress = BLEMesh_GetPublishAddress(elementIndex,Model_Binding_Var.Model_ID);
 800ec00:	4b22      	ldr	r3, [pc, #136]	@ (800ec8c <Generic_Process+0x26c>)
 800ec02:	885b      	ldrh	r3, [r3, #2]
 800ec04:	461a      	mov	r2, r3
 800ec06:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ec0a:	4611      	mov	r1, r2
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f00b fba1 	bl	801a354 <BLEMesh_GetPublishAddress>
 800ec12:	4603      	mov	r3, r0
 800ec14:	83fb      	strh	r3, [r7, #30]
      if((publishAddress != 0x00))
 800ec16:	8bfb      	ldrh	r3, [r7, #30]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d00e      	beq.n	800ec3a <Generic_Process+0x21a>
      {

         MODEL_MessageHeader_t msgHdr;
         msgHdr.dst_peer = my_Address;
 800ec1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ec1e:	80fb      	strh	r3, [r7, #6]
         msgHdr.elementIndex = elementIndex;
 800ec20:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ec24:	703b      	strb	r3, [r7, #0]
         msgHdr.peer_addr = publishAddress;
 800ec26:	8bfb      	ldrh	r3, [r7, #30]
 800ec28:	80bb      	strh	r3, [r7, #4]
         Model_SendResponse(&msgHdr, Model_Binding_Var.Model_Rx_Opcode, pRxData, dataLength);
 800ec2a:	4b18      	ldr	r3, [pc, #96]	@ (800ec8c <Generic_Process+0x26c>)
 800ec2c:	8819      	ldrh	r1, [r3, #0]
 800ec2e:	f107 0214 	add.w	r2, r7, #20
 800ec32:	4638      	mov	r0, r7
 800ec34:	6a3b      	ldr	r3, [r7, #32]
 800ec36:	f016 fd31 	bl	802569c <Model_SendResponse>
         TRACE_M(TF_LIGHT_M, "Publishing the status after transition complete opcode %.2x model id %.2x \r\n",
         Model_Binding_Var.Model_Rx_Opcode,Model_Binding_Var.Model_ID);
      }
      Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt = MOBLE_FALSE;
 800ec3a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ec3e:	490b      	ldr	r1, [pc, #44]	@ (800ec6c <Generic_Process+0x24c>)
 800ec40:	4613      	mov	r3, r2
 800ec42:	005b      	lsls	r3, r3, #1
 800ec44:	4413      	add	r3, r2
 800ec46:	440b      	add	r3, r1
 800ec48:	3302      	adds	r3, #2
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	701a      	strb	r2, [r3, #0]
  for(elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800ec4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ec52:	3301      	adds	r3, #1
 800ec54:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800ec58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f43f aef0 	beq.w	800ea42 <Generic_Process+0x22>
    }
  }
}
 800ec62:	bf00      	nop
 800ec64:	bf00      	nop
 800ec66:	372c      	adds	r7, #44	@ 0x2c
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd90      	pop	{r4, r7, pc}
 800ec6c:	200046ec 	.word	0x200046ec
 800ec70:	0802dfe0 	.word	0x0802dfe0
 800ec74:	200046c4 	.word	0x200046c4
 800ec78:	200046ef 	.word	0x200046ef
 800ec7c:	0802dfb8 	.word	0x0802dfb8
 800ec80:	200046e4 	.word	0x200046e4
 800ec84:	200046f0 	.word	0x200046f0
 800ec88:	200046d8 	.word	0x200046d8
 800ec8c:	200046b8 	.word	0x200046b8

0800ec90 <Generic_OnOffStateUpdate_Process>:
*        Generic On Off model in application file from Temporary parameter in model file.
* @param void
* return MOBLE_RESULT.
*/
MOBLE_RESULT Generic_OnOffStateUpdate_Process(MOBLEUINT8 elementIndex)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b083      	sub	sp, #12
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	4603      	mov	r3, r0
 800ec98:	71fb      	strb	r3, [r7, #7]
  Generic_OnOffStatus[elementIndex].Present_OnOff_Value = Generic_TemporaryStatus[elementIndex].PresentValue16;
 800ec9a:	79fa      	ldrb	r2, [r7, #7]
 800ec9c:	492a      	ldr	r1, [pc, #168]	@ (800ed48 <Generic_OnOffStateUpdate_Process+0xb8>)
 800ec9e:	4613      	mov	r3, r2
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	4413      	add	r3, r2
 800eca4:	440b      	add	r3, r1
 800eca6:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ecaa:	b21b      	sxth	r3, r3
 800ecac:	79fa      	ldrb	r2, [r7, #7]
 800ecae:	b298      	uxth	r0, r3
 800ecb0:	4926      	ldr	r1, [pc, #152]	@ (800ed4c <Generic_OnOffStateUpdate_Process+0xbc>)
 800ecb2:	4613      	mov	r3, r2
 800ecb4:	005b      	lsls	r3, r3, #1
 800ecb6:	4413      	add	r3, r2
 800ecb8:	005b      	lsls	r3, r3, #1
 800ecba:	440b      	add	r3, r1
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	f8a3 2001 	strh.w	r2, [r3, #1]
  if(Generic_TemporaryStatus[elementIndex].TargetValue16 == 0x01)
 800ecc2:	79fa      	ldrb	r2, [r7, #7]
 800ecc4:	4920      	ldr	r1, [pc, #128]	@ (800ed48 <Generic_OnOffStateUpdate_Process+0xb8>)
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	009b      	lsls	r3, r3, #2
 800ecca:	4413      	add	r3, r2
 800eccc:	440b      	add	r3, r1
 800ecce:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ecd2:	b21b      	sxth	r3, r3
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d109      	bne.n	800ecec <Generic_OnOffStateUpdate_Process+0x5c>
  {
    Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x01;
 800ecd8:	79fa      	ldrb	r2, [r7, #7]
 800ecda:	491c      	ldr	r1, [pc, #112]	@ (800ed4c <Generic_OnOffStateUpdate_Process+0xbc>)
 800ecdc:	4613      	mov	r3, r2
 800ecde:	005b      	lsls	r3, r3, #1
 800ece0:	4413      	add	r3, r2
 800ece2:	005b      	lsls	r3, r3, #1
 800ece4:	440b      	add	r3, r1
 800ece6:	2201      	movs	r2, #1
 800ece8:	701a      	strb	r2, [r3, #0]
 800ecea:	e014      	b.n	800ed16 <Generic_OnOffStateUpdate_Process+0x86>
  }
  else
  {
    if(Generic_OnOffStatus[elementIndex].Present_OnOff_Value == 0x00)
 800ecec:	79fa      	ldrb	r2, [r7, #7]
 800ecee:	4917      	ldr	r1, [pc, #92]	@ (800ed4c <Generic_OnOffStateUpdate_Process+0xbc>)
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	005b      	lsls	r3, r3, #1
 800ecf4:	4413      	add	r3, r2
 800ecf6:	005b      	lsls	r3, r3, #1
 800ecf8:	440b      	add	r3, r1
 800ecfa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ecfe:	b29b      	uxth	r3, r3
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d108      	bne.n	800ed16 <Generic_OnOffStateUpdate_Process+0x86>
    {
      Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x00;
 800ed04:	79fa      	ldrb	r2, [r7, #7]
 800ed06:	4911      	ldr	r1, [pc, #68]	@ (800ed4c <Generic_OnOffStateUpdate_Process+0xbc>)
 800ed08:	4613      	mov	r3, r2
 800ed0a:	005b      	lsls	r3, r3, #1
 800ed0c:	4413      	add	r3, r2
 800ed0e:	005b      	lsls	r3, r3, #1
 800ed10:	440b      	add	r3, r1
 800ed12:	2200      	movs	r2, #0
 800ed14:	701a      	strb	r2, [r3, #0]
    }
  }
  Generic_OnOffStatus[elementIndex].RemainingTime = Generic_TemporaryStatus[elementIndex].RemainingTime;
 800ed16:	79f9      	ldrb	r1, [r7, #7]
 800ed18:	79fa      	ldrb	r2, [r7, #7]
 800ed1a:	480b      	ldr	r0, [pc, #44]	@ (800ed48 <Generic_OnOffStateUpdate_Process+0xb8>)
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	009b      	lsls	r3, r3, #2
 800ed20:	440b      	add	r3, r1
 800ed22:	4403      	add	r3, r0
 800ed24:	7818      	ldrb	r0, [r3, #0]
 800ed26:	4909      	ldr	r1, [pc, #36]	@ (800ed4c <Generic_OnOffStateUpdate_Process+0xbc>)
 800ed28:	4613      	mov	r3, r2
 800ed2a:	005b      	lsls	r3, r3, #1
 800ed2c:	4413      	add	r3, r2
 800ed2e:	005b      	lsls	r3, r3, #1
 800ed30:	440b      	add	r3, r1
 800ed32:	3305      	adds	r3, #5
 800ed34:	4602      	mov	r2, r0
 800ed36:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	370c      	adds	r7, #12
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop
 800ed48:	200046c4 	.word	0x200046c4
 800ed4c:	200046e4 	.word	0x200046e4

0800ed50 <Generic_Publish>:
*         button.
* @param  srcAddress: Source Address of the node 
* @retval void
*/ 
void Generic_Publish(MOBLE_ADDRESS srcAddress)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b088      	sub	sp, #32
 800ed54:	af04      	add	r7, sp, #16
 800ed56:	4603      	mov	r3, r0
 800ed58:	80fb      	strh	r3, [r7, #6]
  MOBLEUINT8 generic_Buff[2]; 
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	73fb      	strb	r3, [r7, #15]
  
  /* changes the LED status on other nodes in the network */
  if(CommandStatus == (MOBLEUINT16)APPLI_LED_ON)
 800ed5e:	4b1e      	ldr	r3, [pc, #120]	@ (800edd8 <Generic_Publish+0x88>)
 800ed60:	881b      	ldrh	r3, [r3, #0]
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d102      	bne.n	800ed6c <Generic_Publish+0x1c>
  {
    generic_Buff[0] = APPLI_LED_OFF;
 800ed66:	2300      	movs	r3, #0
 800ed68:	733b      	strb	r3, [r7, #12]
 800ed6a:	e001      	b.n	800ed70 <Generic_Publish+0x20>
  }
  else
  {
    generic_Buff[0] = APPLI_LED_ON;
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	733b      	strb	r3, [r7, #12]
  }
  generic_Buff[1] = Model_Tid.TidSend;
 800ed70:	4b1a      	ldr	r3, [pc, #104]	@ (800eddc <Generic_Publish+0x8c>)
 800ed72:	785b      	ldrb	r3, [r3, #1]
 800ed74:	737b      	strb	r3, [r7, #13]
  
  result = BLEMesh_SetRemotePublication(GENERIC_ONOFF_SERVER_MODEL_ID, 
 800ed76:	f107 030c 	add.w	r3, r7, #12
 800ed7a:	88f9      	ldrh	r1, [r7, #6]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	9202      	str	r2, [sp, #8]
 800ed80:	2200      	movs	r2, #0
 800ed82:	9201      	str	r2, [sp, #4]
 800ed84:	2202      	movs	r2, #2
 800ed86:	9200      	str	r2, [sp, #0]
 800ed88:	f248 2203 	movw	r2, #33283	@ 0x8203
 800ed8c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800ed90:	f016 fd4a 	bl	8025828 <BLEMesh_SetRemotePublication>
 800ed94:	4603      	mov	r3, r0
 800ed96:	73fb      	strb	r3, [r7, #15]
                                        srcAddress ,
                                        GENERIC_ON_OFF_SET_UNACK, 
                                        generic_Buff, 2,
                                        MOBLE_FALSE, MOBLE_FALSE);
  Model_Tid.TidSend++;
 800ed98:	4b10      	ldr	r3, [pc, #64]	@ (800eddc <Generic_Publish+0x8c>)
 800ed9a:	785b      	ldrb	r3, [r3, #1]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	b2da      	uxtb	r2, r3
 800eda0:	4b0e      	ldr	r3, [pc, #56]	@ (800eddc <Generic_Publish+0x8c>)
 800eda2:	705a      	strb	r2, [r3, #1]
  if(Model_Tid.TidSend >= MAX_TID_VALUE)
 800eda4:	4b0d      	ldr	r3, [pc, #52]	@ (800eddc <Generic_Publish+0x8c>)
 800eda6:	785b      	ldrb	r3, [r3, #1]
 800eda8:	2bff      	cmp	r3, #255	@ 0xff
 800edaa:	d102      	bne.n	800edb2 <Generic_Publish+0x62>
  {
    Model_Tid.TidSend = 0;
 800edac:	4b0b      	ldr	r3, [pc, #44]	@ (800eddc <Generic_Publish+0x8c>)
 800edae:	2200      	movs	r2, #0
 800edb0:	705a      	strb	r2, [r3, #1]
  }  
  if(result)
 800edb2:	7bfb      	ldrb	r3, [r7, #15]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d006      	beq.n	800edc6 <Generic_Publish+0x76>
  {
    TRACE_M(TF_GENERIC_M, "Publication Error \r\n");
 800edb8:	2100      	movs	r1, #0
 800edba:	4809      	ldr	r0, [pc, #36]	@ (800ede0 <Generic_Publish+0x90>)
 800edbc:	f7fe f950 	bl	800d060 <TraceHeader>
 800edc0:	4808      	ldr	r0, [pc, #32]	@ (800ede4 <Generic_Publish+0x94>)
 800edc2:	f017 fdcf 	bl	8026964 <puts>
  }
  
  CommandStatus = generic_Buff[0];
 800edc6:	7b3b      	ldrb	r3, [r7, #12]
 800edc8:	461a      	mov	r2, r3
 800edca:	4b03      	ldr	r3, [pc, #12]	@ (800edd8 <Generic_Publish+0x88>)
 800edcc:	801a      	strh	r2, [r3, #0]
}
 800edce:	bf00      	nop
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	20006f78 	.word	0x20006f78
 800eddc:	200046b0 	.word	0x200046b0
 800ede0:	0802e33c 	.word	0x0802e33c
 800ede4:	0802ae8c 	.word	0x0802ae8c

0800ede8 <Generic_LevelStateUpdate_Process>:
*        Level model in application file from Temporary parameter in model file.
* @param void
* return MOBLE_RESULT.
*/
MOBLE_RESULT Generic_LevelStateUpdate_Process(MOBLEUINT8 elementIndex)
{
 800ede8:	b480      	push	{r7}
 800edea:	b083      	sub	sp, #12
 800edec:	af00      	add	r7, sp, #0
 800edee:	4603      	mov	r3, r0
 800edf0:	71fb      	strb	r3, [r7, #7]
  Generic_LevelStatus[elementIndex].Present_Level16 = Generic_TemporaryStatus[elementIndex].PresentValue16;
 800edf2:	79f9      	ldrb	r1, [r7, #7]
 800edf4:	79fa      	ldrb	r2, [r7, #7]
 800edf6:	481d      	ldr	r0, [pc, #116]	@ (800ee6c <Generic_LevelStateUpdate_Process+0x84>)
 800edf8:	460b      	mov	r3, r1
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	440b      	add	r3, r1
 800edfe:	4403      	add	r3, r0
 800ee00:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ee04:	b218      	sxth	r0, r3
 800ee06:	491a      	ldr	r1, [pc, #104]	@ (800ee70 <Generic_LevelStateUpdate_Process+0x88>)
 800ee08:	4613      	mov	r3, r2
 800ee0a:	005b      	lsls	r3, r3, #1
 800ee0c:	4413      	add	r3, r2
 800ee0e:	009b      	lsls	r3, r3, #2
 800ee10:	440b      	add	r3, r1
 800ee12:	4602      	mov	r2, r0
 800ee14:	801a      	strh	r2, [r3, #0]
  Generic_LevelStatus[elementIndex].Target_Level16  = Generic_TemporaryStatus[elementIndex].TargetValue16;
 800ee16:	79f9      	ldrb	r1, [r7, #7]
 800ee18:	79fa      	ldrb	r2, [r7, #7]
 800ee1a:	4814      	ldr	r0, [pc, #80]	@ (800ee6c <Generic_LevelStateUpdate_Process+0x84>)
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	440b      	add	r3, r1
 800ee22:	4403      	add	r3, r0
 800ee24:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ee28:	b218      	sxth	r0, r3
 800ee2a:	4911      	ldr	r1, [pc, #68]	@ (800ee70 <Generic_LevelStateUpdate_Process+0x88>)
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	005b      	lsls	r3, r3, #1
 800ee30:	4413      	add	r3, r2
 800ee32:	009b      	lsls	r3, r3, #2
 800ee34:	440b      	add	r3, r1
 800ee36:	3302      	adds	r3, #2
 800ee38:	4602      	mov	r2, r0
 800ee3a:	801a      	strh	r2, [r3, #0]
  Generic_LevelStatus[elementIndex].RemainingTime   = Generic_TemporaryStatus[elementIndex].RemainingTime;
 800ee3c:	79f9      	ldrb	r1, [r7, #7]
 800ee3e:	79fa      	ldrb	r2, [r7, #7]
 800ee40:	480a      	ldr	r0, [pc, #40]	@ (800ee6c <Generic_LevelStateUpdate_Process+0x84>)
 800ee42:	460b      	mov	r3, r1
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	440b      	add	r3, r1
 800ee48:	4403      	add	r3, r0
 800ee4a:	7818      	ldrb	r0, [r3, #0]
 800ee4c:	4908      	ldr	r1, [pc, #32]	@ (800ee70 <Generic_LevelStateUpdate_Process+0x88>)
 800ee4e:	4613      	mov	r3, r2
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	4413      	add	r3, r2
 800ee54:	009b      	lsls	r3, r3, #2
 800ee56:	440b      	add	r3, r1
 800ee58:	3304      	adds	r3, #4
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	701a      	strb	r2, [r3, #0]
   
  return MOBLE_RESULT_SUCCESS;
 800ee5e:	2300      	movs	r3, #0
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	370c      	adds	r7, #12
 800ee64:	46bd      	mov	sp, r7
 800ee66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6a:	4770      	bx	lr
 800ee6c:	200046c4 	.word	0x200046c4
 800ee70:	200046d8 	.word	0x200046d8

0800ee74 <LightActual_GenericOnOffBinding>:
* @param lightActual: used to select the binding and reverse binding 
* return void.
*/
void LightActual_GenericOnOffBinding(Light_LightnessStatus_t* lightActual,
                                     MOBLEUINT8 elementIndex)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b083      	sub	sp, #12
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	460b      	mov	r3, r1
 800ee7e:	70fb      	strb	r3, [r7, #3]
  6.1.2.2.3 - Binding of actual light lightness with generic on off,
  As actual lightness will set which changes the on off state in 
  generic model
  */

  if(lightActual->LightnessPresentValue16 == 0x00)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	881b      	ldrh	r3, [r3, #0]
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d109      	bne.n	800ee9e <LightActual_GenericOnOffBinding+0x2a>
  {
    Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x00;
 800ee8a:	78fa      	ldrb	r2, [r7, #3]
 800ee8c:	490b      	ldr	r1, [pc, #44]	@ (800eebc <LightActual_GenericOnOffBinding+0x48>)
 800ee8e:	4613      	mov	r3, r2
 800ee90:	005b      	lsls	r3, r3, #1
 800ee92:	4413      	add	r3, r2
 800ee94:	005b      	lsls	r3, r3, #1
 800ee96:	440b      	add	r3, r1
 800ee98:	2200      	movs	r2, #0
 800ee9a:	701a      	strb	r2, [r3, #0]
  
  TRACE_M(TF_LIGHT_M, 
          "Light Actual binding with Generic On Off - Present OnOff value 0x%.2x \r\n", 
          Generic_OnOffStatus[elementIndex].Present_OnOff_State);    
 
}
 800ee9c:	e008      	b.n	800eeb0 <LightActual_GenericOnOffBinding+0x3c>
    Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x01;
 800ee9e:	78fa      	ldrb	r2, [r7, #3]
 800eea0:	4906      	ldr	r1, [pc, #24]	@ (800eebc <LightActual_GenericOnOffBinding+0x48>)
 800eea2:	4613      	mov	r3, r2
 800eea4:	005b      	lsls	r3, r3, #1
 800eea6:	4413      	add	r3, r2
 800eea8:	005b      	lsls	r3, r3, #1
 800eeaa:	440b      	add	r3, r1
 800eeac:	2201      	movs	r2, #1
 800eeae:	701a      	strb	r2, [r3, #0]
}
 800eeb0:	bf00      	nop
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr
 800eebc:	200046e4 	.word	0x200046e4

0800eec0 <LightActual_GenericLevelBinding>:
* @param lightActual: Pointer to the data which needs to be checked.
* return void.
*/
void LightActual_GenericLevelBinding(Light_LightnessStatus_t* lightActual,
                                     MOBLEUINT8 elementIndex)
{ 
 800eec0:	b480      	push	{r7}
 800eec2:	b083      	sub	sp, #12
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	460b      	mov	r3, r1
 800eeca:	70fb      	strb	r3, [r7, #3]
  6.1.2.2.2 - Binding of actual light lightness with generic level
  As Actual lightness changes, the generic level value will
  change.
     */

  Generic_LevelStatus[elementIndex].Present_Level16 = lightActual->LightnessPresentValue16 - 32768;  
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	881b      	ldrh	r3, [r3, #0]
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	78fa      	ldrb	r2, [r7, #3]
 800eeda:	b218      	sxth	r0, r3
 800eedc:	4906      	ldr	r1, [pc, #24]	@ (800eef8 <LightActual_GenericLevelBinding+0x38>)
 800eede:	4613      	mov	r3, r2
 800eee0:	005b      	lsls	r3, r3, #1
 800eee2:	4413      	add	r3, r2
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	440b      	add	r3, r1
 800eee8:	4602      	mov	r2, r0
 800eeea:	801a      	strh	r2, [r3, #0]
 
  TRACE_M(TF_LIGHT_M, 
          "Light Actual binding with Generic Level - Present Level value 0x%.2x \r\n", 
          Generic_LevelStatus[elementIndex].Present_Level16); 
      
}
 800eeec:	bf00      	nop
 800eeee:	370c      	adds	r7, #12
 800eef0:	46bd      	mov	sp, r7
 800eef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef6:	4770      	bx	lr
 800eef8:	200046d8 	.word	0x200046d8

0800eefc <Generic_TransitionParameterReset>:
* @brief Function called when message received without optional parameter, stop the running transition.
* @param void
* @param void
*/
void Generic_TransitionParameterReset(MOBLEUINT8 elementIndex)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	4603      	mov	r3, r0
 800ef04:	71fb      	strb	r3, [r7, #7]
   Generic_ModelFlag[elementIndex].GenericTransitionFlag = MODEL_TRANSITION_STOP;
 800ef06:	79fa      	ldrb	r2, [r7, #7]
 800ef08:	4910      	ldr	r1, [pc, #64]	@ (800ef4c <Generic_TransitionParameterReset+0x50>)
 800ef0a:	4613      	mov	r3, r2
 800ef0c:	005b      	lsls	r3, r3, #1
 800ef0e:	4413      	add	r3, r2
 800ef10:	440b      	add	r3, r1
 800ef12:	2200      	movs	r2, #0
 800ef14:	701a      	strb	r2, [r3, #0]
   Generic_TimeParam[elementIndex].Res_Value = 0x00;
 800ef16:	79fa      	ldrb	r2, [r7, #7]
 800ef18:	490d      	ldr	r1, [pc, #52]	@ (800ef50 <Generic_TransitionParameterReset+0x54>)
 800ef1a:	4613      	mov	r3, r2
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	4413      	add	r3, r2
 800ef20:	005b      	lsls	r3, r3, #1
 800ef22:	440b      	add	r3, r1
 800ef24:	2200      	movs	r2, #0
 800ef26:	805a      	strh	r2, [r3, #2]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	809a      	strh	r2, [r3, #4]
   Generic_TimeParam[elementIndex].StepValue = 0X00;
 800ef2c:	79fa      	ldrb	r2, [r7, #7]
 800ef2e:	4908      	ldr	r1, [pc, #32]	@ (800ef50 <Generic_TransitionParameterReset+0x54>)
 800ef30:	4613      	mov	r3, r2
 800ef32:	009b      	lsls	r3, r3, #2
 800ef34:	4413      	add	r3, r2
 800ef36:	005b      	lsls	r3, r3, #1
 800ef38:	440b      	add	r3, r1
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	701a      	strb	r2, [r3, #0]
}
 800ef3e:	bf00      	nop
 800ef40:	370c      	adds	r7, #12
 800ef42:	46bd      	mov	sp, r7
 800ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop
 800ef4c:	200046ec 	.word	0x200046ec
 800ef50:	200046cc 	.word	0x200046cc

0800ef54 <Generic_RestoreModelStates>:
* @brief function used to restore the states of the generic model.
* @param pointer to the array
* return void.
*/
void Generic_RestoreModelStates(void *model_State , MOBLEUINT8 elementIndex)
{
 800ef54:	b590      	push	{r4, r7, lr}
 800ef56:	b085      	sub	sp, #20
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	70fb      	strb	r3, [r7, #3]
  
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF    
  Generic_OnOffStatus[elementIndex].Present_OnOff_State = ((Models_ParamNvm_t *)model_State)->Generic_OnOff;
 800ef60:	78fa      	ldrb	r2, [r7, #3]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	7918      	ldrb	r0, [r3, #4]
 800ef66:	4922      	ldr	r1, [pc, #136]	@ (800eff0 <Generic_RestoreModelStates+0x9c>)
 800ef68:	4613      	mov	r3, r2
 800ef6a:	005b      	lsls	r3, r3, #1
 800ef6c:	4413      	add	r3, r2
 800ef6e:	005b      	lsls	r3, r3, #1
 800ef70:	440b      	add	r3, r1
 800ef72:	4602      	mov	r2, r0
 800ef74:	701a      	strb	r2, [r3, #0]
  Generic_OnOffStatus[elementIndex].Target_OnOff = ((Models_ParamNvm_t *)model_State)->GenericTarget;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	795b      	ldrb	r3, [r3, #5]
 800ef7a:	78fa      	ldrb	r2, [r7, #3]
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	491c      	ldr	r1, [pc, #112]	@ (800eff0 <Generic_RestoreModelStates+0x9c>)
 800ef80:	4613      	mov	r3, r2
 800ef82:	005b      	lsls	r3, r3, #1
 800ef84:	4413      	add	r3, r2
 800ef86:	005b      	lsls	r3, r3, #1
 800ef88:	440b      	add	r3, r1
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	f8a3 2003 	strh.w	r2, [r3, #3]
#endif
  
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL 
  if(((Models_ParamNvm_t *)model_State)->Generic_Level == 0x00)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	88db      	ldrh	r3, [r3, #6]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d10a      	bne.n	800efae <Generic_RestoreModelStates+0x5a>
  {
    Generic_LevelStatus[elementIndex].Present_Level16 = LEVEL_MIN_VALID_RANGE;
 800ef98:	78fa      	ldrb	r2, [r7, #3]
 800ef9a:	4916      	ldr	r1, [pc, #88]	@ (800eff4 <Generic_RestoreModelStates+0xa0>)
 800ef9c:	4613      	mov	r3, r2
 800ef9e:	005b      	lsls	r3, r3, #1
 800efa0:	4413      	add	r3, r2
 800efa2:	009b      	lsls	r3, r3, #2
 800efa4:	440b      	add	r3, r1
 800efa6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800efaa:	801a      	strh	r2, [r3, #0]
 800efac:	e00b      	b.n	800efc6 <Generic_RestoreModelStates+0x72>
  }
  else
  {
    Generic_LevelStatus[elementIndex].Present_Level16 = ((Models_ParamNvm_t *)model_State)->Generic_Level;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	88db      	ldrh	r3, [r3, #6]
 800efb2:	78fa      	ldrb	r2, [r7, #3]
 800efb4:	b218      	sxth	r0, r3
 800efb6:	490f      	ldr	r1, [pc, #60]	@ (800eff4 <Generic_RestoreModelStates+0xa0>)
 800efb8:	4613      	mov	r3, r2
 800efba:	005b      	lsls	r3, r3, #1
 800efbc:	4413      	add	r3, r2
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	440b      	add	r3, r1
 800efc2:	4602      	mov	r2, r0
 800efc4:	801a      	strh	r2, [r3, #0]
  }
#endif 

#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF  
  Generic_PowerOnOffParam_t Generic_PowerOnOffParam[APPLICATION_NUMBER_OF_ELEMENTS];
  Generic_PowerOnOffParam[elementIndex].PowerOnOffState = ((Models_ParamNvm_t *)model_State)->PowerOnOff;
 800efc6:	78fb      	ldrb	r3, [r7, #3]
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	78d2      	ldrb	r2, [r2, #3]
 800efcc:	3310      	adds	r3, #16
 800efce:	443b      	add	r3, r7
 800efd0:	f803 2c04 	strb.w	r2, [r3, #-4]
  (GenericAppli_cb.GenericPowerOnOff_cb)(&Generic_PowerOnOffParam[elementIndex], 1, 0,elementIndex);
 800efd4:	4b08      	ldr	r3, [pc, #32]	@ (800eff8 <Generic_RestoreModelStates+0xa4>)
 800efd6:	699c      	ldr	r4, [r3, #24]
 800efd8:	78fb      	ldrb	r3, [r7, #3]
 800efda:	f107 020c 	add.w	r2, r7, #12
 800efde:	18d0      	adds	r0, r2, r3
 800efe0:	78fb      	ldrb	r3, [r7, #3]
 800efe2:	2200      	movs	r2, #0
 800efe4:	2101      	movs	r1, #1
 800efe6:	47a0      	blx	r4
                                                     
#endif  
}
 800efe8:	bf00      	nop
 800efea:	3714      	adds	r7, #20
 800efec:	46bd      	mov	sp, r7
 800efee:	bd90      	pop	{r4, r7, pc}
 800eff0:	200046e4 	.word	0x200046e4
 800eff4:	200046d8 	.word	0x200046d8
 800eff8:	0802dfb8 	.word	0x0802dfb8

0800effc <Appli_Generic_DefaultTransitionTime_Set>:

WEAK_FUNCTION (MOBLE_RESULT Appli_Generic_DefaultTransitionTime_Set(Generic_DefaultTransitionParam_t* pDefaultTimeParam, 
                                                                    MOBLEUINT8 OptionalValid, 
                                                                    uint16_t dstPeer, 
                                                                    uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS;}
 800effc:	b480      	push	{r7}
 800effe:	b083      	sub	sp, #12
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	4608      	mov	r0, r1
 800f006:	4611      	mov	r1, r2
 800f008:	461a      	mov	r2, r3
 800f00a:	4603      	mov	r3, r0
 800f00c:	70fb      	strb	r3, [r7, #3]
 800f00e:	460b      	mov	r3, r1
 800f010:	803b      	strh	r3, [r7, #0]
 800f012:	4613      	mov	r3, r2
 800f014:	70bb      	strb	r3, [r7, #2]
 800f016:	2300      	movs	r3, #0
 800f018:	4618      	mov	r0, r3
 800f01a:	370c      	adds	r7, #12
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr

0800f024 <Appli_Generic_Level_Status>:

WEAK_FUNCTION (MOBLE_RESULT Appli_Generic_Level_Status(MOBLEUINT8 const *plevel_status, 
                                                       MOBLEUINT32 plength, 
                                                       uint16_t dstPeer, 
                                                       uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS;}
 800f024:	b480      	push	{r7}
 800f026:	b085      	sub	sp, #20
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	4611      	mov	r1, r2
 800f030:	461a      	mov	r2, r3
 800f032:	460b      	mov	r3, r1
 800f034:	80fb      	strh	r3, [r7, #6]
 800f036:	4613      	mov	r3, r2
 800f038:	717b      	strb	r3, [r7, #5]
 800f03a:	2300      	movs	r3, #0
 800f03c:	4618      	mov	r0, r3
 800f03e:	3714      	adds	r7, #20
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr

0800f048 <Light_Lightness_Binding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void
*/
void Light_Lightness_Binding(MOBLEUINT8 bindingFlag , MOBLEUINT32 length, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{ 
 800f048:	b580      	push	{r7, lr}
 800f04a:	b084      	sub	sp, #16
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6039      	str	r1, [r7, #0]
 800f050:	4611      	mov	r1, r2
 800f052:	461a      	mov	r2, r3
 800f054:	4603      	mov	r3, r0
 800f056:	71fb      	strb	r3, [r7, #7]
 800f058:	460b      	mov	r3, r1
 800f05a:	71bb      	strb	r3, [r7, #6]
 800f05c:	4613      	mov	r3, r2
 800f05e:	717b      	strb	r3, [r7, #5]
    As linear lightness changes, it changes the value of actual lightness
    which in turn changes the state of generic on off state.
    */
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF  
    /* Binding of data b/w light lightness actual and Generic on off */
  if((ENABLE_GENERIC_MODEL_SERVER_ONOFF & (1 << elementIndex)) == (1 << elementIndex))
 800f060:	79bb      	ldrb	r3, [r7, #6]
 800f062:	2b00      	cmp	r3, #0
 800f064:	bf0c      	ite	eq
 800f066:	2301      	moveq	r3, #1
 800f068:	2300      	movne	r3, #0
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	4619      	mov	r1, r3
 800f06e:	79bb      	ldrb	r3, [r7, #6]
 800f070:	2201      	movs	r2, #1
 800f072:	fa02 f303 	lsl.w	r3, r2, r3
 800f076:	4299      	cmp	r1, r3
 800f078:	d168      	bne.n	800f14c <Light_Lightness_Binding+0x104>
  {
    if(bindingFlag != BINDING_GENERIC_ON_OFF_SET)
 800f07a:	79fb      	ldrb	r3, [r7, #7]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d065      	beq.n	800f14c <Light_Lightness_Binding+0x104>
    {
      LightActual_GenericOnOffBinding(&Light_LightnessStatus[elementIndex],elementIndex);
 800f080:	79ba      	ldrb	r2, [r7, #6]
 800f082:	4613      	mov	r3, r2
 800f084:	00db      	lsls	r3, r3, #3
 800f086:	4413      	add	r3, r2
 800f088:	4aa7      	ldr	r2, [pc, #668]	@ (800f328 <Light_Lightness_Binding+0x2e0>)
 800f08a:	4413      	add	r3, r2
 800f08c:	79ba      	ldrb	r2, [r7, #6]
 800f08e:	4611      	mov	r1, r2
 800f090:	4618      	mov	r0, r3
 800f092:	f7ff feef 	bl	800ee74 <LightActual_GenericOnOffBinding>
       
      result = Chk_OpcodePresent((MOBLEUINT16)GENERIC_ON_OFF_SET_UNACK ,elementIndex); 
 800f096:	79bb      	ldrb	r3, [r7, #6]
 800f098:	4619      	mov	r1, r3
 800f09a:	f248 2003 	movw	r0, #33283	@ 0x8203
 800f09e:	f000 f9e9 	bl	800f474 <Chk_OpcodePresent>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	73bb      	strb	r3, [r7, #14]
    
      if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 800f0a6:	7bbb      	ldrb	r3, [r7, #14]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d002      	beq.n	800f0b2 <Light_Lightness_Binding+0x6a>
 800f0ac:	7e3b      	ldrb	r3, [r7, #24]
 800f0ae:	2b01      	cmp	r3, #1
 800f0b0:	d14c      	bne.n	800f14c <Light_Lightness_Binding+0x104>
      { 
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= GENERIC_ON_OFF_SET_UNACK;
 800f0b2:	79ba      	ldrb	r2, [r7, #6]
 800f0b4:	79b9      	ldrb	r1, [r7, #6]
 800f0b6:	489d      	ldr	r0, [pc, #628]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	00db      	lsls	r3, r3, #3
 800f0bc:	440b      	add	r3, r1
 800f0be:	00d9      	lsls	r1, r3, #3
 800f0c0:	440b      	add	r3, r1
 800f0c2:	4403      	add	r3, r0
 800f0c4:	3350      	adds	r3, #80	@ 0x50
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	4898      	ldr	r0, [pc, #608]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f0ca:	0059      	lsls	r1, r3, #1
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	00db      	lsls	r3, r3, #3
 800f0d0:	4413      	add	r3, r2
 800f0d2:	00da      	lsls	r2, r3, #3
 800f0d4:	4413      	add	r3, r2
 800f0d6:	440b      	add	r3, r1
 800f0d8:	4403      	add	r3, r0
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f042 0203 	orr.w	r2, r2, #3
 800f0e0:	701a      	strb	r2, [r3, #0]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 800f0e8:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = GENERIC_ONOFF_SERVER_MODEL_ID;
 800f0ea:	79ba      	ldrb	r2, [r7, #6]
 800f0ec:	79b9      	ldrb	r1, [r7, #6]
 800f0ee:	488f      	ldr	r0, [pc, #572]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	00db      	lsls	r3, r3, #3
 800f0f4:	440b      	add	r3, r1
 800f0f6:	00d9      	lsls	r1, r3, #3
 800f0f8:	440b      	add	r3, r1
 800f0fa:	4403      	add	r3, r0
 800f0fc:	3350      	adds	r3, #80	@ 0x50
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	488a      	ldr	r0, [pc, #552]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f102:	3314      	adds	r3, #20
 800f104:	0059      	lsls	r1, r3, #1
 800f106:	4613      	mov	r3, r2
 800f108:	00db      	lsls	r3, r3, #3
 800f10a:	4413      	add	r3, r2
 800f10c:	00da      	lsls	r2, r3, #3
 800f10e:	4413      	add	r3, r2
 800f110:	440b      	add	r3, r1
 800f112:	4403      	add	r3, r0
 800f114:	2200      	movs	r2, #0
 800f116:	701a      	strb	r2, [r3, #0]
 800f118:	2200      	movs	r2, #0
 800f11a:	f042 0210 	orr.w	r2, r2, #16
 800f11e:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 800f120:	79ba      	ldrb	r2, [r7, #6]
 800f122:	4882      	ldr	r0, [pc, #520]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f124:	4613      	mov	r3, r2
 800f126:	00db      	lsls	r3, r3, #3
 800f128:	4413      	add	r3, r2
 800f12a:	00d9      	lsls	r1, r3, #3
 800f12c:	440b      	add	r3, r1
 800f12e:	4403      	add	r3, r0
 800f130:	3350      	adds	r3, #80	@ 0x50
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	3301      	adds	r3, #1
 800f136:	b2d8      	uxtb	r0, r3
 800f138:	497c      	ldr	r1, [pc, #496]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f13a:	4613      	mov	r3, r2
 800f13c:	00db      	lsls	r3, r3, #3
 800f13e:	4413      	add	r3, r2
 800f140:	00da      	lsls	r2, r3, #3
 800f142:	4413      	add	r3, r2
 800f144:	440b      	add	r3, r1
 800f146:	3350      	adds	r3, #80	@ 0x50
 800f148:	4602      	mov	r2, r0
 800f14a:	701a      	strb	r2, [r3, #0]
    As linear lightness changes, it changes the value of actual lightness
    which in turn changes the state of generic level state.
    */
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL  
    /* Binding of data b/w light lightness actual and Generic Level */
  if((ENABLE_GENERIC_MODEL_SERVER_LEVEL & (1 << elementIndex)) == (1 << elementIndex))
 800f14c:	79bb      	ldrb	r3, [r7, #6]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	bf0c      	ite	eq
 800f152:	2301      	moveq	r3, #1
 800f154:	2300      	movne	r3, #0
 800f156:	b2db      	uxtb	r3, r3
 800f158:	4619      	mov	r1, r3
 800f15a:	79bb      	ldrb	r3, [r7, #6]
 800f15c:	2201      	movs	r2, #1
 800f15e:	fa02 f303 	lsl.w	r3, r2, r3
 800f162:	4299      	cmp	r1, r3
 800f164:	d16a      	bne.n	800f23c <Light_Lightness_Binding+0x1f4>
  {
    if(bindingFlag != BINDING_GENERIC_LEVEL_SET)
 800f166:	79fb      	ldrb	r3, [r7, #7]
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d067      	beq.n	800f23c <Light_Lightness_Binding+0x1f4>
    {
      LightActual_GenericLevelBinding(&Light_LightnessStatus[elementIndex],elementIndex);
 800f16c:	79ba      	ldrb	r2, [r7, #6]
 800f16e:	4613      	mov	r3, r2
 800f170:	00db      	lsls	r3, r3, #3
 800f172:	4413      	add	r3, r2
 800f174:	4a6c      	ldr	r2, [pc, #432]	@ (800f328 <Light_Lightness_Binding+0x2e0>)
 800f176:	4413      	add	r3, r2
 800f178:	79ba      	ldrb	r2, [r7, #6]
 800f17a:	4611      	mov	r1, r2
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7ff fe9f 	bl	800eec0 <LightActual_GenericLevelBinding>
      
      result = Chk_OpcodePresent((MOBLEUINT16)GENERIC_LEVEL_SET_UNACK ,elementIndex); 
 800f182:	79bb      	ldrb	r3, [r7, #6]
 800f184:	4619      	mov	r1, r3
 800f186:	f248 2007 	movw	r0, #33287	@ 0x8207
 800f18a:	f000 f973 	bl	800f474 <Chk_OpcodePresent>
 800f18e:	4603      	mov	r3, r0
 800f190:	73bb      	strb	r3, [r7, #14]
    
      if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 800f192:	7bbb      	ldrb	r3, [r7, #14]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d002      	beq.n	800f19e <Light_Lightness_Binding+0x156>
 800f198:	7e3b      	ldrb	r3, [r7, #24]
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d14e      	bne.n	800f23c <Light_Lightness_Binding+0x1f4>
      {
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= GENERIC_LEVEL_SET_UNACK;
 800f19e:	79ba      	ldrb	r2, [r7, #6]
 800f1a0:	79b9      	ldrb	r1, [r7, #6]
 800f1a2:	4862      	ldr	r0, [pc, #392]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	00db      	lsls	r3, r3, #3
 800f1a8:	440b      	add	r3, r1
 800f1aa:	00d9      	lsls	r1, r3, #3
 800f1ac:	440b      	add	r3, r1
 800f1ae:	4403      	add	r3, r0
 800f1b0:	3350      	adds	r3, #80	@ 0x50
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	485d      	ldr	r0, [pc, #372]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f1b6:	0059      	lsls	r1, r3, #1
 800f1b8:	4613      	mov	r3, r2
 800f1ba:	00db      	lsls	r3, r3, #3
 800f1bc:	4413      	add	r3, r2
 800f1be:	00da      	lsls	r2, r3, #3
 800f1c0:	4413      	add	r3, r2
 800f1c2:	440b      	add	r3, r1
 800f1c4:	4403      	add	r3, r0
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	f042 0207 	orr.w	r2, r2, #7
 800f1cc:	701a      	strb	r2, [r3, #0]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 800f1d4:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = GENERIC_LEVEL_SERVER_MODEL_ID;
 800f1d6:	79ba      	ldrb	r2, [r7, #6]
 800f1d8:	79b9      	ldrb	r1, [r7, #6]
 800f1da:	4854      	ldr	r0, [pc, #336]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f1dc:	460b      	mov	r3, r1
 800f1de:	00db      	lsls	r3, r3, #3
 800f1e0:	440b      	add	r3, r1
 800f1e2:	00d9      	lsls	r1, r3, #3
 800f1e4:	440b      	add	r3, r1
 800f1e6:	4403      	add	r3, r0
 800f1e8:	3350      	adds	r3, #80	@ 0x50
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	484f      	ldr	r0, [pc, #316]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f1ee:	3314      	adds	r3, #20
 800f1f0:	0059      	lsls	r1, r3, #1
 800f1f2:	4613      	mov	r3, r2
 800f1f4:	00db      	lsls	r3, r3, #3
 800f1f6:	4413      	add	r3, r2
 800f1f8:	00da      	lsls	r2, r3, #3
 800f1fa:	4413      	add	r3, r2
 800f1fc:	440b      	add	r3, r1
 800f1fe:	4403      	add	r3, r0
 800f200:	2200      	movs	r2, #0
 800f202:	f042 0202 	orr.w	r2, r2, #2
 800f206:	701a      	strb	r2, [r3, #0]
 800f208:	2200      	movs	r2, #0
 800f20a:	f042 0210 	orr.w	r2, r2, #16
 800f20e:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 800f210:	79ba      	ldrb	r2, [r7, #6]
 800f212:	4846      	ldr	r0, [pc, #280]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f214:	4613      	mov	r3, r2
 800f216:	00db      	lsls	r3, r3, #3
 800f218:	4413      	add	r3, r2
 800f21a:	00d9      	lsls	r1, r3, #3
 800f21c:	440b      	add	r3, r1
 800f21e:	4403      	add	r3, r0
 800f220:	3350      	adds	r3, #80	@ 0x50
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	3301      	adds	r3, #1
 800f226:	b2d8      	uxtb	r0, r3
 800f228:	4940      	ldr	r1, [pc, #256]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f22a:	4613      	mov	r3, r2
 800f22c:	00db      	lsls	r3, r3, #3
 800f22e:	4413      	add	r3, r2
 800f230:	00da      	lsls	r2, r3, #3
 800f232:	4413      	add	r3, r2
 800f234:	440b      	add	r3, r1
 800f236:	3350      	adds	r3, #80	@ 0x50
 800f238:	4602      	mov	r2, r0
 800f23a:	701a      	strb	r2, [r3, #0]
    }
  }
#endif     
   
  /* Ligtness Linear updated on its own (unsolicited change) */
  BindingDisable_LcLinearOut_LightLightnessLinear(elementIndex);
 800f23c:	79bb      	ldrb	r3, [r7, #6]
 800f23e:	4618      	mov	r0, r3
 800f240:	f7fe f923 	bl	800d48a <BindingDisable_LcLinearOut_LightLightnessLinear>
  
  if((trnsnFlag != MODEL_TRANSITION_STOP) && (trnsnCmplt != MOBLE_TRUE) && (Publication1SecFlag.Transition1SecFlag == MOBLE_FALSE))
 800f244:	797b      	ldrb	r3, [r7, #5]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d06a      	beq.n	800f320 <Light_Lightness_Binding+0x2d8>
 800f24a:	7e3b      	ldrb	r3, [r7, #24]
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	d067      	beq.n	800f320 <Light_Lightness_Binding+0x2d8>
 800f250:	4b37      	ldr	r3, [pc, #220]	@ (800f330 <Light_Lightness_Binding+0x2e8>)
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d163      	bne.n	800f320 <Light_Lightness_Binding+0x2d8>
  {
    Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= 0;
 800f258:	79ba      	ldrb	r2, [r7, #6]
 800f25a:	79b9      	ldrb	r1, [r7, #6]
 800f25c:	4833      	ldr	r0, [pc, #204]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f25e:	460b      	mov	r3, r1
 800f260:	00db      	lsls	r3, r3, #3
 800f262:	440b      	add	r3, r1
 800f264:	00d9      	lsls	r1, r3, #3
 800f266:	440b      	add	r3, r1
 800f268:	4403      	add	r3, r0
 800f26a:	3350      	adds	r3, #80	@ 0x50
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	482f      	ldr	r0, [pc, #188]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f270:	0059      	lsls	r1, r3, #1
 800f272:	4613      	mov	r3, r2
 800f274:	00db      	lsls	r3, r3, #3
 800f276:	4413      	add	r3, r2
 800f278:	00da      	lsls	r2, r3, #3
 800f27a:	4413      	add	r3, r2
 800f27c:	440b      	add	r3, r1
 800f27e:	4403      	add	r3, r0
 800f280:	2200      	movs	r2, #0
 800f282:	701a      	strb	r2, [r3, #0]
 800f284:	2200      	movs	r2, #0
 800f286:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = 0;
 800f288:	79ba      	ldrb	r2, [r7, #6]
 800f28a:	79b9      	ldrb	r1, [r7, #6]
 800f28c:	4827      	ldr	r0, [pc, #156]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f28e:	460b      	mov	r3, r1
 800f290:	00db      	lsls	r3, r3, #3
 800f292:	440b      	add	r3, r1
 800f294:	00d9      	lsls	r1, r3, #3
 800f296:	440b      	add	r3, r1
 800f298:	4403      	add	r3, r0
 800f29a:	3350      	adds	r3, #80	@ 0x50
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	4823      	ldr	r0, [pc, #140]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f2a0:	3314      	adds	r3, #20
 800f2a2:	0059      	lsls	r1, r3, #1
 800f2a4:	4613      	mov	r3, r2
 800f2a6:	00db      	lsls	r3, r3, #3
 800f2a8:	4413      	add	r3, r2
 800f2aa:	00da      	lsls	r2, r3, #3
 800f2ac:	4413      	add	r3, r2
 800f2ae:	440b      	add	r3, r1
 800f2b0:	4403      	add	r3, r0
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	701a      	strb	r2, [r3, #0]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].BindedStateCount = 0;
 800f2ba:	79ba      	ldrb	r2, [r7, #6]
 800f2bc:	491b      	ldr	r1, [pc, #108]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f2be:	4613      	mov	r3, r2
 800f2c0:	00db      	lsls	r3, r3, #3
 800f2c2:	4413      	add	r3, r2
 800f2c4:	00da      	lsls	r2, r3, #3
 800f2c6:	4413      	add	r3, r2
 800f2c8:	440b      	add	r3, r1
 800f2ca:	3350      	adds	r3, #80	@ 0x50
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	701a      	strb	r2, [r3, #0]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	73fb      	strb	r3, [r7, #15]
 800f2d4:	e021      	b.n	800f31a <Light_Lightness_Binding+0x2d2>
    {
      Light_PublishOpcodeList[elementIndex].Model_ID[idx] = 0;
 800f2d6:	79ba      	ldrb	r2, [r7, #6]
 800f2d8:	7bfb      	ldrb	r3, [r7, #15]
 800f2da:	4814      	ldr	r0, [pc, #80]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f2dc:	3314      	adds	r3, #20
 800f2de:	0059      	lsls	r1, r3, #1
 800f2e0:	4613      	mov	r3, r2
 800f2e2:	00db      	lsls	r3, r3, #3
 800f2e4:	4413      	add	r3, r2
 800f2e6:	00da      	lsls	r2, r3, #3
 800f2e8:	4413      	add	r3, r2
 800f2ea:	440b      	add	r3, r1
 800f2ec:	4403      	add	r3, r0
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	701a      	strb	r2, [r3, #0]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[idx] = 0;
 800f2f6:	79ba      	ldrb	r2, [r7, #6]
 800f2f8:	7bfb      	ldrb	r3, [r7, #15]
 800f2fa:	480c      	ldr	r0, [pc, #48]	@ (800f32c <Light_Lightness_Binding+0x2e4>)
 800f2fc:	0059      	lsls	r1, r3, #1
 800f2fe:	4613      	mov	r3, r2
 800f300:	00db      	lsls	r3, r3, #3
 800f302:	4413      	add	r3, r2
 800f304:	00da      	lsls	r2, r3, #3
 800f306:	4413      	add	r3, r2
 800f308:	440b      	add	r3, r1
 800f30a:	4403      	add	r3, r0
 800f30c:	2200      	movs	r2, #0
 800f30e:	701a      	strb	r2, [r3, #0]
 800f310:	2200      	movs	r2, #0
 800f312:	705a      	strb	r2, [r3, #1]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 800f314:	7bfb      	ldrb	r3, [r7, #15]
 800f316:	3301      	adds	r3, #1
 800f318:	73fb      	strb	r3, [r7, #15]
 800f31a:	7bfb      	ldrb	r3, [r7, #15]
 800f31c:	2b13      	cmp	r3, #19
 800f31e:	d9da      	bls.n	800f2d6 <Light_Lightness_Binding+0x28e>
    }
  }
}
 800f320:	bf00      	nop
 800f322:	3710      	adds	r7, #16
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	200046fc 	.word	0x200046fc
 800f32c:	20004708 	.word	0x20004708
 800f330:	200046f8 	.word	0x200046f8

0800f334 <GenericOnOff_LightActualBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void.
*/
void GenericOnOff_LightActualBinding(Generic_OnOffStatus_t* onOff_param, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af02      	add	r7, sp, #8
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	4608      	mov	r0, r1
 800f33e:	4611      	mov	r1, r2
 800f340:	461a      	mov	r2, r3
 800f342:	4603      	mov	r3, r0
 800f344:	70fb      	strb	r3, [r7, #3]
 800f346:	460b      	mov	r3, r1
 800f348:	70bb      	strb	r3, [r7, #2]
 800f34a:	4613      	mov	r3, r2
 800f34c:	707b      	strb	r3, [r7, #1]
  
  /*As Generic on off changes, it will change the value of the light linear due to change in the light lightness 
    value due to binding of the states.
 */
   
  Light_Lightness_Binding(BINDING_GENERIC_ON_OFF_SET, 0, elementIndex,trnsnFlag,trnsnCmplt);
 800f34e:	78b9      	ldrb	r1, [r7, #2]
 800f350:	78fa      	ldrb	r2, [r7, #3]
 800f352:	787b      	ldrb	r3, [r7, #1]
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	460b      	mov	r3, r1
 800f358:	2100      	movs	r1, #0
 800f35a:	2000      	movs	r0, #0
 800f35c:	f7ff fe74 	bl	800f048 <Light_Lightness_Binding>
}
 800f360:	bf00      	nop
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <GenericLevel_LightBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void.
*/
void GenericLevel_LightBinding(Generic_LevelStatus_t* gLevel_param , MOBLEUINT8 flag, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{ 
 800f368:	b480      	push	{r7}
 800f36a:	b085      	sub	sp, #20
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	4608      	mov	r0, r1
 800f372:	4611      	mov	r1, r2
 800f374:	461a      	mov	r2, r3
 800f376:	4603      	mov	r3, r0
 800f378:	70fb      	strb	r3, [r7, #3]
 800f37a:	460b      	mov	r3, r1
 800f37c:	70bb      	strb	r3, [r7, #2]
 800f37e:	4613      	mov	r3, r2
 800f380:	707b      	strb	r3, [r7, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
      }
    }
  }
#endif    
  if((trnsnFlag != MODEL_TRANSITION_STOP) && (trnsnCmplt != MOBLE_TRUE) && (Publication1SecFlag.Transition1SecFlag == MOBLE_FALSE))
 800f382:	787b      	ldrb	r3, [r7, #1]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d06a      	beq.n	800f45e <GenericLevel_LightBinding+0xf6>
 800f388:	7e3b      	ldrb	r3, [r7, #24]
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d067      	beq.n	800f45e <GenericLevel_LightBinding+0xf6>
 800f38e:	4b37      	ldr	r3, [pc, #220]	@ (800f46c <GenericLevel_LightBinding+0x104>)
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d163      	bne.n	800f45e <GenericLevel_LightBinding+0xf6>
  {
    Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= 0;
 800f396:	78ba      	ldrb	r2, [r7, #2]
 800f398:	78b9      	ldrb	r1, [r7, #2]
 800f39a:	4835      	ldr	r0, [pc, #212]	@ (800f470 <GenericLevel_LightBinding+0x108>)
 800f39c:	460b      	mov	r3, r1
 800f39e:	00db      	lsls	r3, r3, #3
 800f3a0:	440b      	add	r3, r1
 800f3a2:	00d9      	lsls	r1, r3, #3
 800f3a4:	440b      	add	r3, r1
 800f3a6:	4403      	add	r3, r0
 800f3a8:	3350      	adds	r3, #80	@ 0x50
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	4830      	ldr	r0, [pc, #192]	@ (800f470 <GenericLevel_LightBinding+0x108>)
 800f3ae:	0059      	lsls	r1, r3, #1
 800f3b0:	4613      	mov	r3, r2
 800f3b2:	00db      	lsls	r3, r3, #3
 800f3b4:	4413      	add	r3, r2
 800f3b6:	00da      	lsls	r2, r3, #3
 800f3b8:	4413      	add	r3, r2
 800f3ba:	440b      	add	r3, r1
 800f3bc:	4403      	add	r3, r0
 800f3be:	2200      	movs	r2, #0
 800f3c0:	701a      	strb	r2, [r3, #0]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = 0;
 800f3c6:	78ba      	ldrb	r2, [r7, #2]
 800f3c8:	78b9      	ldrb	r1, [r7, #2]
 800f3ca:	4829      	ldr	r0, [pc, #164]	@ (800f470 <GenericLevel_LightBinding+0x108>)
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	00db      	lsls	r3, r3, #3
 800f3d0:	440b      	add	r3, r1
 800f3d2:	00d9      	lsls	r1, r3, #3
 800f3d4:	440b      	add	r3, r1
 800f3d6:	4403      	add	r3, r0
 800f3d8:	3350      	adds	r3, #80	@ 0x50
 800f3da:	781b      	ldrb	r3, [r3, #0]
 800f3dc:	4824      	ldr	r0, [pc, #144]	@ (800f470 <GenericLevel_LightBinding+0x108>)
 800f3de:	3314      	adds	r3, #20
 800f3e0:	0059      	lsls	r1, r3, #1
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	00db      	lsls	r3, r3, #3
 800f3e6:	4413      	add	r3, r2
 800f3e8:	00da      	lsls	r2, r3, #3
 800f3ea:	4413      	add	r3, r2
 800f3ec:	440b      	add	r3, r1
 800f3ee:	4403      	add	r3, r0
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	701a      	strb	r2, [r3, #0]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].BindedStateCount = 0;
 800f3f8:	78ba      	ldrb	r2, [r7, #2]
 800f3fa:	491d      	ldr	r1, [pc, #116]	@ (800f470 <GenericLevel_LightBinding+0x108>)
 800f3fc:	4613      	mov	r3, r2
 800f3fe:	00db      	lsls	r3, r3, #3
 800f400:	4413      	add	r3, r2
 800f402:	00da      	lsls	r2, r3, #3
 800f404:	4413      	add	r3, r2
 800f406:	440b      	add	r3, r1
 800f408:	3350      	adds	r3, #80	@ 0x50
 800f40a:	2200      	movs	r2, #0
 800f40c:	701a      	strb	r2, [r3, #0]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 800f40e:	2300      	movs	r3, #0
 800f410:	73fb      	strb	r3, [r7, #15]
 800f412:	e021      	b.n	800f458 <GenericLevel_LightBinding+0xf0>
    {
      Light_PublishOpcodeList[elementIndex].Model_ID[idx] = 0;
 800f414:	78ba      	ldrb	r2, [r7, #2]
 800f416:	7bfb      	ldrb	r3, [r7, #15]
 800f418:	4815      	ldr	r0, [pc, #84]	@ (800f470 <GenericLevel_LightBinding+0x108>)
 800f41a:	3314      	adds	r3, #20
 800f41c:	0059      	lsls	r1, r3, #1
 800f41e:	4613      	mov	r3, r2
 800f420:	00db      	lsls	r3, r3, #3
 800f422:	4413      	add	r3, r2
 800f424:	00da      	lsls	r2, r3, #3
 800f426:	4413      	add	r3, r2
 800f428:	440b      	add	r3, r1
 800f42a:	4403      	add	r3, r0
 800f42c:	2200      	movs	r2, #0
 800f42e:	701a      	strb	r2, [r3, #0]
 800f430:	2200      	movs	r2, #0
 800f432:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[idx] = 0;
 800f434:	78ba      	ldrb	r2, [r7, #2]
 800f436:	7bfb      	ldrb	r3, [r7, #15]
 800f438:	480d      	ldr	r0, [pc, #52]	@ (800f470 <GenericLevel_LightBinding+0x108>)
 800f43a:	0059      	lsls	r1, r3, #1
 800f43c:	4613      	mov	r3, r2
 800f43e:	00db      	lsls	r3, r3, #3
 800f440:	4413      	add	r3, r2
 800f442:	00da      	lsls	r2, r3, #3
 800f444:	4413      	add	r3, r2
 800f446:	440b      	add	r3, r1
 800f448:	4403      	add	r3, r0
 800f44a:	2200      	movs	r2, #0
 800f44c:	701a      	strb	r2, [r3, #0]
 800f44e:	2200      	movs	r2, #0
 800f450:	705a      	strb	r2, [r3, #1]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 800f452:	7bfb      	ldrb	r3, [r7, #15]
 800f454:	3301      	adds	r3, #1
 800f456:	73fb      	strb	r3, [r7, #15]
 800f458:	7bfb      	ldrb	r3, [r7, #15]
 800f45a:	2b13      	cmp	r3, #19
 800f45c:	d9da      	bls.n	800f414 <GenericLevel_LightBinding+0xac>
    }
  } 
}
 800f45e:	bf00      	nop
 800f460:	3714      	adds	r7, #20
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
 800f46a:	bf00      	nop
 800f46c:	200046f8 	.word	0x200046f8
 800f470:	20004708 	.word	0x20004708

0800f474 <Chk_OpcodePresent>:
* @param opcode: opcode of the model
* @param elementIndex:element index of the model
* @return : MOBLE_RESULT
*/
MOBLE_RESULT Chk_OpcodePresent(MOBLEUINT16 opcode ,MOBLEUINT8 elementIndex)
{
 800f474:	b480      	push	{r7}
 800f476:	b085      	sub	sp, #20
 800f478:	af00      	add	r7, sp, #0
 800f47a:	4603      	mov	r3, r0
 800f47c:	460a      	mov	r2, r1
 800f47e:	80fb      	strh	r3, [r7, #6]
 800f480:	4613      	mov	r3, r2
 800f482:	717b      	strb	r3, [r7, #5]
 
  for(MOBLEUINT8 index=0; index < MAX_NUM_BINDED_STATE; index++)
 800f484:	2300      	movs	r3, #0
 800f486:	73fb      	strb	r3, [r7, #15]
 800f488:	e014      	b.n	800f4b4 <Chk_OpcodePresent+0x40>
  {
    if((Light_PublishOpcodeList[elementIndex].PublishStateOpcode[index]) == opcode)
 800f48a:	797a      	ldrb	r2, [r7, #5]
 800f48c:	7bfb      	ldrb	r3, [r7, #15]
 800f48e:	480e      	ldr	r0, [pc, #56]	@ (800f4c8 <Chk_OpcodePresent+0x54>)
 800f490:	0059      	lsls	r1, r3, #1
 800f492:	4613      	mov	r3, r2
 800f494:	00db      	lsls	r3, r3, #3
 800f496:	4413      	add	r3, r2
 800f498:	00da      	lsls	r2, r3, #3
 800f49a:	4413      	add	r3, r2
 800f49c:	440b      	add	r3, r1
 800f49e:	4403      	add	r3, r0
 800f4a0:	881b      	ldrh	r3, [r3, #0]
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	88fa      	ldrh	r2, [r7, #6]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d101      	bne.n	800f4ae <Chk_OpcodePresent+0x3a>
    {
      return  MOBLE_RESULT_FALSE;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	e006      	b.n	800f4bc <Chk_OpcodePresent+0x48>
  for(MOBLEUINT8 index=0; index < MAX_NUM_BINDED_STATE; index++)
 800f4ae:	7bfb      	ldrb	r3, [r7, #15]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	73fb      	strb	r3, [r7, #15]
 800f4b4:	7bfb      	ldrb	r3, [r7, #15]
 800f4b6:	2b13      	cmp	r3, #19
 800f4b8:	d9e7      	bls.n	800f48a <Chk_OpcodePresent+0x16>
    }
  }
   return MOBLE_RESULT_SUCCESS;     
 800f4ba:	2300      	movs	r3, #0
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3714      	adds	r7, #20
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr
 800f4c8:	20004708 	.word	0x20004708

0800f4cc <Punblication_OneSecTimer>:
* @brief  Function used to calculate the particular time delay only once.
* @param  MOBLEUINT16
* @retval MOBLEUINT8
*/
void Punblication_OneSecTimer(void)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	af00      	add	r7, sp, #0
  static MOBLEUINT32 Check_time;
  
  /* Taking the time stamp for particular time */
  if(Publication1SecFlag.TimeStampFlag == MOBLE_FALSE)
 800f4d0:	4b0e      	ldr	r3, [pc, #56]	@ (800f50c <Punblication_OneSecTimer+0x40>)
 800f4d2:	785b      	ldrb	r3, [r3, #1]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d107      	bne.n	800f4e8 <Punblication_OneSecTimer+0x1c>
  {
    Check_time = Clock_Time();
 800f4d8:	f7f7 fb24 	bl	8006b24 <HAL_GetTick>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	4a0c      	ldr	r2, [pc, #48]	@ (800f510 <Punblication_OneSecTimer+0x44>)
 800f4e0:	6013      	str	r3, [r2, #0]
    Publication1SecFlag.TimeStampFlag = MOBLE_TRUE;
 800f4e2:	4b0a      	ldr	r3, [pc, #40]	@ (800f50c <Punblication_OneSecTimer+0x40>)
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	705a      	strb	r2, [r3, #1]
  }
  
  if(((Clock_Time()- Check_time) >= PUBLISH_1SEC_TIME) &&
 800f4e8:	f7f7 fb1c 	bl	8006b24 <HAL_GetTick>
 800f4ec:	4602      	mov	r2, r0
 800f4ee:	4b08      	ldr	r3, [pc, #32]	@ (800f510 <Punblication_OneSecTimer+0x44>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	1ad3      	subs	r3, r2, r3
 800f4f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f4f8:	d306      	bcc.n	800f508 <Punblication_OneSecTimer+0x3c>
                  (Publication1SecFlag.Transition1SecFlag == MOBLE_FALSE))
 800f4fa:	4b04      	ldr	r3, [pc, #16]	@ (800f50c <Punblication_OneSecTimer+0x40>)
 800f4fc:	781b      	ldrb	r3, [r3, #0]
  if(((Clock_Time()- Check_time) >= PUBLISH_1SEC_TIME) &&
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d102      	bne.n	800f508 <Punblication_OneSecTimer+0x3c>
  {
      Publication1SecFlag.Transition1SecFlag = MOBLE_TRUE;
 800f502:	4b02      	ldr	r3, [pc, #8]	@ (800f50c <Punblication_OneSecTimer+0x40>)
 800f504:	2201      	movs	r2, #1
 800f506:	701a      	strb	r2, [r3, #0]
  }
}
 800f508:	bf00      	nop
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	200046f8 	.word	0x200046f8
 800f510:	2000475c 	.word	0x2000475c

0800f514 <Light_RestoreModelStates>:
* @brief function used to restore the states of the generic model.
* @param pointer to the array
* return void.
*/
void Light_RestoreModelStates(void *model_State , MOBLEUINT8 elementIndex)
{
 800f514:	b480      	push	{r7}
 800f516:	b083      	sub	sp, #12
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	460b      	mov	r3, r1
 800f51e:	70fb      	strb	r3, [r7, #3]
  Light_HslStatus[elementIndex].PresentHslSaturation16 = ((Models_ParamNvm_t *)model_State)->HslSaturation;
  Light_HslDefaultParam[elementIndex].HslLightnessDefault16 = ((Models_ParamNvm_t *)model_State)->HslLightnessDefault;
  Light_HslDefaultParam[elementIndex].HslHueDefault16 = ((Models_ParamNvm_t *)model_State)->HslHueDefault;
  Light_HslDefaultParam[elementIndex].HslSaturationDefault16 = ((Models_ParamNvm_t *)model_State)->HslSaturationDefault;  
#endif   
}
 800f520:	bf00      	nop
 800f522:	370c      	adds	r7, #12
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr

0800f52c <MESH_Init>:
 * @brief  Mesh initialization
 * @param  None
 * @retval None
 */
void MESH_Init(void)
{
 800f52c:	b5b0      	push	{r4, r5, r7, lr}
 800f52e:	b090      	sub	sp, #64	@ 0x40
 800f530:	af04      	add	r7, sp, #16
  MOBLEUINT8 uuid[16];
  MOBLEUINT8 PrvnDevKeyFlag = 0;
 800f532:	2300      	movs	r3, #0
 800f534:	75fb      	strb	r3, [r7, #23]
//#if PROVISIONER_FEATURE
//   MOBLEUINT8 prvsnrDevKey[16];
//#endif
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;  
 800f536:	1d3b      	adds	r3, r7, #4
 800f538:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  /* Check for valid Board Address */
  if (!Appli_CheckBdMacAddr())
 800f53a:	f7f5 fd7f 	bl	800503c <Appli_CheckBdMacAddr>
 800f53e:	4603      	mov	r3, r0
 800f540:	2b00      	cmp	r3, #0
 800f542:	d105      	bne.n	800f550 <MESH_Init+0x24>
  {
    TRACE_I(TF_INIT,"Bad BD_MAC ADDR!\r\n");
 800f544:	485c      	ldr	r0, [pc, #368]	@ (800f6b8 <MESH_Init+0x18c>)
 800f546:	f017 fa0d 	bl	8026964 <puts>
    /* LED Blinks if BDAddr is not appropriate */
    while (1)
    {
      Appli_LedBlink();
 800f54a:	f7f5 fbcd 	bl	8004ce8 <Appli_LedBlink>
 800f54e:	e7fc      	b.n	800f54a <MESH_Init+0x1e>
    }
  }
  
  /* Set BLE configuration function callbacks */
  BLEMesh_BleHardwareInitCallBack(&user_ble_cb);  
 800f550:	485a      	ldr	r0, [pc, #360]	@ (800f6bc <MESH_Init+0x190>)
 800f552:	f00b f94f 	bl	801a7f4 <BLEMesh_BleHardwareInitCallBack>
  
  /*Set BLE Config Model APIs callback*/
  BLEMesh_BleConfigModelInitCallBack(&config_model_cb);
 800f556:	485a      	ldr	r0, [pc, #360]	@ (800f6c0 <MESH_Init+0x194>)
 800f558:	f00b f956 	bl	801a808 <BLEMesh_BleConfigModelInitCallBack>

  /* Initializes BLE-Mesh Library */
  if (MOBLE_FAILED(BLEMesh_Init(&BLEMeshlib_Init_params)))
 800f55c:	4859      	ldr	r0, [pc, #356]	@ (800f6c4 <MESH_Init+0x198>)
 800f55e:	f014 fea5 	bl	80242ac <BLEMesh_Init>
 800f562:	4603      	mov	r3, r0
 800f564:	2b01      	cmp	r3, #1
 800f566:	d905      	bls.n	800f574 <MESH_Init+0x48>
  {
    TRACE_I(TF_INIT,"Could not initialize BLE-Mesh library!\r\n");   
 800f568:	4857      	ldr	r0, [pc, #348]	@ (800f6c8 <MESH_Init+0x19c>)
 800f56a:	f017 f9fb 	bl	8026964 <puts>
    /* LED continuously blinks if library fails to initialize */
    while (1)
    {
      Appli_LedBlink();
 800f56e:	f7f5 fbbb 	bl	8004ce8 <Appli_LedBlink>
 800f572:	e7fc      	b.n	800f56e <MESH_Init+0x42>
    }
  }
  
  /*Check SIG & VENDOR models limit*/
  if(MOBLE_FAILED(AppliCheck_EnabledModelsList()))
 800f574:	f001 f81a 	bl	80105ac <AppliCheck_EnabledModelsList>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b01      	cmp	r3, #1
 800f57c:	d902      	bls.n	800f584 <MESH_Init+0x58>
  {
    /* LED continuously blinks if library fails to initialize */
    while (1)
    {
      Appli_LedBlink();
 800f57e:	f7f5 fbb3 	bl	8004ce8 <Appli_LedBlink>
 800f582:	e7fc      	b.n	800f57e <MESH_Init+0x52>
  /* This function also checks for Power OnOff Cycles     
     Define the following Macro "ENABLE_UNPROVISIONING_BY_POWER_ONOFF_CYCLE" 
     to check the Power-OnOff Cycles
    5 Continuous cycles of OnOff with Ontime <2 sec will cause unprovisioning
  */
  Appli_Init(&PrvnDevKeyFlag);
 800f584:	f107 0317 	add.w	r3, r7, #23
 800f588:	4618      	mov	r0, r3
 800f58a:	f7f5 ff5d 	bl	8005448 <Appli_Init>
  
  Appli_StartProvisionerMode(1);
  
#else
  /* Checks if the node is already provisioned or not */
  if (BLEMesh_IsUnprovisioned() == MOBLE_TRUE)
 800f58e:	f00c fe33 	bl	801c1f8 <BLEMesh_IsUnprovisioned>
 800f592:	4603      	mov	r3, r0
 800f594:	2b01      	cmp	r3, #1
 800f596:	d108      	bne.n	800f5aa <MESH_Init+0x7e>
  {
    BLEMesh_InitUnprovisionedNode(); /* Initializes  Unprovisioned node */
 800f598:	f00c fda2 	bl	801c0e0 <BLEMesh_InitUnprovisionedNode>

    TRACE_I(TF_PROVISION,"Unprovisioned device \r\n");
 800f59c:	484b      	ldr	r0, [pc, #300]	@ (800f6cc <MESH_Init+0x1a0>)
 800f59e:	f017 f9e1 	bl	8026964 <puts>
    
#if PB_ADV_SUPPORTED
    BLEMesh_SetUnprovisionedDevBeaconInterval(100);
 800f5a2:	2064      	movs	r0, #100	@ 0x64
 800f5a4:	f00a ff38 	bl	801a418 <BLEMesh_SetUnprovisionedDevBeaconInterval>
 800f5a8:	e00b      	b.n	800f5c2 <MESH_Init+0x96>
#endif    
  }
  else
  {
    BLEMesh_InitProvisionedNode();  /* Initializes  Provisioned node */
 800f5aa:	f00c fcdd 	bl	801bf68 <BLEMesh_InitProvisionedNode>
    TRACE_I(TF_PROVISION,"Provisioned node \r\n");
 800f5ae:	4848      	ldr	r0, [pc, #288]	@ (800f6d0 <MESH_Init+0x1a4>)
 800f5b0:	f017 f9d8 	bl	8026964 <puts>
    TRACE_I(TF_INIT,"Provisioned Node Address: [%04x] \n\r", BLEMesh_GetAddress());       
 800f5b4:	f00a febe 	bl	801a334 <BLEMesh_GetAddress>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	4845      	ldr	r0, [pc, #276]	@ (800f6d4 <MESH_Init+0x1a8>)
 800f5be:	f017 f969 	bl	8026894 <iprintf>
//                                     PROVISIONER_ROOT_ADDR_DEFAULT,
//                                     &PrvnDevKeyFlag, 
//                                     APPLICATION_NUMBER_OF_ELEMENTS);  
//#endif  
/* Check to manually unprovision the board */
  Appli_CheckForUnprovision();
 800f5c2:	f7f5 fc9f 	bl	8004f04 <Appli_CheckForUnprovision>
  
  /* Set attention timer callback */
  BLEMesh_SetAttentionTimerCallback(Appli_BleAttentionTimerCb);
 800f5c6:	4844      	ldr	r0, [pc, #272]	@ (800f6d8 <MESH_Init+0x1ac>)
 800f5c8:	f00a ff1a 	bl	801a400 <BLEMesh_SetAttentionTimerCallback>

#if TF_MISC
  Appli_ConfigurationInfoDump();
 800f5cc:	f000 f89a 	bl	800f704 <Appli_ConfigurationInfoDump>
#endif  

/* Set uuid for the board*/
  Appli_BleSetUUIDCb(uuid);
 800f5d0:	f107 0318 	add.w	r3, r7, #24
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7f5 fbbd 	bl	8004d54 <Appli_BleSetUUIDCb>
  
  /* Prints the MAC Address of the board */ 
  TRACE_I(TF_INIT,"BLE-Mesh Lighting Demo v%s\n\r", BLE_MESH_APPLICATION_VERSION); 
 800f5da:	4940      	ldr	r1, [pc, #256]	@ (800f6dc <MESH_Init+0x1b0>)
 800f5dc:	4840      	ldr	r0, [pc, #256]	@ (800f6e0 <MESH_Init+0x1b4>)
 800f5de:	f017 f959 	bl	8026894 <iprintf>
  TRACE_I(TF_INIT,"BLE-Mesh Library v%s\n\r", BLEMesh_GetLibraryVersion()); 
 800f5e2:	f00b f8ff 	bl	801a7e4 <BLEMesh_GetLibraryVersion>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	483e      	ldr	r0, [pc, #248]	@ (800f6e4 <MESH_Init+0x1b8>)
 800f5ec:	f017 f952 	bl	8026894 <iprintf>
  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800f5f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5f2:	f003 fc49 	bl	8012e88 <SHCI_GetWirelessFwInfo>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d11f      	bne.n	800f63c <MESH_Init+0x110>
  {
    // Error
  }
  else
  {
    TRACE_I(TF_INIT,"BLE Stack v%d.%d.%d Branch=%d Type=%d\n\r", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub, p_wireless_info->VersionBranch, p_wireless_info->VersionReleaseType);
 800f5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	4619      	mov	r1, r3
 800f602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f604:	785b      	ldrb	r3, [r3, #1]
 800f606:	4618      	mov	r0, r3
 800f608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f60a:	789b      	ldrb	r3, [r3, #2]
 800f60c:	461c      	mov	r4, r3
 800f60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f610:	78db      	ldrb	r3, [r3, #3]
 800f612:	461a      	mov	r2, r3
 800f614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f616:	791b      	ldrb	r3, [r3, #4]
 800f618:	9301      	str	r3, [sp, #4]
 800f61a:	9200      	str	r2, [sp, #0]
 800f61c:	4623      	mov	r3, r4
 800f61e:	4602      	mov	r2, r0
 800f620:	4831      	ldr	r0, [pc, #196]	@ (800f6e8 <MESH_Init+0x1bc>)
 800f622:	f017 f937 	bl	8026894 <iprintf>
    TRACE_I(TF_INIT,"FUS v%d.%d.%d\n\r", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 800f626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f628:	7a9b      	ldrb	r3, [r3, #10]
 800f62a:	4619      	mov	r1, r3
 800f62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f62e:	7adb      	ldrb	r3, [r3, #11]
 800f630:	461a      	mov	r2, r3
 800f632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f634:	7b1b      	ldrb	r3, [r3, #12]
 800f636:	482d      	ldr	r0, [pc, #180]	@ (800f6ec <MESH_Init+0x1c0>)
 800f638:	f017 f92c 	bl	8026894 <iprintf>
  }
  
  TRACE_I(TF_INIT,"BD_MAC Address = [%02x]:[%02x]:[%02x]:[%02x]:[%02x]:[%02x] \n\r",
 800f63c:	4b2c      	ldr	r3, [pc, #176]	@ (800f6f0 <MESH_Init+0x1c4>)
 800f63e:	795b      	ldrb	r3, [r3, #5]
 800f640:	4618      	mov	r0, r3
 800f642:	4b2b      	ldr	r3, [pc, #172]	@ (800f6f0 <MESH_Init+0x1c4>)
 800f644:	791b      	ldrb	r3, [r3, #4]
 800f646:	461c      	mov	r4, r3
 800f648:	4b29      	ldr	r3, [pc, #164]	@ (800f6f0 <MESH_Init+0x1c4>)
 800f64a:	78db      	ldrb	r3, [r3, #3]
 800f64c:	461d      	mov	r5, r3
 800f64e:	4b28      	ldr	r3, [pc, #160]	@ (800f6f0 <MESH_Init+0x1c4>)
 800f650:	789b      	ldrb	r3, [r3, #2]
 800f652:	461a      	mov	r2, r3
 800f654:	4b26      	ldr	r3, [pc, #152]	@ (800f6f0 <MESH_Init+0x1c4>)
 800f656:	785b      	ldrb	r3, [r3, #1]
 800f658:	4619      	mov	r1, r3
 800f65a:	4b25      	ldr	r3, [pc, #148]	@ (800f6f0 <MESH_Init+0x1c4>)
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	9302      	str	r3, [sp, #8]
 800f660:	9101      	str	r1, [sp, #4]
 800f662:	9200      	str	r2, [sp, #0]
 800f664:	462b      	mov	r3, r5
 800f666:	4622      	mov	r2, r4
 800f668:	4601      	mov	r1, r0
 800f66a:	4822      	ldr	r0, [pc, #136]	@ (800f6f4 <MESH_Init+0x1c8>)
 800f66c:	f017 f912 	bl	8026894 <iprintf>
          bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
  TRACE_I(TF_INIT,"UUID Address = ");
 800f670:	4821      	ldr	r0, [pc, #132]	@ (800f6f8 <MESH_Init+0x1cc>)
 800f672:	f017 f90f 	bl	8026894 <iprintf>
  
  for(MOBLEUINT8 i=0;i<16;i++)
 800f676:	2300      	movs	r3, #0
 800f678:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f67c:	e00e      	b.n	800f69c <MESH_Init+0x170>
  {
    TRACE_I(TF_INIT,"[%02x] ",uuid[i]);
 800f67e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f682:	3330      	adds	r3, #48	@ 0x30
 800f684:	443b      	add	r3, r7
 800f686:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800f68a:	4619      	mov	r1, r3
 800f68c:	481b      	ldr	r0, [pc, #108]	@ (800f6fc <MESH_Init+0x1d0>)
 800f68e:	f017 f901 	bl	8026894 <iprintf>
  for(MOBLEUINT8 i=0;i<16;i++)
 800f692:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f696:	3301      	adds	r3, #1
 800f698:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f69c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6a0:	2b0f      	cmp	r3, #15
 800f6a2:	d9ec      	bls.n	800f67e <MESH_Init+0x152>
  }
  TRACE_I(TF_INIT,"\r\n");
 800f6a4:	4816      	ldr	r0, [pc, #88]	@ (800f700 <MESH_Init+0x1d4>)
 800f6a6:	f017 f95d 	bl	8026964 <puts>

  /* Models initialization */  
  BLEMesh_ModelsInit();
 800f6aa:	f7f6 fb03 	bl	8005cb4 <BLEMesh_ModelsInit>
#endif
  
#ifdef CUSTOM_BOARD_PWM_SELECTION  
  Light_UpdatePWMValue((MOBLEUINT8)DEFAULT_STATE);
#endif
}
 800f6ae:	bf00      	nop
 800f6b0:	3730      	adds	r7, #48	@ 0x30
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bdb0      	pop	{r4, r5, r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	0802b000 	.word	0x0802b000
 800f6bc:	0802e34c 	.word	0x0802e34c
 800f6c0:	0802e370 	.word	0x0802e370
 800f6c4:	0802e3ac 	.word	0x0802e3ac
 800f6c8:	0802b014 	.word	0x0802b014
 800f6cc:	0802b03c 	.word	0x0802b03c
 800f6d0:	0802b054 	.word	0x0802b054
 800f6d4:	0802b068 	.word	0x0802b068
 800f6d8:	08004ead 	.word	0x08004ead
 800f6dc:	0802b08c 	.word	0x0802b08c
 800f6e0:	0802b098 	.word	0x0802b098
 800f6e4:	0802b0b8 	.word	0x0802b0b8
 800f6e8:	0802b0d0 	.word	0x0802b0d0
 800f6ec:	0802b0f8 	.word	0x0802b0f8
 800f6f0:	200045a8 	.word	0x200045a8
 800f6f4:	0802b108 	.word	0x0802b108
 800f6f8:	0802b148 	.word	0x0802b148
 800f6fc:	0802b158 	.word	0x0802b158
 800f700:	0802b160 	.word	0x0802b160

0800f704 <Appli_ConfigurationInfoDump>:
* @brief This function is the Information dump function
* @param  None
* @retval None
*/
void Appli_ConfigurationInfoDump(void)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
  TRACE_I(TF_MISC,"\r\n********************\r\n");
 800f70a:	4863      	ldr	r0, [pc, #396]	@ (800f898 <Appli_ConfigurationInfoDump+0x194>)
 800f70c:	f017 f92a 	bl	8026964 <puts>
  TRACE_I(TF_MISC,"[Features Supported] \r\n");
 800f710:	4862      	ldr	r0, [pc, #392]	@ (800f89c <Appli_ConfigurationInfoDump+0x198>)
 800f712:	f017 f927 	bl	8026964 <puts>

#ifdef ENABLE_RELAY_FEATURE
  TRACE_I(TF_MISC,"Relay = Enabled \r\n");
 800f716:	4862      	ldr	r0, [pc, #392]	@ (800f8a0 <Appli_ConfigurationInfoDump+0x19c>)
 800f718:	f017 f924 	bl	8026964 <puts>
#endif 
  
#ifdef ENABLE_PROXY_FEATURE
  TRACE_I(TF_MISC,"Proxy = Enabled \r\n");
 800f71c:	4861      	ldr	r0, [pc, #388]	@ (800f8a4 <Appli_ConfigurationInfoDump+0x1a0>)
 800f71e:	f017 f921 	bl	8026964 <puts>
#endif
  
#ifdef ENABLE_FRIEND_FEATURE
  TRACE_I(TF_MISC,"Friend = Enabled \r\n");
 800f722:	4861      	ldr	r0, [pc, #388]	@ (800f8a8 <Appli_ConfigurationInfoDump+0x1a4>)
 800f724:	f017 f91e 	bl	8026964 <puts>
  
#ifdef DYNAMIC_PROVISIONER
  TRACE_I(TF_MISC,"Dynamic Provisioner = Enabled \r\n");
#endif  
  
  TRACE_I(TF_MISC,"\n[Options] \r\n");
 800f728:	4860      	ldr	r0, [pc, #384]	@ (800f8ac <Appli_ConfigurationInfoDump+0x1a8>)
 800f72a:	f017 f91b 	bl	8026964 <puts>
  
#ifdef ENABLE_PB_ADV
  TRACE_I(TF_MISC,"PB-ADV = Enabled \r\n");
 800f72e:	4860      	ldr	r0, [pc, #384]	@ (800f8b0 <Appli_ConfigurationInfoDump+0x1ac>)
 800f730:	f017 f918 	bl	8026964 <puts>
#endif
  
#ifdef ENABLE_PB_GATT  
  TRACE_I(TF_MISC,"PB-GATT = Enabled \r\n");
 800f734:	485f      	ldr	r0, [pc, #380]	@ (800f8b4 <Appli_ConfigurationInfoDump+0x1b0>)
 800f736:	f017 f915 	bl	8026964 <puts>
  
#ifdef ENABLE_AUTH_TYPE_INPUT_OOB
  TRACE_I(TF_MISC,"Input OOB = Enabled \r\n");
#endif
  
  TRACE_I(TF_MISC,"\n[Library Capabilities] \r\n");
 800f73a:	485f      	ldr	r0, [pc, #380]	@ (800f8b8 <Appli_ConfigurationInfoDump+0x1b4>)
 800f73c:	f017 f912 	bl	8026964 <puts>
  
  TRACE_I(TF_MISC,"Net Keys = %d \r\n", BLEMesh_GetNetKeysCount());
 800f740:	f00a fe32 	bl	801a3a8 <BLEMesh_GetNetKeysCount>
 800f744:	4603      	mov	r3, r0
 800f746:	4619      	mov	r1, r3
 800f748:	485c      	ldr	r0, [pc, #368]	@ (800f8bc <Appli_ConfigurationInfoDump+0x1b8>)
 800f74a:	f017 f8a3 	bl	8026894 <iprintf>
  TRACE_I(TF_MISC,"App Keys = %d \r\n", BLEMesh_GetAppKeysCount());
 800f74e:	f00a fe29 	bl	801a3a4 <BLEMesh_GetAppKeysCount>
 800f752:	4603      	mov	r3, r0
 800f754:	4619      	mov	r1, r3
 800f756:	485a      	ldr	r0, [pc, #360]	@ (800f8c0 <Appli_ConfigurationInfoDump+0x1bc>)
 800f758:	f017 f89c 	bl	8026894 <iprintf>
  TRACE_I(TF_MISC,"Elements per Node = %d \r\n", BLEMesh_GetNumberOfElements());
 800f75c:	f00a fe20 	bl	801a3a0 <BLEMesh_GetNumberOfElements>
 800f760:	4603      	mov	r3, r0
 800f762:	4619      	mov	r1, r3
 800f764:	4857      	ldr	r0, [pc, #348]	@ (800f8c4 <Appli_ConfigurationInfoDump+0x1c0>)
 800f766:	f017 f895 	bl	8026894 <iprintf>
  TRACE_I(TF_MISC,"Models per Element = %d \r\n", BLEMesh_GetTotalModelsCount());
 800f76a:	f00a fe17 	bl	801a39c <BLEMesh_GetTotalModelsCount>
 800f76e:	4603      	mov	r3, r0
 800f770:	4619      	mov	r1, r3
 800f772:	4855      	ldr	r0, [pc, #340]	@ (800f8c8 <Appli_ConfigurationInfoDump+0x1c4>)
 800f774:	f017 f88e 	bl	8026894 <iprintf>
  TRACE_I(TF_MISC,"Subscription per Model = %d \r\n", BLEMesh_GetSubscriptionCount());
 800f778:	f00a fe18 	bl	801a3ac <BLEMesh_GetSubscriptionCount>
 800f77c:	4603      	mov	r3, r0
 800f77e:	4619      	mov	r1, r3
 800f780:	4852      	ldr	r0, [pc, #328]	@ (800f8cc <Appli_ConfigurationInfoDump+0x1c8>)
 800f782:	f017 f887 	bl	8026894 <iprintf>
  TRACE_I(TF_MISC,"Default TTL = %d \r\n", BLEMesh_GetTTL());
 800f786:	f00a fe13 	bl	801a3b0 <BLEMesh_GetTTL>
 800f78a:	4603      	mov	r3, r0
 800f78c:	4619      	mov	r1, r3
 800f78e:	4850      	ldr	r0, [pc, #320]	@ (800f8d0 <Appli_ConfigurationInfoDump+0x1cc>)
 800f790:	f017 f880 	bl	8026894 <iprintf>
  TRACE_I(TF_MISC,"Default Network Transmit Count = %d \r\n", BLEMesh_GetNetworkTransmitCount());
 800f794:	f00a fe18 	bl	801a3c8 <BLEMesh_GetNetworkTransmitCount>
 800f798:	4603      	mov	r3, r0
 800f79a:	4619      	mov	r1, r3
 800f79c:	484d      	ldr	r0, [pc, #308]	@ (800f8d4 <Appli_ConfigurationInfoDump+0x1d0>)
 800f79e:	f017 f879 	bl	8026894 <iprintf>
  TRACE_I(TF_MISC,"Default Relay retransmit Count = %d \r\n", BLEMesh_GetRelayRetransmitCount());
 800f7a2:	f00a fe1f 	bl	801a3e4 <BLEMesh_GetRelayRetransmitCount>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	484b      	ldr	r0, [pc, #300]	@ (800f8d8 <Appli_ConfigurationInfoDump+0x1d4>)
 800f7ac:	f017 f872 	bl	8026894 <iprintf>
  
  TRACE_I(TF_MISC,"\n[Enabled Models] \r\n");
 800f7b0:	484a      	ldr	r0, [pc, #296]	@ (800f8dc <Appli_ConfigurationInfoDump+0x1d8>)
 800f7b2:	f017 f8d7 	bl	8026964 <puts>
  
  for(uint8_t elementCount=0; elementCount<APPLICATION_NUMBER_OF_ELEMENTS; elementCount++)  
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	71fb      	strb	r3, [r7, #7]
 800f7ba:	e059      	b.n	800f870 <Appli_ConfigurationInfoDump+0x16c>
  {
    TRACE_I(TF_MISC,"For Element Index = %d or Element Number = %d \r\n", elementCount, (elementCount+1));
 800f7bc:	79f9      	ldrb	r1, [r7, #7]
 800f7be:	79fb      	ldrb	r3, [r7, #7]
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	4846      	ldr	r0, [pc, #280]	@ (800f8e0 <Appli_ConfigurationInfoDump+0x1dc>)
 800f7c6:	f017 f865 	bl	8026894 <iprintf>
#ifdef ENABLE_VENDOR_MODEL_SERVER    
    if ((ENABLE_VENDOR_MODEL_SERVER & (1 << elementCount)) == (1 << elementCount))
 800f7ca:	79fb      	ldrb	r3, [r7, #7]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	bf0c      	ite	eq
 800f7d0:	2301      	moveq	r3, #1
 800f7d2:	2300      	movne	r3, #0
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	79fb      	ldrb	r3, [r7, #7]
 800f7da:	2201      	movs	r2, #1
 800f7dc:	fa02 f303 	lsl.w	r3, r2, r3
 800f7e0:	4299      	cmp	r1, r3
 800f7e2:	d102      	bne.n	800f7ea <Appli_ConfigurationInfoDump+0xe6>
    {
      TRACE_I(TF_MISC,"Vendor Server \r\n");
 800f7e4:	483f      	ldr	r0, [pc, #252]	@ (800f8e4 <Appli_ConfigurationInfoDump+0x1e0>)
 800f7e6:	f017 f8bd 	bl	8026964 <puts>
    }
#endif
  
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF
    if ((ENABLE_GENERIC_MODEL_SERVER_ONOFF & (1 << elementCount)) == (1 << elementCount))
 800f7ea:	79fb      	ldrb	r3, [r7, #7]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	bf0c      	ite	eq
 800f7f0:	2301      	moveq	r3, #1
 800f7f2:	2300      	movne	r3, #0
 800f7f4:	b2db      	uxtb	r3, r3
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	79fb      	ldrb	r3, [r7, #7]
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800f800:	4299      	cmp	r1, r3
 800f802:	d102      	bne.n	800f80a <Appli_ConfigurationInfoDump+0x106>
    {
      TRACE_I(TF_MISC,"Generic On Off Server \r\n");
 800f804:	4838      	ldr	r0, [pc, #224]	@ (800f8e8 <Appli_ConfigurationInfoDump+0x1e4>)
 800f806:	f017 f8ad 	bl	8026964 <puts>
      TRACE_I(TF_MISC,"Generic On Off Client \r\n");
    }
#endif
 
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL
    if ((ENABLE_GENERIC_MODEL_SERVER_LEVEL & (1 << elementCount)) == (1 << elementCount))
 800f80a:	79fb      	ldrb	r3, [r7, #7]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	bf0c      	ite	eq
 800f810:	2301      	moveq	r3, #1
 800f812:	2300      	movne	r3, #0
 800f814:	b2db      	uxtb	r3, r3
 800f816:	4619      	mov	r1, r3
 800f818:	79fb      	ldrb	r3, [r7, #7]
 800f81a:	2201      	movs	r2, #1
 800f81c:	fa02 f303 	lsl.w	r3, r2, r3
 800f820:	4299      	cmp	r1, r3
 800f822:	d102      	bne.n	800f82a <Appli_ConfigurationInfoDump+0x126>
    {
      TRACE_I(TF_MISC,"Generic Level Server \r\n");
 800f824:	4831      	ldr	r0, [pc, #196]	@ (800f8ec <Appli_ConfigurationInfoDump+0x1e8>)
 800f826:	f017 f89d 	bl	8026964 <puts>
      TRACE_I(TF_MISC,"Generic Default Transition Client \r\n");
    }
#endif

#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF
    if ((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF & (1 << elementCount)) == (1 << elementCount))
 800f82a:	79fb      	ldrb	r3, [r7, #7]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	bf0c      	ite	eq
 800f830:	2301      	moveq	r3, #1
 800f832:	2300      	movne	r3, #0
 800f834:	b2db      	uxtb	r3, r3
 800f836:	4619      	mov	r1, r3
 800f838:	79fb      	ldrb	r3, [r7, #7]
 800f83a:	2201      	movs	r2, #1
 800f83c:	fa02 f303 	lsl.w	r3, r2, r3
 800f840:	4299      	cmp	r1, r3
 800f842:	d102      	bne.n	800f84a <Appli_ConfigurationInfoDump+0x146>
    {
      TRACE_I(TF_MISC,"Generic Power On Off Server \r\n");
 800f844:	482a      	ldr	r0, [pc, #168]	@ (800f8f0 <Appli_ConfigurationInfoDump+0x1ec>)
 800f846:	f017 f88d 	bl	8026964 <puts>
    }
#endif

#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP
    if ((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP & (1 << elementCount)) == (1 << elementCount))
 800f84a:	79fb      	ldrb	r3, [r7, #7]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	bf0c      	ite	eq
 800f850:	2301      	moveq	r3, #1
 800f852:	2300      	movne	r3, #0
 800f854:	b2db      	uxtb	r3, r3
 800f856:	4619      	mov	r1, r3
 800f858:	79fb      	ldrb	r3, [r7, #7]
 800f85a:	2201      	movs	r2, #1
 800f85c:	fa02 f303 	lsl.w	r3, r2, r3
 800f860:	4299      	cmp	r1, r3
 800f862:	d102      	bne.n	800f86a <Appli_ConfigurationInfoDump+0x166>
    {
      TRACE_I(TF_MISC,"Generic Power On Off Setup Server \r\n");
 800f864:	4823      	ldr	r0, [pc, #140]	@ (800f8f4 <Appli_ConfigurationInfoDump+0x1f0>)
 800f866:	f017 f87d 	bl	8026964 <puts>
  for(uint8_t elementCount=0; elementCount<APPLICATION_NUMBER_OF_ELEMENTS; elementCount++)  
 800f86a:	79fb      	ldrb	r3, [r7, #7]
 800f86c:	3301      	adds	r3, #1
 800f86e:	71fb      	strb	r3, [r7, #7]
 800f870:	79fb      	ldrb	r3, [r7, #7]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d0a2      	beq.n	800f7bc <Appli_ConfigurationInfoDump+0xb8>
      TRACE_I(TF_MISC,"Scene \r\n");           
    }
#endif
  }
  
TRACE_I(TF_MISC,"\n[Important Information] \r\n");
 800f876:	4820      	ldr	r0, [pc, #128]	@ (800f8f8 <Appli_ConfigurationInfoDump+0x1f4>)
 800f878:	f017 f874 	bl	8026964 <puts>
#if SAVE_EMBD_PROVISION_DATA     
  TRACE_I(TF_MISC,"Embedded Provisioner data saving enabled \r\n");
#endif
  
#ifdef APPLICATION_NUMBER_OF_ELEMENTS     
  TRACE_I(TF_MISC,"Number of Elements enabled in Application: %d \r\n", APPLICATION_NUMBER_OF_ELEMENTS);  
 800f87c:	2101      	movs	r1, #1
 800f87e:	481f      	ldr	r0, [pc, #124]	@ (800f8fc <Appli_ConfigurationInfoDump+0x1f8>)
 800f880:	f017 f808 	bl	8026894 <iprintf>
#endif
  
#ifdef ENABLE_NEIGHBOR_TABLE
  TRACE_I(TF_MISC,"Neighbour Table is enabled \r\n");
 800f884:	481e      	ldr	r0, [pc, #120]	@ (800f900 <Appli_ConfigurationInfoDump+0x1fc>)
 800f886:	f017 f86d 	bl	8026964 <puts>
#endif
  
  TRACE_I(TF_MISC,"********************\r\n\r\n");  
 800f88a:	481e      	ldr	r0, [pc, #120]	@ (800f904 <Appli_ConfigurationInfoDump+0x200>)
 800f88c:	f017 f86a 	bl	8026964 <puts>

}
 800f890:	bf00      	nop
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	0802b164 	.word	0x0802b164
 800f89c:	0802b17c 	.word	0x0802b17c
 800f8a0:	0802b194 	.word	0x0802b194
 800f8a4:	0802b1a8 	.word	0x0802b1a8
 800f8a8:	0802b1bc 	.word	0x0802b1bc
 800f8ac:	0802b1d0 	.word	0x0802b1d0
 800f8b0:	0802b1e0 	.word	0x0802b1e0
 800f8b4:	0802b1f4 	.word	0x0802b1f4
 800f8b8:	0802b208 	.word	0x0802b208
 800f8bc:	0802b224 	.word	0x0802b224
 800f8c0:	0802b238 	.word	0x0802b238
 800f8c4:	0802b24c 	.word	0x0802b24c
 800f8c8:	0802b268 	.word	0x0802b268
 800f8cc:	0802b284 	.word	0x0802b284
 800f8d0:	0802b2a4 	.word	0x0802b2a4
 800f8d4:	0802b2b8 	.word	0x0802b2b8
 800f8d8:	0802b2e0 	.word	0x0802b2e0
 800f8dc:	0802b308 	.word	0x0802b308
 800f8e0:	0802b31c 	.word	0x0802b31c
 800f8e4:	0802b350 	.word	0x0802b350
 800f8e8:	0802b360 	.word	0x0802b360
 800f8ec:	0802b378 	.word	0x0802b378
 800f8f0:	0802b390 	.word	0x0802b390
 800f8f4:	0802b3b0 	.word	0x0802b3b0
 800f8f8:	0802b3d4 	.word	0x0802b3d4
 800f8fc:	0802b3f0 	.word	0x0802b3f0
 800f900:	0802b424 	.word	0x0802b424
 800f904:	0802b444 	.word	0x0802b444

0800f908 <Serial_RxCpltCallback>:
/**
 * @brief  DBG_TRACE USART Rx Transfer completed callback
 * @retval None
 */
static void Serial_RxCpltCallback( void )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 800f90c:	4b24      	ldr	r3, [pc, #144]	@ (800f9a0 <Serial_RxCpltCallback+0x98>)
 800f90e:	881b      	ldrh	r3, [r3, #0]
 800f910:	2bff      	cmp	r3, #255	@ 0xff
 800f912:	d843      	bhi.n	800f99c <Serial_RxCpltCallback+0x94>
  {
    if (aRxBuffer[0] == '\r')
 800f914:	4b23      	ldr	r3, [pc, #140]	@ (800f9a4 <Serial_RxCpltCallback+0x9c>)
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	2b0d      	cmp	r3, #13
 800f91a:	d10e      	bne.n	800f93a <Serial_RxCpltCallback+0x32>
    {
      CommandString[indexReceiveChar] = 0; /* Make last char NULL for string comp */
 800f91c:	4b20      	ldr	r3, [pc, #128]	@ (800f9a0 <Serial_RxCpltCallback+0x98>)
 800f91e:	881b      	ldrh	r3, [r3, #0]
 800f920:	461a      	mov	r2, r3
 800f922:	4b21      	ldr	r3, [pc, #132]	@ (800f9a8 <Serial_RxCpltCallback+0xa0>)
 800f924:	2100      	movs	r1, #0
 800f926:	5499      	strb	r1, [r3, r2]
        
      TRACE_I(TF_SERIAL_PRINTS,"received %s\n", CommandString);
 800f928:	491f      	ldr	r1, [pc, #124]	@ (800f9a8 <Serial_RxCpltCallback+0xa0>)
 800f92a:	4820      	ldr	r0, [pc, #128]	@ (800f9ac <Serial_RxCpltCallback+0xa4>)
 800f92c:	f016 ffb2 	bl	8026894 <iprintf>
      
      UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_SERIAL_REQ_ID, CFG_SCH_PRIO_0);
 800f930:	2100      	movs	r1, #0
 800f932:	2010      	movs	r0, #16
 800f934:	f004 fae0 	bl	8013ef8 <UTIL_SEQ_SetTask>
      CommandString[indexReceiveChar++] = aRxBuffer[0];
      UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
    }
  }

  return;
 800f938:	e030      	b.n	800f99c <Serial_RxCpltCallback+0x94>
    else if (aRxBuffer[0] == '\b')
 800f93a:	4b1a      	ldr	r3, [pc, #104]	@ (800f9a4 <Serial_RxCpltCallback+0x9c>)
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	2b08      	cmp	r3, #8
 800f940:	d10e      	bne.n	800f960 <Serial_RxCpltCallback+0x58>
      if (indexReceiveChar > 1)
 800f942:	4b17      	ldr	r3, [pc, #92]	@ (800f9a0 <Serial_RxCpltCallback+0x98>)
 800f944:	881b      	ldrh	r3, [r3, #0]
 800f946:	2b01      	cmp	r3, #1
 800f948:	d905      	bls.n	800f956 <Serial_RxCpltCallback+0x4e>
        indexReceiveChar--;
 800f94a:	4b15      	ldr	r3, [pc, #84]	@ (800f9a0 <Serial_RxCpltCallback+0x98>)
 800f94c:	881b      	ldrh	r3, [r3, #0]
 800f94e:	3b01      	subs	r3, #1
 800f950:	b29a      	uxth	r2, r3
 800f952:	4b13      	ldr	r3, [pc, #76]	@ (800f9a0 <Serial_RxCpltCallback+0x98>)
 800f954:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 800f956:	2100      	movs	r1, #0
 800f958:	2008      	movs	r0, #8
 800f95a:	f004 facd 	bl	8013ef8 <UTIL_SEQ_SetTask>
  return;
 800f95e:	e01d      	b.n	800f99c <Serial_RxCpltCallback+0x94>
      if ((aRxBuffer[0] >= 'a') && (aRxBuffer[0] <= 'z'))
 800f960:	4b10      	ldr	r3, [pc, #64]	@ (800f9a4 <Serial_RxCpltCallback+0x9c>)
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	2b60      	cmp	r3, #96	@ 0x60
 800f966:	d909      	bls.n	800f97c <Serial_RxCpltCallback+0x74>
 800f968:	4b0e      	ldr	r3, [pc, #56]	@ (800f9a4 <Serial_RxCpltCallback+0x9c>)
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	2b7a      	cmp	r3, #122	@ 0x7a
 800f96e:	d805      	bhi.n	800f97c <Serial_RxCpltCallback+0x74>
        aRxBuffer[0] = aRxBuffer[0] + 'A' - 'a';
 800f970:	4b0c      	ldr	r3, [pc, #48]	@ (800f9a4 <Serial_RxCpltCallback+0x9c>)
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	3b20      	subs	r3, #32
 800f976:	b2da      	uxtb	r2, r3
 800f978:	4b0a      	ldr	r3, [pc, #40]	@ (800f9a4 <Serial_RxCpltCallback+0x9c>)
 800f97a:	701a      	strb	r2, [r3, #0]
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 800f97c:	4b08      	ldr	r3, [pc, #32]	@ (800f9a0 <Serial_RxCpltCallback+0x98>)
 800f97e:	881b      	ldrh	r3, [r3, #0]
 800f980:	1c5a      	adds	r2, r3, #1
 800f982:	b291      	uxth	r1, r2
 800f984:	4a06      	ldr	r2, [pc, #24]	@ (800f9a0 <Serial_RxCpltCallback+0x98>)
 800f986:	8011      	strh	r1, [r2, #0]
 800f988:	461a      	mov	r2, r3
 800f98a:	4b06      	ldr	r3, [pc, #24]	@ (800f9a4 <Serial_RxCpltCallback+0x9c>)
 800f98c:	7819      	ldrb	r1, [r3, #0]
 800f98e:	4b06      	ldr	r3, [pc, #24]	@ (800f9a8 <Serial_RxCpltCallback+0xa0>)
 800f990:	5499      	strb	r1, [r3, r2]
      UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 800f992:	2100      	movs	r1, #0
 800f994:	2008      	movs	r0, #8
 800f996:	f004 faaf 	bl	8013ef8 <UTIL_SEQ_SetTask>
  return;
 800f99a:	bf00      	nop
 800f99c:	bf00      	nop
 }
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	2000486c 	.word	0x2000486c
 800f9a4:	20004764 	.word	0x20004764
 800f9a8:	2000476c 	.word	0x2000476c
 800f9ac:	0802b45c 	.word	0x0802b45c

0800f9b0 <Serial_Uart_Rx_Task>:
/**
 * @brief  DBG_TRACE USART Rx Transfer completed callback
 * @retval None
 */
static void Serial_Uart_Rx_Task( void )
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, Serial_RxCpltCallback);
 800f9b4:	4b03      	ldr	r3, [pc, #12]	@ (800f9c4 <Serial_Uart_Rx_Task+0x14>)
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	4903      	ldr	r1, [pc, #12]	@ (800f9c8 <Serial_Uart_Rx_Task+0x18>)
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	f7f3 f80a 	bl	80029d4 <HW_UART_Receive_IT>
}
 800f9c0:	bf00      	nop
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	0800f909 	.word	0x0800f909
 800f9c8:	20004764 	.word	0x20004764

0800f9cc <Serial_InterfaceProcess>:
* @brief  Processes data coming from serial port   
* @param  void  
* @retval void
*/
void Serial_InterfaceProcess(void)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	af00      	add	r7, sp, #0
  /* Reset button emulation state */
  button_emulation = 0;
 800f9d0:	4b56      	ldr	r3, [pc, #344]	@ (800fb2c <Serial_InterfaceProcess+0x160>)
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	701a      	strb	r2, [r3, #0]
  LongPressButton = 0;
 800f9d6:	4b56      	ldr	r3, [pc, #344]	@ (800fb30 <Serial_InterfaceProcess+0x164>)
 800f9d8:	2200      	movs	r2, #0
 800f9da:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_SERIAL_CONTROL
  if (!strncmp((char const*)CommandString, "ATCL", 4))
 800f9dc:	2204      	movs	r2, #4
 800f9de:	4955      	ldr	r1, [pc, #340]	@ (800fb34 <Serial_InterfaceProcess+0x168>)
 800f9e0:	4855      	ldr	r0, [pc, #340]	@ (800fb38 <Serial_InterfaceProcess+0x16c>)
 800f9e2:	f017 f90c 	bl	8026bfe <strncmp>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d106      	bne.n	800f9fa <Serial_InterfaceProcess+0x2e>
  {            
    SerialCtrl_Process((char *)CommandString, indexReceiveChar);
 800f9ec:	4b53      	ldr	r3, [pc, #332]	@ (800fb3c <Serial_InterfaceProcess+0x170>)
 800f9ee:	881b      	ldrh	r3, [r3, #0]
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	4851      	ldr	r0, [pc, #324]	@ (800fb38 <Serial_InterfaceProcess+0x16c>)
 800f9f4:	f000 fab0 	bl	800ff58 <SerialCtrl_Process>
 800f9f8:	e08d      	b.n	800fb16 <Serial_InterfaceProcess+0x14a>
  }
  else if (!strncmp((char const*)CommandString, "ATVR", 4))
 800f9fa:	2204      	movs	r2, #4
 800f9fc:	4950      	ldr	r1, [pc, #320]	@ (800fb40 <Serial_InterfaceProcess+0x174>)
 800f9fe:	484e      	ldr	r0, [pc, #312]	@ (800fb38 <Serial_InterfaceProcess+0x16c>)
 800fa00:	f017 f8fd 	bl	8026bfe <strncmp>
 800fa04:	4603      	mov	r3, r0
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d106      	bne.n	800fa18 <Serial_InterfaceProcess+0x4c>
  {            
    SerialCtrlVendorRead_Process((char *)CommandString, indexReceiveChar);
 800fa0a:	4b4c      	ldr	r3, [pc, #304]	@ (800fb3c <Serial_InterfaceProcess+0x170>)
 800fa0c:	881b      	ldrh	r3, [r3, #0]
 800fa0e:	4619      	mov	r1, r3
 800fa10:	4849      	ldr	r0, [pc, #292]	@ (800fb38 <Serial_InterfaceProcess+0x16c>)
 800fa12:	f000 f93d 	bl	800fc90 <SerialCtrlVendorRead_Process>
 800fa16:	e07e      	b.n	800fb16 <Serial_InterfaceProcess+0x14a>
  }
  else if (!strncmp((char const*)CommandString, "ATVW", 4))
 800fa18:	2204      	movs	r2, #4
 800fa1a:	494a      	ldr	r1, [pc, #296]	@ (800fb44 <Serial_InterfaceProcess+0x178>)
 800fa1c:	4846      	ldr	r0, [pc, #280]	@ (800fb38 <Serial_InterfaceProcess+0x16c>)
 800fa1e:	f017 f8ee 	bl	8026bfe <strncmp>
 800fa22:	4603      	mov	r3, r0
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d106      	bne.n	800fa36 <Serial_InterfaceProcess+0x6a>
  {            
    SerialCtrlVendorWrite_Process((char *)CommandString, indexReceiveChar);
 800fa28:	4b44      	ldr	r3, [pc, #272]	@ (800fb3c <Serial_InterfaceProcess+0x170>)
 800fa2a:	881b      	ldrh	r3, [r3, #0]
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	4842      	ldr	r0, [pc, #264]	@ (800fb38 <Serial_InterfaceProcess+0x16c>)
 800fa30:	f000 f9aa 	bl	800fd88 <SerialCtrlVendorWrite_Process>
 800fa34:	e06f      	b.n	800fb16 <Serial_InterfaceProcess+0x14a>
  }
#endif
#if ENABLE_UT
  else if(!strncmp((char const*)CommandString, "ATUT", 4))
 800fa36:	2204      	movs	r2, #4
 800fa38:	4943      	ldr	r1, [pc, #268]	@ (800fb48 <Serial_InterfaceProcess+0x17c>)
 800fa3a:	483f      	ldr	r0, [pc, #252]	@ (800fb38 <Serial_InterfaceProcess+0x16c>)
 800fa3c:	f017 f8df 	bl	8026bfe <strncmp>
 800fa40:	4603      	mov	r3, r0
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d106      	bne.n	800fa54 <Serial_InterfaceProcess+0x88>
  {
    SerialUt_Process((char *)CommandString, indexReceiveChar);  
 800fa46:	4b3d      	ldr	r3, [pc, #244]	@ (800fb3c <Serial_InterfaceProcess+0x170>)
 800fa48:	881b      	ldrh	r3, [r3, #0]
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	483a      	ldr	r0, [pc, #232]	@ (800fb38 <Serial_InterfaceProcess+0x16c>)
 800fa4e:	f000 fbd5 	bl	80101fc <SerialUt_Process>
 800fa52:	e060      	b.n	800fb16 <Serial_InterfaceProcess+0x14a>
  else if(!strncmp((char const*)CommandString, "ATLLC", 5))
  {
    Appli_Light_LC_SerialCmd((char *)CommandString, indexReceiveChar);
  }
#endif
  else if(!strncmp((char const*)CommandString, "SW1", 3))
 800fa54:	2203      	movs	r2, #3
 800fa56:	493d      	ldr	r1, [pc, #244]	@ (800fb4c <Serial_InterfaceProcess+0x180>)
 800fa58:	4837      	ldr	r0, [pc, #220]	@ (800fb38 <Serial_InterfaceProcess+0x16c>)
 800fa5a:	f017 f8d0 	bl	8026bfe <strncmp>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d10c      	bne.n	800fa7e <Serial_InterfaceProcess+0xb2>
  {
    button_emulation = 1; /* Set the button emulation */
 800fa64:	4b31      	ldr	r3, [pc, #196]	@ (800fb2c <Serial_InterfaceProcess+0x160>)
 800fa66:	2201      	movs	r2, #1
 800fa68:	701a      	strb	r2, [r3, #0]
    TRACE_I(TF_SERIAL_PRINTS,"SW1 OK\r\n");
 800fa6a:	4839      	ldr	r0, [pc, #228]	@ (800fb50 <Serial_InterfaceProcess+0x184>)
 800fa6c:	f016 ff7a 	bl	8026964 <puts>
    exti_handle.Line = EXTI_LINE_4;
 800fa70:	4b38      	ldr	r3, [pc, #224]	@ (800fb54 <Serial_InterfaceProcess+0x188>)
 800fa72:	4a39      	ldr	r2, [pc, #228]	@ (800fb58 <Serial_InterfaceProcess+0x18c>)
 800fa74:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 800fa76:	4837      	ldr	r0, [pc, #220]	@ (800fb54 <Serial_InterfaceProcess+0x188>)
 800fa78:	f7f7 fd50 	bl	800751c <HAL_EXTI_GenerateSWI>
 800fa7c:	e04b      	b.n	800fb16 <Serial_InterfaceProcess+0x14a>
  }
  else if(!strncmp((char const*)CommandString, "SW2", 3))
 800fa7e:	2203      	movs	r2, #3
 800fa80:	4936      	ldr	r1, [pc, #216]	@ (800fb5c <Serial_InterfaceProcess+0x190>)
 800fa82:	482d      	ldr	r0, [pc, #180]	@ (800fb38 <Serial_InterfaceProcess+0x16c>)
 800fa84:	f017 f8bb 	bl	8026bfe <strncmp>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d10d      	bne.n	800faaa <Serial_InterfaceProcess+0xde>
  {
    button_emulation = 1; /* Set the button emulation */
 800fa8e:	4b27      	ldr	r3, [pc, #156]	@ (800fb2c <Serial_InterfaceProcess+0x160>)
 800fa90:	2201      	movs	r2, #1
 800fa92:	701a      	strb	r2, [r3, #0]
    TRACE_I(TF_SERIAL_PRINTS,"SW2 OK\r\n");
 800fa94:	4832      	ldr	r0, [pc, #200]	@ (800fb60 <Serial_InterfaceProcess+0x194>)
 800fa96:	f016 ff65 	bl	8026964 <puts>
    exti_handle.Line = EXTI_LINE_0;
 800fa9a:	4b2e      	ldr	r3, [pc, #184]	@ (800fb54 <Serial_InterfaceProcess+0x188>)
 800fa9c:	f04f 52b0 	mov.w	r2, #369098752	@ 0x16000000
 800faa0:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 800faa2:	482c      	ldr	r0, [pc, #176]	@ (800fb54 <Serial_InterfaceProcess+0x188>)
 800faa4:	f7f7 fd3a 	bl	800751c <HAL_EXTI_GenerateSWI>
 800faa8:	e035      	b.n	800fb16 <Serial_InterfaceProcess+0x14a>
  }
  else if(!strncmp((char const*)CommandString, "SW3", 3))
 800faaa:	2203      	movs	r2, #3
 800faac:	492d      	ldr	r1, [pc, #180]	@ (800fb64 <Serial_InterfaceProcess+0x198>)
 800faae:	4822      	ldr	r0, [pc, #136]	@ (800fb38 <Serial_InterfaceProcess+0x16c>)
 800fab0:	f017 f8a5 	bl	8026bfe <strncmp>
 800fab4:	4603      	mov	r3, r0
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d10c      	bne.n	800fad4 <Serial_InterfaceProcess+0x108>
  {
    button_emulation = 1; /* Set the button emulation */
 800faba:	4b1c      	ldr	r3, [pc, #112]	@ (800fb2c <Serial_InterfaceProcess+0x160>)
 800fabc:	2201      	movs	r2, #1
 800fabe:	701a      	strb	r2, [r3, #0]
    TRACE_I(TF_SERIAL_PRINTS,"SW3 OK\r\n");
 800fac0:	4829      	ldr	r0, [pc, #164]	@ (800fb68 <Serial_InterfaceProcess+0x19c>)
 800fac2:	f016 ff4f 	bl	8026964 <puts>
    exti_handle.Line = EXTI_LINE_1;
 800fac6:	4b23      	ldr	r3, [pc, #140]	@ (800fb54 <Serial_InterfaceProcess+0x188>)
 800fac8:	4a28      	ldr	r2, [pc, #160]	@ (800fb6c <Serial_InterfaceProcess+0x1a0>)
 800faca:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 800facc:	4821      	ldr	r0, [pc, #132]	@ (800fb54 <Serial_InterfaceProcess+0x188>)
 800face:	f7f7 fd25 	bl	800751c <HAL_EXTI_GenerateSWI>
 800fad2:	e020      	b.n	800fb16 <Serial_InterfaceProcess+0x14a>
  }
  else if (strcmp((char const*)CommandString, "LONG_PRESS") == 0)
 800fad4:	4926      	ldr	r1, [pc, #152]	@ (800fb70 <Serial_InterfaceProcess+0x1a4>)
 800fad6:	4818      	ldr	r0, [pc, #96]	@ (800fb38 <Serial_InterfaceProcess+0x16c>)
 800fad8:	f7f0 fb52 	bl	8000180 <strcmp>
 800fadc:	4603      	mov	r3, r0
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d106      	bne.n	800faf0 <Serial_InterfaceProcess+0x124>
  {
    TRACE_I(TF_SERIAL_PRINTS,"LONG_PRESS OK\r\n");
 800fae2:	4824      	ldr	r0, [pc, #144]	@ (800fb74 <Serial_InterfaceProcess+0x1a8>)
 800fae4:	f016 ff3e 	bl	8026964 <puts>
    LongPressButton=1;
 800fae8:	4b11      	ldr	r3, [pc, #68]	@ (800fb30 <Serial_InterfaceProcess+0x164>)
 800faea:	2201      	movs	r2, #1
 800faec:	701a      	strb	r2, [r3, #0]
 800faee:	e012      	b.n	800fb16 <Serial_InterfaceProcess+0x14a>
  } 
  else
  {
    TRACE_I(TF_SERIAL_PRINTS,"Not Entered valid test parameters\r\n");  
 800faf0:	4821      	ldr	r0, [pc, #132]	@ (800fb78 <Serial_InterfaceProcess+0x1ac>)
 800faf2:	f016 ff37 	bl	8026964 <puts>
    SerialCurrentState = STATE_IDLE;
 800faf6:	4b21      	ldr	r3, [pc, #132]	@ (800fb7c <Serial_InterfaceProcess+0x1b0>)
 800faf8:	2200      	movs	r2, #0
 800fafa:	701a      	strb	r2, [r3, #0]
  }      
  while(indexReceiveChar)
 800fafc:	e00b      	b.n	800fb16 <Serial_InterfaceProcess+0x14a>
  {
    CommandString[--indexReceiveChar] = 0;
 800fafe:	4b0f      	ldr	r3, [pc, #60]	@ (800fb3c <Serial_InterfaceProcess+0x170>)
 800fb00:	881b      	ldrh	r3, [r3, #0]
 800fb02:	3b01      	subs	r3, #1
 800fb04:	b29a      	uxth	r2, r3
 800fb06:	4b0d      	ldr	r3, [pc, #52]	@ (800fb3c <Serial_InterfaceProcess+0x170>)
 800fb08:	801a      	strh	r2, [r3, #0]
 800fb0a:	4b0c      	ldr	r3, [pc, #48]	@ (800fb3c <Serial_InterfaceProcess+0x170>)
 800fb0c:	881b      	ldrh	r3, [r3, #0]
 800fb0e:	461a      	mov	r2, r3
 800fb10:	4b09      	ldr	r3, [pc, #36]	@ (800fb38 <Serial_InterfaceProcess+0x16c>)
 800fb12:	2100      	movs	r1, #0
 800fb14:	5499      	strb	r1, [r3, r2]
  while(indexReceiveChar)
 800fb16:	4b09      	ldr	r3, [pc, #36]	@ (800fb3c <Serial_InterfaceProcess+0x170>)
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d1ef      	bne.n	800fafe <Serial_InterfaceProcess+0x132>
  }
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 800fb1e:	2100      	movs	r1, #0
 800fb20:	2008      	movs	r0, #8
 800fb22:	f004 f9e9 	bl	8013ef8 <UTIL_SEQ_SetTask>
}
 800fb26:	bf00      	nop
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	20004760 	.word	0x20004760
 800fb30:	20004761 	.word	0x20004761
 800fb34:	0802b46c 	.word	0x0802b46c
 800fb38:	2000476c 	.word	0x2000476c
 800fb3c:	2000486c 	.word	0x2000486c
 800fb40:	0802b474 	.word	0x0802b474
 800fb44:	0802b47c 	.word	0x0802b47c
 800fb48:	0802b484 	.word	0x0802b484
 800fb4c:	0802b48c 	.word	0x0802b48c
 800fb50:	0802b490 	.word	0x0802b490
 800fb54:	200040f4 	.word	0x200040f4
 800fb58:	16000004 	.word	0x16000004
 800fb5c:	0802b498 	.word	0x0802b498
 800fb60:	0802b49c 	.word	0x0802b49c
 800fb64:	0802b4a4 	.word	0x0802b4a4
 800fb68:	0802b4a8 	.word	0x0802b4a8
 800fb6c:	16000001 	.word	0x16000001
 800fb70:	0802b4b0 	.word	0x0802b4b0
 800fb74:	0802b4bc 	.word	0x0802b4bc
 800fb78:	0802b4cc 	.word	0x0802b4cc
 800fb7c:	20004762 	.word	0x20004762

0800fb80 <Serial_CharToHexConvert>:
* @param  addr: input ASCI character
* @retval MOBLEUINT8
*/ 

MOBLEUINT8 Serial_CharToHexConvert(char addr)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b085      	sub	sp, #20
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	4603      	mov	r3, r0
 800fb88:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT8 retVal=0;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	73fb      	strb	r3, [r7, #15]
  if (addr >= '0' && addr <= '9')
 800fb8e:	79fb      	ldrb	r3, [r7, #7]
 800fb90:	2b2f      	cmp	r3, #47	@ 0x2f
 800fb92:	d906      	bls.n	800fba2 <Serial_CharToHexConvert+0x22>
 800fb94:	79fb      	ldrb	r3, [r7, #7]
 800fb96:	2b39      	cmp	r3, #57	@ 0x39
 800fb98:	d803      	bhi.n	800fba2 <Serial_CharToHexConvert+0x22>
        retVal = addr - '0';
 800fb9a:	79fb      	ldrb	r3, [r7, #7]
 800fb9c:	3b30      	subs	r3, #48	@ 0x30
 800fb9e:	73fb      	strb	r3, [r7, #15]
 800fba0:	e01c      	b.n	800fbdc <Serial_CharToHexConvert+0x5c>
  else if (addr >= 'a' && addr <= 'f')
 800fba2:	79fb      	ldrb	r3, [r7, #7]
 800fba4:	2b60      	cmp	r3, #96	@ 0x60
 800fba6:	d906      	bls.n	800fbb6 <Serial_CharToHexConvert+0x36>
 800fba8:	79fb      	ldrb	r3, [r7, #7]
 800fbaa:	2b66      	cmp	r3, #102	@ 0x66
 800fbac:	d803      	bhi.n	800fbb6 <Serial_CharToHexConvert+0x36>
        retVal = addr+10-'a';
 800fbae:	79fb      	ldrb	r3, [r7, #7]
 800fbb0:	3b57      	subs	r3, #87	@ 0x57
 800fbb2:	73fb      	strb	r3, [r7, #15]
 800fbb4:	e012      	b.n	800fbdc <Serial_CharToHexConvert+0x5c>
  else if (addr >= 'A' && addr <= 'F')
 800fbb6:	79fb      	ldrb	r3, [r7, #7]
 800fbb8:	2b40      	cmp	r3, #64	@ 0x40
 800fbba:	d906      	bls.n	800fbca <Serial_CharToHexConvert+0x4a>
 800fbbc:	79fb      	ldrb	r3, [r7, #7]
 800fbbe:	2b46      	cmp	r3, #70	@ 0x46
 800fbc0:	d803      	bhi.n	800fbca <Serial_CharToHexConvert+0x4a>
        retVal = addr+10-'A';
 800fbc2:	79fb      	ldrb	r3, [r7, #7]
 800fbc4:	3b37      	subs	r3, #55	@ 0x37
 800fbc6:	73fb      	strb	r3, [r7, #15]
 800fbc8:	e008      	b.n	800fbdc <Serial_CharToHexConvert+0x5c>
  else if (addr == ' ')
 800fbca:	79fb      	ldrb	r3, [r7, #7]
 800fbcc:	2b20      	cmp	r3, #32
 800fbce:	d103      	bne.n	800fbd8 <Serial_CharToHexConvert+0x58>
        retVal = addr+10-' ';
 800fbd0:	79fb      	ldrb	r3, [r7, #7]
 800fbd2:	3b16      	subs	r3, #22
 800fbd4:	73fb      	strb	r3, [r7, #15]
 800fbd6:	e001      	b.n	800fbdc <Serial_CharToHexConvert+0x5c>
  else
       return 0xFF;
 800fbd8:	23ff      	movs	r3, #255	@ 0xff
 800fbda:	e000      	b.n	800fbde <Serial_CharToHexConvert+0x5e>
    
  return retVal;
 800fbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3714      	adds	r7, #20
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr
	...

0800fbec <Serial_Init>:
  * @brief  This function initialize the Rx from UART
  * @param  None
  * @retval None
  */
void Serial_Init(void)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	af00      	add	r7, sp, #0
  button_emulation = 0; /* Reset the button emulation state */
 800fbf0:	4b0a      	ldr	r3, [pc, #40]	@ (800fc1c <Serial_Init+0x30>)
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	701a      	strb	r2, [r3, #0]
  LongPressButton = 0; /* Reset the button press state */
 800fbf6:	4b0a      	ldr	r3, [pc, #40]	@ (800fc20 <Serial_Init+0x34>)
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	701a      	strb	r2, [r3, #0]
  
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_SERIAL_REQ_ID, UTIL_SEQ_RFU, Serial_InterfaceProcess);
 800fbfc:	4a09      	ldr	r2, [pc, #36]	@ (800fc24 <Serial_Init+0x38>)
 800fbfe:	2100      	movs	r1, #0
 800fc00:	2010      	movs	r0, #16
 800fc02:	f004 f957 	bl	8013eb4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, UTIL_SEQ_RFU, Serial_Uart_Rx_Task );
 800fc06:	4a08      	ldr	r2, [pc, #32]	@ (800fc28 <Serial_Init+0x3c>)
 800fc08:	2100      	movs	r1, #0
 800fc0a:	2008      	movs	r0, #8
 800fc0c:	f004 f952 	bl	8013eb4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 800fc10:	2100      	movs	r1, #0
 800fc12:	2008      	movs	r0, #8
 800fc14:	f004 f970 	bl	8013ef8 <UTIL_SEQ_SetTask>

  return;
 800fc18:	bf00      	nop
}
 800fc1a:	bd80      	pop	{r7, pc}
 800fc1c:	20004760 	.word	0x20004760
 800fc20:	20004761 	.word	0x20004761
 800fc24:	0800f9cd 	.word	0x0800f9cd
 800fc28:	0800f9b1 	.word	0x0800f9b1

0800fc2c <BLEMesh_PrintStringCb>:
* @brief  Callback function to print data serially  
* @param  *message: Pointer of data string  
* @retval void
*/
void BLEMesh_PrintStringCb(const char *message)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b082      	sub	sp, #8
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
    TRACE_I(TF_SERIAL_PRINTS,"%s\n\r", (char*)message);
 800fc34:	6879      	ldr	r1, [r7, #4]
 800fc36:	4803      	ldr	r0, [pc, #12]	@ (800fc44 <BLEMesh_PrintStringCb+0x18>)
 800fc38:	f016 fe2c 	bl	8026894 <iprintf>
}
 800fc3c:	bf00      	nop
 800fc3e:	3708      	adds	r7, #8
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}
 800fc44:	0802b4f0 	.word	0x0802b4f0

0800fc48 <BLEMesh_PrintDataCb>:
* @param  *data : Pointer to the data to be printed 
* @param  size : Length of data to be printed
* @retval void
*/
void BLEMesh_PrintDataCb(MOBLEUINT8* data, MOBLEUINT16 size)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	460b      	mov	r3, r1
 800fc52:	807b      	strh	r3, [r7, #2]
    for (int count=0; count<size; ++count)
 800fc54:	2300      	movs	r3, #0
 800fc56:	60fb      	str	r3, [r7, #12]
 800fc58:	e00a      	b.n	800fc70 <BLEMesh_PrintDataCb+0x28>
    {
        TRACE_I(TF_SERIAL_PRINTS,"%02X", data[count]);
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	687a      	ldr	r2, [r7, #4]
 800fc5e:	4413      	add	r3, r2
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	4619      	mov	r1, r3
 800fc64:	4808      	ldr	r0, [pc, #32]	@ (800fc88 <BLEMesh_PrintDataCb+0x40>)
 800fc66:	f016 fe15 	bl	8026894 <iprintf>
    for (int count=0; count<size; ++count)
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	3301      	adds	r3, #1
 800fc6e:	60fb      	str	r3, [r7, #12]
 800fc70:	887b      	ldrh	r3, [r7, #2]
 800fc72:	68fa      	ldr	r2, [r7, #12]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	dbf0      	blt.n	800fc5a <BLEMesh_PrintDataCb+0x12>
    }
    
    TRACE_I(TF_SERIAL_PRINTS,"\n\r");
 800fc78:	4804      	ldr	r0, [pc, #16]	@ (800fc8c <BLEMesh_PrintDataCb+0x44>)
 800fc7a:	f016 fe0b 	bl	8026894 <iprintf>
}
 800fc7e:	bf00      	nop
 800fc80:	3710      	adds	r7, #16
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}
 800fc86:	bf00      	nop
 800fc88:	0802b4f8 	.word	0x0802b4f8
 800fc8c:	0802b500 	.word	0x0802b500

0800fc90 <SerialCtrlVendorRead_Process>:
* @param  rcvdStringBuff: buffer to store input string 
* @param  rcvdStringSize: length of the input string 
* @retval void
*/ 
void SerialCtrlVendorRead_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b08c      	sub	sp, #48	@ 0x30
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	460b      	mov	r3, r1
 800fc9a:	807b      	strh	r3, [r7, #2]
  MOBLEUINT16 command = 0;                          /*Opcode command to be executed by the destination node*/
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
  MOBLEUINT8 datalength = 0;
 800fca0:	2300      	movs	r3, #0
 800fca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  MOBLEUINT8  data [10] = {0};                  /*buffer to output property variables */
 800fca6:	2300      	movs	r3, #0
 800fca8:	61bb      	str	r3, [r7, #24]
 800fcaa:	f107 031c 	add.w	r3, r7, #28
 800fcae:	2200      	movs	r2, #0
 800fcb0:	601a      	str	r2, [r3, #0]
 800fcb2:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result = MOBLE_RESULT_FAIL;
 800fcb4:	2302      	movs	r3, #2
 800fcb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  MODEL_MessageHeader_t msgHdr;
  
  /*Initializing the parameters*/
  msgHdr.elementIndex = 0;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	733b      	strb	r3, [r7, #12]
  msgHdr.peer_addr = 0;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	823b      	strh	r3, [r7, #16]
  msgHdr.dst_peer = 0;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	827b      	strh	r3, [r7, #18]
  msgHdr.ttl = 0;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	753b      	strb	r3, [r7, #20]
  msgHdr.rssi = 0;
 800fcca:	2300      	movs	r3, #0
 800fccc:	757b      	strb	r3, [r7, #21]
  msgHdr.rcvdAppKeyOffset = 0;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	75bb      	strb	r3, [r7, #22]
  msgHdr.rcvdNetKeyOffset = 0;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	75fb      	strb	r3, [r7, #23]
  
  sscanf(rcvdStringBuff+5, "%4hx %hx ", &msgHdr.dst_peer, &command); 
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	1d58      	adds	r0, r3, #5
 800fcda:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800fcde:	f107 030c 	add.w	r3, r7, #12
 800fce2:	1d9a      	adds	r2, r3, #6
 800fce4:	460b      	mov	r3, r1
 800fce6:	4923      	ldr	r1, [pc, #140]	@ (800fd74 <SerialCtrlVendorRead_Process+0xe4>)
 800fce8:	f016 fe44 	bl	8026974 <siscanf>
  
  for(int i = 0; i < 6 ; i++)
 800fcec:	2300      	movs	r3, #0
 800fcee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fcf0:	e00d      	b.n	800fd0e <SerialCtrlVendorRead_Process+0x7e>
  {
    if(command == Vendor_Opcodes_Table[i])
 800fcf2:	4a21      	ldr	r2, [pc, #132]	@ (800fd78 <SerialCtrlVendorRead_Process+0xe8>)
 800fcf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcf6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800fcfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d103      	bne.n	800fd08 <SerialCtrlVendorRead_Process+0x78>
    {                 
      result = MOBLE_RESULT_SUCCESS;
 800fd00:	2300      	movs	r3, #0
 800fd02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      break;
 800fd06:	e005      	b.n	800fd14 <SerialCtrlVendorRead_Process+0x84>
  for(int i = 0; i < 6 ; i++)
 800fd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd10:	2b05      	cmp	r3, #5
 800fd12:	ddee      	ble.n	800fcf2 <SerialCtrlVendorRead_Process+0x62>
    }
  
  }
  
  datalength = SerialCtrl_GetData(rcvdStringBuff, rcvdStringSize, SERIAL_MODEL_DATA_OFFSET, data);
 800fd14:	f107 0318 	add.w	r3, r7, #24
 800fd18:	8879      	ldrh	r1, [r7, #2]
 800fd1a:	220f      	movs	r2, #15
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f000 f9f2 	bl	8010106 <SerialCtrl_GetData>
 800fd22:	4603      	mov	r3, r0
 800fd24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  
  if(result)
 800fd28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d003      	beq.n	800fd38 <SerialCtrlVendorRead_Process+0xa8>
  {
    TRACE_I(TF_SERIAL_PRINTS,"Invalid Command\r\n");
 800fd30:	4812      	ldr	r0, [pc, #72]	@ (800fd7c <SerialCtrlVendorRead_Process+0xec>)
 800fd32:	f016 fe17 	bl	8026964 <puts>
 800fd36:	e01a      	b.n	800fd6e <SerialCtrlVendorRead_Process+0xde>
    return;
  }
  
 else
  {
    msgHdr.peer_addr = BLEMesh_GetAddress();
 800fd38:	f00a fafc 	bl	801a334 <BLEMesh_GetAddress>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	823b      	strh	r3, [r7, #16]
    result = BLEMesh_ReadRemoteData(&msgHdr,command, data, datalength);   
 800fd40:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800fd42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd46:	f107 0218 	add.w	r2, r7, #24
 800fd4a:	f107 000c 	add.w	r0, r7, #12
 800fd4e:	f012 fde7 	bl	8022920 <BLEMesh_ReadRemoteData>
 800fd52:	4603      	mov	r3, r0
 800fd54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if(result == MOBLE_RESULT_SUCCESS)
 800fd58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d103      	bne.n	800fd68 <SerialCtrlVendorRead_Process+0xd8>
    {
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 800fd60:	4807      	ldr	r0, [pc, #28]	@ (800fd80 <SerialCtrlVendorRead_Process+0xf0>)
 800fd62:	f016 fdff 	bl	8026964 <puts>
 800fd66:	e002      	b.n	800fd6e <SerialCtrlVendorRead_Process+0xde>
    }
    else
    {
      TRACE_I(TF_SERIAL_PRINTS,"Invalid Opcode Parameter\r\n");
 800fd68:	4806      	ldr	r0, [pc, #24]	@ (800fd84 <SerialCtrlVendorRead_Process+0xf4>)
 800fd6a:	f016 fdfb 	bl	8026964 <puts>
    }
  }
   
}
 800fd6e:	3730      	adds	r7, #48	@ 0x30
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}
 800fd74:	0802b504 	.word	0x0802b504
 800fd78:	200000c8 	.word	0x200000c8
 800fd7c:	0802b510 	.word	0x0802b510
 800fd80:	0802b524 	.word	0x0802b524
 800fd84:	0802b544 	.word	0x0802b544

0800fd88 <SerialCtrlVendorWrite_Process>:


void SerialCtrlVendorWrite_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 800fd88:	b5b0      	push	{r4, r5, r7, lr}
 800fd8a:	b09c      	sub	sp, #112	@ 0x70
 800fd8c:	af04      	add	r7, sp, #16
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	460b      	mov	r3, r1
 800fd92:	807b      	strh	r3, [r7, #2]
  MOBLE_ADDRESS peer = 0;                               /*node adderess of the destination node*/
 800fd94:	2300      	movs	r3, #0
 800fd96:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
  MOBLEUINT16 command = 0;                              /*Opcode command to be executed by the destination node*/
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MOBLEUINT8 elementIndex = 0;                          /*default element index*/  
 800fda0:	2300      	movs	r3, #0
 800fda2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  MOBLE_RESULT result = MOBLE_RESULT_FAIL;
 800fda6:	2302      	movs	r3, #2
 800fda8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  MOBLEBOOL response = MOBLE_FALSE;
 800fdac:	2300      	movs	r3, #0
 800fdae:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  MOBLEUINT8 data_buff[VENDOR_DATA_BUFFER_SIZE];
  MOBLEUINT16 idx=0;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	81fb      	strh	r3, [r7, #14]
  MOBLEUINT8 length;
  MOBLEUINT8 j = 1;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  
  sscanf(rcvdStringBuff+5, "%4hx %hx %hx", &peer,&command,&idx); 
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	1d58      	adds	r0, r3, #5
 800fdc0:	f107 014e 	add.w	r1, r7, #78	@ 0x4e
 800fdc4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800fdc8:	f107 030e 	add.w	r3, r7, #14
 800fdcc:	9300      	str	r3, [sp, #0]
 800fdce:	460b      	mov	r3, r1
 800fdd0:	495c      	ldr	r1, [pc, #368]	@ (800ff44 <SerialCtrlVendorWrite_Process+0x1bc>)
 800fdd2:	f016 fdcf 	bl	8026974 <siscanf>
  
  if(command == 0x000E)
 800fdd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fdda:	2b0e      	cmp	r3, #14
 800fddc:	d165      	bne.n	800feaa <SerialCtrlVendorWrite_Process+0x122>
  {
    /* Check parameter if data to be send continuously */
    if (idx == 0xFF)
 800fdde:	89fb      	ldrh	r3, [r7, #14]
 800fde0:	2bff      	cmp	r3, #255	@ 0xff
 800fde2:	d12f      	bne.n	800fe44 <SerialCtrlVendorWrite_Process+0xbc>
    {
      data_buff[0] = 0x01;     /*  data write sub command; */
 800fde4:	2301      	movs	r3, #1
 800fde6:	743b      	strb	r3, [r7, #16]
      length = sizeof(data_buff)-1;
 800fde8:	233b      	movs	r3, #59	@ 0x3b
 800fdea:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
      for(MOBLEUINT8 i=1;i <sizeof(data_buff);i++)
 800fdee:	2301      	movs	r3, #1
 800fdf0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 800fdf4:	e011      	b.n	800fe1a <SerialCtrlVendorWrite_Process+0x92>
      {
        data_buff[j] = i;
 800fdf6:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800fdfa:	3360      	adds	r3, #96	@ 0x60
 800fdfc:	443b      	add	r3, r7
 800fdfe:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800fe02:	f803 2c50 	strb.w	r2, [r3, #-80]
        j++;
 800fe06:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
      for(MOBLEUINT8 i=1;i <sizeof(data_buff);i++)
 800fe10:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800fe14:	3301      	adds	r3, #1
 800fe16:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 800fe1a:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800fe1e:	2b3b      	cmp	r3, #59	@ 0x3b
 800fe20:	d9e9      	bls.n	800fdf6 <SerialCtrlVendorWrite_Process+0x6e>
      }
      Appli_Vendor_SetBigDataPacket(data_buff, length, elementIndex , peer);
 800fe22:	f897 105e 	ldrb.w	r1, [r7, #94]	@ 0x5e
 800fe26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800fe2a:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 800fe2e:	f107 0010 	add.w	r0, r7, #16
 800fe32:	f7f5 fed3 	bl	8005bdc <Appli_Vendor_SetBigDataPacket>
      Vendor_SendDataFreq(0xFF);
 800fe36:	20ff      	movs	r0, #255	@ 0xff
 800fe38:	f001 fb60 	bl	80114fc <Vendor_SendDataFreq>
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 800fe3c:	4842      	ldr	r0, [pc, #264]	@ (800ff48 <SerialCtrlVendorWrite_Process+0x1c0>)
 800fe3e:	f016 fd91 	bl	8026964 <puts>
      return;
 800fe42:	e07b      	b.n	800ff3c <SerialCtrlVendorWrite_Process+0x1b4>
    }
    /* Check parameter if continuously data send operation need to stop  */
    else if (idx == 0x00)
 800fe44:	89fb      	ldrh	r3, [r7, #14]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d109      	bne.n	800fe5e <SerialCtrlVendorWrite_Process+0xd6>
    {
#if USE_STM32WB5M_DK
      LED_Off();
#else
      BSP_LED_Off(LED_BLUE); 
 800fe4a:	2000      	movs	r0, #0
 800fe4c:	f7f6 fce2 	bl	8006814 <BSP_LED_Off>
#endif
      Vendor_SendDataFreq(0x00);
 800fe50:	2000      	movs	r0, #0
 800fe52:	f001 fb53 	bl	80114fc <Vendor_SendDataFreq>
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 800fe56:	483c      	ldr	r0, [pc, #240]	@ (800ff48 <SerialCtrlVendorWrite_Process+0x1c0>)
 800fe58:	f016 fd84 	bl	8026964 <puts>
      return;
 800fe5c:	e06e      	b.n	800ff3c <SerialCtrlVendorWrite_Process+0x1b4>
    }
    /* Data will be sent only once */
    else
    {
      data_buff[0] = 0x01;     /*  data write sub command; */
 800fe5e:	2301      	movs	r3, #1
 800fe60:	743b      	strb	r3, [r7, #16]
      length = sizeof(data_buff)-idx;
 800fe62:	89fb      	ldrh	r3, [r7, #14]
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 800fe6a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
      Vendor_SendDataFreq(0x00); /* To stop sending packets periodically */
 800fe6e:	2000      	movs	r0, #0
 800fe70:	f001 fb44 	bl	80114fc <Vendor_SendDataFreq>
      for(MOBLEUINT8 i=idx;i <sizeof(data_buff);i++)
 800fe74:	89fb      	ldrh	r3, [r7, #14]
 800fe76:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800fe7a:	e011      	b.n	800fea0 <SerialCtrlVendorWrite_Process+0x118>
      {
        data_buff[j] = i;
 800fe7c:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800fe80:	3360      	adds	r3, #96	@ 0x60
 800fe82:	443b      	add	r3, r7
 800fe84:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 800fe88:	f803 2c50 	strb.w	r2, [r3, #-80]
        j++;
 800fe8c:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800fe90:	3301      	adds	r3, #1
 800fe92:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
      for(MOBLEUINT8 i=idx;i <sizeof(data_buff);i++)
 800fe96:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800fe9a:	3301      	adds	r3, #1
 800fe9c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800fea0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800fea4:	2b3b      	cmp	r3, #59	@ 0x3b
 800fea6:	d9e9      	bls.n	800fe7c <SerialCtrlVendorWrite_Process+0xf4>
 800fea8:	e009      	b.n	800febe <SerialCtrlVendorWrite_Process+0x136>
      }
    }
  }
  else
  {
    length = SerialCtrl_GetData(rcvdStringBuff, rcvdStringSize, SERIAL_MODEL_DATA_OFFSET, data_buff);
 800feaa:	f107 0310 	add.w	r3, r7, #16
 800feae:	8879      	ldrh	r1, [r7, #2]
 800feb0:	220f      	movs	r2, #15
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f000 f927 	bl	8010106 <SerialCtrl_GetData>
 800feb8:	4603      	mov	r3, r0
 800feba:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  }
  
  for(int i = 0; i < 6 ; i++)
 800febe:	2300      	movs	r3, #0
 800fec0:	657b      	str	r3, [r7, #84]	@ 0x54
 800fec2:	e00e      	b.n	800fee2 <SerialCtrlVendorWrite_Process+0x15a>
  {
    if(command == Vendor_Opcodes_Table[i])
 800fec4:	4a21      	ldr	r2, [pc, #132]	@ (800ff4c <SerialCtrlVendorWrite_Process+0x1c4>)
 800fec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fec8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800fecc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d103      	bne.n	800fedc <SerialCtrlVendorWrite_Process+0x154>
    {                 
      result = MOBLE_RESULT_SUCCESS;
 800fed4:	2300      	movs	r3, #0
 800fed6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      break;
 800feda:	e005      	b.n	800fee8 <SerialCtrlVendorWrite_Process+0x160>
  for(int i = 0; i < 6 ; i++)
 800fedc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fede:	3301      	adds	r3, #1
 800fee0:	657b      	str	r3, [r7, #84]	@ 0x54
 800fee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fee4:	2b05      	cmp	r3, #5
 800fee6:	dded      	ble.n	800fec4 <SerialCtrlVendorWrite_Process+0x13c>
    }
  }
  if(result)
 800fee8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800feec:	2b00      	cmp	r3, #0
 800feee:	d003      	beq.n	800fef8 <SerialCtrlVendorWrite_Process+0x170>
  {
    TRACE_I(TF_SERIAL_PRINTS,"Invalid Command\r\n");
 800fef0:	4817      	ldr	r0, [pc, #92]	@ (800ff50 <SerialCtrlVendorWrite_Process+0x1c8>)
 800fef2:	f016 fd37 	bl	8026964 <puts>
    return;
 800fef6:	e021      	b.n	800ff3c <SerialCtrlVendorWrite_Process+0x1b4>
  
  else
  {
      
    /* Publish to the peer address, that can be a group address */
    result = BLEMesh_SetRemoteData(peer,
 800fef8:	f8b7 0050 	ldrh.w	r0, [r7, #80]	@ 0x50
 800fefc:	f8b7 404e 	ldrh.w	r4, [r7, #78]	@ 0x4e
 800ff00:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800ff04:	f107 0510 	add.w	r5, r7, #16
 800ff08:	f897 1053 	ldrb.w	r1, [r7, #83]	@ 0x53
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	9202      	str	r2, [sp, #8]
 800ff10:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 800ff14:	9201      	str	r2, [sp, #4]
 800ff16:	9300      	str	r3, [sp, #0]
 800ff18:	462b      	mov	r3, r5
 800ff1a:	4622      	mov	r2, r4
 800ff1c:	f015 fc0e 	bl	802573c <BLEMesh_SetRemoteData>
 800ff20:	4603      	mov	r3, r0
 800ff22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                   data_buff, 
                                   length,
                                   response, 
                                   MOBLE_TRUE);   

    if(result == MOBLE_RESULT_SUCCESS)
 800ff26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d103      	bne.n	800ff36 <SerialCtrlVendorWrite_Process+0x1ae>
    {
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 800ff2e:	4806      	ldr	r0, [pc, #24]	@ (800ff48 <SerialCtrlVendorWrite_Process+0x1c0>)
 800ff30:	f016 fd18 	bl	8026964 <puts>
 800ff34:	e002      	b.n	800ff3c <SerialCtrlVendorWrite_Process+0x1b4>
    }
    else
    {
      TRACE_I(TF_SERIAL_PRINTS,"Invalid Opcode Parameter\r\n");
 800ff36:	4807      	ldr	r0, [pc, #28]	@ (800ff54 <SerialCtrlVendorWrite_Process+0x1cc>)
 800ff38:	f016 fd14 	bl	8026964 <puts>
    }
  }
}
 800ff3c:	3760      	adds	r7, #96	@ 0x60
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bdb0      	pop	{r4, r5, r7, pc}
 800ff42:	bf00      	nop
 800ff44:	0802b560 	.word	0x0802b560
 800ff48:	0802b524 	.word	0x0802b524
 800ff4c:	200000c8 	.word	0x200000c8
 800ff50:	0802b510 	.word	0x0802b510
 800ff54:	0802b544 	.word	0x0802b544

0800ff58 <SerialCtrl_Process>:
  

void SerialCtrl_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 800ff58:	b5b0      	push	{r4, r5, r7, lr}
 800ff5a:	b08c      	sub	sp, #48	@ 0x30
 800ff5c:	af04      	add	r7, sp, #16
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	460b      	mov	r3, r1
 800ff62:	807b      	strh	r3, [r7, #2]
  MOBLE_ADDRESS peer = 0;                               /*node adderess of the destination node*/
 800ff64:	2300      	movs	r3, #0
 800ff66:	837b      	strh	r3, [r7, #26]
  MOBLEUINT16 command = 0;                              /*Opcode command to be executed by the destination node*/
 800ff68:	2300      	movs	r3, #0
 800ff6a:	833b      	strh	r3, [r7, #24]
  MOBLEUINT8 minParamLength = 0;                        /*minimum number of properties required by a specific command*/
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	77fb      	strb	r3, [r7, #31]
  MOBLEUINT8 elementIndex = 0;                          /*default element index*/
 800ff70:	2300      	movs	r3, #0
 800ff72:	77bb      	strb	r3, [r7, #30]
  MOBLEUINT8  data [10] = {0};                          /*buffer to output property variables */
 800ff74:	2300      	movs	r3, #0
 800ff76:	60fb      	str	r3, [r7, #12]
 800ff78:	f107 0310 	add.w	r3, r7, #16
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	601a      	str	r2, [r3, #0]
 800ff80:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result;
  MOBLEBOOL response = MOBLE_TRUE;
 800ff82:	2301      	movs	r3, #1
 800ff84:	777b      	strb	r3, [r7, #29]
  
  sscanf(rcvdStringBuff+5, "%4hx %hx ", &peer,&command); 
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	1d58      	adds	r0, r3, #5
 800ff8a:	f107 0318 	add.w	r3, r7, #24
 800ff8e:	f107 021a 	add.w	r2, r7, #26
 800ff92:	4938      	ldr	r1, [pc, #224]	@ (8010074 <SerialCtrl_Process+0x11c>)
 800ff94:	f016 fcee 	bl	8026974 <siscanf>
  
  /* Callback to store a pointer to Opcode table starting sddress and length of the table*/
#ifdef ENABLE_GENERIC_MODEL_SERVER  
  GenericModelServer_GetOpcodeTableCb(&Generic_OpcodeTable,&Generic_OpcodeTableLength);
 800ff98:	4937      	ldr	r1, [pc, #220]	@ (8010078 <SerialCtrl_Process+0x120>)
 800ff9a:	4838      	ldr	r0, [pc, #224]	@ (801007c <SerialCtrl_Process+0x124>)
 800ff9c:	f7fe f8d2 	bl	800e144 <GenericModelServer_GetOpcodeTableCb>
  SensorsModelClient_GetOpcodeTableCb(&Sensor_OpcodeTable,&Sensor_OpcodeTableLength);
#endif
#endif
  
  /* Minimum parameter length required for a valid opcade in Generic opcode table */
  minParamLength = SerialCtrl_GetMinParamLength(command,
 800ffa0:	8b3b      	ldrh	r3, [r7, #24]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	4b35      	ldr	r3, [pc, #212]	@ (801007c <SerialCtrl_Process+0x124>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	4a33      	ldr	r2, [pc, #204]	@ (8010078 <SerialCtrl_Process+0x120>)
 800ffaa:	8812      	ldrh	r2, [r2, #0]
 800ffac:	4619      	mov	r1, r3
 800ffae:	f000 f87b 	bl	80100a8 <SerialCtrl_GetMinParamLength>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	77fb      	strb	r3, [r7, #31]
                                                Generic_OpcodeTable,
                                                Generic_OpcodeTableLength);
  
  /* Opcode not found in Generic opcode table 
      Start finding for opcode in Light Table*/
  if (minParamLength == 0xff)
 800ffb6:	7ffb      	ldrb	r3, [r7, #31]
 800ffb8:	2bff      	cmp	r3, #255	@ 0xff
 800ffba:	d10a      	bne.n	800ffd2 <SerialCtrl_Process+0x7a>
  {
    minParamLength = SerialCtrl_GetMinParamLength(command,
 800ffbc:	8b3b      	ldrh	r3, [r7, #24]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	4b2f      	ldr	r3, [pc, #188]	@ (8010080 <SerialCtrl_Process+0x128>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4a2f      	ldr	r2, [pc, #188]	@ (8010084 <SerialCtrl_Process+0x12c>)
 800ffc6:	8812      	ldrh	r2, [r2, #0]
 800ffc8:	4619      	mov	r1, r3
 800ffca:	f000 f86d 	bl	80100a8 <SerialCtrl_GetMinParamLength>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	77fb      	strb	r3, [r7, #31]
                                                  Light_OpcodeTable,
                                                  Light_OpcodeTableLength);
  }
  /* Opcode not found in Light opcode table
      Start finding for opcode in Light LC Table*/
  if (minParamLength == 0xff)
 800ffd2:	7ffb      	ldrb	r3, [r7, #31]
 800ffd4:	2bff      	cmp	r3, #255	@ 0xff
 800ffd6:	d10a      	bne.n	800ffee <SerialCtrl_Process+0x96>
  {
    minParamLength = SerialCtrl_GetMinParamLength(command,
 800ffd8:	8b3b      	ldrh	r3, [r7, #24]
 800ffda:	4618      	mov	r0, r3
 800ffdc:	4b2a      	ldr	r3, [pc, #168]	@ (8010088 <SerialCtrl_Process+0x130>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a2a      	ldr	r2, [pc, #168]	@ (801008c <SerialCtrl_Process+0x134>)
 800ffe2:	8812      	ldrh	r2, [r2, #0]
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	f000 f85f 	bl	80100a8 <SerialCtrl_GetMinParamLength>
 800ffea:	4603      	mov	r3, r0
 800ffec:	77fb      	strb	r3, [r7, #31]
                                                 LightLC_OpcodeTableLength);

  }
  /* Opcode not found in Light LC opcode table 
      Start finding for opcode in Sensor Table*/
  if (minParamLength == 0xff)
 800ffee:	7ffb      	ldrb	r3, [r7, #31]
 800fff0:	2bff      	cmp	r3, #255	@ 0xff
 800fff2:	d10f      	bne.n	8010014 <SerialCtrl_Process+0xbc>
  {
    minParamLength = SerialCtrl_GetMinParamLength(command,
 800fff4:	8b3b      	ldrh	r3, [r7, #24]
 800fff6:	4618      	mov	r0, r3
 800fff8:	4b25      	ldr	r3, [pc, #148]	@ (8010090 <SerialCtrl_Process+0x138>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	4a25      	ldr	r2, [pc, #148]	@ (8010094 <SerialCtrl_Process+0x13c>)
 800fffe:	8812      	ldrh	r2, [r2, #0]
 8010000:	4619      	mov	r1, r3
 8010002:	f000 f851 	bl	80100a8 <SerialCtrl_GetMinParamLength>
 8010006:	4603      	mov	r3, r0
 8010008:	77fb      	strb	r3, [r7, #31]
                                                  Sensor_OpcodeTable,
                                                  Sensor_OpcodeTableLength);
    
    TRACE_I(TF_SERIAL_PRINTS, "Min Parameter Length after sensor model check %d\r\n", 
 801000a:	7ffb      	ldrb	r3, [r7, #31]
 801000c:	4619      	mov	r1, r3
 801000e:	4822      	ldr	r0, [pc, #136]	@ (8010098 <SerialCtrl_Process+0x140>)
 8010010:	f016 fc40 	bl	8026894 <iprintf>
                             minParamLength);
  }
  
  if (minParamLength != 0xff) /* Opcode found in one of the models */ 
 8010014:	7ffb      	ldrb	r3, [r7, #31]
 8010016:	2bff      	cmp	r3, #255	@ 0xff
 8010018:	d024      	beq.n	8010064 <SerialCtrl_Process+0x10c>
  {
    minParamLength = SerialCtrl_GetData(rcvdStringBuff, 
 801001a:	f107 030c 	add.w	r3, r7, #12
 801001e:	8879      	ldrh	r1, [r7, #2]
 8010020:	220f      	movs	r2, #15
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f000 f86f 	bl	8010106 <SerialCtrl_GetData>
 8010028:	4603      	mov	r3, r0
 801002a:	77fb      	strb	r3, [r7, #31]
                                        rcvdStringSize, 
                                        SERIAL_MODEL_DATA_OFFSET, 
                                        data);

    result = BLEMesh_SetRemoteData(peer,
 801002c:	8b78      	ldrh	r0, [r7, #26]
 801002e:	8b3c      	ldrh	r4, [r7, #24]
 8010030:	7ffb      	ldrb	r3, [r7, #31]
 8010032:	f107 050c 	add.w	r5, r7, #12
 8010036:	7fb9      	ldrb	r1, [r7, #30]
 8010038:	2200      	movs	r2, #0
 801003a:	9202      	str	r2, [sp, #8]
 801003c:	7f7a      	ldrb	r2, [r7, #29]
 801003e:	9201      	str	r2, [sp, #4]
 8010040:	9300      	str	r3, [sp, #0]
 8010042:	462b      	mov	r3, r5
 8010044:	4622      	mov	r2, r4
 8010046:	f015 fb79 	bl	802573c <BLEMesh_SetRemoteData>
 801004a:	4603      	mov	r3, r0
 801004c:	773b      	strb	r3, [r7, #28]
                                   command, 
                                   data, 
                                   minParamLength,
                                   response, 
                                   MOBLE_FALSE);   
    if(result == MOBLE_RESULT_SUCCESS)
 801004e:	7f3b      	ldrb	r3, [r7, #28]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d103      	bne.n	801005c <SerialCtrl_Process+0x104>
    {
      TRACE_I(TF_SERIAL_PRINTS, "Command Executed Successfully\r\n");
 8010054:	4811      	ldr	r0, [pc, #68]	@ (801009c <SerialCtrl_Process+0x144>)
 8010056:	f016 fc85 	bl	8026964 <puts>
  }
  else
  {
    TRACE_I(TF_SERIAL_PRINTS, "Unknown Opcode\r\n");
  }
}
 801005a:	e006      	b.n	801006a <SerialCtrl_Process+0x112>
      TRACE_I(TF_SERIAL_PRINTS, "Invalid Opcode Parameter\r\n");
 801005c:	4810      	ldr	r0, [pc, #64]	@ (80100a0 <SerialCtrl_Process+0x148>)
 801005e:	f016 fc81 	bl	8026964 <puts>
}
 8010062:	e002      	b.n	801006a <SerialCtrl_Process+0x112>
    TRACE_I(TF_SERIAL_PRINTS, "Unknown Opcode\r\n");
 8010064:	480f      	ldr	r0, [pc, #60]	@ (80100a4 <SerialCtrl_Process+0x14c>)
 8010066:	f016 fc7d 	bl	8026964 <puts>
}
 801006a:	bf00      	nop
 801006c:	3720      	adds	r7, #32
 801006e:	46bd      	mov	sp, r7
 8010070:	bdb0      	pop	{r4, r5, r7, pc}
 8010072:	bf00      	nop
 8010074:	0802b504 	.word	0x0802b504
 8010078:	20004882 	.word	0x20004882
 801007c:	20004874 	.word	0x20004874
 8010080:	20004870 	.word	0x20004870
 8010084:	20004880 	.word	0x20004880
 8010088:	20004878 	.word	0x20004878
 801008c:	20004884 	.word	0x20004884
 8010090:	2000487c 	.word	0x2000487c
 8010094:	20004886 	.word	0x20004886
 8010098:	0802b570 	.word	0x0802b570
 801009c:	0802b524 	.word	0x0802b524
 80100a0:	0802b544 	.word	0x0802b544
 80100a4:	0802b5a4 	.word	0x0802b5a4

080100a8 <SerialCtrl_GetMinParamLength>:
* @param  list: 
* @param  length:  
* @retval MOBLEUINT16
*/ 
MOBLEUINT8 SerialCtrl_GetMinParamLength(MOBLEUINT32 opcode, const MODEL_OpcodeTableParam_t list[], MOBLEUINT16 length)
{
 80100a8:	b480      	push	{r7}
 80100aa:	b087      	sub	sp, #28
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	60b9      	str	r1, [r7, #8]
 80100b2:	4613      	mov	r3, r2
 80100b4:	80fb      	strh	r3, [r7, #6]
  for (int i = 0; i < length; i++)
 80100b6:	2300      	movs	r3, #0
 80100b8:	617b      	str	r3, [r7, #20]
 80100ba:	e019      	b.n	80100f0 <SerialCtrl_GetMinParamLength+0x48>
  {
    if (list[i].opcode == opcode)
 80100bc:	697a      	ldr	r2, [r7, #20]
 80100be:	4613      	mov	r3, r2
 80100c0:	005b      	lsls	r3, r3, #1
 80100c2:	4413      	add	r3, r2
 80100c4:	009b      	lsls	r3, r3, #2
 80100c6:	461a      	mov	r2, r3
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	4413      	add	r3, r2
 80100cc:	885b      	ldrh	r3, [r3, #2]
 80100ce:	461a      	mov	r2, r3
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d109      	bne.n	80100ea <SerialCtrl_GetMinParamLength+0x42>
    {
      return list[i].min_payload_size;
 80100d6:	697a      	ldr	r2, [r7, #20]
 80100d8:	4613      	mov	r3, r2
 80100da:	005b      	lsls	r3, r3, #1
 80100dc:	4413      	add	r3, r2
 80100de:	009b      	lsls	r3, r3, #2
 80100e0:	461a      	mov	r2, r3
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	4413      	add	r3, r2
 80100e6:	795b      	ldrb	r3, [r3, #5]
 80100e8:	e007      	b.n	80100fa <SerialCtrl_GetMinParamLength+0x52>
  for (int i = 0; i < length; i++)
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	3301      	adds	r3, #1
 80100ee:	617b      	str	r3, [r7, #20]
 80100f0:	88fb      	ldrh	r3, [r7, #6]
 80100f2:	697a      	ldr	r2, [r7, #20]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	dbe1      	blt.n	80100bc <SerialCtrl_GetMinParamLength+0x14>
    }
  }
  return 0xff;
 80100f8:	23ff      	movs	r3, #255	@ 0xff
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	371c      	adds	r7, #28
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr

08010106 <SerialCtrl_GetData>:
* @param  data: Output array comprising of Data
* @param  dataIndex:  
* @retval MOBLEUINT8
*/
MOBLEUINT8 SerialCtrl_GetData(char *rcvdStringBuff, uint16_t rcvdStringSize, MOBLEUINT8 dataOffset, MOBLEUINT8  *data)
{
 8010106:	b580      	push	{r7, lr}
 8010108:	b08c      	sub	sp, #48	@ 0x30
 801010a:	af00      	add	r7, sp, #0
 801010c:	60f8      	str	r0, [r7, #12]
 801010e:	607b      	str	r3, [r7, #4]
 8010110:	460b      	mov	r3, r1
 8010112:	817b      	strh	r3, [r7, #10]
 8010114:	4613      	mov	r3, r2
 8010116:	727b      	strb	r3, [r7, #9]
  MOBLEUINT8 byteBuff[10] = {0};
 8010118:	2300      	movs	r3, #0
 801011a:	613b      	str	r3, [r7, #16]
 801011c:	f107 0314 	add.w	r3, r7, #20
 8010120:	2200      	movs	r2, #0
 8010122:	601a      	str	r2, [r3, #0]
 8010124:	809a      	strh	r2, [r3, #4]
  MOBLEUINT8 dataIndex = 0;
 8010126:	2300      	movs	r3, #0
 8010128:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  int msb, lsb, byteCounter=0;           
 801012c:	2300      	movs	r3, #0
 801012e:	62bb      	str	r3, [r7, #40]	@ 0x28

  for(int i=dataOffset ; i<=(rcvdStringSize) ; i++)
 8010130:	7a7b      	ldrb	r3, [r7, #9]
 8010132:	627b      	str	r3, [r7, #36]	@ 0x24
 8010134:	e058      	b.n	80101e8 <SerialCtrl_GetData+0xe2>
  {
    /* check if space or NULL found */
    if(rcvdStringBuff[i] == ' '||rcvdStringBuff[i] == '\0' )
 8010136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010138:	68fa      	ldr	r2, [r7, #12]
 801013a:	4413      	add	r3, r2
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	2b20      	cmp	r3, #32
 8010140:	d017      	beq.n	8010172 <SerialCtrl_GetData+0x6c>
 8010142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010144:	68fa      	ldr	r2, [r7, #12]
 8010146:	4413      	add	r3, r2
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d115      	bne.n	801017a <SerialCtrl_GetData+0x74>
    {
      /*if number of bytes is one*/
      while(byteCounter > 0)
 801014e:	e010      	b.n	8010172 <SerialCtrl_GetData+0x6c>
      {
        data[dataIndex++] = byteBuff[--byteCounter];
 8010150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010152:	3b01      	subs	r3, #1
 8010154:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010156:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801015a:	1c5a      	adds	r2, r3, #1
 801015c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8010160:	461a      	mov	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	4413      	add	r3, r2
 8010166:	f107 0110 	add.w	r1, r7, #16
 801016a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801016c:	440a      	add	r2, r1
 801016e:	7812      	ldrb	r2, [r2, #0]
 8010170:	701a      	strb	r2, [r3, #0]
      while(byteCounter > 0)
 8010172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010174:	2b00      	cmp	r3, #0
 8010176:	dceb      	bgt.n	8010150 <SerialCtrl_GetData+0x4a>
    if(rcvdStringBuff[i] == ' '||rcvdStringBuff[i] == '\0' )
 8010178:	e033      	b.n	80101e2 <SerialCtrl_GetData+0xdc>
      }
    }
    else
    {
      /* take two consecutive ascii characters from the rcvdStringBuff and convert to hex values */  
      msb = Serial_CharToHexConvert(rcvdStringBuff[i]);        
 801017a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801017c:	68fa      	ldr	r2, [r7, #12]
 801017e:	4413      	add	r3, r2
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	4618      	mov	r0, r3
 8010184:	f7ff fcfc 	bl	800fb80 <Serial_CharToHexConvert>
 8010188:	4603      	mov	r3, r0
 801018a:	623b      	str	r3, [r7, #32]
      lsb = Serial_CharToHexConvert(rcvdStringBuff[i + 1 ]);
 801018c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801018e:	3301      	adds	r3, #1
 8010190:	68fa      	ldr	r2, [r7, #12]
 8010192:	4413      	add	r3, r2
 8010194:	781b      	ldrb	r3, [r3, #0]
 8010196:	4618      	mov	r0, r3
 8010198:	f7ff fcf2 	bl	800fb80 <Serial_CharToHexConvert>
 801019c:	4603      	mov	r3, r0
 801019e:	61fb      	str	r3, [r7, #28]
      /*join two hex values to make one hex value*/
      byteBuff[byteCounter]  = msb << 4;
 80101a0:	6a3b      	ldr	r3, [r7, #32]
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	011b      	lsls	r3, r3, #4
 80101a6:	b2d9      	uxtb	r1, r3
 80101a8:	f107 0210 	add.w	r2, r7, #16
 80101ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ae:	4413      	add	r3, r2
 80101b0:	460a      	mov	r2, r1
 80101b2:	701a      	strb	r2, [r3, #0]
      byteBuff[byteCounter] |= lsb;
 80101b4:	f107 0210 	add.w	r2, r7, #16
 80101b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ba:	4413      	add	r3, r2
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	b25a      	sxtb	r2, r3
 80101c0:	69fb      	ldr	r3, [r7, #28]
 80101c2:	b25b      	sxtb	r3, r3
 80101c4:	4313      	orrs	r3, r2
 80101c6:	b25b      	sxtb	r3, r3
 80101c8:	b2d9      	uxtb	r1, r3
 80101ca:	f107 0210 	add.w	r2, r7, #16
 80101ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101d0:	4413      	add	r3, r2
 80101d2:	460a      	mov	r2, r1
 80101d4:	701a      	strb	r2, [r3, #0]
      
      i++;      /*increment for loop counter as two values are used */
 80101d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101d8:	3301      	adds	r3, #1
 80101da:	627b      	str	r3, [r7, #36]	@ 0x24
      byteCounter++;   /*increment byteCounter counter*/
 80101dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101de:	3301      	adds	r3, #1
 80101e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  for(int i=dataOffset ; i<=(rcvdStringSize) ; i++)
 80101e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e4:	3301      	adds	r3, #1
 80101e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80101e8:	897b      	ldrh	r3, [r7, #10]
 80101ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101ec:	429a      	cmp	r2, r3
 80101ee:	dda2      	ble.n	8010136 <SerialCtrl_GetData+0x30>
    }
  }
        
  return dataIndex;
 80101f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f

}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3730      	adds	r7, #48	@ 0x30
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}

080101fc <SerialUt_Process>:
* @param  rcvdStringBuff: Pointer to the received ascii character array from the user
* @param  rcvdStringSize: Size of the received array
* @retval void
*/
void SerialUt_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b088      	sub	sp, #32
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	460b      	mov	r3, r1
 8010206:	807b      	strh	r3, [r7, #2]
  MOBLEUINT16 commandIndex = SerialUt_GetFunctionIndex(rcvdStringBuff+5);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	3305      	adds	r3, #5
 801020c:	4618      	mov	r0, r3
 801020e:	f000 f917 	bl	8010440 <SerialUt_GetFunctionIndex>
 8010212:	4603      	mov	r3, r0
 8010214:	83bb      	strh	r3, [r7, #28]
  MOBLEUINT8 testFunctionParm[6]= {'\0'} ;
 8010216:	2300      	movs	r3, #0
 8010218:	617b      	str	r3, [r7, #20]
 801021a:	2300      	movs	r3, #0
 801021c:	833b      	strh	r3, [r7, #24]
  MOBLEUINT8 asciiFunctionParameter[7] = {'\0'} ;
 801021e:	2300      	movs	r3, #0
 8010220:	60fb      	str	r3, [r7, #12]
 8010222:	f107 0310 	add.w	r3, r7, #16
 8010226:	2100      	movs	r1, #0
 8010228:	460a      	mov	r2, r1
 801022a:	801a      	strh	r2, [r3, #0]
 801022c:	460a      	mov	r2, r1
 801022e:	709a      	strb	r2, [r3, #2]
#ifdef ENABLE_SENSOR_MODEL_SERVER
  MOBLEUINT16 value = 0;           
  MOBLEUINT8 sensorOffset = 0;    
#endif
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8010230:	2300      	movs	r3, #0
 8010232:	77fb      	strb	r3, [r7, #31]
  MOBLEBOOL unprovisioned = MOBLE_FALSE;
 8010234:	2300      	movs	r3, #0
 8010236:	77bb      	strb	r3, [r7, #30]
  
  switch (commandIndex)
 8010238:	8bbb      	ldrh	r3, [r7, #28]
 801023a:	3b01      	subs	r3, #1
 801023c:	2b15      	cmp	r3, #21
 801023e:	f200 80c1 	bhi.w	80103c4 <SerialUt_Process+0x1c8>
 8010242:	a201      	add	r2, pc, #4	@ (adr r2, 8010248 <SerialUt_Process+0x4c>)
 8010244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010248:	080102a1 	.word	0x080102a1
 801024c:	080102dd 	.word	0x080102dd
 8010250:	08010319 	.word	0x08010319
 8010254:	08010391 	.word	0x08010391
 8010258:	0801032f 	.word	0x0801032f
 801025c:	08010319 	.word	0x08010319
 8010260:	0801032f 	.word	0x0801032f
 8010264:	08010319 	.word	0x08010319
 8010268:	08010319 	.word	0x08010319
 801026c:	08010319 	.word	0x08010319
 8010270:	08010319 	.word	0x08010319
 8010274:	08010355 	.word	0x08010355
 8010278:	0801032f 	.word	0x0801032f
 801027c:	0801032f 	.word	0x0801032f
 8010280:	08010319 	.word	0x08010319
 8010284:	08010319 	.word	0x08010319
 8010288:	08010319 	.word	0x08010319
 801028c:	080103c5 	.word	0x080103c5
 8010290:	080103c5 	.word	0x080103c5
 8010294:	080103c5 	.word	0x080103c5
 8010298:	080103c5 	.word	0x080103c5
 801029c:	080103af 	.word	0x080103af
  {
  case CMD_INDEX_SEND_01:
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SEND_OFFSET, "%2s %4s", asciiFunctionParameter,asciiFunctionParameter+2);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f103 000d 	add.w	r0, r3, #13
 80102a6:	f107 030c 	add.w	r3, r7, #12
 80102aa:	3302      	adds	r3, #2
 80102ac:	f107 020c 	add.w	r2, r7, #12
 80102b0:	495a      	ldr	r1, [pc, #360]	@ (801041c <SerialUt_Process+0x220>)
 80102b2:	f016 fb5f 	bl	8026974 <siscanf>
    /*SerialUt_doubleHexToHex
    Function will convert the asci string into orinal hex format.
    eg- send-01 12 3456
    return 0x12,0x34,0x56       
    */
    SerialUt_doubleHexToHex(asciiFunctionParameter,testFunctionParm,6);
 80102b6:	f107 0114 	add.w	r1, r7, #20
 80102ba:	f107 030c 	add.w	r3, r7, #12
 80102be:	2206      	movs	r2, #6
 80102c0:	4618      	mov	r0, r3
 80102c2:	f000 f929 	bl	8010518 <SerialUt_doubleHexToHex>
    /*BLEMesh_UpperTesterDataProcess
    this function will take action and execute some other functions
    */       
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 80102c6:	8bbb      	ldrh	r3, [r7, #28]
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	f107 0214 	add.w	r2, r7, #20
 80102ce:	4611      	mov	r1, r2
 80102d0:	4618      	mov	r0, r3
 80102d2:	f015 fadf 	bl	8025894 <BLEMesh_UpperTesterDataProcess>
 80102d6:	4603      	mov	r3, r0
 80102d8:	77fb      	strb	r3, [r7, #31]
    break;
 80102da:	e076      	b.n	80103ca <SerialUt_Process+0x1ce>
          
  case CMD_INDEX_SEND_02: 
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SEND_OFFSET, "%2s %4s", asciiFunctionParameter,asciiFunctionParameter+2);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f103 000d 	add.w	r0, r3, #13
 80102e2:	f107 030c 	add.w	r3, r7, #12
 80102e6:	3302      	adds	r3, #2
 80102e8:	f107 020c 	add.w	r2, r7, #12
 80102ec:	494b      	ldr	r1, [pc, #300]	@ (801041c <SerialUt_Process+0x220>)
 80102ee:	f016 fb41 	bl	8026974 <siscanf>
    SerialUt_doubleHexToHex(asciiFunctionParameter,testFunctionParm,6);
 80102f2:	f107 0114 	add.w	r1, r7, #20
 80102f6:	f107 030c 	add.w	r3, r7, #12
 80102fa:	2206      	movs	r2, #6
 80102fc:	4618      	mov	r0, r3
 80102fe:	f000 f90b 	bl	8010518 <SerialUt_doubleHexToHex>
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);       
 8010302:	8bbb      	ldrh	r3, [r7, #28]
 8010304:	b2db      	uxtb	r3, r3
 8010306:	f107 0214 	add.w	r2, r7, #20
 801030a:	4611      	mov	r1, r2
 801030c:	4618      	mov	r0, r3
 801030e:	f015 fac1 	bl	8025894 <BLEMesh_UpperTesterDataProcess>
 8010312:	4603      	mov	r3, r0
 8010314:	77fb      	strb	r3, [r7, #31]
    break;
 8010316:	e058      	b.n	80103ca <SerialUt_Process+0x1ce>
  case CMD_INDEX_SET_13:  
     /* Order IUT to update the NetKeyIndex */
  case CMD_INDEX_SET_14:
    /* Order IUT to clear Publication & Subscription List*/
  case CMD_INDEX_SET_15:
    result = BLEMesh_UpperTesterDataProcess(commandIndex, testFunctionParm);
 8010318:	8bbb      	ldrh	r3, [r7, #28]
 801031a:	b2db      	uxtb	r3, r3
 801031c:	f107 0214 	add.w	r2, r7, #20
 8010320:	4611      	mov	r1, r2
 8010322:	4618      	mov	r0, r3
 8010324:	f015 fab6 	bl	8025894 <BLEMesh_UpperTesterDataProcess>
 8010328:	4603      	mov	r3, r0
 801032a:	77fb      	strb	r3, [r7, #31]
    break;
 801032c:	e04d      	b.n	80103ca <SerialUt_Process+0x1ce>
  case CMD_INDEX_SET_05:     
    /* Sets all node identity for all Networks */
  case CMD_INDEX_SET_11:     
    /* Updates the features supported by the library */
  case CMD_INDEX_SET_12:  
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SET_OFFSET, "%1c", testFunctionParm);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	330c      	adds	r3, #12
 8010332:	f107 0214 	add.w	r2, r7, #20
 8010336:	493a      	ldr	r1, [pc, #232]	@ (8010420 <SerialUt_Process+0x224>)
 8010338:	4618      	mov	r0, r3
 801033a:	f016 fb1b 	bl	8026974 <siscanf>
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 801033e:	8bbb      	ldrh	r3, [r7, #28]
 8010340:	b2db      	uxtb	r3, r3
 8010342:	f107 0214 	add.w	r2, r7, #20
 8010346:	4611      	mov	r1, r2
 8010348:	4618      	mov	r0, r3
 801034a:	f015 faa3 	bl	8025894 <BLEMesh_UpperTesterDataProcess>
 801034e:	4603      	mov	r3, r0
 8010350:	77fb      	strb	r3, [r7, #31]
    break;
 8010352:	e03a      	b.n	80103ca <SerialUt_Process+0x1ce>
    /* Sets system faults for Health Model*/
  case CMD_INDEX_SET_10: 
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SET_OFFSET, "%2s %1c", asciiFunctionParameter, testFunctionParm+1);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f103 000c 	add.w	r0, r3, #12
 801035a:	f107 0314 	add.w	r3, r7, #20
 801035e:	3301      	adds	r3, #1
 8010360:	f107 020c 	add.w	r2, r7, #12
 8010364:	492f      	ldr	r1, [pc, #188]	@ (8010424 <SerialUt_Process+0x228>)
 8010366:	f016 fb05 	bl	8026974 <siscanf>
    SerialUt_doubleHexToHex(asciiFunctionParameter,testFunctionParm,2);
 801036a:	f107 0114 	add.w	r1, r7, #20
 801036e:	f107 030c 	add.w	r3, r7, #12
 8010372:	2202      	movs	r2, #2
 8010374:	4618      	mov	r0, r3
 8010376:	f000 f8cf 	bl	8010518 <SerialUt_doubleHexToHex>
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 801037a:	8bbb      	ldrh	r3, [r7, #28]
 801037c:	b2db      	uxtb	r3, r3
 801037e:	f107 0214 	add.w	r2, r7, #20
 8010382:	4611      	mov	r1, r2
 8010384:	4618      	mov	r0, r3
 8010386:	f015 fa85 	bl	8025894 <BLEMesh_UpperTesterDataProcess>
 801038a:	4603      	mov	r3, r0
 801038c:	77fb      	strb	r3, [r7, #31]
    break;
 801038e:	e01c      	b.n	80103ca <SerialUt_Process+0x1ce>
    break;
#endif
  /* Unprovisions the Node */
  case CMD_INDEX_SET_02:
    {
      unprovisioned = BLEMesh_IsUnprovisioned();
 8010390:	f00b ff32 	bl	801c1f8 <BLEMesh_IsUnprovisioned>
 8010394:	4603      	mov	r3, r0
 8010396:	77bb      	strb	r3, [r7, #30]
      result = BLEMesh_UpperTesterDataProcess(commandIndex, testFunctionParm);
 8010398:	8bbb      	ldrh	r3, [r7, #28]
 801039a:	b2db      	uxtb	r3, r3
 801039c:	f107 0214 	add.w	r2, r7, #20
 80103a0:	4611      	mov	r1, r2
 80103a2:	4618      	mov	r0, r3
 80103a4:	f015 fa76 	bl	8025894 <BLEMesh_UpperTesterDataProcess>
 80103a8:	4603      	mov	r3, r0
 80103aa:	77fb      	strb	r3, [r7, #31]
    }
    break;
 80103ac:	e00d      	b.n	80103ca <SerialUt_Process+0x1ce>
    
    /* Print Security Credentials */
  case CMD_INDEX_PRINT_01:  
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 80103ae:	8bbb      	ldrh	r3, [r7, #28]
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	f107 0214 	add.w	r2, r7, #20
 80103b6:	4611      	mov	r1, r2
 80103b8:	4618      	mov	r0, r3
 80103ba:	f015 fa6b 	bl	8025894 <BLEMesh_UpperTesterDataProcess>
 80103be:	4603      	mov	r3, r0
 80103c0:	77fb      	strb	r3, [r7, #31]
    break;
 80103c2:	e002      	b.n	80103ca <SerialUt_Process+0x1ce>
      
  default:
    printf("Invalid Command\r\n");
 80103c4:	4818      	ldr	r0, [pc, #96]	@ (8010428 <SerialUt_Process+0x22c>)
 80103c6:	f016 facd 	bl	8026964 <puts>
  }
  if (result == MOBLE_RESULT_SUCCESS)
 80103ca:	7ffb      	ldrb	r3, [r7, #31]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d10f      	bne.n	80103f0 <SerialUt_Process+0x1f4>
  {
    BLEMesh_PrintStringCb("Test command executed successfully\r\n");
 80103d0:	4816      	ldr	r0, [pc, #88]	@ (801042c <SerialUt_Process+0x230>)
 80103d2:	f7ff fc2b 	bl	800fc2c <BLEMesh_PrintStringCb>
    if(commandIndex == CMD_INDEX_SET_02)
 80103d6:	8bbb      	ldrh	r3, [r7, #28]
 80103d8:	2b04      	cmp	r3, #4
 80103da:	d11a      	bne.n	8010412 <SerialUt_Process+0x216>
    {
      if(!unprovisioned)
 80103dc:	7fbb      	ldrb	r3, [r7, #30]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d102      	bne.n	80103e8 <SerialUt_Process+0x1ec>
      {
        Appli_Unprovision();
 80103e2:	f7f4 fe05 	bl	8004ff0 <Appli_Unprovision>
  }
  else
  {
    BLEMesh_PrintStringCb("Test command Failed.\r\n");   
  }
}
 80103e6:	e014      	b.n	8010412 <SerialUt_Process+0x216>
        BLEMesh_PrintStringCb("Device is already unprovisioned !\r\n");
 80103e8:	4811      	ldr	r0, [pc, #68]	@ (8010430 <SerialUt_Process+0x234>)
 80103ea:	f7ff fc1f 	bl	800fc2c <BLEMesh_PrintStringCb>
}
 80103ee:	e010      	b.n	8010412 <SerialUt_Process+0x216>
  else if(result == MOBLE_RESULT_OUTOFMEMORY)
 80103f0:	7ffb      	ldrb	r3, [r7, #31]
 80103f2:	2b04      	cmp	r3, #4
 80103f4:	d103      	bne.n	80103fe <SerialUt_Process+0x202>
    BLEMesh_PrintStringCb("Test command Failed. Out of memory\r\n");  
 80103f6:	480f      	ldr	r0, [pc, #60]	@ (8010434 <SerialUt_Process+0x238>)
 80103f8:	f7ff fc18 	bl	800fc2c <BLEMesh_PrintStringCb>
}
 80103fc:	e009      	b.n	8010412 <SerialUt_Process+0x216>
  else if(result == MOBLE_RESULT_INVALIDARG)
 80103fe:	7ffb      	ldrb	r3, [r7, #31]
 8010400:	2b03      	cmp	r3, #3
 8010402:	d103      	bne.n	801040c <SerialUt_Process+0x210>
    BLEMesh_PrintStringCb("Test command Failed. Invalid Argument\r\n");  
 8010404:	480c      	ldr	r0, [pc, #48]	@ (8010438 <SerialUt_Process+0x23c>)
 8010406:	f7ff fc11 	bl	800fc2c <BLEMesh_PrintStringCb>
}
 801040a:	e002      	b.n	8010412 <SerialUt_Process+0x216>
    BLEMesh_PrintStringCb("Test command Failed.\r\n");   
 801040c:	480b      	ldr	r0, [pc, #44]	@ (801043c <SerialUt_Process+0x240>)
 801040e:	f7ff fc0d 	bl	800fc2c <BLEMesh_PrintStringCb>
}
 8010412:	bf00      	nop
 8010414:	3720      	adds	r7, #32
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
 801041a:	bf00      	nop
 801041c:	0802b5b4 	.word	0x0802b5b4
 8010420:	0802b5bc 	.word	0x0802b5bc
 8010424:	0802b5c0 	.word	0x0802b5c0
 8010428:	0802b510 	.word	0x0802b510
 801042c:	0802b5c8 	.word	0x0802b5c8
 8010430:	0802b5f0 	.word	0x0802b5f0
 8010434:	0802b614 	.word	0x0802b614
 8010438:	0802b63c 	.word	0x0802b63c
 801043c:	0802b664 	.word	0x0802b664

08010440 <SerialUt_GetFunctionIndex>:
* @param  rcvdStringBuff: Pointer to the received ascii character array from the user
* @param  rcvdStringSize: Size of the received array
* @retval MOBLEUINT16
*/
static MOBLEUINT16 SerialUt_GetFunctionIndex(char *text)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b084      	sub	sp, #16
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  MOBLEINT16 index = 0;
 8010448:	2300      	movs	r3, #0
 801044a:	81fb      	strh	r3, [r7, #14]

  if (!strncmp(text, "SEND-",5))
 801044c:	2205      	movs	r2, #5
 801044e:	492c      	ldr	r1, [pc, #176]	@ (8010500 <SerialUt_GetFunctionIndex+0xc0>)
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f016 fbd4 	bl	8026bfe <strncmp>
 8010456:	4603      	mov	r3, r0
 8010458:	2b00      	cmp	r3, #0
 801045a:	d110      	bne.n	801047e <SerialUt_GetFunctionIndex+0x3e>
{
    /* sscanf is to extract the integeer value from the string */        
    sscanf(text, "SEND-%hd", &index);
 801045c:	f107 030e 	add.w	r3, r7, #14
 8010460:	461a      	mov	r2, r3
 8010462:	4928      	ldr	r1, [pc, #160]	@ (8010504 <SerialUt_GetFunctionIndex+0xc4>)
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f016 fa85 	bl	8026974 <siscanf>
    index = (index<=CMD_SEND_COUNT) ? index : 0;
 801046a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801046e:	2b02      	cmp	r3, #2
 8010470:	dc02      	bgt.n	8010478 <SerialUt_GetFunctionIndex+0x38>
 8010472:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010476:	e000      	b.n	801047a <SerialUt_GetFunctionIndex+0x3a>
 8010478:	2300      	movs	r3, #0
 801047a:	81fb      	strh	r3, [r7, #14]
 801047c:	e038      	b.n	80104f0 <SerialUt_GetFunctionIndex+0xb0>

}
  else if (!strncmp(text, "SET-",4))
 801047e:	2204      	movs	r2, #4
 8010480:	4921      	ldr	r1, [pc, #132]	@ (8010508 <SerialUt_GetFunctionIndex+0xc8>)
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f016 fbbb 	bl	8026bfe <strncmp>
 8010488:	4603      	mov	r3, r0
 801048a:	2b00      	cmp	r3, #0
 801048c:	d114      	bne.n	80104b8 <SerialUt_GetFunctionIndex+0x78>
{
    sscanf(text, "SET-%hd", &index);
 801048e:	f107 030e 	add.w	r3, r7, #14
 8010492:	461a      	mov	r2, r3
 8010494:	491d      	ldr	r1, [pc, #116]	@ (801050c <SerialUt_GetFunctionIndex+0xcc>)
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f016 fa6c 	bl	8026974 <siscanf>
    index = (index<=CMD_SET_COUNT)? index + CMD_SEND_COUNT : 0;
 801049c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80104a0:	2b13      	cmp	r3, #19
 80104a2:	dc06      	bgt.n	80104b2 <SerialUt_GetFunctionIndex+0x72>
 80104a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	3302      	adds	r3, #2
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	b21b      	sxth	r3, r3
 80104b0:	e000      	b.n	80104b4 <SerialUt_GetFunctionIndex+0x74>
 80104b2:	2300      	movs	r3, #0
 80104b4:	81fb      	strh	r3, [r7, #14]
 80104b6:	e01b      	b.n	80104f0 <SerialUt_GetFunctionIndex+0xb0>

    }
  else if (!strncmp(text, "PRINT-",6))
 80104b8:	2206      	movs	r2, #6
 80104ba:	4915      	ldr	r1, [pc, #84]	@ (8010510 <SerialUt_GetFunctionIndex+0xd0>)
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f016 fb9e 	bl	8026bfe <strncmp>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d113      	bne.n	80104f0 <SerialUt_GetFunctionIndex+0xb0>
    {
    sscanf(text, "PRINT-%hd", &index);
 80104c8:	f107 030e 	add.w	r3, r7, #14
 80104cc:	461a      	mov	r2, r3
 80104ce:	4911      	ldr	r1, [pc, #68]	@ (8010514 <SerialUt_GetFunctionIndex+0xd4>)
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	f016 fa4f 	bl	8026974 <siscanf>
    index = (index<=CMD_PRINT_COUNT)?
 80104d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80104da:	2b01      	cmp	r3, #1
 80104dc:	dc06      	bgt.n	80104ec <SerialUt_GetFunctionIndex+0xac>
      index + CMD_SET_COUNT + CMD_SEND_COUNT : 0;
 80104de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	3315      	adds	r3, #21
 80104e6:	b29b      	uxth	r3, r3
    index = (index<=CMD_PRINT_COUNT)?
 80104e8:	b21b      	sxth	r3, r3
 80104ea:	e000      	b.n	80104ee <SerialUt_GetFunctionIndex+0xae>
 80104ec:	2300      	movs	r3, #0
 80104ee:	81fb      	strh	r3, [r7, #14]
    }
        return index;
 80104f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80104f4:	b29b      	uxth	r3, r3
    }
 80104f6:	4618      	mov	r0, r3
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	0802b67c 	.word	0x0802b67c
 8010504:	0802b684 	.word	0x0802b684
 8010508:	0802b690 	.word	0x0802b690
 801050c:	0802b698 	.word	0x0802b698
 8010510:	0802b6a0 	.word	0x0802b6a0
 8010514:	0802b6a8 	.word	0x0802b6a8

08010518 <SerialUt_doubleHexToHex>:
* @param  outputArray: Pointer to output hex array 
* @param  length: length of the input hex array
* @retval void
*/
static void SerialUt_doubleHexToHex(MOBLEUINT8* hexArray,MOBLEUINT8* outputArray, MOBLEUINT8 length)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b086      	sub	sp, #24
 801051c:	af00      	add	r7, sp, #0
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	4613      	mov	r3, r2
 8010524:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT8 counter =0,position = 0;
 8010526:	2300      	movs	r3, #0
 8010528:	75fb      	strb	r3, [r7, #23]
 801052a:	2300      	movs	r3, #0
 801052c:	75bb      	strb	r3, [r7, #22]
  MOBLEUINT8 msb,lsb;;
  while (counter <length)
 801052e:	e032      	b.n	8010596 <SerialUt_doubleHexToHex+0x7e>
    {
    msb = Serial_CharToHexConvert(hexArray[counter]);
 8010530:	7dfb      	ldrb	r3, [r7, #23]
 8010532:	68fa      	ldr	r2, [r7, #12]
 8010534:	4413      	add	r3, r2
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	4618      	mov	r0, r3
 801053a:	f7ff fb21 	bl	800fb80 <Serial_CharToHexConvert>
 801053e:	4603      	mov	r3, r0
 8010540:	757b      	strb	r3, [r7, #21]
    lsb = Serial_CharToHexConvert(hexArray[counter + 1 ]);
 8010542:	7dfb      	ldrb	r3, [r7, #23]
 8010544:	3301      	adds	r3, #1
 8010546:	68fa      	ldr	r2, [r7, #12]
 8010548:	4413      	add	r3, r2
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	4618      	mov	r0, r3
 801054e:	f7ff fb17 	bl	800fb80 <Serial_CharToHexConvert>
 8010552:	4603      	mov	r3, r0
 8010554:	753b      	strb	r3, [r7, #20]
    outputArray[position] = msb<<4;
 8010556:	7dbb      	ldrb	r3, [r7, #22]
 8010558:	68ba      	ldr	r2, [r7, #8]
 801055a:	4413      	add	r3, r2
 801055c:	7d7a      	ldrb	r2, [r7, #21]
 801055e:	0112      	lsls	r2, r2, #4
 8010560:	b2d2      	uxtb	r2, r2
 8010562:	701a      	strb	r2, [r3, #0]
    outputArray[position] |= lsb;
 8010564:	7dbb      	ldrb	r3, [r7, #22]
 8010566:	68ba      	ldr	r2, [r7, #8]
 8010568:	4413      	add	r3, r2
 801056a:	7819      	ldrb	r1, [r3, #0]
 801056c:	7dbb      	ldrb	r3, [r7, #22]
 801056e:	68ba      	ldr	r2, [r7, #8]
 8010570:	4413      	add	r3, r2
 8010572:	7d3a      	ldrb	r2, [r7, #20]
 8010574:	430a      	orrs	r2, r1
 8010576:	b2d2      	uxtb	r2, r2
 8010578:	701a      	strb	r2, [r3, #0]
    printf("data scanned is  %02hx \n\r",outputArray[position]);
 801057a:	7dbb      	ldrb	r3, [r7, #22]
 801057c:	68ba      	ldr	r2, [r7, #8]
 801057e:	4413      	add	r3, r2
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	4619      	mov	r1, r3
 8010584:	4808      	ldr	r0, [pc, #32]	@ (80105a8 <SerialUt_doubleHexToHex+0x90>)
 8010586:	f016 f985 	bl	8026894 <iprintf>
    counter+=2;
 801058a:	7dfb      	ldrb	r3, [r7, #23]
 801058c:	3302      	adds	r3, #2
 801058e:	75fb      	strb	r3, [r7, #23]
    position++;
 8010590:	7dbb      	ldrb	r3, [r7, #22]
 8010592:	3301      	adds	r3, #1
 8010594:	75bb      	strb	r3, [r7, #22]
  while (counter <length)
 8010596:	7dfa      	ldrb	r2, [r7, #23]
 8010598:	79fb      	ldrb	r3, [r7, #7]
 801059a:	429a      	cmp	r2, r3
 801059c:	d3c8      	bcc.n	8010530 <SerialUt_doubleHexToHex+0x18>
    }
}
 801059e:	bf00      	nop
 80105a0:	bf00      	nop
 80105a2:	3718      	adds	r7, #24
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}
 80105a8:	0802b6b4 	.word	0x0802b6b4

080105ac <AppliCheck_EnabledModelsList>:
* @brief AppliCheck_EnabledModelsList: This function checks whether the Enabled  
*                             Models in the defined range or exceeding the limit
* retval MOBLE_RESULT
*/
MOBLE_RESULT AppliCheck_EnabledModelsList(void)
{ 
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	af00      	add	r7, sp, #0
   MOBLE_RESULT result = MOBLE_RESULT_FAIL;
 80105b2:	2302      	movs	r3, #2
 80105b4:	71fb      	strb	r3, [r7, #7]
/* Initialization of the  SIG Models list */
   result = ApplicationInitSigModelList();
 80105b6:	f000 f837 	bl	8010628 <ApplicationInitSigModelList>
 80105ba:	4603      	mov	r3, r0
 80105bc:	71fb      	strb	r3, [r7, #7]
  {
    if(result == MOBLE_RESULT_FALSE)
 80105be:	79fb      	ldrb	r3, [r7, #7]
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	d106      	bne.n	80105d2 <AppliCheck_EnabledModelsList+0x26>
    {
      TRACE_I(TF_INIT,"The number of Models enabled in Application exceed the Library limit");
 80105c4:	4815      	ldr	r0, [pc, #84]	@ (801061c <AppliCheck_EnabledModelsList+0x70>)
 80105c6:	f016 f965 	bl	8026894 <iprintf>
      result = MOBLE_RESULT_FAIL;
 80105ca:	2302      	movs	r3, #2
 80105cc:	71fb      	strb	r3, [r7, #7]
          return result;
 80105ce:	79fb      	ldrb	r3, [r7, #7]
 80105d0:	e020      	b.n	8010614 <AppliCheck_EnabledModelsList+0x68>
    }

    else if(result == MOBLE_RESULT_FAIL)
 80105d2:	79fb      	ldrb	r3, [r7, #7]
 80105d4:	2b02      	cmp	r3, #2
 80105d6:	d105      	bne.n	80105e4 <AppliCheck_EnabledModelsList+0x38>
  {
    TRACE_I(TF_INIT,"The number of Models enabled exceed the limit of %d !\r\n",
 80105d8:	2106      	movs	r1, #6
 80105da:	4811      	ldr	r0, [pc, #68]	@ (8010620 <AppliCheck_EnabledModelsList+0x74>)
 80105dc:	f016 f95a 	bl	8026894 <iprintf>
              USER_SIG_MODELS_MAX_COUNT);
          return result;
 80105e0:	79fb      	ldrb	r3, [r7, #7]
 80105e2:	e017      	b.n	8010614 <AppliCheck_EnabledModelsList+0x68>
    }
    
  }
  
    /* Initialization of the  VENDOR Models list, if any */
  result = ApplicationInitVendorModelList();
 80105e4:	f000 f90c 	bl	8010800 <ApplicationInitVendorModelList>
 80105e8:	4603      	mov	r3, r0
 80105ea:	71fb      	strb	r3, [r7, #7]
  {
    
    if(result == MOBLE_RESULT_FALSE)
 80105ec:	79fb      	ldrb	r3, [r7, #7]
 80105ee:	2b01      	cmp	r3, #1
 80105f0:	d106      	bne.n	8010600 <AppliCheck_EnabledModelsList+0x54>
    {
      TRACE_I(TF_INIT,"The number of Models enabled in Application exceed the Library limit");
 80105f2:	480a      	ldr	r0, [pc, #40]	@ (801061c <AppliCheck_EnabledModelsList+0x70>)
 80105f4:	f016 f94e 	bl	8026894 <iprintf>
      result = MOBLE_RESULT_FAIL;
 80105f8:	2302      	movs	r3, #2
 80105fa:	71fb      	strb	r3, [r7, #7]
          return result;
 80105fc:	79fb      	ldrb	r3, [r7, #7]
 80105fe:	e009      	b.n	8010614 <AppliCheck_EnabledModelsList+0x68>
    }

    else if(result == MOBLE_RESULT_FAIL)
 8010600:	79fb      	ldrb	r3, [r7, #7]
 8010602:	2b02      	cmp	r3, #2
 8010604:	d105      	bne.n	8010612 <AppliCheck_EnabledModelsList+0x66>
  {
    TRACE_I(TF_INIT,"The number of Vendor Models enabled exceed the limit of %d !\r\n",
 8010606:	2101      	movs	r1, #1
 8010608:	4806      	ldr	r0, [pc, #24]	@ (8010624 <AppliCheck_EnabledModelsList+0x78>)
 801060a:	f016 f943 	bl	8026894 <iprintf>
            USER_VENDOR_MODELS_MAX_COUNT); 
        return result;
 801060e:	79fb      	ldrb	r3, [r7, #7]
 8010610:	e000      	b.n	8010614 <AppliCheck_EnabledModelsList+0x68>
    }
    
  }
  
  return result;
 8010612:	79fb      	ldrb	r3, [r7, #7]
}
 8010614:	4618      	mov	r0, r3
 8010616:	3708      	adds	r7, #8
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}
 801061c:	0802b718 	.word	0x0802b718
 8010620:	0802b760 	.word	0x0802b760
 8010624:	0802b798 	.word	0x0802b798

08010628 <ApplicationInitSigModelList>:
* @brief ApplicationInitSigModelList: This function initialize the list of the 
*                                     SIG Models.
* retval MOBLE_RESULT
*/
MOBLE_RESULT ApplicationInitSigModelList(void)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
  /*If Models enabled by user are exceeding the library capability*/
  if(APPLICATION_SIG_MODELS_MAX_COUNT > BLEMesh_GetTotalModelsCount() - 
 801062e:	f009 feb5 	bl	801a39c <BLEMesh_GetTotalModelsCount>
 8010632:	4603      	mov	r3, r0
 8010634:	2b06      	cmp	r3, #6
 8010636:	d80a      	bhi.n	801064e <ApplicationInitSigModelList+0x26>
                                            APPLICATION_VENDOR_MODELS_MAX_COUNT)
  {
    TRACE_I(TF_INIT,"APPLICATION_SIG_MODELS_MAX_COUNT %d > BLEMesh_GetTotalModelsCount() %d - APPLICATION_VENDOR_MODELS_MAX_COUNT %d",
 8010638:	f009 feb0 	bl	801a39c <BLEMesh_GetTotalModelsCount>
 801063c:	4603      	mov	r3, r0
 801063e:	461a      	mov	r2, r3
 8010640:	2302      	movs	r3, #2
 8010642:	2107      	movs	r1, #7
 8010644:	486c      	ldr	r0, [pc, #432]	@ (80107f8 <ApplicationInitSigModelList+0x1d0>)
 8010646:	f016 f925 	bl	8026894 <iprintf>
            APPLICATION_SIG_MODELS_MAX_COUNT,
            BLEMesh_GetTotalModelsCount(),
            APPLICATION_VENDOR_MODELS_MAX_COUNT);
    return(MOBLE_RESULT_FALSE);
 801064a:	2301      	movs	r3, #1
 801064c:	e0cf      	b.n	80107ee <ApplicationInitSigModelList+0x1c6>
  }
  
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 801064e:	2300      	movs	r3, #0
 8010650:	71fb      	strb	r3, [r7, #7]
 8010652:	e0c7      	b.n	80107e4 <ApplicationInitSigModelList+0x1bc>
  {
    uint8_t modelIndex = 0;
 8010654:	2300      	movs	r3, #0
 8010656:	71bb      	strb	r3, [r7, #6]
    Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8010658:	79fa      	ldrb	r2, [r7, #7]
 801065a:	79b9      	ldrb	r1, [r7, #6]
 801065c:	4867      	ldr	r0, [pc, #412]	@ (80107fc <ApplicationInitSigModelList+0x1d4>)
 801065e:	4613      	mov	r3, r2
 8010660:	00db      	lsls	r3, r3, #3
 8010662:	1a9b      	subs	r3, r3, r2
 8010664:	440b      	add	r3, r1
 8010666:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801066a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    }
#endif
    
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF
    
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 801066e:	79bb      	ldrb	r3, [r7, #6]
 8010670:	2b06      	cmp	r3, #6
 8010672:	d901      	bls.n	8010678 <ApplicationInitSigModelList+0x50>
    {
      return(MOBLE_RESULT_FAIL);
 8010674:	2302      	movs	r3, #2
 8010676:	e0ba      	b.n	80107ee <ApplicationInitSigModelList+0x1c6>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_ONOFF & (1 << index)) == (1 << index)))
 8010678:	79fb      	ldrb	r3, [r7, #7]
 801067a:	2b00      	cmp	r3, #0
 801067c:	bf0c      	ite	eq
 801067e:	2301      	moveq	r3, #1
 8010680:	2300      	movne	r3, #0
 8010682:	b2db      	uxtb	r3, r3
 8010684:	4619      	mov	r1, r3
 8010686:	79fb      	ldrb	r3, [r7, #7]
 8010688:	2201      	movs	r2, #1
 801068a:	fa02 f303 	lsl.w	r3, r2, r3
 801068e:	4299      	cmp	r1, r3
 8010690:	d11b      	bne.n	80106ca <ApplicationInitSigModelList+0xa2>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_ONOFF_SERVER_MODEL_ID;
 8010692:	79fa      	ldrb	r2, [r7, #7]
 8010694:	79bb      	ldrb	r3, [r7, #6]
 8010696:	1c59      	adds	r1, r3, #1
 8010698:	71b9      	strb	r1, [r7, #6]
 801069a:	4618      	mov	r0, r3
 801069c:	4957      	ldr	r1, [pc, #348]	@ (80107fc <ApplicationInitSigModelList+0x1d4>)
 801069e:	4613      	mov	r3, r2
 80106a0:	00db      	lsls	r3, r3, #3
 80106a2:	1a9b      	subs	r3, r3, r2
 80106a4:	4403      	add	r3, r0
 80106a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80106aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 80106ae:	79bb      	ldrb	r3, [r7, #6]
 80106b0:	2b06      	cmp	r3, #6
 80106b2:	d80a      	bhi.n	80106ca <ApplicationInitSigModelList+0xa2>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 80106b4:	79fa      	ldrb	r2, [r7, #7]
 80106b6:	79b9      	ldrb	r1, [r7, #6]
 80106b8:	4850      	ldr	r0, [pc, #320]	@ (80107fc <ApplicationInitSigModelList+0x1d4>)
 80106ba:	4613      	mov	r3, r2
 80106bc:	00db      	lsls	r3, r3, #3
 80106be:	1a9b      	subs	r3, r3, r2
 80106c0:	440b      	add	r3, r1
 80106c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106c6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      }
    }
#endif
    
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 80106ca:	79bb      	ldrb	r3, [r7, #6]
 80106cc:	2b06      	cmp	r3, #6
 80106ce:	d901      	bls.n	80106d4 <ApplicationInitSigModelList+0xac>
    {
      return(MOBLE_RESULT_FAIL);
 80106d0:	2302      	movs	r3, #2
 80106d2:	e08c      	b.n	80107ee <ApplicationInitSigModelList+0x1c6>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_LEVEL & (1 << index)) == (1 << index)))
 80106d4:	79fb      	ldrb	r3, [r7, #7]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	bf0c      	ite	eq
 80106da:	2301      	moveq	r3, #1
 80106dc:	2300      	movne	r3, #0
 80106de:	b2db      	uxtb	r3, r3
 80106e0:	4619      	mov	r1, r3
 80106e2:	79fb      	ldrb	r3, [r7, #7]
 80106e4:	2201      	movs	r2, #1
 80106e6:	fa02 f303 	lsl.w	r3, r2, r3
 80106ea:	4299      	cmp	r1, r3
 80106ec:	d11b      	bne.n	8010726 <ApplicationInitSigModelList+0xfe>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_LEVEL_SERVER_MODEL_ID;
 80106ee:	79fa      	ldrb	r2, [r7, #7]
 80106f0:	79bb      	ldrb	r3, [r7, #6]
 80106f2:	1c59      	adds	r1, r3, #1
 80106f4:	71b9      	strb	r1, [r7, #6]
 80106f6:	4618      	mov	r0, r3
 80106f8:	4940      	ldr	r1, [pc, #256]	@ (80107fc <ApplicationInitSigModelList+0x1d4>)
 80106fa:	4613      	mov	r3, r2
 80106fc:	00db      	lsls	r3, r3, #3
 80106fe:	1a9b      	subs	r3, r3, r2
 8010700:	4403      	add	r3, r0
 8010702:	f241 0202 	movw	r2, #4098	@ 0x1002
 8010706:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 801070a:	79bb      	ldrb	r3, [r7, #6]
 801070c:	2b06      	cmp	r3, #6
 801070e:	d80a      	bhi.n	8010726 <ApplicationInitSigModelList+0xfe>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8010710:	79fa      	ldrb	r2, [r7, #7]
 8010712:	79b9      	ldrb	r1, [r7, #6]
 8010714:	4839      	ldr	r0, [pc, #228]	@ (80107fc <ApplicationInitSigModelList+0x1d4>)
 8010716:	4613      	mov	r3, r2
 8010718:	00db      	lsls	r3, r3, #3
 801071a:	1a9b      	subs	r3, r3, r2
 801071c:	440b      	add	r3, r1
 801071e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010722:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    }
    
#endif
#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF
    
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 8010726:	79bb      	ldrb	r3, [r7, #6]
 8010728:	2b06      	cmp	r3, #6
 801072a:	d901      	bls.n	8010730 <ApplicationInitSigModelList+0x108>
    {
      return(MOBLE_RESULT_FAIL);
 801072c:	2302      	movs	r3, #2
 801072e:	e05e      	b.n	80107ee <ApplicationInitSigModelList+0x1c6>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF & (1 << index)) == (1 << index)))
 8010730:	79fb      	ldrb	r3, [r7, #7]
 8010732:	2b00      	cmp	r3, #0
 8010734:	bf0c      	ite	eq
 8010736:	2301      	moveq	r3, #1
 8010738:	2300      	movne	r3, #0
 801073a:	b2db      	uxtb	r3, r3
 801073c:	4619      	mov	r1, r3
 801073e:	79fb      	ldrb	r3, [r7, #7]
 8010740:	2201      	movs	r2, #1
 8010742:	fa02 f303 	lsl.w	r3, r2, r3
 8010746:	4299      	cmp	r1, r3
 8010748:	d11b      	bne.n	8010782 <ApplicationInitSigModelList+0x15a>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_POWER_ONOFF_SERVER_MODEL_ID;
 801074a:	79fa      	ldrb	r2, [r7, #7]
 801074c:	79bb      	ldrb	r3, [r7, #6]
 801074e:	1c59      	adds	r1, r3, #1
 8010750:	71b9      	strb	r1, [r7, #6]
 8010752:	4618      	mov	r0, r3
 8010754:	4929      	ldr	r1, [pc, #164]	@ (80107fc <ApplicationInitSigModelList+0x1d4>)
 8010756:	4613      	mov	r3, r2
 8010758:	00db      	lsls	r3, r3, #3
 801075a:	1a9b      	subs	r3, r3, r2
 801075c:	4403      	add	r3, r0
 801075e:	f241 0206 	movw	r2, #4102	@ 0x1006
 8010762:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 8010766:	79bb      	ldrb	r3, [r7, #6]
 8010768:	2b06      	cmp	r3, #6
 801076a:	d80a      	bhi.n	8010782 <ApplicationInitSigModelList+0x15a>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 801076c:	79fa      	ldrb	r2, [r7, #7]
 801076e:	79b9      	ldrb	r1, [r7, #6]
 8010770:	4822      	ldr	r0, [pc, #136]	@ (80107fc <ApplicationInitSigModelList+0x1d4>)
 8010772:	4613      	mov	r3, r2
 8010774:	00db      	lsls	r3, r3, #3
 8010776:	1a9b      	subs	r3, r3, r2
 8010778:	440b      	add	r3, r1
 801077a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801077e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      }
    }
#endif
    
#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 8010782:	79bb      	ldrb	r3, [r7, #6]
 8010784:	2b06      	cmp	r3, #6
 8010786:	d901      	bls.n	801078c <ApplicationInitSigModelList+0x164>
    {
      return(MOBLE_RESULT_FAIL);
 8010788:	2302      	movs	r3, #2
 801078a:	e030      	b.n	80107ee <ApplicationInitSigModelList+0x1c6>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP & (1 << index)) == (1 << index)))
 801078c:	79fb      	ldrb	r3, [r7, #7]
 801078e:	2b00      	cmp	r3, #0
 8010790:	bf0c      	ite	eq
 8010792:	2301      	moveq	r3, #1
 8010794:	2300      	movne	r3, #0
 8010796:	b2db      	uxtb	r3, r3
 8010798:	4619      	mov	r1, r3
 801079a:	79fb      	ldrb	r3, [r7, #7]
 801079c:	2201      	movs	r2, #1
 801079e:	fa02 f303 	lsl.w	r3, r2, r3
 80107a2:	4299      	cmp	r1, r3
 80107a4:	d11b      	bne.n	80107de <ApplicationInitSigModelList+0x1b6>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_POWER_ONOFF_SETUP_SERVER_MODEL_ID;
 80107a6:	79fa      	ldrb	r2, [r7, #7]
 80107a8:	79bb      	ldrb	r3, [r7, #6]
 80107aa:	1c59      	adds	r1, r3, #1
 80107ac:	71b9      	strb	r1, [r7, #6]
 80107ae:	4618      	mov	r0, r3
 80107b0:	4912      	ldr	r1, [pc, #72]	@ (80107fc <ApplicationInitSigModelList+0x1d4>)
 80107b2:	4613      	mov	r3, r2
 80107b4:	00db      	lsls	r3, r3, #3
 80107b6:	1a9b      	subs	r3, r3, r2
 80107b8:	4403      	add	r3, r0
 80107ba:	f241 0207 	movw	r2, #4103	@ 0x1007
 80107be:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 80107c2:	79bb      	ldrb	r3, [r7, #6]
 80107c4:	2b06      	cmp	r3, #6
 80107c6:	d80a      	bhi.n	80107de <ApplicationInitSigModelList+0x1b6>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 80107c8:	79fa      	ldrb	r2, [r7, #7]
 80107ca:	79b9      	ldrb	r1, [r7, #6]
 80107cc:	480b      	ldr	r0, [pc, #44]	@ (80107fc <ApplicationInitSigModelList+0x1d4>)
 80107ce:	4613      	mov	r3, r2
 80107d0:	00db      	lsls	r3, r3, #3
 80107d2:	1a9b      	subs	r3, r3, r2
 80107d4:	440b      	add	r3, r1
 80107d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80107da:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 80107de:	79fb      	ldrb	r3, [r7, #7]
 80107e0:	3301      	adds	r3, #1
 80107e2:	71fb      	strb	r3, [r7, #7]
 80107e4:	79fb      	ldrb	r3, [r7, #7]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	f43f af34 	beq.w	8010654 <ApplicationInitSigModelList+0x2c>
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
      }
    }
#endif
  }
  return (MOBLE_RESULT_SUCCESS); 
 80107ec:	2300      	movs	r3, #0
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3708      	adds	r7, #8
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	0802b7d8 	.word	0x0802b7d8
 80107fc:	20006f5c 	.word	0x20006f5c

08010800 <ApplicationInitVendorModelList>:
* @brief ApplicationInitVendorModelList: This function initialize the list of the 
*                                     VENDOR Models.
* retval MOBLE_RESULT
*/
MOBLE_RESULT ApplicationInitVendorModelList(void)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
#ifdef ENABLE_VENDOR_MODEL_SERVER  
  
  /*If Models enabled by user are exceeding the library capability*/
  if( APPLICATION_VENDOR_MODELS_MAX_COUNT > BLEMesh_GetTotalModelsCount() - 
 8010806:	f009 fdc9 	bl	801a39c <BLEMesh_GetTotalModelsCount>
 801080a:	4603      	mov	r3, r0
 801080c:	2b06      	cmp	r3, #6
 801080e:	d804      	bhi.n	801081a <ApplicationInitVendorModelList+0x1a>
                                            APPLICATION_SIG_MODELS_MAX_COUNT)
  {
    TRACE_I(TF_INIT,"The number of Models enabled in Application exceeding the limit of Library");
 8010810:	4823      	ldr	r0, [pc, #140]	@ (80108a0 <ApplicationInitVendorModelList+0xa0>)
 8010812:	f016 f83f 	bl	8026894 <iprintf>
    return(MOBLE_RESULT_FALSE);
 8010816:	2301      	movs	r3, #1
 8010818:	e03d      	b.n	8010896 <ApplicationInitVendorModelList+0x96>
  }
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 801081a:	2300      	movs	r3, #0
 801081c:	71fb      	strb	r3, [r7, #7]
 801081e:	e036      	b.n	801088e <ApplicationInitVendorModelList+0x8e>
  {
    uint8_t modelIndex = 0;
 8010820:	2300      	movs	r3, #0
 8010822:	71bb      	strb	r3, [r7, #6]
    Appli_Vendor_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8010824:	79fa      	ldrb	r2, [r7, #7]
 8010826:	79bb      	ldrb	r3, [r7, #6]
 8010828:	491e      	ldr	r1, [pc, #120]	@ (80108a4 <ApplicationInitVendorModelList+0xa4>)
 801082a:	0052      	lsls	r2, r2, #1
 801082c:	4413      	add	r3, r2
 801082e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    if((ENABLE_VENDOR_MODEL_SERVER & (1 << index)) == (1 << index)) 
 8010836:	79fb      	ldrb	r3, [r7, #7]
 8010838:	2b00      	cmp	r3, #0
 801083a:	bf0c      	ite	eq
 801083c:	2301      	moveq	r3, #1
 801083e:	2300      	movne	r3, #0
 8010840:	b2db      	uxtb	r3, r3
 8010842:	4619      	mov	r1, r3
 8010844:	79fb      	ldrb	r3, [r7, #7]
 8010846:	2201      	movs	r2, #1
 8010848:	fa02 f303 	lsl.w	r3, r2, r3
 801084c:	4299      	cmp	r1, r3
 801084e:	d116      	bne.n	801087e <ApplicationInitVendorModelList+0x7e>
    {
      Appli_Vendor_Models[index][modelIndex++] = VENDORMODEL_STMICRO_ID1;
 8010850:	79fa      	ldrb	r2, [r7, #7]
 8010852:	79bb      	ldrb	r3, [r7, #6]
 8010854:	1c59      	adds	r1, r3, #1
 8010856:	71b9      	strb	r1, [r7, #6]
 8010858:	4618      	mov	r0, r3
 801085a:	4912      	ldr	r1, [pc, #72]	@ (80108a4 <ApplicationInitVendorModelList+0xa4>)
 801085c:	0053      	lsls	r3, r2, #1
 801085e:	4403      	add	r3, r0
 8010860:	4a11      	ldr	r2, [pc, #68]	@ (80108a8 <ApplicationInitVendorModelList+0xa8>)
 8010862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      if(modelIndex < APPLICATION_VENDOR_MODELS_MAX_COUNT)
 8010866:	79bb      	ldrb	r3, [r7, #6]
 8010868:	2b01      	cmp	r3, #1
 801086a:	d808      	bhi.n	801087e <ApplicationInitVendorModelList+0x7e>
      {
        Appli_Vendor_Models[index][modelIndex] = NO_MODEL_AVLBL;
 801086c:	79fa      	ldrb	r2, [r7, #7]
 801086e:	79bb      	ldrb	r3, [r7, #6]
 8010870:	490c      	ldr	r1, [pc, #48]	@ (80108a4 <ApplicationInitVendorModelList+0xa4>)
 8010872:	0052      	lsls	r2, r2, #1
 8010874:	4413      	add	r3, r2
 8010876:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801087a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    
    if(modelIndex >= APPLICATION_VENDOR_MODELS_MAX_COUNT)
 801087e:	79bb      	ldrb	r3, [r7, #6]
 8010880:	2b01      	cmp	r3, #1
 8010882:	d901      	bls.n	8010888 <ApplicationInitVendorModelList+0x88>
    {
      return(MOBLE_RESULT_FAIL);
 8010884:	2302      	movs	r3, #2
 8010886:	e006      	b.n	8010896 <ApplicationInitVendorModelList+0x96>
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 8010888:	79fb      	ldrb	r3, [r7, #7]
 801088a:	3301      	adds	r3, #1
 801088c:	71fb      	strb	r3, [r7, #7]
 801088e:	79fb      	ldrb	r3, [r7, #7]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d0c5      	beq.n	8010820 <ApplicationInitVendorModelList+0x20>
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
  {
    Appli_Vendor_Models[index][0] = NO_MODEL_AVLBL;
  }
#endif
  return (MOBLE_RESULT_SUCCESS); 
 8010894:	2300      	movs	r3, #0
}
 8010896:	4618      	mov	r0, r3
 8010898:	3708      	adds	r7, #8
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}
 801089e:	bf00      	nop
 80108a0:	0802b848 	.word	0x0802b848
 80108a4:	20006f6c 	.word	0x20006f6c
 80108a8:	00010030 	.word	0x00010030

080108ac <ApplicationGetSigModelList>:
* @param pModels_sig_ID: Pointer of the array to be filled with SIG Models list
* @param elementIndex: Index of the element for Model List
* retval Count of the SIG Model Servers enabled in the Application
*/
MOBLEUINT8 ApplicationGetSigModelList(MOBLEUINT16* pModels_sig_ID, MOBLEUINT8 elementIndex)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b084      	sub	sp, #16
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	460b      	mov	r3, r1
 80108b6:	70fb      	strb	r3, [r7, #3]
  uint8_t modelCount = 0;
 80108b8:	2300      	movs	r3, #0
 80108ba:	73fb      	strb	r3, [r7, #15]
  
  while((modelCount < APPLICATION_SIG_MODELS_MAX_COUNT) && 
 80108bc:	e002      	b.n	80108c4 <ApplicationGetSigModelList+0x18>
        (Appli_SIG_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
  {
    modelCount++;
 80108be:	7bfb      	ldrb	r3, [r7, #15]
 80108c0:	3301      	adds	r3, #1
 80108c2:	73fb      	strb	r3, [r7, #15]
  while((modelCount < APPLICATION_SIG_MODELS_MAX_COUNT) && 
 80108c4:	7bfb      	ldrb	r3, [r7, #15]
 80108c6:	2b06      	cmp	r3, #6
 80108c8:	d80c      	bhi.n	80108e4 <ApplicationGetSigModelList+0x38>
        (Appli_SIG_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
 80108ca:	78fa      	ldrb	r2, [r7, #3]
 80108cc:	7bf9      	ldrb	r1, [r7, #15]
 80108ce:	480f      	ldr	r0, [pc, #60]	@ (801090c <ApplicationGetSigModelList+0x60>)
 80108d0:	4613      	mov	r3, r2
 80108d2:	00db      	lsls	r3, r3, #3
 80108d4:	1a9b      	subs	r3, r3, r2
 80108d6:	440b      	add	r3, r1
 80108d8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  while((modelCount < APPLICATION_SIG_MODELS_MAX_COUNT) && 
 80108dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80108e0:	4293      	cmp	r3, r2
 80108e2:	d1ec      	bne.n	80108be <ApplicationGetSigModelList+0x12>
  } 
  memcpy(pModels_sig_ID, 
         Appli_SIG_Models + elementIndex, 
 80108e4:	78fa      	ldrb	r2, [r7, #3]
 80108e6:	4613      	mov	r3, r2
 80108e8:	00db      	lsls	r3, r3, #3
 80108ea:	1a9b      	subs	r3, r3, r2
 80108ec:	005b      	lsls	r3, r3, #1
 80108ee:	461a      	mov	r2, r3
  memcpy(pModels_sig_ID, 
 80108f0:	4b06      	ldr	r3, [pc, #24]	@ (801090c <ApplicationGetSigModelList+0x60>)
 80108f2:	18d1      	adds	r1, r2, r3
         modelCount * 2);
 80108f4:	7bfb      	ldrb	r3, [r7, #15]
 80108f6:	005b      	lsls	r3, r3, #1
  memcpy(pModels_sig_ID, 
 80108f8:	461a      	mov	r2, r3
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f016 fa19 	bl	8026d32 <memcpy>
  
  return modelCount; 
 8010900:	7bfb      	ldrb	r3, [r7, #15]
}
 8010902:	4618      	mov	r0, r3
 8010904:	3710      	adds	r7, #16
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	20006f5c 	.word	0x20006f5c

08010910 <ApplicationGetVendorModelList>:
* @param elementIndex: Index of the element for Model List
* retval Count of the Vendor Model Servers enabled in the Application
*/

MOBLEUINT8 ApplicationGetVendorModelList(MOBLEUINT32* pModels_vendor_ID, MOBLEUINT8 elementIndex)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b084      	sub	sp, #16
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
 8010918:	460b      	mov	r3, r1
 801091a:	70fb      	strb	r3, [r7, #3]
    {
      /*do nothing*/
    }
  }
#else
  uint8_t modelCount = 0;
 801091c:	2300      	movs	r3, #0
 801091e:	73fb      	strb	r3, [r7, #15]
  
#ifdef ENABLE_VENDOR_MODEL_SERVER 
  /* Since the SIG Models are 2 bytes, copy 2*size for memcpy */
  while((modelCount < APPLICATION_VENDOR_MODELS_MAX_COUNT) &&
 8010920:	e002      	b.n	8010928 <ApplicationGetVendorModelList+0x18>
        (Appli_Vendor_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
  {
    modelCount++;
 8010922:	7bfb      	ldrb	r3, [r7, #15]
 8010924:	3301      	adds	r3, #1
 8010926:	73fb      	strb	r3, [r7, #15]
  while((modelCount < APPLICATION_VENDOR_MODELS_MAX_COUNT) &&
 8010928:	7bfb      	ldrb	r3, [r7, #15]
 801092a:	2b01      	cmp	r3, #1
 801092c:	d80a      	bhi.n	8010944 <ApplicationGetVendorModelList+0x34>
        (Appli_Vendor_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
 801092e:	78fa      	ldrb	r2, [r7, #3]
 8010930:	7bfb      	ldrb	r3, [r7, #15]
 8010932:	490c      	ldr	r1, [pc, #48]	@ (8010964 <ApplicationGetVendorModelList+0x54>)
 8010934:	0052      	lsls	r2, r2, #1
 8010936:	4413      	add	r3, r2
 8010938:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  while((modelCount < APPLICATION_VENDOR_MODELS_MAX_COUNT) &&
 801093c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010940:	4293      	cmp	r3, r2
 8010942:	d1ee      	bne.n	8010922 <ApplicationGetVendorModelList+0x12>
  }
  memcpy(pModels_vendor_ID, Appli_Vendor_Models+elementIndex, modelCount*4);
 8010944:	78fb      	ldrb	r3, [r7, #3]
 8010946:	00db      	lsls	r3, r3, #3
 8010948:	4a06      	ldr	r2, [pc, #24]	@ (8010964 <ApplicationGetVendorModelList+0x54>)
 801094a:	1899      	adds	r1, r3, r2
 801094c:	7bfb      	ldrb	r3, [r7, #15]
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	461a      	mov	r2, r3
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f016 f9ed 	bl	8026d32 <memcpy>
#endif  
#endif
  return modelCount; 
 8010958:	7bfb      	ldrb	r3, [r7, #15]
}
 801095a:	4618      	mov	r0, r3
 801095c:	3710      	adds	r7, #16
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}
 8010962:	bf00      	nop
 8010964:	20006f6c 	.word	0x20006f6c

08010968 <ApplicationChkSigModelActive>:
* @param modelID: Model Server ID received for the checking function
* @param elementIndex : index of element for which active model checking is needed
* retval Bool: True or False, if the Server ID matches with the list 
*/
MOBLEBOOL ApplicationChkSigModelActive(MOBLEUINT16 modelID, MOBLEUINT8 elementIndex)
{
 8010968:	b480      	push	{r7}
 801096a:	b085      	sub	sp, #20
 801096c:	af00      	add	r7, sp, #0
 801096e:	4603      	mov	r3, r0
 8010970:	460a      	mov	r2, r1
 8010972:	80fb      	strh	r3, [r7, #6]
 8010974:	4613      	mov	r3, r2
 8010976:	717b      	strb	r3, [r7, #5]
  
  MOBLEBOOL result = MOBLE_FALSE;
 8010978:	2300      	movs	r3, #0
 801097a:	73fb      	strb	r3, [r7, #15]
    
  for(uint8_t index = 0; index <= elementIndex; index++)
 801097c:	2300      	movs	r3, #0
 801097e:	73bb      	strb	r3, [r7, #14]
 8010980:	e020      	b.n	80109c4 <ApplicationChkSigModelActive+0x5c>
  {
    if(index == elementIndex)
 8010982:	7bba      	ldrb	r2, [r7, #14]
 8010984:	797b      	ldrb	r3, [r7, #5]
 8010986:	429a      	cmp	r2, r3
 8010988:	d119      	bne.n	80109be <ApplicationChkSigModelActive+0x56>
    {
      for(uint8_t count = 0; count < APPLICATION_SIG_MODELS_MAX_COUNT; count++)
 801098a:	2300      	movs	r3, #0
 801098c:	737b      	strb	r3, [r7, #13]
 801098e:	e012      	b.n	80109b6 <ApplicationChkSigModelActive+0x4e>
      {
        if (modelID == Appli_SIG_Models[index][count])      
 8010990:	7bba      	ldrb	r2, [r7, #14]
 8010992:	7b79      	ldrb	r1, [r7, #13]
 8010994:	4811      	ldr	r0, [pc, #68]	@ (80109dc <ApplicationChkSigModelActive+0x74>)
 8010996:	4613      	mov	r3, r2
 8010998:	00db      	lsls	r3, r3, #3
 801099a:	1a9b      	subs	r3, r3, r2
 801099c:	440b      	add	r3, r1
 801099e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80109a2:	88fa      	ldrh	r2, [r7, #6]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d103      	bne.n	80109b0 <ApplicationChkSigModelActive+0x48>
        {
         result = MOBLE_TRUE;
 80109a8:	2301      	movs	r3, #1
 80109aa:	73fb      	strb	r3, [r7, #15]
           break;
 80109ac:	bf00      	nop
        else
        {
           /*do nothing*/ 
        }
      }
      break;
 80109ae:	e00d      	b.n	80109cc <ApplicationChkSigModelActive+0x64>
      for(uint8_t count = 0; count < APPLICATION_SIG_MODELS_MAX_COUNT; count++)
 80109b0:	7b7b      	ldrb	r3, [r7, #13]
 80109b2:	3301      	adds	r3, #1
 80109b4:	737b      	strb	r3, [r7, #13]
 80109b6:	7b7b      	ldrb	r3, [r7, #13]
 80109b8:	2b06      	cmp	r3, #6
 80109ba:	d9e9      	bls.n	8010990 <ApplicationChkSigModelActive+0x28>
      break;
 80109bc:	e006      	b.n	80109cc <ApplicationChkSigModelActive+0x64>
  for(uint8_t index = 0; index <= elementIndex; index++)
 80109be:	7bbb      	ldrb	r3, [r7, #14]
 80109c0:	3301      	adds	r3, #1
 80109c2:	73bb      	strb	r3, [r7, #14]
 80109c4:	7bba      	ldrb	r2, [r7, #14]
 80109c6:	797b      	ldrb	r3, [r7, #5]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d9da      	bls.n	8010982 <ApplicationChkSigModelActive+0x1a>
    {
      /*do nothing*/  
    }
  }
  
  return result;
 80109cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3714      	adds	r7, #20
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	20006f5c 	.word	0x20006f5c

080109e0 <ApplicationChkVendorModelActive>:
* @param modelID: Model Server ID received for the checking function
* @param elementIndex : index of element for which active model checking is needed
* retval Bool: True or False, if the Server ID matches with the list 
*/
MOBLEBOOL ApplicationChkVendorModelActive(MOBLEUINT32 modelID, MOBLEUINT8 elementIndex)
{
 80109e0:	b480      	push	{r7}
 80109e2:	b085      	sub	sp, #20
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	460b      	mov	r3, r1
 80109ea:	70fb      	strb	r3, [r7, #3]
  MOBLEBOOL result = MOBLE_FALSE;
 80109ec:	2300      	movs	r3, #0
 80109ee:	73fb      	strb	r3, [r7, #15]
    
  for(uint8_t index = 0; index <= elementIndex; index++)
 80109f0:	2300      	movs	r3, #0
 80109f2:	73bb      	strb	r3, [r7, #14]
 80109f4:	e01e      	b.n	8010a34 <ApplicationChkVendorModelActive+0x54>
  {
    if(index == elementIndex)
 80109f6:	7bba      	ldrb	r2, [r7, #14]
 80109f8:	78fb      	ldrb	r3, [r7, #3]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d117      	bne.n	8010a2e <ApplicationChkVendorModelActive+0x4e>
    {
      for(uint8_t count = 0; count < APPLICATION_VENDOR_MODELS_MAX_COUNT; count++)
 80109fe:	2300      	movs	r3, #0
 8010a00:	737b      	strb	r3, [r7, #13]
 8010a02:	e010      	b.n	8010a26 <ApplicationChkVendorModelActive+0x46>
      {
        if (modelID == Appli_Vendor_Models[index][count])      
 8010a04:	7bba      	ldrb	r2, [r7, #14]
 8010a06:	7b7b      	ldrb	r3, [r7, #13]
 8010a08:	4910      	ldr	r1, [pc, #64]	@ (8010a4c <ApplicationChkVendorModelActive+0x6c>)
 8010a0a:	0052      	lsls	r2, r2, #1
 8010a0c:	4413      	add	r3, r2
 8010a0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010a12:	687a      	ldr	r2, [r7, #4]
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d103      	bne.n	8010a20 <ApplicationChkVendorModelActive+0x40>
        {
         result = MOBLE_TRUE;
 8010a18:	2301      	movs	r3, #1
 8010a1a:	73fb      	strb	r3, [r7, #15]
         break;
 8010a1c:	bf00      	nop
        else
        {
           /*do nothing*/ 
        }
      }
      break;
 8010a1e:	e00d      	b.n	8010a3c <ApplicationChkVendorModelActive+0x5c>
      for(uint8_t count = 0; count < APPLICATION_VENDOR_MODELS_MAX_COUNT; count++)
 8010a20:	7b7b      	ldrb	r3, [r7, #13]
 8010a22:	3301      	adds	r3, #1
 8010a24:	737b      	strb	r3, [r7, #13]
 8010a26:	7b7b      	ldrb	r3, [r7, #13]
 8010a28:	2b01      	cmp	r3, #1
 8010a2a:	d9eb      	bls.n	8010a04 <ApplicationChkVendorModelActive+0x24>
      break;
 8010a2c:	e006      	b.n	8010a3c <ApplicationChkVendorModelActive+0x5c>
  for(uint8_t index = 0; index <= elementIndex; index++)
 8010a2e:	7bbb      	ldrb	r3, [r7, #14]
 8010a30:	3301      	adds	r3, #1
 8010a32:	73bb      	strb	r3, [r7, #14]
 8010a34:	7bba      	ldrb	r2, [r7, #14]
 8010a36:	78fb      	ldrb	r3, [r7, #3]
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d9dc      	bls.n	80109f6 <ApplicationChkVendorModelActive+0x16>
    {
      /*do nothing*/  
    }
  }
  
  return result;  
 8010a3c:	7bfb      	ldrb	r3, [r7, #15]
    
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3714      	adds	r7, #20
 8010a42:	46bd      	mov	sp, r7
 8010a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a48:	4770      	bx	lr
 8010a4a:	bf00      	nop
 8010a4c:	20006f6c 	.word	0x20006f6c

08010a50 <BnrgmFrndLpnProcess>:
}
#endif /* #if (FRIEND_FEATURE == 0) */

#if (LOW_POWER_FEATURE == 0)
MOBLE_RESULT BnrgmFrndLpnProcess(void* param)
{
 8010a50:	b480      	push	{r7}
 8010a52:	b083      	sub	sp, #12
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8010a58:	2305      	movs	r3, #5
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	370c      	adds	r7, #12
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a64:	4770      	bx	lr

08010a66 <BnrgmFrndLpnProcessFrndOffer>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndOffer(void* param)
{
 8010a66:	b480      	push	{r7}
 8010a68:	b083      	sub	sp, #12
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8010a6e:	2305      	movs	r3, #5
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	370c      	adds	r7, #12
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr

08010a7c <BnrgmFrndLpnProcessFrndUpdate>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndUpdate(void* param)
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b083      	sub	sp, #12
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8010a84:	2305      	movs	r3, #5
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	370c      	adds	r7, #12
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a90:	4770      	bx	lr

08010a92 <BnrgmFrndLpnProcessFrndRfu>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndRfu(void* param)
{
 8010a92:	b480      	push	{r7}
 8010a94:	b083      	sub	sp, #12
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8010a9a:	2305      	movs	r3, #5
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	370c      	adds	r7, #12
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa6:	4770      	bx	lr

08010aa8 <BnrgmFrndLpnProcessFrndSubscrListConf>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndSubscrListConf(void* param)
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b083      	sub	sp, #12
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8010ab0:	2305      	movs	r3, #5
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	370c      	adds	r7, #12
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abc:	4770      	bx	lr

08010abe <BnrgmFrndLpnSwitchKeys>:

MOBLE_RESULT BnrgmFrndLpnSwitchKeys(void* param)
{
 8010abe:	b480      	push	{r7}
 8010ac0:	b083      	sub	sp, #12
 8010ac2:	af00      	add	r7, sp, #0
 8010ac4:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8010ac6:	2305      	movs	r3, #5
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	370c      	adds	r7, #12
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr

08010ad4 <BnrgmFrndLpnTranspSegRecvd>:

MOBLE_RESULT BnrgmFrndLpnTranspSegRecvd(void* param)
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	b083      	sub	sp, #12
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8010adc:	2305      	movs	r3, #5
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	370c      	adds	r7, #12
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae8:	4770      	bx	lr

08010aea <BnrgmFrndLpnUpdateKeys>:

MOBLE_RESULT BnrgmFrndLpnUpdateKeys(void* param)
{
 8010aea:	b480      	push	{r7}
 8010aec:	b083      	sub	sp, #12
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8010af2:	2305      	movs	r3, #5
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	370c      	adds	r7, #12
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <BnrgmFrndMgmtLpnInit>:

MOBLE_RESULT BnrgmFrndMgmtLpnInit(void* param)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b083      	sub	sp, #12
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8010b08:	2305      	movs	r3, #5
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	370c      	adds	r7, #12
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr

08010b16 <Light_LC_LigtnessLinearUnsolicitedChange>:
MOBLE_RESULT Light_LC_SensorPropertyUpdate(MOBLEUINT8 lcsElementIndex,
                                           MOBLEUINT16 sensorPropertyId,
                                           MOBLEUINT32 value)
{return MOBLE_RESULT_NOTIMPL;}
void Light_LC_LigtnessLinearUnsolicitedChange(MOBLEUINT8 elementIndex)
{}
 8010b16:	b480      	push	{r7}
 8010b18:	b083      	sub	sp, #12
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	71fb      	strb	r3, [r7, #7]
 8010b20:	bf00      	nop
 8010b22:	370c      	adds	r7, #12
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr

08010b2c <Light_LC_LcOnOffUpdate>:
                                    MOBLEUINT8 onOff,
                                    MOBLEUINT8 optionalParams,
                                    MOBLEUINT32 delayMsOnOffMsg,
                                    MOBLEUINT32 stepResMsOnOffMsg,
                                    MOBLEUINT32 trTimeMsOnOffMsg)
{return MOBLE_RESULT_NOTIMPL;}
 8010b2c:	b480      	push	{r7}
 8010b2e:	b083      	sub	sp, #12
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	603b      	str	r3, [r7, #0]
 8010b34:	4603      	mov	r3, r0
 8010b36:	71fb      	strb	r3, [r7, #7]
 8010b38:	460b      	mov	r3, r1
 8010b3a:	71bb      	strb	r3, [r7, #6]
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	717b      	strb	r3, [r7, #5]
 8010b40:	2305      	movs	r3, #5
 8010b42:	4618      	mov	r0, r3
 8010b44:	370c      	adds	r7, #12
 8010b46:	46bd      	mov	sp, r7
 8010b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4c:	4770      	bx	lr
	...

08010b50 <Sensor_UpdatePublishParameters>:
  * @param  sensor offset of corresponding sensor whose parameters to be updated
  * @retval Fail if sensor not initialized
  *         else Success
  */
__weak MOBLE_RESULT Sensor_UpdatePublishParameters(MOBLEUINT8 sensorOffset)
{
 8010b50:	b590      	push	{r4, r7, lr}
 8010b52:	b087      	sub	sp, #28
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	4603      	mov	r3, r0
 8010b58:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT8 fastCadenceStatus = 0;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	75fb      	strb	r3, [r7, #23]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	75bb      	strb	r3, [r7, #22]
  MOBLEUINT8 sensorOffsetTemp = sensorOffset;
 8010b62:	79fb      	ldrb	r3, [r7, #7]
 8010b64:	753b      	strb	r3, [r7, #20]
  sensor_params_t* pParams = SensorServer->pSensorParams + sensorOffsetTemp;
 8010b66:	4b81      	ldr	r3, [pc, #516]	@ (8010d6c <Sensor_UpdatePublishParameters+0x21c>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	685a      	ldr	r2, [r3, #4]
 8010b6c:	7d3b      	ldrb	r3, [r7, #20]
 8010b6e:	2134      	movs	r1, #52	@ 0x34
 8010b70:	fb01 f303 	mul.w	r3, r1, r3
 8010b74:	4413      	add	r3, r2
 8010b76:	613b      	str	r3, [r7, #16]
  MOBLEUINT32 fastCadenceLow;
  MOBLEUINT32 fastCadenceHigh;

  TRACE_M(TF_SENSOR_M, "SENSOR%d\r\n", sensorOffset+1);
 8010b78:	2100      	movs	r1, #0
 8010b7a:	487d      	ldr	r0, [pc, #500]	@ (8010d70 <Sensor_UpdatePublishParameters+0x220>)
 8010b7c:	f7fc fa70 	bl	800d060 <TraceHeader>
 8010b80:	79fb      	ldrb	r3, [r7, #7]
 8010b82:	3301      	adds	r3, #1
 8010b84:	4619      	mov	r1, r3
 8010b86:	487b      	ldr	r0, [pc, #492]	@ (8010d74 <Sensor_UpdatePublishParameters+0x224>)
 8010b88:	f015 fe84 	bl	8026894 <iprintf>
  
  if (pParams != NULL)
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	f000 80dd 	beq.w	8010d4e <Sensor_UpdatePublishParameters+0x1fe>
  {
    if (pParams->cadenceState == 1)
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	f040 80cf 	bne.w	8010d3e <Sensor_UpdatePublishParameters+0x1ee>
    {
      if (pParams->modelPublishPeriodMs == 0)
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	699b      	ldr	r3, [r3, #24]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d107      	bne.n	8010bb8 <Sensor_UpdatePublishParameters+0x68>
      {
        TRACE_M(TF_SENSOR_M, "Publish period set to 0\r\n");
 8010ba8:	2100      	movs	r1, #0
 8010baa:	4871      	ldr	r0, [pc, #452]	@ (8010d70 <Sensor_UpdatePublishParameters+0x220>)
 8010bac:	f7fc fa58 	bl	800d060 <TraceHeader>
 8010bb0:	4871      	ldr	r0, [pc, #452]	@ (8010d78 <Sensor_UpdatePublishParameters+0x228>)
 8010bb2:	f015 fed7 	bl	8026964 <puts>
 8010bb6:	e058      	b.n	8010c6a <Sensor_UpdatePublishParameters+0x11a>
      }
      else
      {
        if (SensorServer->p_cb->Sensor_IsFastCadence_cb != NULL)
 8010bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8010d6c <Sensor_UpdatePublishParameters+0x21c>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d012      	beq.n	8010bea <Sensor_UpdatePublishParameters+0x9a>
        {
          fastCadenceLow = pParams->fastCadenceLow;
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	691b      	ldr	r3, [r3, #16]
 8010bc8:	60fb      	str	r3, [r7, #12]
          fastCadenceHigh = pParams->fastCadenceHigh;
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	695b      	ldr	r3, [r3, #20]
 8010bce:	60bb      	str	r3, [r7, #8]
      
          /* check sensor value for fast cadence */
          fastCadenceStatus = 
            SensorServer->p_cb->Sensor_IsFastCadence_cb(sensorOffset,
 8010bd0:	4b66      	ldr	r3, [pc, #408]	@ (8010d6c <Sensor_UpdatePublishParameters+0x21c>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010bd8:	f107 0208 	add.w	r2, r7, #8
 8010bdc:	f107 010c 	add.w	r1, r7, #12
 8010be0:	79f8      	ldrb	r0, [r7, #7]
 8010be2:	4798      	blx	r3
 8010be4:	4603      	mov	r3, r0
 8010be6:	75fb      	strb	r3, [r7, #23]
 8010be8:	e001      	b.n	8010bee <Sensor_UpdatePublishParameters+0x9e>
                                                        &fastCadenceLow, 
                                                        &fastCadenceHigh);
      }
      else
      {
          fastCadenceStatus = 0;
 8010bea:	2300      	movs	r3, #0
 8010bec:	75fb      	strb	r3, [r7, #23]
      }
      
      /* if fast cadence required, divide publish interval by 2^n, n = fast cadence period divisor */
        if (fastCadenceStatus == 1)
 8010bee:	7dfb      	ldrb	r3, [r7, #23]
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	d109      	bne.n	8010c08 <Sensor_UpdatePublishParameters+0xb8>
      {
          pParams->publishPeriodMs = pParams->modelPublishPeriodMs / \
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	699b      	ldr	r3, [r3, #24]
                                     (1<<pParams->fastCadencePeriodDiv);
 8010bf8:	693a      	ldr	r2, [r7, #16]
 8010bfa:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
          pParams->publishPeriodMs = pParams->modelPublishPeriodMs / \
 8010bfe:	fa23 f202 	lsr.w	r2, r3, r2
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	61da      	str	r2, [r3, #28]
 8010c06:	e003      	b.n	8010c10 <Sensor_UpdatePublishParameters+0xc0>
      }
      else
      {
          pParams->publishPeriodMs = pParams->modelPublishPeriodMs;
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	699a      	ldr	r2, [r3, #24]
 8010c0c:	693b      	ldr	r3, [r7, #16]
 8010c0e:	61da      	str	r2, [r3, #28]
      }
      
      /* if publish period is less than status min interval, adjust to status min value */
      if (pParams->publishPeriodMs < (1 << pParams->statusMinInterval))
 8010c10:	693b      	ldr	r3, [r7, #16]
 8010c12:	69db      	ldr	r3, [r3, #28]
 8010c14:	693a      	ldr	r2, [r7, #16]
 8010c16:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8010c1a:	40d3      	lsrs	r3, r2
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d118      	bne.n	8010c52 <Sensor_UpdatePublishParameters+0x102>
      {
        TRACE_M(TF_SENSOR_M, "publish period %ld less than status minimum interval %d\r\n", pParams->publishPeriodMs, 1 << pParams->statusMinInterval);
 8010c20:	2100      	movs	r1, #0
 8010c22:	4853      	ldr	r0, [pc, #332]	@ (8010d70 <Sensor_UpdatePublishParameters+0x220>)
 8010c24:	f7fc fa1c 	bl	800d060 <TraceHeader>
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	69d9      	ldr	r1, [r3, #28]
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8010c32:	461a      	mov	r2, r3
 8010c34:	2301      	movs	r3, #1
 8010c36:	4093      	lsls	r3, r2
 8010c38:	461a      	mov	r2, r3
 8010c3a:	4850      	ldr	r0, [pc, #320]	@ (8010d7c <Sensor_UpdatePublishParameters+0x22c>)
 8010c3c:	f015 fe2a 	bl	8026894 <iprintf>
        pParams->publishPeriodMs = 1 << pParams->statusMinInterval;
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8010c46:	461a      	mov	r2, r3
 8010c48:	2301      	movs	r3, #1
 8010c4a:	4093      	lsls	r3, r2
 8010c4c:	461a      	mov	r2, r3
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	61da      	str	r2, [r3, #28]
      }
      
        TRACE_M(TF_SENSOR_M, "SENSOR%d fast cadence state %d, publish period %ld\r\n",
 8010c52:	2100      	movs	r1, #0
 8010c54:	4846      	ldr	r0, [pc, #280]	@ (8010d70 <Sensor_UpdatePublishParameters+0x220>)
 8010c56:	f7fc fa03 	bl	800d060 <TraceHeader>
 8010c5a:	79fb      	ldrb	r3, [r7, #7]
 8010c5c:	1c59      	adds	r1, r3, #1
 8010c5e:	7dfa      	ldrb	r2, [r7, #23]
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	69db      	ldr	r3, [r3, #28]
 8010c64:	4846      	ldr	r0, [pc, #280]	@ (8010d80 <Sensor_UpdatePublishParameters+0x230>)
 8010c66:	f015 fe15 	bl	8026894 <iprintf>
      /* realign timers of all sensors on same element index
         this may result in publishing of sensor status even for sensors whose
         sensor status is not scheduled
         Doing this benefits to publish sensor data of all elements in one message
         by data marshalling */
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	757b      	strb	r3, [r7, #21]
 8010c6e:	e05d      	b.n	8010d2c <Sensor_UpdatePublishParameters+0x1dc>
      {
        if(((SensorServer->pSensorParams)+count)->elementIdx == pParams->elementIdx &&
 8010c70:	4b3e      	ldr	r3, [pc, #248]	@ (8010d6c <Sensor_UpdatePublishParameters+0x21c>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	685a      	ldr	r2, [r3, #4]
 8010c76:	7d7b      	ldrb	r3, [r7, #21]
 8010c78:	2134      	movs	r1, #52	@ 0x34
 8010c7a:	fb01 f303 	mul.w	r3, r1, r3
 8010c7e:	4413      	add	r3, r2
 8010c80:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d14b      	bne.n	8010d26 <Sensor_UpdatePublishParameters+0x1d6>
             ((SensorServer->pSensorParams)+count)->cadenceState == 1)
 8010c8e:	4b37      	ldr	r3, [pc, #220]	@ (8010d6c <Sensor_UpdatePublishParameters+0x21c>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	685a      	ldr	r2, [r3, #4]
 8010c94:	7d7b      	ldrb	r3, [r7, #21]
 8010c96:	2134      	movs	r1, #52	@ 0x34
 8010c98:	fb01 f303 	mul.w	r3, r1, r3
 8010c9c:	4413      	add	r3, r2
 8010c9e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
        if(((SensorServer->pSensorParams)+count)->elementIdx == pParams->elementIdx &&
 8010ca2:	2b01      	cmp	r3, #1
 8010ca4:	d13f      	bne.n	8010d26 <Sensor_UpdatePublishParameters+0x1d6>
        {
          if(((SensorServer->pSensorParams)+count)->modelPublishPeriodMs == 0)
 8010ca6:	4b31      	ldr	r3, [pc, #196]	@ (8010d6c <Sensor_UpdatePublishParameters+0x21c>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	685a      	ldr	r2, [r3, #4]
 8010cac:	7d7b      	ldrb	r3, [r7, #21]
 8010cae:	2134      	movs	r1, #52	@ 0x34
 8010cb0:	fb01 f303 	mul.w	r3, r1, r3
 8010cb4:	4413      	add	r3, r2
 8010cb6:	699b      	ldr	r3, [r3, #24]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d10b      	bne.n	8010cd4 <Sensor_UpdatePublishParameters+0x184>
          {
            ((SensorServer->pSensorParams)+count)->timerStatus = TIMER_STOPPED;
 8010cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8010d6c <Sensor_UpdatePublishParameters+0x21c>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	685a      	ldr	r2, [r3, #4]
 8010cc2:	7d7b      	ldrb	r3, [r7, #21]
 8010cc4:	2134      	movs	r1, #52	@ 0x34
 8010cc6:	fb01 f303 	mul.w	r3, r1, r3
 8010cca:	4413      	add	r3, r2
 8010ccc:	2200      	movs	r2, #0
 8010cce:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 8010cd2:	e028      	b.n	8010d26 <Sensor_UpdatePublishParameters+0x1d6>
          }
          else
          {
      /* start timer for now to immediately send status on change parameters
      subsequently status would be sent after every publish period */
            ((SensorServer->pSensorParams)+count)->timerStatus = TIMER_RUNNING;
 8010cd4:	4b25      	ldr	r3, [pc, #148]	@ (8010d6c <Sensor_UpdatePublishParameters+0x21c>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	685a      	ldr	r2, [r3, #4]
 8010cda:	7d7b      	ldrb	r3, [r7, #21]
 8010cdc:	2134      	movs	r1, #52	@ 0x34
 8010cde:	fb01 f303 	mul.w	r3, r1, r3
 8010ce2:	4413      	add	r3, r2
 8010ce4:	2201      	movs	r2, #1
 8010ce6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            ((SensorServer->pSensorParams)+count)->timerBegin = Clock_Time();
 8010cea:	4b20      	ldr	r3, [pc, #128]	@ (8010d6c <Sensor_UpdatePublishParameters+0x21c>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	685a      	ldr	r2, [r3, #4]
 8010cf0:	7d7b      	ldrb	r3, [r7, #21]
 8010cf2:	2134      	movs	r1, #52	@ 0x34
 8010cf4:	fb01 f303 	mul.w	r3, r1, r3
 8010cf8:	18d4      	adds	r4, r2, r3
 8010cfa:	f7f5 ff13 	bl	8006b24 <HAL_GetTick>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	6223      	str	r3, [r4, #32]
            ((SensorServer->pSensorParams)+count)->timerEnd = \
              ((SensorServer->pSensorParams)+count)->timerBegin;            
 8010d02:	4b1a      	ldr	r3, [pc, #104]	@ (8010d6c <Sensor_UpdatePublishParameters+0x21c>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	685a      	ldr	r2, [r3, #4]
 8010d08:	7d7b      	ldrb	r3, [r7, #21]
 8010d0a:	2134      	movs	r1, #52	@ 0x34
 8010d0c:	fb01 f303 	mul.w	r3, r1, r3
 8010d10:	441a      	add	r2, r3
            ((SensorServer->pSensorParams)+count)->timerEnd = \
 8010d12:	4b16      	ldr	r3, [pc, #88]	@ (8010d6c <Sensor_UpdatePublishParameters+0x21c>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	6859      	ldr	r1, [r3, #4]
 8010d18:	7d7b      	ldrb	r3, [r7, #21]
 8010d1a:	2034      	movs	r0, #52	@ 0x34
 8010d1c:	fb00 f303 	mul.w	r3, r0, r3
 8010d20:	440b      	add	r3, r1
              ((SensorServer->pSensorParams)+count)->timerBegin;            
 8010d22:	6a12      	ldr	r2, [r2, #32]
            ((SensorServer->pSensorParams)+count)->timerEnd = \
 8010d24:	625a      	str	r2, [r3, #36]	@ 0x24
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 8010d26:	7d7b      	ldrb	r3, [r7, #21]
 8010d28:	3301      	adds	r3, #1
 8010d2a:	757b      	strb	r3, [r7, #21]
 8010d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8010d6c <Sensor_UpdatePublishParameters+0x21c>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	7a1b      	ldrb	r3, [r3, #8]
 8010d32:	7d7a      	ldrb	r2, [r7, #21]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d39b      	bcc.n	8010c70 <Sensor_UpdatePublishParameters+0x120>
        {
          /* */
        }
      }
      
      result = MOBLE_RESULT_SUCCESS;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	75bb      	strb	r3, [r7, #22]
 8010d3c:	e010      	b.n	8010d60 <Sensor_UpdatePublishParameters+0x210>
    }
    else /* cadence not supported */
    {
      TRACE_M(TF_SENSOR_M, "Cadence not supported\r\n");
 8010d3e:	2100      	movs	r1, #0
 8010d40:	480b      	ldr	r0, [pc, #44]	@ (8010d70 <Sensor_UpdatePublishParameters+0x220>)
 8010d42:	f7fc f98d 	bl	800d060 <TraceHeader>
 8010d46:	480f      	ldr	r0, [pc, #60]	@ (8010d84 <Sensor_UpdatePublishParameters+0x234>)
 8010d48:	f015 fe0c 	bl	8026964 <puts>
 8010d4c:	e008      	b.n	8010d60 <Sensor_UpdatePublishParameters+0x210>
    }
  }
  else
  {
    result = MOBLE_RESULT_FAIL;
 8010d4e:	2302      	movs	r3, #2
 8010d50:	75bb      	strb	r3, [r7, #22]
    TRACE_M(TF_SENSOR_M, "Sensor not initialized\r\n");
 8010d52:	2100      	movs	r1, #0
 8010d54:	4806      	ldr	r0, [pc, #24]	@ (8010d70 <Sensor_UpdatePublishParameters+0x220>)
 8010d56:	f7fc f983 	bl	800d060 <TraceHeader>
 8010d5a:	480b      	ldr	r0, [pc, #44]	@ (8010d88 <Sensor_UpdatePublishParameters+0x238>)
 8010d5c:	f015 fe02 	bl	8026964 <puts>
  }
  
  return result;
 8010d60:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	371c      	adds	r7, #28
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd90      	pop	{r4, r7, pc}
 8010d6a:	bf00      	nop
 8010d6c:	20006f74 	.word	0x20006f74
 8010d70:	0802e440 	.word	0x0802e440
 8010d74:	0802c33c 	.word	0x0802c33c
 8010d78:	0802c348 	.word	0x0802c348
 8010d7c:	0802c364 	.word	0x0802c364
 8010d80:	0802c3a0 	.word	0x0802c3a0
 8010d84:	0802c3d8 	.word	0x0802c3d8
 8010d88:	0802bd2c 	.word	0x0802bd2c

08010d8c <Sensor_ModelPublishSet>:
  * @retval Fail if model id is not sensor server
  *         Fail if sensor not initialized
  *         else Success
  */
__weak MOBLE_RESULT Sensor_ModelPublishSet(model_publicationparams_t* pPublishParams)
{
 8010d8c:	b590      	push	{r4, r7, lr}
 8010d8e:	b087      	sub	sp, #28
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8010d94:	2300      	movs	r3, #0
 8010d96:	75fb      	strb	r3, [r7, #23]
  MOBLEUINT8 elementIdx;
  MOBLEUINT32 rcvdPublishPeriod;
  sensor_params_t* pParams = NULL;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	613b      	str	r3, [r7, #16]
  
  if(SensorServer != NULL)
 8010d9c:	4b39      	ldr	r3, [pc, #228]	@ (8010e84 <Sensor_ModelPublishSet+0xf8>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d063      	beq.n	8010e6c <Sensor_ModelPublishSet+0xe0>
  {
    if (pPublishParams != NULL &&
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d056      	beq.n	8010e58 <Sensor_ModelPublishSet+0xcc>
        pPublishParams->modelID == SENSOR_SERVER_MODEL_ID)
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	685b      	ldr	r3, [r3, #4]
    if (pPublishParams != NULL &&
 8010dae:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 8010db2:	d151      	bne.n	8010e58 <Sensor_ModelPublishSet+0xcc>
    {
      /* extract element index */
      elementIdx = pPublishParams->elementAddress - BLEMesh_GetAddress();
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	781c      	ldrb	r4, [r3, #0]
 8010db8:	f009 fabc 	bl	801a334 <BLEMesh_GetAddress>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	b2db      	uxtb	r3, r3
 8010dc0:	1ae3      	subs	r3, r4, r3
 8010dc2:	73fb      	strb	r3, [r7, #15]
      rcvdPublishPeriod = pPublishParams->publishPeriod;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	7b9b      	ldrb	r3, [r3, #14]
 8010dc8:	60bb      	str	r3, [r7, #8]
        
      rcvdPublishPeriod = (rcvdPublishPeriod & 0x3F)*\
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
                           Get_StepResolutionValue(rcvdPublishPeriod>>6);
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	099b      	lsrs	r3, r3, #6
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	f7fc f916 	bl	800d008 <Get_StepResolutionValue>
 8010ddc:	4603      	mov	r3, r0
      rcvdPublishPeriod = (rcvdPublishPeriod & 0x3F)*\
 8010dde:	fb04 f303 	mul.w	r3, r4, r3
 8010de2:	60bb      	str	r3, [r7, #8]
    
      TRACE_M(TF_SENSOR_M, "Element index %d publish period %ld ms\r\n",
 8010de4:	2100      	movs	r1, #0
 8010de6:	4828      	ldr	r0, [pc, #160]	@ (8010e88 <Sensor_ModelPublishSet+0xfc>)
 8010de8:	f7fc f93a 	bl	800d060 <TraceHeader>
 8010dec:	7bfb      	ldrb	r3, [r7, #15]
 8010dee:	68ba      	ldr	r2, [r7, #8]
 8010df0:	4619      	mov	r1, r3
 8010df2:	4826      	ldr	r0, [pc, #152]	@ (8010e8c <Sensor_ModelPublishSet+0x100>)
 8010df4:	f015 fd4e 	bl	8026894 <iprintf>
              elementIdx, rcvdPublishPeriod);

      /* update publish period of all sensors on element given by publish parameters */
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 8010df8:	2300      	movs	r3, #0
 8010dfa:	75bb      	strb	r3, [r7, #22]
 8010dfc:	e025      	b.n	8010e4a <Sensor_ModelPublishSet+0xbe>
      {
        pParams = SensorServer->pSensorParams + count;
 8010dfe:	4b21      	ldr	r3, [pc, #132]	@ (8010e84 <Sensor_ModelPublishSet+0xf8>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	685a      	ldr	r2, [r3, #4]
 8010e04:	7dbb      	ldrb	r3, [r7, #22]
 8010e06:	2134      	movs	r1, #52	@ 0x34
 8010e08:	fb01 f303 	mul.w	r3, r1, r3
 8010e0c:	4413      	add	r3, r2
 8010e0e:	613b      	str	r3, [r7, #16]

        if (pParams != NULL)
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d00d      	beq.n	8010e32 <Sensor_ModelPublishSet+0xa6>
        {
          if (pParams->elementIdx == elementIdx)
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010e1c:	7bfa      	ldrb	r2, [r7, #15]
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	d110      	bne.n	8010e44 <Sensor_ModelPublishSet+0xb8>
          {
            pParams->modelPublishPeriodMs = rcvdPublishPeriod;
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	68ba      	ldr	r2, [r7, #8]
 8010e26:	619a      	str	r2, [r3, #24]
            Sensor_UpdatePublishParameters(count);
 8010e28:	7dbb      	ldrb	r3, [r7, #22]
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7ff fe90 	bl	8010b50 <Sensor_UpdatePublishParameters>
 8010e30:	e008      	b.n	8010e44 <Sensor_ModelPublishSet+0xb8>
            /* */
          }
        }
        else
        {
          TRACE_M(TF_SENSOR_M, "Sensor not initialized\r\n");
 8010e32:	2100      	movs	r1, #0
 8010e34:	4814      	ldr	r0, [pc, #80]	@ (8010e88 <Sensor_ModelPublishSet+0xfc>)
 8010e36:	f7fc f913 	bl	800d060 <TraceHeader>
 8010e3a:	4815      	ldr	r0, [pc, #84]	@ (8010e90 <Sensor_ModelPublishSet+0x104>)
 8010e3c:	f015 fd92 	bl	8026964 <puts>
          break;
 8010e40:	bf00      	nop
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 8010e42:	e01a      	b.n	8010e7a <Sensor_ModelPublishSet+0xee>
 8010e44:	7dbb      	ldrb	r3, [r7, #22]
 8010e46:	3301      	adds	r3, #1
 8010e48:	75bb      	strb	r3, [r7, #22]
 8010e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8010e84 <Sensor_ModelPublishSet+0xf8>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	7a1b      	ldrb	r3, [r3, #8]
 8010e50:	7dba      	ldrb	r2, [r7, #22]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d3d3      	bcc.n	8010dfe <Sensor_ModelPublishSet+0x72>
 8010e56:	e010      	b.n	8010e7a <Sensor_ModelPublishSet+0xee>
        }
      }
    }
    else
    {
      TRACE_M(TF_SENSOR_M, "Not for sensor server model\r\n");
 8010e58:	2100      	movs	r1, #0
 8010e5a:	480b      	ldr	r0, [pc, #44]	@ (8010e88 <Sensor_ModelPublishSet+0xfc>)
 8010e5c:	f7fc f900 	bl	800d060 <TraceHeader>
 8010e60:	480c      	ldr	r0, [pc, #48]	@ (8010e94 <Sensor_ModelPublishSet+0x108>)
 8010e62:	f015 fd7f 	bl	8026964 <puts>
      result = MOBLE_RESULT_FAIL;
 8010e66:	2302      	movs	r3, #2
 8010e68:	75fb      	strb	r3, [r7, #23]
 8010e6a:	e006      	b.n	8010e7a <Sensor_ModelPublishSet+0xee>
    }
  }
  else
  {
    TRACE_M(TF_SENSOR_M, "Sensor server not initialized\r\n");
 8010e6c:	2100      	movs	r1, #0
 8010e6e:	4806      	ldr	r0, [pc, #24]	@ (8010e88 <Sensor_ModelPublishSet+0xfc>)
 8010e70:	f7fc f8f6 	bl	800d060 <TraceHeader>
 8010e74:	4808      	ldr	r0, [pc, #32]	@ (8010e98 <Sensor_ModelPublishSet+0x10c>)
 8010e76:	f015 fd75 	bl	8026964 <puts>
  }
  
  return result;
 8010e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	371c      	adds	r7, #28
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd90      	pop	{r4, r7, pc}
 8010e84:	20006f74 	.word	0x20006f74
 8010e88:	0802e460 	.word	0x0802e460
 8010e8c:	0802c9a4 	.word	0x0802c9a4
 8010e90:	0802bd2c 	.word	0x0802bd2c
 8010e94:	0802c9d0 	.word	0x0802c9d0
 8010e98:	0802c408 	.word	0x0802c408

08010e9c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	af00      	add	r7, sp, #0
  return;
 8010ea0:	bf00      	nop
}
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea8:	4770      	bx	lr

08010eaa <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8010eaa:	b480      	push	{r7}
 8010eac:	af00      	add	r7, sp, #0
  return;
 8010eae:	bf00      	nop
}
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr

08010eb8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8010eb8:	b480      	push	{r7}
 8010eba:	af00      	add	r7, sp, #0
  return;
 8010ebc:	bf00      	nop
}
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec4:	4770      	bx	lr

08010ec6 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8010ec6:	b480      	push	{r7}
 8010ec8:	af00      	add	r7, sp, #0
  return;
 8010eca:	bf00      	nop
}
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed2:	4770      	bx	lr

08010ed4 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8010ed4:	b480      	push	{r7}
 8010ed6:	af00      	add	r7, sp, #0
  return;
 8010ed8:	bf00      	nop
}
 8010eda:	46bd      	mov	sp, r7
 8010edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee0:	4770      	bx	lr

08010ee2 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8010ee2:	b480      	push	{r7}
 8010ee4:	af00      	add	r7, sp, #0
  return;
 8010ee6:	bf00      	nop
}
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr

08010ef0 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	af00      	add	r7, sp, #0
  return;
 8010ef4:	bf00      	nop
}
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efc:	4770      	bx	lr

08010efe <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8010efe:	b480      	push	{r7}
 8010f00:	af00      	add	r7, sp, #0
  return;
 8010f02:	bf00      	nop
}
 8010f04:	46bd      	mov	sp, r7
 8010f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0a:	4770      	bx	lr

08010f0c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8010f0c:	b480      	push	{r7}
 8010f0e:	af00      	add	r7, sp, #0
  return;
 8010f10:	bf00      	nop
}
 8010f12:	46bd      	mov	sp, r7
 8010f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f18:	4770      	bx	lr

08010f1a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8010f1a:	b480      	push	{r7}
 8010f1c:	af00      	add	r7, sp, #0
  return;
 8010f1e:	bf00      	nop
}
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr

08010f28 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8010f28:	b480      	push	{r7}
 8010f2a:	af00      	add	r7, sp, #0
  return;
 8010f2c:	bf00      	nop
}
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f34:	4770      	bx	lr

08010f36 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8010f36:	b480      	push	{r7}
 8010f38:	af00      	add	r7, sp, #0
  return;
 8010f3a:	bf00      	nop
}
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f42:	4770      	bx	lr

08010f44 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8010f44:	b480      	push	{r7}
 8010f46:	af00      	add	r7, sp, #0
  return;
 8010f48:	bf00      	nop
}
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f50:	4770      	bx	lr

08010f52 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8010f52:	b480      	push	{r7}
 8010f54:	af00      	add	r7, sp, #0
  return;
 8010f56:	bf00      	nop
}
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5e:	4770      	bx	lr

08010f60 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8010f60:	b480      	push	{r7}
 8010f62:	af00      	add	r7, sp, #0
  return;
 8010f64:	bf00      	nop
}
 8010f66:	46bd      	mov	sp, r7
 8010f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6c:	4770      	bx	lr

08010f6e <BVOPUS_STM_Init>:
__WEAK void MESH_Init( void )
{
  return;
}
__WEAK void BVOPUS_STM_Init( void )
{
 8010f6e:	b480      	push	{r7}
 8010f70:	af00      	add	r7, sp, #0
  return;
 8010f72:	bf00      	nop
}
 8010f74:	46bd      	mov	sp, r7
 8010f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7a:	4770      	bx	lr

08010f7c <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	af00      	add	r7, sp, #0
  return;
 8010f80:	bf00      	nop
}
 8010f82:	46bd      	mov	sp, r7
 8010f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f88:	4770      	bx	lr
	...

08010f8c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8010f90:	4b04      	ldr	r3, [pc, #16]	@ (8010fa4 <SVCCTL_Init+0x18>)
 8010f92:	2200      	movs	r2, #0
 8010f94:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8010f96:	4b04      	ldr	r3, [pc, #16]	@ (8010fa8 <SVCCTL_Init+0x1c>)
 8010f98:	2200      	movs	r2, #0
 8010f9a:	751a      	strb	r2, [r3, #20]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8010f9c:	f000 f806 	bl	8010fac <SVCCTL_SvcInit>

  return;
 8010fa0:	bf00      	nop
}
 8010fa2:	bd80      	pop	{r7, pc}
 8010fa4:	200002a8 	.word	0x200002a8
 8010fa8:	200002c8 	.word	0x200002c8

08010fac <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	af00      	add	r7, sp, #0
  BAS_Init();
 8010fb0:	f7ff ff74 	bl	8010e9c <BAS_Init>

  BLS_Init();
 8010fb4:	f7ff ff79 	bl	8010eaa <BLS_Init>

  CRS_STM_Init();
 8010fb8:	f7ff ff7e 	bl	8010eb8 <CRS_STM_Init>

  DIS_Init();
 8010fbc:	f7ff ff83 	bl	8010ec6 <DIS_Init>

  EDS_STM_Init();
 8010fc0:	f7ff ff88 	bl	8010ed4 <EDS_STM_Init>

  HIDS_Init();
 8010fc4:	f7ff ff8d 	bl	8010ee2 <HIDS_Init>

  HRS_Init();
 8010fc8:	f7ff ff92 	bl	8010ef0 <HRS_Init>

  HTS_Init();
 8010fcc:	f7ff ff97 	bl	8010efe <HTS_Init>

  IAS_Init();
 8010fd0:	f7ff ff9c 	bl	8010f0c <IAS_Init>

  LLS_Init();
 8010fd4:	f7ff ffa1 	bl	8010f1a <LLS_Init>

  TPS_Init();
 8010fd8:	f7ff ffa6 	bl	8010f28 <TPS_Init>

  MOTENV_STM_Init();
 8010fdc:	f7ff ffab 	bl	8010f36 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8010fe0:	f7ff ffb0 	bl	8010f44 <P2PS_STM_Init>

  ZDD_STM_Init();
 8010fe4:	f7ff ffb5 	bl	8010f52 <ZDD_STM_Init>

  OTAS_STM_Init();
 8010fe8:	f7ff ffba 	bl	8010f60 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8010fec:	f7ff ffbf 	bl	8010f6e <BVOPUS_STM_Init>

  MESH_Init();
 8010ff0:	f7fe fa9c 	bl	800f52c <MESH_Init>

  SVCCTL_InitCustomSvc();
 8010ff4:	f7ff ffc2 	bl	8010f7c <SVCCTL_InitCustomSvc>
  
  return;
 8010ff8:	bf00      	nop
}
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b086      	sub	sp, #24
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	3301      	adds	r3, #1
 8011008:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 801100a:	2300      	movs	r3, #0
 801100c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 801100e:	693b      	ldr	r3, [r7, #16]
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	2bff      	cmp	r3, #255	@ 0xff
 8011014:	d13f      	bne.n	8011096 <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	3302      	adds	r3, #2
 801101a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	881b      	ldrh	r3, [r3, #0]
 8011020:	b29b      	uxth	r3, r3
 8011022:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011026:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801102a:	d132      	bne.n	8011092 <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 801102c:	2300      	movs	r3, #0
 801102e:	757b      	strb	r3, [r7, #21]
 8011030:	e00d      	b.n	801104e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8011032:	7d7b      	ldrb	r3, [r7, #21]
 8011034:	4a27      	ldr	r2, [pc, #156]	@ (80110d4 <SVCCTL_UserEvtRx+0xd8>)
 8011036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	4798      	blx	r3
 801103e:	4603      	mov	r3, r0
 8011040:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8011042:	7dfb      	ldrb	r3, [r7, #23]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d108      	bne.n	801105a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8011048:	7d7b      	ldrb	r3, [r7, #21]
 801104a:	3301      	adds	r3, #1
 801104c:	757b      	strb	r3, [r7, #21]
 801104e:	4b21      	ldr	r3, [pc, #132]	@ (80110d4 <SVCCTL_UserEvtRx+0xd8>)
 8011050:	7f1b      	ldrb	r3, [r3, #28]
 8011052:	7d7a      	ldrb	r2, [r7, #21]
 8011054:	429a      	cmp	r2, r3
 8011056:	d3ec      	bcc.n	8011032 <SVCCTL_UserEvtRx+0x36>
 8011058:	e000      	b.n	801105c <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 801105a:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 801105c:	2300      	movs	r3, #0
 801105e:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8011060:	2300      	movs	r3, #0
 8011062:	757b      	strb	r3, [r7, #21]
 8011064:	e00d      	b.n	8011082 <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 8011066:	7d7b      	ldrb	r3, [r7, #21]
 8011068:	4a1b      	ldr	r2, [pc, #108]	@ (80110d8 <SVCCTL_UserEvtRx+0xdc>)
 801106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801106e:	6878      	ldr	r0, [r7, #4]
 8011070:	4798      	blx	r3
 8011072:	4603      	mov	r3, r0
 8011074:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8011076:	7dfb      	ldrb	r3, [r7, #23]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d108      	bne.n	801108e <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 801107c:	7d7b      	ldrb	r3, [r7, #21]
 801107e:	3301      	adds	r3, #1
 8011080:	757b      	strb	r3, [r7, #21]
 8011082:	4b15      	ldr	r3, [pc, #84]	@ (80110d8 <SVCCTL_UserEvtRx+0xdc>)
 8011084:	7d1b      	ldrb	r3, [r3, #20]
 8011086:	7d7a      	ldrb	r2, [r7, #21]
 8011088:	429a      	cmp	r2, r3
 801108a:	d3ec      	bcc.n	8011066 <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 801108c:	e002      	b.n	8011094 <SVCCTL_UserEvtRx+0x98>
              break;
 801108e:	bf00      	nop
          break;
 8011090:	e000      	b.n	8011094 <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 8011092:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8011094:	e000      	b.n	8011098 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 8011096:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8011098:	7dfb      	ldrb	r3, [r7, #23]
 801109a:	2b02      	cmp	r3, #2
 801109c:	d00f      	beq.n	80110be <SVCCTL_UserEvtRx+0xc2>
 801109e:	2b02      	cmp	r3, #2
 80110a0:	dc10      	bgt.n	80110c4 <SVCCTL_UserEvtRx+0xc8>
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d002      	beq.n	80110ac <SVCCTL_UserEvtRx+0xb0>
 80110a6:	2b01      	cmp	r3, #1
 80110a8:	d006      	beq.n	80110b8 <SVCCTL_UserEvtRx+0xbc>
 80110aa:	e00b      	b.n	80110c4 <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f7f2 fcfb 	bl	8003aa8 <SVCCTL_App_Notification>
 80110b2:	4603      	mov	r3, r0
 80110b4:	75bb      	strb	r3, [r7, #22]
      break;
 80110b6:	e008      	b.n	80110ca <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80110b8:	2301      	movs	r3, #1
 80110ba:	75bb      	strb	r3, [r7, #22]
      break;
 80110bc:	e005      	b.n	80110ca <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80110be:	2300      	movs	r3, #0
 80110c0:	75bb      	strb	r3, [r7, #22]
      break;
 80110c2:	e002      	b.n	80110ca <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80110c4:	2301      	movs	r3, #1
 80110c6:	75bb      	strb	r3, [r7, #22]
      break;
 80110c8:	bf00      	nop
  }

  return (return_status);
 80110ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	3718      	adds	r7, #24
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	200002a8 	.word	0x200002a8
 80110d8:	200002c8 	.word	0x200002c8

080110dc <Vendor_WriteLocalDataCb>:
MOBLE_RESULT Vendor_WriteLocalDataCb(MODEL_MessageHeader_t *pmsgParams,  
                                     MOBLEUINT8 command, 
                                     MOBLEUINT8 const *data, 
                                     MOBLEUINT32 length, 
                                     MOBLEBOOL response)
{
 80110dc:	b590      	push	{r4, r7, lr}
 80110de:	b089      	sub	sp, #36	@ 0x24
 80110e0:	af02      	add	r7, sp, #8
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	607a      	str	r2, [r7, #4]
 80110e6:	603b      	str	r3, [r7, #0]
 80110e8:	460b      	mov	r3, r1
 80110ea:	72fb      	strb	r3, [r7, #11]
  
  MOBLE_COMMAND_STATUS status = STATUS_SUCCESS;
 80110ec:	2300      	movs	r3, #0
 80110ee:	75fb      	strb	r3, [r7, #23]
  
  /* Traces for the Data */
  uint16_t idx = 0;
 80110f0:	2300      	movs	r3, #0
 80110f2:	82bb      	strh	r3, [r7, #20]
          command, 
          response);
  
  TRACE_I(TF_VENDOR_M, "DATA_RECEIVED length = %ld\n\r",length);
  
         for (idx=0; idx<length; idx++)
 80110f4:	2300      	movs	r3, #0
 80110f6:	82bb      	strh	r3, [r7, #20]
 80110f8:	e002      	b.n	8011100 <Vendor_WriteLocalDataCb+0x24>
 80110fa:	8abb      	ldrh	r3, [r7, #20]
 80110fc:	3301      	adds	r3, #1
 80110fe:	82bb      	strh	r3, [r7, #20]
 8011100:	8abb      	ldrh	r3, [r7, #20]
 8011102:	683a      	ldr	r2, [r7, #0]
 8011104:	429a      	cmp	r2, r3
 8011106:	d8f8      	bhi.n	80110fa <Vendor_WriteLocalDataCb+0x1e>
         {
           TRACE_I(TF_VENDOR_M,"data[%d]= %d",idx,data[idx]);  
           TRACE_I(TF_VENDOR_M,"\n\r");
         }
         
           switch (command)
 8011108:	7afb      	ldrb	r3, [r7, #11]
 801110a:	2b0e      	cmp	r3, #14
 801110c:	d016      	beq.n	801113c <Vendor_WriteLocalDataCb+0x60>
 801110e:	2b0e      	cmp	r3, #14
 8011110:	dc1a      	bgt.n	8011148 <Vendor_WriteLocalDataCb+0x6c>
 8011112:	2b01      	cmp	r3, #1
 8011114:	d002      	beq.n	801111c <Vendor_WriteLocalDataCb+0x40>
 8011116:	2b03      	cmp	r3, #3
 8011118:	d006      	beq.n	8011128 <Vendor_WriteLocalDataCb+0x4c>
 801111a:	e015      	b.n	8011148 <Vendor_WriteLocalDataCb+0x6c>
           case APPLI_TEST_CMD:
             {
               /*This is callback when ever command is coming for test of response
                 time,command reached count, data byte sent
               */          
               VendorAppli_cb.TestCommand_cb(data, length);
 801111c:	4b2d      	ldr	r3, [pc, #180]	@ (80111d4 <Vendor_WriteLocalDataCb+0xf8>)
 801111e:	689b      	ldr	r3, [r3, #8]
 8011120:	6839      	ldr	r1, [r7, #0]
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	4798      	blx	r3
               break;
 8011126:	e012      	b.n	801114e <Vendor_WriteLocalDataCb+0x72>
               /* 
               Message Received     B0     B1    B2      B3    B4    B5    B6     B7 
               B0 - Sub-Cmd LED
               B1-B7 - Data Bytes       
               */          
               VendorAppli_cb.LEDControlCommand_Cb(data, length, pmsgParams->elementIndex,\
 8011128:	4b2a      	ldr	r3, [pc, #168]	@ (80111d4 <Vendor_WriteLocalDataCb+0xf8>)
 801112a:	681c      	ldr	r4, [r3, #0]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	781a      	ldrb	r2, [r3, #0]
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	88db      	ldrh	r3, [r3, #6]
 8011134:	6839      	ldr	r1, [r7, #0]
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	47a0      	blx	r4
                 pmsgParams->dst_peer);
               break;
 801113a:	e008      	b.n	801114e <Vendor_WriteLocalDataCb+0x72>
           case APPLI_DATA_CNTRL_CMD:
             {
               /*This is callback when ever command is coming for test of response
                 time,command reached count, data byte sent
               */          
               VendorAppli_cb.DataControlCommand_cb(data,length);    
 801113c:	4b25      	ldr	r3, [pc, #148]	@ (80111d4 <Vendor_WriteLocalDataCb+0xf8>)
 801113e:	695b      	ldr	r3, [r3, #20]
 8011140:	6839      	ldr	r1, [r7, #0]
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	4798      	blx	r3
               break;       
 8011146:	e002      	b.n	801114e <Vendor_WriteLocalDataCb+0x72>
             } 
             /* Default case - Not valid command */
           default:
             {
               status = STATUS_INVALID_COMMAND;
 8011148:	2301      	movs	r3, #1
 801114a:	75fb      	strb	r3, [r7, #23]
               break;
 801114c:	bf00      	nop
           }
                   
         /* this expression is used to send the status of data received whether it
         is correct or not , First 3 bits are for status and last 5 bit are for sub commands
         */
         ResponseBuffer[0] = ResponseBuffer[0] | (status << 5);
 801114e:	4b22      	ldr	r3, [pc, #136]	@ (80111d8 <Vendor_WriteLocalDataCb+0xfc>)
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	b25a      	sxtb	r2, r3
 8011154:	7dfb      	ldrb	r3, [r7, #23]
 8011156:	015b      	lsls	r3, r3, #5
 8011158:	b25b      	sxtb	r3, r3
 801115a:	4313      	orrs	r3, r2
 801115c:	b25b      	sxtb	r3, r3
 801115e:	b2da      	uxtb	r2, r3
 8011160:	4b1d      	ldr	r3, [pc, #116]	@ (80111d8 <Vendor_WriteLocalDataCb+0xfc>)
 8011162:	701a      	strb	r2, [r3, #0]
         If response is true, Message response will be sent      
         Message Response     B0     B1    B2      B3    B4    B5    B6     B7 
         B0 - Sub-Cmd 
         B1-B7 - Response Bytes if any 
         */
         if (response == MOBLE_TRUE)
 8011164:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011168:	2b01      	cmp	r3, #1
 801116a:	d128      	bne.n	80111be <Vendor_WriteLocalDataCb+0xe2>
         {
           if (ADDRESS_IS_UNICAST(pmsgParams->dst_peer))
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	88db      	ldrh	r3, [r3, #6]
 8011170:	b21b      	sxth	r3, r3
 8011172:	2b00      	cmp	r3, #0
 8011174:	dd15      	ble.n	80111a2 <Vendor_WriteLocalDataCb+0xc6>
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	88db      	ldrh	r3, [r3, #6]
 801117a:	b21b      	sxth	r3, r3
 801117c:	2b00      	cmp	r3, #0
 801117e:	db10      	blt.n	80111a2 <Vendor_WriteLocalDataCb+0xc6>
           {
             VendorModel_SendResponse(VENDOR_STMICRO_CID, pmsgParams, command, ResponseBuffer, BuffLength);
 8011180:	4b16      	ldr	r3, [pc, #88]	@ (80111dc <Vendor_WriteLocalDataCb+0x100>)
 8011182:	881b      	ldrh	r3, [r3, #0]
 8011184:	7afa      	ldrb	r2, [r7, #11]
 8011186:	9300      	str	r3, [sp, #0]
 8011188:	4b13      	ldr	r3, [pc, #76]	@ (80111d8 <Vendor_WriteLocalDataCb+0xfc>)
 801118a:	68f9      	ldr	r1, [r7, #12]
 801118c:	2030      	movs	r0, #48	@ 0x30
 801118e:	f011 fd49 	bl	8022c24 <VendorModel_SendResponse>
             TRACE_M(TF_VENDOR,"Sending Response for Unicast \n\r");
 8011192:	2100      	movs	r1, #0
 8011194:	4812      	ldr	r0, [pc, #72]	@ (80111e0 <Vendor_WriteLocalDataCb+0x104>)
 8011196:	f7fb ff63 	bl	800d060 <TraceHeader>
 801119a:	4812      	ldr	r0, [pc, #72]	@ (80111e4 <Vendor_WriteLocalDataCb+0x108>)
 801119c:	f015 fb7a 	bl	8026894 <iprintf>
 80111a0:	e00d      	b.n	80111be <Vendor_WriteLocalDataCb+0xe2>
           }
           else
           {
             /* Randomize responses*/
             BLEMesh_ModelsDelayPacket(pmsgParams, command, ResponseBuffer, BuffLength);
 80111a2:	4b0e      	ldr	r3, [pc, #56]	@ (80111dc <Vendor_WriteLocalDataCb+0x100>)
 80111a4:	881b      	ldrh	r3, [r3, #0]
 80111a6:	7af9      	ldrb	r1, [r7, #11]
 80111a8:	4a0b      	ldr	r2, [pc, #44]	@ (80111d8 <Vendor_WriteLocalDataCb+0xfc>)
 80111aa:	68f8      	ldr	r0, [r7, #12]
 80111ac:	f7f4 fdb4 	bl	8005d18 <BLEMesh_ModelsDelayPacket>
             TRACE_M(TF_VENDOR,"Sending Response for Multicast \n\r");
 80111b0:	2100      	movs	r1, #0
 80111b2:	480b      	ldr	r0, [pc, #44]	@ (80111e0 <Vendor_WriteLocalDataCb+0x104>)
 80111b4:	f7fb ff54 	bl	800d060 <TraceHeader>
 80111b8:	480b      	ldr	r0, [pc, #44]	@ (80111e8 <Vendor_WriteLocalDataCb+0x10c>)
 80111ba:	f015 fb6b 	bl	8026894 <iprintf>
           }		
         }
         
         if (status == STATUS_SUCCESS)
 80111be:	7dfb      	ldrb	r3, [r7, #23]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d101      	bne.n	80111c8 <Vendor_WriteLocalDataCb+0xec>
         {
           return MOBLE_RESULT_SUCCESS;  
 80111c4:	2300      	movs	r3, #0
 80111c6:	e000      	b.n	80111ca <Vendor_WriteLocalDataCb+0xee>
         }
         else
         {
           return MOBLE_RESULT_FAIL;
 80111c8:	2302      	movs	r3, #2
         }
         
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	371c      	adds	r7, #28
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd90      	pop	{r4, r7, pc}
 80111d2:	bf00      	nop
 80111d4:	0802dfa0 	.word	0x0802dfa0
 80111d8:	200045bc 	.word	0x200045bc
 80111dc:	200045f8 	.word	0x200045f8
 80111e0:	0802e478 	.word	0x0802e478
 80111e4:	0802ca38 	.word	0x0802ca38
 80111e8:	0802ca58 	.word	0x0802ca58

080111ec <Vendor_ReadLocalDataCb>:
MOBLE_RESULT Vendor_ReadLocalDataCb(MODEL_MessageHeader_t *pmsgParams,  
                                   MOBLEUINT8 command, 
                                   MOBLEUINT8 const *data, 
                                   MOBLEUINT32 length, 
                                   MOBLEBOOL response)
{  
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b088      	sub	sp, #32
 80111f0:	af02      	add	r7, sp, #8
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	607a      	str	r2, [r7, #4]
 80111f6:	603b      	str	r3, [r7, #0]
 80111f8:	460b      	mov	r3, r1
 80111fa:	72fb      	strb	r3, [r7, #11]
 
 MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 80111fc:	2300      	movs	r3, #0
 80111fe:	75fb      	strb	r3, [r7, #23]
          command, 
          response);
  
  TRACE_I(TF_VENDOR_M,"DATA_RECEIVED length = %ld\n\r",length);
  
        for (MOBLEUINT8 idx=0; idx<length; idx++)
 8011200:	2300      	movs	r3, #0
 8011202:	75bb      	strb	r3, [r7, #22]
 8011204:	e002      	b.n	801120c <Vendor_ReadLocalDataCb+0x20>
 8011206:	7dbb      	ldrb	r3, [r7, #22]
 8011208:	3301      	adds	r3, #1
 801120a:	75bb      	strb	r3, [r7, #22]
 801120c:	7dbb      	ldrb	r3, [r7, #22]
 801120e:	683a      	ldr	r2, [r7, #0]
 8011210:	429a      	cmp	r2, r3
 8011212:	d8f8      	bhi.n	8011206 <Vendor_ReadLocalDataCb+0x1a>
          TRACE_I(TF_VENDOR_M,"data[%d]= %d",idx,data[idx]); 
          TRACE_I(TF_VENDOR_M,"\n\r");
        }
        
          /* Check which command is in packet */
          switch(command)
 8011214:	7afb      	ldrb	r3, [r7, #11]
 8011216:	3b01      	subs	r3, #1
 8011218:	2b0d      	cmp	r3, #13
 801121a:	d867      	bhi.n	80112ec <Vendor_ReadLocalDataCb+0x100>
 801121c:	a201      	add	r2, pc, #4	@ (adr r2, 8011224 <Vendor_ReadLocalDataCb+0x38>)
 801121e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011222:	bf00      	nop
 8011224:	0801125d 	.word	0x0801125d
 8011228:	0801128f 	.word	0x0801128f
 801122c:	080112b9 	.word	0x080112b9
 8011230:	0801129f 	.word	0x0801129f
 8011234:	080112f3 	.word	0x080112f3
 8011238:	080112ed 	.word	0x080112ed
 801123c:	080112ed 	.word	0x080112ed
 8011240:	080112ed 	.word	0x080112ed
 8011244:	080112ed 	.word	0x080112ed
 8011248:	080112ed 	.word	0x080112ed
 801124c:	080112ed 	.word	0x080112ed
 8011250:	080112ed 	.word	0x080112ed
 8011254:	080112ed 	.word	0x080112ed
 8011258:	080112dd 	.word	0x080112dd
              B0 - Sub-Cmd for APPLI_TEST_CMD
              B1-B7 - Data Bytes if any  
              this function gives back the number count of command received by 
              the receiver.
              */
              VendorAppli_cb.GetTestCount(getBuff);
 801125c:	4b4c      	ldr	r3, [pc, #304]	@ (8011390 <Vendor_ReadLocalDataCb+0x1a4>)
 801125e:	691b      	ldr	r3, [r3, #16]
 8011260:	f107 0210 	add.w	r2, r7, #16
 8011264:	4610      	mov	r0, r2
 8011266:	4798      	blx	r3
              ResponseBuffer[0] = APPLI_TEST_INC_COUNTER;
 8011268:	4b4a      	ldr	r3, [pc, #296]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 801126a:	2205      	movs	r2, #5
 801126c:	701a      	strb	r2, [r3, #0]
              ResponseBuffer[1] = getBuff[0];
 801126e:	7c3a      	ldrb	r2, [r7, #16]
 8011270:	4b48      	ldr	r3, [pc, #288]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 8011272:	705a      	strb	r2, [r3, #1]
              ResponseBuffer[2] = getBuff[1];
 8011274:	7c7a      	ldrb	r2, [r7, #17]
 8011276:	4b47      	ldr	r3, [pc, #284]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 8011278:	709a      	strb	r2, [r3, #2]
              ResponseBuffer[3] = getBuff[2];
 801127a:	7cba      	ldrb	r2, [r7, #18]
 801127c:	4b45      	ldr	r3, [pc, #276]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 801127e:	70da      	strb	r2, [r3, #3]
              ResponseBuffer[4] = getBuff[3];
 8011280:	7cfa      	ldrb	r2, [r7, #19]
 8011282:	4b44      	ldr	r3, [pc, #272]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 8011284:	711a      	strb	r2, [r3, #4]
              BuffLength = 5;
 8011286:	4b44      	ldr	r3, [pc, #272]	@ (8011398 <Vendor_ReadLocalDataCb+0x1ac>)
 8011288:	2205      	movs	r2, #5
 801128a:	801a      	strh	r2, [r3, #0]
              break;
 801128c:	e032      	b.n	80112f4 <Vendor_ReadLocalDataCb+0x108>
              Message Received     B0     B1    B2      B3    B4    B5    B6     B7 
              B0 - Sub-Cmd for APPLI_DEVICE_INFO_CMD
              B1-B7 - Data Bytes if any      
              
              */
              status =  VendorAppli_cb.DeviceInfoCommand_cb(data, length);
 801128e:	4b40      	ldr	r3, [pc, #256]	@ (8011390 <Vendor_ReadLocalDataCb+0x1a4>)
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	6839      	ldr	r1, [r7, #0]
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	4798      	blx	r3
 8011298:	4603      	mov	r3, r0
 801129a:	75fb      	strb	r3, [r7, #23]
              break;
 801129c:	e02a      	b.n	80112f4 <Vendor_ReadLocalDataCb+0x108>
          case APPLI_ELEMENT_TYPE_CMD:
            {
              /*
              Message Received with Command APPLI_ELEMENT_TYPE_CMD
              */
              ResponseBuffer[0] = ELEMENT_TYPE_LED;
 801129e:	4b3d      	ldr	r3, [pc, #244]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 80112a0:	2201      	movs	r2, #1
 80112a2:	701a      	strb	r2, [r3, #0]
              ResponseBuffer[1] = ELEMENT_TYPE_LED;
 80112a4:	4b3b      	ldr	r3, [pc, #236]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 80112a6:	2201      	movs	r2, #1
 80112a8:	705a      	strb	r2, [r3, #1]
              ResponseBuffer[2] = ELEMENT_TYPE_SWITCH;
 80112aa:	4b3a      	ldr	r3, [pc, #232]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 80112ac:	2202      	movs	r2, #2
 80112ae:	709a      	strb	r2, [r3, #2]
              BuffLength  = 3;      
 80112b0:	4b39      	ldr	r3, [pc, #228]	@ (8011398 <Vendor_ReadLocalDataCb+0x1ac>)
 80112b2:	2203      	movs	r2, #3
 80112b4:	801a      	strh	r2, [r3, #0]
              break;
 80112b6:	e01d      	b.n	80112f4 <Vendor_ReadLocalDataCb+0x108>
              /*
              Message Received with Command APPLI_LED_CONTROL_STATUS_CMD
              ResponseBuffer will send the response of selected Element
              */
      
      TRACE_M(TF_VENDOR,"Appli_LED_Control_Status callback received for elementIndex %d \r\n", pmsgParams->elementIndex);     
 80112b8:	2100      	movs	r1, #0
 80112ba:	4838      	ldr	r0, [pc, #224]	@ (801139c <Vendor_ReadLocalDataCb+0x1b0>)
 80112bc:	f7fb fed0 	bl	800d060 <TraceHeader>
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	4619      	mov	r1, r3
 80112c6:	4836      	ldr	r0, [pc, #216]	@ (80113a0 <Vendor_ReadLocalDataCb+0x1b4>)
 80112c8:	f015 fae4 	bl	8026894 <iprintf>
      /*User Need to send the status as per the element selected*/
                ResponseBuffer[0] = Appli_LedState;
 80112cc:	4b35      	ldr	r3, [pc, #212]	@ (80113a4 <Vendor_ReadLocalDataCb+0x1b8>)
 80112ce:	781a      	ldrb	r2, [r3, #0]
 80112d0:	4b30      	ldr	r3, [pc, #192]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 80112d2:	701a      	strb	r2, [r3, #0]
              BuffLength = 1;  
 80112d4:	4b30      	ldr	r3, [pc, #192]	@ (8011398 <Vendor_ReadLocalDataCb+0x1ac>)
 80112d6:	2201      	movs	r2, #1
 80112d8:	801a      	strh	r2, [r3, #0]
              
              break;
 80112da:	e00b      	b.n	80112f4 <Vendor_ReadLocalDataCb+0x108>
            {
              /* 
              Message Received with Command APPLI_DATA_CNTRL_CMD
              Call the Data Read Callback to fill Response Buffer with local data
              */ 
              status =  VendorAppli_cb.DataControlCommand_cb(data, length);
 80112dc:	4b2c      	ldr	r3, [pc, #176]	@ (8011390 <Vendor_ReadLocalDataCb+0x1a4>)
 80112de:	695b      	ldr	r3, [r3, #20]
 80112e0:	6839      	ldr	r1, [r7, #0]
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	4798      	blx	r3
 80112e6:	4603      	mov	r3, r0
 80112e8:	75fb      	strb	r3, [r7, #23]
              break;       
 80112ea:	e003      	b.n	80112f4 <Vendor_ReadLocalDataCb+0x108>
            }  
            
          default:
            {
              status = MOBLE_RESULT_INVALIDARG;
 80112ec:	2303      	movs	r3, #3
 80112ee:	75fb      	strb	r3, [r7, #23]
              break;
 80112f0:	e000      	b.n	80112f4 <Vendor_ReadLocalDataCb+0x108>
              break;
 80112f2:	bf00      	nop
          }
  
        /* this expression is used to send the status of data received whether it
        is correct or not , First 3 bits are for status and last 5 bit are for sub commands
        */
        ResponseBuffer[0] = ResponseBuffer[0] | (status << 5);
 80112f4:	4b27      	ldr	r3, [pc, #156]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	b25a      	sxtb	r2, r3
 80112fa:	7dfb      	ldrb	r3, [r7, #23]
 80112fc:	015b      	lsls	r3, r3, #5
 80112fe:	b25b      	sxtb	r3, r3
 8011300:	4313      	orrs	r3, r2
 8011302:	b25b      	sxtb	r3, r3
 8011304:	b2da      	uxtb	r2, r3
 8011306:	4b23      	ldr	r3, [pc, #140]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 8011308:	701a      	strb	r2, [r3, #0]
        /* Check if the command executed successfully or not */ 
        
        if (MOBLE_RESULT_SUCCESS == status)
 801130a:	7dfb      	ldrb	r3, [r7, #23]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d11b      	bne.n	8011348 <Vendor_ReadLocalDataCb+0x15c>
          Read Command will always be reliable      
          Message Response     B0     B1    B2      B3    B4    B5    B6     B7 
          B0 - Sub-Cmd for which response is needed
          B1-B7 - Data Bytes if any 
          */
         if (ADDRESS_IS_UNICAST(pmsgParams->dst_peer))
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	88db      	ldrh	r3, [r3, #6]
 8011314:	b21b      	sxth	r3, r3
 8011316:	2b00      	cmp	r3, #0
 8011318:	dd0e      	ble.n	8011338 <Vendor_ReadLocalDataCb+0x14c>
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	88db      	ldrh	r3, [r3, #6]
 801131e:	b21b      	sxth	r3, r3
 8011320:	2b00      	cmp	r3, #0
 8011322:	db09      	blt.n	8011338 <Vendor_ReadLocalDataCb+0x14c>
          {
            VendorModel_SendResponse(VENDOR_STMICRO_CID, pmsgParams, command, ResponseBuffer, BuffLength);
 8011324:	4b1c      	ldr	r3, [pc, #112]	@ (8011398 <Vendor_ReadLocalDataCb+0x1ac>)
 8011326:	881b      	ldrh	r3, [r3, #0]
 8011328:	7afa      	ldrb	r2, [r7, #11]
 801132a:	9300      	str	r3, [sp, #0]
 801132c:	4b19      	ldr	r3, [pc, #100]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 801132e:	68f9      	ldr	r1, [r7, #12]
 8011330:	2030      	movs	r0, #48	@ 0x30
 8011332:	f011 fc77 	bl	8022c24 <VendorModel_SendResponse>
 8011336:	e020      	b.n	801137a <Vendor_ReadLocalDataCb+0x18e>
          }
          else
          {
            /* Randomize responses*/
            BLEMesh_ModelsDelayPacket(pmsgParams, command, ResponseBuffer, BuffLength);
 8011338:	4b17      	ldr	r3, [pc, #92]	@ (8011398 <Vendor_ReadLocalDataCb+0x1ac>)
 801133a:	881b      	ldrh	r3, [r3, #0]
 801133c:	7af9      	ldrb	r1, [r7, #11]
 801133e:	4a15      	ldr	r2, [pc, #84]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 8011340:	68f8      	ldr	r0, [r7, #12]
 8011342:	f7f4 fce9 	bl	8005d18 <BLEMesh_ModelsDelayPacket>
 8011346:	e018      	b.n	801137a <Vendor_ReadLocalDataCb+0x18e>
          }
        }
        /* Command not successfully processed */
        else
        {
          if (ADDRESS_IS_UNICAST(pmsgParams->dst_peer))
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	88db      	ldrh	r3, [r3, #6]
 801134c:	b21b      	sxth	r3, r3
 801134e:	2b00      	cmp	r3, #0
 8011350:	dd0d      	ble.n	801136e <Vendor_ReadLocalDataCb+0x182>
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	88db      	ldrh	r3, [r3, #6]
 8011356:	b21b      	sxth	r3, r3
 8011358:	2b00      	cmp	r3, #0
 801135a:	db08      	blt.n	801136e <Vendor_ReadLocalDataCb+0x182>
          {
            VendorModel_SendResponse(VENDOR_STMICRO_CID, pmsgParams, command, ResponseBuffer, 1);
 801135c:	7afa      	ldrb	r2, [r7, #11]
 801135e:	2301      	movs	r3, #1
 8011360:	9300      	str	r3, [sp, #0]
 8011362:	4b0c      	ldr	r3, [pc, #48]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 8011364:	68f9      	ldr	r1, [r7, #12]
 8011366:	2030      	movs	r0, #48	@ 0x30
 8011368:	f011 fc5c 	bl	8022c24 <VendorModel_SendResponse>
 801136c:	e005      	b.n	801137a <Vendor_ReadLocalDataCb+0x18e>
          }
          else
          {
            /* Randomize responses*/
            BLEMesh_ModelsDelayPacket(pmsgParams, command, ResponseBuffer, 1);
 801136e:	7af9      	ldrb	r1, [r7, #11]
 8011370:	2301      	movs	r3, #1
 8011372:	4a08      	ldr	r2, [pc, #32]	@ (8011394 <Vendor_ReadLocalDataCb+0x1a8>)
 8011374:	68f8      	ldr	r0, [r7, #12]
 8011376:	f7f4 fccf 	bl	8005d18 <BLEMesh_ModelsDelayPacket>
          }
        }
        
        if (status == MOBLE_RESULT_SUCCESS)
 801137a:	7dfb      	ldrb	r3, [r7, #23]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d101      	bne.n	8011384 <Vendor_ReadLocalDataCb+0x198>
        {
          return MOBLE_RESULT_SUCCESS;  
 8011380:	2300      	movs	r3, #0
 8011382:	e000      	b.n	8011386 <Vendor_ReadLocalDataCb+0x19a>
        }
        else
        {
          return MOBLE_RESULT_FAIL;
 8011384:	2302      	movs	r3, #2
        }
}
 8011386:	4618      	mov	r0, r3
 8011388:	3718      	adds	r7, #24
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}
 801138e:	bf00      	nop
 8011390:	0802dfa0 	.word	0x0802dfa0
 8011394:	200045bc 	.word	0x200045bc
 8011398:	200045f8 	.word	0x200045f8
 801139c:	0802e490 	.word	0x0802e490
 80113a0:	0802ca7c 	.word	0x0802ca7c
 80113a4:	20004594 	.word	0x20004594

080113a8 <Vendor_OnResponseDataCb>:
MOBLE_RESULT Vendor_OnResponseDataCb(MODEL_MessageHeader_t *pmsgParam,  
                                     MOBLEUINT8 command, 
                                     MOBLEUINT8 const *pRxData, 
                                     MOBLEUINT32 dataLength, 
                                     MOBLEBOOL response)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b088      	sub	sp, #32
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	60f8      	str	r0, [r7, #12]
 80113b0:	607a      	str	r2, [r7, #4]
 80113b2:	603b      	str	r3, [r7, #0]
 80113b4:	460b      	mov	r3, r1
 80113b6:	72fb      	strb	r3, [r7, #11]
   MOBLEUINT32 timeStampRcv;
   MOBLEUINT8 subCmd = pRxData[0];
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	781b      	ldrb	r3, [r3, #0]
 80113bc:	773b      	strb	r3, [r7, #28]
   MOBLEUINT16 hitcmdcount = 0;
 80113be:	2300      	movs	r3, #0
 80113c0:	837b      	strh	r3, [r7, #26]
   MOBLEUINT8 increment = 1;
 80113c2:	2301      	movs	r3, #1
 80113c4:	77fb      	strb	r3, [r7, #31]
          command, 
          response);
  TRACE_I(TF_VENDOR_M,"DATA_RECEIVED length = %ld\n\r", dataLength);
  TRACE_M(TF_VENDOR_M,"#%02hx-%02hx! \n\r",command,pRxData[0]);
  
  switch(command)
 80113c6:	7afb      	ldrb	r3, [r7, #11]
 80113c8:	3b01      	subs	r3, #1
 80113ca:	2b0d      	cmp	r3, #13
 80113cc:	d87f      	bhi.n	80114ce <Vendor_OnResponseDataCb+0x126>
 80113ce:	a201      	add	r2, pc, #4	@ (adr r2, 80113d4 <Vendor_OnResponseDataCb+0x2c>)
 80113d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113d4:	0801140d 	.word	0x0801140d
 80113d8:	0801147d 	.word	0x0801147d
 80113dc:	080114cf 	.word	0x080114cf
 80113e0:	080114cf 	.word	0x080114cf
 80113e4:	080114cf 	.word	0x080114cf
 80113e8:	080114cf 	.word	0x080114cf
 80113ec:	080114cf 	.word	0x080114cf
 80113f0:	080114cf 	.word	0x080114cf
 80113f4:	080114cf 	.word	0x080114cf
 80113f8:	080114cf 	.word	0x080114cf
 80113fc:	080114cf 	.word	0x080114cf
 8011400:	080114cf 	.word	0x080114cf
 8011404:	080114cf 	.word	0x080114cf
 8011408:	080114b9 	.word	0x080114b9
  {
    case APPLI_TEST_CMD:
      {
         switch(subCmd)
 801140c:	7f3b      	ldrb	r3, [r7, #28]
 801140e:	3b02      	subs	r3, #2
 8011410:	2b04      	cmp	r3, #4
 8011412:	d831      	bhi.n	8011478 <Vendor_OnResponseDataCb+0xd0>
 8011414:	a201      	add	r2, pc, #4	@ (adr r2, 801141c <Vendor_OnResponseDataCb+0x74>)
 8011416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801141a:	bf00      	nop
 801141c:	08011431 	.word	0x08011431
 8011420:	08011479 	.word	0x08011479
 8011424:	08011447 	.word	0x08011447
 8011428:	08011455 	.word	0x08011455
 801142c:	08011479 	.word	0x08011479
             case APPLI_TEST_ECHO: 
               { 
                 /* this case is responsible for printing of the received back data byte from 
                    receiver node.
                 */       
                 for(idx =1;idx<dataLength;idx++)
 8011430:	2301      	movs	r3, #1
 8011432:	77bb      	strb	r3, [r7, #30]
 8011434:	e002      	b.n	801143c <Vendor_OnResponseDataCb+0x94>
 8011436:	7fbb      	ldrb	r3, [r7, #30]
 8011438:	3301      	adds	r3, #1
 801143a:	77bb      	strb	r3, [r7, #30]
 801143c:	7fbb      	ldrb	r3, [r7, #30]
 801143e:	683a      	ldr	r2, [r7, #0]
 8011440:	429a      	cmp	r2, r3
 8011442:	d8f8      	bhi.n	8011436 <Vendor_OnResponseDataCb+0x8e>
                 {
                   TRACE_I(TF_VENDOR_M,"Response data %d\n\r", pRxData[idx]);
                 }
                 break;
 8011444:	e019      	b.n	801147a <Vendor_OnResponseDataCb+0xd2>
             case APPLI_TEST_COUNTER:
               { 
         /* this case is responsible for the printing the time stamp when the response 
            is received by the sender node.
         */
                 timeStampRcv = Clock_Time();
 8011446:	f7f5 fb6d 	bl	8006b24 <HAL_GetTick>
 801144a:	6178      	str	r0, [r7, #20]

                 Packet_ResponseTimeStamp(timeStampRcv);
 801144c:	6978      	ldr	r0, [r7, #20]
 801144e:	f000 f8d2 	bl	80115f6 <Packet_ResponseTimeStamp>
                  
                 /*Insert Test related Commands here*/
                 break;
 8011452:	e012      	b.n	801147a <Vendor_OnResponseDataCb+0xd2>
             case APPLI_TEST_INC_COUNTER: 
               { 
           /* This case is responsible for the printing of the number count of command 
              received by receiver.
           */     
                 hitcmdcount = (MOBLEUINT32)(pRxData[4] << 24);
 8011454:	2300      	movs	r3, #0
 8011456:	837b      	strh	r3, [r7, #26]
                 hitcmdcount |=(MOBLEUINT32)( pRxData[3] << 16);
                 hitcmdcount |=(MOBLEUINT32)( pRxData[2] << 8);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	3302      	adds	r3, #2
 801145c:	781b      	ldrb	r3, [r3, #0]
 801145e:	021b      	lsls	r3, r3, #8
 8011460:	b29a      	uxth	r2, r3
 8011462:	8b7b      	ldrh	r3, [r7, #26]
 8011464:	4313      	orrs	r3, r2
 8011466:	837b      	strh	r3, [r7, #26]
                 hitcmdcount |=(MOBLEUINT32)( pRxData[1]);                
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	3301      	adds	r3, #1
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	461a      	mov	r2, r3
 8011470:	8b7b      	ldrh	r3, [r7, #26]
 8011472:	4313      	orrs	r3, r2
 8011474:	837b      	strh	r3, [r7, #26]
                 TRACE_I(TF_VENDOR_M,"NUMBER OF COMMANDS RECEIVED %d \r\n",hitcmdcount);
                 /*Insert Test related Commands here*/
                 break;
 8011476:	e000      	b.n	801147a <Vendor_OnResponseDataCb+0xd2>
                  
                 break;
               }
             default:
               {              
                  break;
 8011478:	bf00      	nop
               }
         }
         break;
 801147a:	e02b      	b.n	80114d4 <Vendor_OnResponseDataCb+0x12c>
      TRACE_I(TF_VENDOR_M,"Led State %d \r\n",pRxData[0]);
      break;
    }
   case APPLI_DEVICE_INFO_CMD:
     {
      switch(subCmd)
 801147c:	7f3b      	ldrb	r3, [r7, #28]
 801147e:	2b03      	cmp	r3, #3
 8011480:	d012      	beq.n	80114a8 <Vendor_OnResponseDataCb+0x100>
 8011482:	2b03      	cmp	r3, #3
 8011484:	dc25      	bgt.n	80114d2 <Vendor_OnResponseDataCb+0x12a>
 8011486:	2b01      	cmp	r3, #1
 8011488:	d014      	beq.n	80114b4 <Vendor_OnResponseDataCb+0x10c>
 801148a:	2b02      	cmp	r3, #2
 801148c:	d121      	bne.n	80114d2 <Vendor_OnResponseDataCb+0x12a>
                 TRACE_I(TF_VENDOR_M,"IC type is %s \r\n" ,Board_Type[pRxData[1]-1]); 
                 break;
               }
         case LIB_VER:
           {
             while(increment!=8)
 801148e:	e002      	b.n	8011496 <Vendor_OnResponseDataCb+0xee>
             {
               TRACE_I(TF_VENDOR_M,"Lib Version is %d \r\n",pRxData[increment]);
               increment++;
 8011490:	7ffb      	ldrb	r3, [r7, #31]
 8011492:	3301      	adds	r3, #1
 8011494:	77fb      	strb	r3, [r7, #31]
             while(increment!=8)
 8011496:	7ffb      	ldrb	r3, [r7, #31]
 8011498:	2b08      	cmp	r3, #8
 801149a:	d1f9      	bne.n	8011490 <Vendor_OnResponseDataCb+0xe8>
             }
             increment=1;
 801149c:	2301      	movs	r3, #1
 801149e:	77fb      	strb	r3, [r7, #31]
             break;
 80114a0:	e009      	b.n	80114b6 <Vendor_OnResponseDataCb+0x10e>
                 }
                 else
                 {
                   TRACE_I(TF_VENDOR_M,"Lib Sub Version is %c \r\n",pRxData[increment]);
                 }
                  increment++;
 80114a2:	7ffb      	ldrb	r3, [r7, #31]
 80114a4:	3301      	adds	r3, #1
 80114a6:	77fb      	strb	r3, [r7, #31]
               while(increment!=7)
 80114a8:	7ffb      	ldrb	r3, [r7, #31]
 80114aa:	2b07      	cmp	r3, #7
 80114ac:	d1f9      	bne.n	80114a2 <Vendor_OnResponseDataCb+0xfa>
               }
             increment=1;
 80114ae:	2301      	movs	r3, #1
 80114b0:	77fb      	strb	r3, [r7, #31]
             break;   
 80114b2:	e000      	b.n	80114b6 <Vendor_OnResponseDataCb+0x10e>
                 break;
 80114b4:	bf00      	nop
             }
         }
      break;
 80114b6:	e00c      	b.n	80114d2 <Vendor_OnResponseDataCb+0x12a>
     }
    case APPLI_DATA_CNTRL_CMD:  
      {
        /** Displays data received **/
        for (MOBLEUINT8 idx=0; idx<dataLength; idx++)
 80114b8:	2300      	movs	r3, #0
 80114ba:	777b      	strb	r3, [r7, #29]
 80114bc:	e002      	b.n	80114c4 <Vendor_OnResponseDataCb+0x11c>
 80114be:	7f7b      	ldrb	r3, [r7, #29]
 80114c0:	3301      	adds	r3, #1
 80114c2:	777b      	strb	r3, [r7, #29]
 80114c4:	7f7b      	ldrb	r3, [r7, #29]
 80114c6:	683a      	ldr	r2, [r7, #0]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d8f8      	bhi.n	80114be <Vendor_OnResponseDataCb+0x116>
        {
          TRACE_I(TF_VENDOR_M,"data[%d]= 0x%x",idx,pRxData[idx]); 
          TRACE_I(TF_VENDOR_M,"\n\r");
        }
        break;
 80114cc:	e002      	b.n	80114d4 <Vendor_OnResponseDataCb+0x12c>
      }
       default:
    {              
        break;
 80114ce:	bf00      	nop
 80114d0:	e000      	b.n	80114d4 <Vendor_OnResponseDataCb+0x12c>
      break;
 80114d2:	bf00      	nop
    }
      
  }   
      
         return MOBLE_RESULT_SUCCESS;
 80114d4:	2300      	movs	r3, #0
} 
 80114d6:	4618      	mov	r0, r3
 80114d8:	3720      	adds	r7, #32
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}
 80114de:	bf00      	nop

080114e0 <Vendor_Process>:
* @brief  State machine for Vendor Model
* @param  void
* @retval void
*/ 
void Vendor_Process(void)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	af00      	add	r7, sp, #0
  BLEMesh_ModelsSendDelayedPacket();
 80114e4:	f7f4 fcda 	bl	8005e9c <BLEMesh_ModelsSendDelayedPacket>
  
  if (Vendor_SendDataFreqState == 0xFF)
 80114e8:	4b03      	ldr	r3, [pc, #12]	@ (80114f8 <Vendor_Process+0x18>)
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	2bff      	cmp	r3, #255	@ 0xff
 80114ee:	d101      	bne.n	80114f4 <Vendor_Process+0x14>
  {
    Appli_Vendor_SendBigDataPacket();
 80114f0:	f7f4 fb9e 	bl	8005c30 <Appli_Vendor_SendBigDataPacket>
  }
}
 80114f4:	bf00      	nop
 80114f6:	bd80      	pop	{r7, pc}
 80114f8:	20006f7a 	.word	0x20006f7a

080114fc <Vendor_SendDataFreq>:
* @brief  Set the state of the Vendor Data frequency
* @param  State: New state of sending vendor packet frequency 
* @retval void
*/          
void Vendor_SendDataFreq(MOBLEUINT8 freq)
{
 80114fc:	b480      	push	{r7}
 80114fe:	b083      	sub	sp, #12
 8011500:	af00      	add	r7, sp, #0
 8011502:	4603      	mov	r3, r0
 8011504:	71fb      	strb	r3, [r7, #7]
    /* Data to be sent continuously with out any time gap */ 
    if ((freq == 0xFF) || (freq == 0x00))
 8011506:	79fb      	ldrb	r3, [r7, #7]
 8011508:	2bff      	cmp	r3, #255	@ 0xff
 801150a:	d002      	beq.n	8011512 <Vendor_SendDataFreq+0x16>
 801150c:	79fb      	ldrb	r3, [r7, #7]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d102      	bne.n	8011518 <Vendor_SendDataFreq+0x1c>
    {
        Vendor_SendDataFreqState = freq;
 8011512:	4a04      	ldr	r2, [pc, #16]	@ (8011524 <Vendor_SendDataFreq+0x28>)
 8011514:	79fb      	ldrb	r3, [r7, #7]
 8011516:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        TRACE_I(TF_VENDOR_M, "Invalid Data send Freq parameter \r\n");
    }
}
 8011518:	bf00      	nop
 801151a:	370c      	adds	r7, #12
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr
 8011524:	20006f7a 	.word	0x20006f7a

08011528 <VendorModel_PID1_GetOpcodeTableCb>:
* @param  length: Pointer to the Length of Generic Model opcode array
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT VendorModel_PID1_GetOpcodeTableCb(const MODEL_OpcodeTableParam_t **data, 
                                                 MOBLEUINT16 *length)
{ 
 8011528:	b480      	push	{r7}
 801152a:	b083      	sub	sp, #12
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
 8011530:	6039      	str	r1, [r7, #0]
  return MOBLE_RESULT_SUCCESS;
 8011532:	2300      	movs	r3, #0
}
 8011534:	4618      	mov	r0, r3
 8011536:	370c      	adds	r7, #12
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr

08011540 <VendorModel_PID1_GetStatusRequestCb>:
                                    MOBLEUINT32 *plength, 
                                    MOBLEUINT8 const *pRxData,
                                    MOBLEUINT32 dataLength,
                                    MOBLEBOOL response)

{
 8011540:	b480      	push	{r7}
 8011542:	b085      	sub	sp, #20
 8011544:	af00      	add	r7, sp, #0
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	607a      	str	r2, [r7, #4]
 801154a:	603b      	str	r3, [r7, #0]
 801154c:	460b      	mov	r3, r1
 801154e:	817b      	strh	r3, [r7, #10]
  return MOBLE_RESULT_SUCCESS;    
 8011550:	2300      	movs	r3, #0
}
 8011552:	4618      	mov	r0, r3
 8011554:	3714      	adds	r7, #20
 8011556:	46bd      	mov	sp, r7
 8011558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155c:	4770      	bx	lr

0801155e <VendorModel_PID1_ProcessMessageCb>:
                                                 MOBLEUINT16 opcode, 
                                                 MOBLEUINT8 const *pRxData, 
                                                 MOBLEUINT32 dataLength, 
                                                 MOBLEBOOL response
                                                   )
{
 801155e:	b580      	push	{r7, lr}
 8011560:	b088      	sub	sp, #32
 8011562:	af02      	add	r7, sp, #8
 8011564:	60f8      	str	r0, [r7, #12]
 8011566:	607a      	str	r2, [r7, #4]
 8011568:	603b      	str	r3, [r7, #0]
 801156a:	460b      	mov	r3, r1
 801156c:	817b      	strh	r3, [r7, #10]
  
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 801156e:	2300      	movs	r3, #0
 8011570:	75fb      	strb	r3, [r7, #23]

            #define VENDOR_CMD_RESPONSE                          0x20
            #define VENDOR_CMD_READ_nWRITE                       0x10
  */
  
  command = (MOBLEUINT8) (opcode & 0x0F);
 8011572:	897b      	ldrh	r3, [r7, #10]
 8011574:	b2db      	uxtb	r3, r3
 8011576:	f003 030f 	and.w	r3, r3, #15
 801157a:	757b      	strb	r3, [r7, #21]
  if (opcode & VENDOR_CMD_RESPONSE)
 801157c:	897b      	ldrh	r3, [r7, #10]
 801157e:	f003 0320 	and.w	r3, r3, #32
 8011582:	2b00      	cmp	r3, #0
 8011584:	d002      	beq.n	801158c <VendorModel_PID1_ProcessMessageCb+0x2e>
  {
    cmd_response = MOBLE_TRUE;
 8011586:	2301      	movs	r3, #1
 8011588:	75bb      	strb	r3, [r7, #22]
 801158a:	e001      	b.n	8011590 <VendorModel_PID1_ProcessMessageCb+0x32>
  }
  else
  {
    cmd_response = MOBLE_FALSE;
 801158c:	2300      	movs	r3, #0
 801158e:	75bb      	strb	r3, [r7, #22]
  }
  
    /* Parse the command */
    if( (cmd_response == MOBLE_FALSE) && (opcode & VENDOR_CMD_READ_nWRITE))
 8011590:	7dbb      	ldrb	r3, [r7, #22]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d10d      	bne.n	80115b2 <VendorModel_PID1_ProcessMessageCb+0x54>
 8011596:	897b      	ldrh	r3, [r7, #10]
 8011598:	f003 0310 	and.w	r3, r3, #16
 801159c:	2b00      	cmp	r3, #0
 801159e:	d008      	beq.n	80115b2 <VendorModel_PID1_ProcessMessageCb+0x54>
    { /* Response Packet is received */
       TRACE_I(TF_VENDOR_M,"Response received from remote node \n\r");

       Vendor_OnResponseDataCb(pmsgParams, command, pRxData, dataLength, MOBLE_FALSE);
 80115a0:	7d79      	ldrb	r1, [r7, #21]
 80115a2:	2300      	movs	r3, #0
 80115a4:	9300      	str	r3, [sp, #0]
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	687a      	ldr	r2, [r7, #4]
 80115aa:	68f8      	ldr	r0, [r7, #12]
 80115ac:	f7ff fefc 	bl	80113a8 <Vendor_OnResponseDataCb>
 80115b0:	e01c      	b.n	80115ec <VendorModel_PID1_ProcessMessageCb+0x8e>
    }
    else if ( (cmd_response == MOBLE_TRUE) && (opcode & VENDOR_CMD_READ_nWRITE))
 80115b2:	7dbb      	ldrb	r3, [r7, #22]
 80115b4:	2b01      	cmp	r3, #1
 80115b6:	d10f      	bne.n	80115d8 <VendorModel_PID1_ProcessMessageCb+0x7a>
 80115b8:	897b      	ldrh	r3, [r7, #10]
 80115ba:	f003 0310 	and.w	r3, r3, #16
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d00a      	beq.n	80115d8 <VendorModel_PID1_ProcessMessageCb+0x7a>
    { /* Read Packet is received */
       TRACE_M(TF_VENDOR_M,"Read Command received   \n\r");
       result = Vendor_ReadLocalDataCb(pmsgParams, command, pRxData, dataLength, MOBLE_TRUE);
 80115c2:	7d79      	ldrb	r1, [r7, #21]
 80115c4:	2301      	movs	r3, #1
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	687a      	ldr	r2, [r7, #4]
 80115cc:	68f8      	ldr	r0, [r7, #12]
 80115ce:	f7ff fe0d 	bl	80111ec <Vendor_ReadLocalDataCb>
 80115d2:	4603      	mov	r3, r0
 80115d4:	75fb      	strb	r3, [r7, #23]
 80115d6:	e009      	b.n	80115ec <VendorModel_PID1_ProcessMessageCb+0x8e>
    }
    else 
    {  /* Write Commands with or without response received */
       TRACE_M(TF_VENDOR_M,"Command Write received, process the command\n\r");
       result = Vendor_WriteLocalDataCb(pmsgParams, command, pRxData, dataLength, cmd_response );
 80115d8:	7d79      	ldrb	r1, [r7, #21]
 80115da:	7dbb      	ldrb	r3, [r7, #22]
 80115dc:	9300      	str	r3, [sp, #0]
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	f7ff fd7a 	bl	80110dc <Vendor_WriteLocalDataCb>
 80115e8:	4603      	mov	r3, r0
 80115ea:	75fb      	strb	r3, [r7, #23]
    }

return result;
 80115ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3718      	adds	r7, #24
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}

080115f6 <Packet_ResponseTimeStamp>:
    
__weak MOBLE_RESULT Packet_ResponseTimeStamp(MOBLEUINT32 rcvTimeStamp)
{
 80115f6:	b480      	push	{r7}
 80115f8:	b083      	sub	sp, #12
 80115fa:	af00      	add	r7, sp, #0
 80115fc:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_SUCCESS;
 80115fe:	2300      	movs	r3, #0
}
 8011600:	4618      	mov	r0, r3
 8011602:	370c      	adds	r7, #12
 8011604:	46bd      	mov	sp, r7
 8011606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160a:	4770      	bx	lr

0801160c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b088      	sub	sp, #32
 8011610:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8011612:	2300      	movs	r3, #0
 8011614:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011616:	f107 0308 	add.w	r3, r7, #8
 801161a:	2218      	movs	r2, #24
 801161c:	2100      	movs	r1, #0
 801161e:	4618      	mov	r0, r3
 8011620:	f001 fbc6 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011624:	233f      	movs	r3, #63	@ 0x3f
 8011626:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8011628:	2381      	movs	r3, #129	@ 0x81
 801162a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801162c:	1dfb      	adds	r3, r7, #7
 801162e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8011630:	2301      	movs	r3, #1
 8011632:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011634:	f107 0308 	add.w	r3, r7, #8
 8011638:	2100      	movs	r1, #0
 801163a:	4618      	mov	r0, r3
 801163c:	f001 fd3c 	bl	80130b8 <hci_send_req>
 8011640:	4603      	mov	r3, r0
 8011642:	2b00      	cmp	r3, #0
 8011644:	da01      	bge.n	801164a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8011646:	23ff      	movs	r3, #255	@ 0xff
 8011648:	e000      	b.n	801164c <aci_gap_set_non_discoverable+0x40>
  return status;
 801164a:	79fb      	ldrb	r3, [r7, #7]
}
 801164c:	4618      	mov	r0, r3
 801164e:	3720      	adds	r7, #32
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8011654:	b5b0      	push	{r4, r5, r7, lr}
 8011656:	b0ce      	sub	sp, #312	@ 0x138
 8011658:	af00      	add	r7, sp, #0
 801165a:	4605      	mov	r5, r0
 801165c:	460c      	mov	r4, r1
 801165e:	4610      	mov	r0, r2
 8011660:	4619      	mov	r1, r3
 8011662:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011666:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801166a:	462a      	mov	r2, r5
 801166c:	701a      	strb	r2, [r3, #0]
 801166e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011672:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8011676:	4622      	mov	r2, r4
 8011678:	801a      	strh	r2, [r3, #0]
 801167a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801167e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8011682:	4602      	mov	r2, r0
 8011684:	801a      	strh	r2, [r3, #0]
 8011686:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801168a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801168e:	460a      	mov	r2, r1
 8011690:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8011692:	f107 0310 	add.w	r3, r7, #16
 8011696:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 801169a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 801169e:	3308      	adds	r3, #8
 80116a0:	f107 0210 	add.w	r2, r7, #16
 80116a4:	4413      	add	r3, r2
 80116a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80116aa:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80116ae:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80116b2:	4413      	add	r3, r2
 80116b4:	3309      	adds	r3, #9
 80116b6:	f107 0210 	add.w	r2, r7, #16
 80116ba:	4413      	add	r3, r2
 80116bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80116c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80116c4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80116c8:	2200      	movs	r2, #0
 80116ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80116cc:	2300      	movs	r3, #0
 80116ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 80116d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80116d6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80116da:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80116de:	7812      	ldrb	r2, [r2, #0]
 80116e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80116e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80116e6:	3301      	adds	r3, #1
 80116e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80116ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80116f0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80116f4:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80116f8:	8812      	ldrh	r2, [r2, #0]
 80116fa:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80116fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011702:	3302      	adds	r3, #2
 8011704:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8011708:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801170c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011710:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8011714:	8812      	ldrh	r2, [r2, #0]
 8011716:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 801171a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801171e:	3302      	adds	r3, #2
 8011720:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8011724:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011728:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801172c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8011730:	7812      	ldrb	r2, [r2, #0]
 8011732:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8011734:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011738:	3301      	adds	r3, #1
 801173a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 801173e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011742:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8011746:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8011748:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801174c:	3301      	adds	r3, #1
 801174e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8011752:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011756:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 801175a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 801175c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011760:	3301      	adds	r3, #1
 8011762:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8011766:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801176a:	3308      	adds	r3, #8
 801176c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8011770:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8011774:	4618      	mov	r0, r3
 8011776:	f001 fb0b 	bl	8012d90 <Osal_MemCpy>
    index_input += Local_Name_Length;
 801177a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 801177e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8011782:	4413      	add	r3, r2
 8011784:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8011788:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801178c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8011790:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8011792:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011796:	3301      	adds	r3, #1
 8011798:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 801179c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80117a0:	3301      	adds	r3, #1
 80117a2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80117a6:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80117aa:	4618      	mov	r0, r3
 80117ac:	f001 faf0 	bl	8012d90 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80117b0:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80117b4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80117b8:	4413      	add	r3, r2
 80117ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80117be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80117c2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80117c6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80117c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80117cc:	3302      	adds	r3, #2
 80117ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80117d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80117d6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80117da:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80117dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80117e0:	3302      	adds	r3, #2
 80117e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80117e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80117ea:	2218      	movs	r2, #24
 80117ec:	2100      	movs	r1, #0
 80117ee:	4618      	mov	r0, r3
 80117f0:	f001 fade 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80117f4:	233f      	movs	r3, #63	@ 0x3f
 80117f6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80117fa:	2383      	movs	r3, #131	@ 0x83
 80117fc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8011800:	f107 0310 	add.w	r3, r7, #16
 8011804:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8011808:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801180c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8011810:	f107 030f 	add.w	r3, r7, #15
 8011814:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8011818:	2301      	movs	r3, #1
 801181a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801181e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011822:	2100      	movs	r1, #0
 8011824:	4618      	mov	r0, r3
 8011826:	f001 fc47 	bl	80130b8 <hci_send_req>
 801182a:	4603      	mov	r3, r0
 801182c:	2b00      	cmp	r3, #0
 801182e:	da01      	bge.n	8011834 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8011830:	23ff      	movs	r3, #255	@ 0xff
 8011832:	e004      	b.n	801183e <aci_gap_set_discoverable+0x1ea>
  return status;
 8011834:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011838:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801183c:	781b      	ldrb	r3, [r3, #0]
}
 801183e:	4618      	mov	r0, r3
 8011840:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8011844:	46bd      	mov	sp, r7
 8011846:	bdb0      	pop	{r4, r5, r7, pc}

08011848 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8011848:	b590      	push	{r4, r7, lr}
 801184a:	b0cd      	sub	sp, #308	@ 0x134
 801184c:	af00      	add	r7, sp, #0
 801184e:	4604      	mov	r4, r0
 8011850:	4608      	mov	r0, r1
 8011852:	4611      	mov	r1, r2
 8011854:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011858:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 801185c:	6013      	str	r3, [r2, #0]
 801185e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011862:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8011866:	4622      	mov	r2, r4
 8011868:	701a      	strb	r2, [r3, #0]
 801186a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801186e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8011872:	4602      	mov	r2, r0
 8011874:	701a      	strb	r2, [r3, #0]
 8011876:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801187a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801187e:	460a      	mov	r2, r1
 8011880:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8011882:	f107 0310 	add.w	r3, r7, #16
 8011886:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801188a:	f107 0308 	add.w	r3, r7, #8
 801188e:	2207      	movs	r2, #7
 8011890:	2100      	movs	r1, #0
 8011892:	4618      	mov	r0, r3
 8011894:	f001 fa8c 	bl	8012db0 <Osal_MemSet>
  int index_input = 0;
 8011898:	2300      	movs	r3, #0
 801189a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 801189e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80118a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80118a6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80118aa:	7812      	ldrb	r2, [r2, #0]
 80118ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80118ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80118b2:	3301      	adds	r3, #1
 80118b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80118b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80118bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80118c0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80118c4:	7812      	ldrb	r2, [r2, #0]
 80118c6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80118c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80118cc:	3301      	adds	r3, #1
 80118ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80118d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80118d6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80118da:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80118de:	7812      	ldrb	r2, [r2, #0]
 80118e0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80118e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80118e6:	3301      	adds	r3, #1
 80118e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80118ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80118f0:	2218      	movs	r2, #24
 80118f2:	2100      	movs	r1, #0
 80118f4:	4618      	mov	r0, r3
 80118f6:	f001 fa5b 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80118fa:	233f      	movs	r3, #63	@ 0x3f
 80118fc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8011900:	238a      	movs	r3, #138	@ 0x8a
 8011902:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8011906:	f107 0310 	add.w	r3, r7, #16
 801190a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801190e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011912:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8011916:	f107 0308 	add.w	r3, r7, #8
 801191a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 801191e:	2307      	movs	r3, #7
 8011920:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011924:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011928:	2100      	movs	r1, #0
 801192a:	4618      	mov	r0, r3
 801192c:	f001 fbc4 	bl	80130b8 <hci_send_req>
 8011930:	4603      	mov	r3, r0
 8011932:	2b00      	cmp	r3, #0
 8011934:	da01      	bge.n	801193a <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8011936:	23ff      	movs	r3, #255	@ 0xff
 8011938:	e02e      	b.n	8011998 <aci_gap_init+0x150>
  if ( resp.Status )
 801193a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801193e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d005      	beq.n	8011954 <aci_gap_init+0x10c>
    return resp.Status;
 8011948:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801194c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	e021      	b.n	8011998 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8011954:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011958:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801195c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011960:	b29a      	uxth	r2, r3
 8011962:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011966:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 801196e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011972:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8011976:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 801197a:	b29a      	uxth	r2, r3
 801197c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8011980:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8011982:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011986:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801198a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801198e:	b29a      	uxth	r2, r3
 8011990:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8011994:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8011996:	2300      	movs	r3, #0
}
 8011998:	4618      	mov	r0, r3
 801199a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd90      	pop	{r4, r7, pc}

080119a2 <aci_gap_terminate>:
  return status;
}

tBleStatus aci_gap_terminate( uint16_t Connection_Handle,
                              uint8_t Reason )
{
 80119a2:	b580      	push	{r7, lr}
 80119a4:	b0cc      	sub	sp, #304	@ 0x130
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	4602      	mov	r2, r0
 80119aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80119ae:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80119b2:	801a      	strh	r2, [r3, #0]
 80119b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80119b8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80119bc:	460a      	mov	r2, r1
 80119be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_cp0 *cp0 = (aci_gap_terminate_cp0*)(cmd_buffer);
 80119c0:	f107 0310 	add.w	r3, r7, #16
 80119c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80119c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80119cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80119d0:	2200      	movs	r2, #0
 80119d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80119d4:	2300      	movs	r3, #0
 80119d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80119da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80119de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80119e2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80119e6:	8812      	ldrh	r2, [r2, #0]
 80119e8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80119ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80119ee:	3302      	adds	r3, #2
 80119f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Reason = Reason;
 80119f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80119f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80119fc:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8011a00:	7812      	ldrb	r2, [r2, #0]
 8011a02:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8011a04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011a08:	3301      	adds	r3, #1
 8011a0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011a0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011a12:	2218      	movs	r2, #24
 8011a14:	2100      	movs	r1, #0
 8011a16:	4618      	mov	r0, r3
 8011a18:	f001 f9ca 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011a1c:	233f      	movs	r3, #63	@ 0x3f
 8011a1e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x093;
 8011a22:	2393      	movs	r3, #147	@ 0x93
 8011a24:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8011a28:	230f      	movs	r3, #15
 8011a2a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8011a2e:	f107 0310 	add.w	r3, r7, #16
 8011a32:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8011a36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011a3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8011a3e:	f107 030f 	add.w	r3, r7, #15
 8011a42:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8011a46:	2301      	movs	r3, #1
 8011a48:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011a4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011a50:	2100      	movs	r1, #0
 8011a52:	4618      	mov	r0, r3
 8011a54:	f001 fb30 	bl	80130b8 <hci_send_req>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	da01      	bge.n	8011a62 <aci_gap_terminate+0xc0>
    return BLE_STATUS_TIMEOUT;
 8011a5e:	23ff      	movs	r3, #255	@ 0xff
 8011a60:	e004      	b.n	8011a6c <aci_gap_terminate+0xca>
  return status;
 8011a62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011a66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011a6a:	781b      	ldrb	r3, [r3, #0]
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}

08011a76 <aci_gap_terminate_gap_proc>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_terminate_gap_proc( uint8_t Procedure_Code )
{
 8011a76:	b580      	push	{r7, lr}
 8011a78:	b0cc      	sub	sp, #304	@ 0x130
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	4602      	mov	r2, r0
 8011a7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011a82:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8011a86:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 8011a88:	f107 0310 	add.w	r3, r7, #16
 8011a8c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8011a90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011a94:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011a98:	2200      	movs	r2, #0
 8011a9a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Procedure_Code = Procedure_Code;
 8011aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011aa6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011aaa:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8011aae:	7812      	ldrb	r2, [r2, #0]
 8011ab0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011ab2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011abc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011ac0:	2218      	movs	r2, #24
 8011ac2:	2100      	movs	r1, #0
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f001 f973 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011aca:	233f      	movs	r3, #63	@ 0x3f
 8011acc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x09d;
 8011ad0:	239d      	movs	r3, #157	@ 0x9d
 8011ad2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8011ad6:	f107 0310 	add.w	r3, r7, #16
 8011ada:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8011ade:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011ae2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8011ae6:	f107 030f 	add.w	r3, r7, #15
 8011aea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8011aee:	2301      	movs	r3, #1
 8011af0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011af4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011af8:	2100      	movs	r1, #0
 8011afa:	4618      	mov	r0, r3
 8011afc:	f001 fadc 	bl	80130b8 <hci_send_req>
 8011b00:	4603      	mov	r3, r0
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	da01      	bge.n	8011b0a <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 8011b06:	23ff      	movs	r3, #255	@ 0xff
 8011b08:	e004      	b.n	8011b14 <aci_gap_terminate_gap_proc+0x9e>
  return status;
 8011b0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011b0e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011b12:	781b      	ldrb	r3, [r3, #0]
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}

08011b1e <aci_gap_start_observation_proc>:
                                           uint16_t LE_Scan_Window,
                                           uint8_t LE_Scan_Type,
                                           uint8_t Own_Address_Type,
                                           uint8_t Filter_Duplicates,
                                           uint8_t Scanning_Filter_Policy )
{
 8011b1e:	b5b0      	push	{r4, r5, r7, lr}
 8011b20:	b0cc      	sub	sp, #304	@ 0x130
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	4605      	mov	r5, r0
 8011b26:	460c      	mov	r4, r1
 8011b28:	4610      	mov	r0, r2
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011b30:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8011b34:	462a      	mov	r2, r5
 8011b36:	801a      	strh	r2, [r3, #0]
 8011b38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011b3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011b40:	4622      	mov	r2, r4
 8011b42:	801a      	strh	r2, [r3, #0]
 8011b44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011b48:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	701a      	strb	r2, [r3, #0]
 8011b50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011b54:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8011b58:	460a      	mov	r2, r1
 8011b5a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_observation_proc_cp0 *cp0 = (aci_gap_start_observation_proc_cp0*)(cmd_buffer);
 8011b5c:	f107 0310 	add.w	r3, r7, #16
 8011b60:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8011b64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011b68:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011b70:	2300      	movs	r3, #0
 8011b72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 8011b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011b7a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011b7e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8011b82:	8812      	ldrh	r2, [r2, #0]
 8011b84:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8011b86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011b8a:	3302      	adds	r3, #2
 8011b8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 8011b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011b94:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011b98:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8011b9c:	8812      	ldrh	r2, [r2, #0]
 8011b9e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8011ba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011ba4:	3302      	adds	r3, #2
 8011ba6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->LE_Scan_Type = LE_Scan_Type;
 8011baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011bae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011bb2:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8011bb6:	7812      	ldrb	r2, [r2, #0]
 8011bb8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8011bba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8011bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011bc8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011bcc:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8011bd0:	7812      	ldrb	r2, [r2, #0]
 8011bd2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8011bd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011bd8:	3301      	adds	r3, #1
 8011bda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 8011bde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011be2:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8011be6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8011be8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011bec:	3301      	adds	r3, #1
 8011bee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Scanning_Filter_Policy = Scanning_Filter_Policy;
 8011bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011bf6:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8011bfa:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8011bfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011c00:	3301      	adds	r3, #1
 8011c02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011c06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011c0a:	2218      	movs	r2, #24
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f001 f8ce 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011c14:	233f      	movs	r3, #63	@ 0x3f
 8011c16:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a2;
 8011c1a:	23a2      	movs	r3, #162	@ 0xa2
 8011c1c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8011c20:	230f      	movs	r3, #15
 8011c22:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8011c26:	f107 0310 	add.w	r3, r7, #16
 8011c2a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8011c2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011c32:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8011c36:	f107 030f 	add.w	r3, r7, #15
 8011c3a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8011c3e:	2301      	movs	r3, #1
 8011c40:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011c44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011c48:	2100      	movs	r1, #0
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f001 fa34 	bl	80130b8 <hci_send_req>
 8011c50:	4603      	mov	r3, r0
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	da01      	bge.n	8011c5a <aci_gap_start_observation_proc+0x13c>
    return BLE_STATUS_TIMEOUT;
 8011c56:	23ff      	movs	r3, #255	@ 0xff
 8011c58:	e004      	b.n	8011c64 <aci_gap_start_observation_proc+0x146>
  return status;
 8011c5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011c5e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011c62:	781b      	ldrb	r3, [r3, #0]
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bdb0      	pop	{r4, r5, r7, pc}

08011c6e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8011c6e:	b580      	push	{r7, lr}
 8011c70:	b088      	sub	sp, #32
 8011c72:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8011c74:	2300      	movs	r3, #0
 8011c76:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011c78:	f107 0308 	add.w	r3, r7, #8
 8011c7c:	2218      	movs	r2, #24
 8011c7e:	2100      	movs	r1, #0
 8011c80:	4618      	mov	r0, r3
 8011c82:	f001 f895 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011c86:	233f      	movs	r3, #63	@ 0x3f
 8011c88:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8011c8a:	f240 1301 	movw	r3, #257	@ 0x101
 8011c8e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8011c90:	1dfb      	adds	r3, r7, #7
 8011c92:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8011c94:	2301      	movs	r3, #1
 8011c96:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011c98:	f107 0308 	add.w	r3, r7, #8
 8011c9c:	2100      	movs	r1, #0
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f001 fa0a 	bl	80130b8 <hci_send_req>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	da01      	bge.n	8011cae <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8011caa:	23ff      	movs	r3, #255	@ 0xff
 8011cac:	e000      	b.n	8011cb0 <aci_gatt_init+0x42>
  return status;
 8011cae:	79fb      	ldrb	r3, [r7, #7]
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3720      	adds	r7, #32
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}

08011cb8 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8011cb8:	b590      	push	{r4, r7, lr}
 8011cba:	b0cf      	sub	sp, #316	@ 0x13c
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	4604      	mov	r4, r0
 8011cc0:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8011cc4:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8011cc8:	6001      	str	r1, [r0, #0]
 8011cca:	4610      	mov	r0, r2
 8011ccc:	4619      	mov	r1, r3
 8011cce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011cd2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8011cd6:	4622      	mov	r2, r4
 8011cd8:	701a      	strb	r2, [r3, #0]
 8011cda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011cde:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8011ce2:	4602      	mov	r2, r0
 8011ce4:	701a      	strb	r2, [r3, #0]
 8011ce6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011cea:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8011cee:	460a      	mov	r2, r1
 8011cf0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8011cf2:	f107 0310 	add.w	r3, r7, #16
 8011cf6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8011cfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011cfe:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8011d02:	781b      	ldrb	r3, [r3, #0]
 8011d04:	2b01      	cmp	r3, #1
 8011d06:	d00a      	beq.n	8011d1e <aci_gatt_add_service+0x66>
 8011d08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011d0c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	2b02      	cmp	r3, #2
 8011d14:	d101      	bne.n	8011d1a <aci_gatt_add_service+0x62>
 8011d16:	2311      	movs	r3, #17
 8011d18:	e002      	b.n	8011d20 <aci_gatt_add_service+0x68>
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	e000      	b.n	8011d20 <aci_gatt_add_service+0x68>
 8011d1e:	2303      	movs	r3, #3
 8011d20:	f107 0210 	add.w	r2, r7, #16
 8011d24:	4413      	add	r3, r2
 8011d26:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8011d2a:	f107 030c 	add.w	r3, r7, #12
 8011d2e:	2203      	movs	r2, #3
 8011d30:	2100      	movs	r1, #0
 8011d32:	4618      	mov	r0, r3
 8011d34:	f001 f83c 	bl	8012db0 <Osal_MemSet>
  int index_input = 0;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8011d3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011d42:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011d46:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8011d4a:	7812      	ldrb	r2, [r2, #0]
 8011d4c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011d4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011d52:	3301      	adds	r3, #1
 8011d54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8011d58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011d5c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8011d60:	781b      	ldrb	r3, [r3, #0]
 8011d62:	2b01      	cmp	r3, #1
 8011d64:	d002      	beq.n	8011d6c <aci_gatt_add_service+0xb4>
 8011d66:	2b02      	cmp	r3, #2
 8011d68:	d004      	beq.n	8011d74 <aci_gatt_add_service+0xbc>
 8011d6a:	e007      	b.n	8011d7c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8011d6c:	2302      	movs	r3, #2
 8011d6e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8011d72:	e005      	b.n	8011d80 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8011d74:	2310      	movs	r3, #16
 8011d76:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8011d7a:	e001      	b.n	8011d80 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8011d7c:	2397      	movs	r3, #151	@ 0x97
 8011d7e:	e06c      	b.n	8011e5a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8011d80:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011d84:	1c58      	adds	r0, r3, #1
 8011d86:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8011d8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011d8e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011d92:	6819      	ldr	r1, [r3, #0]
 8011d94:	f000 fffc 	bl	8012d90 <Osal_MemCpy>
    index_input += size;
 8011d98:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8011d9c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8011da0:	4413      	add	r3, r2
 8011da2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8011da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011daa:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011dae:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8011db2:	7812      	ldrb	r2, [r2, #0]
 8011db4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8011db6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011dba:	3301      	adds	r3, #1
 8011dbc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8011dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011dc4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8011dc8:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8011dcc:	7812      	ldrb	r2, [r2, #0]
 8011dce:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8011dd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011dd4:	3301      	adds	r3, #1
 8011dd6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011dda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011dde:	2218      	movs	r2, #24
 8011de0:	2100      	movs	r1, #0
 8011de2:	4618      	mov	r0, r3
 8011de4:	f000 ffe4 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011de8:	233f      	movs	r3, #63	@ 0x3f
 8011dea:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8011dee:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8011df2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8011df6:	f107 0310 	add.w	r3, r7, #16
 8011dfa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8011dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011e02:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8011e06:	f107 030c 	add.w	r3, r7, #12
 8011e0a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8011e0e:	2303      	movs	r3, #3
 8011e10:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011e14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011e18:	2100      	movs	r1, #0
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f001 f94c 	bl	80130b8 <hci_send_req>
 8011e20:	4603      	mov	r3, r0
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	da01      	bge.n	8011e2a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8011e26:	23ff      	movs	r3, #255	@ 0xff
 8011e28:	e017      	b.n	8011e5a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8011e2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011e2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d005      	beq.n	8011e44 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8011e38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011e3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	e00a      	b.n	8011e5a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8011e44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8011e48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e4c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011e50:	b29a      	uxth	r2, r3
 8011e52:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8011e56:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8011e58:	2300      	movs	r3, #0
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd90      	pop	{r4, r7, pc}

08011e64 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8011e64:	b590      	push	{r4, r7, lr}
 8011e66:	b0d1      	sub	sp, #324	@ 0x144
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	4608      	mov	r0, r1
 8011e6e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8011e72:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8011e76:	600a      	str	r2, [r1, #0]
 8011e78:	4619      	mov	r1, r3
 8011e7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e7e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8011e82:	4622      	mov	r2, r4
 8011e84:	801a      	strh	r2, [r3, #0]
 8011e86:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e8a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8011e8e:	4602      	mov	r2, r0
 8011e90:	701a      	strb	r2, [r3, #0]
 8011e92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e96:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8011e9a:	460a      	mov	r2, r1
 8011e9c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8011e9e:	f107 0318 	add.w	r3, r7, #24
 8011ea2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8011ea6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011eaa:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	2b01      	cmp	r3, #1
 8011eb2:	d00a      	beq.n	8011eca <aci_gatt_add_char+0x66>
 8011eb4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011eb8:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	2b02      	cmp	r3, #2
 8011ec0:	d101      	bne.n	8011ec6 <aci_gatt_add_char+0x62>
 8011ec2:	2313      	movs	r3, #19
 8011ec4:	e002      	b.n	8011ecc <aci_gatt_add_char+0x68>
 8011ec6:	2303      	movs	r3, #3
 8011ec8:	e000      	b.n	8011ecc <aci_gatt_add_char+0x68>
 8011eca:	2305      	movs	r3, #5
 8011ecc:	f107 0218 	add.w	r2, r7, #24
 8011ed0:	4413      	add	r3, r2
 8011ed2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8011ed6:	f107 0314 	add.w	r3, r7, #20
 8011eda:	2203      	movs	r2, #3
 8011edc:	2100      	movs	r1, #0
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f000 ff66 	bl	8012db0 <Osal_MemSet>
  int index_input = 0;
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8011eea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8011eee:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8011ef2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8011ef6:	8812      	ldrh	r2, [r2, #0]
 8011ef8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8011efa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011efe:	3302      	adds	r3, #2
 8011f00:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8011f04:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8011f08:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8011f0c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8011f10:	7812      	ldrb	r2, [r2, #0]
 8011f12:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8011f14:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011f18:	3301      	adds	r3, #1
 8011f1a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8011f1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011f22:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	2b01      	cmp	r3, #1
 8011f2a:	d002      	beq.n	8011f32 <aci_gatt_add_char+0xce>
 8011f2c:	2b02      	cmp	r3, #2
 8011f2e:	d004      	beq.n	8011f3a <aci_gatt_add_char+0xd6>
 8011f30:	e007      	b.n	8011f42 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8011f32:	2302      	movs	r3, #2
 8011f34:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8011f38:	e005      	b.n	8011f46 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8011f3a:	2310      	movs	r3, #16
 8011f3c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8011f40:	e001      	b.n	8011f46 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8011f42:	2397      	movs	r3, #151	@ 0x97
 8011f44:	e091      	b.n	801206a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8011f46:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8011f4a:	1cd8      	adds	r0, r3, #3
 8011f4c:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8011f50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011f54:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8011f58:	6819      	ldr	r1, [r3, #0]
 8011f5a:	f000 ff19 	bl	8012d90 <Osal_MemCpy>
    index_input += size;
 8011f5e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8011f62:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8011f66:	4413      	add	r3, r2
 8011f68:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8011f6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011f70:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8011f74:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8011f78:	8812      	ldrh	r2, [r2, #0]
 8011f7a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8011f7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011f80:	3302      	adds	r3, #2
 8011f82:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8011f86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011f8a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8011f8e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8011f90:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011f94:	3301      	adds	r3, #1
 8011f96:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8011f9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011f9e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8011fa2:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8011fa4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011fa8:	3301      	adds	r3, #1
 8011faa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8011fae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011fb2:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8011fb6:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8011fb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011fbc:	3301      	adds	r3, #1
 8011fbe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8011fc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011fc6:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8011fca:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8011fcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011fd0:	3301      	adds	r3, #1
 8011fd2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8011fd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8011fda:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8011fde:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8011fe0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8011fe4:	3301      	adds	r3, #1
 8011fe6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011fea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8011fee:	2218      	movs	r2, #24
 8011ff0:	2100      	movs	r1, #0
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f000 fedc 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011ff8:	233f      	movs	r3, #63	@ 0x3f
 8011ffa:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8011ffe:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8012002:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8012006:	f107 0318 	add.w	r3, r7, #24
 801200a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 801200e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012012:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8012016:	f107 0314 	add.w	r3, r7, #20
 801201a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 801201e:	2303      	movs	r3, #3
 8012020:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012024:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8012028:	2100      	movs	r1, #0
 801202a:	4618      	mov	r0, r3
 801202c:	f001 f844 	bl	80130b8 <hci_send_req>
 8012030:	4603      	mov	r3, r0
 8012032:	2b00      	cmp	r3, #0
 8012034:	da01      	bge.n	801203a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8012036:	23ff      	movs	r3, #255	@ 0xff
 8012038:	e017      	b.n	801206a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 801203a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801203e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d005      	beq.n	8012054 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8012048:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801204c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	e00a      	b.n	801206a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8012054:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012058:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801205c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012060:	b29a      	uxth	r2, r3
 8012062:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8012066:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8012068:	2300      	movs	r3, #0
}
 801206a:	4618      	mov	r0, r3
 801206c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8012070:	46bd      	mov	sp, r7
 8012072:	bd90      	pop	{r4, r7, pc}

08012074 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8012074:	b5b0      	push	{r4, r5, r7, lr}
 8012076:	b0cc      	sub	sp, #304	@ 0x130
 8012078:	af00      	add	r7, sp, #0
 801207a:	4605      	mov	r5, r0
 801207c:	460c      	mov	r4, r1
 801207e:	4610      	mov	r0, r2
 8012080:	4619      	mov	r1, r3
 8012082:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012086:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801208a:	462a      	mov	r2, r5
 801208c:	801a      	strh	r2, [r3, #0]
 801208e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012092:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012096:	4622      	mov	r2, r4
 8012098:	801a      	strh	r2, [r3, #0]
 801209a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801209e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80120a2:	4602      	mov	r2, r0
 80120a4:	701a      	strb	r2, [r3, #0]
 80120a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80120aa:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80120ae:	460a      	mov	r2, r1
 80120b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80120b2:	f107 0310 	add.w	r3, r7, #16
 80120b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80120ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80120be:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80120c2:	2200      	movs	r2, #0
 80120c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80120c6:	2300      	movs	r3, #0
 80120c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 80120cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80120d0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80120d4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80120d8:	8812      	ldrh	r2, [r2, #0]
 80120da:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80120dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80120e0:	3302      	adds	r3, #2
 80120e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 80120e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80120ea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80120ee:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80120f2:	8812      	ldrh	r2, [r2, #0]
 80120f4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80120f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80120fa:	3302      	adds	r3, #2
 80120fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8012100:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012104:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012108:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 801210c:	7812      	ldrb	r2, [r2, #0]
 801210e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8012110:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012114:	3301      	adds	r3, #1
 8012116:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 801211a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801211e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012122:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8012126:	7812      	ldrb	r2, [r2, #0]
 8012128:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801212a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801212e:	3301      	adds	r3, #1
 8012130:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8012134:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012138:	1d98      	adds	r0, r3, #6
 801213a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801213e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8012142:	781b      	ldrb	r3, [r3, #0]
 8012144:	461a      	mov	r2, r3
 8012146:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 801214a:	f000 fe21 	bl	8012d90 <Osal_MemCpy>
  index_input += Char_Value_Length;
 801214e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012152:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8012156:	781b      	ldrb	r3, [r3, #0]
 8012158:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801215c:	4413      	add	r3, r2
 801215e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012162:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012166:	2218      	movs	r2, #24
 8012168:	2100      	movs	r1, #0
 801216a:	4618      	mov	r0, r3
 801216c:	f000 fe20 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012170:	233f      	movs	r3, #63	@ 0x3f
 8012172:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8012176:	f44f 7383 	mov.w	r3, #262	@ 0x106
 801217a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801217e:	f107 0310 	add.w	r3, r7, #16
 8012182:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8012186:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801218a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801218e:	f107 030f 	add.w	r3, r7, #15
 8012192:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8012196:	2301      	movs	r3, #1
 8012198:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801219c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80121a0:	2100      	movs	r1, #0
 80121a2:	4618      	mov	r0, r3
 80121a4:	f000 ff88 	bl	80130b8 <hci_send_req>
 80121a8:	4603      	mov	r3, r0
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	da01      	bge.n	80121b2 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80121ae:	23ff      	movs	r3, #255	@ 0xff
 80121b0:	e004      	b.n	80121bc <aci_gatt_update_char_value+0x148>
  return status;
 80121b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80121b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80121ba:	781b      	ldrb	r3, [r3, #0]
}
 80121bc:	4618      	mov	r0, r3
 80121be:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bdb0      	pop	{r4, r5, r7, pc}

080121c6 <aci_gatt_del_char>:

tBleStatus aci_gatt_del_char( uint16_t Serv_Handle,
                              uint16_t Char_Handle )
{
 80121c6:	b580      	push	{r7, lr}
 80121c8:	b0cc      	sub	sp, #304	@ 0x130
 80121ca:	af00      	add	r7, sp, #0
 80121cc:	4602      	mov	r2, r0
 80121ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80121d2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80121d6:	801a      	strh	r2, [r3, #0]
 80121d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80121dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80121e0:	460a      	mov	r2, r1
 80121e2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_del_char_cp0 *cp0 = (aci_gatt_del_char_cp0*)(cmd_buffer);
 80121e4:	f107 0310 	add.w	r3, r7, #16
 80121e8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80121ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80121f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80121f4:	2200      	movs	r2, #0
 80121f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80121f8:	2300      	movs	r3, #0
 80121fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Serv_Handle = Serv_Handle;
 80121fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012202:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012206:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801220a:	8812      	ldrh	r2, [r2, #0]
 801220c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801220e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012212:	3302      	adds	r3, #2
 8012214:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8012218:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801221c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012220:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8012224:	8812      	ldrh	r2, [r2, #0]
 8012226:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8012228:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801222c:	3302      	adds	r3, #2
 801222e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012232:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012236:	2218      	movs	r2, #24
 8012238:	2100      	movs	r1, #0
 801223a:	4618      	mov	r0, r3
 801223c:	f000 fdb8 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012240:	233f      	movs	r3, #63	@ 0x3f
 8012242:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x107;
 8012246:	f240 1307 	movw	r3, #263	@ 0x107
 801224a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801224e:	f107 0310 	add.w	r3, r7, #16
 8012252:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8012256:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801225a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801225e:	f107 030f 	add.w	r3, r7, #15
 8012262:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8012266:	2301      	movs	r3, #1
 8012268:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801226c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012270:	2100      	movs	r1, #0
 8012272:	4618      	mov	r0, r3
 8012274:	f000 ff20 	bl	80130b8 <hci_send_req>
 8012278:	4603      	mov	r3, r0
 801227a:	2b00      	cmp	r3, #0
 801227c:	da01      	bge.n	8012282 <aci_gatt_del_char+0xbc>
    return BLE_STATUS_TIMEOUT;
 801227e:	23ff      	movs	r3, #255	@ 0xff
 8012280:	e004      	b.n	801228c <aci_gatt_del_char+0xc6>
  return status;
 8012282:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012286:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801228a:	781b      	ldrb	r3, [r3, #0]
}
 801228c:	4618      	mov	r0, r3
 801228e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}

08012296 <aci_gatt_del_service>:

tBleStatus aci_gatt_del_service( uint16_t Serv_Handle )
{
 8012296:	b580      	push	{r7, lr}
 8012298:	b0cc      	sub	sp, #304	@ 0x130
 801229a:	af00      	add	r7, sp, #0
 801229c:	4602      	mov	r2, r0
 801229e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80122a2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80122a6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_del_service_cp0 *cp0 = (aci_gatt_del_service_cp0*)(cmd_buffer);
 80122a8:	f107 0310 	add.w	r3, r7, #16
 80122ac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80122b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80122b4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80122b8:	2200      	movs	r2, #0
 80122ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80122bc:	2300      	movs	r3, #0
 80122be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Serv_Handle = Serv_Handle;
 80122c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80122c6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80122ca:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80122ce:	8812      	ldrh	r2, [r2, #0]
 80122d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80122d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80122d6:	3302      	adds	r3, #2
 80122d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80122dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80122e0:	2218      	movs	r2, #24
 80122e2:	2100      	movs	r1, #0
 80122e4:	4618      	mov	r0, r3
 80122e6:	f000 fd63 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80122ea:	233f      	movs	r3, #63	@ 0x3f
 80122ec:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x108;
 80122f0:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80122f4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80122f8:	f107 0310 	add.w	r3, r7, #16
 80122fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8012300:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012304:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8012308:	f107 030f 	add.w	r3, r7, #15
 801230c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8012310:	2301      	movs	r3, #1
 8012312:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012316:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801231a:	2100      	movs	r1, #0
 801231c:	4618      	mov	r0, r3
 801231e:	f000 fecb 	bl	80130b8 <hci_send_req>
 8012322:	4603      	mov	r3, r0
 8012324:	2b00      	cmp	r3, #0
 8012326:	da01      	bge.n	801232c <aci_gatt_del_service+0x96>
    return BLE_STATUS_TIMEOUT;
 8012328:	23ff      	movs	r3, #255	@ 0xff
 801232a:	e004      	b.n	8012336 <aci_gatt_del_service+0xa0>
  return status;
 801232c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012330:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012334:	781b      	ldrb	r3, [r3, #0]
}
 8012336:	4618      	mov	r0, r3
 8012338:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}

08012340 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b0cc      	sub	sp, #304	@ 0x130
 8012344:	af00      	add	r7, sp, #0
 8012346:	4602      	mov	r2, r0
 8012348:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801234c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8012350:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8012352:	f107 0310 	add.w	r3, r7, #16
 8012356:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801235a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801235e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012362:	2200      	movs	r2, #0
 8012364:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8012366:	2300      	movs	r3, #0
 8012368:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801236c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012370:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012374:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8012378:	8812      	ldrh	r2, [r2, #0]
 801237a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801237c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012380:	3302      	adds	r3, #2
 8012382:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012386:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801238a:	2218      	movs	r2, #24
 801238c:	2100      	movs	r1, #0
 801238e:	4618      	mov	r0, r3
 8012390:	f000 fd0e 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012394:	233f      	movs	r3, #63	@ 0x3f
 8012396:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 801239a:	f240 1327 	movw	r3, #295	@ 0x127
 801239e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80123a2:	f107 0310 	add.w	r3, r7, #16
 80123a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80123aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80123ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80123b2:	f107 030f 	add.w	r3, r7, #15
 80123b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80123ba:	2301      	movs	r3, #1
 80123bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80123c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80123c4:	2100      	movs	r1, #0
 80123c6:	4618      	mov	r0, r3
 80123c8:	f000 fe76 	bl	80130b8 <hci_send_req>
 80123cc:	4603      	mov	r3, r0
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	da01      	bge.n	80123d6 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 80123d2:	23ff      	movs	r3, #255	@ 0xff
 80123d4:	e004      	b.n	80123e0 <aci_gatt_allow_read+0xa0>
  return status;
 80123d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80123da:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80123de:	781b      	ldrb	r3, [r3, #0]
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}

080123ea <aci_gatt_update_char_value_ext>:
                                           uint8_t Update_Type,
                                           uint16_t Char_Length,
                                           uint16_t Value_Offset,
                                           uint8_t Value_Length,
                                           const uint8_t* Value )
{
 80123ea:	b5b0      	push	{r4, r5, r7, lr}
 80123ec:	b0cc      	sub	sp, #304	@ 0x130
 80123ee:	af00      	add	r7, sp, #0
 80123f0:	4605      	mov	r5, r0
 80123f2:	460c      	mov	r4, r1
 80123f4:	4610      	mov	r0, r2
 80123f6:	4619      	mov	r1, r3
 80123f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80123fc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8012400:	462a      	mov	r2, r5
 8012402:	801a      	strh	r2, [r3, #0]
 8012404:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012408:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801240c:	4622      	mov	r2, r4
 801240e:	801a      	strh	r2, [r3, #0]
 8012410:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012414:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8012418:	4602      	mov	r2, r0
 801241a:	801a      	strh	r2, [r3, #0]
 801241c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012420:	f2a3 132f 	subw	r3, r3, #303	@ 0x12f
 8012424:	460a      	mov	r2, r1
 8012426:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_ext_cp0 *cp0 = (aci_gatt_update_char_value_ext_cp0*)(cmd_buffer);
 8012428:	f107 0310 	add.w	r3, r7, #16
 801242c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8012430:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012434:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012438:	2200      	movs	r2, #0
 801243a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801243c:	2300      	movs	r3, #0
 801243e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Handle_To_Notify = Conn_Handle_To_Notify;
 8012442:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012446:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801244a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801244e:	8812      	ldrh	r2, [r2, #0]
 8012450:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8012452:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012456:	3302      	adds	r3, #2
 8012458:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 801245c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012460:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012464:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8012468:	8812      	ldrh	r2, [r2, #0]
 801246a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 801246c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012470:	3302      	adds	r3, #2
 8012472:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8012476:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801247a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801247e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8012482:	8812      	ldrh	r2, [r2, #0]
 8012484:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8012486:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801248a:	3302      	adds	r3, #2
 801248c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Update_Type = Update_Type;
 8012490:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012494:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012498:	f2a2 122f 	subw	r2, r2, #303	@ 0x12f
 801249c:	7812      	ldrb	r2, [r2, #0]
 801249e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80124a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80124a4:	3301      	adds	r3, #1
 80124a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Length = Char_Length;
 80124aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80124ae:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 80124b2:	f8a3 2007 	strh.w	r2, [r3, #7]
  index_input += 2;
 80124b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80124ba:	3302      	adds	r3, #2
 80124bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Value_Offset = Value_Offset;
 80124c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80124c4:	f8b7 2144 	ldrh.w	r2, [r7, #324]	@ 0x144
 80124c8:	f8a3 2009 	strh.w	r2, [r3, #9]
  index_input += 2;
 80124cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80124d0:	3302      	adds	r3, #2
 80124d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Value_Length = Value_Length;
 80124d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80124da:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80124de:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80124e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80124e4:	3301      	adds	r3, #1
 80124e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Value_Length );
 80124ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80124ee:	330c      	adds	r3, #12
 80124f0:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80124f4:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 80124f8:	4618      	mov	r0, r3
 80124fa:	f000 fc49 	bl	8012d90 <Osal_MemCpy>
  index_input += Value_Length;
 80124fe:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 8012502:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8012506:	4413      	add	r3, r2
 8012508:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801250c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012510:	2218      	movs	r2, #24
 8012512:	2100      	movs	r1, #0
 8012514:	4618      	mov	r0, r3
 8012516:	f000 fc4b 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 801251a:	233f      	movs	r3, #63	@ 0x3f
 801251c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x12c;
 8012520:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8012524:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8012528:	f107 0310 	add.w	r3, r7, #16
 801252c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8012530:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012534:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8012538:	f107 030f 	add.w	r3, r7, #15
 801253c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8012540:	2301      	movs	r3, #1
 8012542:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012546:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801254a:	2100      	movs	r1, #0
 801254c:	4618      	mov	r0, r3
 801254e:	f000 fdb3 	bl	80130b8 <hci_send_req>
 8012552:	4603      	mov	r3, r0
 8012554:	2b00      	cmp	r3, #0
 8012556:	da01      	bge.n	801255c <aci_gatt_update_char_value_ext+0x172>
    return BLE_STATUS_TIMEOUT;
 8012558:	23ff      	movs	r3, #255	@ 0xff
 801255a:	e004      	b.n	8012566 <aci_gatt_update_char_value_ext+0x17c>
  return status;
 801255c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012560:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012564:	781b      	ldrb	r3, [r3, #0]
}
 8012566:	4618      	mov	r0, r3
 8012568:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801256c:	46bd      	mov	sp, r7
 801256e:	bdb0      	pop	{r4, r5, r7, pc}

08012570 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b0cc      	sub	sp, #304	@ 0x130
 8012574:	af00      	add	r7, sp, #0
 8012576:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801257a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801257e:	601a      	str	r2, [r3, #0]
 8012580:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012584:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8012588:	4602      	mov	r2, r0
 801258a:	701a      	strb	r2, [r3, #0]
 801258c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012590:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8012594:	460a      	mov	r2, r1
 8012596:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8012598:	f107 0310 	add.w	r3, r7, #16
 801259c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80125a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80125a4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80125a8:	2200      	movs	r2, #0
 80125aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80125ac:	2300      	movs	r3, #0
 80125ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 80125b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80125b6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80125ba:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80125be:	7812      	ldrb	r2, [r2, #0]
 80125c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80125c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80125c6:	3301      	adds	r3, #1
 80125c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80125cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80125d0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80125d4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80125d8:	7812      	ldrb	r2, [r2, #0]
 80125da:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80125dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80125e0:	3301      	adds	r3, #1
 80125e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80125e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80125ea:	1c98      	adds	r0, r3, #2
 80125ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80125f0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80125f4:	781a      	ldrb	r2, [r3, #0]
 80125f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80125fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80125fe:	6819      	ldr	r1, [r3, #0]
 8012600:	f000 fbc6 	bl	8012d90 <Osal_MemCpy>
  index_input += Length;
 8012604:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012608:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8012612:	4413      	add	r3, r2
 8012614:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012618:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801261c:	2218      	movs	r2, #24
 801261e:	2100      	movs	r1, #0
 8012620:	4618      	mov	r0, r3
 8012622:	f000 fbc5 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012626:	233f      	movs	r3, #63	@ 0x3f
 8012628:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 801262c:	230c      	movs	r3, #12
 801262e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8012632:	f107 0310 	add.w	r3, r7, #16
 8012636:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801263a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801263e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8012642:	f107 030f 	add.w	r3, r7, #15
 8012646:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801264a:	2301      	movs	r3, #1
 801264c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012650:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012654:	2100      	movs	r1, #0
 8012656:	4618      	mov	r0, r3
 8012658:	f000 fd2e 	bl	80130b8 <hci_send_req>
 801265c:	4603      	mov	r3, r0
 801265e:	2b00      	cmp	r3, #0
 8012660:	da01      	bge.n	8012666 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8012662:	23ff      	movs	r3, #255	@ 0xff
 8012664:	e004      	b.n	8012670 <aci_hal_write_config_data+0x100>
  return status;
 8012666:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801266a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801266e:	781b      	ldrb	r3, [r3, #0]
}
 8012670:	4618      	mov	r0, r3
 8012672:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}

0801267a <aci_hal_read_config_data>:

tBleStatus aci_hal_read_config_data( uint8_t Offset,
                                     uint8_t* Data_Length,
                                     uint8_t* Data )
{
 801267a:	b580      	push	{r7, lr}
 801267c:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8012680:	af00      	add	r7, sp, #0
 8012682:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8012686:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 801268a:	6019      	str	r1, [r3, #0]
 801268c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8012690:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8012694:	601a      	str	r2, [r3, #0]
 8012696:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 801269a:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 801269e:	4602      	mov	r2, r0
 80126a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 80126a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80126a6:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
  aci_hal_read_config_data_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80126aa:	f107 0314 	add.w	r3, r7, #20
 80126ae:	22fc      	movs	r2, #252	@ 0xfc
 80126b0:	2100      	movs	r1, #0
 80126b2:	4618      	mov	r0, r3
 80126b4:	f000 fb7c 	bl	8012db0 <Osal_MemSet>
  int index_input = 0;
 80126b8:	2300      	movs	r3, #0
 80126ba:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
  cp0->Offset = Offset;
 80126be:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80126c2:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 80126c6:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 80126ca:	7812      	ldrb	r2, [r2, #0]
 80126cc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80126ce:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 80126d2:	3301      	adds	r3, #1
 80126d4:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80126d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80126dc:	2218      	movs	r2, #24
 80126de:	2100      	movs	r1, #0
 80126e0:	4618      	mov	r0, r3
 80126e2:	f000 fb65 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80126e6:	233f      	movs	r3, #63	@ 0x3f
 80126e8:	f8a7 3210 	strh.w	r3, [r7, #528]	@ 0x210
  rq.ocf = 0x00d;
 80126ec:	230d      	movs	r3, #13
 80126ee:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
  rq.cparam = cmd_buffer;
 80126f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80126f6:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
  rq.clen = index_input;
 80126fa:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 80126fe:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
  rq.rparam = &resp;
 8012702:	f107 0314 	add.w	r3, r7, #20
 8012706:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
  rq.rlen = sizeof(resp);
 801270a:	23fc      	movs	r3, #252	@ 0xfc
 801270c:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012710:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8012714:	2100      	movs	r1, #0
 8012716:	4618      	mov	r0, r3
 8012718:	f000 fcce 	bl	80130b8 <hci_send_req>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	da01      	bge.n	8012726 <aci_hal_read_config_data+0xac>
    return BLE_STATUS_TIMEOUT;
 8012722:	23ff      	movs	r3, #255	@ 0xff
 8012724:	e029      	b.n	801277a <aci_hal_read_config_data+0x100>
  if ( resp.Status )
 8012726:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 801272a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801272e:	781b      	ldrb	r3, [r3, #0]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d005      	beq.n	8012740 <aci_hal_read_config_data+0xc6>
    return resp.Status;
 8012734:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8012738:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	e01c      	b.n	801277a <aci_hal_read_config_data+0x100>
  *Data_Length = resp.Data_Length;
 8012740:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8012744:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8012748:	785a      	ldrb	r2, [r3, #1]
 801274a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 801274e:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	701a      	strb	r2, [r3, #0]
  Osal_MemCpy( (void*)Data, (const void*)resp.Data, *Data_Length);
 8012756:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 801275a:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	461a      	mov	r2, r3
 8012764:	f107 0314 	add.w	r3, r7, #20
 8012768:	1c99      	adds	r1, r3, #2
 801276a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 801276e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8012772:	6818      	ldr	r0, [r3, #0]
 8012774:	f000 fb0c 	bl	8012d90 <Osal_MemCpy>
  return BLE_STATUS_SUCCESS;
 8012778:	2300      	movs	r3, #0
}
 801277a:	4618      	mov	r0, r3
 801277c:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}

08012784 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b0cc      	sub	sp, #304	@ 0x130
 8012788:	af00      	add	r7, sp, #0
 801278a:	4602      	mov	r2, r0
 801278c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012790:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8012794:	701a      	strb	r2, [r3, #0]
 8012796:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801279a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801279e:	460a      	mov	r2, r1
 80127a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80127a2:	f107 0310 	add.w	r3, r7, #16
 80127a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80127aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80127ae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80127b2:	2200      	movs	r2, #0
 80127b4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80127b6:	2300      	movs	r3, #0
 80127b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 80127bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80127c0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80127c4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80127c8:	7812      	ldrb	r2, [r2, #0]
 80127ca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80127cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80127d0:	3301      	adds	r3, #1
 80127d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80127d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80127da:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80127de:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80127e2:	7812      	ldrb	r2, [r2, #0]
 80127e4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80127e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80127ea:	3301      	adds	r3, #1
 80127ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80127f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80127f4:	2218      	movs	r2, #24
 80127f6:	2100      	movs	r1, #0
 80127f8:	4618      	mov	r0, r3
 80127fa:	f000 fad9 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80127fe:	233f      	movs	r3, #63	@ 0x3f
 8012800:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8012804:	230f      	movs	r3, #15
 8012806:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801280a:	f107 0310 	add.w	r3, r7, #16
 801280e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8012812:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012816:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801281a:	f107 030f 	add.w	r3, r7, #15
 801281e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8012822:	2301      	movs	r3, #1
 8012824:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012828:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801282c:	2100      	movs	r1, #0
 801282e:	4618      	mov	r0, r3
 8012830:	f000 fc42 	bl	80130b8 <hci_send_req>
 8012834:	4603      	mov	r3, r0
 8012836:	2b00      	cmp	r3, #0
 8012838:	da01      	bge.n	801283e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 801283a:	23ff      	movs	r3, #255	@ 0xff
 801283c:	e004      	b.n	8012848 <aci_hal_set_tx_power_level+0xc4>
  return status;
 801283e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012842:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012846:	781b      	ldrb	r3, [r3, #0]
}
 8012848:	4618      	mov	r0, r3
 801284a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801284e:	46bd      	mov	sp, r7
 8012850:	bd80      	pop	{r7, pc}

08012852 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8012852:	b580      	push	{r7, lr}
 8012854:	b0cc      	sub	sp, #304	@ 0x130
 8012856:	af00      	add	r7, sp, #0
 8012858:	4602      	mov	r2, r0
 801285a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801285e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8012862:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8012864:	f107 0310 	add.w	r3, r7, #16
 8012868:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801286c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012870:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012874:	2200      	movs	r2, #0
 8012876:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8012878:	2300      	movs	r3, #0
 801287a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 801287e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012882:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012886:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801288a:	8812      	ldrh	r2, [r2, #0]
 801288c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801288e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012892:	3302      	adds	r3, #2
 8012894:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012898:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801289c:	2218      	movs	r2, #24
 801289e:	2100      	movs	r1, #0
 80128a0:	4618      	mov	r0, r3
 80128a2:	f000 fa85 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 80128a6:	233f      	movs	r3, #63	@ 0x3f
 80128a8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 80128ac:	2318      	movs	r3, #24
 80128ae:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80128b2:	f107 0310 	add.w	r3, r7, #16
 80128b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80128ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80128be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80128c2:	f107 030f 	add.w	r3, r7, #15
 80128c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80128ca:	2301      	movs	r3, #1
 80128cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80128d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80128d4:	2100      	movs	r1, #0
 80128d6:	4618      	mov	r0, r3
 80128d8:	f000 fbee 	bl	80130b8 <hci_send_req>
 80128dc:	4603      	mov	r3, r0
 80128de:	2b00      	cmp	r3, #0
 80128e0:	da01      	bge.n	80128e6 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80128e2:	23ff      	movs	r3, #255	@ 0xff
 80128e4:	e004      	b.n	80128f0 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80128e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80128ea:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80128ee:	781b      	ldrb	r3, [r3, #0]
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80128f6:	46bd      	mov	sp, r7
 80128f8:	bd80      	pop	{r7, pc}

080128fa <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80128fa:	b580      	push	{r7, lr}
 80128fc:	b088      	sub	sp, #32
 80128fe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8012900:	2300      	movs	r3, #0
 8012902:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012904:	f107 0308 	add.w	r3, r7, #8
 8012908:	2218      	movs	r2, #24
 801290a:	2100      	movs	r1, #0
 801290c:	4618      	mov	r0, r3
 801290e:	f000 fa4f 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x03;
 8012912:	2303      	movs	r3, #3
 8012914:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8012916:	2303      	movs	r3, #3
 8012918:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801291a:	1dfb      	adds	r3, r7, #7
 801291c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801291e:	2301      	movs	r3, #1
 8012920:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012922:	f107 0308 	add.w	r3, r7, #8
 8012926:	2100      	movs	r1, #0
 8012928:	4618      	mov	r0, r3
 801292a:	f000 fbc5 	bl	80130b8 <hci_send_req>
 801292e:	4603      	mov	r3, r0
 8012930:	2b00      	cmp	r3, #0
 8012932:	da01      	bge.n	8012938 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8012934:	23ff      	movs	r3, #255	@ 0xff
 8012936:	e000      	b.n	801293a <hci_reset+0x40>
  return status;
 8012938:	79fb      	ldrb	r3, [r7, #7]
}
 801293a:	4618      	mov	r0, r3
 801293c:	3720      	adds	r7, #32
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}

08012942 <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information( uint8_t* HCI_Version,
                                               uint16_t* HCI_Subversion,
                                               uint8_t* LMP_Version,
                                               uint16_t* Company_Identifier,
                                               uint16_t* LMP_Subversion )
{
 8012942:	b580      	push	{r7, lr}
 8012944:	b08e      	sub	sp, #56	@ 0x38
 8012946:	af00      	add	r7, sp, #0
 8012948:	60f8      	str	r0, [r7, #12]
 801294a:	60b9      	str	r1, [r7, #8]
 801294c:	607a      	str	r2, [r7, #4]
 801294e:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8012950:	f107 0314 	add.w	r3, r7, #20
 8012954:	2209      	movs	r2, #9
 8012956:	2100      	movs	r1, #0
 8012958:	4618      	mov	r0, r3
 801295a:	f000 fa29 	bl	8012db0 <Osal_MemSet>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801295e:	f107 0320 	add.w	r3, r7, #32
 8012962:	2218      	movs	r2, #24
 8012964:	2100      	movs	r1, #0
 8012966:	4618      	mov	r0, r3
 8012968:	f000 fa22 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x04;
 801296c:	2304      	movs	r3, #4
 801296e:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 8012970:	2301      	movs	r3, #1
 8012972:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.rparam = &resp;
 8012974:	f107 0314 	add.w	r3, r7, #20
 8012978:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = sizeof(resp);
 801297a:	2309      	movs	r3, #9
 801297c:	637b      	str	r3, [r7, #52]	@ 0x34
  if ( hci_send_req(&rq, FALSE) < 0 )
 801297e:	f107 0320 	add.w	r3, r7, #32
 8012982:	2100      	movs	r1, #0
 8012984:	4618      	mov	r0, r3
 8012986:	f000 fb97 	bl	80130b8 <hci_send_req>
 801298a:	4603      	mov	r3, r0
 801298c:	2b00      	cmp	r3, #0
 801298e:	da01      	bge.n	8012994 <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 8012990:	23ff      	movs	r3, #255	@ 0xff
 8012992:	e018      	b.n	80129c6 <hci_read_local_version_information+0x84>
  if ( resp.Status )
 8012994:	7d3b      	ldrb	r3, [r7, #20]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d001      	beq.n	801299e <hci_read_local_version_information+0x5c>
    return resp.Status;
 801299a:	7d3b      	ldrb	r3, [r7, #20]
 801299c:	e013      	b.n	80129c6 <hci_read_local_version_information+0x84>
  *HCI_Version = resp.HCI_Version;
 801299e:	7d7a      	ldrb	r2, [r7, #21]
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	701a      	strb	r2, [r3, #0]
  *HCI_Subversion = resp.HCI_Subversion;
 80129a4:	8afa      	ldrh	r2, [r7, #22]
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	801a      	strh	r2, [r3, #0]
  *LMP_Version = resp.LMP_Version;
 80129aa:	7e3a      	ldrb	r2, [r7, #24]
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	701a      	strb	r2, [r3, #0]
  *Company_Identifier = resp.Company_Identifier;
 80129b0:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80129b4:	b29a      	uxth	r2, r3
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	801a      	strh	r2, [r3, #0]
  *LMP_Subversion = resp.LMP_Subversion;
 80129ba:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 80129be:	b29a      	uxth	r2, r3
 80129c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80129c2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80129c4:	2300      	movs	r3, #0
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3738      	adds	r7, #56	@ 0x38
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}

080129ce <hci_read_bd_addr>:
  Osal_MemCpy( (void*)LMP_Features, (const void*)resp.LMP_Features, 8 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_read_bd_addr( uint8_t* BD_ADDR )
{
 80129ce:	b580      	push	{r7, lr}
 80129d0:	b08a      	sub	sp, #40	@ 0x28
 80129d2:	af00      	add	r7, sp, #0
 80129d4:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_read_bd_addr_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80129d6:	f107 0308 	add.w	r3, r7, #8
 80129da:	2207      	movs	r2, #7
 80129dc:	2100      	movs	r1, #0
 80129de:	4618      	mov	r0, r3
 80129e0:	f000 f9e6 	bl	8012db0 <Osal_MemSet>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80129e4:	f107 0310 	add.w	r3, r7, #16
 80129e8:	2218      	movs	r2, #24
 80129ea:	2100      	movs	r1, #0
 80129ec:	4618      	mov	r0, r3
 80129ee:	f000 f9df 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x04;
 80129f2:	2304      	movs	r3, #4
 80129f4:	823b      	strh	r3, [r7, #16]
  rq.ocf = 0x009;
 80129f6:	2309      	movs	r3, #9
 80129f8:	827b      	strh	r3, [r7, #18]
  rq.rparam = &resp;
 80129fa:	f107 0308 	add.w	r3, r7, #8
 80129fe:	623b      	str	r3, [r7, #32]
  rq.rlen = sizeof(resp);
 8012a00:	2307      	movs	r3, #7
 8012a02:	627b      	str	r3, [r7, #36]	@ 0x24
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012a04:	f107 0310 	add.w	r3, r7, #16
 8012a08:	2100      	movs	r1, #0
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f000 fb54 	bl	80130b8 <hci_send_req>
 8012a10:	4603      	mov	r3, r0
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	da01      	bge.n	8012a1a <hci_read_bd_addr+0x4c>
    return BLE_STATUS_TIMEOUT;
 8012a16:	23ff      	movs	r3, #255	@ 0xff
 8012a18:	e00d      	b.n	8012a36 <hci_read_bd_addr+0x68>
  if ( resp.Status )
 8012a1a:	7a3b      	ldrb	r3, [r7, #8]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d001      	beq.n	8012a24 <hci_read_bd_addr+0x56>
    return resp.Status;
 8012a20:	7a3b      	ldrb	r3, [r7, #8]
 8012a22:	e008      	b.n	8012a36 <hci_read_bd_addr+0x68>
  Osal_MemCpy( (void*)BD_ADDR, (const void*)resp.BD_ADDR, 6 );
 8012a24:	f107 0308 	add.w	r3, r7, #8
 8012a28:	3301      	adds	r3, #1
 8012a2a:	2206      	movs	r2, #6
 8012a2c:	4619      	mov	r1, r3
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f000 f9ae 	bl	8012d90 <Osal_MemCpy>
  return BLE_STATUS_SUCCESS;
 8012a34:	2300      	movs	r3, #0
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3728      	adds	r7, #40	@ 0x28
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}

08012a3e <hci_le_set_advertising_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_le_set_advertising_data( uint8_t Advertising_Data_Length,
                                        const uint8_t* Advertising_Data )
{
 8012a3e:	b580      	push	{r7, lr}
 8012a40:	b0cc      	sub	sp, #304	@ 0x130
 8012a42:	af00      	add	r7, sp, #0
 8012a44:	4602      	mov	r2, r0
 8012a46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012a4a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012a4e:	6019      	str	r1, [r3, #0]
 8012a50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012a54:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8012a58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_advertising_data_cp0 *cp0 = (hci_le_set_advertising_data_cp0*)(cmd_buffer);
 8012a5a:	f107 0310 	add.w	r3, r7, #16
 8012a5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8012a62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012a66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Data_Length = Advertising_Data_Length;
 8012a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012a78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012a7c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8012a80:	7812      	ldrb	r2, [r2, #0]
 8012a82:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8012a84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012a88:	3301      	adds	r3, #1
 8012a8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Advertising_Data, (const void*)Advertising_Data, 31 );
 8012a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012a92:	1c58      	adds	r0, r3, #1
 8012a94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012a98:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012a9c:	221f      	movs	r2, #31
 8012a9e:	6819      	ldr	r1, [r3, #0]
 8012aa0:	f000 f976 	bl	8012d90 <Osal_MemCpy>
  index_input += 31;
 8012aa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012aa8:	331f      	adds	r3, #31
 8012aaa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012aae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012ab2:	2218      	movs	r2, #24
 8012ab4:	2100      	movs	r1, #0
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f000 f97a 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x08;
 8012abc:	2308      	movs	r3, #8
 8012abe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x008;
 8012ac2:	2308      	movs	r3, #8
 8012ac4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8012ac8:	f107 0310 	add.w	r3, r7, #16
 8012acc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8012ad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012ad4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8012ad8:	f107 030f 	add.w	r3, r7, #15
 8012adc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012ae6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012aea:	2100      	movs	r1, #0
 8012aec:	4618      	mov	r0, r3
 8012aee:	f000 fae3 	bl	80130b8 <hci_send_req>
 8012af2:	4603      	mov	r3, r0
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	da01      	bge.n	8012afc <hci_le_set_advertising_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8012af8:	23ff      	movs	r3, #255	@ 0xff
 8012afa:	e004      	b.n	8012b06 <hci_le_set_advertising_data+0xc8>
  return status;
 8012afc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012b00:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012b04:	781b      	ldrb	r3, [r3, #0]
}
 8012b06:	4618      	mov	r0, r3
 8012b08:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}

08012b10 <hci_le_set_scan_response_data>:

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b0cc      	sub	sp, #304	@ 0x130
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	4602      	mov	r2, r0
 8012b18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012b1c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012b20:	6019      	str	r1, [r3, #0]
 8012b22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012b26:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8012b2a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8012b2c:	f107 0310 	add.w	r3, r7, #16
 8012b30:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8012b34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012b38:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8012b40:	2300      	movs	r3, #0
 8012b42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 8012b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012b4a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012b4e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8012b52:	7812      	ldrb	r2, [r2, #0]
 8012b54:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8012b56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012b5a:	3301      	adds	r3, #1
 8012b5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 8012b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012b64:	1c58      	adds	r0, r3, #1
 8012b66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012b6a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012b6e:	221f      	movs	r2, #31
 8012b70:	6819      	ldr	r1, [r3, #0]
 8012b72:	f000 f90d 	bl	8012d90 <Osal_MemCpy>
  index_input += 31;
 8012b76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012b7a:	331f      	adds	r3, #31
 8012b7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012b80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012b84:	2218      	movs	r2, #24
 8012b86:	2100      	movs	r1, #0
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f000 f911 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x08;
 8012b8e:	2308      	movs	r3, #8
 8012b90:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x009;
 8012b94:	2309      	movs	r3, #9
 8012b96:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8012b9a:	f107 0310 	add.w	r3, r7, #16
 8012b9e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8012ba2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012ba6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8012baa:	f107 030f 	add.w	r3, r7, #15
 8012bae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012bb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012bbc:	2100      	movs	r1, #0
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f000 fa7a 	bl	80130b8 <hci_send_req>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	da01      	bge.n	8012bce <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8012bca:	23ff      	movs	r3, #255	@ 0xff
 8012bcc:	e004      	b.n	8012bd8 <hci_le_set_scan_response_data+0xc8>
  return status;
 8012bce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012bd2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012bd6:	781b      	ldrb	r3, [r3, #0]
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}

08012be2 <hci_le_rand>:
  Osal_MemCpy( (void*)Encrypted_Data, (const void*)resp.Encrypted_Data, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_le_rand( uint8_t* Random_Number )
{
 8012be2:	b580      	push	{r7, lr}
 8012be4:	b08c      	sub	sp, #48	@ 0x30
 8012be6:	af00      	add	r7, sp, #0
 8012be8:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8012bea:	f107 030c 	add.w	r3, r7, #12
 8012bee:	2209      	movs	r2, #9
 8012bf0:	2100      	movs	r1, #0
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f000 f8dc 	bl	8012db0 <Osal_MemSet>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012bf8:	f107 0318 	add.w	r3, r7, #24
 8012bfc:	2218      	movs	r2, #24
 8012bfe:	2100      	movs	r1, #0
 8012c00:	4618      	mov	r0, r3
 8012c02:	f000 f8d5 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x08;
 8012c06:	2308      	movs	r3, #8
 8012c08:	833b      	strh	r3, [r7, #24]
  rq.ocf = 0x018;
 8012c0a:	2318      	movs	r3, #24
 8012c0c:	837b      	strh	r3, [r7, #26]
  rq.rparam = &resp;
 8012c0e:	f107 030c 	add.w	r3, r7, #12
 8012c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = sizeof(resp);
 8012c14:	2309      	movs	r3, #9
 8012c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012c18:	f107 0318 	add.w	r3, r7, #24
 8012c1c:	2100      	movs	r1, #0
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f000 fa4a 	bl	80130b8 <hci_send_req>
 8012c24:	4603      	mov	r3, r0
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	da01      	bge.n	8012c2e <hci_le_rand+0x4c>
    return BLE_STATUS_TIMEOUT;
 8012c2a:	23ff      	movs	r3, #255	@ 0xff
 8012c2c:	e00d      	b.n	8012c4a <hci_le_rand+0x68>
  if ( resp.Status )
 8012c2e:	7b3b      	ldrb	r3, [r7, #12]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d001      	beq.n	8012c38 <hci_le_rand+0x56>
    return resp.Status;
 8012c34:	7b3b      	ldrb	r3, [r7, #12]
 8012c36:	e008      	b.n	8012c4a <hci_le_rand+0x68>
  Osal_MemCpy( (void*)Random_Number, (const void*)resp.Random_Number, 8 );
 8012c38:	f107 030c 	add.w	r3, r7, #12
 8012c3c:	3301      	adds	r3, #1
 8012c3e:	2208      	movs	r2, #8
 8012c40:	4619      	mov	r1, r3
 8012c42:	6878      	ldr	r0, [r7, #4]
 8012c44:	f000 f8a4 	bl	8012d90 <Osal_MemCpy>
  return BLE_STATUS_SUCCESS;
 8012c48:	2300      	movs	r3, #0
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3730      	adds	r7, #48	@ 0x30
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}

08012c52 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 8012c52:	b5b0      	push	{r4, r5, r7, lr}
 8012c54:	b0cc      	sub	sp, #304	@ 0x130
 8012c56:	af00      	add	r7, sp, #0
 8012c58:	4605      	mov	r5, r0
 8012c5a:	460c      	mov	r4, r1
 8012c5c:	4610      	mov	r0, r2
 8012c5e:	4619      	mov	r1, r3
 8012c60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012c64:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8012c68:	462a      	mov	r2, r5
 8012c6a:	801a      	strh	r2, [r3, #0]
 8012c6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012c70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012c74:	4622      	mov	r2, r4
 8012c76:	801a      	strh	r2, [r3, #0]
 8012c78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012c7c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8012c80:	4602      	mov	r2, r0
 8012c82:	801a      	strh	r2, [r3, #0]
 8012c84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012c88:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012c8c:	460a      	mov	r2, r1
 8012c8e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8012c90:	f107 0310 	add.w	r3, r7, #16
 8012c94:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8012c98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012c9c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8012caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012cae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012cb2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8012cb6:	8812      	ldrh	r2, [r2, #0]
 8012cb8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8012cba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012cbe:	3302      	adds	r3, #2
 8012cc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8012cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012cc8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012ccc:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8012cd0:	8812      	ldrh	r2, [r2, #0]
 8012cd2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8012cd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012cd8:	3302      	adds	r3, #2
 8012cda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8012cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012ce2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012ce6:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8012cea:	8812      	ldrh	r2, [r2, #0]
 8012cec:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8012cee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012cf2:	3302      	adds	r3, #2
 8012cf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 8012cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012cfc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8012d00:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8012d04:	8812      	ldrh	r2, [r2, #0]
 8012d06:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8012d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012d0c:	3302      	adds	r3, #2
 8012d0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8012d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012d16:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8012d1a:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8012d1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012d20:	3302      	adds	r3, #2
 8012d22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8012d26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012d2a:	2218      	movs	r2, #24
 8012d2c:	2100      	movs	r1, #0
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f000 f83e 	bl	8012db0 <Osal_MemSet>
  rq.ogf = 0x3f;
 8012d34:	233f      	movs	r3, #63	@ 0x3f
 8012d36:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 8012d3a:	f240 1381 	movw	r3, #385	@ 0x181
 8012d3e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8012d42:	230f      	movs	r3, #15
 8012d44:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8012d48:	f107 0310 	add.w	r3, r7, #16
 8012d4c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8012d50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012d54:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8012d58:	f107 030f 	add.w	r3, r7, #15
 8012d5c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8012d60:	2301      	movs	r3, #1
 8012d62:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8012d66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8012d6a:	2100      	movs	r1, #0
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f000 f9a3 	bl	80130b8 <hci_send_req>
 8012d72:	4603      	mov	r3, r0
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	da01      	bge.n	8012d7c <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 8012d78:	23ff      	movs	r3, #255	@ 0xff
 8012d7a:	e004      	b.n	8012d86 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8012d7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8012d80:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8012d84:	781b      	ldrb	r3, [r3, #0]
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bdb0      	pop	{r4, r5, r7, pc}

08012d90 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b084      	sub	sp, #16
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	60f8      	str	r0, [r7, #12]
 8012d98:	60b9      	str	r1, [r7, #8]
 8012d9a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8012d9c:	687a      	ldr	r2, [r7, #4]
 8012d9e:	68b9      	ldr	r1, [r7, #8]
 8012da0:	68f8      	ldr	r0, [r7, #12]
 8012da2:	f013 ffc6 	bl	8026d32 <memcpy>
 8012da6:	4603      	mov	r3, r0
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3710      	adds	r7, #16
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}

08012db0 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b084      	sub	sp, #16
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	60f8      	str	r0, [r7, #12]
 8012db8:	60b9      	str	r1, [r7, #8]
 8012dba:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8012dbc:	687a      	ldr	r2, [r7, #4]
 8012dbe:	68b9      	ldr	r1, [r7, #8]
 8012dc0:	68f8      	ldr	r0, [r7, #12]
 8012dc2:	f013 ff05 	bl	8026bd0 <memset>
 8012dc6:	4603      	mov	r3, r0
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3710      	adds	r7, #16
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b088      	sub	sp, #32
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012dd8:	f107 030c 	add.w	r3, r7, #12
 8012ddc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8012de4:	69fb      	ldr	r3, [r7, #28]
 8012de6:	212e      	movs	r1, #46	@ 0x2e
 8012de8:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8012dec:	f000 fb00 	bl	80133f0 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012df0:	69fb      	ldr	r3, [r7, #28]
 8012df2:	330b      	adds	r3, #11
 8012df4:	78db      	ldrb	r3, [r3, #3]
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3720      	adds	r7, #32
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}

08012dfe <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8012dfe:	b580      	push	{r7, lr}
 8012e00:	b088      	sub	sp, #32
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012e06:	f107 030c 	add.w	r3, r7, #12
 8012e0a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8012e12:	69fb      	ldr	r3, [r7, #28]
 8012e14:	210f      	movs	r1, #15
 8012e16:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8012e1a:	f000 fae9 	bl	80133f0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012e1e:	69fb      	ldr	r3, [r7, #28]
 8012e20:	330b      	adds	r3, #11
 8012e22:	78db      	ldrb	r3, [r3, #3]
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	3720      	adds	r7, #32
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}

08012e2c <SHCI_C2_FLASH_EraseActivity>:

SHCI_CmdStatus_t SHCI_C2_FLASH_EraseActivity( SHCI_EraseActivity_t erase_activity )
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b088      	sub	sp, #32
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	4603      	mov	r3, r0
 8012e34:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012e36:	f107 030c 	add.w	r3, r7, #12
 8012e3a:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = erase_activity;
 8012e3c:	79fb      	ldrb	r3, [r7, #7]
 8012e3e:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_ERASE_ACTIVITY,
 8012e40:	f107 020c 	add.w	r2, r7, #12
 8012e44:	69fb      	ldr	r3, [r7, #28]
 8012e46:	2101      	movs	r1, #1
 8012e48:	f64f 4069 	movw	r0, #64617	@ 0xfc69
 8012e4c:	f000 fad0 	bl	80133f0 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012e50:	69fb      	ldr	r3, [r7, #28]
 8012e52:	330b      	adds	r3, #11
 8012e54:	78db      	ldrb	r3, [r3, #3]
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3720      	adds	r7, #32
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}

08012e5e <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8012e5e:	b580      	push	{r7, lr}
 8012e60:	b088      	sub	sp, #32
 8012e62:	af00      	add	r7, sp, #0
 8012e64:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012e66:	f107 030c 	add.w	r3, r7, #12
 8012e6a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8012e6c:	69fb      	ldr	r3, [r7, #28]
 8012e6e:	687a      	ldr	r2, [r7, #4]
 8012e70:	2110      	movs	r1, #16
 8012e72:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8012e76:	f000 fabb 	bl	80133f0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012e7a:	69fb      	ldr	r3, [r7, #28]
 8012e7c:	330b      	adds	r3, #11
 8012e7e:	78db      	ldrb	r3, [r3, #3]
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3720      	adds	r7, #32
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}

08012e88 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8012e88:	b480      	push	{r7}
 8012e8a:	b08b      	sub	sp, #44	@ 0x2c
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8012e90:	2300      	movs	r3, #0
 8012e92:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8012e94:	2300      	movs	r3, #0
 8012e96:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8012eac:	2300      	movs	r3, #0
 8012eae:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8012eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8012fdc <SHCI_GetWirelessFwInfo+0x154>)
 8012eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012eb4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012eb8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	009b      	lsls	r3, r3, #2
 8012ebe:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8012ec2:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	4a44      	ldr	r2, [pc, #272]	@ (8012fe0 <SHCI_GetWirelessFwInfo+0x158>)
 8012ed0:	4293      	cmp	r3, r2
 8012ed2:	d10f      	bne.n	8012ef4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	695b      	ldr	r3, [r3, #20]
 8012ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	699b      	ldr	r3, [r3, #24]
 8012ede:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8012ee0:	68bb      	ldr	r3, [r7, #8]
 8012ee2:	69db      	ldr	r3, [r3, #28]
 8012ee4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	68db      	ldr	r3, [r3, #12]
 8012eea:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	691b      	ldr	r3, [r3, #16]
 8012ef0:	617b      	str	r3, [r7, #20]
 8012ef2:	e01a      	b.n	8012f2a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	009b      	lsls	r3, r3, #2
 8012ef8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8012efc:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8012f00:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	691b      	ldr	r3, [r3, #16]
 8012f08:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	695b      	ldr	r3, [r3, #20]
 8012f10:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	699b      	ldr	r3, [r3, #24]
 8012f18:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	685b      	ldr	r3, [r3, #4]
 8012f20:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	689b      	ldr	r3, [r3, #8]
 8012f28:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8012f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f2c:	0e1b      	lsrs	r3, r3, #24
 8012f2e:	b2da      	uxtb	r2, r3
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8012f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f36:	0c1b      	lsrs	r3, r3, #16
 8012f38:	b2da      	uxtb	r2, r3
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f40:	0a1b      	lsrs	r3, r3, #8
 8012f42:	b2da      	uxtb	r2, r3
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8012f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f4a:	091b      	lsrs	r3, r3, #4
 8012f4c:	b2db      	uxtb	r3, r3
 8012f4e:	f003 030f 	and.w	r3, r3, #15
 8012f52:	b2da      	uxtb	r2, r3
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8012f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f5a:	b2db      	uxtb	r3, r3
 8012f5c:	f003 030f 	and.w	r3, r3, #15
 8012f60:	b2da      	uxtb	r2, r3
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012f66:	6a3b      	ldr	r3, [r7, #32]
 8012f68:	0e1b      	lsrs	r3, r3, #24
 8012f6a:	b2da      	uxtb	r2, r3
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012f70:	6a3b      	ldr	r3, [r7, #32]
 8012f72:	0c1b      	lsrs	r3, r3, #16
 8012f74:	b2da      	uxtb	r2, r3
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8012f7a:	6a3b      	ldr	r3, [r7, #32]
 8012f7c:	0a1b      	lsrs	r3, r3, #8
 8012f7e:	b2da      	uxtb	r2, r3
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012f84:	6a3b      	ldr	r3, [r7, #32]
 8012f86:	b2da      	uxtb	r2, r3
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8012f8c:	69fb      	ldr	r3, [r7, #28]
 8012f8e:	b2da      	uxtb	r2, r3
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8012f94:	69bb      	ldr	r3, [r7, #24]
 8012f96:	0e1b      	lsrs	r3, r3, #24
 8012f98:	b2da      	uxtb	r2, r3
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8012f9e:	69bb      	ldr	r3, [r7, #24]
 8012fa0:	0c1b      	lsrs	r3, r3, #16
 8012fa2:	b2da      	uxtb	r2, r3
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012fa8:	69bb      	ldr	r3, [r7, #24]
 8012faa:	0a1b      	lsrs	r3, r3, #8
 8012fac:	b2da      	uxtb	r2, r3
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	0e1b      	lsrs	r3, r3, #24
 8012fb6:	b2da      	uxtb	r2, r3
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012fbc:	697b      	ldr	r3, [r7, #20]
 8012fbe:	0c1b      	lsrs	r3, r3, #16
 8012fc0:	b2da      	uxtb	r2, r3
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	b2da      	uxtb	r2, r3
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8012fce:	2300      	movs	r3, #0
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	372c      	adds	r7, #44	@ 0x2c
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fda:	4770      	bx	lr
 8012fdc:	58004000 	.word	0x58004000
 8012fe0:	a94656b9 	.word	0xa94656b9

08012fe4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	685b      	ldr	r3, [r3, #4]
 8012ff2:	4a08      	ldr	r2, [pc, #32]	@ (8013014 <hci_init+0x30>)
 8012ff4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8012ff6:	4a08      	ldr	r2, [pc, #32]	@ (8013018 <hci_init+0x34>)
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8012ffc:	4806      	ldr	r0, [pc, #24]	@ (8013018 <hci_init+0x34>)
 8012ffe:	f000 f979 	bl	80132f4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	4618      	mov	r0, r3
 8013008:	f000 f8da 	bl	80131c0 <TlInit>

  return;
 801300c:	bf00      	nop
}
 801300e:	3708      	adds	r7, #8
 8013010:	46bd      	mov	sp, r7
 8013012:	bd80      	pop	{r7, pc}
 8013014:	20006fa4 	.word	0x20006fa4
 8013018:	20006f7c 	.word	0x20006f7c

0801301c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b084      	sub	sp, #16
 8013020:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8013022:	4822      	ldr	r0, [pc, #136]	@ (80130ac <hci_user_evt_proc+0x90>)
 8013024:	f001 f894 	bl	8014150 <LST_is_empty>
 8013028:	4603      	mov	r3, r0
 801302a:	2b00      	cmp	r3, #0
 801302c:	d12b      	bne.n	8013086 <hci_user_evt_proc+0x6a>
 801302e:	4b20      	ldr	r3, [pc, #128]	@ (80130b0 <hci_user_evt_proc+0x94>)
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d027      	beq.n	8013086 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8013036:	f107 030c 	add.w	r3, r7, #12
 801303a:	4619      	mov	r1, r3
 801303c:	481b      	ldr	r0, [pc, #108]	@ (80130ac <hci_user_evt_proc+0x90>)
 801303e:	f001 f916 	bl	801426e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8013042:	4b1c      	ldr	r3, [pc, #112]	@ (80130b4 <hci_user_evt_proc+0x98>)
 8013044:	69db      	ldr	r3, [r3, #28]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d00c      	beq.n	8013064 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 801304e:	2301      	movs	r3, #1
 8013050:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8013052:	4b18      	ldr	r3, [pc, #96]	@ (80130b4 <hci_user_evt_proc+0x98>)
 8013054:	69db      	ldr	r3, [r3, #28]
 8013056:	1d3a      	adds	r2, r7, #4
 8013058:	4610      	mov	r0, r2
 801305a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 801305c:	793a      	ldrb	r2, [r7, #4]
 801305e:	4b14      	ldr	r3, [pc, #80]	@ (80130b0 <hci_user_evt_proc+0x94>)
 8013060:	701a      	strb	r2, [r3, #0]
 8013062:	e002      	b.n	801306a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8013064:	4b12      	ldr	r3, [pc, #72]	@ (80130b0 <hci_user_evt_proc+0x94>)
 8013066:	2201      	movs	r2, #1
 8013068:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 801306a:	4b11      	ldr	r3, [pc, #68]	@ (80130b0 <hci_user_evt_proc+0x94>)
 801306c:	781b      	ldrb	r3, [r3, #0]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d004      	beq.n	801307c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	4618      	mov	r0, r3
 8013076:	f000 fc0d 	bl	8013894 <TL_MM_EvtDone>
 801307a:	e004      	b.n	8013086 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	4619      	mov	r1, r3
 8013080:	480a      	ldr	r0, [pc, #40]	@ (80130ac <hci_user_evt_proc+0x90>)
 8013082:	f001 f887 	bl	8014194 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8013086:	4809      	ldr	r0, [pc, #36]	@ (80130ac <hci_user_evt_proc+0x90>)
 8013088:	f001 f862 	bl	8014150 <LST_is_empty>
 801308c:	4603      	mov	r3, r0
 801308e:	2b00      	cmp	r3, #0
 8013090:	d107      	bne.n	80130a2 <hci_user_evt_proc+0x86>
 8013092:	4b07      	ldr	r3, [pc, #28]	@ (80130b0 <hci_user_evt_proc+0x94>)
 8013094:	781b      	ldrb	r3, [r3, #0]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d003      	beq.n	80130a2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 801309a:	4804      	ldr	r0, [pc, #16]	@ (80130ac <hci_user_evt_proc+0x90>)
 801309c:	f7f0 fd6a 	bl	8003b74 <hci_notify_asynch_evt>
  }


  return;
 80130a0:	bf00      	nop
 80130a2:	bf00      	nop
}
 80130a4:	3710      	adds	r7, #16
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}
 80130aa:	bf00      	nop
 80130ac:	200002e4 	.word	0x200002e4
 80130b0:	200002f0 	.word	0x200002f0
 80130b4:	20006f7c 	.word	0x20006f7c

080130b8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b088      	sub	sp, #32
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	460b      	mov	r3, r1
 80130c2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80130c4:	2000      	movs	r0, #0
 80130c6:	f000 f8d1 	bl	801326c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80130ca:	2300      	movs	r3, #0
 80130cc:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	885b      	ldrh	r3, [r3, #2]
 80130d2:	b21b      	sxth	r3, r3
 80130d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80130d8:	b21a      	sxth	r2, r3
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	881b      	ldrh	r3, [r3, #0]
 80130de:	029b      	lsls	r3, r3, #10
 80130e0:	b21b      	sxth	r3, r3
 80130e2:	4313      	orrs	r3, r2
 80130e4:	b21b      	sxth	r3, r3
 80130e6:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80130e8:	4b33      	ldr	r3, [pc, #204]	@ (80131b8 <hci_send_req+0x100>)
 80130ea:	2201      	movs	r2, #1
 80130ec:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	68db      	ldr	r3, [r3, #12]
 80130f2:	b2d9      	uxtb	r1, r3
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	689a      	ldr	r2, [r3, #8]
 80130f8:	8bbb      	ldrh	r3, [r7, #28]
 80130fa:	4618      	mov	r0, r3
 80130fc:	f000 f890 	bl	8013220 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8013100:	e04e      	b.n	80131a0 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8013102:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8013106:	f7f0 fd4d 	bl	8003ba4 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 801310a:	e043      	b.n	8013194 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 801310c:	f107 030c 	add.w	r3, r7, #12
 8013110:	4619      	mov	r1, r3
 8013112:	482a      	ldr	r0, [pc, #168]	@ (80131bc <hci_send_req+0x104>)
 8013114:	f001 f8ab 	bl	801426e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	7a5b      	ldrb	r3, [r3, #9]
 801311c:	2b0f      	cmp	r3, #15
 801311e:	d114      	bne.n	801314a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	330b      	adds	r3, #11
 8013124:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	885b      	ldrh	r3, [r3, #2]
 801312a:	b29b      	uxth	r3, r3
 801312c:	8bba      	ldrh	r2, [r7, #28]
 801312e:	429a      	cmp	r2, r3
 8013130:	d104      	bne.n	801313c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	691b      	ldr	r3, [r3, #16]
 8013136:	693a      	ldr	r2, [r7, #16]
 8013138:	7812      	ldrb	r2, [r2, #0]
 801313a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 801313c:	693b      	ldr	r3, [r7, #16]
 801313e:	785b      	ldrb	r3, [r3, #1]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d027      	beq.n	8013194 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8013144:	2301      	movs	r3, #1
 8013146:	77fb      	strb	r3, [r7, #31]
 8013148:	e024      	b.n	8013194 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	330b      	adds	r3, #11
 801314e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8013150:	69bb      	ldr	r3, [r7, #24]
 8013152:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013156:	b29b      	uxth	r3, r3
 8013158:	8bba      	ldrh	r2, [r7, #28]
 801315a:	429a      	cmp	r2, r3
 801315c:	d114      	bne.n	8013188 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	7a9b      	ldrb	r3, [r3, #10]
 8013162:	3b03      	subs	r3, #3
 8013164:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	695a      	ldr	r2, [r3, #20]
 801316a:	7dfb      	ldrb	r3, [r7, #23]
 801316c:	429a      	cmp	r2, r3
 801316e:	bfa8      	it	ge
 8013170:	461a      	movge	r2, r3
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	6918      	ldr	r0, [r3, #16]
 801317a:	69bb      	ldr	r3, [r7, #24]
 801317c:	1cd9      	adds	r1, r3, #3
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	695b      	ldr	r3, [r3, #20]
 8013182:	461a      	mov	r2, r3
 8013184:	f013 fdd5 	bl	8026d32 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8013188:	69bb      	ldr	r3, [r7, #24]
 801318a:	781b      	ldrb	r3, [r3, #0]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d001      	beq.n	8013194 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8013190:	2301      	movs	r3, #1
 8013192:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8013194:	4809      	ldr	r0, [pc, #36]	@ (80131bc <hci_send_req+0x104>)
 8013196:	f000 ffdb 	bl	8014150 <LST_is_empty>
 801319a:	4603      	mov	r3, r0
 801319c:	2b00      	cmp	r3, #0
 801319e:	d0b5      	beq.n	801310c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80131a0:	7ffb      	ldrb	r3, [r7, #31]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d0ad      	beq.n	8013102 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80131a6:	2001      	movs	r0, #1
 80131a8:	f000 f860 	bl	801326c <NotifyCmdStatus>

  return 0;
 80131ac:	2300      	movs	r3, #0
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3720      	adds	r7, #32
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	20006fa8 	.word	0x20006fa8
 80131bc:	20006f9c 	.word	0x20006f9c

080131c0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b086      	sub	sp, #24
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80131c8:	480f      	ldr	r0, [pc, #60]	@ (8013208 <TlInit+0x48>)
 80131ca:	f000 ffb1 	bl	8014130 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80131ce:	4a0f      	ldr	r2, [pc, #60]	@ (801320c <TlInit+0x4c>)
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80131d4:	480e      	ldr	r0, [pc, #56]	@ (8013210 <TlInit+0x50>)
 80131d6:	f000 ffab 	bl	8014130 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80131da:	4b0e      	ldr	r3, [pc, #56]	@ (8013214 <TlInit+0x54>)
 80131dc:	2201      	movs	r2, #1
 80131de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80131e0:	4b0d      	ldr	r3, [pc, #52]	@ (8013218 <TlInit+0x58>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d00a      	beq.n	80131fe <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80131ec:	4b0b      	ldr	r3, [pc, #44]	@ (801321c <TlInit+0x5c>)
 80131ee:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80131f0:	4b09      	ldr	r3, [pc, #36]	@ (8013218 <TlInit+0x58>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	f107 0208 	add.w	r2, r7, #8
 80131f8:	4610      	mov	r0, r2
 80131fa:	4798      	blx	r3
  }

  return;
 80131fc:	bf00      	nop
 80131fe:	bf00      	nop
}
 8013200:	3718      	adds	r7, #24
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}
 8013206:	bf00      	nop
 8013208:	20006f9c 	.word	0x20006f9c
 801320c:	200002ec 	.word	0x200002ec
 8013210:	200002e4 	.word	0x200002e4
 8013214:	200002f0 	.word	0x200002f0
 8013218:	20006f7c 	.word	0x20006f7c
 801321c:	080132ad 	.word	0x080132ad

08013220 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b082      	sub	sp, #8
 8013224:	af00      	add	r7, sp, #0
 8013226:	4603      	mov	r3, r0
 8013228:	603a      	str	r2, [r7, #0]
 801322a:	80fb      	strh	r3, [r7, #6]
 801322c:	460b      	mov	r3, r1
 801322e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8013230:	4b0c      	ldr	r3, [pc, #48]	@ (8013264 <SendCmd+0x44>)
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	88fa      	ldrh	r2, [r7, #6]
 8013236:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 801323a:	4b0a      	ldr	r3, [pc, #40]	@ (8013264 <SendCmd+0x44>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	797a      	ldrb	r2, [r7, #5]
 8013240:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8013242:	4b08      	ldr	r3, [pc, #32]	@ (8013264 <SendCmd+0x44>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	330c      	adds	r3, #12
 8013248:	797a      	ldrb	r2, [r7, #5]
 801324a:	6839      	ldr	r1, [r7, #0]
 801324c:	4618      	mov	r0, r3
 801324e:	f013 fd70 	bl	8026d32 <memcpy>

  hciContext.io.Send(0,0);
 8013252:	4b05      	ldr	r3, [pc, #20]	@ (8013268 <SendCmd+0x48>)
 8013254:	691b      	ldr	r3, [r3, #16]
 8013256:	2100      	movs	r1, #0
 8013258:	2000      	movs	r0, #0
 801325a:	4798      	blx	r3

  return;
 801325c:	bf00      	nop
}
 801325e:	3708      	adds	r7, #8
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}
 8013264:	200002ec 	.word	0x200002ec
 8013268:	20006f7c 	.word	0x20006f7c

0801326c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b082      	sub	sp, #8
 8013270:	af00      	add	r7, sp, #0
 8013272:	4603      	mov	r3, r0
 8013274:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8013276:	79fb      	ldrb	r3, [r7, #7]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d108      	bne.n	801328e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 801327c:	4b0a      	ldr	r3, [pc, #40]	@ (80132a8 <NotifyCmdStatus+0x3c>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d00d      	beq.n	80132a0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8013284:	4b08      	ldr	r3, [pc, #32]	@ (80132a8 <NotifyCmdStatus+0x3c>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	2000      	movs	r0, #0
 801328a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 801328c:	e008      	b.n	80132a0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 801328e:	4b06      	ldr	r3, [pc, #24]	@ (80132a8 <NotifyCmdStatus+0x3c>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d004      	beq.n	80132a0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8013296:	4b04      	ldr	r3, [pc, #16]	@ (80132a8 <NotifyCmdStatus+0x3c>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	2001      	movs	r0, #1
 801329c:	4798      	blx	r3
  return;
 801329e:	bf00      	nop
 80132a0:	bf00      	nop
}
 80132a2:	3708      	adds	r7, #8
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	20006fa4 	.word	0x20006fa4

080132ac <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b082      	sub	sp, #8
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	7a5b      	ldrb	r3, [r3, #9]
 80132b8:	2b0f      	cmp	r3, #15
 80132ba:	d003      	beq.n	80132c4 <TlEvtReceived+0x18>
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	7a5b      	ldrb	r3, [r3, #9]
 80132c0:	2b0e      	cmp	r3, #14
 80132c2:	d107      	bne.n	80132d4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80132c4:	6879      	ldr	r1, [r7, #4]
 80132c6:	4809      	ldr	r0, [pc, #36]	@ (80132ec <TlEvtReceived+0x40>)
 80132c8:	f000 ff8a 	bl	80141e0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80132cc:	2000      	movs	r0, #0
 80132ce:	f7f0 fc5e 	bl	8003b8e <hci_cmd_resp_release>
 80132d2:	e006      	b.n	80132e2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80132d4:	6879      	ldr	r1, [r7, #4]
 80132d6:	4806      	ldr	r0, [pc, #24]	@ (80132f0 <TlEvtReceived+0x44>)
 80132d8:	f000 ff82 	bl	80141e0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80132dc:	4804      	ldr	r0, [pc, #16]	@ (80132f0 <TlEvtReceived+0x44>)
 80132de:	f7f0 fc49 	bl	8003b74 <hci_notify_asynch_evt>
  }

  return;
 80132e2:	bf00      	nop
}
 80132e4:	3708      	adds	r7, #8
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}
 80132ea:	bf00      	nop
 80132ec:	20006f9c 	.word	0x20006f9c
 80132f0:	200002e4 	.word	0x200002e4

080132f4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80132f4:	b480      	push	{r7}
 80132f6:	b083      	sub	sp, #12
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	4a05      	ldr	r2, [pc, #20]	@ (8013314 <hci_register_io_bus+0x20>)
 8013300:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	4a04      	ldr	r2, [pc, #16]	@ (8013318 <hci_register_io_bus+0x24>)
 8013306:	611a      	str	r2, [r3, #16]

  return;
 8013308:	bf00      	nop
}
 801330a:	370c      	adds	r7, #12
 801330c:	46bd      	mov	sp, r7
 801330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013312:	4770      	bx	lr
 8013314:	0801360d 	.word	0x0801360d
 8013318:	08013675 	.word	0x08013675

0801331c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b082      	sub	sp, #8
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
 8013324:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	685b      	ldr	r3, [r3, #4]
 801332a:	4a08      	ldr	r2, [pc, #32]	@ (801334c <shci_init+0x30>)
 801332c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 801332e:	4a08      	ldr	r2, [pc, #32]	@ (8013350 <shci_init+0x34>)
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8013334:	4806      	ldr	r0, [pc, #24]	@ (8013350 <shci_init+0x34>)
 8013336:	f000 f915 	bl	8013564 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	4618      	mov	r0, r3
 8013340:	f000 f898 	bl	8013474 <TlInit>

  return;
 8013344:	bf00      	nop
}
 8013346:	3708      	adds	r7, #8
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}
 801334c:	20006fcc 	.word	0x20006fcc
 8013350:	20006fac 	.word	0x20006fac

08013354 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b084      	sub	sp, #16
 8013358:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801335a:	4822      	ldr	r0, [pc, #136]	@ (80133e4 <shci_user_evt_proc+0x90>)
 801335c:	f000 fef8 	bl	8014150 <LST_is_empty>
 8013360:	4603      	mov	r3, r0
 8013362:	2b00      	cmp	r3, #0
 8013364:	d12b      	bne.n	80133be <shci_user_evt_proc+0x6a>
 8013366:	4b20      	ldr	r3, [pc, #128]	@ (80133e8 <shci_user_evt_proc+0x94>)
 8013368:	781b      	ldrb	r3, [r3, #0]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d027      	beq.n	80133be <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801336e:	f107 030c 	add.w	r3, r7, #12
 8013372:	4619      	mov	r1, r3
 8013374:	481b      	ldr	r0, [pc, #108]	@ (80133e4 <shci_user_evt_proc+0x90>)
 8013376:	f000 ff7a 	bl	801426e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 801337a:	4b1c      	ldr	r3, [pc, #112]	@ (80133ec <shci_user_evt_proc+0x98>)
 801337c:	69db      	ldr	r3, [r3, #28]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d00c      	beq.n	801339c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8013386:	2301      	movs	r3, #1
 8013388:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801338a:	4b18      	ldr	r3, [pc, #96]	@ (80133ec <shci_user_evt_proc+0x98>)
 801338c:	69db      	ldr	r3, [r3, #28]
 801338e:	1d3a      	adds	r2, r7, #4
 8013390:	4610      	mov	r0, r2
 8013392:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8013394:	793a      	ldrb	r2, [r7, #4]
 8013396:	4b14      	ldr	r3, [pc, #80]	@ (80133e8 <shci_user_evt_proc+0x94>)
 8013398:	701a      	strb	r2, [r3, #0]
 801339a:	e002      	b.n	80133a2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801339c:	4b12      	ldr	r3, [pc, #72]	@ (80133e8 <shci_user_evt_proc+0x94>)
 801339e:	2201      	movs	r2, #1
 80133a0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80133a2:	4b11      	ldr	r3, [pc, #68]	@ (80133e8 <shci_user_evt_proc+0x94>)
 80133a4:	781b      	ldrb	r3, [r3, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d004      	beq.n	80133b4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	4618      	mov	r0, r3
 80133ae:	f000 fa71 	bl	8013894 <TL_MM_EvtDone>
 80133b2:	e004      	b.n	80133be <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	4619      	mov	r1, r3
 80133b8:	480a      	ldr	r0, [pc, #40]	@ (80133e4 <shci_user_evt_proc+0x90>)
 80133ba:	f000 feeb 	bl	8014194 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80133be:	4809      	ldr	r0, [pc, #36]	@ (80133e4 <shci_user_evt_proc+0x90>)
 80133c0:	f000 fec6 	bl	8014150 <LST_is_empty>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d107      	bne.n	80133da <shci_user_evt_proc+0x86>
 80133ca:	4b07      	ldr	r3, [pc, #28]	@ (80133e8 <shci_user_evt_proc+0x94>)
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d003      	beq.n	80133da <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80133d2:	4804      	ldr	r0, [pc, #16]	@ (80133e4 <shci_user_evt_proc+0x90>)
 80133d4:	f7ee fa8a 	bl	80018ec <shci_notify_asynch_evt>
  }


  return;
 80133d8:	bf00      	nop
 80133da:	bf00      	nop
}
 80133dc:	3710      	adds	r7, #16
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}
 80133e2:	bf00      	nop
 80133e4:	200002f4 	.word	0x200002f4
 80133e8:	20000304 	.word	0x20000304
 80133ec:	20006fac 	.word	0x20006fac

080133f0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b084      	sub	sp, #16
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	60ba      	str	r2, [r7, #8]
 80133f8:	607b      	str	r3, [r7, #4]
 80133fa:	4603      	mov	r3, r0
 80133fc:	81fb      	strh	r3, [r7, #14]
 80133fe:	460b      	mov	r3, r1
 8013400:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8013402:	2000      	movs	r0, #0
 8013404:	f000 f868 	bl	80134d8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8013408:	4b17      	ldr	r3, [pc, #92]	@ (8013468 <shci_send+0x78>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	89fa      	ldrh	r2, [r7, #14]
 801340e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8013412:	4b15      	ldr	r3, [pc, #84]	@ (8013468 <shci_send+0x78>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	7b7a      	ldrb	r2, [r7, #13]
 8013418:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801341a:	4b13      	ldr	r3, [pc, #76]	@ (8013468 <shci_send+0x78>)
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	330c      	adds	r3, #12
 8013420:	7b7a      	ldrb	r2, [r7, #13]
 8013422:	68b9      	ldr	r1, [r7, #8]
 8013424:	4618      	mov	r0, r3
 8013426:	f013 fc84 	bl	8026d32 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 801342a:	4b10      	ldr	r3, [pc, #64]	@ (801346c <shci_send+0x7c>)
 801342c:	2201      	movs	r2, #1
 801342e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8013430:	4b0f      	ldr	r3, [pc, #60]	@ (8013470 <shci_send+0x80>)
 8013432:	691b      	ldr	r3, [r3, #16]
 8013434:	2100      	movs	r1, #0
 8013436:	2000      	movs	r0, #0
 8013438:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 801343a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 801343e:	f7ee fa6d 	bl	800191c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f103 0008 	add.w	r0, r3, #8
 8013448:	4b07      	ldr	r3, [pc, #28]	@ (8013468 <shci_send+0x78>)
 801344a:	6819      	ldr	r1, [r3, #0]
 801344c:	4b06      	ldr	r3, [pc, #24]	@ (8013468 <shci_send+0x78>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	789b      	ldrb	r3, [r3, #2]
 8013452:	3303      	adds	r3, #3
 8013454:	461a      	mov	r2, r3
 8013456:	f013 fc6c 	bl	8026d32 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801345a:	2001      	movs	r0, #1
 801345c:	f000 f83c 	bl	80134d8 <Cmd_SetStatus>

  return;
 8013460:	bf00      	nop
}
 8013462:	3710      	adds	r7, #16
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}
 8013468:	20000300 	.word	0x20000300
 801346c:	20006fd0 	.word	0x20006fd0
 8013470:	20006fac 	.word	0x20006fac

08013474 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b086      	sub	sp, #24
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 801347c:	4a10      	ldr	r2, [pc, #64]	@ (80134c0 <TlInit+0x4c>)
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8013482:	4810      	ldr	r0, [pc, #64]	@ (80134c4 <TlInit+0x50>)
 8013484:	f000 fe54 	bl	8014130 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8013488:	2001      	movs	r0, #1
 801348a:	f000 f825 	bl	80134d8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801348e:	4b0e      	ldr	r3, [pc, #56]	@ (80134c8 <TlInit+0x54>)
 8013490:	2201      	movs	r2, #1
 8013492:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8013494:	4b0d      	ldr	r3, [pc, #52]	@ (80134cc <TlInit+0x58>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d00c      	beq.n	80134b6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80134a0:	4b0b      	ldr	r3, [pc, #44]	@ (80134d0 <TlInit+0x5c>)
 80134a2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80134a4:	4b0b      	ldr	r3, [pc, #44]	@ (80134d4 <TlInit+0x60>)
 80134a6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80134a8:	4b08      	ldr	r3, [pc, #32]	@ (80134cc <TlInit+0x58>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	f107 020c 	add.w	r2, r7, #12
 80134b0:	4610      	mov	r0, r2
 80134b2:	4798      	blx	r3
  }

  return;
 80134b4:	bf00      	nop
 80134b6:	bf00      	nop
}
 80134b8:	3718      	adds	r7, #24
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}
 80134be:	bf00      	nop
 80134c0:	20000300 	.word	0x20000300
 80134c4:	200002f4 	.word	0x200002f4
 80134c8:	20000304 	.word	0x20000304
 80134cc:	20006fac 	.word	0x20006fac
 80134d0:	08013529 	.word	0x08013529
 80134d4:	08013541 	.word	0x08013541

080134d8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	4603      	mov	r3, r0
 80134e0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80134e2:	79fb      	ldrb	r3, [r7, #7]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d10b      	bne.n	8013500 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80134e8:	4b0d      	ldr	r3, [pc, #52]	@ (8013520 <Cmd_SetStatus+0x48>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d003      	beq.n	80134f8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80134f0:	4b0b      	ldr	r3, [pc, #44]	@ (8013520 <Cmd_SetStatus+0x48>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	2000      	movs	r0, #0
 80134f6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80134f8:	4b0a      	ldr	r3, [pc, #40]	@ (8013524 <Cmd_SetStatus+0x4c>)
 80134fa:	2200      	movs	r2, #0
 80134fc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80134fe:	e00b      	b.n	8013518 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8013500:	4b08      	ldr	r3, [pc, #32]	@ (8013524 <Cmd_SetStatus+0x4c>)
 8013502:	2201      	movs	r2, #1
 8013504:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8013506:	4b06      	ldr	r3, [pc, #24]	@ (8013520 <Cmd_SetStatus+0x48>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d004      	beq.n	8013518 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 801350e:	4b04      	ldr	r3, [pc, #16]	@ (8013520 <Cmd_SetStatus+0x48>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	2001      	movs	r0, #1
 8013514:	4798      	blx	r3
  return;
 8013516:	bf00      	nop
 8013518:	bf00      	nop
}
 801351a:	3708      	adds	r7, #8
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}
 8013520:	20006fcc 	.word	0x20006fcc
 8013524:	200002fc 	.word	0x200002fc

08013528 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8013530:	2000      	movs	r0, #0
 8013532:	f7ee f9e8 	bl	8001906 <shci_cmd_resp_release>

  return;
 8013536:	bf00      	nop
}
 8013538:	3708      	adds	r7, #8
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}
	...

08013540 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b082      	sub	sp, #8
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8013548:	6879      	ldr	r1, [r7, #4]
 801354a:	4805      	ldr	r0, [pc, #20]	@ (8013560 <TlUserEvtReceived+0x20>)
 801354c:	f000 fe48 	bl	80141e0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8013550:	4803      	ldr	r0, [pc, #12]	@ (8013560 <TlUserEvtReceived+0x20>)
 8013552:	f7ee f9cb 	bl	80018ec <shci_notify_asynch_evt>

  return;
 8013556:	bf00      	nop
}
 8013558:	3708      	adds	r7, #8
 801355a:	46bd      	mov	sp, r7
 801355c:	bd80      	pop	{r7, pc}
 801355e:	bf00      	nop
 8013560:	200002f4 	.word	0x200002f4

08013564 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8013564:	b480      	push	{r7}
 8013566:	b083      	sub	sp, #12
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	4a05      	ldr	r2, [pc, #20]	@ (8013584 <shci_register_io_bus+0x20>)
 8013570:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	4a04      	ldr	r2, [pc, #16]	@ (8013588 <shci_register_io_bus+0x24>)
 8013576:	611a      	str	r2, [r3, #16]

  return;
 8013578:	bf00      	nop
}
 801357a:	370c      	adds	r7, #12
 801357c:	46bd      	mov	sp, r7
 801357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013582:	4770      	bx	lr
 8013584:	08013721 	.word	0x08013721
 8013588:	08013775 	.word	0x08013775

0801358c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 801358c:	b580      	push	{r7, lr}
 801358e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8013590:	f7f2 ffca 	bl	8006528 <HW_IPCC_Enable>

  return;
 8013594:	bf00      	nop
}
 8013596:	bd80      	pop	{r7, pc}

08013598 <TL_Init>:


void TL_Init( void )
{
 8013598:	b580      	push	{r7, lr}
 801359a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 801359c:	4b10      	ldr	r3, [pc, #64]	@ (80135e0 <TL_Init+0x48>)
 801359e:	4a11      	ldr	r2, [pc, #68]	@ (80135e4 <TL_Init+0x4c>)
 80135a0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80135a2:	4b0f      	ldr	r3, [pc, #60]	@ (80135e0 <TL_Init+0x48>)
 80135a4:	4a10      	ldr	r2, [pc, #64]	@ (80135e8 <TL_Init+0x50>)
 80135a6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80135a8:	4b0d      	ldr	r3, [pc, #52]	@ (80135e0 <TL_Init+0x48>)
 80135aa:	4a10      	ldr	r2, [pc, #64]	@ (80135ec <TL_Init+0x54>)
 80135ac:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80135ae:	4b0c      	ldr	r3, [pc, #48]	@ (80135e0 <TL_Init+0x48>)
 80135b0:	4a0f      	ldr	r2, [pc, #60]	@ (80135f0 <TL_Init+0x58>)
 80135b2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80135b4:	4b0a      	ldr	r3, [pc, #40]	@ (80135e0 <TL_Init+0x48>)
 80135b6:	4a0f      	ldr	r2, [pc, #60]	@ (80135f4 <TL_Init+0x5c>)
 80135b8:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80135ba:	4b09      	ldr	r3, [pc, #36]	@ (80135e0 <TL_Init+0x48>)
 80135bc:	4a0e      	ldr	r2, [pc, #56]	@ (80135f8 <TL_Init+0x60>)
 80135be:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80135c0:	4b07      	ldr	r3, [pc, #28]	@ (80135e0 <TL_Init+0x48>)
 80135c2:	4a0e      	ldr	r2, [pc, #56]	@ (80135fc <TL_Init+0x64>)
 80135c4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80135c6:	4b06      	ldr	r3, [pc, #24]	@ (80135e0 <TL_Init+0x48>)
 80135c8:	4a0d      	ldr	r2, [pc, #52]	@ (8013600 <TL_Init+0x68>)
 80135ca:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80135cc:	4b04      	ldr	r3, [pc, #16]	@ (80135e0 <TL_Init+0x48>)
 80135ce:	4a0d      	ldr	r2, [pc, #52]	@ (8013604 <TL_Init+0x6c>)
 80135d0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80135d2:	4b03      	ldr	r3, [pc, #12]	@ (80135e0 <TL_Init+0x48>)
 80135d4:	4a0c      	ldr	r2, [pc, #48]	@ (8013608 <TL_Init+0x70>)
 80135d6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80135d8:	f7f2 ffba 	bl	8006550 <HW_IPCC_Init>

  return;
 80135dc:	bf00      	nop
}
 80135de:	bd80      	pop	{r7, pc}
 80135e0:	20030000 	.word	0x20030000
 80135e4:	20030134 	.word	0x20030134
 80135e8:	20030154 	.word	0x20030154
 80135ec:	20030164 	.word	0x20030164
 80135f0:	20030174 	.word	0x20030174
 80135f4:	2003017c 	.word	0x2003017c
 80135f8:	20030184 	.word	0x20030184
 80135fc:	2003018c 	.word	0x2003018c
 8013600:	200301a8 	.word	0x200301a8
 8013604:	200301ac 	.word	0x200301ac
 8013608:	200301b8 	.word	0x200301b8

0801360c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b084      	sub	sp, #16
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8013618:	4811      	ldr	r0, [pc, #68]	@ (8013660 <TL_BLE_Init+0x54>)
 801361a:	f000 fd89 	bl	8014130 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 801361e:	4b11      	ldr	r3, [pc, #68]	@ (8013664 <TL_BLE_Init+0x58>)
 8013620:	685b      	ldr	r3, [r3, #4]
 8013622:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	689a      	ldr	r2, [r3, #8]
 8013628:	68bb      	ldr	r3, [r7, #8]
 801362a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	68da      	ldr	r2, [r3, #12]
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	4a0c      	ldr	r2, [pc, #48]	@ (8013668 <TL_BLE_Init+0x5c>)
 8013638:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	4a08      	ldr	r2, [pc, #32]	@ (8013660 <TL_BLE_Init+0x54>)
 801363e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8013640:	f7f2 ff9c 	bl	800657c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	4a08      	ldr	r2, [pc, #32]	@ (801366c <TL_BLE_Init+0x60>)
 801364a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	685b      	ldr	r3, [r3, #4]
 8013650:	4a07      	ldr	r2, [pc, #28]	@ (8013670 <TL_BLE_Init+0x64>)
 8013652:	6013      	str	r3, [r2, #0]

  return 0;
 8013654:	2300      	movs	r3, #0
}
 8013656:	4618      	mov	r0, r3
 8013658:	3710      	adds	r7, #16
 801365a:	46bd      	mov	sp, r7
 801365c:	bd80      	pop	{r7, pc}
 801365e:	bf00      	nop
 8013660:	200301d4 	.word	0x200301d4
 8013664:	20030000 	.word	0x20030000
 8013668:	20030a58 	.word	0x20030a58
 801366c:	20006fdc 	.word	0x20006fdc
 8013670:	20006fe0 	.word	0x20006fe0

08013674 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b082      	sub	sp, #8
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	460b      	mov	r3, r1
 801367e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8013680:	4b09      	ldr	r3, [pc, #36]	@ (80136a8 <TL_BLE_SendCmd+0x34>)
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	2201      	movs	r2, #1
 8013688:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 801368a:	4b07      	ldr	r3, [pc, #28]	@ (80136a8 <TL_BLE_SendCmd+0x34>)
 801368c:	685b      	ldr	r3, [r3, #4]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	4619      	mov	r1, r3
 8013692:	2001      	movs	r0, #1
 8013694:	f000 f96c 	bl	8013970 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8013698:	f7f2 ff7a 	bl	8006590 <HW_IPCC_BLE_SendCmd>

  return 0;
 801369c:	2300      	movs	r3, #0
}
 801369e:	4618      	mov	r0, r3
 80136a0:	3708      	adds	r7, #8
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}
 80136a6:	bf00      	nop
 80136a8:	20030000 	.word	0x20030000

080136ac <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b082      	sub	sp, #8
 80136b0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80136b2:	e01c      	b.n	80136ee <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80136b4:	1d3b      	adds	r3, r7, #4
 80136b6:	4619      	mov	r1, r3
 80136b8:	4812      	ldr	r0, [pc, #72]	@ (8013704 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80136ba:	f000 fdd8 	bl	801426e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	7a5b      	ldrb	r3, [r3, #9]
 80136c2:	2b0f      	cmp	r3, #15
 80136c4:	d003      	beq.n	80136ce <HW_IPCC_BLE_RxEvtNot+0x22>
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	7a5b      	ldrb	r3, [r3, #9]
 80136ca:	2b0e      	cmp	r3, #14
 80136cc:	d105      	bne.n	80136da <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	4619      	mov	r1, r3
 80136d2:	2002      	movs	r0, #2
 80136d4:	f000 f94c 	bl	8013970 <OutputDbgTrace>
 80136d8:	e004      	b.n	80136e4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	4619      	mov	r1, r3
 80136de:	2003      	movs	r0, #3
 80136e0:	f000 f946 	bl	8013970 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80136e4:	4b08      	ldr	r3, [pc, #32]	@ (8013708 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	687a      	ldr	r2, [r7, #4]
 80136ea:	4610      	mov	r0, r2
 80136ec:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80136ee:	4805      	ldr	r0, [pc, #20]	@ (8013704 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80136f0:	f000 fd2e 	bl	8014150 <LST_is_empty>
 80136f4:	4603      	mov	r3, r0
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d0dc      	beq.n	80136b4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80136fa:	bf00      	nop
}
 80136fc:	3708      	adds	r7, #8
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}
 8013702:	bf00      	nop
 8013704:	200301d4 	.word	0x200301d4
 8013708:	20006fdc 	.word	0x20006fdc

0801370c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8013710:	4b02      	ldr	r3, [pc, #8]	@ (801371c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	4798      	blx	r3

  return;
 8013716:	bf00      	nop
}
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	20006fe0 	.word	0x20006fe0

08013720 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b084      	sub	sp, #16
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 801372c:	480d      	ldr	r0, [pc, #52]	@ (8013764 <TL_SYS_Init+0x44>)
 801372e:	f000 fcff 	bl	8014130 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8013732:	4b0d      	ldr	r3, [pc, #52]	@ (8013768 <TL_SYS_Init+0x48>)
 8013734:	68db      	ldr	r3, [r3, #12]
 8013736:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	689a      	ldr	r2, [r3, #8]
 801373c:	68bb      	ldr	r3, [r7, #8]
 801373e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	4a08      	ldr	r2, [pc, #32]	@ (8013764 <TL_SYS_Init+0x44>)
 8013744:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8013746:	f7f2 ff45 	bl	80065d4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	4a07      	ldr	r2, [pc, #28]	@ (801376c <TL_SYS_Init+0x4c>)
 8013750:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	685b      	ldr	r3, [r3, #4]
 8013756:	4a06      	ldr	r2, [pc, #24]	@ (8013770 <TL_SYS_Init+0x50>)
 8013758:	6013      	str	r3, [r2, #0]

  return 0;
 801375a:	2300      	movs	r3, #0
}
 801375c:	4618      	mov	r0, r3
 801375e:	3710      	adds	r7, #16
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}
 8013764:	200301dc 	.word	0x200301dc
 8013768:	20030000 	.word	0x20030000
 801376c:	20006fe4 	.word	0x20006fe4
 8013770:	20006fe8 	.word	0x20006fe8

08013774 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b082      	sub	sp, #8
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
 801377c:	460b      	mov	r3, r1
 801377e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8013780:	4b09      	ldr	r3, [pc, #36]	@ (80137a8 <TL_SYS_SendCmd+0x34>)
 8013782:	68db      	ldr	r3, [r3, #12]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	2210      	movs	r2, #16
 8013788:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 801378a:	4b07      	ldr	r3, [pc, #28]	@ (80137a8 <TL_SYS_SendCmd+0x34>)
 801378c:	68db      	ldr	r3, [r3, #12]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	4619      	mov	r1, r3
 8013792:	2004      	movs	r0, #4
 8013794:	f000 f8ec 	bl	8013970 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8013798:	f7f2 ff26 	bl	80065e8 <HW_IPCC_SYS_SendCmd>

  return 0;
 801379c:	2300      	movs	r3, #0
}
 801379e:	4618      	mov	r0, r3
 80137a0:	3708      	adds	r7, #8
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}
 80137a6:	bf00      	nop
 80137a8:	20030000 	.word	0x20030000

080137ac <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80137b0:	4b07      	ldr	r3, [pc, #28]	@ (80137d0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	4619      	mov	r1, r3
 80137b8:	2005      	movs	r0, #5
 80137ba:	f000 f8d9 	bl	8013970 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80137be:	4b05      	ldr	r3, [pc, #20]	@ (80137d4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	4a03      	ldr	r2, [pc, #12]	@ (80137d0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80137c4:	68d2      	ldr	r2, [r2, #12]
 80137c6:	6812      	ldr	r2, [r2, #0]
 80137c8:	4610      	mov	r0, r2
 80137ca:	4798      	blx	r3

  return;
 80137cc:	bf00      	nop
}
 80137ce:	bd80      	pop	{r7, pc}
 80137d0:	20030000 	.word	0x20030000
 80137d4:	20006fe4 	.word	0x20006fe4

080137d8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b082      	sub	sp, #8
 80137dc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80137de:	e00e      	b.n	80137fe <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80137e0:	1d3b      	adds	r3, r7, #4
 80137e2:	4619      	mov	r1, r3
 80137e4:	480b      	ldr	r0, [pc, #44]	@ (8013814 <HW_IPCC_SYS_EvtNot+0x3c>)
 80137e6:	f000 fd42 	bl	801426e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4619      	mov	r1, r3
 80137ee:	2006      	movs	r0, #6
 80137f0:	f000 f8be 	bl	8013970 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80137f4:	4b08      	ldr	r3, [pc, #32]	@ (8013818 <HW_IPCC_SYS_EvtNot+0x40>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	687a      	ldr	r2, [r7, #4]
 80137fa:	4610      	mov	r0, r2
 80137fc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80137fe:	4805      	ldr	r0, [pc, #20]	@ (8013814 <HW_IPCC_SYS_EvtNot+0x3c>)
 8013800:	f000 fca6 	bl	8014150 <LST_is_empty>
 8013804:	4603      	mov	r3, r0
 8013806:	2b00      	cmp	r3, #0
 8013808:	d0ea      	beq.n	80137e0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 801380a:	bf00      	nop
}
 801380c:	3708      	adds	r7, #8
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	200301dc 	.word	0x200301dc
 8013818:	20006fe8 	.word	0x20006fe8

0801381c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b082      	sub	sp, #8
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8013824:	4817      	ldr	r0, [pc, #92]	@ (8013884 <TL_MM_Init+0x68>)
 8013826:	f000 fc83 	bl	8014130 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801382a:	4817      	ldr	r0, [pc, #92]	@ (8013888 <TL_MM_Init+0x6c>)
 801382c:	f000 fc80 	bl	8014130 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8013830:	4b16      	ldr	r3, [pc, #88]	@ (801388c <TL_MM_Init+0x70>)
 8013832:	691b      	ldr	r3, [r3, #16]
 8013834:	4a16      	ldr	r2, [pc, #88]	@ (8013890 <TL_MM_Init+0x74>)
 8013836:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8013838:	4b15      	ldr	r3, [pc, #84]	@ (8013890 <TL_MM_Init+0x74>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	687a      	ldr	r2, [r7, #4]
 801383e:	6892      	ldr	r2, [r2, #8]
 8013840:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8013842:	4b13      	ldr	r3, [pc, #76]	@ (8013890 <TL_MM_Init+0x74>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	687a      	ldr	r2, [r7, #4]
 8013848:	68d2      	ldr	r2, [r2, #12]
 801384a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 801384c:	4b10      	ldr	r3, [pc, #64]	@ (8013890 <TL_MM_Init+0x74>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	4a0c      	ldr	r2, [pc, #48]	@ (8013884 <TL_MM_Init+0x68>)
 8013852:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8013854:	4b0e      	ldr	r3, [pc, #56]	@ (8013890 <TL_MM_Init+0x74>)
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	687a      	ldr	r2, [r7, #4]
 801385a:	6812      	ldr	r2, [r2, #0]
 801385c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801385e:	4b0c      	ldr	r3, [pc, #48]	@ (8013890 <TL_MM_Init+0x74>)
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	687a      	ldr	r2, [r7, #4]
 8013864:	6852      	ldr	r2, [r2, #4]
 8013866:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8013868:	4b09      	ldr	r3, [pc, #36]	@ (8013890 <TL_MM_Init+0x74>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	687a      	ldr	r2, [r7, #4]
 801386e:	6912      	ldr	r2, [r2, #16]
 8013870:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8013872:	4b07      	ldr	r3, [pc, #28]	@ (8013890 <TL_MM_Init+0x74>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	687a      	ldr	r2, [r7, #4]
 8013878:	6952      	ldr	r2, [r2, #20]
 801387a:	619a      	str	r2, [r3, #24]

  return;
 801387c:	bf00      	nop
}
 801387e:	3708      	adds	r7, #8
 8013880:	46bd      	mov	sp, r7
 8013882:	bd80      	pop	{r7, pc}
 8013884:	200301c4 	.word	0x200301c4
 8013888:	20006fd4 	.word	0x20006fd4
 801388c:	20030000 	.word	0x20030000
 8013890:	20006fec 	.word	0x20006fec

08013894 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b082      	sub	sp, #8
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 801389c:	6879      	ldr	r1, [r7, #4]
 801389e:	4807      	ldr	r0, [pc, #28]	@ (80138bc <TL_MM_EvtDone+0x28>)
 80138a0:	f000 fc9e 	bl	80141e0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80138a4:	6879      	ldr	r1, [r7, #4]
 80138a6:	2000      	movs	r0, #0
 80138a8:	f000 f862 	bl	8013970 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80138ac:	4804      	ldr	r0, [pc, #16]	@ (80138c0 <TL_MM_EvtDone+0x2c>)
 80138ae:	f7f2 fec1 	bl	8006634 <HW_IPCC_MM_SendFreeBuf>

  return;
 80138b2:	bf00      	nop
}
 80138b4:	3708      	adds	r7, #8
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}
 80138ba:	bf00      	nop
 80138bc:	20006fd4 	.word	0x20006fd4
 80138c0:	080138c5 	.word	0x080138c5

080138c4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b082      	sub	sp, #8
 80138c8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80138ca:	e00c      	b.n	80138e6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80138cc:	1d3b      	adds	r3, r7, #4
 80138ce:	4619      	mov	r1, r3
 80138d0:	480a      	ldr	r0, [pc, #40]	@ (80138fc <SendFreeBuf+0x38>)
 80138d2:	f000 fccc 	bl	801426e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80138d6:	4b0a      	ldr	r3, [pc, #40]	@ (8013900 <SendFreeBuf+0x3c>)
 80138d8:	691b      	ldr	r3, [r3, #16]
 80138da:	691b      	ldr	r3, [r3, #16]
 80138dc:	687a      	ldr	r2, [r7, #4]
 80138de:	4611      	mov	r1, r2
 80138e0:	4618      	mov	r0, r3
 80138e2:	f000 fc7d 	bl	80141e0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80138e6:	4805      	ldr	r0, [pc, #20]	@ (80138fc <SendFreeBuf+0x38>)
 80138e8:	f000 fc32 	bl	8014150 <LST_is_empty>
 80138ec:	4603      	mov	r3, r0
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d0ec      	beq.n	80138cc <SendFreeBuf+0x8>
  }

  return;
 80138f2:	bf00      	nop
}
 80138f4:	3708      	adds	r7, #8
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd80      	pop	{r7, pc}
 80138fa:	bf00      	nop
 80138fc:	20006fd4 	.word	0x20006fd4
 8013900:	20030000 	.word	0x20030000

08013904 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8013904:	b580      	push	{r7, lr}
 8013906:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8013908:	4805      	ldr	r0, [pc, #20]	@ (8013920 <TL_TRACES_Init+0x1c>)
 801390a:	f000 fc11 	bl	8014130 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 801390e:	4b05      	ldr	r3, [pc, #20]	@ (8013924 <TL_TRACES_Init+0x20>)
 8013910:	695b      	ldr	r3, [r3, #20]
 8013912:	4a03      	ldr	r2, [pc, #12]	@ (8013920 <TL_TRACES_Init+0x1c>)
 8013914:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8013916:	f7f2 fec3 	bl	80066a0 <HW_IPCC_TRACES_Init>

  return;
 801391a:	bf00      	nop
}
 801391c:	bd80      	pop	{r7, pc}
 801391e:	bf00      	nop
 8013920:	200301cc 	.word	0x200301cc
 8013924:	20030000 	.word	0x20030000

08013928 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801392e:	e008      	b.n	8013942 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8013930:	1d3b      	adds	r3, r7, #4
 8013932:	4619      	mov	r1, r3
 8013934:	4808      	ldr	r0, [pc, #32]	@ (8013958 <HW_IPCC_TRACES_EvtNot+0x30>)
 8013936:	f000 fc9a 	bl	801426e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	4618      	mov	r0, r3
 801393e:	f000 f80d 	bl	801395c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8013942:	4805      	ldr	r0, [pc, #20]	@ (8013958 <HW_IPCC_TRACES_EvtNot+0x30>)
 8013944:	f000 fc04 	bl	8014150 <LST_is_empty>
 8013948:	4603      	mov	r3, r0
 801394a:	2b00      	cmp	r3, #0
 801394c:	d0f0      	beq.n	8013930 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 801394e:	bf00      	nop
}
 8013950:	3708      	adds	r7, #8
 8013952:	46bd      	mov	sp, r7
 8013954:	bd80      	pop	{r7, pc}
 8013956:	bf00      	nop
 8013958:	200301cc 	.word	0x200301cc

0801395c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 801395c:	b480      	push	{r7}
 801395e:	b083      	sub	sp, #12
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8013964:	bf00      	nop
 8013966:	370c      	adds	r7, #12
 8013968:	46bd      	mov	sp, r7
 801396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396e:	4770      	bx	lr

08013970 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8013970:	b480      	push	{r7}
 8013972:	b085      	sub	sp, #20
 8013974:	af00      	add	r7, sp, #0
 8013976:	4603      	mov	r3, r0
 8013978:	6039      	str	r1, [r7, #0]
 801397a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 801397c:	79fb      	ldrb	r3, [r7, #7]
 801397e:	2b06      	cmp	r3, #6
 8013980:	d845      	bhi.n	8013a0e <OutputDbgTrace+0x9e>
 8013982:	a201      	add	r2, pc, #4	@ (adr r2, 8013988 <OutputDbgTrace+0x18>)
 8013984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013988:	080139a5 	.word	0x080139a5
 801398c:	080139c9 	.word	0x080139c9
 8013990:	080139cf 	.word	0x080139cf
 8013994:	080139e3 	.word	0x080139e3
 8013998:	080139ef 	.word	0x080139ef
 801399c:	080139f5 	.word	0x080139f5
 80139a0:	08013a03 	.word	0x08013a03
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	7a5b      	ldrb	r3, [r3, #9]
 80139ac:	2bff      	cmp	r3, #255	@ 0xff
 80139ae:	d005      	beq.n	80139bc <OutputDbgTrace+0x4c>
 80139b0:	2bff      	cmp	r3, #255	@ 0xff
 80139b2:	dc05      	bgt.n	80139c0 <OutputDbgTrace+0x50>
 80139b4:	2b0e      	cmp	r3, #14
 80139b6:	d005      	beq.n	80139c4 <OutputDbgTrace+0x54>
 80139b8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80139ba:	e001      	b.n	80139c0 <OutputDbgTrace+0x50>
          break;
 80139bc:	bf00      	nop
 80139be:	e027      	b.n	8013a10 <OutputDbgTrace+0xa0>
          break;
 80139c0:	bf00      	nop
 80139c2:	e025      	b.n	8013a10 <OutputDbgTrace+0xa0>
          break;
 80139c4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80139c6:	e023      	b.n	8013a10 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80139c8:	683b      	ldr	r3, [r7, #0]
 80139ca:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80139cc:	e020      	b.n	8013a10 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	7a5b      	ldrb	r3, [r3, #9]
 80139d6:	2b0e      	cmp	r3, #14
 80139d8:	d001      	beq.n	80139de <OutputDbgTrace+0x6e>
 80139da:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80139dc:	e000      	b.n	80139e0 <OutputDbgTrace+0x70>
          break;
 80139de:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80139e0:	e016      	b.n	8013a10 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	7a5b      	ldrb	r3, [r3, #9]
 80139ea:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80139ec:	e010      	b.n	8013a10 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80139f2:	e00d      	b.n	8013a10 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	7a5b      	ldrb	r3, [r3, #9]
 80139fc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80139fe:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8013a00:	e006      	b.n	8013a10 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8013a02:	683b      	ldr	r3, [r7, #0]
 8013a04:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	7a5b      	ldrb	r3, [r3, #9]
 8013a0a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8013a0c:	e000      	b.n	8013a10 <OutputDbgTrace+0xa0>

    default:
      break;
 8013a0e:	bf00      	nop
  }

  return;
 8013a10:	bf00      	nop
}
 8013a12:	3714      	adds	r7, #20
 8013a14:	46bd      	mov	sp, r7
 8013a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1a:	4770      	bx	lr

08013a1c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b086      	sub	sp, #24
 8013a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a22:	f3ef 8310 	mrs	r3, PRIMASK
 8013a26:	60fb      	str	r3, [r7, #12]
  return(result);
 8013a28:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8013a2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013a2c:	b672      	cpsid	i
}
 8013a2e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8013a30:	1cbb      	adds	r3, r7, #2
 8013a32:	4619      	mov	r1, r3
 8013a34:	4812      	ldr	r0, [pc, #72]	@ (8013a80 <DbgTrace_TxCpltCallback+0x64>)
 8013a36:	f000 fe91 	bl	801475c <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8013a3a:	1cbb      	adds	r3, r7, #2
 8013a3c:	4619      	mov	r1, r3
 8013a3e:	4810      	ldr	r0, [pc, #64]	@ (8013a80 <DbgTrace_TxCpltCallback+0x64>)
 8013a40:	f000 ff7b 	bl	801493a <CircularQueue_Sense>
 8013a44:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d00c      	beq.n	8013a66 <DbgTrace_TxCpltCallback+0x4a>
 8013a4c:	697b      	ldr	r3, [r7, #20]
 8013a4e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	f383 8810 	msr	PRIMASK, r3
}
 8013a56:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8013a58:	887b      	ldrh	r3, [r7, #2]
 8013a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8013a84 <DbgTrace_TxCpltCallback+0x68>)
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	6938      	ldr	r0, [r7, #16]
 8013a60:	f7ed fb2a 	bl	80010b8 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8013a64:	e008      	b.n	8013a78 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8013a66:	4b08      	ldr	r3, [pc, #32]	@ (8013a88 <DbgTrace_TxCpltCallback+0x6c>)
 8013a68:	2201      	movs	r2, #1
 8013a6a:	701a      	strb	r2, [r3, #0]
 8013a6c:	697b      	ldr	r3, [r7, #20]
 8013a6e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f383 8810 	msr	PRIMASK, r3
}
 8013a76:	bf00      	nop
}
 8013a78:	bf00      	nop
 8013a7a:	3718      	adds	r7, #24
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}
 8013a80:	20006ff0 	.word	0x20006ff0
 8013a84:	08013a1d 	.word	0x08013a1d
 8013a88:	200000d4 	.word	0x200000d4

08013a8c <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8013a92:	f7ed fb0a 	bl	80010aa <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8013a96:	2302      	movs	r3, #2
 8013a98:	9300      	str	r3, [sp, #0]
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8013aa0:	4903      	ldr	r1, [pc, #12]	@ (8013ab0 <DbgTraceInit+0x24>)
 8013aa2:	4804      	ldr	r0, [pc, #16]	@ (8013ab4 <DbgTraceInit+0x28>)
 8013aa4:	f000 fc02 	bl	80142ac <CircularQueue_Init>
#endif 
#endif
  return;
 8013aa8:	bf00      	nop
}
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}
 8013aae:	bf00      	nop
 8013ab0:	20007010 	.word	0x20007010
 8013ab4:	20006ff0 	.word	0x20006ff0

08013ab8 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b084      	sub	sp, #16
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	60f8      	str	r0, [r7, #12]
 8013ac0:	60b9      	str	r1, [r7, #8]
 8013ac2:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8013ac4:	687a      	ldr	r2, [r7, #4]
 8013ac6:	68b9      	ldr	r1, [r7, #8]
 8013ac8:	68f8      	ldr	r0, [r7, #12]
 8013aca:	f000 f805 	bl	8013ad8 <DbgTraceWrite>
 8013ace:	4603      	mov	r3, r0
}
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	3710      	adds	r7, #16
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}

08013ad8 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b08a      	sub	sp, #40	@ 0x28
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	60f8      	str	r0, [r7, #12]
 8013ae0:	60b9      	str	r1, [r7, #8]
 8013ae2:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8013aec:	61bb      	str	r3, [r7, #24]
  return(result);
 8013aee:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8013af0:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013af8:	d102      	bne.n	8013b00 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8013afa:	2300      	movs	r3, #0
 8013afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8013afe:	e037      	b.n	8013b70 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	2b01      	cmp	r3, #1
 8013b04:	d006      	beq.n	8013b14 <DbgTraceWrite+0x3c>
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	2b02      	cmp	r3, #2
 8013b0a:	d003      	beq.n	8013b14 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8013b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8013b12:	e02d      	b.n	8013b70 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d02a      	beq.n	8013b70 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8013b1e:	b672      	cpsid	i
}
 8013b20:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	b29a      	uxth	r2, r3
 8013b26:	2301      	movs	r3, #1
 8013b28:	68b9      	ldr	r1, [r7, #8]
 8013b2a:	4814      	ldr	r0, [pc, #80]	@ (8013b7c <DbgTraceWrite+0xa4>)
 8013b2c:	f000 fbf0 	bl	8014310 <CircularQueue_Add>
 8013b30:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8013b32:	69fb      	ldr	r3, [r7, #28]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d015      	beq.n	8013b64 <DbgTraceWrite+0x8c>
 8013b38:	4b11      	ldr	r3, [pc, #68]	@ (8013b80 <DbgTraceWrite+0xa8>)
 8013b3a:	781b      	ldrb	r3, [r3, #0]
 8013b3c:	b2db      	uxtb	r3, r3
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d010      	beq.n	8013b64 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8013b42:	4b0f      	ldr	r3, [pc, #60]	@ (8013b80 <DbgTraceWrite+0xa8>)
 8013b44:	2200      	movs	r2, #0
 8013b46:	701a      	strb	r2, [r3, #0]
 8013b48:	6a3b      	ldr	r3, [r7, #32]
 8013b4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b4c:	697b      	ldr	r3, [r7, #20]
 8013b4e:	f383 8810 	msr	PRIMASK, r3
}
 8013b52:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	b29b      	uxth	r3, r3
 8013b58:	4a0a      	ldr	r2, [pc, #40]	@ (8013b84 <DbgTraceWrite+0xac>)
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	69f8      	ldr	r0, [r7, #28]
 8013b5e:	f7ed faab 	bl	80010b8 <DbgOutputTraces>
 8013b62:	e005      	b.n	8013b70 <DbgTraceWrite+0x98>
 8013b64:	6a3b      	ldr	r3, [r7, #32]
 8013b66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b68:	693b      	ldr	r3, [r7, #16]
 8013b6a:	f383 8810 	msr	PRIMASK, r3
}
 8013b6e:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8013b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	3728      	adds	r7, #40	@ 0x28
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}
 8013b7a:	bf00      	nop
 8013b7c:	20006ff0 	.word	0x20006ff0
 8013b80:	200000d4 	.word	0x200000d4
 8013b84:	08013a1d 	.word	0x08013a1d

08013b88 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8013b88:	b480      	push	{r7}
 8013b8a:	b085      	sub	sp, #20
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	4603      	mov	r3, r0
 8013b90:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8013b92:	4b0f      	ldr	r3, [pc, #60]	@ (8013bd0 <OTP_Read+0x48>)
 8013b94:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8013b96:	e002      	b.n	8013b9e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	3b08      	subs	r3, #8
 8013b9c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	3307      	adds	r3, #7
 8013ba2:	781b      	ldrb	r3, [r3, #0]
 8013ba4:	79fa      	ldrb	r2, [r7, #7]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d003      	beq.n	8013bb2 <OTP_Read+0x2a>
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	4a09      	ldr	r2, [pc, #36]	@ (8013bd4 <OTP_Read+0x4c>)
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	d1f2      	bne.n	8013b98 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	3307      	adds	r3, #7
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	79fa      	ldrb	r2, [r7, #7]
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d001      	beq.n	8013bc2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
}
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	3714      	adds	r7, #20
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bce:	4770      	bx	lr
 8013bd0:	1fff73f8 	.word	0x1fff73f8
 8013bd4:	1fff7000 	.word	0x1fff7000

08013bd8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8013bd8:	b480      	push	{r7}
 8013bda:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013bdc:	4b05      	ldr	r3, [pc, #20]	@ (8013bf4 <UTIL_LPM_Init+0x1c>)
 8013bde:	2200      	movs	r2, #0
 8013be0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013be2:	4b05      	ldr	r3, [pc, #20]	@ (8013bf8 <UTIL_LPM_Init+0x20>)
 8013be4:	2200      	movs	r2, #0
 8013be6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8013be8:	bf00      	nop
 8013bea:	46bd      	mov	sp, r7
 8013bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf0:	4770      	bx	lr
 8013bf2:	bf00      	nop
 8013bf4:	20008010 	.word	0x20008010
 8013bf8:	20008014 	.word	0x20008014

08013bfc <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8013bfc:	b480      	push	{r7}
 8013bfe:	b087      	sub	sp, #28
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
 8013c04:	460b      	mov	r3, r1
 8013c06:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c08:	f3ef 8310 	mrs	r3, PRIMASK
 8013c0c:	613b      	str	r3, [r7, #16]
  return(result);
 8013c0e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013c10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c12:	b672      	cpsid	i
}
 8013c14:	bf00      	nop
  
  switch( state )
 8013c16:	78fb      	ldrb	r3, [r7, #3]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d008      	beq.n	8013c2e <UTIL_LPM_SetStopMode+0x32>
 8013c1c:	2b01      	cmp	r3, #1
 8013c1e:	d10e      	bne.n	8013c3e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8013c20:	4b0d      	ldr	r3, [pc, #52]	@ (8013c58 <UTIL_LPM_SetStopMode+0x5c>)
 8013c22:	681a      	ldr	r2, [r3, #0]
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	4313      	orrs	r3, r2
 8013c28:	4a0b      	ldr	r2, [pc, #44]	@ (8013c58 <UTIL_LPM_SetStopMode+0x5c>)
 8013c2a:	6013      	str	r3, [r2, #0]
      break;
 8013c2c:	e008      	b.n	8013c40 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	43da      	mvns	r2, r3
 8013c32:	4b09      	ldr	r3, [pc, #36]	@ (8013c58 <UTIL_LPM_SetStopMode+0x5c>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	4013      	ands	r3, r2
 8013c38:	4a07      	ldr	r2, [pc, #28]	@ (8013c58 <UTIL_LPM_SetStopMode+0x5c>)
 8013c3a:	6013      	str	r3, [r2, #0]
      break;
 8013c3c:	e000      	b.n	8013c40 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8013c3e:	bf00      	nop
 8013c40:	697b      	ldr	r3, [r7, #20]
 8013c42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	f383 8810 	msr	PRIMASK, r3
}
 8013c4a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013c4c:	bf00      	nop
 8013c4e:	371c      	adds	r7, #28
 8013c50:	46bd      	mov	sp, r7
 8013c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c56:	4770      	bx	lr
 8013c58:	20008010 	.word	0x20008010

08013c5c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8013c5c:	b480      	push	{r7}
 8013c5e:	b087      	sub	sp, #28
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
 8013c64:	460b      	mov	r3, r1
 8013c66:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c68:	f3ef 8310 	mrs	r3, PRIMASK
 8013c6c:	613b      	str	r3, [r7, #16]
  return(result);
 8013c6e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013c70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013c72:	b672      	cpsid	i
}
 8013c74:	bf00      	nop
  
  switch(state)
 8013c76:	78fb      	ldrb	r3, [r7, #3]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d008      	beq.n	8013c8e <UTIL_LPM_SetOffMode+0x32>
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	d10e      	bne.n	8013c9e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8013c80:	4b0d      	ldr	r3, [pc, #52]	@ (8013cb8 <UTIL_LPM_SetOffMode+0x5c>)
 8013c82:	681a      	ldr	r2, [r3, #0]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	4313      	orrs	r3, r2
 8013c88:	4a0b      	ldr	r2, [pc, #44]	@ (8013cb8 <UTIL_LPM_SetOffMode+0x5c>)
 8013c8a:	6013      	str	r3, [r2, #0]
      break;
 8013c8c:	e008      	b.n	8013ca0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	43da      	mvns	r2, r3
 8013c92:	4b09      	ldr	r3, [pc, #36]	@ (8013cb8 <UTIL_LPM_SetOffMode+0x5c>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	4013      	ands	r3, r2
 8013c98:	4a07      	ldr	r2, [pc, #28]	@ (8013cb8 <UTIL_LPM_SetOffMode+0x5c>)
 8013c9a:	6013      	str	r3, [r2, #0]
      break;
 8013c9c:	e000      	b.n	8013ca0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8013c9e:	bf00      	nop
 8013ca0:	697b      	ldr	r3, [r7, #20]
 8013ca2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	f383 8810 	msr	PRIMASK, r3
}
 8013caa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013cac:	bf00      	nop
 8013cae:	371c      	adds	r7, #28
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb6:	4770      	bx	lr
 8013cb8:	20008014 	.word	0x20008014

08013cbc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b090      	sub	sp, #64	@ 0x40
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8013cc4:	4b73      	ldr	r3, [pc, #460]	@ (8013e94 <UTIL_SEQ_Run+0x1d8>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8013cca:	4b72      	ldr	r3, [pc, #456]	@ (8013e94 <UTIL_SEQ_Run+0x1d8>)
 8013ccc:	681a      	ldr	r2, [r3, #0]
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	4013      	ands	r3, r2
 8013cd2:	4a70      	ldr	r2, [pc, #448]	@ (8013e94 <UTIL_SEQ_Run+0x1d8>)
 8013cd4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8013cd6:	4b70      	ldr	r3, [pc, #448]	@ (8013e98 <UTIL_SEQ_Run+0x1dc>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8013cdc:	4b6f      	ldr	r3, [pc, #444]	@ (8013e9c <UTIL_SEQ_Run+0x1e0>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8013ce2:	4b6f      	ldr	r3, [pc, #444]	@ (8013ea0 <UTIL_SEQ_Run+0x1e4>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8013ce8:	4b6e      	ldr	r3, [pc, #440]	@ (8013ea4 <UTIL_SEQ_Run+0x1e8>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013cee:	e08d      	b.n	8013e0c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013cf4:	e002      	b.n	8013cfc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8013cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013cf8:	3301      	adds	r3, #1
 8013cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013cfc:	4a6a      	ldr	r2, [pc, #424]	@ (8013ea8 <UTIL_SEQ_Run+0x1ec>)
 8013cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d00:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d06:	401a      	ands	r2, r3
 8013d08:	4b62      	ldr	r3, [pc, #392]	@ (8013e94 <UTIL_SEQ_Run+0x1d8>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	4013      	ands	r3, r2
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d0f1      	beq.n	8013cf6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8013d12:	4a65      	ldr	r2, [pc, #404]	@ (8013ea8 <UTIL_SEQ_Run+0x1ec>)
 8013d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d16:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d1c:	401a      	ands	r2, r3
 8013d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8013e94 <UTIL_SEQ_Run+0x1d8>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	4013      	ands	r3, r2
 8013d24:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8013d26:	4a60      	ldr	r2, [pc, #384]	@ (8013ea8 <UTIL_SEQ_Run+0x1ec>)
 8013d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d2a:	00db      	lsls	r3, r3, #3
 8013d2c:	4413      	add	r3, r2
 8013d2e:	685a      	ldr	r2, [r3, #4]
 8013d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d32:	4013      	ands	r3, r2
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d106      	bne.n	8013d46 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8013d38:	4a5b      	ldr	r2, [pc, #364]	@ (8013ea8 <UTIL_SEQ_Run+0x1ec>)
 8013d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d3c:	00db      	lsls	r3, r3, #3
 8013d3e:	4413      	add	r3, r2
 8013d40:	f04f 32ff 	mov.w	r2, #4294967295
 8013d44:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8013d46:	4a58      	ldr	r2, [pc, #352]	@ (8013ea8 <UTIL_SEQ_Run+0x1ec>)
 8013d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d4a:	00db      	lsls	r3, r3, #3
 8013d4c:	4413      	add	r3, r2
 8013d4e:	685a      	ldr	r2, [r3, #4]
 8013d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d52:	4013      	ands	r3, r2
 8013d54:	4618      	mov	r0, r3
 8013d56:	f000 f9b3 	bl	80140c0 <SEQ_BitPosition>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	461a      	mov	r2, r3
 8013d5e:	4b53      	ldr	r3, [pc, #332]	@ (8013eac <UTIL_SEQ_Run+0x1f0>)
 8013d60:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8013d62:	4a51      	ldr	r2, [pc, #324]	@ (8013ea8 <UTIL_SEQ_Run+0x1ec>)
 8013d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d66:	00db      	lsls	r3, r3, #3
 8013d68:	4413      	add	r3, r2
 8013d6a:	685a      	ldr	r2, [r3, #4]
 8013d6c:	4b4f      	ldr	r3, [pc, #316]	@ (8013eac <UTIL_SEQ_Run+0x1f0>)
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	2101      	movs	r1, #1
 8013d72:	fa01 f303 	lsl.w	r3, r1, r3
 8013d76:	43db      	mvns	r3, r3
 8013d78:	401a      	ands	r2, r3
 8013d7a:	494b      	ldr	r1, [pc, #300]	@ (8013ea8 <UTIL_SEQ_Run+0x1ec>)
 8013d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d7e:	00db      	lsls	r3, r3, #3
 8013d80:	440b      	add	r3, r1
 8013d82:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d84:	f3ef 8310 	mrs	r3, PRIMASK
 8013d88:	61bb      	str	r3, [r7, #24]
  return(result);
 8013d8a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013d8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8013d8e:	b672      	cpsid	i
}
 8013d90:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8013d92:	4b46      	ldr	r3, [pc, #280]	@ (8013eac <UTIL_SEQ_Run+0x1f0>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	2201      	movs	r2, #1
 8013d98:	fa02 f303 	lsl.w	r3, r2, r3
 8013d9c:	43da      	mvns	r2, r3
 8013d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8013e98 <UTIL_SEQ_Run+0x1dc>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	4013      	ands	r3, r2
 8013da4:	4a3c      	ldr	r2, [pc, #240]	@ (8013e98 <UTIL_SEQ_Run+0x1dc>)
 8013da6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013da8:	2302      	movs	r3, #2
 8013daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013dac:	e013      	b.n	8013dd6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8013dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013db0:	3b01      	subs	r3, #1
 8013db2:	4a3d      	ldr	r2, [pc, #244]	@ (8013ea8 <UTIL_SEQ_Run+0x1ec>)
 8013db4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8013db8:	4b3c      	ldr	r3, [pc, #240]	@ (8013eac <UTIL_SEQ_Run+0x1f0>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	2201      	movs	r2, #1
 8013dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8013dc2:	43da      	mvns	r2, r3
 8013dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013dc6:	3b01      	subs	r3, #1
 8013dc8:	400a      	ands	r2, r1
 8013dca:	4937      	ldr	r1, [pc, #220]	@ (8013ea8 <UTIL_SEQ_Run+0x1ec>)
 8013dcc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8013dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013dd2:	3b01      	subs	r3, #1
 8013dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d1e8      	bne.n	8013dae <UTIL_SEQ_Run+0xf2>
 8013ddc:	6a3b      	ldr	r3, [r7, #32]
 8013dde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	f383 8810 	msr	PRIMASK, r3
}
 8013de6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8013de8:	4b30      	ldr	r3, [pc, #192]	@ (8013eac <UTIL_SEQ_Run+0x1f0>)
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	4a30      	ldr	r2, [pc, #192]	@ (8013eb0 <UTIL_SEQ_Run+0x1f4>)
 8013dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013df2:	4798      	blx	r3

    local_taskset = TaskSet;
 8013df4:	4b28      	ldr	r3, [pc, #160]	@ (8013e98 <UTIL_SEQ_Run+0x1dc>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8013dfa:	4b28      	ldr	r3, [pc, #160]	@ (8013e9c <UTIL_SEQ_Run+0x1e0>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8013e00:	4b27      	ldr	r3, [pc, #156]	@ (8013ea0 <UTIL_SEQ_Run+0x1e4>)
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8013e06:	4b27      	ldr	r3, [pc, #156]	@ (8013ea4 <UTIL_SEQ_Run+0x1e8>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8013e0c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e10:	401a      	ands	r2, r3
 8013e12:	4b20      	ldr	r3, [pc, #128]	@ (8013e94 <UTIL_SEQ_Run+0x1d8>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	4013      	ands	r3, r2
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d005      	beq.n	8013e28 <UTIL_SEQ_Run+0x16c>
 8013e1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e20:	4013      	ands	r3, r2
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	f43f af64 	beq.w	8013cf0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8013e28:	4b20      	ldr	r3, [pc, #128]	@ (8013eac <UTIL_SEQ_Run+0x1f0>)
 8013e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e2e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8013e30:	f000 f938 	bl	80140a4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e34:	f3ef 8310 	mrs	r3, PRIMASK
 8013e38:	613b      	str	r3, [r7, #16]
  return(result);
 8013e3a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8013e3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013e3e:	b672      	cpsid	i
}
 8013e40:	bf00      	nop
  local_taskset = TaskSet;
 8013e42:	4b15      	ldr	r3, [pc, #84]	@ (8013e98 <UTIL_SEQ_Run+0x1dc>)
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8013e48:	4b14      	ldr	r3, [pc, #80]	@ (8013e9c <UTIL_SEQ_Run+0x1e0>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8013e4e:	4b14      	ldr	r3, [pc, #80]	@ (8013ea0 <UTIL_SEQ_Run+0x1e4>)
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8013e54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e58:	401a      	ands	r2, r3
 8013e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8013e94 <UTIL_SEQ_Run+0x1d8>)
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	4013      	ands	r3, r2
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d107      	bne.n	8013e74 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8013e64:	4b0f      	ldr	r3, [pc, #60]	@ (8013ea4 <UTIL_SEQ_Run+0x1e8>)
 8013e66:	681a      	ldr	r2, [r3, #0]
 8013e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e6a:	4013      	ands	r3, r2
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d101      	bne.n	8013e74 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8013e70:	f7ed fd28 	bl	80018c4 <UTIL_SEQ_Idle>
 8013e74:	69fb      	ldr	r3, [r7, #28]
 8013e76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	f383 8810 	msr	PRIMASK, r3
}
 8013e7e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8013e80:	f000 f917 	bl	80140b2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8013e84:	4a03      	ldr	r2, [pc, #12]	@ (8013e94 <UTIL_SEQ_Run+0x1d8>)
 8013e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e88:	6013      	str	r3, [r2, #0]

  return;
 8013e8a:	bf00      	nop
}
 8013e8c:	3740      	adds	r7, #64	@ 0x40
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}
 8013e92:	bf00      	nop
 8013e94:	200000dc 	.word	0x200000dc
 8013e98:	20008018 	.word	0x20008018
 8013e9c:	2000801c 	.word	0x2000801c
 8013ea0:	200000d8 	.word	0x200000d8
 8013ea4:	20008020 	.word	0x20008020
 8013ea8:	200080a8 	.word	0x200080a8
 8013eac:	20008024 	.word	0x20008024
 8013eb0:	20008028 	.word	0x20008028

08013eb4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b088      	sub	sp, #32
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	60f8      	str	r0, [r7, #12]
 8013ebc:	60b9      	str	r1, [r7, #8]
 8013ebe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8013ec4:	617b      	str	r3, [r7, #20]
  return(result);
 8013ec6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8013ec8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8013eca:	b672      	cpsid	i
}
 8013ecc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8013ece:	68f8      	ldr	r0, [r7, #12]
 8013ed0:	f000 f8f6 	bl	80140c0 <SEQ_BitPosition>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	4619      	mov	r1, r3
 8013ed8:	4a06      	ldr	r2, [pc, #24]	@ (8013ef4 <UTIL_SEQ_RegTask+0x40>)
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ee4:	69bb      	ldr	r3, [r7, #24]
 8013ee6:	f383 8810 	msr	PRIMASK, r3
}
 8013eea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8013eec:	bf00      	nop
}
 8013eee:	3720      	adds	r7, #32
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}
 8013ef4:	20008028 	.word	0x20008028

08013ef8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8013ef8:	b480      	push	{r7}
 8013efa:	b087      	sub	sp, #28
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f02:	f3ef 8310 	mrs	r3, PRIMASK
 8013f06:	60fb      	str	r3, [r7, #12]
  return(result);
 8013f08:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013f0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013f0c:	b672      	cpsid	i
}
 8013f0e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8013f10:	4b0d      	ldr	r3, [pc, #52]	@ (8013f48 <UTIL_SEQ_SetTask+0x50>)
 8013f12:	681a      	ldr	r2, [r3, #0]
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	4313      	orrs	r3, r2
 8013f18:	4a0b      	ldr	r2, [pc, #44]	@ (8013f48 <UTIL_SEQ_SetTask+0x50>)
 8013f1a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8013f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8013f4c <UTIL_SEQ_SetTask+0x54>)
 8013f1e:	683b      	ldr	r3, [r7, #0]
 8013f20:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	431a      	orrs	r2, r3
 8013f28:	4908      	ldr	r1, [pc, #32]	@ (8013f4c <UTIL_SEQ_SetTask+0x54>)
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8013f30:	697b      	ldr	r3, [r7, #20]
 8013f32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f34:	693b      	ldr	r3, [r7, #16]
 8013f36:	f383 8810 	msr	PRIMASK, r3
}
 8013f3a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013f3c:	bf00      	nop
}
 8013f3e:	371c      	adds	r7, #28
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr
 8013f48:	20008018 	.word	0x20008018
 8013f4c:	200080a8 	.word	0x200080a8

08013f50 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8013f50:	b480      	push	{r7}
 8013f52:	b087      	sub	sp, #28
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f58:	f3ef 8310 	mrs	r3, PRIMASK
 8013f5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8013f5e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013f60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013f62:	b672      	cpsid	i
}
 8013f64:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	43da      	mvns	r2, r3
 8013f6a:	4b08      	ldr	r3, [pc, #32]	@ (8013f8c <UTIL_SEQ_PauseTask+0x3c>)
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	4013      	ands	r3, r2
 8013f70:	4a06      	ldr	r2, [pc, #24]	@ (8013f8c <UTIL_SEQ_PauseTask+0x3c>)
 8013f72:	6013      	str	r3, [r2, #0]
 8013f74:	697b      	ldr	r3, [r7, #20]
 8013f76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	f383 8810 	msr	PRIMASK, r3
}
 8013f7e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013f80:	bf00      	nop
}
 8013f82:	371c      	adds	r7, #28
 8013f84:	46bd      	mov	sp, r7
 8013f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8a:	4770      	bx	lr
 8013f8c:	200000d8 	.word	0x200000d8

08013f90 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8013f90:	b480      	push	{r7}
 8013f92:	b087      	sub	sp, #28
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f98:	f3ef 8310 	mrs	r3, PRIMASK
 8013f9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8013f9e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013fa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013fa2:	b672      	cpsid	i
}
 8013fa4:	bf00      	nop

  TaskMask |= TaskId_bm;
 8013fa6:	4b09      	ldr	r3, [pc, #36]	@ (8013fcc <UTIL_SEQ_ResumeTask+0x3c>)
 8013fa8:	681a      	ldr	r2, [r3, #0]
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	4313      	orrs	r3, r2
 8013fae:	4a07      	ldr	r2, [pc, #28]	@ (8013fcc <UTIL_SEQ_ResumeTask+0x3c>)
 8013fb0:	6013      	str	r3, [r2, #0]
 8013fb2:	697b      	ldr	r3, [r7, #20]
 8013fb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	f383 8810 	msr	PRIMASK, r3
}
 8013fbc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013fbe:	bf00      	nop
}
 8013fc0:	371c      	adds	r7, #28
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc8:	4770      	bx	lr
 8013fca:	bf00      	nop
 8013fcc:	200000d8 	.word	0x200000d8

08013fd0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8013fd0:	b480      	push	{r7}
 8013fd2:	b087      	sub	sp, #28
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8013fdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8013fde:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8013fe0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013fe2:	b672      	cpsid	i
}
 8013fe4:	bf00      	nop

  EvtSet |= EvtId_bm;
 8013fe6:	4b09      	ldr	r3, [pc, #36]	@ (801400c <UTIL_SEQ_SetEvt+0x3c>)
 8013fe8:	681a      	ldr	r2, [r3, #0]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	4313      	orrs	r3, r2
 8013fee:	4a07      	ldr	r2, [pc, #28]	@ (801400c <UTIL_SEQ_SetEvt+0x3c>)
 8013ff0:	6013      	str	r3, [r2, #0]
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ff6:	693b      	ldr	r3, [r7, #16]
 8013ff8:	f383 8810 	msr	PRIMASK, r3
}
 8013ffc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8013ffe:	bf00      	nop
}
 8014000:	371c      	adds	r7, #28
 8014002:	46bd      	mov	sp, r7
 8014004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014008:	4770      	bx	lr
 801400a:	bf00      	nop
 801400c:	2000801c 	.word	0x2000801c

08014010 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b088      	sub	sp, #32
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8014018:	4b1f      	ldr	r3, [pc, #124]	@ (8014098 <UTIL_SEQ_WaitEvt+0x88>)
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801401e:	4b1e      	ldr	r3, [pc, #120]	@ (8014098 <UTIL_SEQ_WaitEvt+0x88>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014026:	d102      	bne.n	801402e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8014028:	2300      	movs	r3, #0
 801402a:	61fb      	str	r3, [r7, #28]
 801402c:	e005      	b.n	801403a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801402e:	4b1a      	ldr	r3, [pc, #104]	@ (8014098 <UTIL_SEQ_WaitEvt+0x88>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	2201      	movs	r2, #1
 8014034:	fa02 f303 	lsl.w	r3, r2, r3
 8014038:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801403a:	4b18      	ldr	r3, [pc, #96]	@ (801409c <UTIL_SEQ_WaitEvt+0x8c>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8014040:	4a16      	ldr	r2, [pc, #88]	@ (801409c <UTIL_SEQ_WaitEvt+0x8c>)
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8014046:	e003      	b.n	8014050 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8014048:	6879      	ldr	r1, [r7, #4]
 801404a:	69f8      	ldr	r0, [r7, #28]
 801404c:	f7ed fc41 	bl	80018d2 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8014050:	4b13      	ldr	r3, [pc, #76]	@ (80140a0 <UTIL_SEQ_WaitEvt+0x90>)
 8014052:	681a      	ldr	r2, [r3, #0]
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	4013      	ands	r3, r2
 8014058:	2b00      	cmp	r3, #0
 801405a:	d0f5      	beq.n	8014048 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801405c:	4a0e      	ldr	r2, [pc, #56]	@ (8014098 <UTIL_SEQ_WaitEvt+0x88>)
 801405e:	69bb      	ldr	r3, [r7, #24]
 8014060:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014062:	f3ef 8310 	mrs	r3, PRIMASK
 8014066:	60bb      	str	r3, [r7, #8]
  return(result);
 8014068:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801406a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801406c:	b672      	cpsid	i
}
 801406e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	43da      	mvns	r2, r3
 8014074:	4b0a      	ldr	r3, [pc, #40]	@ (80140a0 <UTIL_SEQ_WaitEvt+0x90>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	4013      	ands	r3, r2
 801407a:	4a09      	ldr	r2, [pc, #36]	@ (80140a0 <UTIL_SEQ_WaitEvt+0x90>)
 801407c:	6013      	str	r3, [r2, #0]
 801407e:	693b      	ldr	r3, [r7, #16]
 8014080:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	f383 8810 	msr	PRIMASK, r3
}
 8014088:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801408a:	4a04      	ldr	r2, [pc, #16]	@ (801409c <UTIL_SEQ_WaitEvt+0x8c>)
 801408c:	697b      	ldr	r3, [r7, #20]
 801408e:	6013      	str	r3, [r2, #0]
  return;
 8014090:	bf00      	nop
}
 8014092:	3720      	adds	r7, #32
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}
 8014098:	20008024 	.word	0x20008024
 801409c:	20008020 	.word	0x20008020
 80140a0:	2000801c 	.word	0x2000801c

080140a4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80140a4:	b480      	push	{r7}
 80140a6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80140a8:	bf00      	nop
}
 80140aa:	46bd      	mov	sp, r7
 80140ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b0:	4770      	bx	lr

080140b2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80140b2:	b480      	push	{r7}
 80140b4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80140b6:	bf00      	nop
}
 80140b8:	46bd      	mov	sp, r7
 80140ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140be:	4770      	bx	lr

080140c0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80140c0:	b480      	push	{r7}
 80140c2:	b085      	sub	sp, #20
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80140c8:	2300      	movs	r3, #0
 80140ca:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80140d6:	d204      	bcs.n	80140e2 <SEQ_BitPosition+0x22>
 80140d8:	2310      	movs	r3, #16
 80140da:	73fb      	strb	r3, [r7, #15]
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	041b      	lsls	r3, r3, #16
 80140e0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80140e8:	d205      	bcs.n	80140f6 <SEQ_BitPosition+0x36>
 80140ea:	7bfb      	ldrb	r3, [r7, #15]
 80140ec:	3308      	adds	r3, #8
 80140ee:	73fb      	strb	r3, [r7, #15]
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	021b      	lsls	r3, r3, #8
 80140f4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80140fc:	d205      	bcs.n	801410a <SEQ_BitPosition+0x4a>
 80140fe:	7bfb      	ldrb	r3, [r7, #15]
 8014100:	3304      	adds	r3, #4
 8014102:	73fb      	strb	r3, [r7, #15]
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	011b      	lsls	r3, r3, #4
 8014108:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801410a:	68bb      	ldr	r3, [r7, #8]
 801410c:	0f1b      	lsrs	r3, r3, #28
 801410e:	4a07      	ldr	r2, [pc, #28]	@ (801412c <SEQ_BitPosition+0x6c>)
 8014110:	5cd2      	ldrb	r2, [r2, r3]
 8014112:	7bfb      	ldrb	r3, [r7, #15]
 8014114:	4413      	add	r3, r2
 8014116:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8014118:	7bfb      	ldrb	r3, [r7, #15]
 801411a:	f1c3 031f 	rsb	r3, r3, #31
 801411e:	b2db      	uxtb	r3, r3
}
 8014120:	4618      	mov	r0, r3
 8014122:	3714      	adds	r7, #20
 8014124:	46bd      	mov	sp, r7
 8014126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801412a:	4770      	bx	lr
 801412c:	0802e4a8 	.word	0x0802e4a8

08014130 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8014130:	b480      	push	{r7}
 8014132:	b083      	sub	sp, #12
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	687a      	ldr	r2, [r7, #4]
 8014142:	605a      	str	r2, [r3, #4]
}
 8014144:	bf00      	nop
 8014146:	370c      	adds	r7, #12
 8014148:	46bd      	mov	sp, r7
 801414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414e:	4770      	bx	lr

08014150 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8014150:	b480      	push	{r7}
 8014152:	b087      	sub	sp, #28
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014158:	f3ef 8310 	mrs	r3, PRIMASK
 801415c:	60fb      	str	r3, [r7, #12]
  return(result);
 801415e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014160:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8014162:	b672      	cpsid	i
}
 8014164:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	687a      	ldr	r2, [r7, #4]
 801416c:	429a      	cmp	r2, r3
 801416e:	d102      	bne.n	8014176 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8014170:	2301      	movs	r3, #1
 8014172:	75fb      	strb	r3, [r7, #23]
 8014174:	e001      	b.n	801417a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8014176:	2300      	movs	r3, #0
 8014178:	75fb      	strb	r3, [r7, #23]
 801417a:	693b      	ldr	r3, [r7, #16]
 801417c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801417e:	68bb      	ldr	r3, [r7, #8]
 8014180:	f383 8810 	msr	PRIMASK, r3
}
 8014184:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8014186:	7dfb      	ldrb	r3, [r7, #23]
}
 8014188:	4618      	mov	r0, r3
 801418a:	371c      	adds	r7, #28
 801418c:	46bd      	mov	sp, r7
 801418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014192:	4770      	bx	lr

08014194 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8014194:	b480      	push	{r7}
 8014196:	b087      	sub	sp, #28
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
 801419c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801419e:	f3ef 8310 	mrs	r3, PRIMASK
 80141a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80141a4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80141a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80141a8:	b672      	cpsid	i
}
 80141aa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681a      	ldr	r2, [r3, #0]
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	687a      	ldr	r2, [r7, #4]
 80141b8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	683a      	ldr	r2, [r7, #0]
 80141be:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80141c0:	683b      	ldr	r3, [r7, #0]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	683a      	ldr	r2, [r7, #0]
 80141c6:	605a      	str	r2, [r3, #4]
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80141cc:	693b      	ldr	r3, [r7, #16]
 80141ce:	f383 8810 	msr	PRIMASK, r3
}
 80141d2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80141d4:	bf00      	nop
 80141d6:	371c      	adds	r7, #28
 80141d8:	46bd      	mov	sp, r7
 80141da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141de:	4770      	bx	lr

080141e0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80141e0:	b480      	push	{r7}
 80141e2:	b087      	sub	sp, #28
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80141ea:	f3ef 8310 	mrs	r3, PRIMASK
 80141ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80141f0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80141f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80141f4:	b672      	cpsid	i
}
 80141f6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	687a      	ldr	r2, [r7, #4]
 80141fc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	685a      	ldr	r2, [r3, #4]
 8014202:	683b      	ldr	r3, [r7, #0]
 8014204:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	683a      	ldr	r2, [r7, #0]
 801420a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	685b      	ldr	r3, [r3, #4]
 8014210:	683a      	ldr	r2, [r7, #0]
 8014212:	601a      	str	r2, [r3, #0]
 8014214:	697b      	ldr	r3, [r7, #20]
 8014216:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	f383 8810 	msr	PRIMASK, r3
}
 801421e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014220:	bf00      	nop
 8014222:	371c      	adds	r7, #28
 8014224:	46bd      	mov	sp, r7
 8014226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422a:	4770      	bx	lr

0801422c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 801422c:	b480      	push	{r7}
 801422e:	b087      	sub	sp, #28
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014234:	f3ef 8310 	mrs	r3, PRIMASK
 8014238:	60fb      	str	r3, [r7, #12]
  return(result);
 801423a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801423c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801423e:	b672      	cpsid	i
}
 8014240:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	685b      	ldr	r3, [r3, #4]
 8014246:	687a      	ldr	r2, [r7, #4]
 8014248:	6812      	ldr	r2, [r2, #0]
 801424a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	687a      	ldr	r2, [r7, #4]
 8014252:	6852      	ldr	r2, [r2, #4]
 8014254:	605a      	str	r2, [r3, #4]
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801425a:	693b      	ldr	r3, [r7, #16]
 801425c:	f383 8810 	msr	PRIMASK, r3
}
 8014260:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8014262:	bf00      	nop
 8014264:	371c      	adds	r7, #28
 8014266:	46bd      	mov	sp, r7
 8014268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426c:	4770      	bx	lr

0801426e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 801426e:	b580      	push	{r7, lr}
 8014270:	b086      	sub	sp, #24
 8014272:	af00      	add	r7, sp, #0
 8014274:	6078      	str	r0, [r7, #4]
 8014276:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014278:	f3ef 8310 	mrs	r3, PRIMASK
 801427c:	60fb      	str	r3, [r7, #12]
  return(result);
 801427e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8014280:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8014282:	b672      	cpsid	i
}
 8014284:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	681a      	ldr	r2, [r3, #0]
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	4618      	mov	r0, r3
 8014294:	f7ff ffca 	bl	801422c <LST_remove_node>
 8014298:	697b      	ldr	r3, [r7, #20]
 801429a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801429c:	693b      	ldr	r3, [r7, #16]
 801429e:	f383 8810 	msr	PRIMASK, r3
}
 80142a2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80142a4:	bf00      	nop
 80142a6:	3718      	adds	r7, #24
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}

080142ac <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 80142ac:	b480      	push	{r7}
 80142ae:	b085      	sub	sp, #20
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	60f8      	str	r0, [r7, #12]
 80142b4:	60b9      	str	r1, [r7, #8]
 80142b6:	607a      	str	r2, [r7, #4]
 80142b8:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	68ba      	ldr	r2, [r7, #8]
 80142be:	601a      	str	r2, [r3, #0]
  q->first = 0;
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	2200      	movs	r2, #0
 80142c4:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	2200      	movs	r2, #0
 80142ca:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2200      	movs	r2, #0
 80142d0:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	2200      	movs	r2, #0
 80142d6:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	687a      	ldr	r2, [r7, #4]
 80142dc:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	887a      	ldrh	r2, [r7, #2]
 80142e2:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	7e3a      	ldrb	r2, [r7, #24]
 80142e8:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 80142ea:	7e3b      	ldrb	r3, [r7, #24]
 80142ec:	f003 0302 	and.w	r3, r3, #2
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d006      	beq.n	8014302 <CircularQueue_Init+0x56>
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	891b      	ldrh	r3, [r3, #8]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d002      	beq.n	8014302 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 80142fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014300:	e000      	b.n	8014304 <CircularQueue_Init+0x58>
  }
  return 0;
 8014302:	2300      	movs	r3, #0
}
 8014304:	4618      	mov	r0, r3
 8014306:	3714      	adds	r7, #20
 8014308:	46bd      	mov	sp, r7
 801430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430e:	4770      	bx	lr

08014310 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b08e      	sub	sp, #56	@ 0x38
 8014314:	af00      	add	r7, sp, #0
 8014316:	60f8      	str	r0, [r7, #12]
 8014318:	60b9      	str	r1, [r7, #8]
 801431a:	603b      	str	r3, [r7, #0]
 801431c:	4613      	mov	r3, r2
 801431e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8014320:	2300      	movs	r3, #0
 8014322:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8014324:	2300      	movs	r3, #0
 8014326:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8014328:	2300      	movs	r3, #0
 801432a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 801432c:	2300      	movs	r3, #0
 801432e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014330:	2300      	movs	r3, #0
 8014332:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8014334:	2300      	movs	r3, #0
 8014336:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8014338:	2300      	movs	r3, #0
 801433a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	891b      	ldrh	r3, [r3, #8]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d101      	bne.n	8014348 <CircularQueue_Add+0x38>
 8014344:	2302      	movs	r3, #2
 8014346:	e000      	b.n	801434a <CircularQueue_Add+0x3a>
 8014348:	2300      	movs	r3, #0
 801434a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	695b      	ldr	r3, [r3, #20]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d029      	beq.n	80143a8 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	891b      	ldrh	r3, [r3, #8]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d122      	bne.n	80143a2 <CircularQueue_Add+0x92>
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	681a      	ldr	r2, [r3, #0]
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	691b      	ldr	r3, [r3, #16]
 8014364:	4413      	add	r3, r2
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	4618      	mov	r0, r3
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	681a      	ldr	r2, [r3, #0]
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	691b      	ldr	r3, [r3, #16]
 8014372:	1c59      	adds	r1, r3, #1
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	685b      	ldr	r3, [r3, #4]
 8014378:	4299      	cmp	r1, r3
 801437a:	d306      	bcc.n	801438a <CircularQueue_Add+0x7a>
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	6919      	ldr	r1, [r3, #16]
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	685b      	ldr	r3, [r3, #4]
 8014384:	1acb      	subs	r3, r1, r3
 8014386:	3301      	adds	r3, #1
 8014388:	e002      	b.n	8014390 <CircularQueue_Add+0x80>
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	691b      	ldr	r3, [r3, #16]
 801438e:	3301      	adds	r3, #1
 8014390:	4413      	add	r3, r2
 8014392:	781b      	ldrb	r3, [r3, #0]
 8014394:	021b      	lsls	r3, r3, #8
 8014396:	b29b      	uxth	r3, r3
 8014398:	4403      	add	r3, r0
 801439a:	b29b      	uxth	r3, r3
 801439c:	3302      	adds	r3, #2
 801439e:	b29b      	uxth	r3, r3
 80143a0:	e001      	b.n	80143a6 <CircularQueue_Add+0x96>
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	891b      	ldrh	r3, [r3, #8]
 80143a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	891b      	ldrh	r3, [r3, #8]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d002      	beq.n	80143b6 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	891b      	ldrh	r3, [r3, #8]
 80143b4:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	691a      	ldr	r2, [r3, #16]
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	68db      	ldr	r3, [r3, #12]
 80143be:	429a      	cmp	r2, r3
 80143c0:	d307      	bcc.n	80143d2 <CircularQueue_Add+0xc2>
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	685a      	ldr	r2, [r3, #4]
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	6919      	ldr	r1, [r3, #16]
 80143ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80143cc:	440b      	add	r3, r1
 80143ce:	1ad3      	subs	r3, r2, r3
 80143d0:	e000      	b.n	80143d4 <CircularQueue_Add+0xc4>
 80143d2:	2300      	movs	r3, #0
 80143d4:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80143d6:	88fa      	ldrh	r2, [r7, #6]
 80143d8:	7ffb      	ldrb	r3, [r7, #31]
 80143da:	4413      	add	r3, r2
 80143dc:	461a      	mov	r2, r3
 80143de:	683b      	ldr	r3, [r7, #0]
 80143e0:	fb02 f303 	mul.w	r3, r2, r3
 80143e4:	69ba      	ldr	r2, [r7, #24]
 80143e6:	429a      	cmp	r2, r3
 80143e8:	d80b      	bhi.n	8014402 <CircularQueue_Add+0xf2>
 80143ea:	88fa      	ldrh	r2, [r7, #6]
 80143ec:	7ffb      	ldrb	r3, [r7, #31]
 80143ee:	4413      	add	r3, r2
 80143f0:	461a      	mov	r2, r3
 80143f2:	69bb      	ldr	r3, [r7, #24]
 80143f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80143f8:	fb01 f202 	mul.w	r2, r1, r2
 80143fc:	1a9b      	subs	r3, r3, r2
 80143fe:	b2db      	uxtb	r3, r3
 8014400:	e000      	b.n	8014404 <CircularQueue_Add+0xf4>
 8014402:	2300      	movs	r3, #0
 8014404:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8014406:	7dfa      	ldrb	r2, [r7, #23]
 8014408:	7ffb      	ldrb	r3, [r7, #31]
 801440a:	429a      	cmp	r2, r3
 801440c:	bf8c      	ite	hi
 801440e:	2301      	movhi	r3, #1
 8014410:	2300      	movls	r3, #0
 8014412:	b2db      	uxtb	r3, r3
 8014414:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8014416:	7fbb      	ldrb	r3, [r7, #30]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d008      	beq.n	801442e <CircularQueue_Add+0x11e>
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	7f1b      	ldrb	r3, [r3, #28]
 8014420:	f003 0301 	and.w	r3, r3, #1
 8014424:	2b00      	cmp	r3, #0
 8014426:	d002      	beq.n	801442e <CircularQueue_Add+0x11e>
 8014428:	7dfb      	ldrb	r3, [r7, #23]
 801442a:	b29b      	uxth	r3, r3
 801442c:	e000      	b.n	8014430 <CircularQueue_Add+0x120>
 801442e:	8bbb      	ldrh	r3, [r7, #28]
 8014430:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8014432:	7fbb      	ldrb	r3, [r7, #30]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d008      	beq.n	801444a <CircularQueue_Add+0x13a>
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	7f1b      	ldrb	r3, [r3, #28]
 801443c:	f003 0302 	and.w	r3, r3, #2
 8014440:	2b00      	cmp	r3, #0
 8014442:	d002      	beq.n	801444a <CircularQueue_Add+0x13a>
 8014444:	7ffb      	ldrb	r3, [r7, #31]
 8014446:	b29b      	uxth	r3, r3
 8014448:	e000      	b.n	801444c <CircularQueue_Add+0x13c>
 801444a:	8bbb      	ldrh	r3, [r7, #28]
 801444c:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 801444e:	88fb      	ldrh	r3, [r7, #6]
 8014450:	2b00      	cmp	r3, #0
 8014452:	f000 817e 	beq.w	8014752 <CircularQueue_Add+0x442>
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	695a      	ldr	r2, [r3, #20]
 801445a:	88f9      	ldrh	r1, [r7, #6]
 801445c:	7ffb      	ldrb	r3, [r7, #31]
 801445e:	440b      	add	r3, r1
 8014460:	4619      	mov	r1, r3
 8014462:	683b      	ldr	r3, [r7, #0]
 8014464:	fb01 f303 	mul.w	r3, r1, r3
 8014468:	441a      	add	r2, r3
 801446a:	8bbb      	ldrh	r3, [r7, #28]
 801446c:	441a      	add	r2, r3
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	685b      	ldr	r3, [r3, #4]
 8014472:	429a      	cmp	r2, r3
 8014474:	f200 816d 	bhi.w	8014752 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8014478:	2300      	movs	r3, #0
 801447a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801447c:	e14a      	b.n	8014714 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	691a      	ldr	r2, [r3, #16]
 8014482:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014484:	441a      	add	r2, r3
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	685b      	ldr	r3, [r3, #4]
 801448a:	429a      	cmp	r2, r3
 801448c:	d307      	bcc.n	801449e <CircularQueue_Add+0x18e>
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	691a      	ldr	r2, [r3, #16]
 8014492:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014494:	441a      	add	r2, r3
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	685b      	ldr	r3, [r3, #4]
 801449a:	1ad3      	subs	r3, r2, r3
 801449c:	e003      	b.n	80144a6 <CircularQueue_Add+0x196>
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	691a      	ldr	r2, [r3, #16]
 80144a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80144a4:	4413      	add	r3, r2
 80144a6:	68fa      	ldr	r2, [r7, #12]
 80144a8:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	691b      	ldr	r3, [r3, #16]
 80144ae:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	891b      	ldrh	r3, [r3, #8]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d130      	bne.n	801451a <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	681a      	ldr	r2, [r3, #0]
 80144bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144be:	1c59      	adds	r1, r3, #1
 80144c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80144c2:	4413      	add	r3, r2
 80144c4:	88fa      	ldrh	r2, [r7, #6]
 80144c6:	b2d2      	uxtb	r2, r2
 80144c8:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d304      	bcc.n	80144de <CircularQueue_Add+0x1ce>
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	685b      	ldr	r3, [r3, #4]
 80144d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80144da:	1ad3      	subs	r3, r2, r3
 80144dc:	e000      	b.n	80144e0 <CircularQueue_Add+0x1d0>
 80144de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144e0:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 80144e2:	88fb      	ldrh	r3, [r7, #6]
 80144e4:	0a1b      	lsrs	r3, r3, #8
 80144e6:	b298      	uxth	r0, r3
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	681a      	ldr	r2, [r3, #0]
 80144ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144ee:	1c59      	adds	r1, r3, #1
 80144f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80144f2:	4413      	add	r3, r2
 80144f4:	b2c2      	uxtb	r2, r0
 80144f6:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	685b      	ldr	r3, [r3, #4]
 80144fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80144fe:	429a      	cmp	r2, r3
 8014500:	d304      	bcc.n	801450c <CircularQueue_Add+0x1fc>
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	685b      	ldr	r3, [r3, #4]
 8014506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014508:	1ad3      	subs	r3, r2, r3
 801450a:	e000      	b.n	801450e <CircularQueue_Add+0x1fe>
 801450c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801450e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	695b      	ldr	r3, [r3, #20]
 8014514:	1c9a      	adds	r2, r3, #2
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 801451a:	88fa      	ldrh	r2, [r7, #6]
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	6859      	ldr	r1, [r3, #4]
 8014520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014522:	1acb      	subs	r3, r1, r3
 8014524:	4293      	cmp	r3, r2
 8014526:	bf28      	it	cs
 8014528:	4613      	movcs	r3, r2
 801452a:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 801452c:	88fb      	ldrh	r3, [r7, #6]
 801452e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014530:	429a      	cmp	r2, r3
 8014532:	d007      	beq.n	8014544 <CircularQueue_Add+0x234>
 8014534:	88fb      	ldrh	r3, [r7, #6]
 8014536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014538:	429a      	cmp	r2, r3
 801453a:	d225      	bcs.n	8014588 <CircularQueue_Add+0x278>
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	7f1b      	ldrb	r3, [r3, #28]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d121      	bne.n	8014588 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	681a      	ldr	r2, [r3, #0]
 8014548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801454a:	18d0      	adds	r0, r2, r3
 801454c:	88fb      	ldrh	r3, [r7, #6]
 801454e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014550:	fb02 f303 	mul.w	r3, r2, r3
 8014554:	68ba      	ldr	r2, [r7, #8]
 8014556:	4413      	add	r3, r2
 8014558:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801455a:	4619      	mov	r1, r3
 801455c:	f012 fbe9 	bl	8026d32 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	695a      	ldr	r2, [r3, #20]
 8014564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014566:	441a      	add	r2, r3
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 801456c:	2300      	movs	r3, #0
 801456e:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8014570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014572:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8014574:	88fa      	ldrh	r2, [r7, #6]
 8014576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014578:	1ad3      	subs	r3, r2, r3
 801457a:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 801457c:	7ffb      	ldrb	r3, [r7, #31]
 801457e:	b29a      	uxth	r2, r3
 8014580:	88fb      	ldrh	r3, [r7, #6]
 8014582:	4413      	add	r3, r2
 8014584:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8014586:	e0a4      	b.n	80146d2 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8014588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801458a:	2b00      	cmp	r3, #0
 801458c:	f000 80a1 	beq.w	80146d2 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	7f1b      	ldrb	r3, [r3, #28]
 8014594:	f003 0301 	and.w	r3, r3, #1
 8014598:	2b00      	cmp	r3, #0
 801459a:	d03a      	beq.n	8014612 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	891b      	ldrh	r3, [r3, #8]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d10d      	bne.n	80145c0 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	681a      	ldr	r2, [r3, #0]
 80145a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145aa:	3b02      	subs	r3, #2
 80145ac:	4413      	add	r3, r2
 80145ae:	22ff      	movs	r2, #255	@ 0xff
 80145b0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145b8:	3b01      	subs	r3, #1
 80145ba:	4413      	add	r3, r2
 80145bc:	22ff      	movs	r2, #255	@ 0xff
 80145be:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	695a      	ldr	r2, [r3, #20]
 80145c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145c6:	441a      	add	r2, r3
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 80145cc:	2300      	movs	r3, #0
 80145ce:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 80145d0:	88fb      	ldrh	r3, [r7, #6]
 80145d2:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 80145d4:	2300      	movs	r3, #0
 80145d6:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	891b      	ldrh	r3, [r3, #8]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d16f      	bne.n	80146c0 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	681a      	ldr	r2, [r3, #0]
 80145e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145e6:	1c59      	adds	r1, r3, #1
 80145e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80145ea:	4413      	add	r3, r2
 80145ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80145ee:	b2d2      	uxtb	r2, r2
 80145f0:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80145f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145f4:	0a18      	lsrs	r0, r3, #8
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	681a      	ldr	r2, [r3, #0]
 80145fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145fc:	1c59      	adds	r1, r3, #1
 80145fe:	6339      	str	r1, [r7, #48]	@ 0x30
 8014600:	4413      	add	r3, r2
 8014602:	b2c2      	uxtb	r2, r0
 8014604:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	695b      	ldr	r3, [r3, #20]
 801460a:	1c9a      	adds	r2, r3, #2
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	615a      	str	r2, [r3, #20]
 8014610:	e056      	b.n	80146c0 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	7f1b      	ldrb	r3, [r3, #28]
 8014616:	f003 0302 	and.w	r3, r3, #2
 801461a:	2b00      	cmp	r3, #0
 801461c:	d050      	beq.n	80146c0 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	891b      	ldrh	r3, [r3, #8]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d14a      	bne.n	80146bc <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	681a      	ldr	r2, [r3, #0]
 801462a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801462c:	3b02      	subs	r3, #2
 801462e:	4413      	add	r3, r2
 8014630:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014632:	b2d2      	uxtb	r2, r2
 8014634:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8014636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014638:	0a19      	lsrs	r1, r3, #8
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	681a      	ldr	r2, [r3, #0]
 801463e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014640:	3b01      	subs	r3, #1
 8014642:	4413      	add	r3, r2
 8014644:	b2ca      	uxtb	r2, r1
 8014646:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	681a      	ldr	r2, [r3, #0]
 801464c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801464e:	18d0      	adds	r0, r2, r3
 8014650:	88fb      	ldrh	r3, [r7, #6]
 8014652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014654:	fb02 f303 	mul.w	r3, r2, r3
 8014658:	68ba      	ldr	r2, [r7, #8]
 801465a:	4413      	add	r3, r2
 801465c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801465e:	4619      	mov	r1, r3
 8014660:	f012 fb67 	bl	8026d32 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	695a      	ldr	r2, [r3, #20]
 8014668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801466a:	441a      	add	r2, r3
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8014670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014672:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8014674:	88fa      	ldrh	r2, [r7, #6]
 8014676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014678:	1ad3      	subs	r3, r2, r3
 801467a:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	699b      	ldr	r3, [r3, #24]
 8014680:	1c5a      	adds	r2, r3, #1
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8014686:	2300      	movs	r3, #0
 8014688:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	681a      	ldr	r2, [r3, #0]
 801468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014690:	1c59      	adds	r1, r3, #1
 8014692:	6339      	str	r1, [r7, #48]	@ 0x30
 8014694:	4413      	add	r3, r2
 8014696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014698:	b2d2      	uxtb	r2, r2
 801469a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801469c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801469e:	0a18      	lsrs	r0, r3, #8
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	681a      	ldr	r2, [r3, #0]
 80146a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146a6:	1c59      	adds	r1, r3, #1
 80146a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80146aa:	4413      	add	r3, r2
 80146ac:	b2c2      	uxtb	r2, r0
 80146ae:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	695b      	ldr	r3, [r3, #20]
 80146b4:	1c9a      	adds	r2, r3, #2
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	615a      	str	r2, [r3, #20]
 80146ba:	e001      	b.n	80146c0 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 80146bc:	2300      	movs	r3, #0
 80146be:	e049      	b.n	8014754 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 80146c0:	7ffb      	ldrb	r3, [r7, #31]
 80146c2:	b29a      	uxth	r2, r3
 80146c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146c6:	b29b      	uxth	r3, r3
 80146c8:	4413      	add	r3, r2
 80146ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	2200      	movs	r2, #0
 80146d0:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 80146d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d015      	beq.n	8014704 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	681a      	ldr	r2, [r3, #0]
 80146dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146de:	18d0      	adds	r0, r2, r3
 80146e0:	88fb      	ldrh	r3, [r7, #6]
 80146e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80146e4:	fb03 f202 	mul.w	r2, r3, r2
 80146e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146ea:	4413      	add	r3, r2
 80146ec:	68ba      	ldr	r2, [r7, #8]
 80146ee:	4413      	add	r3, r2
 80146f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80146f2:	4619      	mov	r1, r3
 80146f4:	f012 fb1d 	bl	8026d32 <memcpy>
        q->byteCount += NbBytesToCopy;
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	695a      	ldr	r2, [r3, #20]
 80146fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146fe:	441a      	add	r2, r3
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	699b      	ldr	r3, [r3, #24]
 8014708:	1c5a      	adds	r2, r3, #1
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 801470e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014710:	3301      	adds	r3, #1
 8014712:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014714:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	429a      	cmp	r2, r3
 801471a:	f4ff aeb0 	bcc.w	801447e <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	681a      	ldr	r2, [r3, #0]
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	6919      	ldr	r1, [r3, #16]
 8014726:	7ffb      	ldrb	r3, [r7, #31]
 8014728:	4419      	add	r1, r3
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	4299      	cmp	r1, r3
 8014730:	d307      	bcc.n	8014742 <CircularQueue_Add+0x432>
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	6919      	ldr	r1, [r3, #16]
 8014736:	7ffb      	ldrb	r3, [r7, #31]
 8014738:	4419      	add	r1, r3
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	685b      	ldr	r3, [r3, #4]
 801473e:	1acb      	subs	r3, r1, r3
 8014740:	e003      	b.n	801474a <CircularQueue_Add+0x43a>
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	6919      	ldr	r1, [r3, #16]
 8014746:	7ffb      	ldrb	r3, [r7, #31]
 8014748:	440b      	add	r3, r1
 801474a:	4413      	add	r3, r2
 801474c:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 801474e:	6a3b      	ldr	r3, [r7, #32]
 8014750:	e000      	b.n	8014754 <CircularQueue_Add+0x444>
    return NULL;
 8014752:	2300      	movs	r3, #0
}
 8014754:	4618      	mov	r0, r3
 8014756:	3738      	adds	r7, #56	@ 0x38
 8014758:	46bd      	mov	sp, r7
 801475a:	bd80      	pop	{r7, pc}

0801475c <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 801475c:	b480      	push	{r7}
 801475e:	b085      	sub	sp, #20
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8014766:	2300      	movs	r3, #0
 8014768:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 801476a:	2300      	movs	r3, #0
 801476c:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	891b      	ldrh	r3, [r3, #8]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d101      	bne.n	801477a <CircularQueue_Remove+0x1e>
 8014776:	2302      	movs	r3, #2
 8014778:	e000      	b.n	801477c <CircularQueue_Remove+0x20>
 801477a:	2300      	movs	r3, #0
 801477c:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 801477e:	2300      	movs	r3, #0
 8014780:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	695b      	ldr	r3, [r3, #20]
 8014786:	2b00      	cmp	r3, #0
 8014788:	f000 80ca 	beq.w	8014920 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	891b      	ldrh	r3, [r3, #8]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d120      	bne.n	80147d6 <CircularQueue_Remove+0x7a>
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	681a      	ldr	r2, [r3, #0]
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	68db      	ldr	r3, [r3, #12]
 801479c:	4413      	add	r3, r2
 801479e:	781b      	ldrb	r3, [r3, #0]
 80147a0:	4618      	mov	r0, r3
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	681a      	ldr	r2, [r3, #0]
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	68db      	ldr	r3, [r3, #12]
 80147aa:	1c59      	adds	r1, r3, #1
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	685b      	ldr	r3, [r3, #4]
 80147b0:	4299      	cmp	r1, r3
 80147b2:	d306      	bcc.n	80147c2 <CircularQueue_Remove+0x66>
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	68d9      	ldr	r1, [r3, #12]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	685b      	ldr	r3, [r3, #4]
 80147bc:	1acb      	subs	r3, r1, r3
 80147be:	3301      	adds	r3, #1
 80147c0:	e002      	b.n	80147c8 <CircularQueue_Remove+0x6c>
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	68db      	ldr	r3, [r3, #12]
 80147c6:	3301      	adds	r3, #1
 80147c8:	4413      	add	r3, r2
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	021b      	lsls	r3, r3, #8
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	4403      	add	r3, r0
 80147d2:	b29b      	uxth	r3, r3
 80147d4:	e001      	b.n	80147da <CircularQueue_Remove+0x7e>
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	891b      	ldrh	r3, [r3, #8]
 80147da:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	7f1b      	ldrb	r3, [r3, #28]
 80147e0:	f003 0301 	and.w	r3, r3, #1
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d056      	beq.n	8014896 <CircularQueue_Remove+0x13a>
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	7f1b      	ldrb	r3, [r3, #28]
 80147ec:	f003 0302 	and.w	r3, r3, #2
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d150      	bne.n	8014896 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80147f4:	897b      	ldrh	r3, [r7, #10]
 80147f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80147fa:	4293      	cmp	r3, r2
 80147fc:	d103      	bne.n	8014806 <CircularQueue_Remove+0xaa>
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	891b      	ldrh	r3, [r3, #8]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d012      	beq.n	801482c <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	68da      	ldr	r2, [r3, #12]
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801480e:	429a      	cmp	r2, r3
 8014810:	d941      	bls.n	8014896 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	891b      	ldrh	r3, [r3, #8]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d03d      	beq.n	8014896 <CircularQueue_Remove+0x13a>
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	685a      	ldr	r2, [r3, #4]
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	68db      	ldr	r3, [r3, #12]
 8014822:	1ad3      	subs	r3, r2, r3
 8014824:	687a      	ldr	r2, [r7, #4]
 8014826:	8912      	ldrh	r2, [r2, #8]
 8014828:	4293      	cmp	r3, r2
 801482a:	d234      	bcs.n	8014896 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	695a      	ldr	r2, [r3, #20]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	68d9      	ldr	r1, [r3, #12]
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	685b      	ldr	r3, [r3, #4]
 8014838:	1acb      	subs	r3, r1, r3
 801483a:	441a      	add	r2, r3
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2200      	movs	r2, #0
 8014844:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	891b      	ldrh	r3, [r3, #8]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d120      	bne.n	8014890 <CircularQueue_Remove+0x134>
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	681a      	ldr	r2, [r3, #0]
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	68db      	ldr	r3, [r3, #12]
 8014856:	4413      	add	r3, r2
 8014858:	781b      	ldrb	r3, [r3, #0]
 801485a:	4618      	mov	r0, r3
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	681a      	ldr	r2, [r3, #0]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	68db      	ldr	r3, [r3, #12]
 8014864:	1c59      	adds	r1, r3, #1
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	685b      	ldr	r3, [r3, #4]
 801486a:	4299      	cmp	r1, r3
 801486c:	d306      	bcc.n	801487c <CircularQueue_Remove+0x120>
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	68d9      	ldr	r1, [r3, #12]
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	685b      	ldr	r3, [r3, #4]
 8014876:	1acb      	subs	r3, r1, r3
 8014878:	3301      	adds	r3, #1
 801487a:	e002      	b.n	8014882 <CircularQueue_Remove+0x126>
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	68db      	ldr	r3, [r3, #12]
 8014880:	3301      	adds	r3, #1
 8014882:	4413      	add	r3, r2
 8014884:	781b      	ldrb	r3, [r3, #0]
 8014886:	021b      	lsls	r3, r3, #8
 8014888:	b29b      	uxth	r3, r3
 801488a:	4403      	add	r3, r0
 801488c:	b29b      	uxth	r3, r3
 801488e:	e001      	b.n	8014894 <CircularQueue_Remove+0x138>
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	891b      	ldrh	r3, [r3, #8]
 8014894:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	681a      	ldr	r2, [r3, #0]
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	68d9      	ldr	r1, [r3, #12]
 801489e:	7a7b      	ldrb	r3, [r7, #9]
 80148a0:	4419      	add	r1, r3
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	685b      	ldr	r3, [r3, #4]
 80148a6:	4299      	cmp	r1, r3
 80148a8:	d307      	bcc.n	80148ba <CircularQueue_Remove+0x15e>
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	68d9      	ldr	r1, [r3, #12]
 80148ae:	7a7b      	ldrb	r3, [r7, #9]
 80148b0:	4419      	add	r1, r3
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	685b      	ldr	r3, [r3, #4]
 80148b6:	1acb      	subs	r3, r1, r3
 80148b8:	e003      	b.n	80148c2 <CircularQueue_Remove+0x166>
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	68d9      	ldr	r1, [r3, #12]
 80148be:	7a7b      	ldrb	r3, [r7, #9]
 80148c0:	440b      	add	r3, r1
 80148c2:	4413      	add	r3, r2
 80148c4:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	695b      	ldr	r3, [r3, #20]
 80148ca:	8979      	ldrh	r1, [r7, #10]
 80148cc:	7a7a      	ldrb	r2, [r7, #9]
 80148ce:	440a      	add	r2, r1
 80148d0:	1a9a      	subs	r2, r3, r2
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	695b      	ldr	r3, [r3, #20]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d01b      	beq.n	8014916 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	68da      	ldr	r2, [r3, #12]
 80148e2:	897b      	ldrh	r3, [r7, #10]
 80148e4:	441a      	add	r2, r3
 80148e6:	7a7b      	ldrb	r3, [r7, #9]
 80148e8:	441a      	add	r2, r3
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	685b      	ldr	r3, [r3, #4]
 80148ee:	429a      	cmp	r2, r3
 80148f0:	d309      	bcc.n	8014906 <CircularQueue_Remove+0x1aa>
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	68da      	ldr	r2, [r3, #12]
 80148f6:	897b      	ldrh	r3, [r7, #10]
 80148f8:	441a      	add	r2, r3
 80148fa:	7a7b      	ldrb	r3, [r7, #9]
 80148fc:	441a      	add	r2, r3
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	1ad3      	subs	r3, r2, r3
 8014904:	e005      	b.n	8014912 <CircularQueue_Remove+0x1b6>
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	68da      	ldr	r2, [r3, #12]
 801490a:	897b      	ldrh	r3, [r7, #10]
 801490c:	441a      	add	r2, r3
 801490e:	7a7b      	ldrb	r3, [r7, #9]
 8014910:	4413      	add	r3, r2
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	699b      	ldr	r3, [r3, #24]
 801491a:	1e5a      	subs	r2, r3, #1
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8014920:	683b      	ldr	r3, [r7, #0]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d002      	beq.n	801492c <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	897a      	ldrh	r2, [r7, #10]
 801492a:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 801492c:	68fb      	ldr	r3, [r7, #12]
}
 801492e:	4618      	mov	r0, r3
 8014930:	3714      	adds	r7, #20
 8014932:	46bd      	mov	sp, r7
 8014934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014938:	4770      	bx	lr

0801493a <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 801493a:	b480      	push	{r7}
 801493c:	b087      	sub	sp, #28
 801493e:	af00      	add	r7, sp, #0
 8014940:	6078      	str	r0, [r7, #4]
 8014942:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8014944:	2300      	movs	r3, #0
 8014946:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8014948:	2300      	movs	r3, #0
 801494a:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	891b      	ldrh	r3, [r3, #8]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d101      	bne.n	8014958 <CircularQueue_Sense+0x1e>
 8014954:	2302      	movs	r3, #2
 8014956:	e000      	b.n	801495a <CircularQueue_Sense+0x20>
 8014958:	2300      	movs	r3, #0
 801495a:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 801495c:	2300      	movs	r3, #0
 801495e:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8014960:	2300      	movs	r3, #0
 8014962:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	695b      	ldr	r3, [r3, #20]
 8014968:	2b00      	cmp	r3, #0
 801496a:	f000 808e 	beq.w	8014a8a <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	68db      	ldr	r3, [r3, #12]
 8014972:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	891b      	ldrh	r3, [r3, #8]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d120      	bne.n	80149be <CircularQueue_Sense+0x84>
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	681a      	ldr	r2, [r3, #0]
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	68db      	ldr	r3, [r3, #12]
 8014984:	4413      	add	r3, r2
 8014986:	781b      	ldrb	r3, [r3, #0]
 8014988:	4618      	mov	r0, r3
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	681a      	ldr	r2, [r3, #0]
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	68db      	ldr	r3, [r3, #12]
 8014992:	1c59      	adds	r1, r3, #1
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	685b      	ldr	r3, [r3, #4]
 8014998:	4299      	cmp	r1, r3
 801499a:	d306      	bcc.n	80149aa <CircularQueue_Sense+0x70>
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	68d9      	ldr	r1, [r3, #12]
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	685b      	ldr	r3, [r3, #4]
 80149a4:	1acb      	subs	r3, r1, r3
 80149a6:	3301      	adds	r3, #1
 80149a8:	e002      	b.n	80149b0 <CircularQueue_Sense+0x76>
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	68db      	ldr	r3, [r3, #12]
 80149ae:	3301      	adds	r3, #1
 80149b0:	4413      	add	r3, r2
 80149b2:	781b      	ldrb	r3, [r3, #0]
 80149b4:	021b      	lsls	r3, r3, #8
 80149b6:	b29b      	uxth	r3, r3
 80149b8:	4403      	add	r3, r0
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	e001      	b.n	80149c2 <CircularQueue_Sense+0x88>
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	891b      	ldrh	r3, [r3, #8]
 80149c2:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	7f1b      	ldrb	r3, [r3, #28]
 80149c8:	f003 0301 	and.w	r3, r3, #1
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d047      	beq.n	8014a60 <CircularQueue_Sense+0x126>
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	7f1b      	ldrb	r3, [r3, #28]
 80149d4:	f003 0302 	and.w	r3, r3, #2
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d141      	bne.n	8014a60 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80149dc:	8a7b      	ldrh	r3, [r7, #18]
 80149de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80149e2:	4293      	cmp	r3, r2
 80149e4:	d103      	bne.n	80149ee <CircularQueue_Sense+0xb4>
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	891b      	ldrh	r3, [r3, #8]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d012      	beq.n	8014a14 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	68da      	ldr	r2, [r3, #12]
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80149f6:	429a      	cmp	r2, r3
 80149f8:	d932      	bls.n	8014a60 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	891b      	ldrh	r3, [r3, #8]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d02e      	beq.n	8014a60 <CircularQueue_Sense+0x126>
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	685a      	ldr	r2, [r3, #4]
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	68db      	ldr	r3, [r3, #12]
 8014a0a:	1ad3      	subs	r3, r2, r3
 8014a0c:	687a      	ldr	r2, [r7, #4]
 8014a0e:	8912      	ldrh	r2, [r2, #8]
 8014a10:	4293      	cmp	r3, r2
 8014a12:	d225      	bcs.n	8014a60 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8014a14:	2300      	movs	r3, #0
 8014a16:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	891b      	ldrh	r3, [r3, #8]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d11c      	bne.n	8014a5a <CircularQueue_Sense+0x120>
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681a      	ldr	r2, [r3, #0]
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	4413      	add	r3, r2
 8014a28:	781b      	ldrb	r3, [r3, #0]
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	681a      	ldr	r2, [r3, #0]
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	1c59      	adds	r1, r3, #1
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	685b      	ldr	r3, [r3, #4]
 8014a38:	4299      	cmp	r1, r3
 8014a3a:	d305      	bcc.n	8014a48 <CircularQueue_Sense+0x10e>
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	685b      	ldr	r3, [r3, #4]
 8014a40:	68f9      	ldr	r1, [r7, #12]
 8014a42:	1acb      	subs	r3, r1, r3
 8014a44:	3301      	adds	r3, #1
 8014a46:	e001      	b.n	8014a4c <CircularQueue_Sense+0x112>
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	4413      	add	r3, r2
 8014a4e:	781b      	ldrb	r3, [r3, #0]
 8014a50:	021b      	lsls	r3, r3, #8
 8014a52:	b29b      	uxth	r3, r3
 8014a54:	4403      	add	r3, r0
 8014a56:	b29b      	uxth	r3, r3
 8014a58:	e001      	b.n	8014a5e <CircularQueue_Sense+0x124>
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	891b      	ldrh	r3, [r3, #8]
 8014a5e:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681a      	ldr	r2, [r3, #0]
 8014a64:	7af9      	ldrb	r1, [r7, #11]
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	4419      	add	r1, r3
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	685b      	ldr	r3, [r3, #4]
 8014a6e:	4299      	cmp	r1, r3
 8014a70:	d306      	bcc.n	8014a80 <CircularQueue_Sense+0x146>
 8014a72:	7af9      	ldrb	r1, [r7, #11]
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	4419      	add	r1, r3
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	685b      	ldr	r3, [r3, #4]
 8014a7c:	1acb      	subs	r3, r1, r3
 8014a7e:	e002      	b.n	8014a86 <CircularQueue_Sense+0x14c>
 8014a80:	7af9      	ldrb	r1, [r7, #11]
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	440b      	add	r3, r1
 8014a86:	4413      	add	r3, r2
 8014a88:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8014a8a:	683b      	ldr	r3, [r7, #0]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d002      	beq.n	8014a96 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	8a7a      	ldrh	r2, [r7, #18]
 8014a94:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8014a96:	697b      	ldr	r3, [r7, #20]
}
 8014a98:	4618      	mov	r0, r3
 8014a9a:	371c      	adds	r7, #28
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa2:	4770      	bx	lr

08014aa4 <htobe32>:
 8014aa4:	ba00      	rev	r0, r0
 8014aa6:	4770      	bx	lr

08014aa8 <BAES_CmacKeyRoll>:
 8014aa8:	e9d0 3100 	ldrd	r3, r1, [r0]
 8014aac:	b510      	push	{r4, lr}
 8014aae:	0fca      	lsrs	r2, r1, #31
 8014ab0:	6884      	ldr	r4, [r0, #8]
 8014ab2:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 8014ab6:	6002      	str	r2, [r0, #0]
 8014ab8:	0fe2      	lsrs	r2, r4, #31
 8014aba:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8014abe:	68c1      	ldr	r1, [r0, #12]
 8014ac0:	6042      	str	r2, [r0, #4]
 8014ac2:	0fca      	lsrs	r2, r1, #31
 8014ac4:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8014ac8:	6082      	str	r2, [r0, #8]
 8014aca:	0fdb      	lsrs	r3, r3, #31
 8014acc:	2287      	movs	r2, #135	@ 0x87
 8014ace:	4353      	muls	r3, r2
 8014ad0:	ea83 0341 	eor.w	r3, r3, r1, lsl #1
 8014ad4:	60c3      	str	r3, [r0, #12]
 8014ad6:	bd10      	pop	{r4, pc}

08014ad8 <HW_AES_WaitComplete>:
 8014ad8:	4b04      	ldr	r3, [pc, #16]	@ (8014aec <HW_AES_WaitComplete+0x14>)
 8014ada:	685a      	ldr	r2, [r3, #4]
 8014adc:	07d2      	lsls	r2, r2, #31
 8014ade:	d5fc      	bpl.n	8014ada <HW_AES_WaitComplete+0x2>
 8014ae0:	681a      	ldr	r2, [r3, #0]
 8014ae2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8014ae6:	601a      	str	r2, [r3, #0]
 8014ae8:	4770      	bx	lr
 8014aea:	bf00      	nop
 8014aec:	50060000 	.word	0x50060000

08014af0 <HW_AES_Input>:
 8014af0:	4b04      	ldr	r3, [pc, #16]	@ (8014b04 <HW_AES_Input+0x14>)
 8014af2:	6802      	ldr	r2, [r0, #0]
 8014af4:	609a      	str	r2, [r3, #8]
 8014af6:	6842      	ldr	r2, [r0, #4]
 8014af8:	609a      	str	r2, [r3, #8]
 8014afa:	6882      	ldr	r2, [r0, #8]
 8014afc:	609a      	str	r2, [r3, #8]
 8014afe:	68c2      	ldr	r2, [r0, #12]
 8014b00:	609a      	str	r2, [r3, #8]
 8014b02:	4770      	bx	lr
 8014b04:	50060000 	.word	0x50060000

08014b08 <HW_AES_CcmGenerateTag>:
 8014b08:	4909      	ldr	r1, [pc, #36]	@ (8014b30 <HW_AES_CcmGenerateTag+0x28>)
 8014b0a:	b508      	push	{r3, lr}
 8014b0c:	680b      	ldr	r3, [r1, #0]
 8014b0e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8014b12:	f043 0301 	orr.w	r3, r3, #1
 8014b16:	600b      	str	r3, [r1, #0]
 8014b18:	f7ff ffde 	bl	8014ad8 <HW_AES_WaitComplete>
 8014b1c:	68cb      	ldr	r3, [r1, #12]
 8014b1e:	6003      	str	r3, [r0, #0]
 8014b20:	68cb      	ldr	r3, [r1, #12]
 8014b22:	6043      	str	r3, [r0, #4]
 8014b24:	68cb      	ldr	r3, [r1, #12]
 8014b26:	6083      	str	r3, [r0, #8]
 8014b28:	68cb      	ldr	r3, [r1, #12]
 8014b2a:	60c3      	str	r3, [r0, #12]
 8014b2c:	bd08      	pop	{r3, pc}
 8014b2e:	bf00      	nop
 8014b30:	50060000 	.word	0x50060000

08014b34 <Appli_StartProvisioningCb>:
 8014b34:	2301      	movs	r3, #1
 8014b36:	7003      	strb	r3, [r0, #0]
 8014b38:	2300      	movs	r3, #0
 8014b3a:	7043      	strb	r3, [r0, #1]
 8014b3c:	7083      	strb	r3, [r0, #2]
 8014b3e:	70c3      	strb	r3, [r0, #3]
 8014b40:	7103      	strb	r3, [r0, #4]
 8014b42:	4770      	bx	lr

08014b44 <Appli_PubKeyCb>:
 8014b44:	4b01      	ldr	r3, [pc, #4]	@ (8014b4c <Appli_PubKeyCb+0x8>)
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	6858      	ldr	r0, [r3, #4]
 8014b4a:	4770      	bx	lr
 8014b4c:	20000324 	.word	0x20000324

08014b50 <Appli_StaticOobCb>:
 8014b50:	4b01      	ldr	r3, [pc, #4]	@ (8014b58 <Appli_StaticOobCb+0x8>)
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	6918      	ldr	r0, [r3, #16]
 8014b56:	4770      	bx	lr
 8014b58:	20000324 	.word	0x20000324

08014b5c <Appli_UnprovisionedIdentifyCb>:
 8014b5c:	4b01      	ldr	r3, [pc, #4]	@ (8014b64 <Appli_UnprovisionedIdentifyCb+0x8>)
 8014b5e:	685b      	ldr	r3, [r3, #4]
 8014b60:	691b      	ldr	r3, [r3, #16]
 8014b62:	4718      	bx	r3
 8014b64:	20000324 	.word	0x20000324

08014b68 <BnrgmProxyProtocol_SetDataInCharacteristic>:
 8014b68:	4b01      	ldr	r3, [pc, #4]	@ (8014b70 <BnrgmProxyProtocol_SetDataInCharacteristic+0x8>)
 8014b6a:	f8a3 008a 	strh.w	r0, [r3, #138]	@ 0x8a
 8014b6e:	4770      	bx	lr
 8014b70:	20000324 	.word	0x20000324

08014b74 <BnrgmProxyProtocol_SetDataOutCharacteristic>:
 8014b74:	4b01      	ldr	r3, [pc, #4]	@ (8014b7c <BnrgmProxyProtocol_SetDataOutCharacteristic+0x8>)
 8014b76:	f8a3 008c 	strh.w	r0, [r3, #140]	@ 0x8c
 8014b7a:	4770      	bx	lr
 8014b7c:	20000324 	.word	0x20000324

08014b80 <MobleProvisionBearerGatt_RepeatTimerCallback>:
 8014b80:	4770      	bx	lr

08014b82 <MobleConfigModelGetNetIdx>:
 8014b82:	7843      	ldrb	r3, [r0, #1]
 8014b84:	7800      	ldrb	r0, [r0, #0]
 8014b86:	021b      	lsls	r3, r3, #8
 8014b88:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8014b8c:	4418      	add	r0, r3
 8014b8e:	4770      	bx	lr

08014b90 <MobleConfigModelPutKeyIdxs>:
 8014b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b94:	2500      	movs	r5, #0
 8014b96:	4607      	mov	r7, r0
 8014b98:	4628      	mov	r0, r5
 8014b9a:	b2ee      	uxtb	r6, r5
 8014b9c:	428e      	cmp	r6, r1
 8014b9e:	d301      	bcc.n	8014ba4 <MobleConfigModelPutKeyIdxs+0x14>
 8014ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ba4:	eb06 0c07 	add.w	ip, r6, r7
 8014ba8:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8014bac:	1064      	asrs	r4, r4, #1
 8014bae:	f01c 0f01 	tst.w	ip, #1
 8014bb2:	f833 8016 	ldrh.w	r8, [r3, r6, lsl #1]
 8014bb6:	f104 0e01 	add.w	lr, r4, #1
 8014bba:	d10b      	bne.n	8014bd4 <MobleConfigModelPutKeyIdxs+0x44>
 8014bbc:	f802 8004 	strb.w	r8, [r2, r4]
 8014bc0:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 8014bc4:	3002      	adds	r0, #2
 8014bc6:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8014bca:	f802 400e 	strb.w	r4, [r2, lr]
 8014bce:	b280      	uxth	r0, r0
 8014bd0:	3501      	adds	r5, #1
 8014bd2:	e7e2      	b.n	8014b9a <MobleConfigModelPutKeyIdxs+0xa>
 8014bd4:	f812 c004 	ldrb.w	ip, [r2, r4]
 8014bd8:	ea4c 1c08 	orr.w	ip, ip, r8, lsl #4
 8014bdc:	f802 c004 	strb.w	ip, [r2, r4]
 8014be0:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 8014be4:	3001      	adds	r0, #1
 8014be6:	f3c4 1407 	ubfx	r4, r4, #4, #8
 8014bea:	e7ee      	b.n	8014bca <MobleConfigModelPutKeyIdxs+0x3a>

08014bec <BnrgmHealthModelAttention_TimerCallback>:
 8014bec:	680b      	ldr	r3, [r1, #0]
 8014bee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014bf0:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 8014bf4:	b133      	cbz	r3, 8014c04 <BnrgmHealthModelAttention_TimerCallback+0x18>
 8014bf6:	3b01      	subs	r3, #1
 8014bf8:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
 8014bfc:	f8d1 31f4 	ldr.w	r3, [r1, #500]	@ 0x1f4
 8014c00:	b113      	cbz	r3, 8014c08 <BnrgmHealthModelAttention_TimerCallback+0x1c>
 8014c02:	4718      	bx	r3
 8014c04:	b100      	cbz	r0, 8014c08 <BnrgmHealthModelAttention_TimerCallback+0x1c>
 8014c06:	7003      	strb	r3, [r0, #0]
 8014c08:	4770      	bx	lr
	...

08014c0c <Test_UpperTester_Set08>:
 8014c0c:	4b02      	ldr	r3, [pc, #8]	@ (8014c18 <Test_UpperTester_Set08+0xc>)
 8014c0e:	2201      	movs	r2, #1
 8014c10:	801a      	strh	r2, [r3, #0]
 8014c12:	2000      	movs	r0, #0
 8014c14:	4770      	bx	lr
 8014c16:	bf00      	nop
 8014c18:	20000008 	.word	0x20000008

08014c1c <Test_UpperTester_Set09>:
 8014c1c:	4b02      	ldr	r3, [pc, #8]	@ (8014c28 <Test_UpperTester_Set09+0xc>)
 8014c1e:	2000      	movs	r0, #0
 8014c20:	f8a3 00e4 	strh.w	r0, [r3, #228]	@ 0xe4
 8014c24:	4770      	bx	lr
 8014c26:	bf00      	nop
 8014c28:	20000324 	.word	0x20000324

08014c2c <Test_UpperTester_Set14>:
 8014c2c:	4b02      	ldr	r3, [pc, #8]	@ (8014c38 <Test_UpperTester_Set14+0xc>)
 8014c2e:	2203      	movs	r2, #3
 8014c30:	801a      	strh	r2, [r3, #0]
 8014c32:	2000      	movs	r0, #0
 8014c34:	4770      	bx	lr
 8014c36:	bf00      	nop
 8014c38:	20000008 	.word	0x20000008

08014c3c <MobleGattReadCallback>:
 8014c3c:	b538      	push	{r3, r4, r5, lr}
 8014c3e:	b928      	cbnz	r0, 8014c4c <MobleGattReadCallback+0x10>
 8014c40:	4b16      	ldr	r3, [pc, #88]	@ (8014c9c <MobleGattReadCallback+0x60>)
 8014c42:	4a17      	ldr	r2, [pc, #92]	@ (8014ca0 <MobleGattReadCallback+0x64>)
 8014c44:	215d      	movs	r1, #93	@ 0x5d
 8014c46:	4817      	ldr	r0, [pc, #92]	@ (8014ca4 <MobleGattReadCallback+0x68>)
 8014c48:	f011 f824 	bl	8025c94 <__assert_func>
 8014c4c:	b91a      	cbnz	r2, 8014c56 <MobleGattReadCallback+0x1a>
 8014c4e:	4b16      	ldr	r3, [pc, #88]	@ (8014ca8 <MobleGattReadCallback+0x6c>)
 8014c50:	4a13      	ldr	r2, [pc, #76]	@ (8014ca0 <MobleGattReadCallback+0x64>)
 8014c52:	215e      	movs	r1, #94	@ 0x5e
 8014c54:	e7f7      	b.n	8014c46 <MobleGattReadCallback+0xa>
 8014c56:	b91b      	cbnz	r3, 8014c60 <MobleGattReadCallback+0x24>
 8014c58:	4b14      	ldr	r3, [pc, #80]	@ (8014cac <MobleGattReadCallback+0x70>)
 8014c5a:	4a11      	ldr	r2, [pc, #68]	@ (8014ca0 <MobleGattReadCallback+0x64>)
 8014c5c:	215f      	movs	r1, #95	@ 0x5f
 8014c5e:	e7f2      	b.n	8014c46 <MobleGattReadCallback+0xa>
 8014c60:	f8d0 0164 	ldr.w	r0, [r0, #356]	@ 0x164
 8014c64:	b1c0      	cbz	r0, 8014c98 <MobleGattReadCallback+0x5c>
 8014c66:	6842      	ldr	r2, [r0, #4]
 8014c68:	b1b2      	cbz	r2, 8014c98 <MobleGattReadCallback+0x5c>
 8014c6a:	7885      	ldrb	r5, [r0, #2]
 8014c6c:	b1a5      	cbz	r5, 8014c98 <MobleGattReadCallback+0x5c>
 8014c6e:	2400      	movs	r4, #0
 8014c70:	68d0      	ldr	r0, [r2, #12]
 8014c72:	3001      	adds	r0, #1
 8014c74:	b280      	uxth	r0, r0
 8014c76:	4281      	cmp	r1, r0
 8014c78:	d106      	bne.n	8014c88 <MobleGattReadCallback+0x4c>
 8014c7a:	7910      	ldrb	r0, [r2, #4]
 8014c7c:	781b      	ldrb	r3, [r3, #0]
 8014c7e:	4298      	cmp	r0, r3
 8014c80:	bf94      	ite	ls
 8014c82:	2002      	movls	r0, #2
 8014c84:	2003      	movhi	r0, #3
 8014c86:	bd38      	pop	{r3, r4, r5, pc}
 8014c88:	3401      	adds	r4, #1
 8014c8a:	b2e0      	uxtb	r0, r4
 8014c8c:	4285      	cmp	r5, r0
 8014c8e:	f102 0210 	add.w	r2, r2, #16
 8014c92:	d8ed      	bhi.n	8014c70 <MobleGattReadCallback+0x34>
 8014c94:	2001      	movs	r0, #1
 8014c96:	e7f6      	b.n	8014c86 <MobleGattReadCallback+0x4a>
 8014c98:	2002      	movs	r0, #2
 8014c9a:	e7f4      	b.n	8014c86 <MobleGattReadCallback+0x4a>
 8014c9c:	0802e4b8 	.word	0x0802e4b8
 8014ca0:	0802cac0 	.word	0x0802cac0
 8014ca4:	0802e4be 	.word	0x0802e4be
 8014ca8:	0802e4fa 	.word	0x0802e4fa
 8014cac:	0802ec70 	.word	0x0802ec70

08014cb0 <BPKA_Reverse>:
 8014cb0:	6803      	ldr	r3, [r0, #0]
 8014cb2:	69c2      	ldr	r2, [r0, #28]
 8014cb4:	ba1b      	rev	r3, r3
 8014cb6:	ba12      	rev	r2, r2
 8014cb8:	6002      	str	r2, [r0, #0]
 8014cba:	61c3      	str	r3, [r0, #28]
 8014cbc:	6982      	ldr	r2, [r0, #24]
 8014cbe:	6843      	ldr	r3, [r0, #4]
 8014cc0:	ba12      	rev	r2, r2
 8014cc2:	ba1b      	rev	r3, r3
 8014cc4:	6042      	str	r2, [r0, #4]
 8014cc6:	6183      	str	r3, [r0, #24]
 8014cc8:	6942      	ldr	r2, [r0, #20]
 8014cca:	6883      	ldr	r3, [r0, #8]
 8014ccc:	ba12      	rev	r2, r2
 8014cce:	ba1b      	rev	r3, r3
 8014cd0:	6082      	str	r2, [r0, #8]
 8014cd2:	6143      	str	r3, [r0, #20]
 8014cd4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8014cd8:	ba12      	rev	r2, r2
 8014cda:	ba1b      	rev	r3, r3
 8014cdc:	60c2      	str	r2, [r0, #12]
 8014cde:	6103      	str	r3, [r0, #16]
 8014ce0:	4770      	bx	lr

08014ce2 <MoblePBADVEraseTransaction>:
 8014ce2:	2100      	movs	r1, #0
 8014ce4:	6041      	str	r1, [r0, #4]
 8014ce6:	228a      	movs	r2, #138	@ 0x8a
 8014ce8:	3008      	adds	r0, #8
 8014cea:	f011 bf71 	b.w	8026bd0 <memset>
	...

08014cf0 <BnrgmConfigModelProcessHeartbeat>:
 8014cf0:	b530      	push	{r4, r5, lr}
 8014cf2:	4c16      	ldr	r4, [pc, #88]	@ (8014d4c <BnrgmConfigModelProcessHeartbeat+0x5c>)
 8014cf4:	f8d4 50e8 	ldr.w	r5, [r4, #232]	@ 0xe8
 8014cf8:	3d01      	subs	r5, #1
 8014cfa:	f1b5 7f7a 	cmp.w	r5, #65536000	@ 0x3e80000
 8014cfe:	d223      	bcs.n	8014d48 <BnrgmConfigModelProcessHeartbeat+0x58>
 8014d00:	4293      	cmp	r3, r2
 8014d02:	d821      	bhi.n	8014d48 <BnrgmConfigModelProcessHeartbeat+0x58>
 8014d04:	f8b4 50e0 	ldrh.w	r5, [r4, #224]	@ 0xe0
 8014d08:	4285      	cmp	r5, r0
 8014d0a:	d11d      	bne.n	8014d48 <BnrgmConfigModelProcessHeartbeat+0x58>
 8014d0c:	f8a4 10e2 	strh.w	r1, [r4, #226]	@ 0xe2
 8014d10:	f8b4 10e4 	ldrh.w	r1, [r4, #228]	@ 0xe4
 8014d14:	3201      	adds	r2, #1
 8014d16:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8014d1a:	4281      	cmp	r1, r0
 8014d1c:	eba2 0303 	sub.w	r3, r2, r3
 8014d20:	f894 20e6 	ldrb.w	r2, [r4, #230]	@ 0xe6
 8014d24:	bf1c      	itt	ne
 8014d26:	3101      	addne	r1, #1
 8014d28:	f8a4 10e4 	strhne.w	r1, [r4, #228]	@ 0xe4
 8014d2c:	b2db      	uxtb	r3, r3
 8014d2e:	b10a      	cbz	r2, 8014d34 <BnrgmConfigModelProcessHeartbeat+0x44>
 8014d30:	4293      	cmp	r3, r2
 8014d32:	d201      	bcs.n	8014d38 <BnrgmConfigModelProcessHeartbeat+0x48>
 8014d34:	f884 30e6 	strb.w	r3, [r4, #230]	@ 0xe6
 8014d38:	f894 20e7 	ldrb.w	r2, [r4, #231]	@ 0xe7
 8014d3c:	429a      	cmp	r2, r3
 8014d3e:	d201      	bcs.n	8014d44 <BnrgmConfigModelProcessHeartbeat+0x54>
 8014d40:	f884 30e7 	strb.w	r3, [r4, #231]	@ 0xe7
 8014d44:	2000      	movs	r0, #0
 8014d46:	e000      	b.n	8014d4a <BnrgmConfigModelProcessHeartbeat+0x5a>
 8014d48:	2002      	movs	r0, #2
 8014d4a:	bd30      	pop	{r4, r5, pc}
 8014d4c:	20000324 	.word	0x20000324

08014d50 <BnrgmHealthModel_ProcessFaultClearUnack>:
 8014d50:	4a09      	ldr	r2, [pc, #36]	@ (8014d78 <BnrgmHealthModel_ProcessFaultClearUnack+0x28>)
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	8852      	ldrh	r2, [r2, #2]
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	d10a      	bne.n	8014d72 <BnrgmHealthModel_ProcessFaultClearUnack+0x22>
 8014d5c:	6803      	ldr	r3, [r0, #0]
 8014d5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014d60:	2300      	movs	r3, #0
 8014d62:	6553      	str	r3, [r2, #84]	@ 0x54
 8014d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8014d66:	6802      	ldr	r2, [r0, #0]
 8014d68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8014d6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8014d70:	4770      	bx	lr
 8014d72:	2003      	movs	r0, #3
 8014d74:	4770      	bx	lr
 8014d76:	bf00      	nop
 8014d78:	20000008 	.word	0x20000008

08014d7c <BnrgmHealthModel_ProcessFaultTestUnack>:
 8014d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8014da8 <BnrgmHealthModel_ProcessFaultTestUnack+0x2c>)
 8014d7e:	7819      	ldrb	r1, [r3, #0]
 8014d80:	f892 2f20 	ldrb.w	r2, [r2, #3872]	@ 0xf20
 8014d84:	428a      	cmp	r2, r1
 8014d86:	d001      	beq.n	8014d8c <BnrgmHealthModel_ProcessFaultTestUnack+0x10>
 8014d88:	2003      	movs	r0, #3
 8014d8a:	4770      	bx	lr
 8014d8c:	4907      	ldr	r1, [pc, #28]	@ (8014dac <BnrgmHealthModel_ProcessFaultTestUnack+0x30>)
 8014d8e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8014d92:	8849      	ldrh	r1, [r1, #2]
 8014d94:	b29b      	uxth	r3, r3
 8014d96:	4299      	cmp	r1, r3
 8014d98:	d1f6      	bne.n	8014d88 <BnrgmHealthModel_ProcessFaultTestUnack+0xc>
 8014d9a:	6803      	ldr	r3, [r0, #0]
 8014d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d9e:	2000      	movs	r0, #0
 8014da0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 8014da4:	4770      	bx	lr
 8014da6:	bf00      	nop
 8014da8:	20000324 	.word	0x20000324
 8014dac:	20000008 	.word	0x20000008

08014db0 <MoblePalTimerFindFreeSlot>:
 8014db0:	4b06      	ldr	r3, [pc, #24]	@ (8014dcc <MoblePalTimerFindFreeSlot+0x1c>)
 8014db2:	2000      	movs	r0, #0
 8014db4:	2218      	movs	r2, #24
 8014db6:	fb02 f100 	mul.w	r1, r2, r0
 8014dba:	5cc9      	ldrb	r1, [r1, r3]
 8014dbc:	b121      	cbz	r1, 8014dc8 <MoblePalTimerFindFreeSlot+0x18>
 8014dbe:	3001      	adds	r0, #1
 8014dc0:	2832      	cmp	r0, #50	@ 0x32
 8014dc2:	d1f8      	bne.n	8014db6 <MoblePalTimerFindFreeSlot+0x6>
 8014dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8014dc8:	4770      	bx	lr
 8014dca:	bf00      	nop
 8014dcc:	20001248 	.word	0x20001248

08014dd0 <MoblePalTimerInit>:
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	4a06      	ldr	r2, [pc, #24]	@ (8014dec <MoblePalTimerInit+0x1c>)
 8014dd4:	b510      	push	{r4, lr}
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	2418      	movs	r4, #24
 8014dda:	fb04 f103 	mul.w	r1, r4, r3
 8014dde:	3301      	adds	r3, #1
 8014de0:	2b32      	cmp	r3, #50	@ 0x32
 8014de2:	5488      	strb	r0, [r1, r2]
 8014de4:	d1f9      	bne.n	8014dda <MoblePalTimerInit+0xa>
 8014de6:	2000      	movs	r0, #0
 8014de8:	bd10      	pop	{r4, pc}
 8014dea:	bf00      	nop
 8014dec:	20001248 	.word	0x20001248

08014df0 <MoblePalTimerCreate>:
 8014df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014df2:	460e      	mov	r6, r1
 8014df4:	4617      	mov	r7, r2
 8014df6:	4605      	mov	r5, r0
 8014df8:	b1a8      	cbz	r0, 8014e26 <MoblePalTimerCreate+0x36>
 8014dfa:	b1a1      	cbz	r1, 8014e26 <MoblePalTimerCreate+0x36>
 8014dfc:	f7ff ffd8 	bl	8014db0 <MoblePalTimerFindFreeSlot>
 8014e00:	1e03      	subs	r3, r0, #0
 8014e02:	db12      	blt.n	8014e2a <MoblePalTimerCreate+0x3a>
 8014e04:	4c0a      	ldr	r4, [pc, #40]	@ (8014e30 <MoblePalTimerCreate+0x40>)
 8014e06:	2218      	movs	r2, #24
 8014e08:	4353      	muls	r3, r2
 8014e0a:	18e1      	adds	r1, r4, r3
 8014e0c:	f604 7424 	addw	r4, r4, #3876	@ 0xf24
 8014e10:	2201      	movs	r2, #1
 8014e12:	441c      	add	r4, r3
 8014e14:	f881 2f24 	strb.w	r2, [r1, #3876]	@ 0xf24
 8014e18:	f8c1 6f34 	str.w	r6, [r1, #3892]	@ 0xf34
 8014e1c:	f8c1 7f38 	str.w	r7, [r1, #3896]	@ 0xf38
 8014e20:	2000      	movs	r0, #0
 8014e22:	602c      	str	r4, [r5, #0]
 8014e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e26:	2003      	movs	r0, #3
 8014e28:	e7fc      	b.n	8014e24 <MoblePalTimerCreate+0x34>
 8014e2a:	2004      	movs	r0, #4
 8014e2c:	e7fa      	b.n	8014e24 <MoblePalTimerCreate+0x34>
 8014e2e:	bf00      	nop
 8014e30:	20000324 	.word	0x20000324

08014e34 <MoblePalTimerSetup>:
 8014e34:	b570      	push	{r4, r5, r6, lr}
 8014e36:	460d      	mov	r5, r1
 8014e38:	4616      	mov	r6, r2
 8014e3a:	4604      	mov	r4, r0
 8014e3c:	b168      	cbz	r0, 8014e5a <MoblePalTimerSetup+0x26>
 8014e3e:	b161      	cbz	r1, 8014e5a <MoblePalTimerSetup+0x26>
 8014e40:	7803      	ldrb	r3, [r0, #0]
 8014e42:	2b01      	cmp	r3, #1
 8014e44:	d10b      	bne.n	8014e5e <MoblePalTimerSetup+0x2a>
 8014e46:	f7f1 fe6d 	bl	8006b24 <HAL_GetTick>
 8014e4a:	2302      	movs	r3, #2
 8014e4c:	6060      	str	r0, [r4, #4]
 8014e4e:	4428      	add	r0, r5
 8014e50:	60a0      	str	r0, [r4, #8]
 8014e52:	7326      	strb	r6, [r4, #12]
 8014e54:	7023      	strb	r3, [r4, #0]
 8014e56:	2000      	movs	r0, #0
 8014e58:	bd70      	pop	{r4, r5, r6, pc}
 8014e5a:	2003      	movs	r0, #3
 8014e5c:	e7fc      	b.n	8014e58 <MoblePalTimerSetup+0x24>
 8014e5e:	2002      	movs	r0, #2
 8014e60:	e7fa      	b.n	8014e58 <MoblePalTimerSetup+0x24>

08014e62 <MoblePalTimerStart>:
 8014e62:	2200      	movs	r2, #0
 8014e64:	f7ff bfe6 	b.w	8014e34 <MoblePalTimerSetup>

08014e68 <BnrgmHealthModelSetAttentionTimer>:
 8014e68:	b538      	push	{r3, r4, r5, lr}
 8014e6a:	6803      	ldr	r3, [r0, #0]
 8014e6c:	4604      	mov	r4, r0
 8014e6e:	f8d0 01f4 	ldr.w	r0, [r0, #500]	@ 0x1f4
 8014e72:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8014e74:	b910      	cbnz	r0, 8014e7c <BnrgmHealthModelSetAttentionTimer+0x14>
 8014e76:	f885 006e 	strb.w	r0, [r5, #110]	@ 0x6e
 8014e7a:	bd38      	pop	{r3, r4, r5, pc}
 8014e7c:	f895 006e 	ldrb.w	r0, [r5, #110]	@ 0x6e
 8014e80:	2800      	cmp	r0, #0
 8014e82:	d0fa      	beq.n	8014e7a <BnrgmHealthModelSetAttentionTimer+0x12>
 8014e84:	4909      	ldr	r1, [pc, #36]	@ (8014eac <BnrgmHealthModelSetAttentionTimer+0x44>)
 8014e86:	4622      	mov	r2, r4
 8014e88:	f105 0070 	add.w	r0, r5, #112	@ 0x70
 8014e8c:	f7ff ffb0 	bl	8014df0 <MoblePalTimerCreate>
 8014e90:	2801      	cmp	r0, #1
 8014e92:	d808      	bhi.n	8014ea6 <BnrgmHealthModelSetAttentionTimer+0x3e>
 8014e94:	6823      	ldr	r3, [r4, #0]
 8014e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e98:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014e9c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8014e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ea2:	f7ff bfde 	b.w	8014e62 <MoblePalTimerStart>
 8014ea6:	2004      	movs	r0, #4
 8014ea8:	e7e7      	b.n	8014e7a <BnrgmHealthModelSetAttentionTimer+0x12>
 8014eaa:	bf00      	nop
 8014eac:	08014bed 	.word	0x08014bed

08014eb0 <BnrgmHealthModel_ProcessAttentionSetUnack>:
 8014eb0:	b508      	push	{r3, lr}
 8014eb2:	781a      	ldrb	r2, [r3, #0]
 8014eb4:	6803      	ldr	r3, [r0, #0]
 8014eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014eb8:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 8014ebc:	f7ff ffd4 	bl	8014e68 <BnrgmHealthModelSetAttentionTimer>
 8014ec0:	2000      	movs	r0, #0
 8014ec2:	bd08      	pop	{r3, pc}

08014ec4 <MoblePalTimerStartOnce>:
 8014ec4:	2201      	movs	r2, #1
 8014ec6:	f7ff bfb5 	b.w	8014e34 <MoblePalTimerSetup>
	...

08014ecc <MoblePBADVRaiseTransTimeoutTimer>:
 8014ecc:	b510      	push	{r4, lr}
 8014ece:	4604      	mov	r4, r0
 8014ed0:	4906      	ldr	r1, [pc, #24]	@ (8014eec <MoblePBADVRaiseTransTimeoutTimer+0x20>)
 8014ed2:	4602      	mov	r2, r0
 8014ed4:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8014ed8:	f7ff ff8a 	bl	8014df0 <MoblePalTimerCreate>
 8014edc:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
 8014ee0:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8014ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ee8:	f7ff bfec 	b.w	8014ec4 <MoblePalTimerStartOnce>
 8014eec:	080243bd 	.word	0x080243bd

08014ef0 <MoblePBADVRaiseLinkIdleTimer>:
 8014ef0:	b510      	push	{r4, lr}
 8014ef2:	4604      	mov	r4, r0
 8014ef4:	4906      	ldr	r1, [pc, #24]	@ (8014f10 <MoblePBADVRaiseLinkIdleTimer+0x20>)
 8014ef6:	4602      	mov	r2, r0
 8014ef8:	f500 70a6 	add.w	r0, r0, #332	@ 0x14c
 8014efc:	f7ff ff78 	bl	8014df0 <MoblePalTimerCreate>
 8014f00:	f8d4 014c 	ldr.w	r0, [r4, #332]	@ 0x14c
 8014f04:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8014f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f0c:	f7ff bfda 	b.w	8014ec4 <MoblePalTimerStartOnce>
 8014f10:	080243c5 	.word	0x080243c5

08014f14 <MoblePalTimerStop>:
 8014f14:	b130      	cbz	r0, 8014f24 <MoblePalTimerStop+0x10>
 8014f16:	7803      	ldrb	r3, [r0, #0]
 8014f18:	2b02      	cmp	r3, #2
 8014f1a:	d105      	bne.n	8014f28 <MoblePalTimerStop+0x14>
 8014f1c:	2301      	movs	r3, #1
 8014f1e:	7003      	strb	r3, [r0, #0]
 8014f20:	2000      	movs	r0, #0
 8014f22:	4770      	bx	lr
 8014f24:	2003      	movs	r0, #3
 8014f26:	4770      	bx	lr
 8014f28:	2002      	movs	r0, #2
 8014f2a:	4770      	bx	lr

08014f2c <BnrgmConfigModelHeartbeatSubscription_TimerCallback>:
 8014f2c:	4a08      	ldr	r2, [pc, #32]	@ (8014f50 <BnrgmConfigModelHeartbeatSubscription_TimerCallback+0x24>)
 8014f2e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8014f32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8014f36:	d204      	bcs.n	8014f42 <BnrgmConfigModelHeartbeatSubscription_TimerCallback+0x16>
 8014f38:	2300      	movs	r3, #0
 8014f3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8014f3e:	f7ff bfe9 	b.w	8014f14 <MoblePalTimerStop>
 8014f42:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8014f46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d0f7      	beq.n	8014f3e <BnrgmConfigModelHeartbeatSubscription_TimerCallback+0x12>
 8014f4e:	4770      	bx	lr
 8014f50:	20000324 	.word	0x20000324

08014f54 <MoblePalTimerDestroy>:
 8014f54:	b118      	cbz	r0, 8014f5e <MoblePalTimerDestroy+0xa>
 8014f56:	2300      	movs	r3, #0
 8014f58:	7003      	strb	r3, [r0, #0]
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	4770      	bx	lr
 8014f5e:	2003      	movs	r0, #3
 8014f60:	4770      	bx	lr
	...

08014f64 <MobleTransEraseTimer>:
 8014f64:	4602      	mov	r2, r0
 8014f66:	6800      	ldr	r0, [r0, #0]
 8014f68:	b570      	push	{r4, r5, r6, lr}
 8014f6a:	b170      	cbz	r0, 8014f8a <MobleTransEraseTimer+0x26>
 8014f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8014f98 <MobleTransEraseTimer+0x34>)
 8014f6e:	f893 52dc 	ldrb.w	r5, [r3, #732]	@ 0x2dc
 8014f72:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8014f76:	2100      	movs	r1, #0
 8014f78:	3314      	adds	r3, #20
 8014f7a:	460e      	mov	r6, r1
 8014f7c:	b2cc      	uxtb	r4, r1
 8014f7e:	42a5      	cmp	r5, r4
 8014f80:	d804      	bhi.n	8014f8c <MobleTransEraseTimer+0x28>
 8014f82:	f7ff ffe7 	bl	8014f54 <MoblePalTimerDestroy>
 8014f86:	2300      	movs	r3, #0
 8014f88:	6013      	str	r3, [r2, #0]
 8014f8a:	bd70      	pop	{r4, r5, r6, pc}
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	bf08      	it	eq
 8014f90:	7416      	strbeq	r6, [r2, #16]
 8014f92:	3101      	adds	r1, #1
 8014f94:	332c      	adds	r3, #44	@ 0x2c
 8014f96:	e7f1      	b.n	8014f7c <MobleTransEraseTimer+0x18>
 8014f98:	2000141c 	.word	0x2000141c

08014f9c <MobleTransSarOnTimeout>:
 8014f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f9e:	f101 0014 	add.w	r0, r1, #20
 8014fa2:	460c      	mov	r4, r1
 8014fa4:	f7ff ffde 	bl	8014f64 <MobleTransEraseTimer>
 8014fa8:	f104 0020 	add.w	r0, r4, #32
 8014fac:	f7ff ffda 	bl	8014f64 <MobleTransEraseTimer>
 8014fb0:	490f      	ldr	r1, [pc, #60]	@ (8014ff0 <MobleTransSarOnTimeout+0x54>)
 8014fb2:	e9d1 36b8 	ldrd	r3, r6, [r1, #736]	@ 0x2e0
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	4610      	mov	r0, r2
 8014fba:	f04f 0c2c 	mov.w	ip, #44	@ 0x2c
 8014fbe:	f891 52dc 	ldrb.w	r5, [r1, #732]	@ 0x2dc
 8014fc2:	4295      	cmp	r5, r2
 8014fc4:	dc02      	bgt.n	8014fcc <MobleTransSarOnTimeout+0x30>
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	7023      	strb	r3, [r4, #0]
 8014fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fcc:	781d      	ldrb	r5, [r3, #0]
 8014fce:	b15d      	cbz	r5, 8014fe8 <MobleTransSarOnTimeout+0x4c>
 8014fd0:	885f      	ldrh	r7, [r3, #2]
 8014fd2:	88a5      	ldrh	r5, [r4, #4]
 8014fd4:	42af      	cmp	r7, r5
 8014fd6:	d107      	bne.n	8014fe8 <MobleTransSarOnTimeout+0x4c>
 8014fd8:	68e5      	ldr	r5, [r4, #12]
 8014fda:	685f      	ldr	r7, [r3, #4]
 8014fdc:	42af      	cmp	r7, r5
 8014fde:	bf02      	ittt	eq
 8014fe0:	fb0c f502 	muleq.w	r5, ip, r2
 8014fe4:	7018      	strbeq	r0, [r3, #0]
 8014fe6:	5570      	strbeq	r0, [r6, r5]
 8014fe8:	3201      	adds	r2, #1
 8014fea:	332c      	adds	r3, #44	@ 0x2c
 8014fec:	e7e7      	b.n	8014fbe <MobleTransSarOnTimeout+0x22>
 8014fee:	bf00      	nop
 8014ff0:	2000141c 	.word	0x2000141c

08014ff4 <MoblePBADVEraseTimer>:
 8014ff4:	4602      	mov	r2, r0
 8014ff6:	6800      	ldr	r0, [r0, #0]
 8014ff8:	b508      	push	{r3, lr}
 8014ffa:	b118      	cbz	r0, 8015004 <MoblePBADVEraseTimer+0x10>
 8014ffc:	f7ff ffaa 	bl	8014f54 <MoblePalTimerDestroy>
 8015000:	2300      	movs	r3, #0
 8015002:	6013      	str	r3, [r2, #0]
 8015004:	bd08      	pop	{r3, pc}

08015006 <MoblePBADVClearTimers>:
 8015006:	b508      	push	{r3, lr}
 8015008:	4601      	mov	r1, r0
 801500a:	f500 70aa 	add.w	r0, r0, #340	@ 0x154
 801500e:	f7ff fff1 	bl	8014ff4 <MoblePBADVEraseTimer>
 8015012:	f501 70a8 	add.w	r0, r1, #336	@ 0x150
 8015016:	f7ff ffed 	bl	8014ff4 <MoblePBADVEraseTimer>
 801501a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801501e:	f501 70a6 	add.w	r0, r1, #332	@ 0x14c
 8015022:	f7ff bfe7 	b.w	8014ff4 <MoblePBADVEraseTimer>
	...

08015028 <BnrgmHealthModelSetPublishTimer>:
 8015028:	b570      	push	{r4, r5, r6, lr}
 801502a:	6803      	ldr	r3, [r0, #0]
 801502c:	4a1e      	ldr	r2, [pc, #120]	@ (80150a8 <BnrgmHealthModelSetPublishTimer+0x80>)
 801502e:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8015030:	f8b2 110a 	ldrh.w	r1, [r2, #266]	@ 0x10a
 8015034:	f8a5 105e 	strh.w	r1, [r5, #94]	@ 0x5e
 8015038:	f892 110f 	ldrb.w	r1, [r2, #271]	@ 0x10f
 801503c:	f8b2 2108 	ldrh.w	r2, [r2, #264]	@ 0x108
 8015040:	f885 1063 	strb.w	r1, [r5, #99]	@ 0x63
 8015044:	f012 0fc0 	tst.w	r2, #192	@ 0xc0
 8015048:	4606      	mov	r6, r0
 801504a:	f002 043f 	and.w	r4, r2, #63	@ 0x3f
 801504e:	f3c2 1181 	ubfx	r1, r2, #6, #2
 8015052:	d11b      	bne.n	801508c <BnrgmHealthModelSetPublishTimer+0x64>
 8015054:	2264      	movs	r2, #100	@ 0x64
 8015056:	fb14 f402 	smulbb	r4, r4, r2
 801505a:	f895 2049 	ldrb.w	r2, [r5, #73]	@ 0x49
 801505e:	b112      	cbz	r2, 8015066 <BnrgmHealthModelSetPublishTimer+0x3e>
 8015060:	f895 206d 	ldrb.w	r2, [r5, #109]	@ 0x6d
 8015064:	40d4      	lsrs	r4, r2
 8015066:	f855 0f74 	ldr.w	r0, [r5, #116]!
 801506a:	4910      	ldr	r1, [pc, #64]	@ (80150ac <BnrgmHealthModelSetPublishTimer+0x84>)
 801506c:	f7ff ff72 	bl	8014f54 <MoblePalTimerDestroy>
 8015070:	4632      	mov	r2, r6
 8015072:	4628      	mov	r0, r5
 8015074:	f7ff febc 	bl	8014df0 <MoblePalTimerCreate>
 8015078:	2801      	cmp	r0, #1
 801507a:	d813      	bhi.n	80150a4 <BnrgmHealthModelSetPublishTimer+0x7c>
 801507c:	6833      	ldr	r3, [r6, #0]
 801507e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015080:	b2a1      	uxth	r1, r4
 8015082:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8015084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015088:	f7ff beeb 	b.w	8014e62 <MoblePalTimerStart>
 801508c:	2901      	cmp	r1, #1
 801508e:	d103      	bne.n	8015098 <BnrgmHealthModelSetPublishTimer+0x70>
 8015090:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015094:	4354      	muls	r4, r2
 8015096:	e7e0      	b.n	801505a <BnrgmHealthModelSetPublishTimer+0x32>
 8015098:	2902      	cmp	r1, #2
 801509a:	bf14      	ite	ne
 801509c:	4a04      	ldrne	r2, [pc, #16]	@ (80150b0 <BnrgmHealthModelSetPublishTimer+0x88>)
 801509e:	f242 7210 	movweq	r2, #10000	@ 0x2710
 80150a2:	e7f7      	b.n	8015094 <BnrgmHealthModelSetPublishTimer+0x6c>
 80150a4:	bd70      	pop	{r4, r5, r6, pc}
 80150a6:	bf00      	nop
 80150a8:	20000324 	.word	0x20000324
 80150ac:	08022511 	.word	0x08022511
 80150b0:	000927c0 	.word	0x000927c0

080150b4 <BnrgmHealthModel_ProcessPeriodSetUnack>:
 80150b4:	b508      	push	{r3, lr}
 80150b6:	781b      	ldrb	r3, [r3, #0]
 80150b8:	2b0f      	cmp	r3, #15
 80150ba:	d807      	bhi.n	80150cc <BnrgmHealthModel_ProcessPeriodSetUnack+0x18>
 80150bc:	6802      	ldr	r2, [r0, #0]
 80150be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80150c0:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
 80150c4:	f7ff ffb0 	bl	8015028 <BnrgmHealthModelSetPublishTimer>
 80150c8:	2000      	movs	r0, #0
 80150ca:	bd08      	pop	{r3, pc}
 80150cc:	2003      	movs	r0, #3
 80150ce:	e7fc      	b.n	80150ca <BnrgmHealthModel_ProcessPeriodSetUnack+0x16>

080150d0 <BnrgmStackNodeIdentityTimerCallback>:
 80150d0:	4b03      	ldr	r3, [pc, #12]	@ (80150e0 <BnrgmStackNodeIdentityTimerCallback+0x10>)
 80150d2:	f8d1 017c 	ldr.w	r0, [r1, #380]	@ 0x17c
 80150d6:	2200      	movs	r2, #0
 80150d8:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
 80150dc:	f7ff bf3a 	b.w	8014f54 <MoblePalTimerDestroy>
 80150e0:	20000324 	.word	0x20000324

080150e4 <MoblePalTimerProcess>:
 80150e4:	b570      	push	{r4, r5, r6, lr}
 80150e6:	4c13      	ldr	r4, [pc, #76]	@ (8015134 <MoblePalTimerProcess+0x50>)
 80150e8:	2600      	movs	r6, #0
 80150ea:	2501      	movs	r5, #1
 80150ec:	7823      	ldrb	r3, [r4, #0]
 80150ee:	2b02      	cmp	r3, #2
 80150f0:	d117      	bne.n	8015122 <MoblePalTimerProcess+0x3e>
 80150f2:	f7f1 fd17 	bl	8006b24 <HAL_GetTick>
 80150f6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80150fa:	429a      	cmp	r2, r3
 80150fc:	d20f      	bcs.n	801511e <MoblePalTimerProcess+0x3a>
 80150fe:	4298      	cmp	r0, r3
 8015100:	d201      	bcs.n	8015106 <MoblePalTimerProcess+0x22>
 8015102:	4290      	cmp	r0, r2
 8015104:	d20d      	bcs.n	8015122 <MoblePalTimerProcess+0x3e>
 8015106:	7b21      	ldrb	r1, [r4, #12]
 8015108:	b991      	cbnz	r1, 8015130 <MoblePalTimerProcess+0x4c>
 801510a:	1a9b      	subs	r3, r3, r2
 801510c:	6060      	str	r0, [r4, #4]
 801510e:	4418      	add	r0, r3
 8015110:	60a0      	str	r0, [r4, #8]
 8015112:	6923      	ldr	r3, [r4, #16]
 8015114:	b12b      	cbz	r3, 8015122 <MoblePalTimerProcess+0x3e>
 8015116:	6961      	ldr	r1, [r4, #20]
 8015118:	4620      	mov	r0, r4
 801511a:	4798      	blx	r3
 801511c:	e001      	b.n	8015122 <MoblePalTimerProcess+0x3e>
 801511e:	4298      	cmp	r0, r3
 8015120:	d2ef      	bcs.n	8015102 <MoblePalTimerProcess+0x1e>
 8015122:	3601      	adds	r6, #1
 8015124:	2e32      	cmp	r6, #50	@ 0x32
 8015126:	f104 0418 	add.w	r4, r4, #24
 801512a:	d1df      	bne.n	80150ec <MoblePalTimerProcess+0x8>
 801512c:	2000      	movs	r0, #0
 801512e:	bd70      	pop	{r4, r5, r6, pc}
 8015130:	7025      	strb	r5, [r4, #0]
 8015132:	e7ee      	b.n	8015112 <MoblePalTimerProcess+0x2e>
 8015134:	20001248 	.word	0x20001248

08015138 <MoblePalBluetoothCheckManufacturerID>:
 8015138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801513a:	f10d 030e 	add.w	r3, sp, #14
 801513e:	9300      	str	r3, [sp, #0]
 8015140:	f10d 0209 	add.w	r2, sp, #9
 8015144:	ab03      	add	r3, sp, #12
 8015146:	f10d 010a 	add.w	r1, sp, #10
 801514a:	a802      	add	r0, sp, #8
 801514c:	f7fd fbf9 	bl	8012942 <hci_read_local_version_information>
 8015150:	3800      	subs	r0, #0
 8015152:	bf18      	it	ne
 8015154:	2001      	movne	r0, #1
 8015156:	0040      	lsls	r0, r0, #1
 8015158:	b005      	add	sp, #20
 801515a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015160 <MoblePalBluetoothSetConnectionInterval>:
 8015160:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 8015164:	4358      	muls	r0, r3
 8015166:	4b04      	ldr	r3, [pc, #16]	@ (8015178 <MoblePalBluetoothSetConnectionInterval+0x18>)
 8015168:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 801516c:	4282      	cmp	r2, r0
 801516e:	bf18      	it	ne
 8015170:	f8c3 0350 	strne.w	r0, [r3, #848]	@ 0x350
 8015174:	4770      	bx	lr
 8015176:	bf00      	nop
 8015178:	2000141c 	.word	0x2000141c

0801517c <MoblePalBluetoothGattAddService>:
 801517c:	b510      	push	{r4, lr}
 801517e:	b086      	sub	sp, #24
 8015180:	461c      	mov	r4, r3
 8015182:	f8ad 100e 	strh.w	r1, [sp, #14]
 8015186:	b1ab      	cbz	r3, 80151b4 <MoblePalBluetoothGattAddService+0x38>
 8015188:	2801      	cmp	r0, #1
 801518a:	f10d 0316 	add.w	r3, sp, #22
 801518e:	9300      	str	r3, [sp, #0]
 8015190:	f10d 010e 	add.w	r1, sp, #14
 8015194:	4613      	mov	r3, r2
 8015196:	bf0c      	ite	eq
 8015198:	4602      	moveq	r2, r0
 801519a:	2202      	movne	r2, #2
 801519c:	2001      	movs	r0, #1
 801519e:	f7fc fd8b 	bl	8011cb8 <aci_gatt_add_service>
 80151a2:	b948      	cbnz	r0, 80151b8 <MoblePalBluetoothGattAddService+0x3c>
 80151a4:	4a05      	ldr	r2, [pc, #20]	@ (80151bc <MoblePalBluetoothGattAddService+0x40>)
 80151a6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80151aa:	6023      	str	r3, [r4, #0]
 80151ac:	f8a2 3340 	strh.w	r3, [r2, #832]	@ 0x340
 80151b0:	b006      	add	sp, #24
 80151b2:	bd10      	pop	{r4, pc}
 80151b4:	2003      	movs	r0, #3
 80151b6:	e7fb      	b.n	80151b0 <MoblePalBluetoothGattAddService+0x34>
 80151b8:	2002      	movs	r0, #2
 80151ba:	e7f9      	b.n	80151b0 <MoblePalBluetoothGattAddService+0x34>
 80151bc:	2000141c 	.word	0x2000141c

080151c0 <MoblePalBluetoothGattDelService>:
 80151c0:	b508      	push	{r3, lr}
 80151c2:	b280      	uxth	r0, r0
 80151c4:	f7fd f867 	bl	8012296 <aci_gatt_del_service>
 80151c8:	3800      	subs	r0, #0
 80151ca:	bf18      	it	ne
 80151cc:	2001      	movne	r0, #1
 80151ce:	0040      	lsls	r0, r0, #1
 80151d0:	bd08      	pop	{r3, pc}

080151d2 <MoblePalBluetoothGattAddCharacteristic>:
 80151d2:	b570      	push	{r4, r5, r6, lr}
 80151d4:	b08a      	sub	sp, #40	@ 0x28
 80151d6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80151d8:	f89d 4038 	ldrb.w	r4, [sp, #56]	@ 0x38
 80151dc:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80151e0:	f8ad 101e 	strh.w	r1, [sp, #30]
 80151e4:	2e00      	cmp	r6, #0
 80151e6:	d037      	beq.n	8015258 <MoblePalBluetoothGattAddCharacteristic+0x86>
 80151e8:	f014 0101 	ands.w	r1, r4, #1
 80151ec:	bf1c      	itt	ne
 80151ee:	f084 0401 	eorne.w	r4, r4, #1
 80151f2:	2102      	movne	r1, #2
 80151f4:	f014 0f02 	tst.w	r4, #2
 80151f8:	bf1c      	itt	ne
 80151fa:	f084 0402 	eorne.w	r4, r4, #2
 80151fe:	f041 0104 	orrne.w	r1, r1, #4
 8015202:	f014 0f04 	tst.w	r4, #4
 8015206:	bf1c      	itt	ne
 8015208:	f084 0404 	eorne.w	r4, r4, #4
 801520c:	f041 0108 	orrne.w	r1, r1, #8
 8015210:	f014 0f08 	tst.w	r4, #8
 8015214:	bf1c      	itt	ne
 8015216:	f084 0408 	eorne.w	r4, r4, #8
 801521a:	f041 0110 	orrne.w	r1, r1, #16
 801521e:	432c      	orrs	r4, r5
 8015220:	d11a      	bne.n	8015258 <MoblePalBluetoothGattAddCharacteristic+0x86>
 8015222:	f10d 0526 	add.w	r5, sp, #38	@ 0x26
 8015226:	9505      	str	r5, [sp, #20]
 8015228:	1e5d      	subs	r5, r3, #1
 801522a:	426b      	negs	r3, r5
 801522c:	416b      	adcs	r3, r5
 801522e:	9304      	str	r3, [sp, #16]
 8015230:	2310      	movs	r3, #16
 8015232:	9303      	str	r3, [sp, #12]
 8015234:	f3c1 0380 	ubfx	r3, r1, #2, #1
 8015238:	e9cd 4301 	strd	r4, r3, [sp, #4]
 801523c:	9100      	str	r1, [sp, #0]
 801523e:	4613      	mov	r3, r2
 8015240:	2101      	movs	r1, #1
 8015242:	f10d 021e 	add.w	r2, sp, #30
 8015246:	b280      	uxth	r0, r0
 8015248:	f7fc fe0c 	bl	8011e64 <aci_gatt_add_char>
 801524c:	b930      	cbnz	r0, 801525c <MoblePalBluetoothGattAddCharacteristic+0x8a>
 801524e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8015252:	6033      	str	r3, [r6, #0]
 8015254:	b00a      	add	sp, #40	@ 0x28
 8015256:	bd70      	pop	{r4, r5, r6, pc}
 8015258:	2003      	movs	r0, #3
 801525a:	e7fb      	b.n	8015254 <MoblePalBluetoothGattAddCharacteristic+0x82>
 801525c:	2002      	movs	r0, #2
 801525e:	e7f9      	b.n	8015254 <MoblePalBluetoothGattAddCharacteristic+0x82>

08015260 <MoblePalBluetoothGattDelCharacteristic>:
 8015260:	b508      	push	{r3, lr}
 8015262:	b289      	uxth	r1, r1
 8015264:	b280      	uxth	r0, r0
 8015266:	f7fc ffae 	bl	80121c6 <aci_gatt_del_char>
 801526a:	3800      	subs	r0, #0
 801526c:	bf18      	it	ne
 801526e:	2001      	movne	r0, #1
 8015270:	0040      	lsls	r0, r0, #1
 8015272:	bd08      	pop	{r3, pc}

08015274 <MoblePalBluetoothGetConnectionState>:
 8015274:	4b06      	ldr	r3, [pc, #24]	@ (8015290 <MoblePalBluetoothGetConnectionState+0x1c>)
 8015276:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 801527a:	f013 0f34 	tst.w	r3, #52	@ 0x34
 801527e:	d105      	bne.n	801528c <MoblePalBluetoothGetConnectionState+0x18>
 8015280:	f013 0f08 	tst.w	r3, #8
 8015284:	bf14      	ite	ne
 8015286:	2001      	movne	r0, #1
 8015288:	2002      	moveq	r0, #2
 801528a:	4770      	bx	lr
 801528c:	2000      	movs	r0, #0
 801528e:	4770      	bx	lr
 8015290:	2000141c 	.word	0x2000141c

08015294 <MoblePalBluetoothSetBluetoothAddress>:
 8015294:	4b06      	ldr	r3, [pc, #24]	@ (80152b0 <MoblePalBluetoothSetBluetoothAddress+0x1c>)
 8015296:	6802      	ldr	r2, [r0, #0]
 8015298:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
 801529c:	8882      	ldrh	r2, [r0, #4]
 801529e:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
 80152a2:	2201      	movs	r2, #1
 80152a4:	f883 2362 	strb.w	r2, [r3, #866]	@ 0x362
 80152a8:	f883 1363 	strb.w	r1, [r3, #867]	@ 0x363
 80152ac:	2000      	movs	r0, #0
 80152ae:	4770      	bx	lr
 80152b0:	2000141c 	.word	0x2000141c

080152b4 <MoblePalBluetoothGetBluetoothAddress>:
 80152b4:	b508      	push	{r3, lr}
 80152b6:	b190      	cbz	r0, 80152de <MoblePalBluetoothGetBluetoothAddress+0x2a>
 80152b8:	490a      	ldr	r1, [pc, #40]	@ (80152e4 <MoblePalBluetoothGetBluetoothAddress+0x30>)
 80152ba:	f891 3362 	ldrb.w	r3, [r1, #866]	@ 0x362
 80152be:	2b01      	cmp	r3, #1
 80152c0:	d106      	bne.n	80152d0 <MoblePalBluetoothGetBluetoothAddress+0x1c>
 80152c2:	2206      	movs	r2, #6
 80152c4:	f501 7157 	add.w	r1, r1, #860	@ 0x35c
 80152c8:	f011 fc68 	bl	8026b9c <memmove>
 80152cc:	2000      	movs	r0, #0
 80152ce:	bd08      	pop	{r3, pc}
 80152d0:	f7fd fb7d 	bl	80129ce <hci_read_bd_addr>
 80152d4:	3800      	subs	r0, #0
 80152d6:	bf18      	it	ne
 80152d8:	2001      	movne	r0, #1
 80152da:	0040      	lsls	r0, r0, #1
 80152dc:	e7f7      	b.n	80152ce <MoblePalBluetoothGetBluetoothAddress+0x1a>
 80152de:	2003      	movs	r0, #3
 80152e0:	e7f5      	b.n	80152ce <MoblePalBluetoothGetBluetoothAddress+0x1a>
 80152e2:	bf00      	nop
 80152e4:	2000141c 	.word	0x2000141c

080152e8 <MoblePalBluetoothInit>:
 80152e8:	b570      	push	{r4, r5, r6, lr}
 80152ea:	4c12      	ldr	r4, [pc, #72]	@ (8015334 <MoblePalBluetoothInit+0x4c>)
 80152ec:	4606      	mov	r6, r0
 80152ee:	461d      	mov	r5, r3
 80152f0:	f884 1364 	strb.w	r1, [r4, #868]	@ 0x364
 80152f4:	f8c4 2368 	str.w	r2, [r4, #872]	@ 0x368
 80152f8:	f7ff ff1e 	bl	8015138 <MoblePalBluetoothCheckManufacturerID>
 80152fc:	2801      	cmp	r0, #1
 80152fe:	d818      	bhi.n	8015332 <MoblePalBluetoothInit+0x4a>
 8015300:	79e9      	ldrb	r1, [r5, #7]
 8015302:	4628      	mov	r0, r5
 8015304:	f7ff ffc6 	bl	8015294 <MoblePalBluetoothSetBluetoothAddress>
 8015308:	2801      	cmp	r0, #1
 801530a:	d812      	bhi.n	8015332 <MoblePalBluetoothInit+0x4a>
 801530c:	9b05      	ldr	r3, [sp, #20]
 801530e:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
 8015312:	9b04      	ldr	r3, [sp, #16]
 8015314:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 8015318:	f894 3363 	ldrb.w	r3, [r4, #867]	@ 0x363
 801531c:	f8c4 636c 	str.w	r6, [r4, #876]	@ 0x36c
 8015320:	2b01      	cmp	r3, #1
 8015322:	bf01      	itttt	eq
 8015324:	f8d4 335c 	ldreq.w	r3, [r4, #860]	@ 0x35c
 8015328:	602b      	streq	r3, [r5, #0]
 801532a:	f8b4 3360 	ldrheq.w	r3, [r4, #864]	@ 0x360
 801532e:	80ab      	strheq	r3, [r5, #4]
 8015330:	2000      	movs	r0, #0
 8015332:	bd70      	pop	{r4, r5, r6, pc}
 8015334:	2000141c 	.word	0x2000141c

08015338 <MoblePalBluetoothRandom>:
 8015338:	b507      	push	{r0, r1, r2, lr}
 801533a:	4668      	mov	r0, sp
 801533c:	f7fd fc51 	bl	8012be2 <hci_le_rand>
 8015340:	466a      	mov	r2, sp
 8015342:	2308      	movs	r3, #8
 8015344:	f812 0b01 	ldrb.w	r0, [r2], #1
 8015348:	b920      	cbnz	r0, 8015354 <MoblePalBluetoothRandom+0x1c>
 801534a:	3b01      	subs	r3, #1
 801534c:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8015350:	d1f8      	bne.n	8015344 <MoblePalBluetoothRandom+0xc>
 8015352:	e7f2      	b.n	801533a <MoblePalBluetoothRandom+0x2>
 8015354:	b003      	add	sp, #12
 8015356:	f85d fb04 	ldr.w	pc, [sp], #4

0801535a <MoblePBADVRandom>:
 801535a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801535c:	2400      	movs	r4, #0
 801535e:	ad01      	add	r5, sp, #4
 8015360:	f7ff ffea 	bl	8015338 <MoblePalBluetoothRandom>
 8015364:	3401      	adds	r4, #1
 8015366:	2c04      	cmp	r4, #4
 8015368:	f805 0b01 	strb.w	r0, [r5], #1
 801536c:	d1f8      	bne.n	8015360 <MoblePBADVRandom+0x6>
 801536e:	9801      	ldr	r0, [sp, #4]
 8015370:	b003      	add	sp, #12
 8015372:	bd30      	pop	{r4, r5, pc}

08015374 <MoblePBADVGetNewLink>:
 8015374:	b570      	push	{r4, r5, r6, lr}
 8015376:	7a04      	ldrb	r4, [r0, #8]
 8015378:	4605      	mov	r5, r0
 801537a:	b11c      	cbz	r4, 8015384 <MoblePBADVGetNewLink+0x10>
 801537c:	f890 317c 	ldrb.w	r3, [r0, #380]	@ 0x17c
 8015380:	bbc3      	cbnz	r3, 80153f4 <MoblePBADVGetNewLink+0x80>
 8015382:	2401      	movs	r4, #1
 8015384:	f44f 76ba 	mov.w	r6, #372	@ 0x174
 8015388:	fb06 5304 	mla	r3, r6, r4, r5
 801538c:	60dd      	str	r5, [r3, #12]
 801538e:	f7ff ffe4 	bl	801535a <MoblePBADVRandom>
 8015392:	2300      	movs	r3, #0
 8015394:	fb06 5203 	mla	r2, r6, r3, r5
 8015398:	7a11      	ldrb	r1, [r2, #8]
 801539a:	b131      	cbz	r1, 80153aa <MoblePBADVGetNewLink+0x36>
 801539c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801539e:	4282      	cmp	r2, r0
 80153a0:	d103      	bne.n	80153aa <MoblePBADVGetNewLink+0x36>
 80153a2:	f7ff ffda 	bl	801535a <MoblePBADVRandom>
 80153a6:	f04f 33ff 	mov.w	r3, #4294967295
 80153aa:	3301      	adds	r3, #1
 80153ac:	2b02      	cmp	r3, #2
 80153ae:	d1f1      	bne.n	8015394 <MoblePBADVGetNewLink+0x20>
 80153b0:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 80153b4:	435c      	muls	r4, r3
 80153b6:	192b      	adds	r3, r5, r4
 80153b8:	f104 0608 	add.w	r6, r4, #8
 80153bc:	2100      	movs	r1, #0
 80153be:	2201      	movs	r2, #1
 80153c0:	442e      	add	r6, r5
 80153c2:	f504 74b4 	add.w	r4, r4, #360	@ 0x168
 80153c6:	6258      	str	r0, [r3, #36]	@ 0x24
 80153c8:	721a      	strb	r2, [r3, #8]
 80153ca:	e9c3 1155 	strd	r1, r1, [r3, #340]	@ 0x154
 80153ce:	e9c3 1157 	strd	r1, r1, [r3, #348]	@ 0x15c
 80153d2:	f883 1029 	strb.w	r1, [r3, #41]	@ 0x29
 80153d6:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
 80153da:	631e      	str	r6, [r3, #48]	@ 0x30
 80153dc:	f883 10c0 	strb.w	r1, [r3, #192]	@ 0xc0
 80153e0:	f8c3 10c4 	str.w	r1, [r3, #196]	@ 0xc4
 80153e4:	f883 1164 	strb.w	r1, [r3, #356]	@ 0x164
 80153e8:	2210      	movs	r2, #16
 80153ea:	1928      	adds	r0, r5, r4
 80153ec:	f011 fbf0 	bl	8026bd0 <memset>
 80153f0:	4630      	mov	r0, r6
 80153f2:	bd70      	pop	{r4, r5, r6, pc}
 80153f4:	2600      	movs	r6, #0
 80153f6:	e7fb      	b.n	80153f0 <MoblePBADVGetNewLink+0x7c>

080153f8 <MoblePalBluetoothPrvnCmpltReset>:
 80153f8:	b538      	push	{r3, r4, r5, lr}
 80153fa:	4c13      	ldr	r4, [pc, #76]	@ (8015448 <MoblePalBluetoothPrvnCmpltReset+0x50>)
 80153fc:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 8015400:	f013 0f3c 	tst.w	r3, #60	@ 0x3c
 8015404:	d014      	beq.n	8015430 <MoblePalBluetoothPrvnCmpltReset+0x38>
 8015406:	f8d4 2350 	ldr.w	r2, [r4, #848]	@ 0x350
 801540a:	4b10      	ldr	r3, [pc, #64]	@ (801544c <MoblePalBluetoothPrvnCmpltReset+0x54>)
 801540c:	2501      	movs	r5, #1
 801540e:	429a      	cmp	r2, r3
 8015410:	f884 5378 	strb.w	r5, [r4, #888]	@ 0x378
 8015414:	d80d      	bhi.n	8015432 <MoblePalBluetoothPrvnCmpltReset+0x3a>
 8015416:	f7f1 fb85 	bl	8006b24 <HAL_GetTick>
 801541a:	f8d4 3350 	ldr.w	r3, [r4, #848]	@ 0x350
 801541e:	220a      	movs	r2, #10
 8015420:	fbb3 f3f2 	udiv	r3, r3, r2
 8015424:	4403      	add	r3, r0
 8015426:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
 801542a:	4b09      	ldr	r3, [pc, #36]	@ (8015450 <MoblePalBluetoothPrvnCmpltReset+0x58>)
 801542c:	2201      	movs	r2, #1
 801542e:	701a      	strb	r2, [r3, #0]
 8015430:	bd38      	pop	{r3, r4, r5, pc}
 8015432:	f7f1 fb77 	bl	8006b24 <HAL_GetTick>
 8015436:	f500 509c 	add.w	r0, r0, #4992	@ 0x1380
 801543a:	3008      	adds	r0, #8
 801543c:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8015440:	f884 5380 	strb.w	r5, [r4, #896]	@ 0x380
 8015444:	e7f1      	b.n	801542a <MoblePalBluetoothPrvnCmpltReset+0x32>
 8015446:	bf00      	nop
 8015448:	2000141c 	.word	0x2000141c
 801544c:	0001869f 	.word	0x0001869f
 8015450:	2000459f 	.word	0x2000459f

08015454 <MoblePalBluetoothProcessDisconnection>:
 8015454:	b510      	push	{r4, lr}
 8015456:	4c0a      	ldr	r4, [pc, #40]	@ (8015480 <MoblePalBluetoothProcessDisconnection+0x2c>)
 8015458:	f894 3380 	ldrb.w	r3, [r4, #896]	@ 0x380
 801545c:	2b01      	cmp	r3, #1
 801545e:	d10d      	bne.n	801547c <MoblePalBluetoothProcessDisconnection+0x28>
 8015460:	f7f1 fb60 	bl	8006b24 <HAL_GetTick>
 8015464:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 8015468:	4283      	cmp	r3, r0
 801546a:	d207      	bcs.n	801547c <MoblePalBluetoothProcessDisconnection+0x28>
 801546c:	f8b4 0382 	ldrh.w	r0, [r4, #898]	@ 0x382
 8015470:	2116      	movs	r1, #22
 8015472:	f7fc fa96 	bl	80119a2 <aci_gap_terminate>
 8015476:	2300      	movs	r3, #0
 8015478:	f884 3380 	strb.w	r3, [r4, #896]	@ 0x380
 801547c:	bd10      	pop	{r4, pc}
 801547e:	bf00      	nop
 8015480:	2000141c 	.word	0x2000141c

08015484 <MoblePalBluetoothNvmSave>:
 8015484:	4b44      	ldr	r3, [pc, #272]	@ (8015598 <MoblePalBluetoothNvmSave+0x114>)
 8015486:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801548a:	f8d3 4354 	ldr.w	r4, [r3, #852]	@ 0x354
 801548e:	f8c3 0384 	str.w	r0, [r3, #900]	@ 0x384
 8015492:	f014 0403 	ands.w	r4, r4, #3
 8015496:	4606      	mov	r6, r0
 8015498:	460f      	mov	r7, r1
 801549a:	f8a3 1388 	strh.w	r1, [r3, #904]	@ 0x388
 801549e:	d178      	bne.n	8015592 <MoblePalBluetoothNvmSave+0x10e>
 80154a0:	4b3e      	ldr	r3, [pc, #248]	@ (801559c <MoblePalBluetoothNvmSave+0x118>)
 80154a2:	691b      	ldr	r3, [r3, #16]
 80154a4:	f413 2980 	ands.w	r9, r3, #262144	@ 0x40000
 80154a8:	d14e      	bne.n	8015548 <MoblePalBluetoothNvmSave+0xc4>
 80154aa:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 80155a4 <MoblePalBluetoothNvmSave+0x120>
 80154ae:	f898 4000 	ldrb.w	r4, [r8]
 80154b2:	2c00      	cmp	r4, #0
 80154b4:	d048      	beq.n	8015548 <MoblePalBluetoothNvmSave+0xc4>
 80154b6:	4d3a      	ldr	r5, [pc, #232]	@ (80155a0 <MoblePalBluetoothNvmSave+0x11c>)
 80154b8:	464b      	mov	r3, r9
 80154ba:	6828      	ldr	r0, [r5, #0]
 80154bc:	2208      	movs	r2, #8
 80154be:	4669      	mov	r1, sp
 80154c0:	f7f0 fd9a 	bl	8005ff8 <PalNvmRead>
 80154c4:	2801      	cmp	r0, #1
 80154c6:	4604      	mov	r4, r0
 80154c8:	d83e      	bhi.n	8015548 <MoblePalBluetoothNvmSave+0xc4>
 80154ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80154ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 80154d2:	bf08      	it	eq
 80154d4:	f1b1 3fff 	cmpeq.w	r1, #4294967295
 80154d8:	d019      	beq.n	801550e <MoblePalBluetoothNvmSave+0x8a>
 80154da:	6828      	ldr	r0, [r5, #0]
 80154dc:	464b      	mov	r3, r9
 80154de:	2208      	movs	r2, #8
 80154e0:	4669      	mov	r1, sp
 80154e2:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 80154e6:	f7f0 fd87 	bl	8005ff8 <PalNvmRead>
 80154ea:	2801      	cmp	r0, #1
 80154ec:	4604      	mov	r4, r0
 80154ee:	d82b      	bhi.n	8015548 <MoblePalBluetoothNvmSave+0xc4>
 80154f0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80154f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80154f8:	bf08      	it	eq
 80154fa:	f1b1 3fff 	cmpeq.w	r1, #4294967295
 80154fe:	d027      	beq.n	8015550 <MoblePalBluetoothNvmSave+0xcc>
 8015500:	6828      	ldr	r0, [r5, #0]
 8015502:	2102      	movs	r1, #2
 8015504:	f7f0 fe1c 	bl	8006140 <PalNvmErase>
 8015508:	2801      	cmp	r0, #1
 801550a:	4604      	mov	r4, r0
 801550c:	d81c      	bhi.n	8015548 <MoblePalBluetoothNvmSave+0xc4>
 801550e:	2301      	movs	r3, #1
 8015510:	f898 2000 	ldrb.w	r2, [r8]
 8015514:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80155a8 <MoblePalBluetoothNvmSave+0x124>
 8015518:	0791      	lsls	r1, r2, #30
 801551a:	f889 3000 	strb.w	r3, [r9]
 801551e:	d526      	bpl.n	801556e <MoblePalBluetoothNvmSave+0xea>
 8015520:	6828      	ldr	r0, [r5, #0]
 8015522:	463a      	mov	r2, r7
 8015524:	4631      	mov	r1, r6
 8015526:	b9ab      	cbnz	r3, 8015554 <MoblePalBluetoothNvmSave+0xd0>
 8015528:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 801552c:	f7f0 fe22 	bl	8006174 <PalNvmWrite>
 8015530:	2801      	cmp	r0, #1
 8015532:	4604      	mov	r4, r0
 8015534:	d808      	bhi.n	8015548 <MoblePalBluetoothNvmSave+0xc4>
 8015536:	2101      	movs	r1, #1
 8015538:	6828      	ldr	r0, [r5, #0]
 801553a:	f889 1000 	strb.w	r1, [r9]
 801553e:	f7f0 fdff 	bl	8006140 <PalNvmErase>
 8015542:	2801      	cmp	r0, #1
 8015544:	4604      	mov	r4, r0
 8015546:	d91b      	bls.n	8015580 <MoblePalBluetoothNvmSave+0xfc>
 8015548:	4620      	mov	r0, r4
 801554a:	b003      	add	sp, #12
 801554c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015550:	464b      	mov	r3, r9
 8015552:	e7dd      	b.n	8015510 <MoblePalBluetoothNvmSave+0x8c>
 8015554:	f7f0 fe0e 	bl	8006174 <PalNvmWrite>
 8015558:	2801      	cmp	r0, #1
 801555a:	4604      	mov	r4, r0
 801555c:	d8f4      	bhi.n	8015548 <MoblePalBluetoothNvmSave+0xc4>
 801555e:	6828      	ldr	r0, [r5, #0]
 8015560:	2300      	movs	r3, #0
 8015562:	f889 3000 	strb.w	r3, [r9]
 8015566:	2101      	movs	r1, #1
 8015568:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 801556c:	e7e7      	b.n	801553e <MoblePalBluetoothNvmSave+0xba>
 801556e:	07d2      	lsls	r2, r2, #31
 8015570:	d506      	bpl.n	8015580 <MoblePalBluetoothNvmSave+0xfc>
 8015572:	6828      	ldr	r0, [r5, #0]
 8015574:	2101      	movs	r1, #1
 8015576:	b93b      	cbnz	r3, 8015588 <MoblePalBluetoothNvmSave+0x104>
 8015578:	f7f0 fde2 	bl	8006140 <PalNvmErase>
 801557c:	2801      	cmp	r0, #1
 801557e:	d806      	bhi.n	801558e <MoblePalBluetoothNvmSave+0x10a>
 8015580:	2300      	movs	r3, #0
 8015582:	f888 3000 	strb.w	r3, [r8]
 8015586:	e7df      	b.n	8015548 <MoblePalBluetoothNvmSave+0xc4>
 8015588:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 801558c:	e7f4      	b.n	8015578 <MoblePalBluetoothNvmSave+0xf4>
 801558e:	4604      	mov	r4, r0
 8015590:	e7da      	b.n	8015548 <MoblePalBluetoothNvmSave+0xc4>
 8015592:	2400      	movs	r4, #0
 8015594:	e7d8      	b.n	8015548 <MoblePalBluetoothNvmSave+0xc4>
 8015596:	bf00      	nop
 8015598:	2000141c 	.word	0x2000141c
 801559c:	58004000 	.word	0x58004000
 80155a0:	200045b0 	.word	0x200045b0
 80155a4:	2000459d 	.word	0x2000459d
 80155a8:	2000459e 	.word	0x2000459e

080155ac <MoblePalBluetoothModeStopAdv>:
 80155ac:	b510      	push	{r4, lr}
 80155ae:	4c09      	ldr	r4, [pc, #36]	@ (80155d4 <MoblePalBluetoothModeStopAdv+0x28>)
 80155b0:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 80155b4:	07db      	lsls	r3, r3, #31
 80155b6:	d509      	bpl.n	80155cc <MoblePalBluetoothModeStopAdv+0x20>
 80155b8:	f7fc f828 	bl	801160c <aci_gap_set_non_discoverable>
 80155bc:	b940      	cbnz	r0, 80155d0 <MoblePalBluetoothModeStopAdv+0x24>
 80155be:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 80155c2:	f083 0301 	eor.w	r3, r3, #1
 80155c6:	f8c4 3354 	str.w	r3, [r4, #852]	@ 0x354
 80155ca:	bd10      	pop	{r4, pc}
 80155cc:	2001      	movs	r0, #1
 80155ce:	e7fc      	b.n	80155ca <MoblePalBluetoothModeStopAdv+0x1e>
 80155d0:	2002      	movs	r0, #2
 80155d2:	e7fa      	b.n	80155ca <MoblePalBluetoothModeStopAdv+0x1e>
 80155d4:	2000141c 	.word	0x2000141c

080155d8 <MoblePalBluetoothModeStartAdv>:
 80155d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155dc:	4680      	mov	r8, r0
 80155de:	b088      	sub	sp, #32
 80155e0:	4616      	mov	r6, r2
 80155e2:	461c      	mov	r4, r3
 80155e4:	460f      	mov	r7, r1
 80155e6:	b931      	cbnz	r1, 80155f6 <MoblePalBluetoothModeStartAdv+0x1e>
 80155e8:	4b31      	ldr	r3, [pc, #196]	@ (80156b0 <MoblePalBluetoothModeStartAdv+0xd8>)
 80155ea:	4a32      	ldr	r2, [pc, #200]	@ (80156b4 <MoblePalBluetoothModeStartAdv+0xdc>)
 80155ec:	f240 61df 	movw	r1, #1759	@ 0x6df
 80155f0:	4831      	ldr	r0, [pc, #196]	@ (80156b8 <MoblePalBluetoothModeStartAdv+0xe0>)
 80155f2:	f010 fb4f 	bl	8025c94 <__assert_func>
 80155f6:	b922      	cbnz	r2, 8015602 <MoblePalBluetoothModeStartAdv+0x2a>
 80155f8:	4b30      	ldr	r3, [pc, #192]	@ (80156bc <MoblePalBluetoothModeStartAdv+0xe4>)
 80155fa:	4a2e      	ldr	r2, [pc, #184]	@ (80156b4 <MoblePalBluetoothModeStartAdv+0xdc>)
 80155fc:	f44f 61dc 	mov.w	r1, #1760	@ 0x6e0
 8015600:	e7f6      	b.n	80155f0 <MoblePalBluetoothModeStartAdv+0x18>
 8015602:	4d2f      	ldr	r5, [pc, #188]	@ (80156c0 <MoblePalBluetoothModeStartAdv+0xe8>)
 8015604:	f8d5 3354 	ldr.w	r3, [r5, #852]	@ 0x354
 8015608:	079a      	lsls	r2, r3, #30
 801560a:	d504      	bpl.n	8015616 <MoblePalBluetoothModeStartAdv+0x3e>
 801560c:	2402      	movs	r4, #2
 801560e:	4620      	mov	r0, r4
 8015610:	b008      	add	sp, #32
 8015612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015616:	07db      	lsls	r3, r3, #31
 8015618:	d509      	bpl.n	801562e <MoblePalBluetoothModeStartAdv+0x56>
 801561a:	f7fb fff7 	bl	801160c <aci_gap_set_non_discoverable>
 801561e:	2800      	cmp	r0, #0
 8015620:	d1f4      	bne.n	801560c <MoblePalBluetoothModeStartAdv+0x34>
 8015622:	f8d5 3354 	ldr.w	r3, [r5, #852]	@ 0x354
 8015626:	f083 0301 	eor.w	r3, r3, #1
 801562a:	f8c5 3354 	str.w	r3, [r5, #852]	@ 0x354
 801562e:	2e1f      	cmp	r6, #31
 8015630:	d83c      	bhi.n	80156ac <MoblePalBluetoothModeStartAdv+0xd4>
 8015632:	f1a4 020a 	sub.w	r2, r4, #10
 8015636:	f242 73f6 	movw	r3, #10230	@ 0x27f6
 801563a:	429a      	cmp	r2, r3
 801563c:	d836      	bhi.n	80156ac <MoblePalBluetoothModeStartAdv+0xd4>
 801563e:	f895 3363 	ldrb.w	r3, [r5, #867]	@ 0x363
 8015642:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015646:	f1b8 0f01 	cmp.w	r8, #1
 801564a:	e9cd 1105 	strd	r1, r1, [sp, #20]
 801564e:	f103 31ff 	add.w	r1, r3, #4294967295
 8015652:	bf0c      	ite	eq
 8015654:	2000      	moveq	r0, #0
 8015656:	2003      	movne	r0, #3
 8015658:	2205      	movs	r2, #5
 801565a:	424b      	negs	r3, r1
 801565c:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8015660:	fbb4 f4f2 	udiv	r4, r4, r2
 8015664:	b2a2      	uxth	r2, r4
 8015666:	f04f 0400 	mov.w	r4, #0
 801566a:	414b      	adcs	r3, r1
 801566c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8015670:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8015674:	9400      	str	r4, [sp, #0]
 8015676:	4611      	mov	r1, r2
 8015678:	f7fb ffec 	bl	8011654 <aci_gap_set_discoverable>
 801567c:	2800      	cmp	r0, #0
 801567e:	d1c5      	bne.n	801560c <MoblePalBluetoothModeStartAdv+0x34>
 8015680:	4639      	mov	r1, r7
 8015682:	4630      	mov	r0, r6
 8015684:	f7fd f9db 	bl	8012a3e <hci_le_set_advertising_data>
 8015688:	4604      	mov	r4, r0
 801568a:	2800      	cmp	r0, #0
 801568c:	d1be      	bne.n	801560c <MoblePalBluetoothModeStartAdv+0x34>
 801568e:	f895 0364 	ldrb.w	r0, [r5, #868]	@ 0x364
 8015692:	f8d5 1368 	ldr.w	r1, [r5, #872]	@ 0x368
 8015696:	3002      	adds	r0, #2
 8015698:	b2c0      	uxtb	r0, r0
 801569a:	f7fd fa39 	bl	8012b10 <hci_le_set_scan_response_data>
 801569e:	f8d5 3354 	ldr.w	r3, [r5, #852]	@ 0x354
 80156a2:	f043 0301 	orr.w	r3, r3, #1
 80156a6:	f8c5 3354 	str.w	r3, [r5, #852]	@ 0x354
 80156aa:	e7b0      	b.n	801560e <MoblePalBluetoothModeStartAdv+0x36>
 80156ac:	2403      	movs	r4, #3
 80156ae:	e7ae      	b.n	801560e <MoblePalBluetoothModeStartAdv+0x36>
 80156b0:	0802e558 	.word	0x0802e558
 80156b4:	0802caf7 	.word	0x0802caf7
 80156b8:	0802e55d 	.word	0x0802e55d
 80156bc:	0802e5a4 	.word	0x0802e5a4
 80156c0:	2000141c 	.word	0x2000141c

080156c4 <MoblePalBluetoothModeStopScan>:
 80156c4:	b510      	push	{r4, lr}
 80156c6:	4c0e      	ldr	r4, [pc, #56]	@ (8015700 <MoblePalBluetoothModeStopScan+0x3c>)
 80156c8:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 80156cc:	079b      	lsls	r3, r3, #30
 80156ce:	d401      	bmi.n	80156d4 <MoblePalBluetoothModeStopScan+0x10>
 80156d0:	2001      	movs	r0, #1
 80156d2:	bd10      	pop	{r4, pc}
 80156d4:	2080      	movs	r0, #128	@ 0x80
 80156d6:	f7fc f9ce 	bl	8011a76 <aci_gap_terminate_gap_proc>
 80156da:	2800      	cmp	r0, #0
 80156dc:	d1f8      	bne.n	80156d0 <MoblePalBluetoothModeStopScan+0xc>
 80156de:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 80156e2:	f8b4 1388 	ldrh.w	r1, [r4, #904]	@ 0x388
 80156e6:	f8d4 0384 	ldr.w	r0, [r4, #900]	@ 0x384
 80156ea:	f083 0302 	eor.w	r3, r3, #2
 80156ee:	f8c4 3354 	str.w	r3, [r4, #852]	@ 0x354
 80156f2:	f7ff fec7 	bl	8015484 <MoblePalBluetoothNvmSave>
 80156f6:	2801      	cmp	r0, #1
 80156f8:	bf98      	it	ls
 80156fa:	2000      	movls	r0, #0
 80156fc:	e7e9      	b.n	80156d2 <MoblePalBluetoothModeStopScan+0xe>
 80156fe:	bf00      	nop
 8015700:	2000141c 	.word	0x2000141c

08015704 <MoblePalBluetoothModeStartScan>:
 8015704:	f1a1 020a 	sub.w	r2, r1, #10
 8015708:	f242 73f6 	movw	r3, #10230	@ 0x27f6
 801570c:	429a      	cmp	r2, r3
 801570e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015710:	d822      	bhi.n	8015758 <MoblePalBluetoothModeStartScan+0x54>
 8015712:	4281      	cmp	r1, r0
 8015714:	d320      	bcc.n	8015758 <MoblePalBluetoothModeStartScan+0x54>
 8015716:	4d13      	ldr	r5, [pc, #76]	@ (8015764 <MoblePalBluetoothModeStartScan+0x60>)
 8015718:	f8d5 2354 	ldr.w	r2, [r5, #852]	@ 0x354
 801571c:	f012 0202 	ands.w	r2, r2, #2
 8015720:	d11c      	bne.n	801575c <MoblePalBluetoothModeStartScan+0x58>
 8015722:	f895 3363 	ldrb.w	r3, [r5, #867]	@ 0x363
 8015726:	00c0      	lsls	r0, r0, #3
 8015728:	2605      	movs	r6, #5
 801572a:	fbb0 f4f6 	udiv	r4, r0, r6
 801572e:	00c8      	lsls	r0, r1, #3
 8015730:	1e59      	subs	r1, r3, #1
 8015732:	424b      	negs	r3, r1
 8015734:	414b      	adcs	r3, r1
 8015736:	fbb0 f0f6 	udiv	r0, r0, r6
 801573a:	e9cd 2200 	strd	r2, r2, [sp]
 801573e:	b2a1      	uxth	r1, r4
 8015740:	b280      	uxth	r0, r0
 8015742:	f7fc f9ec 	bl	8011b1e <aci_gap_start_observation_proc>
 8015746:	b958      	cbnz	r0, 8015760 <MoblePalBluetoothModeStartScan+0x5c>
 8015748:	f8d5 3354 	ldr.w	r3, [r5, #852]	@ 0x354
 801574c:	f043 0302 	orr.w	r3, r3, #2
 8015750:	f8c5 3354 	str.w	r3, [r5, #852]	@ 0x354
 8015754:	b002      	add	sp, #8
 8015756:	bd70      	pop	{r4, r5, r6, pc}
 8015758:	2003      	movs	r0, #3
 801575a:	e7fb      	b.n	8015754 <MoblePalBluetoothModeStartScan+0x50>
 801575c:	2001      	movs	r0, #1
 801575e:	e7f9      	b.n	8015754 <MoblePalBluetoothModeStartScan+0x50>
 8015760:	2002      	movs	r0, #2
 8015762:	e7f7      	b.n	8015754 <MoblePalBluetoothModeStartScan+0x50>
 8015764:	2000141c 	.word	0x2000141c

08015768 <BPKA_ReadP256Key>:
 8015768:	4601      	mov	r1, r0
 801576a:	480b      	ldr	r0, [pc, #44]	@ (8015798 <BPKA_ReadP256Key+0x30>)
 801576c:	b538      	push	{r3, r4, r5, lr}
 801576e:	f7ff fa9f 	bl	8014cb0 <BPKA_Reverse>
 8015772:	3020      	adds	r0, #32
 8015774:	f7ff fa9c 	bl	8014cb0 <BPKA_Reverse>
 8015778:	f1a0 0420 	sub.w	r4, r0, #32
 801577c:	460b      	mov	r3, r1
 801577e:	f100 0520 	add.w	r5, r0, #32
 8015782:	4622      	mov	r2, r4
 8015784:	ca03      	ldmia	r2!, {r0, r1}
 8015786:	42aa      	cmp	r2, r5
 8015788:	6018      	str	r0, [r3, #0]
 801578a:	6059      	str	r1, [r3, #4]
 801578c:	4614      	mov	r4, r2
 801578e:	f103 0308 	add.w	r3, r3, #8
 8015792:	d1f6      	bne.n	8015782 <BPKA_ReadP256Key+0x1a>
 8015794:	bd38      	pop	{r3, r4, r5, pc}
 8015796:	bf00      	nop
 8015798:	200017a8 	.word	0x200017a8

0801579c <BPKA_ReadDhKey>:
 801579c:	b538      	push	{r3, r4, r5, lr}
 801579e:	4c0f      	ldr	r4, [pc, #60]	@ (80157dc <BPKA_ReadDhKey+0x40>)
 80157a0:	f894 33ec 	ldrb.w	r3, [r4, #1004]	@ 0x3ec
 80157a4:	4601      	mov	r1, r0
 80157a6:	b133      	cbz	r3, 80157b6 <BPKA_ReadDhKey+0x1a>
 80157a8:	2220      	movs	r2, #32
 80157aa:	21ff      	movs	r1, #255	@ 0xff
 80157ac:	f011 fa10 	bl	8026bd0 <memset>
 80157b0:	f06f 0002 	mvn.w	r0, #2
 80157b4:	bd38      	pop	{r3, r4, r5, pc}
 80157b6:	f504 7063 	add.w	r0, r4, #908	@ 0x38c
 80157ba:	f7ff fa79 	bl	8014cb0 <BPKA_Reverse>
 80157be:	4605      	mov	r5, r0
 80157c0:	460b      	mov	r3, r1
 80157c2:	f504 746b 	add.w	r4, r4, #940	@ 0x3ac
 80157c6:	462a      	mov	r2, r5
 80157c8:	ca03      	ldmia	r2!, {r0, r1}
 80157ca:	42a2      	cmp	r2, r4
 80157cc:	6018      	str	r0, [r3, #0]
 80157ce:	6059      	str	r1, [r3, #4]
 80157d0:	4615      	mov	r5, r2
 80157d2:	f103 0308 	add.w	r3, r3, #8
 80157d6:	d1f6      	bne.n	80157c6 <BPKA_ReadDhKey+0x2a>
 80157d8:	2000      	movs	r0, #0
 80157da:	e7eb      	b.n	80157b4 <BPKA_ReadDhKey+0x18>
 80157dc:	2000141c 	.word	0x2000141c

080157e0 <HW_AES_Enable>:
 80157e0:	4b0d      	ldr	r3, [pc, #52]	@ (8015818 <HW_AES_Enable+0x38>)
 80157e2:	f893 23ed 	ldrb.w	r2, [r3, #1005]	@ 0x3ed
 80157e6:	b082      	sub	sp, #8
 80157e8:	b9a2      	cbnz	r2, 8015814 <HW_AES_Enable+0x34>
 80157ea:	2001      	movs	r0, #1
 80157ec:	f883 03ed 	strb.w	r0, [r3, #1005]	@ 0x3ed
 80157f0:	f3ef 8110 	mrs	r1, PRIMASK
 80157f4:	b672      	cpsid	i
 80157f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80157fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80157fc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8015800:	64da      	str	r2, [r3, #76]	@ 0x4c
 8015802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015808:	9301      	str	r3, [sp, #4]
 801580a:	9b01      	ldr	r3, [sp, #4]
 801580c:	f381 8810 	msr	PRIMASK, r1
 8015810:	b002      	add	sp, #8
 8015812:	4770      	bx	lr
 8015814:	2000      	movs	r0, #0
 8015816:	e7fb      	b.n	8015810 <HW_AES_Enable+0x30>
 8015818:	2000141c 	.word	0x2000141c

0801581c <HW_AES_Disable>:
 801581c:	b510      	push	{r4, lr}
 801581e:	4a0a      	ldr	r2, [pc, #40]	@ (8015848 <HW_AES_Disable+0x2c>)
 8015820:	f892 33ed 	ldrb.w	r3, [r2, #1005]	@ 0x3ed
 8015824:	b17b      	cbz	r3, 8015846 <HW_AES_Disable+0x2a>
 8015826:	4b09      	ldr	r3, [pc, #36]	@ (801584c <HW_AES_Disable+0x30>)
 8015828:	2100      	movs	r1, #0
 801582a:	6019      	str	r1, [r3, #0]
 801582c:	f3ef 8410 	mrs	r4, PRIMASK
 8015830:	b672      	cpsid	i
 8015832:	f04f 40b0 	mov.w	r0, #1476395008	@ 0x58000000
 8015836:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015838:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801583c:	64c3      	str	r3, [r0, #76]	@ 0x4c
 801583e:	f384 8810 	msr	PRIMASK, r4
 8015842:	f882 13ed 	strb.w	r1, [r2, #1005]	@ 0x3ed
 8015846:	bd10      	pop	{r4, pc}
 8015848:	2000141c 	.word	0x2000141c
 801584c:	50060000 	.word	0x50060000

08015850 <HW_AES_SetKey>:
 8015850:	b530      	push	{r4, r5, lr}
 8015852:	4b0f      	ldr	r3, [pc, #60]	@ (8015890 <HW_AES_SetKey+0x40>)
 8015854:	b085      	sub	sp, #20
 8015856:	2200      	movs	r2, #0
 8015858:	601a      	str	r2, [r3, #0]
 801585a:	466c      	mov	r4, sp
 801585c:	4603      	mov	r3, r0
 801585e:	f100 0510 	add.w	r5, r0, #16
 8015862:	6818      	ldr	r0, [r3, #0]
 8015864:	6859      	ldr	r1, [r3, #4]
 8015866:	4622      	mov	r2, r4
 8015868:	c203      	stmia	r2!, {r0, r1}
 801586a:	3308      	adds	r3, #8
 801586c:	42ab      	cmp	r3, r5
 801586e:	4614      	mov	r4, r2
 8015870:	d1f7      	bne.n	8015862 <HW_AES_SetKey+0x12>
 8015872:	9b00      	ldr	r3, [sp, #0]
 8015874:	ba1a      	rev	r2, r3
 8015876:	4b06      	ldr	r3, [pc, #24]	@ (8015890 <HW_AES_SetKey+0x40>)
 8015878:	61da      	str	r2, [r3, #28]
 801587a:	9a01      	ldr	r2, [sp, #4]
 801587c:	ba12      	rev	r2, r2
 801587e:	619a      	str	r2, [r3, #24]
 8015880:	9a02      	ldr	r2, [sp, #8]
 8015882:	ba12      	rev	r2, r2
 8015884:	615a      	str	r2, [r3, #20]
 8015886:	9a03      	ldr	r2, [sp, #12]
 8015888:	ba12      	rev	r2, r2
 801588a:	611a      	str	r2, [r3, #16]
 801588c:	b005      	add	sp, #20
 801588e:	bd30      	pop	{r4, r5, pc}
 8015890:	50060000 	.word	0x50060000

08015894 <HW_AES_Crypt>:
 8015894:	b508      	push	{r3, lr}
 8015896:	f7ff f92b 	bl	8014af0 <HW_AES_Input>
 801589a:	f7ff f91d 	bl	8014ad8 <HW_AES_WaitComplete>
 801589e:	4b05      	ldr	r3, [pc, #20]	@ (80158b4 <HW_AES_Crypt+0x20>)
 80158a0:	68da      	ldr	r2, [r3, #12]
 80158a2:	600a      	str	r2, [r1, #0]
 80158a4:	68da      	ldr	r2, [r3, #12]
 80158a6:	604a      	str	r2, [r1, #4]
 80158a8:	68da      	ldr	r2, [r3, #12]
 80158aa:	608a      	str	r2, [r1, #8]
 80158ac:	68db      	ldr	r3, [r3, #12]
 80158ae:	60cb      	str	r3, [r1, #12]
 80158b0:	bd08      	pop	{r3, pc}
 80158b2:	bf00      	nop
 80158b4:	50060000 	.word	0x50060000

080158b8 <BAES_CmacCompute>:
 80158b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80158bc:	460d      	mov	r5, r1
 80158be:	b089      	sub	sp, #36	@ 0x24
 80158c0:	4614      	mov	r4, r2
 80158c2:	461e      	mov	r6, r3
 80158c4:	4607      	mov	r7, r0
 80158c6:	b168      	cbz	r0, 80158e4 <BAES_CmacCompute+0x2c>
 80158c8:	f7ff ff8a 	bl	80157e0 <HW_AES_Enable>
 80158cc:	4638      	mov	r0, r7
 80158ce:	f7ff ffbf 	bl	8015850 <HW_AES_SetKey>
 80158d2:	4b5d      	ldr	r3, [pc, #372]	@ (8015a48 <BAES_CmacCompute+0x190>)
 80158d4:	2201      	movs	r2, #1
 80158d6:	601a      	str	r2, [r3, #0]
 80158d8:	4b5c      	ldr	r3, [pc, #368]	@ (8015a4c <BAES_CmacCompute+0x194>)
 80158da:	2200      	movs	r2, #0
 80158dc:	e9c3 22fe 	strd	r2, r2, [r3, #1016]	@ 0x3f8
 80158e0:	e9c3 22fc 	strd	r2, r2, [r3, #1008]	@ 0x3f0
 80158e4:	2e00      	cmp	r6, #0
 80158e6:	f000 8099 	beq.w	8015a1c <BAES_CmacCompute+0x164>
 80158ea:	f004 070f 	and.w	r7, r4, #15
 80158ee:	b114      	cbz	r4, 80158f6 <BAES_CmacCompute+0x3e>
 80158f0:	2f00      	cmp	r7, #0
 80158f2:	bf08      	it	eq
 80158f4:	2710      	moveq	r7, #16
 80158f6:	1be4      	subs	r4, r4, r7
 80158f8:	f8df 8150 	ldr.w	r8, [pc, #336]	@ 8015a4c <BAES_CmacCompute+0x194>
 80158fc:	442c      	add	r4, r5
 80158fe:	f508 797c 	add.w	r9, r8, #1008	@ 0x3f0
 8015902:	e026      	b.n	8015952 <BAES_CmacCompute+0x9a>
 8015904:	466a      	mov	r2, sp
 8015906:	f105 0c10 	add.w	ip, r5, #16
 801590a:	6828      	ldr	r0, [r5, #0]
 801590c:	6869      	ldr	r1, [r5, #4]
 801590e:	4613      	mov	r3, r2
 8015910:	c303      	stmia	r3!, {r0, r1}
 8015912:	3508      	adds	r5, #8
 8015914:	4565      	cmp	r5, ip
 8015916:	461a      	mov	r2, r3
 8015918:	d1f7      	bne.n	801590a <BAES_CmacCompute+0x52>
 801591a:	9b00      	ldr	r3, [sp, #0]
 801591c:	ba1a      	rev	r2, r3
 801591e:	f8d8 33f0 	ldr.w	r3, [r8, #1008]	@ 0x3f0
 8015922:	4053      	eors	r3, r2
 8015924:	9300      	str	r3, [sp, #0]
 8015926:	9b01      	ldr	r3, [sp, #4]
 8015928:	ba1a      	rev	r2, r3
 801592a:	f8d8 33f4 	ldr.w	r3, [r8, #1012]	@ 0x3f4
 801592e:	4053      	eors	r3, r2
 8015930:	9301      	str	r3, [sp, #4]
 8015932:	9b02      	ldr	r3, [sp, #8]
 8015934:	ba1a      	rev	r2, r3
 8015936:	f8d8 33f8 	ldr.w	r3, [r8, #1016]	@ 0x3f8
 801593a:	4053      	eors	r3, r2
 801593c:	9302      	str	r3, [sp, #8]
 801593e:	9b03      	ldr	r3, [sp, #12]
 8015940:	ba1a      	rev	r2, r3
 8015942:	f8d8 33fc 	ldr.w	r3, [r8, #1020]	@ 0x3fc
 8015946:	4649      	mov	r1, r9
 8015948:	4053      	eors	r3, r2
 801594a:	4668      	mov	r0, sp
 801594c:	9303      	str	r3, [sp, #12]
 801594e:	f7ff ffa1 	bl	8015894 <HW_AES_Crypt>
 8015952:	42a5      	cmp	r5, r4
 8015954:	d1d6      	bne.n	8015904 <BAES_CmacCompute+0x4c>
 8015956:	2e00      	cmp	r6, #0
 8015958:	d05d      	beq.n	8015a16 <BAES_CmacCompute+0x15e>
 801595a:	2400      	movs	r4, #0
 801595c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8015960:	e9cd 4400 	strd	r4, r4, [sp]
 8015964:	42bc      	cmp	r4, r7
 8015966:	d15b      	bne.n	8015a20 <BAES_CmacCompute+0x168>
 8015968:	ad04      	add	r5, sp, #16
 801596a:	2300      	movs	r3, #0
 801596c:	4629      	mov	r1, r5
 801596e:	4628      	mov	r0, r5
 8015970:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8015974:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8015978:	f7ff ff8c 	bl	8015894 <HW_AES_Crypt>
 801597c:	f7ff f894 	bl	8014aa8 <BAES_CmacKeyRoll>
 8015980:	2c10      	cmp	r4, #16
 8015982:	d012      	beq.n	80159aa <BAES_CmacCompute+0xf2>
 8015984:	f024 0203 	bic.w	r2, r4, #3
 8015988:	f102 0320 	add.w	r3, r2, #32
 801598c:	eb0d 0203 	add.w	r2, sp, r3
 8015990:	43e4      	mvns	r4, r4
 8015992:	f004 0403 	and.w	r4, r4, #3
 8015996:	f852 1c20 	ldr.w	r1, [r2, #-32]
 801599a:	00e4      	lsls	r4, r4, #3
 801599c:	2380      	movs	r3, #128	@ 0x80
 801599e:	40a3      	lsls	r3, r4
 80159a0:	430b      	orrs	r3, r1
 80159a2:	f842 3c20 	str.w	r3, [r2, #-32]
 80159a6:	f7ff f87f 	bl	8014aa8 <BAES_CmacKeyRoll>
 80159aa:	466a      	mov	r2, sp
 80159ac:	4f28      	ldr	r7, [pc, #160]	@ (8015a50 <BAES_CmacCompute+0x198>)
 80159ae:	4628      	mov	r0, r5
 80159b0:	f04f 0e04 	mov.w	lr, #4
 80159b4:	4614      	mov	r4, r2
 80159b6:	6811      	ldr	r1, [r2, #0]
 80159b8:	f857 3b04 	ldr.w	r3, [r7], #4
 80159bc:	f850 cb04 	ldr.w	ip, [r0], #4
 80159c0:	404b      	eors	r3, r1
 80159c2:	ea83 030c 	eor.w	r3, r3, ip
 80159c6:	f1be 0e01 	subs.w	lr, lr, #1
 80159ca:	f842 3b04 	str.w	r3, [r2], #4
 80159ce:	d1f2      	bne.n	80159b6 <BAES_CmacCompute+0xfe>
 80159d0:	4f1e      	ldr	r7, [pc, #120]	@ (8015a4c <BAES_CmacCompute+0x194>)
 80159d2:	4620      	mov	r0, r4
 80159d4:	f507 717c 	add.w	r1, r7, #1008	@ 0x3f0
 80159d8:	f7ff ff5c 	bl	8015894 <HW_AES_Crypt>
 80159dc:	f7ff ff1e 	bl	801581c <HW_AES_Disable>
 80159e0:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80159e4:	ba1b      	rev	r3, r3
 80159e6:	9300      	str	r3, [sp, #0]
 80159e8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 80159ec:	ba1b      	rev	r3, r3
 80159ee:	9301      	str	r3, [sp, #4]
 80159f0:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80159f4:	ba1b      	rev	r3, r3
 80159f6:	9302      	str	r3, [sp, #8]
 80159f8:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 80159fc:	ba1b      	rev	r3, r3
 80159fe:	9303      	str	r3, [sp, #12]
 8015a00:	4622      	mov	r2, r4
 8015a02:	4633      	mov	r3, r6
 8015a04:	4614      	mov	r4, r2
 8015a06:	cc03      	ldmia	r4!, {r0, r1}
 8015a08:	42ac      	cmp	r4, r5
 8015a0a:	6018      	str	r0, [r3, #0]
 8015a0c:	6059      	str	r1, [r3, #4]
 8015a0e:	4622      	mov	r2, r4
 8015a10:	f103 0308 	add.w	r3, r3, #8
 8015a14:	d1f6      	bne.n	8015a04 <BAES_CmacCompute+0x14c>
 8015a16:	b009      	add	sp, #36	@ 0x24
 8015a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a1c:	4637      	mov	r7, r6
 8015a1e:	e76b      	b.n	80158f8 <BAES_CmacCompute+0x40>
 8015a20:	f024 0103 	bic.w	r1, r4, #3
 8015a24:	f101 0320 	add.w	r3, r1, #32
 8015a28:	43e2      	mvns	r2, r4
 8015a2a:	eb0d 0103 	add.w	r1, sp, r3
 8015a2e:	f002 0203 	and.w	r2, r2, #3
 8015a32:	5d2b      	ldrb	r3, [r5, r4]
 8015a34:	00d2      	lsls	r2, r2, #3
 8015a36:	4093      	lsls	r3, r2
 8015a38:	f851 2c20 	ldr.w	r2, [r1, #-32]
 8015a3c:	4313      	orrs	r3, r2
 8015a3e:	f841 3c20 	str.w	r3, [r1, #-32]
 8015a42:	3401      	adds	r4, #1
 8015a44:	e78e      	b.n	8015964 <BAES_CmacCompute+0xac>
 8015a46:	bf00      	nop
 8015a48:	50060000 	.word	0x50060000
 8015a4c:	2000141c 	.word	0x2000141c
 8015a50:	2000180c 	.word	0x2000180c

08015a54 <MoblePalCryptoK1.part.0>:
 8015a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a56:	4616      	mov	r6, r2
 8015a58:	b089      	sub	sp, #36	@ 0x24
 8015a5a:	2210      	movs	r2, #16
 8015a5c:	461f      	mov	r7, r3
 8015a5e:	4604      	mov	r4, r0
 8015a60:	460d      	mov	r5, r1
 8015a62:	eb0d 0002 	add.w	r0, sp, r2
 8015a66:	2100      	movs	r1, #0
 8015a68:	f011 f8b2 	bl	8026bd0 <memset>
 8015a6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015a6e:	4639      	mov	r1, r7
 8015a70:	a804      	add	r0, sp, #16
 8015a72:	f011 f95e 	bl	8026d32 <memcpy>
 8015a76:	466b      	mov	r3, sp
 8015a78:	4632      	mov	r2, r6
 8015a7a:	4629      	mov	r1, r5
 8015a7c:	a804      	add	r0, sp, #16
 8015a7e:	f7ff ff1b 	bl	80158b8 <BAES_CmacCompute>
 8015a82:	4668      	mov	r0, sp
 8015a84:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	@ 0x3c
 8015a88:	4623      	mov	r3, r4
 8015a8a:	f7ff ff15 	bl	80158b8 <BAES_CmacCompute>
 8015a8e:	2000      	movs	r0, #0
 8015a90:	b009      	add	sp, #36	@ 0x24
 8015a92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a94 <BAES_EcbEncrypt>:
 8015a94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015a96:	4606      	mov	r6, r0
 8015a98:	460c      	mov	r4, r1
 8015a9a:	4615      	mov	r5, r2
 8015a9c:	f7ff fea0 	bl	80157e0 <HW_AES_Enable>
 8015aa0:	4630      	mov	r0, r6
 8015aa2:	f7ff fed5 	bl	8015850 <HW_AES_SetKey>
 8015aa6:	4b11      	ldr	r3, [pc, #68]	@ (8015aec <BAES_EcbEncrypt+0x58>)
 8015aa8:	2205      	movs	r2, #5
 8015aaa:	601a      	str	r2, [r3, #0]
 8015aac:	4623      	mov	r3, r4
 8015aae:	f103 0610 	add.w	r6, r3, #16
 8015ab2:	466c      	mov	r4, sp
 8015ab4:	6818      	ldr	r0, [r3, #0]
 8015ab6:	6859      	ldr	r1, [r3, #4]
 8015ab8:	4622      	mov	r2, r4
 8015aba:	c203      	stmia	r2!, {r0, r1}
 8015abc:	3308      	adds	r3, #8
 8015abe:	42b3      	cmp	r3, r6
 8015ac0:	4614      	mov	r4, r2
 8015ac2:	d1f7      	bne.n	8015ab4 <BAES_EcbEncrypt+0x20>
 8015ac4:	4669      	mov	r1, sp
 8015ac6:	4668      	mov	r0, sp
 8015ac8:	f7ff fee4 	bl	8015894 <HW_AES_Crypt>
 8015acc:	f7ff fea6 	bl	801581c <HW_AES_Disable>
 8015ad0:	462a      	mov	r2, r5
 8015ad2:	466b      	mov	r3, sp
 8015ad4:	ad04      	add	r5, sp, #16
 8015ad6:	461c      	mov	r4, r3
 8015ad8:	cc03      	ldmia	r4!, {r0, r1}
 8015ada:	42ac      	cmp	r4, r5
 8015adc:	6010      	str	r0, [r2, #0]
 8015ade:	6051      	str	r1, [r2, #4]
 8015ae0:	4623      	mov	r3, r4
 8015ae2:	f102 0208 	add.w	r2, r2, #8
 8015ae6:	d1f6      	bne.n	8015ad6 <BAES_EcbEncrypt+0x42>
 8015ae8:	b004      	add	sp, #16
 8015aea:	bd70      	pop	{r4, r5, r6, pc}
 8015aec:	50060000 	.word	0x50060000

08015af0 <HW_AES_CcmStart>:
 8015af0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015af4:	4615      	mov	r5, r2
 8015af6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015af8:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8015afa:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8015afc:	3a02      	subs	r2, #2
 8015afe:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8015b02:	461e      	mov	r6, r3
 8015b04:	f1c1 020e 	rsb	r2, r1, #14
 8015b08:	3b00      	subs	r3, #0
 8015b0a:	bf18      	it	ne
 8015b0c:	2301      	movne	r3, #1
 8015b0e:	ea42 02cc 	orr.w	r2, r2, ip, lsl #3
 8015b12:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 8015b16:	f88d 2000 	strb.w	r2, [sp]
 8015b1a:	f1c1 080f 	rsb	r8, r1, #15
 8015b1e:	460a      	mov	r2, r1
 8015b20:	4601      	mov	r1, r0
 8015b22:	f10d 0001 	add.w	r0, sp, #1
 8015b26:	f011 f904 	bl	8026d32 <memcpy>
 8015b2a:	aa04      	add	r2, sp, #16
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	4543      	cmp	r3, r8
 8015b30:	d150      	bne.n	8015bd4 <HW_AES_CcmStart+0xe4>
 8015b32:	9b00      	ldr	r3, [sp, #0]
 8015b34:	4834      	ldr	r0, [pc, #208]	@ (8015c08 <HW_AES_CcmStart+0x118>)
 8015b36:	4935      	ldr	r1, [pc, #212]	@ (8015c0c <HW_AES_CcmStart+0x11c>)
 8015b38:	ba1b      	rev	r3, r3
 8015b3a:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8015b3c:	9b01      	ldr	r3, [sp, #4]
 8015b3e:	ba1b      	rev	r3, r3
 8015b40:	6283      	str	r3, [r0, #40]	@ 0x28
 8015b42:	9b02      	ldr	r3, [sp, #8]
 8015b44:	ba1b      	rev	r3, r3
 8015b46:	6243      	str	r3, [r0, #36]	@ 0x24
 8015b48:	9b03      	ldr	r3, [sp, #12]
 8015b4a:	ba1b      	rev	r3, r3
 8015b4c:	6203      	str	r3, [r0, #32]
 8015b4e:	4b30      	ldr	r3, [pc, #192]	@ (8015c10 <HW_AES_CcmStart+0x120>)
 8015b50:	2c00      	cmp	r4, #0
 8015b52:	bf08      	it	eq
 8015b54:	4619      	moveq	r1, r3
 8015b56:	6001      	str	r1, [r0, #0]
 8015b58:	f7fe ffbe 	bl	8014ad8 <HW_AES_WaitComplete>
 8015b5c:	2e00      	cmp	r6, #0
 8015b5e:	d050      	beq.n	8015c02 <HW_AES_CcmStart+0x112>
 8015b60:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8015b64:	6001      	str	r1, [r0, #0]
 8015b66:	2210      	movs	r2, #16
 8015b68:	2100      	movs	r1, #0
 8015b6a:	4668      	mov	r0, sp
 8015b6c:	f011 f830 	bl	8026bd0 <memset>
 8015b70:	2e0e      	cmp	r6, #14
 8015b72:	4634      	mov	r4, r6
 8015b74:	bf28      	it	cs
 8015b76:	240e      	movcs	r4, #14
 8015b78:	ba73      	rev16	r3, r6
 8015b7a:	4622      	mov	r2, r4
 8015b7c:	4629      	mov	r1, r5
 8015b7e:	f10d 0002 	add.w	r0, sp, #2
 8015b82:	f8ad 3000 	strh.w	r3, [sp]
 8015b86:	f011 f8d4 	bl	8026d32 <memcpy>
 8015b8a:	4668      	mov	r0, sp
 8015b8c:	f7fe ffb0 	bl	8014af0 <HW_AES_Input>
 8015b90:	f7fe ffa2 	bl	8014ad8 <HW_AES_WaitComplete>
 8015b94:	4425      	add	r5, r4
 8015b96:	1b34      	subs	r4, r6, r4
 8015b98:	4626      	mov	r6, r4
 8015b9a:	eb05 0804 	add.w	r8, r5, r4
 8015b9e:	2e0f      	cmp	r6, #15
 8015ba0:	eba8 0306 	sub.w	r3, r8, r6
 8015ba4:	d81b      	bhi.n	8015bde <HW_AES_CcmStart+0xee>
 8015ba6:	f024 030f 	bic.w	r3, r4, #15
 8015baa:	1ae4      	subs	r4, r4, r3
 8015bac:	441d      	add	r5, r3
 8015bae:	d028      	beq.n	8015c02 <HW_AES_CcmStart+0x112>
 8015bb0:	2210      	movs	r2, #16
 8015bb2:	2100      	movs	r1, #0
 8015bb4:	4668      	mov	r0, sp
 8015bb6:	f011 f80b 	bl	8026bd0 <memset>
 8015bba:	4622      	mov	r2, r4
 8015bbc:	4629      	mov	r1, r5
 8015bbe:	4668      	mov	r0, sp
 8015bc0:	f011 f8b7 	bl	8026d32 <memcpy>
 8015bc4:	4668      	mov	r0, sp
 8015bc6:	f7fe ff93 	bl	8014af0 <HW_AES_Input>
 8015bca:	b004      	add	sp, #16
 8015bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015bd0:	f7fe bf82 	b.w	8014ad8 <HW_AES_WaitComplete>
 8015bd4:	f802 7d01 	strb.w	r7, [r2, #-1]!
 8015bd8:	3301      	adds	r3, #1
 8015bda:	0a3f      	lsrs	r7, r7, #8
 8015bdc:	e7a7      	b.n	8015b2e <HW_AES_CcmStart+0x3e>
 8015bde:	466f      	mov	r7, sp
 8015be0:	f103 0c10 	add.w	ip, r3, #16
 8015be4:	6818      	ldr	r0, [r3, #0]
 8015be6:	6859      	ldr	r1, [r3, #4]
 8015be8:	463a      	mov	r2, r7
 8015bea:	c203      	stmia	r2!, {r0, r1}
 8015bec:	3308      	adds	r3, #8
 8015bee:	4563      	cmp	r3, ip
 8015bf0:	4617      	mov	r7, r2
 8015bf2:	d1f7      	bne.n	8015be4 <HW_AES_CcmStart+0xf4>
 8015bf4:	4668      	mov	r0, sp
 8015bf6:	f7fe ff7b 	bl	8014af0 <HW_AES_Input>
 8015bfa:	3e10      	subs	r6, #16
 8015bfc:	f7fe ff6c 	bl	8014ad8 <HW_AES_WaitComplete>
 8015c00:	e7cd      	b.n	8015b9e <HW_AES_CcmStart+0xae>
 8015c02:	b004      	add	sp, #16
 8015c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c08:	50060000 	.word	0x50060000
 8015c0c:	00010005 	.word	0x00010005
 8015c10:	00010015 	.word	0x00010015

08015c14 <HW_AES_CcmCrypt>:
 8015c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c18:	4607      	mov	r7, r0
 8015c1a:	b085      	sub	sp, #20
 8015c1c:	4616      	mov	r6, r2
 8015c1e:	460d      	mov	r5, r1
 8015c20:	b3c9      	cbz	r1, 8015c96 <HW_AES_CcmCrypt+0x82>
 8015c22:	4b2d      	ldr	r3, [pc, #180]	@ (8015cd8 <HW_AES_CcmCrypt+0xc4>)
 8015c24:	f8d3 9000 	ldr.w	r9, [r3]
 8015c28:	f429 44c0 	bic.w	r4, r9, #24576	@ 0x6000
 8015c2c:	f024 0401 	bic.w	r4, r4, #1
 8015c30:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8015c34:	f044 0401 	orr.w	r4, r4, #1
 8015c38:	601c      	str	r4, [r3, #0]
 8015c3a:	f04f 0800 	mov.w	r8, #0
 8015c3e:	f10d 0a10 	add.w	sl, sp, #16
 8015c42:	eba5 0208 	sub.w	r2, r5, r8
 8015c46:	2a0f      	cmp	r2, #15
 8015c48:	eb06 0b08 	add.w	fp, r6, r8
 8015c4c:	eb07 0308 	add.w	r3, r7, r8
 8015c50:	d824      	bhi.n	8015c9c <HW_AES_CcmCrypt+0x88>
 8015c52:	f025 030f 	bic.w	r3, r5, #15
 8015c56:	ebb5 0803 	subs.w	r8, r5, r3
 8015c5a:	441f      	add	r7, r3
 8015c5c:	441e      	add	r6, r3
 8015c5e:	d01a      	beq.n	8015c96 <HW_AES_CcmCrypt+0x82>
 8015c60:	f019 0f10 	tst.w	r9, #16
 8015c64:	d005      	beq.n	8015c72 <HW_AES_CcmCrypt+0x5e>
 8015c66:	1b59      	subs	r1, r3, r5
 8015c68:	3110      	adds	r1, #16
 8015c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8015cd8 <HW_AES_CcmCrypt+0xc4>)
 8015c6c:	ea44 5401 	orr.w	r4, r4, r1, lsl #20
 8015c70:	601c      	str	r4, [r3, #0]
 8015c72:	2210      	movs	r2, #16
 8015c74:	2100      	movs	r1, #0
 8015c76:	4668      	mov	r0, sp
 8015c78:	f010 ffaa 	bl	8026bd0 <memset>
 8015c7c:	4642      	mov	r2, r8
 8015c7e:	4639      	mov	r1, r7
 8015c80:	4668      	mov	r0, sp
 8015c82:	f011 f856 	bl	8026d32 <memcpy>
 8015c86:	4669      	mov	r1, sp
 8015c88:	4608      	mov	r0, r1
 8015c8a:	f7ff fe03 	bl	8015894 <HW_AES_Crypt>
 8015c8e:	4642      	mov	r2, r8
 8015c90:	4630      	mov	r0, r6
 8015c92:	f011 f84e 	bl	8026d32 <memcpy>
 8015c96:	b005      	add	sp, #20
 8015c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c9c:	46ec      	mov	ip, sp
 8015c9e:	f103 0e10 	add.w	lr, r3, #16
 8015ca2:	6818      	ldr	r0, [r3, #0]
 8015ca4:	6859      	ldr	r1, [r3, #4]
 8015ca6:	4662      	mov	r2, ip
 8015ca8:	c203      	stmia	r2!, {r0, r1}
 8015caa:	3308      	adds	r3, #8
 8015cac:	4573      	cmp	r3, lr
 8015cae:	4694      	mov	ip, r2
 8015cb0:	d1f7      	bne.n	8015ca2 <HW_AES_CcmCrypt+0x8e>
 8015cb2:	4669      	mov	r1, sp
 8015cb4:	4668      	mov	r0, sp
 8015cb6:	f7ff fded 	bl	8015894 <HW_AES_Crypt>
 8015cba:	46ec      	mov	ip, sp
 8015cbc:	465a      	mov	r2, fp
 8015cbe:	4663      	mov	r3, ip
 8015cc0:	cb03      	ldmia	r3!, {r0, r1}
 8015cc2:	4553      	cmp	r3, sl
 8015cc4:	6010      	str	r0, [r2, #0]
 8015cc6:	6051      	str	r1, [r2, #4]
 8015cc8:	469c      	mov	ip, r3
 8015cca:	f102 0208 	add.w	r2, r2, #8
 8015cce:	d1f6      	bne.n	8015cbe <HW_AES_CcmCrypt+0xaa>
 8015cd0:	f108 0810 	add.w	r8, r8, #16
 8015cd4:	e7b5      	b.n	8015c42 <HW_AES_CcmCrypt+0x2e>
 8015cd6:	bf00      	nop
 8015cd8:	50060000 	.word	0x50060000

08015cdc <HW_AES_CcmGetTag>:
 8015cdc:	b510      	push	{r4, lr}
 8015cde:	b086      	sub	sp, #24
 8015ce0:	4604      	mov	r4, r0
 8015ce2:	a802      	add	r0, sp, #8
 8015ce4:	9101      	str	r1, [sp, #4]
 8015ce6:	f7fe ff0f 	bl	8014b08 <HW_AES_CcmGenerateTag>
 8015cea:	4601      	mov	r1, r0
 8015cec:	9a01      	ldr	r2, [sp, #4]
 8015cee:	4620      	mov	r0, r4
 8015cf0:	f011 f81f 	bl	8026d32 <memcpy>
 8015cf4:	b006      	add	sp, #24
 8015cf6:	bd10      	pop	{r4, pc}

08015cf8 <BAES_CcmEncrypt>:
 8015cf8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8015cfc:	461f      	mov	r7, r3
 8015cfe:	4614      	mov	r4, r2
 8015d00:	460d      	mov	r5, r1
 8015d02:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 8015d06:	4606      	mov	r6, r0
 8015d08:	f7ff fd6a 	bl	80157e0 <HW_AES_Enable>
 8015d0c:	4638      	mov	r0, r7
 8015d0e:	f7ff fd9f 	bl	8015850 <HW_AES_SetKey>
 8015d12:	2301      	movs	r3, #1
 8015d14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8015d18:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8015d1c:	f8cd 8000 	str.w	r8, [sp]
 8015d20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015d24:	f7ff fee4 	bl	8015af0 <HW_AES_CcmStart>
 8015d28:	4632      	mov	r2, r6
 8015d2a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8015d2c:	4641      	mov	r1, r8
 8015d2e:	f7ff ff71 	bl	8015c14 <HW_AES_CcmCrypt>
 8015d32:	4628      	mov	r0, r5
 8015d34:	4621      	mov	r1, r4
 8015d36:	f7ff ffd1 	bl	8015cdc <HW_AES_CcmGetTag>
 8015d3a:	f7ff fd6f 	bl	801581c <HW_AES_Disable>
 8015d3e:	2000      	movs	r0, #0
 8015d40:	b004      	add	sp, #16
 8015d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015d46 <HW_AES_CcmCheckTag>:
 8015d46:	b530      	push	{r4, r5, lr}
 8015d48:	b085      	sub	sp, #20
 8015d4a:	4604      	mov	r4, r0
 8015d4c:	460d      	mov	r5, r1
 8015d4e:	4668      	mov	r0, sp
 8015d50:	f7fe feda 	bl	8014b08 <HW_AES_CcmGenerateTag>
 8015d54:	4425      	add	r5, r4
 8015d56:	4623      	mov	r3, r4
 8015d58:	2200      	movs	r2, #0
 8015d5a:	42ab      	cmp	r3, r5
 8015d5c:	d104      	bne.n	8015d68 <HW_AES_CcmCheckTag+0x22>
 8015d5e:	1e10      	subs	r0, r2, #0
 8015d60:	bf18      	it	ne
 8015d62:	2001      	movne	r0, #1
 8015d64:	b005      	add	sp, #20
 8015d66:	bd30      	pop	{r4, r5, pc}
 8015d68:	f813 1b01 	ldrb.w	r1, [r3], #1
 8015d6c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8015d70:	4061      	eors	r1, r4
 8015d72:	430a      	orrs	r2, r1
 8015d74:	e7f1      	b.n	8015d5a <HW_AES_CcmCheckTag+0x14>

08015d76 <BAES_CcmDecrypt>:
 8015d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d7a:	b086      	sub	sp, #24
 8015d7c:	460e      	mov	r6, r1
 8015d7e:	4615      	mov	r5, r2
 8015d80:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8015d82:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 8015d86:	9305      	str	r3, [sp, #20]
 8015d88:	4604      	mov	r4, r0
 8015d8a:	f7ff fd29 	bl	80157e0 <HW_AES_Enable>
 8015d8e:	4630      	mov	r0, r6
 8015d90:	f7ff fd5e 	bl	8015850 <HW_AES_SetKey>
 8015d94:	2300      	movs	r3, #0
 8015d96:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015d9a:	9905      	ldr	r1, [sp, #20]
 8015d9c:	f8cd 8000 	str.w	r8, [sp]
 8015da0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015da4:	4628      	mov	r0, r5
 8015da6:	f7ff fea3 	bl	8015af0 <HW_AES_CcmStart>
 8015daa:	4622      	mov	r2, r4
 8015dac:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8015dae:	4641      	mov	r1, r8
 8015db0:	f7ff ff30 	bl	8015c14 <HW_AES_CcmCrypt>
 8015db4:	4639      	mov	r1, r7
 8015db6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8015db8:	f7ff ffc5 	bl	8015d46 <HW_AES_CcmCheckTag>
 8015dbc:	9005      	str	r0, [sp, #20]
 8015dbe:	f7ff fd2d 	bl	801581c <HW_AES_Disable>
 8015dc2:	9805      	ldr	r0, [sp, #20]
 8015dc4:	b006      	add	sp, #24
 8015dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08015dcc <HW_PKA_Enable>:
 8015dcc:	4b12      	ldr	r3, [pc, #72]	@ (8015e18 <HW_PKA_Enable+0x4c>)
 8015dce:	f893 0400 	ldrb.w	r0, [r3, #1024]	@ 0x400
 8015dd2:	b082      	sub	sp, #8
 8015dd4:	b9f0      	cbnz	r0, 8015e14 <HW_PKA_Enable+0x48>
 8015dd6:	4a11      	ldr	r2, [pc, #68]	@ (8015e1c <HW_PKA_Enable+0x50>)
 8015dd8:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
 8015ddc:	4a10      	ldr	r2, [pc, #64]	@ (8015e20 <HW_PKA_Enable+0x54>)
 8015dde:	4291      	cmp	r1, r2
 8015de0:	d116      	bne.n	8015e10 <HW_PKA_Enable+0x44>
 8015de2:	2001      	movs	r0, #1
 8015de4:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 8015de8:	f3ef 8110 	mrs	r1, PRIMASK
 8015dec:	b672      	cpsid	i
 8015dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015df2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015df4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8015df8:	651a      	str	r2, [r3, #80]	@ 0x50
 8015dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015e00:	9301      	str	r3, [sp, #4]
 8015e02:	9b01      	ldr	r3, [sp, #4]
 8015e04:	f381 8810 	msr	PRIMASK, r1
 8015e08:	4a06      	ldr	r2, [pc, #24]	@ (8015e24 <HW_PKA_Enable+0x58>)
 8015e0a:	6813      	ldr	r3, [r2, #0]
 8015e0c:	4303      	orrs	r3, r0
 8015e0e:	6013      	str	r3, [r2, #0]
 8015e10:	b002      	add	sp, #8
 8015e12:	4770      	bx	lr
 8015e14:	2000      	movs	r0, #0
 8015e16:	e7fb      	b.n	8015e10 <HW_PKA_Enable+0x44>
 8015e18:	2000141c 	.word	0x2000141c
 8015e1c:	58001400 	.word	0x58001400
 8015e20:	80000400 	.word	0x80000400
 8015e24:	58002000 	.word	0x58002000

08015e28 <HW_PKA_WriteOperand>:
 8015e28:	0080      	lsls	r0, r0, #2
 8015e2a:	f100 40b0 	add.w	r0, r0, #1476395008	@ 0x58000000
 8015e2e:	f500 5010 	add.w	r0, r0, #9216	@ 0x2400
 8015e32:	b530      	push	{r4, r5, lr}
 8015e34:	460b      	mov	r3, r1
 8015e36:	1f04      	subs	r4, r0, #4
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	dc05      	bgt.n	8015e48 <HW_PKA_WriteOperand+0x20>
 8015e3c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8015e40:	2300      	movs	r3, #0
 8015e42:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 8015e46:	bd30      	pop	{r4, r5, pc}
 8015e48:	f852 5b04 	ldr.w	r5, [r2], #4
 8015e4c:	f844 5f04 	str.w	r5, [r4, #4]!
 8015e50:	3b01      	subs	r3, #1
 8015e52:	e7f1      	b.n	8015e38 <HW_PKA_WriteOperand+0x10>

08015e54 <HW_PKA_Start>:
 8015e54:	4b07      	ldr	r3, [pc, #28]	@ (8015e74 <HW_PKA_Start+0x20>)
 8015e56:	681a      	ldr	r2, [r3, #0]
 8015e58:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8015e5c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8015e60:	6018      	str	r0, [r3, #0]
 8015e62:	689a      	ldr	r2, [r3, #8]
 8015e64:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8015e68:	609a      	str	r2, [r3, #8]
 8015e6a:	681a      	ldr	r2, [r3, #0]
 8015e6c:	f042 0202 	orr.w	r2, r2, #2
 8015e70:	601a      	str	r2, [r3, #0]
 8015e72:	4770      	bx	lr
 8015e74:	58002000 	.word	0x58002000

08015e78 <HW_PKA_EndOfOperation>:
 8015e78:	4b02      	ldr	r3, [pc, #8]	@ (8015e84 <HW_PKA_EndOfOperation+0xc>)
 8015e7a:	6858      	ldr	r0, [r3, #4]
 8015e7c:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8015e80:	4770      	bx	lr
 8015e82:	bf00      	nop
 8015e84:	58002000 	.word	0x58002000

08015e88 <HW_PKA_ReadResult>:
 8015e88:	0080      	lsls	r0, r0, #2
 8015e8a:	f100 40b0 	add.w	r0, r0, #1476395008	@ 0x58000000
 8015e8e:	f500 5010 	add.w	r0, r0, #9216	@ 0x2400
 8015e92:	3a04      	subs	r2, #4
 8015e94:	2900      	cmp	r1, #0
 8015e96:	dc00      	bgt.n	8015e9a <HW_PKA_ReadResult+0x12>
 8015e98:	4770      	bx	lr
 8015e9a:	f850 3b04 	ldr.w	r3, [r0], #4
 8015e9e:	f842 3f04 	str.w	r3, [r2, #4]!
 8015ea2:	3901      	subs	r1, #1
 8015ea4:	e7f6      	b.n	8015e94 <HW_PKA_ReadResult+0xc>
	...

08015ea8 <HW_PKA_Disable>:
 8015ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8015ee0 <HW_PKA_Disable+0x38>)
 8015eaa:	f892 3400 	ldrb.w	r3, [r2, #1024]	@ 0x400
 8015eae:	b1b3      	cbz	r3, 8015ede <HW_PKA_Disable+0x36>
 8015eb0:	490c      	ldr	r1, [pc, #48]	@ (8015ee4 <HW_PKA_Disable+0x3c>)
 8015eb2:	680b      	ldr	r3, [r1, #0]
 8015eb4:	f023 0301 	bic.w	r3, r3, #1
 8015eb8:	600b      	str	r3, [r1, #0]
 8015eba:	f3ef 8010 	mrs	r0, PRIMASK
 8015ebe:	b672      	cpsid	i
 8015ec0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8015ec4:	6d0b      	ldr	r3, [r1, #80]	@ 0x50
 8015ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015eca:	650b      	str	r3, [r1, #80]	@ 0x50
 8015ecc:	f380 8810 	msr	PRIMASK, r0
 8015ed0:	4b05      	ldr	r3, [pc, #20]	@ (8015ee8 <HW_PKA_Disable+0x40>)
 8015ed2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8015ed6:	6059      	str	r1, [r3, #4]
 8015ed8:	2300      	movs	r3, #0
 8015eda:	f882 3400 	strb.w	r3, [r2, #1024]	@ 0x400
 8015ede:	4770      	bx	lr
 8015ee0:	2000141c 	.word	0x2000141c
 8015ee4:	58002000 	.word	0x58002000
 8015ee8:	58001400 	.word	0x58001400

08015eec <HW_PKA_P256_StartRangeCheck>:
 8015eec:	b508      	push	{r3, lr}
 8015eee:	4b0b      	ldr	r3, [pc, #44]	@ (8015f1c <HW_PKA_P256_StartRangeCheck+0x30>)
 8015ef0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015ef4:	f8c3 1404 	str.w	r1, [r3, #1028]	@ 0x404
 8015ef8:	4602      	mov	r2, r0
 8015efa:	2108      	movs	r1, #8
 8015efc:	f240 102d 	movw	r0, #301	@ 0x12d
 8015f00:	f7ff ff92 	bl	8015e28 <HW_PKA_WriteOperand>
 8015f04:	f240 1091 	movw	r0, #401	@ 0x191
 8015f08:	4a05      	ldr	r2, [pc, #20]	@ (8015f20 <HW_PKA_P256_StartRangeCheck+0x34>)
 8015f0a:	2108      	movs	r1, #8
 8015f0c:	f7ff ff8c 	bl	8015e28 <HW_PKA_WriteOperand>
 8015f10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015f14:	200c      	movs	r0, #12
 8015f16:	f7ff bf9d 	b.w	8015e54 <HW_PKA_Start>
 8015f1a:	bf00      	nop
 8015f1c:	58002000 	.word	0x58002000
 8015f20:	0802cb18 	.word	0x0802cb18

08015f24 <BPKA_StartDhKey>:
 8015f24:	b570      	push	{r4, r5, r6, lr}
 8015f26:	4605      	mov	r5, r0
 8015f28:	460c      	mov	r4, r1
 8015f2a:	f7ff ff4f 	bl	8015dcc <HW_PKA_Enable>
 8015f2e:	b378      	cbz	r0, 8015f90 <BPKA_StartDhKey+0x6c>
 8015f30:	462b      	mov	r3, r5
 8015f32:	4d19      	ldr	r5, [pc, #100]	@ (8015f98 <BPKA_StartDhKey+0x74>)
 8015f34:	f103 0620 	add.w	r6, r3, #32
 8015f38:	6818      	ldr	r0, [r3, #0]
 8015f3a:	6859      	ldr	r1, [r3, #4]
 8015f3c:	462a      	mov	r2, r5
 8015f3e:	c203      	stmia	r2!, {r0, r1}
 8015f40:	3308      	adds	r3, #8
 8015f42:	42b3      	cmp	r3, r6
 8015f44:	4615      	mov	r5, r2
 8015f46:	d1f7      	bne.n	8015f38 <BPKA_StartDhKey+0x14>
 8015f48:	4a14      	ldr	r2, [pc, #80]	@ (8015f9c <BPKA_StartDhKey+0x78>)
 8015f4a:	4623      	mov	r3, r4
 8015f4c:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 8015f50:	4615      	mov	r5, r2
 8015f52:	6818      	ldr	r0, [r3, #0]
 8015f54:	6859      	ldr	r1, [r3, #4]
 8015f56:	4614      	mov	r4, r2
 8015f58:	c403      	stmia	r4!, {r0, r1}
 8015f5a:	3308      	adds	r3, #8
 8015f5c:	42b3      	cmp	r3, r6
 8015f5e:	4622      	mov	r2, r4
 8015f60:	d1f7      	bne.n	8015f52 <BPKA_StartDhKey+0x2e>
 8015f62:	4c0f      	ldr	r4, [pc, #60]	@ (8015fa0 <BPKA_StartDhKey+0x7c>)
 8015f64:	f504 7063 	add.w	r0, r4, #908	@ 0x38c
 8015f68:	f7fe fea2 	bl	8014cb0 <BPKA_Reverse>
 8015f6c:	4628      	mov	r0, r5
 8015f6e:	f7fe fe9f 	bl	8014cb0 <BPKA_Reverse>
 8015f72:	f504 7073 	add.w	r0, r4, #972	@ 0x3cc
 8015f76:	f7fe fe9b 	bl	8014cb0 <BPKA_Reverse>
 8015f7a:	4628      	mov	r0, r5
 8015f7c:	f7ff ffb6 	bl	8015eec <HW_PKA_P256_StartRangeCheck>
 8015f80:	2302      	movs	r3, #2
 8015f82:	f884 3401 	strb.w	r3, [r4, #1025]	@ 0x401
 8015f86:	2301      	movs	r3, #1
 8015f88:	f884 33ec 	strb.w	r3, [r4, #1004]	@ 0x3ec
 8015f8c:	2000      	movs	r0, #0
 8015f8e:	bd70      	pop	{r4, r5, r6, pc}
 8015f90:	f06f 0001 	mvn.w	r0, #1
 8015f94:	e7fb      	b.n	8015f8e <BPKA_StartDhKey+0x6a>
 8015f96:	bf00      	nop
 8015f98:	200017a8 	.word	0x200017a8
 8015f9c:	200017c8 	.word	0x200017c8
 8015fa0:	2000141c 	.word	0x2000141c

08015fa4 <HW_PKA_P256_StartPointCheck>:
 8015fa4:	4b16      	ldr	r3, [pc, #88]	@ (8016000 <HW_PKA_P256_StartPointCheck+0x5c>)
 8015fa6:	b570      	push	{r4, r5, r6, lr}
 8015fa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015fac:	4c15      	ldr	r4, [pc, #84]	@ (8016004 <HW_PKA_P256_StartPointCheck+0x60>)
 8015fae:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8015fb2:	2201      	movs	r2, #1
 8015fb4:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8015fb8:	4606      	mov	r6, r0
 8015fba:	460d      	mov	r5, r1
 8015fbc:	f104 0278 	add.w	r2, r4, #120	@ 0x78
 8015fc0:	2108      	movs	r1, #8
 8015fc2:	2003      	movs	r0, #3
 8015fc4:	f7ff ff30 	bl	8015e28 <HW_PKA_WriteOperand>
 8015fc8:	f104 0258 	add.w	r2, r4, #88	@ 0x58
 8015fcc:	2108      	movs	r1, #8
 8015fce:	2018      	movs	r0, #24
 8015fd0:	f7ff ff2a 	bl	8015e28 <HW_PKA_WriteOperand>
 8015fd4:	4632      	mov	r2, r6
 8015fd6:	2108      	movs	r1, #8
 8015fd8:	2057      	movs	r0, #87	@ 0x57
 8015fda:	f7ff ff25 	bl	8015e28 <HW_PKA_WriteOperand>
 8015fde:	462a      	mov	r2, r5
 8015fe0:	2108      	movs	r1, #8
 8015fe2:	206c      	movs	r0, #108	@ 0x6c
 8015fe4:	f7ff ff20 	bl	8015e28 <HW_PKA_WriteOperand>
 8015fe8:	f104 0298 	add.w	r2, r4, #152	@ 0x98
 8015fec:	20ff      	movs	r0, #255	@ 0xff
 8015fee:	2108      	movs	r1, #8
 8015ff0:	f7ff ff1a 	bl	8015e28 <HW_PKA_WriteOperand>
 8015ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ff8:	2028      	movs	r0, #40	@ 0x28
 8015ffa:	f7ff bf2b 	b.w	8015e54 <HW_PKA_Start>
 8015ffe:	bf00      	nop
 8016000:	58002000 	.word	0x58002000
 8016004:	0802cac0 	.word	0x0802cac0

08016008 <HW_PKA_P256_StartEccScalarMul>:
 8016008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801600a:	4b1e      	ldr	r3, [pc, #120]	@ (8016084 <HW_PKA_P256_StartEccScalarMul+0x7c>)
 801600c:	4c1e      	ldr	r4, [pc, #120]	@ (8016088 <HW_PKA_P256_StartEccScalarMul+0x80>)
 801600e:	4615      	mov	r5, r2
 8016010:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016014:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
 8016018:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 801601c:	2201      	movs	r2, #1
 801601e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8016022:	4607      	mov	r7, r0
 8016024:	460e      	mov	r6, r1
 8016026:	f104 0278 	add.w	r2, r4, #120	@ 0x78
 801602a:	2108      	movs	r1, #8
 801602c:	2003      	movs	r0, #3
 801602e:	f7ff fefb 	bl	8015e28 <HW_PKA_WriteOperand>
 8016032:	f104 0258 	add.w	r2, r4, #88	@ 0x58
 8016036:	2108      	movs	r1, #8
 8016038:	2018      	movs	r0, #24
 801603a:	f7ff fef5 	bl	8015e28 <HW_PKA_WriteOperand>
 801603e:	f104 02f8 	add.w	r2, r4, #248	@ 0xf8
 8016042:	2108      	movs	r1, #8
 8016044:	202d      	movs	r0, #45	@ 0x2d
 8016046:	f7ff feef 	bl	8015e28 <HW_PKA_WriteOperand>
 801604a:	463a      	mov	r2, r7
 801604c:	2108      	movs	r1, #8
 801604e:	2042      	movs	r0, #66	@ 0x42
 8016050:	f7ff feea 	bl	8015e28 <HW_PKA_WriteOperand>
 8016054:	f104 02b8 	add.w	r2, r4, #184	@ 0xb8
 8016058:	2e00      	cmp	r6, #0
 801605a:	bf18      	it	ne
 801605c:	4632      	movne	r2, r6
 801605e:	2108      	movs	r1, #8
 8016060:	2057      	movs	r0, #87	@ 0x57
 8016062:	34d8      	adds	r4, #216	@ 0xd8
 8016064:	f7ff fee0 	bl	8015e28 <HW_PKA_WriteOperand>
 8016068:	2d00      	cmp	r5, #0
 801606a:	bf14      	ite	ne
 801606c:	462a      	movne	r2, r5
 801606e:	4622      	moveq	r2, r4
 8016070:	206c      	movs	r0, #108	@ 0x6c
 8016072:	2108      	movs	r1, #8
 8016074:	f7ff fed8 	bl	8015e28 <HW_PKA_WriteOperand>
 8016078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801607c:	2022      	movs	r0, #34	@ 0x22
 801607e:	f7ff bee9 	b.w	8015e54 <HW_PKA_Start>
 8016082:	bf00      	nop
 8016084:	58002000 	.word	0x58002000
 8016088:	0802cac0 	.word	0x0802cac0

0801608c <BPKA_StartP256Key>:
 801608c:	b530      	push	{r4, r5, lr}
 801608e:	b089      	sub	sp, #36	@ 0x24
 8016090:	4604      	mov	r4, r0
 8016092:	f7ff fe9b 	bl	8015dcc <HW_PKA_Enable>
 8016096:	b1c8      	cbz	r0, 80160cc <BPKA_StartP256Key+0x40>
 8016098:	4623      	mov	r3, r4
 801609a:	f103 0520 	add.w	r5, r3, #32
 801609e:	466c      	mov	r4, sp
 80160a0:	6818      	ldr	r0, [r3, #0]
 80160a2:	6859      	ldr	r1, [r3, #4]
 80160a4:	4622      	mov	r2, r4
 80160a6:	c203      	stmia	r2!, {r0, r1}
 80160a8:	3308      	adds	r3, #8
 80160aa:	42ab      	cmp	r3, r5
 80160ac:	4614      	mov	r4, r2
 80160ae:	d1f7      	bne.n	80160a0 <BPKA_StartP256Key+0x14>
 80160b0:	4668      	mov	r0, sp
 80160b2:	f7fe fdfd 	bl	8014cb0 <BPKA_Reverse>
 80160b6:	2200      	movs	r2, #0
 80160b8:	4611      	mov	r1, r2
 80160ba:	f7ff ffa5 	bl	8016008 <HW_PKA_P256_StartEccScalarMul>
 80160be:	4b05      	ldr	r3, [pc, #20]	@ (80160d4 <BPKA_StartP256Key+0x48>)
 80160c0:	2201      	movs	r2, #1
 80160c2:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
 80160c6:	2000      	movs	r0, #0
 80160c8:	b009      	add	sp, #36	@ 0x24
 80160ca:	bd30      	pop	{r4, r5, pc}
 80160cc:	f06f 0001 	mvn.w	r0, #1
 80160d0:	e7fa      	b.n	80160c8 <BPKA_StartP256Key+0x3c>
 80160d2:	bf00      	nop
 80160d4:	2000141c 	.word	0x2000141c

080160d8 <HW_PKA_P256_ReadEccScalarMul>:
 80160d8:	b510      	push	{r4, lr}
 80160da:	4602      	mov	r2, r0
 80160dc:	460c      	mov	r4, r1
 80160de:	b118      	cbz	r0, 80160e8 <HW_PKA_P256_ReadEccScalarMul+0x10>
 80160e0:	2108      	movs	r1, #8
 80160e2:	2057      	movs	r0, #87	@ 0x57
 80160e4:	f7ff fed0 	bl	8015e88 <HW_PKA_ReadResult>
 80160e8:	b134      	cbz	r4, 80160f8 <HW_PKA_P256_ReadEccScalarMul+0x20>
 80160ea:	4622      	mov	r2, r4
 80160ec:	2108      	movs	r1, #8
 80160ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160f2:	206c      	movs	r0, #108	@ 0x6c
 80160f4:	f7ff bec8 	b.w	8015e88 <HW_PKA_ReadResult>
 80160f8:	bd10      	pop	{r4, pc}
	...

080160fc <BPKA_Status>:
 80160fc:	b510      	push	{r4, lr}
 80160fe:	f7ff febb 	bl	8015e78 <HW_PKA_EndOfOperation>
 8016102:	b300      	cbz	r0, 8016146 <BPKA_Status+0x4a>
 8016104:	4c23      	ldr	r4, [pc, #140]	@ (8016194 <BPKA_Status+0x98>)
 8016106:	f894 3401 	ldrb.w	r3, [r4, #1025]	@ 0x401
 801610a:	3b01      	subs	r3, #1
 801610c:	2b04      	cmp	r3, #4
 801610e:	d83f      	bhi.n	8016190 <BPKA_Status+0x94>
 8016110:	e8df f003 	tbb	[pc, r3]
 8016114:	281c0e03 	.word	0x281c0e03
 8016118:	36          	.byte	0x36
 8016119:	00          	.byte	0x00
 801611a:	491f      	ldr	r1, [pc, #124]	@ (8016198 <BPKA_Status+0x9c>)
 801611c:	f1a1 0020 	sub.w	r0, r1, #32
 8016120:	f7ff ffda 	bl	80160d8 <HW_PKA_P256_ReadEccScalarMul>
 8016124:	f7ff fec0 	bl	8015ea8 <HW_PKA_Disable>
 8016128:	2000      	movs	r0, #0
 801612a:	f884 0401 	strb.w	r0, [r4, #1025]	@ 0x401
 801612e:	e00c      	b.n	801614a <BPKA_Status+0x4e>
 8016130:	4b1a      	ldr	r3, [pc, #104]	@ (801619c <BPKA_Status+0xa0>)
 8016132:	f8d3 3bd0 	ldr.w	r3, [r3, #3024]	@ 0xbd0
 8016136:	2b02      	cmp	r3, #2
 8016138:	d1f4      	bne.n	8016124 <BPKA_Status+0x28>
 801613a:	4819      	ldr	r0, [pc, #100]	@ (80161a0 <BPKA_Status+0xa4>)
 801613c:	f7ff fed6 	bl	8015eec <HW_PKA_P256_StartRangeCheck>
 8016140:	2303      	movs	r3, #3
 8016142:	f884 3401 	strb.w	r3, [r4, #1025]	@ 0x401
 8016146:	f06f 0001 	mvn.w	r0, #1
 801614a:	bd10      	pop	{r4, pc}
 801614c:	4b13      	ldr	r3, [pc, #76]	@ (801619c <BPKA_Status+0xa0>)
 801614e:	f8d3 3bd0 	ldr.w	r3, [r3, #3024]	@ 0xbd0
 8016152:	2b02      	cmp	r3, #2
 8016154:	d1e6      	bne.n	8016124 <BPKA_Status+0x28>
 8016156:	4912      	ldr	r1, [pc, #72]	@ (80161a0 <BPKA_Status+0xa4>)
 8016158:	f1a1 0020 	sub.w	r0, r1, #32
 801615c:	f7ff ff22 	bl	8015fa4 <HW_PKA_P256_StartPointCheck>
 8016160:	2304      	movs	r3, #4
 8016162:	e7ee      	b.n	8016142 <BPKA_Status+0x46>
 8016164:	4b0d      	ldr	r3, [pc, #52]	@ (801619c <BPKA_Status+0xa0>)
 8016166:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 801616a:	2b00      	cmp	r3, #0
 801616c:	d1da      	bne.n	8016124 <BPKA_Status+0x28>
 801616e:	4a0c      	ldr	r2, [pc, #48]	@ (80161a0 <BPKA_Status+0xa4>)
 8016170:	f1a2 0120 	sub.w	r1, r2, #32
 8016174:	f1a2 0040 	sub.w	r0, r2, #64	@ 0x40
 8016178:	f7ff ff46 	bl	8016008 <HW_PKA_P256_StartEccScalarMul>
 801617c:	2305      	movs	r3, #5
 801617e:	e7e0      	b.n	8016142 <BPKA_Status+0x46>
 8016180:	4808      	ldr	r0, [pc, #32]	@ (80161a4 <BPKA_Status+0xa8>)
 8016182:	2100      	movs	r1, #0
 8016184:	f7ff ffa8 	bl	80160d8 <HW_PKA_P256_ReadEccScalarMul>
 8016188:	2300      	movs	r3, #0
 801618a:	f884 33ec 	strb.w	r3, [r4, #1004]	@ 0x3ec
 801618e:	e7c9      	b.n	8016124 <BPKA_Status+0x28>
 8016190:	2000      	movs	r0, #0
 8016192:	e7da      	b.n	801614a <BPKA_Status+0x4e>
 8016194:	2000141c 	.word	0x2000141c
 8016198:	200017c8 	.word	0x200017c8
 801619c:	58002000 	.word	0x58002000
 80161a0:	200017e8 	.word	0x200017e8
 80161a4:	200017a8 	.word	0x200017a8

080161a8 <MoblePalCryptoGetEccPublicKey.part.0>:
 80161a8:	b538      	push	{r3, r4, r5, lr}
 80161aa:	4605      	mov	r5, r0
 80161ac:	4807      	ldr	r0, [pc, #28]	@ (80161cc <MoblePalCryptoGetEccPublicKey.part.0+0x24>)
 80161ae:	f7ff ff6d 	bl	801608c <BPKA_StartP256Key>
 80161b2:	2800      	cmp	r0, #0
 80161b4:	d1fa      	bne.n	80161ac <MoblePalCryptoGetEccPublicKey.part.0+0x4>
 80161b6:	f7ff ffa1 	bl	80160fc <BPKA_Status>
 80161ba:	4604      	mov	r4, r0
 80161bc:	2800      	cmp	r0, #0
 80161be:	d1fa      	bne.n	80161b6 <MoblePalCryptoGetEccPublicKey.part.0+0xe>
 80161c0:	4628      	mov	r0, r5
 80161c2:	f7ff fad1 	bl	8015768 <BPKA_ReadP256Key>
 80161c6:	4620      	mov	r0, r4
 80161c8:	bd38      	pop	{r3, r4, r5, pc}
 80161ca:	bf00      	nop
 80161cc:	2000181f 	.word	0x2000181f

080161d0 <MoblePalCryptoInit>:
 80161d0:	4919      	ldr	r1, [pc, #100]	@ (8016238 <MoblePalCryptoInit+0x68>)
 80161d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161d4:	2300      	movs	r3, #0
 80161d6:	880c      	ldrh	r4, [r1, #0]
 80161d8:	4d18      	ldr	r5, [pc, #96]	@ (801623c <MoblePalCryptoInit+0x6c>)
 80161da:	277c      	movs	r7, #124	@ 0x7c
 80161dc:	4618      	mov	r0, r3
 80161de:	b2da      	uxtb	r2, r3
 80161e0:	42a2      	cmp	r2, r4
 80161e2:	f103 0601 	add.w	r6, r3, #1
 80161e6:	d318      	bcc.n	801621a <MoblePalCryptoInit+0x4a>
 80161e8:	2300      	movs	r3, #0
 80161ea:	8909      	ldrh	r1, [r1, #8]
 80161ec:	242c      	movs	r4, #44	@ 0x2c
 80161ee:	461e      	mov	r6, r3
 80161f0:	b2da      	uxtb	r2, r3
 80161f2:	428a      	cmp	r2, r1
 80161f4:	f103 0001 	add.w	r0, r3, #1
 80161f8:	d317      	bcc.n	801622a <MoblePalCryptoInit+0x5a>
 80161fa:	2400      	movs	r4, #0
 80161fc:	2228      	movs	r2, #40	@ 0x28
 80161fe:	4621      	mov	r1, r4
 8016200:	480f      	ldr	r0, [pc, #60]	@ (8016240 <MoblePalCryptoInit+0x70>)
 8016202:	f8c5 4658 	str.w	r4, [r5, #1624]	@ 0x658
 8016206:	f885 465c 	strb.w	r4, [r5, #1628]	@ 0x65c
 801620a:	f010 fce1 	bl	8026bd0 <memset>
 801620e:	f8a5 461c 	strh.w	r4, [r5, #1564]	@ 0x61c
 8016212:	f885 461e 	strb.w	r4, [r5, #1566]	@ 0x61e
 8016216:	4620      	mov	r0, r4
 8016218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801621a:	fb07 5302 	mla	r3, r7, r2, r5
 801621e:	f883 0445 	strb.w	r0, [r3, #1093]	@ 0x445
 8016222:	f883 0446 	strb.w	r0, [r3, #1094]	@ 0x446
 8016226:	4633      	mov	r3, r6
 8016228:	e7d9      	b.n	80161de <MoblePalCryptoInit+0xe>
 801622a:	fb04 5202 	mla	r2, r4, r2, r5
 801622e:	4603      	mov	r3, r0
 8016230:	f8a2 65b8 	strh.w	r6, [r2, #1464]	@ 0x5b8
 8016234:	e7dc      	b.n	80161f0 <MoblePalCryptoInit+0x20>
 8016236:	bf00      	nop
 8016238:	20000008 	.word	0x20000008
 801623c:	2000141c 	.word	0x2000141c
 8016240:	20001a4c 	.word	0x20001a4c

08016244 <MoblePalCryptoHasNewNetworkKey>:
 8016244:	4b0a      	ldr	r3, [pc, #40]	@ (8016270 <MoblePalCryptoHasNewNetworkKey+0x2c>)
 8016246:	b570      	push	{r4, r5, r6, lr}
 8016248:	4d0a      	ldr	r5, [pc, #40]	@ (8016274 <MoblePalCryptoHasNewNetworkKey+0x30>)
 801624a:	8819      	ldrh	r1, [r3, #0]
 801624c:	267c      	movs	r6, #124	@ 0x7c
 801624e:	2300      	movs	r3, #0
 8016250:	b2da      	uxtb	r2, r3
 8016252:	428a      	cmp	r2, r1
 8016254:	d301      	bcc.n	801625a <MoblePalCryptoHasNewNetworkKey+0x16>
 8016256:	2000      	movs	r0, #0
 8016258:	e008      	b.n	801626c <MoblePalCryptoHasNewNetworkKey+0x28>
 801625a:	fb06 5202 	mla	r2, r6, r2, r5
 801625e:	3301      	adds	r3, #1
 8016260:	f8b2 4448 	ldrh.w	r4, [r2, #1096]	@ 0x448
 8016264:	4284      	cmp	r4, r0
 8016266:	d1f3      	bne.n	8016250 <MoblePalCryptoHasNewNetworkKey+0xc>
 8016268:	f892 0446 	ldrb.w	r0, [r2, #1094]	@ 0x446
 801626c:	bd70      	pop	{r4, r5, r6, pc}
 801626e:	bf00      	nop
 8016270:	20000008 	.word	0x20000008
 8016274:	2000141c 	.word	0x2000141c

08016278 <MoblePalCryptoHasNetworkKey>:
 8016278:	4b0a      	ldr	r3, [pc, #40]	@ (80162a4 <MoblePalCryptoHasNetworkKey+0x2c>)
 801627a:	b570      	push	{r4, r5, r6, lr}
 801627c:	4d0a      	ldr	r5, [pc, #40]	@ (80162a8 <MoblePalCryptoHasNetworkKey+0x30>)
 801627e:	8819      	ldrh	r1, [r3, #0]
 8016280:	267c      	movs	r6, #124	@ 0x7c
 8016282:	2300      	movs	r3, #0
 8016284:	b2da      	uxtb	r2, r3
 8016286:	428a      	cmp	r2, r1
 8016288:	d301      	bcc.n	801628e <MoblePalCryptoHasNetworkKey+0x16>
 801628a:	2000      	movs	r0, #0
 801628c:	e008      	b.n	80162a0 <MoblePalCryptoHasNetworkKey+0x28>
 801628e:	fb06 5202 	mla	r2, r6, r2, r5
 8016292:	3301      	adds	r3, #1
 8016294:	f8b2 4448 	ldrh.w	r4, [r2, #1096]	@ 0x448
 8016298:	4284      	cmp	r4, r0
 801629a:	d1f3      	bne.n	8016284 <MoblePalCryptoHasNetworkKey+0xc>
 801629c:	f892 0445 	ldrb.w	r0, [r2, #1093]	@ 0x445
 80162a0:	bd70      	pop	{r4, r5, r6, pc}
 80162a2:	bf00      	nop
 80162a4:	20000008 	.word	0x20000008
 80162a8:	2000141c 	.word	0x2000141c

080162ac <MoblePalCryptoHasAppKey>:
 80162ac:	4b0a      	ldr	r3, [pc, #40]	@ (80162d8 <MoblePalCryptoHasAppKey+0x2c>)
 80162ae:	b570      	push	{r4, r5, r6, lr}
 80162b0:	4d0a      	ldr	r5, [pc, #40]	@ (80162dc <MoblePalCryptoHasAppKey+0x30>)
 80162b2:	8919      	ldrh	r1, [r3, #8]
 80162b4:	262c      	movs	r6, #44	@ 0x2c
 80162b6:	2300      	movs	r3, #0
 80162b8:	b2da      	uxtb	r2, r3
 80162ba:	428a      	cmp	r2, r1
 80162bc:	d301      	bcc.n	80162c2 <MoblePalCryptoHasAppKey+0x16>
 80162be:	2000      	movs	r0, #0
 80162c0:	e008      	b.n	80162d4 <MoblePalCryptoHasAppKey+0x28>
 80162c2:	fb06 5202 	mla	r2, r6, r2, r5
 80162c6:	3301      	adds	r3, #1
 80162c8:	f8b2 45ba 	ldrh.w	r4, [r2, #1466]	@ 0x5ba
 80162cc:	4284      	cmp	r4, r0
 80162ce:	d1f3      	bne.n	80162b8 <MoblePalCryptoHasAppKey+0xc>
 80162d0:	f892 05b8 	ldrb.w	r0, [r2, #1464]	@ 0x5b8
 80162d4:	bd70      	pop	{r4, r5, r6, pc}
 80162d6:	bf00      	nop
 80162d8:	20000008 	.word	0x20000008
 80162dc:	2000141c 	.word	0x2000141c

080162e0 <MoblePalCryptoSetNodeIdntyState>:
 80162e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162e2:	4605      	mov	r5, r0
 80162e4:	460c      	mov	r4, r1
 80162e6:	f7ff ffc7 	bl	8016278 <MoblePalCryptoHasNetworkKey>
 80162ea:	b1c8      	cbz	r0, 8016320 <MoblePalCryptoSetNodeIdntyState+0x40>
 80162ec:	2c01      	cmp	r4, #1
 80162ee:	d817      	bhi.n	8016320 <MoblePalCryptoSetNodeIdntyState+0x40>
 80162f0:	4b0c      	ldr	r3, [pc, #48]	@ (8016324 <MoblePalCryptoSetNodeIdntyState+0x44>)
 80162f2:	4e0d      	ldr	r6, [pc, #52]	@ (8016328 <MoblePalCryptoSetNodeIdntyState+0x48>)
 80162f4:	8819      	ldrh	r1, [r3, #0]
 80162f6:	2200      	movs	r2, #0
 80162f8:	277c      	movs	r7, #124	@ 0x7c
 80162fa:	b2d3      	uxtb	r3, r2
 80162fc:	428b      	cmp	r3, r1
 80162fe:	d301      	bcc.n	8016304 <MoblePalCryptoSetNodeIdntyState+0x24>
 8016300:	2000      	movs	r0, #0
 8016302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016304:	fb07 6303 	mla	r3, r7, r3, r6
 8016308:	f893 0445 	ldrb.w	r0, [r3, #1093]	@ 0x445
 801630c:	2801      	cmp	r0, #1
 801630e:	d105      	bne.n	801631c <MoblePalCryptoSetNodeIdntyState+0x3c>
 8016310:	f8b3 0448 	ldrh.w	r0, [r3, #1096]	@ 0x448
 8016314:	42a8      	cmp	r0, r5
 8016316:	bf08      	it	eq
 8016318:	f883 4444 	strbeq.w	r4, [r3, #1092]	@ 0x444
 801631c:	3201      	adds	r2, #1
 801631e:	e7ec      	b.n	80162fa <MoblePalCryptoSetNodeIdntyState+0x1a>
 8016320:	2003      	movs	r0, #3
 8016322:	e7ee      	b.n	8016302 <MoblePalCryptoSetNodeIdntyState+0x22>
 8016324:	20000008 	.word	0x20000008
 8016328:	2000141c 	.word	0x2000141c

0801632c <MoblePalCryptoGetNodeIdntyState>:
 801632c:	4b0c      	ldr	r3, [pc, #48]	@ (8016360 <MoblePalCryptoGetNodeIdntyState+0x34>)
 801632e:	b570      	push	{r4, r5, r6, lr}
 8016330:	8819      	ldrh	r1, [r3, #0]
 8016332:	4d0c      	ldr	r5, [pc, #48]	@ (8016364 <MoblePalCryptoGetNodeIdntyState+0x38>)
 8016334:	2200      	movs	r2, #0
 8016336:	267c      	movs	r6, #124	@ 0x7c
 8016338:	b2d3      	uxtb	r3, r2
 801633a:	428b      	cmp	r3, r1
 801633c:	d301      	bcc.n	8016342 <MoblePalCryptoGetNodeIdntyState+0x16>
 801633e:	2000      	movs	r0, #0
 8016340:	e00b      	b.n	801635a <MoblePalCryptoGetNodeIdntyState+0x2e>
 8016342:	fb06 5303 	mla	r3, r6, r3, r5
 8016346:	f893 4445 	ldrb.w	r4, [r3, #1093]	@ 0x445
 801634a:	2c01      	cmp	r4, #1
 801634c:	d106      	bne.n	801635c <MoblePalCryptoGetNodeIdntyState+0x30>
 801634e:	f8b3 4448 	ldrh.w	r4, [r3, #1096]	@ 0x448
 8016352:	4284      	cmp	r4, r0
 8016354:	d102      	bne.n	801635c <MoblePalCryptoGetNodeIdntyState+0x30>
 8016356:	f893 0444 	ldrb.w	r0, [r3, #1092]	@ 0x444
 801635a:	bd70      	pop	{r4, r5, r6, pc}
 801635c:	3201      	adds	r2, #1
 801635e:	e7eb      	b.n	8016338 <MoblePalCryptoGetNodeIdntyState+0xc>
 8016360:	20000008 	.word	0x20000008
 8016364:	2000141c 	.word	0x2000141c

08016368 <MoblePalCryptoGetNodeIdntyToBeAdvt>:
 8016368:	b530      	push	{r4, r5, lr}
 801636a:	4b11      	ldr	r3, [pc, #68]	@ (80163b0 <MoblePalCryptoGetNodeIdntyToBeAdvt+0x48>)
 801636c:	8819      	ldrh	r1, [r3, #0]
 801636e:	4b11      	ldr	r3, [pc, #68]	@ (80163b4 <MoblePalCryptoGetNodeIdntyToBeAdvt+0x4c>)
 8016370:	f893 265d 	ldrb.w	r2, [r3, #1629]	@ 0x65d
 8016374:	428a      	cmp	r2, r1
 8016376:	bf24      	itt	cs
 8016378:	2200      	movcs	r2, #0
 801637a:	f883 265d 	strbcs.w	r2, [r3, #1629]	@ 0x65d
 801637e:	f893 065d 	ldrb.w	r0, [r3, #1629]	@ 0x65d
 8016382:	257c      	movs	r5, #124	@ 0x7c
 8016384:	b284      	uxth	r4, r0
 8016386:	4602      	mov	r2, r0
 8016388:	42a1      	cmp	r1, r4
 801638a:	f100 0001 	add.w	r0, r0, #1
 801638e:	b2c0      	uxtb	r0, r0
 8016390:	d905      	bls.n	801639e <MoblePalCryptoGetNodeIdntyToBeAdvt+0x36>
 8016392:	fb05 3202 	mla	r2, r5, r2, r3
 8016396:	f892 2444 	ldrb.w	r2, [r2, #1092]	@ 0x444
 801639a:	2a01      	cmp	r2, #1
 801639c:	d1f2      	bne.n	8016384 <MoblePalCryptoGetNodeIdntyToBeAdvt+0x1c>
 801639e:	f883 065d 	strb.w	r0, [r3, #1629]	@ 0x65d
 80163a2:	4b05      	ldr	r3, [pc, #20]	@ (80163b8 <MoblePalCryptoGetNodeIdntyToBeAdvt+0x50>)
 80163a4:	227c      	movs	r2, #124	@ 0x7c
 80163a6:	3801      	subs	r0, #1
 80163a8:	fb02 3000 	mla	r0, r2, r0, r3
 80163ac:	bd30      	pop	{r4, r5, pc}
 80163ae:	bf00      	nop
 80163b0:	20000008 	.word	0x20000008
 80163b4:	2000141c 	.word	0x2000141c
 80163b8:	20001840 	.word	0x20001840

080163bc <MoblePalCryptoGetNetworkIdToBeAdvt>:
 80163bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163be:	491c      	ldr	r1, [pc, #112]	@ (8016430 <MoblePalCryptoGetNetworkIdToBeAdvt+0x74>)
 80163c0:	481c      	ldr	r0, [pc, #112]	@ (8016434 <MoblePalCryptoGetNetworkIdToBeAdvt+0x78>)
 80163c2:	f891 365e 	ldrb.w	r3, [r1, #1630]	@ 0x65e
 80163c6:	f891 661c 	ldrb.w	r6, [r1, #1564]	@ 0x61c
 80163ca:	4c1b      	ldr	r4, [pc, #108]	@ (8016438 <MoblePalCryptoGetNetworkIdToBeAdvt+0x7c>)
 80163cc:	42b3      	cmp	r3, r6
 80163ce:	bf24      	itt	cs
 80163d0:	2300      	movcs	r3, #0
 80163d2:	f881 365e 	strbcs.w	r3, [r1, #1630]	@ 0x65e
 80163d6:	f891 565e 	ldrb.w	r5, [r1, #1630]	@ 0x65e
 80163da:	ebc5 1245 	rsb	r2, r5, r5, lsl #5
 80163de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80163e2:	442c      	add	r4, r5
 80163e4:	b2eb      	uxtb	r3, r5
 80163e6:	429e      	cmp	r6, r3
 80163e8:	d810      	bhi.n	801640c <MoblePalCryptoGetNetworkIdToBeAdvt+0x50>
 80163ea:	3301      	adds	r3, #1
 80163ec:	b2db      	uxtb	r3, r3
 80163ee:	f881 365e 	strb.w	r3, [r1, #1630]	@ 0x65e
 80163f2:	227c      	movs	r2, #124	@ 0x7c
 80163f4:	3b01      	subs	r3, #1
 80163f6:	4353      	muls	r3, r2
 80163f8:	4a10      	ldr	r2, [pc, #64]	@ (801643c <MoblePalCryptoGetNetworkIdToBeAdvt+0x80>)
 80163fa:	442a      	add	r2, r5
 80163fc:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 8016400:	2a02      	cmp	r2, #2
 8016402:	bf0c      	ite	eq
 8016404:	3330      	addeq	r3, #48	@ 0x30
 8016406:	3328      	addne	r3, #40	@ 0x28
 8016408:	4418      	add	r0, r3
 801640a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801640c:	f892 7021 	ldrb.w	r7, [r2, #33]	@ 0x21
 8016410:	2f01      	cmp	r7, #1
 8016412:	d102      	bne.n	801641a <MoblePalCryptoGetNetworkIdToBeAdvt+0x5e>
 8016414:	7827      	ldrb	r7, [r4, #0]
 8016416:	2f02      	cmp	r7, #2
 8016418:	d1e7      	bne.n	80163ea <MoblePalCryptoGetNetworkIdToBeAdvt+0x2e>
 801641a:	f892 7022 	ldrb.w	r7, [r2, #34]	@ 0x22
 801641e:	2f01      	cmp	r7, #1
 8016420:	d102      	bne.n	8016428 <MoblePalCryptoGetNetworkIdToBeAdvt+0x6c>
 8016422:	7827      	ldrb	r7, [r4, #0]
 8016424:	2f02      	cmp	r7, #2
 8016426:	d0e0      	beq.n	80163ea <MoblePalCryptoGetNetworkIdToBeAdvt+0x2e>
 8016428:	3501      	adds	r5, #1
 801642a:	327c      	adds	r2, #124	@ 0x7c
 801642c:	3401      	adds	r4, #1
 801642e:	e7d9      	b.n	80163e4 <MoblePalCryptoGetNetworkIdToBeAdvt+0x28>
 8016430:	2000141c 	.word	0x2000141c
 8016434:	20001840 	.word	0x20001840
 8016438:	200003e4 	.word	0x200003e4
 801643c:	20000324 	.word	0x20000324

08016440 <MoblePalCrypto_GetNetKeyIndexes>:
 8016440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016442:	2300      	movs	r3, #0
 8016444:	f8df c038 	ldr.w	ip, [pc, #56]	@ 8016480 <MoblePalCrypto_GetNetKeyIndexes+0x40>
 8016448:	4e0c      	ldr	r6, [pc, #48]	@ (801647c <MoblePalCrypto_GetNetKeyIndexes+0x3c>)
 801644a:	461a      	mov	r2, r3
 801644c:	f04f 0e7c 	mov.w	lr, #124	@ 0x7c
 8016450:	f8bc 7000 	ldrh.w	r7, [ip]
 8016454:	b2dc      	uxtb	r4, r3
 8016456:	42bc      	cmp	r4, r7
 8016458:	d303      	bcc.n	8016462 <MoblePalCrypto_GetNetKeyIndexes+0x22>
 801645a:	f896 361c 	ldrb.w	r3, [r6, #1564]	@ 0x61c
 801645e:	800b      	strh	r3, [r1, #0]
 8016460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016462:	fb0e 6404 	mla	r4, lr, r4, r6
 8016466:	f894 5445 	ldrb.w	r5, [r4, #1093]	@ 0x445
 801646a:	b12d      	cbz	r5, 8016478 <MoblePalCrypto_GetNetKeyIndexes+0x38>
 801646c:	f8b4 4448 	ldrh.w	r4, [r4, #1096]	@ 0x448
 8016470:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
 8016474:	3201      	adds	r2, #1
 8016476:	b2d2      	uxtb	r2, r2
 8016478:	3301      	adds	r3, #1
 801647a:	e7e9      	b.n	8016450 <MoblePalCrypto_GetNetKeyIndexes+0x10>
 801647c:	2000141c 	.word	0x2000141c
 8016480:	20000008 	.word	0x20000008

08016484 <MoblePalCrypto_isPrimarySubnet>:
 8016484:	4b0b      	ldr	r3, [pc, #44]	@ (80164b4 <MoblePalCrypto_isPrimarySubnet+0x30>)
 8016486:	b530      	push	{r4, r5, lr}
 8016488:	4c0b      	ldr	r4, [pc, #44]	@ (80164b8 <MoblePalCrypto_isPrimarySubnet+0x34>)
 801648a:	8819      	ldrh	r1, [r3, #0]
 801648c:	257c      	movs	r5, #124	@ 0x7c
 801648e:	2300      	movs	r3, #0
 8016490:	b2da      	uxtb	r2, r3
 8016492:	428a      	cmp	r2, r1
 8016494:	d301      	bcc.n	801649a <MoblePalCrypto_isPrimarySubnet+0x16>
 8016496:	2000      	movs	r0, #0
 8016498:	bd30      	pop	{r4, r5, pc}
 801649a:	fb05 4202 	mla	r2, r5, r2, r4
 801649e:	f892 0445 	ldrb.w	r0, [r2, #1093]	@ 0x445
 80164a2:	b110      	cbz	r0, 80164aa <MoblePalCrypto_isPrimarySubnet+0x26>
 80164a4:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	@ 0x448
 80164a8:	b10a      	cbz	r2, 80164ae <MoblePalCrypto_isPrimarySubnet+0x2a>
 80164aa:	3301      	adds	r3, #1
 80164ac:	e7f0      	b.n	8016490 <MoblePalCrypto_isPrimarySubnet+0xc>
 80164ae:	2001      	movs	r0, #1
 80164b0:	e7f2      	b.n	8016498 <MoblePalCrypto_isPrimarySubnet+0x14>
 80164b2:	bf00      	nop
 80164b4:	20000008 	.word	0x20000008
 80164b8:	2000141c 	.word	0x2000141c

080164bc <MoblePalCryptoSetDevKey>:
 80164bc:	b510      	push	{r4, lr}
 80164be:	4c05      	ldr	r4, [pc, #20]	@ (80164d4 <MoblePalCryptoSetDevKey+0x18>)
 80164c0:	4601      	mov	r1, r0
 80164c2:	2210      	movs	r2, #16
 80164c4:	f504 60c4 	add.w	r0, r4, #1568	@ 0x620
 80164c8:	f010 fb68 	bl	8026b9c <memmove>
 80164cc:	2301      	movs	r3, #1
 80164ce:	f884 361e 	strb.w	r3, [r4, #1566]	@ 0x61e
 80164d2:	bd10      	pop	{r4, pc}
 80164d4:	2000141c 	.word	0x2000141c

080164d8 <MoblePalCryptoForgetAllKeys>:
 80164d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164dc:	4e36      	ldr	r6, [pc, #216]	@ (80165b8 <MoblePalCryptoForgetAllKeys+0xe0>)
 80164de:	4c37      	ldr	r4, [pc, #220]	@ (80165bc <MoblePalCryptoForgetAllKeys+0xe4>)
 80164e0:	2500      	movs	r5, #0
 80164e2:	8832      	ldrh	r2, [r6, #0]
 80164e4:	b2ef      	uxtb	r7, r5
 80164e6:	4297      	cmp	r7, r2
 80164e8:	d314      	bcc.n	8016514 <MoblePalCryptoForgetAllKeys+0x3c>
 80164ea:	f04f 0a00 	mov.w	sl, #0
 80164ee:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 80165c4 <MoblePalCryptoForgetAllKeys+0xec>
 80164f2:	272c      	movs	r7, #44	@ 0x2c
 80164f4:	46d0      	mov	r8, sl
 80164f6:	8932      	ldrh	r2, [r6, #8]
 80164f8:	fa5f f58a 	uxtb.w	r5, sl
 80164fc:	4295      	cmp	r5, r2
 80164fe:	d32e      	bcc.n	801655e <MoblePalCryptoForgetAllKeys+0x86>
 8016500:	2210      	movs	r2, #16
 8016502:	2100      	movs	r1, #0
 8016504:	482e      	ldr	r0, [pc, #184]	@ (80165c0 <MoblePalCryptoForgetAllKeys+0xe8>)
 8016506:	f010 fb63 	bl	8026bd0 <memset>
 801650a:	2000      	movs	r0, #0
 801650c:	f884 061e 	strb.w	r0, [r4, #1566]	@ 0x61e
 8016510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016514:	237c      	movs	r3, #124	@ 0x7c
 8016516:	437b      	muls	r3, r7
 8016518:	18e2      	adds	r2, r4, r3
 801651a:	f892 1445 	ldrb.w	r1, [r2, #1093]	@ 0x445
 801651e:	2901      	cmp	r1, #1
 8016520:	d10c      	bne.n	801653c <MoblePalCryptoForgetAllKeys+0x64>
 8016522:	4828      	ldr	r0, [pc, #160]	@ (80165c4 <MoblePalCryptoForgetAllKeys+0xec>)
 8016524:	2100      	movs	r1, #0
 8016526:	f882 1445 	strb.w	r1, [r2, #1093]	@ 0x445
 801652a:	4418      	add	r0, r3
 801652c:	2210      	movs	r2, #16
 801652e:	f010 fb4f 	bl	8026bd0 <memset>
 8016532:	f894 361c 	ldrb.w	r3, [r4, #1564]	@ 0x61c
 8016536:	3b01      	subs	r3, #1
 8016538:	f884 361c 	strb.w	r3, [r4, #1564]	@ 0x61c
 801653c:	237c      	movs	r3, #124	@ 0x7c
 801653e:	437b      	muls	r3, r7
 8016540:	18e2      	adds	r2, r4, r3
 8016542:	f892 1446 	ldrb.w	r1, [r2, #1094]	@ 0x446
 8016546:	2901      	cmp	r1, #1
 8016548:	d107      	bne.n	801655a <MoblePalCryptoForgetAllKeys+0x82>
 801654a:	481f      	ldr	r0, [pc, #124]	@ (80165c8 <MoblePalCryptoForgetAllKeys+0xf0>)
 801654c:	2100      	movs	r1, #0
 801654e:	f882 1446 	strb.w	r1, [r2, #1094]	@ 0x446
 8016552:	4418      	add	r0, r3
 8016554:	2210      	movs	r2, #16
 8016556:	f010 fb3b 	bl	8026bd0 <memset>
 801655a:	3501      	adds	r5, #1
 801655c:	e7c1      	b.n	80164e2 <MoblePalCryptoForgetAllKeys+0xa>
 801655e:	fb07 f005 	mul.w	r0, r7, r5
 8016562:	1823      	adds	r3, r4, r0
 8016564:	f893 25b8 	ldrb.w	r2, [r3, #1464]	@ 0x5b8
 8016568:	2a01      	cmp	r2, #1
 801656a:	d10d      	bne.n	8016588 <MoblePalCryptoForgetAllKeys+0xb0>
 801656c:	f500 70ba 	add.w	r0, r0, #372	@ 0x174
 8016570:	f883 85b8 	strb.w	r8, [r3, #1464]	@ 0x5b8
 8016574:	2210      	movs	r2, #16
 8016576:	2100      	movs	r1, #0
 8016578:	4448      	add	r0, r9
 801657a:	f010 fb29 	bl	8026bd0 <memset>
 801657e:	f894 361d 	ldrb.w	r3, [r4, #1565]	@ 0x61d
 8016582:	3b01      	subs	r3, #1
 8016584:	f884 361d 	strb.w	r3, [r4, #1565]	@ 0x61d
 8016588:	437d      	muls	r5, r7
 801658a:	1963      	adds	r3, r4, r5
 801658c:	f893 25b9 	ldrb.w	r2, [r3, #1465]	@ 0x5b9
 8016590:	2a01      	cmp	r2, #1
 8016592:	d10e      	bne.n	80165b2 <MoblePalCryptoForgetAllKeys+0xda>
 8016594:	f505 75c2 	add.w	r5, r5, #388	@ 0x184
 8016598:	f883 85b9 	strb.w	r8, [r3, #1465]	@ 0x5b9
 801659c:	2210      	movs	r2, #16
 801659e:	2100      	movs	r1, #0
 80165a0:	eb09 0005 	add.w	r0, r9, r5
 80165a4:	f010 fb14 	bl	8026bd0 <memset>
 80165a8:	f894 361d 	ldrb.w	r3, [r4, #1565]	@ 0x61d
 80165ac:	3b01      	subs	r3, #1
 80165ae:	f884 361d 	strb.w	r3, [r4, #1565]	@ 0x61d
 80165b2:	f10a 0a01 	add.w	sl, sl, #1
 80165b6:	e79e      	b.n	80164f6 <MoblePalCryptoForgetAllKeys+0x1e>
 80165b8:	20000008 	.word	0x20000008
 80165bc:	2000141c 	.word	0x2000141c
 80165c0:	20001a3c 	.word	0x20001a3c
 80165c4:	20001840 	.word	0x20001840
 80165c8:	20001850 	.word	0x20001850

080165cc <MoblePalCryptoModelsDeInit>:
 80165cc:	b570      	push	{r4, r5, r6, lr}
 80165ce:	4c1e      	ldr	r4, [pc, #120]	@ (8016648 <MoblePalCryptoModelsDeInit+0x7c>)
 80165d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80165d2:	b09e      	sub	sp, #120	@ 0x78
 80165d4:	ad0e      	add	r5, sp, #56	@ 0x38
 80165d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80165d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80165da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80165dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80165de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80165e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80165e4:	f104 0610 	add.w	r6, r4, #16
 80165e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80165ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80165ee:	ad01      	add	r5, sp, #4
 80165f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80165f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80165f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80165f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80165f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80165fa:	6833      	ldr	r3, [r6, #0]
 80165fc:	602b      	str	r3, [r5, #0]
 80165fe:	3c34      	subs	r4, #52	@ 0x34
 8016600:	2500      	movs	r5, #0
 8016602:	4620      	mov	r0, r4
 8016604:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8016608:	2100      	movs	r1, #0
 801660a:	3501      	adds	r5, #1
 801660c:	f010 fae0 	bl	8026bd0 <memset>
 8016610:	2d05      	cmp	r5, #5
 8016612:	f504 7439 	add.w	r4, r4, #740	@ 0x2e4
 8016616:	d1f4      	bne.n	8016602 <MoblePalCryptoModelsDeInit+0x36>
 8016618:	ad0e      	add	r5, sp, #56	@ 0x38
 801661a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801661c:	4c0a      	ldr	r4, [pc, #40]	@ (8016648 <MoblePalCryptoModelsDeInit+0x7c>)
 801661e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016628:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801662c:	ad01      	add	r5, sp, #4
 801662e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016634:	3410      	adds	r4, #16
 8016636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801663a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801663c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801663e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016640:	682b      	ldr	r3, [r5, #0]
 8016642:	6023      	str	r3, [r4, #0]
 8016644:	b01e      	add	sp, #120	@ 0x78
 8016646:	bd70      	pop	{r4, r5, r6, pc}
 8016648:	200003d4 	.word	0x200003d4

0801664c <MoblePalCryptoGetNetworkSecurityKeys>:
 801664c:	4b09      	ldr	r3, [pc, #36]	@ (8016674 <MoblePalCryptoGetNetworkSecurityKeys+0x28>)
 801664e:	227c      	movs	r2, #124	@ 0x7c
 8016650:	fb02 3301 	mla	r3, r2, r1, r3
 8016654:	b958      	cbnz	r0, 801666e <MoblePalCryptoGetNetworkSecurityKeys+0x22>
 8016656:	f893 3445 	ldrb.w	r3, [r3, #1093]	@ 0x445
 801665a:	4807      	ldr	r0, [pc, #28]	@ (8016678 <MoblePalCryptoGetNetworkSecurityKeys+0x2c>)
 801665c:	2b01      	cmp	r3, #1
 801665e:	bf18      	it	ne
 8016660:	2100      	movne	r1, #0
 8016662:	b209      	sxth	r1, r1
 8016664:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8016668:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801666c:	4770      	bx	lr
 801666e:	f893 3446 	ldrb.w	r3, [r3, #1094]	@ 0x446
 8016672:	e7f2      	b.n	801665a <MoblePalCryptoGetNetworkSecurityKeys+0xe>
 8016674:	2000141c 	.word	0x2000141c
 8016678:	20001840 	.word	0x20001840

0801667c <MoblePalCryptoGetApplicationSecurityKeys>:
 801667c:	4b0a      	ldr	r3, [pc, #40]	@ (80166a8 <MoblePalCryptoGetApplicationSecurityKeys+0x2c>)
 801667e:	222c      	movs	r2, #44	@ 0x2c
 8016680:	fb02 3301 	mla	r3, r2, r1, r3
 8016684:	b960      	cbnz	r0, 80166a0 <MoblePalCryptoGetApplicationSecurityKeys+0x24>
 8016686:	f893 35b8 	ldrb.w	r3, [r3, #1464]	@ 0x5b8
 801668a:	4808      	ldr	r0, [pc, #32]	@ (80166ac <MoblePalCryptoGetApplicationSecurityKeys+0x30>)
 801668c:	2b01      	cmp	r3, #1
 801668e:	bf18      	it	ne
 8016690:	2100      	movne	r1, #0
 8016692:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8016696:	232c      	movs	r3, #44	@ 0x2c
 8016698:	fb13 2301 	smlabb	r3, r3, r1, r2
 801669c:	4418      	add	r0, r3
 801669e:	4770      	bx	lr
 80166a0:	f893 35b9 	ldrb.w	r3, [r3, #1465]	@ 0x5b9
 80166a4:	e7f1      	b.n	801668a <MoblePalCryptoGetApplicationSecurityKeys+0xe>
 80166a6:	bf00      	nop
 80166a8:	2000141c 	.word	0x2000141c
 80166ac:	20001840 	.word	0x20001840

080166b0 <MoblePalCryptoGetSecurityKeys_Beacon>:
 80166b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166b4:	4c18      	ldr	r4, [pc, #96]	@ (8016718 <MoblePalCryptoGetSecurityKeys_Beacon+0x68>)
 80166b6:	f8df 9068 	ldr.w	r9, [pc, #104]	@ 8016720 <MoblePalCryptoGetSecurityKeys_Beacon+0x70>
 80166ba:	f894 861c 	ldrb.w	r8, [r4, #1564]	@ 0x61c
 80166be:	4607      	mov	r7, r0
 80166c0:	f204 4454 	addw	r4, r4, #1108	@ 0x454
 80166c4:	2600      	movs	r6, #0
 80166c6:	b2f5      	uxtb	r5, r6
 80166c8:	45a8      	cmp	r8, r5
 80166ca:	d807      	bhi.n	80166dc <MoblePalCryptoGetSecurityKeys_Beacon+0x2c>
 80166cc:	2500      	movs	r5, #0
 80166ce:	4813      	ldr	r0, [pc, #76]	@ (801671c <MoblePalCryptoGetSecurityKeys_Beacon+0x6c>)
 80166d0:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 80166d4:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80166d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166dc:	f814 3c0f 	ldrb.w	r3, [r4, #-15]
 80166e0:	b163      	cbz	r3, 80166fc <MoblePalCryptoGetSecurityKeys_Beacon+0x4c>
 80166e2:	eb06 0309 	add.w	r3, r6, r9
 80166e6:	7d1b      	ldrb	r3, [r3, #20]
 80166e8:	2b02      	cmp	r3, #2
 80166ea:	d007      	beq.n	80166fc <MoblePalCryptoGetSecurityKeys_Beacon+0x4c>
 80166ec:	2208      	movs	r2, #8
 80166ee:	f1a4 0108 	sub.w	r1, r4, #8
 80166f2:	4638      	mov	r0, r7
 80166f4:	f010 fa42 	bl	8026b7c <memcmp>
 80166f8:	2800      	cmp	r0, #0
 80166fa:	d0e8      	beq.n	80166ce <MoblePalCryptoGetSecurityKeys_Beacon+0x1e>
 80166fc:	f814 3c0e 	ldrb.w	r3, [r4, #-14]
 8016700:	b133      	cbz	r3, 8016710 <MoblePalCryptoGetSecurityKeys_Beacon+0x60>
 8016702:	2208      	movs	r2, #8
 8016704:	4621      	mov	r1, r4
 8016706:	4638      	mov	r0, r7
 8016708:	f010 fa38 	bl	8026b7c <memcmp>
 801670c:	2800      	cmp	r0, #0
 801670e:	d0de      	beq.n	80166ce <MoblePalCryptoGetSecurityKeys_Beacon+0x1e>
 8016710:	3601      	adds	r6, #1
 8016712:	347c      	adds	r4, #124	@ 0x7c
 8016714:	e7d7      	b.n	80166c6 <MoblePalCryptoGetSecurityKeys_Beacon+0x16>
 8016716:	bf00      	nop
 8016718:	2000141c 	.word	0x2000141c
 801671c:	20001840 	.word	0x20001840
 8016720:	200003d0 	.word	0x200003d0

08016724 <MoblePalCryptoS1>:
 8016724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016726:	2400      	movs	r4, #0
 8016728:	4603      	mov	r3, r0
 801672a:	4668      	mov	r0, sp
 801672c:	e9cd 4400 	strd	r4, r4, [sp]
 8016730:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8016734:	f7ff f8c0 	bl	80158b8 <BAES_CmacCompute>
 8016738:	4620      	mov	r0, r4
 801673a:	b004      	add	sp, #16
 801673c:	bd10      	pop	{r4, pc}
	...

08016740 <MobleConfigModelGetAddressFromVirtual>:
 8016740:	b510      	push	{r4, lr}
 8016742:	b088      	sub	sp, #32
 8016744:	4604      	mov	r4, r0
 8016746:	490b      	ldr	r1, [pc, #44]	@ (8016774 <MobleConfigModelGetAddressFromVirtual+0x34>)
 8016748:	2204      	movs	r2, #4
 801674a:	4668      	mov	r0, sp
 801674c:	f7ff ffea 	bl	8016724 <MoblePalCryptoS1>
 8016750:	ab04      	add	r3, sp, #16
 8016752:	4668      	mov	r0, sp
 8016754:	2210      	movs	r2, #16
 8016756:	4621      	mov	r1, r4
 8016758:	f7ff f8ae 	bl	80158b8 <BAES_CmacCompute>
 801675c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8016760:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8016764:	021b      	lsls	r3, r3, #8
 8016766:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 801676a:	4318      	orrs	r0, r3
 801676c:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8016770:	b008      	add	sp, #32
 8016772:	bd10      	pop	{r4, pc}
 8016774:	0802e5ab 	.word	0x0802e5ab

08016778 <MoblePalCryptoK2>:
 8016778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801677c:	b098      	sub	sp, #96	@ 0x60
 801677e:	ae0f      	add	r6, sp, #60	@ 0x3c
 8016780:	460d      	mov	r5, r1
 8016782:	4680      	mov	r8, r0
 8016784:	2100      	movs	r1, #0
 8016786:	4691      	mov	r9, r2
 8016788:	4630      	mov	r0, r6
 801678a:	2221      	movs	r2, #33	@ 0x21
 801678c:	e9dd a421 	ldrd	sl, r4, [sp, #132]	@ 0x84
 8016790:	461f      	mov	r7, r3
 8016792:	f010 fa1d 	bl	8026bd0 <memset>
 8016796:	2210      	movs	r2, #16
 8016798:	2100      	movs	r1, #0
 801679a:	a803      	add	r0, sp, #12
 801679c:	f010 fa18 	bl	8026bd0 <memset>
 80167a0:	4929      	ldr	r1, [pc, #164]	@ (8016848 <MoblePalCryptoK2+0xd0>)
 80167a2:	2204      	movs	r2, #4
 80167a4:	a80b      	add	r0, sp, #44	@ 0x2c
 80167a6:	f7ff ffbd 	bl	8016724 <MoblePalCryptoS1>
 80167aa:	ab03      	add	r3, sp, #12
 80167ac:	4639      	mov	r1, r7
 80167ae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80167b0:	a80b      	add	r0, sp, #44	@ 0x2c
 80167b2:	f7ff f881 	bl	80158b8 <BAES_CmacCompute>
 80167b6:	4622      	mov	r2, r4
 80167b8:	4651      	mov	r1, sl
 80167ba:	4630      	mov	r0, r6
 80167bc:	f010 fab9 	bl	8026d32 <memcpy>
 80167c0:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 80167c4:	446b      	add	r3, sp
 80167c6:	af07      	add	r7, sp, #28
 80167c8:	2201      	movs	r2, #1
 80167ca:	f803 2c24 	strb.w	r2, [r3, #-36]
 80167ce:	4631      	mov	r1, r6
 80167d0:	463b      	mov	r3, r7
 80167d2:	18a2      	adds	r2, r4, r2
 80167d4:	a803      	add	r0, sp, #12
 80167d6:	f7ff f86f 	bl	80158b8 <BAES_CmacCompute>
 80167da:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80167de:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80167e2:	4622      	mov	r2, r4
 80167e4:	4651      	mov	r1, sl
 80167e6:	a813      	add	r0, sp, #76	@ 0x4c
 80167e8:	f010 faa3 	bl	8026d32 <memcpy>
 80167ec:	f104 0370 	add.w	r3, r4, #112	@ 0x70
 80167f0:	eb0d 0703 	add.w	r7, sp, r3
 80167f4:	2302      	movs	r3, #2
 80167f6:	f104 0211 	add.w	r2, r4, #17
 80167fa:	f807 3c24 	strb.w	r3, [r7, #-36]
 80167fe:	4631      	mov	r1, r6
 8016800:	462b      	mov	r3, r5
 8016802:	a803      	add	r0, sp, #12
 8016804:	9201      	str	r2, [sp, #4]
 8016806:	f7ff f857 	bl	80158b8 <BAES_CmacCompute>
 801680a:	9a01      	ldr	r2, [sp, #4]
 801680c:	46b4      	mov	ip, r6
 801680e:	f105 0410 	add.w	r4, r5, #16
 8016812:	6828      	ldr	r0, [r5, #0]
 8016814:	6869      	ldr	r1, [r5, #4]
 8016816:	4663      	mov	r3, ip
 8016818:	c303      	stmia	r3!, {r0, r1}
 801681a:	3508      	adds	r5, #8
 801681c:	42a5      	cmp	r5, r4
 801681e:	469c      	mov	ip, r3
 8016820:	d1f7      	bne.n	8016812 <MoblePalCryptoK2+0x9a>
 8016822:	2303      	movs	r3, #3
 8016824:	f807 3c24 	strb.w	r3, [r7, #-36]
 8016828:	a803      	add	r0, sp, #12
 801682a:	464b      	mov	r3, r9
 801682c:	4631      	mov	r1, r6
 801682e:	f7ff f843 	bl	80158b8 <BAES_CmacCompute>
 8016832:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 8016836:	2000      	movs	r0, #0
 8016838:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801683c:	f888 3000 	strb.w	r3, [r8]
 8016840:	b018      	add	sp, #96	@ 0x60
 8016842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016846:	bf00      	nop
 8016848:	0802e5b0 	.word	0x0802e5b0

0801684c <MoblePalCryptoK3>:
 801684c:	b530      	push	{r4, r5, lr}
 801684e:	4b12      	ldr	r3, [pc, #72]	@ (8016898 <MoblePalCryptoK3+0x4c>)
 8016850:	b08f      	sub	sp, #60	@ 0x3c
 8016852:	4604      	mov	r4, r0
 8016854:	6818      	ldr	r0, [r3, #0]
 8016856:	9000      	str	r0, [sp, #0]
 8016858:	791b      	ldrb	r3, [r3, #4]
 801685a:	f88d 3004 	strb.w	r3, [sp, #4]
 801685e:	460d      	mov	r5, r1
 8016860:	2204      	movs	r2, #4
 8016862:	490e      	ldr	r1, [pc, #56]	@ (801689c <MoblePalCryptoK3+0x50>)
 8016864:	a802      	add	r0, sp, #8
 8016866:	f7ff ff5d 	bl	8016724 <MoblePalCryptoS1>
 801686a:	2801      	cmp	r0, #1
 801686c:	d812      	bhi.n	8016894 <MoblePalCryptoK3+0x48>
 801686e:	ab06      	add	r3, sp, #24
 8016870:	2210      	movs	r2, #16
 8016872:	4629      	mov	r1, r5
 8016874:	a802      	add	r0, sp, #8
 8016876:	f7ff f81f 	bl	80158b8 <BAES_CmacCompute>
 801687a:	ab0a      	add	r3, sp, #40	@ 0x28
 801687c:	4669      	mov	r1, sp
 801687e:	a806      	add	r0, sp, #24
 8016880:	2205      	movs	r2, #5
 8016882:	f7ff f819 	bl	80158b8 <BAES_CmacCompute>
 8016886:	ab0c      	add	r3, sp, #48	@ 0x30
 8016888:	cb03      	ldmia	r3!, {r0, r1}
 801688a:	6020      	str	r0, [r4, #0]
 801688c:	6061      	str	r1, [r4, #4]
 801688e:	2000      	movs	r0, #0
 8016890:	b00f      	add	sp, #60	@ 0x3c
 8016892:	bd30      	pop	{r4, r5, pc}
 8016894:	2002      	movs	r0, #2
 8016896:	e7fb      	b.n	8016890 <MoblePalCryptoK3+0x44>
 8016898:	0802e5ba 	.word	0x0802e5ba
 801689c:	0802e5b5 	.word	0x0802e5b5

080168a0 <MoblePalCryptoK4>:
 80168a0:	b530      	push	{r4, r5, lr}
 80168a2:	b08f      	sub	sp, #60	@ 0x3c
 80168a4:	4b10      	ldr	r3, [pc, #64]	@ (80168e8 <MoblePalCryptoK4+0x48>)
 80168a6:	9301      	str	r3, [sp, #4]
 80168a8:	4604      	mov	r4, r0
 80168aa:	460d      	mov	r5, r1
 80168ac:	2204      	movs	r2, #4
 80168ae:	490f      	ldr	r1, [pc, #60]	@ (80168ec <MoblePalCryptoK4+0x4c>)
 80168b0:	a802      	add	r0, sp, #8
 80168b2:	f7ff ff37 	bl	8016724 <MoblePalCryptoS1>
 80168b6:	2801      	cmp	r0, #1
 80168b8:	d814      	bhi.n	80168e4 <MoblePalCryptoK4+0x44>
 80168ba:	ab06      	add	r3, sp, #24
 80168bc:	2210      	movs	r2, #16
 80168be:	4629      	mov	r1, r5
 80168c0:	a802      	add	r0, sp, #8
 80168c2:	f7fe fff9 	bl	80158b8 <BAES_CmacCompute>
 80168c6:	2204      	movs	r2, #4
 80168c8:	ab0a      	add	r3, sp, #40	@ 0x28
 80168ca:	a806      	add	r0, sp, #24
 80168cc:	eb0d 0102 	add.w	r1, sp, r2
 80168d0:	f7fe fff2 	bl	80158b8 <BAES_CmacCompute>
 80168d4:	f89d 3037 	ldrb.w	r3, [sp, #55]	@ 0x37
 80168d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80168dc:	7023      	strb	r3, [r4, #0]
 80168de:	2000      	movs	r0, #0
 80168e0:	b00f      	add	sp, #60	@ 0x3c
 80168e2:	bd30      	pop	{r4, r5, pc}
 80168e4:	2002      	movs	r0, #2
 80168e6:	e7fb      	b.n	80168e0 <MoblePalCryptoK4+0x40>
 80168e8:	01366469 	.word	0x01366469
 80168ec:	0802e5c0 	.word	0x0802e5c0

080168f0 <MoblePalCryptoSetNewAppKey>:
 80168f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80168f4:	4f40      	ldr	r7, [pc, #256]	@ (80169f8 <MoblePalCryptoSetNewAppKey+0x108>)
 80168f6:	4c41      	ldr	r4, [pc, #260]	@ (80169fc <MoblePalCryptoSetNewAppKey+0x10c>)
 80168f8:	883e      	ldrh	r6, [r7, #0]
 80168fa:	4603      	mov	r3, r0
 80168fc:	f04f 0e7c 	mov.w	lr, #124	@ 0x7c
 8016900:	2000      	movs	r0, #0
 8016902:	b2c5      	uxtb	r5, r0
 8016904:	42b5      	cmp	r5, r6
 8016906:	d301      	bcc.n	801690c <MoblePalCryptoSetNewAppKey+0x1c>
 8016908:	2500      	movs	r5, #0
 801690a:	e029      	b.n	8016960 <MoblePalCryptoSetNewAppKey+0x70>
 801690c:	fb0e 4505 	mla	r5, lr, r5, r4
 8016910:	3001      	adds	r0, #1
 8016912:	f8b5 5448 	ldrh.w	r5, [r5, #1096]	@ 0x448
 8016916:	4295      	cmp	r5, r2
 8016918:	d1f3      	bne.n	8016902 <MoblePalCryptoSetNewAppKey+0x12>
 801691a:	2600      	movs	r6, #0
 801691c:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8016920:	4630      	mov	r0, r6
 8016922:	f04f 092c 	mov.w	r9, #44	@ 0x2c
 8016926:	b2f5      	uxtb	r5, r6
 8016928:	4545      	cmp	r5, r8
 801692a:	d302      	bcc.n	8016932 <MoblePalCryptoSetNewAppKey+0x42>
 801692c:	b1c0      	cbz	r0, 8016960 <MoblePalCryptoSetNewAppKey+0x70>
 801692e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016932:	fb09 f005 	mul.w	r0, r9, r5
 8016936:	eb04 0c00 	add.w	ip, r4, r0
 801693a:	f89c e5b9 	ldrb.w	lr, [ip, #1465]	@ 0x5b9
 801693e:	f1be 0f00 	cmp.w	lr, #0
 8016942:	d11b      	bne.n	801697c <MoblePalCryptoSetNewAppKey+0x8c>
 8016944:	f8bc e5be 	ldrh.w	lr, [ip, #1470]	@ 0x5be
 8016948:	4596      	cmp	lr, r2
 801694a:	d12f      	bne.n	80169ac <MoblePalCryptoSetNewAppKey+0xbc>
 801694c:	f8bc c5ba 	ldrh.w	ip, [ip, #1466]	@ 0x5ba
 8016950:	458c      	cmp	ip, r1
 8016952:	d12b      	bne.n	80169ac <MoblePalCryptoSetNewAppKey+0xbc>
 8016954:	4619      	mov	r1, r3
 8016956:	4b2a      	ldr	r3, [pc, #168]	@ (8016a00 <MoblePalCryptoSetNewAppKey+0x110>)
 8016958:	2210      	movs	r2, #16
 801695a:	4418      	add	r0, r3
 801695c:	f010 f91e 	bl	8026b9c <memmove>
 8016960:	262c      	movs	r6, #44	@ 0x2c
 8016962:	4828      	ldr	r0, [pc, #160]	@ (8016a04 <MoblePalCryptoSetNewAppKey+0x114>)
 8016964:	f894 c61d 	ldrb.w	ip, [r4, #1565]	@ 0x61d
 8016968:	893f      	ldrh	r7, [r7, #8]
 801696a:	fb15 f206 	smulbb	r2, r5, r6
 801696e:	f202 1183 	addw	r1, r2, #387	@ 0x183
 8016972:	4401      	add	r1, r0
 8016974:	2310      	movs	r3, #16
 8016976:	fb06 4405 	mla	r4, r6, r5, r4
 801697a:	e021      	b.n	80169c0 <MoblePalCryptoSetNewAppKey+0xd0>
 801697c:	f1be 0f01 	cmp.w	lr, #1
 8016980:	d114      	bne.n	80169ac <MoblePalCryptoSetNewAppKey+0xbc>
 8016982:	f8bc e5be 	ldrh.w	lr, [ip, #1470]	@ 0x5be
 8016986:	4596      	cmp	lr, r2
 8016988:	d110      	bne.n	80169ac <MoblePalCryptoSetNewAppKey+0xbc>
 801698a:	f8bc c5ba 	ldrh.w	ip, [ip, #1466]	@ 0x5ba
 801698e:	458c      	cmp	ip, r1
 8016990:	d10c      	bne.n	80169ac <MoblePalCryptoSetNewAppKey+0xbc>
 8016992:	4a1d      	ldr	r2, [pc, #116]	@ (8016a08 <MoblePalCryptoSetNewAppKey+0x118>)
 8016994:	4410      	add	r0, r2
 8016996:	1e5a      	subs	r2, r3, #1
 8016998:	330f      	adds	r3, #15
 801699a:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 801699e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80169a2:	428e      	cmp	r6, r1
 80169a4:	d126      	bne.n	80169f4 <MoblePalCryptoSetNewAppKey+0x104>
 80169a6:	429a      	cmp	r2, r3
 80169a8:	d1f7      	bne.n	801699a <MoblePalCryptoSetNewAppKey+0xaa>
 80169aa:	e7d9      	b.n	8016960 <MoblePalCryptoSetNewAppKey+0x70>
 80169ac:	3601      	adds	r6, #1
 80169ae:	2001      	movs	r0, #1
 80169b0:	e7b9      	b.n	8016926 <MoblePalCryptoSetNewAppKey+0x36>
 80169b2:	702e      	strb	r6, [r5, #0]
 80169b4:	2002      	movs	r0, #2
 80169b6:	e7ba      	b.n	801692e <MoblePalCryptoSetNewAppKey+0x3e>
 80169b8:	3b01      	subs	r3, #1
 80169ba:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 80169be:	d017      	beq.n	80169f0 <MoblePalCryptoSetNewAppKey+0x100>
 80169c0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80169c4:	2d00      	cmp	r5, #0
 80169c6:	d0f7      	beq.n	80169b8 <MoblePalCryptoSetNewAppKey+0xc8>
 80169c8:	45bc      	cmp	ip, r7
 80169ca:	d8f5      	bhi.n	80169b8 <MoblePalCryptoSetNewAppKey+0xc8>
 80169cc:	f894 65b9 	ldrb.w	r6, [r4, #1465]	@ 0x5b9
 80169d0:	f204 55b9 	addw	r5, r4, #1465	@ 0x5b9
 80169d4:	2e00      	cmp	r6, #0
 80169d6:	d1ef      	bne.n	80169b8 <MoblePalCryptoSetNewAppKey+0xc8>
 80169d8:	2301      	movs	r3, #1
 80169da:	f502 71c2 	add.w	r1, r2, #388	@ 0x184
 80169de:	f202 1299 	addw	r2, r2, #409	@ 0x199
 80169e2:	4401      	add	r1, r0
 80169e4:	702b      	strb	r3, [r5, #0]
 80169e6:	4410      	add	r0, r2
 80169e8:	f7ff ff5a 	bl	80168a0 <MoblePalCryptoK4>
 80169ec:	2801      	cmp	r0, #1
 80169ee:	d8e0      	bhi.n	80169b2 <MoblePalCryptoSetNewAppKey+0xc2>
 80169f0:	2000      	movs	r0, #0
 80169f2:	e79c      	b.n	801692e <MoblePalCryptoSetNewAppKey+0x3e>
 80169f4:	2003      	movs	r0, #3
 80169f6:	e79a      	b.n	801692e <MoblePalCryptoSetNewAppKey+0x3e>
 80169f8:	20000008 	.word	0x20000008
 80169fc:	2000141c 	.word	0x2000141c
 8016a00:	200019c4 	.word	0x200019c4
 8016a04:	20001840 	.word	0x20001840
 8016a08:	200019c3 	.word	0x200019c3

08016a0c <MoblePalCryptoSetAppKey>:
 8016a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a10:	4c44      	ldr	r4, [pc, #272]	@ (8016b24 <MoblePalCryptoSetAppKey+0x118>)
 8016a12:	4d45      	ldr	r5, [pc, #276]	@ (8016b28 <MoblePalCryptoSetAppKey+0x11c>)
 8016a14:	8826      	ldrh	r6, [r4, #0]
 8016a16:	4617      	mov	r7, r2
 8016a18:	4603      	mov	r3, r0
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	f04f 0e7c 	mov.w	lr, #124	@ 0x7c
 8016a20:	b2d0      	uxtb	r0, r2
 8016a22:	42b0      	cmp	r0, r6
 8016a24:	d301      	bcc.n	8016a2a <MoblePalCryptoSetAppKey+0x1e>
 8016a26:	2600      	movs	r6, #0
 8016a28:	e026      	b.n	8016a78 <MoblePalCryptoSetAppKey+0x6c>
 8016a2a:	fb0e 5000 	mla	r0, lr, r0, r5
 8016a2e:	3201      	adds	r2, #1
 8016a30:	f8b0 0448 	ldrh.w	r0, [r0, #1096]	@ 0x448
 8016a34:	42b8      	cmp	r0, r7
 8016a36:	d1f3      	bne.n	8016a20 <MoblePalCryptoSetAppKey+0x14>
 8016a38:	2200      	movs	r2, #0
 8016a3a:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 8016a3e:	4610      	mov	r0, r2
 8016a40:	f04f 092c 	mov.w	r9, #44	@ 0x2c
 8016a44:	b2d6      	uxtb	r6, r2
 8016a46:	4546      	cmp	r6, r8
 8016a48:	d302      	bcc.n	8016a50 <MoblePalCryptoSetAppKey+0x44>
 8016a4a:	b1a8      	cbz	r0, 8016a78 <MoblePalCryptoSetAppKey+0x6c>
 8016a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a50:	fb09 f006 	mul.w	r0, r9, r6
 8016a54:	eb05 0c00 	add.w	ip, r5, r0
 8016a58:	f89c e5b8 	ldrb.w	lr, [ip, #1464]	@ 0x5b8
 8016a5c:	f1be 0f00 	cmp.w	lr, #0
 8016a60:	d119      	bne.n	8016a96 <MoblePalCryptoSetAppKey+0x8a>
 8016a62:	f8ac 15ba 	strh.w	r1, [ip, #1466]	@ 0x5ba
 8016a66:	4619      	mov	r1, r3
 8016a68:	4b30      	ldr	r3, [pc, #192]	@ (8016b2c <MoblePalCryptoSetAppKey+0x120>)
 8016a6a:	2210      	movs	r2, #16
 8016a6c:	4418      	add	r0, r3
 8016a6e:	f010 f895 	bl	8026b9c <memmove>
 8016a72:	1c73      	adds	r3, r6, #1
 8016a74:	f885 361d 	strb.w	r3, [r5, #1565]	@ 0x61d
 8016a78:	f8b4 e008 	ldrh.w	lr, [r4, #8]
 8016a7c:	482c      	ldr	r0, [pc, #176]	@ (8016b30 <MoblePalCryptoSetAppKey+0x124>)
 8016a7e:	f895 c61d 	ldrb.w	ip, [r5, #1565]	@ 0x61d
 8016a82:	242c      	movs	r4, #44	@ 0x2c
 8016a84:	fb16 f204 	smulbb	r2, r6, r4
 8016a88:	f202 1173 	addw	r1, r2, #371	@ 0x173
 8016a8c:	4401      	add	r1, r0
 8016a8e:	2310      	movs	r3, #16
 8016a90:	fb04 5406 	mla	r4, r4, r6, r5
 8016a94:	e025      	b.n	8016ae2 <MoblePalCryptoSetAppKey+0xd6>
 8016a96:	f1be 0f01 	cmp.w	lr, #1
 8016a9a:	d114      	bne.n	8016ac6 <MoblePalCryptoSetAppKey+0xba>
 8016a9c:	f8bc e5be 	ldrh.w	lr, [ip, #1470]	@ 0x5be
 8016aa0:	45be      	cmp	lr, r7
 8016aa2:	d110      	bne.n	8016ac6 <MoblePalCryptoSetAppKey+0xba>
 8016aa4:	f8bc c5ba 	ldrh.w	ip, [ip, #1466]	@ 0x5ba
 8016aa8:	458c      	cmp	ip, r1
 8016aaa:	d10c      	bne.n	8016ac6 <MoblePalCryptoSetAppKey+0xba>
 8016aac:	4a21      	ldr	r2, [pc, #132]	@ (8016b34 <MoblePalCryptoSetAppKey+0x128>)
 8016aae:	4410      	add	r0, r2
 8016ab0:	1e5a      	subs	r2, r3, #1
 8016ab2:	330f      	adds	r3, #15
 8016ab4:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8016ab8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8016abc:	458c      	cmp	ip, r1
 8016abe:	d12e      	bne.n	8016b1e <MoblePalCryptoSetAppKey+0x112>
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	d1f7      	bne.n	8016ab4 <MoblePalCryptoSetAppKey+0xa8>
 8016ac4:	e7d8      	b.n	8016a78 <MoblePalCryptoSetAppKey+0x6c>
 8016ac6:	3201      	adds	r2, #1
 8016ac8:	2001      	movs	r0, #1
 8016aca:	e7bb      	b.n	8016a44 <MoblePalCryptoSetAppKey+0x38>
 8016acc:	7035      	strb	r5, [r6, #0]
 8016ace:	f8a4 55be 	strh.w	r5, [r4, #1470]	@ 0x5be
 8016ad2:	f884 55c0 	strb.w	r5, [r4, #1472]	@ 0x5c0
 8016ad6:	2002      	movs	r0, #2
 8016ad8:	e7b8      	b.n	8016a4c <MoblePalCryptoSetAppKey+0x40>
 8016ada:	3b01      	subs	r3, #1
 8016adc:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8016ae0:	d01b      	beq.n	8016b1a <MoblePalCryptoSetAppKey+0x10e>
 8016ae2:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8016ae6:	2d00      	cmp	r5, #0
 8016ae8:	d0f7      	beq.n	8016ada <MoblePalCryptoSetAppKey+0xce>
 8016aea:	45f4      	cmp	ip, lr
 8016aec:	d8f5      	bhi.n	8016ada <MoblePalCryptoSetAppKey+0xce>
 8016aee:	f894 55b8 	ldrb.w	r5, [r4, #1464]	@ 0x5b8
 8016af2:	f504 66b7 	add.w	r6, r4, #1464	@ 0x5b8
 8016af6:	2d00      	cmp	r5, #0
 8016af8:	d1ef      	bne.n	8016ada <MoblePalCryptoSetAppKey+0xce>
 8016afa:	2301      	movs	r3, #1
 8016afc:	f502 71ba 	add.w	r1, r2, #372	@ 0x174
 8016b00:	f502 72cc 	add.w	r2, r2, #408	@ 0x198
 8016b04:	4401      	add	r1, r0
 8016b06:	7033      	strb	r3, [r6, #0]
 8016b08:	f8a4 75be 	strh.w	r7, [r4, #1470]	@ 0x5be
 8016b0c:	f884 35c0 	strb.w	r3, [r4, #1472]	@ 0x5c0
 8016b10:	4410      	add	r0, r2
 8016b12:	f7ff fec5 	bl	80168a0 <MoblePalCryptoK4>
 8016b16:	2801      	cmp	r0, #1
 8016b18:	d8d8      	bhi.n	8016acc <MoblePalCryptoSetAppKey+0xc0>
 8016b1a:	2000      	movs	r0, #0
 8016b1c:	e796      	b.n	8016a4c <MoblePalCryptoSetAppKey+0x40>
 8016b1e:	2003      	movs	r0, #3
 8016b20:	e794      	b.n	8016a4c <MoblePalCryptoSetAppKey+0x40>
 8016b22:	bf00      	nop
 8016b24:	20000008 	.word	0x20000008
 8016b28:	2000141c 	.word	0x2000141c
 8016b2c:	200019b4 	.word	0x200019b4
 8016b30:	20001840 	.word	0x20001840
 8016b34:	200019b3 	.word	0x200019b3

08016b38 <MoblePalCryptoBeaconKey>:
 8016b38:	b530      	push	{r4, r5, lr}
 8016b3a:	4b12      	ldr	r3, [pc, #72]	@ (8016b84 <MoblePalCryptoBeaconKey+0x4c>)
 8016b3c:	b08b      	sub	sp, #44	@ 0x2c
 8016b3e:	4604      	mov	r4, r0
 8016b40:	6818      	ldr	r0, [r3, #0]
 8016b42:	9004      	str	r0, [sp, #16]
 8016b44:	889b      	ldrh	r3, [r3, #4]
 8016b46:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016b4a:	460d      	mov	r5, r1
 8016b4c:	2204      	movs	r2, #4
 8016b4e:	490e      	ldr	r1, [pc, #56]	@ (8016b88 <MoblePalCryptoBeaconKey+0x50>)
 8016b50:	a806      	add	r0, sp, #24
 8016b52:	f7ff fde7 	bl	8016724 <MoblePalCryptoS1>
 8016b56:	2801      	cmp	r0, #1
 8016b58:	d811      	bhi.n	8016b7e <MoblePalCryptoBeaconKey+0x46>
 8016b5a:	2306      	movs	r3, #6
 8016b5c:	9302      	str	r3, [sp, #8]
 8016b5e:	2210      	movs	r2, #16
 8016b60:	ab04      	add	r3, sp, #16
 8016b62:	9301      	str	r3, [sp, #4]
 8016b64:	9200      	str	r2, [sp, #0]
 8016b66:	ab06      	add	r3, sp, #24
 8016b68:	4629      	mov	r1, r5
 8016b6a:	4620      	mov	r0, r4
 8016b6c:	f7fe ff72 	bl	8015a54 <MoblePalCryptoK1.part.0>
 8016b70:	2801      	cmp	r0, #1
 8016b72:	bf94      	ite	ls
 8016b74:	2000      	movls	r0, #0
 8016b76:	2001      	movhi	r0, #1
 8016b78:	0040      	lsls	r0, r0, #1
 8016b7a:	b00b      	add	sp, #44	@ 0x2c
 8016b7c:	bd30      	pop	{r4, r5, pc}
 8016b7e:	2002      	movs	r0, #2
 8016b80:	e7fb      	b.n	8016b7a <MoblePalCryptoBeaconKey+0x42>
 8016b82:	bf00      	nop
 8016b84:	0802e5ca 	.word	0x0802e5ca
 8016b88:	0802e5c5 	.word	0x0802e5c5

08016b8c <MoblePalCryptoIdentityKey>:
 8016b8c:	b530      	push	{r4, r5, lr}
 8016b8e:	4b12      	ldr	r3, [pc, #72]	@ (8016bd8 <MoblePalCryptoIdentityKey+0x4c>)
 8016b90:	b08b      	sub	sp, #44	@ 0x2c
 8016b92:	4604      	mov	r4, r0
 8016b94:	6818      	ldr	r0, [r3, #0]
 8016b96:	9004      	str	r0, [sp, #16]
 8016b98:	889b      	ldrh	r3, [r3, #4]
 8016b9a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016b9e:	460d      	mov	r5, r1
 8016ba0:	2204      	movs	r2, #4
 8016ba2:	490e      	ldr	r1, [pc, #56]	@ (8016bdc <MoblePalCryptoIdentityKey+0x50>)
 8016ba4:	a806      	add	r0, sp, #24
 8016ba6:	f7ff fdbd 	bl	8016724 <MoblePalCryptoS1>
 8016baa:	2801      	cmp	r0, #1
 8016bac:	d811      	bhi.n	8016bd2 <MoblePalCryptoIdentityKey+0x46>
 8016bae:	2306      	movs	r3, #6
 8016bb0:	9302      	str	r3, [sp, #8]
 8016bb2:	2210      	movs	r2, #16
 8016bb4:	ab04      	add	r3, sp, #16
 8016bb6:	9301      	str	r3, [sp, #4]
 8016bb8:	9200      	str	r2, [sp, #0]
 8016bba:	ab06      	add	r3, sp, #24
 8016bbc:	4629      	mov	r1, r5
 8016bbe:	4620      	mov	r0, r4
 8016bc0:	f7fe ff48 	bl	8015a54 <MoblePalCryptoK1.part.0>
 8016bc4:	2801      	cmp	r0, #1
 8016bc6:	bf94      	ite	ls
 8016bc8:	2000      	movls	r0, #0
 8016bca:	2001      	movhi	r0, #1
 8016bcc:	0040      	lsls	r0, r0, #1
 8016bce:	b00b      	add	sp, #44	@ 0x2c
 8016bd0:	bd30      	pop	{r4, r5, pc}
 8016bd2:	2002      	movs	r0, #2
 8016bd4:	e7fb      	b.n	8016bce <MoblePalCryptoIdentityKey+0x42>
 8016bd6:	bf00      	nop
 8016bd8:	0802e5ca 	.word	0x0802e5ca
 8016bdc:	0802e5d1 	.word	0x0802e5d1

08016be0 <MoblePalCryptoAesCcmEncrypt>:
 8016be0:	b510      	push	{r4, lr}
 8016be2:	b086      	sub	sp, #24
 8016be4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8016be6:	9405      	str	r4, [sp, #20]
 8016be8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8016bea:	9404      	str	r4, [sp, #16]
 8016bec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016bee:	9403      	str	r4, [sp, #12]
 8016bf0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8016bf2:	9402      	str	r4, [sp, #8]
 8016bf4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016bf6:	9401      	str	r4, [sp, #4]
 8016bf8:	9c08      	ldr	r4, [sp, #32]
 8016bfa:	9400      	str	r4, [sp, #0]
 8016bfc:	f7ff f87c 	bl	8015cf8 <BAES_CcmEncrypt>
 8016c00:	2800      	cmp	r0, #0
 8016c02:	bf14      	ite	ne
 8016c04:	2003      	movne	r0, #3
 8016c06:	2000      	moveq	r0, #0
 8016c08:	b006      	add	sp, #24
 8016c0a:	bd10      	pop	{r4, pc}

08016c0c <MoblePalCryptoAesCcmDecrypt>:
 8016c0c:	b510      	push	{r4, lr}
 8016c0e:	b086      	sub	sp, #24
 8016c10:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8016c12:	9405      	str	r4, [sp, #20]
 8016c14:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8016c16:	9404      	str	r4, [sp, #16]
 8016c18:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016c1a:	9403      	str	r4, [sp, #12]
 8016c1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8016c1e:	9402      	str	r4, [sp, #8]
 8016c20:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016c22:	9401      	str	r4, [sp, #4]
 8016c24:	9c08      	ldr	r4, [sp, #32]
 8016c26:	9400      	str	r4, [sp, #0]
 8016c28:	f7ff f8a5 	bl	8015d76 <BAES_CcmDecrypt>
 8016c2c:	2800      	cmp	r0, #0
 8016c2e:	bf14      	ite	ne
 8016c30:	2003      	movne	r0, #3
 8016c32:	2000      	moveq	r0, #0
 8016c34:	b006      	add	sp, #24
 8016c36:	bd10      	pop	{r4, pc}

08016c38 <MoblePalCryptoAesEcb>:
 8016c38:	b538      	push	{r3, r4, r5, lr}
 8016c3a:	460d      	mov	r5, r1
 8016c3c:	4611      	mov	r1, r2
 8016c3e:	4602      	mov	r2, r0
 8016c40:	b148      	cbz	r0, 8016c56 <MoblePalCryptoAesEcb+0x1e>
 8016c42:	b145      	cbz	r5, 8016c56 <MoblePalCryptoAesEcb+0x1e>
 8016c44:	b139      	cbz	r1, 8016c56 <MoblePalCryptoAesEcb+0x1e>
 8016c46:	f013 040f 	ands.w	r4, r3, #15
 8016c4a:	d104      	bne.n	8016c56 <MoblePalCryptoAesEcb+0x1e>
 8016c4c:	4628      	mov	r0, r5
 8016c4e:	f7fe ff21 	bl	8015a94 <BAES_EcbEncrypt>
 8016c52:	4620      	mov	r0, r4
 8016c54:	bd38      	pop	{r3, r4, r5, pc}
 8016c56:	2003      	movs	r0, #3
 8016c58:	e7fc      	b.n	8016c54 <MoblePalCryptoAesEcb+0x1c>

08016c5a <MoblePalCryptoXor>:
 8016c5a:	b510      	push	{r4, lr}
 8016c5c:	3901      	subs	r1, #1
 8016c5e:	4402      	add	r2, r0
 8016c60:	4290      	cmp	r0, r2
 8016c62:	d100      	bne.n	8016c66 <MoblePalCryptoXor+0xc>
 8016c64:	bd10      	pop	{r4, pc}
 8016c66:	7803      	ldrb	r3, [r0, #0]
 8016c68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016c6c:	4063      	eors	r3, r4
 8016c6e:	f800 3b01 	strb.w	r3, [r0], #1
 8016c72:	e7f5      	b.n	8016c60 <MoblePalCryptoXor+0x6>

08016c74 <MoblePalCryptoUpdateNetKeyVectors>:
 8016c74:	b510      	push	{r4, lr}
 8016c76:	b088      	sub	sp, #32
 8016c78:	2300      	movs	r3, #0
 8016c7a:	f88d 301f 	strb.w	r3, [sp, #31]
 8016c7e:	4604      	mov	r4, r0
 8016c80:	b930      	cbnz	r0, 8016c90 <MoblePalCryptoUpdateNetKeyVectors+0x1c>
 8016c82:	4b23      	ldr	r3, [pc, #140]	@ (8016d10 <MoblePalCryptoUpdateNetKeyVectors+0x9c>)
 8016c84:	4a23      	ldr	r2, [pc, #140]	@ (8016d14 <MoblePalCryptoUpdateNetKeyVectors+0xa0>)
 8016c86:	4824      	ldr	r0, [pc, #144]	@ (8016d18 <MoblePalCryptoUpdateNetKeyVectors+0xa4>)
 8016c88:	f240 5185 	movw	r1, #1413	@ 0x585
 8016c8c:	f00f f802 	bl	8025c94 <__assert_func>
 8016c90:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8016c94:	b92b      	cbnz	r3, 8016ca2 <MoblePalCryptoUpdateNetKeyVectors+0x2e>
 8016c96:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8016c9a:	b913      	cbnz	r3, 8016ca2 <MoblePalCryptoUpdateNetKeyVectors+0x2e>
 8016c9c:	2002      	movs	r0, #2
 8016c9e:	b008      	add	sp, #32
 8016ca0:	bd10      	pop	{r4, pc}
 8016ca2:	b1e1      	cbz	r1, 8016cde <MoblePalCryptoUpdateNetKeyVectors+0x6a>
 8016ca4:	4621      	mov	r1, r4
 8016ca6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8016caa:	f7ff fdcf 	bl	801684c <MoblePalCryptoK3>
 8016cae:	2801      	cmp	r0, #1
 8016cb0:	d8f4      	bhi.n	8016c9c <MoblePalCryptoUpdateNetKeyVectors+0x28>
 8016cb2:	2301      	movs	r3, #1
 8016cb4:	9302      	str	r3, [sp, #8]
 8016cb6:	f10d 031f 	add.w	r3, sp, #31
 8016cba:	9301      	str	r3, [sp, #4]
 8016cbc:	2310      	movs	r3, #16
 8016cbe:	9300      	str	r3, [sp, #0]
 8016cc0:	f104 025c 	add.w	r2, r4, #92	@ 0x5c
 8016cc4:	4623      	mov	r3, r4
 8016cc6:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8016cca:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8016cce:	f7ff fd53 	bl	8016778 <MoblePalCryptoK2>
 8016cd2:	2801      	cmp	r0, #1
 8016cd4:	bf94      	ite	ls
 8016cd6:	2000      	movls	r0, #0
 8016cd8:	2001      	movhi	r0, #1
 8016cda:	0040      	lsls	r0, r0, #1
 8016cdc:	e7df      	b.n	8016c9e <MoblePalCryptoUpdateNetKeyVectors+0x2a>
 8016cde:	f104 0310 	add.w	r3, r4, #16
 8016ce2:	4619      	mov	r1, r3
 8016ce4:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8016ce8:	9305      	str	r3, [sp, #20]
 8016cea:	f7ff fdaf 	bl	801684c <MoblePalCryptoK3>
 8016cee:	2801      	cmp	r0, #1
 8016cf0:	d8d4      	bhi.n	8016c9c <MoblePalCryptoUpdateNetKeyVectors+0x28>
 8016cf2:	2201      	movs	r2, #1
 8016cf4:	9202      	str	r2, [sp, #8]
 8016cf6:	f10d 021f 	add.w	r2, sp, #31
 8016cfa:	9201      	str	r2, [sp, #4]
 8016cfc:	2210      	movs	r2, #16
 8016cfe:	9200      	str	r2, [sp, #0]
 8016d00:	9b05      	ldr	r3, [sp, #20]
 8016d02:	f104 026c 	add.w	r2, r4, #108	@ 0x6c
 8016d06:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 8016d0a:	f104 0039 	add.w	r0, r4, #57	@ 0x39
 8016d0e:	e7de      	b.n	8016cce <MoblePalCryptoUpdateNetKeyVectors+0x5a>
 8016d10:	0802e5d6 	.word	0x0802e5d6
 8016d14:	0802cbd8 	.word	0x0802cbd8
 8016d18:	0802e5db 	.word	0x0802e5db

08016d1c <MoblePalCryptoSetNewNetworkKey>:
 8016d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d20:	4b2f      	ldr	r3, [pc, #188]	@ (8016de0 <MoblePalCryptoSetNewNetworkKey+0xc4>)
 8016d22:	4c30      	ldr	r4, [pc, #192]	@ (8016de4 <MoblePalCryptoSetNewNetworkKey+0xc8>)
 8016d24:	f8b3 e000 	ldrh.w	lr, [r3]
 8016d28:	2700      	movs	r7, #0
 8016d2a:	463b      	mov	r3, r7
 8016d2c:	f04f 087c 	mov.w	r8, #124	@ 0x7c
 8016d30:	b2fd      	uxtb	r5, r7
 8016d32:	fb08 fc05 	mul.w	ip, r8, r5
 8016d36:	eb04 020c 	add.w	r2, r4, ip
 8016d3a:	4575      	cmp	r5, lr
 8016d3c:	f892 6446 	ldrb.w	r6, [r2, #1094]	@ 0x446
 8016d40:	d210      	bcs.n	8016d64 <MoblePalCryptoSetNewNetworkKey+0x48>
 8016d42:	bb4e      	cbnz	r6, 8016d98 <MoblePalCryptoSetNewNetworkKey+0x7c>
 8016d44:	f892 9445 	ldrb.w	r9, [r2, #1093]	@ 0x445
 8016d48:	f1b9 0f01 	cmp.w	r9, #1
 8016d4c:	d138      	bne.n	8016dc0 <MoblePalCryptoSetNewNetworkKey+0xa4>
 8016d4e:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	@ 0x448
 8016d52:	428a      	cmp	r2, r1
 8016d54:	d134      	bne.n	8016dc0 <MoblePalCryptoSetNewNetworkKey+0xa4>
 8016d56:	4601      	mov	r1, r0
 8016d58:	4823      	ldr	r0, [pc, #140]	@ (8016de8 <MoblePalCryptoSetNewNetworkKey+0xcc>)
 8016d5a:	2210      	movs	r2, #16
 8016d5c:	4460      	add	r0, ip
 8016d5e:	f00f ff1d 	bl	8026b9c <memmove>
 8016d62:	2300      	movs	r3, #0
 8016d64:	267c      	movs	r6, #124	@ 0x7c
 8016d66:	436e      	muls	r6, r5
 8016d68:	19a2      	adds	r2, r4, r6
 8016d6a:	f892 2446 	ldrb.w	r2, [r2, #1094]	@ 0x446
 8016d6e:	431a      	orrs	r2, r3
 8016d70:	d10f      	bne.n	8016d92 <MoblePalCryptoSetNewNetworkKey+0x76>
 8016d72:	481e      	ldr	r0, [pc, #120]	@ (8016dec <MoblePalCryptoSetNewNetworkKey+0xd0>)
 8016d74:	f894 161c 	ldrb.w	r1, [r4, #1564]	@ 0x61c
 8016d78:	f106 020f 	add.w	r2, r6, #15
 8016d7c:	4402      	add	r2, r0
 8016d7e:	2310      	movs	r3, #16
 8016d80:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8016d84:	b10f      	cbz	r7, 8016d8a <MoblePalCryptoSetNewNetworkKey+0x6e>
 8016d86:	2903      	cmp	r1, #3
 8016d88:	d91e      	bls.n	8016dc8 <MoblePalCryptoSetNewNetworkKey+0xac>
 8016d8a:	3b01      	subs	r3, #1
 8016d8c:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8016d90:	d1f6      	bne.n	8016d80 <MoblePalCryptoSetNewNetworkKey+0x64>
 8016d92:	4618      	mov	r0, r3
 8016d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d98:	2e01      	cmp	r6, #1
 8016d9a:	d111      	bne.n	8016dc0 <MoblePalCryptoSetNewNetworkKey+0xa4>
 8016d9c:	f8b2 3448 	ldrh.w	r3, [r2, #1096]	@ 0x448
 8016da0:	428b      	cmp	r3, r1
 8016da2:	d10c      	bne.n	8016dbe <MoblePalCryptoSetNewNetworkKey+0xa2>
 8016da4:	4b12      	ldr	r3, [pc, #72]	@ (8016df0 <MoblePalCryptoSetNewNetworkKey+0xd4>)
 8016da6:	1e42      	subs	r2, r0, #1
 8016da8:	4463      	add	r3, ip
 8016daa:	300f      	adds	r0, #15
 8016dac:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8016db0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8016db4:	428e      	cmp	r6, r1
 8016db6:	d105      	bne.n	8016dc4 <MoblePalCryptoSetNewNetworkKey+0xa8>
 8016db8:	4282      	cmp	r2, r0
 8016dba:	d1f7      	bne.n	8016dac <MoblePalCryptoSetNewNetworkKey+0x90>
 8016dbc:	e7d1      	b.n	8016d62 <MoblePalCryptoSetNewNetworkKey+0x46>
 8016dbe:	4633      	mov	r3, r6
 8016dc0:	3701      	adds	r7, #1
 8016dc2:	e7b5      	b.n	8016d30 <MoblePalCryptoSetNewNetworkKey+0x14>
 8016dc4:	2303      	movs	r3, #3
 8016dc6:	e7cd      	b.n	8016d64 <MoblePalCryptoSetNewNetworkKey+0x48>
 8016dc8:	237c      	movs	r3, #124	@ 0x7c
 8016dca:	fb03 4405 	mla	r4, r3, r5, r4
 8016dce:	2301      	movs	r3, #1
 8016dd0:	f884 3446 	strb.w	r3, [r4, #1094]	@ 0x446
 8016dd4:	4430      	add	r0, r6
 8016dd6:	2100      	movs	r1, #0
 8016dd8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ddc:	f7ff bf4a 	b.w	8016c74 <MoblePalCryptoUpdateNetKeyVectors>
 8016de0:	20000008 	.word	0x20000008
 8016de4:	2000141c 	.word	0x2000141c
 8016de8:	20001850 	.word	0x20001850
 8016dec:	20001840 	.word	0x20001840
 8016df0:	2000184f 	.word	0x2000184f

08016df4 <MoblePalCryptoSetNetworkKey>:
 8016df4:	4b2d      	ldr	r3, [pc, #180]	@ (8016eac <MoblePalCryptoSetNetworkKey+0xb8>)
 8016df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	4c2c      	ldr	r4, [pc, #176]	@ (8016eb0 <MoblePalCryptoSetNetworkKey+0xbc>)
 8016dfe:	881e      	ldrh	r6, [r3, #0]
 8016e00:	f04f 087c 	mov.w	r8, #124	@ 0x7c
 8016e04:	4613      	mov	r3, r2
 8016e06:	b2d5      	uxtb	r5, r2
 8016e08:	fb08 fe05 	mul.w	lr, r8, r5
 8016e0c:	eb04 0c0e 	add.w	ip, r4, lr
 8016e10:	42b5      	cmp	r5, r6
 8016e12:	f89c 7445 	ldrb.w	r7, [ip, #1093]	@ 0x445
 8016e16:	d20c      	bcs.n	8016e32 <MoblePalCryptoSetNetworkKey+0x3e>
 8016e18:	bb27      	cbnz	r7, 8016e64 <MoblePalCryptoSetNetworkKey+0x70>
 8016e1a:	f8ac 1448 	strh.w	r1, [ip, #1096]	@ 0x448
 8016e1e:	4601      	mov	r1, r0
 8016e20:	4824      	ldr	r0, [pc, #144]	@ (8016eb4 <MoblePalCryptoSetNetworkKey+0xc0>)
 8016e22:	2210      	movs	r2, #16
 8016e24:	4470      	add	r0, lr
 8016e26:	f00f feb9 	bl	8026b9c <memmove>
 8016e2a:	1c6b      	adds	r3, r5, #1
 8016e2c:	f884 361c 	strb.w	r3, [r4, #1564]	@ 0x61c
 8016e30:	2300      	movs	r3, #0
 8016e32:	217c      	movs	r1, #124	@ 0x7c
 8016e34:	4369      	muls	r1, r5
 8016e36:	1862      	adds	r2, r4, r1
 8016e38:	f892 2445 	ldrb.w	r2, [r2, #1093]	@ 0x445
 8016e3c:	431a      	orrs	r2, r3
 8016e3e:	d10e      	bne.n	8016e5e <MoblePalCryptoSetNetworkKey+0x6a>
 8016e40:	f894 361c 	ldrb.w	r3, [r4, #1564]	@ 0x61c
 8016e44:	42b3      	cmp	r3, r6
 8016e46:	d825      	bhi.n	8016e94 <MoblePalCryptoSetNetworkKey+0xa0>
 8016e48:	481a      	ldr	r0, [pc, #104]	@ (8016eb4 <MoblePalCryptoSetNetworkKey+0xc0>)
 8016e4a:	4408      	add	r0, r1
 8016e4c:	4602      	mov	r2, r0
 8016e4e:	2310      	movs	r3, #16
 8016e50:	f812 1b01 	ldrb.w	r1, [r2], #1
 8016e54:	bb01      	cbnz	r1, 8016e98 <MoblePalCryptoSetNetworkKey+0xa4>
 8016e56:	3b01      	subs	r3, #1
 8016e58:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8016e5c:	d1f8      	bne.n	8016e50 <MoblePalCryptoSetNetworkKey+0x5c>
 8016e5e:	4618      	mov	r0, r3
 8016e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e64:	2f01      	cmp	r7, #1
 8016e66:	d111      	bne.n	8016e8c <MoblePalCryptoSetNetworkKey+0x98>
 8016e68:	f8bc 3448 	ldrh.w	r3, [ip, #1096]	@ 0x448
 8016e6c:	428b      	cmp	r3, r1
 8016e6e:	d10c      	bne.n	8016e8a <MoblePalCryptoSetNetworkKey+0x96>
 8016e70:	4b10      	ldr	r3, [pc, #64]	@ (8016eb4 <MoblePalCryptoSetNetworkKey+0xc0>)
 8016e72:	1e42      	subs	r2, r0, #1
 8016e74:	4473      	add	r3, lr
 8016e76:	300f      	adds	r0, #15
 8016e78:	f813 1b01 	ldrb.w	r1, [r3], #1
 8016e7c:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8016e80:	428f      	cmp	r7, r1
 8016e82:	d105      	bne.n	8016e90 <MoblePalCryptoSetNetworkKey+0x9c>
 8016e84:	4282      	cmp	r2, r0
 8016e86:	d1f7      	bne.n	8016e78 <MoblePalCryptoSetNetworkKey+0x84>
 8016e88:	e7d2      	b.n	8016e30 <MoblePalCryptoSetNetworkKey+0x3c>
 8016e8a:	463b      	mov	r3, r7
 8016e8c:	3201      	adds	r2, #1
 8016e8e:	e7ba      	b.n	8016e06 <MoblePalCryptoSetNetworkKey+0x12>
 8016e90:	2303      	movs	r3, #3
 8016e92:	e7ce      	b.n	8016e32 <MoblePalCryptoSetNetworkKey+0x3e>
 8016e94:	4613      	mov	r3, r2
 8016e96:	e7e2      	b.n	8016e5e <MoblePalCryptoSetNetworkKey+0x6a>
 8016e98:	237c      	movs	r3, #124	@ 0x7c
 8016e9a:	fb03 4405 	mla	r4, r3, r5, r4
 8016e9e:	2101      	movs	r1, #1
 8016ea0:	f884 1445 	strb.w	r1, [r4, #1093]	@ 0x445
 8016ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ea8:	f7ff bee4 	b.w	8016c74 <MoblePalCryptoUpdateNetKeyVectors>
 8016eac:	20000008 	.word	0x20000008
 8016eb0:	2000141c 	.word	0x2000141c
 8016eb4:	20001840 	.word	0x20001840

08016eb8 <MoblePalCryptoSetIvIndex>:
 8016eb8:	b508      	push	{r3, lr}
 8016eba:	4b05      	ldr	r3, [pc, #20]	@ (8016ed0 <MoblePalCryptoSetIvIndex+0x18>)
 8016ebc:	2101      	movs	r1, #1
 8016ebe:	f8c3 0658 	str.w	r0, [r3, #1624]	@ 0x658
 8016ec2:	f203 4024 	addw	r0, r3, #1060	@ 0x424
 8016ec6:	f7ff fed5 	bl	8016c74 <MoblePalCryptoUpdateNetKeyVectors>
 8016eca:	2000      	movs	r0, #0
 8016ecc:	bd08      	pop	{r3, pc}
 8016ece:	bf00      	nop
 8016ed0:	2000141c 	.word	0x2000141c

08016ed4 <MoblePalCryptoParseNetHdr>:
 8016ed4:	7803      	ldrb	r3, [r0, #0]
 8016ed6:	09db      	lsrs	r3, r3, #7
 8016ed8:	700b      	strb	r3, [r1, #0]
 8016eda:	7803      	ldrb	r3, [r0, #0]
 8016edc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016ee0:	704b      	strb	r3, [r1, #1]
 8016ee2:	7843      	ldrb	r3, [r0, #1]
 8016ee4:	09db      	lsrs	r3, r3, #7
 8016ee6:	708b      	strb	r3, [r1, #2]
 8016ee8:	7843      	ldrb	r3, [r0, #1]
 8016eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016eee:	70cb      	strb	r3, [r1, #3]
 8016ef0:	78c3      	ldrb	r3, [r0, #3]
 8016ef2:	7882      	ldrb	r2, [r0, #2]
 8016ef4:	021b      	lsls	r3, r3, #8
 8016ef6:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8016efa:	7902      	ldrb	r2, [r0, #4]
 8016efc:	4413      	add	r3, r2
 8016efe:	604b      	str	r3, [r1, #4]
 8016f00:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 8016f04:	810b      	strh	r3, [r1, #8]
 8016f06:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 8016f0a:	ba5b      	rev16	r3, r3
 8016f0c:	ba52      	rev16	r2, r2
 8016f0e:	810b      	strh	r3, [r1, #8]
 8016f10:	814a      	strh	r2, [r1, #10]
 8016f12:	4770      	bx	lr

08016f14 <MoblePalCryptoAuthenticateSecureNetworkBeacon>:
 8016f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f18:	460c      	mov	r4, r1
 8016f1a:	b08a      	sub	sp, #40	@ 0x28
 8016f1c:	4617      	mov	r7, r2
 8016f1e:	4698      	mov	r8, r3
 8016f20:	4605      	mov	r5, r0
 8016f22:	2800      	cmp	r0, #0
 8016f24:	d035      	beq.n	8016f92 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x7e>
 8016f26:	2900      	cmp	r1, #0
 8016f28:	d033      	beq.n	8016f92 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x7e>
 8016f2a:	f8d1 0001 	ldr.w	r0, [r1, #1]
 8016f2e:	f8d1 1005 	ldr.w	r1, [r1, #5]
 8016f32:	466e      	mov	r6, sp
 8016f34:	c603      	stmia	r6!, {r0, r1}
 8016f36:	2108      	movs	r1, #8
 8016f38:	4668      	mov	r0, sp
 8016f3a:	f7ff fbb9 	bl	80166b0 <MoblePalCryptoGetSecurityKeys_Beacon>
 8016f3e:	4601      	mov	r1, r0
 8016f40:	b930      	cbnz	r0, 8016f50 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x3c>
 8016f42:	4b15      	ldr	r3, [pc, #84]	@ (8016f98 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x84>)
 8016f44:	4a15      	ldr	r2, [pc, #84]	@ (8016f9c <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x88>)
 8016f46:	4816      	ldr	r0, [pc, #88]	@ (8016fa0 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x8c>)
 8016f48:	f640 111a 	movw	r1, #2330	@ 0x91a
 8016f4c:	f00e fea2 	bl	8025c94 <__assert_func>
 8016f50:	f1b8 0f00 	cmp.w	r8, #0
 8016f54:	d018      	beq.n	8016f88 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x74>
 8016f56:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8016f5a:	b91b      	cbnz	r3, 8016f64 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x50>
 8016f5c:	2002      	movs	r0, #2
 8016f5e:	b00a      	add	sp, #40	@ 0x28
 8016f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f64:	3110      	adds	r1, #16
 8016f66:	a802      	add	r0, sp, #8
 8016f68:	f7ff fde6 	bl	8016b38 <MoblePalCryptoBeaconKey>
 8016f6c:	2801      	cmp	r0, #1
 8016f6e:	d8f5      	bhi.n	8016f5c <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x48>
 8016f70:	ab06      	add	r3, sp, #24
 8016f72:	4621      	mov	r1, r4
 8016f74:	a802      	add	r0, sp, #8
 8016f76:	463a      	mov	r2, r7
 8016f78:	f7fe fc9e 	bl	80158b8 <BAES_CmacCompute>
 8016f7c:	ab06      	add	r3, sp, #24
 8016f7e:	cb03      	ldmia	r3!, {r0, r1}
 8016f80:	6028      	str	r0, [r5, #0]
 8016f82:	6069      	str	r1, [r5, #4]
 8016f84:	2000      	movs	r0, #0
 8016f86:	e7ea      	b.n	8016f5e <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x4a>
 8016f88:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d1ea      	bne.n	8016f66 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x52>
 8016f90:	e7e4      	b.n	8016f5c <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x48>
 8016f92:	2003      	movs	r0, #3
 8016f94:	e7e3      	b.n	8016f5e <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x4a>
 8016f96:	bf00      	nop
 8016f98:	0802e5d6 	.word	0x0802e5d6
 8016f9c:	0802cbfa 	.word	0x0802cbfa
 8016fa0:	0802e5db 	.word	0x0802e5db

08016fa4 <MoblePalCryptoInitEcc>:
 8016fa4:	4b07      	ldr	r3, [pc, #28]	@ (8016fc4 <MoblePalCryptoInitEcc+0x20>)
 8016fa6:	f100 0220 	add.w	r2, r0, #32
 8016faa:	f850 1b04 	ldr.w	r1, [r0], #4
 8016fae:	f843 1b04 	str.w	r1, [r3], #4
 8016fb2:	4290      	cmp	r0, r2
 8016fb4:	d1f9      	bne.n	8016faa <MoblePalCryptoInitEcc+0x6>
 8016fb6:	4b04      	ldr	r3, [pc, #16]	@ (8016fc8 <MoblePalCryptoInitEcc+0x24>)
 8016fb8:	2201      	movs	r2, #1
 8016fba:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
 8016fbe:	2000      	movs	r0, #0
 8016fc0:	4770      	bx	lr
 8016fc2:	bf00      	nop
 8016fc4:	2000181f 	.word	0x2000181f
 8016fc8:	2000141c 	.word	0x2000141c

08016fcc <MoblePalCryptoGetEccGenSecret>:
 8016fcc:	b510      	push	{r4, lr}
 8016fce:	4604      	mov	r4, r0
 8016fd0:	4807      	ldr	r0, [pc, #28]	@ (8016ff0 <MoblePalCryptoGetEccGenSecret+0x24>)
 8016fd2:	4621      	mov	r1, r4
 8016fd4:	f7fe ffa6 	bl	8015f24 <BPKA_StartDhKey>
 8016fd8:	2800      	cmp	r0, #0
 8016fda:	d1f9      	bne.n	8016fd0 <MoblePalCryptoGetEccGenSecret+0x4>
 8016fdc:	f7ff f88e 	bl	80160fc <BPKA_Status>
 8016fe0:	2800      	cmp	r0, #0
 8016fe2:	d1fb      	bne.n	8016fdc <MoblePalCryptoGetEccGenSecret+0x10>
 8016fe4:	4803      	ldr	r0, [pc, #12]	@ (8016ff4 <MoblePalCryptoGetEccGenSecret+0x28>)
 8016fe6:	f7fe fbd9 	bl	801579c <BPKA_ReadDhKey>
 8016fea:	4802      	ldr	r0, [pc, #8]	@ (8016ff4 <MoblePalCryptoGetEccGenSecret+0x28>)
 8016fec:	bd10      	pop	{r4, pc}
 8016fee:	bf00      	nop
 8016ff0:	2000181f 	.word	0x2000181f
 8016ff4:	20001a7b 	.word	0x20001a7b

08016ff8 <MoblePalCryptoFreeEcc>:
 8016ff8:	4b04      	ldr	r3, [pc, #16]	@ (801700c <MoblePalCryptoFreeEcc+0x14>)
 8016ffa:	f893 2402 	ldrb.w	r2, [r3, #1026]	@ 0x402
 8016ffe:	b11a      	cbz	r2, 8017008 <MoblePalCryptoFreeEcc+0x10>
 8017000:	2000      	movs	r0, #0
 8017002:	f883 0402 	strb.w	r0, [r3, #1026]	@ 0x402
 8017006:	4770      	bx	lr
 8017008:	2002      	movs	r0, #2
 801700a:	4770      	bx	lr
 801700c:	2000141c 	.word	0x2000141c

08017010 <MoblePalCrypto_PK_convert_le>:
 8017010:	b510      	push	{r4, lr}
 8017012:	f100 0320 	add.w	r3, r0, #32
 8017016:	1e4a      	subs	r2, r1, #1
 8017018:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801701c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017020:	4283      	cmp	r3, r0
 8017022:	d1f9      	bne.n	8017018 <MoblePalCrypto_PK_convert_le+0x8>
 8017024:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8017028:	311f      	adds	r1, #31
 801702a:	3320      	adds	r3, #32
 801702c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 8017030:	f801 0f01 	strb.w	r0, [r1, #1]!
 8017034:	429a      	cmp	r2, r3
 8017036:	d1f9      	bne.n	801702c <MoblePalCrypto_PK_convert_le+0x1c>
 8017038:	bd10      	pop	{r4, pc}
	...

0801703c <MoblePalCryptoGetAppKeyIndexes>:
 801703c:	f8df c074 	ldr.w	ip, [pc, #116]	@ 80170b4 <MoblePalCryptoGetAppKeyIndexes+0x78>
 8017040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017044:	4606      	mov	r6, r0
 8017046:	f8df e070 	ldr.w	lr, [pc, #112]	@ 80170b8 <MoblePalCryptoGetAppKeyIndexes+0x7c>
 801704a:	f8bc 0000 	ldrh.w	r0, [ip]
 801704e:	2300      	movs	r3, #0
 8017050:	277c      	movs	r7, #124	@ 0x7c
 8017052:	b2dc      	uxtb	r4, r3
 8017054:	4284      	cmp	r4, r0
 8017056:	d302      	bcc.n	801705e <MoblePalCryptoGetAppKeyIndexes+0x22>
 8017058:	2300      	movs	r3, #0
 801705a:	2002      	movs	r0, #2
 801705c:	e025      	b.n	80170aa <MoblePalCryptoGetAppKeyIndexes+0x6e>
 801705e:	fb07 e404 	mla	r4, r7, r4, lr
 8017062:	f8b4 5448 	ldrh.w	r5, [r4, #1096]	@ 0x448
 8017066:	4295      	cmp	r5, r2
 8017068:	d122      	bne.n	80170b0 <MoblePalCryptoGetAppKeyIndexes+0x74>
 801706a:	f894 4445 	ldrb.w	r4, [r4, #1093]	@ 0x445
 801706e:	2c01      	cmp	r4, #1
 8017070:	d11e      	bne.n	80170b0 <MoblePalCryptoGetAppKeyIndexes+0x74>
 8017072:	2400      	movs	r4, #0
 8017074:	4623      	mov	r3, r4
 8017076:	2002      	movs	r0, #2
 8017078:	f04f 092c 	mov.w	r9, #44	@ 0x2c
 801707c:	e010      	b.n	80170a0 <MoblePalCryptoGetAppKeyIndexes+0x64>
 801707e:	fb09 e505 	mla	r5, r9, r5, lr
 8017082:	f8b5 75be 	ldrh.w	r7, [r5, #1470]	@ 0x5be
 8017086:	4297      	cmp	r7, r2
 8017088:	d109      	bne.n	801709e <MoblePalCryptoGetAppKeyIndexes+0x62>
 801708a:	f895 75c0 	ldrb.w	r7, [r5, #1472]	@ 0x5c0
 801708e:	b137      	cbz	r7, 801709e <MoblePalCryptoGetAppKeyIndexes+0x62>
 8017090:	f8b5 05ba 	ldrh.w	r0, [r5, #1466]	@ 0x5ba
 8017094:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
 8017098:	3301      	adds	r3, #1
 801709a:	b29b      	uxth	r3, r3
 801709c:	2000      	movs	r0, #0
 801709e:	3401      	adds	r4, #1
 80170a0:	f8bc 8008 	ldrh.w	r8, [ip, #8]
 80170a4:	b2e5      	uxtb	r5, r4
 80170a6:	4545      	cmp	r5, r8
 80170a8:	d3e9      	bcc.n	801707e <MoblePalCryptoGetAppKeyIndexes+0x42>
 80170aa:	800b      	strh	r3, [r1, #0]
 80170ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170b0:	3301      	adds	r3, #1
 80170b2:	e7ce      	b.n	8017052 <MoblePalCryptoGetAppKeyIndexes+0x16>
 80170b4:	20000008 	.word	0x20000008
 80170b8:	2000141c 	.word	0x2000141c

080170bc <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>:
 80170bc:	4b0c      	ldr	r3, [pc, #48]	@ (80170f0 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x34>)
 80170be:	b570      	push	{r4, r5, r6, lr}
 80170c0:	8919      	ldrh	r1, [r3, #8]
 80170c2:	4d0c      	ldr	r5, [pc, #48]	@ (80170f4 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x38>)
 80170c4:	2200      	movs	r2, #0
 80170c6:	262c      	movs	r6, #44	@ 0x2c
 80170c8:	b2d3      	uxtb	r3, r2
 80170ca:	428b      	cmp	r3, r1
 80170cc:	d301      	bcc.n	80170d2 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x16>
 80170ce:	2000      	movs	r0, #0
 80170d0:	e00a      	b.n	80170e8 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x2c>
 80170d2:	fb06 5303 	mla	r3, r6, r3, r5
 80170d6:	f8b3 45ba 	ldrh.w	r4, [r3, #1466]	@ 0x5ba
 80170da:	4284      	cmp	r4, r0
 80170dc:	d105      	bne.n	80170ea <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x2e>
 80170de:	f893 45c0 	ldrb.w	r4, [r3, #1472]	@ 0x5c0
 80170e2:	b114      	cbz	r4, 80170ea <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x2e>
 80170e4:	f8b3 05be 	ldrh.w	r0, [r3, #1470]	@ 0x5be
 80170e8:	bd70      	pop	{r4, r5, r6, pc}
 80170ea:	3201      	adds	r2, #1
 80170ec:	e7ec      	b.n	80170c8 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0xc>
 80170ee:	bf00      	nop
 80170f0:	20000008 	.word	0x20000008
 80170f4:	2000141c 	.word	0x2000141c

080170f8 <MoblePalCryptoModelAppBindDelete>:
 80170f8:	4b2b      	ldr	r3, [pc, #172]	@ (80171a8 <MoblePalCryptoModelAppBindDelete+0xb0>)
 80170fa:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 80171b0 <MoblePalCryptoModelAppBindDelete+0xb8>
 80170fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017102:	4d2a      	ldr	r5, [pc, #168]	@ (80171ac <MoblePalCryptoModelAppBindDelete+0xb4>)
 8017104:	891f      	ldrh	r7, [r3, #8]
 8017106:	2100      	movs	r1, #0
 8017108:	4604      	mov	r4, r0
 801710a:	f04f 0e2c 	mov.w	lr, #44	@ 0x2c
 801710e:	4608      	mov	r0, r1
 8017110:	f1a5 06ac 	sub.w	r6, r5, #172	@ 0xac
 8017114:	2300      	movs	r3, #0
 8017116:	e014      	b.n	8017142 <MoblePalCryptoModelAppBindDelete+0x4a>
 8017118:	b97a      	cbnz	r2, 801713a <MoblePalCryptoModelAppBindDelete+0x42>
 801711a:	f833 b00a 	ldrh.w	fp, [r3, sl]
 801711e:	45a3      	cmp	fp, r4
 8017120:	d040      	beq.n	80171a4 <MoblePalCryptoModelAppBindDelete+0xac>
 8017122:	f109 0901 	add.w	r9, r9, #1
 8017126:	f1b9 0f0b 	cmp.w	r9, #11
 801712a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 801712e:	d11e      	bne.n	801716e <MoblePalCryptoModelAppBindDelete+0x76>
 8017130:	3101      	adds	r1, #1
 8017132:	2905      	cmp	r1, #5
 8017134:	d1ee      	bne.n	8017114 <MoblePalCryptoModelAppBindDelete+0x1c>
 8017136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801713a:	2002      	movs	r0, #2
 801713c:	e7f1      	b.n	8017122 <MoblePalCryptoModelAppBindDelete+0x2a>
 801713e:	3301      	adds	r3, #1
 8017140:	2003      	movs	r0, #3
 8017142:	fa5f f883 	uxtb.w	r8, r3
 8017146:	45b8      	cmp	r8, r7
 8017148:	d2f2      	bcs.n	8017130 <MoblePalCryptoModelAppBindDelete+0x38>
 801714a:	fb0e c908 	mla	r9, lr, r8, ip
 801714e:	f899 25b8 	ldrb.w	r2, [r9, #1464]	@ 0x5b8
 8017152:	2a00      	cmp	r2, #0
 8017154:	d1f3      	bne.n	801713e <MoblePalCryptoModelAppBindDelete+0x46>
 8017156:	f8b9 95ba 	ldrh.w	r9, [r9, #1466]	@ 0x5ba
 801715a:	45a1      	cmp	r9, r4
 801715c:	d1ef      	bne.n	801713e <MoblePalCryptoModelAppBindDelete+0x46>
 801715e:	f44f 7339 	mov.w	r3, #740	@ 0x2e4
 8017162:	fb03 8301 	mla	r3, r3, r1, r8
 8017166:	442b      	add	r3, r5
 8017168:	4691      	mov	r9, r2
 801716a:	f108 0aa0 	add.w	sl, r8, #160	@ 0xa0
 801716e:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 8017172:	2a01      	cmp	r2, #1
 8017174:	d1d0      	bne.n	8017118 <MoblePalCryptoModelAppBindDelete+0x20>
 8017176:	f44f 7339 	mov.w	r3, #740	@ 0x2e4
 801717a:	2238      	movs	r2, #56	@ 0x38
 801717c:	434b      	muls	r3, r1
 801717e:	fb02 3309 	mla	r3, r2, r9, r3
 8017182:	4433      	add	r3, r6
 8017184:	4443      	add	r3, r8
 8017186:	2200      	movs	r2, #0
 8017188:	f883 2152 	strb.w	r2, [r3, #338]	@ 0x152
 801718c:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 8017190:	434b      	muls	r3, r1
 8017192:	201c      	movs	r0, #28
 8017194:	fb00 3309 	mla	r3, r0, r9, r3
 8017198:	4443      	add	r3, r8
 801719a:	3350      	adds	r3, #80	@ 0x50
 801719c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80171a0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80171a4:	4610      	mov	r0, r2
 80171a6:	e7c3      	b.n	8017130 <MoblePalCryptoModelAppBindDelete+0x38>
 80171a8:	20000008 	.word	0x20000008
 80171ac:	200003d0 	.word	0x200003d0
 80171b0:	2000141c 	.word	0x2000141c

080171b4 <MoblePalCryptoDeleteAppKey>:
 80171b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171b6:	4604      	mov	r4, r0
 80171b8:	481b      	ldr	r0, [pc, #108]	@ (8017228 <MoblePalCryptoDeleteAppKey+0x74>)
 80171ba:	4d1c      	ldr	r5, [pc, #112]	@ (801722c <MoblePalCryptoDeleteAppKey+0x78>)
 80171bc:	8806      	ldrh	r6, [r0, #0]
 80171be:	2300      	movs	r3, #0
 80171c0:	f04f 0c7c 	mov.w	ip, #124	@ 0x7c
 80171c4:	b2da      	uxtb	r2, r3
 80171c6:	42b2      	cmp	r2, r6
 80171c8:	d20c      	bcs.n	80171e4 <MoblePalCryptoDeleteAppKey+0x30>
 80171ca:	fb0c 5202 	mla	r2, ip, r2, r5
 80171ce:	3301      	adds	r3, #1
 80171d0:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	@ 0x448
 80171d4:	428a      	cmp	r2, r1
 80171d6:	d1f5      	bne.n	80171c4 <MoblePalCryptoDeleteAppKey+0x10>
 80171d8:	8901      	ldrh	r1, [r0, #8]
 80171da:	2300      	movs	r3, #0
 80171dc:	262c      	movs	r6, #44	@ 0x2c
 80171de:	b2d8      	uxtb	r0, r3
 80171e0:	4288      	cmp	r0, r1
 80171e2:	d301      	bcc.n	80171e8 <MoblePalCryptoDeleteAppKey+0x34>
 80171e4:	2001      	movs	r0, #1
 80171e6:	e01d      	b.n	8017224 <MoblePalCryptoDeleteAppKey+0x70>
 80171e8:	4370      	muls	r0, r6
 80171ea:	182a      	adds	r2, r5, r0
 80171ec:	3301      	adds	r3, #1
 80171ee:	f8b2 75ba 	ldrh.w	r7, [r2, #1466]	@ 0x5ba
 80171f2:	42a7      	cmp	r7, r4
 80171f4:	d1f3      	bne.n	80171de <MoblePalCryptoDeleteAppKey+0x2a>
 80171f6:	f892 35b8 	ldrb.w	r3, [r2, #1464]	@ 0x5b8
 80171fa:	2b01      	cmp	r3, #1
 80171fc:	d10e      	bne.n	801721c <MoblePalCryptoDeleteAppKey+0x68>
 80171fe:	4b0c      	ldr	r3, [pc, #48]	@ (8017230 <MoblePalCryptoDeleteAppKey+0x7c>)
 8017200:	2100      	movs	r1, #0
 8017202:	f882 15b8 	strb.w	r1, [r2, #1464]	@ 0x5b8
 8017206:	f882 15c0 	strb.w	r1, [r2, #1472]	@ 0x5c0
 801720a:	4418      	add	r0, r3
 801720c:	2210      	movs	r2, #16
 801720e:	f00f fcdf 	bl	8026bd0 <memset>
 8017212:	f895 361d 	ldrb.w	r3, [r5, #1565]	@ 0x61d
 8017216:	3b01      	subs	r3, #1
 8017218:	f885 361d 	strb.w	r3, [r5, #1565]	@ 0x61d
 801721c:	4620      	mov	r0, r4
 801721e:	f7ff ff6b 	bl	80170f8 <MoblePalCryptoModelAppBindDelete>
 8017222:	2000      	movs	r0, #0
 8017224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017226:	bf00      	nop
 8017228:	20000008 	.word	0x20000008
 801722c:	2000141c 	.word	0x2000141c
 8017230:	200019b4 	.word	0x200019b4

08017234 <MoblePalCryptoDeleteNetworkKey>:
 8017234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017238:	4f2a      	ldr	r7, [pc, #168]	@ (80172e4 <MoblePalCryptoDeleteNetworkKey+0xb0>)
 801723a:	4d2b      	ldr	r5, [pc, #172]	@ (80172e8 <MoblePalCryptoDeleteNetworkKey+0xb4>)
 801723c:	8839      	ldrh	r1, [r7, #0]
 801723e:	f895 c61c 	ldrb.w	ip, [r5, #1564]	@ 0x61c
 8017242:	2200      	movs	r2, #0
 8017244:	4604      	mov	r4, r0
 8017246:	4613      	mov	r3, r2
 8017248:	f04f 0e7c 	mov.w	lr, #124	@ 0x7c
 801724c:	b2d0      	uxtb	r0, r2
 801724e:	4288      	cmp	r0, r1
 8017250:	d303      	bcc.n	801725a <MoblePalCryptoDeleteNetworkKey+0x26>
 8017252:	b313      	cbz	r3, 801729a <MoblePalCryptoDeleteNetworkKey+0x66>
 8017254:	4618      	mov	r0, r3
 8017256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801725a:	fb0e f000 	mul.w	r0, lr, r0
 801725e:	182e      	adds	r6, r5, r0
 8017260:	f8b6 8448 	ldrh.w	r8, [r6, #1096]	@ 0x448
 8017264:	45a0      	cmp	r8, r4
 8017266:	d124      	bne.n	80172b2 <MoblePalCryptoDeleteNetworkKey+0x7e>
 8017268:	f896 8445 	ldrb.w	r8, [r6, #1093]	@ 0x445
 801726c:	f1b8 0f01 	cmp.w	r8, #1
 8017270:	d120      	bne.n	80172b4 <MoblePalCryptoDeleteNetworkKey+0x80>
 8017272:	f1bc 0f01 	cmp.w	ip, #1
 8017276:	d919      	bls.n	80172ac <MoblePalCryptoDeleteNetworkKey+0x78>
 8017278:	4b1c      	ldr	r3, [pc, #112]	@ (80172ec <MoblePalCryptoDeleteNetworkKey+0xb8>)
 801727a:	f04f 0800 	mov.w	r8, #0
 801727e:	4418      	add	r0, r3
 8017280:	f886 8445 	strb.w	r8, [r6, #1093]	@ 0x445
 8017284:	2210      	movs	r2, #16
 8017286:	4641      	mov	r1, r8
 8017288:	f00f fca2 	bl	8026bd0 <memset>
 801728c:	f895 361c 	ldrb.w	r3, [r5, #1564]	@ 0x61c
 8017290:	f886 8444 	strb.w	r8, [r6, #1092]	@ 0x444
 8017294:	3b01      	subs	r3, #1
 8017296:	f885 361c 	strb.w	r3, [r5, #1564]	@ 0x61c
 801729a:	2600      	movs	r6, #0
 801729c:	f04f 082c 	mov.w	r8, #44	@ 0x2c
 80172a0:	8939      	ldrh	r1, [r7, #8]
 80172a2:	b2f3      	uxtb	r3, r6
 80172a4:	428b      	cmp	r3, r1
 80172a6:	d307      	bcc.n	80172b8 <MoblePalCryptoDeleteNetworkKey+0x84>
 80172a8:	2300      	movs	r3, #0
 80172aa:	e7d3      	b.n	8017254 <MoblePalCryptoDeleteNetworkKey+0x20>
 80172ac:	d102      	bne.n	80172b4 <MoblePalCryptoDeleteNetworkKey+0x80>
 80172ae:	2303      	movs	r3, #3
 80172b0:	e7d0      	b.n	8017254 <MoblePalCryptoDeleteNetworkKey+0x20>
 80172b2:	2301      	movs	r3, #1
 80172b4:	3201      	adds	r2, #1
 80172b6:	e7c9      	b.n	801724c <MoblePalCryptoDeleteNetworkKey+0x18>
 80172b8:	fb08 5303 	mla	r3, r8, r3, r5
 80172bc:	f893 25b8 	ldrb.w	r2, [r3, #1464]	@ 0x5b8
 80172c0:	2a01      	cmp	r2, #1
 80172c2:	d10c      	bne.n	80172de <MoblePalCryptoDeleteNetworkKey+0xaa>
 80172c4:	f893 25c0 	ldrb.w	r2, [r3, #1472]	@ 0x5c0
 80172c8:	2a01      	cmp	r2, #1
 80172ca:	d108      	bne.n	80172de <MoblePalCryptoDeleteNetworkKey+0xaa>
 80172cc:	f8b3 25be 	ldrh.w	r2, [r3, #1470]	@ 0x5be
 80172d0:	42a2      	cmp	r2, r4
 80172d2:	d104      	bne.n	80172de <MoblePalCryptoDeleteNetworkKey+0xaa>
 80172d4:	f8b3 05ba 	ldrh.w	r0, [r3, #1466]	@ 0x5ba
 80172d8:	4621      	mov	r1, r4
 80172da:	f7ff ff6b 	bl	80171b4 <MoblePalCryptoDeleteAppKey>
 80172de:	3601      	adds	r6, #1
 80172e0:	e7de      	b.n	80172a0 <MoblePalCryptoDeleteNetworkKey+0x6c>
 80172e2:	bf00      	nop
 80172e4:	20000008 	.word	0x20000008
 80172e8:	2000141c 	.word	0x2000141c
 80172ec:	20001840 	.word	0x20001840

080172f0 <MoblePalCrypto_GetAppBind_VendorModel>:
 80172f0:	4b1f      	ldr	r3, [pc, #124]	@ (8017370 <MoblePalCrypto_GetAppBind_VendorModel+0x80>)
 80172f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172f4:	2400      	movs	r4, #0
 80172f6:	f44f 7639 	mov.w	r6, #740	@ 0x2e4
 80172fa:	fb06 f504 	mul.w	r5, r6, r4
 80172fe:	5aef      	ldrh	r7, [r5, r3]
 8017300:	4287      	cmp	r7, r0
 8017302:	d131      	bne.n	8017368 <MoblePalCrypto_GetAppBind_VendorModel+0x78>
 8017304:	442b      	add	r3, r5
 8017306:	2000      	movs	r0, #0
 8017308:	f893 5099 	ldrb.w	r5, [r3, #153]	@ 0x99
 801730c:	2d01      	cmp	r5, #1
 801730e:	d125      	bne.n	801735c <MoblePalCrypto_GetAppBind_VendorModel+0x6c>
 8017310:	4b18      	ldr	r3, [pc, #96]	@ (8017374 <MoblePalCrypto_GetAppBind_VendorModel+0x84>)
 8017312:	4e19      	ldr	r6, [pc, #100]	@ (8017378 <MoblePalCrypto_GetAppBind_VendorModel+0x88>)
 8017314:	f8b3 e008 	ldrh.w	lr, [r3, #8]
 8017318:	f44f 7339 	mov.w	r3, #740	@ 0x2e4
 801731c:	4363      	muls	r3, r4
 801731e:	2738      	movs	r7, #56	@ 0x38
 8017320:	fb07 3300 	mla	r3, r7, r0, r3
 8017324:	2500      	movs	r5, #0
 8017326:	4433      	add	r3, r6
 8017328:	b2ef      	uxtb	r7, r5
 801732a:	4577      	cmp	r7, lr
 801732c:	d215      	bcs.n	801735a <MoblePalCrypto_GetAppBind_VendorModel+0x6a>
 801732e:	eb03 0c07 	add.w	ip, r3, r7
 8017332:	3501      	adds	r5, #1
 8017334:	f89c c152 	ldrb.w	ip, [ip, #338]	@ 0x152
 8017338:	f1bc 0f01 	cmp.w	ip, #1
 801733c:	d1f4      	bne.n	8017328 <MoblePalCrypto_GetAppBind_VendorModel+0x38>
 801733e:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 8017342:	4363      	muls	r3, r4
 8017344:	241c      	movs	r4, #28
 8017346:	fb04 3300 	mla	r3, r4, r0, r3
 801734a:	443b      	add	r3, r7
 801734c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8017350:	f8b3 314c 	ldrh.w	r3, [r3, #332]	@ 0x14c
 8017354:	800b      	strh	r3, [r1, #0]
 8017356:	f8a2 c000 	strh.w	ip, [r2]
 801735a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801735c:	3001      	adds	r0, #1
 801735e:	280b      	cmp	r0, #11
 8017360:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8017364:	d1d0      	bne.n	8017308 <MoblePalCrypto_GetAppBind_VendorModel+0x18>
 8017366:	e7f8      	b.n	801735a <MoblePalCrypto_GetAppBind_VendorModel+0x6a>
 8017368:	3401      	adds	r4, #1
 801736a:	2c05      	cmp	r4, #5
 801736c:	d1c5      	bne.n	80172fa <MoblePalCrypto_GetAppBind_VendorModel+0xa>
 801736e:	e7f4      	b.n	801735a <MoblePalCrypto_GetAppBind_VendorModel+0x6a>
 8017370:	200003d0 	.word	0x200003d0
 8017374:	20000008 	.word	0x20000008
 8017378:	20000324 	.word	0x20000324

0801737c <MoblePalCrypto_GetAppBind_SIGModel>:
 801737c:	4b1e      	ldr	r3, [pc, #120]	@ (80173f8 <MoblePalCrypto_GetAppBind_SIGModel+0x7c>)
 801737e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017380:	2400      	movs	r4, #0
 8017382:	f44f 7639 	mov.w	r6, #740	@ 0x2e4
 8017386:	fb06 f504 	mul.w	r5, r6, r4
 801738a:	5aef      	ldrh	r7, [r5, r3]
 801738c:	4287      	cmp	r7, r0
 801738e:	d12f      	bne.n	80173f0 <MoblePalCrypto_GetAppBind_SIGModel+0x74>
 8017390:	1958      	adds	r0, r3, r5
 8017392:	2500      	movs	r5, #0
 8017394:	f890 3099 	ldrb.w	r3, [r0, #153]	@ 0x99
 8017398:	bb23      	cbnz	r3, 80173e4 <MoblePalCrypto_GetAppBind_SIGModel+0x68>
 801739a:	4818      	ldr	r0, [pc, #96]	@ (80173fc <MoblePalCrypto_GetAppBind_SIGModel+0x80>)
 801739c:	4e18      	ldr	r6, [pc, #96]	@ (8017400 <MoblePalCrypto_GetAppBind_SIGModel+0x84>)
 801739e:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 80173a2:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 80173a6:	4360      	muls	r0, r4
 80173a8:	2738      	movs	r7, #56	@ 0x38
 80173aa:	fb07 0005 	mla	r0, r7, r5, r0
 80173ae:	4430      	add	r0, r6
 80173b0:	b2df      	uxtb	r7, r3
 80173b2:	4577      	cmp	r7, lr
 80173b4:	d215      	bcs.n	80173e2 <MoblePalCrypto_GetAppBind_SIGModel+0x66>
 80173b6:	eb00 0c07 	add.w	ip, r0, r7
 80173ba:	3301      	adds	r3, #1
 80173bc:	f89c c152 	ldrb.w	ip, [ip, #338]	@ 0x152
 80173c0:	f1bc 0f01 	cmp.w	ip, #1
 80173c4:	d1f4      	bne.n	80173b0 <MoblePalCrypto_GetAppBind_SIGModel+0x34>
 80173c6:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 80173ca:	4363      	muls	r3, r4
 80173cc:	201c      	movs	r0, #28
 80173ce:	fb00 3305 	mla	r3, r0, r5, r3
 80173d2:	443b      	add	r3, r7
 80173d4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80173d8:	f8b3 314c 	ldrh.w	r3, [r3, #332]	@ 0x14c
 80173dc:	800b      	strh	r3, [r1, #0]
 80173de:	f8a2 c000 	strh.w	ip, [r2]
 80173e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173e4:	3501      	adds	r5, #1
 80173e6:	2d0b      	cmp	r5, #11
 80173e8:	f100 0038 	add.w	r0, r0, #56	@ 0x38
 80173ec:	d1d2      	bne.n	8017394 <MoblePalCrypto_GetAppBind_SIGModel+0x18>
 80173ee:	e7f8      	b.n	80173e2 <MoblePalCrypto_GetAppBind_SIGModel+0x66>
 80173f0:	3401      	adds	r4, #1
 80173f2:	2c05      	cmp	r4, #5
 80173f4:	d1c7      	bne.n	8017386 <MoblePalCrypto_GetAppBind_SIGModel+0xa>
 80173f6:	e7f4      	b.n	80173e2 <MoblePalCrypto_GetAppBind_SIGModel+0x66>
 80173f8:	200003d0 	.word	0x200003d0
 80173fc:	20000008 	.word	0x20000008
 8017400:	20000324 	.word	0x20000324

08017404 <MoblePalCryptoHasAppKeyBind>:
 8017404:	4b22      	ldr	r3, [pc, #136]	@ (8017490 <MoblePalCryptoHasAppKeyBind+0x8c>)
 8017406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017408:	4604      	mov	r4, r0
 801740a:	2500      	movs	r5, #0
 801740c:	f44f 7639 	mov.w	r6, #740	@ 0x2e4
 8017410:	fb06 f005 	mul.w	r0, r6, r5
 8017414:	5ac7      	ldrh	r7, [r0, r3]
 8017416:	428f      	cmp	r7, r1
 8017418:	d134      	bne.n	8017484 <MoblePalCryptoHasAppKeyBind+0x80>
 801741a:	4403      	add	r3, r0
 801741c:	2100      	movs	r1, #0
 801741e:	2001      	movs	r0, #1
 8017420:	6f9e      	ldr	r6, [r3, #120]	@ 0x78
 8017422:	42a6      	cmp	r6, r4
 8017424:	d126      	bne.n	8017474 <MoblePalCryptoHasAppKeyBind+0x70>
 8017426:	4b1b      	ldr	r3, [pc, #108]	@ (8017494 <MoblePalCryptoHasAppKeyBind+0x90>)
 8017428:	4f1b      	ldr	r7, [pc, #108]	@ (8017498 <MoblePalCryptoHasAppKeyBind+0x94>)
 801742a:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801742e:	f44f 7439 	mov.w	r4, #740	@ 0x2e4
 8017432:	2338      	movs	r3, #56	@ 0x38
 8017434:	436c      	muls	r4, r5
 8017436:	fb03 4401 	mla	r4, r3, r1, r4
 801743a:	231c      	movs	r3, #28
 801743c:	2600      	movs	r6, #0
 801743e:	443c      	add	r4, r7
 8017440:	4359      	muls	r1, r3
 8017442:	fa5f fe86 	uxtb.w	lr, r6
 8017446:	45e6      	cmp	lr, ip
 8017448:	d300      	bcc.n	801744c <MoblePalCryptoHasAppKeyBind+0x48>
 801744a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801744c:	eb04 030e 	add.w	r3, r4, lr
 8017450:	f893 0152 	ldrb.w	r0, [r3, #338]	@ 0x152
 8017454:	2801      	cmp	r0, #1
 8017456:	d10a      	bne.n	801746e <MoblePalCryptoHasAppKeyBind+0x6a>
 8017458:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 801745c:	fb03 1305 	mla	r3, r3, r5, r1
 8017460:	4473      	add	r3, lr
 8017462:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8017466:	f8b3 314c 	ldrh.w	r3, [r3, #332]	@ 0x14c
 801746a:	4293      	cmp	r3, r2
 801746c:	d0ed      	beq.n	801744a <MoblePalCryptoHasAppKeyBind+0x46>
 801746e:	3601      	adds	r6, #1
 8017470:	2000      	movs	r0, #0
 8017472:	e7e6      	b.n	8017442 <MoblePalCryptoHasAppKeyBind+0x3e>
 8017474:	3101      	adds	r1, #1
 8017476:	290b      	cmp	r1, #11
 8017478:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 801747c:	f04f 0000 	mov.w	r0, #0
 8017480:	d1ce      	bne.n	8017420 <MoblePalCryptoHasAppKeyBind+0x1c>
 8017482:	e7e2      	b.n	801744a <MoblePalCryptoHasAppKeyBind+0x46>
 8017484:	3501      	adds	r5, #1
 8017486:	2d05      	cmp	r5, #5
 8017488:	d1c2      	bne.n	8017410 <MoblePalCryptoHasAppKeyBind+0xc>
 801748a:	2001      	movs	r0, #1
 801748c:	e7dd      	b.n	801744a <MoblePalCryptoHasAppKeyBind+0x46>
 801748e:	bf00      	nop
 8017490:	200003d0 	.word	0x200003d0
 8017494:	20000008 	.word	0x20000008
 8017498:	20000324 	.word	0x20000324

0801749c <MoblePalCryptoHasAppKeyIndex>:
 801749c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801749e:	4c17      	ldr	r4, [pc, #92]	@ (80174fc <MoblePalCryptoHasAppKeyIndex+0x60>)
 80174a0:	4d17      	ldr	r5, [pc, #92]	@ (8017500 <MoblePalCryptoHasAppKeyIndex+0x64>)
 80174a2:	8826      	ldrh	r6, [r4, #0]
 80174a4:	2300      	movs	r3, #0
 80174a6:	f04f 0c7c 	mov.w	ip, #124	@ 0x7c
 80174aa:	b2da      	uxtb	r2, r3
 80174ac:	42b2      	cmp	r2, r6
 80174ae:	d20c      	bcs.n	80174ca <MoblePalCryptoHasAppKeyIndex+0x2e>
 80174b0:	fb0c 5202 	mla	r2, ip, r2, r5
 80174b4:	3301      	adds	r3, #1
 80174b6:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	@ 0x448
 80174ba:	4282      	cmp	r2, r0
 80174bc:	d1f5      	bne.n	80174aa <MoblePalCryptoHasAppKeyIndex+0xe>
 80174be:	8926      	ldrh	r6, [r4, #8]
 80174c0:	2200      	movs	r2, #0
 80174c2:	272c      	movs	r7, #44	@ 0x2c
 80174c4:	b2d3      	uxtb	r3, r2
 80174c6:	42b3      	cmp	r3, r6
 80174c8:	d301      	bcc.n	80174ce <MoblePalCryptoHasAppKeyIndex+0x32>
 80174ca:	2001      	movs	r0, #1
 80174cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174ce:	fb07 5303 	mla	r3, r7, r3, r5
 80174d2:	f8b3 c5ba 	ldrh.w	ip, [r3, #1466]	@ 0x5ba
 80174d6:	f893 45b8 	ldrb.w	r4, [r3, #1464]	@ 0x5b8
 80174da:	458c      	cmp	ip, r1
 80174dc:	d107      	bne.n	80174ee <MoblePalCryptoHasAppKeyIndex+0x52>
 80174de:	2c01      	cmp	r4, #1
 80174e0:	d107      	bne.n	80174f2 <MoblePalCryptoHasAppKeyIndex+0x56>
 80174e2:	f8b3 35be 	ldrh.w	r3, [r3, #1470]	@ 0x5be
 80174e6:	4283      	cmp	r3, r0
 80174e8:	d103      	bne.n	80174f2 <MoblePalCryptoHasAppKeyIndex+0x56>
 80174ea:	2000      	movs	r0, #0
 80174ec:	e7ee      	b.n	80174cc <MoblePalCryptoHasAppKeyIndex+0x30>
 80174ee:	2c01      	cmp	r4, #1
 80174f0:	d001      	beq.n	80174f6 <MoblePalCryptoHasAppKeyIndex+0x5a>
 80174f2:	3201      	adds	r2, #1
 80174f4:	e7e6      	b.n	80174c4 <MoblePalCryptoHasAppKeyIndex+0x28>
 80174f6:	2003      	movs	r0, #3
 80174f8:	e7e8      	b.n	80174cc <MoblePalCryptoHasAppKeyIndex+0x30>
 80174fa:	bf00      	nop
 80174fc:	20000008 	.word	0x20000008
 8017500:	2000141c 	.word	0x2000141c

08017504 <BnrgmPalCryptoMatchAid>:
 8017504:	4b18      	ldr	r3, [pc, #96]	@ (8017568 <BnrgmPalCryptoMatchAid+0x64>)
 8017506:	b570      	push	{r4, r5, r6, lr}
 8017508:	891e      	ldrh	r6, [r3, #8]
 801750a:	4b18      	ldr	r3, [pc, #96]	@ (801756c <BnrgmPalCryptoMatchAid+0x68>)
 801750c:	2400      	movs	r4, #0
 801750e:	b2a5      	uxth	r5, r4
 8017510:	42ae      	cmp	r6, r5
 8017512:	7802      	ldrb	r2, [r0, #0]
 8017514:	d805      	bhi.n	8017522 <BnrgmPalCryptoMatchAid+0x1e>
 8017516:	bb22      	cbnz	r2, 8017562 <BnrgmPalCryptoMatchAid+0x5e>
 8017518:	7900      	ldrb	r0, [r0, #4]
 801751a:	fab0 f080 	clz	r0, r0
 801751e:	0940      	lsrs	r0, r0, #5
 8017520:	bd70      	pop	{r4, r5, r6, pc}
 8017522:	f893 5194 	ldrb.w	r5, [r3, #404]	@ 0x194
 8017526:	b155      	cbz	r5, 801753e <BnrgmPalCryptoMatchAid+0x3a>
 8017528:	f893 5198 	ldrb.w	r5, [r3, #408]	@ 0x198
 801752c:	428d      	cmp	r5, r1
 801752e:	d106      	bne.n	801753e <BnrgmPalCryptoMatchAid+0x3a>
 8017530:	f893 519c 	ldrb.w	r5, [r3, #412]	@ 0x19c
 8017534:	b11d      	cbz	r5, 801753e <BnrgmPalCryptoMatchAid+0x3a>
 8017536:	1885      	adds	r5, r0, r2
 8017538:	3201      	adds	r2, #1
 801753a:	706c      	strb	r4, [r5, #1]
 801753c:	7002      	strb	r2, [r0, #0]
 801753e:	f893 2195 	ldrb.w	r2, [r3, #405]	@ 0x195
 8017542:	b15a      	cbz	r2, 801755c <BnrgmPalCryptoMatchAid+0x58>
 8017544:	f893 2199 	ldrb.w	r2, [r3, #409]	@ 0x199
 8017548:	428a      	cmp	r2, r1
 801754a:	d107      	bne.n	801755c <BnrgmPalCryptoMatchAid+0x58>
 801754c:	f893 219c 	ldrb.w	r2, [r3, #412]	@ 0x19c
 8017550:	b122      	cbz	r2, 801755c <BnrgmPalCryptoMatchAid+0x58>
 8017552:	7902      	ldrb	r2, [r0, #4]
 8017554:	1885      	adds	r5, r0, r2
 8017556:	3201      	adds	r2, #1
 8017558:	716c      	strb	r4, [r5, #5]
 801755a:	7102      	strb	r2, [r0, #4]
 801755c:	3401      	adds	r4, #1
 801755e:	332c      	adds	r3, #44	@ 0x2c
 8017560:	e7d5      	b.n	801750e <BnrgmPalCryptoMatchAid+0xa>
 8017562:	2000      	movs	r0, #0
 8017564:	e7dc      	b.n	8017520 <BnrgmPalCryptoMatchAid+0x1c>
 8017566:	bf00      	nop
 8017568:	20000008 	.word	0x20000008
 801756c:	20001840 	.word	0x20001840

08017570 <BnrgmPalCryptoMatchNid>:
 8017570:	4a2a      	ldr	r2, [pc, #168]	@ (801761c <BnrgmPalCryptoMatchNid+0xac>)
 8017572:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017574:	8815      	ldrh	r5, [r2, #0]
 8017576:	4a2a      	ldr	r2, [pc, #168]	@ (8017620 <BnrgmPalCryptoMatchNid+0xb0>)
 8017578:	4603      	mov	r3, r0
 801757a:	2000      	movs	r0, #0
 801757c:	b284      	uxth	r4, r0
 801757e:	42a5      	cmp	r5, r4
 8017580:	d82e      	bhi.n	80175e0 <BnrgmPalCryptoMatchNid+0x70>
 8017582:	4c28      	ldr	r4, [pc, #160]	@ (8017624 <BnrgmPalCryptoMatchNid+0xb4>)
 8017584:	2200      	movs	r2, #0
 8017586:	f2a4 662c 	subw	r6, r4, #1580	@ 0x62c
 801758a:	277c      	movs	r7, #124	@ 0x7c
 801758c:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8017590:	b1dd      	cbz	r5, 80175ca <BnrgmPalCryptoMatchNid+0x5a>
 8017592:	f895 0040 	ldrb.w	r0, [r5, #64]	@ 0x40
 8017596:	b1a0      	cbz	r0, 80175c2 <BnrgmPalCryptoMatchNid+0x52>
 8017598:	4288      	cmp	r0, r1
 801759a:	d106      	bne.n	80175aa <BnrgmPalCryptoMatchNid+0x3a>
 801759c:	7a18      	ldrb	r0, [r3, #8]
 801759e:	eb03 0c00 	add.w	ip, r3, r0
 80175a2:	3001      	adds	r0, #1
 80175a4:	f88c 2009 	strb.w	r2, [ip, #9]
 80175a8:	7218      	strb	r0, [r3, #8]
 80175aa:	f895 0042 	ldrb.w	r0, [r5, #66]	@ 0x42
 80175ae:	fb07 6000 	mla	r0, r7, r0, r6
 80175b2:	f890 0446 	ldrb.w	r0, [r0, #1094]	@ 0x446
 80175b6:	b120      	cbz	r0, 80175c2 <BnrgmPalCryptoMatchNid+0x52>
 80175b8:	7cd8      	ldrb	r0, [r3, #19]
 80175ba:	181d      	adds	r5, r3, r0
 80175bc:	3001      	adds	r0, #1
 80175be:	752a      	strb	r2, [r5, #20]
 80175c0:	74d8      	strb	r0, [r3, #19]
 80175c2:	3201      	adds	r2, #1
 80175c4:	b2d2      	uxtb	r2, r2
 80175c6:	2a0a      	cmp	r2, #10
 80175c8:	d1e0      	bne.n	801758c <BnrgmPalCryptoMatchNid+0x1c>
 80175ca:	7818      	ldrb	r0, [r3, #0]
 80175cc:	bb18      	cbnz	r0, 8017616 <BnrgmPalCryptoMatchNid+0xa6>
 80175ce:	791a      	ldrb	r2, [r3, #4]
 80175d0:	b92a      	cbnz	r2, 80175de <BnrgmPalCryptoMatchNid+0x6e>
 80175d2:	7a1a      	ldrb	r2, [r3, #8]
 80175d4:	b91a      	cbnz	r2, 80175de <BnrgmPalCryptoMatchNid+0x6e>
 80175d6:	7cd8      	ldrb	r0, [r3, #19]
 80175d8:	fab0 f080 	clz	r0, r0
 80175dc:	0940      	lsrs	r0, r0, #5
 80175de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175e0:	f892 4021 	ldrb.w	r4, [r2, #33]	@ 0x21
 80175e4:	b1a4      	cbz	r4, 8017610 <BnrgmPalCryptoMatchNid+0xa0>
 80175e6:	f892 4038 	ldrb.w	r4, [r2, #56]	@ 0x38
 80175ea:	428c      	cmp	r4, r1
 80175ec:	d104      	bne.n	80175f8 <BnrgmPalCryptoMatchNid+0x88>
 80175ee:	781c      	ldrb	r4, [r3, #0]
 80175f0:	191e      	adds	r6, r3, r4
 80175f2:	3401      	adds	r4, #1
 80175f4:	7070      	strb	r0, [r6, #1]
 80175f6:	701c      	strb	r4, [r3, #0]
 80175f8:	f892 4022 	ldrb.w	r4, [r2, #34]	@ 0x22
 80175fc:	b144      	cbz	r4, 8017610 <BnrgmPalCryptoMatchNid+0xa0>
 80175fe:	f892 4039 	ldrb.w	r4, [r2, #57]	@ 0x39
 8017602:	428c      	cmp	r4, r1
 8017604:	d104      	bne.n	8017610 <BnrgmPalCryptoMatchNid+0xa0>
 8017606:	791c      	ldrb	r4, [r3, #4]
 8017608:	191e      	adds	r6, r3, r4
 801760a:	3401      	adds	r4, #1
 801760c:	7170      	strb	r0, [r6, #5]
 801760e:	711c      	strb	r4, [r3, #4]
 8017610:	3001      	adds	r0, #1
 8017612:	327c      	adds	r2, #124	@ 0x7c
 8017614:	e7b2      	b.n	801757c <BnrgmPalCryptoMatchNid+0xc>
 8017616:	2000      	movs	r0, #0
 8017618:	e7e1      	b.n	80175de <BnrgmPalCryptoMatchNid+0x6e>
 801761a:	bf00      	nop
 801761c:	20000008 	.word	0x20000008
 8017620:	20001840 	.word	0x20001840
 8017624:	20001a48 	.word	0x20001a48

08017628 <BnrgmPalCryptoInitFriendshipKeysP>:
 8017628:	280a      	cmp	r0, #10
 801762a:	d80b      	bhi.n	8017644 <BnrgmPalCryptoInitFriendshipKeysP+0x1c>
 801762c:	4b06      	ldr	r3, [pc, #24]	@ (8017648 <BnrgmPalCryptoInitFriendshipKeysP+0x20>)
 801762e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8017632:	4281      	cmp	r1, r0
 8017634:	d101      	bne.n	801763a <BnrgmPalCryptoInitFriendshipKeysP+0x12>
 8017636:	2000      	movs	r0, #0
 8017638:	4770      	bx	lr
 801763a:	f851 2b04 	ldr.w	r2, [r1], #4
 801763e:	f843 2f04 	str.w	r2, [r3, #4]!
 8017642:	e7f6      	b.n	8017632 <BnrgmPalCryptoInitFriendshipKeysP+0xa>
 8017644:	2002      	movs	r0, #2
 8017646:	4770      	bx	lr
 8017648:	20001a48 	.word	0x20001a48

0801764c <BnrgmPalCryptoSetFriendshipNetKeyOffset>:
 801764c:	280a      	cmp	r0, #10
 801764e:	d80d      	bhi.n	801766c <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x20>
 8017650:	4b07      	ldr	r3, [pc, #28]	@ (8017670 <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x24>)
 8017652:	881b      	ldrh	r3, [r3, #0]
 8017654:	428b      	cmp	r3, r1
 8017656:	d309      	bcc.n	801766c <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x20>
 8017658:	4b06      	ldr	r3, [pc, #24]	@ (8017674 <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x28>)
 801765a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801765e:	f8d3 0630 	ldr.w	r0, [r3, #1584]	@ 0x630
 8017662:	b120      	cbz	r0, 801766e <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x22>
 8017664:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
 8017668:	2000      	movs	r0, #0
 801766a:	4770      	bx	lr
 801766c:	2003      	movs	r0, #3
 801766e:	4770      	bx	lr
 8017670:	20000008 	.word	0x20000008
 8017674:	2000141c 	.word	0x2000141c

08017678 <BnrgmPalCryptoSetFriendshipKeys>:
 8017678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801767c:	b089      	sub	sp, #36	@ 0x24
 801767e:	2501      	movs	r5, #1
 8017680:	f8bd 4040 	ldrh.w	r4, [sp, #64]	@ 0x40
 8017684:	f88d 5014 	strb.w	r5, [sp, #20]
 8017688:	f88d 1016 	strb.w	r1, [sp, #22]
 801768c:	0a0d      	lsrs	r5, r1, #8
 801768e:	f88d 2018 	strb.w	r2, [sp, #24]
 8017692:	0a11      	lsrs	r1, r2, #8
 8017694:	f88d 301a 	strb.w	r3, [sp, #26]
 8017698:	0a1a      	lsrs	r2, r3, #8
 801769a:	280a      	cmp	r0, #10
 801769c:	ea4f 2314 	mov.w	r3, r4, lsr #8
 80176a0:	f88d 5015 	strb.w	r5, [sp, #21]
 80176a4:	f88d 1017 	strb.w	r1, [sp, #23]
 80176a8:	f88d 2019 	strb.w	r2, [sp, #25]
 80176ac:	f88d 301b 	strb.w	r3, [sp, #27]
 80176b0:	f88d 401c 	strb.w	r4, [sp, #28]
 80176b4:	d839      	bhi.n	801772a <BnrgmPalCryptoSetFriendshipKeys+0xb2>
 80176b6:	4e1e      	ldr	r6, [pc, #120]	@ (8017730 <BnrgmPalCryptoSetFriendshipKeys+0xb8>)
 80176b8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80176bc:	f206 4824 	addw	r8, r6, #1060	@ 0x424
 80176c0:	f8d0 4630 	ldr.w	r4, [r0, #1584]	@ 0x630
 80176c4:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80176c8:	f04f 0909 	mov.w	r9, #9
 80176cc:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 80176d0:	ad05      	add	r5, sp, #20
 80176d2:	2710      	movs	r7, #16
 80176d4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80176d8:	f104 0220 	add.w	r2, r4, #32
 80176dc:	4621      	mov	r1, r4
 80176de:	f8cd 9008 	str.w	r9, [sp, #8]
 80176e2:	9501      	str	r5, [sp, #4]
 80176e4:	9700      	str	r7, [sp, #0]
 80176e6:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 80176ea:	f7ff f845 	bl	8016778 <MoblePalCryptoK2>
 80176ee:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80176f2:	237c      	movs	r3, #124	@ 0x7c
 80176f4:	fb03 6602 	mla	r6, r3, r2, r6
 80176f8:	f896 1446 	ldrb.w	r1, [r6, #1094]	@ 0x446
 80176fc:	2901      	cmp	r1, #1
 80176fe:	d10c      	bne.n	801771a <BnrgmPalCryptoSetFriendshipKeys+0xa2>
 8017700:	fb13 7302 	smlabb	r3, r3, r2, r7
 8017704:	e9cd 5901 	strd	r5, r9, [sp, #4]
 8017708:	9700      	str	r7, [sp, #0]
 801770a:	4443      	add	r3, r8
 801770c:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 8017710:	19e1      	adds	r1, r4, r7
 8017712:	f104 0041 	add.w	r0, r4, #65	@ 0x41
 8017716:	f7ff f82f 	bl	8016778 <MoblePalCryptoK2>
 801771a:	2801      	cmp	r0, #1
 801771c:	bf94      	ite	ls
 801771e:	2000      	movls	r0, #0
 8017720:	2001      	movhi	r0, #1
 8017722:	0040      	lsls	r0, r0, #1
 8017724:	b009      	add	sp, #36	@ 0x24
 8017726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801772a:	2003      	movs	r0, #3
 801772c:	e7fa      	b.n	8017724 <BnrgmPalCryptoSetFriendshipKeys+0xac>
 801772e:	bf00      	nop
 8017730:	2000141c 	.word	0x2000141c

08017734 <BnrgmPalCryptoSwitchFriendshipKeys>:
 8017734:	280a      	cmp	r0, #10
 8017736:	b570      	push	{r4, r5, r6, lr}
 8017738:	d830      	bhi.n	801779c <BnrgmPalCryptoSwitchFriendshipKeys+0x68>
 801773a:	4b19      	ldr	r3, [pc, #100]	@ (80177a0 <BnrgmPalCryptoSwitchFriendshipKeys+0x6c>)
 801773c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8017740:	f8d3 3630 	ldr.w	r3, [r3, #1584]	@ 0x630
 8017744:	b353      	cbz	r3, 801779c <BnrgmPalCryptoSwitchFriendshipKeys+0x68>
 8017746:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 801774a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801774e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8017752:	4602      	mov	r2, r0
 8017754:	f103 0120 	add.w	r1, r3, #32
 8017758:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 801775c:	f852 5b04 	ldr.w	r5, [r2], #4
 8017760:	f841 5b04 	str.w	r5, [r1], #4
 8017764:	42a2      	cmp	r2, r4
 8017766:	d1f9      	bne.n	801775c <BnrgmPalCryptoSwitchFriendshipKeys+0x28>
 8017768:	f103 0510 	add.w	r5, r3, #16
 801776c:	462a      	mov	r2, r5
 801776e:	4619      	mov	r1, r3
 8017770:	f105 0410 	add.w	r4, r5, #16
 8017774:	f852 6b04 	ldr.w	r6, [r2], #4
 8017778:	f841 6b04 	str.w	r6, [r1], #4
 801777c:	42a2      	cmp	r2, r4
 801777e:	d1f9      	bne.n	8017774 <BnrgmPalCryptoSwitchFriendshipKeys+0x40>
 8017780:	2400      	movs	r4, #0
 8017782:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
 8017786:	2210      	movs	r2, #16
 8017788:	4621      	mov	r1, r4
 801778a:	f00f fa21 	bl	8026bd0 <memset>
 801778e:	2210      	movs	r2, #16
 8017790:	4621      	mov	r1, r4
 8017792:	4628      	mov	r0, r5
 8017794:	f00f fa1c 	bl	8026bd0 <memset>
 8017798:	4620      	mov	r0, r4
 801779a:	bd70      	pop	{r4, r5, r6, pc}
 801779c:	2003      	movs	r0, #3
 801779e:	e7fc      	b.n	801779a <BnrgmPalCryptoSwitchFriendshipKeys+0x66>
 80177a0:	2000141c 	.word	0x2000141c

080177a4 <BnrgmPalCryptoDeleteFriendshipKeys>:
 80177a4:	280a      	cmp	r0, #10
 80177a6:	b508      	push	{r3, lr}
 80177a8:	d80b      	bhi.n	80177c2 <BnrgmPalCryptoDeleteFriendshipKeys+0x1e>
 80177aa:	4b07      	ldr	r3, [pc, #28]	@ (80177c8 <BnrgmPalCryptoDeleteFriendshipKeys+0x24>)
 80177ac:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80177b0:	f8d3 0630 	ldr.w	r0, [r3, #1584]	@ 0x630
 80177b4:	b128      	cbz	r0, 80177c2 <BnrgmPalCryptoDeleteFriendshipKeys+0x1e>
 80177b6:	2244      	movs	r2, #68	@ 0x44
 80177b8:	2100      	movs	r1, #0
 80177ba:	f00f fa09 	bl	8026bd0 <memset>
 80177be:	2000      	movs	r0, #0
 80177c0:	bd08      	pop	{r3, pc}
 80177c2:	2003      	movs	r0, #3
 80177c4:	e7fc      	b.n	80177c0 <BnrgmPalCryptoDeleteFriendshipKeys+0x1c>
 80177c6:	bf00      	nop
 80177c8:	2000141c 	.word	0x2000141c

080177cc <MoblePalCrypto_UpdateModelPublicationParameters>:
 80177cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177ce:	b931      	cbnz	r1, 80177de <MoblePalCrypto_UpdateModelPublicationParameters+0x12>
 80177d0:	4b25      	ldr	r3, [pc, #148]	@ (8017868 <MoblePalCrypto_UpdateModelPublicationParameters+0x9c>)
 80177d2:	4a26      	ldr	r2, [pc, #152]	@ (801786c <MoblePalCrypto_UpdateModelPublicationParameters+0xa0>)
 80177d4:	f640 31ca 	movw	r1, #3018	@ 0xbca
 80177d8:	4825      	ldr	r0, [pc, #148]	@ (8017870 <MoblePalCrypto_UpdateModelPublicationParameters+0xa4>)
 80177da:	f00e fa5b 	bl	8025c94 <__assert_func>
 80177de:	b952      	cbnz	r2, 80177f6 <MoblePalCrypto_UpdateModelPublicationParameters+0x2a>
 80177e0:	4b24      	ldr	r3, [pc, #144]	@ (8017874 <MoblePalCrypto_UpdateModelPublicationParameters+0xa8>)
 80177e2:	4a22      	ldr	r2, [pc, #136]	@ (801786c <MoblePalCrypto_UpdateModelPublicationParameters+0xa0>)
 80177e4:	f640 31cb 	movw	r1, #3019	@ 0xbcb
 80177e8:	e7f6      	b.n	80177d8 <MoblePalCrypto_UpdateModelPublicationParameters+0xc>
 80177ea:	3001      	adds	r0, #1
 80177ec:	280b      	cmp	r0, #11
 80177ee:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 80177f2:	d114      	bne.n	801781e <MoblePalCrypto_UpdateModelPublicationParameters+0x52>
 80177f4:	e034      	b.n	8017860 <MoblePalCrypto_UpdateModelPublicationParameters+0x94>
 80177f6:	4c20      	ldr	r4, [pc, #128]	@ (8017878 <MoblePalCrypto_UpdateModelPublicationParameters+0xac>)
 80177f8:	2300      	movs	r3, #0
 80177fa:	f44f 7539 	mov.w	r5, #740	@ 0x2e4
 80177fe:	f5a4 7739 	sub.w	r7, r4, #740	@ 0x2e4
 8017802:	b2de      	uxtb	r6, r3
 8017804:	42b0      	cmp	r0, r6
 8017806:	d92b      	bls.n	8017860 <MoblePalCrypto_UpdateModelPublicationParameters+0x94>
 8017808:	fb03 5c05 	mla	ip, r3, r5, r5
 801780c:	1c5e      	adds	r6, r3, #1
 801780e:	f837 c00c 	ldrh.w	ip, [r7, ip]
 8017812:	458c      	cmp	ip, r1
 8017814:	d125      	bne.n	8017862 <MoblePalCrypto_UpdateModelPublicationParameters+0x96>
 8017816:	6816      	ldr	r6, [r2, #0]
 8017818:	fb05 4103 	mla	r1, r5, r3, r4
 801781c:	2000      	movs	r0, #0
 801781e:	6f8c      	ldr	r4, [r1, #120]	@ 0x78
 8017820:	42b4      	cmp	r4, r6
 8017822:	d1e2      	bne.n	80177ea <MoblePalCrypto_UpdateModelPublicationParameters+0x1e>
 8017824:	f44f 7139 	mov.w	r1, #740	@ 0x2e4
 8017828:	4359      	muls	r1, r3
 801782a:	2338      	movs	r3, #56	@ 0x38
 801782c:	fb03 1100 	mla	r1, r3, r0, r1
 8017830:	4b12      	ldr	r3, [pc, #72]	@ (801787c <MoblePalCrypto_UpdateModelPublicationParameters+0xb0>)
 8017832:	8894      	ldrh	r4, [r2, #4]
 8017834:	440b      	add	r3, r1
 8017836:	88d1      	ldrh	r1, [r2, #6]
 8017838:	f8a3 4128 	strh.w	r4, [r3, #296]	@ 0x128
 801783c:	f8a3 112a 	strh.w	r1, [r3, #298]	@ 0x12a
 8017840:	7f11      	ldrb	r1, [r2, #28]
 8017842:	f883 1140 	strb.w	r1, [r3, #320]	@ 0x140
 8017846:	7f51      	ldrb	r1, [r2, #29]
 8017848:	f883 1141 	strb.w	r1, [r3, #321]	@ 0x141
 801784c:	7f91      	ldrb	r1, [r2, #30]
 801784e:	f883 1142 	strb.w	r1, [r3, #322]	@ 0x142
 8017852:	7fd1      	ldrb	r1, [r2, #31]
 8017854:	f883 1143 	strb.w	r1, [r3, #323]	@ 0x143
 8017858:	f892 2020 	ldrb.w	r2, [r2, #32]
 801785c:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8017860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017862:	4633      	mov	r3, r6
 8017864:	e7cd      	b.n	8017802 <MoblePalCrypto_UpdateModelPublicationParameters+0x36>
 8017866:	bf00      	nop
 8017868:	0802e61f 	.word	0x0802e61f
 801786c:	0802cc28 	.word	0x0802cc28
 8017870:	0802e5db 	.word	0x0802e5db
 8017874:	0802e62e 	.word	0x0802e62e
 8017878:	200003d0 	.word	0x200003d0
 801787c:	20000324 	.word	0x20000324

08017880 <MoblePalCrypto_UpdateHealthModelPublicationParameters>:
 8017880:	b508      	push	{r3, lr}
 8017882:	b930      	cbnz	r0, 8017892 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x12>
 8017884:	4b12      	ldr	r3, [pc, #72]	@ (80178d0 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x50>)
 8017886:	4a13      	ldr	r2, [pc, #76]	@ (80178d4 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x54>)
 8017888:	f640 31f1 	movw	r1, #3057	@ 0xbf1
 801788c:	4812      	ldr	r0, [pc, #72]	@ (80178d8 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x58>)
 801788e:	f00e fa01 	bl	8025c94 <__assert_func>
 8017892:	b921      	cbnz	r1, 801789e <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x1e>
 8017894:	4b11      	ldr	r3, [pc, #68]	@ (80178dc <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x5c>)
 8017896:	4a0f      	ldr	r2, [pc, #60]	@ (80178d4 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x54>)
 8017898:	f640 31f2 	movw	r1, #3058	@ 0xbf2
 801789c:	e7f6      	b.n	801788c <MoblePalCrypto_UpdateHealthModelPublicationParameters+0xc>
 801789e:	4b10      	ldr	r3, [pc, #64]	@ (80178e0 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x60>)
 80178a0:	888a      	ldrh	r2, [r1, #4]
 80178a2:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a
 80178a6:	88ca      	ldrh	r2, [r1, #6]
 80178a8:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
 80178ac:	7f0a      	ldrb	r2, [r1, #28]
 80178ae:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
 80178b2:	7f4a      	ldrb	r2, [r1, #29]
 80178b4:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
 80178b8:	7f8a      	ldrb	r2, [r1, #30]
 80178ba:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
 80178be:	7fca      	ldrb	r2, [r1, #31]
 80178c0:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
 80178c4:	f891 2020 	ldrb.w	r2, [r1, #32]
 80178c8:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
 80178cc:	bd08      	pop	{r3, pc}
 80178ce:	bf00      	nop
 80178d0:	0802e61f 	.word	0x0802e61f
 80178d4:	0802cc58 	.word	0x0802cc58
 80178d8:	0802e5db 	.word	0x0802e5db
 80178dc:	0802e62e 	.word	0x0802e62e
 80178e0:	20000324 	.word	0x20000324

080178e4 <MoblePalCrypto_GetModelPublicationParameters>:
 80178e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178e6:	b931      	cbnz	r1, 80178f6 <MoblePalCrypto_GetModelPublicationParameters+0x12>
 80178e8:	4b1b      	ldr	r3, [pc, #108]	@ (8017958 <MoblePalCrypto_GetModelPublicationParameters+0x74>)
 80178ea:	4a1c      	ldr	r2, [pc, #112]	@ (801795c <MoblePalCrypto_GetModelPublicationParameters+0x78>)
 80178ec:	f640 4166 	movw	r1, #3174	@ 0xc66
 80178f0:	481b      	ldr	r0, [pc, #108]	@ (8017960 <MoblePalCrypto_GetModelPublicationParameters+0x7c>)
 80178f2:	f00e f9cf 	bl	8025c94 <__assert_func>
 80178f6:	b922      	cbnz	r2, 8017902 <MoblePalCrypto_GetModelPublicationParameters+0x1e>
 80178f8:	4b1a      	ldr	r3, [pc, #104]	@ (8017964 <MoblePalCrypto_GetModelPublicationParameters+0x80>)
 80178fa:	4a18      	ldr	r2, [pc, #96]	@ (801795c <MoblePalCrypto_GetModelPublicationParameters+0x78>)
 80178fc:	f640 4167 	movw	r1, #3175	@ 0xc67
 8017900:	e7f6      	b.n	80178f0 <MoblePalCrypto_GetModelPublicationParameters+0xc>
 8017902:	4d19      	ldr	r5, [pc, #100]	@ (8017968 <MoblePalCrypto_GetModelPublicationParameters+0x84>)
 8017904:	2300      	movs	r3, #0
 8017906:	f44f 7639 	mov.w	r6, #740	@ 0x2e4
 801790a:	f5a5 7739 	sub.w	r7, r5, #740	@ 0x2e4
 801790e:	b2dc      	uxtb	r4, r3
 8017910:	42a0      	cmp	r0, r4
 8017912:	d913      	bls.n	801793c <MoblePalCrypto_GetModelPublicationParameters+0x58>
 8017914:	fb03 6e06 	mla	lr, r3, r6, r6
 8017918:	f103 0c01 	add.w	ip, r3, #1
 801791c:	f837 e00e 	ldrh.w	lr, [r7, lr]
 8017920:	458e      	cmp	lr, r1
 8017922:	d116      	bne.n	8017952 <MoblePalCrypto_GetModelPublicationParameters+0x6e>
 8017924:	fb06 5303 	mla	r3, r6, r3, r5
 8017928:	2100      	movs	r1, #0
 801792a:	6f9e      	ldr	r6, [r3, #120]	@ 0x78
 801792c:	4296      	cmp	r6, r2
 801792e:	b2c8      	uxtb	r0, r1
 8017930:	d006      	beq.n	8017940 <MoblePalCrypto_GetModelPublicationParameters+0x5c>
 8017932:	3101      	adds	r1, #1
 8017934:	290b      	cmp	r1, #11
 8017936:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 801793a:	d1f6      	bne.n	801792a <MoblePalCrypto_GetModelPublicationParameters+0x46>
 801793c:	2400      	movs	r4, #0
 801793e:	4620      	mov	r0, r4
 8017940:	f44f 7339 	mov.w	r3, #740	@ 0x2e4
 8017944:	435c      	muls	r4, r3
 8017946:	2338      	movs	r3, #56	@ 0x38
 8017948:	fb13 4300 	smlabb	r3, r3, r0, r4
 801794c:	3378      	adds	r3, #120	@ 0x78
 801794e:	18e8      	adds	r0, r5, r3
 8017950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017952:	4663      	mov	r3, ip
 8017954:	e7db      	b.n	801790e <MoblePalCrypto_GetModelPublicationParameters+0x2a>
 8017956:	bf00      	nop
 8017958:	0802e61f 	.word	0x0802e61f
 801795c:	0802cc8e 	.word	0x0802cc8e
 8017960:	0802e5db 	.word	0x0802e5db
 8017964:	0802e63e 	.word	0x0802e63e
 8017968:	200003d0 	.word	0x200003d0

0801796c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>:
 801796c:	4b0b      	ldr	r3, [pc, #44]	@ (801799c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x30>)
 801796e:	f8b3 2448 	ldrh.w	r2, [r3, #1096]	@ 0x448
 8017972:	4282      	cmp	r2, r0
 8017974:	d00a      	beq.n	801798c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x20>
 8017976:	f8b3 24c4 	ldrh.w	r2, [r3, #1220]	@ 0x4c4
 801797a:	4282      	cmp	r2, r0
 801797c:	d008      	beq.n	8017990 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x24>
 801797e:	f8b3 3540 	ldrh.w	r3, [r3, #1344]	@ 0x540
 8017982:	4283      	cmp	r3, r0
 8017984:	d106      	bne.n	8017994 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x28>
 8017986:	2002      	movs	r0, #2
 8017988:	b240      	sxtb	r0, r0
 801798a:	4770      	bx	lr
 801798c:	2000      	movs	r0, #0
 801798e:	e7fb      	b.n	8017988 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x1c>
 8017990:	2001      	movs	r0, #1
 8017992:	e7f9      	b.n	8017988 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x1c>
 8017994:	f04f 30ff 	mov.w	r0, #4294967295
 8017998:	4770      	bx	lr
 801799a:	bf00      	nop
 801799c:	2000141c 	.word	0x2000141c

080179a0 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>:
 80179a0:	4b0b      	ldr	r3, [pc, #44]	@ (80179d0 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x30>)
 80179a2:	f8b3 25ba 	ldrh.w	r2, [r3, #1466]	@ 0x5ba
 80179a6:	4282      	cmp	r2, r0
 80179a8:	d00a      	beq.n	80179c0 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x20>
 80179aa:	f8b3 25e6 	ldrh.w	r2, [r3, #1510]	@ 0x5e6
 80179ae:	4282      	cmp	r2, r0
 80179b0:	d008      	beq.n	80179c4 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x24>
 80179b2:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	@ 0x612
 80179b6:	4283      	cmp	r3, r0
 80179b8:	d106      	bne.n	80179c8 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x28>
 80179ba:	2002      	movs	r0, #2
 80179bc:	b240      	sxtb	r0, r0
 80179be:	4770      	bx	lr
 80179c0:	2000      	movs	r0, #0
 80179c2:	e7fb      	b.n	80179bc <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x1c>
 80179c4:	2001      	movs	r0, #1
 80179c6:	e7f9      	b.n	80179bc <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x1c>
 80179c8:	f04f 30ff 	mov.w	r0, #4294967295
 80179cc:	4770      	bx	lr
 80179ce:	bf00      	nop
 80179d0:	2000141c 	.word	0x2000141c

080179d4 <MoblePalCryptoSwitchKeys>:
 80179d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80179d8:	b085      	sub	sp, #20
 80179da:	4602      	mov	r2, r0
 80179dc:	4607      	mov	r7, r0
 80179de:	460d      	mov	r5, r1
 80179e0:	2400      	movs	r4, #0
 80179e2:	f10d 0102 	add.w	r1, sp, #2
 80179e6:	a802      	add	r0, sp, #8
 80179e8:	f10d 0804 	add.w	r8, sp, #4
 80179ec:	f8ad 4002 	strh.w	r4, [sp, #2]
 80179f0:	ae02      	add	r6, sp, #8
 80179f2:	f7ff fb23 	bl	801703c <MoblePalCryptoGetAppKeyIndexes>
 80179f6:	4641      	mov	r1, r8
 80179f8:	f836 0b02 	ldrh.w	r0, [r6], #2
 80179fc:	f7ff ffd0 	bl	80179a0 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 8017a00:	3401      	adds	r4, #1
 8017a02:	b2e4      	uxtb	r4, r4
 8017a04:	2c03      	cmp	r4, #3
 8017a06:	f801 0b01 	strb.w	r0, [r1], #1
 8017a0a:	d1f5      	bne.n	80179f8 <MoblePalCryptoSwitchKeys+0x24>
 8017a0c:	4e1d      	ldr	r6, [pc, #116]	@ (8017a84 <MoblePalCryptoSwitchKeys+0xb0>)
 8017a0e:	237c      	movs	r3, #124	@ 0x7c
 8017a10:	fb03 6405 	mla	r4, r3, r5, r6
 8017a14:	f894 2445 	ldrb.w	r2, [r4, #1093]	@ 0x445
 8017a18:	2a01      	cmp	r2, #1
 8017a1a:	d10a      	bne.n	8017a32 <MoblePalCryptoSwitchKeys+0x5e>
 8017a1c:	f04f 0900 	mov.w	r9, #0
 8017a20:	f884 9445 	strb.w	r9, [r4, #1093]	@ 0x445
 8017a24:	4639      	mov	r1, r7
 8017a26:	f204 4034 	addw	r0, r4, #1076	@ 0x434
 8017a2a:	f7ff f9e3 	bl	8016df4 <MoblePalCryptoSetNetworkKey>
 8017a2e:	f884 9446 	strb.w	r9, [r4, #1094]	@ 0x446
 8017a32:	2300      	movs	r3, #0
 8017a34:	222c      	movs	r2, #44	@ 0x2c
 8017a36:	f918 1b01 	ldrsb.w	r1, [r8], #1
 8017a3a:	fb02 6401 	mla	r4, r2, r1, r6
 8017a3e:	f504 60b7 	add.w	r0, r4, #1464	@ 0x5b8
 8017a42:	f894 55b8 	ldrb.w	r5, [r4, #1464]	@ 0x5b8
 8017a46:	2d01      	cmp	r5, #1
 8017a48:	d118      	bne.n	8017a7c <MoblePalCryptoSwitchKeys+0xa8>
 8017a4a:	f204 55b9 	addw	r5, r4, #1465	@ 0x5b9
 8017a4e:	f894 45b9 	ldrb.w	r4, [r4, #1465]	@ 0x5b9
 8017a52:	2c01      	cmp	r4, #1
 8017a54:	d112      	bne.n	8017a7c <MoblePalCryptoSwitchKeys+0xa8>
 8017a56:	2400      	movs	r4, #0
 8017a58:	7004      	strb	r4, [r0, #0]
 8017a5a:	a804      	add	r0, sp, #16
 8017a5c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017a60:	4809      	ldr	r0, [pc, #36]	@ (8017a88 <MoblePalCryptoSwitchKeys+0xb4>)
 8017a62:	fb02 0001 	mla	r0, r2, r1, r0
 8017a66:	f500 70c2 	add.w	r0, r0, #388	@ 0x184
 8017a6a:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 8017a6e:	463a      	mov	r2, r7
 8017a70:	f7fe ffcc 	bl	8016a0c <MoblePalCryptoSetAppKey>
 8017a74:	702c      	strb	r4, [r5, #0]
 8017a76:	b005      	add	sp, #20
 8017a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a7c:	3301      	adds	r3, #1
 8017a7e:	2b03      	cmp	r3, #3
 8017a80:	d1d9      	bne.n	8017a36 <MoblePalCryptoSwitchKeys+0x62>
 8017a82:	e7f8      	b.n	8017a76 <MoblePalCryptoSwitchKeys+0xa2>
 8017a84:	2000141c 	.word	0x2000141c
 8017a88:	20001840 	.word	0x20001840

08017a8c <MoblePalCryptoIsSubscriptionExists>:
 8017a8c:	4915      	ldr	r1, [pc, #84]	@ (8017ae4 <MoblePalCryptoIsSubscriptionExists+0x58>)
 8017a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a90:	2302      	movs	r3, #2
 8017a92:	2500      	movs	r5, #0
 8017a94:	880a      	ldrh	r2, [r1, #0]
 8017a96:	b30a      	cbz	r2, 8017adc <MoblePalCryptoIsSubscriptionExists+0x50>
 8017a98:	460c      	mov	r4, r1
 8017a9a:	2600      	movs	r6, #0
 8017a9c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8017a9e:	b1ba      	cbz	r2, 8017ad0 <MoblePalCryptoIsSubscriptionExists+0x44>
 8017aa0:	b17b      	cbz	r3, 8017ac2 <MoblePalCryptoIsSubscriptionExists+0x36>
 8017aa2:	f104 077e 	add.w	r7, r4, #126	@ 0x7e
 8017aa6:	220a      	movs	r2, #10
 8017aa8:	f837 cf02 	ldrh.w	ip, [r7, #2]!
 8017aac:	4584      	cmp	ip, r0
 8017aae:	d013      	beq.n	8017ad8 <MoblePalCryptoIsSubscriptionExists+0x4c>
 8017ab0:	3a01      	subs	r2, #1
 8017ab2:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 8017ab6:	d1f7      	bne.n	8017aa8 <MoblePalCryptoIsSubscriptionExists+0x1c>
 8017ab8:	360e      	adds	r6, #14
 8017aba:	2e9a      	cmp	r6, #154	@ 0x9a
 8017abc:	f104 0438 	add.w	r4, r4, #56	@ 0x38
 8017ac0:	d1ec      	bne.n	8017a9c <MoblePalCryptoIsSubscriptionExists+0x10>
 8017ac2:	3501      	adds	r5, #1
 8017ac4:	2d05      	cmp	r5, #5
 8017ac6:	f501 7139 	add.w	r1, r1, #740	@ 0x2e4
 8017aca:	d1e3      	bne.n	8017a94 <MoblePalCryptoIsSubscriptionExists+0x8>
 8017acc:	4618      	mov	r0, r3
 8017ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d0f6      	beq.n	8017ac2 <MoblePalCryptoIsSubscriptionExists+0x36>
 8017ad4:	2302      	movs	r3, #2
 8017ad6:	e7ef      	b.n	8017ab8 <MoblePalCryptoIsSubscriptionExists+0x2c>
 8017ad8:	2300      	movs	r3, #0
 8017ada:	e7ed      	b.n	8017ab8 <MoblePalCryptoIsSubscriptionExists+0x2c>
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d0f5      	beq.n	8017acc <MoblePalCryptoIsSubscriptionExists+0x40>
 8017ae0:	2302      	movs	r3, #2
 8017ae2:	e7ee      	b.n	8017ac2 <MoblePalCryptoIsSubscriptionExists+0x36>
 8017ae4:	200003d0 	.word	0x200003d0

08017ae8 <BnrgmTransmitQueueInit>:
 8017ae8:	4a08      	ldr	r2, [pc, #32]	@ (8017b0c <BnrgmTransmitQueueInit+0x24>)
 8017aea:	2300      	movs	r3, #0
 8017aec:	7013      	strb	r3, [r2, #0]
 8017aee:	7413      	strb	r3, [r2, #16]
 8017af0:	f882 3020 	strb.w	r3, [r2, #32]
 8017af4:	4619      	mov	r1, r3
 8017af6:	3301      	adds	r3, #1
 8017af8:	2b64      	cmp	r3, #100	@ 0x64
 8017afa:	f882 1055 	strb.w	r1, [r2, #85]	@ 0x55
 8017afe:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8017b02:	d1f8      	bne.n	8017af6 <BnrgmTransmitQueueInit+0xe>
 8017b04:	4b02      	ldr	r3, [pc, #8]	@ (8017b10 <BnrgmTransmitQueueInit+0x28>)
 8017b06:	f8c3 1164 	str.w	r1, [r3, #356]	@ 0x164
 8017b0a:	4770      	bx	lr
 8017b0c:	20002f64 	.word	0x20002f64
 8017b10:	20003f64 	.word	0x20003f64

08017b14 <BnrgmTransmitQueuePush>:
 8017b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b16:	4d1f      	ldr	r5, [pc, #124]	@ (8017b94 <BnrgmTransmitQueuePush+0x80>)
 8017b18:	460e      	mov	r6, r1
 8017b1a:	4619      	mov	r1, r3
 8017b1c:	f895 3166 	ldrb.w	r3, [r5, #358]	@ 0x166
 8017b20:	2b63      	cmp	r3, #99	@ 0x63
 8017b22:	4617      	mov	r7, r2
 8017b24:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8017b28:	d831      	bhi.n	8017b8e <BnrgmTransmitQueuePush+0x7a>
 8017b2a:	f895 c165 	ldrb.w	ip, [r5, #357]	@ 0x165
 8017b2e:	232c      	movs	r3, #44	@ 0x2c
 8017b30:	f5a5 647d 	sub.w	r4, r5, #4048	@ 0xfd0
 8017b34:	fb0c 4403 	mla	r4, ip, r3, r4
 8017b38:	2301      	movs	r3, #1
 8017b3a:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
 8017b3e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8017b42:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8017b46:	f884 0020 	strb.w	r0, [r4, #32]
 8017b4a:	2600      	movs	r6, #0
 8017b4c:	8463      	strh	r3, [r4, #34]	@ 0x22
 8017b4e:	77e2      	strb	r2, [r4, #31]
 8017b50:	f884 7024 	strb.w	r7, [r4, #36]	@ 0x24
 8017b54:	62a6      	str	r6, [r4, #40]	@ 0x28
 8017b56:	4620      	mov	r0, r4
 8017b58:	f00f f8eb 	bl	8026d32 <memcpy>
 8017b5c:	f895 3165 	ldrb.w	r3, [r5, #357]	@ 0x165
 8017b60:	2264      	movs	r2, #100	@ 0x64
 8017b62:	3301      	adds	r3, #1
 8017b64:	fbb3 f1f2 	udiv	r1, r3, r2
 8017b68:	fb02 3311 	mls	r3, r2, r1, r3
 8017b6c:	f885 3165 	strb.w	r3, [r5, #357]	@ 0x165
 8017b70:	f895 3166 	ldrb.w	r3, [r5, #358]	@ 0x166
 8017b74:	2f01      	cmp	r7, #1
 8017b76:	f103 0301 	add.w	r3, r3, #1
 8017b7a:	f885 3166 	strb.w	r3, [r5, #358]	@ 0x166
 8017b7e:	d104      	bne.n	8017b8a <BnrgmTransmitQueuePush+0x76>
 8017b80:	f895 3167 	ldrb.w	r3, [r5, #359]	@ 0x167
 8017b84:	3301      	adds	r3, #1
 8017b86:	f885 3167 	strb.w	r3, [r5, #359]	@ 0x167
 8017b8a:	4630      	mov	r0, r6
 8017b8c:	e000      	b.n	8017b90 <BnrgmTransmitQueuePush+0x7c>
 8017b8e:	2004      	movs	r0, #4
 8017b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b92:	bf00      	nop
 8017b94:	20003f64 	.word	0x20003f64

08017b98 <BnrgmTransmitQueDecreasePktCount>:
 8017b98:	b510      	push	{r4, lr}
 8017b9a:	4604      	mov	r4, r0
 8017b9c:	b188      	cbz	r0, 8017bc2 <BnrgmTransmitQueDecreasePktCount+0x2a>
 8017b9e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8017ba2:	2b01      	cmp	r3, #1
 8017ba4:	d10d      	bne.n	8017bc2 <BnrgmTransmitQueDecreasePktCount+0x2a>
 8017ba6:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
 8017baa:	b910      	cbnz	r0, 8017bb2 <BnrgmTransmitQueDecreasePktCount+0x1a>
 8017bac:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
 8017bb0:	bd10      	pop	{r4, pc}
 8017bb2:	1e43      	subs	r3, r0, #1
 8017bb4:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8017bb8:	f7ee ffb4 	bl	8006b24 <HAL_GetTick>
 8017bbc:	62a0      	str	r0, [r4, #40]	@ 0x28
 8017bbe:	2000      	movs	r0, #0
 8017bc0:	e7f6      	b.n	8017bb0 <BnrgmTransmitQueDecreasePktCount+0x18>
 8017bc2:	2002      	movs	r0, #2
 8017bc4:	e7f4      	b.n	8017bb0 <BnrgmTransmitQueDecreasePktCount+0x18>
	...

08017bc8 <BnrgmTransmitQueuePrepNextItem>:
 8017bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bcc:	4d25      	ldr	r5, [pc, #148]	@ (8017c64 <BnrgmTransmitQueuePrepNextItem+0x9c>)
 8017bce:	f895 2167 	ldrb.w	r2, [r5, #359]	@ 0x167
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	f8c5 3160 	str.w	r3, [r5, #352]	@ 0x160
 8017bd8:	b1e2      	cbz	r2, 8017c14 <BnrgmTransmitQueuePrepNextItem+0x4c>
 8017bda:	f895 4164 	ldrb.w	r4, [r5, #356]	@ 0x164
 8017bde:	2064      	movs	r0, #100	@ 0x64
 8017be0:	262c      	movs	r6, #44	@ 0x2c
 8017be2:	f5a5 617d 	sub.w	r1, r5, #4048	@ 0xfd0
 8017be6:	f240 1701 	movw	r7, #257	@ 0x101
 8017bea:	18e2      	adds	r2, r4, r3
 8017bec:	fbb2 fcf0 	udiv	ip, r2, r0
 8017bf0:	fb00 221c 	mls	r2, r0, ip, r2
 8017bf4:	fb06 1202 	mla	r2, r6, r2, r1
 8017bf8:	f8b2 c024 	ldrh.w	ip, [r2, #36]	@ 0x24
 8017bfc:	45bc      	cmp	ip, r7
 8017bfe:	d106      	bne.n	8017c0e <BnrgmTransmitQueuePrepNextItem+0x46>
 8017c00:	f501 617d 	add.w	r1, r1, #4048	@ 0xfd0
 8017c04:	f8c1 2160 	str.w	r2, [r1, #352]	@ 0x160
 8017c08:	2000      	movs	r0, #0
 8017c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c0e:	3301      	adds	r3, #1
 8017c10:	2b64      	cmp	r3, #100	@ 0x64
 8017c12:	d1ea      	bne.n	8017bea <BnrgmTransmitQueuePrepNextItem+0x22>
 8017c14:	f895 3166 	ldrb.w	r3, [r5, #358]	@ 0x166
 8017c18:	b30b      	cbz	r3, 8017c5e <BnrgmTransmitQueuePrepNextItem+0x96>
 8017c1a:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8017c68 <BnrgmTransmitQueuePrepNextItem+0xa0>
 8017c1e:	2600      	movs	r6, #0
 8017c20:	2764      	movs	r7, #100	@ 0x64
 8017c22:	f04f 082c 	mov.w	r8, #44	@ 0x2c
 8017c26:	f895 4164 	ldrb.w	r4, [r5, #356]	@ 0x164
 8017c2a:	4434      	add	r4, r6
 8017c2c:	fbb4 f3f7 	udiv	r3, r4, r7
 8017c30:	fb07 4413 	mls	r4, r7, r3, r4
 8017c34:	fb08 9404 	mla	r4, r8, r4, r9
 8017c38:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8017c3c:	2b01      	cmp	r3, #1
 8017c3e:	d10b      	bne.n	8017c58 <BnrgmTransmitQueuePrepNextItem+0x90>
 8017c40:	f8b4 a022 	ldrh.w	sl, [r4, #34]	@ 0x22
 8017c44:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8017c46:	449a      	add	sl, r3
 8017c48:	f7ee ff6c 	bl	8006b24 <HAL_GetTick>
 8017c4c:	3014      	adds	r0, #20
 8017c4e:	4582      	cmp	sl, r0
 8017c50:	d802      	bhi.n	8017c58 <BnrgmTransmitQueuePrepNextItem+0x90>
 8017c52:	f8c5 4160 	str.w	r4, [r5, #352]	@ 0x160
 8017c56:	e7d7      	b.n	8017c08 <BnrgmTransmitQueuePrepNextItem+0x40>
 8017c58:	3601      	adds	r6, #1
 8017c5a:	2e64      	cmp	r6, #100	@ 0x64
 8017c5c:	d1e3      	bne.n	8017c26 <BnrgmTransmitQueuePrepNextItem+0x5e>
 8017c5e:	2001      	movs	r0, #1
 8017c60:	e7d3      	b.n	8017c0a <BnrgmTransmitQueuePrepNextItem+0x42>
 8017c62:	bf00      	nop
 8017c64:	20003f64 	.word	0x20003f64
 8017c68:	20002f94 	.word	0x20002f94

08017c6c <BnrgmTransmitQueueAlign>:
 8017c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c70:	4f2f      	ldr	r7, [pc, #188]	@ (8017d30 <BnrgmTransmitQueueAlign+0xc4>)
 8017c72:	f897 4165 	ldrb.w	r4, [r7, #357]	@ 0x165
 8017c76:	2c00      	cmp	r4, #0
 8017c78:	d044      	beq.n	8017d04 <BnrgmTransmitQueueAlign+0x98>
 8017c7a:	3c01      	subs	r4, #1
 8017c7c:	b2e4      	uxtb	r4, r4
 8017c7e:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8017d34 <BnrgmTransmitQueueAlign+0xc8>
 8017c82:	46a4      	mov	ip, r4
 8017c84:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8017c88:	f04f 092c 	mov.w	r9, #44	@ 0x2c
 8017c8c:	f04f 0b00 	mov.w	fp, #0
 8017c90:	f897 3166 	ldrb.w	r3, [r7, #358]	@ 0x166
 8017c94:	b343      	cbz	r3, 8017ce8 <BnrgmTransmitQueueAlign+0x7c>
 8017c96:	fb1c fe09 	smulbb	lr, ip, r9
 8017c9a:	44d6      	add	lr, sl
 8017c9c:	f89e 2025 	ldrb.w	r2, [lr, #37]	@ 0x25
 8017ca0:	2a01      	cmp	r2, #1
 8017ca2:	d131      	bne.n	8017d08 <BnrgmTransmitQueueAlign+0x9c>
 8017ca4:	4564      	cmp	r4, ip
 8017ca6:	d00c      	beq.n	8017cc2 <BnrgmTransmitQueueAlign+0x56>
 8017ca8:	4676      	mov	r6, lr
 8017caa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017cac:	fb04 a509 	mla	r5, r4, r9, sl
 8017cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017cb2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8017cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017cb6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8017cba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8017cbe:	f88e b025 	strb.w	fp, [lr, #37]	@ 0x25
 8017cc2:	b384      	cbz	r4, 8017d26 <BnrgmTransmitQueueAlign+0xba>
 8017cc4:	3c01      	subs	r4, #1
 8017cc6:	b2e4      	uxtb	r4, r4
 8017cc8:	f897 3164 	ldrb.w	r3, [r7, #356]	@ 0x164
 8017ccc:	4563      	cmp	r3, ip
 8017cce:	d00b      	beq.n	8017ce8 <BnrgmTransmitQueueAlign+0x7c>
 8017cd0:	f1bc 0f00 	cmp.w	ip, #0
 8017cd4:	d029      	beq.n	8017d2a <BnrgmTransmitQueueAlign+0xbe>
 8017cd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017cda:	fa5f fc8c 	uxtb.w	ip, ip
 8017cde:	f108 38ff 	add.w	r8, r8, #4294967295
 8017ce2:	f018 08ff 	ands.w	r8, r8, #255	@ 0xff
 8017ce6:	d1d3      	bne.n	8017c90 <BnrgmTransmitQueueAlign+0x24>
 8017ce8:	f897 3165 	ldrb.w	r3, [r7, #357]	@ 0x165
 8017cec:	f897 2166 	ldrb.w	r2, [r7, #358]	@ 0x166
 8017cf0:	429a      	cmp	r2, r3
 8017cf2:	bf88      	it	hi
 8017cf4:	3364      	addhi	r3, #100	@ 0x64
 8017cf6:	1a9b      	subs	r3, r3, r2
 8017cf8:	b2db      	uxtb	r3, r3
 8017cfa:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164
 8017cfe:	2000      	movs	r0, #0
 8017d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d04:	2463      	movs	r4, #99	@ 0x63
 8017d06:	e7ba      	b.n	8017c7e <BnrgmTransmitQueueAlign+0x12>
 8017d08:	3b01      	subs	r3, #1
 8017d0a:	f887 3166 	strb.w	r3, [r7, #358]	@ 0x166
 8017d0e:	f89e 3024 	ldrb.w	r3, [lr, #36]	@ 0x24
 8017d12:	2b01      	cmp	r3, #1
 8017d14:	d1d8      	bne.n	8017cc8 <BnrgmTransmitQueueAlign+0x5c>
 8017d16:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d0d4      	beq.n	8017cc8 <BnrgmTransmitQueueAlign+0x5c>
 8017d1e:	3b01      	subs	r3, #1
 8017d20:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
 8017d24:	e7d0      	b.n	8017cc8 <BnrgmTransmitQueueAlign+0x5c>
 8017d26:	2463      	movs	r4, #99	@ 0x63
 8017d28:	e7ce      	b.n	8017cc8 <BnrgmTransmitQueueAlign+0x5c>
 8017d2a:	f04f 0c63 	mov.w	ip, #99	@ 0x63
 8017d2e:	e7d6      	b.n	8017cde <BnrgmTransmitQueueAlign+0x72>
 8017d30:	20003f64 	.word	0x20003f64
 8017d34:	20002f94 	.word	0x20002f94

08017d38 <MobleTransmitNow>:
 8017d38:	b470      	push	{r4, r5, r6}
 8017d3a:	4604      	mov	r4, r0
 8017d3c:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8017d40:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8017d44:	4618      	mov	r0, r3
 8017d46:	460b      	mov	r3, r1
 8017d48:	b159      	cbz	r1, 8017d62 <MobleTransmitNow+0x2a>
 8017d4a:	2a1f      	cmp	r2, #31
 8017d4c:	d809      	bhi.n	8017d62 <MobleTransmitNow+0x2a>
 8017d4e:	2d13      	cmp	r5, #19
 8017d50:	d907      	bls.n	8017d62 <MobleTransmitNow+0x2a>
 8017d52:	e9cd 2503 	strd	r2, r5, [sp, #12]
 8017d56:	4631      	mov	r1, r6
 8017d58:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8017d5c:	bc70      	pop	{r4, r5, r6}
 8017d5e:	f7ff bed9 	b.w	8017b14 <BnrgmTransmitQueuePush>
 8017d62:	2003      	movs	r0, #3
 8017d64:	bc70      	pop	{r4, r5, r6}
 8017d66:	4770      	bx	lr

08017d68 <MobleTransmitTimerCallback>:
 8017d68:	b570      	push	{r4, r5, r6, lr}
 8017d6a:	684b      	ldr	r3, [r1, #4]
 8017d6c:	b092      	sub	sp, #72	@ 0x48
 8017d6e:	881e      	ldrh	r6, [r3, #0]
 8017d70:	4605      	mov	r5, r0
 8017d72:	460c      	mov	r4, r1
 8017d74:	f7fd fae0 	bl	8015338 <MoblePalBluetoothRandom>
 8017d78:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8017d7c:	1831      	adds	r1, r6, r0
 8017d7e:	b289      	uxth	r1, r1
 8017d80:	4628      	mov	r0, r5
 8017d82:	f7fd f89f 	bl	8014ec4 <MoblePalTimerStartOnce>
 8017d86:	4b0f      	ldr	r3, [pc, #60]	@ (8017dc4 <MobleTransmitTimerCallback+0x5c>)
 8017d88:	f893 2168 	ldrb.w	r2, [r3, #360]	@ 0x168
 8017d8c:	2a01      	cmp	r2, #1
 8017d8e:	d016      	beq.n	8017dbe <MobleTransmitTimerCallback+0x56>
 8017d90:	78a2      	ldrb	r2, [r4, #2]
 8017d92:	2a01      	cmp	r2, #1
 8017d94:	d102      	bne.n	8017d9c <MobleTransmitTimerCallback+0x34>
 8017d96:	f893 3166 	ldrb.w	r3, [r3, #358]	@ 0x166
 8017d9a:	b983      	cbnz	r3, 8017dbe <MobleTransmitTimerCallback+0x56>
 8017d9c:	68a3      	ldr	r3, [r4, #8]
 8017d9e:	211f      	movs	r1, #31
 8017da0:	a802      	add	r0, sp, #8
 8017da2:	4798      	blx	r3
 8017da4:	1e02      	subs	r2, r0, #0
 8017da6:	dd0a      	ble.n	8017dbe <MobleTransmitTimerCallback+0x56>
 8017da8:	6863      	ldr	r3, [r4, #4]
 8017daa:	881b      	ldrh	r3, [r3, #0]
 8017dac:	9301      	str	r3, [sp, #4]
 8017dae:	78e3      	ldrb	r3, [r4, #3]
 8017db0:	9300      	str	r3, [sp, #0]
 8017db2:	b2d2      	uxtb	r2, r2
 8017db4:	7863      	ldrb	r3, [r4, #1]
 8017db6:	a902      	add	r1, sp, #8
 8017db8:	2000      	movs	r0, #0
 8017dba:	f7ff ffbd 	bl	8017d38 <MobleTransmitNow>
 8017dbe:	b012      	add	sp, #72	@ 0x48
 8017dc0:	bd70      	pop	{r4, r5, r6, pc}
 8017dc2:	bf00      	nop
 8017dc4:	20003f64 	.word	0x20003f64

08017dc8 <MobleTransmitOutOfTurn>:
 8017dc8:	2802      	cmp	r0, #2
 8017dca:	b508      	push	{r3, lr}
 8017dcc:	d80a      	bhi.n	8017de4 <MobleTransmitOutOfTurn+0x1c>
 8017dce:	4b07      	ldr	r3, [pc, #28]	@ (8017dec <MobleTransmitOutOfTurn+0x24>)
 8017dd0:	0102      	lsls	r2, r0, #4
 8017dd2:	eb03 1100 	add.w	r1, r3, r0, lsl #4
 8017dd6:	5c9b      	ldrb	r3, [r3, r2]
 8017dd8:	b133      	cbz	r3, 8017de8 <MobleTransmitOutOfTurn+0x20>
 8017dda:	2000      	movs	r0, #0
 8017ddc:	f7ff ffc4 	bl	8017d68 <MobleTransmitTimerCallback>
 8017de0:	2000      	movs	r0, #0
 8017de2:	bd08      	pop	{r3, pc}
 8017de4:	2003      	movs	r0, #3
 8017de6:	e7fc      	b.n	8017de2 <MobleTransmitOutOfTurn+0x1a>
 8017de8:	2002      	movs	r0, #2
 8017dea:	e7fa      	b.n	8017de2 <MobleTransmitOutOfTurn+0x1a>
 8017dec:	20002f64 	.word	0x20002f64

08017df0 <MobleTransmitFindFreeSlot>:
 8017df0:	4b07      	ldr	r3, [pc, #28]	@ (8017e10 <MobleTransmitFindFreeSlot+0x20>)
 8017df2:	7818      	ldrb	r0, [r3, #0]
 8017df4:	b150      	cbz	r0, 8017e0c <MobleTransmitFindFreeSlot+0x1c>
 8017df6:	7c1a      	ldrb	r2, [r3, #16]
 8017df8:	b13a      	cbz	r2, 8017e0a <MobleTransmitFindFreeSlot+0x1a>
 8017dfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	bf0c      	ite	eq
 8017e02:	2002      	moveq	r0, #2
 8017e04:	f04f 30ff 	movne.w	r0, #4294967295
 8017e08:	4770      	bx	lr
 8017e0a:	2001      	movs	r0, #1
 8017e0c:	4770      	bx	lr
 8017e0e:	bf00      	nop
 8017e10:	20002f64 	.word	0x20002f64

08017e14 <MobleTransmitSetup>:
 8017e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e18:	4682      	mov	sl, r0
 8017e1a:	4615      	mov	r5, r2
 8017e1c:	461f      	mov	r7, r3
 8017e1e:	b1f3      	cbz	r3, 8017e5e <MobleTransmitSetup+0x4a>
 8017e20:	b1ea      	cbz	r2, 8017e5e <MobleTransmitSetup+0x4a>
 8017e22:	f7ff ffe5 	bl	8017df0 <MobleTransmitFindFreeSlot>
 8017e26:	1e06      	subs	r6, r0, #0
 8017e28:	db1b      	blt.n	8017e62 <MobleTransmitSetup+0x4e>
 8017e2a:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8017e6c <MobleTransmitSetup+0x58>
 8017e2e:	b234      	sxth	r4, r6
 8017e30:	eb08 1204 	add.w	r2, r8, r4, lsl #4
 8017e34:	3d01      	subs	r5, #1
 8017e36:	7091      	strb	r1, [r2, #2]
 8017e38:	f882 a001 	strb.w	sl, [r2, #1]
 8017e3c:	490a      	ldr	r1, [pc, #40]	@ (8017e68 <MobleTransmitSetup+0x54>)
 8017e3e:	70d5      	strb	r5, [r2, #3]
 8017e40:	f102 000c 	add.w	r0, r2, #12
 8017e44:	f7fc ffd4 	bl	8014df0 <MoblePalTimerCreate>
 8017e48:	2801      	cmp	r0, #1
 8017e4a:	ea4f 1904 	mov.w	r9, r4, lsl #4
 8017e4e:	d804      	bhi.n	8017e5a <MobleTransmitSetup+0x46>
 8017e50:	2301      	movs	r3, #1
 8017e52:	f808 3009 	strb.w	r3, [r8, r9]
 8017e56:	2000      	movs	r0, #0
 8017e58:	603e      	str	r6, [r7, #0]
 8017e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e5e:	2003      	movs	r0, #3
 8017e60:	e7fb      	b.n	8017e5a <MobleTransmitSetup+0x46>
 8017e62:	2004      	movs	r0, #4
 8017e64:	e7f9      	b.n	8017e5a <MobleTransmitSetup+0x46>
 8017e66:	bf00      	nop
 8017e68:	08017d69 	.word	0x08017d69
 8017e6c:	20002f64 	.word	0x20002f64

08017e70 <BnrgmTransmitDisableRegularlyGeneratedBeacon>:
 8017e70:	b508      	push	{r3, lr}
 8017e72:	0102      	lsls	r2, r0, #4
 8017e74:	4b06      	ldr	r3, [pc, #24]	@ (8017e90 <BnrgmTransmitDisableRegularlyGeneratedBeacon+0x20>)
 8017e76:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8017e7a:	5c9b      	ldrb	r3, [r3, r2]
 8017e7c:	2b01      	cmp	r3, #1
 8017e7e:	d104      	bne.n	8017e8a <BnrgmTransmitDisableRegularlyGeneratedBeacon+0x1a>
 8017e80:	68c0      	ldr	r0, [r0, #12]
 8017e82:	f7fd f847 	bl	8014f14 <MoblePalTimerStop>
 8017e86:	2000      	movs	r0, #0
 8017e88:	bd08      	pop	{r3, pc}
 8017e8a:	2002      	movs	r0, #2
 8017e8c:	e7fc      	b.n	8017e88 <BnrgmTransmitDisableRegularlyGeneratedBeacon+0x18>
 8017e8e:	bf00      	nop
 8017e90:	20002f64 	.word	0x20002f64

08017e94 <BnrgmTransmitChangeRegularlyGeneratedInterval>:
 8017e94:	b538      	push	{r3, r4, r5, lr}
 8017e96:	0101      	lsls	r1, r0, #4
 8017e98:	4b0c      	ldr	r3, [pc, #48]	@ (8017ecc <BnrgmTransmitChangeRegularlyGeneratedInterval+0x38>)
 8017e9a:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 8017e9e:	5c5b      	ldrb	r3, [r3, r1]
 8017ea0:	2b01      	cmp	r3, #1
 8017ea2:	d110      	bne.n	8017ec6 <BnrgmTransmitChangeRegularlyGeneratedInterval+0x32>
 8017ea4:	68d5      	ldr	r5, [r2, #12]
 8017ea6:	4628      	mov	r0, r5
 8017ea8:	f7fd f834 	bl	8014f14 <MoblePalTimerStop>
 8017eac:	6853      	ldr	r3, [r2, #4]
 8017eae:	881c      	ldrh	r4, [r3, #0]
 8017eb0:	f7fd fa42 	bl	8015338 <MoblePalBluetoothRandom>
 8017eb4:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8017eb8:	1821      	adds	r1, r4, r0
 8017eba:	b289      	uxth	r1, r1
 8017ebc:	4628      	mov	r0, r5
 8017ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ec2:	f7fc bfff 	b.w	8014ec4 <MoblePalTimerStartOnce>
 8017ec6:	2002      	movs	r0, #2
 8017ec8:	bd38      	pop	{r3, r4, r5, pc}
 8017eca:	bf00      	nop
 8017ecc:	20002f64 	.word	0x20002f64

08017ed0 <MobleStackFastAdvTimeoutTimerCallback>:
 8017ed0:	4a09      	ldr	r2, [pc, #36]	@ (8017ef8 <MobleStackFastAdvTimeoutTimerCallback+0x28>)
 8017ed2:	f8d2 07f8 	ldr.w	r0, [r2, #2040]	@ 0x7f8
 8017ed6:	b508      	push	{r3, lr}
 8017ed8:	b108      	cbz	r0, 8017ede <MobleStackFastAdvTimeoutTimerCallback+0xe>
 8017eda:	f7fd f83b 	bl	8014f54 <MoblePalTimerDestroy>
 8017ede:	2300      	movs	r3, #0
 8017ee0:	f8c2 37f8 	str.w	r3, [r2, #2040]	@ 0x7f8
 8017ee4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017ee8:	f8a2 3864 	strh.w	r3, [r2, #2148]	@ 0x864
 8017eec:	f8d2 0860 	ldr.w	r0, [r2, #2144]	@ 0x860
 8017ef0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017ef4:	f7ff bfce 	b.w	8017e94 <BnrgmTransmitChangeRegularlyGeneratedInterval>
 8017ef8:	2000141c 	.word	0x2000141c

08017efc <MobleTransmitRegularlyGenerated>:
 8017efc:	b570      	push	{r4, r5, r6, lr}
 8017efe:	4604      	mov	r4, r0
 8017f00:	9e04      	ldr	r6, [sp, #16]
 8017f02:	4608      	mov	r0, r1
 8017f04:	461d      	mov	r5, r3
 8017f06:	4611      	mov	r1, r2
 8017f08:	b174      	cbz	r4, 8017f28 <MobleTransmitRegularlyGenerated+0x2c>
 8017f0a:	b16b      	cbz	r3, 8017f28 <MobleTransmitRegularlyGenerated+0x2c>
 8017f0c:	4633      	mov	r3, r6
 8017f0e:	2201      	movs	r2, #1
 8017f10:	f7ff ff80 	bl	8017e14 <MobleTransmitSetup>
 8017f14:	2801      	cmp	r0, #1
 8017f16:	d806      	bhi.n	8017f26 <MobleTransmitRegularlyGenerated+0x2a>
 8017f18:	6833      	ldr	r3, [r6, #0]
 8017f1a:	4a04      	ldr	r2, [pc, #16]	@ (8017f2c <MobleTransmitRegularlyGenerated+0x30>)
 8017f1c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8017f20:	e9c2 5401 	strd	r5, r4, [r2, #4]
 8017f24:	2000      	movs	r0, #0
 8017f26:	bd70      	pop	{r4, r5, r6, pc}
 8017f28:	2003      	movs	r0, #3
 8017f2a:	e7fc      	b.n	8017f26 <MobleTransmitRegularlyGenerated+0x2a>
 8017f2c:	20002f64 	.word	0x20002f64

08017f30 <BnrgmTransmitSend>:
 8017f30:	b470      	push	{r4, r5, r6}
 8017f32:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8017f36:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8017f3a:	b159      	cbz	r1, 8017f54 <BnrgmTransmitSend+0x24>
 8017f3c:	2a1f      	cmp	r2, #31
 8017f3e:	d809      	bhi.n	8017f54 <BnrgmTransmitSend+0x24>
 8017f40:	2e13      	cmp	r6, #19
 8017f42:	d907      	bls.n	8017f54 <BnrgmTransmitSend+0x24>
 8017f44:	b134      	cbz	r4, 8017f54 <BnrgmTransmitSend+0x24>
 8017f46:	3c01      	subs	r4, #1
 8017f48:	b2e4      	uxtb	r4, r4
 8017f4a:	9604      	str	r6, [sp, #16]
 8017f4c:	9403      	str	r4, [sp, #12]
 8017f4e:	bc70      	pop	{r4, r5, r6}
 8017f50:	f7ff bef2 	b.w	8017d38 <MobleTransmitNow>
 8017f54:	2003      	movs	r0, #3
 8017f56:	bc70      	pop	{r4, r5, r6}
 8017f58:	4770      	bx	lr
	...

08017f5c <MoblePBADVSendControl>:
 8017f5c:	b570      	push	{r4, r5, r6, lr}
 8017f5e:	460d      	mov	r5, r1
 8017f60:	f015 0ffd 	tst.w	r5, #253	@ 0xfd
 8017f64:	4611      	mov	r1, r2
 8017f66:	bf06      	itte	eq
 8017f68:	f8c0 00bc 	streq.w	r0, [r0, #188]	@ 0xbc
 8017f6c:	f890 20b8 	ldrbeq.w	r2, [r0, #184]	@ 0xb8
 8017f70:	f890 2024 	ldrbne.w	r2, [r0, #36]	@ 0x24
 8017f74:	2d03      	cmp	r5, #3
 8017f76:	4604      	mov	r4, r0
 8017f78:	b088      	sub	sp, #32
 8017f7a:	69c0      	ldr	r0, [r0, #28]
 8017f7c:	461e      	mov	r6, r3
 8017f7e:	d042      	beq.n	8018006 <MoblePBADVSendControl+0xaa>
 8017f80:	2d01      	cmp	r5, #1
 8017f82:	d042      	beq.n	801800a <MoblePBADVSendControl+0xae>
 8017f84:	00ab      	lsls	r3, r5, #2
 8017f86:	f043 0303 	orr.w	r3, r3, #3
 8017f8a:	b2db      	uxtb	r3, r3
 8017f8c:	f88d 300f 	strb.w	r3, [sp, #15]
 8017f90:	1df3      	adds	r3, r6, #7
 8017f92:	f88d 3008 	strb.w	r3, [sp, #8]
 8017f96:	2329      	movs	r3, #41	@ 0x29
 8017f98:	f8cd 000a 	str.w	r0, [sp, #10]
 8017f9c:	f88d 200e 	strb.w	r2, [sp, #14]
 8017fa0:	f88d 3009 	strb.w	r3, [sp, #9]
 8017fa4:	b11e      	cbz	r6, 8017fae <MoblePBADVSendControl+0x52>
 8017fa6:	4632      	mov	r2, r6
 8017fa8:	a804      	add	r0, sp, #16
 8017faa:	f00e fec2 	bl	8026d32 <memcpy>
 8017fae:	2303      	movs	r3, #3
 8017fb0:	2114      	movs	r1, #20
 8017fb2:	e9cd 3100 	strd	r3, r1, [sp]
 8017fb6:	f106 0208 	add.w	r2, r6, #8
 8017fba:	2300      	movs	r3, #0
 8017fbc:	b2d2      	uxtb	r2, r2
 8017fbe:	a902      	add	r1, sp, #8
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7ff ffb5 	bl	8017f30 <BnrgmTransmitSend>
 8017fc6:	bb15      	cbnz	r5, 801800e <MoblePBADVSendControl+0xb2>
 8017fc8:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 8017fcc:	b913      	cbnz	r3, 8017fd4 <MoblePBADVSendControl+0x78>
 8017fce:	4620      	mov	r0, r4
 8017fd0:	f7fc ff7c 	bl	8014ecc <MoblePBADVRaiseTransTimeoutTimer>
 8017fd4:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 8017fd8:	490f      	ldr	r1, [pc, #60]	@ (8018018 <MoblePBADVSendControl+0xbc>)
 8017fda:	3301      	adds	r3, #1
 8017fdc:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
 8017fe0:	4622      	mov	r2, r4
 8017fe2:	f504 70aa 	add.w	r0, r4, #340	@ 0x154
 8017fe6:	f7fc ff03 	bl	8014df0 <MoblePalTimerCreate>
 8017fea:	f8d4 0154 	ldr.w	r0, [r4, #340]	@ 0x154
 8017fee:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8017ff2:	f7fc ff67 	bl	8014ec4 <MoblePalTimerStartOnce>
 8017ff6:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 8017ffa:	f7fc fffb 	bl	8014ff4 <MoblePBADVEraseTimer>
 8017ffe:	4620      	mov	r0, r4
 8018000:	f7fc ff76 	bl	8014ef0 <MoblePBADVRaiseLinkIdleTimer>
 8018004:	e005      	b.n	8018012 <MoblePBADVSendControl+0xb6>
 8018006:	2301      	movs	r3, #1
 8018008:	e7c0      	b.n	8017f8c <MoblePBADVSendControl+0x30>
 801800a:	2307      	movs	r3, #7
 801800c:	e7be      	b.n	8017f8c <MoblePBADVSendControl+0x30>
 801800e:	2d01      	cmp	r5, #1
 8018010:	d0f1      	beq.n	8017ff6 <MoblePBADVSendControl+0x9a>
 8018012:	2000      	movs	r0, #0
 8018014:	b008      	add	sp, #32
 8018016:	bd70      	pop	{r4, r5, r6, pc}
 8018018:	0802438d 	.word	0x0802438d

0801801c <BnrgmTransmitStartAdv>:
 801801c:	4b07      	ldr	r3, [pc, #28]	@ (801803c <BnrgmTransmitStartAdv+0x20>)
 801801e:	f8d3 1160 	ldr.w	r1, [r3, #352]	@ 0x160
 8018022:	b149      	cbz	r1, 8018038 <BnrgmTransmitStartAdv+0x1c>
 8018024:	f891 0020 	ldrb.w	r0, [r1, #32]
 8018028:	7fca      	ldrb	r2, [r1, #31]
 801802a:	3800      	subs	r0, #0
 801802c:	f04f 0314 	mov.w	r3, #20
 8018030:	bf18      	it	ne
 8018032:	2001      	movne	r0, #1
 8018034:	f7fd bad0 	b.w	80155d8 <MoblePalBluetoothModeStartAdv>
 8018038:	2002      	movs	r0, #2
 801803a:	4770      	bx	lr
 801803c:	20003f64 	.word	0x20003f64

08018040 <BnrgmTransmitStartScan>:
 8018040:	2802      	cmp	r0, #2
 8018042:	d903      	bls.n	801804c <BnrgmTransmitStartScan+0xc>
 8018044:	2902      	cmp	r1, #2
 8018046:	d901      	bls.n	801804c <BnrgmTransmitStartScan+0xc>
 8018048:	f7fd bb5c 	b.w	8015704 <MoblePalBluetoothModeStartScan>
 801804c:	2002      	movs	r0, #2
 801804e:	4770      	bx	lr

08018050 <MobleQIInit>:
 8018050:	b120      	cbz	r0, 801805c <MobleQIInit+0xc>
 8018052:	2300      	movs	r3, #0
 8018054:	e9c0 3300 	strd	r3, r3, [r0]
 8018058:	4618      	mov	r0, r3
 801805a:	4770      	bx	lr
 801805c:	2003      	movs	r0, #3
 801805e:	4770      	bx	lr

08018060 <MobleQIInsertAfter>:
 8018060:	b140      	cbz	r0, 8018074 <MobleQIInsertAfter+0x14>
 8018062:	b139      	cbz	r1, 8018074 <MobleQIInsertAfter+0x14>
 8018064:	6803      	ldr	r3, [r0, #0]
 8018066:	b103      	cbz	r3, 801806a <MobleQIInsertAfter+0xa>
 8018068:	6059      	str	r1, [r3, #4]
 801806a:	6001      	str	r1, [r0, #0]
 801806c:	e9c1 3000 	strd	r3, r0, [r1]
 8018070:	2000      	movs	r0, #0
 8018072:	4770      	bx	lr
 8018074:	2003      	movs	r0, #3
 8018076:	4770      	bx	lr

08018078 <MoblePalBluetoothPushNotification>:
 8018078:	4a06      	ldr	r2, [pc, #24]	@ (8018094 <MoblePalBluetoothPushNotification+0x1c>)
 801807a:	f8d2 3938 	ldr.w	r3, [r2, #2360]	@ 0x938
 801807e:	4601      	mov	r1, r0
 8018080:	b12b      	cbz	r3, 801808e <MoblePalBluetoothPushNotification+0x16>
 8018082:	4618      	mov	r0, r3
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	2b00      	cmp	r3, #0
 8018088:	d1fb      	bne.n	8018082 <MoblePalBluetoothPushNotification+0xa>
 801808a:	f7ff bfe9 	b.w	8018060 <MobleQIInsertAfter>
 801808e:	f8c2 0938 	str.w	r0, [r2, #2360]	@ 0x938
 8018092:	4770      	bx	lr
 8018094:	2000141c 	.word	0x2000141c

08018098 <MobleQIRemove>:
 8018098:	b150      	cbz	r0, 80180b0 <MobleQIRemove+0x18>
 801809a:	e9d0 3200 	ldrd	r3, r2, [r0]
 801809e:	b102      	cbz	r2, 80180a2 <MobleQIRemove+0xa>
 80180a0:	6013      	str	r3, [r2, #0]
 80180a2:	b103      	cbz	r3, 80180a6 <MobleQIRemove+0xe>
 80180a4:	605a      	str	r2, [r3, #4]
 80180a6:	2300      	movs	r3, #0
 80180a8:	e9c0 3300 	strd	r3, r3, [r0]
 80180ac:	4618      	mov	r0, r3
 80180ae:	4770      	bx	lr
 80180b0:	2003      	movs	r0, #3
 80180b2:	4770      	bx	lr

080180b4 <MoblePalBluetoothPopNotification>:
 80180b4:	b508      	push	{r3, lr}
 80180b6:	4b06      	ldr	r3, [pc, #24]	@ (80180d0 <MoblePalBluetoothPopNotification+0x1c>)
 80180b8:	f8d3 1938 	ldr.w	r1, [r3, #2360]	@ 0x938
 80180bc:	b129      	cbz	r1, 80180ca <MoblePalBluetoothPopNotification+0x16>
 80180be:	680a      	ldr	r2, [r1, #0]
 80180c0:	f8c3 2938 	str.w	r2, [r3, #2360]	@ 0x938
 80180c4:	4608      	mov	r0, r1
 80180c6:	f7ff ffe7 	bl	8018098 <MobleQIRemove>
 80180ca:	4608      	mov	r0, r1
 80180cc:	bd08      	pop	{r3, pc}
 80180ce:	bf00      	nop
 80180d0:	2000141c 	.word	0x2000141c

080180d4 <MobleInitRGN>:
 80180d4:	b138      	cbz	r0, 80180e6 <MobleInitRGN+0x12>
 80180d6:	290b      	cmp	r1, #11
 80180d8:	d905      	bls.n	80180e6 <MobleInitRGN+0x12>
 80180da:	2300      	movs	r3, #0
 80180dc:	e9c0 3300 	strd	r3, r3, [r0]
 80180e0:	6081      	str	r1, [r0, #8]
 80180e2:	4618      	mov	r0, r3
 80180e4:	4770      	bx	lr
 80180e6:	2003      	movs	r0, #3
 80180e8:	4770      	bx	lr

080180ea <MobleSplitRGN>:
 80180ea:	b538      	push	{r3, r4, r5, lr}
 80180ec:	460a      	mov	r2, r1
 80180ee:	4604      	mov	r4, r0
 80180f0:	b910      	cbnz	r0, 80180f8 <MobleSplitRGN+0xe>
 80180f2:	2500      	movs	r5, #0
 80180f4:	4628      	mov	r0, r5
 80180f6:	bd38      	pop	{r3, r4, r5, pc}
 80180f8:	290b      	cmp	r1, #11
 80180fa:	d9fa      	bls.n	80180f2 <MobleSplitRGN+0x8>
 80180fc:	078b      	lsls	r3, r1, #30
 80180fe:	d1f8      	bne.n	80180f2 <MobleSplitRGN+0x8>
 8018100:	6881      	ldr	r1, [r0, #8]
 8018102:	f102 0310 	add.w	r3, r2, #16
 8018106:	f021 0003 	bic.w	r0, r1, #3
 801810a:	4298      	cmp	r0, r3
 801810c:	d9f1      	bls.n	80180f2 <MobleSplitRGN+0x8>
 801810e:	18a5      	adds	r5, r4, r2
 8018110:	1a89      	subs	r1, r1, r2
 8018112:	4628      	mov	r0, r5
 8018114:	f7ff ffde 	bl	80180d4 <MobleInitRGN>
 8018118:	2801      	cmp	r0, #1
 801811a:	d8ea      	bhi.n	80180f2 <MobleSplitRGN+0x8>
 801811c:	60a2      	str	r2, [r4, #8]
 801811e:	4629      	mov	r1, r5
 8018120:	4620      	mov	r0, r4
 8018122:	f7ff ff9d 	bl	8018060 <MobleQIInsertAfter>
 8018126:	e7e5      	b.n	80180f4 <MobleSplitRGN+0xa>

08018128 <MobleMemAlloc>:
 8018128:	b538      	push	{r3, r4, r5, lr}
 801812a:	b908      	cbnz	r0, 8018130 <MobleMemAlloc+0x8>
 801812c:	2000      	movs	r0, #0
 801812e:	bd38      	pop	{r3, r4, r5, pc}
 8018130:	4c1e      	ldr	r4, [pc, #120]	@ (80181ac <MobleMemAlloc+0x84>)
 8018132:	f8d4 393c 	ldr.w	r3, [r4, #2364]	@ 0x93c
 8018136:	3003      	adds	r0, #3
 8018138:	f020 0503 	bic.w	r5, r0, #3
 801813c:	b973      	cbnz	r3, 801815c <MobleMemAlloc+0x34>
 801813e:	f8d4 2940 	ldr.w	r2, [r4, #2368]	@ 0x940
 8018142:	f8b4 1944 	ldrh.w	r1, [r4, #2372]	@ 0x944
 8018146:	f8c4 293c 	str.w	r2, [r4, #2364]	@ 0x93c
 801814a:	4610      	mov	r0, r2
 801814c:	f7ff ffc2 	bl	80180d4 <MobleInitRGN>
 8018150:	2801      	cmp	r0, #1
 8018152:	d8eb      	bhi.n	801812c <MobleMemAlloc+0x4>
 8018154:	210c      	movs	r1, #12
 8018156:	4610      	mov	r0, r2
 8018158:	f7ff ffc7 	bl	80180ea <MobleSplitRGN>
 801815c:	f8d4 393c 	ldr.w	r3, [r4, #2364]	@ 0x93c
 8018160:	f105 010c 	add.w	r1, r5, #12
 8018164:	2400      	movs	r4, #0
 8018166:	b993      	cbnz	r3, 801818e <MobleMemAlloc+0x66>
 8018168:	2c00      	cmp	r4, #0
 801816a:	d0df      	beq.n	801812c <MobleMemAlloc+0x4>
 801816c:	68a3      	ldr	r3, [r4, #8]
 801816e:	351c      	adds	r5, #28
 8018170:	42ab      	cmp	r3, r5
 8018172:	d302      	bcc.n	801817a <MobleMemAlloc+0x52>
 8018174:	4620      	mov	r0, r4
 8018176:	f7ff ffb8 	bl	80180ea <MobleSplitRGN>
 801817a:	68a3      	ldr	r3, [r4, #8]
 801817c:	f043 0301 	orr.w	r3, r3, #1
 8018180:	60a3      	str	r3, [r4, #8]
 8018182:	4620      	mov	r0, r4
 8018184:	f7ff ff88 	bl	8018098 <MobleQIRemove>
 8018188:	f104 000c 	add.w	r0, r4, #12
 801818c:	e7cf      	b.n	801812e <MobleMemAlloc+0x6>
 801818e:	689a      	ldr	r2, [r3, #8]
 8018190:	428a      	cmp	r2, r1
 8018192:	d009      	beq.n	80181a8 <MobleMemAlloc+0x80>
 8018194:	d304      	bcc.n	80181a0 <MobleMemAlloc+0x78>
 8018196:	b12c      	cbz	r4, 80181a4 <MobleMemAlloc+0x7c>
 8018198:	68a0      	ldr	r0, [r4, #8]
 801819a:	4282      	cmp	r2, r0
 801819c:	bf38      	it	cc
 801819e:	461c      	movcc	r4, r3
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	e7e0      	b.n	8018166 <MobleMemAlloc+0x3e>
 80181a4:	461c      	mov	r4, r3
 80181a6:	e7fb      	b.n	80181a0 <MobleMemAlloc+0x78>
 80181a8:	461c      	mov	r4, r3
 80181aa:	e7df      	b.n	801816c <MobleMemAlloc+0x44>
 80181ac:	2000141c 	.word	0x2000141c

080181b0 <MoblePalBluetoothGattSendNotification>:
 80181b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80181b4:	461d      	mov	r5, r3
 80181b6:	4b1f      	ldr	r3, [pc, #124]	@ (8018234 <MoblePalBluetoothGattSendNotification+0x84>)
 80181b8:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 80181bc:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80181c0:	f013 0f3c 	tst.w	r3, #60	@ 0x3c
 80181c4:	4680      	mov	r8, r0
 80181c6:	460f      	mov	r7, r1
 80181c8:	4616      	mov	r6, r2
 80181ca:	d103      	bne.n	80181d4 <MoblePalBluetoothGattSendNotification+0x24>
 80181cc:	2002      	movs	r0, #2
 80181ce:	b003      	add	sp, #12
 80181d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181d4:	4c18      	ldr	r4, [pc, #96]	@ (8018238 <MoblePalBluetoothGattSendNotification+0x88>)
 80181d6:	7aa3      	ldrb	r3, [r4, #10]
 80181d8:	2b01      	cmp	r3, #1
 80181da:	d10e      	bne.n	80181fa <MoblePalBluetoothGattSendNotification+0x4a>
 80181dc:	9600      	str	r6, [sp, #0]
 80181de:	462b      	mov	r3, r5
 80181e0:	2200      	movs	r2, #0
 80181e2:	4639      	mov	r1, r7
 80181e4:	4640      	mov	r0, r8
 80181e6:	f7f9 ff45 	bl	8012074 <aci_gatt_update_char_value>
 80181ea:	2893      	cmp	r0, #147	@ 0x93
 80181ec:	d0f6      	beq.n	80181dc <MoblePalBluetoothGattSendNotification+0x2c>
 80181ee:	2800      	cmp	r0, #0
 80181f0:	d0ed      	beq.n	80181ce <MoblePalBluetoothGattSendNotification+0x1e>
 80181f2:	2864      	cmp	r0, #100	@ 0x64
 80181f4:	d1ea      	bne.n	80181cc <MoblePalBluetoothGattSendNotification+0x1c>
 80181f6:	2300      	movs	r3, #0
 80181f8:	72a3      	strb	r3, [r4, #10]
 80181fa:	f1b9 0f00 	cmp.w	r9, #0
 80181fe:	d014      	beq.n	801822a <MoblePalBluetoothGattSendNotification+0x7a>
 8018200:	f105 0010 	add.w	r0, r5, #16
 8018204:	f7ff ff90 	bl	8018128 <MobleMemAlloc>
 8018208:	4604      	mov	r4, r0
 801820a:	b180      	cbz	r0, 801822e <MoblePalBluetoothGattSendNotification+0x7e>
 801820c:	f7ff ff20 	bl	8018050 <MobleQIInit>
 8018210:	462a      	mov	r2, r5
 8018212:	f8a4 8008 	strh.w	r8, [r4, #8]
 8018216:	8167      	strh	r7, [r4, #10]
 8018218:	4631      	mov	r1, r6
 801821a:	f104 000d 	add.w	r0, r4, #13
 801821e:	f00e fcbd 	bl	8026b9c <memmove>
 8018222:	7325      	strb	r5, [r4, #12]
 8018224:	4620      	mov	r0, r4
 8018226:	f7ff ff27 	bl	8018078 <MoblePalBluetoothPushNotification>
 801822a:	2001      	movs	r0, #1
 801822c:	e7cf      	b.n	80181ce <MoblePalBluetoothGattSendNotification+0x1e>
 801822e:	2004      	movs	r0, #4
 8018230:	e7cd      	b.n	80181ce <MoblePalBluetoothGattSendNotification+0x1e>
 8018232:	bf00      	nop
 8018234:	2000141c 	.word	0x2000141c
 8018238:	20000008 	.word	0x20000008

0801823c <MobleMemFree>:
 801823c:	b570      	push	{r4, r5, r6, lr}
 801823e:	b380      	cbz	r0, 80182a2 <MobleMemFree+0x66>
 8018240:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018244:	07da      	lsls	r2, r3, #31
 8018246:	d52c      	bpl.n	80182a2 <MobleMemFree+0x66>
 8018248:	f023 0301 	bic.w	r3, r3, #1
 801824c:	f840 3c04 	str.w	r3, [r0, #-4]
 8018250:	4b15      	ldr	r3, [pc, #84]	@ (80182a8 <MobleMemFree+0x6c>)
 8018252:	f8d3 593c 	ldr.w	r5, [r3, #2364]	@ 0x93c
 8018256:	f1a0 010c 	sub.w	r1, r0, #12
 801825a:	4628      	mov	r0, r5
 801825c:	f7ff ff00 	bl	8018060 <MobleQIInsertAfter>
 8018260:	6829      	ldr	r1, [r5, #0]
 8018262:	2000      	movs	r0, #0
 8018264:	b1d1      	cbz	r1, 801829c <MobleMemFree+0x60>
 8018266:	2800      	cmp	r0, #0
 8018268:	d1fa      	bne.n	8018260 <MobleMemFree+0x24>
 801826a:	680c      	ldr	r4, [r1, #0]
 801826c:	b104      	cbz	r4, 8018270 <MobleMemFree+0x34>
 801826e:	b108      	cbz	r0, 8018274 <MobleMemFree+0x38>
 8018270:	6809      	ldr	r1, [r1, #0]
 8018272:	e7f7      	b.n	8018264 <MobleMemFree+0x28>
 8018274:	688a      	ldr	r2, [r1, #8]
 8018276:	68a3      	ldr	r3, [r4, #8]
 8018278:	188e      	adds	r6, r1, r2
 801827a:	42b4      	cmp	r4, r6
 801827c:	d107      	bne.n	801828e <MobleMemFree+0x52>
 801827e:	4413      	add	r3, r2
 8018280:	608b      	str	r3, [r1, #8]
 8018282:	4620      	mov	r0, r4
 8018284:	f7ff ff08 	bl	8018098 <MobleQIRemove>
 8018288:	2001      	movs	r0, #1
 801828a:	6824      	ldr	r4, [r4, #0]
 801828c:	e7ee      	b.n	801826c <MobleMemFree+0x30>
 801828e:	18e6      	adds	r6, r4, r3
 8018290:	42b1      	cmp	r1, r6
 8018292:	d1fa      	bne.n	801828a <MobleMemFree+0x4e>
 8018294:	4413      	add	r3, r2
 8018296:	60a3      	str	r3, [r4, #8]
 8018298:	4608      	mov	r0, r1
 801829a:	e7f3      	b.n	8018284 <MobleMemFree+0x48>
 801829c:	2801      	cmp	r0, #1
 801829e:	d0df      	beq.n	8018260 <MobleMemFree+0x24>
 80182a0:	bd70      	pop	{r4, r5, r6, pc}
 80182a2:	2003      	movs	r0, #3
 80182a4:	e7fc      	b.n	80182a0 <MobleMemFree+0x64>
 80182a6:	bf00      	nop
 80182a8:	2000141c 	.word	0x2000141c

080182ac <MoblePalBluetoothFreeAllNotifications>:
 80182ac:	b508      	push	{r3, lr}
 80182ae:	f7ff ff01 	bl	80180b4 <MoblePalBluetoothPopNotification>
 80182b2:	b900      	cbnz	r0, 80182b6 <MoblePalBluetoothFreeAllNotifications+0xa>
 80182b4:	bd08      	pop	{r3, pc}
 80182b6:	f7ff ffc1 	bl	801823c <MobleMemFree>
 80182ba:	e7f8      	b.n	80182ae <MoblePalBluetoothFreeAllNotifications+0x2>

080182bc <MoblePalBluetoothProcessNotifications>:
 80182bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80182be:	4c0a      	ldr	r4, [pc, #40]	@ (80182e8 <MoblePalBluetoothProcessNotifications+0x2c>)
 80182c0:	2500      	movs	r5, #0
 80182c2:	f8d4 2938 	ldr.w	r2, [r4, #2360]	@ 0x938
 80182c6:	b90a      	cbnz	r2, 80182cc <MoblePalBluetoothProcessNotifications+0x10>
 80182c8:	b003      	add	sp, #12
 80182ca:	bd30      	pop	{r4, r5, pc}
 80182cc:	7b13      	ldrb	r3, [r2, #12]
 80182ce:	8951      	ldrh	r1, [r2, #10]
 80182d0:	8910      	ldrh	r0, [r2, #8]
 80182d2:	9500      	str	r5, [sp, #0]
 80182d4:	320d      	adds	r2, #13
 80182d6:	f7ff ff6b 	bl	80181b0 <MoblePalBluetoothGattSendNotification>
 80182da:	2800      	cmp	r0, #0
 80182dc:	d1f4      	bne.n	80182c8 <MoblePalBluetoothProcessNotifications+0xc>
 80182de:	f7ff fee9 	bl	80180b4 <MoblePalBluetoothPopNotification>
 80182e2:	f7ff ffab 	bl	801823c <MobleMemFree>
 80182e6:	e7ec      	b.n	80182c2 <MoblePalBluetoothProcessNotifications+0x6>
 80182e8:	2000141c 	.word	0x2000141c

080182ec <MoblePalBluetoothProcess>:
 80182ec:	b513      	push	{r0, r1, r4, lr}
 80182ee:	4c19      	ldr	r4, [pc, #100]	@ (8018354 <MoblePalBluetoothProcess+0x68>)
 80182f0:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 80182f4:	075b      	lsls	r3, r3, #29
 80182f6:	d525      	bpl.n	8018344 <MoblePalBluetoothProcess+0x58>
 80182f8:	f7ee fc14 	bl	8006b24 <HAL_GetTick>
 80182fc:	f8d4 3948 	ldr.w	r3, [r4, #2376]	@ 0x948
 8018300:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 8018304:	4283      	cmp	r3, r0
 8018306:	d20a      	bcs.n	801831e <MoblePalBluetoothProcess+0x32>
 8018308:	f8c4 3948 	str.w	r3, [r4, #2376]	@ 0x948
 801830c:	23c8      	movs	r3, #200	@ 0xc8
 801830e:	9300      	str	r3, [sp, #0]
 8018310:	f8b4 0382 	ldrh.w	r0, [r4, #898]	@ 0x382
 8018314:	2300      	movs	r3, #0
 8018316:	2278      	movs	r2, #120	@ 0x78
 8018318:	2150      	movs	r1, #80	@ 0x50
 801831a:	f7fa fc9a 	bl	8012c52 <aci_l2cap_connection_parameter_update_req>
 801831e:	f8d4 2350 	ldr.w	r2, [r4, #848]	@ 0x350
 8018322:	4b0d      	ldr	r3, [pc, #52]	@ (8018358 <MoblePalBluetoothProcess+0x6c>)
 8018324:	429a      	cmp	r2, r3
 8018326:	d90d      	bls.n	8018344 <MoblePalBluetoothProcess+0x58>
 8018328:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 801832c:	f023 0304 	bic.w	r3, r3, #4
 8018330:	f043 0308 	orr.w	r3, r3, #8
 8018334:	f8c4 3354 	str.w	r3, [r4, #852]	@ 0x354
 8018338:	f8d4 3358 	ldr.w	r3, [r4, #856]	@ 0x358
 801833c:	b113      	cbz	r3, 8018344 <MoblePalBluetoothProcess+0x58>
 801833e:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 8018342:	4798      	blx	r3
 8018344:	f7ff ffba 	bl	80182bc <MoblePalBluetoothProcessNotifications>
 8018348:	b002      	add	sp, #8
 801834a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801834e:	f7fd b881 	b.w	8015454 <MoblePalBluetoothProcessDisconnection>
 8018352:	bf00      	nop
 8018354:	2000141c 	.word	0x2000141c
 8018358:	00017317 	.word	0x00017317

0801835c <MoblePalProcess>:
 801835c:	b508      	push	{r3, lr}
 801835e:	f7fc fec1 	bl	80150e4 <MoblePalTimerProcess>
 8018362:	f7ff ffc3 	bl	80182ec <MoblePalBluetoothProcess>
 8018366:	f7ed ff61 	bl	800622c <PalNvmProcess>
 801836a:	2000      	movs	r0, #0
 801836c:	bd08      	pop	{r3, pc}

0801836e <MobleModelBluemeshNewPacket_ExtCall>:
 801836e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018372:	4606      	mov	r6, r0
 8018374:	200c      	movs	r0, #12
 8018376:	460c      	mov	r4, r1
 8018378:	461f      	mov	r7, r3
 801837a:	f7ff fed5 	bl	8018128 <MobleMemAlloc>
 801837e:	7007      	strb	r7, [r0, #0]
 8018380:	8923      	ldrh	r3, [r4, #8]
 8018382:	8083      	strh	r3, [r0, #4]
 8018384:	8963      	ldrh	r3, [r4, #10]
 8018386:	80c3      	strh	r3, [r0, #6]
 8018388:	78e3      	ldrb	r3, [r4, #3]
 801838a:	7203      	strb	r3, [r0, #8]
 801838c:	7da3      	ldrb	r3, [r4, #22]
 801838e:	7243      	strb	r3, [r0, #9]
 8018390:	7c23      	ldrb	r3, [r4, #16]
 8018392:	72c3      	strb	r3, [r0, #11]
 8018394:	7b23      	ldrb	r3, [r4, #12]
 8018396:	7283      	strb	r3, [r0, #10]
 8018398:	69e7      	ldr	r7, [r4, #28]
 801839a:	4605      	mov	r5, r0
 801839c:	b3ae      	cbz	r6, 801840a <MobleModelBluemeshNewPacket_ExtCall+0x9c>
 801839e:	2f02      	cmp	r7, #2
 80183a0:	d933      	bls.n	801840a <MobleModelBluemeshNewPacket_ExtCall+0x9c>
 80183a2:	a802      	add	r0, sp, #8
 80183a4:	a903      	add	r1, sp, #12
 80183a6:	f7ed fc71 	bl	8005c8c <GetApplicationVendorModels>
 80183aa:	e9dd c302 	ldrd	ip, r3, [sp, #8]
 80183ae:	2000      	movs	r0, #0
 80183b0:	4602      	mov	r2, r0
 80183b2:	f04f 0e0c 	mov.w	lr, #12
 80183b6:	4293      	cmp	r3, r2
 80183b8:	fb0e c602 	mla	r6, lr, r2, ip
 80183bc:	d101      	bne.n	80183c2 <MobleModelBluemeshNewPacket_ExtCall+0x54>
 80183be:	2402      	movs	r4, #2
 80183c0:	e019      	b.n	80183f6 <MobleModelBluemeshNewPacket_ExtCall+0x88>
 80183c2:	f894 1020 	ldrb.w	r1, [r4, #32]
 80183c6:	f001 08c0 	and.w	r8, r1, #192	@ 0xc0
 80183ca:	f1b8 0fc0 	cmp.w	r8, #192	@ 0xc0
 80183ce:	d119      	bne.n	8018404 <MobleModelBluemeshNewPacket_ExtCall+0x96>
 80183d0:	f8b4 8021 	ldrh.w	r8, [r4, #33]	@ 0x21
 80183d4:	f1b8 0f30 	cmp.w	r8, #48	@ 0x30
 80183d8:	d114      	bne.n	8018404 <MobleModelBluemeshNewPacket_ExtCall+0x96>
 80183da:	b100      	cbz	r0, 80183de <MobleModelBluemeshNewPacket_ExtCall+0x70>
 80183dc:	9602      	str	r6, [sp, #8]
 80183de:	2300      	movs	r3, #0
 80183e0:	9300      	str	r3, [sp, #0]
 80183e2:	9b02      	ldr	r3, [sp, #8]
 80183e4:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 80183e8:	689e      	ldr	r6, [r3, #8]
 80183ea:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80183ee:	1efb      	subs	r3, r7, #3
 80183f0:	4628      	mov	r0, r5
 80183f2:	47b0      	blx	r6
 80183f4:	4604      	mov	r4, r0
 80183f6:	4628      	mov	r0, r5
 80183f8:	f7ff ff20 	bl	801823c <MobleMemFree>
 80183fc:	4620      	mov	r0, r4
 80183fe:	b004      	add	sp, #16
 8018400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018404:	3201      	adds	r2, #1
 8018406:	2001      	movs	r0, #1
 8018408:	e7d5      	b.n	80183b6 <MobleModelBluemeshNewPacket_ExtCall+0x48>
 801840a:	2403      	movs	r4, #3
 801840c:	e7f6      	b.n	80183fc <MobleModelBluemeshNewPacket_ExtCall+0x8e>
	...

08018410 <mem_alloc_init>:
 8018410:	6a03      	ldr	r3, [r0, #32]
 8018412:	4a0e      	ldr	r2, [pc, #56]	@ (801844c <mem_alloc_init+0x3c>)
 8018414:	6819      	ldr	r1, [r3, #0]
 8018416:	f8c2 1940 	str.w	r1, [r2, #2368]	@ 0x940
 801841a:	8899      	ldrh	r1, [r3, #4]
 801841c:	f8a2 1944 	strh.w	r1, [r2, #2372]	@ 0x944
 8018420:	8919      	ldrh	r1, [r3, #8]
 8018422:	230c      	movs	r3, #12
 8018424:	fbb1 f1f3 	udiv	r1, r1, r3
 8018428:	1c4b      	adds	r3, r1, #1
 801842a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801842e:	009b      	lsls	r3, r3, #2
 8018430:	b29b      	uxth	r3, r3
 8018432:	1f18      	subs	r0, r3, #4
 8018434:	f8a2 394c 	strh.w	r3, [r2, #2380]	@ 0x94c
 8018438:	3102      	adds	r1, #2
 801843a:	3b05      	subs	r3, #5
 801843c:	f8a2 094e 	strh.w	r0, [r2, #2382]	@ 0x94e
 8018440:	f8a2 3950 	strh.w	r3, [r2, #2384]	@ 0x950
 8018444:	f882 12dc 	strb.w	r1, [r2, #732]	@ 0x2dc
 8018448:	4770      	bx	lr
 801844a:	bf00      	nop
 801844c:	2000141c 	.word	0x2000141c

08018450 <MobleInputStreamGetBigEndian>:
 8018450:	4603      	mov	r3, r0
 8018452:	b530      	push	{r4, r5, lr}
 8018454:	4608      	mov	r0, r1
 8018456:	2400      	movs	r4, #0
 8018458:	1859      	adds	r1, r3, r1
 801845a:	428b      	cmp	r3, r1
 801845c:	6014      	str	r4, [r2, #0]
 801845e:	d100      	bne.n	8018462 <MobleInputStreamGetBigEndian+0x12>
 8018460:	bd30      	pop	{r4, r5, pc}
 8018462:	0224      	lsls	r4, r4, #8
 8018464:	6014      	str	r4, [r2, #0]
 8018466:	f813 5b01 	ldrb.w	r5, [r3], #1
 801846a:	432c      	orrs	r4, r5
 801846c:	e7f5      	b.n	801845a <MobleInputStreamGetBigEndian+0xa>

0801846e <MobleInputStreamGetLittleEndian>:
 801846e:	b510      	push	{r4, lr}
 8018470:	00cb      	lsls	r3, r1, #3
 8018472:	f04f 34ff 	mov.w	r4, #4294967295
 8018476:	409c      	lsls	r4, r3
 8018478:	6803      	ldr	r3, [r0, #0]
 801847a:	ea23 0304 	bic.w	r3, r3, r4
 801847e:	6013      	str	r3, [r2, #0]
 8018480:	4608      	mov	r0, r1
 8018482:	bd10      	pop	{r4, pc}

08018484 <MobleOutputStreamPutArray>:
 8018484:	b538      	push	{r3, r4, r5, lr}
 8018486:	4614      	mov	r4, r2
 8018488:	b128      	cbz	r0, 8018496 <MobleOutputStreamPutArray+0x12>
 801848a:	b131      	cbz	r1, 801849a <MobleOutputStreamPutArray+0x16>
 801848c:	b10a      	cbz	r2, 8018492 <MobleOutputStreamPutArray+0xe>
 801848e:	f00e fb85 	bl	8026b9c <memmove>
 8018492:	4620      	mov	r0, r4
 8018494:	bd38      	pop	{r3, r4, r5, pc}
 8018496:	4604      	mov	r4, r0
 8018498:	e7fb      	b.n	8018492 <MobleOutputStreamPutArray+0xe>
 801849a:	460c      	mov	r4, r1
 801849c:	e7f9      	b.n	8018492 <MobleOutputStreamPutArray+0xe>

0801849e <MobleOutputStreamPutBigEndian>:
 801849e:	4402      	add	r2, r0
 80184a0:	4282      	cmp	r2, r0
 80184a2:	d101      	bne.n	80184a8 <MobleOutputStreamPutBigEndian+0xa>
 80184a4:	2000      	movs	r0, #0
 80184a6:	4770      	bx	lr
 80184a8:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80184ac:	0a09      	lsrs	r1, r1, #8
 80184ae:	e7f7      	b.n	80184a0 <MobleOutputStreamPutBigEndian+0x2>

080184b0 <MoblePalCryptoEncryptNetwork>:
 80184b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184b4:	b0a3      	sub	sp, #140	@ 0x8c
 80184b6:	4605      	mov	r5, r0
 80184b8:	f89d 60b0 	ldrb.w	r6, [sp, #176]	@ 0xb0
 80184bc:	4692      	mov	sl, r2
 80184be:	461f      	mov	r7, r3
 80184c0:	4689      	mov	r9, r1
 80184c2:	b931      	cbnz	r1, 80184d2 <MoblePalCryptoEncryptNetwork+0x22>
 80184c4:	4ba3      	ldr	r3, [pc, #652]	@ (8018754 <MoblePalCryptoEncryptNetwork+0x2a4>)
 80184c6:	4aa4      	ldr	r2, [pc, #656]	@ (8018758 <MoblePalCryptoEncryptNetwork+0x2a8>)
 80184c8:	f44f 61b8 	mov.w	r1, #1472	@ 0x5c0
 80184cc:	48a3      	ldr	r0, [pc, #652]	@ (801875c <MoblePalCryptoEncryptNetwork+0x2ac>)
 80184ce:	f00d fbe1 	bl	8025c94 <__assert_func>
 80184d2:	b920      	cbnz	r0, 80184de <MoblePalCryptoEncryptNetwork+0x2e>
 80184d4:	4ba2      	ldr	r3, [pc, #648]	@ (8018760 <MoblePalCryptoEncryptNetwork+0x2b0>)
 80184d6:	4aa0      	ldr	r2, [pc, #640]	@ (8018758 <MoblePalCryptoEncryptNetwork+0x2a8>)
 80184d8:	f240 51c1 	movw	r1, #1473	@ 0x5c1
 80184dc:	e7f6      	b.n	80184cc <MoblePalCryptoEncryptNetwork+0x1c>
 80184de:	2b10      	cmp	r3, #16
 80184e0:	d904      	bls.n	80184ec <MoblePalCryptoEncryptNetwork+0x3c>
 80184e2:	4ba0      	ldr	r3, [pc, #640]	@ (8018764 <MoblePalCryptoEncryptNetwork+0x2b4>)
 80184e4:	4a9c      	ldr	r2, [pc, #624]	@ (8018758 <MoblePalCryptoEncryptNetwork+0x2a8>)
 80184e6:	f240 51c2 	movw	r1, #1474	@ 0x5c2
 80184ea:	e7ef      	b.n	80184cc <MoblePalCryptoEncryptNetwork+0x1c>
 80184ec:	4a9e      	ldr	r2, [pc, #632]	@ (8018768 <MoblePalCryptoEncryptNetwork+0x2b8>)
 80184ee:	2300      	movs	r3, #0
 80184f0:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 80184f4:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 80184f8:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 80184fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80184fe:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8018502:	f892 365c 	ldrb.w	r3, [r2, #1628]	@ 0x65c
 8018506:	f8d2 8658 	ldr.w	r8, [r2, #1624]	@ 0x658
 801850a:	2b01      	cmp	r3, #1
 801850c:	d108      	bne.n	8018520 <MoblePalCryptoEncryptNetwork+0x70>
 801850e:	f1b8 0f00 	cmp.w	r8, #0
 8018512:	d103      	bne.n	801851c <MoblePalCryptoEncryptNetwork+0x6c>
 8018514:	2002      	movs	r0, #2
 8018516:	b023      	add	sp, #140	@ 0x8c
 8018518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801851c:	f108 38ff 	add.w	r8, r8, #4294967295
 8018520:	8b6c      	ldrh	r4, [r5, #26]
 8018522:	f014 0420 	ands.w	r4, r4, #32
 8018526:	f000 80b9 	beq.w	801869c <MoblePalCryptoEncryptNetwork+0x1ec>
 801852a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 801852e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018532:	f8d3 1630 	ldr.w	r1, [r3, #1584]	@ 0x630
 8018536:	2900      	cmp	r1, #0
 8018538:	d0ec      	beq.n	8018514 <MoblePalCryptoEncryptNetwork+0x64>
 801853a:	f891 3042 	ldrb.w	r3, [r1, #66]	@ 0x42
 801853e:	207c      	movs	r0, #124	@ 0x7c
 8018540:	fb00 2303 	mla	r3, r0, r3, r2
 8018544:	f893 2445 	ldrb.w	r2, [r3, #1093]	@ 0x445
 8018548:	2a01      	cmp	r2, #1
 801854a:	d003      	beq.n	8018554 <MoblePalCryptoEncryptNetwork+0xa4>
 801854c:	f893 3446 	ldrb.w	r3, [r3, #1094]	@ 0x446
 8018550:	2b01      	cmp	r3, #1
 8018552:	d1df      	bne.n	8018514 <MoblePalCryptoEncryptNetwork+0x64>
 8018554:	2e00      	cmp	r6, #0
 8018556:	f040 809a 	bne.w	801868e <MoblePalCryptoEncryptNetwork+0x1de>
 801855a:	f891 4040 	ldrb.w	r4, [r1, #64]	@ 0x40
 801855e:	f101 0620 	add.w	r6, r1, #32
 8018562:	468b      	mov	fp, r1
 8018564:	8ae9      	ldrh	r1, [r5, #22]
 8018566:	2202      	movs	r2, #2
 8018568:	a816      	add	r0, sp, #88	@ 0x58
 801856a:	f7ff ff98 	bl	801849e <MobleOutputStreamPutBigEndian>
 801856e:	463a      	mov	r2, r7
 8018570:	4651      	mov	r1, sl
 8018572:	f10d 005a 	add.w	r0, sp, #90	@ 0x5a
 8018576:	f7ff ff85 	bl	8018484 <MobleOutputStreamPutArray>
 801857a:	7ba9      	ldrb	r1, [r5, #14]
 801857c:	7bea      	ldrb	r2, [r5, #15]
 801857e:	3900      	subs	r1, #0
 8018580:	bf18      	it	ne
 8018582:	2101      	movne	r1, #1
 8018584:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8018588:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 801858c:	8b6a      	ldrh	r2, [r5, #26]
 801858e:	6929      	ldr	r1, [r5, #16]
 8018590:	0613      	lsls	r3, r2, #24
 8018592:	bf44      	itt	mi
 8018594:	2203      	movmi	r2, #3
 8018596:	f8ad 2028 	strhmi.w	r2, [sp, #40]	@ 0x28
 801859a:	f10d 002a 	add.w	r0, sp, #42	@ 0x2a
 801859e:	2203      	movs	r2, #3
 80185a0:	f7ff ff7d 	bl	801849e <MobleOutputStreamPutBigEndian>
 80185a4:	8aa9      	ldrh	r1, [r5, #20]
 80185a6:	2202      	movs	r2, #2
 80185a8:	f10d 002d 	add.w	r0, sp, #45	@ 0x2d
 80185ac:	f7ff ff77 	bl	801849e <MobleOutputStreamPutBigEndian>
 80185b0:	2204      	movs	r2, #4
 80185b2:	4641      	mov	r1, r8
 80185b4:	f10d 0031 	add.w	r0, sp, #49	@ 0x31
 80185b8:	f7ff ff71 	bl	801849e <MobleOutputStreamPutBigEndian>
 80185bc:	7baa      	ldrb	r2, [r5, #14]
 80185be:	2a00      	cmp	r2, #0
 80185c0:	f04f 020d 	mov.w	r2, #13
 80185c4:	f107 0a02 	add.w	sl, r7, #2
 80185c8:	ab16      	add	r3, sp, #88	@ 0x58
 80185ca:	9201      	str	r2, [sp, #4]
 80185cc:	f04f 0700 	mov.w	r7, #0
 80185d0:	aa0a      	add	r2, sp, #40	@ 0x28
 80185d2:	9200      	str	r2, [sp, #0]
 80185d4:	9302      	str	r3, [sp, #8]
 80185d6:	bf14      	ite	ne
 80185d8:	2208      	movne	r2, #8
 80185da:	2204      	moveq	r2, #4
 80185dc:	e9cd 7704 	strd	r7, r7, [sp, #16]
 80185e0:	f8cd a00c 	str.w	sl, [sp, #12]
 80185e4:	465b      	mov	r3, fp
 80185e6:	a908      	add	r1, sp, #32
 80185e8:	a81b      	add	r0, sp, #108	@ 0x6c
 80185ea:	f7fe faf9 	bl	8016be0 <MoblePalCryptoAesCcmEncrypt>
 80185ee:	2801      	cmp	r0, #1
 80185f0:	d890      	bhi.n	8018514 <MoblePalCryptoEncryptNetwork+0x64>
 80185f2:	7bab      	ldrb	r3, [r5, #14]
 80185f4:	42bb      	cmp	r3, r7
 80185f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80185f8:	bf14      	ite	ne
 80185fa:	2208      	movne	r2, #8
 80185fc:	2204      	moveq	r2, #4
 80185fe:	a908      	add	r1, sp, #32
 8018600:	eb03 000a 	add.w	r0, r3, sl
 8018604:	f00e fb95 	bl	8026d32 <memcpy>
 8018608:	2204      	movs	r2, #4
 801860a:	4641      	mov	r1, r8
 801860c:	f10d 003d 	add.w	r0, sp, #61	@ 0x3d
 8018610:	f7ff ff45 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018614:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8018616:	f8bd 2070 	ldrh.w	r2, [sp, #112]	@ 0x70
 801861a:	f89d 3072 	ldrb.w	r3, [sp, #114]	@ 0x72
 801861e:	f8cd 0041 	str.w	r0, [sp, #65]	@ 0x41
 8018622:	f8ad 2045 	strh.w	r2, [sp, #69]	@ 0x45
 8018626:	f88d 3047 	strb.w	r3, [sp, #71]	@ 0x47
 801862a:	aa0e      	add	r2, sp, #56	@ 0x38
 801862c:	2310      	movs	r3, #16
 801862e:	4631      	mov	r1, r6
 8018630:	a812      	add	r0, sp, #72	@ 0x48
 8018632:	f7fe fb01 	bl	8016c38 <MoblePalCryptoAesEcb>
 8018636:	7baa      	ldrb	r2, [r5, #14]
 8018638:	7beb      	ldrb	r3, [r5, #15]
 801863a:	6929      	ldr	r1, [r5, #16]
 801863c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8018640:	f10d 0019 	add.w	r0, sp, #25
 8018644:	2203      	movs	r2, #3
 8018646:	f88d 3018 	strb.w	r3, [sp, #24]
 801864a:	f7ff ff28 	bl	801849e <MobleOutputStreamPutBigEndian>
 801864e:	8aa9      	ldrh	r1, [r5, #20]
 8018650:	2202      	movs	r2, #2
 8018652:	a807      	add	r0, sp, #28
 8018654:	f7ff ff23 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018658:	2206      	movs	r2, #6
 801865a:	a912      	add	r1, sp, #72	@ 0x48
 801865c:	a806      	add	r0, sp, #24
 801865e:	f7fe fafc 	bl	8016c5a <MoblePalCryptoXor>
 8018662:	4648      	mov	r0, r9
 8018664:	ea44 14c8 	orr.w	r4, r4, r8, lsl #7
 8018668:	2206      	movs	r2, #6
 801866a:	a906      	add	r1, sp, #24
 801866c:	f800 4b01 	strb.w	r4, [r0], #1
 8018670:	f7ff ff08 	bl	8018484 <MobleOutputStreamPutArray>
 8018674:	7bab      	ldrb	r3, [r5, #14]
 8018676:	42bb      	cmp	r3, r7
 8018678:	bf14      	ite	ne
 801867a:	2208      	movne	r2, #8
 801867c:	2204      	moveq	r2, #4
 801867e:	4452      	add	r2, sl
 8018680:	a91b      	add	r1, sp, #108	@ 0x6c
 8018682:	f109 0007 	add.w	r0, r9, #7
 8018686:	f7ff fefd 	bl	8018484 <MobleOutputStreamPutArray>
 801868a:	4638      	mov	r0, r7
 801868c:	e743      	b.n	8018516 <MoblePalCryptoEncryptNetwork+0x66>
 801868e:	f891 4041 	ldrb.w	r4, [r1, #65]	@ 0x41
 8018692:	f101 0630 	add.w	r6, r1, #48	@ 0x30
 8018696:	f101 0b10 	add.w	fp, r1, #16
 801869a:	e763      	b.n	8018564 <MoblePalCryptoEncryptNetwork+0xb4>
 801869c:	7f28      	ldrb	r0, [r5, #28]
 801869e:	237c      	movs	r3, #124	@ 0x7c
 80186a0:	fb03 2300 	mla	r3, r3, r0, r2
 80186a4:	f893 1445 	ldrb.w	r1, [r3, #1093]	@ 0x445
 80186a8:	2901      	cmp	r1, #1
 80186aa:	d003      	beq.n	80186b4 <MoblePalCryptoEncryptNetwork+0x204>
 80186ac:	f893 3446 	ldrb.w	r3, [r3, #1094]	@ 0x446
 80186b0:	2b01      	cmp	r3, #1
 80186b2:	d11c      	bne.n	80186ee <MoblePalCryptoEncryptNetwork+0x23e>
 80186b4:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 80186b8:	4b2c      	ldr	r3, [pc, #176]	@ (801876c <MoblePalCryptoEncryptNetwork+0x2bc>)
 80186ba:	0089      	lsls	r1, r1, #2
 80186bc:	b95e      	cbnz	r6, 80186d6 <MoblePalCryptoEncryptNetwork+0x226>
 80186be:	f101 065c 	add.w	r6, r1, #92	@ 0x5c
 80186c2:	313c      	adds	r1, #60	@ 0x3c
 80186c4:	eb03 0b01 	add.w	fp, r3, r1
 80186c8:	217c      	movs	r1, #124	@ 0x7c
 80186ca:	fb01 2200 	mla	r2, r1, r0, r2
 80186ce:	441e      	add	r6, r3
 80186d0:	f892 445c 	ldrb.w	r4, [r2, #1116]	@ 0x45c
 80186d4:	e746      	b.n	8018564 <MoblePalCryptoEncryptNetwork+0xb4>
 80186d6:	f101 066c 	add.w	r6, r1, #108	@ 0x6c
 80186da:	314c      	adds	r1, #76	@ 0x4c
 80186dc:	eb03 0b01 	add.w	fp, r3, r1
 80186e0:	217c      	movs	r1, #124	@ 0x7c
 80186e2:	fb01 2000 	mla	r0, r1, r0, r2
 80186e6:	441e      	add	r6, r3
 80186e8:	f890 445d 	ldrb.w	r4, [r0, #1117]	@ 0x45d
 80186ec:	e73a      	b.n	8018564 <MoblePalCryptoEncryptNetwork+0xb4>
 80186ee:	f892 361c 	ldrb.w	r3, [r2, #1564]	@ 0x61c
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	f43f af0e 	beq.w	8018514 <MoblePalCryptoEncryptNetwork+0x64>
 80186f8:	491c      	ldr	r1, [pc, #112]	@ (801876c <MoblePalCryptoEncryptNetwork+0x2bc>)
 80186fa:	460b      	mov	r3, r1
 80186fc:	f891 0021 	ldrb.w	r0, [r1, #33]	@ 0x21
 8018700:	2801      	cmp	r0, #1
 8018702:	d10c      	bne.n	801871e <MoblePalCryptoEncryptNetwork+0x26e>
 8018704:	217c      	movs	r1, #124	@ 0x7c
 8018706:	434c      	muls	r4, r1
 8018708:	f104 065c 	add.w	r6, r4, #92	@ 0x5c
 801870c:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8018710:	4414      	add	r4, r2
 8018712:	441e      	add	r6, r3
 8018714:	f894 445c 	ldrb.w	r4, [r4, #1116]	@ 0x45c
 8018718:	eb03 0b01 	add.w	fp, r3, r1
 801871c:	e722      	b.n	8018564 <MoblePalCryptoEncryptNetwork+0xb4>
 801871e:	f891 0022 	ldrb.w	r0, [r1, #34]	@ 0x22
 8018722:	2801      	cmp	r0, #1
 8018724:	d10c      	bne.n	8018740 <MoblePalCryptoEncryptNetwork+0x290>
 8018726:	217c      	movs	r1, #124	@ 0x7c
 8018728:	434c      	muls	r4, r1
 801872a:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
 801872e:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 8018732:	4414      	add	r4, r2
 8018734:	441e      	add	r6, r3
 8018736:	f894 445d 	ldrb.w	r4, [r4, #1117]	@ 0x45d
 801873a:	eb03 0b01 	add.w	fp, r3, r1
 801873e:	e711      	b.n	8018564 <MoblePalCryptoEncryptNetwork+0xb4>
 8018740:	3401      	adds	r4, #1
 8018742:	2c03      	cmp	r4, #3
 8018744:	f101 017c 	add.w	r1, r1, #124	@ 0x7c
 8018748:	d1d8      	bne.n	80186fc <MoblePalCryptoEncryptNetwork+0x24c>
 801874a:	2400      	movs	r4, #0
 801874c:	46a3      	mov	fp, r4
 801874e:	4626      	mov	r6, r4
 8018750:	e708      	b.n	8018564 <MoblePalCryptoEncryptNetwork+0xb4>
 8018752:	bf00      	nop
 8018754:	0802e646 	.word	0x0802e646
 8018758:	0802ccbb 	.word	0x0802ccbb
 801875c:	0802e5db 	.word	0x0802e5db
 8018760:	0802e64d 	.word	0x0802e64d
 8018764:	0802e657 	.word	0x0802e657
 8018768:	2000141c 	.word	0x2000141c
 801876c:	20001840 	.word	0x20001840

08018770 <MoblePalCryptoPrepHeaderAndNonceNetwork>:
 8018770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018774:	4689      	mov	r9, r1
 8018776:	b08d      	sub	sp, #52	@ 0x34
 8018778:	4615      	mov	r5, r2
 801877a:	461f      	mov	r7, r3
 801877c:	4604      	mov	r4, r0
 801877e:	b930      	cbnz	r0, 801878e <MoblePalCryptoPrepHeaderAndNonceNetwork+0x1e>
 8018780:	4b52      	ldr	r3, [pc, #328]	@ (80188cc <MoblePalCryptoPrepHeaderAndNonceNetwork+0x15c>)
 8018782:	4a53      	ldr	r2, [pc, #332]	@ (80188d0 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 8018784:	f240 61a4 	movw	r1, #1700	@ 0x6a4
 8018788:	4852      	ldr	r0, [pc, #328]	@ (80188d4 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x164>)
 801878a:	f00d fa83 	bl	8025c94 <__assert_func>
 801878e:	b922      	cbnz	r2, 801879a <MoblePalCryptoPrepHeaderAndNonceNetwork+0x2a>
 8018790:	4b51      	ldr	r3, [pc, #324]	@ (80188d8 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x168>)
 8018792:	4a4f      	ldr	r2, [pc, #316]	@ (80188d0 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 8018794:	f240 61a5 	movw	r1, #1701	@ 0x6a5
 8018798:	e7f6      	b.n	8018788 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 801879a:	b923      	cbnz	r3, 80187a6 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x36>
 801879c:	4b4f      	ldr	r3, [pc, #316]	@ (80188dc <MoblePalCryptoPrepHeaderAndNonceNetwork+0x16c>)
 801879e:	4a4c      	ldr	r2, [pc, #304]	@ (80188d0 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 80187a0:	f240 61a6 	movw	r1, #1702	@ 0x6a6
 80187a4:	e7f0      	b.n	8018788 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 80187a6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80187a8:	b923      	cbnz	r3, 80187b4 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x44>
 80187aa:	4b4d      	ldr	r3, [pc, #308]	@ (80188e0 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x170>)
 80187ac:	4a48      	ldr	r2, [pc, #288]	@ (80188d0 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 80187ae:	f240 61a7 	movw	r1, #1703	@ 0x6a7
 80187b2:	e7e9      	b.n	8018788 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 80187b4:	b921      	cbnz	r1, 80187c0 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x50>
 80187b6:	4b4b      	ldr	r3, [pc, #300]	@ (80188e4 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x174>)
 80187b8:	4a45      	ldr	r2, [pc, #276]	@ (80188d0 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 80187ba:	f44f 61d5 	mov.w	r1, #1704	@ 0x6a8
 80187be:	e7e3      	b.n	8018788 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 80187c0:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80187c4:	4b48      	ldr	r3, [pc, #288]	@ (80188e8 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x178>)
 80187c6:	f100 0a0c 	add.w	sl, r0, #12
 80187ca:	f8d3 6658 	ldr.w	r6, [r3, #1624]	@ 0x658
 80187ce:	4651      	mov	r1, sl
 80187d0:	4640      	mov	r0, r8
 80187d2:	f7fe fb7f 	bl	8016ed4 <MoblePalCryptoParseNetHdr>
 80187d6:	7b22      	ldrb	r2, [r4, #12]
 80187d8:	f006 0301 	and.w	r3, r6, #1
 80187dc:	429a      	cmp	r2, r3
 80187de:	f108 0b07 	add.w	fp, r8, #7
 80187e2:	d002      	beq.n	80187ea <MoblePalCryptoPrepHeaderAndNonceNetwork+0x7a>
 80187e4:	2e00      	cmp	r6, #0
 80187e6:	d06e      	beq.n	80188c6 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x156>
 80187e8:	3e01      	subs	r6, #1
 80187ea:	2300      	movs	r3, #0
 80187ec:	2204      	movs	r2, #4
 80187ee:	4631      	mov	r1, r6
 80187f0:	f10d 0015 	add.w	r0, sp, #21
 80187f4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80187f8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80187fc:	f7ff fe4f 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018800:	2207      	movs	r2, #7
 8018802:	4659      	mov	r1, fp
 8018804:	f10d 0019 	add.w	r0, sp, #25
 8018808:	f7ff fe3c 	bl	8018484 <MobleOutputStreamPutArray>
 801880c:	2310      	movs	r3, #16
 801880e:	eb0d 0203 	add.w	r2, sp, r3
 8018812:	4649      	mov	r1, r9
 8018814:	a808      	add	r0, sp, #32
 8018816:	f7fe fa0f 	bl	8016c38 <MoblePalCryptoAesEcb>
 801881a:	f8d8 0000 	ldr.w	r0, [r8]
 801881e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018822:	ab01      	add	r3, sp, #4
 8018824:	c303      	stmia	r3!, {r0, r1}
 8018826:	f898 2008 	ldrb.w	r2, [r8, #8]
 801882a:	701a      	strb	r2, [r3, #0]
 801882c:	a908      	add	r1, sp, #32
 801882e:	2206      	movs	r2, #6
 8018830:	f10d 0005 	add.w	r0, sp, #5
 8018834:	f7fe fa11 	bl	8016c5a <MoblePalCryptoXor>
 8018838:	4651      	mov	r1, sl
 801883a:	a801      	add	r0, sp, #4
 801883c:	f7fe fb4a 	bl	8016ed4 <MoblePalCryptoParseNetHdr>
 8018840:	7ba3      	ldrb	r3, [r4, #14]
 8018842:	2b01      	cmp	r3, #1
 8018844:	d138      	bne.n	80188b8 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x148>
 8018846:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 801884a:	f043 0308 	orr.w	r3, r3, #8
 801884e:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 8018852:	f04f 0a08 	mov.w	sl, #8
 8018856:	f04f 0900 	mov.w	r9, #0
 801885a:	f8c7 9000 	str.w	r9, [r7]
 801885e:	f8c7 9004 	str.w	r9, [r7, #4]
 8018862:	7a21      	ldrb	r1, [r4, #8]
 8018864:	eba1 010a 	sub.w	r1, r1, sl
 8018868:	4652      	mov	r2, sl
 801886a:	4441      	add	r1, r8
 801886c:	4638      	mov	r0, r7
 801886e:	f00e f995 	bl	8026b9c <memmove>
 8018872:	7a23      	ldrb	r3, [r4, #8]
 8018874:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8018876:	3b07      	subs	r3, #7
 8018878:	eba3 030a 	sub.w	r3, r3, sl
 801887c:	6013      	str	r3, [r2, #0]
 801887e:	4649      	mov	r1, r9
 8018880:	220d      	movs	r2, #13
 8018882:	4628      	mov	r0, r5
 8018884:	f00e f9a4 	bl	8026bd0 <memset>
 8018888:	2206      	movs	r2, #6
 801888a:	f10d 0105 	add.w	r1, sp, #5
 801888e:	1c68      	adds	r0, r5, #1
 8018890:	f7ff fdf8 	bl	8018484 <MobleOutputStreamPutArray>
 8018894:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8018898:	061b      	lsls	r3, r3, #24
 801889a:	bf42      	ittt	mi
 801889c:	2303      	movmi	r3, #3
 801889e:	702b      	strbmi	r3, [r5, #0]
 80188a0:	f885 9001 	strbmi.w	r9, [r5, #1]
 80188a4:	2204      	movs	r2, #4
 80188a6:	4631      	mov	r1, r6
 80188a8:	f105 0009 	add.w	r0, r5, #9
 80188ac:	f7ff fdf7 	bl	801849e <MobleOutputStreamPutBigEndian>
 80188b0:	2000      	movs	r0, #0
 80188b2:	b00d      	add	sp, #52	@ 0x34
 80188b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	bf14      	ite	ne
 80188bc:	f04f 0a08 	movne.w	sl, #8
 80188c0:	f04f 0a04 	moveq.w	sl, #4
 80188c4:	e7c7      	b.n	8018856 <MoblePalCryptoPrepHeaderAndNonceNetwork+0xe6>
 80188c6:	2002      	movs	r0, #2
 80188c8:	e7f3      	b.n	80188b2 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x142>
 80188ca:	bf00      	nop
 80188cc:	0802e64d 	.word	0x0802e64d
 80188d0:	0802ccd8 	.word	0x0802ccd8
 80188d4:	0802e5db 	.word	0x0802e5db
 80188d8:	0802e685 	.word	0x0802e685
 80188dc:	0802e68b 	.word	0x0802e68b
 80188e0:	0802e68f 	.word	0x0802e68f
 80188e4:	0802e6a2 	.word	0x0802e6a2
 80188e8:	2000141c 	.word	0x2000141c

080188ec <MoblePalCryptoDecryptNetworkEx>:
 80188ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188f0:	460e      	mov	r6, r1
 80188f2:	b092      	sub	sp, #72	@ 0x48
 80188f4:	4611      	mov	r1, r2
 80188f6:	461f      	mov	r7, r3
 80188f8:	4605      	mov	r5, r0
 80188fa:	b930      	cbnz	r0, 801890a <MoblePalCryptoDecryptNetworkEx+0x1e>
 80188fc:	4b2d      	ldr	r3, [pc, #180]	@ (80189b4 <MoblePalCryptoDecryptNetworkEx+0xc8>)
 80188fe:	4a2e      	ldr	r2, [pc, #184]	@ (80189b8 <MoblePalCryptoDecryptNetworkEx+0xcc>)
 8018900:	f240 7102 	movw	r1, #1794	@ 0x702
 8018904:	482d      	ldr	r0, [pc, #180]	@ (80189bc <MoblePalCryptoDecryptNetworkEx+0xd0>)
 8018906:	f00d f9c5 	bl	8025c94 <__assert_func>
 801890a:	b926      	cbnz	r6, 8018916 <MoblePalCryptoDecryptNetworkEx+0x2a>
 801890c:	4b2c      	ldr	r3, [pc, #176]	@ (80189c0 <MoblePalCryptoDecryptNetworkEx+0xd4>)
 801890e:	4a2a      	ldr	r2, [pc, #168]	@ (80189b8 <MoblePalCryptoDecryptNetworkEx+0xcc>)
 8018910:	f240 7103 	movw	r1, #1795	@ 0x703
 8018914:	e7f6      	b.n	8018904 <MoblePalCryptoDecryptNetworkEx+0x18>
 8018916:	b922      	cbnz	r2, 8018922 <MoblePalCryptoDecryptNetworkEx+0x36>
 8018918:	4b2a      	ldr	r3, [pc, #168]	@ (80189c4 <MoblePalCryptoDecryptNetworkEx+0xd8>)
 801891a:	4a27      	ldr	r2, [pc, #156]	@ (80189b8 <MoblePalCryptoDecryptNetworkEx+0xcc>)
 801891c:	f240 7104 	movw	r1, #1796	@ 0x704
 8018920:	e7f0      	b.n	8018904 <MoblePalCryptoDecryptNetworkEx+0x18>
 8018922:	b923      	cbnz	r3, 801892e <MoblePalCryptoDecryptNetworkEx+0x42>
 8018924:	4b28      	ldr	r3, [pc, #160]	@ (80189c8 <MoblePalCryptoDecryptNetworkEx+0xdc>)
 8018926:	4a24      	ldr	r2, [pc, #144]	@ (80189b8 <MoblePalCryptoDecryptNetworkEx+0xcc>)
 8018928:	f240 7105 	movw	r1, #1797	@ 0x705
 801892c:	e7ea      	b.n	8018904 <MoblePalCryptoDecryptNetworkEx+0x18>
 801892e:	7a03      	ldrb	r3, [r0, #8]
 8018930:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8018934:	3b0e      	subs	r3, #14
 8018936:	2400      	movs	r4, #0
 8018938:	2b0f      	cmp	r3, #15
 801893a:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 801893e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8018942:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018944:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
 8018948:	9406      	str	r4, [sp, #24]
 801894a:	d82f      	bhi.n	80189ac <MoblePalCryptoDecryptNetworkEx+0xc0>
 801894c:	f10d 0a1c 	add.w	sl, sp, #28
 8018950:	ab06      	add	r3, sp, #24
 8018952:	9300      	str	r3, [sp, #0]
 8018954:	aa09      	add	r2, sp, #36	@ 0x24
 8018956:	4653      	mov	r3, sl
 8018958:	f7ff ff0a 	bl	8018770 <MoblePalCryptoPrepHeaderAndNonceNetwork>
 801895c:	7bab      	ldrb	r3, [r5, #14]
 801895e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8018962:	f8cd 900c 	str.w	r9, [sp, #12]
 8018966:	42a3      	cmp	r3, r4
 8018968:	bf14      	ite	ne
 801896a:	2308      	movne	r3, #8
 801896c:	2304      	moveq	r3, #4
 801896e:	f108 0207 	add.w	r2, r8, #7
 8018972:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8018976:	e9cd 4404 	strd	r4, r4, [sp, #16]
 801897a:	f8cd a000 	str.w	sl, [sp]
 801897e:	230d      	movs	r3, #13
 8018980:	aa09      	add	r2, sp, #36	@ 0x24
 8018982:	4639      	mov	r1, r7
 8018984:	a80d      	add	r0, sp, #52	@ 0x34
 8018986:	f7fe f941 	bl	8016c0c <MoblePalCryptoAesCcmDecrypt>
 801898a:	2801      	cmp	r0, #1
 801898c:	d810      	bhi.n	80189b0 <MoblePalCryptoDecryptNetworkEx+0xc4>
 801898e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8018992:	ba5b      	rev16	r3, r3
 8018994:	82eb      	strh	r3, [r5, #22]
 8018996:	f1a9 0202 	sub.w	r2, r9, #2
 801899a:	f10d 0136 	add.w	r1, sp, #54	@ 0x36
 801899e:	4630      	mov	r0, r6
 80189a0:	f00e f9c7 	bl	8026d32 <memcpy>
 80189a4:	4620      	mov	r0, r4
 80189a6:	b012      	add	sp, #72	@ 0x48
 80189a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189ac:	2003      	movs	r0, #3
 80189ae:	e7fa      	b.n	80189a6 <MoblePalCryptoDecryptNetworkEx+0xba>
 80189b0:	2002      	movs	r0, #2
 80189b2:	e7f8      	b.n	80189a6 <MoblePalCryptoDecryptNetworkEx+0xba>
 80189b4:	0802e64d 	.word	0x0802e64d
 80189b8:	0802cd00 	.word	0x0802cd00
 80189bc:	0802e5db 	.word	0x0802e5db
 80189c0:	0802e6ae 	.word	0x0802e6ae
 80189c4:	0802e6a2 	.word	0x0802e6a2
 80189c8:	0802e6b9 	.word	0x0802e6b9

080189cc <BnrgmPalCryptoDecryptNetwork>:
 80189cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189d0:	4f4c      	ldr	r7, [pc, #304]	@ (8018b04 <BnrgmPalCryptoDecryptNetwork+0x138>)
 80189d2:	4604      	mov	r4, r0
 80189d4:	4689      	mov	r9, r1
 80189d6:	2600      	movs	r6, #0
 80189d8:	2002      	movs	r0, #2
 80189da:	f207 4824 	addw	r8, r7, #1060	@ 0x424
 80189de:	7ea3      	ldrb	r3, [r4, #26]
 80189e0:	b2f5      	uxtb	r5, r6
 80189e2:	42ab      	cmp	r3, r5
 80189e4:	d837      	bhi.n	8018a56 <BnrgmPalCryptoDecryptNetwork+0x8a>
 80189e6:	2801      	cmp	r0, #1
 80189e8:	d050      	beq.n	8018a8c <BnrgmPalCryptoDecryptNetwork+0xc0>
 80189ea:	4f46      	ldr	r7, [pc, #280]	@ (8018b04 <BnrgmPalCryptoDecryptNetwork+0x138>)
 80189ec:	2600      	movs	r6, #0
 80189ee:	f207 4824 	addw	r8, r7, #1060	@ 0x424
 80189f2:	7fa3      	ldrb	r3, [r4, #30]
 80189f4:	b2f5      	uxtb	r5, r6
 80189f6:	42ab      	cmp	r3, r5
 80189f8:	d84a      	bhi.n	8018a90 <BnrgmPalCryptoDecryptNetwork+0xc4>
 80189fa:	2801      	cmp	r0, #1
 80189fc:	d046      	beq.n	8018a8c <BnrgmPalCryptoDecryptNetwork+0xc0>
 80189fe:	4f41      	ldr	r7, [pc, #260]	@ (8018b04 <BnrgmPalCryptoDecryptNetwork+0x138>)
 8018a00:	2600      	movs	r6, #0
 8018a02:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8018a06:	b2f5      	uxtb	r5, r6
 8018a08:	42ab      	cmp	r3, r5
 8018a0a:	d860      	bhi.n	8018ace <BnrgmPalCryptoDecryptNetwork+0x102>
 8018a0c:	2801      	cmp	r0, #1
 8018a0e:	d03d      	beq.n	8018a8c <BnrgmPalCryptoDecryptNetwork+0xc0>
 8018a10:	4f3c      	ldr	r7, [pc, #240]	@ (8018b04 <BnrgmPalCryptoDecryptNetwork+0x138>)
 8018a12:	2600      	movs	r6, #0
 8018a14:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8018a18:	b2f5      	uxtb	r5, r6
 8018a1a:	42ab      	cmp	r3, r5
 8018a1c:	d936      	bls.n	8018a8c <BnrgmPalCryptoDecryptNetwork+0xc0>
 8018a1e:	4425      	add	r5, r4
 8018a20:	4649      	mov	r1, r9
 8018a22:	f895 302e 	ldrb.w	r3, [r5, #46]	@ 0x2e
 8018a26:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8018a2a:	4620      	mov	r0, r4
 8018a2c:	f8d3 2630 	ldr.w	r2, [r3, #1584]	@ 0x630
 8018a30:	f102 0310 	add.w	r3, r2, #16
 8018a34:	3230      	adds	r2, #48	@ 0x30
 8018a36:	f7ff ff59 	bl	80188ec <MoblePalCryptoDecryptNetworkEx>
 8018a3a:	3601      	adds	r6, #1
 8018a3c:	2800      	cmp	r0, #0
 8018a3e:	d1e9      	bne.n	8018a14 <BnrgmPalCryptoDecryptNetwork+0x48>
 8018a40:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8018a44:	f043 0320 	orr.w	r3, r3, #32
 8018a48:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 8018a4c:	f895 302e 	ldrb.w	r3, [r5, #46]	@ 0x2e
 8018a50:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
 8018a54:	e037      	b.n	8018ac6 <BnrgmPalCryptoDecryptNetwork+0xfa>
 8018a56:	4425      	add	r5, r4
 8018a58:	4649      	mov	r1, r9
 8018a5a:	7eea      	ldrb	r2, [r5, #27]
 8018a5c:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 8018a60:	0092      	lsls	r2, r2, #2
 8018a62:	f102 033c 	add.w	r3, r2, #60	@ 0x3c
 8018a66:	325c      	adds	r2, #92	@ 0x5c
 8018a68:	4443      	add	r3, r8
 8018a6a:	4442      	add	r2, r8
 8018a6c:	4620      	mov	r0, r4
 8018a6e:	f7ff ff3d 	bl	80188ec <MoblePalCryptoDecryptNetworkEx>
 8018a72:	3601      	adds	r6, #1
 8018a74:	2800      	cmp	r0, #0
 8018a76:	d1b2      	bne.n	80189de <BnrgmPalCryptoDecryptNetwork+0x12>
 8018a78:	7eeb      	ldrb	r3, [r5, #27]
 8018a7a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018a7e:	227c      	movs	r2, #124	@ 0x7c
 8018a80:	fb02 7303 	mla	r3, r2, r3, r7
 8018a84:	f8b3 3448 	ldrh.w	r3, [r3, #1096]	@ 0x448
 8018a88:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 8018a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a90:	4425      	add	r5, r4
 8018a92:	4649      	mov	r1, r9
 8018a94:	7fea      	ldrb	r2, [r5, #31]
 8018a96:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 8018a9a:	0092      	lsls	r2, r2, #2
 8018a9c:	f102 034c 	add.w	r3, r2, #76	@ 0x4c
 8018aa0:	326c      	adds	r2, #108	@ 0x6c
 8018aa2:	4443      	add	r3, r8
 8018aa4:	4442      	add	r2, r8
 8018aa6:	4620      	mov	r0, r4
 8018aa8:	f7ff ff20 	bl	80188ec <MoblePalCryptoDecryptNetworkEx>
 8018aac:	3601      	adds	r6, #1
 8018aae:	2800      	cmp	r0, #0
 8018ab0:	d19f      	bne.n	80189f2 <BnrgmPalCryptoDecryptNetwork+0x26>
 8018ab2:	7feb      	ldrb	r3, [r5, #31]
 8018ab4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018ab8:	227c      	movs	r2, #124	@ 0x7c
 8018aba:	fb02 7303 	mla	r3, r2, r3, r7
 8018abe:	f8b3 3448 	ldrh.w	r3, [r3, #1096]	@ 0x448
 8018ac2:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 8018ac6:	2301      	movs	r3, #1
 8018ac8:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49
 8018acc:	e7de      	b.n	8018a8c <BnrgmPalCryptoDecryptNetwork+0xc0>
 8018ace:	4425      	add	r5, r4
 8018ad0:	4649      	mov	r1, r9
 8018ad2:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 8018ad6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8018ada:	4620      	mov	r0, r4
 8018adc:	f8d3 3630 	ldr.w	r3, [r3, #1584]	@ 0x630
 8018ae0:	f103 0220 	add.w	r2, r3, #32
 8018ae4:	f7ff ff02 	bl	80188ec <MoblePalCryptoDecryptNetworkEx>
 8018ae8:	3601      	adds	r6, #1
 8018aea:	2800      	cmp	r0, #0
 8018aec:	d189      	bne.n	8018a02 <BnrgmPalCryptoDecryptNetwork+0x36>
 8018aee:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8018af2:	f043 0320 	orr.w	r3, r3, #32
 8018af6:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 8018afa:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 8018afe:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
 8018b02:	e7c3      	b.n	8018a8c <BnrgmPalCryptoDecryptNetwork+0xc0>
 8018b04:	2000141c 	.word	0x2000141c

08018b08 <MoblePalCryptoEncryptApp>:
 8018b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b0c:	b08f      	sub	sp, #60	@ 0x3c
 8018b0e:	460d      	mov	r5, r1
 8018b10:	f8dd 8064 	ldr.w	r8, [sp, #100]	@ 0x64
 8018b14:	f89d 4068 	ldrb.w	r4, [sp, #104]	@ 0x68
 8018b18:	4691      	mov	r9, r2
 8018b1a:	469a      	mov	sl, r3
 8018b1c:	4606      	mov	r6, r0
 8018b1e:	b930      	cbnz	r0, 8018b2e <MoblePalCryptoEncryptApp+0x26>
 8018b20:	4b5d      	ldr	r3, [pc, #372]	@ (8018c98 <MoblePalCryptoEncryptApp+0x190>)
 8018b22:	4a5e      	ldr	r2, [pc, #376]	@ (8018c9c <MoblePalCryptoEncryptApp+0x194>)
 8018b24:	f240 719b 	movw	r1, #1947	@ 0x79b
 8018b28:	485d      	ldr	r0, [pc, #372]	@ (8018ca0 <MoblePalCryptoEncryptApp+0x198>)
 8018b2a:	f00d f8b3 	bl	8025c94 <__assert_func>
 8018b2e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8018b30:	b923      	cbnz	r3, 8018b3c <MoblePalCryptoEncryptApp+0x34>
 8018b32:	4b5c      	ldr	r3, [pc, #368]	@ (8018ca4 <MoblePalCryptoEncryptApp+0x19c>)
 8018b34:	4a59      	ldr	r2, [pc, #356]	@ (8018c9c <MoblePalCryptoEncryptApp+0x194>)
 8018b36:	f240 719c 	movw	r1, #1948	@ 0x79c
 8018b3a:	e7f5      	b.n	8018b28 <MoblePalCryptoEncryptApp+0x20>
 8018b3c:	4f5a      	ldr	r7, [pc, #360]	@ (8018ca8 <MoblePalCryptoEncryptApp+0x1a0>)
 8018b3e:	f8b7 394c 	ldrh.w	r3, [r7, #2380]	@ 0x94c
 8018b42:	4543      	cmp	r3, r8
 8018b44:	d204      	bcs.n	8018b50 <MoblePalCryptoEncryptApp+0x48>
 8018b46:	4b59      	ldr	r3, [pc, #356]	@ (8018cac <MoblePalCryptoEncryptApp+0x1a4>)
 8018b48:	4a54      	ldr	r2, [pc, #336]	@ (8018c9c <MoblePalCryptoEncryptApp+0x194>)
 8018b4a:	f240 719d 	movw	r1, #1949	@ 0x79d
 8018b4e:	e7eb      	b.n	8018b28 <MoblePalCryptoEncryptApp+0x20>
 8018b50:	8b4a      	ldrh	r2, [r1, #26]
 8018b52:	f241 0101 	movw	r1, #4097	@ 0x1001
 8018b56:	f04f 0b00 	mov.w	fp, #0
 8018b5a:	420a      	tst	r2, r1
 8018b5c:	e9cd bb06 	strd	fp, fp, [sp, #24]
 8018b60:	f8cd b020 	str.w	fp, [sp, #32]
 8018b64:	f88d b024 	strb.w	fp, [sp, #36]	@ 0x24
 8018b68:	d176      	bne.n	8018c58 <MoblePalCryptoEncryptApp+0x150>
 8018b6a:	f895 1020 	ldrb.w	r1, [r5, #32]
 8018b6e:	4620      	mov	r0, r4
 8018b70:	f7fd fd84 	bl	801667c <MoblePalCryptoGetApplicationSecurityKeys>
 8018b74:	4601      	mov	r1, r0
 8018b76:	b920      	cbnz	r0, 8018b82 <MoblePalCryptoEncryptApp+0x7a>
 8018b78:	4b4d      	ldr	r3, [pc, #308]	@ (8018cb0 <MoblePalCryptoEncryptApp+0x1a8>)
 8018b7a:	4a48      	ldr	r2, [pc, #288]	@ (8018c9c <MoblePalCryptoEncryptApp+0x194>)
 8018b7c:	f44f 61f6 	mov.w	r1, #1968	@ 0x7b0
 8018b80:	e7d2      	b.n	8018b28 <MoblePalCryptoEncryptApp+0x20>
 8018b82:	2c00      	cmp	r4, #0
 8018b84:	d05e      	beq.n	8018c44 <MoblePalCryptoEncryptApp+0x13c>
 8018b86:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d062      	beq.n	8018c54 <MoblePalCryptoEncryptApp+0x14c>
 8018b8e:	f100 0210 	add.w	r2, r0, #16
 8018b92:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8018b96:	f100 0320 	add.w	r3, r0, #32
 8018b9a:	6810      	ldr	r0, [r2, #0]
 8018b9c:	6851      	ldr	r1, [r2, #4]
 8018b9e:	4664      	mov	r4, ip
 8018ba0:	c403      	stmia	r4!, {r0, r1}
 8018ba2:	3208      	adds	r2, #8
 8018ba4:	429a      	cmp	r2, r3
 8018ba6:	46a4      	mov	ip, r4
 8018ba8:	d1f7      	bne.n	8018b9a <MoblePalCryptoEncryptApp+0x92>
 8018baa:	2400      	movs	r4, #0
 8018bac:	2301      	movs	r3, #1
 8018bae:	f88d 3018 	strb.w	r3, [sp, #24]
 8018bb2:	8aeb      	ldrh	r3, [r5, #22]
 8018bb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8018bb8:	f5a3 4200 	sub.w	r2, r3, #32768	@ 0x8000
 8018bbc:	4253      	negs	r3, r2
 8018bbe:	4153      	adcs	r3, r2
 8018bc0:	011b      	lsls	r3, r3, #4
 8018bc2:	2c00      	cmp	r4, #0
 8018bc4:	d166      	bne.n	8018c94 <MoblePalCryptoEncryptApp+0x18c>
 8018bc6:	f897 265c 	ldrb.w	r2, [r7, #1628]	@ 0x65c
 8018bca:	f8d7 4658 	ldr.w	r4, [r7, #1624]	@ 0x658
 8018bce:	2a01      	cmp	r2, #1
 8018bd0:	d102      	bne.n	8018bd8 <MoblePalCryptoEncryptApp+0xd0>
 8018bd2:	2c00      	cmp	r4, #0
 8018bd4:	d05e      	beq.n	8018c94 <MoblePalCryptoEncryptApp+0x18c>
 8018bd6:	3c01      	subs	r4, #1
 8018bd8:	2203      	movs	r2, #3
 8018bda:	f02a 417f 	bic.w	r1, sl, #4278190080	@ 0xff000000
 8018bde:	f10d 001a 	add.w	r0, sp, #26
 8018be2:	f7ff fc5c 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018be6:	8aa9      	ldrh	r1, [r5, #20]
 8018be8:	2202      	movs	r2, #2
 8018bea:	f10d 001d 	add.w	r0, sp, #29
 8018bee:	f7ff fc56 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018bf2:	8ae9      	ldrh	r1, [r5, #22]
 8018bf4:	2202      	movs	r2, #2
 8018bf6:	f10d 001f 	add.w	r0, sp, #31
 8018bfa:	f7ff fc50 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018bfe:	2204      	movs	r2, #4
 8018c00:	4621      	mov	r1, r4
 8018c02:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 8018c06:	f7ff fc4a 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018c0a:	9305      	str	r3, [sp, #20]
 8018c0c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018c0e:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8018c12:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8018c14:	9302      	str	r3, [sp, #8]
 8018c16:	230d      	movs	r3, #13
 8018c18:	f1b9 0f00 	cmp.w	r9, #0
 8018c1c:	9301      	str	r3, [sp, #4]
 8018c1e:	ab06      	add	r3, sp, #24
 8018c20:	9300      	str	r3, [sp, #0]
 8018c22:	bf14      	ite	ne
 8018c24:	2208      	movne	r2, #8
 8018c26:	2204      	moveq	r2, #4
 8018c28:	ab0a      	add	r3, sp, #40	@ 0x28
 8018c2a:	eb06 0108 	add.w	r1, r6, r8
 8018c2e:	4630      	mov	r0, r6
 8018c30:	f7fd ffd6 	bl	8016be0 <MoblePalCryptoAesCcmEncrypt>
 8018c34:	2801      	cmp	r0, #1
 8018c36:	bf94      	ite	ls
 8018c38:	2000      	movls	r0, #0
 8018c3a:	2001      	movhi	r0, #1
 8018c3c:	0040      	lsls	r0, r0, #1
 8018c3e:	b00f      	add	sp, #60	@ 0x3c
 8018c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c44:	f890 3020 	ldrb.w	r3, [r0, #32]
 8018c48:	b123      	cbz	r3, 8018c54 <MoblePalCryptoEncryptApp+0x14c>
 8018c4a:	2210      	movs	r2, #16
 8018c4c:	a80a      	add	r0, sp, #40	@ 0x28
 8018c4e:	f00d ffa5 	bl	8026b9c <memmove>
 8018c52:	e7ab      	b.n	8018bac <MoblePalCryptoEncryptApp+0xa4>
 8018c54:	2402      	movs	r4, #2
 8018c56:	e7a9      	b.n	8018bac <MoblePalCryptoEncryptApp+0xa4>
 8018c58:	04d3      	lsls	r3, r2, #19
 8018c5a:	f3c2 3400 	ubfx	r4, r2, #12, #1
 8018c5e:	d50b      	bpl.n	8018c78 <MoblePalCryptoEncryptApp+0x170>
 8018c60:	6829      	ldr	r1, [r5, #0]
 8018c62:	b1a9      	cbz	r1, 8018c90 <MoblePalCryptoEncryptApp+0x188>
 8018c64:	2210      	movs	r2, #16
 8018c66:	a80a      	add	r0, sp, #40	@ 0x28
 8018c68:	f00d ff98 	bl	8026b9c <memmove>
 8018c6c:	465c      	mov	r4, fp
 8018c6e:	2302      	movs	r3, #2
 8018c70:	f88d 3018 	strb.w	r3, [sp, #24]
 8018c74:	2300      	movs	r3, #0
 8018c76:	e7a4      	b.n	8018bc2 <MoblePalCryptoEncryptApp+0xba>
 8018c78:	f897 361e 	ldrb.w	r3, [r7, #1566]	@ 0x61e
 8018c7c:	2b01      	cmp	r3, #1
 8018c7e:	d107      	bne.n	8018c90 <MoblePalCryptoEncryptApp+0x188>
 8018c80:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 8018c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018c86:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8018c8a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 8018c8e:	e7ee      	b.n	8018c6e <MoblePalCryptoEncryptApp+0x166>
 8018c90:	2402      	movs	r4, #2
 8018c92:	e7ec      	b.n	8018c6e <MoblePalCryptoEncryptApp+0x166>
 8018c94:	2002      	movs	r0, #2
 8018c96:	e7d2      	b.n	8018c3e <MoblePalCryptoEncryptApp+0x136>
 8018c98:	0802e646 	.word	0x0802e646
 8018c9c:	0802cd1f 	.word	0x0802cd1f
 8018ca0:	0802e5db 	.word	0x0802e5db
 8018ca4:	0802e6c8 	.word	0x0802e6c8
 8018ca8:	2000141c 	.word	0x2000141c
 8018cac:	0802e6d0 	.word	0x0802e6d0
 8018cb0:	0802e6ff 	.word	0x0802e6ff

08018cb4 <MoblePalCryptoDecryptApp>:
 8018cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cb8:	b097      	sub	sp, #92	@ 0x5c
 8018cba:	e9dd 5726 	ldrd	r5, r7, [sp, #152]	@ 0x98
 8018cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8018cc0:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 8018cc4:	9306      	str	r3, [sp, #24]
 8018cc6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018cc8:	f8bd b080 	ldrh.w	fp, [sp, #128]	@ 0x80
 8018ccc:	f8bd 8084 	ldrh.w	r8, [sp, #132]	@ 0x84
 8018cd0:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8018cd2:	b933      	cbnz	r3, 8018ce2 <MoblePalCryptoDecryptApp+0x2e>
 8018cd4:	4ba1      	ldr	r3, [pc, #644]	@ (8018f5c <MoblePalCryptoDecryptApp+0x2a8>)
 8018cd6:	4aa2      	ldr	r2, [pc, #648]	@ (8018f60 <MoblePalCryptoDecryptApp+0x2ac>)
 8018cd8:	f640 0131 	movw	r1, #2097	@ 0x831
 8018cdc:	48a1      	ldr	r0, [pc, #644]	@ (8018f64 <MoblePalCryptoDecryptApp+0x2b0>)
 8018cde:	f00c ffd9 	bl	8025c94 <__assert_func>
 8018ce2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8018ce4:	b923      	cbnz	r3, 8018cf0 <MoblePalCryptoDecryptApp+0x3c>
 8018ce6:	4ba0      	ldr	r3, [pc, #640]	@ (8018f68 <MoblePalCryptoDecryptApp+0x2b4>)
 8018ce8:	4a9d      	ldr	r2, [pc, #628]	@ (8018f60 <MoblePalCryptoDecryptApp+0x2ac>)
 8018cea:	f640 0132 	movw	r1, #2098	@ 0x832
 8018cee:	e7f5      	b.n	8018cdc <MoblePalCryptoDecryptApp+0x28>
 8018cf0:	1f73      	subs	r3, r6, #5
 8018cf2:	2b9b      	cmp	r3, #155	@ 0x9b
 8018cf4:	d904      	bls.n	8018d00 <MoblePalCryptoDecryptApp+0x4c>
 8018cf6:	4b9d      	ldr	r3, [pc, #628]	@ (8018f6c <MoblePalCryptoDecryptApp+0x2b8>)
 8018cf8:	4a99      	ldr	r2, [pc, #612]	@ (8018f60 <MoblePalCryptoDecryptApp+0x2ac>)
 8018cfa:	f640 0133 	movw	r1, #2099	@ 0x833
 8018cfe:	e7ed      	b.n	8018cdc <MoblePalCryptoDecryptApp+0x28>
 8018d00:	2a00      	cmp	r2, #0
 8018d02:	f04f 0300 	mov.w	r3, #0
 8018d06:	bf14      	ite	ne
 8018d08:	f04f 0908 	movne.w	r9, #8
 8018d0c:	f04f 0904 	moveq.w	r9, #4
 8018d10:	2801      	cmp	r0, #1
 8018d12:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 8018d16:	9310      	str	r3, [sp, #64]	@ 0x40
 8018d18:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
 8018d1c:	f040 80b9 	bne.w	8018e92 <MoblePalCryptoDecryptApp+0x1de>
 8018d20:	b2c9      	uxtb	r1, r1
 8018d22:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8018d26:	9207      	str	r2, [sp, #28]
 8018d28:	f7fe fbec 	bl	8017504 <BnrgmPalCryptoMatchAid>
 8018d2c:	9a07      	ldr	r2, [sp, #28]
 8018d2e:	4604      	mov	r4, r0
 8018d30:	b120      	cbz	r0, 8018d3c <MoblePalCryptoDecryptApp+0x88>
 8018d32:	2402      	movs	r4, #2
 8018d34:	4620      	mov	r0, r4
 8018d36:	b017      	add	sp, #92	@ 0x5c
 8018d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d3c:	9b06      	ldr	r3, [sp, #24]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	f000 8086 	beq.w	8018e50 <MoblePalCryptoDecryptApp+0x19c>
 8018d44:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
 8018d48:	9308      	str	r3, [sp, #32]
 8018d4a:	01d2      	lsls	r2, r2, #7
 8018d4c:	b2d3      	uxtb	r3, r2
 8018d4e:	9307      	str	r3, [sp, #28]
 8018d50:	f408 4340 	and.w	r3, r8, #49152	@ 0xc000
 8018d54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018d58:	bf0c      	ite	eq
 8018d5a:	2310      	moveq	r3, #16
 8018d5c:	2300      	movne	r3, #0
 8018d5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018d60:	bf0c      	ite	eq
 8018d62:	463b      	moveq	r3, r7
 8018d64:	2300      	movne	r3, #0
 8018d66:	930c      	str	r3, [sp, #48]	@ 0x30
 8018d68:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018d6a:	eba6 0609 	sub.w	r6, r6, r9
 8018d6e:	4433      	add	r3, r6
 8018d70:	f105 0739 	add.w	r7, r5, #57	@ 0x39
 8018d74:	f04f 0a00 	mov.w	sl, #0
 8018d78:	930d      	str	r3, [sp, #52]	@ 0x34
 8018d7a:	9a08      	ldr	r2, [sp, #32]
 8018d7c:	fa5f f38a 	uxtb.w	r3, sl
 8018d80:	429a      	cmp	r2, r3
 8018d82:	d9d6      	bls.n	8018d32 <MoblePalCryptoDecryptApp+0x7e>
 8018d84:	9b06      	ldr	r3, [sp, #24]
 8018d86:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 8018d8a:	222c      	movs	r2, #44	@ 0x2c
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d062      	beq.n	8018e56 <MoblePalCryptoDecryptApp+0x1a2>
 8018d90:	793b      	ldrb	r3, [r7, #4]
 8018d92:	4977      	ldr	r1, [pc, #476]	@ (8018f70 <MoblePalCryptoDecryptApp+0x2bc>)
 8018d94:	fb02 1303 	mla	r3, r2, r3, r1
 8018d98:	f893 25b9 	ldrb.w	r2, [r3, #1465]	@ 0x5b9
 8018d9c:	b162      	cbz	r2, 8018db8 <MoblePalCryptoDecryptApp+0x104>
 8018d9e:	2201      	movs	r2, #1
 8018da0:	f88d 2038 	strb.w	r2, [sp, #56]	@ 0x38
 8018da4:	9a07      	ldr	r2, [sp, #28]
 8018da6:	f88d 2039 	strb.w	r2, [sp, #57]	@ 0x39
 8018daa:	f503 63b5 	add.w	r3, r3, #1448	@ 0x5a8
 8018dae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018db0:	f10d 0c58 	add.w	ip, sp, #88	@ 0x58
 8018db4:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 8018db8:	4b6d      	ldr	r3, [pc, #436]	@ (8018f70 <MoblePalCryptoDecryptApp+0x2bc>)
 8018dba:	7b29      	ldrb	r1, [r5, #12]
 8018dbc:	f8d3 3658 	ldr.w	r3, [r3, #1624]	@ 0x658
 8018dc0:	f003 0201 	and.w	r2, r3, #1
 8018dc4:	4291      	cmp	r1, r2
 8018dc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018dc8:	f04f 0203 	mov.w	r2, #3
 8018dcc:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8018dd0:	f10d 003a 	add.w	r0, sp, #58	@ 0x3a
 8018dd4:	bf18      	it	ne
 8018dd6:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018dda:	f7ff fb60 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018dde:	2202      	movs	r2, #2
 8018de0:	4659      	mov	r1, fp
 8018de2:	f10d 003d 	add.w	r0, sp, #61	@ 0x3d
 8018de6:	f7ff fb5a 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018dea:	2202      	movs	r2, #2
 8018dec:	4641      	mov	r1, r8
 8018dee:	f10d 003f 	add.w	r0, sp, #63	@ 0x3f
 8018df2:	f7ff fb54 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018df6:	4619      	mov	r1, r3
 8018df8:	2204      	movs	r2, #4
 8018dfa:	f10d 0041 	add.w	r0, sp, #65	@ 0x41
 8018dfe:	f7ff fb4e 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018e02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018e04:	9305      	str	r3, [sp, #20]
 8018e06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018e08:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8018e0a:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8018e0e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018e10:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018e14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018e16:	9300      	str	r3, [sp, #0]
 8018e18:	aa0e      	add	r2, sp, #56	@ 0x38
 8018e1a:	230d      	movs	r3, #13
 8018e1c:	a912      	add	r1, sp, #72	@ 0x48
 8018e1e:	f7fd fef5 	bl	8016c0c <MoblePalCryptoAesCcmDecrypt>
 8018e22:	2801      	cmp	r0, #1
 8018e24:	f10a 0a01 	add.w	sl, sl, #1
 8018e28:	f107 0701 	add.w	r7, r7, #1
 8018e2c:	d8a5      	bhi.n	8018d7a <MoblePalCryptoDecryptApp+0xc6>
 8018e2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018e30:	9906      	ldr	r1, [sp, #24]
 8018e32:	4b4f      	ldr	r3, [pc, #316]	@ (8018f70 <MoblePalCryptoDecryptApp+0x2bc>)
 8018e34:	442a      	add	r2, r5
 8018e36:	b1f9      	cbz	r1, 8018e78 <MoblePalCryptoDecryptApp+0x1c4>
 8018e38:	f892 203d 	ldrb.w	r2, [r2, #61]	@ 0x3d
 8018e3c:	f885 2043 	strb.w	r2, [r5, #67]	@ 0x43
 8018e40:	212c      	movs	r1, #44	@ 0x2c
 8018e42:	fb01 3302 	mla	r3, r1, r2, r3
 8018e46:	f8b3 35ba 	ldrh.w	r3, [r3, #1466]	@ 0x5ba
 8018e4a:	f8a5 3046 	strh.w	r3, [r5, #70]	@ 0x46
 8018e4e:	e771      	b.n	8018d34 <MoblePalCryptoDecryptApp+0x80>
 8018e50:	f895 3038 	ldrb.w	r3, [r5, #56]	@ 0x38
 8018e54:	e778      	b.n	8018d48 <MoblePalCryptoDecryptApp+0x94>
 8018e56:	783b      	ldrb	r3, [r7, #0]
 8018e58:	4945      	ldr	r1, [pc, #276]	@ (8018f70 <MoblePalCryptoDecryptApp+0x2bc>)
 8018e5a:	fb02 1303 	mla	r3, r2, r3, r1
 8018e5e:	f893 25b8 	ldrb.w	r2, [r3, #1464]	@ 0x5b8
 8018e62:	2a00      	cmp	r2, #0
 8018e64:	d0a8      	beq.n	8018db8 <MoblePalCryptoDecryptApp+0x104>
 8018e66:	2201      	movs	r2, #1
 8018e68:	f88d 2038 	strb.w	r2, [sp, #56]	@ 0x38
 8018e6c:	9a07      	ldr	r2, [sp, #28]
 8018e6e:	f88d 2039 	strb.w	r2, [sp, #57]	@ 0x39
 8018e72:	f503 63b3 	add.w	r3, r3, #1432	@ 0x598
 8018e76:	e79a      	b.n	8018dae <MoblePalCryptoDecryptApp+0xfa>
 8018e78:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 8018e7c:	f885 2043 	strb.w	r2, [r5, #67]	@ 0x43
 8018e80:	212c      	movs	r1, #44	@ 0x2c
 8018e82:	fb01 3302 	mla	r3, r1, r2, r3
 8018e86:	f8b3 35ba 	ldrh.w	r3, [r3, #1466]	@ 0x5ba
 8018e8a:	f8a5 3046 	strh.w	r3, [r5, #70]	@ 0x46
 8018e8e:	2400      	movs	r4, #0
 8018e90:	e750      	b.n	8018d34 <MoblePalCryptoDecryptApp+0x80>
 8018e92:	4b37      	ldr	r3, [pc, #220]	@ (8018f70 <MoblePalCryptoDecryptApp+0x2bc>)
 8018e94:	f893 161e 	ldrb.w	r1, [r3, #1566]	@ 0x61e
 8018e98:	b129      	cbz	r1, 8018ea6 <MoblePalCryptoDecryptApp+0x1f2>
 8018e9a:	2102      	movs	r1, #2
 8018e9c:	01d2      	lsls	r2, r2, #7
 8018e9e:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
 8018ea2:	f88d 2039 	strb.w	r2, [sp, #57]	@ 0x39
 8018ea6:	f8d3 3658 	ldr.w	r3, [r3, #1624]	@ 0x658
 8018eaa:	7b29      	ldrb	r1, [r5, #12]
 8018eac:	f003 0201 	and.w	r2, r3, #1
 8018eb0:	4291      	cmp	r1, r2
 8018eb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018eb4:	f04f 0203 	mov.w	r2, #3
 8018eb8:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8018ebc:	f10d 003a 	add.w	r0, sp, #58	@ 0x3a
 8018ec0:	bf18      	it	ne
 8018ec2:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018ec6:	f7ff faea 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018eca:	2202      	movs	r2, #2
 8018ecc:	4659      	mov	r1, fp
 8018ece:	f10d 003d 	add.w	r0, sp, #61	@ 0x3d
 8018ed2:	f7ff fae4 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018ed6:	4641      	mov	r1, r8
 8018ed8:	2202      	movs	r2, #2
 8018eda:	f10d 003f 	add.w	r0, sp, #63	@ 0x3f
 8018ede:	f7ff fade 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018ee2:	4619      	mov	r1, r3
 8018ee4:	2204      	movs	r2, #4
 8018ee6:	4b23      	ldr	r3, [pc, #140]	@ (8018f74 <MoblePalCryptoDecryptApp+0x2c0>)
 8018ee8:	f10d 0041 	add.w	r0, sp, #65	@ 0x41
 8018eec:	f7ff fad7 	bl	801849e <MobleOutputStreamPutBigEndian>
 8018ef0:	f408 4840 	and.w	r8, r8, #49152	@ 0xc000
 8018ef4:	9312      	str	r3, [sp, #72]	@ 0x48
 8018ef6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018ef8:	491e      	ldr	r1, [pc, #120]	@ (8018f74 <MoblePalCryptoDecryptApp+0x2c0>)
 8018efa:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8018efc:	f5b8 4f00 	cmp.w	r8, #32768	@ 0x8000
 8018f00:	eba6 0609 	sub.w	r6, r6, r9
 8018f04:	bf18      	it	ne
 8018f06:	2700      	movne	r7, #0
 8018f08:	eb03 0406 	add.w	r4, r3, r6
 8018f0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018f0e:	9603      	str	r6, [sp, #12]
 8018f10:	bf0c      	ite	eq
 8018f12:	2510      	moveq	r5, #16
 8018f14:	463d      	movne	r5, r7
 8018f16:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018f1a:	e9cd 7504 	strd	r7, r5, [sp, #16]
 8018f1e:	9400      	str	r4, [sp, #0]
 8018f20:	230d      	movs	r3, #13
 8018f22:	aa0e      	add	r2, sp, #56	@ 0x38
 8018f24:	f7fd fe72 	bl	8016c0c <MoblePalCryptoAesCcmDecrypt>
 8018f28:	2801      	cmp	r0, #1
 8018f2a:	d9b0      	bls.n	8018e8e <MoblePalCryptoDecryptApp+0x1da>
 8018f2c:	a912      	add	r1, sp, #72	@ 0x48
 8018f2e:	4658      	mov	r0, fp
 8018f30:	f7f4 fabb 	bl	800d4aa <ApplicationGetConfigServerDeviceKey>
 8018f34:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018f36:	9400      	str	r4, [sp, #0]
 8018f38:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8018f3c:	e9cd 7504 	strd	r7, r5, [sp, #16]
 8018f40:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018f42:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8018f44:	9603      	str	r6, [sp, #12]
 8018f46:	230d      	movs	r3, #13
 8018f48:	aa0e      	add	r2, sp, #56	@ 0x38
 8018f4a:	f7fd fe5f 	bl	8016c0c <MoblePalCryptoAesCcmDecrypt>
 8018f4e:	2801      	cmp	r0, #1
 8018f50:	bf94      	ite	ls
 8018f52:	2000      	movls	r0, #0
 8018f54:	2001      	movhi	r0, #1
 8018f56:	0044      	lsls	r4, r0, #1
 8018f58:	e6ec      	b.n	8018d34 <MoblePalCryptoDecryptApp+0x80>
 8018f5a:	bf00      	nop
 8018f5c:	0802e707 	.word	0x0802e707
 8018f60:	0802cd38 	.word	0x0802cd38
 8018f64:	0802e5db 	.word	0x0802e5db
 8018f68:	0802e718 	.word	0x0802e718
 8018f6c:	0802e726 	.word	0x0802e726
 8018f70:	2000141c 	.word	0x2000141c
 8018f74:	20001a3c 	.word	0x20001a3c

08018f78 <MobleOutputStreamPutLittleEndian>:
 8018f78:	4603      	mov	r3, r0
 8018f7a:	4410      	add	r0, r2
 8018f7c:	4283      	cmp	r3, r0
 8018f7e:	d101      	bne.n	8018f84 <MobleOutputStreamPutLittleEndian+0xc>
 8018f80:	4610      	mov	r0, r2
 8018f82:	4770      	bx	lr
 8018f84:	f803 1b01 	strb.w	r1, [r3], #1
 8018f88:	0a09      	lsrs	r1, r1, #8
 8018f8a:	e7f7      	b.n	8018f7c <MobleOutputStreamPutLittleEndian+0x4>

08018f8c <MobleApplicationProcessPacket>:
 8018f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f90:	9f08      	ldr	r7, [sp, #32]
 8018f92:	460c      	mov	r4, r1
 8018f94:	4698      	mov	r8, r3
 8018f96:	4691      	mov	r9, r2
 8018f98:	b932      	cbnz	r2, 8018fa8 <MobleApplicationProcessPacket+0x1c>
 8018f9a:	4b26      	ldr	r3, [pc, #152]	@ (8019034 <MobleApplicationProcessPacket+0xa8>)
 8018f9c:	4a26      	ldr	r2, [pc, #152]	@ (8019038 <MobleApplicationProcessPacket+0xac>)
 8018f9e:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 8018fa2:	4826      	ldr	r0, [pc, #152]	@ (801903c <MobleApplicationProcessPacket+0xb0>)
 8018fa4:	f00c fe76 	bl	8025c94 <__assert_func>
 8018fa8:	b923      	cbnz	r3, 8018fb4 <MobleApplicationProcessPacket+0x28>
 8018faa:	4b25      	ldr	r3, [pc, #148]	@ (8019040 <MobleApplicationProcessPacket+0xb4>)
 8018fac:	4a22      	ldr	r2, [pc, #136]	@ (8019038 <MobleApplicationProcessPacket+0xac>)
 8018fae:	f240 11c7 	movw	r1, #455	@ 0x1c7
 8018fb2:	e7f6      	b.n	8018fa2 <MobleApplicationProcessPacket+0x16>
 8018fb4:	b921      	cbnz	r1, 8018fc0 <MobleApplicationProcessPacket+0x34>
 8018fb6:	4b23      	ldr	r3, [pc, #140]	@ (8019044 <MobleApplicationProcessPacket+0xb8>)
 8018fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8019038 <MobleApplicationProcessPacket+0xac>)
 8018fba:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 8018fbe:	e7f0      	b.n	8018fa2 <MobleApplicationProcessPacket+0x16>
 8018fc0:	1e7b      	subs	r3, r7, #1
 8018fc2:	2b9b      	cmp	r3, #155	@ 0x9b
 8018fc4:	d834      	bhi.n	8019030 <MobleApplicationProcessPacket+0xa4>
 8018fc6:	4d20      	ldr	r5, [pc, #128]	@ (8019048 <MobleApplicationProcessPacket+0xbc>)
 8018fc8:	f8d5 6954 	ldr.w	r6, [r5, #2388]	@ 0x954
 8018fcc:	b116      	cbz	r6, 8018fd4 <MobleApplicationProcessPacket+0x48>
 8018fce:	2002      	movs	r0, #2
 8018fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fd4:	f107 0020 	add.w	r0, r7, #32
 8018fd8:	f7ff f8a6 	bl	8018128 <MobleMemAlloc>
 8018fdc:	f8c5 0954 	str.w	r0, [r5, #2388]	@ 0x954
 8018fe0:	2800      	cmp	r0, #0
 8018fe2:	d0f4      	beq.n	8018fce <MobleApplicationProcessPacket+0x42>
 8018fe4:	220c      	movs	r2, #12
 8018fe6:	18a1      	adds	r1, r4, r2
 8018fe8:	f00d fdd8 	bl	8026b9c <memmove>
 8018fec:	f8d5 5954 	ldr.w	r5, [r5, #2388]	@ 0x954
 8018ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018ff4:	732b      	strb	r3, [r5, #12]
 8018ff6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8018ffa:	81eb      	strh	r3, [r5, #14]
 8018ffc:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8019000:	742b      	strb	r3, [r5, #16]
 8019002:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 8019006:	826b      	strh	r3, [r5, #18]
 8019008:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801900c:	752b      	strb	r3, [r5, #20]
 801900e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8019012:	3b00      	subs	r3, #0
 8019014:	bf18      	it	ne
 8019016:	2301      	movne	r3, #1
 8019018:	756b      	strb	r3, [r5, #21]
 801901a:	463a      	mov	r2, r7
 801901c:	4641      	mov	r1, r8
 801901e:	f105 0020 	add.w	r0, r5, #32
 8019022:	f00d fdbb 	bl	8026b9c <memmove>
 8019026:	61ef      	str	r7, [r5, #28]
 8019028:	7e23      	ldrb	r3, [r4, #24]
 801902a:	75ab      	strb	r3, [r5, #22]
 801902c:	4630      	mov	r0, r6
 801902e:	e7cf      	b.n	8018fd0 <MobleApplicationProcessPacket+0x44>
 8019030:	2003      	movs	r0, #3
 8019032:	e7cd      	b.n	8018fd0 <MobleApplicationProcessPacket+0x44>
 8019034:	0802e797 	.word	0x0802e797
 8019038:	0802cd51 	.word	0x0802cd51
 801903c:	0802e7a8 	.word	0x0802e7a8
 8019040:	0802e7ed 	.word	0x0802e7ed
 8019044:	0802e64d 	.word	0x0802e64d
 8019048:	2000141c 	.word	0x2000141c

0801904c <MobleApplicationPassPacketsToSIGModels>:
 801904c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019050:	6803      	ldr	r3, [r0, #0]
 8019052:	7d4c      	ldrb	r4, [r1, #21]
 8019054:	7f1b      	ldrb	r3, [r3, #28]
 8019056:	b089      	sub	sp, #36	@ 0x24
 8019058:	4605      	mov	r5, r0
 801905a:	9302      	str	r3, [sp, #8]
 801905c:	89cb      	ldrh	r3, [r1, #14]
 801905e:	9303      	str	r3, [sp, #12]
 8019060:	7b0b      	ldrb	r3, [r1, #12]
 8019062:	9301      	str	r3, [sp, #4]
 8019064:	468b      	mov	fp, r1
 8019066:	2c00      	cmp	r4, #0
 8019068:	f000 80ca 	beq.w	8019200 <MobleApplicationPassPacketsToSIGModels+0x1b4>
 801906c:	2300      	movs	r3, #0
 801906e:	9300      	str	r3, [sp, #0]
 8019070:	9b01      	ldr	r3, [sp, #4]
 8019072:	4f7a      	ldr	r7, [pc, #488]	@ (801925c <MobleApplicationPassPacketsToSIGModels+0x210>)
 8019074:	33a6      	adds	r3, #166	@ 0xa6
 8019076:	9304      	str	r3, [sp, #16]
 8019078:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 801907c:	8838      	ldrh	r0, [r7, #0]
 801907e:	f89d 3000 	ldrb.w	r3, [sp]
 8019082:	4290      	cmp	r0, r2
 8019084:	d149      	bne.n	801911a <MobleApplicationPassPacketsToSIGModels+0xce>
 8019086:	463c      	mov	r4, r7
 8019088:	f04f 0900 	mov.w	r9, #0
 801908c:	9a04      	ldr	r2, [sp, #16]
 801908e:	5ca2      	ldrb	r2, [r4, r2]
 8019090:	bb2a      	cbnz	r2, 80190de <MobleApplicationPassPacketsToSIGModels+0x92>
 8019092:	f109 090e 	add.w	r9, r9, #14
 8019096:	f1b9 0f9a 	cmp.w	r9, #154	@ 0x9a
 801909a:	f104 0438 	add.w	r4, r4, #56	@ 0x38
 801909e:	d1f5      	bne.n	801908c <MobleApplicationPassPacketsToSIGModels+0x40>
 80190a0:	2002      	movs	r0, #2
 80190a2:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 80190a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80190aa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80190ae:	d106      	bne.n	80190be <MobleApplicationPassPacketsToSIGModels+0x72>
 80190b0:	9b02      	ldr	r3, [sp, #8]
 80190b2:	2b01      	cmp	r3, #1
 80190b4:	d903      	bls.n	80190be <MobleApplicationPassPacketsToSIGModels+0x72>
 80190b6:	9a00      	ldr	r2, [sp, #0]
 80190b8:	3b01      	subs	r3, #1
 80190ba:	4293      	cmp	r3, r2
 80190bc:	d101      	bne.n	80190c2 <MobleApplicationPassPacketsToSIGModels+0x76>
 80190be:	2802      	cmp	r0, #2
 80190c0:	d10a      	bne.n	80190d8 <MobleApplicationPassPacketsToSIGModels+0x8c>
 80190c2:	9b00      	ldr	r3, [sp, #0]
 80190c4:	9a02      	ldr	r2, [sp, #8]
 80190c6:	3301      	adds	r3, #1
 80190c8:	9300      	str	r3, [sp, #0]
 80190ca:	f89d 3000 	ldrb.w	r3, [sp]
 80190ce:	429a      	cmp	r2, r3
 80190d0:	f507 7739 	add.w	r7, r7, #740	@ 0x2e4
 80190d4:	d8d0      	bhi.n	8019078 <MobleApplicationPassPacketsToSIGModels+0x2c>
 80190d6:	2002      	movs	r0, #2
 80190d8:	b009      	add	sp, #36	@ 0x24
 80190da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190de:	9901      	ldr	r1, [sp, #4]
 80190e0:	f104 02a0 	add.w	r2, r4, #160	@ 0xa0
 80190e4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80190e8:	9903      	ldr	r1, [sp, #12]
 80190ea:	428a      	cmp	r2, r1
 80190ec:	d1d1      	bne.n	8019092 <MobleApplicationPassPacketsToSIGModels+0x46>
 80190ee:	f894 209a 	ldrb.w	r2, [r4, #154]	@ 0x9a
 80190f2:	2a01      	cmp	r2, #1
 80190f4:	d1cd      	bne.n	8019092 <MobleApplicationPassPacketsToSIGModels+0x46>
 80190f6:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 8019268 <MobleApplicationPassPacketsToSIGModels+0x21c>
 80190fa:	f108 0a0c 	add.w	sl, r8, #12
 80190fe:	f858 2b04 	ldr.w	r2, [r8], #4
 8019102:	9305      	str	r3, [sp, #20]
 8019104:	4616      	mov	r6, r2
 8019106:	4659      	mov	r1, fp
 8019108:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801910a:	4628      	mov	r0, r5
 801910c:	47b0      	blx	r6
 801910e:	2801      	cmp	r0, #1
 8019110:	d9c7      	bls.n	80190a2 <MobleApplicationPassPacketsToSIGModels+0x56>
 8019112:	45c2      	cmp	sl, r8
 8019114:	9b05      	ldr	r3, [sp, #20]
 8019116:	d1f2      	bne.n	80190fe <MobleApplicationPassPacketsToSIGModels+0xb2>
 8019118:	e7bb      	b.n	8019092 <MobleApplicationPassPacketsToSIGModels+0x46>
 801911a:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 801911e:	f5b2 4f40 	cmp.w	r2, #49152	@ 0xc000
 8019122:	d1bd      	bne.n	80190a0 <MobleApplicationPassPacketsToSIGModels+0x54>
 8019124:	463c      	mov	r4, r7
 8019126:	f04f 0a00 	mov.w	sl, #0
 801912a:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 801912c:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8019130:	b938      	cbnz	r0, 8019142 <MobleApplicationPassPacketsToSIGModels+0xf6>
 8019132:	f10a 0a0e 	add.w	sl, sl, #14
 8019136:	f1ba 0f9a 	cmp.w	sl, #154	@ 0x9a
 801913a:	f104 0438 	add.w	r4, r4, #56	@ 0x38
 801913e:	d1f4      	bne.n	801912a <MobleApplicationPassPacketsToSIGModels+0xde>
 8019140:	e7ae      	b.n	80190a0 <MobleApplicationPassPacketsToSIGModels+0x54>
 8019142:	f64f 71fb 	movw	r1, #65531	@ 0xfffb
 8019146:	428a      	cmp	r2, r1
 8019148:	d921      	bls.n	801918e <MobleApplicationPassPacketsToSIGModels+0x142>
 801914a:	9a04      	ldr	r2, [sp, #16]
 801914c:	5ca2      	ldrb	r2, [r4, r2]
 801914e:	2a00      	cmp	r2, #0
 8019150:	d0ef      	beq.n	8019132 <MobleApplicationPassPacketsToSIGModels+0xe6>
 8019152:	9901      	ldr	r1, [sp, #4]
 8019154:	f104 02a0 	add.w	r2, r4, #160	@ 0xa0
 8019158:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801915c:	9903      	ldr	r1, [sp, #12]
 801915e:	428a      	cmp	r2, r1
 8019160:	d1e7      	bne.n	8019132 <MobleApplicationPassPacketsToSIGModels+0xe6>
 8019162:	f894 209a 	ldrb.w	r2, [r4, #154]	@ 0x9a
 8019166:	2a01      	cmp	r2, #1
 8019168:	d1e3      	bne.n	8019132 <MobleApplicationPassPacketsToSIGModels+0xe6>
 801916a:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 8019268 <MobleApplicationPassPacketsToSIGModels+0x21c>
 801916e:	f108 090c 	add.w	r9, r8, #12
 8019172:	f858 2b04 	ldr.w	r2, [r8], #4
 8019176:	9305      	str	r3, [sp, #20]
 8019178:	4616      	mov	r6, r2
 801917a:	4659      	mov	r1, fp
 801917c:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801917e:	4628      	mov	r0, r5
 8019180:	47b0      	blx	r6
 8019182:	2801      	cmp	r0, #1
 8019184:	d98d      	bls.n	80190a2 <MobleApplicationPassPacketsToSIGModels+0x56>
 8019186:	45c1      	cmp	r9, r8
 8019188:	9b05      	ldr	r3, [sp, #20]
 801918a:	d1f2      	bne.n	8019172 <MobleApplicationPassPacketsToSIGModels+0x126>
 801918c:	e7d1      	b.n	8019132 <MobleApplicationPassPacketsToSIGModels+0xe6>
 801918e:	f104 027e 	add.w	r2, r4, #126	@ 0x7e
 8019192:	9205      	str	r2, [sp, #20]
 8019194:	f104 02a0 	add.w	r2, r4, #160	@ 0xa0
 8019198:	f04f 0800 	mov.w	r8, #0
 801919c:	9206      	str	r2, [sp, #24]
 801919e:	9a05      	ldr	r2, [sp, #20]
 80191a0:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 80191a4:	9205      	str	r2, [sp, #20]
 80191a6:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 80191aa:	f108 0801 	add.w	r8, r8, #1
 80191ae:	4290      	cmp	r0, r2
 80191b0:	fa5f f888 	uxtb.w	r8, r8
 80191b4:	d003      	beq.n	80191be <MobleApplicationPassPacketsToSIGModels+0x172>
 80191b6:	f1b8 0f0a 	cmp.w	r8, #10
 80191ba:	d1f0      	bne.n	801919e <MobleApplicationPassPacketsToSIGModels+0x152>
 80191bc:	e7b9      	b.n	8019132 <MobleApplicationPassPacketsToSIGModels+0xe6>
 80191be:	9a04      	ldr	r2, [sp, #16]
 80191c0:	5ca2      	ldrb	r2, [r4, r2]
 80191c2:	2a00      	cmp	r2, #0
 80191c4:	d0f7      	beq.n	80191b6 <MobleApplicationPassPacketsToSIGModels+0x16a>
 80191c6:	9901      	ldr	r1, [sp, #4]
 80191c8:	9a06      	ldr	r2, [sp, #24]
 80191ca:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80191ce:	9903      	ldr	r1, [sp, #12]
 80191d0:	428a      	cmp	r2, r1
 80191d2:	d1f0      	bne.n	80191b6 <MobleApplicationPassPacketsToSIGModels+0x16a>
 80191d4:	f894 209a 	ldrb.w	r2, [r4, #154]	@ 0x9a
 80191d8:	2a01      	cmp	r2, #1
 80191da:	d1ec      	bne.n	80191b6 <MobleApplicationPassPacketsToSIGModels+0x16a>
 80191dc:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 8019268 <MobleApplicationPassPacketsToSIGModels+0x21c>
 80191e0:	f859 2b04 	ldr.w	r2, [r9], #4
 80191e4:	9307      	str	r3, [sp, #28]
 80191e6:	4616      	mov	r6, r2
 80191e8:	4659      	mov	r1, fp
 80191ea:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80191ec:	4628      	mov	r0, r5
 80191ee:	47b0      	blx	r6
 80191f0:	2801      	cmp	r0, #1
 80191f2:	f67f af56 	bls.w	80190a2 <MobleApplicationPassPacketsToSIGModels+0x56>
 80191f6:	4b1a      	ldr	r3, [pc, #104]	@ (8019260 <MobleApplicationPassPacketsToSIGModels+0x214>)
 80191f8:	4599      	cmp	r9, r3
 80191fa:	9b07      	ldr	r3, [sp, #28]
 80191fc:	d1f0      	bne.n	80191e0 <MobleApplicationPassPacketsToSIGModels+0x194>
 80191fe:	e7da      	b.n	80191b6 <MobleApplicationPassPacketsToSIGModels+0x16a>
 8019200:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8019268 <MobleApplicationPassPacketsToSIGModels+0x21c>
 8019204:	4e17      	ldr	r6, [pc, #92]	@ (8019264 <MobleApplicationPassPacketsToSIGModels+0x218>)
 8019206:	f04f 0a38 	mov.w	sl, #56	@ 0x38
 801920a:	f859 8b04 	ldr.w	r8, [r9], #4
 801920e:	b2e3      	uxtb	r3, r4
 8019210:	b944      	cbnz	r4, 8019224 <MobleApplicationPassPacketsToSIGModels+0x1d8>
 8019212:	f8d6 20b0 	ldr.w	r2, [r6, #176]	@ 0xb0
 8019216:	4623      	mov	r3, r4
 8019218:	4659      	mov	r1, fp
 801921a:	4628      	mov	r0, r5
 801921c:	47c0      	blx	r8
 801921e:	2801      	cmp	r0, #1
 8019220:	d818      	bhi.n	8019254 <MobleApplicationPassPacketsToSIGModels+0x208>
 8019222:	e759      	b.n	80190d8 <MobleApplicationPassPacketsToSIGModels+0x8c>
 8019224:	2b01      	cmp	r3, #1
 8019226:	d103      	bne.n	8019230 <MobleApplicationPassPacketsToSIGModels+0x1e4>
 8019228:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 801922c:	2300      	movs	r3, #0
 801922e:	e7f3      	b.n	8019218 <MobleApplicationPassPacketsToSIGModels+0x1cc>
 8019230:	2700      	movs	r7, #0
 8019232:	b2fa      	uxtb	r2, r7
 8019234:	fb0a 6202 	mla	r2, sl, r2, r6
 8019238:	2300      	movs	r3, #0
 801923a:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 801923e:	4659      	mov	r1, fp
 8019240:	4628      	mov	r0, r5
 8019242:	47c0      	blx	r8
 8019244:	2802      	cmp	r0, #2
 8019246:	d1ea      	bne.n	801921e <MobleApplicationPassPacketsToSIGModels+0x1d2>
 8019248:	f896 238c 	ldrb.w	r2, [r6, #908]	@ 0x38c
 801924c:	3701      	adds	r7, #1
 801924e:	b2fb      	uxtb	r3, r7
 8019250:	429a      	cmp	r2, r3
 8019252:	d8ee      	bhi.n	8019232 <MobleApplicationPassPacketsToSIGModels+0x1e6>
 8019254:	3401      	adds	r4, #1
 8019256:	2c03      	cmp	r4, #3
 8019258:	d1d7      	bne.n	801920a <MobleApplicationPassPacketsToSIGModels+0x1be>
 801925a:	e73c      	b.n	80190d6 <MobleApplicationPassPacketsToSIGModels+0x8a>
 801925c:	200003d0 	.word	0x200003d0
 8019260:	0802cd7c 	.word	0x0802cd7c
 8019264:	20000324 	.word	0x20000324
 8019268:	0802cd70 	.word	0x0802cd70

0801926c <MobleApplicationPassPacketsToVENDORModelsNew>:
 801926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019270:	6803      	ldr	r3, [r0, #0]
 8019272:	f891 900c 	ldrb.w	r9, [r1, #12]
 8019276:	7f1b      	ldrb	r3, [r3, #28]
 8019278:	4f56      	ldr	r7, [pc, #344]	@ (80193d4 <MobleApplicationPassPacketsToVENDORModelsNew+0x168>)
 801927a:	b087      	sub	sp, #28
 801927c:	4605      	mov	r5, r0
 801927e:	9300      	str	r3, [sp, #0]
 8019280:	89cb      	ldrh	r3, [r1, #14]
 8019282:	9301      	str	r3, [sp, #4]
 8019284:	f109 03a6 	add.w	r3, r9, #166	@ 0xa6
 8019288:	468a      	mov	sl, r1
 801928a:	2600      	movs	r6, #0
 801928c:	9302      	str	r3, [sp, #8]
 801928e:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8019292:	8838      	ldrh	r0, [r7, #0]
 8019294:	4290      	cmp	r0, r2
 8019296:	b2f3      	uxtb	r3, r6
 8019298:	d13d      	bne.n	8019316 <MobleApplicationPassPacketsToVENDORModelsNew+0xaa>
 801929a:	463c      	mov	r4, r7
 801929c:	f04f 0801 	mov.w	r8, #1
 80192a0:	9a02      	ldr	r2, [sp, #8]
 80192a2:	5ca2      	ldrb	r2, [r4, r2]
 80192a4:	b19a      	cbz	r2, 80192ce <MobleApplicationPassPacketsToVENDORModelsNew+0x62>
 80192a6:	f104 02a0 	add.w	r2, r4, #160	@ 0xa0
 80192aa:	9901      	ldr	r1, [sp, #4]
 80192ac:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 80192b0:	428a      	cmp	r2, r1
 80192b2:	d10c      	bne.n	80192ce <MobleApplicationPassPacketsToVENDORModelsNew+0x62>
 80192b4:	f894 2099 	ldrb.w	r2, [r4, #153]	@ 0x99
 80192b8:	2a01      	cmp	r2, #1
 80192ba:	d108      	bne.n	80192ce <MobleApplicationPassPacketsToVENDORModelsNew+0x62>
 80192bc:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80192be:	9303      	str	r3, [sp, #12]
 80192c0:	4651      	mov	r1, sl
 80192c2:	4628      	mov	r0, r5
 80192c4:	f7ff f853 	bl	801836e <MobleModelBluemeshNewPacket_ExtCall>
 80192c8:	2801      	cmp	r0, #1
 80192ca:	9b03      	ldr	r3, [sp, #12]
 80192cc:	d909      	bls.n	80192e2 <MobleApplicationPassPacketsToVENDORModelsNew+0x76>
 80192ce:	f108 0801 	add.w	r8, r8, #1
 80192d2:	fa5f f888 	uxtb.w	r8, r8
 80192d6:	f1b8 0f0c 	cmp.w	r8, #12
 80192da:	f104 0438 	add.w	r4, r4, #56	@ 0x38
 80192de:	d1df      	bne.n	80192a0 <MobleApplicationPassPacketsToVENDORModelsNew+0x34>
 80192e0:	2002      	movs	r0, #2
 80192e2:	f9ba 300a 	ldrsh.w	r3, [sl, #10]
 80192e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80192ea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80192ee:	d105      	bne.n	80192fc <MobleApplicationPassPacketsToVENDORModelsNew+0x90>
 80192f0:	9b00      	ldr	r3, [sp, #0]
 80192f2:	2b01      	cmp	r3, #1
 80192f4:	d902      	bls.n	80192fc <MobleApplicationPassPacketsToVENDORModelsNew+0x90>
 80192f6:	3b01      	subs	r3, #1
 80192f8:	42b3      	cmp	r3, r6
 80192fa:	d101      	bne.n	8019300 <MobleApplicationPassPacketsToVENDORModelsNew+0x94>
 80192fc:	2802      	cmp	r0, #2
 80192fe:	d107      	bne.n	8019310 <MobleApplicationPassPacketsToVENDORModelsNew+0xa4>
 8019300:	9a00      	ldr	r2, [sp, #0]
 8019302:	3601      	adds	r6, #1
 8019304:	b2f3      	uxtb	r3, r6
 8019306:	429a      	cmp	r2, r3
 8019308:	f507 7739 	add.w	r7, r7, #740	@ 0x2e4
 801930c:	d8bf      	bhi.n	801928e <MobleApplicationPassPacketsToVENDORModelsNew+0x22>
 801930e:	2002      	movs	r0, #2
 8019310:	b007      	add	sp, #28
 8019312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019316:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 801931a:	f5b2 4f40 	cmp.w	r2, #49152	@ 0xc000
 801931e:	d1df      	bne.n	80192e0 <MobleApplicationPassPacketsToVENDORModelsNew+0x74>
 8019320:	463c      	mov	r4, r7
 8019322:	f04f 0b00 	mov.w	fp, #0
 8019326:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8019328:	f8ba 000a 	ldrh.w	r0, [sl, #10]
 801932c:	b93a      	cbnz	r2, 801933e <MobleApplicationPassPacketsToVENDORModelsNew+0xd2>
 801932e:	f10b 0b0e 	add.w	fp, fp, #14
 8019332:	f1bb 0f9a 	cmp.w	fp, #154	@ 0x9a
 8019336:	f104 0438 	add.w	r4, r4, #56	@ 0x38
 801933a:	d1f4      	bne.n	8019326 <MobleApplicationPassPacketsToVENDORModelsNew+0xba>
 801933c:	e7d0      	b.n	80192e0 <MobleApplicationPassPacketsToVENDORModelsNew+0x74>
 801933e:	f64f 71fb 	movw	r1, #65531	@ 0xfffb
 8019342:	4288      	cmp	r0, r1
 8019344:	d917      	bls.n	8019376 <MobleApplicationPassPacketsToVENDORModelsNew+0x10a>
 8019346:	9902      	ldr	r1, [sp, #8]
 8019348:	5c60      	ldrb	r0, [r4, r1]
 801934a:	2800      	cmp	r0, #0
 801934c:	d0ef      	beq.n	801932e <MobleApplicationPassPacketsToVENDORModelsNew+0xc2>
 801934e:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 8019352:	9901      	ldr	r1, [sp, #4]
 8019354:	f830 0019 	ldrh.w	r0, [r0, r9, lsl #1]
 8019358:	4288      	cmp	r0, r1
 801935a:	d1e8      	bne.n	801932e <MobleApplicationPassPacketsToVENDORModelsNew+0xc2>
 801935c:	f894 0099 	ldrb.w	r0, [r4, #153]	@ 0x99
 8019360:	2801      	cmp	r0, #1
 8019362:	d1e4      	bne.n	801932e <MobleApplicationPassPacketsToVENDORModelsNew+0xc2>
 8019364:	4651      	mov	r1, sl
 8019366:	4628      	mov	r0, r5
 8019368:	9303      	str	r3, [sp, #12]
 801936a:	f7ff f800 	bl	801836e <MobleModelBluemeshNewPacket_ExtCall>
 801936e:	2801      	cmp	r0, #1
 8019370:	9b03      	ldr	r3, [sp, #12]
 8019372:	d8dc      	bhi.n	801932e <MobleApplicationPassPacketsToVENDORModelsNew+0xc2>
 8019374:	e7b5      	b.n	80192e2 <MobleApplicationPassPacketsToVENDORModelsNew+0x76>
 8019376:	f104 027e 	add.w	r2, r4, #126	@ 0x7e
 801937a:	9203      	str	r2, [sp, #12]
 801937c:	f104 02a0 	add.w	r2, r4, #160	@ 0xa0
 8019380:	f04f 0801 	mov.w	r8, #1
 8019384:	9204      	str	r2, [sp, #16]
 8019386:	9a03      	ldr	r2, [sp, #12]
 8019388:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 801938c:	9203      	str	r2, [sp, #12]
 801938e:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8019392:	4290      	cmp	r0, r2
 8019394:	d115      	bne.n	80193c2 <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 8019396:	9a02      	ldr	r2, [sp, #8]
 8019398:	5ca2      	ldrb	r2, [r4, r2]
 801939a:	b192      	cbz	r2, 80193c2 <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 801939c:	9a04      	ldr	r2, [sp, #16]
 801939e:	9901      	ldr	r1, [sp, #4]
 80193a0:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 80193a4:	428a      	cmp	r2, r1
 80193a6:	d10c      	bne.n	80193c2 <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 80193a8:	f894 2099 	ldrb.w	r2, [r4, #153]	@ 0x99
 80193ac:	2a01      	cmp	r2, #1
 80193ae:	d108      	bne.n	80193c2 <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 80193b0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80193b2:	9305      	str	r3, [sp, #20]
 80193b4:	4651      	mov	r1, sl
 80193b6:	4628      	mov	r0, r5
 80193b8:	f7fe ffd9 	bl	801836e <MobleModelBluemeshNewPacket_ExtCall>
 80193bc:	2801      	cmp	r0, #1
 80193be:	9b05      	ldr	r3, [sp, #20]
 80193c0:	d98f      	bls.n	80192e2 <MobleApplicationPassPacketsToVENDORModelsNew+0x76>
 80193c2:	f108 0801 	add.w	r8, r8, #1
 80193c6:	fa5f f888 	uxtb.w	r8, r8
 80193ca:	f1b8 0f0b 	cmp.w	r8, #11
 80193ce:	d1da      	bne.n	8019386 <MobleApplicationPassPacketsToVENDORModelsNew+0x11a>
 80193d0:	e7ad      	b.n	801932e <MobleApplicationPassPacketsToVENDORModelsNew+0xc2>
 80193d2:	bf00      	nop
 80193d4:	200003d0 	.word	0x200003d0

080193d8 <MobleApplicationProcess>:
 80193d8:	b570      	push	{r4, r5, r6, lr}
 80193da:	4d0d      	ldr	r5, [pc, #52]	@ (8019410 <MobleApplicationProcess+0x38>)
 80193dc:	f8d5 1954 	ldr.w	r1, [r5, #2388]	@ 0x954
 80193e0:	4606      	mov	r6, r0
 80193e2:	b199      	cbz	r1, 801940c <MobleApplicationProcess+0x34>
 80193e4:	f7ff fe32 	bl	801904c <MobleApplicationPassPacketsToSIGModels>
 80193e8:	2801      	cmp	r0, #1
 80193ea:	4604      	mov	r4, r0
 80193ec:	d905      	bls.n	80193fa <MobleApplicationProcess+0x22>
 80193ee:	f8d5 1954 	ldr.w	r1, [r5, #2388]	@ 0x954
 80193f2:	4630      	mov	r0, r6
 80193f4:	f7ff ff3a 	bl	801926c <MobleApplicationPassPacketsToVENDORModelsNew>
 80193f8:	4604      	mov	r4, r0
 80193fa:	f8d5 0954 	ldr.w	r0, [r5, #2388]	@ 0x954
 80193fe:	f7fe ff1d 	bl	801823c <MobleMemFree>
 8019402:	2300      	movs	r3, #0
 8019404:	f8c5 3954 	str.w	r3, [r5, #2388]	@ 0x954
 8019408:	4620      	mov	r0, r4
 801940a:	bd70      	pop	{r4, r5, r6, pc}
 801940c:	2401      	movs	r4, #1
 801940e:	e7fb      	b.n	8019408 <MobleApplicationProcess+0x30>
 8019410:	2000141c 	.word	0x2000141c

08019414 <MobleApplicationGetSigModelList>:
 8019414:	b538      	push	{r3, r4, r5, lr}
 8019416:	460c      	mov	r4, r1
 8019418:	b981      	cbnz	r1, 801943c <MobleApplicationGetSigModelList+0x28>
 801941a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801941e:	f840 3b04 	str.w	r3, [r0], #4
 8019422:	2502      	movs	r5, #2
 8019424:	4621      	mov	r1, r4
 8019426:	f7f7 fa41 	bl	80108ac <ApplicationGetSigModelList>
 801942a:	4428      	add	r0, r5
 801942c:	b240      	sxtb	r0, r0
 801942e:	1e83      	subs	r3, r0, #2
 8019430:	2b0a      	cmp	r3, #10
 8019432:	d905      	bls.n	8019440 <MobleApplicationGetSigModelList+0x2c>
 8019434:	b95c      	cbnz	r4, 801944e <MobleApplicationGetSigModelList+0x3a>
 8019436:	f04f 30ff 	mov.w	r0, #4294967295
 801943a:	e007      	b.n	801944c <MobleApplicationGetSigModelList+0x38>
 801943c:	2500      	movs	r5, #0
 801943e:	e7f1      	b.n	8019424 <MobleApplicationGetSigModelList+0x10>
 8019440:	280a      	cmp	r0, #10
 8019442:	dd03      	ble.n	801944c <MobleApplicationGetSigModelList+0x38>
 8019444:	2c00      	cmp	r4, #0
 8019446:	bf18      	it	ne
 8019448:	f04f 30ff 	movne.w	r0, #4294967295
 801944c:	bd38      	pop	{r3, r4, r5, pc}
 801944e:	280b      	cmp	r0, #11
 8019450:	bfa8      	it	ge
 8019452:	f04f 30ff 	movge.w	r0, #4294967295
 8019456:	e7f9      	b.n	801944c <MobleApplicationGetSigModelList+0x38>

08019458 <MobleApplicationGetVendorModelList>:
 8019458:	b508      	push	{r3, lr}
 801945a:	f7f7 fa59 	bl	8010910 <ApplicationGetVendorModelList>
 801945e:	b240      	sxtb	r0, r0
 8019460:	2802      	cmp	r0, #2
 8019462:	bfa8      	it	ge
 8019464:	f04f 30ff 	movge.w	r0, #4294967295
 8019468:	bd08      	pop	{r3, pc}

0801946a <MobleApplicationModelSupported>:
 801946a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801946c:	f030 0302 	bics.w	r3, r0, #2
 8019470:	bf06      	itte	eq
 8019472:	fab1 f481 	clzeq	r4, r1
 8019476:	0964      	lsreq	r4, r4, #5
 8019478:	2400      	movne	r4, #0
 801947a:	4605      	mov	r5, r0
 801947c:	9101      	str	r1, [sp, #4]
 801947e:	f7f7 faaf 	bl	80109e0 <ApplicationChkVendorModelActive>
 8019482:	9901      	ldr	r1, [sp, #4]
 8019484:	2800      	cmp	r0, #0
 8019486:	b2a8      	uxth	r0, r5
 8019488:	bf18      	it	ne
 801948a:	2401      	movne	r4, #1
 801948c:	f7f7 fa6c 	bl	8010968 <ApplicationChkSigModelActive>
 8019490:	2800      	cmp	r0, #0
 8019492:	bf0c      	ite	eq
 8019494:	4620      	moveq	r0, r4
 8019496:	2001      	movne	r0, #1
 8019498:	b003      	add	sp, #12
 801949a:	bd30      	pop	{r4, r5, pc}

0801949c <MobleApplicationUpdateSigModelList>:
 801949c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801949e:	4c1c      	ldr	r4, [pc, #112]	@ (8019510 <MobleApplicationUpdateSigModelList+0x74>)
 80194a0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80194a4:	bb03      	cbnz	r3, 80194e8 <MobleApplicationUpdateSigModelList+0x4c>
 80194a6:	f8a4 10ac 	strh.w	r1, [r4, #172]	@ 0xac
 80194aa:	8801      	ldrh	r1, [r0, #0]
 80194ac:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0
 80194b0:	1e95      	subs	r5, r2, #2
 80194b2:	8841      	ldrh	r1, [r0, #2]
 80194b4:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0
 80194b8:	b2ed      	uxtb	r5, r5
 80194ba:	3004      	adds	r0, #4
 80194bc:	4915      	ldr	r1, [pc, #84]	@ (8019514 <MobleApplicationUpdateSigModelList+0x78>)
 80194be:	f44f 7639 	mov.w	r6, #740	@ 0x2e4
 80194c2:	fb06 1103 	mla	r1, r6, r3, r1
 80194c6:	f04f 0c01 	mov.w	ip, #1
 80194ca:	2600      	movs	r6, #0
 80194cc:	b2f7      	uxtb	r7, r6
 80194ce:	42bd      	cmp	r5, r7
 80194d0:	d90e      	bls.n	80194f0 <MobleApplicationUpdateSigModelList+0x54>
 80194d2:	f891 7099 	ldrb.w	r7, [r1, #153]	@ 0x99
 80194d6:	b927      	cbnz	r7, 80194e2 <MobleApplicationUpdateSigModelList+0x46>
 80194d8:	f830 7b02 	ldrh.w	r7, [r0], #2
 80194dc:	678f      	str	r7, [r1, #120]	@ 0x78
 80194de:	f881 c09a 	strb.w	ip, [r1, #154]	@ 0x9a
 80194e2:	3601      	adds	r6, #1
 80194e4:	3138      	adds	r1, #56	@ 0x38
 80194e6:	e7f1      	b.n	80194cc <MobleApplicationUpdateSigModelList+0x30>
 80194e8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80194ec:	42ab      	cmp	r3, r5
 80194ee:	d306      	bcc.n	80194fe <MobleApplicationUpdateSigModelList+0x62>
 80194f0:	f44f 7139 	mov.w	r1, #740	@ 0x2e4
 80194f4:	fb01 4303 	mla	r3, r1, r3, r4
 80194f8:	f883 238c 	strb.w	r2, [r3, #908]	@ 0x38c
 80194fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194fe:	f44f 7539 	mov.w	r5, #740	@ 0x2e4
 8019502:	fb05 4503 	mla	r5, r5, r3, r4
 8019506:	4419      	add	r1, r3
 8019508:	f8a5 10ac 	strh.w	r1, [r5, #172]	@ 0xac
 801950c:	4615      	mov	r5, r2
 801950e:	e7d5      	b.n	80194bc <MobleApplicationUpdateSigModelList+0x20>
 8019510:	20000324 	.word	0x20000324
 8019514:	200003d0 	.word	0x200003d0

08019518 <MobleApplicationUpdateVendorModelList>:
 8019518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801951a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801951e:	b9b3      	cbnz	r3, 801954e <MobleApplicationUpdateVendorModelList+0x36>
 8019520:	3902      	subs	r1, #2
 8019522:	4d16      	ldr	r5, [pc, #88]	@ (801957c <MobleApplicationUpdateVendorModelList+0x64>)
 8019524:	b2c9      	uxtb	r1, r1
 8019526:	f8a5 40ac 	strh.w	r4, [r5, #172]	@ 0xac
 801952a:	4c15      	ldr	r4, [pc, #84]	@ (8019580 <MobleApplicationUpdateVendorModelList+0x68>)
 801952c:	f44f 7539 	mov.w	r5, #740	@ 0x2e4
 8019530:	fb05 4403 	mla	r4, r5, r3, r4
 8019534:	2701      	movs	r7, #1
 8019536:	2500      	movs	r5, #0
 8019538:	b2ee      	uxtb	r6, r5
 801953a:	42b1      	cmp	r1, r6
 801953c:	d812      	bhi.n	8019564 <MobleApplicationUpdateVendorModelList+0x4c>
 801953e:	490f      	ldr	r1, [pc, #60]	@ (801957c <MobleApplicationUpdateVendorModelList+0x64>)
 8019540:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8019544:	fb00 1303 	mla	r3, r0, r3, r1
 8019548:	f883 238d 	strb.w	r2, [r3, #909]	@ 0x38d
 801954c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801954e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8019552:	42ab      	cmp	r3, r5
 8019554:	d2e9      	bcs.n	801952a <MobleApplicationUpdateVendorModelList+0x12>
 8019556:	4d09      	ldr	r5, [pc, #36]	@ (801957c <MobleApplicationUpdateVendorModelList+0x64>)
 8019558:	f44f 7639 	mov.w	r6, #740	@ 0x2e4
 801955c:	fb06 5503 	mla	r5, r6, r3, r5
 8019560:	441c      	add	r4, r3
 8019562:	e7e0      	b.n	8019526 <MobleApplicationUpdateVendorModelList+0xe>
 8019564:	f894 609a 	ldrb.w	r6, [r4, #154]	@ 0x9a
 8019568:	b926      	cbnz	r6, 8019574 <MobleApplicationUpdateVendorModelList+0x5c>
 801956a:	f850 6b04 	ldr.w	r6, [r0], #4
 801956e:	67a6      	str	r6, [r4, #120]	@ 0x78
 8019570:	f884 7099 	strb.w	r7, [r4, #153]	@ 0x99
 8019574:	3501      	adds	r5, #1
 8019576:	3438      	adds	r4, #56	@ 0x38
 8019578:	e7de      	b.n	8019538 <MobleApplicationUpdateVendorModelList+0x20>
 801957a:	bf00      	nop
 801957c:	20000324 	.word	0x20000324
 8019580:	200003d0 	.word	0x200003d0

08019584 <MobleTransportIsBusy>:
 8019584:	b508      	push	{r3, lr}
 8019586:	b930      	cbnz	r0, 8019596 <MobleTransportIsBusy+0x12>
 8019588:	4b05      	ldr	r3, [pc, #20]	@ (80195a0 <MobleTransportIsBusy+0x1c>)
 801958a:	4a06      	ldr	r2, [pc, #24]	@ (80195a4 <MobleTransportIsBusy+0x20>)
 801958c:	4806      	ldr	r0, [pc, #24]	@ (80195a8 <MobleTransportIsBusy+0x24>)
 801958e:	f240 4153 	movw	r1, #1107	@ 0x453
 8019592:	f00c fb7f 	bl	8025c94 <__assert_func>
 8019596:	6880      	ldr	r0, [r0, #8]
 8019598:	3800      	subs	r0, #0
 801959a:	bf18      	it	ne
 801959c:	2001      	movne	r0, #1
 801959e:	bd08      	pop	{r3, pc}
 80195a0:	0802e4b8 	.word	0x0802e4b8
 80195a4:	0802cd7c 	.word	0x0802cd7c
 80195a8:	0802e7f8 	.word	0x0802e7f8

080195ac <MobleTransSarInit>:
 80195ac:	b510      	push	{r4, lr}
 80195ae:	4c1c      	ldr	r4, [pc, #112]	@ (8019620 <MobleTransSarInit+0x74>)
 80195b0:	f8d4 12e0 	ldr.w	r1, [r4, #736]	@ 0x2e0
 80195b4:	b319      	cbz	r1, 80195fe <MobleTransSarInit+0x52>
 80195b6:	f8d4 32e4 	ldr.w	r3, [r4, #740]	@ 0x2e4
 80195ba:	b943      	cbnz	r3, 80195ce <MobleTransSarInit+0x22>
 80195bc:	f894 02dc 	ldrb.w	r0, [r4, #732]	@ 0x2dc
 80195c0:	232c      	movs	r3, #44	@ 0x2c
 80195c2:	4358      	muls	r0, r3
 80195c4:	f7fe fdb0 	bl	8018128 <MobleMemAlloc>
 80195c8:	f8c4 02e4 	str.w	r0, [r4, #740]	@ 0x2e4
 80195cc:	b330      	cbz	r0, 801961c <MobleTransSarInit+0x70>
 80195ce:	f8d4 3300 	ldr.w	r3, [r4, #768]	@ 0x300
 80195d2:	b933      	cbnz	r3, 80195e2 <MobleTransSarInit+0x36>
 80195d4:	f8b4 094c 	ldrh.w	r0, [r4, #2380]	@ 0x94c
 80195d8:	f7fe fda6 	bl	8018128 <MobleMemAlloc>
 80195dc:	f8c4 0300 	str.w	r0, [r4, #768]	@ 0x300
 80195e0:	b1e0      	cbz	r0, 801961c <MobleTransSarInit+0x70>
 80195e2:	f8d4 332c 	ldr.w	r3, [r4, #812]	@ 0x32c
 80195e6:	b933      	cbnz	r3, 80195f6 <MobleTransSarInit+0x4a>
 80195e8:	f8b4 094c 	ldrh.w	r0, [r4, #2380]	@ 0x94c
 80195ec:	f7fe fd9c 	bl	8018128 <MobleMemAlloc>
 80195f0:	f8c4 032c 	str.w	r0, [r4, #812]	@ 0x32c
 80195f4:	b190      	cbz	r0, 801961c <MobleTransSarInit+0x70>
 80195f6:	2000      	movs	r0, #0
 80195f8:	f8c4 0958 	str.w	r0, [r4, #2392]	@ 0x958
 80195fc:	e00f      	b.n	801961e <MobleTransSarInit+0x72>
 80195fe:	2260      	movs	r2, #96	@ 0x60
 8019600:	f504 7038 	add.w	r0, r4, #736	@ 0x2e0
 8019604:	f00d fae4 	bl	8026bd0 <memset>
 8019608:	f894 02dc 	ldrb.w	r0, [r4, #732]	@ 0x2dc
 801960c:	232c      	movs	r3, #44	@ 0x2c
 801960e:	4358      	muls	r0, r3
 8019610:	f7fe fd8a 	bl	8018128 <MobleMemAlloc>
 8019614:	f8c4 02e0 	str.w	r0, [r4, #736]	@ 0x2e0
 8019618:	2800      	cmp	r0, #0
 801961a:	d1cc      	bne.n	80195b6 <MobleTransSarInit+0xa>
 801961c:	2002      	movs	r0, #2
 801961e:	bd10      	pop	{r4, pc}
 8019620:	2000141c 	.word	0x2000141c

08019624 <MobleTransportParseHdr>:
 8019624:	b570      	push	{r4, r5, r6, lr}
 8019626:	6803      	ldr	r3, [r0, #0]
 8019628:	7889      	ldrb	r1, [r1, #2]
 801962a:	7804      	ldrb	r4, [r0, #0]
 801962c:	ba1b      	rev	r3, r3
 801962e:	0fdd      	lsrs	r5, r3, #31
 8019630:	bb01      	cbnz	r1, 8019674 <MobleTransportParseHdr+0x50>
 8019632:	0f99      	lsrs	r1, r3, #30
 8019634:	b93d      	cbnz	r5, 8019646 <MobleTransportParseHdr+0x22>
 8019636:	7015      	strb	r5, [r2, #0]
 8019638:	7055      	strb	r5, [r2, #1]
 801963a:	7091      	strb	r1, [r2, #2]
 801963c:	7803      	ldrb	r3, [r0, #0]
 801963e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019642:	70d3      	strb	r3, [r2, #3]
 8019644:	bd70      	pop	{r4, r5, r6, pc}
 8019646:	2401      	movs	r4, #1
 8019648:	4021      	ands	r1, r4
 801964a:	7014      	strb	r4, [r2, #0]
 801964c:	7054      	strb	r4, [r2, #1]
 801964e:	7091      	strb	r1, [r2, #2]
 8019650:	7801      	ldrb	r1, [r0, #0]
 8019652:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8019656:	70d1      	strb	r1, [r2, #3]
 8019658:	f3c3 51c0 	ubfx	r1, r3, #23, #1
 801965c:	7111      	strb	r1, [r2, #4]
 801965e:	f3c3 218c 	ubfx	r1, r3, #10, #13
 8019662:	f8a2 1005 	strh.w	r1, [r2, #5]
 8019666:	f3c3 1144 	ubfx	r1, r3, #5, #5
 801966a:	f003 031f 	and.w	r3, r3, #31
 801966e:	71d1      	strb	r1, [r2, #7]
 8019670:	7213      	strb	r3, [r2, #8]
 8019672:	e7e7      	b.n	8019644 <MobleTransportParseHdr+0x20>
 8019674:	f004 067f 	and.w	r6, r4, #127	@ 0x7f
 8019678:	b975      	cbnz	r5, 8019698 <MobleTransportParseHdr+0x74>
 801967a:	b94e      	cbnz	r6, 8019690 <MobleTransportParseHdr+0x6c>
 801967c:	f3c3 51c0 	ubfx	r1, r3, #23, #1
 8019680:	2002      	movs	r0, #2
 8019682:	f3c3 238c 	ubfx	r3, r3, #10, #13
 8019686:	7010      	strb	r0, [r2, #0]
 8019688:	7056      	strb	r6, [r2, #1]
 801968a:	70d1      	strb	r1, [r2, #3]
 801968c:	8093      	strh	r3, [r2, #4]
 801968e:	e7d9      	b.n	8019644 <MobleTransportParseHdr+0x20>
 8019690:	2303      	movs	r3, #3
 8019692:	7013      	strb	r3, [r2, #0]
 8019694:	7056      	strb	r6, [r2, #1]
 8019696:	e7d5      	b.n	8019644 <MobleTransportParseHdr+0x20>
 8019698:	2401      	movs	r4, #1
 801969a:	7014      	strb	r4, [r2, #0]
 801969c:	7054      	strb	r4, [r2, #1]
 801969e:	f3c3 7480 	ubfx	r4, r3, #30, #1
 80196a2:	7094      	strb	r4, [r2, #2]
 80196a4:	7800      	ldrb	r0, [r0, #0]
 80196a6:	7256      	strb	r6, [r2, #9]
 80196a8:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 80196ac:	70d0      	strb	r0, [r2, #3]
 80196ae:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 80196b2:	7110      	strb	r0, [r2, #4]
 80196b4:	e7d3      	b.n	801965e <MobleTransportParseHdr+0x3a>
	...

080196b8 <MobleTransportRenderHdr>:
 80196b8:	b538      	push	{r3, r4, r5, lr}
 80196ba:	7803      	ldrb	r3, [r0, #0]
 80196bc:	2b04      	cmp	r3, #4
 80196be:	d906      	bls.n	80196ce <MobleTransportRenderHdr+0x16>
 80196c0:	4b37      	ldr	r3, [pc, #220]	@ (80197a0 <MobleTransportRenderHdr+0xe8>)
 80196c2:	4a38      	ldr	r2, [pc, #224]	@ (80197a4 <MobleTransportRenderHdr+0xec>)
 80196c4:	4838      	ldr	r0, [pc, #224]	@ (80197a8 <MobleTransportRenderHdr+0xf0>)
 80196c6:	f240 1121 	movw	r1, #289	@ 0x121
 80196ca:	f00c fae3 	bl	8025c94 <__assert_func>
 80196ce:	3b01      	subs	r3, #1
 80196d0:	2b03      	cmp	r3, #3
 80196d2:	d803      	bhi.n	80196dc <MobleTransportRenderHdr+0x24>
 80196d4:	e8df f003 	tbb	[pc, r3]
 80196d8:	46443411 	.word	0x46443411
 80196dc:	7883      	ldrb	r3, [r0, #2]
 80196de:	b153      	cbz	r3, 80196f6 <MobleTransportRenderHdr+0x3e>
 80196e0:	78c2      	ldrb	r2, [r0, #3]
 80196e2:	7840      	ldrb	r0, [r0, #1]
 80196e4:	079b      	lsls	r3, r3, #30
 80196e6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80196ea:	0692      	lsls	r2, r2, #26
 80196ec:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
 80196f0:	0e1b      	lsrs	r3, r3, #24
 80196f2:	700b      	strb	r3, [r1, #0]
 80196f4:	e021      	b.n	801973a <MobleTransportRenderHdr+0x82>
 80196f6:	461a      	mov	r2, r3
 80196f8:	e7f3      	b.n	80196e2 <MobleTransportRenderHdr+0x2a>
 80196fa:	7883      	ldrb	r3, [r0, #2]
 80196fc:	b1f3      	cbz	r3, 801973c <MobleTransportRenderHdr+0x84>
 80196fe:	78c2      	ldrb	r2, [r0, #3]
 8019700:	f8b0 4005 	ldrh.w	r4, [r0, #5]
 8019704:	079b      	lsls	r3, r3, #30
 8019706:	04e4      	lsls	r4, r4, #19
 8019708:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801970c:	ea43 2354 	orr.w	r3, r3, r4, lsr #9
 8019710:	7904      	ldrb	r4, [r0, #4]
 8019712:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 8019716:	79c4      	ldrb	r4, [r0, #7]
 8019718:	7a00      	ldrb	r0, [r0, #8]
 801971a:	06e4      	lsls	r4, r4, #27
 801971c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8019720:	f000 001f 	and.w	r0, r0, #31
 8019724:	0692      	lsls	r2, r2, #26
 8019726:	4303      	orrs	r3, r0
 8019728:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
 801972c:	0e1a      	lsrs	r2, r3, #24
 801972e:	700a      	strb	r2, [r1, #0]
 8019730:	0c1a      	lsrs	r2, r3, #16
 8019732:	704a      	strb	r2, [r1, #1]
 8019734:	0a1a      	lsrs	r2, r3, #8
 8019736:	708a      	strb	r2, [r1, #2]
 8019738:	70cb      	strb	r3, [r1, #3]
 801973a:	bd38      	pop	{r3, r4, r5, pc}
 801973c:	461a      	mov	r2, r3
 801973e:	e7df      	b.n	8019700 <MobleTransportRenderHdr+0x48>
 8019740:	78c2      	ldrb	r2, [r0, #3]
 8019742:	7843      	ldrb	r3, [r0, #1]
 8019744:	05d2      	lsls	r2, r2, #23
 8019746:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 801974a:	8883      	ldrh	r3, [r0, #4]
 801974c:	04db      	lsls	r3, r3, #19
 801974e:	ea42 2353 	orr.w	r3, r2, r3, lsr #9
 8019752:	0e12      	lsrs	r2, r2, #24
 8019754:	700a      	strb	r2, [r1, #0]
 8019756:	0c1a      	lsrs	r2, r3, #16
 8019758:	0a1b      	lsrs	r3, r3, #8
 801975a:	704a      	strb	r2, [r1, #1]
 801975c:	708b      	strb	r3, [r1, #2]
 801975e:	e7ec      	b.n	801973a <MobleTransportRenderHdr+0x82>
 8019760:	7843      	ldrb	r3, [r0, #1]
 8019762:	e7c6      	b.n	80196f2 <MobleTransportRenderHdr+0x3a>
 8019764:	78c4      	ldrb	r4, [r0, #3]
 8019766:	7885      	ldrb	r5, [r0, #2]
 8019768:	7842      	ldrb	r2, [r0, #1]
 801976a:	7900      	ldrb	r0, [r0, #4]
 801976c:	f004 033f 	and.w	r3, r4, #63	@ 0x3f
 8019770:	01db      	lsls	r3, r3, #7
 8019772:	ea43 0355 	orr.w	r3, r3, r5, lsr #1
 8019776:	029b      	lsls	r3, r3, #10
 8019778:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801977c:	f000 0207 	and.w	r2, r0, #7
 8019780:	0092      	lsls	r2, r2, #2
 8019782:	ea42 1294 	orr.w	r2, r2, r4, lsr #6
 8019786:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801978a:	0e1a      	lsrs	r2, r3, #24
 801978c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8019790:	700a      	strb	r2, [r1, #0]
 8019792:	0c1a      	lsrs	r2, r3, #16
 8019794:	0a1b      	lsrs	r3, r3, #8
 8019796:	704a      	strb	r2, [r1, #1]
 8019798:	708b      	strb	r3, [r1, #2]
 801979a:	70c8      	strb	r0, [r1, #3]
 801979c:	e7cd      	b.n	801973a <MobleTransportRenderHdr+0x82>
 801979e:	bf00      	nop
 80197a0:	0802e846 	.word	0x0802e846
 80197a4:	0802cd91 	.word	0x0802cd91
 80197a8:	0802e948 	.word	0x0802e948

080197ac <MobleNetworkReplayCacheClear>:
 80197ac:	b570      	push	{r4, r5, r6, lr}
 80197ae:	b928      	cbnz	r0, 80197bc <MobleNetworkReplayCacheClear+0x10>
 80197b0:	4b14      	ldr	r3, [pc, #80]	@ (8019804 <MobleNetworkReplayCacheClear+0x58>)
 80197b2:	4a15      	ldr	r2, [pc, #84]	@ (8019808 <MobleNetworkReplayCacheClear+0x5c>)
 80197b4:	4815      	ldr	r0, [pc, #84]	@ (801980c <MobleNetworkReplayCacheClear+0x60>)
 80197b6:	2122      	movs	r1, #34	@ 0x22
 80197b8:	f00c fa6c 	bl	8025c94 <__assert_func>
 80197bc:	23a0      	movs	r3, #160	@ 0xa0
 80197be:	f001 0101 	and.w	r1, r1, #1
 80197c2:	fb03 0101 	mla	r1, r3, r1, r0
 80197c6:	2300      	movs	r3, #0
 80197c8:	75cb      	strb	r3, [r1, #23]
 80197ca:	77cb      	strb	r3, [r1, #31]
 80197cc:	f881 3027 	strb.w	r3, [r1, #39]	@ 0x27
 80197d0:	f881 302f 	strb.w	r3, [r1, #47]	@ 0x2f
 80197d4:	f881 3037 	strb.w	r3, [r1, #55]	@ 0x37
 80197d8:	f890 61d0 	ldrb.w	r6, [r0, #464]	@ 0x1d0
 80197dc:	2505      	movs	r5, #5
 80197de:	461c      	mov	r4, r3
 80197e0:	18f2      	adds	r2, r6, r3
 80197e2:	fbb2 f1f5 	udiv	r1, r2, r5
 80197e6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80197ea:	1a52      	subs	r2, r2, r1
 80197ec:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80197f0:	3301      	adds	r3, #1
 80197f2:	2b05      	cmp	r3, #5
 80197f4:	f8a2 4180 	strh.w	r4, [r2, #384]	@ 0x180
 80197f8:	f8c2 4184 	str.w	r4, [r2, #388]	@ 0x184
 80197fc:	f882 418d 	strb.w	r4, [r2, #397]	@ 0x18d
 8019800:	d1ee      	bne.n	80197e0 <MobleNetworkReplayCacheClear+0x34>
 8019802:	bd70      	pop	{r4, r5, r6, pc}
 8019804:	0802e4b8 	.word	0x0802e4b8
 8019808:	0802cda9 	.word	0x0802cda9
 801980c:	0802e996 	.word	0x0802e996

08019810 <MobleNetworkReplayCacheClearAll>:
 8019810:	b510      	push	{r4, lr}
 8019812:	2100      	movs	r1, #0
 8019814:	4604      	mov	r4, r0
 8019816:	f7ff ffc9 	bl	80197ac <MobleNetworkReplayCacheClear>
 801981a:	4620      	mov	r0, r4
 801981c:	2101      	movs	r1, #1
 801981e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019822:	f7ff bfc3 	b.w	80197ac <MobleNetworkReplayCacheClear>

08019826 <Test_UpperTester_Set07>:
 8019826:	b508      	push	{r3, lr}
 8019828:	f7ff fff2 	bl	8019810 <MobleNetworkReplayCacheClearAll>
 801982c:	f7ff febe 	bl	80195ac <MobleTransSarInit>
 8019830:	2000      	movs	r0, #0
 8019832:	bd08      	pop	{r3, pc}

08019834 <BnrgmTransControlProcessHeartbeat>:
 8019834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019838:	2b03      	cmp	r3, #3
 801983a:	890e      	ldrh	r6, [r1, #8]
 801983c:	894f      	ldrh	r7, [r1, #10]
 801983e:	f891 9003 	ldrb.w	r9, [r1, #3]
 8019842:	4605      	mov	r5, r0
 8019844:	d004      	beq.n	8019850 <BnrgmTransControlProcessHeartbeat+0x1c>
 8019846:	2402      	movs	r4, #2
 8019848:	4620      	mov	r0, r4
 801984a:	b004      	add	sp, #16
 801984c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019850:	4610      	mov	r0, r2
 8019852:	2102      	movs	r1, #2
 8019854:	f810 8b01 	ldrb.w	r8, [r0], #1
 8019858:	aa03      	add	r2, sp, #12
 801985a:	f7fe fdf9 	bl	8018450 <MobleInputStreamGetBigEndian>
 801985e:	4b10      	ldr	r3, [pc, #64]	@ (80198a0 <BnrgmTransControlProcessHeartbeat+0x6c>)
 8019860:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8019864:	f8d3 495c 	ldr.w	r4, [r3, #2396]	@ 0x95c
 8019868:	f008 087f 	and.w	r8, r8, #127	@ 0x7f
 801986c:	2c00      	cmp	r4, #0
 801986e:	d0ea      	beq.n	8019846 <BnrgmTransControlProcessHeartbeat+0x12>
 8019870:	fa1f fa8a 	uxth.w	sl, sl
 8019874:	f8cd a000 	str.w	sl, [sp]
 8019878:	464b      	mov	r3, r9
 801987a:	4642      	mov	r2, r8
 801987c:	4639      	mov	r1, r7
 801987e:	4630      	mov	r0, r6
 8019880:	47a0      	blx	r4
 8019882:	4604      	mov	r4, r0
 8019884:	2800      	cmp	r0, #0
 8019886:	d1de      	bne.n	8019846 <BnrgmTransControlProcessHeartbeat+0x12>
 8019888:	f8d5 51f0 	ldr.w	r5, [r5, #496]	@ 0x1f0
 801988c:	2d00      	cmp	r5, #0
 801988e:	d0db      	beq.n	8019848 <BnrgmTransControlProcessHeartbeat+0x14>
 8019890:	f8cd a000 	str.w	sl, [sp]
 8019894:	464b      	mov	r3, r9
 8019896:	4642      	mov	r2, r8
 8019898:	4639      	mov	r1, r7
 801989a:	4630      	mov	r0, r6
 801989c:	47a8      	blx	r5
 801989e:	e7d3      	b.n	8019848 <BnrgmTransControlProcessHeartbeat+0x14>
 80198a0:	2000141c 	.word	0x2000141c

080198a4 <MobleAddressAllocatePeerEntry>:
 80198a4:	b510      	push	{r4, lr}
 80198a6:	b140      	cbz	r0, 80198ba <MobleAddressAllocatePeerEntry+0x16>
 80198a8:	b181      	cbz	r1, 80198cc <MobleAddressAllocatePeerEntry+0x28>
 80198aa:	2300      	movs	r3, #0
 80198ac:	79c4      	ldrb	r4, [r0, #7]
 80198ae:	b92c      	cbnz	r4, 80198bc <MobleAddressAllocatePeerEntry+0x18>
 80198b0:	f240 137f 	movw	r3, #383	@ 0x17f
 80198b4:	8082      	strh	r2, [r0, #4]
 80198b6:	6004      	str	r4, [r0, #0]
 80198b8:	80c3      	strh	r3, [r0, #6]
 80198ba:	bd10      	pop	{r4, pc}
 80198bc:	3301      	adds	r3, #1
 80198be:	b2dc      	uxtb	r4, r3
 80198c0:	42a1      	cmp	r1, r4
 80198c2:	f100 0008 	add.w	r0, r0, #8
 80198c6:	d8f1      	bhi.n	80198ac <MobleAddressAllocatePeerEntry+0x8>
 80198c8:	2000      	movs	r0, #0
 80198ca:	e7f6      	b.n	80198ba <MobleAddressAllocatePeerEntry+0x16>
 80198cc:	4608      	mov	r0, r1
 80198ce:	e7f4      	b.n	80198ba <MobleAddressAllocatePeerEntry+0x16>

080198d0 <MobleAddressFindPeerEntry>:
 80198d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198d2:	b908      	cbnz	r0, 80198d8 <MobleAddressFindPeerEntry+0x8>
 80198d4:	2000      	movs	r0, #0
 80198d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198d8:	2900      	cmp	r1, #0
 80198da:	d0fb      	beq.n	80198d4 <MobleAddressFindPeerEntry+0x4>
 80198dc:	4604      	mov	r4, r0
 80198de:	460b      	mov	r3, r1
 80198e0:	2500      	movs	r5, #0
 80198e2:	79e6      	ldrb	r6, [r4, #7]
 80198e4:	b2ef      	uxtb	r7, r5
 80198e6:	b13e      	cbz	r6, 80198f8 <MobleAddressFindPeerEntry+0x28>
 80198e8:	79a6      	ldrb	r6, [r4, #6]
 80198ea:	b10e      	cbz	r6, 80198f0 <MobleAddressFindPeerEntry+0x20>
 80198ec:	3e01      	subs	r6, #1
 80198ee:	71a6      	strb	r6, [r4, #6]
 80198f0:	88a6      	ldrh	r6, [r4, #4]
 80198f2:	4296      	cmp	r6, r2
 80198f4:	bf08      	it	eq
 80198f6:	463b      	moveq	r3, r7
 80198f8:	3501      	adds	r5, #1
 80198fa:	b2ee      	uxtb	r6, r5
 80198fc:	42b1      	cmp	r1, r6
 80198fe:	f104 0408 	add.w	r4, r4, #8
 8019902:	d8ee      	bhi.n	80198e2 <MobleAddressFindPeerEntry+0x12>
 8019904:	4299      	cmp	r1, r3
 8019906:	d0e5      	beq.n	80198d4 <MobleAddressFindPeerEntry+0x4>
 8019908:	b21b      	sxth	r3, r3
 801990a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 801990e:	e7e2      	b.n	80198d6 <MobleAddressFindPeerEntry+0x6>

08019910 <MobleAddressIsNew>:
 8019910:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019912:	461d      	mov	r5, r3
 8019914:	4b0f      	ldr	r3, [pc, #60]	@ (8019954 <MobleAddressIsNew+0x44>)
 8019916:	685b      	ldr	r3, [r3, #4]
 8019918:	6a1b      	ldr	r3, [r3, #32]
 801991a:	e9cd 2100 	strd	r2, r1, [sp]
 801991e:	4606      	mov	r6, r0
 8019920:	4798      	blx	r3
 8019922:	4604      	mov	r4, r0
 8019924:	b9a0      	cbnz	r0, 8019950 <MobleAddressIsNew+0x40>
 8019926:	e9dd 2100 	ldrd	r2, r1, [sp]
 801992a:	4630      	mov	r0, r6
 801992c:	f7ff ffd0 	bl	80198d0 <MobleAddressFindPeerEntry>
 8019930:	b938      	cbnz	r0, 8019942 <MobleAddressIsNew+0x32>
 8019932:	4630      	mov	r0, r6
 8019934:	f7ff ffb6 	bl	80198a4 <MobleAddressAllocatePeerEntry>
 8019938:	b930      	cbnz	r0, 8019948 <MobleAddressIsNew+0x38>
 801993a:	2401      	movs	r4, #1
 801993c:	4620      	mov	r0, r4
 801993e:	b002      	add	sp, #8
 8019940:	bd70      	pop	{r4, r5, r6, pc}
 8019942:	6803      	ldr	r3, [r0, #0]
 8019944:	429d      	cmp	r5, r3
 8019946:	d9f8      	bls.n	801993a <MobleAddressIsNew+0x2a>
 8019948:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 801994c:	6005      	str	r5, [r0, #0]
 801994e:	e7f5      	b.n	801993c <MobleAddressIsNew+0x2c>
 8019950:	2400      	movs	r4, #0
 8019952:	e7f3      	b.n	801993c <MobleAddressIsNew+0x2c>
 8019954:	20000324 	.word	0x20000324

08019958 <MobleConfigCrc32>:
 8019958:	b530      	push	{r4, r5, lr}
 801995a:	4d0b      	ldr	r5, [pc, #44]	@ (8019988 <MobleConfigCrc32+0x30>)
 801995c:	4401      	add	r1, r0
 801995e:	f04f 33ff 	mov.w	r3, #4294967295
 8019962:	4281      	cmp	r1, r0
 8019964:	d101      	bne.n	801996a <MobleConfigCrc32+0x12>
 8019966:	43d8      	mvns	r0, r3
 8019968:	bd30      	pop	{r4, r5, pc}
 801996a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801996e:	4053      	eors	r3, r2
 8019970:	2210      	movs	r2, #16
 8019972:	f343 0400 	sbfx	r4, r3, #0, #1
 8019976:	3a01      	subs	r2, #1
 8019978:	402c      	ands	r4, r5
 801997a:	b292      	uxth	r2, r2
 801997c:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
 8019980:	2a00      	cmp	r2, #0
 8019982:	d1f6      	bne.n	8019972 <MobleConfigCrc32+0x1a>
 8019984:	e7ed      	b.n	8019962 <MobleConfigCrc32+0xa>
 8019986:	bf00      	nop
 8019988:	edb88320 	.word	0xedb88320

0801998c <MobleConfigSave>:
 801998c:	b513      	push	{r0, r1, r4, lr}
 801998e:	4c36      	ldr	r4, [pc, #216]	@ (8019a68 <MobleConfigSave+0xdc>)
 8019990:	f8b4 379c 	ldrh.w	r3, [r4, #1948]	@ 0x79c
 8019994:	2000      	movs	r0, #0
 8019996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801999a:	f88d 0006 	strb.w	r0, [sp, #6]
 801999e:	f88d 0007 	strb.w	r0, [sp, #7]
 80199a2:	d10d      	bne.n	80199c0 <MobleConfigSave+0x34>
 80199a4:	4b31      	ldr	r3, [pc, #196]	@ (8019a6c <MobleConfigSave+0xe0>)
 80199a6:	6818      	ldr	r0, [r3, #0]
 80199a8:	4b31      	ldr	r3, [pc, #196]	@ (8019a70 <MobleConfigSave+0xe4>)
 80199aa:	781b      	ldrb	r3, [r3, #0]
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d138      	bne.n	8019a22 <MobleConfigSave+0x96>
 80199b0:	f10d 0306 	add.w	r3, sp, #6
 80199b4:	f640 623c 	movw	r2, #3644	@ 0xe3c
 80199b8:	f5a4 61d4 	sub.w	r1, r4, #1696	@ 0x6a0
 80199bc:	f7ec fb4e 	bl	800605c <PalNvmCompare>
 80199c0:	f8b4 379c 	ldrh.w	r3, [r4, #1948]	@ 0x79c
 80199c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80199c8:	d10c      	bne.n	80199e4 <MobleConfigSave+0x58>
 80199ca:	4b28      	ldr	r3, [pc, #160]	@ (8019a6c <MobleConfigSave+0xe0>)
 80199cc:	4929      	ldr	r1, [pc, #164]	@ (8019a74 <MobleConfigSave+0xe8>)
 80199ce:	6818      	ldr	r0, [r3, #0]
 80199d0:	4b27      	ldr	r3, [pc, #156]	@ (8019a70 <MobleConfigSave+0xe4>)
 80199d2:	781b      	ldrb	r3, [r3, #0]
 80199d4:	bb73      	cbnz	r3, 8019a34 <MobleConfigSave+0xa8>
 80199d6:	f10d 0307 	add.w	r3, sp, #7
 80199da:	2208      	movs	r2, #8
 80199dc:	f500 6064 	add.w	r0, r0, #3648	@ 0xe40
 80199e0:	f7ec fb3c 	bl	800605c <PalNvmCompare>
 80199e4:	2801      	cmp	r0, #1
 80199e6:	d82b      	bhi.n	8019a40 <MobleConfigSave+0xb4>
 80199e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80199ec:	2a02      	cmp	r2, #2
 80199ee:	d003      	beq.n	80199f8 <MobleConfigSave+0x6c>
 80199f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80199f4:	2b02      	cmp	r3, #2
 80199f6:	d129      	bne.n	8019a4c <MobleConfigSave+0xc0>
 80199f8:	491f      	ldr	r1, [pc, #124]	@ (8019a78 <MobleConfigSave+0xec>)
 80199fa:	780b      	ldrb	r3, [r1, #0]
 80199fc:	f043 0301 	orr.w	r3, r3, #1
 8019a00:	700b      	strb	r3, [r1, #0]
 8019a02:	f8b4 379c 	ldrh.w	r3, [r4, #1948]	@ 0x79c
 8019a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019a0a:	d11f      	bne.n	8019a4c <MobleConfigSave+0xc0>
 8019a0c:	2301      	movs	r3, #1
 8019a0e:	f88d 3006 	strb.w	r3, [sp, #6]
 8019a12:	f88d 3007 	strb.w	r3, [sp, #7]
 8019a16:	4a18      	ldr	r2, [pc, #96]	@ (8019a78 <MobleConfigSave+0xec>)
 8019a18:	7813      	ldrb	r3, [r2, #0]
 8019a1a:	f043 0302 	orr.w	r3, r3, #2
 8019a1e:	7013      	strb	r3, [r2, #0]
 8019a20:	e01a      	b.n	8019a58 <MobleConfigSave+0xcc>
 8019a22:	f10d 0306 	add.w	r3, sp, #6
 8019a26:	f640 623c 	movw	r2, #3644	@ 0xe3c
 8019a2a:	f5a4 61d4 	sub.w	r1, r4, #1696	@ 0x6a0
 8019a2e:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8019a32:	e7c3      	b.n	80199bc <MobleConfigSave+0x30>
 8019a34:	f10d 0307 	add.w	r3, sp, #7
 8019a38:	2208      	movs	r2, #8
 8019a3a:	f500 50f2 	add.w	r0, r0, #7744	@ 0x1e40
 8019a3e:	e7cf      	b.n	80199e0 <MobleConfigSave+0x54>
 8019a40:	2300      	movs	r3, #0
 8019a42:	f884 379d 	strb.w	r3, [r4, #1949]	@ 0x79d
 8019a46:	f884 37a8 	strb.w	r3, [r4, #1960]	@ 0x7a8
 8019a4a:	e005      	b.n	8019a58 <MobleConfigSave+0xcc>
 8019a4c:	2a01      	cmp	r2, #1
 8019a4e:	d0e2      	beq.n	8019a16 <MobleConfigSave+0x8a>
 8019a50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019a54:	2b01      	cmp	r3, #1
 8019a56:	d0de      	beq.n	8019a16 <MobleConfigSave+0x8a>
 8019a58:	f640 614c 	movw	r1, #3660	@ 0xe4c
 8019a5c:	4807      	ldr	r0, [pc, #28]	@ (8019a7c <MobleConfigSave+0xf0>)
 8019a5e:	f7fb fd11 	bl	8015484 <MoblePalBluetoothNvmSave>
 8019a62:	b002      	add	sp, #8
 8019a64:	bd10      	pop	{r4, pc}
 8019a66:	bf00      	nop
 8019a68:	2000241c 	.word	0x2000241c
 8019a6c:	200045b0 	.word	0x200045b0
 8019a70:	2000459e 	.word	0x2000459e
 8019a74:	20002bbc 	.word	0x20002bbc
 8019a78:	2000459d 	.word	0x2000459d
 8019a7c:	20001d7c 	.word	0x20001d7c

08019a80 <MobleConfigLoad>:
 8019a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a82:	4c50      	ldr	r4, [pc, #320]	@ (8019bc4 <MobleConfigLoad+0x144>)
 8019a84:	f894 379c 	ldrb.w	r3, [r4, #1948]	@ 0x79c
 8019a88:	2b01      	cmp	r3, #1
 8019a8a:	b085      	sub	sp, #20
 8019a8c:	d107      	bne.n	8019a9e <MobleConfigLoad+0x1e>
 8019a8e:	2300      	movs	r3, #0
 8019a90:	f884 379d 	strb.w	r3, [r4, #1949]	@ 0x79d
 8019a94:	2300      	movs	r3, #0
 8019a96:	f884 37a8 	strb.w	r3, [r4, #1960]	@ 0x7a8
 8019a9a:	b005      	add	sp, #20
 8019a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a9e:	4d4a      	ldr	r5, [pc, #296]	@ (8019bc8 <MobleConfigLoad+0x148>)
 8019aa0:	4e4a      	ldr	r6, [pc, #296]	@ (8019bcc <MobleConfigLoad+0x14c>)
 8019aa2:	6828      	ldr	r0, [r5, #0]
 8019aa4:	2208      	movs	r2, #8
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	eb0d 0102 	add.w	r1, sp, r2
 8019aac:	f7ec faa4 	bl	8005ff8 <PalNvmRead>
 8019ab0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8019ab4:	ea01 0302 	and.w	r3, r1, r2
 8019ab8:	1c58      	adds	r0, r3, #1
 8019aba:	4243      	negs	r3, r0
 8019abc:	4143      	adcs	r3, r0
 8019abe:	7033      	strb	r3, [r6, #0]
 8019ac0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019ac4:	bf08      	it	eq
 8019ac6:	f1b1 3fff 	cmpeq.w	r1, #4294967295
 8019aca:	f04f 0301 	mov.w	r3, #1
 8019ace:	f884 379d 	strb.w	r3, [r4, #1949]	@ 0x79d
 8019ad2:	d03b      	beq.n	8019b4c <MobleConfigLoad+0xcc>
 8019ad4:	6828      	ldr	r0, [r5, #0]
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	f640 623c 	movw	r2, #3644	@ 0xe3c
 8019adc:	f5a4 61d4 	sub.w	r1, r4, #1696	@ 0x6a0
 8019ae0:	f7ec fa8a 	bl	8005ff8 <PalNvmRead>
 8019ae4:	2801      	cmp	r0, #1
 8019ae6:	d93a      	bls.n	8019b5e <MobleConfigLoad+0xde>
 8019ae8:	2300      	movs	r3, #0
 8019aea:	f884 379d 	strb.w	r3, [r4, #1949]	@ 0x79d
 8019aee:	f894 379d 	ldrb.w	r3, [r4, #1949]	@ 0x79d
 8019af2:	2b01      	cmp	r3, #1
 8019af4:	d1ce      	bne.n	8019a94 <MobleConfigLoad+0x14>
 8019af6:	f884 37a8 	strb.w	r3, [r4, #1960]	@ 0x7a8
 8019afa:	7833      	ldrb	r3, [r6, #0]
 8019afc:	6828      	ldr	r0, [r5, #0]
 8019afe:	4f34      	ldr	r7, [pc, #208]	@ (8019bd0 <MobleConfigLoad+0x150>)
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d153      	bne.n	8019bac <MobleConfigLoad+0x12c>
 8019b04:	2208      	movs	r2, #8
 8019b06:	4639      	mov	r1, r7
 8019b08:	f500 6064 	add.w	r0, r0, #3648	@ 0xe40
 8019b0c:	f7ec fa74 	bl	8005ff8 <PalNvmRead>
 8019b10:	2801      	cmp	r0, #1
 8019b12:	d8bf      	bhi.n	8019a94 <MobleConfigLoad+0x14>
 8019b14:	482e      	ldr	r0, [pc, #184]	@ (8019bd0 <MobleConfigLoad+0x150>)
 8019b16:	2104      	movs	r1, #4
 8019b18:	f7ff ff1e 	bl	8019958 <MobleConfigCrc32>
 8019b1c:	f8d4 37a4 	ldr.w	r3, [r4, #1956]	@ 0x7a4
 8019b20:	4298      	cmp	r0, r3
 8019b22:	d0ba      	beq.n	8019a9a <MobleConfigLoad+0x1a>
 8019b24:	7833      	ldrb	r3, [r6, #0]
 8019b26:	6828      	ldr	r0, [r5, #0]
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d145      	bne.n	8019bb8 <MobleConfigLoad+0x138>
 8019b2c:	4928      	ldr	r1, [pc, #160]	@ (8019bd0 <MobleConfigLoad+0x150>)
 8019b2e:	2301      	movs	r3, #1
 8019b30:	2208      	movs	r2, #8
 8019b32:	f500 6064 	add.w	r0, r0, #3648	@ 0xe40
 8019b36:	f7ec fa5f 	bl	8005ff8 <PalNvmRead>
 8019b3a:	2104      	movs	r1, #4
 8019b3c:	4638      	mov	r0, r7
 8019b3e:	f7ff ff0b 	bl	8019958 <MobleConfigCrc32>
 8019b42:	f8d4 37a4 	ldr.w	r3, [r4, #1956]	@ 0x7a4
 8019b46:	4298      	cmp	r0, r3
 8019b48:	d1a4      	bne.n	8019a94 <MobleConfigLoad+0x14>
 8019b4a:	e7a6      	b.n	8019a9a <MobleConfigLoad+0x1a>
 8019b4c:	6828      	ldr	r0, [r5, #0]
 8019b4e:	2300      	movs	r3, #0
 8019b50:	f640 623c 	movw	r2, #3644	@ 0xe3c
 8019b54:	f5a4 61d4 	sub.w	r1, r4, #1696	@ 0x6a0
 8019b58:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8019b5c:	e7c0      	b.n	8019ae0 <MobleConfigLoad+0x60>
 8019b5e:	f894 379d 	ldrb.w	r3, [r4, #1949]	@ 0x79d
 8019b62:	9301      	str	r3, [sp, #4]
 8019b64:	2b01      	cmp	r3, #1
 8019b66:	d1c2      	bne.n	8019aee <MobleConfigLoad+0x6e>
 8019b68:	481a      	ldr	r0, [pc, #104]	@ (8019bd4 <MobleConfigLoad+0x154>)
 8019b6a:	f640 6138 	movw	r1, #3640	@ 0xe38
 8019b6e:	f7ff fef3 	bl	8019958 <MobleConfigCrc32>
 8019b72:	f8d4 2798 	ldr.w	r2, [r4, #1944]	@ 0x798
 8019b76:	4290      	cmp	r0, r2
 8019b78:	d0b9      	beq.n	8019aee <MobleConfigLoad+0x6e>
 8019b7a:	7832      	ldrb	r2, [r6, #0]
 8019b7c:	6828      	ldr	r0, [r5, #0]
 8019b7e:	9b01      	ldr	r3, [sp, #4]
 8019b80:	b972      	cbnz	r2, 8019ba0 <MobleConfigLoad+0x120>
 8019b82:	4914      	ldr	r1, [pc, #80]	@ (8019bd4 <MobleConfigLoad+0x154>)
 8019b84:	f640 623c 	movw	r2, #3644	@ 0xe3c
 8019b88:	f7ec fa36 	bl	8005ff8 <PalNvmRead>
 8019b8c:	4811      	ldr	r0, [pc, #68]	@ (8019bd4 <MobleConfigLoad+0x154>)
 8019b8e:	f640 6138 	movw	r1, #3640	@ 0xe38
 8019b92:	f7ff fee1 	bl	8019958 <MobleConfigCrc32>
 8019b96:	f8d4 3798 	ldr.w	r3, [r4, #1944]	@ 0x798
 8019b9a:	4298      	cmp	r0, r3
 8019b9c:	d1a4      	bne.n	8019ae8 <MobleConfigLoad+0x68>
 8019b9e:	e7a6      	b.n	8019aee <MobleConfigLoad+0x6e>
 8019ba0:	490c      	ldr	r1, [pc, #48]	@ (8019bd4 <MobleConfigLoad+0x154>)
 8019ba2:	f640 623c 	movw	r2, #3644	@ 0xe3c
 8019ba6:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8019baa:	e7ed      	b.n	8019b88 <MobleConfigLoad+0x108>
 8019bac:	2300      	movs	r3, #0
 8019bae:	2208      	movs	r2, #8
 8019bb0:	4639      	mov	r1, r7
 8019bb2:	f500 50f2 	add.w	r0, r0, #7744	@ 0x1e40
 8019bb6:	e7a9      	b.n	8019b0c <MobleConfigLoad+0x8c>
 8019bb8:	2301      	movs	r3, #1
 8019bba:	2208      	movs	r2, #8
 8019bbc:	4639      	mov	r1, r7
 8019bbe:	f500 50f2 	add.w	r0, r0, #7744	@ 0x1e40
 8019bc2:	e7b8      	b.n	8019b36 <MobleConfigLoad+0xb6>
 8019bc4:	2000241c 	.word	0x2000241c
 8019bc8:	200045b0 	.word	0x200045b0
 8019bcc:	2000459e 	.word	0x2000459e
 8019bd0:	20002bbc 	.word	0x20002bbc
 8019bd4:	20001d7c 	.word	0x20001d7c

08019bd8 <MobleConfigNetworkEncode>:
 8019bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bda:	4c4c      	ldr	r4, [pc, #304]	@ (8019d0c <MobleConfigNetworkEncode+0x134>)
 8019bdc:	f7fb fbac 	bl	8015338 <MoblePalBluetoothRandom>
 8019be0:	f884 0960 	strb.w	r0, [r4, #2400]	@ 0x960
 8019be4:	2800      	cmp	r0, #0
 8019be6:	d0f9      	beq.n	8019bdc <MobleConfigNetworkEncode+0x4>
 8019be8:	f894 3961 	ldrb.w	r3, [r4, #2401]	@ 0x961
 8019bec:	f8b4 2962 	ldrh.w	r2, [r4, #2402]	@ 0x962
 8019bf0:	4043      	eors	r3, r0
 8019bf2:	f884 3961 	strb.w	r3, [r4, #2401]	@ 0x961
 8019bf6:	ea40 2300 	orr.w	r3, r0, r0, lsl #8
 8019bfa:	4053      	eors	r3, r2
 8019bfc:	f8a4 3962 	strh.w	r3, [r4, #2402]	@ 0x962
 8019c00:	4c43      	ldr	r4, [pc, #268]	@ (8019d10 <MobleConfigNetworkEncode+0x138>)
 8019c02:	f894 1772 	ldrb.w	r1, [r4, #1906]	@ 0x772
 8019c06:	f204 5589 	addw	r5, r4, #1417	@ 0x589
 8019c0a:	2600      	movs	r6, #0
 8019c0c:	f5a4 62d4 	sub.w	r2, r4, #1696	@ 0x6a0
 8019c10:	b2f3      	uxtb	r3, r6
 8019c12:	4299      	cmp	r1, r3
 8019c14:	d82c      	bhi.n	8019c70 <MobleConfigNetworkEncode+0x98>
 8019c16:	f894 5773 	ldrb.w	r5, [r4, #1907]	@ 0x773
 8019c1a:	f602 569d 	addw	r6, r2, #3485	@ 0xd9d
 8019c1e:	2700      	movs	r7, #0
 8019c20:	b2fb      	uxtb	r3, r7
 8019c22:	429d      	cmp	r5, r3
 8019c24:	d840      	bhi.n	8019ca8 <MobleConfigNetworkEncode+0xd0>
 8019c26:	f602 6613 	addw	r6, r2, #3603	@ 0xe13
 8019c2a:	2310      	movs	r3, #16
 8019c2c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8019c30:	3b01      	subs	r3, #1
 8019c32:	4047      	eors	r7, r0
 8019c34:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8019c38:	7037      	strb	r7, [r6, #0]
 8019c3a:	d1f7      	bne.n	8019c2c <MobleConfigNetworkEncode+0x54>
 8019c3c:	4045      	eors	r5, r0
 8019c3e:	4041      	eors	r1, r0
 8019c40:	f884 5773 	strb.w	r5, [r4, #1907]	@ 0x773
 8019c44:	f894 c785 	ldrb.w	ip, [r4, #1925]	@ 0x785
 8019c48:	4d32      	ldr	r5, [pc, #200]	@ (8019d14 <MobleConfigNetworkEncode+0x13c>)
 8019c4a:	f884 1772 	strb.w	r1, [r4, #1906]	@ 0x772
 8019c4e:	f602 420f 	addw	r2, r2, #3087	@ 0xc0f
 8019c52:	b2d9      	uxtb	r1, r3
 8019c54:	4561      	cmp	r1, ip
 8019c56:	d343      	bcc.n	8019ce0 <MobleConfigNetworkEncode+0x108>
 8019c58:	ea80 000c 	eor.w	r0, r0, ip
 8019c5c:	f884 0785 	strb.w	r0, [r4, #1925]	@ 0x785
 8019c60:	f640 6138 	movw	r1, #3640	@ 0xe38
 8019c64:	482b      	ldr	r0, [pc, #172]	@ (8019d14 <MobleConfigNetworkEncode+0x13c>)
 8019c66:	f7ff fe77 	bl	8019958 <MobleConfigCrc32>
 8019c6a:	f8c4 0798 	str.w	r0, [r4, #1944]	@ 0x798
 8019c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c70:	f1a5 0710 	sub.w	r7, r5, #16
 8019c74:	2310      	movs	r3, #16
 8019c76:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 8019c7a:	3b01      	subs	r3, #1
 8019c7c:	ea80 0c0c 	eor.w	ip, r0, ip
 8019c80:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8019c84:	f887 c000 	strb.w	ip, [r7]
 8019c88:	d1f5      	bne.n	8019c76 <MobleConfigNetworkEncode+0x9e>
 8019c8a:	462f      	mov	r7, r5
 8019c8c:	2310      	movs	r3, #16
 8019c8e:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 8019c92:	3b01      	subs	r3, #1
 8019c94:	ea80 0c0c 	eor.w	ip, r0, ip
 8019c98:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8019c9c:	f887 c000 	strb.w	ip, [r7]
 8019ca0:	d1f5      	bne.n	8019c8e <MobleConfigNetworkEncode+0xb6>
 8019ca2:	3601      	adds	r6, #1
 8019ca4:	357c      	adds	r5, #124	@ 0x7c
 8019ca6:	e7b3      	b.n	8019c10 <MobleConfigNetworkEncode+0x38>
 8019ca8:	f1a6 0c10 	sub.w	ip, r6, #16
 8019cac:	2310      	movs	r3, #16
 8019cae:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8019cb2:	3b01      	subs	r3, #1
 8019cb4:	ea80 0e0e 	eor.w	lr, r0, lr
 8019cb8:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8019cbc:	f88c e000 	strb.w	lr, [ip]
 8019cc0:	d1f5      	bne.n	8019cae <MobleConfigNetworkEncode+0xd6>
 8019cc2:	46b4      	mov	ip, r6
 8019cc4:	2310      	movs	r3, #16
 8019cc6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8019cca:	3b01      	subs	r3, #1
 8019ccc:	ea80 0e0e 	eor.w	lr, r0, lr
 8019cd0:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8019cd4:	f88c e000 	strb.w	lr, [ip]
 8019cd8:	d1f5      	bne.n	8019cc6 <MobleConfigNetworkEncode+0xee>
 8019cda:	3701      	adds	r7, #1
 8019cdc:	362c      	adds	r6, #44	@ 0x2c
 8019cde:	e79f      	b.n	8019c20 <MobleConfigNetworkEncode+0x48>
 8019ce0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8019ce4:	4041      	eors	r1, r0
 8019ce6:	7011      	strb	r1, [r2, #0]
 8019ce8:	7951      	ldrb	r1, [r2, #5]
 8019cea:	4041      	eors	r1, r0
 8019cec:	7151      	strb	r1, [r2, #5]
 8019cee:	2600      	movs	r6, #0
 8019cf0:	4629      	mov	r1, r5
 8019cf2:	688f      	ldr	r7, [r1, #8]
 8019cf4:	360e      	adds	r6, #14
 8019cf6:	4047      	eors	r7, r0
 8019cf8:	2e9a      	cmp	r6, #154	@ 0x9a
 8019cfa:	608f      	str	r7, [r1, #8]
 8019cfc:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 8019d00:	d1f7      	bne.n	8019cf2 <MobleConfigNetworkEncode+0x11a>
 8019d02:	3301      	adds	r3, #1
 8019d04:	f505 751a 	add.w	r5, r5, #616	@ 0x268
 8019d08:	e7a3      	b.n	8019c52 <MobleConfigNetworkEncode+0x7a>
 8019d0a:	bf00      	nop
 8019d0c:	2000141c 	.word	0x2000141c
 8019d10:	2000241c 	.word	0x2000241c
 8019d14:	20001d7c 	.word	0x20001d7c

08019d18 <MobleConfigNetworkDecode>:
 8019d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d1a:	4b46      	ldr	r3, [pc, #280]	@ (8019e34 <MobleConfigNetworkDecode+0x11c>)
 8019d1c:	f893 1960 	ldrb.w	r1, [r3, #2400]	@ 0x960
 8019d20:	f893 2961 	ldrb.w	r2, [r3, #2401]	@ 0x961
 8019d24:	f8b3 0962 	ldrh.w	r0, [r3, #2402]	@ 0x962
 8019d28:	404a      	eors	r2, r1
 8019d2a:	f883 2961 	strb.w	r2, [r3, #2401]	@ 0x961
 8019d2e:	ea41 2201 	orr.w	r2, r1, r1, lsl #8
 8019d32:	4042      	eors	r2, r0
 8019d34:	f503 5080 	add.w	r0, r3, #4096	@ 0x1000
 8019d38:	f8a3 2962 	strh.w	r2, [r3, #2402]	@ 0x962
 8019d3c:	f890 5772 	ldrb.w	r5, [r0, #1906]	@ 0x772
 8019d40:	f890 4773 	ldrb.w	r4, [r0, #1907]	@ 0x773
 8019d44:	404d      	eors	r5, r1
 8019d46:	404c      	eors	r4, r1
 8019d48:	f503 6216 	add.w	r2, r3, #2400	@ 0x960
 8019d4c:	f880 5772 	strb.w	r5, [r0, #1906]	@ 0x772
 8019d50:	f880 4773 	strb.w	r4, [r0, #1907]	@ 0x773
 8019d54:	f602 4629 	addw	r6, r2, #3113	@ 0xc29
 8019d58:	2700      	movs	r7, #0
 8019d5a:	b2fb      	uxtb	r3, r7
 8019d5c:	429d      	cmp	r5, r3
 8019d5e:	d81c      	bhi.n	8019d9a <MobleConfigNetworkDecode+0x82>
 8019d60:	f602 559d 	addw	r5, r2, #3485	@ 0xd9d
 8019d64:	2600      	movs	r6, #0
 8019d66:	b2f3      	uxtb	r3, r6
 8019d68:	429c      	cmp	r4, r3
 8019d6a:	d832      	bhi.n	8019dd2 <MobleConfigNetworkDecode+0xba>
 8019d6c:	f602 6413 	addw	r4, r2, #3603	@ 0xe13
 8019d70:	2310      	movs	r3, #16
 8019d72:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8019d76:	3b01      	subs	r3, #1
 8019d78:	404d      	eors	r5, r1
 8019d7a:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8019d7e:	7025      	strb	r5, [r4, #0]
 8019d80:	d1f7      	bne.n	8019d72 <MobleConfigNetworkDecode+0x5a>
 8019d82:	f890 4785 	ldrb.w	r4, [r0, #1925]	@ 0x785
 8019d86:	4d2c      	ldr	r5, [pc, #176]	@ (8019e38 <MobleConfigNetworkDecode+0x120>)
 8019d88:	404c      	eors	r4, r1
 8019d8a:	f880 4785 	strb.w	r4, [r0, #1925]	@ 0x785
 8019d8e:	f602 420f 	addw	r2, r2, #3087	@ 0xc0f
 8019d92:	b2d8      	uxtb	r0, r3
 8019d94:	4284      	cmp	r4, r0
 8019d96:	d838      	bhi.n	8019e0a <MobleConfigNetworkDecode+0xf2>
 8019d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d9a:	f1a6 0c10 	sub.w	ip, r6, #16
 8019d9e:	2310      	movs	r3, #16
 8019da0:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8019da4:	3b01      	subs	r3, #1
 8019da6:	ea81 0e0e 	eor.w	lr, r1, lr
 8019daa:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8019dae:	f88c e000 	strb.w	lr, [ip]
 8019db2:	d1f5      	bne.n	8019da0 <MobleConfigNetworkDecode+0x88>
 8019db4:	46b4      	mov	ip, r6
 8019db6:	2310      	movs	r3, #16
 8019db8:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8019dbc:	3b01      	subs	r3, #1
 8019dbe:	ea81 0e0e 	eor.w	lr, r1, lr
 8019dc2:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8019dc6:	f88c e000 	strb.w	lr, [ip]
 8019dca:	d1f5      	bne.n	8019db8 <MobleConfigNetworkDecode+0xa0>
 8019dcc:	3701      	adds	r7, #1
 8019dce:	367c      	adds	r6, #124	@ 0x7c
 8019dd0:	e7c3      	b.n	8019d5a <MobleConfigNetworkDecode+0x42>
 8019dd2:	f1a5 0710 	sub.w	r7, r5, #16
 8019dd6:	2310      	movs	r3, #16
 8019dd8:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 8019ddc:	3b01      	subs	r3, #1
 8019dde:	ea81 0c0c 	eor.w	ip, r1, ip
 8019de2:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8019de6:	f887 c000 	strb.w	ip, [r7]
 8019dea:	d1f5      	bne.n	8019dd8 <MobleConfigNetworkDecode+0xc0>
 8019dec:	462f      	mov	r7, r5
 8019dee:	2310      	movs	r3, #16
 8019df0:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 8019df4:	3b01      	subs	r3, #1
 8019df6:	ea81 0c0c 	eor.w	ip, r1, ip
 8019dfa:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8019dfe:	f887 c000 	strb.w	ip, [r7]
 8019e02:	d1f5      	bne.n	8019df0 <MobleConfigNetworkDecode+0xd8>
 8019e04:	3601      	adds	r6, #1
 8019e06:	352c      	adds	r5, #44	@ 0x2c
 8019e08:	e7ad      	b.n	8019d66 <MobleConfigNetworkDecode+0x4e>
 8019e0a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8019e0e:	4048      	eors	r0, r1
 8019e10:	7010      	strb	r0, [r2, #0]
 8019e12:	7950      	ldrb	r0, [r2, #5]
 8019e14:	4048      	eors	r0, r1
 8019e16:	7150      	strb	r0, [r2, #5]
 8019e18:	2600      	movs	r6, #0
 8019e1a:	4628      	mov	r0, r5
 8019e1c:	6887      	ldr	r7, [r0, #8]
 8019e1e:	360e      	adds	r6, #14
 8019e20:	404f      	eors	r7, r1
 8019e22:	2e9a      	cmp	r6, #154	@ 0x9a
 8019e24:	6087      	str	r7, [r0, #8]
 8019e26:	f100 0038 	add.w	r0, r0, #56	@ 0x38
 8019e2a:	d1f7      	bne.n	8019e1c <MobleConfigNetworkDecode+0x104>
 8019e2c:	3301      	adds	r3, #1
 8019e2e:	f505 751a 	add.w	r5, r5, #616	@ 0x268
 8019e32:	e7ae      	b.n	8019d92 <MobleConfigNetworkDecode+0x7a>
 8019e34:	2000141c 	.word	0x2000141c
 8019e38:	20001d7c 	.word	0x20001d7c

08019e3c <MobleConfigSavedSeqEncode>:
 8019e3c:	b510      	push	{r4, lr}
 8019e3e:	4c05      	ldr	r4, [pc, #20]	@ (8019e54 <MobleConfigSavedSeqEncode+0x18>)
 8019e40:	2104      	movs	r1, #4
 8019e42:	f504 50bd 	add.w	r0, r4, #6048	@ 0x17a0
 8019e46:	f7ff fd87 	bl	8019958 <MobleConfigCrc32>
 8019e4a:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 8019e4e:	f8c4 07a4 	str.w	r0, [r4, #1956]	@ 0x7a4
 8019e52:	bd10      	pop	{r4, pc}
 8019e54:	2000141c 	.word	0x2000141c

08019e58 <MobleConfigNetworkLoad>:
 8019e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e5c:	4604      	mov	r4, r0
 8019e5e:	2800      	cmp	r0, #0
 8019e60:	d07d      	beq.n	8019f5e <MobleConfigNetworkLoad+0x106>
 8019e62:	4e41      	ldr	r6, [pc, #260]	@ (8019f68 <MobleConfigNetworkLoad+0x110>)
 8019e64:	2500      	movs	r5, #0
 8019e66:	f506 5780 	add.w	r7, r6, #4096	@ 0x1000
 8019e6a:	7005      	strb	r5, [r0, #0]
 8019e6c:	8045      	strh	r5, [r0, #2]
 8019e6e:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8019e72:	f44f 720d 	mov.w	r2, #564	@ 0x234
 8019e76:	6a00      	ldr	r0, [r0, #32]
 8019e78:	4629      	mov	r1, r5
 8019e7a:	f00c fea9 	bl	8026bd0 <memset>
 8019e7e:	f8b7 379c 	ldrh.w	r3, [r7, #1948]	@ 0x79c
 8019e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019e86:	d16c      	bne.n	8019f62 <MobleConfigNetworkLoad+0x10a>
 8019e88:	f7ff ff46 	bl	8019d18 <MobleConfigNetworkDecode>
 8019e8c:	f8b6 3962 	ldrh.w	r3, [r6, #2402]	@ 0x962
 8019e90:	8063      	strh	r3, [r4, #2]
 8019e92:	f896 3961 	ldrb.w	r3, [r6, #2401]	@ 0x961
 8019e96:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 8019e9a:	f8d6 3964 	ldr.w	r3, [r6, #2404]	@ 0x964
 8019e9e:	6063      	str	r3, [r4, #4]
 8019ea0:	f897 3785 	ldrb.w	r3, [r7, #1925]	@ 0x785
 8019ea4:	7723      	strb	r3, [r4, #28]
 8019ea6:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8019eaa:	f207 517a 	addw	r1, r7, #1402	@ 0x57a
 8019eae:	6a20      	ldr	r0, [r4, #32]
 8019eb0:	f00c fe74 	bl	8026b9c <memmove>
 8019eb4:	6a20      	ldr	r0, [r4, #32]
 8019eb6:	2284      	movs	r2, #132	@ 0x84
 8019eb8:	f207 61ee 	addw	r1, r7, #1774	@ 0x6ee
 8019ebc:	f500 70ba 	add.w	r0, r0, #372	@ 0x174
 8019ec0:	f00c fe6c 	bl	8026b9c <memmove>
 8019ec4:	6a20      	ldr	r0, [r4, #32]
 8019ec6:	2210      	movs	r2, #16
 8019ec8:	f207 7174 	addw	r1, r7, #1908	@ 0x774
 8019ecc:	f500 70fe 	add.w	r0, r0, #508	@ 0x1fc
 8019ed0:	f00c fe64 	bl	8026b9c <memmove>
 8019ed4:	6a23      	ldr	r3, [r4, #32]
 8019ed6:	f897 2772 	ldrb.w	r2, [r7, #1906]	@ 0x772
 8019eda:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
 8019ede:	f897 2773 	ldrb.w	r2, [r7, #1907]	@ 0x773
 8019ee2:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
 8019ee6:	f897 2784 	ldrb.w	r2, [r7, #1924]	@ 0x784
 8019eea:	f883 21fa 	strb.w	r2, [r3, #506]	@ 0x1fa
 8019eee:	f506 6816 	add.w	r8, r6, #2400	@ 0x960
 8019ef2:	f44f 791a 	mov.w	r9, #616	@ 0x268
 8019ef6:	f241 5a70 	movw	sl, #5488	@ 0x1570
 8019efa:	f241 5b75 	movw	fp, #5493	@ 0x1575
 8019efe:	7f23      	ldrb	r3, [r4, #28]
 8019f00:	b2ef      	uxtb	r7, r5
 8019f02:	42bb      	cmp	r3, r7
 8019f04:	d80e      	bhi.n	8019f24 <MobleConfigNetworkLoad+0xcc>
 8019f06:	2210      	movs	r2, #16
 8019f08:	f608 6126 	addw	r1, r8, #3622	@ 0xe26
 8019f0c:	f104 000c 	add.w	r0, r4, #12
 8019f10:	f00c fe44 	bl	8026b9c <memmove>
 8019f14:	f7ff fe60 	bl	8019bd8 <MobleConfigNetworkEncode>
 8019f18:	2301      	movs	r3, #1
 8019f1a:	8023      	strh	r3, [r4, #0]
 8019f1c:	2000      	movs	r0, #0
 8019f1e:	b003      	add	sp, #12
 8019f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f24:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8019f28:	fb09 8107 	mla	r1, r9, r7, r8
 8019f2c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8019f2e:	9301      	str	r3, [sp, #4]
 8019f30:	f44f 721a 	mov.w	r2, #616	@ 0x268
 8019f34:	3108      	adds	r1, #8
 8019f36:	3078      	adds	r0, #120	@ 0x78
 8019f38:	f00c fe30 	bl	8026b9c <memmove>
 8019f3c:	9b01      	ldr	r3, [sp, #4]
 8019f3e:	19f2      	adds	r2, r6, r7
 8019f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f42:	f812 100a 	ldrb.w	r1, [r2, sl]
 8019f46:	f883 12e0 	strb.w	r1, [r3, #736]	@ 0x2e0
 8019f4a:	f812 200b 	ldrb.w	r2, [r2, fp]
 8019f4e:	f883 22e1 	strb.w	r2, [r3, #737]	@ 0x2e1
 8019f52:	f8b6 2962 	ldrh.w	r2, [r6, #2402]	@ 0x962
 8019f56:	443a      	add	r2, r7
 8019f58:	801a      	strh	r2, [r3, #0]
 8019f5a:	3501      	adds	r5, #1
 8019f5c:	e7cf      	b.n	8019efe <MobleConfigNetworkLoad+0xa6>
 8019f5e:	2003      	movs	r0, #3
 8019f60:	e7dd      	b.n	8019f1e <MobleConfigNetworkLoad+0xc6>
 8019f62:	4628      	mov	r0, r5
 8019f64:	e7db      	b.n	8019f1e <MobleConfigNetworkLoad+0xc6>
 8019f66:	bf00      	nop
 8019f68:	2000141c 	.word	0x2000141c

08019f6c <MobleConfigSaveSeq>:
 8019f6c:	b508      	push	{r3, lr}
 8019f6e:	b170      	cbz	r0, 8019f8e <MobleConfigSaveSeq+0x22>
 8019f70:	4b08      	ldr	r3, [pc, #32]	@ (8019f94 <MobleConfigSaveSeq+0x28>)
 8019f72:	6882      	ldr	r2, [r0, #8]
 8019f74:	f8c3 27a0 	str.w	r2, [r3, #1952]	@ 0x7a0
 8019f78:	2201      	movs	r2, #1
 8019f7a:	f883 27a8 	strb.w	r2, [r3, #1960]	@ 0x7a8
 8019f7e:	f7ff ff5d 	bl	8019e3c <MobleConfigSavedSeqEncode>
 8019f82:	f7ff fd03 	bl	801998c <MobleConfigSave>
 8019f86:	2801      	cmp	r0, #1
 8019f88:	bf98      	it	ls
 8019f8a:	2000      	movls	r0, #0
 8019f8c:	bd08      	pop	{r3, pc}
 8019f8e:	2003      	movs	r0, #3
 8019f90:	e7fc      	b.n	8019f8c <MobleConfigSaveSeq+0x20>
 8019f92:	bf00      	nop
 8019f94:	2000241c 	.word	0x2000241c

08019f98 <MobleNetworkSaveSeqNum>:
 8019f98:	b508      	push	{r3, lr}
 8019f9a:	b928      	cbnz	r0, 8019fa8 <MobleNetworkSaveSeqNum+0x10>
 8019f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8019fdc <MobleNetworkSaveSeqNum+0x44>)
 8019f9e:	4a10      	ldr	r2, [pc, #64]	@ (8019fe0 <MobleNetworkSaveSeqNum+0x48>)
 8019fa0:	2157      	movs	r1, #87	@ 0x57
 8019fa2:	4810      	ldr	r0, [pc, #64]	@ (8019fe4 <MobleNetworkSaveSeqNum+0x4c>)
 8019fa4:	f00b fe76 	bl	8025c94 <__assert_func>
 8019fa8:	6802      	ldr	r2, [r0, #0]
 8019faa:	b91a      	cbnz	r2, 8019fb4 <MobleNetworkSaveSeqNum+0x1c>
 8019fac:	4b0e      	ldr	r3, [pc, #56]	@ (8019fe8 <MobleNetworkSaveSeqNum+0x50>)
 8019fae:	4a0c      	ldr	r2, [pc, #48]	@ (8019fe0 <MobleNetworkSaveSeqNum+0x48>)
 8019fb0:	2158      	movs	r1, #88	@ 0x58
 8019fb2:	e7f6      	b.n	8019fa2 <MobleNetworkSaveSeqNum+0xa>
 8019fb4:	f8d0 315c 	ldr.w	r3, [r0, #348]	@ 0x15c
 8019fb8:	6891      	ldr	r1, [r2, #8]
 8019fba:	4299      	cmp	r1, r3
 8019fbc:	d80c      	bhi.n	8019fd8 <MobleNetworkSaveSeqNum+0x40>
 8019fbe:	f503 53f6 	add.w	r3, r3, #7872	@ 0x1ec0
 8019fc2:	330c      	adds	r3, #12
 8019fc4:	6093      	str	r3, [r2, #8]
 8019fc6:	4610      	mov	r0, r2
 8019fc8:	f7ff ffd0 	bl	8019f6c <MobleConfigSaveSeq>
 8019fcc:	2801      	cmp	r0, #1
 8019fce:	bf94      	ite	ls
 8019fd0:	2000      	movls	r0, #0
 8019fd2:	2001      	movhi	r0, #1
 8019fd4:	0040      	lsls	r0, r0, #1
 8019fd6:	bd08      	pop	{r3, pc}
 8019fd8:	2001      	movs	r0, #1
 8019fda:	e7fc      	b.n	8019fd6 <MobleNetworkSaveSeqNum+0x3e>
 8019fdc:	0802eb21 	.word	0x0802eb21
 8019fe0:	0802cdc6 	.word	0x0802cdc6
 8019fe4:	0802e996 	.word	0x0802e996
 8019fe8:	0802e9dc 	.word	0x0802e9dc

08019fec <MobleConfigLoadSeq>:
 8019fec:	b1b8      	cbz	r0, 801a01e <MobleConfigLoadSeq+0x32>
 8019fee:	7803      	ldrb	r3, [r0, #0]
 8019ff0:	b913      	cbnz	r3, 8019ff8 <MobleConfigLoadSeq+0xc>
 8019ff2:	6083      	str	r3, [r0, #8]
 8019ff4:	4618      	mov	r0, r3
 8019ff6:	4770      	bx	lr
 8019ff8:	4a0a      	ldr	r2, [pc, #40]	@ (801a024 <MobleConfigLoadSeq+0x38>)
 8019ffa:	f8b2 379c 	ldrh.w	r3, [r2, #1948]	@ 0x79c
 8019ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a002:	d10a      	bne.n	801a01a <MobleConfigLoadSeq+0x2e>
 801a004:	f892 37a8 	ldrb.w	r3, [r2, #1960]	@ 0x7a8
 801a008:	2b01      	cmp	r3, #1
 801a00a:	f04f 0300 	mov.w	r3, #0
 801a00e:	d103      	bne.n	801a018 <MobleConfigLoadSeq+0x2c>
 801a010:	f8d2 27a0 	ldr.w	r2, [r2, #1952]	@ 0x7a0
 801a014:	6082      	str	r2, [r0, #8]
 801a016:	e7ed      	b.n	8019ff4 <MobleConfigLoadSeq+0x8>
 801a018:	6083      	str	r3, [r0, #8]
 801a01a:	2302      	movs	r3, #2
 801a01c:	e7ea      	b.n	8019ff4 <MobleConfigLoadSeq+0x8>
 801a01e:	2303      	movs	r3, #3
 801a020:	e7e8      	b.n	8019ff4 <MobleConfigLoadSeq+0x8>
 801a022:	bf00      	nop
 801a024:	2000241c 	.word	0x2000241c

0801a028 <MobleNetworkLayerInit>:
 801a028:	b538      	push	{r3, r4, r5, lr}
 801a02a:	4604      	mov	r4, r0
 801a02c:	2500      	movs	r5, #0
 801a02e:	f880 5160 	strb.w	r5, [r0, #352]	@ 0x160
 801a032:	f7ff fbed 	bl	8019810 <MobleNetworkReplayCacheClearAll>
 801a036:	6821      	ldr	r1, [r4, #0]
 801a038:	4608      	mov	r0, r1
 801a03a:	f7ff ffd7 	bl	8019fec <MobleConfigLoadSeq>
 801a03e:	2801      	cmp	r0, #1
 801a040:	bf98      	it	ls
 801a042:	688d      	ldrls	r5, [r1, #8]
 801a044:	f8c4 515c 	str.w	r5, [r4, #348]	@ 0x15c
 801a048:	2000      	movs	r0, #0
 801a04a:	bd38      	pop	{r3, r4, r5, pc}

0801a04c <MobleTransportInit>:
 801a04c:	b510      	push	{r4, lr}
 801a04e:	4604      	mov	r4, r0
 801a050:	b928      	cbnz	r0, 801a05e <MobleTransportInit+0x12>
 801a052:	4b0a      	ldr	r3, [pc, #40]	@ (801a07c <MobleTransportInit+0x30>)
 801a054:	4a0a      	ldr	r2, [pc, #40]	@ (801a080 <MobleTransportInit+0x34>)
 801a056:	480b      	ldr	r0, [pc, #44]	@ (801a084 <MobleTransportInit+0x38>)
 801a058:	21d4      	movs	r1, #212	@ 0xd4
 801a05a:	f00b fe1b 	bl	8025c94 <__assert_func>
 801a05e:	f7ff faa5 	bl	80195ac <MobleTransSarInit>
 801a062:	2300      	movs	r3, #0
 801a064:	e9c4 3302 	strd	r3, r3, [r4, #8]
 801a068:	7123      	strb	r3, [r4, #4]
 801a06a:	4620      	mov	r0, r4
 801a06c:	f7ff ffdc 	bl	801a028 <MobleNetworkLayerInit>
 801a070:	2801      	cmp	r0, #1
 801a072:	bf8c      	ite	hi
 801a074:	2003      	movhi	r0, #3
 801a076:	2000      	movls	r0, #0
 801a078:	bd10      	pop	{r4, pc}
 801a07a:	bf00      	nop
 801a07c:	0802e4b8 	.word	0x0802e4b8
 801a080:	0802cddd 	.word	0x0802cddd
 801a084:	0802e7f8 	.word	0x0802e7f8

0801a088 <MobleApplicationInit>:
 801a088:	b508      	push	{r3, lr}
 801a08a:	4b05      	ldr	r3, [pc, #20]	@ (801a0a0 <MobleApplicationInit+0x18>)
 801a08c:	2200      	movs	r2, #0
 801a08e:	f8c3 2954 	str.w	r2, [r3, #2388]	@ 0x954
 801a092:	f7ff ffdb 	bl	801a04c <MobleTransportInit>
 801a096:	2801      	cmp	r0, #1
 801a098:	bf8c      	ite	hi
 801a09a:	2003      	movhi	r0, #3
 801a09c:	2000      	movls	r0, #0
 801a09e:	bd08      	pop	{r3, pc}
 801a0a0:	2000141c 	.word	0x2000141c

0801a0a4 <MobleConfigInit>:
 801a0a4:	4b13      	ldr	r3, [pc, #76]	@ (801a0f4 <MobleConfigInit+0x50>)
 801a0a6:	4a14      	ldr	r2, [pc, #80]	@ (801a0f8 <MobleConfigInit+0x54>)
 801a0a8:	b510      	push	{r4, lr}
 801a0aa:	f503 7139 	add.w	r1, r3, #740	@ 0x2e4
 801a0ae:	4c13      	ldr	r4, [pc, #76]	@ (801a0fc <MobleConfigInit+0x58>)
 801a0b0:	f8c2 16dc 	str.w	r1, [r2, #1756]	@ 0x6dc
 801a0b4:	f503 61b9 	add.w	r1, r3, #1480	@ 0x5c8
 801a0b8:	f8c2 46d4 	str.w	r4, [r2, #1748]	@ 0x6d4
 801a0bc:	f8c2 36d8 	str.w	r3, [r2, #1752]	@ 0x6d8
 801a0c0:	f8c2 16e0 	str.w	r1, [r2, #1760]	@ 0x6e0
 801a0c4:	f604 34dc 	addw	r4, r4, #3036	@ 0xbdc
 801a0c8:	f603 01ac 	addw	r1, r3, #2220	@ 0x8ac
 801a0cc:	f503 6339 	add.w	r3, r3, #2960	@ 0xb90
 801a0d0:	f8c2 36e8 	str.w	r3, [r2, #1768]	@ 0x6e8
 801a0d4:	f8c2 16e4 	str.w	r1, [r2, #1764]	@ 0x6e4
 801a0d8:	2300      	movs	r3, #0
 801a0da:	f884 379c 	strb.w	r3, [r4, #1948]	@ 0x79c
 801a0de:	f7eb ff83 	bl	8005fe8 <PalNvmIsWriteProtected>
 801a0e2:	2801      	cmp	r0, #1
 801a0e4:	d103      	bne.n	801a0ee <MobleConfigInit+0x4a>
 801a0e6:	f884 079c 	strb.w	r0, [r4, #1948]	@ 0x79c
 801a0ea:	2000      	movs	r0, #0
 801a0ec:	bd10      	pop	{r4, pc}
 801a0ee:	f7ff fcc7 	bl	8019a80 <MobleConfigLoad>
 801a0f2:	e7fa      	b.n	801a0ea <MobleConfigInit+0x46>
 801a0f4:	200003d0 	.word	0x200003d0
 801a0f8:	20002514 	.word	0x20002514
 801a0fc:	20001840 	.word	0x20001840

0801a100 <MobleConfigCheck>:
 801a100:	b128      	cbz	r0, 801a10e <MobleConfigCheck+0xe>
 801a102:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801a106:	2800      	cmp	r0, #0
 801a108:	bfd4      	ite	le
 801a10a:	2000      	movle	r0, #0
 801a10c:	2001      	movgt	r0, #1
 801a10e:	4770      	bx	lr

0801a110 <MobleConfigNetworkSave>:
 801a110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a114:	4604      	mov	r4, r0
 801a116:	b910      	cbnz	r0, 801a11e <MobleConfigNetworkSave+0xe>
 801a118:	2003      	movs	r0, #3
 801a11a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a11e:	2300      	movs	r3, #0
 801a120:	7043      	strb	r3, [r0, #1]
 801a122:	f7ff ffed 	bl	801a100 <MobleConfigCheck>
 801a126:	2800      	cmp	r0, #0
 801a128:	d0f6      	beq.n	801a118 <MobleConfigNetworkSave+0x8>
 801a12a:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 801a20c <MobleConfigNetworkSave+0xfc>
 801a12e:	f508 5580 	add.w	r5, r8, #4096	@ 0x1000
 801a132:	f895 779c 	ldrb.w	r7, [r5, #1948]	@ 0x79c
 801a136:	2f00      	cmp	r7, #0
 801a138:	d14b      	bne.n	801a1d2 <MobleConfigNetworkSave+0xc2>
 801a13a:	8863      	ldrh	r3, [r4, #2]
 801a13c:	f8a8 3962 	strh.w	r3, [r8, #2402]	@ 0x962
 801a140:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801a144:	6a21      	ldr	r1, [r4, #32]
 801a146:	f888 3961 	strb.w	r3, [r8, #2401]	@ 0x961
 801a14a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 801a14e:	6863      	ldr	r3, [r4, #4]
 801a150:	f8c8 3964 	str.w	r3, [r8, #2404]	@ 0x964
 801a154:	f205 507a 	addw	r0, r5, #1402	@ 0x57a
 801a158:	f00c fd20 	bl	8026b9c <memmove>
 801a15c:	6a21      	ldr	r1, [r4, #32]
 801a15e:	2284      	movs	r2, #132	@ 0x84
 801a160:	f501 71ba 	add.w	r1, r1, #372	@ 0x174
 801a164:	f205 60ee 	addw	r0, r5, #1774	@ 0x6ee
 801a168:	f00c fd18 	bl	8026b9c <memmove>
 801a16c:	6a21      	ldr	r1, [r4, #32]
 801a16e:	2210      	movs	r2, #16
 801a170:	f501 71fe 	add.w	r1, r1, #508	@ 0x1fc
 801a174:	f205 7074 	addw	r0, r5, #1908	@ 0x774
 801a178:	f00c fd10 	bl	8026b9c <memmove>
 801a17c:	6a23      	ldr	r3, [r4, #32]
 801a17e:	f893 21f8 	ldrb.w	r2, [r3, #504]	@ 0x1f8
 801a182:	f885 2772 	strb.w	r2, [r5, #1906]	@ 0x772
 801a186:	f893 21f9 	ldrb.w	r2, [r3, #505]	@ 0x1f9
 801a18a:	f885 2773 	strb.w	r2, [r5, #1907]	@ 0x773
 801a18e:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 801a192:	f885 3784 	strb.w	r3, [r5, #1924]	@ 0x784
 801a196:	7f23      	ldrb	r3, [r4, #28]
 801a198:	f885 3785 	strb.w	r3, [r5, #1925]	@ 0x785
 801a19c:	f508 6916 	add.w	r9, r8, #2400	@ 0x960
 801a1a0:	f241 5b70 	movw	fp, #5488	@ 0x1570
 801a1a4:	f895 2785 	ldrb.w	r2, [r5, #1925]	@ 0x785
 801a1a8:	b2fe      	uxtb	r6, r7
 801a1aa:	42b2      	cmp	r2, r6
 801a1ac:	d813      	bhi.n	801a1d6 <MobleConfigNetworkSave+0xc6>
 801a1ae:	2210      	movs	r2, #16
 801a1b0:	f104 010c 	add.w	r1, r4, #12
 801a1b4:	f609 6026 	addw	r0, r9, #3622	@ 0xe26
 801a1b8:	f00c fcf0 	bl	8026b9c <memmove>
 801a1bc:	2301      	movs	r3, #1
 801a1be:	f885 379d 	strb.w	r3, [r5, #1949]	@ 0x79d
 801a1c2:	f7ff fd09 	bl	8019bd8 <MobleConfigNetworkEncode>
 801a1c6:	f7ff fe39 	bl	8019e3c <MobleConfigSavedSeqEncode>
 801a1ca:	f7ff fbdf 	bl	801998c <MobleConfigSave>
 801a1ce:	2801      	cmp	r0, #1
 801a1d0:	d8a3      	bhi.n	801a11a <MobleConfigNetworkSave+0xa>
 801a1d2:	2000      	movs	r0, #0
 801a1d4:	e7a1      	b.n	801a11a <MobleConfigNetworkSave+0xa>
 801a1d6:	eb04 0a86 	add.w	sl, r4, r6, lsl #2
 801a1da:	f44f 731a 	mov.w	r3, #616	@ 0x268
 801a1de:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801a1e2:	fb03 9006 	mla	r0, r3, r6, r9
 801a1e6:	461a      	mov	r2, r3
 801a1e8:	3178      	adds	r1, #120	@ 0x78
 801a1ea:	3008      	adds	r0, #8
 801a1ec:	f00c fcd6 	bl	8026b9c <memmove>
 801a1f0:	f8da 2024 	ldr.w	r2, [sl, #36]	@ 0x24
 801a1f4:	4446      	add	r6, r8
 801a1f6:	f892 12e0 	ldrb.w	r1, [r2, #736]	@ 0x2e0
 801a1fa:	f806 100b 	strb.w	r1, [r6, fp]
 801a1fe:	f241 5375 	movw	r3, #5493	@ 0x1575
 801a202:	f892 22e1 	ldrb.w	r2, [r2, #737]	@ 0x2e1
 801a206:	54f2      	strb	r2, [r6, r3]
 801a208:	3701      	adds	r7, #1
 801a20a:	e7cb      	b.n	801a1a4 <MobleConfigNetworkSave+0x94>
 801a20c:	2000141c 	.word	0x2000141c

0801a210 <MobleGattGetAttCount>:
 801a210:	b510      	push	{r4, lr}
 801a212:	7884      	ldrb	r4, [r0, #2]
 801a214:	2200      	movs	r2, #0
 801a216:	2301      	movs	r3, #1
 801a218:	b2d1      	uxtb	r1, r2
 801a21a:	428c      	cmp	r4, r1
 801a21c:	d801      	bhi.n	801a222 <MobleGattGetAttCount+0x12>
 801a21e:	4618      	mov	r0, r3
 801a220:	bd10      	pop	{r4, pc}
 801a222:	6841      	ldr	r1, [r0, #4]
 801a224:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 801a228:	3201      	adds	r2, #1
 801a22a:	7889      	ldrb	r1, [r1, #2]
 801a22c:	0709      	lsls	r1, r1, #28
 801a22e:	bf54      	ite	pl
 801a230:	3302      	addpl	r3, #2
 801a232:	3303      	addmi	r3, #3
 801a234:	e7f0      	b.n	801a218 <MobleGattGetAttCount+0x8>
	...

0801a238 <MobleGattSetup>:
 801a238:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a23a:	4606      	mov	r6, r0
 801a23c:	2800      	cmp	r0, #0
 801a23e:	d06d      	beq.n	801a31c <MobleGattSetup+0xe4>
 801a240:	6802      	ldr	r2, [r0, #0]
 801a242:	f8d0 4164 	ldr.w	r4, [r0, #356]	@ 0x164
 801a246:	7815      	ldrb	r5, [r2, #0]
 801a248:	8823      	ldrh	r3, [r4, #0]
 801a24a:	bb55      	cbnz	r5, 801a2a2 <MobleGattSetup+0x6a>
 801a24c:	f641 0228 	movw	r2, #6184	@ 0x1828
 801a250:	4293      	cmp	r3, r2
 801a252:	d01b      	beq.n	801a28c <MobleGattSetup+0x54>
 801a254:	4d32      	ldr	r5, [pc, #200]	@ (801a320 <MobleGattSetup+0xe8>)
 801a256:	f8c6 5164 	str.w	r5, [r6, #356]	@ 0x164
 801a25a:	4628      	mov	r0, r5
 801a25c:	f7ff ffd8 	bl	801a210 <MobleGattGetAttCount>
 801a260:	462b      	mov	r3, r5
 801a262:	b2c2      	uxtb	r2, r0
 801a264:	f833 1b08 	ldrh.w	r1, [r3], #8
 801a268:	2001      	movs	r0, #1
 801a26a:	f7fa ff87 	bl	801517c <MoblePalBluetoothGattAddService>
 801a26e:	2801      	cmp	r0, #1
 801a270:	d815      	bhi.n	801a29e <MobleGattSetup+0x66>
 801a272:	686b      	ldr	r3, [r5, #4]
 801a274:	bb83      	cbnz	r3, 801a2d8 <MobleGattSetup+0xa0>
 801a276:	2000      	movs	r0, #0
 801a278:	e011      	b.n	801a29e <MobleGattSetup+0x66>
 801a27a:	6863      	ldr	r3, [r4, #4]
 801a27c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801a280:	3501      	adds	r5, #1
 801a282:	68d9      	ldr	r1, [r3, #12]
 801a284:	f7fa ffec 	bl	8015260 <MoblePalBluetoothGattDelCharacteristic>
 801a288:	2801      	cmp	r0, #1
 801a28a:	d808      	bhi.n	801a29e <MobleGattSetup+0x66>
 801a28c:	78a3      	ldrb	r3, [r4, #2]
 801a28e:	68a0      	ldr	r0, [r4, #8]
 801a290:	b2ea      	uxtb	r2, r5
 801a292:	4293      	cmp	r3, r2
 801a294:	d8f1      	bhi.n	801a27a <MobleGattSetup+0x42>
 801a296:	f7fa ff93 	bl	80151c0 <MoblePalBluetoothGattDelService>
 801a29a:	2801      	cmp	r0, #1
 801a29c:	d9da      	bls.n	801a254 <MobleGattSetup+0x1c>
 801a29e:	b004      	add	sp, #16
 801a2a0:	bd70      	pop	{r4, r5, r6, pc}
 801a2a2:	f641 0227 	movw	r2, #6183	@ 0x1827
 801a2a6:	4293      	cmp	r3, r2
 801a2a8:	d014      	beq.n	801a2d4 <MobleGattSetup+0x9c>
 801a2aa:	4d1e      	ldr	r5, [pc, #120]	@ (801a324 <MobleGattSetup+0xec>)
 801a2ac:	e7d3      	b.n	801a256 <MobleGattSetup+0x1e>
 801a2ae:	6863      	ldr	r3, [r4, #4]
 801a2b0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801a2b4:	3501      	adds	r5, #1
 801a2b6:	68d9      	ldr	r1, [r3, #12]
 801a2b8:	f7fa ffd2 	bl	8015260 <MoblePalBluetoothGattDelCharacteristic>
 801a2bc:	2801      	cmp	r0, #1
 801a2be:	d8ee      	bhi.n	801a29e <MobleGattSetup+0x66>
 801a2c0:	78a3      	ldrb	r3, [r4, #2]
 801a2c2:	68a0      	ldr	r0, [r4, #8]
 801a2c4:	b2ea      	uxtb	r2, r5
 801a2c6:	4293      	cmp	r3, r2
 801a2c8:	d8f1      	bhi.n	801a2ae <MobleGattSetup+0x76>
 801a2ca:	f7fa ff79 	bl	80151c0 <MoblePalBluetoothGattDelService>
 801a2ce:	2801      	cmp	r0, #1
 801a2d0:	d9eb      	bls.n	801a2aa <MobleGattSetup+0x72>
 801a2d2:	e7e4      	b.n	801a29e <MobleGattSetup+0x66>
 801a2d4:	2500      	movs	r5, #0
 801a2d6:	e7f3      	b.n	801a2c0 <MobleGattSetup+0x88>
 801a2d8:	78ab      	ldrb	r3, [r5, #2]
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d0cb      	beq.n	801a276 <MobleGattSetup+0x3e>
 801a2de:	2600      	movs	r6, #0
 801a2e0:	6869      	ldr	r1, [r5, #4]
 801a2e2:	b2f4      	uxtb	r4, r6
 801a2e4:	0120      	lsls	r0, r4, #4
 801a2e6:	eb01 1404 	add.w	r4, r1, r4, lsl #4
 801a2ea:	5a09      	ldrh	r1, [r1, r0]
 801a2ec:	7963      	ldrb	r3, [r4, #5]
 801a2ee:	7922      	ldrb	r2, [r4, #4]
 801a2f0:	f104 000c 	add.w	r0, r4, #12
 801a2f4:	9002      	str	r0, [sp, #8]
 801a2f6:	78e0      	ldrb	r0, [r4, #3]
 801a2f8:	9001      	str	r0, [sp, #4]
 801a2fa:	78a0      	ldrb	r0, [r4, #2]
 801a2fc:	9000      	str	r0, [sp, #0]
 801a2fe:	68a8      	ldr	r0, [r5, #8]
 801a300:	f7fa ff67 	bl	80151d2 <MoblePalBluetoothGattAddCharacteristic>
 801a304:	2801      	cmp	r0, #1
 801a306:	d8ca      	bhi.n	801a29e <MobleGattSetup+0x66>
 801a308:	68a3      	ldr	r3, [r4, #8]
 801a30a:	b10b      	cbz	r3, 801a310 <MobleGattSetup+0xd8>
 801a30c:	89a0      	ldrh	r0, [r4, #12]
 801a30e:	4798      	blx	r3
 801a310:	78aa      	ldrb	r2, [r5, #2]
 801a312:	3601      	adds	r6, #1
 801a314:	b2f3      	uxtb	r3, r6
 801a316:	429a      	cmp	r2, r3
 801a318:	d8e2      	bhi.n	801a2e0 <MobleGattSetup+0xa8>
 801a31a:	e7ac      	b.n	801a276 <MobleGattSetup+0x3e>
 801a31c:	2003      	movs	r0, #3
 801a31e:	e7be      	b.n	801a29e <MobleGattSetup+0x66>
 801a320:	20000014 	.word	0x20000014
 801a324:	20000020 	.word	0x20000020

0801a328 <MobleStackGattSetup>:
 801a328:	4801      	ldr	r0, [pc, #4]	@ (801a330 <MobleStackGattSetup+0x8>)
 801a32a:	f7ff bf85 	b.w	801a238 <MobleGattSetup>
 801a32e:	bf00      	nop
 801a330:	20001a9c 	.word	0x20001a9c

0801a334 <BLEMesh_GetAddress>:
 801a334:	4b06      	ldr	r3, [pc, #24]	@ (801a350 <BLEMesh_GetAddress+0x1c>)
 801a336:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 801a33a:	b138      	cbz	r0, 801a34c <BLEMesh_GetAddress+0x18>
 801a33c:	f893 26b4 	ldrb.w	r2, [r3, #1716]	@ 0x6b4
 801a340:	2a01      	cmp	r2, #1
 801a342:	d102      	bne.n	801a34a <BLEMesh_GetAddress+0x16>
 801a344:	f8b3 06b6 	ldrh.w	r0, [r3, #1718]	@ 0x6b6
 801a348:	4770      	bx	lr
 801a34a:	2000      	movs	r0, #0
 801a34c:	4770      	bx	lr
 801a34e:	bf00      	nop
 801a350:	20002514 	.word	0x20002514

0801a354 <BLEMesh_GetPublishAddress>:
 801a354:	2804      	cmp	r0, #4
 801a356:	b570      	push	{r4, r5, r6, lr}
 801a358:	d81b      	bhi.n	801a392 <BLEMesh_GetPublishAddress+0x3e>
 801a35a:	4a0f      	ldr	r2, [pc, #60]	@ (801a398 <BLEMesh_GetPublishAddress+0x44>)
 801a35c:	f8d2 36f0 	ldr.w	r3, [r2, #1776]	@ 0x6f0
 801a360:	b1bb      	cbz	r3, 801a392 <BLEMesh_GetPublishAddress+0x3e>
 801a362:	f892 36b4 	ldrb.w	r3, [r2, #1716]	@ 0x6b4
 801a366:	2b01      	cmp	r3, #1
 801a368:	d113      	bne.n	801a392 <BLEMesh_GetPublishAddress+0x3e>
 801a36a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801a36e:	2300      	movs	r3, #0
 801a370:	f8d0 26d8 	ldr.w	r2, [r0, #1752]	@ 0x6d8
 801a374:	2538      	movs	r5, #56	@ 0x38
 801a376:	f102 0478 	add.w	r4, r2, #120	@ 0x78
 801a37a:	fb05 f003 	mul.w	r0, r5, r3
 801a37e:	5826      	ldr	r6, [r4, r0]
 801a380:	428e      	cmp	r6, r1
 801a382:	d103      	bne.n	801a38c <BLEMesh_GetPublishAddress+0x38>
 801a384:	4402      	add	r2, r0
 801a386:	f8b2 007c 	ldrh.w	r0, [r2, #124]	@ 0x7c
 801a38a:	bd70      	pop	{r4, r5, r6, pc}
 801a38c:	3301      	adds	r3, #1
 801a38e:	2b0b      	cmp	r3, #11
 801a390:	d1f3      	bne.n	801a37a <BLEMesh_GetPublishAddress+0x26>
 801a392:	2000      	movs	r0, #0
 801a394:	e7f9      	b.n	801a38a <BLEMesh_GetPublishAddress+0x36>
 801a396:	bf00      	nop
 801a398:	20002514 	.word	0x20002514

0801a39c <BLEMesh_GetTotalModelsCount>:
 801a39c:	200b      	movs	r0, #11
 801a39e:	4770      	bx	lr

0801a3a0 <BLEMesh_GetNumberOfElements>:
 801a3a0:	2005      	movs	r0, #5
 801a3a2:	4770      	bx	lr

0801a3a4 <BLEMesh_GetAppKeysCount>:
 801a3a4:	2003      	movs	r0, #3
 801a3a6:	4770      	bx	lr

0801a3a8 <BLEMesh_GetNetKeysCount>:
 801a3a8:	2003      	movs	r0, #3
 801a3aa:	4770      	bx	lr

0801a3ac <BLEMesh_GetSubscriptionCount>:
 801a3ac:	200a      	movs	r0, #10
 801a3ae:	4770      	bx	lr

0801a3b0 <BLEMesh_GetTTL>:
 801a3b0:	4b03      	ldr	r3, [pc, #12]	@ (801a3c0 <BLEMesh_GetTTL+0x10>)
 801a3b2:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 801a3b6:	b110      	cbz	r0, 801a3be <BLEMesh_GetTTL+0xe>
 801a3b8:	4b02      	ldr	r3, [pc, #8]	@ (801a3c4 <BLEMesh_GetTTL+0x14>)
 801a3ba:	f893 00b5 	ldrb.w	r0, [r3, #181]	@ 0xb5
 801a3be:	4770      	bx	lr
 801a3c0:	20002514 	.word	0x20002514
 801a3c4:	20000324 	.word	0x20000324

0801a3c8 <BLEMesh_GetNetworkTransmitCount>:
 801a3c8:	4b04      	ldr	r3, [pc, #16]	@ (801a3dc <BLEMesh_GetNetworkTransmitCount+0x14>)
 801a3ca:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 801a3ce:	b120      	cbz	r0, 801a3da <BLEMesh_GetNetworkTransmitCount+0x12>
 801a3d0:	4b03      	ldr	r3, [pc, #12]	@ (801a3e0 <BLEMesh_GetNetworkTransmitCount+0x18>)
 801a3d2:	f893 00b6 	ldrb.w	r0, [r3, #182]	@ 0xb6
 801a3d6:	3001      	adds	r0, #1
 801a3d8:	b2c0      	uxtb	r0, r0
 801a3da:	4770      	bx	lr
 801a3dc:	20002514 	.word	0x20002514
 801a3e0:	20000324 	.word	0x20000324

0801a3e4 <BLEMesh_GetRelayRetransmitCount>:
 801a3e4:	4b04      	ldr	r3, [pc, #16]	@ (801a3f8 <BLEMesh_GetRelayRetransmitCount+0x14>)
 801a3e6:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 801a3ea:	b120      	cbz	r0, 801a3f6 <BLEMesh_GetRelayRetransmitCount+0x12>
 801a3ec:	4b03      	ldr	r3, [pc, #12]	@ (801a3fc <BLEMesh_GetRelayRetransmitCount+0x18>)
 801a3ee:	f893 00b8 	ldrb.w	r0, [r3, #184]	@ 0xb8
 801a3f2:	3001      	adds	r0, #1
 801a3f4:	b2c0      	uxtb	r0, r0
 801a3f6:	4770      	bx	lr
 801a3f8:	20002514 	.word	0x20002514
 801a3fc:	20000324 	.word	0x20000324

0801a400 <BLEMesh_SetAttentionTimerCallback>:
 801a400:	4b04      	ldr	r3, [pc, #16]	@ (801a414 <BLEMesh_SetAttentionTimerCallback+0x14>)
 801a402:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	@ 0x6f0
 801a406:	b11b      	cbz	r3, 801a410 <BLEMesh_SetAttentionTimerCallback+0x10>
 801a408:	f8c3 01f4 	str.w	r0, [r3, #500]	@ 0x1f4
 801a40c:	2000      	movs	r0, #0
 801a40e:	4770      	bx	lr
 801a410:	2002      	movs	r0, #2
 801a412:	4770      	bx	lr
 801a414:	20002514 	.word	0x20002514

0801a418 <BLEMesh_SetUnprovisionedDevBeaconInterval>:
 801a418:	1e42      	subs	r2, r0, #1
 801a41a:	2a62      	cmp	r2, #98	@ 0x62
 801a41c:	b508      	push	{r3, lr}
 801a41e:	4603      	mov	r3, r0
 801a420:	d917      	bls.n	801a452 <BLEMesh_SetUnprovisionedDevBeaconInterval+0x3a>
 801a422:	490d      	ldr	r1, [pc, #52]	@ (801a458 <BLEMesh_SetUnprovisionedDevBeaconInterval+0x40>)
 801a424:	f8d1 26f0 	ldr.w	r2, [r1, #1776]	@ 0x6f0
 801a428:	b19a      	cbz	r2, 801a452 <BLEMesh_SetUnprovisionedDevBeaconInterval+0x3a>
 801a42a:	f891 16b4 	ldrb.w	r1, [r1, #1716]	@ 0x6b4
 801a42e:	2901      	cmp	r1, #1
 801a430:	d00f      	beq.n	801a452 <BLEMesh_SetUnprovisionedDevBeaconInterval+0x3a>
 801a432:	f8d2 01d8 	ldr.w	r0, [r2, #472]	@ 0x1d8
 801a436:	b93b      	cbnz	r3, 801a448 <BLEMesh_SetUnprovisionedDevBeaconInterval+0x30>
 801a438:	f7fd fd1a 	bl	8017e70 <BnrgmTransmitDisableRegularlyGeneratedBeacon>
 801a43c:	2801      	cmp	r0, #1
 801a43e:	bf94      	ite	ls
 801a440:	2000      	movls	r0, #0
 801a442:	2001      	movhi	r0, #1
 801a444:	0040      	lsls	r0, r0, #1
 801a446:	bd08      	pop	{r3, pc}
 801a448:	f8a2 31dc 	strh.w	r3, [r2, #476]	@ 0x1dc
 801a44c:	f7fd fd22 	bl	8017e94 <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801a450:	e7f4      	b.n	801a43c <BLEMesh_SetUnprovisionedDevBeaconInterval+0x24>
 801a452:	2002      	movs	r0, #2
 801a454:	e7f7      	b.n	801a446 <BLEMesh_SetUnprovisionedDevBeaconInterval+0x2e>
 801a456:	bf00      	nop
 801a458:	20002514 	.word	0x20002514

0801a45c <BnrgmCustomBeaconGenerator>:
 801a45c:	b507      	push	{r0, r1, r2, lr}
 801a45e:	2300      	movs	r3, #0
 801a460:	291e      	cmp	r1, #30
 801a462:	9301      	str	r3, [sp, #4]
 801a464:	dc06      	bgt.n	801a474 <BnrgmCustomBeaconGenerator+0x18>
 801a466:	f04f 33ff 	mov.w	r3, #4294967295
 801a46a:	9301      	str	r3, [sp, #4]
 801a46c:	9801      	ldr	r0, [sp, #4]
 801a46e:	b003      	add	sp, #12
 801a470:	f85d fb04 	ldr.w	pc, [sp], #4
 801a474:	a901      	add	r1, sp, #4
 801a476:	f7ea ff7d 	bl	8005374 <BLEMesh_CustomBeaconGeneratorCallback>
 801a47a:	9b01      	ldr	r3, [sp, #4]
 801a47c:	2b1f      	cmp	r3, #31
 801a47e:	d8f2      	bhi.n	801a466 <BnrgmCustomBeaconGenerator+0xa>
 801a480:	e7f4      	b.n	801a46c <BnrgmCustomBeaconGenerator+0x10>

0801a482 <BLEMesh_CustomBeaconReceivedCallback>:
 801a482:	4770      	bx	lr

0801a484 <BLEMesh_TrsptIsBusyState>:
 801a484:	4b02      	ldr	r3, [pc, #8]	@ (801a490 <BLEMesh_TrsptIsBusyState+0xc>)
 801a486:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 801a48a:	f7ff b87b 	b.w	8019584 <MobleTransportIsBusy>
 801a48e:	bf00      	nop
 801a490:	20002514 	.word	0x20002514

0801a494 <BnrgmLibraryFnOnFriendshipEstablished>:
 801a494:	b513      	push	{r0, r1, r4, lr}
 801a496:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 801a49a:	9400      	str	r4, [sp, #0]
 801a49c:	2464      	movs	r4, #100	@ 0x64
 801a49e:	fbb2 f2f4 	udiv	r2, r2, r4
 801a4a2:	f7ea fe91 	bl	80051c8 <BLEMesh_FnFriendshipEstablishedCallback>
 801a4a6:	b002      	add	sp, #8
 801a4a8:	bd10      	pop	{r4, pc}

0801a4aa <BLEMesh_PvnrDataInputCallback>:
 801a4aa:	2000      	movs	r0, #0
 801a4ac:	4770      	bx	lr
	...

0801a4b0 <MobleStackCreateStartFastAdvTimer>:
 801a4b0:	b510      	push	{r4, lr}
 801a4b2:	4c13      	ldr	r4, [pc, #76]	@ (801a500 <MobleStackCreateStartFastAdvTimer+0x50>)
 801a4b4:	4913      	ldr	r1, [pc, #76]	@ (801a504 <MobleStackCreateStartFastAdvTimer+0x54>)
 801a4b6:	f504 62d0 	add.w	r2, r4, #1664	@ 0x680
 801a4ba:	f504 60ff 	add.w	r0, r4, #2040	@ 0x7f8
 801a4be:	f7fa fc97 	bl	8014df0 <MoblePalTimerCreate>
 801a4c2:	2801      	cmp	r0, #1
 801a4c4:	4602      	mov	r2, r0
 801a4c6:	d909      	bls.n	801a4dc <MobleStackCreateStartFastAdvTimer+0x2c>
 801a4c8:	f8d4 07f8 	ldr.w	r0, [r4, #2040]	@ 0x7f8
 801a4cc:	b108      	cbz	r0, 801a4d2 <MobleStackCreateStartFastAdvTimer+0x22>
 801a4ce:	f7fa fd41 	bl	8014f54 <MoblePalTimerDestroy>
 801a4d2:	2300      	movs	r3, #0
 801a4d4:	f8c4 37f8 	str.w	r3, [r4, #2040]	@ 0x7f8
 801a4d8:	4610      	mov	r0, r2
 801a4da:	bd10      	pop	{r4, pc}
 801a4dc:	f8d4 07f8 	ldr.w	r0, [r4, #2040]	@ 0x7f8
 801a4e0:	f64e 2160 	movw	r1, #60000	@ 0xea60
 801a4e4:	f7fa fcee 	bl	8014ec4 <MoblePalTimerStartOnce>
 801a4e8:	2801      	cmp	r0, #1
 801a4ea:	4602      	mov	r2, r0
 801a4ec:	d8f4      	bhi.n	801a4d8 <MobleStackCreateStartFastAdvTimer+0x28>
 801a4ee:	23c8      	movs	r3, #200	@ 0xc8
 801a4f0:	f8d4 0860 	ldr.w	r0, [r4, #2144]	@ 0x860
 801a4f4:	f8a4 3864 	strh.w	r3, [r4, #2148]	@ 0x864
 801a4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4fc:	f7fd bcca 	b.w	8017e94 <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801a500:	2000141c 	.word	0x2000141c
 801a504:	08017ed1 	.word	0x08017ed1

0801a508 <MobleStackResetSeq>:
 801a508:	4a04      	ldr	r2, [pc, #16]	@ (801a51c <MobleStackResetSeq+0x14>)
 801a50a:	f8d2 0680 	ldr.w	r0, [r2, #1664]	@ 0x680
 801a50e:	2300      	movs	r3, #0
 801a510:	f8c2 37dc 	str.w	r3, [r2, #2012]	@ 0x7dc
 801a514:	6083      	str	r3, [r0, #8]
 801a516:	f7ff bd29 	b.w	8019f6c <MobleConfigSaveSeq>
 801a51a:	bf00      	nop
 801a51c:	2000141c 	.word	0x2000141c

0801a520 <BnrgmStackSetDummyProxyModeState>:
 801a520:	b510      	push	{r4, lr}
 801a522:	f890 32ad 	ldrb.w	r3, [r0, #685]	@ 0x2ad
 801a526:	428b      	cmp	r3, r1
 801a528:	4604      	mov	r4, r0
 801a52a:	d101      	bne.n	801a530 <BnrgmStackSetDummyProxyModeState+0x10>
 801a52c:	2002      	movs	r0, #2
 801a52e:	bd10      	pop	{r4, pc}
 801a530:	2901      	cmp	r1, #1
 801a532:	f880 12ad 	strb.w	r1, [r0, #685]	@ 0x2ad
 801a536:	d10f      	bne.n	801a558 <BnrgmStackSetDummyProxyModeState+0x38>
 801a538:	4a0b      	ldr	r2, [pc, #44]	@ (801a568 <BnrgmStackSetDummyProxyModeState+0x48>)
 801a53a:	490c      	ldr	r1, [pc, #48]	@ (801a56c <BnrgmStackSetDummyProxyModeState+0x4c>)
 801a53c:	f502 702c 	add.w	r0, r2, #688	@ 0x2b0
 801a540:	f7fa fc56 	bl	8014df0 <MoblePalTimerCreate>
 801a544:	2801      	cmp	r0, #1
 801a546:	d8f1      	bhi.n	801a52c <BnrgmStackSetDummyProxyModeState+0xc>
 801a548:	f8d4 02b0 	ldr.w	r0, [r4, #688]	@ 0x2b0
 801a54c:	f64e 2160 	movw	r1, #60000	@ 0xea60
 801a550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a554:	f7fa bcb6 	b.w	8014ec4 <MoblePalTimerStartOnce>
 801a558:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 801a55c:	b113      	cbz	r3, 801a564 <BnrgmStackSetDummyProxyModeState+0x44>
 801a55e:	2000      	movs	r0, #0
 801a560:	7018      	strb	r0, [r3, #0]
 801a562:	e7e4      	b.n	801a52e <BnrgmStackSetDummyProxyModeState+0xe>
 801a564:	2003      	movs	r0, #3
 801a566:	e7e2      	b.n	801a52e <BnrgmStackSetDummyProxyModeState+0xe>
 801a568:	20001a9c 	.word	0x20001a9c
 801a56c:	0801cad1 	.word	0x0801cad1

0801a570 <BnrgmStackConsumeSeqNo>:
 801a570:	4807      	ldr	r0, [pc, #28]	@ (801a590 <BnrgmStackConsumeSeqNo+0x20>)
 801a572:	b510      	push	{r4, lr}
 801a574:	f8d0 47dc 	ldr.w	r4, [r0, #2012]	@ 0x7dc
 801a578:	1c63      	adds	r3, r4, #1
 801a57a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801a57e:	f8c0 37dc 	str.w	r3, [r0, #2012]	@ 0x7dc
 801a582:	f500 60d0 	add.w	r0, r0, #1664	@ 0x680
 801a586:	f7ff fd07 	bl	8019f98 <MobleNetworkSaveSeqNum>
 801a58a:	4620      	mov	r0, r4
 801a58c:	bd10      	pop	{r4, pc}
 801a58e:	bf00      	nop
 801a590:	2000141c 	.word	0x2000141c

0801a594 <BLEMesh_NeighborTableInit>:
 801a594:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a596:	f103 3cff 	add.w	ip, r3, #4294967295
 801a59a:	f1bc 0f18 	cmp.w	ip, #24
 801a59e:	f89d 4014 	ldrb.w	r4, [sp, #20]
 801a5a2:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801a5a6:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801a5aa:	f89d 5020 	ldrb.w	r5, [sp, #32]
 801a5ae:	d81a      	bhi.n	801a5e6 <BLEMesh_NeighborTableInit+0x52>
 801a5b0:	b1d8      	cbz	r0, 801a5ea <BLEMesh_NeighborTableInit+0x56>
 801a5b2:	b1d2      	cbz	r2, 801a5ea <BLEMesh_NeighborTableInit+0x56>
 801a5b4:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
 801a5b8:	d317      	bcc.n	801a5ea <BLEMesh_NeighborTableInit+0x56>
 801a5ba:	b1b4      	cbz	r4, 801a5ea <BLEMesh_NeighborTableInit+0x56>
 801a5bc:	ea47 0106 	orr.w	r1, r7, r6
 801a5c0:	2901      	cmp	r1, #1
 801a5c2:	d812      	bhi.n	801a5ea <BLEMesh_NeighborTableInit+0x56>
 801a5c4:	2d02      	cmp	r5, #2
 801a5c6:	d810      	bhi.n	801a5ea <BLEMesh_NeighborTableInit+0x56>
 801a5c8:	f880 3158 	strb.w	r3, [r0, #344]	@ 0x158
 801a5cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801a5d0:	435c      	muls	r4, r3
 801a5d2:	f8c0 2150 	str.w	r2, [r0, #336]	@ 0x150
 801a5d6:	f8c0 4154 	str.w	r4, [r0, #340]	@ 0x154
 801a5da:	f880 7159 	strb.w	r7, [r0, #345]	@ 0x159
 801a5de:	f880 615a 	strb.w	r6, [r0, #346]	@ 0x15a
 801a5e2:	f880 515b 	strb.w	r5, [r0, #347]	@ 0x15b
 801a5e6:	2000      	movs	r0, #0
 801a5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5ea:	2003      	movs	r0, #3
 801a5ec:	e7fc      	b.n	801a5e8 <BLEMesh_NeighborTableInit+0x54>

0801a5ee <BLEMesh_UpdateNeighbors>:
 801a5ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5f2:	b08b      	sub	sp, #44	@ 0x2c
 801a5f4:	4699      	mov	r9, r3
 801a5f6:	f99d 3054 	ldrsb.w	r3, [sp, #84]	@ 0x54
 801a5fa:	9304      	str	r3, [sp, #16]
 801a5fc:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801a600:	9306      	str	r3, [sp, #24]
 801a602:	f890 3158 	ldrb.w	r3, [r0, #344]	@ 0x158
 801a606:	f8d0 7150 	ldr.w	r7, [r0, #336]	@ 0x150
 801a60a:	9308      	str	r3, [sp, #32]
 801a60c:	4606      	mov	r6, r0
 801a60e:	460c      	mov	r4, r1
 801a610:	4692      	mov	sl, r2
 801a612:	f7ec fa87 	bl	8006b24 <HAL_GetTick>
 801a616:	9005      	str	r0, [sp, #20]
 801a618:	b177      	cbz	r7, 801a638 <BLEMesh_UpdateNeighbors+0x4a>
 801a61a:	9b08      	ldr	r3, [sp, #32]
 801a61c:	b163      	cbz	r3, 801a638 <BLEMesh_UpdateNeighbors+0x4a>
 801a61e:	f1ba 0f00 	cmp.w	sl, #0
 801a622:	d009      	beq.n	801a638 <BLEMesh_UpdateNeighbors+0x4a>
 801a624:	2c03      	cmp	r4, #3
 801a626:	d807      	bhi.n	801a638 <BLEMesh_UpdateNeighbors+0x4a>
 801a628:	e8df f004 	tbb	[pc, r4]
 801a62c:	0f0c0902 	.word	0x0f0c0902
 801a630:	f896 3159 	ldrb.w	r3, [r6, #345]	@ 0x159
 801a634:	2b01      	cmp	r3, #1
 801a636:	d023      	beq.n	801a680 <BLEMesh_UpdateNeighbors+0x92>
 801a638:	b00b      	add	sp, #44	@ 0x2c
 801a63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a63e:	f896 315a 	ldrb.w	r3, [r6, #346]	@ 0x15a
 801a642:	e7f7      	b.n	801a634 <BLEMesh_UpdateNeighbors+0x46>
 801a644:	f896 315b 	ldrb.w	r3, [r6, #347]	@ 0x15b
 801a648:	e7f4      	b.n	801a634 <BLEMesh_UpdateNeighbors+0x46>
 801a64a:	f896 315b 	ldrb.w	r3, [r6, #347]	@ 0x15b
 801a64e:	2b02      	cmp	r3, #2
 801a650:	e7f1      	b.n	801a636 <BLEMesh_UpdateNeighbors+0x48>
 801a652:	9b03      	ldr	r3, [sp, #12]
 801a654:	bb23      	cbnz	r3, 801a6a0 <BLEMesh_UpdateNeighbors+0xb2>
 801a656:	eb07 1345 	add.w	r3, r7, r5, lsl #5
 801a65a:	7f9a      	ldrb	r2, [r3, #30]
 801a65c:	9203      	str	r2, [sp, #12]
 801a65e:	2a01      	cmp	r2, #1
 801a660:	d11c      	bne.n	801a69c <BLEMesh_UpdateNeighbors+0xae>
 801a662:	9905      	ldr	r1, [sp, #20]
 801a664:	699a      	ldr	r2, [r3, #24]
 801a666:	1a8a      	subs	r2, r1, r2
 801a668:	f8d6 1154 	ldr.w	r1, [r6, #340]	@ 0x154
 801a66c:	428a      	cmp	r2, r1
 801a66e:	f240 8084 	bls.w	801a77a <BLEMesh_UpdateNeighbors+0x18c>
 801a672:	f04f 0200 	mov.w	r2, #0
 801a676:	2c00      	cmp	r4, #0
 801a678:	779a      	strb	r2, [r3, #30]
 801a67a:	da18      	bge.n	801a6ae <BLEMesh_UpdateNeighbors+0xc0>
 801a67c:	b26c      	sxtb	r4, r5
 801a67e:	e016      	b.n	801a6ae <BLEMesh_UpdateNeighbors+0xc0>
 801a680:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a684:	9307      	str	r3, [sp, #28]
 801a686:	2b00      	cmp	r3, #0
 801a688:	f04f 0b00 	mov.w	fp, #0
 801a68c:	9b06      	ldr	r3, [sp, #24]
 801a68e:	bfd8      	it	le
 801a690:	2300      	movle	r3, #0
 801a692:	9309      	str	r3, [sp, #36]	@ 0x24
 801a694:	f04f 34ff 	mov.w	r4, #4294967295
 801a698:	465d      	mov	r5, fp
 801a69a:	e7dc      	b.n	801a656 <BLEMesh_UpdateNeighbors+0x68>
 801a69c:	2300      	movs	r3, #0
 801a69e:	9303      	str	r3, [sp, #12]
 801a6a0:	2c00      	cmp	r4, #0
 801a6a2:	da04      	bge.n	801a6ae <BLEMesh_UpdateNeighbors+0xc0>
 801a6a4:	eb07 1345 	add.w	r3, r7, r5, lsl #5
 801a6a8:	7f9b      	ldrb	r3, [r3, #30]
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d0e6      	beq.n	801a67c <BLEMesh_UpdateNeighbors+0x8e>
 801a6ae:	f1bb 0f00 	cmp.w	fp, #0
 801a6b2:	d12e      	bne.n	801a712 <BLEMesh_UpdateNeighbors+0x124>
 801a6b4:	eb07 1845 	add.w	r8, r7, r5, lsl #5
 801a6b8:	f898 301e 	ldrb.w	r3, [r8, #30]
 801a6bc:	2b01      	cmp	r3, #1
 801a6be:	d128      	bne.n	801a712 <BLEMesh_UpdateNeighbors+0x124>
 801a6c0:	2206      	movs	r2, #6
 801a6c2:	4641      	mov	r1, r8
 801a6c4:	4650      	mov	r0, sl
 801a6c6:	f00c fa59 	bl	8026b7c <memcmp>
 801a6ca:	bb10      	cbnz	r0, 801a712 <BLEMesh_UpdateNeighbors+0x124>
 801a6cc:	9b05      	ldr	r3, [sp, #20]
 801a6ce:	f8c8 3018 	str.w	r3, [r8, #24]
 801a6d2:	9b04      	ldr	r3, [sp, #16]
 801a6d4:	f888 301c 	strb.w	r3, [r8, #28]
 801a6d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a6da:	f888 901d 	strb.w	r9, [r8, #29]
 801a6de:	f108 0b06 	add.w	fp, r8, #6
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d04c      	beq.n	801a780 <BLEMesh_UpdateNeighbors+0x192>
 801a6e6:	4619      	mov	r1, r3
 801a6e8:	465a      	mov	r2, fp
 801a6ea:	3110      	adds	r1, #16
 801a6ec:	f853 0b04 	ldr.w	r0, [r3], #4
 801a6f0:	f842 0b04 	str.w	r0, [r2], #4
 801a6f4:	428b      	cmp	r3, r1
 801a6f6:	d1f9      	bne.n	801a6ec <BLEMesh_UpdateNeighbors+0xfe>
 801a6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a6fa:	f8a8 3016 	strh.w	r3, [r8, #22]
 801a6fe:	9b04      	ldr	r3, [sp, #16]
 801a700:	9300      	str	r3, [sp, #0]
 801a702:	465a      	mov	r2, fp
 801a704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a706:	4649      	mov	r1, r9
 801a708:	4640      	mov	r0, r8
 801a70a:	f7ea fdff 	bl	800530c <BLEMesh_NeighborRefreshedCallback>
 801a70e:	f04f 0b01 	mov.w	fp, #1
 801a712:	9b08      	ldr	r3, [sp, #32]
 801a714:	3501      	adds	r5, #1
 801a716:	b2ad      	uxth	r5, r5
 801a718:	42ab      	cmp	r3, r5
 801a71a:	d89a      	bhi.n	801a652 <BLEMesh_UpdateNeighbors+0x64>
 801a71c:	f1bb 0f00 	cmp.w	fp, #0
 801a720:	d18a      	bne.n	801a638 <BLEMesh_UpdateNeighbors+0x4a>
 801a722:	2c00      	cmp	r4, #0
 801a724:	db88      	blt.n	801a638 <BLEMesh_UpdateNeighbors+0x4a>
 801a726:	eb07 1444 	add.w	r4, r7, r4, lsl #5
 801a72a:	2301      	movs	r3, #1
 801a72c:	77a3      	strb	r3, [r4, #30]
 801a72e:	9b05      	ldr	r3, [sp, #20]
 801a730:	61a3      	str	r3, [r4, #24]
 801a732:	2206      	movs	r2, #6
 801a734:	4651      	mov	r1, sl
 801a736:	4620      	mov	r0, r4
 801a738:	f00c fa30 	bl	8026b9c <memmove>
 801a73c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a73e:	f884 901d 	strb.w	r9, [r4, #29]
 801a742:	1da2      	adds	r2, r4, #6
 801a744:	b143      	cbz	r3, 801a758 <BLEMesh_UpdateNeighbors+0x16a>
 801a746:	4611      	mov	r1, r2
 801a748:	f103 0010 	add.w	r0, r3, #16
 801a74c:	f853 6b04 	ldr.w	r6, [r3], #4
 801a750:	f841 6b04 	str.w	r6, [r1], #4
 801a754:	4283      	cmp	r3, r0
 801a756:	d1f9      	bne.n	801a74c <BLEMesh_UpdateNeighbors+0x15e>
 801a758:	9b07      	ldr	r3, [sp, #28]
 801a75a:	9904      	ldr	r1, [sp, #16]
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	bfc2      	ittt	gt
 801a760:	eb07 1745 	addgt.w	r7, r7, r5, lsl #5
 801a764:	9b06      	ldrgt	r3, [sp, #24]
 801a766:	82fb      	strhgt	r3, [r7, #22]
 801a768:	9b04      	ldr	r3, [sp, #16]
 801a76a:	7723      	strb	r3, [r4, #28]
 801a76c:	4620      	mov	r0, r4
 801a76e:	8ae3      	ldrh	r3, [r4, #22]
 801a770:	9100      	str	r1, [sp, #0]
 801a772:	4649      	mov	r1, r9
 801a774:	f7ea fd96 	bl	80052a4 <BLEMesh_NeighborAppearedCallback>
 801a778:	e75e      	b.n	801a638 <BLEMesh_UpdateNeighbors+0x4a>
 801a77a:	2300      	movs	r3, #0
 801a77c:	9303      	str	r3, [sp, #12]
 801a77e:	e796      	b.n	801a6ae <BLEMesh_UpdateNeighbors+0xc0>
 801a780:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801a782:	2210      	movs	r2, #16
 801a784:	4658      	mov	r0, fp
 801a786:	f00c fa23 	bl	8026bd0 <memset>
 801a78a:	e7b5      	b.n	801a6f8 <BLEMesh_UpdateNeighbors+0x10a>

0801a78c <MobleSetGet>:
 801a78c:	b510      	push	{r4, lr}
 801a78e:	b928      	cbnz	r0, 801a79c <MobleSetGet+0x10>
 801a790:	4b10      	ldr	r3, [pc, #64]	@ (801a7d4 <MobleSetGet+0x48>)
 801a792:	4a11      	ldr	r2, [pc, #68]	@ (801a7d8 <MobleSetGet+0x4c>)
 801a794:	21be      	movs	r1, #190	@ 0xbe
 801a796:	4811      	ldr	r0, [pc, #68]	@ (801a7dc <MobleSetGet+0x50>)
 801a798:	f00b fa7c 	bl	8025c94 <__assert_func>
 801a79c:	b91a      	cbnz	r2, 801a7a6 <MobleSetGet+0x1a>
 801a79e:	4b10      	ldr	r3, [pc, #64]	@ (801a7e0 <MobleSetGet+0x54>)
 801a7a0:	4a0d      	ldr	r2, [pc, #52]	@ (801a7d8 <MobleSetGet+0x4c>)
 801a7a2:	21bf      	movs	r1, #191	@ 0xbf
 801a7a4:	e7f7      	b.n	801a796 <MobleSetGet+0xa>
 801a7a6:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 801a7aa:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	da0d      	bge.n	801a7ce <MobleSetGet+0x42>
 801a7b2:	f810 3011 	ldrb.w	r3, [r0, r1, lsl #1]
 801a7b6:	7861      	ldrb	r1, [r4, #1]
 801a7b8:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 801a7bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801a7c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801a7c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801a7c8:	8013      	strh	r3, [r2, #0]
 801a7ca:	2000      	movs	r0, #0
 801a7cc:	bd10      	pop	{r4, pc}
 801a7ce:	2002      	movs	r0, #2
 801a7d0:	e7fc      	b.n	801a7cc <MobleSetGet+0x40>
 801a7d2:	bf00      	nop
 801a7d4:	0802e9eb 	.word	0x0802e9eb
 801a7d8:	0802cdf0 	.word	0x0802cdf0
 801a7dc:	0802e9ef 	.word	0x0802e9ef
 801a7e0:	0802e558 	.word	0x0802e558

0801a7e4 <BLEMesh_GetLibraryVersion>:
 801a7e4:	4800      	ldr	r0, [pc, #0]	@ (801a7e8 <BLEMesh_GetLibraryVersion+0x4>)
 801a7e6:	4770      	bx	lr
 801a7e8:	0802ea28 	.word	0x0802ea28

0801a7ec <BLEMesh_GetLibrarySubVersion>:
 801a7ec:	4800      	ldr	r0, [pc, #0]	@ (801a7f0 <BLEMesh_GetLibrarySubVersion+0x4>)
 801a7ee:	4770      	bx	lr
 801a7f0:	0802ea32 	.word	0x0802ea32

0801a7f4 <BLEMesh_BleHardwareInitCallBack>:
 801a7f4:	b118      	cbz	r0, 801a7fe <BLEMesh_BleHardwareInitCallBack+0xa>
 801a7f6:	4b03      	ldr	r3, [pc, #12]	@ (801a804 <BLEMesh_BleHardwareInitCallBack+0x10>)
 801a7f8:	6058      	str	r0, [r3, #4]
 801a7fa:	2000      	movs	r0, #0
 801a7fc:	4770      	bx	lr
 801a7fe:	2003      	movs	r0, #3
 801a800:	4770      	bx	lr
 801a802:	bf00      	nop
 801a804:	20000324 	.word	0x20000324

0801a808 <BLEMesh_BleConfigModelInitCallBack>:
 801a808:	b120      	cbz	r0, 801a814 <BLEMesh_BleConfigModelInitCallBack+0xc>
 801a80a:	4b03      	ldr	r3, [pc, #12]	@ (801a818 <BLEMesh_BleConfigModelInitCallBack+0x10>)
 801a80c:	f8c3 06f8 	str.w	r0, [r3, #1784]	@ 0x6f8
 801a810:	2000      	movs	r0, #0
 801a812:	4770      	bx	lr
 801a814:	2003      	movs	r0, #3
 801a816:	4770      	bx	lr
 801a818:	20002514 	.word	0x20002514

0801a81c <MobleBeaconSetGeneric>:
 801a81c:	b570      	push	{r4, r5, r6, lr}
 801a81e:	460c      	mov	r4, r1
 801a820:	4619      	mov	r1, r3
 801a822:	9b04      	ldr	r3, [sp, #16]
 801a824:	b188      	cbz	r0, 801a84a <MobleBeaconSetGeneric+0x2e>
 801a826:	b181      	cbz	r1, 801a84a <MobleBeaconSetGeneric+0x2e>
 801a828:	b17c      	cbz	r4, 801a84a <MobleBeaconSetGeneric+0x2e>
 801a82a:	6826      	ldr	r6, [r4, #0]
 801a82c:	1cdd      	adds	r5, r3, #3
 801a82e:	42b5      	cmp	r5, r6
 801a830:	d80b      	bhi.n	801a84a <MobleBeaconSetGeneric+0x2e>
 801a832:	6025      	str	r5, [r4, #0]
 801a834:	1c9c      	adds	r4, r3, #2
 801a836:	7004      	strb	r4, [r0, #0]
 801a838:	242b      	movs	r4, #43	@ 0x2b
 801a83a:	7082      	strb	r2, [r0, #2]
 801a83c:	7044      	strb	r4, [r0, #1]
 801a83e:	461a      	mov	r2, r3
 801a840:	3003      	adds	r0, #3
 801a842:	f00c fa76 	bl	8026d32 <memcpy>
 801a846:	2000      	movs	r0, #0
 801a848:	bd70      	pop	{r4, r5, r6, pc}
 801a84a:	2003      	movs	r0, #3
 801a84c:	e7fc      	b.n	801a848 <MobleBeaconSetGeneric+0x2c>

0801a84e <MobleBeaconSetUnprovisioned>:
 801a84e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a852:	b089      	sub	sp, #36	@ 0x24
 801a854:	4614      	mov	r4, r2
 801a856:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801a858:	2212      	movs	r2, #18
 801a85a:	4605      	mov	r5, r0
 801a85c:	460e      	mov	r6, r1
 801a85e:	a803      	add	r0, sp, #12
 801a860:	2100      	movs	r1, #0
 801a862:	4698      	mov	r8, r3
 801a864:	9102      	str	r1, [sp, #8]
 801a866:	f00c f9b3 	bl	8026bd0 <memset>
 801a86a:	2f00      	cmp	r7, #0
 801a86c:	bf0c      	ite	eq
 801a86e:	f04f 0912 	moveq.w	r9, #18
 801a872:	f04f 0916 	movne.w	r9, #22
 801a876:	4622      	mov	r2, r4
 801a878:	ab02      	add	r3, sp, #8
 801a87a:	f104 0c10 	add.w	ip, r4, #16
 801a87e:	6810      	ldr	r0, [r2, #0]
 801a880:	6851      	ldr	r1, [r2, #4]
 801a882:	461c      	mov	r4, r3
 801a884:	c403      	stmia	r4!, {r0, r1}
 801a886:	3208      	adds	r2, #8
 801a888:	4562      	cmp	r2, ip
 801a88a:	4623      	mov	r3, r4
 801a88c:	d1f7      	bne.n	801a87e <MobleBeaconSetUnprovisioned+0x30>
 801a88e:	2202      	movs	r2, #2
 801a890:	4641      	mov	r1, r8
 801a892:	a806      	add	r0, sp, #24
 801a894:	f7fd fe03 	bl	801849e <MobleOutputStreamPutBigEndian>
 801a898:	b12f      	cbz	r7, 801a8a6 <MobleBeaconSetUnprovisioned+0x58>
 801a89a:	6839      	ldr	r1, [r7, #0]
 801a89c:	2204      	movs	r2, #4
 801a89e:	f10d 001a 	add.w	r0, sp, #26
 801a8a2:	f7fd fdfc 	bl	801849e <MobleOutputStreamPutBigEndian>
 801a8a6:	f8cd 9000 	str.w	r9, [sp]
 801a8aa:	ab02      	add	r3, sp, #8
 801a8ac:	2200      	movs	r2, #0
 801a8ae:	4631      	mov	r1, r6
 801a8b0:	4628      	mov	r0, r5
 801a8b2:	f7ff ffb3 	bl	801a81c <MobleBeaconSetGeneric>
 801a8b6:	b009      	add	sp, #36	@ 0x24
 801a8b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801a8bc <MobleBeaconSetSecure>:
 801a8bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a8c0:	b08d      	sub	sp, #52	@ 0x34
 801a8c2:	460e      	mov	r6, r1
 801a8c4:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 801a8c8:	4617      	mov	r7, r2
 801a8ca:	461c      	mov	r4, r3
 801a8cc:	4605      	mov	r5, r0
 801a8ce:	2800      	cmp	r0, #0
 801a8d0:	d03d      	beq.n	801a94e <MobleBeaconSetSecure+0x92>
 801a8d2:	2900      	cmp	r1, #0
 801a8d4:	d03b      	beq.n	801a94e <MobleBeaconSetSecure+0x92>
 801a8d6:	b3d3      	cbz	r3, 801a94e <MobleBeaconSetSecure+0x92>
 801a8d8:	f04f 0800 	mov.w	r8, #0
 801a8dc:	2211      	movs	r2, #17
 801a8de:	4641      	mov	r1, r8
 801a8e0:	a807      	add	r0, sp, #28
 801a8e2:	f00c f975 	bl	8026bd0 <memset>
 801a8e6:	6823      	ldr	r3, [r4, #0]
 801a8e8:	6822      	ldr	r2, [r4, #0]
 801a8ea:	f8cd 3019 	str.w	r3, [sp, #25]
 801a8ee:	f8cd 2009 	str.w	r2, [sp, #9]
 801a8f2:	6863      	ldr	r3, [r4, #4]
 801a8f4:	f8cd 8010 	str.w	r8, [sp, #16]
 801a8f8:	2204      	movs	r2, #4
 801a8fa:	4649      	mov	r1, r9
 801a8fc:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 801a900:	f8cd 301d 	str.w	r3, [sp, #29]
 801a904:	f8cd 300d 	str.w	r3, [sp, #13]
 801a908:	f88d 8014 	strb.w	r8, [sp, #20]
 801a90c:	f88d 7018 	strb.w	r7, [sp, #24]
 801a910:	f88d 7008 	strb.w	r7, [sp, #8]
 801a914:	f7fd fdc3 	bl	801849e <MobleOutputStreamPutBigEndian>
 801a918:	2204      	movs	r2, #4
 801a91a:	4649      	mov	r1, r9
 801a91c:	f10d 0011 	add.w	r0, sp, #17
 801a920:	f7fd fdbd 	bl	801849e <MobleOutputStreamPutBigEndian>
 801a924:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801a928:	220d      	movs	r2, #13
 801a92a:	a902      	add	r1, sp, #8
 801a92c:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 801a930:	f7fc faf0 	bl	8016f14 <MoblePalCryptoAuthenticateSecureNetworkBeacon>
 801a934:	2801      	cmp	r0, #1
 801a936:	d807      	bhi.n	801a948 <MobleBeaconSetSecure+0x8c>
 801a938:	2315      	movs	r3, #21
 801a93a:	9300      	str	r3, [sp, #0]
 801a93c:	2201      	movs	r2, #1
 801a93e:	ab06      	add	r3, sp, #24
 801a940:	4631      	mov	r1, r6
 801a942:	4628      	mov	r0, r5
 801a944:	f7ff ff6a 	bl	801a81c <MobleBeaconSetGeneric>
 801a948:	b00d      	add	sp, #52	@ 0x34
 801a94a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a94e:	2003      	movs	r0, #3
 801a950:	e7fa      	b.n	801a948 <MobleBeaconSetSecure+0x8c>

0801a952 <MobleGattBeaconSetSectionGeneric>:
 801a952:	b570      	push	{r4, r5, r6, lr}
 801a954:	4614      	mov	r4, r2
 801a956:	e9dd 6204 	ldrd	r6, r2, [sp, #16]
 801a95a:	b180      	cbz	r0, 801a97e <MobleGattBeaconSetSectionGeneric+0x2c>
 801a95c:	b17e      	cbz	r6, 801a97e <MobleGattBeaconSetSectionGeneric+0x2c>
 801a95e:	b174      	cbz	r4, 801a97e <MobleGattBeaconSetSectionGeneric+0x2c>
 801a960:	1c95      	adds	r5, r2, #2
 801a962:	428d      	cmp	r5, r1
 801a964:	d80b      	bhi.n	801a97e <MobleGattBeaconSetSectionGeneric+0x2c>
 801a966:	1c51      	adds	r1, r2, #1
 801a968:	7001      	strb	r1, [r0, #0]
 801a96a:	7043      	strb	r3, [r0, #1]
 801a96c:	4631      	mov	r1, r6
 801a96e:	3002      	adds	r0, #2
 801a970:	f00c f9df 	bl	8026d32 <memcpy>
 801a974:	6823      	ldr	r3, [r4, #0]
 801a976:	442b      	add	r3, r5
 801a978:	6023      	str	r3, [r4, #0]
 801a97a:	2000      	movs	r0, #0
 801a97c:	bd70      	pop	{r4, r5, r6, pc}
 801a97e:	2003      	movs	r0, #3
 801a980:	e7fc      	b.n	801a97c <MobleGattBeaconSetSectionGeneric+0x2a>
	...

0801a984 <MobleStackGattBeaconGenerator>:
 801a984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a988:	2902      	cmp	r1, #2
 801a98a:	b097      	sub	sp, #92	@ 0x5c
 801a98c:	4606      	mov	r6, r0
 801a98e:	460d      	mov	r5, r1
 801a990:	f340 80dd 	ble.w	801ab4e <MobleStackGattBeaconGenerator+0x1ca>
 801a994:	f7fa fc6e 	bl	8015274 <MoblePalBluetoothGetConnectionState>
 801a998:	2802      	cmp	r0, #2
 801a99a:	f040 80db 	bne.w	801ab54 <MobleStackGattBeaconGenerator+0x1d0>
 801a99e:	4f6e      	ldr	r7, [pc, #440]	@ (801ab58 <MobleStackGattBeaconGenerator+0x1d4>)
 801a9a0:	f8d7 3680 	ldr.w	r3, [r7, #1664]	@ 0x680
 801a9a4:	781b      	ldrb	r3, [r3, #0]
 801a9a6:	b9c3      	cbnz	r3, 801a9da <MobleStackGattBeaconGenerator+0x56>
 801a9a8:	f897 3855 	ldrb.w	r3, [r7, #2133]	@ 0x855
 801a9ac:	b18b      	cbz	r3, 801a9d2 <MobleStackGattBeaconGenerator+0x4e>
 801a9ae:	2306      	movs	r3, #6
 801a9b0:	f88d 300b 	strb.w	r3, [sp, #11]
 801a9b4:	f10d 020b 	add.w	r2, sp, #11
 801a9b8:	2301      	movs	r3, #1
 801a9ba:	9200      	str	r2, [sp, #0]
 801a9bc:	2400      	movs	r4, #0
 801a9be:	9301      	str	r3, [sp, #4]
 801a9c0:	aa04      	add	r2, sp, #16
 801a9c2:	4629      	mov	r1, r5
 801a9c4:	4630      	mov	r0, r6
 801a9c6:	9404      	str	r4, [sp, #16]
 801a9c8:	f7ff ffc3 	bl	801a952 <MobleGattBeaconSetSectionGeneric>
 801a9cc:	2801      	cmp	r0, #1
 801a9ce:	d90e      	bls.n	801a9ee <MobleStackGattBeaconGenerator+0x6a>
 801a9d0:	9b04      	ldr	r3, [sp, #16]
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	b017      	add	sp, #92	@ 0x5c
 801a9d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9da:	2b01      	cmp	r3, #1
 801a9dc:	d1e7      	bne.n	801a9ae <MobleStackGattBeaconGenerator+0x2a>
 801a9de:	4b5f      	ldr	r3, [pc, #380]	@ (801ab5c <MobleStackGattBeaconGenerator+0x1d8>)
 801a9e0:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 801a9e4:	2b01      	cmp	r3, #1
 801a9e6:	d0e2      	beq.n	801a9ae <MobleStackGattBeaconGenerator+0x2a>
 801a9e8:	f897 392d 	ldrb.w	r3, [r7, #2349]	@ 0x92d
 801a9ec:	e7de      	b.n	801a9ac <MobleStackGattBeaconGenerator+0x28>
 801a9ee:	f8d7 3680 	ldr.w	r3, [r7, #1664]	@ 0x680
 801a9f2:	781b      	ldrb	r3, [r3, #0]
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d073      	beq.n	801aae0 <MobleStackGattBeaconGenerator+0x15c>
 801a9f8:	f641 0328 	movw	r3, #6184	@ 0x1828
 801a9fc:	9804      	ldr	r0, [sp, #16]
 801a9fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 801aa02:	2302      	movs	r3, #2
 801aa04:	9301      	str	r3, [sp, #4]
 801aa06:	ab03      	add	r3, sp, #12
 801aa08:	9300      	str	r3, [sp, #0]
 801aa0a:	1a29      	subs	r1, r5, r0
 801aa0c:	2303      	movs	r3, #3
 801aa0e:	aa04      	add	r2, sp, #16
 801aa10:	4430      	add	r0, r6
 801aa12:	f7ff ff9e 	bl	801a952 <MobleGattBeaconSetSectionGeneric>
 801aa16:	2801      	cmp	r0, #1
 801aa18:	d8da      	bhi.n	801a9d0 <MobleStackGattBeaconGenerator+0x4c>
 801aa1a:	4b50      	ldr	r3, [pc, #320]	@ (801ab5c <MobleStackGattBeaconGenerator+0x1d8>)
 801aa1c:	f893 80bb 	ldrb.w	r8, [r3, #187]	@ 0xbb
 801aa20:	9411      	str	r4, [sp, #68]	@ 0x44
 801aa22:	f1b8 0f01 	cmp.w	r8, #1
 801aa26:	d147      	bne.n	801aab8 <MobleStackGattBeaconGenerator+0x134>
 801aa28:	220f      	movs	r2, #15
 801aa2a:	4621      	mov	r1, r4
 801aa2c:	a812      	add	r0, sp, #72	@ 0x48
 801aa2e:	f00c f8cf 	bl	8026bd0 <memset>
 801aa32:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801aa36:	e9cd 4407 	strd	r4, r4, [sp, #28]
 801aa3a:	f7fb fc95 	bl	8016368 <MoblePalCryptoGetNodeIdntyToBeAdvt>
 801aa3e:	4601      	mov	r1, r0
 801aa40:	a809      	add	r0, sp, #36	@ 0x24
 801aa42:	f7fc f8a3 	bl	8016b8c <MoblePalCryptoIdentityKey>
 801aa46:	2801      	cmp	r0, #1
 801aa48:	f200 8084 	bhi.w	801ab54 <MobleStackGattBeaconGenerator+0x1d0>
 801aa4c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801aa50:	f88d 8046 	strb.w	r8, [sp, #70]	@ 0x46
 801aa54:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 801aa58:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 801aa5c:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801aa60:	f10d 0939 	add.w	r9, sp, #57	@ 0x39
 801aa64:	f10d 084e 	add.w	r8, sp, #78	@ 0x4e
 801aa68:	2408      	movs	r4, #8
 801aa6a:	f7fa fc65 	bl	8015338 <MoblePalBluetoothRandom>
 801aa6e:	3c01      	subs	r4, #1
 801aa70:	f809 0f01 	strb.w	r0, [r9, #1]!
 801aa74:	f808 0f01 	strb.w	r0, [r8, #1]!
 801aa78:	d1f7      	bne.n	801aa6a <MobleStackGattBeaconGenerator+0xe6>
 801aa7a:	f8d7 3680 	ldr.w	r3, [r7, #1664]	@ 0x680
 801aa7e:	2202      	movs	r2, #2
 801aa80:	8859      	ldrh	r1, [r3, #2]
 801aa82:	f10d 0042 	add.w	r0, sp, #66	@ 0x42
 801aa86:	f7fd fd0a 	bl	801849e <MobleOutputStreamPutBigEndian>
 801aa8a:	a90d      	add	r1, sp, #52	@ 0x34
 801aa8c:	a809      	add	r0, sp, #36	@ 0x24
 801aa8e:	aa05      	add	r2, sp, #20
 801aa90:	f7fb f800 	bl	8015a94 <BAES_EcbEncrypt>
 801aa94:	ab07      	add	r3, sp, #28
 801aa96:	cb03      	ldmia	r3!, {r0, r1}
 801aa98:	f8cd 0047 	str.w	r0, [sp, #71]	@ 0x47
 801aa9c:	9804      	ldr	r0, [sp, #16]
 801aa9e:	f8cd 104b 	str.w	r1, [sp, #75]	@ 0x4b
 801aaa2:	2313      	movs	r3, #19
 801aaa4:	9301      	str	r3, [sp, #4]
 801aaa6:	ab11      	add	r3, sp, #68	@ 0x44
 801aaa8:	9300      	str	r3, [sp, #0]
 801aaaa:	1a29      	subs	r1, r5, r0
 801aaac:	2316      	movs	r3, #22
 801aaae:	aa04      	add	r2, sp, #16
 801aab0:	4430      	add	r0, r6
 801aab2:	f7ff ff4e 	bl	801a952 <MobleGattBeaconSetSectionGeneric>
 801aab6:	e78b      	b.n	801a9d0 <MobleStackGattBeaconGenerator+0x4c>
 801aab8:	9412      	str	r4, [sp, #72]	@ 0x48
 801aaba:	f8cd 404b 	str.w	r4, [sp, #75]	@ 0x4b
 801aabe:	f7fb fc7d 	bl	80163bc <MoblePalCryptoGetNetworkIdToBeAdvt>
 801aac2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801aac6:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801aaca:	f88d 4046 	strb.w	r4, [sp, #70]	@ 0x46
 801aace:	6803      	ldr	r3, [r0, #0]
 801aad0:	f8cd 3047 	str.w	r3, [sp, #71]	@ 0x47
 801aad4:	6843      	ldr	r3, [r0, #4]
 801aad6:	f8cd 304b 	str.w	r3, [sp, #75]	@ 0x4b
 801aada:	9804      	ldr	r0, [sp, #16]
 801aadc:	230b      	movs	r3, #11
 801aade:	e7e1      	b.n	801aaa4 <MobleStackGattBeaconGenerator+0x120>
 801aae0:	4a1f      	ldr	r2, [pc, #124]	@ (801ab60 <MobleStackGattBeaconGenerator+0x1dc>)
 801aae2:	f892 4725 	ldrb.w	r4, [r2, #1829]	@ 0x725
 801aae6:	2c00      	cmp	r4, #0
 801aae8:	f47f af73 	bne.w	801a9d2 <MobleStackGattBeaconGenerator+0x4e>
 801aaec:	9804      	ldr	r0, [sp, #16]
 801aaee:	2302      	movs	r3, #2
 801aaf0:	9301      	str	r3, [sp, #4]
 801aaf2:	ab09      	add	r3, sp, #36	@ 0x24
 801aaf4:	9300      	str	r3, [sp, #0]
 801aaf6:	1a29      	subs	r1, r5, r0
 801aaf8:	f641 0727 	movw	r7, #6183	@ 0x1827
 801aafc:	2303      	movs	r3, #3
 801aafe:	aa04      	add	r2, sp, #16
 801ab00:	4430      	add	r0, r6
 801ab02:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 801ab06:	f7ff ff24 	bl	801a952 <MobleGattBeaconSetSectionGeneric>
 801ab0a:	2801      	cmp	r0, #1
 801ab0c:	f63f af60 	bhi.w	801a9d0 <MobleStackGattBeaconGenerator+0x4c>
 801ab10:	4621      	mov	r1, r4
 801ab12:	2210      	movs	r2, #16
 801ab14:	a812      	add	r0, sp, #72	@ 0x48
 801ab16:	9411      	str	r4, [sp, #68]	@ 0x44
 801ab18:	f00c f85a 	bl	8026bd0 <memset>
 801ab1c:	4b0f      	ldr	r3, [pc, #60]	@ (801ab5c <MobleStackGattBeaconGenerator+0x1d8>)
 801ab1e:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 801ab22:	685b      	ldr	r3, [r3, #4]
 801ab24:	a80d      	add	r0, sp, #52	@ 0x34
 801ab26:	695b      	ldr	r3, [r3, #20]
 801ab28:	4798      	blx	r3
 801ab2a:	f10d 0446 	add.w	r4, sp, #70	@ 0x46
 801ab2e:	ab0d      	add	r3, sp, #52	@ 0x34
 801ab30:	af11      	add	r7, sp, #68	@ 0x44
 801ab32:	461a      	mov	r2, r3
 801ab34:	ca03      	ldmia	r2!, {r0, r1}
 801ab36:	42ba      	cmp	r2, r7
 801ab38:	6020      	str	r0, [r4, #0]
 801ab3a:	6061      	str	r1, [r4, #4]
 801ab3c:	4613      	mov	r3, r2
 801ab3e:	f104 0408 	add.w	r4, r4, #8
 801ab42:	d1f6      	bne.n	801ab32 <MobleStackGattBeaconGenerator+0x1ae>
 801ab44:	2314      	movs	r3, #20
 801ab46:	e9cd 7300 	strd	r7, r3, [sp]
 801ab4a:	9804      	ldr	r0, [sp, #16]
 801ab4c:	e7ad      	b.n	801aaaa <MobleStackGattBeaconGenerator+0x126>
 801ab4e:	f04f 33ff 	mov.w	r3, #4294967295
 801ab52:	e73e      	b.n	801a9d2 <MobleStackGattBeaconGenerator+0x4e>
 801ab54:	2300      	movs	r3, #0
 801ab56:	e73c      	b.n	801a9d2 <MobleStackGattBeaconGenerator+0x4e>
 801ab58:	2000141c 	.word	0x2000141c
 801ab5c:	20000324 	.word	0x20000324
 801ab60:	20002514 	.word	0x20002514

0801ab64 <BnrgmProxyProtocol_DeInit>:
 801ab64:	4a05      	ldr	r2, [pc, #20]	@ (801ab7c <BnrgmProxyProtocol_DeInit+0x18>)
 801ab66:	2300      	movs	r3, #0
 801ab68:	7213      	strb	r3, [r2, #8]
 801ab6a:	f882 308e 	strb.w	r3, [r2, #142]	@ 0x8e
 801ab6e:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 801ab72:	b102      	cbz	r2, 801ab76 <BnrgmProxyProtocol_DeInit+0x12>
 801ab74:	7013      	strb	r3, [r2, #0]
 801ab76:	2000      	movs	r0, #0
 801ab78:	4770      	bx	lr
 801ab7a:	bf00      	nop
 801ab7c:	20000324 	.word	0x20000324

0801ab80 <BnrgmProxyProtocol_Init>:
 801ab80:	b510      	push	{r4, lr}
 801ab82:	4908      	ldr	r1, [pc, #32]	@ (801aba4 <BnrgmProxyProtocol_Init+0x24>)
 801ab84:	7a0b      	ldrb	r3, [r1, #8]
 801ab86:	b10b      	cbz	r3, 801ab8c <BnrgmProxyProtocol_Init+0xc>
 801ab88:	f7ff ffec 	bl	801ab64 <BnrgmProxyProtocol_DeInit>
 801ab8c:	4a06      	ldr	r2, [pc, #24]	@ (801aba8 <BnrgmProxyProtocol_Init+0x28>)
 801ab8e:	2400      	movs	r4, #0
 801ab90:	f881 408e 	strb.w	r4, [r1, #142]	@ 0x8e
 801ab94:	f102 0088 	add.w	r0, r2, #136	@ 0x88
 801ab98:	4904      	ldr	r1, [pc, #16]	@ (801abac <BnrgmProxyProtocol_Init+0x2c>)
 801ab9a:	f7fa f929 	bl	8014df0 <MoblePalTimerCreate>
 801ab9e:	4620      	mov	r0, r4
 801aba0:	bd10      	pop	{r4, pc}
 801aba2:	bf00      	nop
 801aba4:	20000324 	.word	0x20000324
 801aba8:	2000032c 	.word	0x2000032c
 801abac:	0801cacd 	.word	0x0801cacd

0801abb0 <BnrgmProxyProtocol_Notify>:
 801abb0:	b507      	push	{r0, r1, r2, lr}
 801abb2:	2301      	movs	r3, #1
 801abb4:	9300      	str	r3, [sp, #0]
 801abb6:	4602      	mov	r2, r0
 801abb8:	b2cb      	uxtb	r3, r1
 801abba:	4805      	ldr	r0, [pc, #20]	@ (801abd0 <BnrgmProxyProtocol_Notify+0x20>)
 801abbc:	4905      	ldr	r1, [pc, #20]	@ (801abd4 <BnrgmProxyProtocol_Notify+0x24>)
 801abbe:	f8b0 0340 	ldrh.w	r0, [r0, #832]	@ 0x340
 801abc2:	f8b1 108c 	ldrh.w	r1, [r1, #140]	@ 0x8c
 801abc6:	f7fd faf3 	bl	80181b0 <MoblePalBluetoothGattSendNotification>
 801abca:	b003      	add	sp, #12
 801abcc:	f85d fb04 	ldr.w	pc, [sp], #4
 801abd0:	2000141c 	.word	0x2000141c
 801abd4:	20000324 	.word	0x20000324

0801abd8 <BnrgmProxyProtocol_ResetSar>:
 801abd8:	b508      	push	{r3, lr}
 801abda:	4b05      	ldr	r3, [pc, #20]	@ (801abf0 <BnrgmProxyProtocol_ResetSar+0x18>)
 801abdc:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 801abe0:	2200      	movs	r2, #0
 801abe2:	721a      	strb	r2, [r3, #8]
 801abe4:	b108      	cbz	r0, 801abea <BnrgmProxyProtocol_ResetSar+0x12>
 801abe6:	f7fa f995 	bl	8014f14 <MoblePalTimerStop>
 801abea:	2000      	movs	r0, #0
 801abec:	bd08      	pop	{r3, pc}
 801abee:	bf00      	nop
 801abf0:	20000324 	.word	0x20000324

0801abf4 <BnrgmProxyProtocol_AddFragment>:
 801abf4:	b570      	push	{r4, r5, r6, lr}
 801abf6:	4d0a      	ldr	r5, [pc, #40]	@ (801ac20 <BnrgmProxyProtocol_AddFragment+0x2c>)
 801abf8:	7a2b      	ldrb	r3, [r5, #8]
 801abfa:	185a      	adds	r2, r3, r1
 801abfc:	2a80      	cmp	r2, #128	@ 0x80
 801abfe:	460c      	mov	r4, r1
 801ac00:	dd03      	ble.n	801ac0a <BnrgmProxyProtocol_AddFragment+0x16>
 801ac02:	f7ff ffe9 	bl	801abd8 <BnrgmProxyProtocol_ResetSar>
 801ac06:	7a28      	ldrb	r0, [r5, #8]
 801ac08:	bd70      	pop	{r4, r5, r6, pc}
 801ac0a:	f105 060a 	add.w	r6, r5, #10
 801ac0e:	460a      	mov	r2, r1
 801ac10:	4601      	mov	r1, r0
 801ac12:	18f0      	adds	r0, r6, r3
 801ac14:	f00b ffc2 	bl	8026b9c <memmove>
 801ac18:	7a2b      	ldrb	r3, [r5, #8]
 801ac1a:	441c      	add	r4, r3
 801ac1c:	722c      	strb	r4, [r5, #8]
 801ac1e:	e7f2      	b.n	801ac06 <BnrgmProxyProtocol_AddFragment+0x12>
 801ac20:	20000324 	.word	0x20000324

0801ac24 <BnrgmProxyConfig_ResetFilter>:
 801ac24:	4b07      	ldr	r3, [pc, #28]	@ (801ac44 <BnrgmProxyConfig_ResetFilter+0x20>)
 801ac26:	2000      	movs	r0, #0
 801ac28:	f883 09ec 	strb.w	r0, [r3, #2540]	@ 0x9ec
 801ac2c:	f883 09ee 	strb.w	r0, [r3, #2542]	@ 0x9ee
 801ac30:	f883 09f2 	strb.w	r0, [r3, #2546]	@ 0x9f2
 801ac34:	f883 09f6 	strb.w	r0, [r3, #2550]	@ 0x9f6
 801ac38:	f883 09fa 	strb.w	r0, [r3, #2554]	@ 0x9fa
 801ac3c:	f883 09fe 	strb.w	r0, [r3, #2558]	@ 0x9fe
 801ac40:	4770      	bx	lr
 801ac42:	bf00      	nop
 801ac44:	20002514 	.word	0x20002514

0801ac48 <BnrgmProxyConfig_AddProxyClient_Filter>:
 801ac48:	b570      	push	{r4, r5, r6, lr}
 801ac4a:	b300      	cbz	r0, 801ac8e <BnrgmProxyConfig_AddProxyClient_Filter+0x46>
 801ac4c:	4b12      	ldr	r3, [pc, #72]	@ (801ac98 <BnrgmProxyConfig_AddProxyClient_Filter+0x50>)
 801ac4e:	f893 29ec 	ldrb.w	r2, [r3, #2540]	@ 0x9ec
 801ac52:	b9f2      	cbnz	r2, 801ac92 <BnrgmProxyConfig_AddProxyClient_Filter+0x4a>
 801ac54:	f603 14ec 	addw	r4, r3, #2540	@ 0x9ec
 801ac58:	4611      	mov	r1, r2
 801ac5a:	f04f 35ff 	mov.w	r5, #4294967295
 801ac5e:	78a6      	ldrb	r6, [r4, #2]
 801ac60:	2e01      	cmp	r6, #1
 801ac62:	d104      	bne.n	801ac6e <BnrgmProxyConfig_AddProxyClient_Filter+0x26>
 801ac64:	88a6      	ldrh	r6, [r4, #4]
 801ac66:	4286      	cmp	r6, r0
 801ac68:	d102      	bne.n	801ac70 <BnrgmProxyConfig_AddProxyClient_Filter+0x28>
 801ac6a:	4610      	mov	r0, r2
 801ac6c:	bd70      	pop	{r4, r5, r6, pc}
 801ac6e:	b24d      	sxtb	r5, r1
 801ac70:	3101      	adds	r1, #1
 801ac72:	2905      	cmp	r1, #5
 801ac74:	f104 0404 	add.w	r4, r4, #4
 801ac78:	d1f1      	bne.n	801ac5e <BnrgmProxyConfig_AddProxyClient_Filter+0x16>
 801ac7a:	1c69      	adds	r1, r5, #1
 801ac7c:	d0f5      	beq.n	801ac6a <BnrgmProxyConfig_AddProxyClient_Filter+0x22>
 801ac7e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801ac82:	2101      	movs	r1, #1
 801ac84:	f883 19ee 	strb.w	r1, [r3, #2542]	@ 0x9ee
 801ac88:	f8a3 09f0 	strh.w	r0, [r3, #2544]	@ 0x9f0
 801ac8c:	e7ed      	b.n	801ac6a <BnrgmProxyConfig_AddProxyClient_Filter+0x22>
 801ac8e:	2202      	movs	r2, #2
 801ac90:	e7eb      	b.n	801ac6a <BnrgmProxyConfig_AddProxyClient_Filter+0x22>
 801ac92:	2201      	movs	r2, #1
 801ac94:	e7e9      	b.n	801ac6a <BnrgmProxyConfig_AddProxyClient_Filter+0x22>
 801ac96:	bf00      	nop
 801ac98:	20002514 	.word	0x20002514

0801ac9c <BnrgmProxyConfig_CheckProxyFilter>:
 801ac9c:	b510      	push	{r4, lr}
 801ac9e:	4a0d      	ldr	r2, [pc, #52]	@ (801acd4 <BnrgmProxyConfig_CheckProxyFilter+0x38>)
 801aca0:	2100      	movs	r1, #0
 801aca2:	7893      	ldrb	r3, [r2, #2]
 801aca4:	2b01      	cmp	r3, #1
 801aca6:	d102      	bne.n	801acae <BnrgmProxyConfig_CheckProxyFilter+0x12>
 801aca8:	8894      	ldrh	r4, [r2, #4]
 801acaa:	4284      	cmp	r4, r0
 801acac:	d005      	beq.n	801acba <BnrgmProxyConfig_CheckProxyFilter+0x1e>
 801acae:	3101      	adds	r1, #1
 801acb0:	2905      	cmp	r1, #5
 801acb2:	f102 0204 	add.w	r2, r2, #4
 801acb6:	d1f4      	bne.n	801aca2 <BnrgmProxyConfig_CheckProxyFilter+0x6>
 801acb8:	2300      	movs	r3, #0
 801acba:	4a07      	ldr	r2, [pc, #28]	@ (801acd8 <BnrgmProxyConfig_CheckProxyFilter+0x3c>)
 801acbc:	f892 29ec 	ldrb.w	r2, [r2, #2540]	@ 0x9ec
 801acc0:	b12a      	cbz	r2, 801acce <BnrgmProxyConfig_CheckProxyFilter+0x32>
 801acc2:	2a01      	cmp	r2, #1
 801acc4:	bf06      	itte	eq
 801acc6:	f1c3 0301 	rsbeq	r3, r3, #1
 801acca:	b2db      	uxtbeq	r3, r3
 801accc:	2300      	movne	r3, #0
 801acce:	4618      	mov	r0, r3
 801acd0:	bd10      	pop	{r4, pc}
 801acd2:	bf00      	nop
 801acd4:	20002f00 	.word	0x20002f00
 801acd8:	20002514 	.word	0x20002514

0801acdc <BnrgmProxyProtocol_SendData>:
 801acdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ace0:	461d      	mov	r5, r3
 801ace2:	4b21      	ldr	r3, [pc, #132]	@ (801ad68 <BnrgmProxyProtocol_SendData+0x8c>)
 801ace4:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 801ace8:	4604      	mov	r4, r0
 801acea:	b086      	sub	sp, #24
 801acec:	4608      	mov	r0, r1
 801acee:	4617      	mov	r7, r2
 801acf0:	b3bb      	cbz	r3, 801ad62 <BnrgmProxyProtocol_SendData+0x86>
 801acf2:	f014 043f 	ands.w	r4, r4, #63	@ 0x3f
 801acf6:	d131      	bne.n	801ad5c <BnrgmProxyProtocol_SendData+0x80>
 801acf8:	f7ff ffd0 	bl	801ac9c <BnrgmProxyConfig_CheckProxyFilter>
 801acfc:	b388      	cbz	r0, 801ad62 <BnrgmProxyProtocol_SendData+0x86>
 801acfe:	4620      	mov	r0, r4
 801ad00:	463e      	mov	r6, r7
 801ad02:	f044 0980 	orr.w	r9, r4, #128	@ 0x80
 801ad06:	f044 0a40 	orr.w	sl, r4, #64	@ 0x40
 801ad0a:	e01a      	b.n	801ad42 <BnrgmProxyProtocol_SendData+0x66>
 801ad0c:	2d13      	cmp	r5, #19
 801ad0e:	46a8      	mov	r8, r5
 801ad10:	bf28      	it	cs
 801ad12:	f04f 0813 	movcs.w	r8, #19
 801ad16:	2d13      	cmp	r5, #19
 801ad18:	d818      	bhi.n	801ad4c <BnrgmProxyProtocol_SendData+0x70>
 801ad1a:	42b7      	cmp	r7, r6
 801ad1c:	d01c      	beq.n	801ad58 <BnrgmProxyProtocol_SendData+0x7c>
 801ad1e:	f044 03c0 	orr.w	r3, r4, #192	@ 0xc0
 801ad22:	4631      	mov	r1, r6
 801ad24:	4642      	mov	r2, r8
 801ad26:	f10d 0005 	add.w	r0, sp, #5
 801ad2a:	f88d 3004 	strb.w	r3, [sp, #4]
 801ad2e:	f00c f800 	bl	8026d32 <memcpy>
 801ad32:	f108 0101 	add.w	r1, r8, #1
 801ad36:	a801      	add	r0, sp, #4
 801ad38:	f7ff ff3a 	bl	801abb0 <BnrgmProxyProtocol_Notify>
 801ad3c:	4446      	add	r6, r8
 801ad3e:	eba5 0508 	sub.w	r5, r5, r8
 801ad42:	2d00      	cmp	r5, #0
 801ad44:	d1e2      	bne.n	801ad0c <BnrgmProxyProtocol_SendData+0x30>
 801ad46:	b006      	add	sp, #24
 801ad48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad4c:	42b7      	cmp	r7, r6
 801ad4e:	bf0c      	ite	eq
 801ad50:	fa5f f38a 	uxtbeq.w	r3, sl
 801ad54:	464b      	movne	r3, r9
 801ad56:	e7e4      	b.n	801ad22 <BnrgmProxyProtocol_SendData+0x46>
 801ad58:	4623      	mov	r3, r4
 801ad5a:	e7e2      	b.n	801ad22 <BnrgmProxyProtocol_SendData+0x46>
 801ad5c:	4616      	mov	r6, r2
 801ad5e:	2000      	movs	r0, #0
 801ad60:	e7cf      	b.n	801ad02 <BnrgmProxyProtocol_SendData+0x26>
 801ad62:	2001      	movs	r0, #1
 801ad64:	e7ef      	b.n	801ad46 <BnrgmProxyProtocol_SendData+0x6a>
 801ad66:	bf00      	nop
 801ad68:	20000324 	.word	0x20000324

0801ad6c <BnrgmStackSendBeaconOverGatt>:
 801ad6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad70:	2500      	movs	r5, #0
 801ad72:	b08e      	sub	sp, #56	@ 0x38
 801ad74:	221b      	movs	r2, #27
 801ad76:	4629      	mov	r1, r5
 801ad78:	a807      	add	r0, sp, #28
 801ad7a:	9506      	str	r5, [sp, #24]
 801ad7c:	f00b ff28 	bl	8026bd0 <memset>
 801ad80:	231f      	movs	r3, #31
 801ad82:	9305      	str	r3, [sp, #20]
 801ad84:	4b27      	ldr	r3, [pc, #156]	@ (801ae24 <BnrgmStackSendBeaconOverGatt+0xb8>)
 801ad86:	4e28      	ldr	r6, [pc, #160]	@ (801ae28 <BnrgmStackSendBeaconOverGatt+0xbc>)
 801ad88:	f8d3 27e4 	ldr.w	r2, [r3, #2020]	@ 0x7e4
 801ad8c:	f893 761c 	ldrb.w	r7, [r3, #1564]	@ 0x61c
 801ad90:	8811      	ldrh	r1, [r2, #0]
 801ad92:	f896 4a02 	ldrb.w	r4, [r6, #2562]	@ 0xa02
 801ad96:	f641 0228 	movw	r2, #6184	@ 0x1828
 801ad9a:	4291      	cmp	r1, r2
 801ad9c:	d13f      	bne.n	801ae1e <BnrgmStackSendBeaconOverGatt+0xb2>
 801ad9e:	4a23      	ldr	r2, [pc, #140]	@ (801ae2c <BnrgmStackSendBeaconOverGatt+0xc0>)
 801ada0:	f893 165c 	ldrb.w	r1, [r3, #1628]	@ 0x65c
 801ada4:	f8d3 8658 	ldr.w	r8, [r3, #1624]	@ 0x658
 801ada8:	4422      	add	r2, r4
 801adaa:	1b49      	subs	r1, r1, r5
 801adac:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 801adb0:	bf18      	it	ne
 801adb2:	2101      	movne	r1, #1
 801adb4:	2a02      	cmp	r2, #2
 801adb6:	bf0c      	ite	eq
 801adb8:	2201      	moveq	r2, #1
 801adba:	462a      	movne	r2, r5
 801adbc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801adc0:	9203      	str	r2, [sp, #12]
 801adc2:	4621      	mov	r1, r4
 801adc4:	d123      	bne.n	801ae0e <BnrgmStackSendBeaconOverGatt+0xa2>
 801adc6:	2001      	movs	r0, #1
 801adc8:	f7fb fc40 	bl	801664c <MoblePalCryptoGetNetworkSecurityKeys>
 801adcc:	2301      	movs	r3, #1
 801adce:	e9cd 8300 	strd	r8, r3, [sp]
 801add2:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801add6:	9a03      	ldr	r2, [sp, #12]
 801add8:	a905      	add	r1, sp, #20
 801adda:	a806      	add	r0, sp, #24
 801addc:	f7ff fd6e 	bl	801a8bc <MobleBeaconSetSecure>
 801ade0:	4605      	mov	r5, r0
 801ade2:	42bc      	cmp	r4, r7
 801ade4:	bf3a      	itte	cc
 801ade6:	3401      	addcc	r4, #1
 801ade8:	b2e4      	uxtbcc	r4, r4
 801adea:	2400      	movcs	r4, #0
 801adec:	2d01      	cmp	r5, #1
 801adee:	f886 4a02 	strb.w	r4, [r6, #2562]	@ 0xa02
 801adf2:	d808      	bhi.n	801ae06 <BnrgmStackSendBeaconOverGatt+0x9a>
 801adf4:	9b05      	ldr	r3, [sp, #20]
 801adf6:	3b02      	subs	r3, #2
 801adf8:	b2db      	uxtb	r3, r3
 801adfa:	f10d 021a 	add.w	r2, sp, #26
 801adfe:	2100      	movs	r1, #0
 801ae00:	2001      	movs	r0, #1
 801ae02:	f7ff ff6b 	bl	801acdc <BnrgmProxyProtocol_SendData>
 801ae06:	4628      	mov	r0, r5
 801ae08:	b00e      	add	sp, #56	@ 0x38
 801ae0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae0e:	4628      	mov	r0, r5
 801ae10:	f7fb fc1c 	bl	801664c <MoblePalCryptoGetNetworkSecurityKeys>
 801ae14:	e9cd 8500 	strd	r8, r5, [sp]
 801ae18:	f100 0328 	add.w	r3, r0, #40	@ 0x28
 801ae1c:	e7db      	b.n	801add6 <BnrgmStackSendBeaconOverGatt+0x6a>
 801ae1e:	2502      	movs	r5, #2
 801ae20:	e7df      	b.n	801ade2 <BnrgmStackSendBeaconOverGatt+0x76>
 801ae22:	bf00      	nop
 801ae24:	2000141c 	.word	0x2000141c
 801ae28:	20002514 	.word	0x20002514
 801ae2c:	20000324 	.word	0x20000324

0801ae30 <BnrgmProxyConfig_SendFilterStatus>:
 801ae30:	b500      	push	{lr}
 801ae32:	2300      	movs	r3, #0
 801ae34:	4a25      	ldr	r2, [pc, #148]	@ (801aecc <BnrgmProxyConfig_SendFilterStatus+0x9c>)
 801ae36:	b097      	sub	sp, #92	@ 0x5c
 801ae38:	4619      	mov	r1, r3
 801ae3a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 801ae3e:	3301      	adds	r3, #1
 801ae40:	7880      	ldrb	r0, [r0, #2]
 801ae42:	2801      	cmp	r0, #1
 801ae44:	bf04      	itt	eq
 801ae46:	3101      	addeq	r1, #1
 801ae48:	b289      	uxtheq	r1, r1
 801ae4a:	2b05      	cmp	r3, #5
 801ae4c:	d1f5      	bne.n	801ae3a <BnrgmProxyConfig_SendFilterStatus+0xa>
 801ae4e:	2303      	movs	r3, #3
 801ae50:	f88d 300c 	strb.w	r3, [sp, #12]
 801ae54:	4b1e      	ldr	r3, [pc, #120]	@ (801aed0 <BnrgmProxyConfig_SendFilterStatus+0xa0>)
 801ae56:	2202      	movs	r2, #2
 801ae58:	f893 39ec 	ldrb.w	r3, [r3, #2540]	@ 0x9ec
 801ae5c:	f88d 300d 	strb.w	r3, [sp, #13]
 801ae60:	f10d 000e 	add.w	r0, sp, #14
 801ae64:	f7fd fb1b 	bl	801849e <MobleOutputStreamPutBigEndian>
 801ae68:	2228      	movs	r2, #40	@ 0x28
 801ae6a:	2100      	movs	r1, #0
 801ae6c:	a80c      	add	r0, sp, #48	@ 0x30
 801ae6e:	f00b feaf 	bl	8026bd0 <memset>
 801ae72:	2301      	movs	r3, #1
 801ae74:	f88d 303e 	strb.w	r3, [sp, #62]	@ 0x3e
 801ae78:	f7ff fa5c 	bl	801a334 <BLEMesh_GetAddress>
 801ae7c:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 801ae80:	f7ff fb76 	bl	801a570 <BnrgmStackConsumeSeqNo>
 801ae84:	2380      	movs	r3, #128	@ 0x80
 801ae86:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 801ae8a:	4b12      	ldr	r3, [pc, #72]	@ (801aed4 <BnrgmProxyConfig_SendFilterStatus+0xa4>)
 801ae8c:	9010      	str	r0, [sp, #64]	@ 0x40
 801ae8e:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 801ae92:	1e9a      	subs	r2, r3, #2
 801ae94:	4253      	negs	r3, r2
 801ae96:	4153      	adcs	r3, r2
 801ae98:	9300      	str	r3, [sp, #0]
 801ae9a:	aa03      	add	r2, sp, #12
 801ae9c:	2304      	movs	r3, #4
 801ae9e:	a904      	add	r1, sp, #16
 801aea0:	a80c      	add	r0, sp, #48	@ 0x30
 801aea2:	f7fd fb05 	bl	80184b0 <MoblePalCryptoEncryptNetwork>
 801aea6:	2801      	cmp	r0, #1
 801aea8:	d80b      	bhi.n	801aec2 <BnrgmProxyConfig_SendFilterStatus+0x92>
 801aeaa:	f89d 303e 	ldrb.w	r3, [sp, #62]	@ 0x3e
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	bf14      	ite	ne
 801aeb2:	2308      	movne	r3, #8
 801aeb4:	2304      	moveq	r3, #4
 801aeb6:	330d      	adds	r3, #13
 801aeb8:	aa04      	add	r2, sp, #16
 801aeba:	2100      	movs	r1, #0
 801aebc:	2002      	movs	r0, #2
 801aebe:	f7ff ff0d 	bl	801acdc <BnrgmProxyProtocol_SendData>
 801aec2:	2000      	movs	r0, #0
 801aec4:	b017      	add	sp, #92	@ 0x5c
 801aec6:	f85d fb04 	ldr.w	pc, [sp], #4
 801aeca:	bf00      	nop
 801aecc:	20002f00 	.word	0x20002f00
 801aed0:	20002514 	.word	0x20002514
 801aed4:	20000324 	.word	0x20000324

0801aed8 <BnrgmProxyConfig_ProcessData>:
 801aed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aedc:	b098      	sub	sp, #96	@ 0x60
 801aede:	4604      	mov	r4, r0
 801aee0:	460d      	mov	r5, r1
 801aee2:	224c      	movs	r2, #76	@ 0x4c
 801aee4:	2100      	movs	r1, #0
 801aee6:	a805      	add	r0, sp, #20
 801aee8:	f00b fe72 	bl	8026bd0 <memset>
 801aeec:	b934      	cbnz	r4, 801aefc <BnrgmProxyConfig_ProcessData+0x24>
 801aeee:	4b62      	ldr	r3, [pc, #392]	@ (801b078 <BnrgmProxyConfig_ProcessData+0x1a0>)
 801aef0:	4a62      	ldr	r2, [pc, #392]	@ (801b07c <BnrgmProxyConfig_ProcessData+0x1a4>)
 801aef2:	4863      	ldr	r0, [pc, #396]	@ (801b080 <BnrgmProxyConfig_ProcessData+0x1a8>)
 801aef4:	f240 1147 	movw	r1, #327	@ 0x147
 801aef8:	f00a fecc 	bl	8025c94 <__assert_func>
 801aefc:	f1a5 030e 	sub.w	r3, r5, #14
 801af00:	2b0f      	cmp	r3, #15
 801af02:	d903      	bls.n	801af0c <BnrgmProxyConfig_ProcessData+0x34>
 801af04:	2003      	movs	r0, #3
 801af06:	b018      	add	sp, #96	@ 0x60
 801af08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af0c:	2380      	movs	r3, #128	@ 0x80
 801af0e:	a908      	add	r1, sp, #32
 801af10:	4620      	mov	r0, r4
 801af12:	9406      	str	r4, [sp, #24]
 801af14:	f88d 501c 	strb.w	r5, [sp, #28]
 801af18:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
 801af1c:	f7fb ffda 	bl	8016ed4 <MoblePalCryptoParseNetHdr>
 801af20:	f89d 1021 	ldrb.w	r1, [sp, #33]	@ 0x21
 801af24:	f10d 002e 	add.w	r0, sp, #46	@ 0x2e
 801af28:	f7fc fb22 	bl	8017570 <BnrgmPalCryptoMatchNid>
 801af2c:	b108      	cbz	r0, 801af32 <BnrgmProxyConfig_ProcessData+0x5a>
 801af2e:	2002      	movs	r0, #2
 801af30:	e7e9      	b.n	801af06 <BnrgmProxyConfig_ProcessData+0x2e>
 801af32:	a901      	add	r1, sp, #4
 801af34:	a805      	add	r0, sp, #20
 801af36:	f7fd fd49 	bl	80189cc <BnrgmPalCryptoDecryptNetwork>
 801af3a:	2801      	cmp	r0, #1
 801af3c:	d8f7      	bhi.n	801af2e <BnrgmProxyConfig_ProcessData+0x56>
 801af3e:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 801af42:	2b00      	cmp	r3, #0
 801af44:	d0f3      	beq.n	801af2e <BnrgmProxyConfig_ProcessData+0x56>
 801af46:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d1ef      	bne.n	801af2e <BnrgmProxyConfig_ProcessData+0x56>
 801af4e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 801af52:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801af56:	2a00      	cmp	r2, #0
 801af58:	dde9      	ble.n	801af2e <BnrgmProxyConfig_ProcessData+0x56>
 801af5a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801af5e:	2a00      	cmp	r2, #0
 801af60:	d1e5      	bne.n	801af2e <BnrgmProxyConfig_ProcessData+0x56>
 801af62:	4e48      	ldr	r6, [pc, #288]	@ (801b084 <BnrgmProxyConfig_ProcessData+0x1ac>)
 801af64:	f8a6 36f6 	strh.w	r3, [r6, #1782]	@ 0x6f6
 801af68:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801af6c:	3b12      	subs	r3, #18
 801af6e:	b2dc      	uxtb	r4, r3
 801af70:	2201      	movs	r2, #1
 801af72:	2c0f      	cmp	r4, #15
 801af74:	f886 26f4 	strb.w	r2, [r6, #1780]	@ 0x6f4
 801af78:	d8c4      	bhi.n	801af04 <BnrgmProxyConfig_ProcessData+0x2c>
 801af7a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801af7e:	2802      	cmp	r0, #2
 801af80:	d8d5      	bhi.n	801af2e <BnrgmProxyConfig_ProcessData+0x56>
 801af82:	2c00      	cmp	r4, #0
 801af84:	d0d3      	beq.n	801af2e <BnrgmProxyConfig_ProcessData+0x56>
 801af86:	4290      	cmp	r0, r2
 801af88:	d00a      	beq.n	801afa0 <BnrgmProxyConfig_ProcessData+0xc8>
 801af8a:	2802      	cmp	r0, #2
 801af8c:	d043      	beq.n	801b016 <BnrgmProxyConfig_ProcessData+0x13e>
 801af8e:	f7ff fe49 	bl	801ac24 <BnrgmProxyConfig_ResetFilter>
 801af92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801af96:	f886 39ec 	strb.w	r3, [r6, #2540]	@ 0x9ec
 801af9a:	f7ff ff49 	bl	801ae30 <BnrgmProxyConfig_SendFilterStatus>
 801af9e:	e7b2      	b.n	801af06 <BnrgmProxyConfig_ProcessData+0x2e>
 801afa0:	2c01      	cmp	r4, #1
 801afa2:	d0c4      	beq.n	801af2e <BnrgmProxyConfig_ProcessData+0x56>
 801afa4:	f014 0501 	ands.w	r5, r4, #1
 801afa8:	d1c1      	bne.n	801af2e <BnrgmProxyConfig_ProcessData+0x56>
 801afaa:	0864      	lsrs	r4, r4, #1
 801afac:	f10d 0705 	add.w	r7, sp, #5
 801afb0:	466a      	mov	r2, sp
 801afb2:	2102      	movs	r1, #2
 801afb4:	4638      	mov	r0, r7
 801afb6:	f7fd fa4b 	bl	8018450 <MobleInputStreamGetBigEndian>
 801afba:	f8bd c000 	ldrh.w	ip, [sp]
 801afbe:	f1bc 0f00 	cmp.w	ip, #0
 801afc2:	d0ea      	beq.n	801af9a <BnrgmProxyConfig_ProcessData+0xc2>
 801afc4:	2200      	movs	r2, #0
 801afc6:	4830      	ldr	r0, [pc, #192]	@ (801b088 <BnrgmProxyConfig_ProcessData+0x1b0>)
 801afc8:	4611      	mov	r1, r2
 801afca:	f04f 33ff 	mov.w	r3, #4294967295
 801afce:	f890 8002 	ldrb.w	r8, [r0, #2]
 801afd2:	f1b8 0f01 	cmp.w	r8, #1
 801afd6:	fa4f fe81 	sxtb.w	lr, r1
 801afda:	d11a      	bne.n	801b012 <BnrgmProxyConfig_ProcessData+0x13a>
 801afdc:	f8b0 e004 	ldrh.w	lr, [r0, #4]
 801afe0:	45e6      	cmp	lr, ip
 801afe2:	bf08      	it	eq
 801afe4:	2201      	moveq	r2, #1
 801afe6:	3101      	adds	r1, #1
 801afe8:	2905      	cmp	r1, #5
 801afea:	f100 0004 	add.w	r0, r0, #4
 801afee:	d1ee      	bne.n	801afce <BnrgmProxyConfig_ProcessData+0xf6>
 801aff0:	1c59      	adds	r1, r3, #1
 801aff2:	d0d2      	beq.n	801af9a <BnrgmProxyConfig_ProcessData+0xc2>
 801aff4:	b932      	cbnz	r2, 801b004 <BnrgmProxyConfig_ProcessData+0x12c>
 801aff6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801affa:	2201      	movs	r2, #1
 801affc:	f883 29ee 	strb.w	r2, [r3, #2542]	@ 0x9ee
 801b000:	f8a3 c9f0 	strh.w	ip, [r3, #2544]	@ 0x9f0
 801b004:	3501      	adds	r5, #1
 801b006:	b2eb      	uxtb	r3, r5
 801b008:	429c      	cmp	r4, r3
 801b00a:	f107 0702 	add.w	r7, r7, #2
 801b00e:	d8cf      	bhi.n	801afb0 <BnrgmProxyConfig_ProcessData+0xd8>
 801b010:	e7c3      	b.n	801af9a <BnrgmProxyConfig_ProcessData+0xc2>
 801b012:	4673      	mov	r3, lr
 801b014:	e7e7      	b.n	801afe6 <BnrgmProxyConfig_ProcessData+0x10e>
 801b016:	2c01      	cmp	r4, #1
 801b018:	f43f af75 	beq.w	801af06 <BnrgmProxyConfig_ProcessData+0x2e>
 801b01c:	f014 0501 	ands.w	r5, r4, #1
 801b020:	f47f af71 	bne.w	801af06 <BnrgmProxyConfig_ProcessData+0x2e>
 801b024:	0864      	lsrs	r4, r4, #1
 801b026:	f10d 0605 	add.w	r6, sp, #5
 801b02a:	462f      	mov	r7, r5
 801b02c:	466a      	mov	r2, sp
 801b02e:	2102      	movs	r1, #2
 801b030:	4630      	mov	r0, r6
 801b032:	f7fd fa0d 	bl	8018450 <MobleInputStreamGetBigEndian>
 801b036:	2300      	movs	r3, #0
 801b038:	f8bd 0000 	ldrh.w	r0, [sp]
 801b03c:	4a12      	ldr	r2, [pc, #72]	@ (801b088 <BnrgmProxyConfig_ProcessData+0x1b0>)
 801b03e:	4619      	mov	r1, r3
 801b040:	f892 c002 	ldrb.w	ip, [r2, #2]
 801b044:	f1bc 0f01 	cmp.w	ip, #1
 801b048:	d112      	bne.n	801b070 <BnrgmProxyConfig_ProcessData+0x198>
 801b04a:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 801b04e:	4584      	cmp	ip, r0
 801b050:	d100      	bne.n	801b054 <BnrgmProxyConfig_ProcessData+0x17c>
 801b052:	7097      	strb	r7, [r2, #2]
 801b054:	3101      	adds	r1, #1
 801b056:	2905      	cmp	r1, #5
 801b058:	f102 0204 	add.w	r2, r2, #4
 801b05c:	d1f0      	bne.n	801b040 <BnrgmProxyConfig_ProcessData+0x168>
 801b05e:	2b05      	cmp	r3, #5
 801b060:	d09b      	beq.n	801af9a <BnrgmProxyConfig_ProcessData+0xc2>
 801b062:	3501      	adds	r5, #1
 801b064:	b2eb      	uxtb	r3, r5
 801b066:	42a3      	cmp	r3, r4
 801b068:	f106 0602 	add.w	r6, r6, #2
 801b06c:	d3de      	bcc.n	801b02c <BnrgmProxyConfig_ProcessData+0x154>
 801b06e:	e794      	b.n	801af9a <BnrgmProxyConfig_ProcessData+0xc2>
 801b070:	3301      	adds	r3, #1
 801b072:	b2db      	uxtb	r3, r3
 801b074:	e7ee      	b.n	801b054 <BnrgmProxyConfig_ProcessData+0x17c>
 801b076:	bf00      	nop
 801b078:	0802e558 	.word	0x0802e558
 801b07c:	0802cdfc 	.word	0x0802cdfc
 801b080:	0802ea3d 	.word	0x0802ea3d
 801b084:	20002514 	.word	0x20002514
 801b088:	20002f00 	.word	0x20002f00

0801b08c <BnrgmFrndMgmtSubscriptionListAdd>:
 801b08c:	4b07      	ldr	r3, [pc, #28]	@ (801b0ac <BnrgmFrndMgmtSubscriptionListAdd+0x20>)
 801b08e:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 801b092:	2b02      	cmp	r3, #2
 801b094:	d007      	beq.n	801b0a6 <BnrgmFrndMgmtSubscriptionListAdd+0x1a>
 801b096:	4b06      	ldr	r3, [pc, #24]	@ (801b0b0 <BnrgmFrndMgmtSubscriptionListAdd+0x24>)
 801b098:	f8d3 3a04 	ldr.w	r3, [r3, #2564]	@ 0xa04
 801b09c:	2201      	movs	r2, #1
 801b09e:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
 801b0a2:	8318      	strh	r0, [r3, #24]
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	4618      	mov	r0, r3
 801b0a8:	4770      	bx	lr
 801b0aa:	bf00      	nop
 801b0ac:	20000324 	.word	0x20000324
 801b0b0:	20002514 	.word	0x20002514

0801b0b4 <MobleConfigModel_SubscriptionOverwrite>:
 801b0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0b6:	b930      	cbnz	r0, 801b0c6 <MobleConfigModel_SubscriptionOverwrite+0x12>
 801b0b8:	4b2d      	ldr	r3, [pc, #180]	@ (801b170 <MobleConfigModel_SubscriptionOverwrite+0xbc>)
 801b0ba:	4a2e      	ldr	r2, [pc, #184]	@ (801b174 <MobleConfigModel_SubscriptionOverwrite+0xc0>)
 801b0bc:	482e      	ldr	r0, [pc, #184]	@ (801b178 <MobleConfigModel_SubscriptionOverwrite+0xc4>)
 801b0be:	f240 61be 	movw	r1, #1726	@ 0x6be
 801b0c2:	f00a fde7 	bl	8025c94 <__assert_func>
 801b0c6:	6804      	ldr	r4, [r0, #0]
 801b0c8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801b0ca:	f894 c01c 	ldrb.w	ip, [r4, #28]
 801b0ce:	8805      	ldrh	r5, [r0, #0]
 801b0d0:	4295      	cmp	r5, r2
 801b0d2:	d101      	bne.n	801b0d8 <MobleConfigModel_SubscriptionOverwrite+0x24>
 801b0d4:	2902      	cmp	r1, #2
 801b0d6:	d02a      	beq.n	801b12e <MobleConfigModel_SubscriptionOverwrite+0x7a>
 801b0d8:	2500      	movs	r5, #0
 801b0da:	f104 0720 	add.w	r7, r4, #32
 801b0de:	4628      	mov	r0, r5
 801b0e0:	b2ee      	uxtb	r6, r5
 801b0e2:	45b4      	cmp	ip, r6
 801b0e4:	d931      	bls.n	801b14a <MobleConfigModel_SubscriptionOverwrite+0x96>
 801b0e6:	f857 6f04 	ldr.w	r6, [r7, #4]!
 801b0ea:	f8b6 e000 	ldrh.w	lr, [r6]
 801b0ee:	4596      	cmp	lr, r2
 801b0f0:	f105 0501 	add.w	r5, r5, #1
 801b0f4:	f04f 0001 	mov.w	r0, #1
 801b0f8:	d1f2      	bne.n	801b0e0 <MobleConfigModel_SubscriptionOverwrite+0x2c>
 801b0fa:	2000      	movs	r0, #0
 801b0fc:	f106 0278 	add.w	r2, r6, #120	@ 0x78
 801b100:	2538      	movs	r5, #56	@ 0x38
 801b102:	fb05 f700 	mul.w	r7, r5, r0
 801b106:	59d7      	ldr	r7, [r2, r7]
 801b108:	428f      	cmp	r7, r1
 801b10a:	d12c      	bne.n	801b166 <MobleConfigModel_SubscriptionOverwrite+0xb2>
 801b10c:	f403 4140 	and.w	r1, r3, #49152	@ 0xc000
 801b110:	2200      	movs	r2, #0
 801b112:	460d      	mov	r5, r1
 801b114:	f5b1 4f40 	cmp.w	r1, #49152	@ 0xc000
 801b118:	d002      	beq.n	801b120 <MobleConfigModel_SubscriptionOverwrite+0x6c>
 801b11a:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 801b11e:	d11d      	bne.n	801b15c <MobleConfigModel_SubscriptionOverwrite+0xa8>
 801b120:	211c      	movs	r1, #28
 801b122:	fb01 2200 	mla	r2, r1, r0, r2
 801b126:	3240      	adds	r2, #64	@ 0x40
 801b128:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b12c:	e006      	b.n	801b13c <MobleConfigModel_SubscriptionOverwrite+0x88>
 801b12e:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 801b132:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 801b136:	d109      	bne.n	801b14c <MobleConfigModel_SubscriptionOverwrite+0x98>
 801b138:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 801b13c:	4618      	mov	r0, r3
 801b13e:	f7ff ffa5 	bl	801b08c <BnrgmFrndMgmtSubscriptionListAdd>
 801b142:	4620      	mov	r0, r4
 801b144:	f7fe ffe4 	bl	801a110 <MobleConfigNetworkSave>
 801b148:	2000      	movs	r0, #0
 801b14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b14c:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 801b150:	f5b2 4f40 	cmp.w	r2, #49152	@ 0xc000
 801b154:	d1f5      	bne.n	801b142 <MobleConfigModel_SubscriptionOverwrite+0x8e>
 801b156:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
 801b15a:	e7ef      	b.n	801b13c <MobleConfigModel_SubscriptionOverwrite+0x88>
 801b15c:	3201      	adds	r2, #1
 801b15e:	2a0a      	cmp	r2, #10
 801b160:	d1d8      	bne.n	801b114 <MobleConfigModel_SubscriptionOverwrite+0x60>
 801b162:	2001      	movs	r0, #1
 801b164:	e7f1      	b.n	801b14a <MobleConfigModel_SubscriptionOverwrite+0x96>
 801b166:	3001      	adds	r0, #1
 801b168:	280b      	cmp	r0, #11
 801b16a:	d1ca      	bne.n	801b102 <MobleConfigModel_SubscriptionOverwrite+0x4e>
 801b16c:	2002      	movs	r0, #2
 801b16e:	e7ec      	b.n	801b14a <MobleConfigModel_SubscriptionOverwrite+0x96>
 801b170:	0802ea81 	.word	0x0802ea81
 801b174:	0802ce19 	.word	0x0802ce19
 801b178:	0802e513 	.word	0x0802e513

0801b17c <MobleConfigModel_SubscriptionAdd>:
 801b17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b17e:	b930      	cbnz	r0, 801b18e <MobleConfigModel_SubscriptionAdd+0x12>
 801b180:	4b41      	ldr	r3, [pc, #260]	@ (801b288 <MobleConfigModel_SubscriptionAdd+0x10c>)
 801b182:	4a42      	ldr	r2, [pc, #264]	@ (801b28c <MobleConfigModel_SubscriptionAdd+0x110>)
 801b184:	4842      	ldr	r0, [pc, #264]	@ (801b290 <MobleConfigModel_SubscriptionAdd+0x114>)
 801b186:	f240 519f 	movw	r1, #1439	@ 0x59f
 801b18a:	f00a fd83 	bl	8025c94 <__assert_func>
 801b18e:	6805      	ldr	r5, [r0, #0]
 801b190:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 801b192:	f895 c01c 	ldrb.w	ip, [r5, #28]
 801b196:	8804      	ldrh	r4, [r0, #0]
 801b198:	4294      	cmp	r4, r2
 801b19a:	d101      	bne.n	801b1a0 <MobleConfigModel_SubscriptionAdd+0x24>
 801b19c:	2902      	cmp	r1, #2
 801b19e:	d02f      	beq.n	801b200 <MobleConfigModel_SubscriptionAdd+0x84>
 801b1a0:	2000      	movs	r0, #0
 801b1a2:	f105 0720 	add.w	r7, r5, #32
 801b1a6:	4604      	mov	r4, r0
 801b1a8:	b2c6      	uxtb	r6, r0
 801b1aa:	45b4      	cmp	ip, r6
 801b1ac:	d94a      	bls.n	801b244 <MobleConfigModel_SubscriptionAdd+0xc8>
 801b1ae:	f857 6f04 	ldr.w	r6, [r7, #4]!
 801b1b2:	f8b6 e000 	ldrh.w	lr, [r6]
 801b1b6:	4596      	cmp	lr, r2
 801b1b8:	f100 0001 	add.w	r0, r0, #1
 801b1bc:	f04f 0401 	mov.w	r4, #1
 801b1c0:	d1f2      	bne.n	801b1a8 <MobleConfigModel_SubscriptionAdd+0x2c>
 801b1c2:	2000      	movs	r0, #0
 801b1c4:	2438      	movs	r4, #56	@ 0x38
 801b1c6:	f106 0c78 	add.w	ip, r6, #120	@ 0x78
 801b1ca:	fb04 f200 	mul.w	r2, r4, r0
 801b1ce:	f85c 7002 	ldr.w	r7, [ip, r2]
 801b1d2:	428f      	cmp	r7, r1
 801b1d4:	d152      	bne.n	801b27c <MobleConfigModel_SubscriptionAdd+0x100>
 801b1d6:	f102 017e 	add.w	r1, r2, #126	@ 0x7e
 801b1da:	f403 4740 	and.w	r7, r3, #49152	@ 0xc000
 801b1de:	4431      	add	r1, r6
 801b1e0:	2200      	movs	r2, #0
 801b1e2:	46bc      	mov	ip, r7
 801b1e4:	f831 4f02 	ldrh.w	r4, [r1, #2]!
 801b1e8:	2c00      	cmp	r4, #0
 801b1ea:	d140      	bne.n	801b26e <MobleConfigModel_SubscriptionAdd+0xf2>
 801b1ec:	f5b7 4f40 	cmp.w	r7, #49152	@ 0xc000
 801b1f0:	d13a      	bne.n	801b268 <MobleConfigModel_SubscriptionAdd+0xec>
 801b1f2:	211c      	movs	r1, #28
 801b1f4:	fb01 2200 	mla	r2, r1, r0, r2
 801b1f8:	3240      	adds	r2, #64	@ 0x40
 801b1fa:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801b1fe:	e009      	b.n	801b214 <MobleConfigModel_SubscriptionAdd+0x98>
 801b200:	f8b0 6066 	ldrh.w	r6, [r0, #102]	@ 0x66
 801b204:	b976      	cbnz	r6, 801b224 <MobleConfigModel_SubscriptionAdd+0xa8>
 801b206:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 801b20a:	f5b2 4f40 	cmp.w	r2, #49152	@ 0xc000
 801b20e:	d109      	bne.n	801b224 <MobleConfigModel_SubscriptionAdd+0xa8>
 801b210:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
 801b214:	4618      	mov	r0, r3
 801b216:	f7ff ff39 	bl	801b08c <BnrgmFrndMgmtSubscriptionListAdd>
 801b21a:	4628      	mov	r0, r5
 801b21c:	f7fe ff78 	bl	801a110 <MobleConfigNetworkSave>
 801b220:	2400      	movs	r4, #0
 801b222:	e00f      	b.n	801b244 <MobleConfigModel_SubscriptionAdd+0xc8>
 801b224:	f8b0 4068 	ldrh.w	r4, [r0, #104]	@ 0x68
 801b228:	b974      	cbnz	r4, 801b248 <MobleConfigModel_SubscriptionAdd+0xcc>
 801b22a:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 801b22e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 801b232:	d109      	bne.n	801b248 <MobleConfigModel_SubscriptionAdd+0xcc>
 801b234:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 801b238:	4618      	mov	r0, r3
 801b23a:	f7ff ff27 	bl	801b08c <BnrgmFrndMgmtSubscriptionListAdd>
 801b23e:	4628      	mov	r0, r5
 801b240:	f7fe ff66 	bl	801a110 <MobleConfigNetworkSave>
 801b244:	4620      	mov	r0, r4
 801b246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b248:	429e      	cmp	r6, r3
 801b24a:	d104      	bne.n	801b256 <MobleConfigModel_SubscriptionAdd+0xda>
 801b24c:	f406 4640 	and.w	r6, r6, #49152	@ 0xc000
 801b250:	f5b6 4f40 	cmp.w	r6, #49152	@ 0xc000
 801b254:	d0e4      	beq.n	801b220 <MobleConfigModel_SubscriptionAdd+0xa4>
 801b256:	429c      	cmp	r4, r3
 801b258:	d10e      	bne.n	801b278 <MobleConfigModel_SubscriptionAdd+0xfc>
 801b25a:	f404 4440 	and.w	r4, r4, #49152	@ 0xc000
 801b25e:	f5b4 4400 	subs.w	r4, r4, #32768	@ 0x8000
 801b262:	bf18      	it	ne
 801b264:	2401      	movne	r4, #1
 801b266:	e7ed      	b.n	801b244 <MobleConfigModel_SubscriptionAdd+0xc8>
 801b268:	f5bc 4f00 	cmp.w	ip, #32768	@ 0x8000
 801b26c:	d0c1      	beq.n	801b1f2 <MobleConfigModel_SubscriptionAdd+0x76>
 801b26e:	429c      	cmp	r4, r3
 801b270:	d0d6      	beq.n	801b220 <MobleConfigModel_SubscriptionAdd+0xa4>
 801b272:	3201      	adds	r2, #1
 801b274:	2a0a      	cmp	r2, #10
 801b276:	d1b5      	bne.n	801b1e4 <MobleConfigModel_SubscriptionAdd+0x68>
 801b278:	2401      	movs	r4, #1
 801b27a:	e7e3      	b.n	801b244 <MobleConfigModel_SubscriptionAdd+0xc8>
 801b27c:	3001      	adds	r0, #1
 801b27e:	280b      	cmp	r0, #11
 801b280:	d1a3      	bne.n	801b1ca <MobleConfigModel_SubscriptionAdd+0x4e>
 801b282:	2402      	movs	r4, #2
 801b284:	e7de      	b.n	801b244 <MobleConfigModel_SubscriptionAdd+0xc8>
 801b286:	bf00      	nop
 801b288:	0802ea81 	.word	0x0802ea81
 801b28c:	0802ce40 	.word	0x0802ce40
 801b290:	0802e513 	.word	0x0802e513

0801b294 <BnrgmFrndMgmtSubscriptionListRemove>:
 801b294:	4b08      	ldr	r3, [pc, #32]	@ (801b2b8 <BnrgmFrndMgmtSubscriptionListRemove+0x24>)
 801b296:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 801b29a:	2b01      	cmp	r3, #1
 801b29c:	bf04      	itt	eq
 801b29e:	4a07      	ldreq	r2, [pc, #28]	@ (801b2bc <BnrgmFrndMgmtSubscriptionListRemove+0x28>)
 801b2a0:	f8d2 2a04 	ldreq.w	r2, [r2, #2564]	@ 0xa04
 801b2a4:	f04f 0302 	mov.w	r3, #2
 801b2a8:	bf03      	ittte	eq
 801b2aa:	8310      	strheq	r0, [r2, #24]
 801b2ac:	f882 306a 	strbeq.w	r3, [r2, #106]	@ 0x6a
 801b2b0:	2000      	moveq	r0, #0
 801b2b2:	4618      	movne	r0, r3
 801b2b4:	4770      	bx	lr
 801b2b6:	bf00      	nop
 801b2b8:	20000324 	.word	0x20000324
 801b2bc:	20002514 	.word	0x20002514

0801b2c0 <MobleConfigModel_SubscriptionDelete>:
 801b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2c2:	b930      	cbnz	r0, 801b2d2 <MobleConfigModel_SubscriptionDelete+0x12>
 801b2c4:	4b39      	ldr	r3, [pc, #228]	@ (801b3ac <MobleConfigModel_SubscriptionDelete+0xec>)
 801b2c6:	4a3a      	ldr	r2, [pc, #232]	@ (801b3b0 <MobleConfigModel_SubscriptionDelete+0xf0>)
 801b2c8:	483a      	ldr	r0, [pc, #232]	@ (801b3b4 <MobleConfigModel_SubscriptionDelete+0xf4>)
 801b2ca:	f44f 61c3 	mov.w	r1, #1560	@ 0x618
 801b2ce:	f00a fce1 	bl	8025c94 <__assert_func>
 801b2d2:	6805      	ldr	r5, [r0, #0]
 801b2d4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 801b2d6:	f895 c01c 	ldrb.w	ip, [r5, #28]
 801b2da:	8804      	ldrh	r4, [r0, #0]
 801b2dc:	4294      	cmp	r4, r2
 801b2de:	d139      	bne.n	801b354 <MobleConfigModel_SubscriptionDelete+0x94>
 801b2e0:	2902      	cmp	r1, #2
 801b2e2:	d137      	bne.n	801b354 <MobleConfigModel_SubscriptionDelete+0x94>
 801b2e4:	f8b0 4066 	ldrh.w	r4, [r0, #102]	@ 0x66
 801b2e8:	429c      	cmp	r4, r3
 801b2ea:	d110      	bne.n	801b30e <MobleConfigModel_SubscriptionDelete+0x4e>
 801b2ec:	f404 4240 	and.w	r2, r4, #49152	@ 0xc000
 801b2f0:	f5b2 4f40 	cmp.w	r2, #49152	@ 0xc000
 801b2f4:	d10b      	bne.n	801b30e <MobleConfigModel_SubscriptionDelete+0x4e>
 801b2f6:	2600      	movs	r6, #0
 801b2f8:	f8a0 6066 	strh.w	r6, [r0, #102]	@ 0x66
 801b2fc:	4620      	mov	r0, r4
 801b2fe:	f7ff ffc9 	bl	801b294 <BnrgmFrndMgmtSubscriptionListRemove>
 801b302:	4628      	mov	r0, r5
 801b304:	f7fe ff04 	bl	801a110 <MobleConfigNetworkSave>
 801b308:	4634      	mov	r4, r6
 801b30a:	4620      	mov	r0, r4
 801b30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b30e:	f8b0 2068 	ldrh.w	r2, [r0, #104]	@ 0x68
 801b312:	429a      	cmp	r2, r3
 801b314:	d10e      	bne.n	801b334 <MobleConfigModel_SubscriptionDelete+0x74>
 801b316:	f403 4140 	and.w	r1, r3, #49152	@ 0xc000
 801b31a:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801b31e:	d109      	bne.n	801b334 <MobleConfigModel_SubscriptionDelete+0x74>
 801b320:	2400      	movs	r4, #0
 801b322:	f8a0 4068 	strh.w	r4, [r0, #104]	@ 0x68
 801b326:	4618      	mov	r0, r3
 801b328:	f7ff ffb4 	bl	801b294 <BnrgmFrndMgmtSubscriptionListRemove>
 801b32c:	4628      	mov	r0, r5
 801b32e:	f7fe feef 	bl	801a110 <MobleConfigNetworkSave>
 801b332:	e7ea      	b.n	801b30a <MobleConfigModel_SubscriptionDelete+0x4a>
 801b334:	2c00      	cmp	r4, #0
 801b336:	d0e8      	beq.n	801b30a <MobleConfigModel_SubscriptionDelete+0x4a>
 801b338:	1e14      	subs	r4, r2, #0
 801b33a:	bf18      	it	ne
 801b33c:	2401      	movne	r4, #1
 801b33e:	e7e4      	b.n	801b30a <MobleConfigModel_SubscriptionDelete+0x4a>
 801b340:	3201      	adds	r2, #1
 801b342:	2a0a      	cmp	r2, #10
 801b344:	d125      	bne.n	801b392 <MobleConfigModel_SubscriptionDelete+0xd2>
 801b346:	3c00      	subs	r4, #0
 801b348:	e7f7      	b.n	801b33a <MobleConfigModel_SubscriptionDelete+0x7a>
 801b34a:	3001      	adds	r0, #1
 801b34c:	280b      	cmp	r0, #11
 801b34e:	d116      	bne.n	801b37e <MobleConfigModel_SubscriptionDelete+0xbe>
 801b350:	2402      	movs	r4, #2
 801b352:	e7da      	b.n	801b30a <MobleConfigModel_SubscriptionDelete+0x4a>
 801b354:	2000      	movs	r0, #0
 801b356:	f105 0720 	add.w	r7, r5, #32
 801b35a:	4604      	mov	r4, r0
 801b35c:	b2c6      	uxtb	r6, r0
 801b35e:	45b4      	cmp	ip, r6
 801b360:	d9d3      	bls.n	801b30a <MobleConfigModel_SubscriptionDelete+0x4a>
 801b362:	f857 6f04 	ldr.w	r6, [r7, #4]!
 801b366:	f8b6 e000 	ldrh.w	lr, [r6]
 801b36a:	4596      	cmp	lr, r2
 801b36c:	f100 0001 	add.w	r0, r0, #1
 801b370:	f04f 0401 	mov.w	r4, #1
 801b374:	d1f2      	bne.n	801b35c <MobleConfigModel_SubscriptionDelete+0x9c>
 801b376:	2000      	movs	r0, #0
 801b378:	2438      	movs	r4, #56	@ 0x38
 801b37a:	f106 0c78 	add.w	ip, r6, #120	@ 0x78
 801b37e:	fb04 f200 	mul.w	r2, r4, r0
 801b382:	f85c 7002 	ldr.w	r7, [ip, r2]
 801b386:	428f      	cmp	r7, r1
 801b388:	d1df      	bne.n	801b34a <MobleConfigModel_SubscriptionDelete+0x8a>
 801b38a:	f102 017e 	add.w	r1, r2, #126	@ 0x7e
 801b38e:	4431      	add	r1, r6
 801b390:	2200      	movs	r2, #0
 801b392:	f831 4f02 	ldrh.w	r4, [r1, #2]!
 801b396:	429c      	cmp	r4, r3
 801b398:	d1d2      	bne.n	801b340 <MobleConfigModel_SubscriptionDelete+0x80>
 801b39a:	211c      	movs	r1, #28
 801b39c:	fb01 2200 	mla	r2, r1, r0, r2
 801b3a0:	3240      	adds	r2, #64	@ 0x40
 801b3a2:	2400      	movs	r4, #0
 801b3a4:	f826 4012 	strh.w	r4, [r6, r2, lsl #1]
 801b3a8:	e7bd      	b.n	801b326 <MobleConfigModel_SubscriptionDelete+0x66>
 801b3aa:	bf00      	nop
 801b3ac:	0802ea81 	.word	0x0802ea81
 801b3b0:	0802ce61 	.word	0x0802ce61
 801b3b4:	0802e513 	.word	0x0802e513

0801b3b8 <BnrgmFrndFnBreakFriendship>:
 801b3b8:	b570      	push	{r4, r5, r6, lr}
 801b3ba:	460c      	mov	r4, r1
 801b3bc:	2500      	movs	r5, #0
 801b3be:	f44f 764d 	mov.w	r6, #820	@ 0x334
 801b3c2:	78a3      	ldrb	r3, [r4, #2]
 801b3c4:	b2ea      	uxtb	r2, r5
 801b3c6:	4293      	cmp	r3, r2
 801b3c8:	d801      	bhi.n	801b3ce <BnrgmFrndFnBreakFriendship+0x16>
 801b3ca:	2000      	movs	r0, #0
 801b3cc:	bd70      	pop	{r4, r5, r6, pc}
 801b3ce:	fb06 4302 	mla	r3, r6, r2, r4
 801b3d2:	6998      	ldr	r0, [r3, #24]
 801b3d4:	b108      	cbz	r0, 801b3da <BnrgmFrndFnBreakFriendship+0x22>
 801b3d6:	f7f9 fdbd 	bl	8014f54 <MoblePalTimerDestroy>
 801b3da:	fb06 4002 	mla	r0, r6, r2, r4
 801b3de:	2100      	movs	r1, #0
 801b3e0:	f44f 724d 	mov.w	r2, #820	@ 0x334
 801b3e4:	3004      	adds	r0, #4
 801b3e6:	f00b fbf3 	bl	8026bd0 <memset>
 801b3ea:	3501      	adds	r5, #1
 801b3ec:	e7e9      	b.n	801b3c2 <BnrgmFrndFnBreakFriendship+0xa>

0801b3ee <BnrgmFrndFnGetLpnOffset>:
 801b3ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3f0:	4603      	mov	r3, r0
 801b3f2:	7886      	ldrb	r6, [r0, #2]
 801b3f4:	2200      	movs	r2, #0
 801b3f6:	f04f 30ff 	mov.w	r0, #4294967295
 801b3fa:	b2d4      	uxtb	r4, r2
 801b3fc:	42a6      	cmp	r6, r4
 801b3fe:	d800      	bhi.n	801b402 <BnrgmFrndFnGetLpnOffset+0x14>
 801b400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b402:	891d      	ldrh	r5, [r3, #8]
 801b404:	b14d      	cbz	r5, 801b41a <BnrgmFrndFnGetLpnOffset+0x2c>
 801b406:	f893 c333 	ldrb.w	ip, [r3, #819]	@ 0x333
 801b40a:	2400      	movs	r4, #0
 801b40c:	b2e7      	uxtb	r7, r4
 801b40e:	45bc      	cmp	ip, r7
 801b410:	d903      	bls.n	801b41a <BnrgmFrndFnGetLpnOffset+0x2c>
 801b412:	192f      	adds	r7, r5, r4
 801b414:	42b9      	cmp	r1, r7
 801b416:	d104      	bne.n	801b422 <BnrgmFrndFnGetLpnOffset+0x34>
 801b418:	b250      	sxtb	r0, r2
 801b41a:	3201      	adds	r2, #1
 801b41c:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 801b420:	e7eb      	b.n	801b3fa <BnrgmFrndFnGetLpnOffset+0xc>
 801b422:	3401      	adds	r4, #1
 801b424:	e7f2      	b.n	801b40c <BnrgmFrndFnGetLpnOffset+0x1e>

0801b426 <BnrgmFrndFnGetLpnPollTimeout>:
 801b426:	b510      	push	{r4, lr}
 801b428:	4604      	mov	r4, r0
 801b42a:	f7ff ffe0 	bl	801b3ee <BnrgmFrndFnGetLpnOffset>
 801b42e:	1c43      	adds	r3, r0, #1
 801b430:	d00c      	beq.n	801b44c <BnrgmFrndFnGetLpnPollTimeout+0x26>
 801b432:	f44f 734d 	mov.w	r3, #820	@ 0x334
 801b436:	fb03 4000 	mla	r0, r3, r0, r4
 801b43a:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 801b43e:	2b02      	cmp	r3, #2
 801b440:	d904      	bls.n	801b44c <BnrgmFrndFnGetLpnPollTimeout+0x26>
 801b442:	6900      	ldr	r0, [r0, #16]
 801b444:	2364      	movs	r3, #100	@ 0x64
 801b446:	fbb0 f0f3 	udiv	r0, r0, r3
 801b44a:	bd10      	pop	{r4, pc}
 801b44c:	2000      	movs	r0, #0
 801b44e:	e7fc      	b.n	801b44a <BnrgmFrndFnGetLpnPollTimeout+0x24>

0801b450 <BnrgmFrndMgmtGetLpnPollTimeout>:
 801b450:	4b02      	ldr	r3, [pc, #8]	@ (801b45c <BnrgmFrndMgmtGetLpnPollTimeout+0xc>)
 801b452:	4601      	mov	r1, r0
 801b454:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	@ 0xa04
 801b458:	f7ff bfe5 	b.w	801b426 <BnrgmFrndFnGetLpnPollTimeout>
 801b45c:	20002514 	.word	0x20002514

0801b460 <BnrgmFrndFnInsertFriendUpdate>:
 801b460:	b570      	push	{r4, r5, r6, lr}
 801b462:	4a1a      	ldr	r2, [pc, #104]	@ (801b4cc <BnrgmFrndFnInsertFriendUpdate+0x6c>)
 801b464:	f890 1068 	ldrb.w	r1, [r0, #104]	@ 0x68
 801b468:	4c19      	ldr	r4, [pc, #100]	@ (801b4d0 <BnrgmFrndFnInsertFriendUpdate+0x70>)
 801b46a:	440a      	add	r2, r1
 801b46c:	4603      	mov	r3, r0
 801b46e:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 801b472:	f890 032c 	ldrb.w	r0, [r0, #812]	@ 0x32c
 801b476:	1e91      	subs	r1, r2, #2
 801b478:	424a      	negs	r2, r1
 801b47a:	414a      	adcs	r2, r1
 801b47c:	f894 165c 	ldrb.w	r1, [r4, #1628]	@ 0x65c
 801b480:	2901      	cmp	r1, #1
 801b482:	bf08      	it	eq
 801b484:	f042 0202 	orreq.w	r2, r2, #2
 801b488:	2810      	cmp	r0, #16
 801b48a:	d81d      	bhi.n	801b4c8 <BnrgmFrndFnInsertFriendUpdate+0x68>
 801b48c:	f893 132d 	ldrb.w	r1, [r3, #813]	@ 0x32d
 801b490:	4408      	add	r0, r1
 801b492:	f000 000f 	and.w	r0, r0, #15
 801b496:	252c      	movs	r5, #44	@ 0x2c
 801b498:	fb05 3100 	mla	r1, r5, r0, r3
 801b49c:	2601      	movs	r6, #1
 801b49e:	f881 6096 	strb.w	r6, [r1, #150]	@ 0x96
 801b4a2:	4608      	mov	r0, r1
 801b4a4:	2605      	movs	r6, #5
 801b4a6:	f881 2085 	strb.w	r2, [r1, #133]	@ 0x85
 801b4aa:	f881 6095 	strb.w	r6, [r1, #149]	@ 0x95
 801b4ae:	2204      	movs	r2, #4
 801b4b0:	f8d4 1658 	ldr.w	r1, [r4, #1624]	@ 0x658
 801b4b4:	3086      	adds	r0, #134	@ 0x86
 801b4b6:	f7fc fff2 	bl	801849e <MobleOutputStreamPutBigEndian>
 801b4ba:	f893 232c 	ldrb.w	r2, [r3, #812]	@ 0x32c
 801b4be:	3201      	adds	r2, #1
 801b4c0:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
 801b4c4:	2000      	movs	r0, #0
 801b4c6:	bd70      	pop	{r4, r5, r6, pc}
 801b4c8:	2002      	movs	r0, #2
 801b4ca:	e7fc      	b.n	801b4c6 <BnrgmFrndFnInsertFriendUpdate+0x66>
 801b4cc:	20000324 	.word	0x20000324
 801b4d0:	2000141c 	.word	0x2000141c

0801b4d4 <BnrgmFrndFnGetLpnStatus>:
 801b4d4:	b510      	push	{r4, lr}
 801b4d6:	4604      	mov	r4, r0
 801b4d8:	f7ff ff89 	bl	801b3ee <BnrgmFrndFnGetLpnOffset>
 801b4dc:	1c43      	adds	r3, r0, #1
 801b4de:	d00b      	beq.n	801b4f8 <BnrgmFrndFnGetLpnStatus+0x24>
 801b4e0:	f44f 734d 	mov.w	r3, #820	@ 0x334
 801b4e4:	fb03 4000 	mla	r0, r3, r0, r4
 801b4e8:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 801b4ec:	3801      	subs	r0, #1
 801b4ee:	2801      	cmp	r0, #1
 801b4f0:	bf8c      	ite	hi
 801b4f2:	2000      	movhi	r0, #0
 801b4f4:	2001      	movls	r0, #1
 801b4f6:	bd10      	pop	{r4, pc}
 801b4f8:	2002      	movs	r0, #2
 801b4fa:	e7fc      	b.n	801b4f6 <BnrgmFrndFnGetLpnStatus+0x22>

0801b4fc <BnrgmFrndMgmtGetFriendshipStatus>:
 801b4fc:	4b02      	ldr	r3, [pc, #8]	@ (801b508 <BnrgmFrndMgmtGetFriendshipStatus+0xc>)
 801b4fe:	4601      	mov	r1, r0
 801b500:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	@ 0xa04
 801b504:	f7ff bfe6 	b.w	801b4d4 <BnrgmFrndFnGetLpnStatus>
 801b508:	20002514 	.word	0x20002514

0801b50c <BnrgmFrndFnGetSubscrStatus>:
 801b50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b50e:	f44f 7c4d 	mov.w	ip, #820	@ 0x334
 801b512:	2700      	movs	r7, #0
 801b514:	7884      	ldrb	r4, [r0, #2]
 801b516:	b2fe      	uxtb	r6, r7
 801b518:	42b4      	cmp	r4, r6
 801b51a:	d801      	bhi.n	801b520 <BnrgmFrndFnGetSubscrStatus+0x14>
 801b51c:	2000      	movs	r0, #0
 801b51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b520:	fb0c 0506 	mla	r5, ip, r6, r0
 801b524:	351c      	adds	r5, #28
 801b526:	2406      	movs	r4, #6
 801b528:	f835 ef02 	ldrh.w	lr, [r5, #2]!
 801b52c:	458e      	cmp	lr, r1
 801b52e:	d106      	bne.n	801b53e <BnrgmFrndFnGetSubscrStatus+0x32>
 801b530:	7814      	ldrb	r4, [r2, #0]
 801b532:	551e      	strb	r6, [r3, r4]
 801b534:	7814      	ldrb	r4, [r2, #0]
 801b536:	3401      	adds	r4, #1
 801b538:	7014      	strb	r4, [r2, #0]
 801b53a:	3701      	adds	r7, #1
 801b53c:	e7ea      	b.n	801b514 <BnrgmFrndFnGetSubscrStatus+0x8>
 801b53e:	3c01      	subs	r4, #1
 801b540:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 801b544:	d1f0      	bne.n	801b528 <BnrgmFrndFnGetSubscrStatus+0x1c>
 801b546:	e7f8      	b.n	801b53a <BnrgmFrndFnGetSubscrStatus+0x2e>

0801b548 <BnrgmFrndMgmtGetSubscrStatus>:
 801b548:	4613      	mov	r3, r2
 801b54a:	460a      	mov	r2, r1
 801b54c:	4601      	mov	r1, r0
 801b54e:	4802      	ldr	r0, [pc, #8]	@ (801b558 <BnrgmFrndMgmtGetSubscrStatus+0x10>)
 801b550:	f8d0 0a04 	ldr.w	r0, [r0, #2564]	@ 0xa04
 801b554:	f7ff bfda 	b.w	801b50c <BnrgmFrndFnGetSubscrStatus>
 801b558:	20002514 	.word	0x20002514

0801b55c <BnrgmFrndFnQueLpnPkt>:
 801b55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b560:	4617      	mov	r7, r2
 801b562:	b087      	sub	sp, #28
 801b564:	4a97      	ldr	r2, [pc, #604]	@ (801b7c4 <BnrgmFrndFnQueLpnPkt+0x268>)
 801b566:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b568:	f8b2 294c 	ldrh.w	r2, [r2, #2380]	@ 0x94c
 801b56c:	9301      	str	r3, [sp, #4]
 801b56e:	428a      	cmp	r2, r1
 801b570:	f04f 0300 	mov.w	r3, #0
 801b574:	4605      	mov	r5, r0
 801b576:	f88d 300b 	strb.w	r3, [sp, #11]
 801b57a:	f0c0 8121 	bcc.w	801b7c0 <BnrgmFrndFnQueLpnPkt+0x264>
 801b57e:	7bfa      	ldrb	r2, [r7, #15]
 801b580:	2a01      	cmp	r2, #1
 801b582:	f240 811d 	bls.w	801b7c0 <BnrgmFrndFnQueLpnPkt+0x264>
 801b586:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b58a:	8af9      	ldrh	r1, [r7, #22]
 801b58c:	429a      	cmp	r2, r3
 801b58e:	dd18      	ble.n	801b5c2 <BnrgmFrndFnQueLpnPkt+0x66>
 801b590:	f7ff ff2d 	bl	801b3ee <BnrgmFrndFnGetLpnOffset>
 801b594:	2301      	movs	r3, #1
 801b596:	f88d 000c 	strb.w	r0, [sp, #12]
 801b59a:	f88d 300b 	strb.w	r3, [sp, #11]
 801b59e:	f04f 0800 	mov.w	r8, #0
 801b5a2:	4644      	mov	r4, r8
 801b5a4:	46c4      	mov	ip, r8
 801b5a6:	4646      	mov	r6, r8
 801b5a8:	2201      	movs	r2, #1
 801b5aa:	f44f 794d 	mov.w	r9, #820	@ 0x334
 801b5ae:	f89d 100b 	ldrb.w	r1, [sp, #11]
 801b5b2:	fa5f f388 	uxtb.w	r3, r8
 801b5b6:	4299      	cmp	r1, r3
 801b5b8:	d82d      	bhi.n	801b616 <BnrgmFrndFnQueLpnPkt+0xba>
 801b5ba:	2000      	movs	r0, #0
 801b5bc:	b007      	add	sp, #28
 801b5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b5c6:	4291      	cmp	r1, r2
 801b5c8:	d11f      	bne.n	801b60a <BnrgmFrndFnQueLpnPkt+0xae>
 801b5ca:	7884      	ldrb	r4, [r0, #2]
 801b5cc:	4619      	mov	r1, r3
 801b5ce:	461a      	mov	r2, r3
 801b5d0:	f100 0608 	add.w	r6, r0, #8
 801b5d4:	f44f 7c4d 	mov.w	ip, #820	@ 0x334
 801b5d8:	b2d8      	uxtb	r0, r3
 801b5da:	4284      	cmp	r4, r0
 801b5dc:	d804      	bhi.n	801b5e8 <BnrgmFrndFnQueLpnPkt+0x8c>
 801b5de:	2900      	cmp	r1, #0
 801b5e0:	d0dd      	beq.n	801b59e <BnrgmFrndFnQueLpnPkt+0x42>
 801b5e2:	f88d 200b 	strb.w	r2, [sp, #11]
 801b5e6:	e7da      	b.n	801b59e <BnrgmFrndFnQueLpnPkt+0x42>
 801b5e8:	fb0c fe03 	mul.w	lr, ip, r3
 801b5ec:	f836 e00e 	ldrh.w	lr, [r6, lr]
 801b5f0:	f1be 0f00 	cmp.w	lr, #0
 801b5f4:	d007      	beq.n	801b606 <BnrgmFrndFnQueLpnPkt+0xaa>
 801b5f6:	f102 0118 	add.w	r1, r2, #24
 801b5fa:	4469      	add	r1, sp
 801b5fc:	3201      	adds	r2, #1
 801b5fe:	f801 0c0c 	strb.w	r0, [r1, #-12]
 801b602:	b2d2      	uxtb	r2, r2
 801b604:	2101      	movs	r1, #1
 801b606:	3301      	adds	r3, #1
 801b608:	e7e6      	b.n	801b5d8 <BnrgmFrndFnQueLpnPkt+0x7c>
 801b60a:	ab03      	add	r3, sp, #12
 801b60c:	f10d 020b 	add.w	r2, sp, #11
 801b610:	f7ff ff7c 	bl	801b50c <BnrgmFrndFnGetSubscrStatus>
 801b614:	e7c3      	b.n	801b59e <BnrgmFrndFnQueLpnPkt+0x42>
 801b616:	3318      	adds	r3, #24
 801b618:	446b      	add	r3, sp
 801b61a:	8ab8      	ldrh	r0, [r7, #20]
 801b61c:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 801b620:	fb09 5301 	mla	r3, r9, r1, r5
 801b624:	f8b3 e008 	ldrh.w	lr, [r3, #8]
 801b628:	4570      	cmp	r0, lr
 801b62a:	d304      	bcc.n	801b636 <BnrgmFrndFnQueLpnPkt+0xda>
 801b62c:	f893 3333 	ldrb.w	r3, [r3, #819]	@ 0x333
 801b630:	4473      	add	r3, lr
 801b632:	4298      	cmp	r0, r3
 801b634:	db6a      	blt.n	801b70c <BnrgmFrndFnQueLpnPkt+0x1b0>
 801b636:	9b01      	ldr	r3, [sp, #4]
 801b638:	781b      	ldrb	r3, [r3, #0]
 801b63a:	2b02      	cmp	r3, #2
 801b63c:	d164      	bne.n	801b708 <BnrgmFrndFnQueLpnPkt+0x1ac>
 801b63e:	9b01      	ldr	r3, [sp, #4]
 801b640:	f8b3 b004 	ldrh.w	fp, [r3, #4]
 801b644:	fb09 5e01 	mla	lr, r9, r1, r5
 801b648:	2000      	movs	r0, #0
 801b64a:	f8be 3080 	ldrh.w	r3, [lr, #128]	@ 0x80
 801b64e:	455b      	cmp	r3, fp
 801b650:	fa5f fa80 	uxtb.w	sl, r0
 801b654:	d105      	bne.n	801b662 <BnrgmFrndFnQueLpnPkt+0x106>
 801b656:	f8de 2074 	ldr.w	r2, [lr, #116]	@ 0x74
 801b65a:	693b      	ldr	r3, [r7, #16]
 801b65c:	429a      	cmp	r2, r3
 801b65e:	f0c0 80ac 	bcc.w	801b7ba <BnrgmFrndFnQueLpnPkt+0x25e>
 801b662:	3001      	adds	r0, #1
 801b664:	2810      	cmp	r0, #16
 801b666:	f10e 0e2c 	add.w	lr, lr, #44	@ 0x2c
 801b66a:	d1ee      	bne.n	801b64a <BnrgmFrndFnQueLpnPkt+0xee>
 801b66c:	fb09 f201 	mul.w	r2, r9, r1
 801b670:	eb05 0e02 	add.w	lr, r5, r2
 801b674:	f89e 3330 	ldrb.w	r3, [lr, #816]	@ 0x330
 801b678:	f89e 0331 	ldrb.w	r0, [lr, #817]	@ 0x331
 801b67c:	2b0f      	cmp	r3, #15
 801b67e:	d848      	bhi.n	801b712 <BnrgmFrndFnQueLpnPkt+0x1b6>
 801b680:	4418      	add	r0, r3
 801b682:	3301      	adds	r3, #1
 801b684:	f000 060f 	and.w	r6, r0, #15
 801b688:	f88e 3330 	strb.w	r3, [lr, #816]	@ 0x330
 801b68c:	222c      	movs	r2, #44	@ 0x2c
 801b68e:	fb09 f001 	mul.w	r0, r9, r1
 801b692:	fb02 0306 	mla	r3, r2, r6, r0
 801b696:	442b      	add	r3, r5
 801b698:	fb06 0002 	mla	r0, r6, r2, r0
 801b69c:	f04f 0c00 	mov.w	ip, #0
 801b6a0:	f883 c09a 	strb.w	ip, [r3, #154]	@ 0x9a
 801b6a4:	f100 0c70 	add.w	ip, r0, #112	@ 0x70
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	f845 300c 	str.w	r3, [r5, ip]
 801b6ae:	eb05 020c 	add.w	r2, r5, ip
 801b6b2:	693b      	ldr	r3, [r7, #16]
 801b6b4:	6053      	str	r3, [r2, #4]
 801b6b6:	697b      	ldr	r3, [r7, #20]
 801b6b8:	6093      	str	r3, [r2, #8]
 801b6ba:	9a01      	ldr	r2, [sp, #4]
 801b6bc:	f100 037c 	add.w	r3, r0, #124	@ 0x7c
 801b6c0:	eb03 0a05 	add.w	sl, r3, r5
 801b6c4:	f102 0c0c 	add.w	ip, r2, #12
 801b6c8:	f852 eb04 	ldr.w	lr, [r2], #4
 801b6cc:	f84a eb04 	str.w	lr, [sl], #4
 801b6d0:	4562      	cmp	r2, ip
 801b6d2:	d1f9      	bne.n	801b6c8 <BnrgmFrndFnQueLpnPkt+0x16c>
 801b6d4:	232c      	movs	r3, #44	@ 0x2c
 801b6d6:	fb09 f101 	mul.w	r1, r9, r1
 801b6da:	fb03 1106 	mla	r1, r3, r6, r1
 801b6de:	7812      	ldrb	r2, [r2, #0]
 801b6e0:	f88a 2000 	strb.w	r2, [sl]
 801b6e4:	4429      	add	r1, r5
 801b6e6:	3089      	adds	r0, #137	@ 0x89
 801b6e8:	f891 3073 	ldrb.w	r3, [r1, #115]	@ 0x73
 801b6ec:	3b01      	subs	r3, #1
 801b6ee:	f881 3073 	strb.w	r3, [r1, #115]	@ 0x73
 801b6f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b6f4:	f881 3099 	strb.w	r3, [r1, #153]	@ 0x99
 801b6f8:	461a      	mov	r2, r3
 801b6fa:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801b6fc:	4428      	add	r0, r5
 801b6fe:	f00b fb18 	bl	8026d32 <memcpy>
 801b702:	f04f 0c01 	mov.w	ip, #1
 801b706:	e056      	b.n	801b7b6 <BnrgmFrndFnQueLpnPkt+0x25a>
 801b708:	2a00      	cmp	r2, #0
 801b70a:	d1af      	bne.n	801b66c <BnrgmFrndFnQueLpnPkt+0x110>
 801b70c:	f108 0801 	add.w	r8, r8, #1
 801b710:	e74d      	b.n	801b5ae <BnrgmFrndFnQueLpnPkt+0x52>
 801b712:	f104 0e10 	add.w	lr, r4, #16
 801b716:	fa5f fe8e 	uxtb.w	lr, lr
 801b71a:	1b00      	subs	r0, r0, r4
 801b71c:	f04f 0b2c 	mov.w	fp, #44	@ 0x2c
 801b720:	1823      	adds	r3, r4, r0
 801b722:	f003 030f 	and.w	r3, r3, #15
 801b726:	fb0b 2a03 	mla	sl, fp, r3, r2
 801b72a:	44aa      	add	sl, r5
 801b72c:	f89a a09a 	ldrb.w	sl, [sl, #154]	@ 0x9a
 801b730:	f1ba 0f00 	cmp.w	sl, #0
 801b734:	d137      	bne.n	801b7a6 <BnrgmFrndFnQueLpnPkt+0x24a>
 801b736:	3310      	adds	r3, #16
 801b738:	469b      	mov	fp, r3
 801b73a:	3270      	adds	r2, #112	@ 0x70
 801b73c:	f04f 0c2c 	mov.w	ip, #44	@ 0x2c
 801b740:	ebab 0003 	sub.w	r0, fp, r3
 801b744:	b2c0      	uxtb	r0, r0
 801b746:	4284      	cmp	r4, r0
 801b748:	d80c      	bhi.n	801b764 <BnrgmFrndFnQueLpnPkt+0x208>
 801b74a:	fb09 5301 	mla	r3, r9, r1, r5
 801b74e:	f893 6331 	ldrb.w	r6, [r3, #817]	@ 0x331
 801b752:	3601      	adds	r6, #1
 801b754:	f006 060f 	and.w	r6, r6, #15
 801b758:	f883 6331 	strb.w	r6, [r3, #817]	@ 0x331
 801b75c:	360f      	adds	r6, #15
 801b75e:	f006 060f 	and.w	r6, r6, #15
 801b762:	e793      	b.n	801b68c <BnrgmFrndFnQueLpnPkt+0x130>
 801b764:	4258      	negs	r0, r3
 801b766:	f003 060f 	and.w	r6, r3, #15
 801b76a:	f000 000f 	and.w	r0, r0, #15
 801b76e:	f103 33ff 	add.w	r3, r3, #4294967295
 801b772:	bf58      	it	pl
 801b774:	4246      	negpl	r6, r0
 801b776:	f1d3 0e00 	rsbs	lr, r3, #0
 801b77a:	f00e 0e0f 	and.w	lr, lr, #15
 801b77e:	f003 000f 	and.w	r0, r3, #15
 801b782:	bf58      	it	pl
 801b784:	f1ce 0000 	rsbpl	r0, lr, #0
 801b788:	fb0c 2000 	mla	r0, ip, r0, r2
 801b78c:	fb0c 2606 	mla	r6, ip, r6, r2
 801b790:	4428      	add	r0, r5
 801b792:	442e      	add	r6, r5
 801b794:	f100 0e2c 	add.w	lr, r0, #44	@ 0x2c
 801b798:	f850 ab04 	ldr.w	sl, [r0], #4
 801b79c:	f846 ab04 	str.w	sl, [r6], #4
 801b7a0:	4570      	cmp	r0, lr
 801b7a2:	d1f9      	bne.n	801b798 <BnrgmFrndFnQueLpnPkt+0x23c>
 801b7a4:	e7cc      	b.n	801b740 <BnrgmFrndFnQueLpnPkt+0x1e4>
 801b7a6:	3401      	adds	r4, #1
 801b7a8:	b2e4      	uxtb	r4, r4
 801b7aa:	4574      	cmp	r4, lr
 801b7ac:	d1b8      	bne.n	801b720 <BnrgmFrndFnQueLpnPkt+0x1c4>
 801b7ae:	f1bc 0f00 	cmp.w	ip, #0
 801b7b2:	f47f af6b 	bne.w	801b68c <BnrgmFrndFnQueLpnPkt+0x130>
 801b7b6:	2201      	movs	r2, #1
 801b7b8:	e7a8      	b.n	801b70c <BnrgmFrndFnQueLpnPkt+0x1b0>
 801b7ba:	4656      	mov	r6, sl
 801b7bc:	2200      	movs	r2, #0
 801b7be:	e7a5      	b.n	801b70c <BnrgmFrndFnQueLpnPkt+0x1b0>
 801b7c0:	2002      	movs	r0, #2
 801b7c2:	e6fb      	b.n	801b5bc <BnrgmFrndFnQueLpnPkt+0x60>
 801b7c4:	2000141c 	.word	0x2000141c

0801b7c8 <BnrgmFrndMgmtQueLpnPkt>:
 801b7c8:	b513      	push	{r0, r1, r4, lr}
 801b7ca:	9c04      	ldr	r4, [sp, #16]
 801b7cc:	e9cd 3400 	strd	r3, r4, [sp]
 801b7d0:	4613      	mov	r3, r2
 801b7d2:	460a      	mov	r2, r1
 801b7d4:	4601      	mov	r1, r0
 801b7d6:	4803      	ldr	r0, [pc, #12]	@ (801b7e4 <BnrgmFrndMgmtQueLpnPkt+0x1c>)
 801b7d8:	f8d0 0a04 	ldr.w	r0, [r0, #2564]	@ 0xa04
 801b7dc:	f7ff febe 	bl	801b55c <BnrgmFrndFnQueLpnPkt>
 801b7e0:	b002      	add	sp, #8
 801b7e2:	bd10      	pop	{r4, pc}
 801b7e4:	20002514 	.word	0x20002514

0801b7e8 <BnrgmFrndFnProcessFrndClearConf>:
 801b7e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b7ea:	4614      	mov	r4, r2
 801b7ec:	461d      	mov	r5, r3
 801b7ee:	b930      	cbnz	r0, 801b7fe <BnrgmFrndFnProcessFrndClearConf+0x16>
 801b7f0:	4b1a      	ldr	r3, [pc, #104]	@ (801b85c <BnrgmFrndFnProcessFrndClearConf+0x74>)
 801b7f2:	4a1b      	ldr	r2, [pc, #108]	@ (801b860 <BnrgmFrndFnProcessFrndClearConf+0x78>)
 801b7f4:	481b      	ldr	r0, [pc, #108]	@ (801b864 <BnrgmFrndFnProcessFrndClearConf+0x7c>)
 801b7f6:	f240 318d 	movw	r1, #909	@ 0x38d
 801b7fa:	f00a fa4b 	bl	8025c94 <__assert_func>
 801b7fe:	b353      	cbz	r3, 801b856 <BnrgmFrndFnProcessFrndClearConf+0x6e>
 801b800:	9b06      	ldr	r3, [sp, #24]
 801b802:	2b03      	cmp	r3, #3
 801b804:	d927      	bls.n	801b856 <BnrgmFrndFnProcessFrndClearConf+0x6e>
 801b806:	aa01      	add	r2, sp, #4
 801b808:	2102      	movs	r1, #2
 801b80a:	4628      	mov	r0, r5
 801b80c:	f7fc fe20 	bl	8018450 <MobleInputStreamGetBigEndian>
 801b810:	2102      	movs	r1, #2
 801b812:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801b816:	1868      	adds	r0, r5, r1
 801b818:	f7fc fe1a 	bl	8018450 <MobleInputStreamGetBigEndian>
 801b81c:	4631      	mov	r1, r6
 801b81e:	4620      	mov	r0, r4
 801b820:	f7ff fde5 	bl	801b3ee <BnrgmFrndFnGetLpnOffset>
 801b824:	1c43      	adds	r3, r0, #1
 801b826:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801b82a:	4602      	mov	r2, r0
 801b82c:	d013      	beq.n	801b856 <BnrgmFrndFnProcessFrndClearConf+0x6e>
 801b82e:	f44f 714d 	mov.w	r1, #820	@ 0x334
 801b832:	fb01 4300 	mla	r3, r1, r0, r4
 801b836:	8958      	ldrh	r0, [r3, #10]
 801b838:	42a8      	cmp	r0, r5
 801b83a:	d10a      	bne.n	801b852 <BnrgmFrndFnProcessFrndClearConf+0x6a>
 801b83c:	6998      	ldr	r0, [r3, #24]
 801b83e:	b108      	cbz	r0, 801b844 <BnrgmFrndFnProcessFrndClearConf+0x5c>
 801b840:	f7f9 fb88 	bl	8014f54 <MoblePalTimerDestroy>
 801b844:	fb01 4402 	mla	r4, r1, r2, r4
 801b848:	2000      	movs	r0, #0
 801b84a:	61a0      	str	r0, [r4, #24]
 801b84c:	82a0      	strh	r0, [r4, #20]
 801b84e:	b002      	add	sp, #8
 801b850:	bd70      	pop	{r4, r5, r6, pc}
 801b852:	2000      	movs	r0, #0
 801b854:	e7fb      	b.n	801b84e <BnrgmFrndFnProcessFrndClearConf+0x66>
 801b856:	2002      	movs	r0, #2
 801b858:	e7f9      	b.n	801b84e <BnrgmFrndFnProcessFrndClearConf+0x66>
 801b85a:	bf00      	nop
 801b85c:	0802e4b8 	.word	0x0802e4b8
 801b860:	0802ce85 	.word	0x0802ce85
 801b864:	0802ea8b 	.word	0x0802ea8b

0801b868 <BnrgmFrndFnInit>:
 801b868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b86a:	7813      	ldrb	r3, [r2, #0]
 801b86c:	4616      	mov	r6, r2
 801b86e:	1e5a      	subs	r2, r3, #1
 801b870:	2a09      	cmp	r2, #9
 801b872:	b08b      	sub	sp, #44	@ 0x2c
 801b874:	4604      	mov	r4, r0
 801b876:	d831      	bhi.n	801b8dc <BnrgmFrndFnInit+0x74>
 801b878:	f1c3 030a 	rsb	r3, r3, #10
 801b87c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801b880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b884:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801b888:	f242 050c 	movw	r5, #8204	@ 0x200c
 801b88c:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
 801b890:	b2ad      	uxth	r5, r5
 801b892:	428d      	cmp	r5, r1
 801b894:	d822      	bhi.n	801b8dc <BnrgmFrndFnInit+0x74>
 801b896:	2700      	movs	r7, #0
 801b898:	462a      	mov	r2, r5
 801b89a:	2100      	movs	r1, #0
 801b89c:	4620      	mov	r0, r4
 801b89e:	3701      	adds	r7, #1
 801b8a0:	f00b f996 	bl	8026bd0 <memset>
 801b8a4:	b2bb      	uxth	r3, r7
 801b8a6:	429d      	cmp	r5, r3
 801b8a8:	d8f6      	bhi.n	801b898 <BnrgmFrndFnInit+0x30>
 801b8aa:	7835      	ldrb	r5, [r6, #0]
 801b8ac:	b1b5      	cbz	r5, 801b8dc <BnrgmFrndFnInit+0x74>
 801b8ae:	70a5      	strb	r5, [r4, #2]
 801b8b0:	2228      	movs	r2, #40	@ 0x28
 801b8b2:	2100      	movs	r1, #0
 801b8b4:	4668      	mov	r0, sp
 801b8b6:	f00b f98b 	bl	8026bd0 <memset>
 801b8ba:	342a      	adds	r4, #42	@ 0x2a
 801b8bc:	466a      	mov	r2, sp
 801b8be:	2300      	movs	r3, #0
 801b8c0:	3301      	adds	r3, #1
 801b8c2:	b2d9      	uxtb	r1, r3
 801b8c4:	428d      	cmp	r5, r1
 801b8c6:	f842 4b04 	str.w	r4, [r2], #4
 801b8ca:	f504 744d 	add.w	r4, r4, #820	@ 0x334
 801b8ce:	d8f7      	bhi.n	801b8c0 <BnrgmFrndFnInit+0x58>
 801b8d0:	4669      	mov	r1, sp
 801b8d2:	4628      	mov	r0, r5
 801b8d4:	f7fb fea8 	bl	8017628 <BnrgmPalCryptoInitFriendshipKeysP>
 801b8d8:	b00b      	add	sp, #44	@ 0x2c
 801b8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8dc:	2002      	movs	r0, #2
 801b8de:	e7fb      	b.n	801b8d8 <BnrgmFrndFnInit+0x70>

0801b8e0 <BnrgmFrndMgmtFnInit>:
 801b8e0:	4b03      	ldr	r3, [pc, #12]	@ (801b8f0 <BnrgmFrndMgmtFnInit+0x10>)
 801b8e2:	4602      	mov	r2, r0
 801b8e4:	f8b3 1a08 	ldrh.w	r1, [r3, #2568]	@ 0xa08
 801b8e8:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	@ 0xa04
 801b8ec:	f7ff bfbc 	b.w	801b868 <BnrgmFrndFnInit>
 801b8f0:	20002514 	.word	0x20002514

0801b8f4 <BnrgmFrndFnUpdateKeys>:
 801b8f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b8f6:	788f      	ldrb	r7, [r1, #2]
 801b8f8:	4605      	mov	r5, r0
 801b8fa:	460c      	mov	r4, r1
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	b2d8      	uxtb	r0, r3
 801b900:	4287      	cmp	r7, r0
 801b902:	d801      	bhi.n	801b908 <BnrgmFrndFnUpdateKeys+0x14>
 801b904:	2000      	movs	r0, #0
 801b906:	e013      	b.n	801b930 <BnrgmFrndFnUpdateKeys+0x3c>
 801b908:	8926      	ldrh	r6, [r4, #8]
 801b90a:	b19e      	cbz	r6, 801b934 <BnrgmFrndFnUpdateKeys+0x40>
 801b90c:	f894 c06c 	ldrb.w	ip, [r4, #108]	@ 0x6c
 801b910:	4594      	cmp	ip, r2
 801b912:	d10f      	bne.n	801b934 <BnrgmFrndFnUpdateKeys+0x40>
 801b914:	f44f 724d 	mov.w	r2, #820	@ 0x334
 801b918:	fb02 1403 	mla	r4, r2, r3, r1
 801b91c:	682a      	ldr	r2, [r5, #0]
 801b91e:	8963      	ldrh	r3, [r4, #10]
 801b920:	8852      	ldrh	r2, [r2, #2]
 801b922:	2101      	movs	r1, #1
 801b924:	9101      	str	r1, [sp, #4]
 801b926:	89a1      	ldrh	r1, [r4, #12]
 801b928:	9100      	str	r1, [sp, #0]
 801b92a:	4631      	mov	r1, r6
 801b92c:	f7fb fea4 	bl	8017678 <BnrgmPalCryptoSetFriendshipKeys>
 801b930:	b003      	add	sp, #12
 801b932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b934:	3301      	adds	r3, #1
 801b936:	f504 744d 	add.w	r4, r4, #820	@ 0x334
 801b93a:	e7e0      	b.n	801b8fe <BnrgmFrndFnUpdateKeys+0xa>

0801b93c <BnrgmFrndFnSwitchKeys>:
 801b93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b93e:	4604      	mov	r4, r0
 801b940:	460e      	mov	r6, r1
 801b942:	2500      	movs	r5, #0
 801b944:	f44f 774d 	mov.w	r7, #820	@ 0x334
 801b948:	78a3      	ldrb	r3, [r4, #2]
 801b94a:	b2e8      	uxtb	r0, r5
 801b94c:	4283      	cmp	r3, r0
 801b94e:	d801      	bhi.n	801b954 <BnrgmFrndFnSwitchKeys+0x18>
 801b950:	2000      	movs	r0, #0
 801b952:	e00d      	b.n	801b970 <BnrgmFrndFnSwitchKeys+0x34>
 801b954:	fb07 4300 	mla	r3, r7, r0, r4
 801b958:	891a      	ldrh	r2, [r3, #8]
 801b95a:	b90a      	cbnz	r2, 801b960 <BnrgmFrndFnSwitchKeys+0x24>
 801b95c:	3501      	adds	r5, #1
 801b95e:	e7f3      	b.n	801b948 <BnrgmFrndFnSwitchKeys+0xc>
 801b960:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801b964:	42b3      	cmp	r3, r6
 801b966:	d1f9      	bne.n	801b95c <BnrgmFrndFnSwitchKeys+0x20>
 801b968:	f7fb fee4 	bl	8017734 <BnrgmPalCryptoSwitchFriendshipKeys>
 801b96c:	2800      	cmp	r0, #0
 801b96e:	d0f5      	beq.n	801b95c <BnrgmFrndFnSwitchKeys+0x20>
 801b970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b972 <BnrgmFrndFnSendSecurityUpdate>:
 801b972:	b570      	push	{r4, r5, r6, lr}
 801b974:	4604      	mov	r4, r0
 801b976:	2500      	movs	r5, #0
 801b978:	f44f 764d 	mov.w	r6, #820	@ 0x334
 801b97c:	78a2      	ldrb	r2, [r4, #2]
 801b97e:	b2eb      	uxtb	r3, r5
 801b980:	429a      	cmp	r2, r3
 801b982:	d800      	bhi.n	801b986 <BnrgmFrndFnSendSecurityUpdate+0x14>
 801b984:	bd70      	pop	{r4, r5, r6, pc}
 801b986:	4373      	muls	r3, r6
 801b988:	18e2      	adds	r2, r4, r3
 801b98a:	8912      	ldrh	r2, [r2, #8]
 801b98c:	b11a      	cbz	r2, 801b996 <BnrgmFrndFnSendSecurityUpdate+0x24>
 801b98e:	3304      	adds	r3, #4
 801b990:	18e0      	adds	r0, r4, r3
 801b992:	f7ff fd65 	bl	801b460 <BnrgmFrndFnInsertFriendUpdate>
 801b996:	3501      	adds	r5, #1
 801b998:	e7f0      	b.n	801b97c <BnrgmFrndFnSendSecurityUpdate+0xa>
	...

0801b99c <BnrgmFrndMgmtSendSecurityUpdate>:
 801b99c:	4b05      	ldr	r3, [pc, #20]	@ (801b9b4 <BnrgmFrndMgmtSendSecurityUpdate+0x18>)
 801b99e:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 801b9a2:	2b01      	cmp	r3, #1
 801b9a4:	d104      	bne.n	801b9b0 <BnrgmFrndMgmtSendSecurityUpdate+0x14>
 801b9a6:	4b04      	ldr	r3, [pc, #16]	@ (801b9b8 <BnrgmFrndMgmtSendSecurityUpdate+0x1c>)
 801b9a8:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	@ 0xa04
 801b9ac:	f7ff bfe1 	b.w	801b972 <BnrgmFrndFnSendSecurityUpdate>
 801b9b0:	4770      	bx	lr
 801b9b2:	bf00      	nop
 801b9b4:	20000324 	.word	0x20000324
 801b9b8:	20002514 	.word	0x20002514

0801b9bc <MobleStackSetIvIndex>:
 801b9bc:	b538      	push	{r3, r4, r5, lr}
 801b9be:	4d0b      	ldr	r5, [pc, #44]	@ (801b9ec <MobleStackSetIvIndex+0x30>)
 801b9c0:	4604      	mov	r4, r0
 801b9c2:	f7fb fa79 	bl	8016eb8 <MoblePalCryptoSetIvIndex>
 801b9c6:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 801b9ca:	605c      	str	r4, [r3, #4]
 801b9cc:	4b08      	ldr	r3, [pc, #32]	@ (801b9f0 <MobleStackSetIvIndex+0x34>)
 801b9ce:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 801b9d2:	2b01      	cmp	r3, #1
 801b9d4:	d101      	bne.n	801b9da <MobleStackSetIvIndex+0x1e>
 801b9d6:	f7ff f9c9 	bl	801ad6c <BnrgmStackSendBeaconOverGatt>
 801b9da:	f7ff ffdf 	bl	801b99c <BnrgmFrndMgmtSendSecurityUpdate>
 801b9de:	f8d5 0680 	ldr.w	r0, [r5, #1664]	@ 0x680
 801b9e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b9e6:	f7fe bb93 	b.w	801a110 <MobleConfigNetworkSave>
 801b9ea:	bf00      	nop
 801b9ec:	2000141c 	.word	0x2000141c
 801b9f0:	20000324 	.word	0x20000324

0801b9f4 <MobleStackForcedSetIvIndex>:
 801b9f4:	b510      	push	{r4, lr}
 801b9f6:	4c07      	ldr	r4, [pc, #28]	@ (801ba14 <MobleStackForcedSetIvIndex+0x20>)
 801b9f8:	f7ff ffe0 	bl	801b9bc <MobleStackSetIvIndex>
 801b9fc:	f504 60d0 	add.w	r0, r4, #1664	@ 0x680
 801ba00:	f7fd ff06 	bl	8019810 <MobleNetworkReplayCacheClearAll>
 801ba04:	f7fe fd80 	bl	801a508 <MobleStackResetSeq>
 801ba08:	4b03      	ldr	r3, [pc, #12]	@ (801ba18 <MobleStackForcedSetIvIndex+0x24>)
 801ba0a:	f8c4 3924 	str.w	r3, [r4, #2340]	@ 0x924
 801ba0e:	2000      	movs	r0, #0
 801ba10:	bd10      	pop	{r4, pc}
 801ba12:	bf00      	nop
 801ba14:	2000141c 	.word	0x2000141c
 801ba18:	1ee62800 	.word	0x1ee62800

0801ba1c <MobleStackIvUpdateSwitchToProgress>:
 801ba1c:	b513      	push	{r0, r1, r4, lr}
 801ba1e:	4c0d      	ldr	r4, [pc, #52]	@ (801ba54 <MobleStackIvUpdateSwitchToProgress+0x38>)
 801ba20:	f894 065c 	ldrb.w	r0, [r4, #1628]	@ 0x65c
 801ba24:	2801      	cmp	r0, #1
 801ba26:	d012      	beq.n	801ba4e <MobleStackIvUpdateSwitchToProgress+0x32>
 801ba28:	f8d4 1658 	ldr.w	r1, [r4, #1624]	@ 0x658
 801ba2c:	3101      	adds	r1, #1
 801ba2e:	2301      	movs	r3, #1
 801ba30:	4608      	mov	r0, r1
 801ba32:	f884 365c 	strb.w	r3, [r4, #1628]	@ 0x65c
 801ba36:	9101      	str	r1, [sp, #4]
 801ba38:	f7ff ffc0 	bl	801b9bc <MobleStackSetIvIndex>
 801ba3c:	f504 60d0 	add.w	r0, r4, #1664	@ 0x680
 801ba40:	9901      	ldr	r1, [sp, #4]
 801ba42:	f7fd feb3 	bl	80197ac <MobleNetworkReplayCacheClear>
 801ba46:	4b04      	ldr	r3, [pc, #16]	@ (801ba58 <MobleStackIvUpdateSwitchToProgress+0x3c>)
 801ba48:	f8c4 3924 	str.w	r3, [r4, #2340]	@ 0x924
 801ba4c:	2000      	movs	r0, #0
 801ba4e:	b002      	add	sp, #8
 801ba50:	bd10      	pop	{r4, pc}
 801ba52:	bf00      	nop
 801ba54:	2000141c 	.word	0x2000141c
 801ba58:	1ee62800 	.word	0x1ee62800

0801ba5c <MobleStackIvUpdateSwitchToNormal>:
 801ba5c:	b510      	push	{r4, lr}
 801ba5e:	4c0c      	ldr	r4, [pc, #48]	@ (801ba90 <MobleStackIvUpdateSwitchToNormal+0x34>)
 801ba60:	f894 365c 	ldrb.w	r3, [r4, #1628]	@ 0x65c
 801ba64:	b193      	cbz	r3, 801ba8c <MobleStackIvUpdateSwitchToNormal+0x30>
 801ba66:	2300      	movs	r3, #0
 801ba68:	f884 365c 	strb.w	r3, [r4, #1628]	@ 0x65c
 801ba6c:	f7fe fd4c 	bl	801a508 <MobleStackResetSeq>
 801ba70:	4b08      	ldr	r3, [pc, #32]	@ (801ba94 <MobleStackIvUpdateSwitchToNormal+0x38>)
 801ba72:	f8c4 3924 	str.w	r3, [r4, #2340]	@ 0x924
 801ba76:	4b08      	ldr	r3, [pc, #32]	@ (801ba98 <MobleStackIvUpdateSwitchToNormal+0x3c>)
 801ba78:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 801ba7c:	2b01      	cmp	r3, #1
 801ba7e:	d101      	bne.n	801ba84 <MobleStackIvUpdateSwitchToNormal+0x28>
 801ba80:	f7ff f974 	bl	801ad6c <BnrgmStackSendBeaconOverGatt>
 801ba84:	f7ff ff8a 	bl	801b99c <BnrgmFrndMgmtSendSecurityUpdate>
 801ba88:	2000      	movs	r0, #0
 801ba8a:	bd10      	pop	{r4, pc}
 801ba8c:	2001      	movs	r0, #1
 801ba8e:	e7fc      	b.n	801ba8a <MobleStackIvUpdateSwitchToNormal+0x2e>
 801ba90:	2000141c 	.word	0x2000141c
 801ba94:	1ee62800 	.word	0x1ee62800
 801ba98:	20000324 	.word	0x20000324

0801ba9c <MobleStackIvUpdateTestSignal>:
 801ba9c:	4b03      	ldr	r3, [pc, #12]	@ (801baac <MobleStackIvUpdateTestSignal+0x10>)
 801ba9e:	f893 365c 	ldrb.w	r3, [r3, #1628]	@ 0x65c
 801baa2:	b90b      	cbnz	r3, 801baa8 <MobleStackIvUpdateTestSignal+0xc>
 801baa4:	f7ff bfba 	b.w	801ba1c <MobleStackIvUpdateSwitchToProgress>
 801baa8:	f7ff bfd8 	b.w	801ba5c <MobleStackIvUpdateSwitchToNormal>
 801baac:	2000141c 	.word	0x2000141c

0801bab0 <Test_UpperTester_Set04>:
 801bab0:	f7ff bff4 	b.w	801ba9c <MobleStackIvUpdateTestSignal>

0801bab4 <MobleStackProcessIvFromBeacon>:
 801bab4:	b570      	push	{r4, r5, r6, lr}
 801bab6:	4c29      	ldr	r4, [pc, #164]	@ (801bb5c <MobleStackProcessIvFromBeacon+0xa8>)
 801bab8:	4603      	mov	r3, r0
 801baba:	207c      	movs	r0, #124	@ 0x7c
 801babc:	fb00 4202 	mla	r2, r0, r2, r4
 801bac0:	f8d4 5658 	ldr.w	r5, [r4, #1624]	@ 0x658
 801bac4:	f8b2 6448 	ldrh.w	r6, [r2, #1096]	@ 0x448
 801bac8:	f894 265c 	ldrb.w	r2, [r4, #1628]	@ 0x65c
 801bacc:	bb5a      	cbnz	r2, 801bb26 <MobleStackProcessIvFromBeacon+0x72>
 801bace:	f105 022a 	add.w	r2, r5, #42	@ 0x2a
 801bad2:	428a      	cmp	r2, r1
 801bad4:	d325      	bcc.n	801bb22 <MobleStackProcessIvFromBeacon+0x6e>
 801bad6:	f013 0002 	ands.w	r0, r3, #2
 801bada:	d01d      	beq.n	801bb18 <MobleStackProcessIvFromBeacon+0x64>
 801badc:	1c6b      	adds	r3, r5, #1
 801bade:	428b      	cmp	r3, r1
 801bae0:	d204      	bcs.n	801baec <MobleStackProcessIvFromBeacon+0x38>
 801bae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bae6:	4608      	mov	r0, r1
 801bae8:	f7ff bf84 	b.w	801b9f4 <MobleStackForcedSetIvIndex>
 801baec:	d10f      	bne.n	801bb0e <MobleStackProcessIvFromBeacon+0x5a>
 801baee:	f7fa fcc9 	bl	8016484 <MoblePalCrypto_isPrimarySubnet>
 801baf2:	b140      	cbz	r0, 801bb06 <MobleStackProcessIvFromBeacon+0x52>
 801baf4:	f8d4 2924 	ldr.w	r2, [r4, #2340]	@ 0x924
 801baf8:	4b19      	ldr	r3, [pc, #100]	@ (801bb60 <MobleStackProcessIvFromBeacon+0xac>)
 801bafa:	429a      	cmp	r2, r3
 801bafc:	d302      	bcc.n	801bb04 <MobleStackProcessIvFromBeacon+0x50>
 801bafe:	f894 392c 	ldrb.w	r3, [r4, #2348]	@ 0x92c
 801bb02:	b173      	cbz	r3, 801bb22 <MobleStackProcessIvFromBeacon+0x6e>
 801bb04:	bb3e      	cbnz	r6, 801bb56 <MobleStackProcessIvFromBeacon+0xa2>
 801bb06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb0a:	f7ff bf87 	b.w	801ba1c <MobleStackIvUpdateSwitchToProgress>
 801bb0e:	428d      	cmp	r5, r1
 801bb10:	bf14      	ite	ne
 801bb12:	2002      	movne	r0, #2
 801bb14:	2001      	moveq	r0, #1
 801bb16:	bd70      	pop	{r4, r5, r6, pc}
 801bb18:	1e6b      	subs	r3, r5, #1
 801bb1a:	428b      	cmp	r3, r1
 801bb1c:	d0fb      	beq.n	801bb16 <MobleStackProcessIvFromBeacon+0x62>
 801bb1e:	428d      	cmp	r5, r1
 801bb20:	d3df      	bcc.n	801bae2 <MobleStackProcessIvFromBeacon+0x2e>
 801bb22:	2001      	movs	r0, #1
 801bb24:	e7f7      	b.n	801bb16 <MobleStackProcessIvFromBeacon+0x62>
 801bb26:	079b      	lsls	r3, r3, #30
 801bb28:	d4fb      	bmi.n	801bb22 <MobleStackProcessIvFromBeacon+0x6e>
 801bb2a:	428d      	cmp	r5, r1
 801bb2c:	d1f9      	bne.n	801bb22 <MobleStackProcessIvFromBeacon+0x6e>
 801bb2e:	f8d4 2924 	ldr.w	r2, [r4, #2340]	@ 0x924
 801bb32:	4b0b      	ldr	r3, [pc, #44]	@ (801bb60 <MobleStackProcessIvFromBeacon+0xac>)
 801bb34:	429a      	cmp	r2, r3
 801bb36:	d303      	bcc.n	801bb40 <MobleStackProcessIvFromBeacon+0x8c>
 801bb38:	f894 392c 	ldrb.w	r3, [r4, #2348]	@ 0x92c
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d0f0      	beq.n	801bb22 <MobleStackProcessIvFromBeacon+0x6e>
 801bb40:	f8d4 3688 	ldr.w	r3, [r4, #1672]	@ 0x688
 801bb44:	b11b      	cbz	r3, 801bb4e <MobleStackProcessIvFromBeacon+0x9a>
 801bb46:	4b07      	ldr	r3, [pc, #28]	@ (801bb64 <MobleStackProcessIvFromBeacon+0xb0>)
 801bb48:	f8c4 3924 	str.w	r3, [r4, #2340]	@ 0x924
 801bb4c:	e7e9      	b.n	801bb22 <MobleStackProcessIvFromBeacon+0x6e>
 801bb4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb52:	f7ff bf83 	b.w	801ba5c <MobleStackIvUpdateSwitchToNormal>
 801bb56:	2002      	movs	r0, #2
 801bb58:	e7dd      	b.n	801bb16 <MobleStackProcessIvFromBeacon+0x62>
 801bb5a:	bf00      	nop
 801bb5c:	2000141c 	.word	0x2000141c
 801bb60:	0a4cb800 	.word	0x0a4cb800
 801bb64:	0a4cb801 	.word	0x0a4cb801

0801bb68 <MobleStackProcessIvUpdate>:
 801bb68:	b510      	push	{r4, lr}
 801bb6a:	f7ea ffdb 	bl	8006b24 <HAL_GetTick>
 801bb6e:	4b19      	ldr	r3, [pc, #100]	@ (801bbd4 <MobleStackProcessIvUpdate+0x6c>)
 801bb70:	f8d3 2928 	ldr.w	r2, [r3, #2344]	@ 0x928
 801bb74:	f241 3187 	movw	r1, #4999	@ 0x1387
 801bb78:	1a84      	subs	r4, r0, r2
 801bb7a:	428c      	cmp	r4, r1
 801bb7c:	d925      	bls.n	801bbca <MobleStackProcessIvUpdate+0x62>
 801bb7e:	f8d3 1924 	ldr.w	r1, [r3, #2340]	@ 0x924
 801bb82:	f8c3 0928 	str.w	r0, [r3, #2344]	@ 0x928
 801bb86:	42a1      	cmp	r1, r4
 801bb88:	d916      	bls.n	801bbb8 <MobleStackProcessIvUpdate+0x50>
 801bb8a:	440a      	add	r2, r1
 801bb8c:	1a10      	subs	r0, r2, r0
 801bb8e:	f8c3 0924 	str.w	r0, [r3, #2340]	@ 0x924
 801bb92:	f893 265c 	ldrb.w	r2, [r3, #1628]	@ 0x65c
 801bb96:	f8d3 17dc 	ldr.w	r1, [r3, #2012]	@ 0x7dc
 801bb9a:	2a01      	cmp	r2, #1
 801bb9c:	d112      	bne.n	801bbc4 <MobleStackProcessIvUpdate+0x5c>
 801bb9e:	f8d3 0924 	ldr.w	r0, [r3, #2340]	@ 0x924
 801bba2:	490d      	ldr	r1, [pc, #52]	@ (801bbd8 <MobleStackProcessIvUpdate+0x70>)
 801bba4:	4288      	cmp	r0, r1
 801bba6:	d210      	bcs.n	801bbca <MobleStackProcessIvUpdate+0x62>
 801bba8:	f8d3 3688 	ldr.w	r3, [r3, #1672]	@ 0x688
 801bbac:	b96b      	cbnz	r3, 801bbca <MobleStackProcessIvUpdate+0x62>
 801bbae:	b96a      	cbnz	r2, 801bbcc <MobleStackProcessIvUpdate+0x64>
 801bbb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbb4:	f7ff bf32 	b.w	801ba1c <MobleStackIvUpdateSwitchToProgress>
 801bbb8:	2900      	cmp	r1, #0
 801bbba:	d0ea      	beq.n	801bb92 <MobleStackProcessIvUpdate+0x2a>
 801bbbc:	2200      	movs	r2, #0
 801bbbe:	f8c3 2924 	str.w	r2, [r3, #2340]	@ 0x924
 801bbc2:	e7e6      	b.n	801bb92 <MobleStackProcessIvUpdate+0x2a>
 801bbc4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 801bbc8:	d2e9      	bcs.n	801bb9e <MobleStackProcessIvUpdate+0x36>
 801bbca:	bd10      	pop	{r4, pc}
 801bbcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbd0:	f7ff bf44 	b.w	801ba5c <MobleStackIvUpdateSwitchToNormal>
 801bbd4:	2000141c 	.word	0x2000141c
 801bbd8:	0a4cb800 	.word	0x0a4cb800

0801bbdc <BnrgmFrndMgmtUpdateKeys>:
 801bbdc:	b508      	push	{r3, lr}
 801bbde:	4b0c      	ldr	r3, [pc, #48]	@ (801bc10 <BnrgmFrndMgmtUpdateKeys+0x34>)
 801bbe0:	460a      	mov	r2, r1
 801bbe2:	f893 10be 	ldrb.w	r1, [r3, #190]	@ 0xbe
 801bbe6:	2901      	cmp	r1, #1
 801bbe8:	d105      	bne.n	801bbf6 <BnrgmFrndMgmtUpdateKeys+0x1a>
 801bbea:	4b0a      	ldr	r3, [pc, #40]	@ (801bc14 <BnrgmFrndMgmtUpdateKeys+0x38>)
 801bbec:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	@ 0xa04
 801bbf0:	f7ff fe80 	bl	801b8f4 <BnrgmFrndFnUpdateKeys>
 801bbf4:	bd08      	pop	{r3, pc}
 801bbf6:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 801bbfa:	2b02      	cmp	r3, #2
 801bbfc:	d005      	beq.n	801bc0a <BnrgmFrndMgmtUpdateKeys+0x2e>
 801bbfe:	4b05      	ldr	r3, [pc, #20]	@ (801bc14 <BnrgmFrndMgmtUpdateKeys+0x38>)
 801bc00:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	@ 0xa04
 801bc04:	f7f4 ff71 	bl	8010aea <BnrgmFrndLpnUpdateKeys>
 801bc08:	e7f4      	b.n	801bbf4 <BnrgmFrndMgmtUpdateKeys+0x18>
 801bc0a:	2001      	movs	r0, #1
 801bc0c:	e7f2      	b.n	801bbf4 <BnrgmFrndMgmtUpdateKeys+0x18>
 801bc0e:	bf00      	nop
 801bc10:	20000324 	.word	0x20000324
 801bc14:	20002514 	.word	0x20002514

0801bc18 <BnrgmFrndMgmtSwitchKeys>:
 801bc18:	b508      	push	{r3, lr}
 801bc1a:	4b0c      	ldr	r3, [pc, #48]	@ (801bc4c <BnrgmFrndMgmtSwitchKeys+0x34>)
 801bc1c:	f893 20be 	ldrb.w	r2, [r3, #190]	@ 0xbe
 801bc20:	2a01      	cmp	r2, #1
 801bc22:	4601      	mov	r1, r0
 801bc24:	d105      	bne.n	801bc32 <BnrgmFrndMgmtSwitchKeys+0x1a>
 801bc26:	4b0a      	ldr	r3, [pc, #40]	@ (801bc50 <BnrgmFrndMgmtSwitchKeys+0x38>)
 801bc28:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	@ 0xa04
 801bc2c:	f7ff fe86 	bl	801b93c <BnrgmFrndFnSwitchKeys>
 801bc30:	bd08      	pop	{r3, pc}
 801bc32:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 801bc36:	2b02      	cmp	r3, #2
 801bc38:	d005      	beq.n	801bc46 <BnrgmFrndMgmtSwitchKeys+0x2e>
 801bc3a:	4b05      	ldr	r3, [pc, #20]	@ (801bc50 <BnrgmFrndMgmtSwitchKeys+0x38>)
 801bc3c:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	@ 0xa04
 801bc40:	f7f4 ff3d 	bl	8010abe <BnrgmFrndLpnSwitchKeys>
 801bc44:	e7f4      	b.n	801bc30 <BnrgmFrndMgmtSwitchKeys+0x18>
 801bc46:	2001      	movs	r0, #1
 801bc48:	e7f2      	b.n	801bc30 <BnrgmFrndMgmtSwitchKeys+0x18>
 801bc4a:	bf00      	nop
 801bc4c:	20000324 	.word	0x20000324
 801bc50:	20002514 	.word	0x20002514

0801bc54 <MobleProvisionCheckFCS>:
 801bc54:	b530      	push	{r4, r5, lr}
 801bc56:	b1a0      	cbz	r0, 801bc82 <MobleProvisionCheckFCS+0x2e>
 801bc58:	4c0b      	ldr	r4, [pc, #44]	@ (801bc88 <MobleProvisionCheckFCS+0x34>)
 801bc5a:	440a      	add	r2, r1
 801bc5c:	23ff      	movs	r3, #255	@ 0xff
 801bc5e:	4291      	cmp	r1, r2
 801bc60:	d108      	bne.n	801bc74 <MobleProvisionCheckFCS+0x20>
 801bc62:	4058      	eors	r0, r3
 801bc64:	4404      	add	r4, r0
 801bc66:	f894 0403 	ldrb.w	r0, [r4, #1027]	@ 0x403
 801bc6a:	f1a0 03cf 	sub.w	r3, r0, #207	@ 0xcf
 801bc6e:	4258      	negs	r0, r3
 801bc70:	4158      	adcs	r0, r3
 801bc72:	bd30      	pop	{r4, r5, pc}
 801bc74:	f811 5b01 	ldrb.w	r5, [r1], #1
 801bc78:	406b      	eors	r3, r5
 801bc7a:	4423      	add	r3, r4
 801bc7c:	f893 3403 	ldrb.w	r3, [r3, #1027]	@ 0x403
 801bc80:	e7ed      	b.n	801bc5e <MobleProvisionCheckFCS+0xa>
 801bc82:	2001      	movs	r0, #1
 801bc84:	e7f5      	b.n	801bc72 <MobleProvisionCheckFCS+0x1e>
 801bc86:	bf00      	nop
 801bc88:	0802cac0 	.word	0x0802cac0

0801bc8c <MobleSARJoin>:
 801bc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc90:	9f06      	ldr	r7, [sp, #24]
 801bc92:	461e      	mov	r6, r3
 801bc94:	4604      	mov	r4, r0
 801bc96:	2800      	cmp	r0, #0
 801bc98:	d069      	beq.n	801bd6e <MobleSARJoin+0xe2>
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d067      	beq.n	801bd6e <MobleSARJoin+0xe2>
 801bc9e:	2f00      	cmp	r7, #0
 801bca0:	d065      	beq.n	801bd6e <MobleSARJoin+0xe2>
 801bca2:	780b      	ldrb	r3, [r1, #0]
 801bca4:	f013 0003 	ands.w	r0, r3, #3
 801bca8:	d139      	bne.n	801bd1e <MobleSARJoin+0x92>
 801bcaa:	2a04      	cmp	r2, #4
 801bcac:	dc02      	bgt.n	801bcb4 <MobleSARJoin+0x28>
 801bcae:	2002      	movs	r0, #2
 801bcb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcb4:	788b      	ldrb	r3, [r1, #2]
 801bcb6:	8123      	strh	r3, [r4, #8]
 801bcb8:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 801bcbc:	ba5b      	rev16	r3, r3
 801bcbe:	b298      	uxth	r0, r3
 801bcc0:	2880      	cmp	r0, #128	@ 0x80
 801bcc2:	8123      	strh	r3, [r4, #8]
 801bcc4:	d8f3      	bhi.n	801bcae <MobleSARJoin+0x22>
 801bcc6:	78cb      	ldrb	r3, [r1, #3]
 801bcc8:	71a3      	strb	r3, [r4, #6]
 801bcca:	f811 3b04 	ldrb.w	r3, [r1], #4
 801bcce:	80a2      	strh	r2, [r4, #4]
 801bcd0:	089b      	lsrs	r3, r3, #2
 801bcd2:	3301      	adds	r3, #1
 801bcd4:	7023      	strb	r3, [r4, #0]
 801bcd6:	2301      	movs	r3, #1
 801bcd8:	8063      	strh	r3, [r4, #2]
 801bcda:	3a04      	subs	r2, #4
 801bcdc:	f104 000a 	add.w	r0, r4, #10
 801bce0:	f00a ff5c 	bl	8026b9c <memmove>
 801bce4:	7821      	ldrb	r1, [r4, #0]
 801bce6:	8862      	ldrh	r2, [r4, #2]
 801bce8:	2301      	movs	r3, #1
 801bcea:	408b      	lsls	r3, r1
 801bcec:	3b01      	subs	r3, #1
 801bcee:	429a      	cmp	r2, r3
 801bcf0:	d11b      	bne.n	801bd2a <MobleSARJoin+0x9e>
 801bcf2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801bcf6:	79a0      	ldrb	r0, [r4, #6]
 801bcf8:	2b01      	cmp	r3, #1
 801bcfa:	d135      	bne.n	801bd68 <MobleSARJoin+0xdc>
 801bcfc:	7a22      	ldrb	r2, [r4, #8]
 801bcfe:	f104 010a 	add.w	r1, r4, #10
 801bd02:	f7ff ffa7 	bl	801bc54 <MobleProvisionCheckFCS>
 801bd06:	2800      	cmp	r0, #0
 801bd08:	d0d1      	beq.n	801bcae <MobleSARJoin+0x22>
 801bd0a:	8922      	ldrh	r2, [r4, #8]
 801bd0c:	f104 010a 	add.w	r1, r4, #10
 801bd10:	4630      	mov	r0, r6
 801bd12:	f00a ff43 	bl	8026b9c <memmove>
 801bd16:	8923      	ldrh	r3, [r4, #8]
 801bd18:	603b      	str	r3, [r7, #0]
 801bd1a:	2000      	movs	r0, #0
 801bd1c:	e7c8      	b.n	801bcb0 <MobleSARJoin+0x24>
 801bd1e:	2802      	cmp	r0, #2
 801bd20:	d1c5      	bne.n	801bcae <MobleSARJoin+0x22>
 801bd22:	2a01      	cmp	r2, #1
 801bd24:	ddc3      	ble.n	801bcae <MobleSARJoin+0x22>
 801bd26:	88a5      	ldrh	r5, [r4, #4]
 801bd28:	b90d      	cbnz	r5, 801bd2e <MobleSARJoin+0xa2>
 801bd2a:	2001      	movs	r0, #1
 801bd2c:	e7c0      	b.n	801bcb0 <MobleSARJoin+0x24>
 801bd2e:	7820      	ldrb	r0, [r4, #0]
 801bd30:	ebb0 0f93 	cmp.w	r0, r3, lsr #2
 801bd34:	ea4f 0893 	mov.w	r8, r3, lsr #2
 801bd38:	d3b9      	bcc.n	801bcae <MobleSARJoin+0x22>
 801bd3a:	f1b8 0f00 	cmp.w	r8, #0
 801bd3e:	d0b6      	beq.n	801bcae <MobleSARJoin+0x22>
 801bd40:	1e6b      	subs	r3, r5, #1
 801bd42:	f108 3cff 	add.w	ip, r8, #4294967295
 801bd46:	3d04      	subs	r5, #4
 801bd48:	fb0c 5503 	mla	r5, ip, r3, r5
 801bd4c:	f104 000a 	add.w	r0, r4, #10
 801bd50:	3a01      	subs	r2, #1
 801bd52:	3101      	adds	r1, #1
 801bd54:	4428      	add	r0, r5
 801bd56:	f00a ff21 	bl	8026b9c <memmove>
 801bd5a:	8862      	ldrh	r2, [r4, #2]
 801bd5c:	2301      	movs	r3, #1
 801bd5e:	fa03 f308 	lsl.w	r3, r3, r8
 801bd62:	4313      	orrs	r3, r2
 801bd64:	8063      	strh	r3, [r4, #2]
 801bd66:	e7bd      	b.n	801bce4 <MobleSARJoin+0x58>
 801bd68:	2800      	cmp	r0, #0
 801bd6a:	d0ce      	beq.n	801bd0a <MobleSARJoin+0x7e>
 801bd6c:	e79f      	b.n	801bcae <MobleSARJoin+0x22>
 801bd6e:	2003      	movs	r0, #3
 801bd70:	e79e      	b.n	801bcb0 <MobleSARJoin+0x24>
	...

0801bd74 <MobleProvisionCalculateFCS>:
 801bd74:	b510      	push	{r4, lr}
 801bd76:	4a07      	ldr	r2, [pc, #28]	@ (801bd94 <MobleProvisionCalculateFCS+0x20>)
 801bd78:	4401      	add	r1, r0
 801bd7a:	23ff      	movs	r3, #255	@ 0xff
 801bd7c:	4288      	cmp	r0, r1
 801bd7e:	d102      	bne.n	801bd86 <MobleProvisionCalculateFCS+0x12>
 801bd80:	43d8      	mvns	r0, r3
 801bd82:	b2c0      	uxtb	r0, r0
 801bd84:	bd10      	pop	{r4, pc}
 801bd86:	f810 4b01 	ldrb.w	r4, [r0], #1
 801bd8a:	4063      	eors	r3, r4
 801bd8c:	4413      	add	r3, r2
 801bd8e:	f893 3403 	ldrb.w	r3, [r3, #1027]	@ 0x403
 801bd92:	e7f3      	b.n	801bd7c <MobleProvisionCalculateFCS+0x8>
 801bd94:	0802cac0 	.word	0x0802cac0

0801bd98 <MobleSARSplit>:
 801bd98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd9c:	297f      	cmp	r1, #127	@ 0x7f
 801bd9e:	f89d c030 	ldrb.w	ip, [sp, #48]	@ 0x30
 801bda2:	4680      	mov	r8, r0
 801bda4:	460e      	mov	r6, r1
 801bda6:	4617      	mov	r7, r2
 801bda8:	461c      	mov	r4, r3
 801bdaa:	dd03      	ble.n	801bdb4 <MobleSARSplit+0x1c>
 801bdac:	2003      	movs	r0, #3
 801bdae:	b003      	add	sp, #12
 801bdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdb4:	2900      	cmp	r1, #0
 801bdb6:	d0f9      	beq.n	801bdac <MobleSARSplit+0x14>
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	d0f7      	beq.n	801bdac <MobleSARSplit+0x14>
 801bdbc:	fa1f fa82 	uxth.w	sl, r2
 801bdc0:	1d35      	adds	r5, r6, #4
 801bdc2:	f8a3 a004 	strh.w	sl, [r3, #4]
 801bdc6:	42aa      	cmp	r2, r5
 801bdc8:	f04f 0300 	mov.w	r3, #0
 801bdcc:	f3c1 2e07 	ubfx	lr, r1, #8, #8
 801bdd0:	8123      	strh	r3, [r4, #8]
 801bdd2:	b2c9      	uxtb	r1, r1
 801bdd4:	db19      	blt.n	801be0a <MobleSARSplit+0x72>
 801bdd6:	2201      	movs	r2, #1
 801bdd8:	4594      	cmp	ip, r2
 801bdda:	7022      	strb	r2, [r4, #0]
 801bddc:	72a3      	strb	r3, [r4, #10]
 801bdde:	f884 e00b 	strb.w	lr, [r4, #11]
 801bde2:	7321      	strb	r1, [r4, #12]
 801bde4:	d10f      	bne.n	801be06 <MobleSARSplit+0x6e>
 801bde6:	f7ff ffc5 	bl	801bd74 <MobleProvisionCalculateFCS>
 801bdea:	2e7c      	cmp	r6, #124	@ 0x7c
 801bdec:	7360      	strb	r0, [r4, #13]
 801bdee:	dcdd      	bgt.n	801bdac <MobleSARSplit+0x14>
 801bdf0:	4632      	mov	r2, r6
 801bdf2:	4641      	mov	r1, r8
 801bdf4:	f104 000e 	add.w	r0, r4, #14
 801bdf8:	f00a fed0 	bl	8026b9c <memmove>
 801bdfc:	2301      	movs	r3, #1
 801bdfe:	8125      	strh	r5, [r4, #8]
 801be00:	8063      	strh	r3, [r4, #2]
 801be02:	2000      	movs	r0, #0
 801be04:	e7d3      	b.n	801bdae <MobleSARSplit+0x16>
 801be06:	4618      	mov	r0, r3
 801be08:	e7ef      	b.n	801bdea <MobleSARSplit+0x52>
 801be0a:	f102 39ff 	add.w	r9, r2, #4294967295
 801be0e:	1cb2      	adds	r2, r6, #2
 801be10:	fb92 f2f9 	sdiv	r2, r2, r9
 801be14:	b2d2      	uxtb	r2, r2
 801be16:	1c55      	adds	r5, r2, #1
 801be18:	f1bc 0f01 	cmp.w	ip, #1
 801be1c:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801be20:	7025      	strb	r5, [r4, #0]
 801be22:	72a2      	strb	r2, [r4, #10]
 801be24:	f884 e00b 	strb.w	lr, [r4, #11]
 801be28:	7321      	strb	r1, [r4, #12]
 801be2a:	d141      	bne.n	801beb0 <MobleSARSplit+0x118>
 801be2c:	f7ff ffa2 	bl	801bd74 <MobleProvisionCalculateFCS>
 801be30:	2f80      	cmp	r7, #128	@ 0x80
 801be32:	7360      	strb	r0, [r4, #13]
 801be34:	dcba      	bgt.n	801bdac <MobleSARSplit+0x14>
 801be36:	f1a7 0b04 	sub.w	fp, r7, #4
 801be3a:	465a      	mov	r2, fp
 801be3c:	4641      	mov	r1, r8
 801be3e:	f104 000e 	add.w	r0, r4, #14
 801be42:	f00a feab 	bl	8026b9c <memmove>
 801be46:	2501      	movs	r5, #1
 801be48:	f104 030a 	add.w	r3, r4, #10
 801be4c:	f8a4 a008 	strh.w	sl, [r4, #8]
 801be50:	8065      	strh	r5, [r4, #2]
 801be52:	9301      	str	r3, [sp, #4]
 801be54:	7821      	ldrb	r1, [r4, #0]
 801be56:	428d      	cmp	r5, r1
 801be58:	d2d3      	bcs.n	801be02 <MobleSARSplit+0x6a>
 801be5a:	fb05 f007 	mul.w	r0, r5, r7
 801be5e:	eb04 0c00 	add.w	ip, r4, r0
 801be62:	00aa      	lsls	r2, r5, #2
 801be64:	f042 0202 	orr.w	r2, r2, #2
 801be68:	f88c 200a 	strb.w	r2, [ip, #10]
 801be6c:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 801be70:	2301      	movs	r3, #1
 801be72:	fa03 f205 	lsl.w	r2, r3, r5
 801be76:	3901      	subs	r1, #1
 801be78:	ea42 020c 	orr.w	r2, r2, ip
 801be7c:	428d      	cmp	r5, r1
 801be7e:	8062      	strh	r2, [r4, #2]
 801be80:	d118      	bne.n	801beb4 <MobleSARSplit+0x11c>
 801be82:	eba6 020b 	sub.w	r2, r6, fp
 801be86:	18d1      	adds	r1, r2, r3
 801be88:	4401      	add	r1, r0
 801be8a:	2980      	cmp	r1, #128	@ 0x80
 801be8c:	d88e      	bhi.n	801bdac <MobleSARSplit+0x14>
 801be8e:	4418      	add	r0, r3
 801be90:	9b01      	ldr	r3, [sp, #4]
 801be92:	eb08 010b 	add.w	r1, r8, fp
 801be96:	4418      	add	r0, r3
 801be98:	f00a fe80 	bl	8026b9c <memmove>
 801be9c:	8922      	ldrh	r2, [r4, #8]
 801be9e:	3201      	adds	r2, #1
 801bea0:	4432      	add	r2, r6
 801bea2:	eba2 020b 	sub.w	r2, r2, fp
 801bea6:	b292      	uxth	r2, r2
 801bea8:	3501      	adds	r5, #1
 801beaa:	8122      	strh	r2, [r4, #8]
 801beac:	b2ed      	uxtb	r5, r5
 801beae:	e7d1      	b.n	801be54 <MobleSARSplit+0xbc>
 801beb0:	4618      	mov	r0, r3
 801beb2:	e7bd      	b.n	801be30 <MobleSARSplit+0x98>
 801beb4:	3001      	adds	r0, #1
 801beb6:	eb00 0209 	add.w	r2, r0, r9
 801beba:	2a80      	cmp	r2, #128	@ 0x80
 801bebc:	f73f af76 	bgt.w	801bdac <MobleSARSplit+0x14>
 801bec0:	9b01      	ldr	r3, [sp, #4]
 801bec2:	464a      	mov	r2, r9
 801bec4:	eb08 010b 	add.w	r1, r8, fp
 801bec8:	4418      	add	r0, r3
 801beca:	f00a fe67 	bl	8026b9c <memmove>
 801bece:	8922      	ldrh	r2, [r4, #8]
 801bed0:	44cb      	add	fp, r9
 801bed2:	4452      	add	r2, sl
 801bed4:	e7e7      	b.n	801bea6 <MobleSARSplit+0x10e>

0801bed6 <MobleProvisionUpdateRole>:
 801bed6:	6803      	ldr	r3, [r0, #0]
 801bed8:	781b      	ldrb	r3, [r3, #0]
 801beda:	2b01      	cmp	r3, #1
 801bedc:	d106      	bne.n	801beec <MobleProvisionUpdateRole+0x16>
 801bede:	f890 31f8 	ldrb.w	r3, [r0, #504]	@ 0x1f8
 801bee2:	b113      	cbz	r3, 801beea <MobleProvisionUpdateRole+0x14>
 801bee4:	2302      	movs	r3, #2
 801bee6:	f880 31f8 	strb.w	r3, [r0, #504]	@ 0x1f8
 801beea:	4770      	bx	lr
 801beec:	2301      	movs	r3, #1
 801beee:	e7fa      	b.n	801bee6 <MobleProvisionUpdateRole+0x10>

0801bef0 <MobleProvisionProvisionerInit>:
 801bef0:	b510      	push	{r4, lr}
 801bef2:	b928      	cbnz	r0, 801bf00 <MobleProvisionProvisionerInit+0x10>
 801bef4:	4b10      	ldr	r3, [pc, #64]	@ (801bf38 <MobleProvisionProvisionerInit+0x48>)
 801bef6:	4a11      	ldr	r2, [pc, #68]	@ (801bf3c <MobleProvisionProvisionerInit+0x4c>)
 801bef8:	4811      	ldr	r0, [pc, #68]	@ (801bf40 <MobleProvisionProvisionerInit+0x50>)
 801befa:	212e      	movs	r1, #46	@ 0x2e
 801befc:	f009 feca 	bl	8025c94 <__assert_func>
 801bf00:	f890 41f8 	ldrb.w	r4, [r0, #504]	@ 0x1f8
 801bf04:	2c01      	cmp	r4, #1
 801bf06:	d014      	beq.n	801bf32 <MobleProvisionProvisionerInit+0x42>
 801bf08:	e9c0 23a0 	strd	r2, r3, [r0, #640]	@ 0x280
 801bf0c:	9b02      	ldr	r3, [sp, #8]
 801bf0e:	f8c0 3288 	str.w	r3, [r0, #648]	@ 0x288
 801bf12:	9b03      	ldr	r3, [sp, #12]
 801bf14:	f8c0 328c 	str.w	r3, [r0, #652]	@ 0x28c
 801bf18:	9b04      	ldr	r3, [sp, #16]
 801bf1a:	f8c0 3290 	str.w	r3, [r0, #656]	@ 0x290
 801bf1e:	2400      	movs	r4, #0
 801bf20:	2301      	movs	r3, #1
 801bf22:	f880 41f8 	strb.w	r4, [r0, #504]	@ 0x1f8
 801bf26:	f880 1294 	strb.w	r1, [r0, #660]	@ 0x294
 801bf2a:	f8a0 3296 	strh.w	r3, [r0, #662]	@ 0x296
 801bf2e:	4620      	mov	r0, r4
 801bf30:	bd10      	pop	{r4, pc}
 801bf32:	2002      	movs	r0, #2
 801bf34:	e7fc      	b.n	801bf30 <MobleProvisionProvisionerInit+0x40>
 801bf36:	bf00      	nop
 801bf38:	0802eb19 	.word	0x0802eb19
 801bf3c:	0802cfc3 	.word	0x0802cfc3
 801bf40:	0802eb29 	.word	0x0802eb29

0801bf44 <MobleLibraryInitProvisioner>:
 801bf44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bf46:	9c07      	ldr	r4, [sp, #28]
 801bf48:	9402      	str	r4, [sp, #8]
 801bf4a:	9c06      	ldr	r4, [sp, #24]
 801bf4c:	e9cd 3400 	strd	r3, r4, [sp]
 801bf50:	4613      	mov	r3, r2
 801bf52:	460a      	mov	r2, r1
 801bf54:	4601      	mov	r1, r0
 801bf56:	4803      	ldr	r0, [pc, #12]	@ (801bf64 <MobleLibraryInitProvisioner+0x20>)
 801bf58:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	@ 0x6f0
 801bf5c:	f7ff ffc8 	bl	801bef0 <MobleProvisionProvisionerInit>
 801bf60:	b004      	add	sp, #16
 801bf62:	bd10      	pop	{r4, pc}
 801bf64:	20002514 	.word	0x20002514

0801bf68 <BLEMesh_InitProvisionedNode>:
 801bf68:	b507      	push	{r0, r1, r2, lr}
 801bf6a:	4b07      	ldr	r3, [pc, #28]	@ (801bf88 <BLEMesh_InitProvisionedNode+0x20>)
 801bf6c:	4907      	ldr	r1, [pc, #28]	@ (801bf8c <BLEMesh_InitProvisionedNode+0x24>)
 801bf6e:	681a      	ldr	r2, [r3, #0]
 801bf70:	4b07      	ldr	r3, [pc, #28]	@ (801bf90 <BLEMesh_InitProvisionedNode+0x28>)
 801bf72:	9301      	str	r3, [sp, #4]
 801bf74:	4b07      	ldr	r3, [pc, #28]	@ (801bf94 <BLEMesh_InitProvisionedNode+0x2c>)
 801bf76:	9300      	str	r3, [sp, #0]
 801bf78:	6a13      	ldr	r3, [r2, #32]
 801bf7a:	6992      	ldr	r2, [r2, #24]
 801bf7c:	2005      	movs	r0, #5
 801bf7e:	f7ff ffe1 	bl	801bf44 <MobleLibraryInitProvisioner>
 801bf82:	b003      	add	sp, #12
 801bf84:	f85d fb04 	ldr.w	pc, [sp], #4
 801bf88:	20000324 	.word	0x20000324
 801bf8c:	08014b45 	.word	0x08014b45
 801bf90:	08014b35 	.word	0x08014b35
 801bf94:	08014b51 	.word	0x08014b51

0801bf98 <MobleProvisionUnprovisionedInitEx>:
 801bf98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf9c:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801bfa0:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801bfa4:	f8bd 7038 	ldrh.w	r7, [sp, #56]	@ 0x38
 801bfa8:	f89d 8040 	ldrb.w	r8, [sp, #64]	@ 0x40
 801bfac:	f8bd 9044 	ldrh.w	r9, [sp, #68]	@ 0x44
 801bfb0:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 801bfb4:	e9dd cb0a 	ldrd	ip, fp, [sp, #40]	@ 0x28
 801bfb8:	4604      	mov	r4, r0
 801bfba:	b928      	cbnz	r0, 801bfc8 <MobleProvisionUnprovisionedInitEx+0x30>
 801bfbc:	4b30      	ldr	r3, [pc, #192]	@ (801c080 <MobleProvisionUnprovisionedInitEx+0xe8>)
 801bfbe:	4a31      	ldr	r2, [pc, #196]	@ (801c084 <MobleProvisionUnprovisionedInitEx+0xec>)
 801bfc0:	4831      	ldr	r0, [pc, #196]	@ (801c088 <MobleProvisionUnprovisionedInitEx+0xf0>)
 801bfc2:	215f      	movs	r1, #95	@ 0x5f
 801bfc4:	f009 fe66 	bl	8025c94 <__assert_func>
 801bfc8:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 801bfcc:	f8c0 1290 	str.w	r1, [r0, #656]	@ 0x290
 801bfd0:	f880 31fe 	strb.w	r3, [r0, #510]	@ 0x1fe
 801bfd4:	f880 2200 	strb.w	r2, [r0, #512]	@ 0x200
 801bfd8:	b1a3      	cbz	r3, 801c004 <MobleProvisionUnprovisionedInitEx+0x6c>
 801bfda:	f1bc 0f00 	cmp.w	ip, #0
 801bfde:	d102      	bne.n	801bfe6 <MobleProvisionUnprovisionedInitEx+0x4e>
 801bfe0:	2003      	movs	r0, #3
 801bfe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfe6:	f1bb 0f00 	cmp.w	fp, #0
 801bfea:	d0f9      	beq.n	801bfe0 <MobleProvisionUnprovisionedInitEx+0x48>
 801bfec:	2240      	movs	r2, #64	@ 0x40
 801bfee:	4661      	mov	r1, ip
 801bff0:	f500 7002 	add.w	r0, r0, #520	@ 0x208
 801bff4:	f00a fdd2 	bl	8026b9c <memmove>
 801bff8:	2220      	movs	r2, #32
 801bffa:	4659      	mov	r1, fp
 801bffc:	f504 7012 	add.w	r0, r4, #584	@ 0x248
 801c000:	f00a fdcc 	bl	8026b9c <memmove>
 801c004:	b35d      	cbz	r5, 801c05e <MobleProvisionUnprovisionedInitEx+0xc6>
 801c006:	b36f      	cbz	r7, 801c064 <MobleProvisionUnprovisionedInitEx+0xcc>
 801c008:	2d08      	cmp	r5, #8
 801c00a:	d8e9      	bhi.n	801bfe0 <MobleProvisionUnprovisionedInitEx+0x48>
 801c00c:	f884 5206 	strb.w	r5, [r4, #518]	@ 0x206
 801c010:	f8a4 7202 	strh.w	r7, [r4, #514]	@ 0x202
 801c014:	f8c4 a294 	str.w	sl, [r4, #660]	@ 0x294
 801c018:	b33e      	cbz	r6, 801c06a <MobleProvisionUnprovisionedInitEx+0xd2>
 801c01a:	2e10      	cmp	r6, #16
 801c01c:	d8e0      	bhi.n	801bfe0 <MobleProvisionUnprovisionedInitEx+0x48>
 801c01e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c020:	2b00      	cmp	r3, #0
 801c022:	d0dd      	beq.n	801bfe0 <MobleProvisionUnprovisionedInitEx+0x48>
 801c024:	2301      	movs	r3, #1
 801c026:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801c028:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
 801c02c:	f884 627e 	strb.w	r6, [r4, #638]	@ 0x27e
 801c030:	4632      	mov	r2, r6
 801c032:	f204 207f 	addw	r0, r4, #639	@ 0x27f
 801c036:	f00a fdb1 	bl	8026b9c <memmove>
 801c03a:	f1b8 0f00 	cmp.w	r8, #0
 801c03e:	d017      	beq.n	801c070 <MobleProvisionUnprovisionedInitEx+0xd8>
 801c040:	f1b9 0f00 	cmp.w	r9, #0
 801c044:	d014      	beq.n	801c070 <MobleProvisionUnprovisionedInitEx+0xd8>
 801c046:	f1b8 0f08 	cmp.w	r8, #8
 801c04a:	d8c9      	bhi.n	801bfe0 <MobleProvisionUnprovisionedInitEx+0x48>
 801c04c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c04e:	f884 8207 	strb.w	r8, [r4, #519]	@ 0x207
 801c052:	f8a4 9204 	strh.w	r9, [r4, #516]	@ 0x204
 801c056:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
 801c05a:	2000      	movs	r0, #0
 801c05c:	e7c1      	b.n	801bfe2 <MobleProvisionUnprovisionedInitEx+0x4a>
 801c05e:	462f      	mov	r7, r5
 801c060:	46aa      	mov	sl, r5
 801c062:	e7d3      	b.n	801c00c <MobleProvisionUnprovisionedInitEx+0x74>
 801c064:	463d      	mov	r5, r7
 801c066:	46ba      	mov	sl, r7
 801c068:	e7d0      	b.n	801c00c <MobleProvisionUnprovisionedInitEx+0x74>
 801c06a:	f884 627e 	strb.w	r6, [r4, #638]	@ 0x27e
 801c06e:	e7e4      	b.n	801c03a <MobleProvisionUnprovisionedInitEx+0xa2>
 801c070:	2000      	movs	r0, #0
 801c072:	f884 0207 	strb.w	r0, [r4, #519]	@ 0x207
 801c076:	f8a4 0204 	strh.w	r0, [r4, #516]	@ 0x204
 801c07a:	f8c4 0298 	str.w	r0, [r4, #664]	@ 0x298
 801c07e:	e7b0      	b.n	801bfe2 <MobleProvisionUnprovisionedInitEx+0x4a>
 801c080:	0802eb19 	.word	0x0802eb19
 801c084:	0802cfe1 	.word	0x0802cfe1
 801c088:	0802eb29 	.word	0x0802eb29

0801c08c <MobleLibraryInitUnprovisioned>:
 801c08c:	b510      	push	{r4, lr}
 801c08e:	b08c      	sub	sp, #48	@ 0x30
 801c090:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801c092:	940a      	str	r4, [sp, #40]	@ 0x28
 801c094:	f89d 4058 	ldrb.w	r4, [sp, #88]	@ 0x58
 801c098:	9409      	str	r4, [sp, #36]	@ 0x24
 801c09a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c09c:	9408      	str	r4, [sp, #32]
 801c09e:	f8bd 4050 	ldrh.w	r4, [sp, #80]	@ 0x50
 801c0a2:	9407      	str	r4, [sp, #28]
 801c0a4:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801c0a8:	9406      	str	r4, [sp, #24]
 801c0aa:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c0ac:	9405      	str	r4, [sp, #20]
 801c0ae:	f8bd 4044 	ldrh.w	r4, [sp, #68]	@ 0x44
 801c0b2:	9404      	str	r4, [sp, #16]
 801c0b4:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801c0b8:	9403      	str	r4, [sp, #12]
 801c0ba:	f89d 403c 	ldrb.w	r4, [sp, #60]	@ 0x3c
 801c0be:	9402      	str	r4, [sp, #8]
 801c0c0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c0c2:	e9cd 3400 	strd	r3, r4, [sp]
 801c0c6:	4613      	mov	r3, r2
 801c0c8:	460a      	mov	r2, r1
 801c0ca:	4601      	mov	r1, r0
 801c0cc:	4803      	ldr	r0, [pc, #12]	@ (801c0dc <MobleLibraryInitUnprovisioned+0x50>)
 801c0ce:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	@ 0x6f0
 801c0d2:	f7ff ff61 	bl	801bf98 <MobleProvisionUnprovisionedInitEx>
 801c0d6:	b00c      	add	sp, #48	@ 0x30
 801c0d8:	bd10      	pop	{r4, pc}
 801c0da:	bf00      	nop
 801c0dc:	20002514 	.word	0x20002514

0801c0e0 <BLEMesh_InitUnprovisionedNode>:
 801c0e0:	b500      	push	{lr}
 801c0e2:	4b10      	ldr	r3, [pc, #64]	@ (801c124 <BLEMesh_InitUnprovisionedNode+0x44>)
 801c0e4:	4810      	ldr	r0, [pc, #64]	@ (801c128 <BLEMesh_InitUnprovisionedNode+0x48>)
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	b08b      	sub	sp, #44	@ 0x2c
 801c0ea:	6919      	ldr	r1, [r3, #16]
 801c0ec:	781a      	ldrb	r2, [r3, #0]
 801c0ee:	9109      	str	r1, [sp, #36]	@ 0x24
 801c0f0:	7b59      	ldrb	r1, [r3, #13]
 801c0f2:	9108      	str	r1, [sp, #32]
 801c0f4:	6a19      	ldr	r1, [r3, #32]
 801c0f6:	9107      	str	r1, [sp, #28]
 801c0f8:	7f59      	ldrb	r1, [r3, #29]
 801c0fa:	9106      	str	r1, [sp, #24]
 801c0fc:	7f19      	ldrb	r1, [r3, #28]
 801c0fe:	9105      	str	r1, [sp, #20]
 801c100:	6999      	ldr	r1, [r3, #24]
 801c102:	9104      	str	r1, [sp, #16]
 801c104:	7d59      	ldrb	r1, [r3, #21]
 801c106:	9103      	str	r1, [sp, #12]
 801c108:	7d19      	ldrb	r1, [r3, #20]
 801c10a:	9102      	str	r1, [sp, #8]
 801c10c:	7b19      	ldrb	r1, [r3, #12]
 801c10e:	9101      	str	r1, [sp, #4]
 801c110:	6899      	ldr	r1, [r3, #8]
 801c112:	9100      	str	r1, [sp, #0]
 801c114:	685b      	ldr	r3, [r3, #4]
 801c116:	2100      	movs	r1, #0
 801c118:	f7ff ffb8 	bl	801c08c <MobleLibraryInitUnprovisioned>
 801c11c:	b00b      	add	sp, #44	@ 0x2c
 801c11e:	f85d fb04 	ldr.w	pc, [sp], #4
 801c122:	bf00      	nop
 801c124:	20000324 	.word	0x20000324
 801c128:	08014b5d 	.word	0x08014b5d

0801c12c <MobleConfigNetworkInvalidate>:
 801c12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c130:	4606      	mov	r6, r0
 801c132:	2800      	cmp	r0, #0
 801c134:	d04a      	beq.n	801c1cc <MobleConfigNetworkInvalidate+0xa0>
 801c136:	4f26      	ldr	r7, [pc, #152]	@ (801c1d0 <MobleConfigNetworkInvalidate+0xa4>)
 801c138:	f507 5580 	add.w	r5, r7, #4096	@ 0x1000
 801c13c:	f895 479c 	ldrb.w	r4, [r5, #1948]	@ 0x79c
 801c140:	bbe4      	cbnz	r4, 801c1bc <MobleConfigNetworkInvalidate+0x90>
 801c142:	2301      	movs	r3, #1
 801c144:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 801c148:	4621      	mov	r1, r4
 801c14a:	f205 507a 	addw	r0, r5, #1402	@ 0x57a
 801c14e:	f885 379d 	strb.w	r3, [r5, #1949]	@ 0x79d
 801c152:	f8a7 4962 	strh.w	r4, [r7, #2402]	@ 0x962
 801c156:	f00a fd3b 	bl	8026bd0 <memset>
 801c15a:	2284      	movs	r2, #132	@ 0x84
 801c15c:	4621      	mov	r1, r4
 801c15e:	f205 60ee 	addw	r0, r5, #1774	@ 0x6ee
 801c162:	f00a fd35 	bl	8026bd0 <memset>
 801c166:	2210      	movs	r2, #16
 801c168:	4621      	mov	r1, r4
 801c16a:	f205 7074 	addw	r0, r5, #1908	@ 0x774
 801c16e:	f00a fd2f 	bl	8026bd0 <memset>
 801c172:	f205 596f 	addw	r9, r5, #1391	@ 0x56f
 801c176:	f8a5 4772 	strh.w	r4, [r5, #1906]	@ 0x772
 801c17a:	f8a5 4784 	strh.w	r4, [r5, #1924]	@ 0x784
 801c17e:	46a0      	mov	r8, r4
 801c180:	f607 1768 	addw	r7, r7, #2408	@ 0x968
 801c184:	f809 8f01 	strb.w	r8, [r9, #1]!
 801c188:	1938      	adds	r0, r7, r4
 801c18a:	f889 8005 	strb.w	r8, [r9, #5]
 801c18e:	f44f 721a 	mov.w	r2, #616	@ 0x268
 801c192:	2100      	movs	r1, #0
 801c194:	f00a fd1c 	bl	8026bd0 <memset>
 801c198:	f504 741a 	add.w	r4, r4, #616	@ 0x268
 801c19c:	f640 4308 	movw	r3, #3080	@ 0xc08
 801c1a0:	429c      	cmp	r4, r3
 801c1a2:	d1ef      	bne.n	801c184 <MobleConfigNetworkInvalidate+0x58>
 801c1a4:	f885 87a8 	strb.w	r8, [r5, #1960]	@ 0x7a8
 801c1a8:	f7fd fd16 	bl	8019bd8 <MobleConfigNetworkEncode>
 801c1ac:	f7fd fe46 	bl	8019e3c <MobleConfigSavedSeqEncode>
 801c1b0:	f7fd fbec 	bl	801998c <MobleConfigSave>
 801c1b4:	2801      	cmp	r0, #1
 801c1b6:	d807      	bhi.n	801c1c8 <MobleConfigNetworkInvalidate+0x9c>
 801c1b8:	f885 879d 	strb.w	r8, [r5, #1949]	@ 0x79d
 801c1bc:	f7ff ff90 	bl	801c0e0 <BLEMesh_InitUnprovisionedNode>
 801c1c0:	2300      	movs	r3, #0
 801c1c2:	7033      	strb	r3, [r6, #0]
 801c1c4:	8073      	strh	r3, [r6, #2]
 801c1c6:	4618      	mov	r0, r3
 801c1c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c1cc:	2003      	movs	r0, #3
 801c1ce:	e7fb      	b.n	801c1c8 <MobleConfigNetworkInvalidate+0x9c>
 801c1d0:	2000141c 	.word	0x2000141c

0801c1d4 <MobleProvisionGetRole>:
 801c1d4:	b508      	push	{r3, lr}
 801c1d6:	b928      	cbnz	r0, 801c1e4 <MobleProvisionGetRole+0x10>
 801c1d8:	4b04      	ldr	r3, [pc, #16]	@ (801c1ec <MobleProvisionGetRole+0x18>)
 801c1da:	4a05      	ldr	r2, [pc, #20]	@ (801c1f0 <MobleProvisionGetRole+0x1c>)
 801c1dc:	4805      	ldr	r0, [pc, #20]	@ (801c1f4 <MobleProvisionGetRole+0x20>)
 801c1de:	21b2      	movs	r1, #178	@ 0xb2
 801c1e0:	f009 fd58 	bl	8025c94 <__assert_func>
 801c1e4:	f890 01f8 	ldrb.w	r0, [r0, #504]	@ 0x1f8
 801c1e8:	bd08      	pop	{r3, pc}
 801c1ea:	bf00      	nop
 801c1ec:	0802eb21 	.word	0x0802eb21
 801c1f0:	0802d003 	.word	0x0802d003
 801c1f4:	0802eb29 	.word	0x0802eb29

0801c1f8 <BLEMesh_IsUnprovisioned>:
 801c1f8:	b508      	push	{r3, lr}
 801c1fa:	4b04      	ldr	r3, [pc, #16]	@ (801c20c <BLEMesh_IsUnprovisioned+0x14>)
 801c1fc:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 801c200:	f7ff ffe8 	bl	801c1d4 <MobleProvisionGetRole>
 801c204:	1e43      	subs	r3, r0, #1
 801c206:	4258      	negs	r0, r3
 801c208:	4158      	adcs	r0, r3
 801c20a:	bd08      	pop	{r3, pc}
 801c20c:	20002514 	.word	0x20002514

0801c210 <MoblePalBluetoothReset>:
 801c210:	b570      	push	{r4, r5, r6, lr}
 801c212:	b088      	sub	sp, #32
 801c214:	f7f6 fb71 	bl	80128fa <hci_reset>
 801c218:	2515      	movs	r5, #21
 801c21a:	4604      	mov	r4, r0
 801c21c:	b1bc      	cbz	r4, 801c24e <MoblePalBluetoothReset+0x3e>
 801c21e:	3d01      	subs	r5, #1
 801c220:	d103      	bne.n	801c22a <MoblePalBluetoothReset+0x1a>
 801c222:	462c      	mov	r4, r5
 801c224:	4620      	mov	r0, r4
 801c226:	b008      	add	sp, #32
 801c228:	bd70      	pop	{r4, r5, r6, pc}
 801c22a:	f7f6 fb66 	bl	80128fa <hci_reset>
 801c22e:	4604      	mov	r4, r0
 801c230:	e7f4      	b.n	801c21c <MoblePalBluetoothReset+0xc>
 801c232:	2b01      	cmp	r3, #1
 801c234:	d11a      	bne.n	801c26c <MoblePalBluetoothReset+0x5c>
 801c236:	f505 7257 	add.w	r2, r5, #860	@ 0x35c
 801c23a:	2106      	movs	r1, #6
 801c23c:	202e      	movs	r0, #46	@ 0x2e
 801c23e:	e011      	b.n	801c264 <MoblePalBluetoothReset+0x54>
 801c240:	4798      	blx	r3
 801c242:	2801      	cmp	r0, #1
 801c244:	d959      	bls.n	801c2fa <MoblePalBluetoothReset+0xea>
 801c246:	e7ed      	b.n	801c224 <MoblePalBluetoothReset+0x14>
 801c248:	4b31      	ldr	r3, [pc, #196]	@ (801c310 <MoblePalBluetoothReset+0x100>)
 801c24a:	7018      	strb	r0, [r3, #0]
 801c24c:	e7ea      	b.n	801c224 <MoblePalBluetoothReset+0x14>
 801c24e:	4d31      	ldr	r5, [pc, #196]	@ (801c314 <MoblePalBluetoothReset+0x104>)
 801c250:	f7fc f82c 	bl	80182ac <MoblePalBluetoothFreeAllNotifications>
 801c254:	f895 3363 	ldrb.w	r3, [r5, #867]	@ 0x363
 801c258:	2b03      	cmp	r3, #3
 801c25a:	d1ea      	bne.n	801c232 <MoblePalBluetoothReset+0x22>
 801c25c:	f505 7257 	add.w	r2, r5, #860	@ 0x35c
 801c260:	2106      	movs	r1, #6
 801c262:	4620      	mov	r0, r4
 801c264:	f7f6 f984 	bl	8012570 <aci_hal_write_config_data>
 801c268:	2800      	cmp	r0, #0
 801c26a:	d1db      	bne.n	801c224 <MoblePalBluetoothReset+0x14>
 801c26c:	4b2a      	ldr	r3, [pc, #168]	@ (801c318 <MoblePalBluetoothReset+0x108>)
 801c26e:	685b      	ldr	r3, [r3, #4]
 801c270:	685b      	ldr	r3, [r3, #4]
 801c272:	4798      	blx	r3
 801c274:	2800      	cmp	r0, #0
 801c276:	d1d5      	bne.n	801c224 <MoblePalBluetoothReset+0x14>
 801c278:	f7f5 fcf9 	bl	8011c6e <aci_gatt_init>
 801c27c:	4601      	mov	r1, r0
 801c27e:	2800      	cmp	r0, #0
 801c280:	d1d0      	bne.n	801c224 <MoblePalBluetoothReset+0x14>
 801c282:	f10d 0312 	add.w	r3, sp, #18
 801c286:	9301      	str	r3, [sp, #4]
 801c288:	f10d 0316 	add.w	r3, sp, #22
 801c28c:	9300      	str	r3, [sp, #0]
 801c28e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c292:	f895 2364 	ldrb.w	r2, [r5, #868]	@ 0x364
 801c296:	ab05      	add	r3, sp, #20
 801c298:	200b      	movs	r0, #11
 801c29a:	f7f5 fad5 	bl	8011848 <aci_gap_init>
 801c29e:	4606      	mov	r6, r0
 801c2a0:	2800      	cmp	r0, #0
 801c2a2:	d1bf      	bne.n	801c224 <MoblePalBluetoothReset+0x14>
 801c2a4:	f895 3364 	ldrb.w	r3, [r5, #868]	@ 0x364
 801c2a8:	b193      	cbz	r3, 801c2d0 <MoblePalBluetoothReset+0xc0>
 801c2aa:	f8d5 3368 	ldr.w	r3, [r5, #872]	@ 0x368
 801c2ae:	f895 2364 	ldrb.w	r2, [r5, #868]	@ 0x364
 801c2b2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801c2b6:	3302      	adds	r3, #2
 801c2b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c2bc:	2300      	movs	r3, #0
 801c2be:	e9cd 2600 	strd	r2, r6, [sp]
 801c2c2:	4618      	mov	r0, r3
 801c2c4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c2c8:	f7f6 f88f 	bl	80123ea <aci_gatt_update_char_value_ext>
 801c2cc:	2893      	cmp	r0, #147	@ 0x93
 801c2ce:	d0ec      	beq.n	801c2aa <MoblePalBluetoothReset+0x9a>
 801c2d0:	f895 3363 	ldrb.w	r3, [r5, #867]	@ 0x363
 801c2d4:	2b01      	cmp	r3, #1
 801c2d6:	d10c      	bne.n	801c2f2 <MoblePalBluetoothReset+0xe2>
 801c2d8:	aa06      	add	r2, sp, #24
 801c2da:	f10d 011f 	add.w	r1, sp, #31
 801c2de:	202e      	movs	r0, #46	@ 0x2e
 801c2e0:	f7f6 f9cb 	bl	801267a <aci_hal_read_config_data>
 801c2e4:	4b0d      	ldr	r3, [pc, #52]	@ (801c31c <MoblePalBluetoothReset+0x10c>)
 801c2e6:	9806      	ldr	r0, [sp, #24]
 801c2e8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801c2ec:	f8c5 035c 	str.w	r0, [r5, #860]	@ 0x35c
 801c2f0:	809a      	strh	r2, [r3, #4]
 801c2f2:	f8d5 3374 	ldr.w	r3, [r5, #884]	@ 0x374
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d1a2      	bne.n	801c240 <MoblePalBluetoothReset+0x30>
 801c2fa:	2300      	movs	r3, #0
 801c2fc:	f8c5 3354 	str.w	r3, [r5, #852]	@ 0x354
 801c300:	f7ff ff7a 	bl	801c1f8 <BLEMesh_IsUnprovisioned>
 801c304:	2801      	cmp	r0, #1
 801c306:	4604      	mov	r4, r0
 801c308:	d09e      	beq.n	801c248 <MoblePalBluetoothReset+0x38>
 801c30a:	2401      	movs	r4, #1
 801c30c:	e78a      	b.n	801c224 <MoblePalBluetoothReset+0x14>
 801c30e:	bf00      	nop
 801c310:	2000459d 	.word	0x2000459d
 801c314:	2000141c 	.word	0x2000141c
 801c318:	20000324 	.word	0x20000324
 801c31c:	20001778 	.word	0x20001778

0801c320 <MobleProvisionGenerateAuthValue>:
 801c320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c322:	4605      	mov	r5, r0
 801c324:	b928      	cbnz	r0, 801c332 <MobleProvisionGenerateAuthValue+0x12>
 801c326:	4b1e      	ldr	r3, [pc, #120]	@ (801c3a0 <MobleProvisionGenerateAuthValue+0x80>)
 801c328:	4a1e      	ldr	r2, [pc, #120]	@ (801c3a4 <MobleProvisionGenerateAuthValue+0x84>)
 801c32a:	481f      	ldr	r0, [pc, #124]	@ (801c3a8 <MobleProvisionGenerateAuthValue+0x88>)
 801c32c:	21ba      	movs	r1, #186	@ 0xba
 801c32e:	f009 fcb1 	bl	8025c94 <__assert_func>
 801c332:	4b1e      	ldr	r3, [pc, #120]	@ (801c3ac <MobleProvisionGenerateAuthValue+0x8c>)
 801c334:	f8d3 46f0 	ldr.w	r4, [r3, #1776]	@ 0x6f0
 801c338:	2210      	movs	r2, #16
 801c33a:	2100      	movs	r1, #0
 801c33c:	f00a fc48 	bl	8026bd0 <memset>
 801c340:	f894 31fb 	ldrb.w	r3, [r4, #507]	@ 0x1fb
 801c344:	2b02      	cmp	r3, #2
 801c346:	d008      	beq.n	801c35a <MobleProvisionGenerateAuthValue+0x3a>
 801c348:	2b03      	cmp	r3, #3
 801c34a:	d014      	beq.n	801c376 <MobleProvisionGenerateAuthValue+0x56>
 801c34c:	2b01      	cmp	r3, #1
 801c34e:	d125      	bne.n	801c39c <MobleProvisionGenerateAuthValue+0x7c>
 801c350:	f894 2278 	ldrb.w	r2, [r4, #632]	@ 0x278
 801c354:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 801c358:	e007      	b.n	801c36a <MobleProvisionGenerateAuthValue+0x4a>
 801c35a:	f894 31fc 	ldrb.w	r3, [r4, #508]	@ 0x1fc
 801c35e:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 801c362:	2b04      	cmp	r3, #4
 801c364:	d10d      	bne.n	801c382 <MobleProvisionGenerateAuthValue+0x62>
 801c366:	f894 2278 	ldrb.w	r2, [r4, #632]	@ 0x278
 801c36a:	4628      	mov	r0, r5
 801c36c:	b003      	add	sp, #12
 801c36e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c372:	f00a bc13 	b.w	8026b9c <memmove>
 801c376:	f894 31fc 	ldrb.w	r3, [r4, #508]	@ 0x1fc
 801c37a:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 801c37e:	2b03      	cmp	r3, #3
 801c380:	e7f0      	b.n	801c364 <MobleProvisionGenerateAuthValue+0x44>
 801c382:	f8d4 0268 	ldr.w	r0, [r4, #616]	@ 0x268
 801c386:	6849      	ldr	r1, [r1, #4]
 801c388:	466b      	mov	r3, sp
 801c38a:	c303      	stmia	r3!, {r0, r1}
 801c38c:	2210      	movs	r2, #16
 801c38e:	4601      	mov	r1, r0
 801c390:	4628      	mov	r0, r5
 801c392:	b003      	add	sp, #12
 801c394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c398:	f7fc b881 	b.w	801849e <MobleOutputStreamPutBigEndian>
 801c39c:	b003      	add	sp, #12
 801c39e:	bd30      	pop	{r4, r5, pc}
 801c3a0:	0802eb71 	.word	0x0802eb71
 801c3a4:	0802d019 	.word	0x0802d019
 801c3a8:	0802eb29 	.word	0x0802eb29
 801c3ac:	20002514 	.word	0x20002514

0801c3b0 <MobleProvisionBearerGatt_DeleteTimer>:
 801c3b0:	6802      	ldr	r2, [r0, #0]
 801c3b2:	b122      	cbz	r2, 801c3be <MobleProvisionBearerGatt_DeleteTimer+0xe>
 801c3b4:	2300      	movs	r3, #0
 801c3b6:	7013      	strb	r3, [r2, #0]
 801c3b8:	6003      	str	r3, [r0, #0]
 801c3ba:	4618      	mov	r0, r3
 801c3bc:	4770      	bx	lr
 801c3be:	2001      	movs	r0, #1
 801c3c0:	4770      	bx	lr
	...

0801c3c4 <MobleProvision_UnprovisionedNode_Init>:
 801c3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3c6:	4d2d      	ldr	r5, [pc, #180]	@ (801c47c <MobleProvision_UnprovisionedNode_Init+0xb8>)
 801c3c8:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	@ 0x6f0
 801c3cc:	f7ff ff02 	bl	801c1d4 <MobleProvisionGetRole>
 801c3d0:	2801      	cmp	r0, #1
 801c3d2:	4607      	mov	r7, r0
 801c3d4:	d150      	bne.n	801c478 <MobleProvision_UnprovisionedNode_Init+0xb4>
 801c3d6:	f44f 70d6 	mov.w	r0, #428	@ 0x1ac
 801c3da:	f7fb fea5 	bl	8018128 <MobleMemAlloc>
 801c3de:	4606      	mov	r6, r0
 801c3e0:	f8c5 0a0c 	str.w	r0, [r5, #2572]	@ 0xa0c
 801c3e4:	b908      	cbnz	r0, 801c3ea <MobleProvision_UnprovisionedNode_Init+0x26>
 801c3e6:	2002      	movs	r0, #2
 801c3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3ea:	2400      	movs	r4, #0
 801c3ec:	f8a0 4044 	strh.w	r4, [r0, #68]	@ 0x44
 801c3f0:	f7ea fb98 	bl	8006b24 <HAL_GetTick>
 801c3f4:	4b22      	ldr	r3, [pc, #136]	@ (801c480 <MobleProvision_UnprovisionedNode_Init+0xbc>)
 801c3f6:	f8c6 01a4 	str.w	r0, [r6, #420]	@ 0x1a4
 801c3fa:	f8d5 6a0c 	ldr.w	r6, [r5, #2572]	@ 0xa0c
 801c3fe:	685b      	ldr	r3, [r3, #4]
 801c400:	f8c6 404a 	str.w	r4, [r6, #74]	@ 0x4a
 801c404:	f8c6 4046 	str.w	r4, [r6, #70]	@ 0x46
 801c408:	f8c6 404d 	str.w	r4, [r6, #77]	@ 0x4d
 801c40c:	69db      	ldr	r3, [r3, #28]
 801c40e:	4798      	blx	r3
 801c410:	f886 0046 	strb.w	r0, [r6, #70]	@ 0x46
 801c414:	f8d5 0a0c 	ldr.w	r0, [r5, #2572]	@ 0xa0c
 801c418:	f890 2046 	ldrb.w	r2, [r0, #70]	@ 0x46
 801c41c:	2a05      	cmp	r2, #5
 801c41e:	d8e2      	bhi.n	801c3e6 <MobleProvision_UnprovisionedNode_Init+0x22>
 801c420:	f8d5 16f0 	ldr.w	r1, [r5, #1776]	@ 0x6f0
 801c424:	f880 4047 	strb.w	r4, [r0, #71]	@ 0x47
 801c428:	f880 7048 	strb.w	r7, [r0, #72]	@ 0x48
 801c42c:	f891 21fe 	ldrb.w	r2, [r1, #510]	@ 0x1fe
 801c430:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
 801c434:	f891 21ff 	ldrb.w	r2, [r1, #511]	@ 0x1ff
 801c438:	f880 204a 	strb.w	r2, [r0, #74]	@ 0x4a
 801c43c:	f891 2206 	ldrb.w	r2, [r1, #518]	@ 0x206
 801c440:	f880 204b 	strb.w	r2, [r0, #75]	@ 0x4b
 801c444:	f8b1 1202 	ldrh.w	r1, [r1, #514]	@ 0x202
 801c448:	2202      	movs	r2, #2
 801c44a:	304c      	adds	r0, #76	@ 0x4c
 801c44c:	f7fc f827 	bl	801849e <MobleOutputStreamPutBigEndian>
 801c450:	f8d5 36f0 	ldr.w	r3, [r5, #1776]	@ 0x6f0
 801c454:	f8d5 0a0c 	ldr.w	r0, [r5, #2572]	@ 0xa0c
 801c458:	f893 2207 	ldrb.w	r2, [r3, #519]	@ 0x207
 801c45c:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
 801c460:	f8b3 1204 	ldrh.w	r1, [r3, #516]	@ 0x204
 801c464:	2202      	movs	r2, #2
 801c466:	304f      	adds	r0, #79	@ 0x4f
 801c468:	f7fc f819 	bl	801849e <MobleOutputStreamPutBigEndian>
 801c46c:	f8d5 3a0c 	ldr.w	r3, [r5, #2572]	@ 0xa0c
 801c470:	4620      	mov	r0, r4
 801c472:	f8a3 41a8 	strh.w	r4, [r3, #424]	@ 0x1a8
 801c476:	e7b7      	b.n	801c3e8 <MobleProvision_UnprovisionedNode_Init+0x24>
 801c478:	2003      	movs	r0, #3
 801c47a:	e7b5      	b.n	801c3e8 <MobleProvision_UnprovisionedNode_Init+0x24>
 801c47c:	20002514 	.word	0x20002514
 801c480:	20000324 	.word	0x20000324

0801c484 <MobleProvision_UnprovisionedNode_GetNextOperation>:
 801c484:	4b10      	ldr	r3, [pc, #64]	@ (801c4c8 <MobleProvision_UnprovisionedNode_GetNextOperation+0x44>)
 801c486:	f8d3 2a0c 	ldr.w	r2, [r3, #2572]	@ 0xa0c
 801c48a:	f892 0044 	ldrb.w	r0, [r2, #68]	@ 0x44
 801c48e:	2807      	cmp	r0, #7
 801c490:	d809      	bhi.n	801c4a6 <MobleProvision_UnprovisionedNode_GetNextOperation+0x22>
 801c492:	2301      	movs	r3, #1
 801c494:	4083      	lsls	r3, r0
 801c496:	f013 0f35 	tst.w	r3, #53	@ 0x35
 801c49a:	d106      	bne.n	801c4aa <MobleProvision_UnprovisionedNode_GetNextOperation+0x26>
 801c49c:	f013 0388 	ands.w	r3, r3, #136	@ 0x88
 801c4a0:	d110      	bne.n	801c4c4 <MobleProvision_UnprovisionedNode_GetNextOperation+0x40>
 801c4a2:	2801      	cmp	r0, #1
 801c4a4:	d008      	beq.n	801c4b8 <MobleProvision_UnprovisionedNode_GetNextOperation+0x34>
 801c4a6:	2000      	movs	r0, #0
 801c4a8:	4770      	bx	lr
 801c4aa:	f892 3045 	ldrb.w	r3, [r2, #69]	@ 0x45
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	bf14      	ite	ne
 801c4b2:	2002      	movne	r0, #2
 801c4b4:	2001      	moveq	r0, #1
 801c4b6:	4770      	bx	lr
 801c4b8:	f892 3045 	ldrb.w	r3, [r2, #69]	@ 0x45
 801c4bc:	2b02      	cmp	r3, #2
 801c4be:	bf28      	it	cs
 801c4c0:	2002      	movcs	r0, #2
 801c4c2:	4770      	bx	lr
 801c4c4:	2002      	movs	r0, #2
 801c4c6:	4770      	bx	lr
 801c4c8:	20002514 	.word	0x20002514

0801c4cc <BnrgmProvision_UnprovisionedGetState>:
 801c4cc:	4b04      	ldr	r3, [pc, #16]	@ (801c4e0 <BnrgmProvision_UnprovisionedGetState+0x14>)
 801c4ce:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 801c4d2:	b113      	cbz	r3, 801c4da <BnrgmProvision_UnprovisionedGetState+0xe>
 801c4d4:	f893 0044 	ldrb.w	r0, [r3, #68]	@ 0x44
 801c4d8:	4770      	bx	lr
 801c4da:	2007      	movs	r0, #7
 801c4dc:	4770      	bx	lr
 801c4de:	bf00      	nop
 801c4e0:	20002514 	.word	0x20002514

0801c4e4 <BnrgmTransmitFsm>:
 801c4e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c4e6:	4605      	mov	r5, r0
 801c4e8:	f7ea fb1c 	bl	8006b24 <HAL_GetTick>
 801c4ec:	4c90      	ldr	r4, [pc, #576]	@ (801c730 <BnrgmTransmitFsm+0x24c>)
 801c4ee:	4606      	mov	r6, r0
 801c4f0:	f7f8 fec0 	bl	8015274 <MoblePalBluetoothGetConnectionState>
 801c4f4:	f894 317a 	ldrb.w	r3, [r4, #378]	@ 0x17a
 801c4f8:	2b08      	cmp	r3, #8
 801c4fa:	d82e      	bhi.n	801c55a <BnrgmTransmitFsm+0x76>
 801c4fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 801c500:	00570009 	.word	0x00570009
 801c504:	007e0074 	.word	0x007e0074
 801c508:	00f900ba 	.word	0x00f900ba
 801c50c:	002d0105 	.word	0x002d0105
 801c510:	007c      	.short	0x007c
 801c512:	bb7d      	cbnz	r5, 801c574 <BnrgmTransmitFsm+0x90>
 801c514:	f894 3166 	ldrb.w	r3, [r4, #358]	@ 0x166
 801c518:	b30b      	cbz	r3, 801c55e <BnrgmTransmitFsm+0x7a>
 801c51a:	f7ea fb03 	bl	8006b24 <HAL_GetTick>
 801c51e:	f894 3167 	ldrb.w	r3, [r4, #359]	@ 0x167
 801c522:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801c526:	b923      	cbnz	r3, 801c532 <BnrgmTransmitFsm+0x4e>
 801c528:	f8b4 3178 	ldrh.w	r3, [r4, #376]	@ 0x178
 801c52c:	1a80      	subs	r0, r0, r2
 801c52e:	4283      	cmp	r3, r0
 801c530:	d815      	bhi.n	801c55e <BnrgmTransmitFsm+0x7a>
 801c532:	f7fb fb49 	bl	8017bc8 <BnrgmTransmitQueuePrepNextItem>
 801c536:	f894 3168 	ldrb.w	r3, [r4, #360]	@ 0x168
 801c53a:	4318      	orrs	r0, r3
 801c53c:	b2c0      	uxtb	r0, r0
 801c53e:	b970      	cbnz	r0, 801c55e <BnrgmTransmitFsm+0x7a>
 801c540:	2301      	movs	r3, #1
 801c542:	f884 317a 	strb.w	r3, [r4, #378]	@ 0x17a
 801c546:	4c7b      	ldr	r4, [pc, #492]	@ (801c734 <BnrgmTransmitFsm+0x250>)
 801c548:	f894 3a10 	ldrb.w	r3, [r4, #2576]	@ 0xa10
 801c54c:	b92b      	cbnz	r3, 801c55a <BnrgmTransmitFsm+0x76>
 801c54e:	200f      	movs	r0, #15
 801c550:	f7f6 f97f 	bl	8012852 <aci_hal_set_radio_activity_mask>
 801c554:	2301      	movs	r3, #1
 801c556:	f884 3a10 	strb.w	r3, [r4, #2576]	@ 0xa10
 801c55a:	b002      	add	sp, #8
 801c55c:	bd70      	pop	{r4, r5, r6, pc}
 801c55e:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 801c562:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801c566:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801c56a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c56e:	d1ea      	bne.n	801c546 <BnrgmTransmitFsm+0x62>
 801c570:	2303      	movs	r3, #3
 801c572:	e7e6      	b.n	801c542 <BnrgmTransmitFsm+0x5e>
 801c574:	2d05      	cmp	r5, #5
 801c576:	d110      	bne.n	801c59a <BnrgmTransmitFsm+0xb6>
 801c578:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 801c57c:	f8b4 016c 	ldrh.w	r0, [r4, #364]	@ 0x16c
 801c580:	f8a4 1186 	strh.w	r1, [r4, #390]	@ 0x186
 801c584:	f8a4 0184 	strh.w	r0, [r4, #388]	@ 0x184
 801c588:	f7fb fd5a 	bl	8018040 <BnrgmTransmitStartScan>
 801c58c:	f7ea faca 	bl	8006b24 <HAL_GetTick>
 801c590:	f884 517a 	strb.w	r5, [r4, #378]	@ 0x17a
 801c594:	f8c4 0170 	str.w	r0, [r4, #368]	@ 0x170
 801c598:	e7d5      	b.n	801c546 <BnrgmTransmitFsm+0x62>
 801c59a:	2d01      	cmp	r5, #1
 801c59c:	d1d3      	bne.n	801c546 <BnrgmTransmitFsm+0x62>
 801c59e:	f7fb faa3 	bl	8017ae8 <BnrgmTransmitQueueInit>
 801c5a2:	2300      	movs	r3, #0
 801c5a4:	f8a4 3168 	strh.w	r3, [r4, #360]	@ 0x168
 801c5a8:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
 801c5ac:	e7cb      	b.n	801c546 <BnrgmTransmitFsm+0x62>
 801c5ae:	b9a5      	cbnz	r5, 801c5da <BnrgmTransmitFsm+0xf6>
 801c5b0:	f7f9 f888 	bl	80156c4 <MoblePalBluetoothModeStopScan>
 801c5b4:	9501      	str	r5, [sp, #4]
 801c5b6:	9b01      	ldr	r3, [sp, #4]
 801c5b8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 801c5bc:	d306      	bcc.n	801c5cc <BnrgmTransmitFsm+0xe8>
 801c5be:	f7fb fd2d 	bl	801801c <BnrgmTransmitStartAdv>
 801c5c2:	b9c8      	cbnz	r0, 801c5f8 <BnrgmTransmitFsm+0x114>
 801c5c4:	2302      	movs	r3, #2
 801c5c6:	f884 317a 	strb.w	r3, [r4, #378]	@ 0x17a
 801c5ca:	e7c6      	b.n	801c55a <BnrgmTransmitFsm+0x76>
 801c5cc:	9b01      	ldr	r3, [sp, #4]
 801c5ce:	3301      	adds	r3, #1
 801c5d0:	9301      	str	r3, [sp, #4]
 801c5d2:	9b01      	ldr	r3, [sp, #4]
 801c5d4:	3301      	adds	r3, #1
 801c5d6:	9301      	str	r3, [sp, #4]
 801c5d8:	e7ed      	b.n	801c5b6 <BnrgmTransmitFsm+0xd2>
 801c5da:	2d03      	cmp	r5, #3
 801c5dc:	d1bd      	bne.n	801c55a <BnrgmTransmitFsm+0x76>
 801c5de:	b002      	add	sp, #8
 801c5e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c5e4:	f7f9 b86e 	b.w	80156c4 <MoblePalBluetoothModeStopScan>
 801c5e8:	2d02      	cmp	r5, #2
 801c5ea:	d1b6      	bne.n	801c55a <BnrgmTransmitFsm+0x76>
 801c5ec:	f7f8 ffde 	bl	80155ac <MoblePalBluetoothModeStopAdv>
 801c5f0:	f8c4 6180 	str.w	r6, [r4, #384]	@ 0x180
 801c5f4:	f7fb fb3a 	bl	8017c6c <BnrgmTransmitQueueAlign>
 801c5f8:	2300      	movs	r3, #0
 801c5fa:	e7e4      	b.n	801c5c6 <BnrgmTransmitFsm+0xe2>
 801c5fc:	2d00      	cmp	r5, #0
 801c5fe:	d1ac      	bne.n	801c55a <BnrgmTransmitFsm+0x76>
 801c600:	2802      	cmp	r0, #2
 801c602:	d124      	bne.n	801c64e <BnrgmTransmitFsm+0x16a>
 801c604:	f7ff ff62 	bl	801c4cc <BnrgmProvision_UnprovisionedGetState>
 801c608:	2807      	cmp	r0, #7
 801c60a:	4b4a      	ldr	r3, [pc, #296]	@ (801c734 <BnrgmTransmitFsm+0x250>)
 801c60c:	d109      	bne.n	801c622 <BnrgmTransmitFsm+0x13e>
 801c60e:	f893 2725 	ldrb.w	r2, [r3, #1829]	@ 0x725
 801c612:	2a02      	cmp	r2, #2
 801c614:	d005      	beq.n	801c622 <BnrgmTransmitFsm+0x13e>
 801c616:	f8d3 26f0 	ldr.w	r2, [r3, #1776]	@ 0x6f0
 801c61a:	f892 21f8 	ldrb.w	r2, [r2, #504]	@ 0x1f8
 801c61e:	2a01      	cmp	r2, #1
 801c620:	d00f      	beq.n	801c642 <BnrgmTransmitFsm+0x15e>
 801c622:	f04f 1214 	mov.w	r2, #1310740	@ 0x140014
 801c626:	f8c4 2184 	str.w	r2, [r4, #388]	@ 0x184
 801c62a:	2201      	movs	r2, #1
 801c62c:	f883 2a11 	strb.w	r2, [r3, #2577]	@ 0xa11
 801c630:	f8b4 1186 	ldrh.w	r1, [r4, #390]	@ 0x186
 801c634:	f8b4 0184 	ldrh.w	r0, [r4, #388]	@ 0x184
 801c638:	f7fb fd02 	bl	8018040 <BnrgmTransmitStartScan>
 801c63c:	b9c0      	cbnz	r0, 801c670 <BnrgmTransmitFsm+0x18c>
 801c63e:	2304      	movs	r3, #4
 801c640:	e7c1      	b.n	801c5c6 <BnrgmTransmitFsm+0xe2>
 801c642:	4a3d      	ldr	r2, [pc, #244]	@ (801c738 <BnrgmTransmitFsm+0x254>)
 801c644:	f8c4 2184 	str.w	r2, [r4, #388]	@ 0x184
 801c648:	f883 5a11 	strb.w	r5, [r3, #2577]	@ 0xa11
 801c64c:	e7f0      	b.n	801c630 <BnrgmTransmitFsm+0x14c>
 801c64e:	b948      	cbnz	r0, 801c664 <BnrgmTransmitFsm+0x180>
 801c650:	4b3a      	ldr	r3, [pc, #232]	@ (801c73c <BnrgmTransmitFsm+0x258>)
 801c652:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 801c656:	f24a 0327 	movw	r3, #40999	@ 0xa027
 801c65a:	429a      	cmp	r2, r3
 801c65c:	d904      	bls.n	801c668 <BnrgmTransmitFsm+0x184>
 801c65e:	f04f 1314 	mov.w	r3, #1310740	@ 0x140014
 801c662:	e002      	b.n	801c66a <BnrgmTransmitFsm+0x186>
 801c664:	2801      	cmp	r0, #1
 801c666:	d0fa      	beq.n	801c65e <BnrgmTransmitFsm+0x17a>
 801c668:	2300      	movs	r3, #0
 801c66a:	f8c4 3184 	str.w	r3, [r4, #388]	@ 0x184
 801c66e:	e7df      	b.n	801c630 <BnrgmTransmitFsm+0x14c>
 801c670:	2308      	movs	r3, #8
 801c672:	e7a8      	b.n	801c5c6 <BnrgmTransmitFsm+0xe2>
 801c674:	b9dd      	cbnz	r5, 801c6ae <BnrgmTransmitFsm+0x1ca>
 801c676:	f894 3166 	ldrb.w	r3, [r4, #358]	@ 0x166
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	f43f af6d 	beq.w	801c55a <BnrgmTransmitFsm+0x76>
 801c680:	f7ea fa50 	bl	8006b24 <HAL_GetTick>
 801c684:	f894 3167 	ldrb.w	r3, [r4, #359]	@ 0x167
 801c688:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801c68c:	b92b      	cbnz	r3, 801c69a <BnrgmTransmitFsm+0x1b6>
 801c68e:	f8b4 3178 	ldrh.w	r3, [r4, #376]	@ 0x178
 801c692:	1a80      	subs	r0, r0, r2
 801c694:	4283      	cmp	r3, r0
 801c696:	f63f af60 	bhi.w	801c55a <BnrgmTransmitFsm+0x76>
 801c69a:	f7fb fa95 	bl	8017bc8 <BnrgmTransmitQueuePrepNextItem>
 801c69e:	f894 3168 	ldrb.w	r3, [r4, #360]	@ 0x168
 801c6a2:	4318      	orrs	r0, r3
 801c6a4:	b2c0      	uxtb	r0, r0
 801c6a6:	2800      	cmp	r0, #0
 801c6a8:	d1a6      	bne.n	801c5f8 <BnrgmTransmitFsm+0x114>
 801c6aa:	2301      	movs	r3, #1
 801c6ac:	e78b      	b.n	801c5c6 <BnrgmTransmitFsm+0xe2>
 801c6ae:	2d04      	cmp	r5, #4
 801c6b0:	d119      	bne.n	801c6e6 <BnrgmTransmitFsm+0x202>
 801c6b2:	2801      	cmp	r0, #1
 801c6b4:	f47f af51 	bne.w	801c55a <BnrgmTransmitFsm+0x76>
 801c6b8:	4b20      	ldr	r3, [pc, #128]	@ (801c73c <BnrgmTransmitFsm+0x258>)
 801c6ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801c6be:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 801c6c2:	fbb3 f3f2 	udiv	r3, r3, r2
 801c6c6:	f8b4 2184 	ldrh.w	r2, [r4, #388]	@ 0x184
 801c6ca:	f8a4 3186 	strh.w	r3, [r4, #390]	@ 0x186
 801c6ce:	320c      	adds	r2, #12
 801c6d0:	b29b      	uxth	r3, r3
 801c6d2:	429a      	cmp	r2, r3
 801c6d4:	f4bf af41 	bcs.w	801c55a <BnrgmTransmitFsm+0x76>
 801c6d8:	f7ea fa24 	bl	8006b24 <HAL_GetTick>
 801c6dc:	3003      	adds	r0, #3
 801c6de:	f8c4 0188 	str.w	r0, [r4, #392]	@ 0x188
 801c6e2:	2306      	movs	r3, #6
 801c6e4:	e76f      	b.n	801c5c6 <BnrgmTransmitFsm+0xe2>
 801c6e6:	2d03      	cmp	r5, #3
 801c6e8:	f47f af37 	bne.w	801c55a <BnrgmTransmitFsm+0x76>
 801c6ec:	f7f8 ffea 	bl	80156c4 <MoblePalBluetoothModeStopScan>
 801c6f0:	e782      	b.n	801c5f8 <BnrgmTransmitFsm+0x114>
 801c6f2:	2d06      	cmp	r5, #6
 801c6f4:	d0fa      	beq.n	801c6ec <BnrgmTransmitFsm+0x208>
 801c6f6:	f7ea fa15 	bl	8006b24 <HAL_GetTick>
 801c6fa:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
 801c6fe:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 801c702:	4298      	cmp	r0, r3
 801c704:	f4bf af78 	bcs.w	801c5f8 <BnrgmTransmitFsm+0x114>
 801c708:	e727      	b.n	801c55a <BnrgmTransmitFsm+0x76>
 801c70a:	f7ea fa0b 	bl	8006b24 <HAL_GetTick>
 801c70e:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 801c712:	4298      	cmp	r0, r3
 801c714:	f4ff af21 	bcc.w	801c55a <BnrgmTransmitFsm+0x76>
 801c718:	2000      	movs	r0, #0
 801c71a:	f7f6 f89a 	bl	8012852 <aci_hal_set_radio_activity_mask>
 801c71e:	4b05      	ldr	r3, [pc, #20]	@ (801c734 <BnrgmTransmitFsm+0x250>)
 801c720:	2500      	movs	r5, #0
 801c722:	f883 5a10 	strb.w	r5, [r3, #2576]	@ 0xa10
 801c726:	f7f8 ffcd 	bl	80156c4 <MoblePalBluetoothModeStopScan>
 801c72a:	f884 517a 	strb.w	r5, [r4, #378]	@ 0x17a
 801c72e:	e714      	b.n	801c55a <BnrgmTransmitFsm+0x76>
 801c730:	20003f64 	.word	0x20003f64
 801c734:	20002514 	.word	0x20002514
 801c738:	28000014 	.word	0x28000014
 801c73c:	2000141c 	.word	0x2000141c

0801c740 <MobleTransmitInit>:
 801c740:	b538      	push	{r3, r4, r5, lr}
 801c742:	4c0c      	ldr	r4, [pc, #48]	@ (801c774 <MobleTransmitInit+0x34>)
 801c744:	4b0c      	ldr	r3, [pc, #48]	@ (801c778 <MobleTransmitInit+0x38>)
 801c746:	f8a4 0a12 	strh.w	r0, [r4, #2578]	@ 0xa12
 801c74a:	2809      	cmp	r0, #9
 801c74c:	bf86      	itte	hi
 801c74e:	380a      	subhi	r0, #10
 801c750:	b280      	uxthhi	r0, r0
 801c752:	2000      	movls	r0, #0
 801c754:	f8a3 0178 	strh.w	r0, [r3, #376]	@ 0x178
 801c758:	2500      	movs	r5, #0
 801c75a:	2001      	movs	r0, #1
 801c75c:	f884 5a10 	strb.w	r5, [r4, #2576]	@ 0xa10
 801c760:	f7ff fec0 	bl	801c4e4 <BnrgmTransmitFsm>
 801c764:	4b05      	ldr	r3, [pc, #20]	@ (801c77c <MobleTransmitInit+0x3c>)
 801c766:	4a06      	ldr	r2, [pc, #24]	@ (801c780 <MobleTransmitInit+0x40>)
 801c768:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
 801c76c:	f884 5a11 	strb.w	r5, [r4, #2577]	@ 0xa11
 801c770:	bd38      	pop	{r3, r4, r5, pc}
 801c772:	bf00      	nop
 801c774:	20002514 	.word	0x20002514
 801c778:	20003f64 	.word	0x20003f64
 801c77c:	2000141c 	.word	0x2000141c
 801c780:	0801c7d5 	.word	0x0801c7d5

0801c784 <MobleTransmitSuspendAll>:
 801c784:	b508      	push	{r3, lr}
 801c786:	4b06      	ldr	r3, [pc, #24]	@ (801c7a0 <MobleTransmitSuspendAll+0x1c>)
 801c788:	f240 1201 	movw	r2, #257	@ 0x101
 801c78c:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
 801c790:	2002      	movs	r0, #2
 801c792:	f7ff fea7 	bl	801c4e4 <BnrgmTransmitFsm>
 801c796:	2003      	movs	r0, #3
 801c798:	f7ff fea4 	bl	801c4e4 <BnrgmTransmitFsm>
 801c79c:	2000      	movs	r0, #0
 801c79e:	bd08      	pop	{r3, pc}
 801c7a0:	20003f64 	.word	0x20003f64

0801c7a4 <MobleTransmitResumeAll>:
 801c7a4:	b510      	push	{r4, lr}
 801c7a6:	4b04      	ldr	r3, [pc, #16]	@ (801c7b8 <MobleTransmitResumeAll+0x14>)
 801c7a8:	2400      	movs	r4, #0
 801c7aa:	f8a3 4168 	strh.w	r4, [r3, #360]	@ 0x168
 801c7ae:	2003      	movs	r0, #3
 801c7b0:	f7ff fe98 	bl	801c4e4 <BnrgmTransmitFsm>
 801c7b4:	4620      	mov	r0, r4
 801c7b6:	bd10      	pop	{r4, pc}
 801c7b8:	20003f64 	.word	0x20003f64

0801c7bc <BnrgmTransmitSetAutoScanState>:
 801c7bc:	4b04      	ldr	r3, [pc, #16]	@ (801c7d0 <BnrgmTransmitSetAutoScanState+0x14>)
 801c7be:	2801      	cmp	r0, #1
 801c7c0:	f883 016a 	strb.w	r0, [r3, #362]	@ 0x16a
 801c7c4:	d002      	beq.n	801c7cc <BnrgmTransmitSetAutoScanState+0x10>
 801c7c6:	2003      	movs	r0, #3
 801c7c8:	f7ff be8c 	b.w	801c4e4 <BnrgmTransmitFsm>
 801c7cc:	4770      	bx	lr
 801c7ce:	bf00      	nop
 801c7d0:	20003f64 	.word	0x20003f64

0801c7d4 <BnrgmTransmitRadioActivityEndCallback>:
 801c7d4:	b570      	push	{r4, r5, r6, lr}
 801c7d6:	4c13      	ldr	r4, [pc, #76]	@ (801c824 <BnrgmTransmitRadioActivityEndCallback+0x50>)
 801c7d8:	2902      	cmp	r1, #2
 801c7da:	bf08      	it	eq
 801c7dc:	f8c4 217c 	streq.w	r2, [r4, #380]	@ 0x17c
 801c7e0:	2801      	cmp	r0, #1
 801c7e2:	460d      	mov	r5, r1
 801c7e4:	d004      	beq.n	801c7f0 <BnrgmTransmitRadioActivityEndCallback+0x1c>
 801c7e6:	2802      	cmp	r0, #2
 801c7e8:	d014      	beq.n	801c814 <BnrgmTransmitRadioActivityEndCallback+0x40>
 801c7ea:	f884 517b 	strb.w	r5, [r4, #379]	@ 0x17b
 801c7ee:	bd70      	pop	{r4, r5, r6, pc}
 801c7f0:	f894 617a 	ldrb.w	r6, [r4, #378]	@ 0x17a
 801c7f4:	2e02      	cmp	r6, #2
 801c7f6:	d1f8      	bne.n	801c7ea <BnrgmTransmitRadioActivityEndCallback+0x16>
 801c7f8:	f8d4 0160 	ldr.w	r0, [r4, #352]	@ 0x160
 801c7fc:	f7fb f9cc 	bl	8017b98 <BnrgmTransmitQueDecreasePktCount>
 801c800:	4630      	mov	r0, r6
 801c802:	f7ff fe6f 	bl	801c4e4 <BnrgmTransmitFsm>
 801c806:	2000      	movs	r0, #0
 801c808:	f7ff fe6c 	bl	801c4e4 <BnrgmTransmitFsm>
 801c80c:	2000      	movs	r0, #0
 801c80e:	f7ff fe69 	bl	801c4e4 <BnrgmTransmitFsm>
 801c812:	e7ea      	b.n	801c7ea <BnrgmTransmitRadioActivityEndCallback+0x16>
 801c814:	f894 317b 	ldrb.w	r3, [r4, #379]	@ 0x17b
 801c818:	2b02      	cmp	r3, #2
 801c81a:	d1e6      	bne.n	801c7ea <BnrgmTransmitRadioActivityEndCallback+0x16>
 801c81c:	2901      	cmp	r1, #1
 801c81e:	d0e4      	beq.n	801c7ea <BnrgmTransmitRadioActivityEndCallback+0x16>
 801c820:	2004      	movs	r0, #4
 801c822:	e7f4      	b.n	801c80e <BnrgmTransmitRadioActivityEndCallback+0x3a>
 801c824:	20003f64 	.word	0x20003f64

0801c828 <BnrgmTransmitProcess>:
 801c828:	2000      	movs	r0, #0
 801c82a:	f7ff be5b 	b.w	801c4e4 <BnrgmTransmitFsm>

0801c82e <BLEMesh_StopAdvScan>:
 801c82e:	b508      	push	{r3, lr}
 801c830:	2002      	movs	r0, #2
 801c832:	f7ff fe57 	bl	801c4e4 <BnrgmTransmitFsm>
 801c836:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c83a:	2003      	movs	r0, #3
 801c83c:	f7ff be52 	b.w	801c4e4 <BnrgmTransmitFsm>

0801c840 <MoblePalBluetoothGracefulReset>:
 801c840:	b510      	push	{r4, lr}
 801c842:	4c16      	ldr	r4, [pc, #88]	@ (801c89c <MoblePalBluetoothGracefulReset+0x5c>)
 801c844:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 801c848:	f013 0f3c 	tst.w	r3, #60	@ 0x3c
 801c84c:	d010      	beq.n	801c870 <MoblePalBluetoothGracefulReset+0x30>
 801c84e:	2301      	movs	r3, #1
 801c850:	f884 3380 	strb.w	r3, [r4, #896]	@ 0x380
 801c854:	f884 3378 	strb.w	r3, [r4, #888]	@ 0x378
 801c858:	f7ea f964 	bl	8006b24 <HAL_GetTick>
 801c85c:	f8d4 3350 	ldr.w	r3, [r4, #848]	@ 0x350
 801c860:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801c864:	fbb3 f3f2 	udiv	r3, r3, r2
 801c868:	4403      	add	r3, r0
 801c86a:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
 801c86e:	bd10      	pop	{r4, pc}
 801c870:	f7fb fd1c 	bl	80182ac <MoblePalBluetoothFreeAllNotifications>
 801c874:	f8d4 3374 	ldr.w	r3, [r4, #884]	@ 0x374
 801c878:	b103      	cbz	r3, 801c87c <MoblePalBluetoothGracefulReset+0x3c>
 801c87a:	4798      	blx	r3
 801c87c:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 801c880:	b10b      	cbz	r3, 801c886 <MoblePalBluetoothGracefulReset+0x46>
 801c882:	f7ff ffd4 	bl	801c82e <BLEMesh_StopAdvScan>
 801c886:	2300      	movs	r3, #0
 801c888:	f8c4 3354 	str.w	r3, [r4, #852]	@ 0x354
 801c88c:	f7ff fcb4 	bl	801c1f8 <BLEMesh_IsUnprovisioned>
 801c890:	2801      	cmp	r0, #1
 801c892:	bf04      	itt	eq
 801c894:	4b02      	ldreq	r3, [pc, #8]	@ (801c8a0 <MoblePalBluetoothGracefulReset+0x60>)
 801c896:	7018      	strbeq	r0, [r3, #0]
 801c898:	e7e9      	b.n	801c86e <MoblePalBluetoothGracefulReset+0x2e>
 801c89a:	bf00      	nop
 801c89c:	2000141c 	.word	0x2000141c
 801c8a0:	2000459d 	.word	0x2000459d

0801c8a4 <HCI_Event_CB>:
 801c8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8a8:	7803      	ldrb	r3, [r0, #0]
 801c8aa:	2b04      	cmp	r3, #4
 801c8ac:	b08b      	sub	sp, #44	@ 0x2c
 801c8ae:	4604      	mov	r4, r0
 801c8b0:	d161      	bne.n	801c976 <HCI_Event_CB+0xd2>
 801c8b2:	7843      	ldrb	r3, [r0, #1]
 801c8b4:	2b3e      	cmp	r3, #62	@ 0x3e
 801c8b6:	d025      	beq.n	801c904 <HCI_Event_CB+0x60>
 801c8b8:	2bff      	cmp	r3, #255	@ 0xff
 801c8ba:	f000 809b 	beq.w	801c9f4 <HCI_Event_CB+0x150>
 801c8be:	2b05      	cmp	r3, #5
 801c8c0:	d159      	bne.n	801c976 <HCI_Event_CB+0xd2>
 801c8c2:	4c7e      	ldr	r4, [pc, #504]	@ (801cabc <HCI_Event_CB+0x218>)
 801c8c4:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 801c8c8:	f023 030c 	bic.w	r3, r3, #12
 801c8cc:	f8c4 3354 	str.w	r3, [r4, #852]	@ 0x354
 801c8d0:	f7fb fcec 	bl	80182ac <MoblePalBluetoothFreeAllNotifications>
 801c8d4:	4b7a      	ldr	r3, [pc, #488]	@ (801cac0 <HCI_Event_CB+0x21c>)
 801c8d6:	685b      	ldr	r3, [r3, #4]
 801c8d8:	68db      	ldr	r3, [r3, #12]
 801c8da:	4798      	blx	r3
 801c8dc:	f8d4 3358 	ldr.w	r3, [r4, #856]	@ 0x358
 801c8e0:	b113      	cbz	r3, 801c8e8 <HCI_Event_CB+0x44>
 801c8e2:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 801c8e6:	4798      	blx	r3
 801c8e8:	f894 3378 	ldrb.w	r3, [r4, #888]	@ 0x378
 801c8ec:	2b01      	cmp	r3, #1
 801c8ee:	d142      	bne.n	801c976 <HCI_Event_CB+0xd2>
 801c8f0:	2300      	movs	r3, #0
 801c8f2:	f884 3378 	strb.w	r3, [r4, #888]	@ 0x378
 801c8f6:	f884 3380 	strb.w	r3, [r4, #896]	@ 0x380
 801c8fa:	b00b      	add	sp, #44	@ 0x2c
 801c8fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c900:	f7ff bf9e 	b.w	801c840 <MoblePalBluetoothGracefulReset>
 801c904:	78c3      	ldrb	r3, [r0, #3]
 801c906:	2b02      	cmp	r3, #2
 801c908:	d02a      	beq.n	801c960 <HCI_Event_CB+0xbc>
 801c90a:	2b03      	cmp	r3, #3
 801c90c:	d061      	beq.n	801c9d2 <HCI_Event_CB+0x12e>
 801c90e:	2b01      	cmp	r3, #1
 801c910:	d131      	bne.n	801c976 <HCI_Event_CB+0xd2>
 801c912:	f8b0 300f 	ldrh.w	r3, [r0, #15]
 801c916:	4d69      	ldr	r5, [pc, #420]	@ (801cabc <HCI_Event_CB+0x218>)
 801c918:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 801c91c:	4353      	muls	r3, r2
 801c91e:	f8c5 3350 	str.w	r3, [r5, #848]	@ 0x350
 801c922:	4b67      	ldr	r3, [pc, #412]	@ (801cac0 <HCI_Event_CB+0x21c>)
 801c924:	685b      	ldr	r3, [r3, #4]
 801c926:	689b      	ldr	r3, [r3, #8]
 801c928:	4798      	blx	r3
 801c92a:	f8d5 3354 	ldr.w	r3, [r5, #852]	@ 0x354
 801c92e:	79a1      	ldrb	r1, [r4, #6]
 801c930:	7962      	ldrb	r2, [r4, #5]
 801c932:	f023 0301 	bic.w	r3, r3, #1
 801c936:	f043 0304 	orr.w	r3, r3, #4
 801c93a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801c93e:	f8c5 3354 	str.w	r3, [r5, #852]	@ 0x354
 801c942:	f8a5 2382 	strh.w	r2, [r5, #898]	@ 0x382
 801c946:	f7ea f8ed 	bl	8006b24 <HAL_GetTick>
 801c94a:	f8d5 3358 	ldr.w	r3, [r5, #856]	@ 0x358
 801c94e:	f8c5 0948 	str.w	r0, [r5, #2376]	@ 0x948
 801c952:	b183      	cbz	r3, 801c976 <HCI_Event_CB+0xd2>
 801c954:	f8d5 036c 	ldr.w	r0, [r5, #876]	@ 0x36c
 801c958:	b00b      	add	sp, #44	@ 0x2c
 801c95a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c95e:	4718      	bx	r3
 801c960:	f8df 9158 	ldr.w	r9, [pc, #344]	@ 801cabc <HCI_Event_CB+0x218>
 801c964:	f8d9 3370 	ldr.w	r3, [r9, #880]	@ 0x370
 801c968:	b12b      	cbz	r3, 801c976 <HCI_Event_CB+0xd2>
 801c96a:	1dc1      	adds	r1, r0, #7
 801c96c:	f04f 0800 	mov.w	r8, #0
 801c970:	7923      	ldrb	r3, [r4, #4]
 801c972:	4543      	cmp	r3, r8
 801c974:	dc02      	bgt.n	801c97c <HCI_Event_CB+0xd8>
 801c976:	b00b      	add	sp, #44	@ 0x2c
 801c978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c97c:	798b      	ldrb	r3, [r1, #6]
 801c97e:	1d8e      	adds	r6, r1, #6
 801c980:	4433      	add	r3, r6
 801c982:	2500      	movs	r5, #0
 801c984:	f993 b001 	ldrsb.w	fp, [r3, #1]
 801c988:	798b      	ldrb	r3, [r1, #6]
 801c98a:	42ab      	cmp	r3, r5
 801c98c:	d803      	bhi.n	801c996 <HCI_Event_CB+0xf2>
 801c98e:	f108 0801 	add.w	r8, r8, #1
 801c992:	310e      	adds	r1, #14
 801c994:	e7ec      	b.n	801c970 <HCI_Event_CB+0xcc>
 801c996:	f105 0a01 	add.w	sl, r5, #1
 801c99a:	eb06 020a 	add.w	r2, r6, sl
 801c99e:	f816 300a 	ldrb.w	r3, [r6, sl]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d0f3      	beq.n	801c98e <HCI_Event_CB+0xea>
 801c9a6:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 801c9aa:	1e87      	subs	r7, r0, #2
 801c9ac:	2f01      	cmp	r7, #1
 801c9ae:	d80a      	bhi.n	801c9c6 <HCI_Event_CB+0x122>
 801c9b0:	3301      	adds	r3, #1
 801c9b2:	e9cd b000 	strd	fp, r0, [sp]
 801c9b6:	f8d9 7370 	ldr.w	r7, [r9, #880]	@ 0x370
 801c9ba:	f8d9 036c 	ldr.w	r0, [r9, #876]	@ 0x36c
 801c9be:	9103      	str	r1, [sp, #12]
 801c9c0:	b2db      	uxtb	r3, r3
 801c9c2:	47b8      	blx	r7
 801c9c4:	9903      	ldr	r1, [sp, #12]
 801c9c6:	f816 300a 	ldrb.w	r3, [r6, sl]
 801c9ca:	3301      	adds	r3, #1
 801c9cc:	442b      	add	r3, r5
 801c9ce:	b2dd      	uxtb	r5, r3
 801c9d0:	e7da      	b.n	801c988 <HCI_Event_CB+0xe4>
 801c9d2:	4b3a      	ldr	r3, [pc, #232]	@ (801cabc <HCI_Event_CB+0x218>)
 801c9d4:	f8b0 2005 	ldrh.w	r2, [r0, #5]
 801c9d8:	f8b3 3382 	ldrh.w	r3, [r3, #898]	@ 0x382
 801c9dc:	429a      	cmp	r2, r3
 801c9de:	d1ca      	bne.n	801c976 <HCI_Event_CB+0xd2>
 801c9e0:	7903      	ldrb	r3, [r0, #4]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d1c7      	bne.n	801c976 <HCI_Event_CB+0xd2>
 801c9e6:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 801c9ea:	b00b      	add	sp, #44	@ 0x2c
 801c9ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9f0:	f7f8 bbb6 	b.w	8015160 <MoblePalBluetoothSetConnectionInterval>
 801c9f4:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 801c9f8:	f640 4214 	movw	r2, #3092	@ 0xc14
 801c9fc:	4293      	cmp	r3, r2
 801c9fe:	d021      	beq.n	801ca44 <HCI_Event_CB+0x1a0>
 801ca00:	d818      	bhi.n	801ca34 <HCI_Event_CB+0x190>
 801ca02:	2b04      	cmp	r3, #4
 801ca04:	d048      	beq.n	801ca98 <HCI_Event_CB+0x1f4>
 801ca06:	f640 4201 	movw	r2, #3073	@ 0xc01
 801ca0a:	4293      	cmp	r3, r2
 801ca0c:	d1b3      	bne.n	801c976 <HCI_Event_CB+0xd2>
 801ca0e:	482b      	ldr	r0, [pc, #172]	@ (801cabc <HCI_Event_CB+0x218>)
 801ca10:	f8d0 5348 	ldr.w	r5, [r0, #840]	@ 0x348
 801ca14:	2d00      	cmp	r5, #0
 801ca16:	d0ae      	beq.n	801c976 <HCI_Event_CB+0xd2>
 801ca18:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 801ca1c:	f8b4 1007 	ldrh.w	r1, [r4, #7]
 801ca20:	f8d0 036c 	ldr.w	r0, [r0, #876]	@ 0x36c
 801ca24:	b2db      	uxtb	r3, r3
 801ca26:	f104 020d 	add.w	r2, r4, #13
 801ca2a:	46ac      	mov	ip, r5
 801ca2c:	b00b      	add	sp, #44	@ 0x2c
 801ca2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca32:	4760      	bx	ip
 801ca34:	f640 4216 	movw	r2, #3094	@ 0xc16
 801ca38:	4293      	cmp	r3, r2
 801ca3a:	d19c      	bne.n	801c976 <HCI_Event_CB+0xd2>
 801ca3c:	4b21      	ldr	r3, [pc, #132]	@ (801cac4 <HCI_Event_CB+0x220>)
 801ca3e:	2201      	movs	r2, #1
 801ca40:	729a      	strb	r2, [r3, #10]
 801ca42:	e798      	b.n	801c976 <HCI_Event_CB+0xd2>
 801ca44:	4d1d      	ldr	r5, [pc, #116]	@ (801cabc <HCI_Event_CB+0x218>)
 801ca46:	f8d5 7344 	ldr.w	r7, [r5, #836]	@ 0x344
 801ca4a:	b1f7      	cbz	r7, 801ca8a <HCI_Event_CB+0x1e6>
 801ca4c:	2314      	movs	r3, #20
 801ca4e:	f88d 3013 	strb.w	r3, [sp, #19]
 801ca52:	f8b0 3009 	ldrh.w	r3, [r0, #9]
 801ca56:	b1c3      	cbz	r3, 801ca8a <HCI_Event_CB+0x1e6>
 801ca58:	ae05      	add	r6, sp, #20
 801ca5a:	f8b0 1007 	ldrh.w	r1, [r0, #7]
 801ca5e:	f8d5 036c 	ldr.w	r0, [r5, #876]	@ 0x36c
 801ca62:	f10d 0313 	add.w	r3, sp, #19
 801ca66:	4632      	mov	r2, r6
 801ca68:	47b8      	blx	r7
 801ca6a:	2801      	cmp	r0, #1
 801ca6c:	d80d      	bhi.n	801ca8a <HCI_Event_CB+0x1e6>
 801ca6e:	f8b4 1007 	ldrh.w	r1, [r4, #7]
 801ca72:	9600      	str	r6, [sp, #0]
 801ca74:	3901      	subs	r1, #1
 801ca76:	f89d 3013 	ldrb.w	r3, [sp, #19]
 801ca7a:	f8b5 0340 	ldrh.w	r0, [r5, #832]	@ 0x340
 801ca7e:	2200      	movs	r2, #0
 801ca80:	b289      	uxth	r1, r1
 801ca82:	f7f5 faf7 	bl	8012074 <aci_gatt_update_char_value>
 801ca86:	2893      	cmp	r0, #147	@ 0x93
 801ca88:	d0f1      	beq.n	801ca6e <HCI_Event_CB+0x1ca>
 801ca8a:	f8b4 0005 	ldrh.w	r0, [r4, #5]
 801ca8e:	b00b      	add	sp, #44	@ 0x2c
 801ca90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca94:	f7f5 bc54 	b.w	8012340 <aci_gatt_allow_read>
 801ca98:	4b0b      	ldr	r3, [pc, #44]	@ (801cac8 <HCI_Event_CB+0x224>)
 801ca9a:	f8d0 2007 	ldr.w	r2, [r0, #7]
 801ca9e:	f8c3 2a14 	str.w	r2, [r3, #2580]	@ 0xa14
 801caa2:	4b06      	ldr	r3, [pc, #24]	@ (801cabc <HCI_Event_CB+0x218>)
 801caa4:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	f43f af64 	beq.w	801c976 <HCI_Event_CB+0xd2>
 801caae:	7981      	ldrb	r1, [r0, #6]
 801cab0:	7940      	ldrb	r0, [r0, #5]
 801cab2:	b00b      	add	sp, #44	@ 0x2c
 801cab4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cab8:	4718      	bx	r3
 801caba:	bf00      	nop
 801cabc:	2000141c 	.word	0x2000141c
 801cac0:	20000324 	.word	0x20000324
 801cac4:	20000008 	.word	0x20000008
 801cac8:	20002514 	.word	0x20002514

0801cacc <BnrgmProxy_SarTimeoutCallback>:
 801cacc:	f7ff beb8 	b.w	801c840 <MoblePalBluetoothGracefulReset>

0801cad0 <BnrgmStackDummyProxyModeTimerCallback>:
 801cad0:	b508      	push	{r3, lr}
 801cad2:	2300      	movs	r3, #0
 801cad4:	f881 32ad 	strb.w	r3, [r1, #685]	@ 0x2ad
 801cad8:	f8d1 02b0 	ldr.w	r0, [r1, #688]	@ 0x2b0
 801cadc:	f7f8 fa3a 	bl	8014f54 <MoblePalTimerDestroy>
 801cae0:	4b06      	ldr	r3, [pc, #24]	@ (801cafc <BnrgmStackDummyProxyModeTimerCallback+0x2c>)
 801cae2:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 801cae6:	2b02      	cmp	r3, #2
 801cae8:	d107      	bne.n	801cafa <BnrgmStackDummyProxyModeTimerCallback+0x2a>
 801caea:	f7f8 fbc3 	bl	8015274 <MoblePalBluetoothGetConnectionState>
 801caee:	2802      	cmp	r0, #2
 801caf0:	d003      	beq.n	801cafa <BnrgmStackDummyProxyModeTimerCallback+0x2a>
 801caf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801caf6:	f7ff bea3 	b.w	801c840 <MoblePalBluetoothGracefulReset>
 801cafa:	bd08      	pop	{r3, pc}
 801cafc:	20000324 	.word	0x20000324

0801cb00 <MobleProvision_CreateCommand>:
 801cb00:	b570      	push	{r4, r5, r6, lr}
 801cb02:	9e04      	ldr	r6, [sp, #16]
 801cb04:	1c54      	adds	r4, r2, #1
 801cb06:	42b4      	cmp	r4, r6
 801cb08:	d806      	bhi.n	801cb18 <MobleProvision_CreateCommand+0x18>
 801cb0a:	7018      	strb	r0, [r3, #0]
 801cb0c:	b112      	cbz	r2, 801cb14 <MobleProvision_CreateCommand+0x14>
 801cb0e:	1c58      	adds	r0, r3, #1
 801cb10:	f00a f844 	bl	8026b9c <memmove>
 801cb14:	b2e0      	uxtb	r0, r4
 801cb16:	bd70      	pop	{r4, r5, r6, pc}
 801cb18:	2000      	movs	r0, #0
 801cb1a:	e7fc      	b.n	801cb16 <MobleProvision_CreateCommand+0x16>

0801cb1c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0>:
 801cb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb20:	4c91      	ldr	r4, [pc, #580]	@ (801cd68 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x24c>)
 801cb22:	f8d4 56f0 	ldr.w	r5, [r4, #1776]	@ 0x6f0
 801cb26:	b0c6      	sub	sp, #280	@ 0x118
 801cb28:	4606      	mov	r6, r0
 801cb2a:	4628      	mov	r0, r5
 801cb2c:	4689      	mov	r9, r1
 801cb2e:	4690      	mov	r8, r2
 801cb30:	f7ff fb50 	bl	801c1d4 <MobleProvisionGetRole>
 801cb34:	2800      	cmp	r0, #0
 801cb36:	f040 820b 	bne.w	801cf50 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x434>
 801cb3a:	f8d4 7a18 	ldr.w	r7, [r4, #2584]	@ 0xa18
 801cb3e:	f8c8 0000 	str.w	r0, [r8]
 801cb42:	783b      	ldrb	r3, [r7, #0]
 801cb44:	2b0a      	cmp	r3, #10
 801cb46:	d821      	bhi.n	801cb8c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x70>
 801cb48:	e8df f013 	tbh	[pc, r3, lsl #1]
 801cb4c:	0020000b 	.word	0x0020000b
 801cb50:	004b0027 	.word	0x004b0027
 801cb54:	00200020 	.word	0x00200020
 801cb58:	002000b0 	.word	0x002000b0
 801cb5c:	00200106 	.word	0x00200106
 801cb60:	0112      	.short	0x0112
 801cb62:	f895 3294 	ldrb.w	r3, [r5, #660]	@ 0x294
 801cb66:	f88d 30d8 	strb.w	r3, [sp, #216]	@ 0xd8
 801cb6a:	2201      	movs	r2, #1
 801cb6c:	4633      	mov	r3, r6
 801cb6e:	f8cd 9000 	str.w	r9, [sp]
 801cb72:	a936      	add	r1, sp, #216	@ 0xd8
 801cb74:	2000      	movs	r0, #0
 801cb76:	f7ff ffc3 	bl	801cb00 <MobleProvision_CreateCommand>
 801cb7a:	f8d4 26f0 	ldr.w	r2, [r4, #1776]	@ 0x6f0
 801cb7e:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	@ 0xa18
 801cb82:	f892 2294 	ldrb.w	r2, [r2, #660]	@ 0x294
 801cb86:	f8c8 0000 	str.w	r0, [r8]
 801cb8a:	711a      	strb	r2, [r3, #4]
 801cb8c:	f8d8 0000 	ldr.w	r0, [r8]
 801cb90:	fab0 f080 	clz	r0, r0
 801cb94:	0940      	lsrs	r0, r0, #5
 801cb96:	0040      	lsls	r0, r0, #1
 801cb98:	e15a      	b.n	801ce50 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x334>
 801cb9a:	2300      	movs	r3, #0
 801cb9c:	9336      	str	r3, [sp, #216]	@ 0xd8
 801cb9e:	f88d 30dc 	strb.w	r3, [sp, #220]	@ 0xdc
 801cba2:	f895 31fa 	ldrb.w	r3, [r5, #506]	@ 0x1fa
 801cba6:	f88d 30d9 	strb.w	r3, [sp, #217]	@ 0xd9
 801cbaa:	f895 31fb 	ldrb.w	r3, [r5, #507]	@ 0x1fb
 801cbae:	f88d 30da 	strb.w	r3, [sp, #218]	@ 0xda
 801cbb2:	f895 31fc 	ldrb.w	r3, [r5, #508]	@ 0x1fc
 801cbb6:	f88d 30db 	strb.w	r3, [sp, #219]	@ 0xdb
 801cbba:	f895 31fd 	ldrb.w	r3, [r5, #509]	@ 0x1fd
 801cbbe:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 801cbc0:	f88d 30dc 	strb.w	r3, [sp, #220]	@ 0xdc
 801cbc4:	6138      	str	r0, [r7, #16]
 801cbc6:	f89d 30dc 	ldrb.w	r3, [sp, #220]	@ 0xdc
 801cbca:	753b      	strb	r3, [r7, #20]
 801cbcc:	2205      	movs	r2, #5
 801cbce:	f8cd 9000 	str.w	r9, [sp]
 801cbd2:	4633      	mov	r3, r6
 801cbd4:	a936      	add	r1, sp, #216	@ 0xd8
 801cbd6:	2002      	movs	r0, #2
 801cbd8:	f7ff ff92 	bl	801cb00 <MobleProvision_CreateCommand>
 801cbdc:	f8c8 0000 	str.w	r0, [r8]
 801cbe0:	e7d4      	b.n	801cb8c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x70>
 801cbe2:	2500      	movs	r5, #0
 801cbe4:	f8d4 7a18 	ldr.w	r7, [r4, #2584]	@ 0xa18
 801cbe8:	f7f8 fba6 	bl	8015338 <MoblePalBluetoothRandom>
 801cbec:	442f      	add	r7, r5
 801cbee:	3501      	adds	r5, #1
 801cbf0:	2d20      	cmp	r5, #32
 801cbf2:	f887 0095 	strb.w	r0, [r7, #149]	@ 0x95
 801cbf6:	d1f5      	bne.n	801cbe4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xc8>
 801cbf8:	f8d4 0a18 	ldr.w	r0, [r4, #2584]	@ 0xa18
 801cbfc:	4629      	mov	r1, r5
 801cbfe:	3095      	adds	r0, #149	@ 0x95
 801cc00:	f7fa f9d0 	bl	8016fa4 <MoblePalCryptoInitEcc>
 801cc04:	2800      	cmp	r0, #0
 801cc06:	f040 819d 	bne.w	801cf44 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x428>
 801cc0a:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	@ 0xa18
 801cc0e:	2201      	movs	r2, #1
 801cc10:	f883 21ac 	strb.w	r2, [r3, #428]	@ 0x1ac
 801cc14:	a826      	add	r0, sp, #152	@ 0x98
 801cc16:	f7f9 fac7 	bl	80161a8 <MoblePalCryptoGetEccPublicKey.part.0>
 801cc1a:	2800      	cmp	r0, #0
 801cc1c:	f040 8192 	bne.w	801cf44 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x428>
 801cc20:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801cc24:	f8d4 0a18 	ldr.w	r0, [r4, #2584]	@ 0xa18
 801cc28:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 801cc2c:	bb43      	cbnz	r3, 801cc80 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x164>
 801cc2e:	f8d4 7a18 	ldr.w	r7, [r4, #2584]	@ 0xa18
 801cc32:	f107 04b5 	add.w	r4, r7, #181	@ 0xb5
 801cc36:	f10d 0c98 	add.w	ip, sp, #152	@ 0x98
 801cc3a:	ad36      	add	r5, sp, #216	@ 0xd8
 801cc3c:	4623      	mov	r3, r4
 801cc3e:	4662      	mov	r2, ip
 801cc40:	ca03      	ldmia	r2!, {r0, r1}
 801cc42:	42aa      	cmp	r2, r5
 801cc44:	6020      	str	r0, [r4, #0]
 801cc46:	6061      	str	r1, [r4, #4]
 801cc48:	4694      	mov	ip, r2
 801cc4a:	f104 0408 	add.w	r4, r4, #8
 801cc4e:	d1f6      	bne.n	801cc3e <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x122>
 801cc50:	462c      	mov	r4, r5
 801cc52:	f107 0cf5 	add.w	ip, r7, #245	@ 0xf5
 801cc56:	6818      	ldr	r0, [r3, #0]
 801cc58:	6859      	ldr	r1, [r3, #4]
 801cc5a:	4622      	mov	r2, r4
 801cc5c:	c203      	stmia	r2!, {r0, r1}
 801cc5e:	3308      	adds	r3, #8
 801cc60:	4563      	cmp	r3, ip
 801cc62:	4614      	mov	r4, r2
 801cc64:	d1f7      	bne.n	801cc56 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x13a>
 801cc66:	2240      	movs	r2, #64	@ 0x40
 801cc68:	4629      	mov	r1, r5
 801cc6a:	f107 0015 	add.w	r0, r7, #21
 801cc6e:	f009 ff95 	bl	8026b9c <memmove>
 801cc72:	f8cd 9000 	str.w	r9, [sp]
 801cc76:	4633      	mov	r3, r6
 801cc78:	2240      	movs	r2, #64	@ 0x40
 801cc7a:	4629      	mov	r1, r5
 801cc7c:	2003      	movs	r0, #3
 801cc7e:	e7ab      	b.n	801cbd8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xbc>
 801cc80:	30f5      	adds	r0, #245	@ 0xf5
 801cc82:	f7fa f9a3 	bl	8016fcc <MoblePalCryptoGetEccGenSecret>
 801cc86:	b920      	cbnz	r0, 801cc92 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x176>
 801cc88:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	@ 0xa18
 801cc8c:	220d      	movs	r2, #13
 801cc8e:	701a      	strb	r2, [r3, #0]
 801cc90:	e77c      	b.n	801cb8c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x70>
 801cc92:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	@ 0xa18
 801cc96:	f100 0220 	add.w	r2, r0, #32
 801cc9a:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 801cc9e:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 801cca2:	f803 1f01 	strb.w	r1, [r3, #1]!
 801cca6:	4290      	cmp	r0, r2
 801cca8:	d1f9      	bne.n	801cc9e <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x182>
 801ccaa:	e7c0      	b.n	801cc2e <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x112>
 801ccac:	2300      	movs	r3, #0
 801ccae:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
 801ccb2:	e9cd 331d 	strd	r3, r3, [sp, #116]	@ 0x74
 801ccb6:	2291      	movs	r2, #145	@ 0x91
 801ccb8:	f207 1365 	addw	r3, r7, #357	@ 0x165
 801ccbc:	1d39      	adds	r1, r7, #4
 801ccbe:	a81b      	add	r0, sp, #108	@ 0x6c
 801ccc0:	f7f8 fdfa 	bl	80158b8 <BAES_CmacCompute>
 801ccc4:	2304      	movs	r3, #4
 801ccc6:	f8d4 0a18 	ldr.w	r0, [r4, #2584]	@ 0xa18
 801ccca:	9302      	str	r3, [sp, #8]
 801cccc:	4b27      	ldr	r3, [pc, #156]	@ (801cd6c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x250>)
 801ccce:	9301      	str	r3, [sp, #4]
 801ccd0:	2310      	movs	r3, #16
 801ccd2:	9300      	str	r3, [sp, #0]
 801ccd4:	f200 1135 	addw	r1, r0, #309	@ 0x135
 801ccd8:	f200 1365 	addw	r3, r0, #357	@ 0x165
 801ccdc:	2220      	movs	r2, #32
 801ccde:	f200 1055 	addw	r0, r0, #341	@ 0x155
 801cce2:	f7f8 feb7 	bl	8015a54 <MoblePalCryptoK1.part.0>
 801cce6:	2800      	cmp	r0, #0
 801cce8:	f040 812c 	bne.w	801cf44 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x428>
 801ccec:	4605      	mov	r5, r0
 801ccee:	f8d4 7a18 	ldr.w	r7, [r4, #2584]	@ 0xa18
 801ccf2:	f7f8 fb21 	bl	8015338 <MoblePalBluetoothRandom>
 801ccf6:	442f      	add	r7, r5
 801ccf8:	3501      	adds	r5, #1
 801ccfa:	2d10      	cmp	r5, #16
 801ccfc:	f887 0175 	strb.w	r0, [r7, #373]	@ 0x175
 801cd00:	d1f5      	bne.n	801ccee <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x1d2>
 801cd02:	ad26      	add	r5, sp, #152	@ 0x98
 801cd04:	2300      	movs	r3, #0
 801cd06:	4628      	mov	r0, r5
 801cd08:	e9cd 3326 	strd	r3, r3, [sp, #152]	@ 0x98
 801cd0c:	e9cd 3328 	strd	r3, r3, [sp, #160]	@ 0xa0
 801cd10:	f7ff fb06 	bl	801c320 <MobleProvisionGenerateAuthValue>
 801cd14:	f8d4 7a18 	ldr.w	r7, [r4, #2584]	@ 0xa18
 801cd18:	ac36      	add	r4, sp, #216	@ 0xd8
 801cd1a:	f207 1375 	addw	r3, r7, #373	@ 0x175
 801cd1e:	f207 1c85 	addw	ip, r7, #389	@ 0x185
 801cd22:	6818      	ldr	r0, [r3, #0]
 801cd24:	6859      	ldr	r1, [r3, #4]
 801cd26:	4622      	mov	r2, r4
 801cd28:	c203      	stmia	r2!, {r0, r1}
 801cd2a:	3308      	adds	r3, #8
 801cd2c:	4563      	cmp	r3, ip
 801cd2e:	4614      	mov	r4, r2
 801cd30:	d1f7      	bne.n	801cd22 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x206>
 801cd32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801cd36:	ac3a      	add	r4, sp, #232	@ 0xe8
 801cd38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801cd3c:	ab1f      	add	r3, sp, #124	@ 0x7c
 801cd3e:	2220      	movs	r2, #32
 801cd40:	a936      	add	r1, sp, #216	@ 0xd8
 801cd42:	f207 1055 	addw	r0, r7, #341	@ 0x155
 801cd46:	f7f8 fdb7 	bl	80158b8 <BAES_CmacCompute>
 801cd4a:	f8cd 9000 	str.w	r9, [sp]
 801cd4e:	4633      	mov	r3, r6
 801cd50:	2210      	movs	r2, #16
 801cd52:	a91f      	add	r1, sp, #124	@ 0x7c
 801cd54:	2005      	movs	r0, #5
 801cd56:	e73f      	b.n	801cbd8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xbc>
 801cd58:	f8cd 9000 	str.w	r9, [sp]
 801cd5c:	4633      	mov	r3, r6
 801cd5e:	2210      	movs	r2, #16
 801cd60:	f207 1175 	addw	r1, r7, #373	@ 0x175
 801cd64:	2006      	movs	r0, #6
 801cd66:	e737      	b.n	801cbd8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xbc>
 801cd68:	20002514 	.word	0x20002514
 801cd6c:	0802eb83 	.word	0x0802eb83
 801cd70:	2300      	movs	r3, #0
 801cd72:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 801cd76:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
 801cd7a:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 801cd7e:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
 801cd82:	e9cd 3313 	strd	r3, r3, [sp, #76]	@ 0x4c
 801cd86:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
 801cd8a:	f207 1565 	addw	r5, r7, #357	@ 0x165
 801cd8e:	aa36      	add	r2, sp, #216	@ 0xd8
 801cd90:	f207 1c75 	addw	ip, r7, #373	@ 0x175
 801cd94:	6828      	ldr	r0, [r5, #0]
 801cd96:	6869      	ldr	r1, [r5, #4]
 801cd98:	4613      	mov	r3, r2
 801cd9a:	c303      	stmia	r3!, {r0, r1}
 801cd9c:	3508      	adds	r5, #8
 801cd9e:	4565      	cmp	r5, ip
 801cda0:	461a      	mov	r2, r3
 801cda2:	d1f7      	bne.n	801cd94 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x278>
 801cda4:	aa3a      	add	r2, sp, #232	@ 0xe8
 801cda6:	f207 1c85 	addw	ip, r7, #389	@ 0x185
 801cdaa:	6828      	ldr	r0, [r5, #0]
 801cdac:	6869      	ldr	r1, [r5, #4]
 801cdae:	4613      	mov	r3, r2
 801cdb0:	c303      	stmia	r3!, {r0, r1}
 801cdb2:	3508      	adds	r5, #8
 801cdb4:	4565      	cmp	r5, ip
 801cdb6:	461a      	mov	r2, r3
 801cdb8:	d1f7      	bne.n	801cdaa <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x28e>
 801cdba:	aa3e      	add	r2, sp, #248	@ 0xf8
 801cdbc:	f207 1795 	addw	r7, r7, #405	@ 0x195
 801cdc0:	6828      	ldr	r0, [r5, #0]
 801cdc2:	6869      	ldr	r1, [r5, #4]
 801cdc4:	4613      	mov	r3, r2
 801cdc6:	c303      	stmia	r3!, {r0, r1}
 801cdc8:	3508      	adds	r5, #8
 801cdca:	42bd      	cmp	r5, r7
 801cdcc:	461a      	mov	r2, r3
 801cdce:	d1f7      	bne.n	801cdc0 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x2a4>
 801cdd0:	ab17      	add	r3, sp, #92	@ 0x5c
 801cdd2:	2230      	movs	r2, #48	@ 0x30
 801cdd4:	a936      	add	r1, sp, #216	@ 0xd8
 801cdd6:	a813      	add	r0, sp, #76	@ 0x4c
 801cdd8:	f7f8 fd6e 	bl	80158b8 <BAES_CmacCompute>
 801cddc:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	@ 0xa18
 801cde0:	4b5c      	ldr	r3, [pc, #368]	@ (801cf54 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x438>)
 801cde2:	9301      	str	r3, [sp, #4]
 801cde4:	2704      	movs	r7, #4
 801cde6:	2510      	movs	r5, #16
 801cde8:	9702      	str	r7, [sp, #8]
 801cdea:	9500      	str	r5, [sp, #0]
 801cdec:	ab17      	add	r3, sp, #92	@ 0x5c
 801cdee:	2220      	movs	r2, #32
 801cdf0:	f201 1135 	addw	r1, r1, #309	@ 0x135
 801cdf4:	a80b      	add	r0, sp, #44	@ 0x2c
 801cdf6:	f7f8 fe2d 	bl	8015a54 <MoblePalCryptoK1.part.0>
 801cdfa:	2800      	cmp	r0, #0
 801cdfc:	f040 80a2 	bne.w	801cf44 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x428>
 801ce00:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	@ 0xa18
 801ce04:	4b54      	ldr	r3, [pc, #336]	@ (801cf58 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x43c>)
 801ce06:	9702      	str	r7, [sp, #8]
 801ce08:	e9cd 5300 	strd	r5, r3, [sp]
 801ce0c:	2220      	movs	r2, #32
 801ce0e:	ab17      	add	r3, sp, #92	@ 0x5c
 801ce10:	f201 1135 	addw	r1, r1, #309	@ 0x135
 801ce14:	a80f      	add	r0, sp, #60	@ 0x3c
 801ce16:	f7f8 fe1d 	bl	8015a54 <MoblePalCryptoK1.part.0>
 801ce1a:	2800      	cmp	r0, #0
 801ce1c:	f040 8092 	bne.w	801cf44 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x428>
 801ce20:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	@ 0xa18
 801ce24:	4b4d      	ldr	r3, [pc, #308]	@ (801cf5c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x440>)
 801ce26:	9702      	str	r7, [sp, #8]
 801ce28:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
 801ce2c:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
 801ce30:	e9cd 5300 	strd	r5, r3, [sp]
 801ce34:	2220      	movs	r2, #32
 801ce36:	ab17      	add	r3, sp, #92	@ 0x5c
 801ce38:	f201 1135 	addw	r1, r1, #309	@ 0x135
 801ce3c:	a81b      	add	r0, sp, #108	@ 0x6c
 801ce3e:	f7f8 fe09 	bl	8015a54 <MoblePalCryptoK1.part.0>
 801ce42:	2801      	cmp	r0, #1
 801ce44:	d907      	bls.n	801ce56 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x33a>
 801ce46:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	@ 0xa0c
 801ce4a:	2002      	movs	r0, #2
 801ce4c:	f883 01a8 	strb.w	r0, [r3, #424]	@ 0x1a8
 801ce50:	b046      	add	sp, #280	@ 0x118
 801ce52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce56:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801ce5a:	f8df a108 	ldr.w	sl, [pc, #264]	@ 801cf64 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x448>
 801ce5e:	f893 227c 	ldrb.w	r2, [r3, #636]	@ 0x27c
 801ce62:	f50a 61b3 	add.w	r1, sl, #1432	@ 0x598
 801ce66:	a81b      	add	r0, sp, #108	@ 0x6c
 801ce68:	f7fd fb1f 	bl	801a4aa <BLEMesh_PvnrDataInputCallback>
 801ce6c:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801ce70:	f20a 4724 	addw	r7, sl, #1060	@ 0x424
 801ce74:	f8a3 0296 	strh.w	r0, [r3, #662]	@ 0x296
 801ce78:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801ce7c:	ad1f      	add	r5, sp, #124	@ 0x7c
 801ce7e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801ce82:	f10d 011a 	add.w	r1, sp, #26
 801ce86:	a807      	add	r0, sp, #28
 801ce88:	f7f9 fada 	bl	8016440 <MoblePalCrypto_GetNetKeyIndexes>
 801ce8c:	f89a 365c 	ldrb.w	r3, [sl, #1628]	@ 0x65c
 801ce90:	4a33      	ldr	r2, [pc, #204]	@ (801cf60 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x444>)
 801ce92:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ce96:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 801ce9a:	3b00      	subs	r3, #0
 801ce9c:	bf18      	it	ne
 801ce9e:	2301      	movne	r3, #1
 801cea0:	005b      	lsls	r3, r3, #1
 801cea2:	2a02      	cmp	r2, #2
 801cea4:	bf08      	it	eq
 801cea6:	f043 0301 	orreq.w	r3, r3, #1
 801ceaa:	2202      	movs	r2, #2
 801ceac:	a823      	add	r0, sp, #140	@ 0x8c
 801ceae:	f7fb faf6 	bl	801849e <MobleOutputStreamPutBigEndian>
 801ceb2:	4619      	mov	r1, r3
 801ceb4:	2201      	movs	r2, #1
 801ceb6:	f10d 008e 	add.w	r0, sp, #142	@ 0x8e
 801ceba:	f7fb faf0 	bl	801849e <MobleOutputStreamPutBigEndian>
 801cebe:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801cec2:	681b      	ldr	r3, [r3, #0]
 801cec4:	2204      	movs	r2, #4
 801cec6:	6859      	ldr	r1, [r3, #4]
 801cec8:	f10d 008f 	add.w	r0, sp, #143	@ 0x8f
 801cecc:	f7fb fae7 	bl	801849e <MobleOutputStreamPutBigEndian>
 801ced0:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801ced4:	2202      	movs	r2, #2
 801ced6:	f8b3 1296 	ldrh.w	r1, [r3, #662]	@ 0x296
 801ceda:	f10d 0093 	add.w	r0, sp, #147	@ 0x93
 801cede:	2300      	movs	r3, #0
 801cee0:	f7fb fadd 	bl	801849e <MobleOutputStreamPutBigEndian>
 801cee4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801cee8:	2319      	movs	r3, #25
 801ceea:	e9cd 5302 	strd	r5, r3, [sp, #8]
 801ceee:	230d      	movs	r3, #13
 801cef0:	9301      	str	r3, [sp, #4]
 801cef2:	f10d 033f 	add.w	r3, sp, #63	@ 0x3f
 801cef6:	9300      	str	r3, [sp, #0]
 801cef8:	2208      	movs	r2, #8
 801cefa:	ab0b      	add	r3, sp, #44	@ 0x2c
 801cefc:	a909      	add	r1, sp, #36	@ 0x24
 801cefe:	a826      	add	r0, sp, #152	@ 0x98
 801cf00:	f7f9 fe6e 	bl	8016be0 <MoblePalCryptoAesCcmEncrypt>
 801cf04:	4602      	mov	r2, r0
 801cf06:	b9e8      	cbnz	r0, 801cf44 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x428>
 801cf08:	ab09      	add	r3, sp, #36	@ 0x24
 801cf0a:	cb03      	ldmia	r3!, {r0, r1}
 801cf0c:	f1b9 0f21 	cmp.w	r9, #33	@ 0x21
 801cf10:	f8cd 00b1 	str.w	r0, [sp, #177]	@ 0xb1
 801cf14:	f8cd 10b5 	str.w	r1, [sp, #181]	@ 0xb5
 801cf18:	d911      	bls.n	801cf3e <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x422>
 801cf1a:	4633      	mov	r3, r6
 801cf1c:	2207      	movs	r2, #7
 801cf1e:	f803 2b01 	strb.w	r2, [r3], #1
 801cf22:	ad2e      	add	r5, sp, #184	@ 0xb8
 801cf24:	aa26      	add	r2, sp, #152	@ 0x98
 801cf26:	4614      	mov	r4, r2
 801cf28:	cc03      	ldmia	r4!, {r0, r1}
 801cf2a:	42ac      	cmp	r4, r5
 801cf2c:	6018      	str	r0, [r3, #0]
 801cf2e:	6059      	str	r1, [r3, #4]
 801cf30:	4622      	mov	r2, r4
 801cf32:	f103 0308 	add.w	r3, r3, #8
 801cf36:	d1f6      	bne.n	801cf26 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x40a>
 801cf38:	7822      	ldrb	r2, [r4, #0]
 801cf3a:	701a      	strb	r2, [r3, #0]
 801cf3c:	2222      	movs	r2, #34	@ 0x22
 801cf3e:	f8c8 2000 	str.w	r2, [r8]
 801cf42:	e623      	b.n	801cb8c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x70>
 801cf44:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	@ 0xa18
 801cf48:	220d      	movs	r2, #13
 801cf4a:	701a      	strb	r2, [r3, #0]
 801cf4c:	2002      	movs	r0, #2
 801cf4e:	e77f      	b.n	801ce50 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x334>
 801cf50:	2003      	movs	r0, #3
 801cf52:	e77d      	b.n	801ce50 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x334>
 801cf54:	0802eb88 	.word	0x0802eb88
 801cf58:	0802eb8d 	.word	0x0802eb8d
 801cf5c:	0802eb92 	.word	0x0802eb92
 801cf60:	20000324 	.word	0x20000324
 801cf64:	2000141c 	.word	0x2000141c

0801cf68 <MobleProvision_UnprovisionedNode_GetOutputMessage>:
 801cf68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf6a:	b095      	sub	sp, #84	@ 0x54
 801cf6c:	2500      	movs	r5, #0
 801cf6e:	4f33      	ldr	r7, [pc, #204]	@ (801d03c <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd4>)
 801cf70:	9003      	str	r0, [sp, #12]
 801cf72:	460e      	mov	r6, r1
 801cf74:	4614      	mov	r4, r2
 801cf76:	4629      	mov	r1, r5
 801cf78:	223c      	movs	r2, #60	@ 0x3c
 801cf7a:	a805      	add	r0, sp, #20
 801cf7c:	9504      	str	r5, [sp, #16]
 801cf7e:	f009 fe27 	bl	8026bd0 <memset>
 801cf82:	f8d7 06f0 	ldr.w	r0, [r7, #1776]	@ 0x6f0
 801cf86:	f7ff f925 	bl	801c1d4 <MobleProvisionGetRole>
 801cf8a:	2801      	cmp	r0, #1
 801cf8c:	4602      	mov	r2, r0
 801cf8e:	d153      	bne.n	801d038 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801cf90:	2e00      	cmp	r6, #0
 801cf92:	d051      	beq.n	801d038 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801cf94:	2c00      	cmp	r4, #0
 801cf96:	d04f      	beq.n	801d038 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801cf98:	9b03      	ldr	r3, [sp, #12]
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d04c      	beq.n	801d038 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801cf9e:	6025      	str	r5, [r4, #0]
 801cfa0:	f8d7 5a0c 	ldr.w	r5, [r7, #2572]	@ 0xa0c
 801cfa4:	f895 11a8 	ldrb.w	r1, [r5, #424]	@ 0x1a8
 801cfa8:	b161      	cbz	r1, 801cfc4 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x5c>
 801cfaa:	9600      	str	r6, [sp, #0]
 801cfac:	f505 71d4 	add.w	r1, r5, #424	@ 0x1a8
 801cfb0:	2009      	movs	r0, #9
 801cfb2:	f7ff fda5 	bl	801cb00 <MobleProvision_CreateCommand>
 801cfb6:	6020      	str	r0, [r4, #0]
 801cfb8:	fab0 f080 	clz	r0, r0
 801cfbc:	0940      	lsrs	r0, r0, #5
 801cfbe:	0040      	lsls	r0, r0, #1
 801cfc0:	b015      	add	sp, #84	@ 0x54
 801cfc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cfc4:	f895 2044 	ldrb.w	r2, [r5, #68]	@ 0x44
 801cfc8:	2a05      	cmp	r2, #5
 801cfca:	d80c      	bhi.n	801cfe6 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x7e>
 801cfcc:	e8df f002 	tbb	[pc, r2]
 801cfd0:	21260d03 	.word	0x21260d03
 801cfd4:	322c      	.short	0x322c
 801cfd6:	9600      	str	r6, [sp, #0]
 801cfd8:	220b      	movs	r2, #11
 801cfda:	f105 0146 	add.w	r1, r5, #70	@ 0x46
 801cfde:	2001      	movs	r0, #1
 801cfe0:	f7ff fd8e 	bl	801cb00 <MobleProvision_CreateCommand>
 801cfe4:	6020      	str	r0, [r4, #0]
 801cfe6:	6820      	ldr	r0, [r4, #0]
 801cfe8:	e7e6      	b.n	801cfb8 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x50>
 801cfea:	af04      	add	r7, sp, #16
 801cfec:	f505 72b1 	add.w	r2, r5, #354	@ 0x162
 801cff0:	46be      	mov	lr, r7
 801cff2:	f505 75d1 	add.w	r5, r5, #418	@ 0x1a2
 801cff6:	6810      	ldr	r0, [r2, #0]
 801cff8:	6851      	ldr	r1, [r2, #4]
 801cffa:	46bc      	mov	ip, r7
 801cffc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d000:	3208      	adds	r2, #8
 801d002:	42aa      	cmp	r2, r5
 801d004:	4667      	mov	r7, ip
 801d006:	d1f6      	bne.n	801cff6 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x8e>
 801d008:	9600      	str	r6, [sp, #0]
 801d00a:	2240      	movs	r2, #64	@ 0x40
 801d00c:	4671      	mov	r1, lr
 801d00e:	2003      	movs	r0, #3
 801d010:	e7e6      	b.n	801cfe0 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x78>
 801d012:	2204      	movs	r2, #4
 801d014:	701a      	strb	r2, [r3, #0]
 801d016:	2301      	movs	r3, #1
 801d018:	6023      	str	r3, [r4, #0]
 801d01a:	e7e4      	b.n	801cfe6 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x7e>
 801d01c:	9600      	str	r6, [sp, #0]
 801d01e:	2210      	movs	r2, #16
 801d020:	f505 7181 	add.w	r1, r5, #258	@ 0x102
 801d024:	2005      	movs	r0, #5
 801d026:	e7db      	b.n	801cfe0 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x78>
 801d028:	9600      	str	r6, [sp, #0]
 801d02a:	2210      	movs	r2, #16
 801d02c:	f505 7191 	add.w	r1, r5, #290	@ 0x122
 801d030:	2006      	movs	r0, #6
 801d032:	e7d5      	b.n	801cfe0 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x78>
 801d034:	2208      	movs	r2, #8
 801d036:	e7ed      	b.n	801d014 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xac>
 801d038:	2003      	movs	r0, #3
 801d03a:	e7c1      	b.n	801cfc0 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x58>
 801d03c:	20002514 	.word	0x20002514

0801d040 <MobleProvisionBearerGatt_Transmit>:
 801d040:	b500      	push	{lr}
 801d042:	b0a3      	sub	sp, #140	@ 0x8c
 801d044:	aa01      	add	r2, sp, #4
 801d046:	2180      	movs	r1, #128	@ 0x80
 801d048:	a802      	add	r0, sp, #8
 801d04a:	f7ff ff8d 	bl	801cf68 <MobleProvision_UnprovisionedNode_GetOutputMessage>
 801d04e:	2801      	cmp	r0, #1
 801d050:	d805      	bhi.n	801d05e <MobleProvisionBearerGatt_Transmit+0x1e>
 801d052:	9b01      	ldr	r3, [sp, #4]
 801d054:	aa02      	add	r2, sp, #8
 801d056:	2100      	movs	r1, #0
 801d058:	2003      	movs	r0, #3
 801d05a:	f7fd fe3f 	bl	801acdc <BnrgmProxyProtocol_SendData>
 801d05e:	b023      	add	sp, #140	@ 0x8c
 801d060:	f85d fb04 	ldr.w	pc, [sp], #4

0801d064 <MobleProvision_UnprovisionedNode_IsCompleted>:
 801d064:	4b04      	ldr	r3, [pc, #16]	@ (801d078 <MobleProvision_UnprovisionedNode_IsCompleted+0x14>)
 801d066:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 801d06a:	f893 0044 	ldrb.w	r0, [r3, #68]	@ 0x44
 801d06e:	1f83      	subs	r3, r0, #6
 801d070:	4258      	negs	r0, r3
 801d072:	4158      	adcs	r0, r3
 801d074:	4770      	bx	lr
 801d076:	bf00      	nop
 801d078:	20002514 	.word	0x20002514

0801d07c <MobleProvision_ProvisionerNode_Init>:
 801d07c:	b570      	push	{r4, r5, r6, lr}
 801d07e:	f44f 70d8 	mov.w	r0, #432	@ 0x1b0
 801d082:	f7fb f851 	bl	8018128 <MobleMemAlloc>
 801d086:	4e0d      	ldr	r6, [pc, #52]	@ (801d0bc <MobleProvision_ProvisionerNode_Init+0x40>)
 801d088:	4605      	mov	r5, r0
 801d08a:	f8c6 0a18 	str.w	r0, [r6, #2584]	@ 0xa18
 801d08e:	b180      	cbz	r0, 801d0b2 <MobleProvision_ProvisionerNode_Init+0x36>
 801d090:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	@ 0x6f0
 801d094:	f7ff f89e 	bl	801c1d4 <MobleProvisionGetRole>
 801d098:	4604      	mov	r4, r0
 801d09a:	b960      	cbnz	r0, 801d0b6 <MobleProvision_ProvisionerNode_Init+0x3a>
 801d09c:	7028      	strb	r0, [r5, #0]
 801d09e:	f7e9 fd41 	bl	8006b24 <HAL_GetTick>
 801d0a2:	f8d6 3a18 	ldr.w	r3, [r6, #2584]	@ 0xa18
 801d0a6:	f8c5 01a8 	str.w	r0, [r5, #424]	@ 0x1a8
 801d0aa:	f883 41ac 	strb.w	r4, [r3, #428]	@ 0x1ac
 801d0ae:	4620      	mov	r0, r4
 801d0b0:	bd70      	pop	{r4, r5, r6, pc}
 801d0b2:	2402      	movs	r4, #2
 801d0b4:	e7fb      	b.n	801d0ae <MobleProvision_ProvisionerNode_Init+0x32>
 801d0b6:	2403      	movs	r4, #3
 801d0b8:	e7f9      	b.n	801d0ae <MobleProvision_ProvisionerNode_Init+0x32>
 801d0ba:	bf00      	nop
 801d0bc:	20002514 	.word	0x20002514

0801d0c0 <MobleProvision_ProvisionerNode_DeInit>:
 801d0c0:	b510      	push	{r4, lr}
 801d0c2:	4c09      	ldr	r4, [pc, #36]	@ (801d0e8 <MobleProvision_ProvisionerNode_DeInit+0x28>)
 801d0c4:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	@ 0xa18
 801d0c8:	f891 31ac 	ldrb.w	r3, [r1, #428]	@ 0x1ac
 801d0cc:	2b01      	cmp	r3, #1
 801d0ce:	d104      	bne.n	801d0da <MobleProvision_ProvisionerNode_DeInit+0x1a>
 801d0d0:	f7f9 ff92 	bl	8016ff8 <MoblePalCryptoFreeEcc>
 801d0d4:	2300      	movs	r3, #0
 801d0d6:	f881 31ac 	strb.w	r3, [r1, #428]	@ 0x1ac
 801d0da:	4608      	mov	r0, r1
 801d0dc:	f7fb f8ae 	bl	801823c <MobleMemFree>
 801d0e0:	2000      	movs	r0, #0
 801d0e2:	f8c4 0a18 	str.w	r0, [r4, #2584]	@ 0xa18
 801d0e6:	bd10      	pop	{r4, pc}
 801d0e8:	20002514 	.word	0x20002514

0801d0ec <MobleProvision_ProvisionerNode_GetNextOperation>:
 801d0ec:	4b0b      	ldr	r3, [pc, #44]	@ (801d11c <MobleProvision_ProvisionerNode_GetNextOperation+0x30>)
 801d0ee:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
 801d0f2:	781a      	ldrb	r2, [r3, #0]
 801d0f4:	2a0b      	cmp	r2, #11
 801d0f6:	d80c      	bhi.n	801d112 <MobleProvision_ProvisionerNode_GetNextOperation+0x26>
 801d0f8:	2301      	movs	r3, #1
 801d0fa:	4093      	lsls	r3, r2
 801d0fc:	f240 524d 	movw	r2, #1357	@ 0x54d
 801d100:	4213      	tst	r3, r2
 801d102:	d108      	bne.n	801d116 <MobleProvision_ProvisionerNode_GetNextOperation+0x2a>
 801d104:	f640 2292 	movw	r2, #2706	@ 0xa92
 801d108:	4213      	tst	r3, r2
 801d10a:	bf14      	ite	ne
 801d10c:	2001      	movne	r0, #1
 801d10e:	2000      	moveq	r0, #0
 801d110:	4770      	bx	lr
 801d112:	2000      	movs	r0, #0
 801d114:	4770      	bx	lr
 801d116:	2002      	movs	r0, #2
 801d118:	4770      	bx	lr
 801d11a:	bf00      	nop
 801d11c:	20002514 	.word	0x20002514

0801d120 <MobleProvision_ProvisionerNode_StateForOOB>:
 801d120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d122:	4e53      	ldr	r6, [pc, #332]	@ (801d270 <MobleProvision_ProvisionerNode_StateForOOB+0x150>)
 801d124:	f8d6 1a18 	ldr.w	r1, [r6, #2584]	@ 0xa18
 801d128:	7808      	ldrb	r0, [r1, #0]
 801d12a:	1c43      	adds	r3, r0, #1
 801d12c:	700b      	strb	r3, [r1, #0]
 801d12e:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 801d132:	f893 21fb 	ldrb.w	r2, [r3, #507]	@ 0x1fb
 801d136:	2a02      	cmp	r2, #2
 801d138:	d01b      	beq.n	801d172 <MobleProvision_ProvisionerNode_StateForOOB+0x52>
 801d13a:	2a03      	cmp	r2, #3
 801d13c:	d029      	beq.n	801d192 <MobleProvision_ProvisionerNode_StateForOOB+0x72>
 801d13e:	2a01      	cmp	r2, #1
 801d140:	d125      	bne.n	801d18e <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801d142:	f8d3 228c 	ldr.w	r2, [r3, #652]	@ 0x28c
 801d146:	f893 01fd 	ldrb.w	r0, [r3, #509]	@ 0x1fd
 801d14a:	4790      	blx	r2
 801d14c:	4601      	mov	r1, r0
 801d14e:	2800      	cmp	r0, #0
 801d150:	f000 8085 	beq.w	801d25e <MobleProvision_ProvisionerNode_StateForOOB+0x13e>
 801d154:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	@ 0x6f0
 801d158:	f890 21fd 	ldrb.w	r2, [r0, #509]	@ 0x1fd
 801d15c:	2a00      	cmp	r2, #0
 801d15e:	d07e      	beq.n	801d25e <MobleProvision_ProvisionerNode_StateForOOB+0x13e>
 801d160:	f500 701a 	add.w	r0, r0, #616	@ 0x268
 801d164:	f009 fd1a 	bl	8026b9c <memmove>
 801d168:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 801d16c:	f893 21fd 	ldrb.w	r2, [r3, #509]	@ 0x1fd
 801d170:	e069      	b.n	801d246 <MobleProvision_ProvisionerNode_StateForOOB+0x126>
 801d172:	f893 11fd 	ldrb.w	r1, [r3, #509]	@ 0x1fd
 801d176:	b151      	cbz	r1, 801d18e <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801d178:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 801d17c:	b138      	cbz	r0, 801d18e <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801d17e:	f893 01fc 	ldrb.w	r0, [r3, #508]	@ 0x1fc
 801d182:	2803      	cmp	r0, #3
 801d184:	d95f      	bls.n	801d246 <MobleProvision_ProvisionerNode_StateForOOB+0x126>
 801d186:	2804      	cmp	r0, #4
 801d188:	bf08      	it	eq
 801d18a:	f883 1278 	strbeq.w	r1, [r3, #632]	@ 0x278
 801d18e:	b003      	add	sp, #12
 801d190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d192:	7008      	strb	r0, [r1, #0]
 801d194:	f8d3 2288 	ldr.w	r2, [r3, #648]	@ 0x288
 801d198:	2a00      	cmp	r2, #0
 801d19a:	d0f8      	beq.n	801d18e <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801d19c:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 801d1a0:	2b02      	cmp	r3, #2
 801d1a2:	d953      	bls.n	801d24c <MobleProvision_ProvisionerNode_StateForOOB+0x12c>
 801d1a4:	2b03      	cmp	r3, #3
 801d1a6:	d1f2      	bne.n	801d18e <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801d1a8:	2400      	movs	r4, #0
 801d1aa:	253e      	movs	r5, #62	@ 0x3e
 801d1ac:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 801d1b0:	f893 21fd 	ldrb.w	r2, [r3, #509]	@ 0x1fd
 801d1b4:	f893 1278 	ldrb.w	r1, [r3, #632]	@ 0x278
 801d1b8:	4291      	cmp	r1, r2
 801d1ba:	d244      	bcs.n	801d246 <MobleProvision_ProvisionerNode_StateForOOB+0x126>
 801d1bc:	4668      	mov	r0, sp
 801d1be:	e9cd 4400 	strd	r4, r4, [sp]
 801d1c2:	f7f5 fd0e 	bl	8012be2 <hci_le_rand>
 801d1c6:	4669      	mov	r1, sp
 801d1c8:	2208      	movs	r2, #8
 801d1ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d1ce:	fbb3 f0f5 	udiv	r0, r3, r5
 801d1d2:	fb05 3310 	mls	r3, r5, r0, r3
 801d1d6:	b2db      	uxtb	r3, r3
 801d1d8:	2b0a      	cmp	r3, #10
 801d1da:	d83b      	bhi.n	801d254 <MobleProvision_ProvisionerNode_StateForOOB+0x134>
 801d1dc:	3330      	adds	r3, #48	@ 0x30
 801d1de:	b2db      	uxtb	r3, r3
 801d1e0:	3a01      	subs	r2, #1
 801d1e2:	f801 3c01 	strb.w	r3, [r1, #-1]
 801d1e6:	d1f0      	bne.n	801d1ca <MobleProvision_ProvisionerNode_StateForOOB+0xaa>
 801d1e8:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 801d1ec:	f893 0278 	ldrb.w	r0, [r3, #632]	@ 0x278
 801d1f0:	f893 21fd 	ldrb.w	r2, [r3, #509]	@ 0x1fd
 801d1f4:	1a12      	subs	r2, r2, r0
 801d1f6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 801d1fa:	2a08      	cmp	r2, #8
 801d1fc:	bfa8      	it	ge
 801d1fe:	2208      	movge	r2, #8
 801d200:	4418      	add	r0, r3
 801d202:	4669      	mov	r1, sp
 801d204:	f009 fcca 	bl	8026b9c <memmove>
 801d208:	f8d6 26f0 	ldr.w	r2, [r6, #1776]	@ 0x6f0
 801d20c:	f892 3278 	ldrb.w	r3, [r2, #632]	@ 0x278
 801d210:	3308      	adds	r3, #8
 801d212:	f882 3278 	strb.w	r3, [r2, #632]	@ 0x278
 801d216:	e7c9      	b.n	801d1ac <MobleProvision_ProvisionerNode_StateForOOB+0x8c>
 801d218:	f7f8 f88e 	bl	8015338 <MoblePalBluetoothRandom>
 801d21c:	fbb0 f3f7 	udiv	r3, r0, r7
 801d220:	fb03 0017 	mls	r0, r3, r7, r0
 801d224:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801d228:	b2c0      	uxtb	r0, r0
 801d22a:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 801d22e:	b284      	uxth	r4, r0
 801d230:	3501      	adds	r5, #1
 801d232:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 801d236:	f893 11fd 	ldrb.w	r1, [r3, #509]	@ 0x1fd
 801d23a:	b2ea      	uxtb	r2, r5
 801d23c:	4291      	cmp	r1, r2
 801d23e:	d8eb      	bhi.n	801d218 <MobleProvision_ProvisionerNode_StateForOOB+0xf8>
 801d240:	f8a3 4268 	strh.w	r4, [r3, #616]	@ 0x268
 801d244:	2202      	movs	r2, #2
 801d246:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278
 801d24a:	e7a0      	b.n	801d18e <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801d24c:	2500      	movs	r5, #0
 801d24e:	462c      	mov	r4, r5
 801d250:	270a      	movs	r7, #10
 801d252:	e7ee      	b.n	801d232 <MobleProvision_ProvisionerNode_StateForOOB+0x112>
 801d254:	2b24      	cmp	r3, #36	@ 0x24
 801d256:	bf94      	ite	ls
 801d258:	3357      	addls	r3, #87	@ 0x57
 801d25a:	331d      	addhi	r3, #29
 801d25c:	e7bf      	b.n	801d1de <MobleProvision_ProvisionerNode_StateForOOB+0xbe>
 801d25e:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	@ 0x6f0
 801d262:	2210      	movs	r2, #16
 801d264:	2100      	movs	r1, #0
 801d266:	f500 701a 	add.w	r0, r0, #616	@ 0x268
 801d26a:	f009 fcb1 	bl	8026bd0 <memset>
 801d26e:	e77b      	b.n	801d168 <MobleProvision_ProvisionerNode_StateForOOB+0x48>
 801d270:	20002514 	.word	0x20002514

0801d274 <MobleProvision_ProvisionerNode_CompleteOperation>:
 801d274:	b570      	push	{r4, r5, r6, lr}
 801d276:	4c29      	ldr	r4, [pc, #164]	@ (801d31c <MobleProvision_ProvisionerNode_CompleteOperation+0xa8>)
 801d278:	f8d4 2a18 	ldr.w	r2, [r4, #2584]	@ 0xa18
 801d27c:	7813      	ldrb	r3, [r2, #0]
 801d27e:	f1a3 010c 	sub.w	r1, r3, #12
 801d282:	2901      	cmp	r1, #1
 801d284:	b090      	sub	sp, #64	@ 0x40
 801d286:	d945      	bls.n	801d314 <MobleProvision_ProvisionerNode_CompleteOperation+0xa0>
 801d288:	2b03      	cmp	r3, #3
 801d28a:	d145      	bne.n	801d318 <MobleProvision_ProvisionerNode_CompleteOperation+0xa4>
 801d28c:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801d290:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 801d294:	b123      	cbz	r3, 801d2a0 <MobleProvision_ProvisionerNode_CompleteOperation+0x2c>
 801d296:	2304      	movs	r3, #4
 801d298:	7013      	strb	r3, [r2, #0]
 801d29a:	f7ff ff41 	bl	801d120 <MobleProvision_ProvisionerNode_StateForOOB>
 801d29e:	2301      	movs	r3, #1
 801d2a0:	f8d4 2a18 	ldr.w	r2, [r4, #2584]	@ 0xa18
 801d2a4:	7812      	ldrb	r2, [r2, #0]
 801d2a6:	2a04      	cmp	r2, #4
 801d2a8:	d102      	bne.n	801d2b0 <MobleProvision_ProvisionerNode_CompleteOperation+0x3c>
 801d2aa:	bb73      	cbnz	r3, 801d30a <MobleProvision_ProvisionerNode_CompleteOperation+0x96>
 801d2ac:	f7ff ff38 	bl	801d120 <MobleProvision_ProvisionerNode_StateForOOB>
 801d2b0:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	@ 0xa18
 801d2b4:	781b      	ldrb	r3, [r3, #0]
 801d2b6:	2b02      	cmp	r3, #2
 801d2b8:	d127      	bne.n	801d30a <MobleProvision_ProvisionerNode_CompleteOperation+0x96>
 801d2ba:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801d2be:	f893 01fa 	ldrb.w	r0, [r3, #506]	@ 0x1fa
 801d2c2:	b310      	cbz	r0, 801d30a <MobleProvision_ProvisionerNode_CompleteOperation+0x96>
 801d2c4:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 801d2c8:	4798      	blx	r3
 801d2ca:	f8d4 5a18 	ldr.w	r5, [r4, #2584]	@ 0xa18
 801d2ce:	35f5      	adds	r5, #245	@ 0xf5
 801d2d0:	4601      	mov	r1, r0
 801d2d2:	2240      	movs	r2, #64	@ 0x40
 801d2d4:	4628      	mov	r0, r5
 801d2d6:	f009 fc61 	bl	8026b9c <memmove>
 801d2da:	2100      	movs	r1, #0
 801d2dc:	223c      	movs	r2, #60	@ 0x3c
 801d2de:	a801      	add	r0, sp, #4
 801d2e0:	9100      	str	r1, [sp, #0]
 801d2e2:	f009 fc75 	bl	8026bd0 <memset>
 801d2e6:	4669      	mov	r1, sp
 801d2e8:	4628      	mov	r0, r5
 801d2ea:	f7f9 fe91 	bl	8017010 <MoblePalCrypto_PK_convert_le>
 801d2ee:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	@ 0xa18
 801d2f2:	466a      	mov	r2, sp
 801d2f4:	3355      	adds	r3, #85	@ 0x55
 801d2f6:	ae10      	add	r6, sp, #64	@ 0x40
 801d2f8:	4615      	mov	r5, r2
 801d2fa:	cd03      	ldmia	r5!, {r0, r1}
 801d2fc:	42b5      	cmp	r5, r6
 801d2fe:	6018      	str	r0, [r3, #0]
 801d300:	6059      	str	r1, [r3, #4]
 801d302:	462a      	mov	r2, r5
 801d304:	f103 0308 	add.w	r3, r3, #8
 801d308:	d1f6      	bne.n	801d2f8 <MobleProvision_ProvisionerNode_CompleteOperation+0x84>
 801d30a:	f8d4 2a18 	ldr.w	r2, [r4, #2584]	@ 0xa18
 801d30e:	7813      	ldrb	r3, [r2, #0]
 801d310:	3301      	adds	r3, #1
 801d312:	7013      	strb	r3, [r2, #0]
 801d314:	b010      	add	sp, #64	@ 0x40
 801d316:	bd70      	pop	{r4, r5, r6, pc}
 801d318:	2300      	movs	r3, #0
 801d31a:	e7c1      	b.n	801d2a0 <MobleProvision_ProvisionerNode_CompleteOperation+0x2c>
 801d31c:	20002514 	.word	0x20002514

0801d320 <MobleProvision_ProvisionerNode_SetInputMessage>:
 801d320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d324:	4680      	mov	r8, r0
 801d326:	b094      	sub	sp, #80	@ 0x50
 801d328:	4617      	mov	r7, r2
 801d32a:	460c      	mov	r4, r1
 801d32c:	b199      	cbz	r1, 801d356 <MobleProvision_ProvisionerNode_SetInputMessage+0x36>
 801d32e:	4e92      	ldr	r6, [pc, #584]	@ (801d578 <MobleProvision_ProvisionerNode_SetInputMessage+0x258>)
 801d330:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	@ 0x6f0
 801d334:	f7fe ff4e 	bl	801c1d4 <MobleProvisionGetRole>
 801d338:	4605      	mov	r5, r0
 801d33a:	b960      	cbnz	r0, 801d356 <MobleProvision_ProvisionerNode_SetInputMessage+0x36>
 801d33c:	f7e9 fbf2 	bl	8006b24 <HAL_GetTick>
 801d340:	f8d6 9a18 	ldr.w	r9, [r6, #2584]	@ 0xa18
 801d344:	f8d9 31a8 	ldr.w	r3, [r9, #424]	@ 0x1a8
 801d348:	1ac0      	subs	r0, r0, r3
 801d34a:	4b8c      	ldr	r3, [pc, #560]	@ (801d57c <MobleProvision_ProvisionerNode_SetInputMessage+0x25c>)
 801d34c:	4298      	cmp	r0, r3
 801d34e:	d904      	bls.n	801d35a <MobleProvision_ProvisionerNode_SetInputMessage+0x3a>
 801d350:	230d      	movs	r3, #13
 801d352:	f889 3000 	strb.w	r3, [r9]
 801d356:	2503      	movs	r5, #3
 801d358:	e089      	b.n	801d46e <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801d35a:	f7e9 fbe3 	bl	8006b24 <HAL_GetTick>
 801d35e:	f1b8 0f09 	cmp.w	r8, #9
 801d362:	f8c9 01a8 	str.w	r0, [r9, #424]	@ 0x1a8
 801d366:	d102      	bne.n	801d36e <MobleProvision_ProvisionerNode_SetInputMessage+0x4e>
 801d368:	2f01      	cmp	r7, #1
 801d36a:	f000 80f3 	beq.w	801d554 <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 801d36e:	f8d6 9a18 	ldr.w	r9, [r6, #2584]	@ 0xa18
 801d372:	f899 3000 	ldrb.w	r3, [r9]
 801d376:	3b01      	subs	r3, #1
 801d378:	2b0a      	cmp	r3, #10
 801d37a:	f200 80ef 	bhi.w	801d55c <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801d37e:	e8df f013 	tbh	[pc, r3, lsl #1]
 801d382:	000b      	.short	0x000b
 801d384:	00ed00ed 	.word	0x00ed00ed
 801d388:	009e007a 	.word	0x009e007a
 801d38c:	00a500ed 	.word	0x00a500ed
 801d390:	00b100ed 	.word	0x00b100ed
 801d394:	00ef00ed 	.word	0x00ef00ed
 801d398:	f1b8 0f01 	cmp.w	r8, #1
 801d39c:	f040 80de 	bne.w	801d55c <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801d3a0:	2f0b      	cmp	r7, #11
 801d3a2:	f040 80db 	bne.w	801d55c <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801d3a6:	f8d6 86f0 	ldr.w	r8, [r6, #1776]	@ 0x6f0
 801d3aa:	7823      	ldrb	r3, [r4, #0]
 801d3ac:	f888 327c 	strb.w	r3, [r8, #636]	@ 0x27c
 801d3b0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801d3b4:	ba5b      	rev16	r3, r3
 801d3b6:	f8a9 3002 	strh.w	r3, [r9, #2]
 801d3ba:	fa1f fa83 	uxth.w	sl, r3
 801d3be:	78e3      	ldrb	r3, [r4, #3]
 801d3c0:	f888 31fe 	strb.w	r3, [r8, #510]	@ 0x1fe
 801d3c4:	7923      	ldrb	r3, [r4, #4]
 801d3c6:	f888 31ff 	strb.w	r3, [r8, #511]	@ 0x1ff
 801d3ca:	7963      	ldrb	r3, [r4, #5]
 801d3cc:	f888 3206 	strb.w	r3, [r8, #518]	@ 0x206
 801d3d0:	88e3      	ldrh	r3, [r4, #6]
 801d3d2:	f8a8 3202 	strh.w	r3, [r8, #514]	@ 0x202
 801d3d6:	7a23      	ldrb	r3, [r4, #8]
 801d3d8:	f888 3207 	strb.w	r3, [r8, #519]	@ 0x207
 801d3dc:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 801d3e0:	f8a8 3204 	strh.w	r3, [r8, #516]	@ 0x204
 801d3e4:	463a      	mov	r2, r7
 801d3e6:	4621      	mov	r1, r4
 801d3e8:	f109 0005 	add.w	r0, r9, #5
 801d3ec:	f009 fbd6 	bl	8026b9c <memmove>
 801d3f0:	f01a 0f01 	tst.w	sl, #1
 801d3f4:	f000 80ae 	beq.w	801d554 <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 801d3f8:	f8d8 4290 	ldr.w	r4, [r8, #656]	@ 0x290
 801d3fc:	2c00      	cmp	r4, #0
 801d3fe:	f000 80a9 	beq.w	801d554 <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 801d402:	f898 0207 	ldrb.w	r0, [r8, #519]	@ 0x207
 801d406:	f8b8 3202 	ldrh.w	r3, [r8, #514]	@ 0x202
 801d40a:	f898 21ff 	ldrb.w	r2, [r8, #511]	@ 0x1ff
 801d40e:	f898 11fe 	ldrb.w	r1, [r8, #510]	@ 0x1fe
 801d412:	9002      	str	r0, [sp, #8]
 801d414:	f898 0206 	ldrb.w	r0, [r8, #518]	@ 0x206
 801d418:	9001      	str	r0, [sp, #4]
 801d41a:	f8b8 0204 	ldrh.w	r0, [r8, #516]	@ 0x204
 801d41e:	9000      	str	r0, [sp, #0]
 801d420:	4857      	ldr	r0, [pc, #348]	@ (801d580 <MobleProvision_ProvisionerNode_SetInputMessage+0x260>)
 801d422:	47a0      	blx	r4
 801d424:	f896 3a1c 	ldrb.w	r3, [r6, #2588]	@ 0xa1c
 801d428:	2b00      	cmp	r3, #0
 801d42a:	f000 8093 	beq.w	801d554 <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 801d42e:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 801d432:	f896 2a1d 	ldrb.w	r2, [r6, #2589]	@ 0xa1d
 801d436:	f883 21fa 	strb.w	r2, [r3, #506]	@ 0x1fa
 801d43a:	f896 2a1e 	ldrb.w	r2, [r6, #2590]	@ 0xa1e
 801d43e:	f896 1a1f 	ldrb.w	r1, [r6, #2591]	@ 0xa1f
 801d442:	f883 11fc 	strb.w	r1, [r3, #508]	@ 0x1fc
 801d446:	2a01      	cmp	r2, #1
 801d448:	f896 1a20 	ldrb.w	r1, [r6, #2592]	@ 0xa20
 801d44c:	f883 21fb 	strb.w	r2, [r3, #507]	@ 0x1fb
 801d450:	f883 11fd 	strb.w	r1, [r3, #509]	@ 0x1fd
 801d454:	d10b      	bne.n	801d46e <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801d456:	f7ff fe63 	bl	801d120 <MobleProvision_ProvisionerNode_StateForOOB>
 801d45a:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 801d45e:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 801d462:	b123      	cbz	r3, 801d46e <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801d464:	f8d6 2a18 	ldr.w	r2, [r6, #2584]	@ 0xa18
 801d468:	7813      	ldrb	r3, [r2, #0]
 801d46a:	3b01      	subs	r3, #1
 801d46c:	7013      	strb	r3, [r2, #0]
 801d46e:	4628      	mov	r0, r5
 801d470:	b014      	add	sp, #80	@ 0x50
 801d472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d476:	f1b8 0f03 	cmp.w	r8, #3
 801d47a:	d16f      	bne.n	801d55c <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801d47c:	2f40      	cmp	r7, #64	@ 0x40
 801d47e:	d16d      	bne.n	801d55c <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801d480:	f109 08f5 	add.w	r8, r9, #245	@ 0xf5
 801d484:	463a      	mov	r2, r7
 801d486:	4621      	mov	r1, r4
 801d488:	4640      	mov	r0, r8
 801d48a:	f009 fb87 	bl	8026b9c <memmove>
 801d48e:	463a      	mov	r2, r7
 801d490:	4621      	mov	r1, r4
 801d492:	f109 0055 	add.w	r0, r9, #85	@ 0x55
 801d496:	f009 fb81 	bl	8026b9c <memmove>
 801d49a:	4640      	mov	r0, r8
 801d49c:	f7f9 fd96 	bl	8016fcc <MoblePalCryptoGetEccGenSecret>
 801d4a0:	2800      	cmp	r0, #0
 801d4a2:	d057      	beq.n	801d554 <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 801d4a4:	f8d6 3a18 	ldr.w	r3, [r6, #2584]	@ 0xa18
 801d4a8:	1e42      	subs	r2, r0, #1
 801d4aa:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 801d4ae:	301f      	adds	r0, #31
 801d4b0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801d4b4:	f803 1f01 	strb.w	r1, [r3, #1]!
 801d4b8:	4282      	cmp	r2, r0
 801d4ba:	d1f9      	bne.n	801d4b0 <MobleProvision_ProvisionerNode_SetInputMessage+0x190>
 801d4bc:	e7d7      	b.n	801d46e <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801d4be:	f1b8 0f04 	cmp.w	r8, #4
 801d4c2:	d14b      	bne.n	801d55c <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801d4c4:	2f00      	cmp	r7, #0
 801d4c6:	bf18      	it	ne
 801d4c8:	2502      	movne	r5, #2
 801d4ca:	e7d0      	b.n	801d46e <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801d4cc:	f1b8 0f05 	cmp.w	r8, #5
 801d4d0:	d144      	bne.n	801d55c <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801d4d2:	2f10      	cmp	r7, #16
 801d4d4:	d142      	bne.n	801d55c <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801d4d6:	463a      	mov	r2, r7
 801d4d8:	4621      	mov	r1, r4
 801d4da:	f209 1095 	addw	r0, r9, #405	@ 0x195
 801d4de:	f009 fb5d 	bl	8026b9c <memmove>
 801d4e2:	e7c4      	b.n	801d46e <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801d4e4:	f1b8 0f06 	cmp.w	r8, #6
 801d4e8:	d138      	bne.n	801d55c <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801d4ea:	2f10      	cmp	r7, #16
 801d4ec:	d136      	bne.n	801d55c <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801d4ee:	463a      	mov	r2, r7
 801d4f0:	4621      	mov	r1, r4
 801d4f2:	f209 1085 	addw	r0, r9, #389	@ 0x185
 801d4f6:	af08      	add	r7, sp, #32
 801d4f8:	f009 fb50 	bl	8026b9c <memmove>
 801d4fc:	2300      	movs	r3, #0
 801d4fe:	4638      	mov	r0, r7
 801d500:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801d504:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 801d508:	f7fe ff0a 	bl	801c320 <MobleProvisionGenerateAuthValue>
 801d50c:	aa0c      	add	r2, sp, #48	@ 0x30
 801d50e:	f104 0c10 	add.w	ip, r4, #16
 801d512:	6820      	ldr	r0, [r4, #0]
 801d514:	6861      	ldr	r1, [r4, #4]
 801d516:	4613      	mov	r3, r2
 801d518:	c303      	stmia	r3!, {r0, r1}
 801d51a:	3408      	adds	r4, #8
 801d51c:	4564      	cmp	r4, ip
 801d51e:	461a      	mov	r2, r3
 801d520:	d1f7      	bne.n	801d512 <MobleProvision_ProvisionerNode_SetInputMessage+0x1f2>
 801d522:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801d526:	ac14      	add	r4, sp, #80	@ 0x50
 801d528:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801d52c:	f8d6 0a18 	ldr.w	r0, [r6, #2584]	@ 0xa18
 801d530:	2220      	movs	r2, #32
 801d532:	a90c      	add	r1, sp, #48	@ 0x30
 801d534:	f200 1055 	addw	r0, r0, #341	@ 0x155
 801d538:	ab04      	add	r3, sp, #16
 801d53a:	f7f8 f9bd 	bl	80158b8 <BAES_CmacCompute>
 801d53e:	f8d6 1a18 	ldr.w	r1, [r6, #2584]	@ 0xa18
 801d542:	2210      	movs	r2, #16
 801d544:	f201 1195 	addw	r1, r1, #405	@ 0x195
 801d548:	eb0d 0002 	add.w	r0, sp, r2
 801d54c:	f009 fb16 	bl	8026b7c <memcmp>
 801d550:	2800      	cmp	r0, #0
 801d552:	d08c      	beq.n	801d46e <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801d554:	f8d6 3a18 	ldr.w	r3, [r6, #2584]	@ 0xa18
 801d558:	220d      	movs	r2, #13
 801d55a:	701a      	strb	r2, [r3, #0]
 801d55c:	2502      	movs	r5, #2
 801d55e:	e786      	b.n	801d46e <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801d560:	f1b8 0f08 	cmp.w	r8, #8
 801d564:	d1fa      	bne.n	801d55c <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801d566:	2f00      	cmp	r7, #0
 801d568:	d1f8      	bne.n	801d55c <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801d56a:	230c      	movs	r3, #12
 801d56c:	f889 3000 	strb.w	r3, [r9]
 801d570:	f7e7 fe14 	bl	800519c <BLEMesh_ProvisionCallback>
 801d574:	463d      	mov	r5, r7
 801d576:	e77a      	b.n	801d46e <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801d578:	20002514 	.word	0x20002514
 801d57c:	0001d4c0 	.word	0x0001d4c0
 801d580:	20002f30 	.word	0x20002f30

0801d584 <MobleProvision_ProvisionerNode_GetOutputMessage>:
 801d584:	b410      	push	{r4}
 801d586:	b129      	cbz	r1, 801d594 <MobleProvision_ProvisionerNode_GetOutputMessage+0x10>
 801d588:	b122      	cbz	r2, 801d594 <MobleProvision_ProvisionerNode_GetOutputMessage+0x10>
 801d58a:	b118      	cbz	r0, 801d594 <MobleProvision_ProvisionerNode_GetOutputMessage+0x10>
 801d58c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d590:	f7ff bac4 	b.w	801cb1c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0>
 801d594:	2003      	movs	r0, #3
 801d596:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d59a:	4770      	bx	lr

0801d59c <MobleProvision_ProvisionerNode_IsCompleted>:
 801d59c:	4b04      	ldr	r3, [pc, #16]	@ (801d5b0 <MobleProvision_ProvisionerNode_IsCompleted+0x14>)
 801d59e:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
 801d5a2:	7818      	ldrb	r0, [r3, #0]
 801d5a4:	f1a0 030c 	sub.w	r3, r0, #12
 801d5a8:	4258      	negs	r0, r3
 801d5aa:	4158      	adcs	r0, r3
 801d5ac:	4770      	bx	lr
 801d5ae:	bf00      	nop
 801d5b0:	20002514 	.word	0x20002514

0801d5b4 <MobleProvision_GetNextOperation>:
 801d5b4:	b908      	cbnz	r0, 801d5ba <MobleProvision_GetNextOperation+0x6>
 801d5b6:	f7ff bd99 	b.w	801d0ec <MobleProvision_ProvisionerNode_GetNextOperation>
 801d5ba:	f7fe bf63 	b.w	801c484 <MobleProvision_UnprovisionedNode_GetNextOperation>

0801d5be <MobleProvision_GetOutputMessage>:
 801d5be:	b410      	push	{r4}
 801d5c0:	4604      	mov	r4, r0
 801d5c2:	4608      	mov	r0, r1
 801d5c4:	4611      	mov	r1, r2
 801d5c6:	461a      	mov	r2, r3
 801d5c8:	b91c      	cbnz	r4, 801d5d2 <MobleProvision_GetOutputMessage+0x14>
 801d5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d5ce:	f7ff bfd9 	b.w	801d584 <MobleProvision_ProvisionerNode_GetOutputMessage>
 801d5d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d5d6:	f7ff bcc7 	b.w	801cf68 <MobleProvision_UnprovisionedNode_GetOutputMessage>

0801d5da <MobleProvision_IsCompleted>:
 801d5da:	b908      	cbnz	r0, 801d5e0 <MobleProvision_IsCompleted+0x6>
 801d5dc:	f7ff bfde 	b.w	801d59c <MobleProvision_ProvisionerNode_IsCompleted>
 801d5e0:	f7ff bd40 	b.w	801d064 <MobleProvision_UnprovisionedNode_IsCompleted>

0801d5e4 <MoblePBADVInit>:
 801d5e4:	4b0b      	ldr	r3, [pc, #44]	@ (801d614 <MoblePBADVInit+0x30>)
 801d5e6:	f203 62fc 	addw	r2, r3, #1788	@ 0x6fc
 801d5ea:	6002      	str	r2, [r0, #0]
 801d5ec:	f893 26fc 	ldrb.w	r2, [r3, #1788]	@ 0x6fc
 801d5f0:	b132      	cbz	r2, 801d600 <MoblePBADVInit+0x1c>
 801d5f2:	f8d3 2700 	ldr.w	r2, [r3, #1792]	@ 0x700
 801d5f6:	3201      	adds	r2, #1
 801d5f8:	f8c3 2700 	str.w	r2, [r3, #1792]	@ 0x700
 801d5fc:	2000      	movs	r0, #0
 801d5fe:	4770      	bx	lr
 801d600:	2101      	movs	r1, #1
 801d602:	f8c3 1700 	str.w	r1, [r3, #1792]	@ 0x700
 801d606:	f883 16fc 	strb.w	r1, [r3, #1788]	@ 0x6fc
 801d60a:	f883 2704 	strb.w	r2, [r3, #1796]	@ 0x704
 801d60e:	f883 2878 	strb.w	r2, [r3, #2168]	@ 0x878
 801d612:	e7f3      	b.n	801d5fc <MoblePBADVInit+0x18>
 801d614:	20002514 	.word	0x20002514

0801d618 <MoblePBADVStartProvisioning>:
 801d618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d61c:	2a01      	cmp	r2, #1
 801d61e:	9e08      	ldr	r6, [sp, #32]
 801d620:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801d624:	4604      	mov	r4, r0
 801d626:	460f      	mov	r7, r1
 801d628:	4615      	mov	r5, r2
 801d62a:	4698      	mov	r8, r3
 801d62c:	d145      	bne.n	801d6ba <MoblePBADVStartProvisioning+0xa2>
 801d62e:	7a03      	ldrb	r3, [r0, #8]
 801d630:	2b01      	cmp	r3, #1
 801d632:	d106      	bne.n	801d642 <MoblePBADVStartProvisioning+0x2a>
 801d634:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 801d638:	2b01      	cmp	r3, #1
 801d63a:	d102      	bne.n	801d642 <MoblePBADVStartProvisioning+0x2a>
 801d63c:	2002      	movs	r0, #2
 801d63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d642:	f894 317c 	ldrb.w	r3, [r4, #380]	@ 0x17c
 801d646:	2b01      	cmp	r3, #1
 801d648:	d032      	beq.n	801d6b0 <MoblePBADVStartProvisioning+0x98>
 801d64a:	4620      	mov	r0, r4
 801d64c:	f7f7 fe92 	bl	8015374 <MoblePBADVGetNewLink>
 801d650:	4604      	mov	r4, r0
 801d652:	2800      	cmp	r0, #0
 801d654:	d0f2      	beq.n	801d63c <MoblePBADVStartProvisioning+0x24>
 801d656:	2d01      	cmp	r5, #1
 801d658:	d145      	bne.n	801d6e6 <MoblePBADVStartProvisioning+0xce>
 801d65a:	2300      	movs	r3, #0
 801d65c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 801d660:	2380      	movs	r3, #128	@ 0x80
 801d662:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801d666:	463b      	mov	r3, r7
 801d668:	f104 0208 	add.w	r2, r4, #8
 801d66c:	f107 0110 	add.w	r1, r7, #16
 801d670:	f853 0b04 	ldr.w	r0, [r3], #4
 801d674:	f842 0b04 	str.w	r0, [r2], #4
 801d678:	428b      	cmp	r3, r1
 801d67a:	d1f9      	bne.n	801d670 <MoblePBADVStartProvisioning+0x58>
 801d67c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d67e:	f8c4 8018 	str.w	r8, [r4, #24]
 801d682:	f884 5020 	strb.w	r5, [r4, #32]
 801d686:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
 801d68a:	f1b9 0f00 	cmp.w	r9, #0
 801d68e:	d001      	beq.n	801d694 <MoblePBADVStartProvisioning+0x7c>
 801d690:	f8c4 916c 	str.w	r9, [r4, #364]	@ 0x16c
 801d694:	b945      	cbnz	r5, 801d6a8 <MoblePBADVStartProvisioning+0x90>
 801d696:	2301      	movs	r3, #1
 801d698:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 801d69c:	463a      	mov	r2, r7
 801d69e:	2310      	movs	r3, #16
 801d6a0:	4629      	mov	r1, r5
 801d6a2:	4620      	mov	r0, r4
 801d6a4:	f7fa fc5a 	bl	8017f5c <MoblePBADVSendControl>
 801d6a8:	b32e      	cbz	r6, 801d6f6 <MoblePBADVStartProvisioning+0xde>
 801d6aa:	6034      	str	r4, [r6, #0]
 801d6ac:	2000      	movs	r0, #0
 801d6ae:	e7c6      	b.n	801d63e <MoblePBADVStartProvisioning+0x26>
 801d6b0:	f894 319c 	ldrb.w	r3, [r4, #412]	@ 0x19c
 801d6b4:	2b01      	cmp	r3, #1
 801d6b6:	d1c8      	bne.n	801d64a <MoblePBADVStartProvisioning+0x32>
 801d6b8:	e7c0      	b.n	801d63c <MoblePBADVStartProvisioning+0x24>
 801d6ba:	2a00      	cmp	r2, #0
 801d6bc:	d1c5      	bne.n	801d64a <MoblePBADVStartProvisioning+0x32>
 801d6be:	7a03      	ldrb	r3, [r0, #8]
 801d6c0:	2b01      	cmp	r3, #1
 801d6c2:	d103      	bne.n	801d6cc <MoblePBADVStartProvisioning+0xb4>
 801d6c4:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 801d6c8:	2b00      	cmp	r3, #0
 801d6ca:	d0b7      	beq.n	801d63c <MoblePBADVStartProvisioning+0x24>
 801d6cc:	f894 317c 	ldrb.w	r3, [r4, #380]	@ 0x17c
 801d6d0:	2b01      	cmp	r3, #1
 801d6d2:	d103      	bne.n	801d6dc <MoblePBADVStartProvisioning+0xc4>
 801d6d4:	f894 319c 	ldrb.w	r3, [r4, #412]	@ 0x19c
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	d0af      	beq.n	801d63c <MoblePBADVStartProvisioning+0x24>
 801d6dc:	f7ff fcce 	bl	801d07c <MobleProvision_ProvisionerNode_Init>
 801d6e0:	2800      	cmp	r0, #0
 801d6e2:	d0b2      	beq.n	801d64a <MoblePBADVStartProvisioning+0x32>
 801d6e4:	e7aa      	b.n	801d63c <MoblePBADVStartProvisioning+0x24>
 801d6e6:	2d00      	cmp	r5, #0
 801d6e8:	d1bd      	bne.n	801d666 <MoblePBADVStartProvisioning+0x4e>
 801d6ea:	2380      	movs	r3, #128	@ 0x80
 801d6ec:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 801d6f0:	f880 50b8 	strb.w	r5, [r0, #184]	@ 0xb8
 801d6f4:	e7b7      	b.n	801d666 <MoblePBADVStartProvisioning+0x4e>
 801d6f6:	4630      	mov	r0, r6
 801d6f8:	e7a1      	b.n	801d63e <MoblePBADVStartProvisioning+0x26>
	...

0801d6fc <MobleStackStartPBADVUnprovisioned>:
 801d6fc:	b530      	push	{r4, r5, lr}
 801d6fe:	4d0d      	ldr	r5, [pc, #52]	@ (801d734 <MobleStackStartPBADVUnprovisioned+0x38>)
 801d700:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 801d704:	781c      	ldrb	r4, [r3, #0]
 801d706:	b089      	sub	sp, #36	@ 0x24
 801d708:	b98c      	cbnz	r4, 801d72e <MobleStackStartPBADVUnprovisioned+0x32>
 801d70a:	4b0b      	ldr	r3, [pc, #44]	@ (801d738 <MobleStackStartPBADVUnprovisioned+0x3c>)
 801d70c:	685b      	ldr	r3, [r3, #4]
 801d70e:	a804      	add	r0, sp, #16
 801d710:	695b      	ldr	r3, [r3, #20]
 801d712:	4798      	blx	r3
 801d714:	e9cd 4401 	strd	r4, r4, [sp, #4]
 801d718:	f8d5 091c 	ldr.w	r0, [r5, #2332]	@ 0x91c
 801d71c:	9400      	str	r4, [sp, #0]
 801d71e:	2318      	movs	r3, #24
 801d720:	2201      	movs	r2, #1
 801d722:	a904      	add	r1, sp, #16
 801d724:	f7ff ff78 	bl	801d618 <MoblePBADVStartProvisioning>
 801d728:	4620      	mov	r0, r4
 801d72a:	b009      	add	sp, #36	@ 0x24
 801d72c:	bd30      	pop	{r4, r5, pc}
 801d72e:	2401      	movs	r4, #1
 801d730:	e7fa      	b.n	801d728 <MobleStackStartPBADVUnprovisioned+0x2c>
 801d732:	bf00      	nop
 801d734:	2000141c 	.word	0x2000141c
 801d738:	20000324 	.word	0x20000324

0801d73c <MobleStackSetupBeacon>:
 801d73c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d73e:	4604      	mov	r4, r0
 801d740:	2800      	cmp	r0, #0
 801d742:	d044      	beq.n	801d7ce <MobleStackSetupBeacon+0x92>
 801d744:	f890 31d4 	ldrb.w	r3, [r0, #468]	@ 0x1d4
 801d748:	2b01      	cmp	r3, #1
 801d74a:	d101      	bne.n	801d750 <MobleStackSetupBeacon+0x14>
 801d74c:	f7ff ffd6 	bl	801d6fc <MobleStackStartPBADVUnprovisioned>
 801d750:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 801d754:	2200      	movs	r2, #0
 801d756:	9300      	str	r3, [sp, #0]
 801d758:	481e      	ldr	r0, [pc, #120]	@ (801d7d4 <MobleStackSetupBeacon+0x98>)
 801d75a:	f504 73ee 	add.w	r3, r4, #476	@ 0x1dc
 801d75e:	4611      	mov	r1, r2
 801d760:	f7fa fbcc 	bl	8017efc <MobleTransmitRegularlyGenerated>
 801d764:	2801      	cmp	r0, #1
 801d766:	d830      	bhi.n	801d7ca <MobleStackSetupBeacon+0x8e>
 801d768:	6823      	ldr	r3, [r4, #0]
 801d76a:	4d1b      	ldr	r5, [pc, #108]	@ (801d7d8 <MobleStackSetupBeacon+0x9c>)
 801d76c:	781b      	ldrb	r3, [r3, #0]
 801d76e:	f8d5 0858 	ldr.w	r0, [r5, #2136]	@ 0x858
 801d772:	2b01      	cmp	r3, #1
 801d774:	f242 7310 	movw	r3, #10000	@ 0x2710
 801d778:	bf18      	it	ne
 801d77a:	f44f 737a 	movne.w	r3, #1000	@ 0x3e8
 801d77e:	f8a4 31dc 	strh.w	r3, [r4, #476]	@ 0x1dc
 801d782:	f7fa fb87 	bl	8017e94 <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801d786:	f504 73f0 	add.w	r3, r4, #480	@ 0x1e0
 801d78a:	2201      	movs	r2, #1
 801d78c:	9300      	str	r3, [sp, #0]
 801d78e:	4813      	ldr	r0, [pc, #76]	@ (801d7dc <MobleStackSetupBeacon+0xa0>)
 801d790:	f504 73f2 	add.w	r3, r4, #484	@ 0x1e4
 801d794:	4611      	mov	r1, r2
 801d796:	f7fa fbb1 	bl	8017efc <MobleTransmitRegularlyGenerated>
 801d79a:	2801      	cmp	r0, #1
 801d79c:	d815      	bhi.n	801d7ca <MobleStackSetupBeacon+0x8e>
 801d79e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801d7a2:	f8a4 31e4 	strh.w	r3, [r4, #484]	@ 0x1e4
 801d7a6:	f8d5 0860 	ldr.w	r0, [r5, #2144]	@ 0x860
 801d7aa:	f7fa fb73 	bl	8017e94 <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801d7ae:	f504 73f4 	add.w	r3, r4, #488	@ 0x1e8
 801d7b2:	2200      	movs	r2, #0
 801d7b4:	9300      	str	r3, [sp, #0]
 801d7b6:	480a      	ldr	r0, [pc, #40]	@ (801d7e0 <MobleStackSetupBeacon+0xa4>)
 801d7b8:	f504 73f6 	add.w	r3, r4, #492	@ 0x1ec
 801d7bc:	4611      	mov	r1, r2
 801d7be:	f7fa fb9d 	bl	8017efc <MobleTransmitRegularlyGenerated>
 801d7c2:	2802      	cmp	r0, #2
 801d7c4:	bf28      	it	cs
 801d7c6:	2002      	movcs	r0, #2
 801d7c8:	b2c0      	uxtb	r0, r0
 801d7ca:	b003      	add	sp, #12
 801d7cc:	bd30      	pop	{r4, r5, pc}
 801d7ce:	2002      	movs	r0, #2
 801d7d0:	e7fb      	b.n	801d7ca <MobleStackSetupBeacon+0x8e>
 801d7d2:	bf00      	nop
 801d7d4:	0801e2e9 	.word	0x0801e2e9
 801d7d8:	2000141c 	.word	0x2000141c
 801d7dc:	0801a985 	.word	0x0801a985
 801d7e0:	0801a45d 	.word	0x0801a45d

0801d7e4 <MobleStackFSM>:
 801d7e4:	b538      	push	{r3, r4, r5, lr}
 801d7e6:	4605      	mov	r5, r0
 801d7e8:	2800      	cmp	r0, #0
 801d7ea:	d05c      	beq.n	801d8a6 <MobleStackFSM+0xc2>
 801d7ec:	f890 416c 	ldrb.w	r4, [r0, #364]	@ 0x16c
 801d7f0:	2c04      	cmp	r4, #4
 801d7f2:	d853      	bhi.n	801d89c <MobleStackFSM+0xb8>
 801d7f4:	e8df f004 	tbb	[pc, r4]
 801d7f8:	522a1303 	.word	0x522a1303
 801d7fc:	45          	.byte	0x45
 801d7fd:	00          	.byte	0x00
 801d7fe:	2906      	cmp	r1, #6
 801d800:	d809      	bhi.n	801d816 <MobleStackFSM+0x32>
 801d802:	e8df f001 	tbb	[pc, r1]
 801d806:	0849      	.short	0x0849
 801d808:	04044908 	.word	0x04044908
 801d80c:	16          	.byte	0x16
 801d80d:	00          	.byte	0x00
 801d80e:	f7ff ff95 	bl	801d73c <MobleStackSetupBeacon>
 801d812:	2801      	cmp	r0, #1
 801d814:	d93d      	bls.n	801d892 <MobleStackFSM+0xae>
 801d816:	2303      	movs	r3, #3
 801d818:	f885 316c 	strb.w	r3, [r5, #364]	@ 0x16c
 801d81c:	e005      	b.n	801d82a <MobleStackFSM+0x46>
 801d81e:	2905      	cmp	r1, #5
 801d820:	d805      	bhi.n	801d82e <MobleStackFSM+0x4a>
 801d822:	2903      	cmp	r1, #3
 801d824:	d80b      	bhi.n	801d83e <MobleStackFSM+0x5a>
 801d826:	2901      	cmp	r1, #1
 801d828:	d007      	beq.n	801d83a <MobleStackFSM+0x56>
 801d82a:	2400      	movs	r4, #0
 801d82c:	e034      	b.n	801d898 <MobleStackFSM+0xb4>
 801d82e:	2906      	cmp	r1, #6
 801d830:	d1fb      	bne.n	801d82a <MobleStackFSM+0x46>
 801d832:	f7fe ffa7 	bl	801c784 <MobleTransmitSuspendAll>
 801d836:	2304      	movs	r3, #4
 801d838:	e7ee      	b.n	801d818 <MobleStackFSM+0x34>
 801d83a:	2302      	movs	r3, #2
 801d83c:	e7ec      	b.n	801d818 <MobleStackFSM+0x34>
 801d83e:	f8d0 01d8 	ldr.w	r0, [r0, #472]	@ 0x1d8
 801d842:	f7fa fac1 	bl	8017dc8 <MobleTransmitOutOfTurn>
 801d846:	2801      	cmp	r0, #1
 801d848:	d8e5      	bhi.n	801d816 <MobleStackFSM+0x32>
 801d84a:	e7ee      	b.n	801d82a <MobleStackFSM+0x46>
 801d84c:	3901      	subs	r1, #1
 801d84e:	2905      	cmp	r1, #5
 801d850:	d8e1      	bhi.n	801d816 <MobleStackFSM+0x32>
 801d852:	a301      	add	r3, pc, #4	@ (adr r3, 801d858 <MobleStackFSM+0x74>)
 801d854:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801d858:	0801d82b 	.word	0x0801d82b
 801d85c:	0801d871 	.word	0x0801d871
 801d860:	0801d82b 	.word	0x0801d82b
 801d864:	0801d82b 	.word	0x0801d82b
 801d868:	0801d82b 	.word	0x0801d82b
 801d86c:	0801d875 	.word	0x0801d875
 801d870:	2301      	movs	r3, #1
 801d872:	e7d1      	b.n	801d818 <MobleStackFSM+0x34>
 801d874:	4b0d      	ldr	r3, [pc, #52]	@ (801d8ac <MobleStackFSM+0xc8>)
 801d876:	2116      	movs	r1, #22
 801d878:	f8b3 0382 	ldrh.w	r0, [r3, #898]	@ 0x382
 801d87c:	f7f4 f891 	bl	80119a2 <aci_gap_terminate>
 801d880:	e7d7      	b.n	801d832 <MobleStackFSM+0x4e>
 801d882:	2907      	cmp	r1, #7
 801d884:	d1d1      	bne.n	801d82a <MobleStackFSM+0x46>
 801d886:	4b0a      	ldr	r3, [pc, #40]	@ (801d8b0 <MobleStackFSM+0xcc>)
 801d888:	2400      	movs	r4, #0
 801d88a:	f883 4166 	strb.w	r4, [r3, #358]	@ 0x166
 801d88e:	f7fe ff89 	bl	801c7a4 <MobleTransmitResumeAll>
 801d892:	2301      	movs	r3, #1
 801d894:	f885 316c 	strb.w	r3, [r5, #364]	@ 0x16c
 801d898:	4620      	mov	r0, r4
 801d89a:	bd38      	pop	{r3, r4, r5, pc}
 801d89c:	2303      	movs	r3, #3
 801d89e:	f880 316c 	strb.w	r3, [r0, #364]	@ 0x16c
 801d8a2:	2402      	movs	r4, #2
 801d8a4:	e7f8      	b.n	801d898 <MobleStackFSM+0xb4>
 801d8a6:	2403      	movs	r4, #3
 801d8a8:	e7f6      	b.n	801d898 <MobleStackFSM+0xb4>
 801d8aa:	bf00      	nop
 801d8ac:	2000141c 	.word	0x2000141c
 801d8b0:	20003f64 	.word	0x20003f64

0801d8b4 <MobleStackTimerCallback>:
 801d8b4:	4801      	ldr	r0, [pc, #4]	@ (801d8bc <MobleStackTimerCallback+0x8>)
 801d8b6:	2100      	movs	r1, #0
 801d8b8:	f7ff bf94 	b.w	801d7e4 <MobleStackFSM>
 801d8bc:	20001a9c 	.word	0x20001a9c

0801d8c0 <MobleStackInit>:
 801d8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8c2:	b085      	sub	sp, #20
 801d8c4:	4616      	mov	r6, r2
 801d8c6:	f89d 4028 	ldrb.w	r4, [sp, #40]	@ 0x28
 801d8ca:	b911      	cbnz	r1, 801d8d2 <MobleStackInit+0x12>
 801d8cc:	2003      	movs	r0, #3
 801d8ce:	b005      	add	sp, #20
 801d8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8d2:	4d45      	ldr	r5, [pc, #276]	@ (801d9e8 <MobleStackInit+0x128>)
 801d8d4:	9303      	str	r3, [sp, #12]
 801d8d6:	f505 67d0 	add.w	r7, r5, #1664	@ 0x680
 801d8da:	07a3      	lsls	r3, r4, #30
 801d8dc:	600f      	str	r7, [r1, #0]
 801d8de:	f8c5 0680 	str.w	r0, [r5, #1664]	@ 0x680
 801d8e2:	d0f3      	beq.n	801d8cc <MobleStackInit+0xc>
 801d8e4:	f004 0201 	and.w	r2, r4, #1
 801d8e8:	f3c4 0440 	ubfx	r4, r4, #1, #1
 801d8ec:	f885 2854 	strb.w	r2, [r5, #2132]	@ 0x854
 801d8f0:	f885 4855 	strb.w	r4, [r5, #2133]	@ 0x855
 801d8f4:	f7f7 fa6c 	bl	8014dd0 <MoblePalTimerInit>
 801d8f8:	2801      	cmp	r0, #1
 801d8fa:	9b03      	ldr	r3, [sp, #12]
 801d8fc:	d8e7      	bhi.n	801d8ce <MobleStackInit+0xe>
 801d8fe:	4a3b      	ldr	r2, [pc, #236]	@ (801d9ec <MobleStackInit+0x12c>)
 801d900:	f8c5 2344 	str.w	r2, [r5, #836]	@ 0x344
 801d904:	4a3a      	ldr	r2, [pc, #232]	@ (801d9f0 <MobleStackInit+0x130>)
 801d906:	f8c5 2348 	str.w	r2, [r5, #840]	@ 0x348
 801d90a:	2200      	movs	r2, #0
 801d90c:	f8c5 27e4 	str.w	r2, [r5, #2020]	@ 0x7e4
 801d910:	4a38      	ldr	r2, [pc, #224]	@ (801d9f4 <MobleStackInit+0x134>)
 801d912:	9201      	str	r2, [sp, #4]
 801d914:	4a38      	ldr	r2, [pc, #224]	@ (801d9f8 <MobleStackInit+0x138>)
 801d916:	9200      	str	r2, [sp, #0]
 801d918:	7831      	ldrb	r1, [r6, #0]
 801d91a:	6872      	ldr	r2, [r6, #4]
 801d91c:	4638      	mov	r0, r7
 801d91e:	f7f7 fce3 	bl	80152e8 <MoblePalBluetoothInit>
 801d922:	2801      	cmp	r0, #1
 801d924:	d8d3      	bhi.n	801d8ce <MobleStackInit+0xe>
 801d926:	f7f8 fc53 	bl	80161d0 <MoblePalCryptoInit>
 801d92a:	2801      	cmp	r0, #1
 801d92c:	d8cf      	bhi.n	801d8ce <MobleStackInit+0xe>
 801d92e:	f895 3854 	ldrb.w	r3, [r5, #2132]	@ 0x854
 801d932:	2b01      	cmp	r3, #1
 801d934:	d012      	beq.n	801d95c <MobleStackInit+0x9c>
 801d936:	2301      	movs	r3, #1
 801d938:	f8d5 0680 	ldr.w	r0, [r5, #1664]	@ 0x680
 801d93c:	f885 3934 	strb.w	r3, [r5, #2356]	@ 0x934
 801d940:	f7fc fa8a 	bl	8019e58 <MobleConfigNetworkLoad>
 801d944:	2801      	cmp	r0, #1
 801d946:	d810      	bhi.n	801d96a <MobleStackInit+0xaa>
 801d948:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 801d94c:	4618      	mov	r0, r3
 801d94e:	f7fc fbd7 	bl	801a100 <MobleConfigCheck>
 801d952:	7018      	strb	r0, [r3, #0]
 801d954:	b978      	cbnz	r0, 801d976 <MobleStackInit+0xb6>
 801d956:	f885 0934 	strb.w	r0, [r5, #2356]	@ 0x934
 801d95a:	e00c      	b.n	801d976 <MobleStackInit+0xb6>
 801d95c:	f605 101c 	addw	r0, r5, #2332	@ 0x91c
 801d960:	f7ff fe40 	bl	801d5e4 <MoblePBADVInit>
 801d964:	2801      	cmp	r0, #1
 801d966:	d9e6      	bls.n	801d936 <MobleStackInit+0x76>
 801d968:	e7b1      	b.n	801d8ce <MobleStackInit+0xe>
 801d96a:	f8d5 2680 	ldr.w	r2, [r5, #1664]	@ 0x680
 801d96e:	2300      	movs	r3, #0
 801d970:	7013      	strb	r3, [r2, #0]
 801d972:	f885 3934 	strb.w	r3, [r5, #2356]	@ 0x934
 801d976:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 801d97a:	6858      	ldr	r0, [r3, #4]
 801d97c:	f7f9 fa9c 	bl	8016eb8 <MoblePalCryptoSetIvIndex>
 801d980:	2801      	cmp	r0, #1
 801d982:	d8a4      	bhi.n	801d8ce <MobleStackInit+0xe>
 801d984:	f7fe fc44 	bl	801c210 <MoblePalBluetoothReset>
 801d988:	4a1c      	ldr	r2, [pc, #112]	@ (801d9fc <MobleStackInit+0x13c>)
 801d98a:	491d      	ldr	r1, [pc, #116]	@ (801da00 <MobleStackInit+0x140>)
 801d98c:	f502 70ba 	add.w	r0, r2, #372	@ 0x174
 801d990:	f7f7 fa2e 	bl	8014df0 <MoblePalTimerCreate>
 801d994:	2801      	cmp	r0, #1
 801d996:	d89a      	bhi.n	801d8ce <MobleStackInit+0xe>
 801d998:	4b1a      	ldr	r3, [pc, #104]	@ (801da04 <MobleStackInit+0x144>)
 801d99a:	4818      	ldr	r0, [pc, #96]	@ (801d9fc <MobleStackInit+0x13c>)
 801d99c:	f8c5 3358 	str.w	r3, [r5, #856]	@ 0x358
 801d9a0:	f7fe fa99 	bl	801bed6 <MobleProvisionUpdateRole>
 801d9a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d9a6:	8818      	ldrh	r0, [r3, #0]
 801d9a8:	f7fe feca 	bl	801c740 <MobleTransmitInit>
 801d9ac:	f04f 33ff 	mov.w	r3, #4294967295
 801d9b0:	2400      	movs	r4, #0
 801d9b2:	f8c5 3858 	str.w	r3, [r5, #2136]	@ 0x858
 801d9b6:	f8c5 3860 	str.w	r3, [r5, #2144]	@ 0x860
 801d9ba:	4b13      	ldr	r3, [pc, #76]	@ (801da08 <MobleStackInit+0x148>)
 801d9bc:	f8c5 3924 	str.w	r3, [r5, #2340]	@ 0x924
 801d9c0:	f8a5 4850 	strh.w	r4, [r5, #2128]	@ 0x850
 801d9c4:	f885 47ec 	strb.w	r4, [r5, #2028]	@ 0x7ec
 801d9c8:	f7e9 f8ac 	bl	8006b24 <HAL_GetTick>
 801d9cc:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 801d9d0:	f8c5 0928 	str.w	r0, [r5, #2344]	@ 0x928
 801d9d4:	781b      	ldrb	r3, [r3, #0]
 801d9d6:	4809      	ldr	r0, [pc, #36]	@ (801d9fc <MobleStackInit+0x13c>)
 801d9d8:	42a3      	cmp	r3, r4
 801d9da:	bf0c      	ite	eq
 801d9dc:	2105      	moveq	r1, #5
 801d9de:	2104      	movne	r1, #4
 801d9e0:	f7ff ff00 	bl	801d7e4 <MobleStackFSM>
 801d9e4:	4620      	mov	r0, r4
 801d9e6:	e772      	b.n	801d8ce <MobleStackInit+0xe>
 801d9e8:	2000141c 	.word	0x2000141c
 801d9ec:	08014c3d 	.word	0x08014c3d
 801d9f0:	08024f3d 	.word	0x08024f3d
 801d9f4:	0802536f 	.word	0x0802536f
 801d9f8:	0801a329 	.word	0x0801a329
 801d9fc:	20001a9c 	.word	0x20001a9c
 801da00:	0801d8b5 	.word	0x0801d8b5
 801da04:	08024d49 	.word	0x08024d49
 801da08:	1ee62800 	.word	0x1ee62800

0801da0c <MobleStackSendData>:
 801da0c:	b570      	push	{r4, r5, r6, lr}
 801da0e:	4604      	mov	r4, r0
 801da10:	b08a      	sub	sp, #40	@ 0x28
 801da12:	2800      	cmp	r0, #0
 801da14:	d03e      	beq.n	801da94 <MobleStackSendData+0x88>
 801da16:	7a05      	ldrb	r5, [r0, #8]
 801da18:	f1a5 030e 	sub.w	r3, r5, #14
 801da1c:	2b0f      	cmp	r3, #15
 801da1e:	d839      	bhi.n	801da94 <MobleStackSendData+0x88>
 801da20:	4b1e      	ldr	r3, [pc, #120]	@ (801da9c <MobleStackSendData+0x90>)
 801da22:	f893 27ec 	ldrb.w	r2, [r3, #2028]	@ 0x7ec
 801da26:	2a04      	cmp	r2, #4
 801da28:	d036      	beq.n	801da98 <MobleStackSendData+0x8c>
 801da2a:	f8d3 3680 	ldr.w	r3, [r3, #1664]	@ 0x680
 801da2e:	781b      	ldrb	r3, [r3, #0]
 801da30:	2b01      	cmp	r3, #1
 801da32:	d128      	bne.n	801da86 <MobleStackSendData+0x7a>
 801da34:	6846      	ldr	r6, [r0, #4]
 801da36:	1c6b      	adds	r3, r5, #1
 801da38:	f88d 3008 	strb.w	r3, [sp, #8]
 801da3c:	462a      	mov	r2, r5
 801da3e:	232a      	movs	r3, #42	@ 0x2a
 801da40:	4631      	mov	r1, r6
 801da42:	f10d 000a 	add.w	r0, sp, #10
 801da46:	f88d 3009 	strb.w	r3, [sp, #9]
 801da4a:	f009 f972 	bl	8026d32 <memcpy>
 801da4e:	462b      	mov	r3, r5
 801da50:	4632      	mov	r2, r6
 801da52:	8ae1      	ldrh	r1, [r4, #22]
 801da54:	2000      	movs	r0, #0
 801da56:	f7fd f941 	bl	801acdc <BnrgmProxyProtocol_SendData>
 801da5a:	4b11      	ldr	r3, [pc, #68]	@ (801daa0 <MobleStackSendData+0x94>)
 801da5c:	f893 26f4 	ldrb.w	r2, [r3, #1780]	@ 0x6f4
 801da60:	b122      	cbz	r2, 801da6c <MobleStackSendData+0x60>
 801da62:	f8b3 26f6 	ldrh.w	r2, [r3, #1782]	@ 0x6f6
 801da66:	8ae3      	ldrh	r3, [r4, #22]
 801da68:	429a      	cmp	r2, r3
 801da6a:	d00c      	beq.n	801da86 <MobleStackSendData+0x7a>
 801da6c:	2314      	movs	r3, #20
 801da6e:	7a22      	ldrb	r2, [r4, #8]
 801da70:	9301      	str	r3, [sp, #4]
 801da72:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 801da76:	9300      	str	r3, [sp, #0]
 801da78:	3202      	adds	r2, #2
 801da7a:	8b60      	ldrh	r0, [r4, #26]
 801da7c:	2300      	movs	r3, #0
 801da7e:	b2d2      	uxtb	r2, r2
 801da80:	a902      	add	r1, sp, #8
 801da82:	f7fa fa55 	bl	8017f30 <BnrgmTransmitSend>
 801da86:	4807      	ldr	r0, [pc, #28]	@ (801daa4 <MobleStackSendData+0x98>)
 801da88:	2103      	movs	r1, #3
 801da8a:	f7ff feab 	bl	801d7e4 <MobleStackFSM>
 801da8e:	2000      	movs	r0, #0
 801da90:	b00a      	add	sp, #40	@ 0x28
 801da92:	bd70      	pop	{r4, r5, r6, pc}
 801da94:	2003      	movs	r0, #3
 801da96:	e7fb      	b.n	801da90 <MobleStackSendData+0x84>
 801da98:	2002      	movs	r0, #2
 801da9a:	e7f9      	b.n	801da90 <MobleStackSendData+0x84>
 801da9c:	2000141c 	.word	0x2000141c
 801daa0:	20002514 	.word	0x20002514
 801daa4:	20001a9c 	.word	0x20001a9c

0801daa8 <MobleNetworkSendDataEx>:
 801daa8:	b570      	push	{r4, r5, r6, lr}
 801daaa:	460c      	mov	r4, r1
 801daac:	b08a      	sub	sp, #40	@ 0x28
 801daae:	461d      	mov	r5, r3
 801dab0:	b930      	cbnz	r0, 801dac0 <MobleNetworkSendDataEx+0x18>
 801dab2:	4b1c      	ldr	r3, [pc, #112]	@ (801db24 <MobleNetworkSendDataEx+0x7c>)
 801dab4:	4a1c      	ldr	r2, [pc, #112]	@ (801db28 <MobleNetworkSendDataEx+0x80>)
 801dab6:	f240 118d 	movw	r1, #397	@ 0x18d
 801daba:	481c      	ldr	r0, [pc, #112]	@ (801db2c <MobleNetworkSendDataEx+0x84>)
 801dabc:	f008 f8ea 	bl	8025c94 <__assert_func>
 801dac0:	b922      	cbnz	r2, 801dacc <MobleNetworkSendDataEx+0x24>
 801dac2:	4b1b      	ldr	r3, [pc, #108]	@ (801db30 <MobleNetworkSendDataEx+0x88>)
 801dac4:	4a18      	ldr	r2, [pc, #96]	@ (801db28 <MobleNetworkSendDataEx+0x80>)
 801dac6:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 801daca:	e7f6      	b.n	801daba <MobleNetworkSendDataEx+0x12>
 801dacc:	f890 116c 	ldrb.w	r1, [r0, #364]	@ 0x16c
 801dad0:	2904      	cmp	r1, #4
 801dad2:	d102      	bne.n	801dada <MobleNetworkSendDataEx+0x32>
 801dad4:	2002      	movs	r0, #2
 801dad6:	b00a      	add	sp, #40	@ 0x28
 801dad8:	bd70      	pop	{r4, r5, r6, pc}
 801dada:	8b61      	ldrh	r1, [r4, #26]
 801dadc:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 801dae0:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801dae4:	73a0      	strb	r0, [r4, #14]
 801dae6:	8361      	strh	r1, [r4, #26]
 801dae8:	4812      	ldr	r0, [pc, #72]	@ (801db34 <MobleNetworkSendDataEx+0x8c>)
 801daea:	7f21      	ldrb	r1, [r4, #28]
 801daec:	4408      	add	r0, r1
 801daee:	ae02      	add	r6, sp, #8
 801daf0:	f890 00c0 	ldrb.w	r0, [r0, #192]	@ 0xc0
 801daf4:	1e81      	subs	r1, r0, #2
 801daf6:	4248      	negs	r0, r1
 801daf8:	4148      	adcs	r0, r1
 801dafa:	9000      	str	r0, [sp, #0]
 801dafc:	4631      	mov	r1, r6
 801dafe:	4620      	mov	r0, r4
 801db00:	f7fa fcd6 	bl	80184b0 <MoblePalCryptoEncryptNetwork>
 801db04:	2801      	cmp	r0, #1
 801db06:	d8e5      	bhi.n	801dad4 <MobleNetworkSendDataEx+0x2c>
 801db08:	7ba3      	ldrb	r3, [r4, #14]
 801db0a:	6066      	str	r6, [r4, #4]
 801db0c:	2b00      	cmp	r3, #0
 801db0e:	bf14      	ite	ne
 801db10:	2308      	movne	r3, #8
 801db12:	2304      	moveq	r3, #4
 801db14:	3509      	adds	r5, #9
 801db16:	441d      	add	r5, r3
 801db18:	7225      	strb	r5, [r4, #8]
 801db1a:	4620      	mov	r0, r4
 801db1c:	f7ff ff76 	bl	801da0c <MobleStackSendData>
 801db20:	2000      	movs	r0, #0
 801db22:	e7d8      	b.n	801dad6 <MobleNetworkSendDataEx+0x2e>
 801db24:	0802e4b8 	.word	0x0802e4b8
 801db28:	0802d039 	.word	0x0802d039
 801db2c:	0802e996 	.word	0x0802e996
 801db30:	0802e707 	.word	0x0802e707
 801db34:	20000324 	.word	0x20000324

0801db38 <BnrgmFrndFnSendLpnMsg>:
 801db38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db3a:	4614      	mov	r4, r2
 801db3c:	b08b      	sub	sp, #44	@ 0x2c
 801db3e:	4605      	mov	r5, r0
 801db40:	460e      	mov	r6, r1
 801db42:	2228      	movs	r2, #40	@ 0x28
 801db44:	2100      	movs	r1, #0
 801db46:	4668      	mov	r0, sp
 801db48:	f009 f842 	bl	8026bd0 <memset>
 801db4c:	f894 232d 	ldrb.w	r2, [r4, #813]	@ 0x32d
 801db50:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 801db54:	212c      	movs	r1, #44	@ 0x2c
 801db56:	fb01 4302 	mla	r3, r1, r2, r4
 801db5a:	461a      	mov	r2, r3
 801db5c:	f893 006e 	ldrb.w	r0, [r3, #110]	@ 0x6e
 801db60:	6f1f      	ldr	r7, [r3, #112]	@ 0x70
 801db62:	f8b3 c06e 	ldrh.w	ip, [r3, #110]	@ 0x6e
 801db66:	9704      	str	r7, [sp, #16]
 801db68:	2801      	cmp	r0, #1
 801db6a:	bf0c      	ite	eq
 801db6c:	2038      	moveq	r0, #56	@ 0x38
 801db6e:	2030      	movne	r0, #48	@ 0x30
 801db70:	f8ad 001a 	strh.w	r0, [sp, #26]
 801db74:	2001      	movs	r0, #1
 801db76:	f88d 0023 	strb.w	r0, [sp, #35]	@ 0x23
 801db7a:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 801db7e:	6f5f      	ldr	r7, [r3, #116]	@ 0x74
 801db80:	f88d 001c 	strb.w	r0, [sp, #28]
 801db84:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 801db88:	f8ad c00e 	strh.w	ip, [sp, #14]
 801db8c:	3285      	adds	r2, #133	@ 0x85
 801db8e:	4669      	mov	r1, sp
 801db90:	4628      	mov	r0, r5
 801db92:	9705      	str	r7, [sp, #20]
 801db94:	f7ff ff88 	bl	801daa8 <MobleNetworkSendDataEx>
 801db98:	b00b      	add	sp, #44	@ 0x2c
 801db9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801db9c <Test_UpperTester_Send01>:
 801db9c:	b530      	push	{r4, r5, lr}
 801db9e:	b08d      	sub	sp, #52	@ 0x34
 801dba0:	4604      	mov	r4, r0
 801dba2:	460d      	mov	r5, r1
 801dba4:	2228      	movs	r2, #40	@ 0x28
 801dba6:	2100      	movs	r1, #0
 801dba8:	a802      	add	r0, sp, #8
 801dbaa:	f009 f811 	bl	8026bd0 <memset>
 801dbae:	4b16      	ldr	r3, [pc, #88]	@ (801dc08 <Test_UpperTester_Send01+0x6c>)
 801dbb0:	6821      	ldr	r1, [r4, #0]
 801dbb2:	6818      	ldr	r0, [r3, #0]
 801dbb4:	889b      	ldrh	r3, [r3, #4]
 801dbb6:	f8ad 3004 	strh.w	r3, [sp, #4]
 801dbba:	f8b5 3001 	ldrh.w	r3, [r5, #1]
 801dbbe:	9000      	str	r0, [sp, #0]
 801dbc0:	ba5b      	rev16	r3, r3
 801dbc2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801dbc6:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
 801dbca:	782a      	ldrb	r2, [r5, #0]
 801dbcc:	8849      	ldrh	r1, [r1, #2]
 801dbce:	9306      	str	r3, [sp, #24]
 801dbd0:	2307      	movs	r3, #7
 801dbd2:	f8ad 101c 	strh.w	r1, [sp, #28]
 801dbd6:	f88d 2017 	strb.w	r2, [sp, #23]
 801dbda:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 801dbde:	466a      	mov	r2, sp
 801dbe0:	a902      	add	r1, sp, #8
 801dbe2:	2306      	movs	r3, #6
 801dbe4:	4620      	mov	r0, r4
 801dbe6:	f7ff ff5f 	bl	801daa8 <MobleNetworkSendDataEx>
 801dbea:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
 801dbee:	3301      	adds	r3, #1
 801dbf0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801dbf4:	4605      	mov	r5, r0
 801dbf6:	f8c4 315c 	str.w	r3, [r4, #348]	@ 0x15c
 801dbfa:	4620      	mov	r0, r4
 801dbfc:	f7fc f9cc 	bl	8019f98 <MobleNetworkSaveSeqNum>
 801dc00:	4628      	mov	r0, r5
 801dc02:	b00d      	add	sp, #52	@ 0x34
 801dc04:	bd30      	pop	{r4, r5, pc}
 801dc06:	bf00      	nop
 801dc08:	0802eb97 	.word	0x0802eb97

0801dc0c <MobleModelGetOpcodeIdx>:
 801dc0c:	b530      	push	{r4, r5, lr}
 801dc0e:	2300      	movs	r3, #0
 801dc10:	4293      	cmp	r3, r2
 801dc12:	d102      	bne.n	801dc1a <MobleModelGetOpcodeIdx+0xe>
 801dc14:	2400      	movs	r4, #0
 801dc16:	4620      	mov	r0, r4
 801dc18:	bd30      	pop	{r4, r5, pc}
 801dc1a:	460c      	mov	r4, r1
 801dc1c:	f851 5b10 	ldr.w	r5, [r1], #16
 801dc20:	4285      	cmp	r5, r0
 801dc22:	d0f8      	beq.n	801dc16 <MobleModelGetOpcodeIdx+0xa>
 801dc24:	3301      	adds	r3, #1
 801dc26:	e7f3      	b.n	801dc10 <MobleModelGetOpcodeIdx+0x4>

0801dc28 <MobleModelCheckOpcodeValid>:
 801dc28:	b530      	push	{r4, r5, lr}
 801dc2a:	2400      	movs	r4, #0
 801dc2c:	429c      	cmp	r4, r3
 801dc2e:	d101      	bne.n	801dc34 <MobleModelCheckOpcodeValid+0xc>
 801dc30:	2000      	movs	r0, #0
 801dc32:	bd30      	pop	{r4, r5, pc}
 801dc34:	8815      	ldrh	r5, [r2, #0]
 801dc36:	4285      	cmp	r5, r0
 801dc38:	d102      	bne.n	801dc40 <MobleModelCheckOpcodeValid+0x18>
 801dc3a:	8855      	ldrh	r5, [r2, #2]
 801dc3c:	428d      	cmp	r5, r1
 801dc3e:	d002      	beq.n	801dc46 <MobleModelCheckOpcodeValid+0x1e>
 801dc40:	3401      	adds	r4, #1
 801dc42:	320c      	adds	r2, #12
 801dc44:	e7f2      	b.n	801dc2c <MobleModelCheckOpcodeValid+0x4>
 801dc46:	2001      	movs	r0, #1
 801dc48:	e7f3      	b.n	801dc32 <MobleModelCheckOpcodeValid+0xa>

0801dc4a <MobleModelCheckOpcodeValidity>:
 801dc4a:	b530      	push	{r4, r5, lr}
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	3102      	adds	r1, #2
 801dc50:	240c      	movs	r4, #12
 801dc52:	4293      	cmp	r3, r2
 801dc54:	d101      	bne.n	801dc5a <MobleModelCheckOpcodeValidity+0x10>
 801dc56:	2000      	movs	r0, #0
 801dc58:	bd30      	pop	{r4, r5, pc}
 801dc5a:	fb04 f503 	mul.w	r5, r4, r3
 801dc5e:	5b4d      	ldrh	r5, [r1, r5]
 801dc60:	4285      	cmp	r5, r0
 801dc62:	d001      	beq.n	801dc68 <MobleModelCheckOpcodeValidity+0x1e>
 801dc64:	3301      	adds	r3, #1
 801dc66:	e7f4      	b.n	801dc52 <MobleModelCheckOpcodeValidity+0x8>
 801dc68:	2001      	movs	r0, #1
 801dc6a:	e7f5      	b.n	801dc58 <MobleModelCheckOpcodeValidity+0xe>

0801dc6c <MobleModelCheckOpCodeReliable>:
 801dc6c:	b538      	push	{r3, r4, r5, lr}
 801dc6e:	2300      	movs	r3, #0
 801dc70:	4293      	cmp	r3, r2
 801dc72:	d105      	bne.n	801dc80 <MobleModelCheckOpCodeReliable+0x14>
 801dc74:	4b07      	ldr	r3, [pc, #28]	@ (801dc94 <MobleModelCheckOpCodeReliable+0x28>)
 801dc76:	4a08      	ldr	r2, [pc, #32]	@ (801dc98 <MobleModelCheckOpCodeReliable+0x2c>)
 801dc78:	4808      	ldr	r0, [pc, #32]	@ (801dc9c <MobleModelCheckOpCodeReliable+0x30>)
 801dc7a:	2168      	movs	r1, #104	@ 0x68
 801dc7c:	f008 f80a 	bl	8025c94 <__assert_func>
 801dc80:	460c      	mov	r4, r1
 801dc82:	310c      	adds	r1, #12
 801dc84:	8865      	ldrh	r5, [r4, #2]
 801dc86:	4285      	cmp	r5, r0
 801dc88:	d001      	beq.n	801dc8e <MobleModelCheckOpCodeReliable+0x22>
 801dc8a:	3301      	adds	r3, #1
 801dc8c:	e7f0      	b.n	801dc70 <MobleModelCheckOpCodeReliable+0x4>
 801dc8e:	7920      	ldrb	r0, [r4, #4]
 801dc90:	bd38      	pop	{r3, r4, r5, pc}
 801dc92:	bf00      	nop
 801dc94:	0802eeeb 	.word	0x0802eeeb
 801dc98:	0802d050 	.word	0x0802d050
 801dc9c:	0802eb9e 	.word	0x0802eb9e

0801dca0 <MobleModelGetMinParamLength>:
 801dca0:	b538      	push	{r3, r4, r5, lr}
 801dca2:	2300      	movs	r3, #0
 801dca4:	4293      	cmp	r3, r2
 801dca6:	d105      	bne.n	801dcb4 <MobleModelGetMinParamLength+0x14>
 801dca8:	4b07      	ldr	r3, [pc, #28]	@ (801dcc8 <MobleModelGetMinParamLength+0x28>)
 801dcaa:	4a08      	ldr	r2, [pc, #32]	@ (801dccc <MobleModelGetMinParamLength+0x2c>)
 801dcac:	4808      	ldr	r0, [pc, #32]	@ (801dcd0 <MobleModelGetMinParamLength+0x30>)
 801dcae:	2184      	movs	r1, #132	@ 0x84
 801dcb0:	f007 fff0 	bl	8025c94 <__assert_func>
 801dcb4:	460c      	mov	r4, r1
 801dcb6:	310c      	adds	r1, #12
 801dcb8:	8865      	ldrh	r5, [r4, #2]
 801dcba:	4285      	cmp	r5, r0
 801dcbc:	d001      	beq.n	801dcc2 <MobleModelGetMinParamLength+0x22>
 801dcbe:	3301      	adds	r3, #1
 801dcc0:	e7f0      	b.n	801dca4 <MobleModelGetMinParamLength+0x4>
 801dcc2:	7960      	ldrb	r0, [r4, #5]
 801dcc4:	bd38      	pop	{r3, r4, r5, pc}
 801dcc6:	bf00      	nop
 801dcc8:	0802eeeb 	.word	0x0802eeeb
 801dccc:	0802d087 	.word	0x0802d087
 801dcd0:	0802eb9e 	.word	0x0802eb9e

0801dcd4 <MobleModelGetMaxParamLength>:
 801dcd4:	b538      	push	{r3, r4, r5, lr}
 801dcd6:	2300      	movs	r3, #0
 801dcd8:	4293      	cmp	r3, r2
 801dcda:	d105      	bne.n	801dce8 <MobleModelGetMaxParamLength+0x14>
 801dcdc:	4b07      	ldr	r3, [pc, #28]	@ (801dcfc <MobleModelGetMaxParamLength+0x28>)
 801dcde:	4a08      	ldr	r2, [pc, #32]	@ (801dd00 <MobleModelGetMaxParamLength+0x2c>)
 801dce0:	4808      	ldr	r0, [pc, #32]	@ (801dd04 <MobleModelGetMaxParamLength+0x30>)
 801dce2:	2192      	movs	r1, #146	@ 0x92
 801dce4:	f007 ffd6 	bl	8025c94 <__assert_func>
 801dce8:	460c      	mov	r4, r1
 801dcea:	310c      	adds	r1, #12
 801dcec:	8865      	ldrh	r5, [r4, #2]
 801dcee:	4285      	cmp	r5, r0
 801dcf0:	d001      	beq.n	801dcf6 <MobleModelGetMaxParamLength+0x22>
 801dcf2:	3301      	adds	r3, #1
 801dcf4:	e7f0      	b.n	801dcd8 <MobleModelGetMaxParamLength+0x4>
 801dcf6:	79a0      	ldrb	r0, [r4, #6]
 801dcf8:	bd38      	pop	{r3, r4, r5, pc}
 801dcfa:	bf00      	nop
 801dcfc:	0802eeeb 	.word	0x0802eeeb
 801dd00:	0802d0a3 	.word	0x0802d0a3
 801dd04:	0802eb9e 	.word	0x0802eb9e

0801dd08 <MobleModelGetResponseOpCode>:
 801dd08:	b538      	push	{r3, r4, r5, lr}
 801dd0a:	2300      	movs	r3, #0
 801dd0c:	4293      	cmp	r3, r2
 801dd0e:	d105      	bne.n	801dd1c <MobleModelGetResponseOpCode+0x14>
 801dd10:	4b07      	ldr	r3, [pc, #28]	@ (801dd30 <MobleModelGetResponseOpCode+0x28>)
 801dd12:	4a08      	ldr	r2, [pc, #32]	@ (801dd34 <MobleModelGetResponseOpCode+0x2c>)
 801dd14:	4808      	ldr	r0, [pc, #32]	@ (801dd38 <MobleModelGetResponseOpCode+0x30>)
 801dd16:	21a0      	movs	r1, #160	@ 0xa0
 801dd18:	f007 ffbc 	bl	8025c94 <__assert_func>
 801dd1c:	460c      	mov	r4, r1
 801dd1e:	310c      	adds	r1, #12
 801dd20:	8865      	ldrh	r5, [r4, #2]
 801dd22:	4285      	cmp	r5, r0
 801dd24:	d001      	beq.n	801dd2a <MobleModelGetResponseOpCode+0x22>
 801dd26:	3301      	adds	r3, #1
 801dd28:	e7f0      	b.n	801dd0c <MobleModelGetResponseOpCode+0x4>
 801dd2a:	8920      	ldrh	r0, [r4, #8]
 801dd2c:	bd38      	pop	{r3, r4, r5, pc}
 801dd2e:	bf00      	nop
 801dd30:	0802eeeb 	.word	0x0802eeeb
 801dd34:	0802d0bf 	.word	0x0802d0bf
 801dd38:	0802eb9e 	.word	0x0802eb9e

0801dd3c <MobleModelGetMinResponseLength>:
 801dd3c:	b538      	push	{r3, r4, r5, lr}
 801dd3e:	2300      	movs	r3, #0
 801dd40:	4293      	cmp	r3, r2
 801dd42:	d105      	bne.n	801dd50 <MobleModelGetMinResponseLength+0x14>
 801dd44:	4b07      	ldr	r3, [pc, #28]	@ (801dd64 <MobleModelGetMinResponseLength+0x28>)
 801dd46:	4a08      	ldr	r2, [pc, #32]	@ (801dd68 <MobleModelGetMinResponseLength+0x2c>)
 801dd48:	4808      	ldr	r0, [pc, #32]	@ (801dd6c <MobleModelGetMinResponseLength+0x30>)
 801dd4a:	21af      	movs	r1, #175	@ 0xaf
 801dd4c:	f007 ffa2 	bl	8025c94 <__assert_func>
 801dd50:	460c      	mov	r4, r1
 801dd52:	310c      	adds	r1, #12
 801dd54:	8865      	ldrh	r5, [r4, #2]
 801dd56:	4285      	cmp	r5, r0
 801dd58:	d001      	beq.n	801dd5e <MobleModelGetMinResponseLength+0x22>
 801dd5a:	3301      	adds	r3, #1
 801dd5c:	e7f0      	b.n	801dd40 <MobleModelGetMinResponseLength+0x4>
 801dd5e:	7aa0      	ldrb	r0, [r4, #10]
 801dd60:	bd38      	pop	{r3, r4, r5, pc}
 801dd62:	bf00      	nop
 801dd64:	0802eeeb 	.word	0x0802eeeb
 801dd68:	0802d0db 	.word	0x0802d0db
 801dd6c:	0802eb9e 	.word	0x0802eb9e

0801dd70 <MobleModelGetMaxResponseLength>:
 801dd70:	b538      	push	{r3, r4, r5, lr}
 801dd72:	2300      	movs	r3, #0
 801dd74:	4293      	cmp	r3, r2
 801dd76:	d105      	bne.n	801dd84 <MobleModelGetMaxResponseLength+0x14>
 801dd78:	4b07      	ldr	r3, [pc, #28]	@ (801dd98 <MobleModelGetMaxResponseLength+0x28>)
 801dd7a:	4a08      	ldr	r2, [pc, #32]	@ (801dd9c <MobleModelGetMaxResponseLength+0x2c>)
 801dd7c:	4808      	ldr	r0, [pc, #32]	@ (801dda0 <MobleModelGetMaxResponseLength+0x30>)
 801dd7e:	21bd      	movs	r1, #189	@ 0xbd
 801dd80:	f007 ff88 	bl	8025c94 <__assert_func>
 801dd84:	460c      	mov	r4, r1
 801dd86:	310c      	adds	r1, #12
 801dd88:	8865      	ldrh	r5, [r4, #2]
 801dd8a:	4285      	cmp	r5, r0
 801dd8c:	d001      	beq.n	801dd92 <MobleModelGetMaxResponseLength+0x22>
 801dd8e:	3301      	adds	r3, #1
 801dd90:	e7f0      	b.n	801dd74 <MobleModelGetMaxResponseLength+0x4>
 801dd92:	7ae0      	ldrb	r0, [r4, #11]
 801dd94:	bd38      	pop	{r3, r4, r5, pc}
 801dd96:	bf00      	nop
 801dd98:	0802eeeb 	.word	0x0802eeeb
 801dd9c:	0802d0fa 	.word	0x0802d0fa
 801dda0:	0802eb9e 	.word	0x0802eb9e

0801dda4 <MobleModelGetOpcodeValue>:
 801dda4:	b510      	push	{r4, lr}
 801dda6:	7803      	ldrb	r3, [r0, #0]
 801dda8:	f003 04c0 	and.w	r4, r3, #192	@ 0xc0
 801ddac:	2cc0      	cmp	r4, #192	@ 0xc0
 801ddae:	d108      	bne.n	801ddc2 <MobleModelGetOpcodeValue+0x1e>
 801ddb0:	2902      	cmp	r1, #2
 801ddb2:	d914      	bls.n	801ddde <MobleModelGetOpcodeValue+0x3a>
 801ddb4:	6800      	ldr	r0, [r0, #0]
 801ddb6:	0a00      	lsrs	r0, r0, #8
 801ddb8:	f7f6 fe74 	bl	8014aa4 <htobe32>
 801ddbc:	6010      	str	r0, [r2, #0]
 801ddbe:	2003      	movs	r0, #3
 801ddc0:	bd10      	pop	{r4, pc}
 801ddc2:	061c      	lsls	r4, r3, #24
 801ddc4:	d507      	bpl.n	801ddd6 <MobleModelGetOpcodeValue+0x32>
 801ddc6:	2901      	cmp	r1, #1
 801ddc8:	d909      	bls.n	801ddde <MobleModelGetOpcodeValue+0x3a>
 801ddca:	8803      	ldrh	r3, [r0, #0]
 801ddcc:	ba5b      	rev16	r3, r3
 801ddce:	b29b      	uxth	r3, r3
 801ddd0:	6013      	str	r3, [r2, #0]
 801ddd2:	2002      	movs	r0, #2
 801ddd4:	e7f4      	b.n	801ddc0 <MobleModelGetOpcodeValue+0x1c>
 801ddd6:	b121      	cbz	r1, 801dde2 <MobleModelGetOpcodeValue+0x3e>
 801ddd8:	6013      	str	r3, [r2, #0]
 801ddda:	2001      	movs	r0, #1
 801dddc:	e7f0      	b.n	801ddc0 <MobleModelGetOpcodeValue+0x1c>
 801ddde:	2000      	movs	r0, #0
 801dde0:	e7ee      	b.n	801ddc0 <MobleModelGetOpcodeValue+0x1c>
 801dde2:	4608      	mov	r0, r1
 801dde4:	e7ec      	b.n	801ddc0 <MobleModelGetOpcodeValue+0x1c>
	...

0801dde8 <BnrgmHealthModelNewPacket>:
 801dde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddec:	6803      	ldr	r3, [r0, #0]
 801ddee:	69cd      	ldr	r5, [r1, #28]
 801ddf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ddf2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801ddf6:	b085      	sub	sp, #20
 801ddf8:	4681      	mov	r9, r0
 801ddfa:	460f      	mov	r7, r1
 801ddfc:	b923      	cbnz	r3, 801de08 <BnrgmHealthModelNewPacket+0x20>
 801ddfe:	2402      	movs	r4, #2
 801de00:	4620      	mov	r0, r4
 801de02:	b005      	add	sp, #20
 801de04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de08:	f101 0a20 	add.w	sl, r1, #32
 801de0c:	aa03      	add	r2, sp, #12
 801de0e:	4629      	mov	r1, r5
 801de10:	4650      	mov	r0, sl
 801de12:	f7ff ffc7 	bl	801dda4 <MobleModelGetOpcodeValue>
 801de16:	4680      	mov	r8, r0
 801de18:	2800      	cmp	r0, #0
 801de1a:	d0f0      	beq.n	801ddfe <BnrgmHealthModelNewPacket+0x16>
 801de1c:	4913      	ldr	r1, [pc, #76]	@ (801de6c <BnrgmHealthModelNewPacket+0x84>)
 801de1e:	9803      	ldr	r0, [sp, #12]
 801de20:	220b      	movs	r2, #11
 801de22:	f7ff fef3 	bl	801dc0c <MobleModelGetOpcodeIdx>
 801de26:	4604      	mov	r4, r0
 801de28:	2800      	cmp	r0, #0
 801de2a:	d0e8      	beq.n	801ddfe <BnrgmHealthModelNewPacket+0x16>
 801de2c:	88c3      	ldrh	r3, [r0, #6]
 801de2e:	eba5 0508 	sub.w	r5, r5, r8
 801de32:	42ab      	cmp	r3, r5
 801de34:	dce3      	bgt.n	801ddfe <BnrgmHealthModelNewPacket+0x16>
 801de36:	8903      	ldrh	r3, [r0, #8]
 801de38:	42ab      	cmp	r3, r5
 801de3a:	dbe0      	blt.n	801ddfe <BnrgmHealthModelNewPacket+0x16>
 801de3c:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 801de40:	f1bb 0f00 	cmp.w	fp, #0
 801de44:	d0db      	beq.n	801ddfe <BnrgmHealthModelNewPacket+0x16>
 801de46:	20a7      	movs	r0, #167	@ 0xa7
 801de48:	f7fa f96e 	bl	8018128 <MobleMemAlloc>
 801de4c:	4606      	mov	r6, r0
 801de4e:	2800      	cmp	r0, #0
 801de50:	d0d5      	beq.n	801ddfe <BnrgmHealthModelNewPacket+0x16>
 801de52:	e9cd 5000 	strd	r5, r0, [sp]
 801de56:	4622      	mov	r2, r4
 801de58:	eb0a 0308 	add.w	r3, sl, r8
 801de5c:	4639      	mov	r1, r7
 801de5e:	4648      	mov	r0, r9
 801de60:	47d8      	blx	fp
 801de62:	4604      	mov	r4, r0
 801de64:	4630      	mov	r0, r6
 801de66:	f7fa f9e9 	bl	801823c <MobleMemFree>
 801de6a:	e7c9      	b.n	801de00 <BnrgmHealthModelNewPacket+0x18>
 801de6c:	0802d11c 	.word	0x0802d11c

0801de70 <MobleConfigModelNewPacket>:
 801de70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de74:	69ce      	ldr	r6, [r1, #28]
 801de76:	b085      	sub	sp, #20
 801de78:	f101 0a20 	add.w	sl, r1, #32
 801de7c:	4681      	mov	r9, r0
 801de7e:	4688      	mov	r8, r1
 801de80:	aa03      	add	r2, sp, #12
 801de82:	4631      	mov	r1, r6
 801de84:	4650      	mov	r0, sl
 801de86:	f7ff ff8d 	bl	801dda4 <MobleModelGetOpcodeValue>
 801de8a:	4683      	mov	fp, r0
 801de8c:	b920      	cbnz	r0, 801de98 <MobleConfigModelNewPacket+0x28>
 801de8e:	2402      	movs	r4, #2
 801de90:	4620      	mov	r0, r4
 801de92:	b005      	add	sp, #20
 801de94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de98:	4916      	ldr	r1, [pc, #88]	@ (801def4 <MobleConfigModelNewPacket+0x84>)
 801de9a:	9803      	ldr	r0, [sp, #12]
 801de9c:	222f      	movs	r2, #47	@ 0x2f
 801de9e:	f7ff feb5 	bl	801dc0c <MobleModelGetOpcodeIdx>
 801dea2:	4605      	mov	r5, r0
 801dea4:	2800      	cmp	r0, #0
 801dea6:	d0f2      	beq.n	801de8e <MobleConfigModelNewPacket+0x1e>
 801dea8:	88c3      	ldrh	r3, [r0, #6]
 801deaa:	eba6 060b 	sub.w	r6, r6, fp
 801deae:	42b3      	cmp	r3, r6
 801deb0:	dced      	bgt.n	801de8e <MobleConfigModelNewPacket+0x1e>
 801deb2:	8903      	ldrh	r3, [r0, #8]
 801deb4:	42b3      	cmp	r3, r6
 801deb6:	dbea      	blt.n	801de8e <MobleConfigModelNewPacket+0x1e>
 801deb8:	68c4      	ldr	r4, [r0, #12]
 801deba:	b93c      	cbnz	r4, 801decc <MobleConfigModelNewPacket+0x5c>
 801debc:	4b0e      	ldr	r3, [pc, #56]	@ (801def8 <MobleConfigModelNewPacket+0x88>)
 801debe:	881a      	ldrh	r2, [r3, #0]
 801dec0:	b2e3      	uxtb	r3, r4
 801dec2:	4293      	cmp	r3, r2
 801dec4:	f104 0401 	add.w	r4, r4, #1
 801dec8:	d3fa      	bcc.n	801dec0 <MobleConfigModelNewPacket+0x50>
 801deca:	e7e0      	b.n	801de8e <MobleConfigModelNewPacket+0x1e>
 801decc:	20a7      	movs	r0, #167	@ 0xa7
 801dece:	f7fa f92b 	bl	8018128 <MobleMemAlloc>
 801ded2:	4607      	mov	r7, r0
 801ded4:	2800      	cmp	r0, #0
 801ded6:	d0da      	beq.n	801de8e <MobleConfigModelNewPacket+0x1e>
 801ded8:	e9cd 6000 	strd	r6, r0, [sp]
 801dedc:	eb0a 030b 	add.w	r3, sl, fp
 801dee0:	462a      	mov	r2, r5
 801dee2:	4641      	mov	r1, r8
 801dee4:	4648      	mov	r0, r9
 801dee6:	47a0      	blx	r4
 801dee8:	4604      	mov	r4, r0
 801deea:	4638      	mov	r0, r7
 801deec:	f7fa f9a6 	bl	801823c <MobleMemFree>
 801def0:	e7ce      	b.n	801de90 <MobleConfigModelNewPacket+0x20>
 801def2:	bf00      	nop
 801def4:	0802d1cc 	.word	0x0802d1cc
 801def8:	20000008 	.word	0x20000008

0801defc <Moble_SIGModel_NewPacket>:
 801defc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df00:	ed2d 8b02 	vpush	{d8}
 801df04:	b089      	sub	sp, #36	@ 0x24
 801df06:	200c      	movs	r0, #12
 801df08:	9305      	str	r3, [sp, #20]
 801df0a:	69cb      	ldr	r3, [r1, #28]
 801df0c:	9303      	str	r3, [sp, #12]
 801df0e:	f101 0320 	add.w	r3, r1, #32
 801df12:	ee08 2a10 	vmov	s16, r2
 801df16:	460d      	mov	r5, r1
 801df18:	9304      	str	r3, [sp, #16]
 801df1a:	f7fa f905 	bl	8018128 <MobleMemAlloc>
 801df1e:	aa07      	add	r2, sp, #28
 801df20:	4604      	mov	r4, r0
 801df22:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801df26:	f7ff ff3d 	bl	801dda4 <MobleModelGetOpcodeValue>
 801df2a:	4607      	mov	r7, r0
 801df2c:	b930      	cbnz	r0, 801df3c <Moble_SIGModel_NewPacket+0x40>
 801df2e:	2502      	movs	r5, #2
 801df30:	4628      	mov	r0, r5
 801df32:	b009      	add	sp, #36	@ 0x24
 801df34:	ecbd 8b02 	vpop	{d8}
 801df38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df3c:	4e2d      	ldr	r6, [pc, #180]	@ (801dff4 <Moble_SIGModel_NewPacket+0xf8>)
 801df3e:	f8d6 3a24 	ldr.w	r3, [r6, #2596]	@ 0xa24
 801df42:	f04f 0800 	mov.w	r8, #0
 801df46:	f8d6 2a34 	ldr.w	r2, [r6, #2612]	@ 0xa34
 801df4a:	f8c6 3a30 	str.w	r3, [r6, #2608]	@ 0xa30
 801df4e:	4542      	cmp	r2, r8
 801df50:	d804      	bhi.n	801df5c <Moble_SIGModel_NewPacket+0x60>
 801df52:	2502      	movs	r5, #2
 801df54:	4620      	mov	r0, r4
 801df56:	f7fa f971 	bl	801823c <MobleMemFree>
 801df5a:	e7e9      	b.n	801df30 <Moble_SIGModel_NewPacket+0x34>
 801df5c:	4926      	ldr	r1, [pc, #152]	@ (801dff8 <Moble_SIGModel_NewPacket+0xfc>)
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	1d08      	adds	r0, r1, #4
 801df62:	4798      	blx	r3
 801df64:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801df68:	f8d6 aa2c 	ldr.w	sl, [r6, #2604]	@ 0xa2c
 801df6c:	f8b6 ba28 	ldrh.w	fp, [r6, #2600]	@ 0xa28
 801df70:	ee18 0a10 	vmov	r0, s16
 801df74:	465b      	mov	r3, fp
 801df76:	4652      	mov	r2, sl
 801df78:	4649      	mov	r1, r9
 801df7a:	f7ff fe55 	bl	801dc28 <MobleModelCheckOpcodeValid>
 801df7e:	2801      	cmp	r0, #1
 801df80:	d005      	beq.n	801df8e <Moble_SIGModel_NewPacket+0x92>
 801df82:	f8d6 3a30 	ldr.w	r3, [r6, #2608]	@ 0xa30
 801df86:	f108 0801 	add.w	r8, r8, #1
 801df8a:	330c      	adds	r3, #12
 801df8c:	e7db      	b.n	801df46 <Moble_SIGModel_NewPacket+0x4a>
 801df8e:	9b03      	ldr	r3, [sp, #12]
 801df90:	465a      	mov	r2, fp
 801df92:	4651      	mov	r1, sl
 801df94:	4648      	mov	r0, r9
 801df96:	eba3 0807 	sub.w	r8, r3, r7
 801df9a:	f7ff fe81 	bl	801dca0 <MobleModelGetMinParamLength>
 801df9e:	4540      	cmp	r0, r8
 801dfa0:	d8c5      	bhi.n	801df2e <Moble_SIGModel_NewPacket+0x32>
 801dfa2:	465a      	mov	r2, fp
 801dfa4:	4651      	mov	r1, sl
 801dfa6:	4648      	mov	r0, r9
 801dfa8:	f7ff fe94 	bl	801dcd4 <MobleModelGetMaxParamLength>
 801dfac:	4540      	cmp	r0, r8
 801dfae:	d3be      	bcc.n	801df2e <Moble_SIGModel_NewPacket+0x32>
 801dfb0:	9b04      	ldr	r3, [sp, #16]
 801dfb2:	465a      	mov	r2, fp
 801dfb4:	443b      	add	r3, r7
 801dfb6:	4651      	mov	r1, sl
 801dfb8:	4648      	mov	r0, r9
 801dfba:	461f      	mov	r7, r3
 801dfbc:	f7ff fe56 	bl	801dc6c <MobleModelCheckOpCodeReliable>
 801dfc0:	9b05      	ldr	r3, [sp, #20]
 801dfc2:	7023      	strb	r3, [r4, #0]
 801dfc4:	892b      	ldrh	r3, [r5, #8]
 801dfc6:	80a3      	strh	r3, [r4, #4]
 801dfc8:	896b      	ldrh	r3, [r5, #10]
 801dfca:	80e3      	strh	r3, [r4, #6]
 801dfcc:	78eb      	ldrb	r3, [r5, #3]
 801dfce:	7223      	strb	r3, [r4, #8]
 801dfd0:	7b2b      	ldrb	r3, [r5, #12]
 801dfd2:	72a3      	strb	r3, [r4, #10]
 801dfd4:	7c2b      	ldrb	r3, [r5, #16]
 801dfd6:	72e3      	strb	r3, [r4, #11]
 801dfd8:	7dab      	ldrb	r3, [r5, #22]
 801dfda:	7263      	strb	r3, [r4, #9]
 801dfdc:	f8d6 3a30 	ldr.w	r3, [r6, #2608]	@ 0xa30
 801dfe0:	9000      	str	r0, [sp, #0]
 801dfe2:	689d      	ldr	r5, [r3, #8]
 801dfe4:	463a      	mov	r2, r7
 801dfe6:	4643      	mov	r3, r8
 801dfe8:	fa1f f189 	uxth.w	r1, r9
 801dfec:	4620      	mov	r0, r4
 801dfee:	47a8      	blx	r5
 801dff0:	4605      	mov	r5, r0
 801dff2:	e7af      	b.n	801df54 <Moble_SIGModel_NewPacket+0x58>
 801dff4:	20002514 	.word	0x20002514
 801dff8:	20002f3c 	.word	0x20002f3c

0801dffc <BnrgmConfigModelSetFeatures>:
 801dffc:	b570      	push	{r4, r5, r6, lr}
 801dffe:	4604      	mov	r4, r0
 801e000:	f004 0309 	and.w	r3, r4, #9
 801e004:	2b09      	cmp	r3, #9
 801e006:	4608      	mov	r0, r1
 801e008:	4616      	mov	r6, r2
 801e00a:	d058      	beq.n	801e0be <BnrgmConfigModelSetFeatures+0xc2>
 801e00c:	f004 030a 	and.w	r3, r4, #10
 801e010:	2b0a      	cmp	r3, #10
 801e012:	d054      	beq.n	801e0be <BnrgmConfigModelSetFeatures+0xc2>
 801e014:	f004 030c 	and.w	r3, r4, #12
 801e018:	2b0c      	cmp	r3, #12
 801e01a:	d050      	beq.n	801e0be <BnrgmConfigModelSetFeatures+0xc2>
 801e01c:	f014 0f01 	tst.w	r4, #1
 801e020:	4d28      	ldr	r5, [pc, #160]	@ (801e0c4 <BnrgmConfigModelSetFeatures+0xc8>)
 801e022:	d032      	beq.n	801e08a <BnrgmConfigModelSetFeatures+0x8e>
 801e024:	f895 30bd 	ldrb.w	r3, [r5, #189]	@ 0xbd
 801e028:	2b01      	cmp	r3, #1
 801e02a:	d904      	bls.n	801e036 <BnrgmConfigModelSetFeatures+0x3a>
 801e02c:	2301      	movs	r3, #1
 801e02e:	f885 30bd 	strb.w	r3, [r5, #189]	@ 0xbd
 801e032:	f885 30ba 	strb.w	r3, [r5, #186]	@ 0xba
 801e036:	07a2      	lsls	r2, r4, #30
 801e038:	d52b      	bpl.n	801e092 <BnrgmConfigModelSetFeatures+0x96>
 801e03a:	f895 30bc 	ldrb.w	r3, [r5, #188]	@ 0xbc
 801e03e:	2b01      	cmp	r3, #1
 801e040:	d904      	bls.n	801e04c <BnrgmConfigModelSetFeatures+0x50>
 801e042:	2301      	movs	r3, #1
 801e044:	f8a5 30ba 	strh.w	r3, [r5, #186]	@ 0xba
 801e048:	f885 30bc 	strb.w	r3, [r5, #188]	@ 0xbc
 801e04c:	0763      	lsls	r3, r4, #29
 801e04e:	d526      	bpl.n	801e09e <BnrgmConfigModelSetFeatures+0xa2>
 801e050:	f895 30be 	ldrb.w	r3, [r5, #190]	@ 0xbe
 801e054:	2b01      	cmp	r3, #1
 801e056:	d906      	bls.n	801e066 <BnrgmConfigModelSetFeatures+0x6a>
 801e058:	2301      	movs	r3, #1
 801e05a:	f885 30be 	strb.w	r3, [r5, #190]	@ 0xbe
 801e05e:	f885 30ba 	strb.w	r3, [r5, #186]	@ 0xba
 801e062:	f7fd fc3d 	bl	801b8e0 <BnrgmFrndMgmtFnInit>
 801e066:	f014 0008 	ands.w	r0, r4, #8
 801e06a:	d01c      	beq.n	801e0a6 <BnrgmConfigModelSetFeatures+0xaa>
 801e06c:	f895 30bf 	ldrb.w	r3, [r5, #191]	@ 0xbf
 801e070:	2b01      	cmp	r3, #1
 801e072:	f04f 0400 	mov.w	r4, #0
 801e076:	d906      	bls.n	801e086 <BnrgmConfigModelSetFeatures+0x8a>
 801e078:	4630      	mov	r0, r6
 801e07a:	f885 40bf 	strb.w	r4, [r5, #191]	@ 0xbf
 801e07e:	f885 40ba 	strb.w	r4, [r5, #186]	@ 0xba
 801e082:	f7f2 fd3d 	bl	8010b00 <BnrgmFrndMgmtLpnInit>
 801e086:	4620      	mov	r0, r4
 801e088:	e010      	b.n	801e0ac <BnrgmConfigModelSetFeatures+0xb0>
 801e08a:	2302      	movs	r3, #2
 801e08c:	f885 30bd 	strb.w	r3, [r5, #189]	@ 0xbd
 801e090:	e7d1      	b.n	801e036 <BnrgmConfigModelSetFeatures+0x3a>
 801e092:	2302      	movs	r3, #2
 801e094:	f885 30bc 	strb.w	r3, [r5, #188]	@ 0xbc
 801e098:	f885 30bb 	strb.w	r3, [r5, #187]	@ 0xbb
 801e09c:	e7d6      	b.n	801e04c <BnrgmConfigModelSetFeatures+0x50>
 801e09e:	2302      	movs	r3, #2
 801e0a0:	f885 30be 	strb.w	r3, [r5, #190]	@ 0xbe
 801e0a4:	e7df      	b.n	801e066 <BnrgmConfigModelSetFeatures+0x6a>
 801e0a6:	2302      	movs	r3, #2
 801e0a8:	f885 30bf 	strb.w	r3, [r5, #191]	@ 0xbf
 801e0ac:	4b06      	ldr	r3, [pc, #24]	@ (801e0c8 <BnrgmConfigModelSetFeatures+0xcc>)
 801e0ae:	8819      	ldrh	r1, [r3, #0]
 801e0b0:	2300      	movs	r3, #0
 801e0b2:	b2da      	uxtb	r2, r3
 801e0b4:	428a      	cmp	r2, r1
 801e0b6:	f103 0301 	add.w	r3, r3, #1
 801e0ba:	d3fa      	bcc.n	801e0b2 <BnrgmConfigModelSetFeatures+0xb6>
 801e0bc:	bd70      	pop	{r4, r5, r6, pc}
 801e0be:	2003      	movs	r0, #3
 801e0c0:	e7f4      	b.n	801e0ac <BnrgmConfigModelSetFeatures+0xb0>
 801e0c2:	bf00      	nop
 801e0c4:	20000324 	.word	0x20000324
 801e0c8:	20000008 	.word	0x20000008

0801e0cc <MobleLibrarySetFeatures>:
 801e0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0ce:	4b10      	ldr	r3, [pc, #64]	@ (801e110 <MobleLibrarySetFeatures+0x44>)
 801e0d0:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	@ 0x6f0
 801e0d4:	b087      	sub	sp, #28
 801e0d6:	4606      	mov	r6, r0
 801e0d8:	b1c3      	cbz	r3, 801e10c <MobleLibrarySetFeatures+0x40>
 801e0da:	4d0e      	ldr	r5, [pc, #56]	@ (801e114 <MobleLibrarySetFeatures+0x48>)
 801e0dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e0de:	ac01      	add	r4, sp, #4
 801e0e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e0e2:	682b      	ldr	r3, [r5, #0]
 801e0e4:	6023      	str	r3, [r4, #0]
 801e0e6:	2701      	movs	r7, #1
 801e0e8:	0733      	lsls	r3, r6, #28
 801e0ea:	f88d 7000 	strb.w	r7, [sp]
 801e0ee:	d509      	bpl.n	801e104 <MobleLibrarySetFeatures+0x38>
 801e0f0:	2000      	movs	r0, #0
 801e0f2:	f7fe fb63 	bl	801c7bc <BnrgmTransmitSetAutoScanState>
 801e0f6:	aa01      	add	r2, sp, #4
 801e0f8:	4669      	mov	r1, sp
 801e0fa:	4630      	mov	r0, r6
 801e0fc:	f7ff ff7e 	bl	801dffc <BnrgmConfigModelSetFeatures>
 801e100:	b007      	add	sp, #28
 801e102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e104:	4b04      	ldr	r3, [pc, #16]	@ (801e118 <MobleLibrarySetFeatures+0x4c>)
 801e106:	f883 716a 	strb.w	r7, [r3, #362]	@ 0x16a
 801e10a:	e7f4      	b.n	801e0f6 <MobleLibrarySetFeatures+0x2a>
 801e10c:	2002      	movs	r0, #2
 801e10e:	e7f7      	b.n	801e100 <MobleLibrarySetFeatures+0x34>
 801e110:	20002514 	.word	0x20002514
 801e114:	0802d518 	.word	0x0802d518
 801e118:	20003f64 	.word	0x20003f64

0801e11c <Test_UpperTester_Set12>:
 801e11c:	7808      	ldrb	r0, [r1, #0]
 801e11e:	3830      	subs	r0, #48	@ 0x30
 801e120:	b280      	uxth	r0, r0
 801e122:	f7ff bfd3 	b.w	801e0cc <MobleLibrarySetFeatures>
	...

0801e128 <MobleConfigModelInit>:
 801e128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e12a:	4d1d      	ldr	r5, [pc, #116]	@ (801e1a0 <MobleConfigModelInit+0x78>)
 801e12c:	4606      	mov	r6, r0
 801e12e:	4608      	mov	r0, r1
 801e130:	4611      	mov	r1, r2
 801e132:	461a      	mov	r2, r3
 801e134:	2301      	movs	r3, #1
 801e136:	f885 30ba 	strb.w	r3, [r5, #186]	@ 0xba
 801e13a:	2308      	movs	r3, #8
 801e13c:	f885 30b5 	strb.w	r3, [r5, #181]	@ 0xb5
 801e140:	4b18      	ldr	r3, [pc, #96]	@ (801e1a4 <MobleConfigModelInit+0x7c>)
 801e142:	2400      	movs	r4, #0
 801e144:	881f      	ldrh	r7, [r3, #0]
 801e146:	46a6      	mov	lr, r4
 801e148:	b2e3      	uxtb	r3, r4
 801e14a:	42bb      	cmp	r3, r7
 801e14c:	f104 0c01 	add.w	ip, r4, #1
 801e150:	d321      	bcc.n	801e196 <MobleConfigModelInit+0x6e>
 801e152:	2302      	movs	r3, #2
 801e154:	f885 30b6 	strb.w	r3, [r5, #182]	@ 0xb6
 801e158:	2301      	movs	r3, #1
 801e15a:	f885 30b8 	strb.w	r3, [r5, #184]	@ 0xb8
 801e15e:	f04f 3302 	mov.w	r3, #33686018	@ 0x2020202
 801e162:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 801e166:	f7ff ff49 	bl	801dffc <BnrgmConfigModelSetFeatures>
 801e16a:	b968      	cbnz	r0, 801e188 <MobleConfigModelInit+0x60>
 801e16c:	490e      	ldr	r1, [pc, #56]	@ (801e1a8 <MobleConfigModelInit+0x80>)
 801e16e:	480f      	ldr	r0, [pc, #60]	@ (801e1ac <MobleConfigModelInit+0x84>)
 801e170:	4632      	mov	r2, r6
 801e172:	f7f6 fe3d 	bl	8014df0 <MoblePalTimerCreate>
 801e176:	4632      	mov	r2, r6
 801e178:	490d      	ldr	r1, [pc, #52]	@ (801e1b0 <MobleConfigModelInit+0x88>)
 801e17a:	480e      	ldr	r0, [pc, #56]	@ (801e1b4 <MobleConfigModelInit+0x8c>)
 801e17c:	f7f6 fe38 	bl	8014df0 <MoblePalTimerCreate>
 801e180:	4b0d      	ldr	r3, [pc, #52]	@ (801e1b8 <MobleConfigModelInit+0x90>)
 801e182:	4a0e      	ldr	r2, [pc, #56]	@ (801e1bc <MobleConfigModelInit+0x94>)
 801e184:	f8c3 295c 	str.w	r2, [r3, #2396]	@ 0x95c
 801e188:	4b0d      	ldr	r3, [pc, #52]	@ (801e1c0 <MobleConfigModelInit+0x98>)
 801e18a:	2200      	movs	r2, #0
 801e18c:	f883 2a38 	strb.w	r2, [r3, #2616]	@ 0xa38
 801e190:	f883 2a39 	strb.w	r2, [r3, #2617]	@ 0xa39
 801e194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e196:	442b      	add	r3, r5
 801e198:	4664      	mov	r4, ip
 801e19a:	f883 e0c0 	strb.w	lr, [r3, #192]	@ 0xc0
 801e19e:	e7d3      	b.n	801e148 <MobleConfigModelInit+0x20>
 801e1a0:	20000324 	.word	0x20000324
 801e1a4:	20000008 	.word	0x20000008
 801e1a8:	08022f11 	.word	0x08022f11
 801e1ac:	20000400 	.word	0x20000400
 801e1b0:	08014f2d 	.word	0x08014f2d
 801e1b4:	20000410 	.word	0x20000410
 801e1b8:	2000141c 	.word	0x2000141c
 801e1bc:	08014cf1 	.word	0x08014cf1
 801e1c0:	20002514 	.word	0x20002514

0801e1c4 <MobleConfigModelReset>:
 801e1c4:	b538      	push	{r3, r4, r5, lr}
 801e1c6:	4a1b      	ldr	r2, [pc, #108]	@ (801e234 <MobleConfigModelReset+0x70>)
 801e1c8:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 801e1cc:	2b01      	cmp	r3, #1
 801e1ce:	d12f      	bne.n	801e230 <MobleConfigModelReset+0x6c>
 801e1d0:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
 801e1d4:	2308      	movs	r3, #8
 801e1d6:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
 801e1da:	4b17      	ldr	r3, [pc, #92]	@ (801e238 <MobleConfigModelReset+0x74>)
 801e1dc:	8818      	ldrh	r0, [r3, #0]
 801e1de:	2300      	movs	r3, #0
 801e1e0:	461d      	mov	r5, r3
 801e1e2:	b2d9      	uxtb	r1, r3
 801e1e4:	4281      	cmp	r1, r0
 801e1e6:	f103 0401 	add.w	r4, r3, #1
 801e1ea:	d31c      	bcc.n	801e226 <MobleConfigModelReset+0x62>
 801e1ec:	2302      	movs	r3, #2
 801e1ee:	2100      	movs	r1, #0
 801e1f0:	f882 30b6 	strb.w	r3, [r2, #182]	@ 0xb6
 801e1f4:	2301      	movs	r3, #1
 801e1f6:	f882 30b8 	strb.w	r3, [r2, #184]	@ 0xb8
 801e1fa:	e9c2 1134 	strd	r1, r1, [r2, #208]	@ 0xd0
 801e1fe:	f8d2 00dc 	ldr.w	r0, [r2, #220]	@ 0xdc
 801e202:	f882 10c8 	strb.w	r1, [r2, #200]	@ 0xc8
 801e206:	f8a2 10ca 	strh.w	r1, [r2, #202]	@ 0xca
 801e20a:	f8a2 10d8 	strh.w	r1, [r2, #216]	@ 0xd8
 801e20e:	f7f6 fe81 	bl	8014f14 <MoblePalTimerStop>
 801e212:	e9c2 1138 	strd	r1, r1, [r2, #224]	@ 0xe0
 801e216:	f8d2 00ec 	ldr.w	r0, [r2, #236]	@ 0xec
 801e21a:	f8c2 10e8 	str.w	r1, [r2, #232]	@ 0xe8
 801e21e:	f7f6 fe79 	bl	8014f14 <MoblePalTimerStop>
 801e222:	4608      	mov	r0, r1
 801e224:	bd38      	pop	{r3, r4, r5, pc}
 801e226:	4411      	add	r1, r2
 801e228:	4623      	mov	r3, r4
 801e22a:	f881 50c0 	strb.w	r5, [r1, #192]	@ 0xc0
 801e22e:	e7d8      	b.n	801e1e2 <MobleConfigModelReset+0x1e>
 801e230:	2001      	movs	r0, #1
 801e232:	e7f7      	b.n	801e224 <MobleConfigModelReset+0x60>
 801e234:	20000324 	.word	0x20000324
 801e238:	20000008 	.word	0x20000008

0801e23c <MobleStackConfigInvalidate>:
 801e23c:	b538      	push	{r3, r4, r5, lr}
 801e23e:	4d14      	ldr	r5, [pc, #80]	@ (801e290 <MobleStackConfigInvalidate+0x54>)
 801e240:	f8d5 4680 	ldr.w	r4, [r5, #1664]	@ 0x680
 801e244:	7823      	ldrb	r3, [r4, #0]
 801e246:	b303      	cbz	r3, 801e28a <MobleStackConfigInvalidate+0x4e>
 801e248:	f7ff ffbc 	bl	801e1c4 <MobleConfigModelReset>
 801e24c:	4620      	mov	r0, r4
 801e24e:	f7fd ff6d 	bl	801c12c <MobleConfigNetworkInvalidate>
 801e252:	2801      	cmp	r0, #1
 801e254:	4604      	mov	r4, r0
 801e256:	d816      	bhi.n	801e286 <MobleStackConfigInvalidate+0x4a>
 801e258:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 801e25c:	781b      	ldrb	r3, [r3, #0]
 801e25e:	f885 3934 	strb.w	r3, [r5, #2356]	@ 0x934
 801e262:	f7f8 f939 	bl	80164d8 <MoblePalCryptoForgetAllKeys>
 801e266:	2801      	cmp	r0, #1
 801e268:	4604      	mov	r4, r0
 801e26a:	d80c      	bhi.n	801e286 <MobleStackConfigInvalidate+0x4a>
 801e26c:	f7f8 f9ae 	bl	80165cc <MoblePalCryptoModelsDeInit>
 801e270:	f505 60d0 	add.w	r0, r5, #1664	@ 0x680
 801e274:	f7fd fe2f 	bl	801bed6 <MobleProvisionUpdateRole>
 801e278:	f895 3854 	ldrb.w	r3, [r5, #2132]	@ 0x854
 801e27c:	2b01      	cmp	r3, #1
 801e27e:	d102      	bne.n	801e286 <MobleStackConfigInvalidate+0x4a>
 801e280:	4a04      	ldr	r2, [pc, #16]	@ (801e294 <MobleStackConfigInvalidate+0x58>)
 801e282:	f882 316a 	strb.w	r3, [r2, #362]	@ 0x16a
 801e286:	4620      	mov	r0, r4
 801e288:	bd38      	pop	{r3, r4, r5, pc}
 801e28a:	2401      	movs	r4, #1
 801e28c:	e7fb      	b.n	801e286 <MobleStackConfigInvalidate+0x4a>
 801e28e:	bf00      	nop
 801e290:	2000141c 	.word	0x2000141c
 801e294:	20003f64 	.word	0x20003f64

0801e298 <BLEMesh_Unprovision>:
 801e298:	4b07      	ldr	r3, [pc, #28]	@ (801e2b8 <BLEMesh_Unprovision+0x20>)
 801e29a:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	@ 0x6f0
 801e29e:	b510      	push	{r4, lr}
 801e2a0:	b13b      	cbz	r3, 801e2b2 <BLEMesh_Unprovision+0x1a>
 801e2a2:	f7ff ffcb 	bl	801e23c <MobleStackConfigInvalidate>
 801e2a6:	4604      	mov	r4, r0
 801e2a8:	b908      	cbnz	r0, 801e2ae <BLEMesh_Unprovision+0x16>
 801e2aa:	f7fe fac9 	bl	801c840 <MoblePalBluetoothGracefulReset>
 801e2ae:	4620      	mov	r0, r4
 801e2b0:	bd10      	pop	{r4, pc}
 801e2b2:	2402      	movs	r4, #2
 801e2b4:	e7fb      	b.n	801e2ae <BLEMesh_Unprovision+0x16>
 801e2b6:	bf00      	nop
 801e2b8:	20002514 	.word	0x20002514

0801e2bc <MobleConfigModelCreate>:
 801e2bc:	4b04      	ldr	r3, [pc, #16]	@ (801e2d0 <MobleConfigModelCreate+0x14>)
 801e2be:	f893 00b4 	ldrb.w	r0, [r3, #180]	@ 0xb4
 801e2c2:	b918      	cbnz	r0, 801e2cc <MobleConfigModelCreate+0x10>
 801e2c4:	2201      	movs	r2, #1
 801e2c6:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
 801e2ca:	4770      	bx	lr
 801e2cc:	2002      	movs	r0, #2
 801e2ce:	4770      	bx	lr
 801e2d0:	20000324 	.word	0x20000324

0801e2d4 <MobleConfigModelGetConfigBeacon>:
 801e2d4:	4b03      	ldr	r3, [pc, #12]	@ (801e2e4 <MobleConfigModelGetConfigBeacon+0x10>)
 801e2d6:	f893 00ba 	ldrb.w	r0, [r3, #186]	@ 0xba
 801e2da:	1e43      	subs	r3, r0, #1
 801e2dc:	4258      	negs	r0, r3
 801e2de:	4158      	adcs	r0, r3
 801e2e0:	4770      	bx	lr
 801e2e2:	bf00      	nop
 801e2e4:	20000324 	.word	0x20000324

0801e2e8 <MobleStackBeaconGenerator>:
 801e2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2ea:	4e39      	ldr	r6, [pc, #228]	@ (801e3d0 <MobleStackBeaconGenerator+0xe8>)
 801e2ec:	4c39      	ldr	r4, [pc, #228]	@ (801e3d4 <MobleStackBeaconGenerator+0xec>)
 801e2ee:	460a      	mov	r2, r1
 801e2f0:	f894 361c 	ldrb.w	r3, [r4, #1564]	@ 0x61c
 801e2f4:	f896 1a3a 	ldrb.w	r1, [r6, #2618]	@ 0xa3a
 801e2f8:	428b      	cmp	r3, r1
 801e2fa:	bf8b      	itete	hi
 801e2fc:	1c4b      	addhi	r3, r1, #1
 801e2fe:	2300      	movls	r3, #0
 801e300:	b2db      	uxtbhi	r3, r3
 801e302:	4619      	movls	r1, r3
 801e304:	2a00      	cmp	r2, #0
 801e306:	b08d      	sub	sp, #52	@ 0x34
 801e308:	4605      	mov	r5, r0
 801e30a:	f886 3a3a 	strb.w	r3, [r6, #2618]	@ 0xa3a
 801e30e:	db2c      	blt.n	801e36a <MobleStackBeaconGenerator+0x82>
 801e310:	f8d4 3680 	ldr.w	r3, [r4, #1664]	@ 0x680
 801e314:	781b      	ldrb	r3, [r3, #0]
 801e316:	2b01      	cmp	r3, #1
 801e318:	d133      	bne.n	801e382 <MobleStackBeaconGenerator+0x9a>
 801e31a:	f7ff ffdb 	bl	801e2d4 <MobleConfigModelGetConfigBeacon>
 801e31e:	b910      	cbnz	r0, 801e326 <MobleStackBeaconGenerator+0x3e>
 801e320:	f04f 32ff 	mov.w	r2, #4294967295
 801e324:	e021      	b.n	801e36a <MobleStackBeaconGenerator+0x82>
 801e326:	4b2c      	ldr	r3, [pc, #176]	@ (801e3d8 <MobleStackBeaconGenerator+0xf0>)
 801e328:	9208      	str	r2, [sp, #32]
 801e32a:	440b      	add	r3, r1
 801e32c:	f8d4 7658 	ldr.w	r7, [r4, #1624]	@ 0x658
 801e330:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 801e334:	1e9a      	subs	r2, r3, #2
 801e336:	4256      	negs	r6, r2
 801e338:	4156      	adcs	r6, r2
 801e33a:	f894 265c 	ldrb.w	r2, [r4, #1628]	@ 0x65c
 801e33e:	2a01      	cmp	r2, #1
 801e340:	bf08      	it	eq
 801e342:	f046 0602 	orreq.w	r6, r6, #2
 801e346:	2b02      	cmp	r3, #2
 801e348:	d112      	bne.n	801e370 <MobleStackBeaconGenerator+0x88>
 801e34a:	2001      	movs	r0, #1
 801e34c:	f7f8 f97e 	bl	801664c <MoblePalCryptoGetNetworkSecurityKeys>
 801e350:	2301      	movs	r3, #1
 801e352:	e9cd 7300 	strd	r7, r3, [sp]
 801e356:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801e35a:	4632      	mov	r2, r6
 801e35c:	a908      	add	r1, sp, #32
 801e35e:	4628      	mov	r0, r5
 801e360:	f7fc faac 	bl	801a8bc <MobleBeaconSetSecure>
 801e364:	2801      	cmp	r0, #1
 801e366:	d8db      	bhi.n	801e320 <MobleStackBeaconGenerator+0x38>
 801e368:	9a08      	ldr	r2, [sp, #32]
 801e36a:	4610      	mov	r0, r2
 801e36c:	b00d      	add	sp, #52	@ 0x34
 801e36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e370:	2000      	movs	r0, #0
 801e372:	f7f8 f96b 	bl	801664c <MoblePalCryptoGetNetworkSecurityKeys>
 801e376:	2300      	movs	r3, #0
 801e378:	e9cd 7300 	strd	r7, r3, [sp]
 801e37c:	f100 0328 	add.w	r3, r0, #40	@ 0x28
 801e380:	e7eb      	b.n	801e35a <MobleStackBeaconGenerator+0x72>
 801e382:	f7f6 ff77 	bl	8015274 <MoblePalBluetoothGetConnectionState>
 801e386:	2802      	cmp	r0, #2
 801e388:	d120      	bne.n	801e3cc <MobleStackBeaconGenerator+0xe4>
 801e38a:	f894 3854 	ldrb.w	r3, [r4, #2132]	@ 0x854
 801e38e:	b1eb      	cbz	r3, 801e3cc <MobleStackBeaconGenerator+0xe4>
 801e390:	f896 6725 	ldrb.w	r6, [r6, #1829]	@ 0x725
 801e394:	b9d6      	cbnz	r6, 801e3cc <MobleStackBeaconGenerator+0xe4>
 801e396:	9203      	str	r2, [sp, #12]
 801e398:	2210      	movs	r2, #16
 801e39a:	4631      	mov	r1, r6
 801e39c:	eb0d 0002 	add.w	r0, sp, r2
 801e3a0:	f008 fc16 	bl	8026bd0 <memset>
 801e3a4:	a804      	add	r0, sp, #16
 801e3a6:	f7f6 ff85 	bl	80152b4 <MoblePalBluetoothGetBluetoothAddress>
 801e3aa:	4b0b      	ldr	r3, [pc, #44]	@ (801e3d8 <MobleStackBeaconGenerator+0xf0>)
 801e3ac:	685b      	ldr	r3, [r3, #4]
 801e3ae:	a808      	add	r0, sp, #32
 801e3b0:	695b      	ldr	r3, [r3, #20]
 801e3b2:	4798      	blx	r3
 801e3b4:	f8b4 38fc 	ldrh.w	r3, [r4, #2300]	@ 0x8fc
 801e3b8:	9600      	str	r6, [sp, #0]
 801e3ba:	aa08      	add	r2, sp, #32
 801e3bc:	a903      	add	r1, sp, #12
 801e3be:	4628      	mov	r0, r5
 801e3c0:	f7fc fa45 	bl	801a84e <MobleBeaconSetUnprovisioned>
 801e3c4:	2801      	cmp	r0, #1
 801e3c6:	d8ab      	bhi.n	801e320 <MobleStackBeaconGenerator+0x38>
 801e3c8:	9a03      	ldr	r2, [sp, #12]
 801e3ca:	e7ce      	b.n	801e36a <MobleStackBeaconGenerator+0x82>
 801e3cc:	2200      	movs	r2, #0
 801e3ce:	e7cc      	b.n	801e36a <MobleStackBeaconGenerator+0x82>
 801e3d0:	20002514 	.word	0x20002514
 801e3d4:	2000141c 	.word	0x2000141c
 801e3d8:	20000324 	.word	0x20000324

0801e3dc <MobleConfigModelGetRelayEnableStatus>:
 801e3dc:	4b03      	ldr	r3, [pc, #12]	@ (801e3ec <MobleConfigModelGetRelayEnableStatus+0x10>)
 801e3de:	f893 00bd 	ldrb.w	r0, [r3, #189]	@ 0xbd
 801e3e2:	1e43      	subs	r3, r0, #1
 801e3e4:	4258      	negs	r0, r3
 801e3e6:	4158      	adcs	r0, r3
 801e3e8:	4770      	bx	lr
 801e3ea:	bf00      	nop
 801e3ec:	20000324 	.word	0x20000324

0801e3f0 <MobleNetworkDecideRetransmission>:
 801e3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e3f2:	b085      	sub	sp, #20
 801e3f4:	2300      	movs	r3, #0
 801e3f6:	460c      	mov	r4, r1
 801e3f8:	f88d 3003 	strb.w	r3, [sp, #3]
 801e3fc:	b928      	cbnz	r0, 801e40a <MobleNetworkDecideRetransmission+0x1a>
 801e3fe:	4b4f      	ldr	r3, [pc, #316]	@ (801e53c <MobleNetworkDecideRetransmission+0x14c>)
 801e400:	4a4f      	ldr	r2, [pc, #316]	@ (801e540 <MobleNetworkDecideRetransmission+0x150>)
 801e402:	217a      	movs	r1, #122	@ 0x7a
 801e404:	484f      	ldr	r0, [pc, #316]	@ (801e544 <MobleNetworkDecideRetransmission+0x154>)
 801e406:	f007 fc45 	bl	8025c94 <__assert_func>
 801e40a:	b919      	cbnz	r1, 801e414 <MobleNetworkDecideRetransmission+0x24>
 801e40c:	4b4e      	ldr	r3, [pc, #312]	@ (801e548 <MobleNetworkDecideRetransmission+0x158>)
 801e40e:	4a4c      	ldr	r2, [pc, #304]	@ (801e540 <MobleNetworkDecideRetransmission+0x150>)
 801e410:	217b      	movs	r1, #123	@ 0x7b
 801e412:	e7f7      	b.n	801e404 <MobleNetworkDecideRetransmission+0x14>
 801e414:	f9b1 3016 	ldrsh.w	r3, [r1, #22]
 801e418:	8aca      	ldrh	r2, [r1, #22]
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	dd1f      	ble.n	801e45e <MobleNetworkDecideRetransmission+0x6e>
 801e41e:	6801      	ldr	r1, [r0, #0]
 801e420:	884b      	ldrh	r3, [r1, #2]
 801e422:	7f09      	ldrb	r1, [r1, #28]
 801e424:	429a      	cmp	r2, r3
 801e426:	d307      	bcc.n	801e438 <MobleNetworkDecideRetransmission+0x48>
 801e428:	440b      	add	r3, r1
 801e42a:	429a      	cmp	r2, r3
 801e42c:	da04      	bge.n	801e438 <MobleNetworkDecideRetransmission+0x48>
 801e42e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 801e432:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801e436:	e00f      	b.n	801e458 <MobleNetworkDecideRetransmission+0x68>
 801e438:	4b44      	ldr	r3, [pc, #272]	@ (801e54c <MobleNetworkDecideRetransmission+0x15c>)
 801e43a:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 801e43e:	2b01      	cmp	r3, #1
 801e440:	d10d      	bne.n	801e45e <MobleNetworkDecideRetransmission+0x6e>
 801e442:	4610      	mov	r0, r2
 801e444:	f7fd f85a 	bl	801b4fc <BnrgmFrndMgmtGetFriendshipStatus>
 801e448:	b948      	cbnz	r0, 801e45e <MobleNetworkDecideRetransmission+0x6e>
 801e44a:	7be3      	ldrb	r3, [r4, #15]
 801e44c:	2b01      	cmp	r3, #1
 801e44e:	d92b      	bls.n	801e4a8 <MobleNetworkDecideRetransmission+0xb8>
 801e450:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 801e454:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801e458:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 801e45c:	e024      	b.n	801e4a8 <MobleNetworkDecideRetransmission+0xb8>
 801e45e:	7be3      	ldrb	r3, [r4, #15]
 801e460:	4e3a      	ldr	r6, [pc, #232]	@ (801e54c <MobleNetworkDecideRetransmission+0x15c>)
 801e462:	8ae5      	ldrh	r5, [r4, #22]
 801e464:	f896 70be 	ldrb.w	r7, [r6, #190]	@ 0xbe
 801e468:	2b01      	cmp	r3, #1
 801e46a:	bf82      	ittt	hi
 801e46c:	f8b4 3040 	ldrhhi.w	r3, [r4, #64]	@ 0x40
 801e470:	f443 7380 	orrhi.w	r3, r3, #256	@ 0x100
 801e474:	f8a4 3040 	strhhi.w	r3, [r4, #64]	@ 0x40
 801e478:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801e47c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801e480:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801e484:	d14f      	bne.n	801e526 <MobleNetworkDecideRetransmission+0x136>
 801e486:	4628      	mov	r0, r5
 801e488:	f7f9 fb00 	bl	8017a8c <MoblePalCryptoIsSubscriptionExists>
 801e48c:	b978      	cbnz	r0, 801e4ae <MobleNetworkDecideRetransmission+0xbe>
 801e48e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 801e492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801e496:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 801e49a:	2f01      	cmp	r7, #1
 801e49c:	d01d      	beq.n	801e4da <MobleNetworkDecideRetransmission+0xea>
 801e49e:	6873      	ldr	r3, [r6, #4]
 801e4a0:	6a1b      	ldr	r3, [r3, #32]
 801e4a2:	4798      	blx	r3
 801e4a4:	2800      	cmp	r0, #0
 801e4a6:	d1c2      	bne.n	801e42e <MobleNetworkDecideRetransmission+0x3e>
 801e4a8:	2000      	movs	r0, #0
 801e4aa:	b005      	add	sp, #20
 801e4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e4ae:	f5a5 437f 	sub.w	r3, r5, #65280	@ 0xff00
 801e4b2:	3bfc      	subs	r3, #252	@ 0xfc
 801e4b4:	2b03      	cmp	r3, #3
 801e4b6:	d832      	bhi.n	801e51e <MobleNetworkDecideRetransmission+0x12e>
 801e4b8:	e8df f003 	tbb	[pc, r3]
 801e4bc:	25210702 	.word	0x25210702
 801e4c0:	f896 30bc 	ldrb.w	r3, [r6, #188]	@ 0xbc
 801e4c4:	2b01      	cmp	r3, #1
 801e4c6:	d1e8      	bne.n	801e49a <MobleNetworkDecideRetransmission+0xaa>
 801e4c8:	e7e1      	b.n	801e48e <MobleNetworkDecideRetransmission+0x9e>
 801e4ca:	2f01      	cmp	r7, #1
 801e4cc:	d1e7      	bne.n	801e49e <MobleNetworkDecideRetransmission+0xae>
 801e4ce:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 801e4d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801e4d6:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 801e4da:	aa01      	add	r2, sp, #4
 801e4dc:	f10d 0103 	add.w	r1, sp, #3
 801e4e0:	4628      	mov	r0, r5
 801e4e2:	f7fd f831 	bl	801b548 <BnrgmFrndMgmtGetSubscrStatus>
 801e4e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	d0d7      	beq.n	801e49e <MobleNetworkDecideRetransmission+0xae>
 801e4ee:	7be3      	ldrb	r3, [r4, #15]
 801e4f0:	2b01      	cmp	r3, #1
 801e4f2:	d9d4      	bls.n	801e49e <MobleNetworkDecideRetransmission+0xae>
 801e4f4:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 801e4f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801e4fc:	e009      	b.n	801e512 <MobleNetworkDecideRetransmission+0x122>
 801e4fe:	f7ff ff6d 	bl	801e3dc <MobleConfigModelGetRelayEnableStatus>
 801e502:	2801      	cmp	r0, #1
 801e504:	e7df      	b.n	801e4c6 <MobleNetworkDecideRetransmission+0xd6>
 801e506:	2f01      	cmp	r7, #1
 801e508:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 801e50c:	d004      	beq.n	801e518 <MobleNetworkDecideRetransmission+0x128>
 801e50e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801e512:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 801e516:	e7c2      	b.n	801e49e <MobleNetworkDecideRetransmission+0xae>
 801e518:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 801e51c:	e7db      	b.n	801e4d6 <MobleNetworkDecideRetransmission+0xe6>
 801e51e:	f8b6 30e2 	ldrh.w	r3, [r6, #226]	@ 0xe2
 801e522:	42ab      	cmp	r3, r5
 801e524:	e7cf      	b.n	801e4c6 <MobleNetworkDecideRetransmission+0xd6>
 801e526:	f405 4340 	and.w	r3, r5, #49152	@ 0xc000
 801e52a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e52e:	d1b4      	bne.n	801e49a <MobleNetworkDecideRetransmission+0xaa>
 801e530:	4628      	mov	r0, r5
 801e532:	f7f9 faab 	bl	8017a8c <MoblePalCryptoIsSubscriptionExists>
 801e536:	2800      	cmp	r0, #0
 801e538:	d0a9      	beq.n	801e48e <MobleNetworkDecideRetransmission+0x9e>
 801e53a:	e7ae      	b.n	801e49a <MobleNetworkDecideRetransmission+0xaa>
 801e53c:	0802e4b8 	.word	0x0802e4b8
 801e540:	0802d52c 	.word	0x0802d52c
 801e544:	0802e996 	.word	0x0802e996
 801e548:	0802e64d 	.word	0x0802e64d
 801e54c:	20000324 	.word	0x20000324

0801e550 <MobleConfigModelSetNodeIdentity>:
 801e550:	2802      	cmp	r0, #2
 801e552:	bf9d      	ittte	ls
 801e554:	4b02      	ldrls	r3, [pc, #8]	@ (801e560 <MobleConfigModelSetNodeIdentity+0x10>)
 801e556:	f883 00bb 	strbls.w	r0, [r3, #187]	@ 0xbb
 801e55a:	2000      	movls	r0, #0
 801e55c:	2003      	movhi	r0, #3
 801e55e:	4770      	bx	lr
 801e560:	20000324 	.word	0x20000324

0801e564 <BnrgmStackSetNodeIdentityState>:
 801e564:	b510      	push	{r4, lr}
 801e566:	4604      	mov	r4, r0
 801e568:	b910      	cbnz	r0, 801e570 <BnrgmStackSetNodeIdentityState+0xc>
 801e56a:	2102      	movs	r1, #2
 801e56c:	4608      	mov	r0, r1
 801e56e:	bd10      	pop	{r4, pc}
 801e570:	4b1a      	ldr	r3, [pc, #104]	@ (801e5dc <BnrgmStackSetNodeIdentityState+0x78>)
 801e572:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 801e576:	428b      	cmp	r3, r1
 801e578:	d103      	bne.n	801e582 <BnrgmStackSetNodeIdentityState+0x1e>
 801e57a:	2b01      	cmp	r3, #1
 801e57c:	d020      	beq.n	801e5c0 <BnrgmStackSetNodeIdentityState+0x5c>
 801e57e:	2100      	movs	r1, #0
 801e580:	e7f4      	b.n	801e56c <BnrgmStackSetNodeIdentityState+0x8>
 801e582:	4608      	mov	r0, r1
 801e584:	f7ff ffe4 	bl	801e550 <MobleConfigModelSetNodeIdentity>
 801e588:	2901      	cmp	r1, #1
 801e58a:	d10f      	bne.n	801e5ac <BnrgmStackSetNodeIdentityState+0x48>
 801e58c:	4914      	ldr	r1, [pc, #80]	@ (801e5e0 <BnrgmStackSetNodeIdentityState+0x7c>)
 801e58e:	4622      	mov	r2, r4
 801e590:	f504 70be 	add.w	r0, r4, #380	@ 0x17c
 801e594:	f7f6 fc2c 	bl	8014df0 <MoblePalTimerCreate>
 801e598:	2801      	cmp	r0, #1
 801e59a:	d8e6      	bhi.n	801e56a <BnrgmStackSetNodeIdentityState+0x6>
 801e59c:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
 801e5a0:	f64e 2160 	movw	r1, #60000	@ 0xea60
 801e5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5a8:	f7f6 bc8c 	b.w	8014ec4 <MoblePalTimerStartOnce>
 801e5ac:	2900      	cmp	r1, #0
 801e5ae:	d1e6      	bne.n	801e57e <BnrgmStackSetNodeIdentityState+0x1a>
 801e5b0:	f8d4 217c 	ldr.w	r2, [r4, #380]	@ 0x17c
 801e5b4:	4610      	mov	r0, r2
 801e5b6:	f7f6 fcad 	bl	8014f14 <MoblePalTimerStop>
 801e5ba:	b162      	cbz	r2, 801e5d6 <BnrgmStackSetNodeIdentityState+0x72>
 801e5bc:	7011      	strb	r1, [r2, #0]
 801e5be:	e7d5      	b.n	801e56c <BnrgmStackSetNodeIdentityState+0x8>
 801e5c0:	f8d0 217c 	ldr.w	r2, [r0, #380]	@ 0x17c
 801e5c4:	4610      	mov	r0, r2
 801e5c6:	f7f6 fca5 	bl	8014f14 <MoblePalTimerStop>
 801e5ca:	2801      	cmp	r0, #1
 801e5cc:	d8cd      	bhi.n	801e56a <BnrgmStackSetNodeIdentityState+0x6>
 801e5ce:	f64e 2160 	movw	r1, #60000	@ 0xea60
 801e5d2:	4610      	mov	r0, r2
 801e5d4:	e7e6      	b.n	801e5a4 <BnrgmStackSetNodeIdentityState+0x40>
 801e5d6:	2103      	movs	r1, #3
 801e5d8:	e7c8      	b.n	801e56c <BnrgmStackSetNodeIdentityState+0x8>
 801e5da:	bf00      	nop
 801e5dc:	20000324 	.word	0x20000324
 801e5e0:	080150d1 	.word	0x080150d1

0801e5e4 <MobleStackConfigValidate>:
 801e5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5e6:	4b38      	ldr	r3, [pc, #224]	@ (801e6c8 <MobleStackConfigValidate+0xe4>)
 801e5e8:	4d38      	ldr	r5, [pc, #224]	@ (801e6cc <MobleStackConfigValidate+0xe8>)
 801e5ea:	2700      	movs	r7, #0
 801e5ec:	f883 7166 	strb.w	r7, [r3, #358]	@ 0x166
 801e5f0:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 801e5f4:	2201      	movs	r2, #1
 801e5f6:	6858      	ldr	r0, [r3, #4]
 801e5f8:	701a      	strb	r2, [r3, #0]
 801e5fa:	f7f8 fc5d 	bl	8016eb8 <MoblePalCryptoSetIvIndex>
 801e5fe:	2801      	cmp	r0, #1
 801e600:	4604      	mov	r4, r0
 801e602:	d85f      	bhi.n	801e6c4 <MobleStackConfigValidate+0xe0>
 801e604:	4e32      	ldr	r6, [pc, #200]	@ (801e6d0 <MobleStackConfigValidate+0xec>)
 801e606:	4b33      	ldr	r3, [pc, #204]	@ (801e6d4 <MobleStackConfigValidate+0xf0>)
 801e608:	f8d5 4680 	ldr.w	r4, [r5, #1664]	@ 0x680
 801e60c:	f8c5 3924 	str.w	r3, [r5, #2340]	@ 0x924
 801e610:	6873      	ldr	r3, [r6, #4]
 801e612:	f8c5 77dc 	str.w	r7, [r5, #2012]	@ 0x7dc
 801e616:	69db      	ldr	r3, [r3, #28]
 801e618:	60a7      	str	r7, [r4, #8]
 801e61a:	4798      	blx	r3
 801e61c:	7720      	strb	r0, [r4, #28]
 801e61e:	f8d5 0680 	ldr.w	r0, [r5, #1664]	@ 0x680
 801e622:	f7fb fd75 	bl	801a110 <MobleConfigNetworkSave>
 801e626:	2801      	cmp	r0, #1
 801e628:	4604      	mov	r4, r0
 801e62a:	d84b      	bhi.n	801e6c4 <MobleStackConfigValidate+0xe0>
 801e62c:	f8d5 0680 	ldr.w	r0, [r5, #1664]	@ 0x680
 801e630:	f7fb fc9c 	bl	8019f6c <MobleConfigSaveSeq>
 801e634:	2801      	cmp	r0, #1
 801e636:	4604      	mov	r4, r0
 801e638:	d844      	bhi.n	801e6c4 <MobleStackConfigValidate+0xe0>
 801e63a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801e63e:	f8d5 0858 	ldr.w	r0, [r5, #2136]	@ 0x858
 801e642:	f8a5 385c 	strh.w	r3, [r5, #2140]	@ 0x85c
 801e646:	f7f9 fc25 	bl	8017e94 <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801e64a:	2801      	cmp	r0, #1
 801e64c:	4604      	mov	r4, r0
 801e64e:	d839      	bhi.n	801e6c4 <MobleStackConfigValidate+0xe0>
 801e650:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801e654:	f8d5 0860 	ldr.w	r0, [r5, #2144]	@ 0x860
 801e658:	f8a5 3864 	strh.w	r3, [r5, #2148]	@ 0x864
 801e65c:	f7f9 fc1a 	bl	8017e94 <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801e660:	2801      	cmp	r0, #1
 801e662:	4604      	mov	r4, r0
 801e664:	d82e      	bhi.n	801e6c4 <MobleStackConfigValidate+0xe0>
 801e666:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 801e66a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801e66e:	2b01      	cmp	r3, #1
 801e670:	d109      	bne.n	801e686 <MobleStackConfigValidate+0xa2>
 801e672:	f7e6 fd93 	bl	800519c <BLEMesh_ProvisionCallback>
 801e676:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 801e67a:	f505 60d0 	add.w	r0, r5, #1664	@ 0x680
 801e67e:	f883 7039 	strb.w	r7, [r3, #57]	@ 0x39
 801e682:	f7fb fd01 	bl	801a088 <MobleApplicationInit>
 801e686:	4814      	ldr	r0, [pc, #80]	@ (801e6d8 <MobleStackConfigValidate+0xf4>)
 801e688:	2101      	movs	r1, #1
 801e68a:	f7fd fc24 	bl	801bed6 <MobleProvisionUpdateRole>
 801e68e:	f7ff ff69 	bl	801e564 <BnrgmStackSetNodeIdentityState>
 801e692:	2801      	cmp	r0, #1
 801e694:	4604      	mov	r4, r0
 801e696:	d815      	bhi.n	801e6c4 <MobleStackConfigValidate+0xe0>
 801e698:	f7f6 fdec 	bl	8015274 <MoblePalBluetoothGetConnectionState>
 801e69c:	2802      	cmp	r0, #2
 801e69e:	d011      	beq.n	801e6c4 <MobleStackConfigValidate+0xe0>
 801e6a0:	480d      	ldr	r0, [pc, #52]	@ (801e6d8 <MobleStackConfigValidate+0xf4>)
 801e6a2:	2101      	movs	r1, #1
 801e6a4:	f7fb ff3c 	bl	801a520 <BnrgmStackSetDummyProxyModeState>
 801e6a8:	2801      	cmp	r0, #1
 801e6aa:	4604      	mov	r4, r0
 801e6ac:	d80a      	bhi.n	801e6c4 <MobleStackConfigValidate+0xe0>
 801e6ae:	f896 30bf 	ldrb.w	r3, [r6, #191]	@ 0xbf
 801e6b2:	2b02      	cmp	r3, #2
 801e6b4:	d006      	beq.n	801e6c4 <MobleStackConfigValidate+0xe0>
 801e6b6:	f895 3854 	ldrb.w	r3, [r5, #2132]	@ 0x854
 801e6ba:	2b01      	cmp	r3, #1
 801e6bc:	d102      	bne.n	801e6c4 <MobleStackConfigValidate+0xe0>
 801e6be:	2000      	movs	r0, #0
 801e6c0:	f7fe f87c 	bl	801c7bc <BnrgmTransmitSetAutoScanState>
 801e6c4:	4620      	mov	r0, r4
 801e6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e6c8:	20003f64 	.word	0x20003f64
 801e6cc:	2000141c 	.word	0x2000141c
 801e6d0:	20000324 	.word	0x20000324
 801e6d4:	1ee62800 	.word	0x1ee62800
 801e6d8:	20001a9c 	.word	0x20001a9c

0801e6dc <MobleProvision_UnprovisionedNode_CompleteOperation>:
 801e6dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801e6e0:	4c91      	ldr	r4, [pc, #580]	@ (801e928 <MobleProvision_UnprovisionedNode_CompleteOperation+0x24c>)
 801e6e2:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	@ 0xa0c
 801e6e6:	f893 21a8 	ldrb.w	r2, [r3, #424]	@ 0x1a8
 801e6ea:	b122      	cbz	r2, 801e6f6 <MobleProvision_UnprovisionedNode_CompleteOperation+0x1a>
 801e6ec:	2207      	movs	r2, #7
 801e6ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801e6f2:	2200      	movs	r2, #0
 801e6f4:	e01c      	b.n	801e730 <MobleProvision_UnprovisionedNode_CompleteOperation+0x54>
 801e6f6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801e6fa:	2a07      	cmp	r2, #7
 801e6fc:	d82d      	bhi.n	801e75a <MobleProvision_UnprovisionedNode_CompleteOperation+0x7e>
 801e6fe:	a101      	add	r1, pc, #4	@ (adr r1, 801e704 <MobleProvision_UnprovisionedNode_CompleteOperation+0x28>)
 801e700:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e704:	0801e725 	.word	0x0801e725
 801e708:	0801e737 	.word	0x0801e737
 801e70c:	0801e847 	.word	0x0801e847
 801e710:	0801e83f 	.word	0x0801e83f
 801e714:	0801e855 	.word	0x0801e855
 801e718:	0801e861 	.word	0x0801e861
 801e71c:	0801e75b 	.word	0x0801e75b
 801e720:	0801e6f3 	.word	0x0801e6f3
 801e724:	f893 1045 	ldrb.w	r1, [r3, #69]	@ 0x45
 801e728:	2201      	movs	r2, #1
 801e72a:	2900      	cmp	r1, #0
 801e72c:	f040 8088 	bne.w	801e840 <MobleProvision_UnprovisionedNode_CompleteOperation+0x164>
 801e730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801e734:	e011      	b.n	801e75a <MobleProvision_UnprovisionedNode_CompleteOperation+0x7e>
 801e736:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 801e73a:	2a01      	cmp	r2, #1
 801e73c:	f200 80a7 	bhi.w	801e88e <MobleProvision_UnprovisionedNode_CompleteOperation+0x1b2>
 801e740:	3201      	adds	r2, #1
 801e742:	b2d2      	uxtb	r2, r2
 801e744:	2a02      	cmp	r2, #2
 801e746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801e74a:	d106      	bne.n	801e75a <MobleProvision_UnprovisionedNode_CompleteOperation+0x7e>
 801e74c:	f8d4 26f0 	ldr.w	r2, [r4, #1776]	@ 0x6f0
 801e750:	f892 21fa 	ldrb.w	r2, [r2, #506]	@ 0x1fa
 801e754:	2a00      	cmp	r2, #0
 801e756:	f040 809a 	bne.w	801e88e <MobleProvision_UnprovisionedNode_CompleteOperation+0x1b2>
 801e75a:	b002      	add	sp, #8
 801e75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e760:	fba3 5807 	umull	r5, r8, r3, r7
 801e764:	fb07 8801 	mla	r8, r7, r1, r8
 801e768:	f7f6 fde6 	bl	8015338 <MoblePalBluetoothRandom>
 801e76c:	fbb0 f3f7 	udiv	r3, r0, r7
 801e770:	fb03 0017 	mls	r0, r3, r7, r0
 801e774:	b2c0      	uxtb	r0, r0
 801e776:	1e43      	subs	r3, r0, #1
 801e778:	2b08      	cmp	r3, #8
 801e77a:	d8f5      	bhi.n	801e768 <MobleProvision_UnprovisionedNode_CompleteOperation+0x8c>
 801e77c:	1943      	adds	r3, r0, r5
 801e77e:	f148 0100 	adc.w	r1, r8, #0
 801e782:	3601      	adds	r6, #1
 801e784:	e9cd 3100 	strd	r3, r1, [sp]
 801e788:	f8d4 26f0 	ldr.w	r2, [r4, #1776]	@ 0x6f0
 801e78c:	f892 51fd 	ldrb.w	r5, [r2, #509]	@ 0x1fd
 801e790:	b2f0      	uxtb	r0, r6
 801e792:	4285      	cmp	r5, r0
 801e794:	d8e4      	bhi.n	801e760 <MobleProvision_UnprovisionedNode_CompleteOperation+0x84>
 801e796:	2300      	movs	r3, #0
 801e798:	f8c2 3270 	str.w	r3, [r2, #624]	@ 0x270
 801e79c:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274
 801e7a0:	466b      	mov	r3, sp
 801e7a2:	cb03      	ldmia	r3!, {r0, r1}
 801e7a4:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
 801e7a8:	f8c2 126c 	str.w	r1, [r2, #620]	@ 0x26c
 801e7ac:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	@ 0x6f0
 801e7b0:	f890 11fd 	ldrb.w	r1, [r0, #509]	@ 0x1fd
 801e7b4:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 801e7b8:	f880 1278 	strb.w	r1, [r0, #632]	@ 0x278
 801e7bc:	f500 701a 	add.w	r0, r0, #616	@ 0x268
 801e7c0:	4798      	blx	r3
 801e7c2:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801e7c6:	f893 21fb 	ldrb.w	r2, [r3, #507]	@ 0x1fb
 801e7ca:	2a03      	cmp	r2, #3
 801e7cc:	d11a      	bne.n	801e804 <MobleProvision_UnprovisionedNode_CompleteOperation+0x128>
 801e7ce:	f8d3 2298 	ldr.w	r2, [r3, #664]	@ 0x298
 801e7d2:	b1ba      	cbz	r2, 801e804 <MobleProvision_UnprovisionedNode_CompleteOperation+0x128>
 801e7d4:	f893 01fd 	ldrb.w	r0, [r3, #509]	@ 0x1fd
 801e7d8:	4790      	blx	r2
 801e7da:	4601      	mov	r1, r0
 801e7dc:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	@ 0x6f0
 801e7e0:	f890 21fc 	ldrb.w	r2, [r0, #508]	@ 0x1fc
 801e7e4:	2a03      	cmp	r2, #3
 801e7e6:	bf14      	ite	ne
 801e7e8:	f890 21fd 	ldrbne.w	r2, [r0, #509]	@ 0x1fd
 801e7ec:	2202      	moveq	r2, #2
 801e7ee:	f880 2278 	strb.w	r2, [r0, #632]	@ 0x278
 801e7f2:	f500 701a 	add.w	r0, r0, #616	@ 0x268
 801e7f6:	f008 f9d1 	bl	8026b9c <memmove>
 801e7fa:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	@ 0xa0c
 801e7fe:	2203      	movs	r2, #3
 801e800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801e804:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	@ 0x6f0
 801e808:	f890 31fb 	ldrb.w	r3, [r0, #507]	@ 0x1fb
 801e80c:	2b01      	cmp	r3, #1
 801e80e:	d1a4      	bne.n	801e75a <MobleProvision_UnprovisionedNode_CompleteOperation+0x7e>
 801e810:	f890 227e 	ldrb.w	r2, [r0, #638]	@ 0x27e
 801e814:	f880 2278 	strb.w	r2, [r0, #632]	@ 0x278
 801e818:	f200 217f 	addw	r1, r0, #639	@ 0x27f
 801e81c:	f500 701a 	add.w	r0, r0, #616	@ 0x268
 801e820:	b002      	add	sp, #8
 801e822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e826:	f008 b9b9 	b.w	8026b9c <memmove>
 801e82a:	2600      	movs	r6, #0
 801e82c:	4633      	mov	r3, r6
 801e82e:	4631      	mov	r1, r6
 801e830:	270a      	movs	r7, #10
 801e832:	e7a7      	b.n	801e784 <MobleProvision_UnprovisionedNode_CompleteOperation+0xa8>
 801e834:	2b24      	cmp	r3, #36	@ 0x24
 801e836:	bf94      	ite	ls
 801e838:	3357      	addls	r3, #87	@ 0x57
 801e83a:	331d      	addhi	r3, #29
 801e83c:	e057      	b.n	801e8ee <MobleProvision_UnprovisionedNode_CompleteOperation+0x212>
 801e83e:	2202      	movs	r2, #2
 801e840:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 801e844:	e789      	b.n	801e75a <MobleProvision_UnprovisionedNode_CompleteOperation+0x7e>
 801e846:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 801e84a:	b90a      	cbnz	r2, 801e850 <MobleProvision_UnprovisionedNode_CompleteOperation+0x174>
 801e84c:	2201      	movs	r2, #1
 801e84e:	e76f      	b.n	801e730 <MobleProvision_UnprovisionedNode_CompleteOperation+0x54>
 801e850:	2204      	movs	r2, #4
 801e852:	e7f5      	b.n	801e840 <MobleProvision_UnprovisionedNode_CompleteOperation+0x164>
 801e854:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 801e858:	2a00      	cmp	r2, #0
 801e85a:	d0f7      	beq.n	801e84c <MobleProvision_UnprovisionedNode_CompleteOperation+0x170>
 801e85c:	2205      	movs	r2, #5
 801e85e:	e7ef      	b.n	801e840 <MobleProvision_UnprovisionedNode_CompleteOperation+0x164>
 801e860:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 801e864:	2a00      	cmp	r2, #0
 801e866:	d0f1      	beq.n	801e84c <MobleProvision_UnprovisionedNode_CompleteOperation+0x170>
 801e868:	2206      	movs	r2, #6
 801e86a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 801e86e:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801e872:	681b      	ldr	r3, [r3, #0]
 801e874:	2201      	movs	r2, #1
 801e876:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 801e87a:	f7ff feb3 	bl	801e5e4 <MobleStackConfigValidate>
 801e87e:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	@ 0x6f0
 801e882:	2104      	movs	r1, #4
 801e884:	b002      	add	sp, #8
 801e886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e88a:	f7fe bfab 	b.w	801d7e4 <MobleStackFSM>
 801e88e:	2202      	movs	r2, #2
 801e890:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 801e894:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801e898:	f893 21fb 	ldrb.w	r2, [r3, #507]	@ 0x1fb
 801e89c:	2a02      	cmp	r2, #2
 801e89e:	d190      	bne.n	801e7c2 <MobleProvision_UnprovisionedNode_CompleteOperation+0xe6>
 801e8a0:	f8d3 2294 	ldr.w	r2, [r3, #660]	@ 0x294
 801e8a4:	2a00      	cmp	r2, #0
 801e8a6:	d08c      	beq.n	801e7c2 <MobleProvision_UnprovisionedNode_CompleteOperation+0xe6>
 801e8a8:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 801e8ac:	2b03      	cmp	r3, #3
 801e8ae:	d9bc      	bls.n	801e82a <MobleProvision_UnprovisionedNode_CompleteOperation+0x14e>
 801e8b0:	2b04      	cmp	r3, #4
 801e8b2:	f47f af7b 	bne.w	801e7ac <MobleProvision_UnprovisionedNode_CompleteOperation+0xd0>
 801e8b6:	2500      	movs	r5, #0
 801e8b8:	263e      	movs	r6, #62	@ 0x3e
 801e8ba:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801e8be:	f893 2278 	ldrb.w	r2, [r3, #632]	@ 0x278
 801e8c2:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 801e8c6:	429a      	cmp	r2, r3
 801e8c8:	f4bf af70 	bcs.w	801e7ac <MobleProvision_UnprovisionedNode_CompleteOperation+0xd0>
 801e8cc:	4668      	mov	r0, sp
 801e8ce:	e9cd 5500 	strd	r5, r5, [sp]
 801e8d2:	f7f4 f986 	bl	8012be2 <hci_le_rand>
 801e8d6:	4669      	mov	r1, sp
 801e8d8:	2208      	movs	r2, #8
 801e8da:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e8de:	fbb3 f0f6 	udiv	r0, r3, r6
 801e8e2:	fb06 3310 	mls	r3, r6, r0, r3
 801e8e6:	b2db      	uxtb	r3, r3
 801e8e8:	2b0a      	cmp	r3, #10
 801e8ea:	d8a3      	bhi.n	801e834 <MobleProvision_UnprovisionedNode_CompleteOperation+0x158>
 801e8ec:	3330      	adds	r3, #48	@ 0x30
 801e8ee:	b2db      	uxtb	r3, r3
 801e8f0:	3a01      	subs	r2, #1
 801e8f2:	f801 3c01 	strb.w	r3, [r1, #-1]
 801e8f6:	d1f0      	bne.n	801e8da <MobleProvision_UnprovisionedNode_CompleteOperation+0x1fe>
 801e8f8:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801e8fc:	f893 0278 	ldrb.w	r0, [r3, #632]	@ 0x278
 801e900:	f893 21fd 	ldrb.w	r2, [r3, #509]	@ 0x1fd
 801e904:	1a12      	subs	r2, r2, r0
 801e906:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 801e90a:	2a08      	cmp	r2, #8
 801e90c:	bfa8      	it	ge
 801e90e:	2208      	movge	r2, #8
 801e910:	4418      	add	r0, r3
 801e912:	4669      	mov	r1, sp
 801e914:	f008 f942 	bl	8026b9c <memmove>
 801e918:	f8d4 26f0 	ldr.w	r2, [r4, #1776]	@ 0x6f0
 801e91c:	f892 3278 	ldrb.w	r3, [r2, #632]	@ 0x278
 801e920:	3308      	adds	r3, #8
 801e922:	f882 3278 	strb.w	r3, [r2, #632]	@ 0x278
 801e926:	e7c8      	b.n	801e8ba <MobleProvision_UnprovisionedNode_CompleteOperation+0x1de>
 801e928:	20002514 	.word	0x20002514

0801e92c <MobleProvision_CompleteOperation>:
 801e92c:	b908      	cbnz	r0, 801e932 <MobleProvision_CompleteOperation+0x6>
 801e92e:	f7fe bca1 	b.w	801d274 <MobleProvision_ProvisionerNode_CompleteOperation>
 801e932:	f7ff bed3 	b.w	801e6dc <MobleProvision_UnprovisionedNode_CompleteOperation>

0801e936 <Test_UpperTester_Set11>:
 801e936:	b510      	push	{r4, lr}
 801e938:	780b      	ldrb	r3, [r1, #0]
 801e93a:	3b30      	subs	r3, #48	@ 0x30
 801e93c:	2b01      	cmp	r3, #1
 801e93e:	4604      	mov	r4, r0
 801e940:	d80d      	bhi.n	801e95e <Test_UpperTester_Set11+0x28>
 801e942:	2101      	movs	r1, #1
 801e944:	2000      	movs	r0, #0
 801e946:	f7f7 fccb 	bl	80162e0 <MoblePalCryptoSetNodeIdntyState>
 801e94a:	2101      	movs	r1, #1
 801e94c:	4608      	mov	r0, r1
 801e94e:	f7f7 fcc7 	bl	80162e0 <MoblePalCryptoSetNodeIdntyState>
 801e952:	2101      	movs	r1, #1
 801e954:	4620      	mov	r0, r4
 801e956:	f7ff fe05 	bl	801e564 <BnrgmStackSetNodeIdentityState>
 801e95a:	2000      	movs	r0, #0
 801e95c:	bd10      	pop	{r4, pc}
 801e95e:	2003      	movs	r0, #3
 801e960:	e7fc      	b.n	801e95c <Test_UpperTester_Set11+0x26>
	...

0801e964 <ModelConfigUpdateKRState>:
 801e964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e966:	4e25      	ldr	r6, [pc, #148]	@ (801e9fc <ModelConfigUpdateKRState+0x98>)
 801e968:	4b25      	ldr	r3, [pc, #148]	@ (801ea00 <ModelConfigUpdateKRState+0x9c>)
 801e96a:	440e      	add	r6, r1
 801e96c:	227c      	movs	r2, #124	@ 0x7c
 801e96e:	fb02 3301 	mla	r3, r2, r1, r3
 801e972:	f896 40c0 	ldrb.w	r4, [r6, #192]	@ 0xc0
 801e976:	4605      	mov	r5, r0
 801e978:	460f      	mov	r7, r1
 801e97a:	f8b3 0448 	ldrh.w	r0, [r3, #1096]	@ 0x448
 801e97e:	b99c      	cbnz	r4, 801e9a8 <ModelConfigUpdateKRState+0x44>
 801e980:	f7f7 fc60 	bl	8016244 <MoblePalCryptoHasNewNetworkKey>
 801e984:	2801      	cmp	r0, #1
 801e986:	d108      	bne.n	801e99a <ModelConfigUpdateKRState+0x36>
 801e988:	b3b5      	cbz	r5, 801e9f8 <ModelConfigUpdateKRState+0x94>
 801e98a:	1e6b      	subs	r3, r5, #1
 801e98c:	2b01      	cmp	r3, #1
 801e98e:	d831      	bhi.n	801e9f4 <ModelConfigUpdateKRState+0x90>
 801e990:	f886 50c0 	strb.w	r5, [r6, #192]	@ 0xc0
 801e994:	f7fd f802 	bl	801b99c <BnrgmFrndMgmtSendSecurityUpdate>
 801e998:	e004      	b.n	801e9a4 <ModelConfigUpdateKRState+0x40>
 801e99a:	3d01      	subs	r5, #1
 801e99c:	2d01      	cmp	r5, #1
 801e99e:	bf8c      	ite	hi
 801e9a0:	2401      	movhi	r4, #1
 801e9a2:	2402      	movls	r4, #2
 801e9a4:	4620      	mov	r0, r4
 801e9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e9a8:	2c01      	cmp	r4, #1
 801e9aa:	d110      	bne.n	801e9ce <ModelConfigUpdateKRState+0x6a>
 801e9ac:	b325      	cbz	r5, 801e9f8 <ModelConfigUpdateKRState+0x94>
 801e9ae:	2d03      	cmp	r5, #3
 801e9b0:	f886 50c0 	strb.w	r5, [r6, #192]	@ 0xc0
 801e9b4:	d107      	bne.n	801e9c6 <ModelConfigUpdateKRState+0x62>
 801e9b6:	f7f9 f80d 	bl	80179d4 <MoblePalCryptoSwitchKeys>
 801e9ba:	4638      	mov	r0, r7
 801e9bc:	f7fd f92c 	bl	801bc18 <BnrgmFrndMgmtSwitchKeys>
 801e9c0:	2300      	movs	r3, #0
 801e9c2:	f886 30c0 	strb.w	r3, [r6, #192]	@ 0xc0
 801e9c6:	f7fc ffe9 	bl	801b99c <BnrgmFrndMgmtSendSecurityUpdate>
 801e9ca:	2400      	movs	r4, #0
 801e9cc:	e7ea      	b.n	801e9a4 <ModelConfigUpdateKRState+0x40>
 801e9ce:	2c02      	cmp	r4, #2
 801e9d0:	d1fb      	bne.n	801e9ca <ModelConfigUpdateKRState+0x66>
 801e9d2:	2d03      	cmp	r5, #3
 801e9d4:	d10a      	bne.n	801e9ec <ModelConfigUpdateKRState+0x88>
 801e9d6:	f886 50c0 	strb.w	r5, [r6, #192]	@ 0xc0
 801e9da:	f7f8 fffb 	bl	80179d4 <MoblePalCryptoSwitchKeys>
 801e9de:	2400      	movs	r4, #0
 801e9e0:	4638      	mov	r0, r7
 801e9e2:	f7fd f919 	bl	801bc18 <BnrgmFrndMgmtSwitchKeys>
 801e9e6:	f886 40c0 	strb.w	r4, [r6, #192]	@ 0xc0
 801e9ea:	e7d3      	b.n	801e994 <ModelConfigUpdateKRState+0x30>
 801e9ec:	2d02      	cmp	r5, #2
 801e9ee:	bf08      	it	eq
 801e9f0:	2401      	moveq	r4, #1
 801e9f2:	e7d7      	b.n	801e9a4 <ModelConfigUpdateKRState+0x40>
 801e9f4:	4604      	mov	r4, r0
 801e9f6:	e7d5      	b.n	801e9a4 <ModelConfigUpdateKRState+0x40>
 801e9f8:	2402      	movs	r4, #2
 801e9fa:	e7d3      	b.n	801e9a4 <ModelConfigUpdateKRState+0x40>
 801e9fc:	20000324 	.word	0x20000324
 801ea00:	2000141c 	.word	0x2000141c

0801ea04 <MobleStackProcessBeacon>:
 801ea04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea08:	ed2d 8b02 	vpush	{d8}
 801ea0c:	b08f      	sub	sp, #60	@ 0x3c
 801ea0e:	ee08 2a10 	vmov	s16, r2
 801ea12:	9304      	str	r3, [sp, #16]
 801ea14:	f1a1 0313 	sub.w	r3, r1, #19
 801ea18:	2b04      	cmp	r3, #4
 801ea1a:	4607      	mov	r7, r0
 801ea1c:	f200 80e6 	bhi.w	801ebec <MobleStackProcessBeacon+0x1e8>
 801ea20:	7805      	ldrb	r5, [r0, #0]
 801ea22:	b955      	cbnz	r5, 801ea3a <MobleStackProcessBeacon+0x36>
 801ea24:	9b04      	ldr	r3, [sp, #16]
 801ea26:	9301      	str	r3, [sp, #4]
 801ea28:	3701      	adds	r7, #1
 801ea2a:	9502      	str	r5, [sp, #8]
 801ea2c:	9700      	str	r7, [sp, #0]
 801ea2e:	462b      	mov	r3, r5
 801ea30:	4629      	mov	r1, r5
 801ea32:	4870      	ldr	r0, [pc, #448]	@ (801ebf4 <MobleStackProcessBeacon+0x1f0>)
 801ea34:	f7fb fddb 	bl	801a5ee <BLEMesh_UpdateNeighbors>
 801ea38:	e026      	b.n	801ea88 <MobleStackProcessBeacon+0x84>
 801ea3a:	2d01      	cmp	r5, #1
 801ea3c:	f040 80d8 	bne.w	801ebf0 <MobleStackProcessBeacon+0x1ec>
 801ea40:	2916      	cmp	r1, #22
 801ea42:	f040 80d5 	bne.w	801ebf0 <MobleStackProcessBeacon+0x1ec>
 801ea46:	f100 0a02 	add.w	sl, r0, #2
 801ea4a:	2108      	movs	r1, #8
 801ea4c:	4650      	mov	r0, sl
 801ea4e:	f7f7 fe2f 	bl	80166b0 <MoblePalCryptoGetSecurityKeys_Beacon>
 801ea52:	4604      	mov	r4, r0
 801ea54:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
 801ea56:	f7f8 ff89 	bl	801796c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 801ea5a:	f1b0 0800 	subs.w	r8, r0, #0
 801ea5e:	db13      	blt.n	801ea88 <MobleStackProcessBeacon+0x84>
 801ea60:	4b65      	ldr	r3, [pc, #404]	@ (801ebf8 <MobleStackProcessBeacon+0x1f4>)
 801ea62:	4443      	add	r3, r8
 801ea64:	fa5f f988 	uxtb.w	r9, r8
 801ea68:	f893 60c0 	ldrb.w	r6, [r3, #192]	@ 0xc0
 801ea6c:	2e01      	cmp	r6, #1
 801ea6e:	d011      	beq.n	801ea94 <MobleStackProcessBeacon+0x90>
 801ea70:	2e02      	cmp	r6, #2
 801ea72:	d030      	beq.n	801ead6 <MobleStackProcessBeacon+0xd2>
 801ea74:	2e00      	cmp	r6, #0
 801ea76:	d167      	bne.n	801eb48 <MobleStackProcessBeacon+0x144>
 801ea78:	2208      	movs	r2, #8
 801ea7a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801ea7e:	4650      	mov	r0, sl
 801ea80:	f008 f87c 	bl	8026b7c <memcmp>
 801ea84:	2800      	cmp	r0, #0
 801ea86:	d041      	beq.n	801eb0c <MobleStackProcessBeacon+0x108>
 801ea88:	4628      	mov	r0, r5
 801ea8a:	b00f      	add	sp, #60	@ 0x3c
 801ea8c:	ecbd 8b02 	vpop	{d8}
 801ea90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea94:	4b59      	ldr	r3, [pc, #356]	@ (801ebfc <MobleStackProcessBeacon+0x1f8>)
 801ea96:	227c      	movs	r2, #124	@ 0x7c
 801ea98:	fb02 3208 	mla	r2, r2, r8, r3
 801ea9c:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 801eaa0:	f892 2445 	ldrb.w	r2, [r2, #1093]	@ 0x445
 801eaa4:	2a01      	cmp	r2, #1
 801eaa6:	bf0c      	ite	eq
 801eaa8:	464c      	moveq	r4, r9
 801eaaa:	2400      	movne	r4, #0
 801eaac:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 801eab0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801eab4:	f10b 0128 	add.w	r1, fp, #40	@ 0x28
 801eab8:	2208      	movs	r2, #8
 801eaba:	4419      	add	r1, r3
 801eabc:	4650      	mov	r0, sl
 801eabe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801eac2:	f008 f85b 	bl	8026b7c <memcmp>
 801eac6:	2800      	cmp	r0, #0
 801eac8:	d053      	beq.n	801eb72 <MobleStackProcessBeacon+0x16e>
 801eaca:	4b4d      	ldr	r3, [pc, #308]	@ (801ec00 <MobleStackProcessBeacon+0x1fc>)
 801eacc:	f10b 0130 	add.w	r1, fp, #48	@ 0x30
 801ead0:	2208      	movs	r2, #8
 801ead2:	4419      	add	r1, r3
 801ead4:	e7d3      	b.n	801ea7e <MobleStackProcessBeacon+0x7a>
 801ead6:	4c49      	ldr	r4, [pc, #292]	@ (801ebfc <MobleStackProcessBeacon+0x1f8>)
 801ead8:	237c      	movs	r3, #124	@ 0x7c
 801eada:	fb03 4308 	mla	r3, r3, r8, r4
 801eade:	f204 4424 	addw	r4, r4, #1060	@ 0x424
 801eae2:	f893 2446 	ldrb.w	r2, [r3, #1094]	@ 0x446
 801eae6:	9305      	str	r3, [sp, #20]
 801eae8:	2a01      	cmp	r2, #1
 801eaea:	bf0c      	ite	eq
 801eaec:	464e      	moveq	r6, r9
 801eaee:	2600      	movne	r6, #0
 801eaf0:	ebc6 1646 	rsb	r6, r6, r6, lsl #5
 801eaf4:	00b6      	lsls	r6, r6, #2
 801eaf6:	f106 0130 	add.w	r1, r6, #48	@ 0x30
 801eafa:	2208      	movs	r2, #8
 801eafc:	4421      	add	r1, r4
 801eafe:	4650      	mov	r0, sl
 801eb00:	f008 f83c 	bl	8026b7c <memcmp>
 801eb04:	9b05      	ldr	r3, [sp, #20]
 801eb06:	bb08      	cbnz	r0, 801eb4c <MobleStackProcessBeacon+0x148>
 801eb08:	4434      	add	r4, r6
 801eb0a:	462e      	mov	r6, r5
 801eb0c:	2300      	movs	r3, #0
 801eb0e:	787d      	ldrb	r5, [r7, #1]
 801eb10:	930c      	str	r3, [sp, #48]	@ 0x30
 801eb12:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 801eb16:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801eb1a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801eb1e:	f88d 5028 	strb.w	r5, [sp, #40]	@ 0x28
 801eb22:	b346      	cbz	r6, 801eb76 <MobleStackProcessBeacon+0x172>
 801eb24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801eb26:	f8cd 3029 	str.w	r3, [sp, #41]	@ 0x29
 801eb2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801eb2c:	f8cd 302d 	str.w	r3, [sp, #45]	@ 0x2d
 801eb30:	f8d7 300a 	ldr.w	r3, [r7, #10]
 801eb34:	f8cd 3031 	str.w	r3, [sp, #49]	@ 0x31
 801eb38:	220d      	movs	r2, #13
 801eb3a:	4633      	mov	r3, r6
 801eb3c:	a90a      	add	r1, sp, #40	@ 0x28
 801eb3e:	a808      	add	r0, sp, #32
 801eb40:	f7f8 f9e8 	bl	8016f14 <MoblePalCryptoAuthenticateSecureNetworkBeacon>
 801eb44:	2801      	cmp	r0, #1
 801eb46:	d91b      	bls.n	801eb80 <MobleStackProcessBeacon+0x17c>
 801eb48:	2502      	movs	r5, #2
 801eb4a:	e79d      	b.n	801ea88 <MobleStackProcessBeacon+0x84>
 801eb4c:	f893 3445 	ldrb.w	r3, [r3, #1093]	@ 0x445
 801eb50:	2b01      	cmp	r3, #1
 801eb52:	bf0c      	ite	eq
 801eb54:	464e      	moveq	r6, r9
 801eb56:	2600      	movne	r6, #0
 801eb58:	ebc6 1646 	rsb	r6, r6, r6, lsl #5
 801eb5c:	00b6      	lsls	r6, r6, #2
 801eb5e:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 801eb62:	2208      	movs	r2, #8
 801eb64:	4421      	add	r1, r4
 801eb66:	4650      	mov	r0, sl
 801eb68:	f008 f808 	bl	8026b7c <memcmp>
 801eb6c:	2800      	cmp	r0, #0
 801eb6e:	d18b      	bne.n	801ea88 <MobleStackProcessBeacon+0x84>
 801eb70:	4434      	add	r4, r6
 801eb72:	4606      	mov	r6, r0
 801eb74:	e7ca      	b.n	801eb0c <MobleStackProcessBeacon+0x108>
 801eb76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801eb78:	f8cd 3029 	str.w	r3, [sp, #41]	@ 0x29
 801eb7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801eb7e:	e7d5      	b.n	801eb2c <MobleStackProcessBeacon+0x128>
 801eb80:	2208      	movs	r2, #8
 801eb82:	f107 010e 	add.w	r1, r7, #14
 801eb86:	a808      	add	r0, sp, #32
 801eb88:	f007 fff8 	bl	8026b7c <memcmp>
 801eb8c:	2800      	cmp	r0, #0
 801eb8e:	d1db      	bne.n	801eb48 <MobleStackProcessBeacon+0x144>
 801eb90:	9007      	str	r0, [sp, #28]
 801eb92:	aa07      	add	r2, sp, #28
 801eb94:	2104      	movs	r1, #4
 801eb96:	f107 000a 	add.w	r0, r7, #10
 801eb9a:	f7f9 fc59 	bl	8018450 <MobleInputStreamGetBigEndian>
 801eb9e:	9907      	ldr	r1, [sp, #28]
 801eba0:	464a      	mov	r2, r9
 801eba2:	4628      	mov	r0, r5
 801eba4:	f7fc ff86 	bl	801bab4 <MobleStackProcessIvFromBeacon>
 801eba8:	2801      	cmp	r0, #1
 801ebaa:	d8cd      	bhi.n	801eb48 <MobleStackProcessBeacon+0x144>
 801ebac:	2e01      	cmp	r6, #1
 801ebae:	d107      	bne.n	801ebc0 <MobleStackProcessBeacon+0x1bc>
 801ebb0:	4b11      	ldr	r3, [pc, #68]	@ (801ebf8 <MobleStackProcessBeacon+0x1f4>)
 801ebb2:	4443      	add	r3, r8
 801ebb4:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 801ebb8:	2b01      	cmp	r3, #1
 801ebba:	d00b      	beq.n	801ebd4 <MobleStackProcessBeacon+0x1d0>
 801ebbc:	2b02      	cmp	r3, #2
 801ebbe:	d010      	beq.n	801ebe2 <MobleStackProcessBeacon+0x1de>
 801ebc0:	9b04      	ldr	r3, [sp, #16]
 801ebc2:	2500      	movs	r5, #0
 801ebc4:	e9cd 5300 	strd	r5, r3, [sp]
 801ebc8:	2301      	movs	r3, #1
 801ebca:	ee18 2a10 	vmov	r2, s16
 801ebce:	9502      	str	r5, [sp, #8]
 801ebd0:	4619      	mov	r1, r3
 801ebd2:	e72e      	b.n	801ea32 <MobleStackProcessBeacon+0x2e>
 801ebd4:	07ea      	lsls	r2, r5, #31
 801ebd6:	4649      	mov	r1, r9
 801ebd8:	d506      	bpl.n	801ebe8 <MobleStackProcessBeacon+0x1e4>
 801ebda:	2002      	movs	r0, #2
 801ebdc:	f7ff fec2 	bl	801e964 <ModelConfigUpdateKRState>
 801ebe0:	e7ee      	b.n	801ebc0 <MobleStackProcessBeacon+0x1bc>
 801ebe2:	07eb      	lsls	r3, r5, #31
 801ebe4:	d4ec      	bmi.n	801ebc0 <MobleStackProcessBeacon+0x1bc>
 801ebe6:	4649      	mov	r1, r9
 801ebe8:	2003      	movs	r0, #3
 801ebea:	e7f7      	b.n	801ebdc <MobleStackProcessBeacon+0x1d8>
 801ebec:	2503      	movs	r5, #3
 801ebee:	e74b      	b.n	801ea88 <MobleStackProcessBeacon+0x84>
 801ebf0:	2500      	movs	r5, #0
 801ebf2:	e749      	b.n	801ea88 <MobleStackProcessBeacon+0x84>
 801ebf4:	20001a9c 	.word	0x20001a9c
 801ebf8:	20000324 	.word	0x20000324
 801ebfc:	2000141c 	.word	0x2000141c
 801ec00:	20001840 	.word	0x20001840

0801ec04 <MobleConfigModelAppBind>:
 801ec04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec08:	b930      	cbnz	r0, 801ec18 <MobleConfigModelAppBind+0x14>
 801ec0a:	4b2e      	ldr	r3, [pc, #184]	@ (801ecc4 <MobleConfigModelAppBind+0xc0>)
 801ec0c:	4a2e      	ldr	r2, [pc, #184]	@ (801ecc8 <MobleConfigModelAppBind+0xc4>)
 801ec0e:	482f      	ldr	r0, [pc, #188]	@ (801eccc <MobleConfigModelAppBind+0xc8>)
 801ec10:	f641 2129 	movw	r1, #6697	@ 0x1a29
 801ec14:	f007 f83e 	bl	8025c94 <__assert_func>
 801ec18:	6805      	ldr	r5, [r0, #0]
 801ec1a:	2000      	movs	r0, #0
 801ec1c:	f105 0620 	add.w	r6, r5, #32
 801ec20:	3534      	adds	r5, #52	@ 0x34
 801ec22:	f856 4f04 	ldr.w	r4, [r6, #4]!
 801ec26:	8827      	ldrh	r7, [r4, #0]
 801ec28:	428f      	cmp	r7, r1
 801ec2a:	d146      	bne.n	801ecba <MobleConfigModelAppBind+0xb6>
 801ec2c:	4928      	ldr	r1, [pc, #160]	@ (801ecd0 <MobleConfigModelAppBind+0xcc>)
 801ec2e:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 801ecd4 <MobleConfigModelAppBind+0xd0>
 801ec32:	890f      	ldrh	r7, [r1, #8]
 801ec34:	2500      	movs	r5, #0
 801ec36:	f04f 0e2c 	mov.w	lr, #44	@ 0x2c
 801ec3a:	b2e9      	uxtb	r1, r5
 801ec3c:	42b9      	cmp	r1, r7
 801ec3e:	d235      	bcs.n	801ecac <MobleConfigModelAppBind+0xa8>
 801ec40:	fb0e c601 	mla	r6, lr, r1, ip
 801ec44:	f896 85b8 	ldrb.w	r8, [r6, #1464]	@ 0x5b8
 801ec48:	f1b8 0f01 	cmp.w	r8, #1
 801ec4c:	d132      	bne.n	801ecb4 <MobleConfigModelAppBind+0xb0>
 801ec4e:	f8b6 65ba 	ldrh.w	r6, [r6, #1466]	@ 0x5ba
 801ec52:	429e      	cmp	r6, r3
 801ec54:	d12e      	bne.n	801ecb4 <MobleConfigModelAppBind+0xb0>
 801ec56:	eb04 0c01 	add.w	ip, r4, r1
 801ec5a:	4626      	mov	r6, r4
 801ec5c:	2500      	movs	r5, #0
 801ec5e:	f101 0ea0 	add.w	lr, r1, #160	@ 0xa0
 801ec62:	f89c 70a6 	ldrb.w	r7, [ip, #166]	@ 0xa6
 801ec66:	b98f      	cbnz	r7, 801ec8c <MobleConfigModelAppBind+0x88>
 801ec68:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 801ec6a:	4282      	cmp	r2, r0
 801ec6c:	d120      	bne.n	801ecb0 <MobleConfigModelAppBind+0xac>
 801ec6e:	2238      	movs	r2, #56	@ 0x38
 801ec70:	fb02 4205 	mla	r2, r2, r5, r4
 801ec74:	440a      	add	r2, r1
 801ec76:	2001      	movs	r0, #1
 801ec78:	f882 00a6 	strb.w	r0, [r2, #166]	@ 0xa6
 801ec7c:	221c      	movs	r2, #28
 801ec7e:	fb02 1205 	mla	r2, r2, r5, r1
 801ec82:	3250      	adds	r2, #80	@ 0x50
 801ec84:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 801ec88:	2000      	movs	r0, #0
 801ec8a:	e00f      	b.n	801ecac <MobleConfigModelAppBind+0xa8>
 801ec8c:	2f01      	cmp	r7, #1
 801ec8e:	d10f      	bne.n	801ecb0 <MobleConfigModelAppBind+0xac>
 801ec90:	6fb7      	ldr	r7, [r6, #120]	@ 0x78
 801ec92:	42ba      	cmp	r2, r7
 801ec94:	d103      	bne.n	801ec9e <MobleConfigModelAppBind+0x9a>
 801ec96:	f83c 700e 	ldrh.w	r7, [ip, lr]
 801ec9a:	429f      	cmp	r7, r3
 801ec9c:	d0f4      	beq.n	801ec88 <MobleConfigModelAppBind+0x84>
 801ec9e:	3501      	adds	r5, #1
 801eca0:	2d0b      	cmp	r5, #11
 801eca2:	f10c 0c38 	add.w	ip, ip, #56	@ 0x38
 801eca6:	f106 0638 	add.w	r6, r6, #56	@ 0x38
 801ecaa:	d1da      	bne.n	801ec62 <MobleConfigModelAppBind+0x5e>
 801ecac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ecb0:	2002      	movs	r0, #2
 801ecb2:	e7f4      	b.n	801ec9e <MobleConfigModelAppBind+0x9a>
 801ecb4:	3501      	adds	r5, #1
 801ecb6:	2003      	movs	r0, #3
 801ecb8:	e7bf      	b.n	801ec3a <MobleConfigModelAppBind+0x36>
 801ecba:	42ae      	cmp	r6, r5
 801ecbc:	f04f 0003 	mov.w	r0, #3
 801ecc0:	d1af      	bne.n	801ec22 <MobleConfigModelAppBind+0x1e>
 801ecc2:	e7f3      	b.n	801ecac <MobleConfigModelAppBind+0xa8>
 801ecc4:	0802ea81 	.word	0x0802ea81
 801ecc8:	0802d54d 	.word	0x0802d54d
 801eccc:	0802e513 	.word	0x0802e513
 801ecd0:	20000008 	.word	0x20000008
 801ecd4:	2000141c 	.word	0x2000141c

0801ecd8 <MobleConfigModelAppUnBind>:
 801ecd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ecdc:	b930      	cbnz	r0, 801ecec <MobleConfigModelAppUnBind+0x14>
 801ecde:	4b30      	ldr	r3, [pc, #192]	@ (801eda0 <MobleConfigModelAppUnBind+0xc8>)
 801ece0:	4a30      	ldr	r2, [pc, #192]	@ (801eda4 <MobleConfigModelAppUnBind+0xcc>)
 801ece2:	4831      	ldr	r0, [pc, #196]	@ (801eda8 <MobleConfigModelAppUnBind+0xd0>)
 801ece4:	f641 2168 	movw	r1, #6760	@ 0x1a68
 801ece8:	f006 ffd4 	bl	8025c94 <__assert_func>
 801ecec:	6805      	ldr	r5, [r0, #0]
 801ecee:	2000      	movs	r0, #0
 801ecf0:	f105 0620 	add.w	r6, r5, #32
 801ecf4:	3534      	adds	r5, #52	@ 0x34
 801ecf6:	f856 4f04 	ldr.w	r4, [r6, #4]!
 801ecfa:	8827      	ldrh	r7, [r4, #0]
 801ecfc:	428f      	cmp	r7, r1
 801ecfe:	d149      	bne.n	801ed94 <MobleConfigModelAppUnBind+0xbc>
 801ed00:	492a      	ldr	r1, [pc, #168]	@ (801edac <MobleConfigModelAppUnBind+0xd4>)
 801ed02:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 801edb0 <MobleConfigModelAppUnBind+0xd8>
 801ed06:	890f      	ldrh	r7, [r1, #8]
 801ed08:	2500      	movs	r5, #0
 801ed0a:	f04f 0e2c 	mov.w	lr, #44	@ 0x2c
 801ed0e:	b2e9      	uxtb	r1, r5
 801ed10:	42b9      	cmp	r1, r7
 801ed12:	d225      	bcs.n	801ed60 <MobleConfigModelAppUnBind+0x88>
 801ed14:	fb0e c601 	mla	r6, lr, r1, ip
 801ed18:	f896 85b8 	ldrb.w	r8, [r6, #1464]	@ 0x5b8
 801ed1c:	f1b8 0f01 	cmp.w	r8, #1
 801ed20:	d135      	bne.n	801ed8e <MobleConfigModelAppUnBind+0xb6>
 801ed22:	f8b6 65ba 	ldrh.w	r6, [r6, #1466]	@ 0x5ba
 801ed26:	429e      	cmp	r6, r3
 801ed28:	d131      	bne.n	801ed8e <MobleConfigModelAppUnBind+0xb6>
 801ed2a:	eb04 0c01 	add.w	ip, r4, r1
 801ed2e:	4626      	mov	r6, r4
 801ed30:	2500      	movs	r5, #0
 801ed32:	f101 08a0 	add.w	r8, r1, #160	@ 0xa0
 801ed36:	f89c e0a6 	ldrb.w	lr, [ip, #166]	@ 0xa6
 801ed3a:	f1be 0f01 	cmp.w	lr, #1
 801ed3e:	d111      	bne.n	801ed64 <MobleConfigModelAppUnBind+0x8c>
 801ed40:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 801ed42:	4282      	cmp	r2, r0
 801ed44:	d11a      	bne.n	801ed7c <MobleConfigModelAppUnBind+0xa4>
 801ed46:	2338      	movs	r3, #56	@ 0x38
 801ed48:	fb03 4305 	mla	r3, r3, r5, r4
 801ed4c:	440b      	add	r3, r1
 801ed4e:	2000      	movs	r0, #0
 801ed50:	f883 00a6 	strb.w	r0, [r3, #166]	@ 0xa6
 801ed54:	231c      	movs	r3, #28
 801ed56:	fb03 1305 	mla	r3, r3, r5, r1
 801ed5a:	3350      	adds	r3, #80	@ 0x50
 801ed5c:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
 801ed60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed64:	f1be 0f00 	cmp.w	lr, #0
 801ed68:	d108      	bne.n	801ed7c <MobleConfigModelAppUnBind+0xa4>
 801ed6a:	6fb7      	ldr	r7, [r6, #120]	@ 0x78
 801ed6c:	42ba      	cmp	r2, r7
 801ed6e:	d106      	bne.n	801ed7e <MobleConfigModelAppUnBind+0xa6>
 801ed70:	f83c 7008 	ldrh.w	r7, [ip, r8]
 801ed74:	429f      	cmp	r7, r3
 801ed76:	d102      	bne.n	801ed7e <MobleConfigModelAppUnBind+0xa6>
 801ed78:	4670      	mov	r0, lr
 801ed7a:	e7f1      	b.n	801ed60 <MobleConfigModelAppUnBind+0x88>
 801ed7c:	2002      	movs	r0, #2
 801ed7e:	3501      	adds	r5, #1
 801ed80:	2d0b      	cmp	r5, #11
 801ed82:	f10c 0c38 	add.w	ip, ip, #56	@ 0x38
 801ed86:	f106 0638 	add.w	r6, r6, #56	@ 0x38
 801ed8a:	d1d4      	bne.n	801ed36 <MobleConfigModelAppUnBind+0x5e>
 801ed8c:	e7e8      	b.n	801ed60 <MobleConfigModelAppUnBind+0x88>
 801ed8e:	3501      	adds	r5, #1
 801ed90:	2003      	movs	r0, #3
 801ed92:	e7bc      	b.n	801ed0e <MobleConfigModelAppUnBind+0x36>
 801ed94:	42ae      	cmp	r6, r5
 801ed96:	f04f 0003 	mov.w	r0, #3
 801ed9a:	d1ac      	bne.n	801ecf6 <MobleConfigModelAppUnBind+0x1e>
 801ed9c:	e7e0      	b.n	801ed60 <MobleConfigModelAppUnBind+0x88>
 801ed9e:	bf00      	nop
 801eda0:	0802ea81 	.word	0x0802ea81
 801eda4:	0802d565 	.word	0x0802d565
 801eda8:	0802e513 	.word	0x0802e513
 801edac:	20000008 	.word	0x20000008
 801edb0:	2000141c 	.word	0x2000141c

0801edb4 <MobleConfigHealthModelAppBind>:
 801edb4:	b538      	push	{r3, r4, r5, lr}
 801edb6:	b930      	cbnz	r0, 801edc6 <MobleConfigHealthModelAppBind+0x12>
 801edb8:	4b16      	ldr	r3, [pc, #88]	@ (801ee14 <MobleConfigHealthModelAppBind+0x60>)
 801edba:	4a17      	ldr	r2, [pc, #92]	@ (801ee18 <MobleConfigHealthModelAppBind+0x64>)
 801edbc:	4817      	ldr	r0, [pc, #92]	@ (801ee1c <MobleConfigHealthModelAppBind+0x68>)
 801edbe:	f641 21a7 	movw	r1, #6823	@ 0x1aa7
 801edc2:	f006 ff67 	bl	8025c94 <__assert_func>
 801edc6:	6800      	ldr	r0, [r0, #0]
 801edc8:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 801edca:	8820      	ldrh	r0, [r4, #0]
 801edcc:	4288      	cmp	r0, r1
 801edce:	d11b      	bne.n	801ee08 <MobleConfigHealthModelAppBind+0x54>
 801edd0:	4913      	ldr	r1, [pc, #76]	@ (801ee20 <MobleConfigHealthModelAppBind+0x6c>)
 801edd2:	8908      	ldrh	r0, [r1, #8]
 801edd4:	b190      	cbz	r0, 801edfc <MobleConfigHealthModelAppBind+0x48>
 801edd6:	4913      	ldr	r1, [pc, #76]	@ (801ee24 <MobleConfigHealthModelAppBind+0x70>)
 801edd8:	f891 55b8 	ldrb.w	r5, [r1, #1464]	@ 0x5b8
 801eddc:	2d01      	cmp	r5, #1
 801edde:	d115      	bne.n	801ee0c <MobleConfigHealthModelAppBind+0x58>
 801ede0:	f8b1 15ba 	ldrh.w	r1, [r1, #1466]	@ 0x5ba
 801ede4:	4299      	cmp	r1, r3
 801ede6:	d111      	bne.n	801ee0c <MobleConfigHealthModelAppBind+0x58>
 801ede8:	f894 006c 	ldrb.w	r0, [r4, #108]	@ 0x6c
 801edec:	b938      	cbnz	r0, 801edfe <MobleConfigHealthModelAppBind+0x4a>
 801edee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801edf0:	4293      	cmp	r3, r2
 801edf2:	d10d      	bne.n	801ee10 <MobleConfigHealthModelAppBind+0x5c>
 801edf4:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 801edf8:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
 801edfc:	bd38      	pop	{r3, r4, r5, pc}
 801edfe:	3801      	subs	r0, #1
 801ee00:	bf18      	it	ne
 801ee02:	2001      	movne	r0, #1
 801ee04:	0040      	lsls	r0, r0, #1
 801ee06:	e7f9      	b.n	801edfc <MobleConfigHealthModelAppBind+0x48>
 801ee08:	2003      	movs	r0, #3
 801ee0a:	e7f7      	b.n	801edfc <MobleConfigHealthModelAppBind+0x48>
 801ee0c:	2000      	movs	r0, #0
 801ee0e:	e7f5      	b.n	801edfc <MobleConfigHealthModelAppBind+0x48>
 801ee10:	2002      	movs	r0, #2
 801ee12:	e7f3      	b.n	801edfc <MobleConfigHealthModelAppBind+0x48>
 801ee14:	0802ea81 	.word	0x0802ea81
 801ee18:	0802d57f 	.word	0x0802d57f
 801ee1c:	0802e513 	.word	0x0802e513
 801ee20:	20000008 	.word	0x20000008
 801ee24:	2000141c 	.word	0x2000141c

0801ee28 <MobleConfigHealthModelAppUnBind>:
 801ee28:	b510      	push	{r4, lr}
 801ee2a:	b930      	cbnz	r0, 801ee3a <MobleConfigHealthModelAppUnBind+0x12>
 801ee2c:	4b17      	ldr	r3, [pc, #92]	@ (801ee8c <MobleConfigHealthModelAppUnBind+0x64>)
 801ee2e:	4a18      	ldr	r2, [pc, #96]	@ (801ee90 <MobleConfigHealthModelAppUnBind+0x68>)
 801ee30:	4818      	ldr	r0, [pc, #96]	@ (801ee94 <MobleConfigHealthModelAppUnBind+0x6c>)
 801ee32:	f641 21da 	movw	r1, #6874	@ 0x1ada
 801ee36:	f006 ff2d 	bl	8025c94 <__assert_func>
 801ee3a:	6800      	ldr	r0, [r0, #0]
 801ee3c:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 801ee3e:	8820      	ldrh	r0, [r4, #0]
 801ee40:	4288      	cmp	r0, r1
 801ee42:	d11d      	bne.n	801ee80 <MobleConfigHealthModelAppUnBind+0x58>
 801ee44:	4914      	ldr	r1, [pc, #80]	@ (801ee98 <MobleConfigHealthModelAppUnBind+0x70>)
 801ee46:	8908      	ldrh	r0, [r1, #8]
 801ee48:	b1a0      	cbz	r0, 801ee74 <MobleConfigHealthModelAppUnBind+0x4c>
 801ee4a:	4914      	ldr	r1, [pc, #80]	@ (801ee9c <MobleConfigHealthModelAppUnBind+0x74>)
 801ee4c:	f891 05b8 	ldrb.w	r0, [r1, #1464]	@ 0x5b8
 801ee50:	2801      	cmp	r0, #1
 801ee52:	d117      	bne.n	801ee84 <MobleConfigHealthModelAppUnBind+0x5c>
 801ee54:	f8b1 15ba 	ldrh.w	r1, [r1, #1466]	@ 0x5ba
 801ee58:	4299      	cmp	r1, r3
 801ee5a:	d113      	bne.n	801ee84 <MobleConfigHealthModelAppUnBind+0x5c>
 801ee5c:	f894 006c 	ldrb.w	r0, [r4, #108]	@ 0x6c
 801ee60:	2801      	cmp	r0, #1
 801ee62:	d108      	bne.n	801ee76 <MobleConfigHealthModelAppUnBind+0x4e>
 801ee64:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 801ee66:	4293      	cmp	r3, r2
 801ee68:	d10e      	bne.n	801ee88 <MobleConfigHealthModelAppUnBind+0x60>
 801ee6a:	2000      	movs	r0, #0
 801ee6c:	f884 006c 	strb.w	r0, [r4, #108]	@ 0x6c
 801ee70:	f8a4 006a 	strh.w	r0, [r4, #106]	@ 0x6a
 801ee74:	bd10      	pop	{r4, pc}
 801ee76:	3800      	subs	r0, #0
 801ee78:	bf18      	it	ne
 801ee7a:	2001      	movne	r0, #1
 801ee7c:	0040      	lsls	r0, r0, #1
 801ee7e:	e7f9      	b.n	801ee74 <MobleConfigHealthModelAppUnBind+0x4c>
 801ee80:	2003      	movs	r0, #3
 801ee82:	e7f7      	b.n	801ee74 <MobleConfigHealthModelAppUnBind+0x4c>
 801ee84:	2000      	movs	r0, #0
 801ee86:	e7f5      	b.n	801ee74 <MobleConfigHealthModelAppUnBind+0x4c>
 801ee88:	2002      	movs	r0, #2
 801ee8a:	e7f3      	b.n	801ee74 <MobleConfigHealthModelAppUnBind+0x4c>
 801ee8c:	0802ea81 	.word	0x0802ea81
 801ee90:	0802d59d 	.word	0x0802d59d
 801ee94:	0802e513 	.word	0x0802e513
 801ee98:	20000008 	.word	0x20000008
 801ee9c:	2000141c 	.word	0x2000141c

0801eea0 <MobleConfigModel_KR_UseNewKeyDec>:
 801eea0:	4b04      	ldr	r3, [pc, #16]	@ (801eeb4 <MobleConfigModel_KR_UseNewKeyDec+0x14>)
 801eea2:	4418      	add	r0, r3
 801eea4:	f890 00c0 	ldrb.w	r0, [r0, #192]	@ 0xc0
 801eea8:	3801      	subs	r0, #1
 801eeaa:	2801      	cmp	r0, #1
 801eeac:	bf8c      	ite	hi
 801eeae:	2000      	movhi	r0, #0
 801eeb0:	2001      	movls	r0, #1
 801eeb2:	4770      	bx	lr
 801eeb4:	20000324 	.word	0x20000324

0801eeb8 <BnrgmFrndMgmtTranspSegRecvd>:
 801eeb8:	b508      	push	{r3, lr}
 801eeba:	4b06      	ldr	r3, [pc, #24]	@ (801eed4 <BnrgmFrndMgmtTranspSegRecvd+0x1c>)
 801eebc:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 801eec0:	2b02      	cmp	r3, #2
 801eec2:	d005      	beq.n	801eed0 <BnrgmFrndMgmtTranspSegRecvd+0x18>
 801eec4:	4b04      	ldr	r3, [pc, #16]	@ (801eed8 <BnrgmFrndMgmtTranspSegRecvd+0x20>)
 801eec6:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	@ 0xa04
 801eeca:	f7f1 fe03 	bl	8010ad4 <BnrgmFrndLpnTranspSegRecvd>
 801eece:	bd08      	pop	{r3, pc}
 801eed0:	2001      	movs	r0, #1
 801eed2:	e7fc      	b.n	801eece <BnrgmFrndMgmtTranspSegRecvd+0x16>
 801eed4:	20000324 	.word	0x20000324
 801eed8:	20002514 	.word	0x20002514

0801eedc <BnrgmFrndMgmtProcessNewPacket>:
 801eedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801eede:	f890 52b4 	ldrb.w	r5, [r0, #692]	@ 0x2b4
 801eee2:	9c06      	ldr	r4, [sp, #24]
 801eee4:	b915      	cbnz	r5, 801eeec <BnrgmFrndMgmtProcessNewPacket+0x10>
 801eee6:	2501      	movs	r5, #1
 801eee8:	f880 52b4 	strb.w	r5, [r0, #692]	@ 0x2b4
 801eeec:	f8b1 5040 	ldrh.w	r5, [r1, #64]	@ 0x40
 801eef0:	06ad      	lsls	r5, r5, #26
 801eef2:	d50a      	bpl.n	801ef0a <BnrgmFrndMgmtProcessNewPacket+0x2e>
 801eef4:	2a09      	cmp	r2, #9
 801eef6:	d848      	bhi.n	801ef8a <BnrgmFrndMgmtProcessNewPacket+0xae>
 801eef8:	1e55      	subs	r5, r2, #1
 801eefa:	2d01      	cmp	r5, #1
 801eefc:	d902      	bls.n	801ef04 <BnrgmFrndMgmtProcessNewPacket+0x28>
 801eefe:	1fd5      	subs	r5, r2, #7
 801ef00:	2d02      	cmp	r5, #2
 801ef02:	d86d      	bhi.n	801efe0 <BnrgmFrndMgmtProcessNewPacket+0x104>
 801ef04:	7bcd      	ldrb	r5, [r1, #15]
 801ef06:	2d00      	cmp	r5, #0
 801ef08:	d16a      	bne.n	801efe0 <BnrgmFrndMgmtProcessNewPacket+0x104>
 801ef0a:	2a08      	cmp	r2, #8
 801ef0c:	d83d      	bhi.n	801ef8a <BnrgmFrndMgmtProcessNewPacket+0xae>
 801ef0e:	f44f 75f5 	mov.w	r5, #490	@ 0x1ea
 801ef12:	40d5      	lsrs	r5, r2
 801ef14:	07ed      	lsls	r5, r5, #31
 801ef16:	d538      	bpl.n	801ef8a <BnrgmFrndMgmtProcessNewPacket+0xae>
 801ef18:	4d32      	ldr	r5, [pc, #200]	@ (801efe4 <BnrgmFrndMgmtProcessNewPacket+0x108>)
 801ef1a:	f895 50be 	ldrb.w	r5, [r5, #190]	@ 0xbe
 801ef1e:	2d01      	cmp	r5, #1
 801ef20:	d15c      	bne.n	801efdc <BnrgmFrndMgmtProcessNewPacket+0x100>
 801ef22:	3a01      	subs	r2, #1
 801ef24:	2a07      	cmp	r2, #7
 801ef26:	d85b      	bhi.n	801efe0 <BnrgmFrndMgmtProcessNewPacket+0x104>
 801ef28:	e8df f002 	tbb	[pc, r2]
 801ef2c:	5a0c5a04 	.word	0x5a0c5a04
 801ef30:	28211a13 	.word	0x28211a13
 801ef34:	4a2c      	ldr	r2, [pc, #176]	@ (801efe8 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 801ef36:	9400      	str	r4, [sp, #0]
 801ef38:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 801ef3c:	f004 fa9a 	bl	8023474 <BnrgmFrndFnProcessFrndPoll>
 801ef40:	b003      	add	sp, #12
 801ef42:	bd30      	pop	{r4, r5, pc}
 801ef44:	4a28      	ldr	r2, [pc, #160]	@ (801efe8 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 801ef46:	9400      	str	r4, [sp, #0]
 801ef48:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 801ef4c:	f004 facc 	bl	80234e8 <BnrgmFrndFnProcessFrndRequest>
 801ef50:	e7f6      	b.n	801ef40 <BnrgmFrndMgmtProcessNewPacket+0x64>
 801ef52:	4a25      	ldr	r2, [pc, #148]	@ (801efe8 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 801ef54:	9400      	str	r4, [sp, #0]
 801ef56:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 801ef5a:	f004 fc19 	bl	8023790 <BnrgmFrndFnProcessFrndClear>
 801ef5e:	e7ef      	b.n	801ef40 <BnrgmFrndMgmtProcessNewPacket+0x64>
 801ef60:	4a21      	ldr	r2, [pc, #132]	@ (801efe8 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 801ef62:	9400      	str	r4, [sp, #0]
 801ef64:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 801ef68:	f7fc fc3e 	bl	801b7e8 <BnrgmFrndFnProcessFrndClearConf>
 801ef6c:	e7e8      	b.n	801ef40 <BnrgmFrndMgmtProcessNewPacket+0x64>
 801ef6e:	4a1e      	ldr	r2, [pc, #120]	@ (801efe8 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 801ef70:	9400      	str	r4, [sp, #0]
 801ef72:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 801ef76:	f004 fcfd 	bl	8023974 <BnrgmFrndFnProcessFrndSubscrListAdd>
 801ef7a:	e7e1      	b.n	801ef40 <BnrgmFrndMgmtProcessNewPacket+0x64>
 801ef7c:	4a1a      	ldr	r2, [pc, #104]	@ (801efe8 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 801ef7e:	9400      	str	r4, [sp, #0]
 801ef80:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 801ef84:	f004 fc8a 	bl	802389c <BnrgmFrndFnProcessFrndSubscrListRem>
 801ef88:	e7da      	b.n	801ef40 <BnrgmFrndMgmtProcessNewPacket+0x64>
 801ef8a:	4d16      	ldr	r5, [pc, #88]	@ (801efe4 <BnrgmFrndMgmtProcessNewPacket+0x108>)
 801ef8c:	f895 50bf 	ldrb.w	r5, [r5, #191]	@ 0xbf
 801ef90:	2d02      	cmp	r5, #2
 801ef92:	d023      	beq.n	801efdc <BnrgmFrndMgmtProcessNewPacket+0x100>
 801ef94:	2a04      	cmp	r2, #4
 801ef96:	d00a      	beq.n	801efae <BnrgmFrndMgmtProcessNewPacket+0xd2>
 801ef98:	2a09      	cmp	r2, #9
 801ef9a:	d00f      	beq.n	801efbc <BnrgmFrndMgmtProcessNewPacket+0xe0>
 801ef9c:	2a02      	cmp	r2, #2
 801ef9e:	d114      	bne.n	801efca <BnrgmFrndMgmtProcessNewPacket+0xee>
 801efa0:	4a11      	ldr	r2, [pc, #68]	@ (801efe8 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 801efa2:	9400      	str	r4, [sp, #0]
 801efa4:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 801efa8:	f7f1 fd68 	bl	8010a7c <BnrgmFrndLpnProcessFrndUpdate>
 801efac:	e7c8      	b.n	801ef40 <BnrgmFrndMgmtProcessNewPacket+0x64>
 801efae:	4a0e      	ldr	r2, [pc, #56]	@ (801efe8 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 801efb0:	9400      	str	r4, [sp, #0]
 801efb2:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 801efb6:	f7f1 fd56 	bl	8010a66 <BnrgmFrndLpnProcessFrndOffer>
 801efba:	e7c1      	b.n	801ef40 <BnrgmFrndMgmtProcessNewPacket+0x64>
 801efbc:	4a0a      	ldr	r2, [pc, #40]	@ (801efe8 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 801efbe:	9400      	str	r4, [sp, #0]
 801efc0:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 801efc4:	f7f1 fd70 	bl	8010aa8 <BnrgmFrndLpnProcessFrndSubscrListConf>
 801efc8:	e7ba      	b.n	801ef40 <BnrgmFrndMgmtProcessNewPacket+0x64>
 801efca:	2a0a      	cmp	r2, #10
 801efcc:	d908      	bls.n	801efe0 <BnrgmFrndMgmtProcessNewPacket+0x104>
 801efce:	4a06      	ldr	r2, [pc, #24]	@ (801efe8 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 801efd0:	9400      	str	r4, [sp, #0]
 801efd2:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 801efd6:	f7f1 fd5c 	bl	8010a92 <BnrgmFrndLpnProcessFrndRfu>
 801efda:	e7b1      	b.n	801ef40 <BnrgmFrndMgmtProcessNewPacket+0x64>
 801efdc:	2005      	movs	r0, #5
 801efde:	e7af      	b.n	801ef40 <BnrgmFrndMgmtProcessNewPacket+0x64>
 801efe0:	2002      	movs	r0, #2
 801efe2:	e7ad      	b.n	801ef40 <BnrgmFrndMgmtProcessNewPacket+0x64>
 801efe4:	20000324 	.word	0x20000324
 801efe8:	20002514 	.word	0x20002514

0801efec <MobleTransControl_ProcessUnSegCtrlReq>:
 801efec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eff0:	4615      	mov	r5, r2
 801eff2:	460e      	mov	r6, r1
 801eff4:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
 801eff8:	4607      	mov	r7, r0
 801effa:	b928      	cbnz	r0, 801f008 <MobleTransControl_ProcessUnSegCtrlReq+0x1c>
 801effc:	4b1c      	ldr	r3, [pc, #112]	@ (801f070 <MobleTransControl_ProcessUnSegCtrlReq+0x84>)
 801effe:	4a1d      	ldr	r2, [pc, #116]	@ (801f074 <MobleTransControl_ProcessUnSegCtrlReq+0x88>)
 801f000:	481d      	ldr	r0, [pc, #116]	@ (801f078 <MobleTransControl_ProcessUnSegCtrlReq+0x8c>)
 801f002:	2160      	movs	r1, #96	@ 0x60
 801f004:	f006 fe46 	bl	8025c94 <__assert_func>
 801f008:	781c      	ldrb	r4, [r3, #0]
 801f00a:	f895 8000 	ldrb.w	r8, [r5]
 801f00e:	f004 0e7f 	and.w	lr, r4, #127	@ 0x7f
 801f012:	f36e 0806 	bfi	r8, lr, #0, #7
 801f016:	f885 8000 	strb.w	r8, [r5]
 801f01a:	781b      	ldrb	r3, [r3, #0]
 801f01c:	fa5f f888 	uxtb.w	r8, r8
 801f020:	09db      	lsrs	r3, r3, #7
 801f022:	f363 18c7 	bfi	r8, r3, #7, #1
 801f026:	f885 8000 	strb.w	r8, [r5]
 801f02a:	f8b1 5040 	ldrh.w	r5, [r1, #64]	@ 0x40
 801f02e:	f415 7500 	ands.w	r5, r5, #512	@ 0x200
 801f032:	4674      	mov	r4, lr
 801f034:	d019      	beq.n	801f06a <MobleTransControl_ProcessUnSegCtrlReq+0x7e>
 801f036:	2c09      	cmp	r4, #9
 801f038:	d808      	bhi.n	801f04c <MobleTransControl_ProcessUnSegCtrlReq+0x60>
 801f03a:	b17c      	cbz	r4, 801f05c <MobleTransControl_ProcessUnSegCtrlReq+0x70>
 801f03c:	4613      	mov	r3, r2
 801f03e:	f8cd c018 	str.w	ip, [sp, #24]
 801f042:	4672      	mov	r2, lr
 801f044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f048:	f7ff bf48 	b.w	801eedc <BnrgmFrndMgmtProcessNewPacket>
 801f04c:	2c0a      	cmp	r4, #10
 801f04e:	d105      	bne.n	801f05c <MobleTransControl_ProcessUnSegCtrlReq+0x70>
 801f050:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f054:	4663      	mov	r3, ip
 801f056:	310c      	adds	r1, #12
 801f058:	f7fa bbec 	b.w	8019834 <BnrgmTransControlProcessHeartbeat>
 801f05c:	4613      	mov	r3, r2
 801f05e:	f8cd c018 	str.w	ip, [sp, #24]
 801f062:	4672      	mov	r2, lr
 801f064:	4631      	mov	r1, r6
 801f066:	4638      	mov	r0, r7
 801f068:	e7ec      	b.n	801f044 <MobleTransControl_ProcessUnSegCtrlReq+0x58>
 801f06a:	4628      	mov	r0, r5
 801f06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f070:	0802e4b8 	.word	0x0802e4b8
 801f074:	0802d601 	.word	0x0802d601
 801f078:	0802ebeb 	.word	0x0802ebeb

0801f07c <MobleTransportProcessData>:
 801f07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f080:	f8b1 4040 	ldrh.w	r4, [r1, #64]	@ 0x40
 801f084:	b093      	sub	sp, #76	@ 0x4c
 801f086:	460d      	mov	r5, r1
 801f088:	4691      	mov	r9, r2
 801f08a:	461e      	mov	r6, r3
 801f08c:	4607      	mov	r7, r0
 801f08e:	b930      	cbnz	r0, 801f09e <MobleTransportProcessData+0x22>
 801f090:	4b93      	ldr	r3, [pc, #588]	@ (801f2e0 <MobleTransportProcessData+0x264>)
 801f092:	4a94      	ldr	r2, [pc, #592]	@ (801f2e4 <MobleTransportProcessData+0x268>)
 801f094:	f240 1189 	movw	r1, #393	@ 0x189
 801f098:	4893      	ldr	r0, [pc, #588]	@ (801f2e8 <MobleTransportProcessData+0x26c>)
 801f09a:	f006 fdfb 	bl	8025c94 <__assert_func>
 801f09e:	b922      	cbnz	r2, 801f0aa <MobleTransportProcessData+0x2e>
 801f0a0:	4b92      	ldr	r3, [pc, #584]	@ (801f2ec <MobleTransportProcessData+0x270>)
 801f0a2:	4a90      	ldr	r2, [pc, #576]	@ (801f2e4 <MobleTransportProcessData+0x268>)
 801f0a4:	f240 118b 	movw	r1, #395	@ 0x18b
 801f0a8:	e7f6      	b.n	801f098 <MobleTransportProcessData+0x1c>
 801f0aa:	f103 3bff 	add.w	fp, r3, #4294967295
 801f0ae:	f1bb 0f0f 	cmp.w	fp, #15
 801f0b2:	f200 8112 	bhi.w	801f2da <MobleTransportProcessData+0x25e>
 801f0b6:	4648      	mov	r0, r9
 801f0b8:	aa0e      	add	r2, sp, #56	@ 0x38
 801f0ba:	310c      	adds	r1, #12
 801f0bc:	f7fa fab2 	bl	8019624 <MobleTransportParseHdr>
 801f0c0:	06a0      	lsls	r0, r4, #26
 801f0c2:	d506      	bpl.n	801f0d2 <MobleTransportProcessData+0x56>
 801f0c4:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 801f0c8:	2b03      	cmp	r3, #3
 801f0ca:	d016      	beq.n	801f0fa <MobleTransportProcessData+0x7e>
 801f0cc:	d91b      	bls.n	801f106 <MobleTransportProcessData+0x8a>
 801f0ce:	2b04      	cmp	r3, #4
 801f0d0:	d013      	beq.n	801f0fa <MobleTransportProcessData+0x7e>
 801f0d2:	7b28      	ldrb	r0, [r5, #12]
 801f0d4:	8aaa      	ldrh	r2, [r5, #20]
 801f0d6:	23a0      	movs	r3, #160	@ 0xa0
 801f0d8:	fb03 7000 	mla	r0, r3, r0, r7
 801f0dc:	2114      	movs	r1, #20
 801f0de:	692b      	ldr	r3, [r5, #16]
 801f0e0:	3010      	adds	r0, #16
 801f0e2:	f7fa fc15 	bl	8019910 <MobleAddressIsNew>
 801f0e6:	4604      	mov	r4, r0
 801f0e8:	b188      	cbz	r0, 801f10e <MobleTransportProcessData+0x92>
 801f0ea:	1e44      	subs	r4, r0, #1
 801f0ec:	bf18      	it	ne
 801f0ee:	2401      	movne	r4, #1
 801f0f0:	0064      	lsls	r4, r4, #1
 801f0f2:	4620      	mov	r0, r4
 801f0f4:	b013      	add	sp, #76	@ 0x4c
 801f0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0fa:	f89d 3039 	ldrb.w	r3, [sp, #57]	@ 0x39
 801f0fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f102:	2b0a      	cmp	r3, #10
 801f104:	d1e5      	bne.n	801f0d2 <MobleTransportProcessData+0x56>
 801f106:	4638      	mov	r0, r7
 801f108:	f7ff fed6 	bl	801eeb8 <BnrgmFrndMgmtTranspSegRecvd>
 801f10c:	e7e1      	b.n	801f0d2 <MobleTransportProcessData+0x56>
 801f10e:	f89d a038 	ldrb.w	sl, [sp, #56]	@ 0x38
 801f112:	f1ba 0f04 	cmp.w	sl, #4
 801f116:	d866      	bhi.n	801f1e6 <MobleTransportProcessData+0x16a>
 801f118:	e8df f00a 	tbb	[pc, sl]
 801f11c:	a78ccf03 	.word	0xa78ccf03
 801f120:	ca          	.byte	0xca
 801f121:	00          	.byte	0x00
 801f122:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 801f126:	0559      	lsls	r1, r3, #21
 801f128:	d506      	bpl.n	801f138 <MobleTransportProcessData+0xbc>
 801f12a:	9600      	str	r6, [sp, #0]
 801f12c:	464b      	mov	r3, r9
 801f12e:	aa0e      	add	r2, sp, #56	@ 0x38
 801f130:	4629      	mov	r1, r5
 801f132:	4638      	mov	r0, r7
 801f134:	f7fc fb48 	bl	801b7c8 <BnrgmFrndMgmtQueLpnPkt>
 801f138:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 801f13c:	059a      	lsls	r2, r3, #22
 801f13e:	d5d8      	bpl.n	801f0f2 <MobleTransportProcessData+0x76>
 801f140:	4b6b      	ldr	r3, [pc, #428]	@ (801f2f0 <MobleTransportProcessData+0x274>)
 801f142:	f8b3 094e 	ldrh.w	r0, [r3, #2382]	@ 0x94e
 801f146:	f7f8 ffef 	bl	8018128 <MobleMemAlloc>
 801f14a:	4680      	mov	r8, r0
 801f14c:	2800      	cmp	r0, #0
 801f14e:	d04a      	beq.n	801f1e6 <MobleTransportProcessData+0x16a>
 801f150:	f109 0301 	add.w	r3, r9, #1
 801f154:	9308      	str	r3, [sp, #32]
 801f156:	683b      	ldr	r3, [r7, #0]
 801f158:	7f1b      	ldrb	r3, [r3, #28]
 801f15a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f15c:	8aab      	ldrh	r3, [r5, #20]
 801f15e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f160:	4654      	mov	r4, sl
 801f162:	f04f 0900 	mov.w	r9, #0
 801f166:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f168:	fa5f f389 	uxtb.w	r3, r9
 801f16c:	429a      	cmp	r2, r3
 801f16e:	d805      	bhi.n	801f17c <MobleTransportProcessData+0x100>
 801f170:	2c01      	cmp	r4, #1
 801f172:	d92e      	bls.n	801f1d2 <MobleTransportProcessData+0x156>
 801f174:	4640      	mov	r0, r8
 801f176:	f7f9 f861 	bl	801823c <MobleMemFree>
 801f17a:	e7ba      	b.n	801f0f2 <MobleTransportProcessData+0x76>
 801f17c:	fa1f f389 	uxth.w	r3, r9
 801f180:	f895 0042 	ldrb.w	r0, [r5, #66]	@ 0x42
 801f184:	8aaa      	ldrh	r2, [r5, #20]
 801f186:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f188:	f7ff fe8a 	bl	801eea0 <MobleConfigModel_KR_UseNewKeyDec>
 801f18c:	2300      	movs	r3, #0
 801f18e:	e9cd 5306 	strd	r5, r3, [sp, #24]
 801f192:	9b08      	ldr	r3, [sp, #32]
 801f194:	9302      	str	r3, [sp, #8]
 801f196:	fa12 f289 	uxtah	r2, r2, r9
 801f19a:	8aeb      	ldrh	r3, [r5, #22]
 801f19c:	f89d 403a 	ldrb.w	r4, [sp, #58]	@ 0x3a
 801f1a0:	f89d 103b 	ldrb.w	r1, [sp, #59]	@ 0x3b
 801f1a4:	f8cd b00c 	str.w	fp, [sp, #12]
 801f1a8:	b292      	uxth	r2, r2
 801f1aa:	e9cd 2300 	strd	r2, r3, [sp]
 801f1ae:	2200      	movs	r2, #0
 801f1b0:	e9cd 8004 	strd	r8, r0, [sp, #16]
 801f1b4:	1aa0      	subs	r0, r4, r2
 801f1b6:	692b      	ldr	r3, [r5, #16]
 801f1b8:	bf18      	it	ne
 801f1ba:	2001      	movne	r0, #1
 801f1bc:	f7f9 fd7a 	bl	8018cb4 <MoblePalCryptoDecryptApp>
 801f1c0:	f109 0901 	add.w	r9, r9, #1
 801f1c4:	4604      	mov	r4, r0
 801f1c6:	2800      	cmp	r0, #0
 801f1c8:	d1cd      	bne.n	801f166 <MobleTransportProcessData+0xea>
 801f1ca:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	@ 0x28
 801f1ce:	4413      	add	r3, r2
 801f1d0:	82ab      	strh	r3, [r5, #20]
 801f1d2:	1f71      	subs	r1, r6, #5
 801f1d4:	aa0d      	add	r2, sp, #52	@ 0x34
 801f1d6:	4640      	mov	r0, r8
 801f1d8:	f7fe fde4 	bl	801dda4 <MobleModelGetOpcodeValue>
 801f1dc:	4604      	mov	r4, r0
 801f1de:	b920      	cbnz	r0, 801f1ea <MobleTransportProcessData+0x16e>
 801f1e0:	4640      	mov	r0, r8
 801f1e2:	f7f9 f82b 	bl	801823c <MobleMemFree>
 801f1e6:	2402      	movs	r4, #2
 801f1e8:	e783      	b.n	801f0f2 <MobleTransportProcessData+0x76>
 801f1ea:	2801      	cmp	r0, #1
 801f1ec:	d116      	bne.n	801f21c <MobleTransportProcessData+0x1a0>
 801f1ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f1f0:	2b03      	cmp	r3, #3
 801f1f2:	d803      	bhi.n	801f1fc <MobleTransportProcessData+0x180>
 801f1f4:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 801f1f8:	2b01      	cmp	r3, #1
 801f1fa:	d0f1      	beq.n	801f1e0 <MobleTransportProcessData+0x164>
 801f1fc:	9100      	str	r1, [sp, #0]
 801f1fe:	4643      	mov	r3, r8
 801f200:	f10d 0239 	add.w	r2, sp, #57	@ 0x39
 801f204:	4629      	mov	r1, r5
 801f206:	4638      	mov	r0, r7
 801f208:	f7f9 fec0 	bl	8018f8c <MobleApplicationProcessPacket>
 801f20c:	4604      	mov	r4, r0
 801f20e:	2c01      	cmp	r4, #1
 801f210:	4640      	mov	r0, r8
 801f212:	d8b0      	bhi.n	801f176 <MobleTransportProcessData+0xfa>
 801f214:	f7f9 f812 	bl	801823c <MobleMemFree>
 801f218:	4654      	mov	r4, sl
 801f21a:	e76a      	b.n	801f0f2 <MobleTransportProcessData+0x76>
 801f21c:	2802      	cmp	r0, #2
 801f21e:	d1ed      	bne.n	801f1fc <MobleTransportProcessData+0x180>
 801f220:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f222:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 801f226:	2b4e      	cmp	r3, #78	@ 0x4e
 801f228:	d8e8      	bhi.n	801f1fc <MobleTransportProcessData+0x180>
 801f22a:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 801f22e:	2b01      	cmp	r3, #1
 801f230:	d1e4      	bne.n	801f1fc <MobleTransportProcessData+0x180>
 801f232:	e79f      	b.n	801f174 <MobleTransportProcessData+0xf8>
 801f234:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 801f238:	055b      	lsls	r3, r3, #21
 801f23a:	d506      	bpl.n	801f24a <MobleTransportProcessData+0x1ce>
 801f23c:	9600      	str	r6, [sp, #0]
 801f23e:	464b      	mov	r3, r9
 801f240:	aa0e      	add	r2, sp, #56	@ 0x38
 801f242:	4629      	mov	r1, r5
 801f244:	4638      	mov	r0, r7
 801f246:	f7fc fabf 	bl	801b7c8 <BnrgmFrndMgmtQueLpnPkt>
 801f24a:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 801f24e:	0598      	lsls	r0, r3, #22
 801f250:	f57f af4f 	bpl.w	801f0f2 <MobleTransportProcessData+0x76>
 801f254:	2e07      	cmp	r6, #7
 801f256:	d1c6      	bne.n	801f1e6 <MobleTransportProcessData+0x16a>
 801f258:	f109 0303 	add.w	r3, r9, #3
 801f25c:	f10d 0239 	add.w	r2, sp, #57	@ 0x39
 801f260:	4629      	mov	r1, r5
 801f262:	4638      	mov	r0, r7
 801f264:	f000 fbcc 	bl	801fa00 <MobleTransSarProcessAck>
 801f268:	e743      	b.n	801f0f2 <MobleTransportProcessData+0x76>
 801f26a:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 801f26e:	0559      	lsls	r1, r3, #21
 801f270:	d50c      	bpl.n	801f28c <MobleTransportProcessData+0x210>
 801f272:	f89d 3039 	ldrb.w	r3, [sp, #57]	@ 0x39
 801f276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f27a:	2b0a      	cmp	r3, #10
 801f27c:	d106      	bne.n	801f28c <MobleTransportProcessData+0x210>
 801f27e:	9600      	str	r6, [sp, #0]
 801f280:	464b      	mov	r3, r9
 801f282:	aa0e      	add	r2, sp, #56	@ 0x38
 801f284:	4629      	mov	r1, r5
 801f286:	4638      	mov	r0, r7
 801f288:	f7fc fa9e 	bl	801b7c8 <BnrgmFrndMgmtQueLpnPkt>
 801f28c:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 801f290:	059a      	lsls	r2, r3, #22
 801f292:	f57f af2e 	bpl.w	801f0f2 <MobleTransportProcessData+0x76>
 801f296:	f109 0301 	add.w	r3, r9, #1
 801f29a:	9300      	str	r3, [sp, #0]
 801f29c:	f8cd b004 	str.w	fp, [sp, #4]
 801f2a0:	464b      	mov	r3, r9
 801f2a2:	f10d 0239 	add.w	r2, sp, #57	@ 0x39
 801f2a6:	4629      	mov	r1, r5
 801f2a8:	4638      	mov	r0, r7
 801f2aa:	f7ff fe9f 	bl	801efec <MobleTransControl_ProcessUnSegCtrlReq>
 801f2ae:	e720      	b.n	801f0f2 <MobleTransportProcessData+0x76>
 801f2b0:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 801f2b4:	059b      	lsls	r3, r3, #22
 801f2b6:	f57f af1c 	bpl.w	801f0f2 <MobleTransportProcessData+0x76>
 801f2ba:	2e04      	cmp	r6, #4
 801f2bc:	d993      	bls.n	801f1e6 <MobleTransportProcessData+0x16a>
 801f2be:	f995 3018 	ldrsb.w	r3, [r5, #24]
 801f2c2:	9301      	str	r3, [sp, #4]
 801f2c4:	3e04      	subs	r6, #4
 801f2c6:	9600      	str	r6, [sp, #0]
 801f2c8:	f109 0304 	add.w	r3, r9, #4
 801f2cc:	f10d 0239 	add.w	r2, sp, #57	@ 0x39
 801f2d0:	4629      	mov	r1, r5
 801f2d2:	4638      	mov	r0, r7
 801f2d4:	f004 fd6e 	bl	8023db4 <MobleTransSarProcessSeg>
 801f2d8:	e70b      	b.n	801f0f2 <MobleTransportProcessData+0x76>
 801f2da:	2403      	movs	r4, #3
 801f2dc:	e709      	b.n	801f0f2 <MobleTransportProcessData+0x76>
 801f2de:	bf00      	nop
 801f2e0:	0802e4b8 	.word	0x0802e4b8
 801f2e4:	0802d627 	.word	0x0802d627
 801f2e8:	0802e948 	.word	0x0802e948
 801f2ec:	0802e707 	.word	0x0802e707
 801f2f0:	2000141c 	.word	0x2000141c

0801f2f4 <MobleNetworkProcessData>:
 801f2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2f8:	b0a9      	sub	sp, #164	@ 0xa4
 801f2fa:	4604      	mov	r4, r0
 801f2fc:	460d      	mov	r5, r1
 801f2fe:	4617      	mov	r7, r2
 801f300:	2100      	movs	r1, #0
 801f302:	224c      	movs	r2, #76	@ 0x4c
 801f304:	a815      	add	r0, sp, #84	@ 0x54
 801f306:	f89d 90c8 	ldrb.w	r9, [sp, #200]	@ 0xc8
 801f30a:	469b      	mov	fp, r3
 801f30c:	f007 fc60 	bl	8026bd0 <memset>
 801f310:	2228      	movs	r2, #40	@ 0x28
 801f312:	2100      	movs	r1, #0
 801f314:	a80b      	add	r0, sp, #44	@ 0x2c
 801f316:	f007 fc5b 	bl	8026bd0 <memset>
 801f31a:	b934      	cbnz	r4, 801f32a <MobleNetworkProcessData+0x36>
 801f31c:	4bac      	ldr	r3, [pc, #688]	@ (801f5d0 <MobleNetworkProcessData+0x2dc>)
 801f31e:	4aad      	ldr	r2, [pc, #692]	@ (801f5d4 <MobleNetworkProcessData+0x2e0>)
 801f320:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 801f324:	48ac      	ldr	r0, [pc, #688]	@ (801f5d8 <MobleNetworkProcessData+0x2e4>)
 801f326:	f006 fcb5 	bl	8025c94 <__assert_func>
 801f32a:	b927      	cbnz	r7, 801f336 <MobleNetworkProcessData+0x42>
 801f32c:	4bab      	ldr	r3, [pc, #684]	@ (801f5dc <MobleNetworkProcessData+0x2e8>)
 801f32e:	4aa9      	ldr	r2, [pc, #676]	@ (801f5d4 <MobleNetworkProcessData+0x2e0>)
 801f330:	f240 11d9 	movw	r1, #473	@ 0x1d9
 801f334:	e7f6      	b.n	801f324 <MobleNetworkProcessData+0x30>
 801f336:	f1ab 030e 	sub.w	r3, fp, #14
 801f33a:	2b0f      	cmp	r3, #15
 801f33c:	d904      	bls.n	801f348 <MobleNetworkProcessData+0x54>
 801f33e:	2502      	movs	r5, #2
 801f340:	4628      	mov	r0, r5
 801f342:	b029      	add	sp, #164	@ 0xa4
 801f344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f348:	f99d 30cc 	ldrsb.w	r3, [sp, #204]	@ 0xcc
 801f34c:	f88d b05c 	strb.w	fp, [sp, #92]	@ 0x5c
 801f350:	e9cd 5715 	strd	r5, r7, [sp, #84]	@ 0x54
 801f354:	f88d 306c 	strb.w	r3, [sp, #108]	@ 0x6c
 801f358:	f1b9 0f00 	cmp.w	r9, #0
 801f35c:	d002      	beq.n	801f364 <MobleNetworkProcessData+0x70>
 801f35e:	2340      	movs	r3, #64	@ 0x40
 801f360:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 801f364:	ae18      	add	r6, sp, #96	@ 0x60
 801f366:	4631      	mov	r1, r6
 801f368:	4638      	mov	r0, r7
 801f36a:	f7f7 fdb3 	bl	8016ed4 <MoblePalCryptoParseNetHdr>
 801f36e:	f89d 1061 	ldrb.w	r1, [sp, #97]	@ 0x61
 801f372:	f10d 006e 	add.w	r0, sp, #110	@ 0x6e
 801f376:	f7f8 f8fb 	bl	8017570 <BnrgmPalCryptoMatchNid>
 801f37a:	4605      	mov	r5, r0
 801f37c:	2800      	cmp	r0, #0
 801f37e:	d1de      	bne.n	801f33e <MobleNetworkProcessData+0x4a>
 801f380:	f1ab 0b04 	sub.w	fp, fp, #4
 801f384:	f894 a1d1 	ldrb.w	sl, [r4, #465]	@ 0x1d1
 801f388:	445f      	add	r7, fp
 801f38a:	4680      	mov	r8, r0
 801f38c:	f04f 0b05 	mov.w	fp, #5
 801f390:	fa5f f388 	uxtb.w	r3, r8
 801f394:	459a      	cmp	sl, r3
 801f396:	d878      	bhi.n	801f48a <MobleNetworkProcessData+0x196>
 801f398:	a907      	add	r1, sp, #28
 801f39a:	a815      	add	r0, sp, #84	@ 0x54
 801f39c:	f7f9 fb16 	bl	80189cc <BnrgmPalCryptoDecryptNetwork>
 801f3a0:	2801      	cmp	r0, #1
 801f3a2:	d8cc      	bhi.n	801f33e <MobleNetworkProcessData+0x4a>
 801f3a4:	f89d 3062 	ldrb.w	r3, [sp, #98]	@ 0x62
 801f3a8:	f89d 705c 	ldrb.w	r7, [sp, #92]	@ 0x5c
 801f3ac:	f8bd 0068 	ldrh.w	r0, [sp, #104]	@ 0x68
 801f3b0:	2b00      	cmp	r3, #0
 801f3b2:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	@ 0x68
 801f3b6:	bf14      	ite	ne
 801f3b8:	f04f 0808 	movne.w	r8, #8
 801f3bc:	f04f 0804 	moveq.w	r8, #4
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	ddbc      	ble.n	801f33e <MobleNetworkProcessData+0x4a>
 801f3c4:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	d0b8      	beq.n	801f33e <MobleNetworkProcessData+0x4a>
 801f3cc:	6821      	ldr	r1, [r4, #0]
 801f3ce:	f891 c01c 	ldrb.w	ip, [r1, #28]
 801f3d2:	2200      	movs	r2, #0
 801f3d4:	b2d3      	uxtb	r3, r2
 801f3d6:	4563      	cmp	r3, ip
 801f3d8:	d36e      	bcc.n	801f4b8 <MobleNetworkProcessData+0x1c4>
 801f3da:	f1b9 0f00 	cmp.w	r9, #0
 801f3de:	d007      	beq.n	801f3f0 <MobleNetworkProcessData+0xfc>
 801f3e0:	4b7f      	ldr	r3, [pc, #508]	@ (801f5e0 <MobleNetworkProcessData+0x2ec>)
 801f3e2:	2201      	movs	r2, #1
 801f3e4:	f883 26f4 	strb.w	r2, [r3, #1780]	@ 0x6f4
 801f3e8:	f8a3 06f6 	strh.w	r0, [r3, #1782]	@ 0x6f6
 801f3ec:	f7fb fc2c 	bl	801ac48 <BnrgmProxyConfig_AddProxyClient_Filter>
 801f3f0:	f1a7 0309 	sub.w	r3, r7, #9
 801f3f4:	eba3 0308 	sub.w	r3, r3, r8
 801f3f8:	a915      	add	r1, sp, #84	@ 0x54
 801f3fa:	4620      	mov	r0, r4
 801f3fc:	9305      	str	r3, [sp, #20]
 801f3fe:	f7fe fff7 	bl	801e3f0 <MobleNetworkDecideRetransmission>
 801f402:	f8bd 2094 	ldrh.w	r2, [sp, #148]	@ 0x94
 801f406:	9b05      	ldr	r3, [sp, #20]
 801f408:	f402 62c0 	and.w	r2, r2, #1536	@ 0x600
 801f40c:	b12a      	cbz	r2, 801f41a <MobleNetworkProcessData+0x126>
 801f40e:	aa07      	add	r2, sp, #28
 801f410:	a915      	add	r1, sp, #84	@ 0x54
 801f412:	4620      	mov	r0, r4
 801f414:	f7ff fe32 	bl	801f07c <MobleTransportProcessData>
 801f418:	9b05      	ldr	r3, [sp, #20]
 801f41a:	f894 21d1 	ldrb.w	r2, [r4, #465]	@ 0x1d1
 801f41e:	f8bd e068 	ldrh.w	lr, [sp, #104]	@ 0x68
 801f422:	f8dd c064 	ldr.w	ip, [sp, #100]	@ 0x64
 801f426:	f89d 7060 	ldrb.w	r7, [sp, #96]	@ 0x60
 801f42a:	f894 a1d0 	ldrb.w	sl, [r4, #464]	@ 0x1d0
 801f42e:	f04f 0900 	mov.w	r9, #0
 801f432:	2105      	movs	r1, #5
 801f434:	fa5f f089 	uxtb.w	r0, r9
 801f438:	4282      	cmp	r2, r0
 801f43a:	d844      	bhi.n	801f4c6 <MobleNetworkProcessData+0x1d2>
 801f43c:	4452      	add	r2, sl
 801f43e:	fbb2 f0f1 	udiv	r0, r2, r1
 801f442:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801f446:	f89d 805c 	ldrb.w	r8, [sp, #92]	@ 0x5c
 801f44a:	1a12      	subs	r2, r2, r0
 801f44c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801f44e:	4440      	add	r0, r8
 801f450:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 801f454:	f850 0c04 	ldr.w	r0, [r0, #-4]
 801f458:	f8c2 0188 	str.w	r0, [r2, #392]	@ 0x188
 801f45c:	f882 818c 	strb.w	r8, [r2, #396]	@ 0x18c
 801f460:	f8a2 e180 	strh.w	lr, [r2, #384]	@ 0x180
 801f464:	f8c2 c184 	str.w	ip, [r2, #388]	@ 0x184
 801f468:	f882 718d 	strb.w	r7, [r2, #397]	@ 0x18d
 801f46c:	f894 21d1 	ldrb.w	r2, [r4, #465]	@ 0x1d1
 801f470:	2a04      	cmp	r2, #4
 801f472:	d941      	bls.n	801f4f8 <MobleNetworkProcessData+0x204>
 801f474:	f894 21d0 	ldrb.w	r2, [r4, #464]	@ 0x1d0
 801f478:	3201      	adds	r2, #1
 801f47a:	fbb2 f1f1 	udiv	r1, r2, r1
 801f47e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801f482:	1a52      	subs	r2, r2, r1
 801f484:	f884 21d0 	strb.w	r2, [r4, #464]	@ 0x1d0
 801f488:	e039      	b.n	801f4fe <MobleNetworkProcessData+0x20a>
 801f48a:	f894 01d0 	ldrb.w	r0, [r4, #464]	@ 0x1d0
 801f48e:	4440      	add	r0, r8
 801f490:	fbb0 f3fb 	udiv	r3, r0, fp
 801f494:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801f498:	1ac0      	subs	r0, r0, r3
 801f49a:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 801f49e:	2204      	movs	r2, #4
 801f4a0:	4639      	mov	r1, r7
 801f4a2:	f500 70c4 	add.w	r0, r0, #392	@ 0x188
 801f4a6:	f007 fb69 	bl	8026b7c <memcmp>
 801f4aa:	f108 0801 	add.w	r8, r8, #1
 801f4ae:	2800      	cmp	r0, #0
 801f4b0:	f47f af6e 	bne.w	801f390 <MobleNetworkProcessData+0x9c>
 801f4b4:	2501      	movs	r5, #1
 801f4b6:	e743      	b.n	801f340 <MobleNetworkProcessData+0x4c>
 801f4b8:	884b      	ldrh	r3, [r1, #2]
 801f4ba:	4413      	add	r3, r2
 801f4bc:	4298      	cmp	r0, r3
 801f4be:	f102 0201 	add.w	r2, r2, #1
 801f4c2:	d187      	bne.n	801f3d4 <MobleNetworkProcessData+0xe0>
 801f4c4:	e7f6      	b.n	801f4b4 <MobleNetworkProcessData+0x1c0>
 801f4c6:	eb09 080a 	add.w	r8, r9, sl
 801f4ca:	fbb8 f0f1 	udiv	r0, r8, r1
 801f4ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801f4d2:	eba8 0800 	sub.w	r8, r8, r0
 801f4d6:	eb04 1808 	add.w	r8, r4, r8, lsl #4
 801f4da:	f8b8 0180 	ldrh.w	r0, [r8, #384]	@ 0x180
 801f4de:	4570      	cmp	r0, lr
 801f4e0:	d107      	bne.n	801f4f2 <MobleNetworkProcessData+0x1fe>
 801f4e2:	f8d8 0184 	ldr.w	r0, [r8, #388]	@ 0x184
 801f4e6:	4560      	cmp	r0, ip
 801f4e8:	d103      	bne.n	801f4f2 <MobleNetworkProcessData+0x1fe>
 801f4ea:	f898 018d 	ldrb.w	r0, [r8, #397]	@ 0x18d
 801f4ee:	42b8      	cmp	r0, r7
 801f4f0:	d0e0      	beq.n	801f4b4 <MobleNetworkProcessData+0x1c0>
 801f4f2:	f109 0901 	add.w	r9, r9, #1
 801f4f6:	e79d      	b.n	801f434 <MobleNetworkProcessData+0x140>
 801f4f8:	3201      	adds	r2, #1
 801f4fa:	f884 21d1 	strb.w	r2, [r4, #465]	@ 0x1d1
 801f4fe:	f8bd 7094 	ldrh.w	r7, [sp, #148]	@ 0x94
 801f502:	05fa      	lsls	r2, r7, #23
 801f504:	d52d      	bpl.n	801f562 <MobleNetworkProcessData+0x26e>
 801f506:	06b8      	lsls	r0, r7, #26
 801f508:	f89d 8063 	ldrb.w	r8, [sp, #99]	@ 0x63
 801f50c:	d541      	bpl.n	801f592 <MobleNetworkProcessData+0x29e>
 801f50e:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 801f5e4 <MobleNetworkProcessData+0x2f0>
 801f512:	f89e 20be 	ldrb.w	r2, [lr, #190]	@ 0xbe
 801f516:	2a01      	cmp	r2, #1
 801f518:	d123      	bne.n	801f562 <MobleNetworkProcessData+0x26e>
 801f51a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801f51e:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801f522:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801f526:	f89d 2096 	ldrb.w	r2, [sp, #150]	@ 0x96
 801f52a:	f88d 2048 	strb.w	r2, [sp, #72]	@ 0x48
 801f52e:	f8bd 2098 	ldrh.w	r2, [sp, #152]	@ 0x98
 801f532:	f8ad 204a 	strh.w	r2, [sp, #74]	@ 0x4a
 801f536:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801f53a:	f88d 204e 	strb.w	r2, [sp, #78]	@ 0x4e
 801f53e:	f027 0720 	bic.w	r7, r7, #32
 801f542:	f89e 20b8 	ldrb.w	r2, [lr, #184]	@ 0xb8
 801f546:	f8ad 7046 	strh.w	r7, [sp, #70]	@ 0x46
 801f54a:	3201      	adds	r2, #1
 801f54c:	f88d 204f 	strb.w	r2, [sp, #79]	@ 0x4f
 801f550:	f108 38ff 	add.w	r8, r8, #4294967295
 801f554:	aa07      	add	r2, sp, #28
 801f556:	a90b      	add	r1, sp, #44	@ 0x2c
 801f558:	4620      	mov	r0, r4
 801f55a:	f88d 803b 	strb.w	r8, [sp, #59]	@ 0x3b
 801f55e:	f7fe faa3 	bl	801daa8 <MobleNetworkSendDataEx>
 801f562:	f89d 3063 	ldrb.w	r3, [sp, #99]	@ 0x63
 801f566:	f99d 606c 	ldrsb.w	r6, [sp, #108]	@ 0x6c
 801f56a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f56c:	2b00      	cmp	r3, #0
 801f56e:	bf08      	it	eq
 801f570:	f8bd 0068 	ldrheq.w	r0, [sp, #104]	@ 0x68
 801f574:	f04f 0300 	mov.w	r3, #0
 801f578:	bf18      	it	ne
 801f57a:	4618      	movne	r0, r3
 801f57c:	e9cd 6001 	strd	r6, r0, [sp, #4]
 801f580:	9300      	str	r3, [sp, #0]
 801f582:	bf0c      	ite	eq
 801f584:	2102      	moveq	r1, #2
 801f586:	2103      	movne	r1, #3
 801f588:	2301      	movs	r3, #1
 801f58a:	4620      	mov	r0, r4
 801f58c:	f7fb f82f 	bl	801a5ee <BLEMesh_UpdateNeighbors>
 801f590:	e6d6      	b.n	801f340 <MobleNetworkProcessData+0x4c>
 801f592:	9305      	str	r3, [sp, #20]
 801f594:	f7fe ff22 	bl	801e3dc <MobleConfigModelGetRelayEnableStatus>
 801f598:	9b05      	ldr	r3, [sp, #20]
 801f59a:	b908      	cbnz	r0, 801f5a0 <MobleNetworkProcessData+0x2ac>
 801f59c:	067a      	lsls	r2, r7, #25
 801f59e:	d5e0      	bpl.n	801f562 <MobleNetworkProcessData+0x26e>
 801f5a0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801f5a4:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801f5a8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801f5ac:	f89d 2096 	ldrb.w	r2, [sp, #150]	@ 0x96
 801f5b0:	f88d 2048 	strb.w	r2, [sp, #72]	@ 0x48
 801f5b4:	f8bd 2098 	ldrh.w	r2, [sp, #152]	@ 0x98
 801f5b8:	f8ad 204a 	strh.w	r2, [sp, #74]	@ 0x4a
 801f5bc:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801f5c0:	f88d 204e 	strb.w	r2, [sp, #78]	@ 0x4e
 801f5c4:	4a07      	ldr	r2, [pc, #28]	@ (801f5e4 <MobleNetworkProcessData+0x2f0>)
 801f5c6:	f8ad 7046 	strh.w	r7, [sp, #70]	@ 0x46
 801f5ca:	f892 20b8 	ldrb.w	r2, [r2, #184]	@ 0xb8
 801f5ce:	e7bc      	b.n	801f54a <MobleNetworkProcessData+0x256>
 801f5d0:	0802e4b8 	.word	0x0802e4b8
 801f5d4:	0802d641 	.word	0x0802d641
 801f5d8:	0802e996 	.word	0x0802e996
 801f5dc:	0802e558 	.word	0x0802e558
 801f5e0:	20002514 	.word	0x20002514
 801f5e4:	20000324 	.word	0x20000324

0801f5e8 <MobleStackProcessData>:
 801f5e8:	b513      	push	{r0, r1, r4, lr}
 801f5ea:	f99d 4010 	ldrsb.w	r4, [sp, #16]
 801f5ee:	e9cd 3400 	strd	r3, r4, [sp]
 801f5f2:	4613      	mov	r3, r2
 801f5f4:	460a      	mov	r2, r1
 801f5f6:	4601      	mov	r1, r0
 801f5f8:	4802      	ldr	r0, [pc, #8]	@ (801f604 <MobleStackProcessData+0x1c>)
 801f5fa:	f7ff fe7b 	bl	801f2f4 <MobleNetworkProcessData>
 801f5fe:	b002      	add	sp, #8
 801f600:	bd10      	pop	{r4, pc}
 801f602:	bf00      	nop
 801f604:	20001a9c 	.word	0x20001a9c

0801f608 <MobleNetworkSendData>:
 801f608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f60c:	460d      	mov	r5, r1
 801f60e:	b098      	sub	sp, #96	@ 0x60
 801f610:	4606      	mov	r6, r0
 801f612:	4617      	mov	r7, r2
 801f614:	2100      	movs	r1, #0
 801f616:	224c      	movs	r2, #76	@ 0x4c
 801f618:	a805      	add	r0, sp, #20
 801f61a:	4698      	mov	r8, r3
 801f61c:	f007 fad8 	bl	8026bd0 <memset>
 801f620:	8aab      	ldrh	r3, [r5, #20]
 801f622:	2400      	movs	r4, #0
 801f624:	f88d 4007 	strb.w	r4, [sp, #7]
 801f628:	2b00      	cmp	r3, #0
 801f62a:	d04d      	beq.n	801f6c8 <MobleNetworkSendData+0xc0>
 801f62c:	8aeb      	ldrh	r3, [r5, #22]
 801f62e:	2b00      	cmp	r3, #0
 801f630:	d04a      	beq.n	801f6c8 <MobleNetworkSendData+0xc0>
 801f632:	f8d6 315c 	ldr.w	r3, [r6, #348]	@ 0x15c
 801f636:	612b      	str	r3, [r5, #16]
 801f638:	3301      	adds	r3, #1
 801f63a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801f63e:	f8c6 315c 	str.w	r3, [r6, #348]	@ 0x15c
 801f642:	4630      	mov	r0, r6
 801f644:	f7fa fca8 	bl	8019f98 <MobleNetworkSaveSeqNum>
 801f648:	4b28      	ldr	r3, [pc, #160]	@ (801f6ec <MobleNetworkSendData+0xe4>)
 801f64a:	8ae8      	ldrh	r0, [r5, #22]
 801f64c:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 801f650:	2b01      	cmp	r3, #1
 801f652:	bf08      	it	eq
 801f654:	8b6c      	ldrheq	r4, [r5, #26]
 801f656:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 801f65a:	bf04      	itt	eq
 801f65c:	f084 0410 	eoreq.w	r4, r4, #16
 801f660:	f3c4 1400 	ubfxeq	r4, r4, #4, #1
 801f664:	2b00      	cmp	r3, #0
 801f666:	dd33      	ble.n	801f6d0 <MobleNetworkSendData+0xc8>
 801f668:	b124      	cbz	r4, 801f674 <MobleNetworkSendData+0x6c>
 801f66a:	f7fb ff47 	bl	801b4fc <BnrgmFrndMgmtGetFriendshipStatus>
 801f66e:	fab0 f480 	clz	r4, r0
 801f672:	0964      	lsrs	r4, r4, #5
 801f674:	4643      	mov	r3, r8
 801f676:	463a      	mov	r2, r7
 801f678:	4629      	mov	r1, r5
 801f67a:	4630      	mov	r0, r6
 801f67c:	f7fe fa14 	bl	801daa8 <MobleNetworkSendDataEx>
 801f680:	b314      	cbz	r4, 801f6c8 <MobleNetworkSendData+0xc0>
 801f682:	2300      	movs	r3, #0
 801f684:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801f688:	f88d 301c 	strb.w	r3, [sp, #28]
 801f68c:	f88d 3056 	strb.w	r3, [sp, #86]	@ 0x56
 801f690:	8b6b      	ldrh	r3, [r5, #26]
 801f692:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801f696:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 801f69a:	7beb      	ldrb	r3, [r5, #15]
 801f69c:	3301      	adds	r3, #1
 801f69e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801f6a2:	692b      	ldr	r3, [r5, #16]
 801f6a4:	9309      	str	r3, [sp, #36]	@ 0x24
 801f6a6:	696b      	ldr	r3, [r5, #20]
 801f6a8:	930a      	str	r3, [sp, #40]	@ 0x28
 801f6aa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801f6ae:	2281      	movs	r2, #129	@ 0x81
 801f6b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801f6b4:	f88d 202c 	strb.w	r2, [sp, #44]	@ 0x2c
 801f6b8:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
 801f6bc:	463a      	mov	r2, r7
 801f6be:	4643      	mov	r3, r8
 801f6c0:	a905      	add	r1, sp, #20
 801f6c2:	4630      	mov	r0, r6
 801f6c4:	f7ff fcda 	bl	801f07c <MobleTransportProcessData>
 801f6c8:	2000      	movs	r0, #0
 801f6ca:	b018      	add	sp, #96	@ 0x60
 801f6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6d0:	2c00      	cmp	r4, #0
 801f6d2:	d0cf      	beq.n	801f674 <MobleNetworkSendData+0x6c>
 801f6d4:	aa02      	add	r2, sp, #8
 801f6d6:	f10d 0107 	add.w	r1, sp, #7
 801f6da:	f7fb ff35 	bl	801b548 <BnrgmFrndMgmtGetSubscrStatus>
 801f6de:	f89d 4007 	ldrb.w	r4, [sp, #7]
 801f6e2:	3c00      	subs	r4, #0
 801f6e4:	bf18      	it	ne
 801f6e6:	2401      	movne	r4, #1
 801f6e8:	e7c4      	b.n	801f674 <MobleNetworkSendData+0x6c>
 801f6ea:	bf00      	nop
 801f6ec:	20000324 	.word	0x20000324

0801f6f0 <MobleTransSarSendEx>:
 801f6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6f4:	b095      	sub	sp, #84	@ 0x54
 801f6f6:	4606      	mov	r6, r0
 801f6f8:	930a      	str	r3, [sp, #40]	@ 0x28
 801f6fa:	8bc8      	ldrh	r0, [r1, #30]
 801f6fc:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 801f700:	9208      	str	r2, [sp, #32]
 801f702:	9305      	str	r3, [sp, #20]
 801f704:	f7f8 f932 	bl	801796c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 801f708:	f8b1 901a 	ldrh.w	r9, [r1, #26]
 801f70c:	4bb3      	ldr	r3, [pc, #716]	@ (801f9dc <MobleTransSarSendEx+0x2ec>)
 801f70e:	f89d 5084 	ldrb.w	r5, [sp, #132]	@ 0x84
 801f712:	f019 0f04 	tst.w	r9, #4
 801f716:	4602      	mov	r2, r0
 801f718:	f8b3 094c 	ldrh.w	r0, [r3, #2380]	@ 0x94c
 801f71c:	bf14      	ite	ne
 801f71e:	f04f 0a08 	movne.w	sl, #8
 801f722:	f04f 0a04 	moveq.w	sl, #4
 801f726:	460c      	mov	r4, r1
 801f728:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f72a:	eba0 030a 	sub.w	r3, r0, sl
 801f72e:	428b      	cmp	r3, r1
 801f730:	f3c9 0b80 	ubfx	fp, r9, #2, #1
 801f734:	d206      	bcs.n	801f744 <MobleTransSarSendEx+0x54>
 801f736:	4baa      	ldr	r3, [pc, #680]	@ (801f9e0 <MobleTransSarSendEx+0x2f0>)
 801f738:	4aaa      	ldr	r2, [pc, #680]	@ (801f9e4 <MobleTransSarSendEx+0x2f4>)
 801f73a:	f240 6157 	movw	r1, #1623	@ 0x657
 801f73e:	48aa      	ldr	r0, [pc, #680]	@ (801f9e8 <MobleTransSarSendEx+0x2f8>)
 801f740:	f006 faa8 	bl	8025c94 <__assert_func>
 801f744:	9206      	str	r2, [sp, #24]
 801f746:	f7f8 fcef 	bl	8018128 <MobleMemAlloc>
 801f74a:	9a06      	ldr	r2, [sp, #24]
 801f74c:	4607      	mov	r7, r0
 801f74e:	b920      	cbnz	r0, 801f75a <MobleTransSarSendEx+0x6a>
 801f750:	2502      	movs	r5, #2
 801f752:	4628      	mov	r0, r5
 801f754:	b015      	add	sp, #84	@ 0x54
 801f756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f75a:	f8d6 315c 	ldr.w	r3, [r6, #348]	@ 0x15c
 801f75e:	b96d      	cbnz	r5, 801f77c <MobleTransSarSendEx+0x8c>
 801f760:	9805      	ldr	r0, [sp, #20]
 801f762:	f423 51ff 	bic.w	r1, r3, #8160	@ 0x1fe0
 801f766:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f76a:	4298      	cmp	r0, r3
 801f76c:	f021 011f 	bic.w	r1, r1, #31
 801f770:	4401      	add	r1, r0
 801f772:	bf94      	ite	ls
 801f774:	2300      	movls	r3, #0
 801f776:	2301      	movhi	r3, #1
 801f778:	eba1 3343 	sub.w	r3, r1, r3, lsl #13
 801f77c:	6831      	ldr	r1, [r6, #0]
 801f77e:	f8df 827c 	ldr.w	r8, [pc, #636]	@ 801f9fc <MobleTransSarSendEx+0x30c>
 801f782:	310c      	adds	r1, #12
 801f784:	fa58 f282 	uxtab	r2, r8, r2
 801f788:	9103      	str	r1, [sp, #12]
 801f78a:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 801f78e:	1e91      	subs	r1, r2, #2
 801f790:	424a      	negs	r2, r1
 801f792:	414a      	adcs	r2, r1
 801f794:	9202      	str	r2, [sp, #8]
 801f796:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f798:	9201      	str	r2, [sp, #4]
 801f79a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f79c:	9200      	str	r2, [sp, #0]
 801f79e:	4621      	mov	r1, r4
 801f7a0:	465a      	mov	r2, fp
 801f7a2:	4638      	mov	r0, r7
 801f7a4:	f7f9 f9b0 	bl	8018b08 <MoblePalCryptoEncryptApp>
 801f7a8:	2801      	cmp	r0, #1
 801f7aa:	d906      	bls.n	801f7ba <MobleTransSarSendEx+0xca>
 801f7ac:	9005      	str	r0, [sp, #20]
 801f7ae:	4638      	mov	r0, r7
 801f7b0:	f7f8 fd44 	bl	801823c <MobleMemFree>
 801f7b4:	9b05      	ldr	r3, [sp, #20]
 801f7b6:	461d      	mov	r5, r3
 801f7b8:	e7cb      	b.n	801f752 <MobleTransSarSendEx+0x62>
 801f7ba:	f3c9 03c0 	ubfx	r3, r9, #3, #1
 801f7be:	f019 0f08 	tst.w	r9, #8
 801f7c2:	9309      	str	r3, [sp, #36]	@ 0x24
 801f7c4:	f241 0201 	movw	r2, #4097	@ 0x1001
 801f7c8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f7ca:	bf14      	ite	ne
 801f7cc:	230b      	movne	r3, #11
 801f7ce:	230f      	moveq	r3, #15
 801f7d0:	eba3 030a 	sub.w	r3, r3, sl
 801f7d4:	ea19 0f02 	tst.w	r9, r2
 801f7d8:	bf0c      	ite	eq
 801f7da:	2201      	moveq	r2, #1
 801f7dc:	2200      	movne	r2, #0
 801f7de:	428b      	cmp	r3, r1
 801f7e0:	eb0a 0901 	add.w	r9, sl, r1
 801f7e4:	d332      	bcc.n	801f84c <MobleTransSarSendEx+0x15c>
 801f7e6:	2300      	movs	r3, #0
 801f7e8:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801f7ec:	a910      	add	r1, sp, #64	@ 0x40
 801f7ee:	9b08      	ldr	r3, [sp, #32]
 801f7f0:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801f7f4:	a80c      	add	r0, sp, #48	@ 0x30
 801f7f6:	f109 0501 	add.w	r5, r9, #1
 801f7fa:	f88d 2032 	strb.w	r2, [sp, #50]	@ 0x32
 801f7fe:	f7f9 ff5b 	bl	80196b8 <MobleTransportRenderHdr>
 801f802:	2d10      	cmp	r5, #16
 801f804:	d820      	bhi.n	801f848 <MobleTransSarSendEx+0x158>
 801f806:	464a      	mov	r2, r9
 801f808:	4639      	mov	r1, r7
 801f80a:	f10d 0041 	add.w	r0, sp, #65	@ 0x41
 801f80e:	f007 f9c5 	bl	8026b9c <memmove>
 801f812:	f898 20b6 	ldrb.w	r2, [r8, #182]	@ 0xb6
 801f816:	f898 30b5 	ldrb.w	r3, [r8, #181]	@ 0xb5
 801f81a:	73e3      	strb	r3, [r4, #15]
 801f81c:	3201      	adds	r2, #1
 801f81e:	f884 2023 	strb.w	r2, [r4, #35]	@ 0x23
 801f822:	8be0      	ldrh	r0, [r4, #30]
 801f824:	f7f8 f8a2 	bl	801796c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 801f828:	7720      	strb	r0, [r4, #28]
 801f82a:	8c20      	ldrh	r0, [r4, #32]
 801f82c:	f7f8 f8b8 	bl	80179a0 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 801f830:	4621      	mov	r1, r4
 801f832:	7760      	strb	r0, [r4, #29]
 801f834:	462b      	mov	r3, r5
 801f836:	aa10      	add	r2, sp, #64	@ 0x40
 801f838:	4630      	mov	r0, r6
 801f83a:	f7ff fee5 	bl	801f608 <MobleNetworkSendData>
 801f83e:	4605      	mov	r5, r0
 801f840:	4638      	mov	r0, r7
 801f842:	f7f8 fcfb 	bl	801823c <MobleMemFree>
 801f846:	e784      	b.n	801f752 <MobleTransSarSendEx+0x62>
 801f848:	2502      	movs	r5, #2
 801f84a:	e7f9      	b.n	801f840 <MobleTransSarSendEx+0x150>
 801f84c:	b13d      	cbz	r5, 801f85e <MobleTransSarSendEx+0x16e>
 801f84e:	f8d6 315c 	ldr.w	r3, [r6, #348]	@ 0x15c
 801f852:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f856:	9305      	str	r3, [sp, #20]
 801f858:	68b3      	ldr	r3, [r6, #8]
 801f85a:	3301      	adds	r3, #1
 801f85c:	60b3      	str	r3, [r6, #8]
 801f85e:	2301      	movs	r3, #1
 801f860:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801f864:	9b08      	ldr	r3, [sp, #32]
 801f866:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801f86a:	9b05      	ldr	r3, [sp, #20]
 801f86c:	f8ad 3035 	strh.w	r3, [sp, #53]	@ 0x35
 801f870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f872:	f88d b034 	strb.w	fp, [sp, #52]	@ 0x34
 801f876:	2b00      	cmp	r3, #0
 801f878:	bf14      	ite	ne
 801f87a:	f04f 0a08 	movne.w	sl, #8
 801f87e:	f04f 0a0c 	moveq.w	sl, #12
 801f882:	f109 33ff 	add.w	r3, r9, #4294967295
 801f886:	4453      	add	r3, sl
 801f888:	fbb3 f3fa 	udiv	r3, r3, sl
 801f88c:	3b01      	subs	r3, #1
 801f88e:	b2db      	uxtb	r3, r3
 801f890:	f04f 0800 	mov.w	r8, #0
 801f894:	f88d 2032 	strb.w	r2, [sp, #50]	@ 0x32
 801f898:	9307      	str	r3, [sp, #28]
 801f89a:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
 801f89e:	46cb      	mov	fp, r9
 801f8a0:	f8cd 8018 	str.w	r8, [sp, #24]
 801f8a4:	9b06      	ldr	r3, [sp, #24]
 801f8a6:	454b      	cmp	r3, r9
 801f8a8:	d353      	bcc.n	801f952 <MobleTransSarSendEx+0x262>
 801f8aa:	4638      	mov	r0, r7
 801f8ac:	f7f8 fcc6 	bl	801823c <MobleMemFree>
 801f8b0:	2d00      	cmp	r5, #0
 801f8b2:	f43f af4e 	beq.w	801f752 <MobleTransSarSendEx+0x62>
 801f8b6:	4f49      	ldr	r7, [pc, #292]	@ (801f9dc <MobleTransSarSendEx+0x2ec>)
 801f8b8:	f897 32e8 	ldrb.w	r3, [r7, #744]	@ 0x2e8
 801f8bc:	b12b      	cbz	r3, 801f8ca <MobleTransSarSendEx+0x1da>
 801f8be:	f897 3314 	ldrb.w	r3, [r7, #788]	@ 0x314
 801f8c2:	2b00      	cmp	r3, #0
 801f8c4:	f47f af44 	bne.w	801f750 <MobleTransSarSendEx+0x60>
 801f8c8:	2301      	movs	r3, #1
 801f8ca:	f04f 082c 	mov.w	r8, #44	@ 0x2c
 801f8ce:	fb08 f803 	mul.w	r8, r8, r3
 801f8d2:	4447      	add	r7, r8
 801f8d4:	2201      	movs	r2, #1
 801f8d6:	f887 22e8 	strb.w	r2, [r7, #744]	@ 0x2e8
 801f8da:	4a44      	ldr	r2, [pc, #272]	@ (801f9ec <MobleTransSarSendEx+0x2fc>)
 801f8dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f8de:	f882 3a3b 	strb.w	r3, [r2, #2619]	@ 0xa3b
 801f8e2:	f8d7 0300 	ldr.w	r0, [r7, #768]	@ 0x300
 801f8e6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f8e8:	f007 fa23 	bl	8026d32 <memcpy>
 801f8ec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f8ee:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 801f8f2:	8b63      	ldrh	r3, [r4, #26]
 801f8f4:	f8a7 32ea 	strh.w	r3, [r7, #746]	@ 0x2ea
 801f8f8:	9b08      	ldr	r3, [sp, #32]
 801f8fa:	f887 32ec 	strb.w	r3, [r7, #748]	@ 0x2ec
 801f8fe:	8c23      	ldrh	r3, [r4, #32]
 801f900:	f8a7 32ee 	strh.w	r3, [r7, #750]	@ 0x2ee
 801f904:	8be3      	ldrh	r3, [r4, #30]
 801f906:	f8a7 32f0 	strh.w	r3, [r7, #752]	@ 0x2f0
 801f90a:	8aa3      	ldrh	r3, [r4, #20]
 801f90c:	f8a7 32f4 	strh.w	r3, [r7, #756]	@ 0x2f4
 801f910:	8ae3      	ldrh	r3, [r4, #22]
 801f912:	f8a7 32f2 	strh.w	r3, [r7, #754]	@ 0x2f2
 801f916:	4836      	ldr	r0, [pc, #216]	@ (801f9f0 <MobleTransSarSendEx+0x300>)
 801f918:	9b05      	ldr	r3, [sp, #20]
 801f91a:	f8a7 32f6 	strh.w	r3, [r7, #758]	@ 0x2f6
 801f91e:	2500      	movs	r5, #0
 801f920:	9b07      	ldr	r3, [sp, #28]
 801f922:	4934      	ldr	r1, [pc, #208]	@ (801f9f4 <MobleTransSarSendEx+0x304>)
 801f924:	f8a7 32f8 	strh.w	r3, [r7, #760]	@ 0x2f8
 801f928:	f108 0208 	add.w	r2, r8, #8
 801f92c:	f108 0828 	add.w	r8, r8, #40	@ 0x28
 801f930:	4402      	add	r2, r0
 801f932:	f8c7 52fc 	str.w	r5, [r7, #764]	@ 0x2fc
 801f936:	f8c7 6310 	str.w	r6, [r7, #784]	@ 0x310
 801f93a:	f887 530c 	strb.w	r5, [r7, #780]	@ 0x30c
 801f93e:	4440      	add	r0, r8
 801f940:	f7f5 fa56 	bl	8014df0 <MoblePalTimerCreate>
 801f944:	f8d7 0308 	ldr.w	r0, [r7, #776]	@ 0x308
 801f948:	f241 3188 	movw	r1, #5000	@ 0x1388
 801f94c:	f7f5 fa89 	bl	8014e62 <MoblePalTimerStart>
 801f950:	e6ff      	b.n	801f752 <MobleTransSarSendEx+0x62>
 801f952:	b92d      	cbnz	r5, 801f960 <MobleTransSarSendEx+0x270>
 801f954:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801f956:	2301      	movs	r3, #1
 801f958:	fa03 f308 	lsl.w	r3, r3, r8
 801f95c:	4213      	tst	r3, r2
 801f95e:	d134      	bne.n	801f9ca <MobleTransSarSendEx+0x2da>
 801f960:	a910      	add	r1, sp, #64	@ 0x40
 801f962:	a80c      	add	r0, sp, #48	@ 0x30
 801f964:	f88d 8037 	strb.w	r8, [sp, #55]	@ 0x37
 801f968:	f7f9 fea6 	bl	80196b8 <MobleTransportRenderHdr>
 801f96c:	9b07      	ldr	r3, [sp, #28]
 801f96e:	4543      	cmp	r3, r8
 801f970:	d108      	bne.n	801f984 <MobleTransSarSendEx+0x294>
 801f972:	f1bb 0f0c 	cmp.w	fp, #12
 801f976:	465a      	mov	r2, fp
 801f978:	dd09      	ble.n	801f98e <MobleTransSarSendEx+0x29e>
 801f97a:	4b1f      	ldr	r3, [pc, #124]	@ (801f9f8 <MobleTransSarSendEx+0x308>)
 801f97c:	4a19      	ldr	r2, [pc, #100]	@ (801f9e4 <MobleTransSarSendEx+0x2f4>)
 801f97e:	f240 61de 	movw	r1, #1758	@ 0x6de
 801f982:	e6dc      	b.n	801f73e <MobleTransSarSendEx+0x4e>
 801f984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f986:	2b00      	cmp	r3, #0
 801f988:	bf0c      	ite	eq
 801f98a:	220c      	moveq	r2, #12
 801f98c:	2208      	movne	r2, #8
 801f98e:	9b06      	ldr	r3, [sp, #24]
 801f990:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f992:	18f9      	adds	r1, r7, r3
 801f994:	a811      	add	r0, sp, #68	@ 0x44
 801f996:	f007 f9cc 	bl	8026d32 <memcpy>
 801f99a:	4a18      	ldr	r2, [pc, #96]	@ (801f9fc <MobleTransSarSendEx+0x30c>)
 801f99c:	8be0      	ldrh	r0, [r4, #30]
 801f99e:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 801f9a2:	73e3      	strb	r3, [r4, #15]
 801f9a4:	f892 30b6 	ldrb.w	r3, [r2, #182]	@ 0xb6
 801f9a8:	3301      	adds	r3, #1
 801f9aa:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
 801f9ae:	f7f7 ffdd 	bl	801796c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 801f9b2:	7720      	strb	r0, [r4, #28]
 801f9b4:	8c20      	ldrh	r0, [r4, #32]
 801f9b6:	f7f7 fff3 	bl	80179a0 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 801f9ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f9bc:	7760      	strb	r0, [r4, #29]
 801f9be:	1d13      	adds	r3, r2, #4
 801f9c0:	4621      	mov	r1, r4
 801f9c2:	aa10      	add	r2, sp, #64	@ 0x40
 801f9c4:	4630      	mov	r0, r6
 801f9c6:	f7ff fe1f 	bl	801f608 <MobleNetworkSendData>
 801f9ca:	9b06      	ldr	r3, [sp, #24]
 801f9cc:	4453      	add	r3, sl
 801f9ce:	f108 0801 	add.w	r8, r8, #1
 801f9d2:	9306      	str	r3, [sp, #24]
 801f9d4:	ebab 0b0a 	sub.w	fp, fp, sl
 801f9d8:	e764      	b.n	801f8a4 <MobleTransSarSendEx+0x1b4>
 801f9da:	bf00      	nop
 801f9dc:	2000141c 	.word	0x2000141c
 801f9e0:	0802ec3b 	.word	0x0802ec3b
 801f9e4:	0802d659 	.word	0x0802d659
 801f9e8:	0802e948 	.word	0x0802e948
 801f9ec:	20002514 	.word	0x20002514
 801f9f0:	200016fc 	.word	0x200016fc
 801f9f4:	0801fb41 	.word	0x0801fb41
 801f9f8:	0802ec75 	.word	0x0802ec75
 801f9fc:	20000324 	.word	0x20000324

0801fa00 <MobleTransSarProcessAck>:
 801fa00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa04:	460d      	mov	r5, r1
 801fa06:	b090      	sub	sp, #64	@ 0x40
 801fa08:	4617      	mov	r7, r2
 801fa0a:	4698      	mov	r8, r3
 801fa0c:	4606      	mov	r6, r0
 801fa0e:	b930      	cbnz	r0, 801fa1e <MobleTransSarProcessAck+0x1e>
 801fa10:	4b45      	ldr	r3, [pc, #276]	@ (801fb28 <MobleTransSarProcessAck+0x128>)
 801fa12:	4a46      	ldr	r2, [pc, #280]	@ (801fb2c <MobleTransSarProcessAck+0x12c>)
 801fa14:	4846      	ldr	r0, [pc, #280]	@ (801fb30 <MobleTransSarProcessAck+0x130>)
 801fa16:	f240 51e1 	movw	r1, #1505	@ 0x5e1
 801fa1a:	f006 f93b 	bl	8025c94 <__assert_func>
 801fa1e:	4c45      	ldr	r4, [pc, #276]	@ (801fb34 <MobleTransSarProcessAck+0x134>)
 801fa20:	2228      	movs	r2, #40	@ 0x28
 801fa22:	2100      	movs	r1, #0
 801fa24:	a806      	add	r0, sp, #24
 801fa26:	f007 f8d3 	bl	8026bd0 <memset>
 801fa2a:	f894 32e8 	ldrb.w	r3, [r4, #744]	@ 0x2e8
 801fa2e:	b153      	cbz	r3, 801fa46 <MobleTransSarProcessAck+0x46>
 801fa30:	f8b4 22f6 	ldrh.w	r2, [r4, #758]	@ 0x2f6
 801fa34:	f8b7 3003 	ldrh.w	r3, [r7, #3]
 801fa38:	429a      	cmp	r2, r3
 801fa3a:	d104      	bne.n	801fa46 <MobleTransSarProcessAck+0x46>
 801fa3c:	f8b4 22f4 	ldrh.w	r2, [r4, #756]	@ 0x2f4
 801fa40:	8aeb      	ldrh	r3, [r5, #22]
 801fa42:	429a      	cmp	r2, r3
 801fa44:	d02b      	beq.n	801fa9e <MobleTransSarProcessAck+0x9e>
 801fa46:	f894 3314 	ldrb.w	r3, [r4, #788]	@ 0x314
 801fa4a:	b323      	cbz	r3, 801fa96 <MobleTransSarProcessAck+0x96>
 801fa4c:	f8b4 2322 	ldrh.w	r2, [r4, #802]	@ 0x322
 801fa50:	f8b7 3003 	ldrh.w	r3, [r7, #3]
 801fa54:	429a      	cmp	r2, r3
 801fa56:	d11e      	bne.n	801fa96 <MobleTransSarProcessAck+0x96>
 801fa58:	f8b4 2320 	ldrh.w	r2, [r4, #800]	@ 0x320
 801fa5c:	8aeb      	ldrh	r3, [r5, #22]
 801fa5e:	429a      	cmp	r2, r3
 801fa60:	d119      	bne.n	801fa96 <MobleTransSarProcessAck+0x96>
 801fa62:	2501      	movs	r5, #1
 801fa64:	232c      	movs	r3, #44	@ 0x2c
 801fa66:	435d      	muls	r5, r3
 801fa68:	f8d8 0000 	ldr.w	r0, [r8]
 801fa6c:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 801fb3c <MobleTransSarProcessAck+0x13c>
 801fa70:	442c      	add	r4, r5
 801fa72:	f7f5 f817 	bl	8014aa4 <htobe32>
 801fa76:	f8d4 32fc 	ldr.w	r3, [r4, #764]	@ 0x2fc
 801fa7a:	4303      	orrs	r3, r0
 801fa7c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 801fa80:	f8c4 32fc 	str.w	r3, [r4, #764]	@ 0x2fc
 801fa84:	4440      	add	r0, r8
 801fa86:	b963      	cbnz	r3, 801faa2 <MobleTransSarProcessAck+0xa2>
 801fa88:	f884 32e8 	strb.w	r3, [r4, #744]	@ 0x2e8
 801fa8c:	f7f5 fa6a 	bl	8014f64 <MobleTransEraseTimer>
 801fa90:	68b3      	ldr	r3, [r6, #8]
 801fa92:	3b01      	subs	r3, #1
 801fa94:	60b3      	str	r3, [r6, #8]
 801fa96:	2000      	movs	r0, #0
 801fa98:	b010      	add	sp, #64	@ 0x40
 801fa9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa9e:	2500      	movs	r5, #0
 801faa0:	e7e0      	b.n	801fa64 <MobleTransSarProcessAck+0x64>
 801faa2:	f8b4 72f8 	ldrh.w	r7, [r4, #760]	@ 0x2f8
 801faa6:	2101      	movs	r1, #1
 801faa8:	3701      	adds	r7, #1
 801faaa:	40b9      	lsls	r1, r7
 801faac:	3901      	subs	r1, #1
 801faae:	428b      	cmp	r3, r1
 801fab0:	d101      	bne.n	801fab6 <MobleTransSarProcessAck+0xb6>
 801fab2:	2300      	movs	r3, #0
 801fab4:	e7e8      	b.n	801fa88 <MobleTransSarProcessAck+0x88>
 801fab6:	3508      	adds	r5, #8
 801fab8:	9005      	str	r0, [sp, #20]
 801faba:	f7f5 fa53 	bl	8014f64 <MobleTransEraseTimer>
 801fabe:	eb08 0205 	add.w	r2, r8, r5
 801fac2:	491d      	ldr	r1, [pc, #116]	@ (801fb38 <MobleTransSarProcessAck+0x138>)
 801fac4:	9805      	ldr	r0, [sp, #20]
 801fac6:	f7f5 f993 	bl	8014df0 <MoblePalTimerCreate>
 801faca:	f8d4 0308 	ldr.w	r0, [r4, #776]	@ 0x308
 801face:	f241 3188 	movw	r1, #5000	@ 0x1388
 801fad2:	f7f5 f9c6 	bl	8014e62 <MoblePalTimerStart>
 801fad6:	f8b4 32ea 	ldrh.w	r3, [r4, #746]	@ 0x2ea
 801fada:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801fade:	f8b4 32ee 	ldrh.w	r3, [r4, #750]	@ 0x2ee
 801fae2:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801fae6:	f8b4 32f0 	ldrh.w	r3, [r4, #752]	@ 0x2f0
 801faea:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801faee:	f8b4 32f4 	ldrh.w	r3, [r4, #756]	@ 0x2f4
 801faf2:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801faf6:	f8b4 32f2 	ldrh.w	r3, [r4, #754]	@ 0x2f2
 801fafa:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801fafe:	2300      	movs	r3, #0
 801fb00:	9303      	str	r3, [sp, #12]
 801fb02:	f8b4 32f6 	ldrh.w	r3, [r4, #758]	@ 0x2f6
 801fb06:	9302      	str	r3, [sp, #8]
 801fb08:	f8d4 32fc 	ldr.w	r3, [r4, #764]	@ 0x2fc
 801fb0c:	9301      	str	r3, [sp, #4]
 801fb0e:	f8d4 3304 	ldr.w	r3, [r4, #772]	@ 0x304
 801fb12:	9300      	str	r3, [sp, #0]
 801fb14:	f8d4 3300 	ldr.w	r3, [r4, #768]	@ 0x300
 801fb18:	f894 22ec 	ldrb.w	r2, [r4, #748]	@ 0x2ec
 801fb1c:	a906      	add	r1, sp, #24
 801fb1e:	4630      	mov	r0, r6
 801fb20:	f7ff fde6 	bl	801f6f0 <MobleTransSarSendEx>
 801fb24:	e7b7      	b.n	801fa96 <MobleTransSarProcessAck+0x96>
 801fb26:	bf00      	nop
 801fb28:	0802e4b8 	.word	0x0802e4b8
 801fb2c:	0802d66d 	.word	0x0802d66d
 801fb30:	0802e948 	.word	0x0802e948
 801fb34:	2000141c 	.word	0x2000141c
 801fb38:	0801fb41 	.word	0x0801fb41
 801fb3c:	200016fc 	.word	0x200016fc

0801fb40 <MobleTransSarOnRetransmit>:
 801fb40:	b510      	push	{r4, lr}
 801fb42:	460c      	mov	r4, r1
 801fb44:	b08e      	sub	sp, #56	@ 0x38
 801fb46:	2228      	movs	r2, #40	@ 0x28
 801fb48:	2100      	movs	r1, #0
 801fb4a:	a804      	add	r0, sp, #16
 801fb4c:	f007 f840 	bl	8026bd0 <memset>
 801fb50:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 801fb54:	2b03      	cmp	r3, #3
 801fb56:	d90b      	bls.n	801fb70 <MobleTransSarOnRetransmit+0x30>
 801fb58:	f104 0020 	add.w	r0, r4, #32
 801fb5c:	f7f5 fa02 	bl	8014f64 <MobleTransEraseTimer>
 801fb60:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 801fb62:	6893      	ldr	r3, [r2, #8]
 801fb64:	3b01      	subs	r3, #1
 801fb66:	6093      	str	r3, [r2, #8]
 801fb68:	2300      	movs	r3, #0
 801fb6a:	7023      	strb	r3, [r4, #0]
 801fb6c:	b00e      	add	sp, #56	@ 0x38
 801fb6e:	bd10      	pop	{r4, pc}
 801fb70:	3301      	adds	r3, #1
 801fb72:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 801fb76:	8863      	ldrh	r3, [r4, #2]
 801fb78:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801fb7c:	88e3      	ldrh	r3, [r4, #6]
 801fb7e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801fb82:	8923      	ldrh	r3, [r4, #8]
 801fb84:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801fb88:	89a3      	ldrh	r3, [r4, #12]
 801fb8a:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801fb8e:	8963      	ldrh	r3, [r4, #10]
 801fb90:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801fb94:	2300      	movs	r3, #0
 801fb96:	9303      	str	r3, [sp, #12]
 801fb98:	89e3      	ldrh	r3, [r4, #14]
 801fb9a:	9302      	str	r3, [sp, #8]
 801fb9c:	6963      	ldr	r3, [r4, #20]
 801fb9e:	9301      	str	r3, [sp, #4]
 801fba0:	69e3      	ldr	r3, [r4, #28]
 801fba2:	9300      	str	r3, [sp, #0]
 801fba4:	7922      	ldrb	r2, [r4, #4]
 801fba6:	69a3      	ldr	r3, [r4, #24]
 801fba8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801fbaa:	a904      	add	r1, sp, #16
 801fbac:	f7ff fda0 	bl	801f6f0 <MobleTransSarSendEx>
 801fbb0:	e7dc      	b.n	801fb6c <MobleTransSarOnRetransmit+0x2c>
	...

0801fbb4 <MobleTransSarSend>:
 801fbb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fbb6:	b930      	cbnz	r0, 801fbc6 <MobleTransSarSend+0x12>
 801fbb8:	4b09      	ldr	r3, [pc, #36]	@ (801fbe0 <MobleTransSarSend+0x2c>)
 801fbba:	4a0a      	ldr	r2, [pc, #40]	@ (801fbe4 <MobleTransSarSend+0x30>)
 801fbbc:	480a      	ldr	r0, [pc, #40]	@ (801fbe8 <MobleTransSarSend+0x34>)
 801fbbe:	f240 714d 	movw	r1, #1869	@ 0x74d
 801fbc2:	f006 f867 	bl	8025c94 <__assert_func>
 801fbc6:	2400      	movs	r4, #0
 801fbc8:	f04f 0c01 	mov.w	ip, #1
 801fbcc:	e9cd 4c02 	strd	r4, ip, [sp, #8]
 801fbd0:	9401      	str	r4, [sp, #4]
 801fbd2:	9c06      	ldr	r4, [sp, #24]
 801fbd4:	9400      	str	r4, [sp, #0]
 801fbd6:	f7ff fd8b 	bl	801f6f0 <MobleTransSarSendEx>
 801fbda:	b004      	add	sp, #16
 801fbdc:	bd10      	pop	{r4, pc}
 801fbde:	bf00      	nop
 801fbe0:	0802e4b8 	.word	0x0802e4b8
 801fbe4:	0802d685 	.word	0x0802d685
 801fbe8:	0802e948 	.word	0x0802e948

0801fbec <MobleTransportSendData>:
 801fbec:	b570      	push	{r4, r5, r6, lr}
 801fbee:	9d04      	ldr	r5, [sp, #16]
 801fbf0:	b930      	cbnz	r0, 801fc00 <MobleTransportSendData+0x14>
 801fbf2:	4b09      	ldr	r3, [pc, #36]	@ (801fc18 <MobleTransportSendData+0x2c>)
 801fbf4:	4a09      	ldr	r2, [pc, #36]	@ (801fc1c <MobleTransportSendData+0x30>)
 801fbf6:	f44f 711a 	mov.w	r1, #616	@ 0x268
 801fbfa:	4809      	ldr	r0, [pc, #36]	@ (801fc20 <MobleTransportSendData+0x34>)
 801fbfc:	f006 f84a 	bl	8025c94 <__assert_func>
 801fc00:	b923      	cbnz	r3, 801fc0c <MobleTransportSendData+0x20>
 801fc02:	4b08      	ldr	r3, [pc, #32]	@ (801fc24 <MobleTransportSendData+0x38>)
 801fc04:	4a05      	ldr	r2, [pc, #20]	@ (801fc1c <MobleTransportSendData+0x30>)
 801fc06:	f240 2169 	movw	r1, #617	@ 0x269
 801fc0a:	e7f6      	b.n	801fbfa <MobleTransportSendData+0xe>
 801fc0c:	9504      	str	r5, [sp, #16]
 801fc0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fc12:	f7ff bfcf 	b.w	801fbb4 <MobleTransSarSend>
 801fc16:	bf00      	nop
 801fc18:	0802e4b8 	.word	0x0802e4b8
 801fc1c:	0802d697 	.word	0x0802d697
 801fc20:	0802e7f8 	.word	0x0802e7f8
 801fc24:	0802ecbd 	.word	0x0802ecbd

0801fc28 <MobleApplicationSendPacket>:
 801fc28:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801fc2c:	4607      	mov	r7, r0
 801fc2e:	f103 0020 	add.w	r0, r3, #32
 801fc32:	460e      	mov	r6, r1
 801fc34:	461c      	mov	r4, r3
 801fc36:	4690      	mov	r8, r2
 801fc38:	f7f8 fa76 	bl	8018128 <MobleMemAlloc>
 801fc3c:	8ab3      	ldrh	r3, [r6, #20]
 801fc3e:	f896 901d 	ldrb.w	r9, [r6, #29]
 801fc42:	f896 a01c 	ldrb.w	sl, [r6, #28]
 801fc46:	8103      	strh	r3, [r0, #8]
 801fc48:	8af3      	ldrh	r3, [r6, #22]
 801fc4a:	f880 900c 	strb.w	r9, [r0, #12]
 801fc4e:	8143      	strh	r3, [r0, #10]
 801fc50:	8c33      	ldrh	r3, [r6, #32]
 801fc52:	f880 a010 	strb.w	sl, [r0, #16]
 801fc56:	81c3      	strh	r3, [r0, #14]
 801fc58:	8bf3      	ldrh	r3, [r6, #30]
 801fc5a:	8243      	strh	r3, [r0, #18]
 801fc5c:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 801fc60:	7503      	strb	r3, [r0, #20]
 801fc62:	8b73      	ldrh	r3, [r6, #26]
 801fc64:	43db      	mvns	r3, r3
 801fc66:	f003 0301 	and.w	r3, r3, #1
 801fc6a:	7543      	strb	r3, [r0, #21]
 801fc6c:	f896 3026 	ldrb.w	r3, [r6, #38]	@ 0x26
 801fc70:	7583      	strb	r3, [r0, #22]
 801fc72:	4605      	mov	r5, r0
 801fc74:	4622      	mov	r2, r4
 801fc76:	4641      	mov	r1, r8
 801fc78:	3020      	adds	r0, #32
 801fc7a:	f006 ff8f 	bl	8026b9c <memmove>
 801fc7e:	61ec      	str	r4, [r5, #28]
 801fc80:	b92f      	cbnz	r7, 801fc8e <MobleApplicationSendPacket+0x66>
 801fc82:	4b2c      	ldr	r3, [pc, #176]	@ (801fd34 <MobleApplicationSendPacket+0x10c>)
 801fc84:	4a2c      	ldr	r2, [pc, #176]	@ (801fd38 <MobleApplicationSendPacket+0x110>)
 801fc86:	482d      	ldr	r0, [pc, #180]	@ (801fd3c <MobleApplicationSendPacket+0x114>)
 801fc88:	21a6      	movs	r1, #166	@ 0xa6
 801fc8a:	f006 f803 	bl	8025c94 <__assert_func>
 801fc8e:	1e63      	subs	r3, r4, #1
 801fc90:	2b9b      	cmp	r3, #155	@ 0x9b
 801fc92:	d84c      	bhi.n	801fd2e <MobleApplicationSendPacket+0x106>
 801fc94:	4b2a      	ldr	r3, [pc, #168]	@ (801fd40 <MobleApplicationSendPacket+0x118>)
 801fc96:	4453      	add	r3, sl
 801fc98:	4649      	mov	r1, r9
 801fc9a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 801fc9e:	2b02      	cmp	r3, #2
 801fca0:	bf0c      	ite	eq
 801fca2:	2001      	moveq	r0, #1
 801fca4:	2000      	movne	r0, #0
 801fca6:	d01b      	beq.n	801fce0 <MobleApplicationSendPacket+0xb8>
 801fca8:	f7f6 fce8 	bl	801667c <MoblePalCryptoGetApplicationSecurityKeys>
 801fcac:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 801fcb0:	9400      	str	r4, [sp, #0]
 801fcb2:	4643      	mov	r3, r8
 801fcb4:	4631      	mov	r1, r6
 801fcb6:	4638      	mov	r0, r7
 801fcb8:	f7ff ff98 	bl	801fbec <MobleTransportSendData>
 801fcbc:	2801      	cmp	r0, #1
 801fcbe:	4604      	mov	r4, r0
 801fcc0:	d82f      	bhi.n	801fd22 <MobleApplicationSendPacket+0xfa>
 801fcc2:	683b      	ldr	r3, [r7, #0]
 801fcc4:	8af1      	ldrh	r1, [r6, #22]
 801fcc6:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 801fcca:	7f18      	ldrb	r0, [r3, #28]
 801fccc:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 801fcd0:	2b00      	cmp	r3, #0
 801fcd2:	dc2a      	bgt.n	801fd2a <MobleApplicationSendPacket+0x102>
 801fcd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801fcd8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801fcdc:	d11e      	bne.n	801fd1c <MobleApplicationSendPacket+0xf4>
 801fcde:	e00c      	b.n	801fcfa <MobleApplicationSendPacket+0xd2>
 801fce0:	f7f6 fccc 	bl	801667c <MoblePalCryptoGetApplicationSecurityKeys>
 801fce4:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801fce8:	e7e2      	b.n	801fcb0 <MobleApplicationSendPacket+0x88>
 801fcea:	eb0c 0203 	add.w	r2, ip, r3
 801fcee:	b292      	uxth	r2, r2
 801fcf0:	4291      	cmp	r1, r2
 801fcf2:	d10f      	bne.n	801fd14 <MobleApplicationSendPacket+0xec>
 801fcf4:	8ab3      	ldrh	r3, [r6, #20]
 801fcf6:	428b      	cmp	r3, r1
 801fcf8:	d010      	beq.n	801fd1c <MobleApplicationSendPacket+0xf4>
 801fcfa:	4629      	mov	r1, r5
 801fcfc:	4638      	mov	r0, r7
 801fcfe:	f7f9 f9a5 	bl	801904c <MobleApplicationPassPacketsToSIGModels>
 801fd02:	2801      	cmp	r0, #1
 801fd04:	4604      	mov	r4, r0
 801fd06:	d909      	bls.n	801fd1c <MobleApplicationSendPacket+0xf4>
 801fd08:	4629      	mov	r1, r5
 801fd0a:	4638      	mov	r0, r7
 801fd0c:	f7f9 faae 	bl	801926c <MobleApplicationPassPacketsToVENDORModelsNew>
 801fd10:	4604      	mov	r4, r0
 801fd12:	e003      	b.n	801fd1c <MobleApplicationSendPacket+0xf4>
 801fd14:	3301      	adds	r3, #1
 801fd16:	b2da      	uxtb	r2, r3
 801fd18:	4290      	cmp	r0, r2
 801fd1a:	d8e6      	bhi.n	801fcea <MobleApplicationSendPacket+0xc2>
 801fd1c:	4628      	mov	r0, r5
 801fd1e:	f7f8 fa8d 	bl	801823c <MobleMemFree>
 801fd22:	4620      	mov	r0, r4
 801fd24:	b002      	add	sp, #8
 801fd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fd2a:	2300      	movs	r3, #0
 801fd2c:	e7f3      	b.n	801fd16 <MobleApplicationSendPacket+0xee>
 801fd2e:	2403      	movs	r4, #3
 801fd30:	e7f7      	b.n	801fd22 <MobleApplicationSendPacket+0xfa>
 801fd32:	bf00      	nop
 801fd34:	0802e4b8 	.word	0x0802e4b8
 801fd38:	0802d6ae 	.word	0x0802d6ae
 801fd3c:	0802e7a8 	.word	0x0802e7a8
 801fd40:	20000324 	.word	0x20000324

0801fd44 <MobleModelSendPacket>:
 801fd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd46:	b08b      	sub	sp, #44	@ 0x2c
 801fd48:	4606      	mov	r6, r0
 801fd4a:	460f      	mov	r7, r1
 801fd4c:	4615      	mov	r5, r2
 801fd4e:	461c      	mov	r4, r3
 801fd50:	2228      	movs	r2, #40	@ 0x28
 801fd52:	2100      	movs	r1, #0
 801fd54:	4668      	mov	r0, sp
 801fd56:	f006 ff3b 	bl	8026bd0 <memset>
 801fd5a:	b934      	cbnz	r4, 801fd6a <MobleModelSendPacket+0x26>
 801fd5c:	4b23      	ldr	r3, [pc, #140]	@ (801fdec <MobleModelSendPacket+0xa8>)
 801fd5e:	4a24      	ldr	r2, [pc, #144]	@ (801fdf0 <MobleModelSendPacket+0xac>)
 801fd60:	4824      	ldr	r0, [pc, #144]	@ (801fdf4 <MobleModelSendPacket+0xb0>)
 801fd62:	f44f 718b 	mov.w	r1, #278	@ 0x116
 801fd66:	f005 ff95 	bl	8025c94 <__assert_func>
 801fd6a:	4b23      	ldr	r3, [pc, #140]	@ (801fdf8 <MobleModelSendPacket+0xb4>)
 801fd6c:	f8d4 c0a3 	ldr.w	ip, [r4, #163]	@ 0xa3
 801fd70:	f8b3 3950 	ldrh.w	r3, [r3, #2384]	@ 0x950
 801fd74:	459c      	cmp	ip, r3
 801fd76:	d837      	bhi.n	801fde8 <MobleModelSendPacket+0xa4>
 801fd78:	6822      	ldr	r2, [r4, #0]
 801fd7a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801fd7e:	f003 00c0 	and.w	r0, r3, #192	@ 0xc0
 801fd82:	28c0      	cmp	r0, #192	@ 0xc0
 801fd84:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801fd88:	b2d2      	uxtb	r2, r2
 801fd8a:	d127      	bne.n	801fddc <MobleModelSendPacket+0x98>
 801fd8c:	7163      	strb	r3, [r4, #5]
 801fd8e:	71a1      	strb	r1, [r4, #6]
 801fd90:	2303      	movs	r3, #3
 801fd92:	71e2      	strb	r2, [r4, #7]
 801fd94:	6828      	ldr	r0, [r5, #0]
 801fd96:	6869      	ldr	r1, [r5, #4]
 801fd98:	f8ad 701a 	strh.w	r7, [sp, #26]
 801fd9c:	aa03      	add	r2, sp, #12
 801fd9e:	c203      	stmia	r2!, {r0, r1}
 801fda0:	896a      	ldrh	r2, [r5, #10]
 801fda2:	f8ad 2014 	strh.w	r2, [sp, #20]
 801fda6:	892a      	ldrh	r2, [r5, #8]
 801fda8:	f8ad 2016 	strh.w	r2, [sp, #22]
 801fdac:	7daa      	ldrb	r2, [r5, #22]
 801fdae:	f88d 2026 	strb.w	r2, [sp, #38]	@ 0x26
 801fdb2:	89ea      	ldrh	r2, [r5, #14]
 801fdb4:	f8ad 2020 	strh.w	r2, [sp, #32]
 801fdb8:	8a6a      	ldrh	r2, [r5, #18]
 801fdba:	f8ad 201e 	strh.w	r2, [sp, #30]
 801fdbe:	7c2a      	ldrb	r2, [r5, #16]
 801fdc0:	f88d 201c 	strb.w	r2, [sp, #28]
 801fdc4:	7b2a      	ldrb	r2, [r5, #12]
 801fdc6:	f88d 201d 	strb.w	r2, [sp, #29]
 801fdca:	1ae2      	subs	r2, r4, r3
 801fdcc:	3208      	adds	r2, #8
 801fdce:	4463      	add	r3, ip
 801fdd0:	4669      	mov	r1, sp
 801fdd2:	4630      	mov	r0, r6
 801fdd4:	f7ff ff28 	bl	801fc28 <MobleApplicationSendPacket>
 801fdd8:	b00b      	add	sp, #44	@ 0x2c
 801fdda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fddc:	060b      	lsls	r3, r1, #24
 801fdde:	bf46      	itte	mi
 801fde0:	71a1      	strbmi	r1, [r4, #6]
 801fde2:	2302      	movmi	r3, #2
 801fde4:	2301      	movpl	r3, #1
 801fde6:	e7d4      	b.n	801fd92 <MobleModelSendPacket+0x4e>
 801fde8:	2001      	movs	r0, #1
 801fdea:	e7f5      	b.n	801fdd8 <MobleModelSendPacket+0x94>
 801fdec:	0802ecc8 	.word	0x0802ecc8
 801fdf0:	0802d6c9 	.word	0x0802d6c9
 801fdf4:	0802eb9e 	.word	0x0802eb9e
 801fdf8:	2000141c 	.word	0x2000141c

0801fdfc <BnrgmHealthModel_ProcessPeriodSet>:
 801fdfc:	b430      	push	{r4, r5}
 801fdfe:	460a      	mov	r2, r1
 801fe00:	7819      	ldrb	r1, [r3, #0]
 801fe02:	9c03      	ldr	r4, [sp, #12]
 801fe04:	290f      	cmp	r1, #15
 801fe06:	d819      	bhi.n	801fe3c <BnrgmHealthModel_ProcessPeriodSet+0x40>
 801fe08:	6803      	ldr	r3, [r0, #0]
 801fe0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fe0c:	2537      	movs	r5, #55	@ 0x37
 801fe0e:	f883 106d 	strb.w	r1, [r3, #109]	@ 0x6d
 801fe12:	2300      	movs	r3, #0
 801fe14:	7025      	strb	r5, [r4, #0]
 801fe16:	7221      	strb	r1, [r4, #8]
 801fe18:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 801fe1c:	2101      	movs	r1, #1
 801fe1e:	70a3      	strb	r3, [r4, #2]
 801fe20:	70e3      	strb	r3, [r4, #3]
 801fe22:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 801fe26:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
 801fe2a:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
 801fe2e:	7065      	strb	r5, [r4, #1]
 801fe30:	f884 10a3 	strb.w	r1, [r4, #163]	@ 0xa3
 801fe34:	4623      	mov	r3, r4
 801fe36:	bc30      	pop	{r4, r5}
 801fe38:	f7ff bf84 	b.w	801fd44 <MobleModelSendPacket>
 801fe3c:	2003      	movs	r0, #3
 801fe3e:	bc30      	pop	{r4, r5}
 801fe40:	4770      	bx	lr

0801fe42 <BnrgmHealthModel_SendFaultStatus>:
 801fe42:	b4f0      	push	{r4, r5, r6, r7}
 801fe44:	9d04      	ldr	r5, [sp, #16]
 801fe46:	f8a5 3009 	strh.w	r3, [r5, #9]
 801fe4a:	6803      	ldr	r3, [r0, #0]
 801fe4c:	722a      	strb	r2, [r5, #8]
 801fe4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fe50:	2400      	movs	r4, #0
 801fe52:	2605      	movs	r6, #5
 801fe54:	f103 0253 	add.w	r2, r3, #83	@ 0x53
 801fe58:	702e      	strb	r6, [r5, #0]
 801fe5a:	706c      	strb	r4, [r5, #1]
 801fe5c:	70ac      	strb	r4, [r5, #2]
 801fe5e:	70ec      	strb	r4, [r5, #3]
 801fe60:	335b      	adds	r3, #91	@ 0x5b
 801fe62:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 801fe66:	b11e      	cbz	r6, 801fe70 <BnrgmHealthModel_SendFaultStatus+0x2e>
 801fe68:	192f      	adds	r7, r5, r4
 801fe6a:	3401      	adds	r4, #1
 801fe6c:	72fe      	strb	r6, [r7, #11]
 801fe6e:	b2e4      	uxtb	r4, r4
 801fe70:	429a      	cmp	r2, r3
 801fe72:	d1f6      	bne.n	801fe62 <BnrgmHealthModel_SendFaultStatus+0x20>
 801fe74:	3403      	adds	r4, #3
 801fe76:	f8c5 40a3 	str.w	r4, [r5, #163]	@ 0xa3
 801fe7a:	462b      	mov	r3, r5
 801fe7c:	460a      	mov	r2, r1
 801fe7e:	bcf0      	pop	{r4, r5, r6, r7}
 801fe80:	2101      	movs	r1, #1
 801fe82:	f7ff bf5f 	b.w	801fd44 <MobleModelSendPacket>
	...

0801fe88 <BnrgmHealthModel_ProcessFaultTest>:
 801fe88:	b470      	push	{r4, r5, r6}
 801fe8a:	4a0d      	ldr	r2, [pc, #52]	@ (801fec0 <BnrgmHealthModel_ProcessFaultTest+0x38>)
 801fe8c:	781c      	ldrb	r4, [r3, #0]
 801fe8e:	f892 2f20 	ldrb.w	r2, [r2, #3872]	@ 0xf20
 801fe92:	9e04      	ldr	r6, [sp, #16]
 801fe94:	42a2      	cmp	r2, r4
 801fe96:	4605      	mov	r5, r0
 801fe98:	d002      	beq.n	801fea0 <BnrgmHealthModel_ProcessFaultTest+0x18>
 801fe9a:	2003      	movs	r0, #3
 801fe9c:	bc70      	pop	{r4, r5, r6}
 801fe9e:	4770      	bx	lr
 801fea0:	f8d3 4001 	ldr.w	r4, [r3, #1]
 801fea4:	4b07      	ldr	r3, [pc, #28]	@ (801fec4 <BnrgmHealthModel_ProcessFaultTest+0x3c>)
 801fea6:	885b      	ldrh	r3, [r3, #2]
 801fea8:	b2a4      	uxth	r4, r4
 801feaa:	42a3      	cmp	r3, r4
 801feac:	d1f5      	bne.n	801fe9a <BnrgmHealthModel_ProcessFaultTest+0x12>
 801feae:	682c      	ldr	r4, [r5, #0]
 801feb0:	6a64      	ldr	r4, [r4, #36]	@ 0x24
 801feb2:	f884 204a 	strb.w	r2, [r4, #74]	@ 0x4a
 801feb6:	9603      	str	r6, [sp, #12]
 801feb8:	bc70      	pop	{r4, r5, r6}
 801feba:	f7ff bfc2 	b.w	801fe42 <BnrgmHealthModel_SendFaultStatus>
 801febe:	bf00      	nop
 801fec0:	20000324 	.word	0x20000324
 801fec4:	20000008 	.word	0x20000008

0801fec8 <BnrgmHealthModel_ProcessFaultGet>:
 801fec8:	b410      	push	{r4}
 801feca:	681a      	ldr	r2, [r3, #0]
 801fecc:	4b07      	ldr	r3, [pc, #28]	@ (801feec <BnrgmHealthModel_ProcessFaultGet+0x24>)
 801fece:	9c02      	ldr	r4, [sp, #8]
 801fed0:	885b      	ldrh	r3, [r3, #2]
 801fed2:	b292      	uxth	r2, r2
 801fed4:	4293      	cmp	r3, r2
 801fed6:	d105      	bne.n	801fee4 <BnrgmHealthModel_ProcessFaultGet+0x1c>
 801fed8:	9401      	str	r4, [sp, #4]
 801feda:	2200      	movs	r2, #0
 801fedc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fee0:	f7ff bfaf 	b.w	801fe42 <BnrgmHealthModel_SendFaultStatus>
 801fee4:	2003      	movs	r0, #3
 801fee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801feea:	4770      	bx	lr
 801feec:	20000008 	.word	0x20000008

0801fef0 <BnrgmHealthModel_ProcessFaultClear>:
 801fef0:	b470      	push	{r4, r5, r6}
 801fef2:	681c      	ldr	r4, [r3, #0]
 801fef4:	4b0c      	ldr	r3, [pc, #48]	@ (801ff28 <BnrgmHealthModel_ProcessFaultClear+0x38>)
 801fef6:	9e04      	ldr	r6, [sp, #16]
 801fef8:	885b      	ldrh	r3, [r3, #2]
 801fefa:	b2a4      	uxth	r4, r4
 801fefc:	42a3      	cmp	r3, r4
 801fefe:	d110      	bne.n	801ff22 <BnrgmHealthModel_ProcessFaultClear+0x32>
 801ff00:	6804      	ldr	r4, [r0, #0]
 801ff02:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801ff04:	2400      	movs	r4, #0
 801ff06:	656c      	str	r4, [r5, #84]	@ 0x54
 801ff08:	65ac      	str	r4, [r5, #88]	@ 0x58
 801ff0a:	6805      	ldr	r5, [r0, #0]
 801ff0c:	6a6d      	ldr	r5, [r5, #36]	@ 0x24
 801ff0e:	64ec      	str	r4, [r5, #76]	@ 0x4c
 801ff10:	652c      	str	r4, [r5, #80]	@ 0x50
 801ff12:	6802      	ldr	r2, [r0, #0]
 801ff14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801ff16:	f892 204a 	ldrb.w	r2, [r2, #74]	@ 0x4a
 801ff1a:	9603      	str	r6, [sp, #12]
 801ff1c:	bc70      	pop	{r4, r5, r6}
 801ff1e:	f7ff bf90 	b.w	801fe42 <BnrgmHealthModel_SendFaultStatus>
 801ff22:	2003      	movs	r0, #3
 801ff24:	bc70      	pop	{r4, r5, r6}
 801ff26:	4770      	bx	lr
 801ff28:	20000008 	.word	0x20000008

0801ff2c <BnrgmHealthModel_ProcessAttentionSet>:
 801ff2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ff2e:	9101      	str	r1, [sp, #4]
 801ff30:	7819      	ldrb	r1, [r3, #0]
 801ff32:	6803      	ldr	r3, [r0, #0]
 801ff34:	9c07      	ldr	r4, [sp, #28]
 801ff36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ff38:	4605      	mov	r5, r0
 801ff3a:	f883 106e 	strb.w	r1, [r3, #110]	@ 0x6e
 801ff3e:	f7f4 ff93 	bl	8014e68 <BnrgmHealthModelSetAttentionTimer>
 801ff42:	682b      	ldr	r3, [r5, #0]
 801ff44:	9a01      	ldr	r2, [sp, #4]
 801ff46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ff48:	2007      	movs	r0, #7
 801ff4a:	f893 106e 	ldrb.w	r1, [r3, #110]	@ 0x6e
 801ff4e:	7020      	strb	r0, [r4, #0]
 801ff50:	2300      	movs	r3, #0
 801ff52:	f06f 007f 	mvn.w	r0, #127	@ 0x7f
 801ff56:	7060      	strb	r0, [r4, #1]
 801ff58:	70a3      	strb	r3, [r4, #2]
 801ff5a:	70e3      	strb	r3, [r4, #3]
 801ff5c:	7221      	strb	r1, [r4, #8]
 801ff5e:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 801ff62:	2101      	movs	r1, #1
 801ff64:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
 801ff68:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
 801ff6c:	4628      	mov	r0, r5
 801ff6e:	4623      	mov	r3, r4
 801ff70:	f884 10a3 	strb.w	r1, [r4, #163]	@ 0xa3
 801ff74:	b003      	add	sp, #12
 801ff76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ff7a:	f7ff bee3 	b.w	801fd44 <MobleModelSendPacket>
	...

0801ff80 <MobleConfigModel_ProcessVendorModelSubscriptionGet>:
 801ff80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff84:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ff86:	460f      	mov	r7, r1
 801ff88:	4605      	mov	r5, r0
 801ff8a:	b930      	cbnz	r0, 801ff9a <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x1a>
 801ff8c:	4b4d      	ldr	r3, [pc, #308]	@ (80200c4 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x144>)
 801ff8e:	4a4e      	ldr	r2, [pc, #312]	@ (80200c8 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x148>)
 801ff90:	f641 1187 	movw	r1, #6535	@ 0x1987
 801ff94:	484d      	ldr	r0, [pc, #308]	@ (80200cc <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x14c>)
 801ff96:	f005 fe7d 	bl	8025c94 <__assert_func>
 801ff9a:	6802      	ldr	r2, [r0, #0]
 801ff9c:	b922      	cbnz	r2, 801ffa8 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x28>
 801ff9e:	4b4c      	ldr	r3, [pc, #304]	@ (80200d0 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x150>)
 801ffa0:	4a49      	ldr	r2, [pc, #292]	@ (80200c8 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x148>)
 801ffa2:	f641 1188 	movw	r1, #6536	@ 0x1988
 801ffa6:	e7f5      	b.n	801ff94 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x14>
 801ffa8:	8851      	ldrh	r1, [r2, #2]
 801ffaa:	f8d3 9000 	ldr.w	r9, [r3]
 801ffae:	7f12      	ldrb	r2, [r2, #28]
 801ffb0:	f8d3 8002 	ldr.w	r8, [r3, #2]
 801ffb4:	fa1f f689 	uxth.w	r6, r9
 801ffb8:	1e48      	subs	r0, r1, #1
 801ffba:	4402      	add	r2, r0
 801ffbc:	428e      	cmp	r6, r1
 801ffbe:	b292      	uxth	r2, r2
 801ffc0:	d001      	beq.n	801ffc6 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x46>
 801ffc2:	4296      	cmp	r6, r2
 801ffc4:	d876      	bhi.n	80200b4 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x134>
 801ffc6:	eba9 0101 	sub.w	r1, r9, r1
 801ffca:	b2c9      	uxtb	r1, r1
 801ffcc:	4640      	mov	r0, r8
 801ffce:	f7f0 fd07 	bl	80109e0 <ApplicationChkVendorModelActive>
 801ffd2:	fab0 f080 	clz	r0, r0
 801ffd6:	0940      	lsrs	r0, r0, #5
 801ffd8:	0040      	lsls	r0, r0, #1
 801ffda:	682b      	ldr	r3, [r5, #0]
 801ffdc:	f893 b01c 	ldrb.w	fp, [r3, #28]
 801ffe0:	7220      	strb	r0, [r4, #8]
 801ffe2:	232c      	movs	r3, #44	@ 0x2c
 801ffe4:	f04f 0a00 	mov.w	sl, #0
 801ffe8:	7023      	strb	r3, [r4, #0]
 801ffea:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 801ffee:	2202      	movs	r2, #2
 801fff0:	fa1f f189 	uxth.w	r1, r9
 801fff4:	7063      	strb	r3, [r4, #1]
 801fff6:	f884 a002 	strb.w	sl, [r4, #2]
 801fffa:	f884 a003 	strb.w	sl, [r4, #3]
 801fffe:	f104 0009 	add.w	r0, r4, #9
 8020002:	f7f8 ffb9 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 8020006:	2204      	movs	r2, #4
 8020008:	4641      	mov	r1, r8
 802000a:	f104 000b 	add.w	r0, r4, #11
 802000e:	f7f8 ffb3 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 8020012:	fa5f f38a 	uxtb.w	r3, sl
 8020016:	459b      	cmp	fp, r3
 8020018:	d951      	bls.n	80200be <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x13e>
 802001a:	682b      	ldr	r3, [r5, #0]
 802001c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8020020:	46d1      	mov	r9, sl
 8020022:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8020024:	8813      	ldrh	r3, [r2, #0]
 8020026:	42b3      	cmp	r3, r6
 8020028:	f10a 0a01 	add.w	sl, sl, #1
 802002c:	d1f1      	bne.n	8020012 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x92>
 802002e:	2300      	movs	r3, #0
 8020030:	2038      	movs	r0, #56	@ 0x38
 8020032:	3278      	adds	r2, #120	@ 0x78
 8020034:	fb00 fa03 	mul.w	sl, r0, r3
 8020038:	f852 100a 	ldr.w	r1, [r2, sl]
 802003c:	4588      	cmp	r8, r1
 802003e:	d13b      	bne.n	80200b8 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x138>
 8020040:	f04f 0b00 	mov.w	fp, #0
 8020044:	f109 0908 	add.w	r9, r9, #8
 8020048:	221c      	movs	r2, #28
 802004a:	f10a 0a80 	add.w	sl, sl, #128	@ 0x80
 802004e:	465e      	mov	r6, fp
 8020050:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8020054:	fb02 f803 	mul.w	r8, r2, r3
 8020058:	682b      	ldr	r3, [r5, #0]
 802005a:	444b      	add	r3, r9
 802005c:	6858      	ldr	r0, [r3, #4]
 802005e:	eb08 030b 	add.w	r3, r8, fp
 8020062:	3340      	adds	r3, #64	@ 0x40
 8020064:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8020068:	b18b      	cbz	r3, 802008e <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x10e>
 802006a:	f10d 0206 	add.w	r2, sp, #6
 802006e:	4659      	mov	r1, fp
 8020070:	4450      	add	r0, sl
 8020072:	f7fa fb8b 	bl	801a78c <MobleSetGet>
 8020076:	2801      	cmp	r0, #1
 8020078:	d809      	bhi.n	802008e <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x10e>
 802007a:	2202      	movs	r2, #2
 802007c:	fb02 4006 	mla	r0, r2, r6, r4
 8020080:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8020084:	300f      	adds	r0, #15
 8020086:	f7f8 ff77 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 802008a:	3601      	adds	r6, #1
 802008c:	b2f6      	uxtb	r6, r6
 802008e:	f10b 0b01 	add.w	fp, fp, #1
 8020092:	f1bb 0f0a 	cmp.w	fp, #10
 8020096:	d1df      	bne.n	8020058 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0xd8>
 8020098:	2307      	movs	r3, #7
 802009a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 802009e:	f8c4 30a3 	str.w	r3, [r4, #163]	@ 0xa3
 80200a2:	463a      	mov	r2, r7
 80200a4:	4623      	mov	r3, r4
 80200a6:	2101      	movs	r1, #1
 80200a8:	4628      	mov	r0, r5
 80200aa:	b003      	add	sp, #12
 80200ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200b0:	f7ff be48 	b.w	801fd44 <MobleModelSendPacket>
 80200b4:	2001      	movs	r0, #1
 80200b6:	e790      	b.n	801ffda <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x5a>
 80200b8:	3301      	adds	r3, #1
 80200ba:	2b0b      	cmp	r3, #11
 80200bc:	d1ba      	bne.n	8020034 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0xb4>
 80200be:	2600      	movs	r6, #0
 80200c0:	e7ea      	b.n	8020098 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x118>
 80200c2:	bf00      	nop
 80200c4:	0802ea81 	.word	0x0802ea81
 80200c8:	0802d6de 	.word	0x0802d6de
 80200cc:	0802e513 	.word	0x0802e513
 80200d0:	0802e9dc 	.word	0x0802e9dc

080200d4 <MobleConfigModel_SendVendorModelAppList>:
 80200d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80200d8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80200da:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 80200de:	460e      	mov	r6, r1
 80200e0:	4605      	mov	r5, r0
 80200e2:	4619      	mov	r1, r3
 80200e4:	e9dd 930a 	ldrd	r9, r3, [sp, #40]	@ 0x28
 80200e8:	b930      	cbnz	r0, 80200f8 <MobleConfigModel_SendVendorModelAppList+0x24>
 80200ea:	4b18      	ldr	r3, [pc, #96]	@ (802014c <MobleConfigModel_SendVendorModelAppList+0x78>)
 80200ec:	4a18      	ldr	r2, [pc, #96]	@ (8020150 <MobleConfigModel_SendVendorModelAppList+0x7c>)
 80200ee:	4819      	ldr	r0, [pc, #100]	@ (8020154 <MobleConfigModel_SendVendorModelAppList+0x80>)
 80200f0:	f44f 6122 	mov.w	r1, #2592	@ 0xa20
 80200f4:	f005 fdce 	bl	8025c94 <__assert_func>
 80200f8:	204e      	movs	r0, #78	@ 0x4e
 80200fa:	2700      	movs	r7, #0
 80200fc:	7020      	strb	r0, [r4, #0]
 80200fe:	f06f 007f 	mvn.w	r0, #127	@ 0x7f
 8020102:	7060      	strb	r0, [r4, #1]
 8020104:	7222      	strb	r2, [r4, #8]
 8020106:	70a7      	strb	r7, [r4, #2]
 8020108:	70e7      	strb	r7, [r4, #3]
 802010a:	2202      	movs	r2, #2
 802010c:	f104 0009 	add.w	r0, r4, #9
 8020110:	9301      	str	r3, [sp, #4]
 8020112:	f7f8 ff31 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 8020116:	4649      	mov	r1, r9
 8020118:	2204      	movs	r2, #4
 802011a:	f104 000b 	add.w	r0, r4, #11
 802011e:	f7f8 ff2b 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 8020122:	9b01      	ldr	r3, [sp, #4]
 8020124:	f104 020f 	add.w	r2, r4, #15
 8020128:	4641      	mov	r1, r8
 802012a:	4638      	mov	r0, r7
 802012c:	f7f4 fd30 	bl	8014b90 <MobleConfigModelPutKeyIdxs>
 8020130:	b2c3      	uxtb	r3, r0
 8020132:	3307      	adds	r3, #7
 8020134:	f8c4 30a3 	str.w	r3, [r4, #163]	@ 0xa3
 8020138:	4632      	mov	r2, r6
 802013a:	4623      	mov	r3, r4
 802013c:	2101      	movs	r1, #1
 802013e:	4628      	mov	r0, r5
 8020140:	b003      	add	sp, #12
 8020142:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020146:	f7ff bdfd 	b.w	801fd44 <MobleModelSendPacket>
 802014a:	bf00      	nop
 802014c:	0802e501 	.word	0x0802e501
 8020150:	0802d711 	.word	0x0802d711
 8020154:	0802e513 	.word	0x0802e513

08020158 <MobleConfigModel_ProcessVendorModelAppGet>:
 8020158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802015c:	b08a      	sub	sp, #40	@ 0x28
 802015e:	af08      	add	r7, sp, #32
 8020160:	469c      	mov	ip, r3
 8020162:	2300      	movs	r3, #0
 8020164:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8020166:	9308      	str	r3, [sp, #32]
 8020168:	460d      	mov	r5, r1
 802016a:	80bb      	strh	r3, [r7, #4]
 802016c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020170:	4604      	mov	r4, r0
 8020172:	b930      	cbnz	r0, 8020182 <MobleConfigModel_ProcessVendorModelAppGet+0x2a>
 8020174:	4b23      	ldr	r3, [pc, #140]	@ (8020204 <MobleConfigModel_ProcessVendorModelAppGet+0xac>)
 8020176:	4a24      	ldr	r2, [pc, #144]	@ (8020208 <MobleConfigModel_ProcessVendorModelAppGet+0xb0>)
 8020178:	f641 112f 	movw	r1, #6447	@ 0x192f
 802017c:	4823      	ldr	r0, [pc, #140]	@ (802020c <MobleConfigModel_ProcessVendorModelAppGet+0xb4>)
 802017e:	f005 fd89 	bl	8025c94 <__assert_func>
 8020182:	6802      	ldr	r2, [r0, #0]
 8020184:	b922      	cbnz	r2, 8020190 <MobleConfigModel_ProcessVendorModelAppGet+0x38>
 8020186:	4b22      	ldr	r3, [pc, #136]	@ (8020210 <MobleConfigModel_ProcessVendorModelAppGet+0xb8>)
 8020188:	4a1f      	ldr	r2, [pc, #124]	@ (8020208 <MobleConfigModel_ProcessVendorModelAppGet+0xb0>)
 802018a:	f641 1130 	movw	r1, #6448	@ 0x1930
 802018e:	e7f5      	b.n	802017c <MobleConfigModel_ProcessVendorModelAppGet+0x24>
 8020190:	8850      	ldrh	r0, [r2, #2]
 8020192:	f8dc 1000 	ldr.w	r1, [ip]
 8020196:	7f12      	ldrb	r2, [r2, #28]
 8020198:	f8dc 8002 	ldr.w	r8, [ip, #2]
 802019c:	b28b      	uxth	r3, r1
 802019e:	f100 3eff 	add.w	lr, r0, #4294967295
 80201a2:	4472      	add	r2, lr
 80201a4:	4283      	cmp	r3, r0
 80201a6:	b292      	uxth	r2, r2
 80201a8:	d001      	beq.n	80201ae <MobleConfigModel_ProcessVendorModelAppGet+0x56>
 80201aa:	4293      	cmp	r3, r2
 80201ac:	d826      	bhi.n	80201fc <MobleConfigModel_ProcessVendorModelAppGet+0xa4>
 80201ae:	1a09      	subs	r1, r1, r0
 80201b0:	b2c9      	uxtb	r1, r1
 80201b2:	4640      	mov	r0, r8
 80201b4:	9305      	str	r3, [sp, #20]
 80201b6:	f7f0 fc13 	bl	80109e0 <ApplicationChkVendorModelActive>
 80201ba:	9b05      	ldr	r3, [sp, #20]
 80201bc:	b300      	cbz	r0, 8020200 <MobleConfigModel_ProcessVendorModelAppGet+0xa8>
 80201be:	4a15      	ldr	r2, [pc, #84]	@ (8020214 <MobleConfigModel_ProcessVendorModelAppGet+0xbc>)
 80201c0:	f892 261d 	ldrb.w	r2, [r2, #1565]	@ 0x61d
 80201c4:	b95a      	cbnz	r2, 80201de <MobleConfigModel_ProcessVendorModelAppGet+0x86>
 80201c6:	e9cd 2602 	strd	r2, r6, [sp, #8]
 80201ca:	9201      	str	r2, [sp, #4]
 80201cc:	f8cd 8000 	str.w	r8, [sp]
 80201d0:	4629      	mov	r1, r5
 80201d2:	4620      	mov	r0, r4
 80201d4:	f7ff ff7e 	bl	80200d4 <MobleConfigModel_SendVendorModelAppList>
 80201d8:	b00a      	add	sp, #40	@ 0x28
 80201da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201de:	f10d 021e 	add.w	r2, sp, #30
 80201e2:	4618      	mov	r0, r3
 80201e4:	4639      	mov	r1, r7
 80201e6:	9305      	str	r3, [sp, #20]
 80201e8:	f7f7 f882 	bl	80172f0 <MoblePalCrypto_GetAppBind_VendorModel>
 80201ec:	9b05      	ldr	r3, [sp, #20]
 80201ee:	2200      	movs	r2, #0
 80201f0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80201f4:	9603      	str	r6, [sp, #12]
 80201f6:	e9cd 7101 	strd	r7, r1, [sp, #4]
 80201fa:	e7e7      	b.n	80201cc <MobleConfigModel_ProcessVendorModelAppGet+0x74>
 80201fc:	2201      	movs	r2, #1
 80201fe:	e7f7      	b.n	80201f0 <MobleConfigModel_ProcessVendorModelAppGet+0x98>
 8020200:	2202      	movs	r2, #2
 8020202:	e7f5      	b.n	80201f0 <MobleConfigModel_ProcessVendorModelAppGet+0x98>
 8020204:	0802ea81 	.word	0x0802ea81
 8020208:	0802d739 	.word	0x0802d739
 802020c:	0802e513 	.word	0x0802e513
 8020210:	0802e9dc 	.word	0x0802e9dc
 8020214:	2000141c 	.word	0x2000141c

08020218 <MobleConfigModel_ProcessSigModelSubscriptionGet>:
 8020218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802021c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802021e:	460f      	mov	r7, r1
 8020220:	4605      	mov	r5, r0
 8020222:	b930      	cbnz	r0, 8020232 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x1a>
 8020224:	4b4d      	ldr	r3, [pc, #308]	@ (802035c <MobleConfigModel_ProcessSigModelSubscriptionGet+0x144>)
 8020226:	4a4e      	ldr	r2, [pc, #312]	@ (8020360 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x148>)
 8020228:	f641 01e6 	movw	r1, #6374	@ 0x18e6
 802022c:	484d      	ldr	r0, [pc, #308]	@ (8020364 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x14c>)
 802022e:	f005 fd31 	bl	8025c94 <__assert_func>
 8020232:	6802      	ldr	r2, [r0, #0]
 8020234:	b922      	cbnz	r2, 8020240 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x28>
 8020236:	4b4c      	ldr	r3, [pc, #304]	@ (8020368 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x150>)
 8020238:	4a49      	ldr	r2, [pc, #292]	@ (8020360 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x148>)
 802023a:	f641 01e7 	movw	r1, #6375	@ 0x18e7
 802023e:	e7f5      	b.n	802022c <MobleConfigModel_ProcessSigModelSubscriptionGet+0x14>
 8020240:	8851      	ldrh	r1, [r2, #2]
 8020242:	f8d3 9000 	ldr.w	r9, [r3]
 8020246:	7f12      	ldrb	r2, [r2, #28]
 8020248:	f8d3 6002 	ldr.w	r6, [r3, #2]
 802024c:	fa1f f889 	uxth.w	r8, r9
 8020250:	1e48      	subs	r0, r1, #1
 8020252:	4402      	add	r2, r0
 8020254:	4588      	cmp	r8, r1
 8020256:	b292      	uxth	r2, r2
 8020258:	d001      	beq.n	802025e <MobleConfigModel_ProcessSigModelSubscriptionGet+0x46>
 802025a:	4590      	cmp	r8, r2
 802025c:	d876      	bhi.n	802034c <MobleConfigModel_ProcessSigModelSubscriptionGet+0x134>
 802025e:	eba9 0101 	sub.w	r1, r9, r1
 8020262:	b2c9      	uxtb	r1, r1
 8020264:	b2b0      	uxth	r0, r6
 8020266:	f7f0 fb7f 	bl	8010968 <ApplicationChkSigModelActive>
 802026a:	fab0 f080 	clz	r0, r0
 802026e:	0940      	lsrs	r0, r0, #5
 8020270:	0040      	lsls	r0, r0, #1
 8020272:	682b      	ldr	r3, [r5, #0]
 8020274:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8020278:	7220      	strb	r0, [r4, #8]
 802027a:	232a      	movs	r3, #42	@ 0x2a
 802027c:	f04f 0a00 	mov.w	sl, #0
 8020280:	7023      	strb	r3, [r4, #0]
 8020282:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8020286:	fa1f f189 	uxth.w	r1, r9
 802028a:	7063      	strb	r3, [r4, #1]
 802028c:	f884 a002 	strb.w	sl, [r4, #2]
 8020290:	f884 a003 	strb.w	sl, [r4, #3]
 8020294:	2202      	movs	r2, #2
 8020296:	f104 0009 	add.w	r0, r4, #9
 802029a:	b2b6      	uxth	r6, r6
 802029c:	f7f8 fe6c 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 80202a0:	4631      	mov	r1, r6
 80202a2:	f104 000b 	add.w	r0, r4, #11
 80202a6:	f7f8 fe67 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 80202aa:	fa5f f38a 	uxtb.w	r3, sl
 80202ae:	459b      	cmp	fp, r3
 80202b0:	d951      	bls.n	8020356 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x13e>
 80202b2:	682b      	ldr	r3, [r5, #0]
 80202b4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80202b8:	46d1      	mov	r9, sl
 80202ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80202bc:	8813      	ldrh	r3, [r2, #0]
 80202be:	4543      	cmp	r3, r8
 80202c0:	f10a 0a01 	add.w	sl, sl, #1
 80202c4:	d1f1      	bne.n	80202aa <MobleConfigModel_ProcessSigModelSubscriptionGet+0x92>
 80202c6:	2300      	movs	r3, #0
 80202c8:	2038      	movs	r0, #56	@ 0x38
 80202ca:	3278      	adds	r2, #120	@ 0x78
 80202cc:	fb00 fa03 	mul.w	sl, r0, r3
 80202d0:	f852 100a 	ldr.w	r1, [r2, sl]
 80202d4:	42b1      	cmp	r1, r6
 80202d6:	d13b      	bne.n	8020350 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x138>
 80202d8:	f04f 0b00 	mov.w	fp, #0
 80202dc:	f109 0908 	add.w	r9, r9, #8
 80202e0:	221c      	movs	r2, #28
 80202e2:	f10a 0a80 	add.w	sl, sl, #128	@ 0x80
 80202e6:	465e      	mov	r6, fp
 80202e8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80202ec:	fb02 f803 	mul.w	r8, r2, r3
 80202f0:	682b      	ldr	r3, [r5, #0]
 80202f2:	444b      	add	r3, r9
 80202f4:	6858      	ldr	r0, [r3, #4]
 80202f6:	eb08 030b 	add.w	r3, r8, fp
 80202fa:	3340      	adds	r3, #64	@ 0x40
 80202fc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8020300:	b18b      	cbz	r3, 8020326 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x10e>
 8020302:	f10d 0206 	add.w	r2, sp, #6
 8020306:	4659      	mov	r1, fp
 8020308:	4450      	add	r0, sl
 802030a:	f7fa fa3f 	bl	801a78c <MobleSetGet>
 802030e:	2801      	cmp	r0, #1
 8020310:	d809      	bhi.n	8020326 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x10e>
 8020312:	2202      	movs	r2, #2
 8020314:	fb02 4006 	mla	r0, r2, r6, r4
 8020318:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 802031c:	300d      	adds	r0, #13
 802031e:	f7f8 fe2b 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 8020322:	3601      	adds	r6, #1
 8020324:	b2f6      	uxtb	r6, r6
 8020326:	f10b 0b01 	add.w	fp, fp, #1
 802032a:	f1bb 0f0a 	cmp.w	fp, #10
 802032e:	d1df      	bne.n	80202f0 <MobleConfigModel_ProcessSigModelSubscriptionGet+0xd8>
 8020330:	2305      	movs	r3, #5
 8020332:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8020336:	f8c4 30a3 	str.w	r3, [r4, #163]	@ 0xa3
 802033a:	463a      	mov	r2, r7
 802033c:	4623      	mov	r3, r4
 802033e:	2101      	movs	r1, #1
 8020340:	4628      	mov	r0, r5
 8020342:	b003      	add	sp, #12
 8020344:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020348:	f7ff bcfc 	b.w	801fd44 <MobleModelSendPacket>
 802034c:	2001      	movs	r0, #1
 802034e:	e790      	b.n	8020272 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x5a>
 8020350:	3301      	adds	r3, #1
 8020352:	2b0b      	cmp	r3, #11
 8020354:	d1ba      	bne.n	80202cc <MobleConfigModel_ProcessSigModelSubscriptionGet+0xb4>
 8020356:	2600      	movs	r6, #0
 8020358:	e7ea      	b.n	8020330 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x118>
 802035a:	bf00      	nop
 802035c:	0802ea81 	.word	0x0802ea81
 8020360:	0802d763 	.word	0x0802d763
 8020364:	0802e513 	.word	0x0802e513
 8020368:	0802e9dc 	.word	0x0802e9dc

0802036c <MobleConfigModel_SendSigModelAppList>:
 802036c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020370:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8020372:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 8020376:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 802037a:	460e      	mov	r6, r1
 802037c:	4605      	mov	r5, r0
 802037e:	4619      	mov	r1, r3
 8020380:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020382:	b930      	cbnz	r0, 8020392 <MobleConfigModel_SendSigModelAppList+0x26>
 8020384:	4b17      	ldr	r3, [pc, #92]	@ (80203e4 <MobleConfigModel_SendSigModelAppList+0x78>)
 8020386:	4a18      	ldr	r2, [pc, #96]	@ (80203e8 <MobleConfigModel_SendSigModelAppList+0x7c>)
 8020388:	4818      	ldr	r0, [pc, #96]	@ (80203ec <MobleConfigModel_SendSigModelAppList+0x80>)
 802038a:	f640 1191 	movw	r1, #2449	@ 0x991
 802038e:	f005 fc81 	bl	8025c94 <__assert_func>
 8020392:	204c      	movs	r0, #76	@ 0x4c
 8020394:	2700      	movs	r7, #0
 8020396:	7020      	strb	r0, [r4, #0]
 8020398:	f06f 007f 	mvn.w	r0, #127	@ 0x7f
 802039c:	7060      	strb	r0, [r4, #1]
 802039e:	7222      	strb	r2, [r4, #8]
 80203a0:	70a7      	strb	r7, [r4, #2]
 80203a2:	2202      	movs	r2, #2
 80203a4:	70e7      	strb	r7, [r4, #3]
 80203a6:	f104 0009 	add.w	r0, r4, #9
 80203aa:	9301      	str	r3, [sp, #4]
 80203ac:	f7f8 fde4 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 80203b0:	4649      	mov	r1, r9
 80203b2:	f104 000b 	add.w	r0, r4, #11
 80203b6:	f7f8 fddf 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 80203ba:	9b01      	ldr	r3, [sp, #4]
 80203bc:	f104 020d 	add.w	r2, r4, #13
 80203c0:	4641      	mov	r1, r8
 80203c2:	4638      	mov	r0, r7
 80203c4:	f7f4 fbe4 	bl	8014b90 <MobleConfigModelPutKeyIdxs>
 80203c8:	b2c3      	uxtb	r3, r0
 80203ca:	3305      	adds	r3, #5
 80203cc:	f8c4 30a3 	str.w	r3, [r4, #163]	@ 0xa3
 80203d0:	4632      	mov	r2, r6
 80203d2:	4623      	mov	r3, r4
 80203d4:	2101      	movs	r1, #1
 80203d6:	4628      	mov	r0, r5
 80203d8:	b003      	add	sp, #12
 80203da:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80203de:	f7ff bcb1 	b.w	801fd44 <MobleModelSendPacket>
 80203e2:	bf00      	nop
 80203e4:	0802e501 	.word	0x0802e501
 80203e8:	0802d793 	.word	0x0802d793
 80203ec:	0802e513 	.word	0x0802e513

080203f0 <MobleConfigModel_ProcessSigModelAppGet>:
 80203f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203f4:	b08a      	sub	sp, #40	@ 0x28
 80203f6:	f10d 0820 	add.w	r8, sp, #32
 80203fa:	461d      	mov	r5, r3
 80203fc:	2300      	movs	r3, #0
 80203fe:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8020400:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020404:	460e      	mov	r6, r1
 8020406:	9308      	str	r3, [sp, #32]
 8020408:	f8a8 3004 	strh.w	r3, [r8, #4]
 802040c:	4604      	mov	r4, r0
 802040e:	b930      	cbnz	r0, 802041e <MobleConfigModel_ProcessSigModelAppGet+0x2e>
 8020410:	4b23      	ldr	r3, [pc, #140]	@ (80204a0 <MobleConfigModel_ProcessSigModelAppGet+0xb0>)
 8020412:	4a24      	ldr	r2, [pc, #144]	@ (80204a4 <MobleConfigModel_ProcessSigModelAppGet+0xb4>)
 8020414:	f641 018c 	movw	r1, #6284	@ 0x188c
 8020418:	4823      	ldr	r0, [pc, #140]	@ (80204a8 <MobleConfigModel_ProcessSigModelAppGet+0xb8>)
 802041a:	f005 fc3b 	bl	8025c94 <__assert_func>
 802041e:	6802      	ldr	r2, [r0, #0]
 8020420:	b922      	cbnz	r2, 802042c <MobleConfigModel_ProcessSigModelAppGet+0x3c>
 8020422:	4b22      	ldr	r3, [pc, #136]	@ (80204ac <MobleConfigModel_ProcessSigModelAppGet+0xbc>)
 8020424:	4a1f      	ldr	r2, [pc, #124]	@ (80204a4 <MobleConfigModel_ProcessSigModelAppGet+0xb4>)
 8020426:	f641 018d 	movw	r1, #6285	@ 0x188d
 802042a:	e7f5      	b.n	8020418 <MobleConfigModel_ProcessSigModelAppGet+0x28>
 802042c:	8850      	ldrh	r0, [r2, #2]
 802042e:	6829      	ldr	r1, [r5, #0]
 8020430:	7f12      	ldrb	r2, [r2, #28]
 8020432:	f8d5 5002 	ldr.w	r5, [r5, #2]
 8020436:	b28b      	uxth	r3, r1
 8020438:	f100 3cff 	add.w	ip, r0, #4294967295
 802043c:	4462      	add	r2, ip
 802043e:	4283      	cmp	r3, r0
 8020440:	b292      	uxth	r2, r2
 8020442:	b2ad      	uxth	r5, r5
 8020444:	d001      	beq.n	802044a <MobleConfigModel_ProcessSigModelAppGet+0x5a>
 8020446:	4293      	cmp	r3, r2
 8020448:	d825      	bhi.n	8020496 <MobleConfigModel_ProcessSigModelAppGet+0xa6>
 802044a:	1a09      	subs	r1, r1, r0
 802044c:	b2c9      	uxtb	r1, r1
 802044e:	4628      	mov	r0, r5
 8020450:	9305      	str	r3, [sp, #20]
 8020452:	f7f0 fa89 	bl	8010968 <ApplicationChkSigModelActive>
 8020456:	9b05      	ldr	r3, [sp, #20]
 8020458:	b1f8      	cbz	r0, 802049a <MobleConfigModel_ProcessSigModelAppGet+0xaa>
 802045a:	4a15      	ldr	r2, [pc, #84]	@ (80204b0 <MobleConfigModel_ProcessSigModelAppGet+0xc0>)
 802045c:	f892 261d 	ldrb.w	r2, [r2, #1565]	@ 0x61d
 8020460:	b952      	cbnz	r2, 8020478 <MobleConfigModel_ProcessSigModelAppGet+0x88>
 8020462:	e9cd 2702 	strd	r2, r7, [sp, #8]
 8020466:	9201      	str	r2, [sp, #4]
 8020468:	9500      	str	r5, [sp, #0]
 802046a:	4631      	mov	r1, r6
 802046c:	4620      	mov	r0, r4
 802046e:	f7ff ff7d 	bl	802036c <MobleConfigModel_SendSigModelAppList>
 8020472:	b00a      	add	sp, #40	@ 0x28
 8020474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020478:	f10d 021e 	add.w	r2, sp, #30
 802047c:	4618      	mov	r0, r3
 802047e:	4641      	mov	r1, r8
 8020480:	9305      	str	r3, [sp, #20]
 8020482:	f7f6 ff7b 	bl	801737c <MoblePalCrypto_GetAppBind_SIGModel>
 8020486:	9b05      	ldr	r3, [sp, #20]
 8020488:	2200      	movs	r2, #0
 802048a:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 802048e:	9703      	str	r7, [sp, #12]
 8020490:	e9cd 8101 	strd	r8, r1, [sp, #4]
 8020494:	e7e8      	b.n	8020468 <MobleConfigModel_ProcessSigModelAppGet+0x78>
 8020496:	2201      	movs	r2, #1
 8020498:	e7f7      	b.n	802048a <MobleConfigModel_ProcessSigModelAppGet+0x9a>
 802049a:	2202      	movs	r2, #2
 802049c:	e7f5      	b.n	802048a <MobleConfigModel_ProcessSigModelAppGet+0x9a>
 802049e:	bf00      	nop
 80204a0:	0802ea81 	.word	0x0802ea81
 80204a4:	0802d7b8 	.word	0x0802d7b8
 80204a8:	0802e513 	.word	0x0802e513
 80204ac:	0802e9dc 	.word	0x0802e9dc
 80204b0:	2000141c 	.word	0x2000141c

080204b4 <MobleConfigModel_ProcessNodeReset>:
 80204b4:	b510      	push	{r4, lr}
 80204b6:	9b03      	ldr	r3, [sp, #12]
 80204b8:	460a      	mov	r2, r1
 80204ba:	b930      	cbnz	r0, 80204ca <MobleConfigModel_ProcessNodeReset+0x16>
 80204bc:	4b12      	ldr	r3, [pc, #72]	@ (8020508 <MobleConfigModel_ProcessNodeReset+0x54>)
 80204be:	4a13      	ldr	r2, [pc, #76]	@ (802050c <MobleConfigModel_ProcessNodeReset+0x58>)
 80204c0:	4813      	ldr	r0, [pc, #76]	@ (8020510 <MobleConfigModel_ProcessNodeReset+0x5c>)
 80204c2:	f640 1155 	movw	r1, #2389	@ 0x955
 80204c6:	f005 fbe5 	bl	8025c94 <__assert_func>
 80204ca:	214a      	movs	r1, #74	@ 0x4a
 80204cc:	2400      	movs	r4, #0
 80204ce:	7019      	strb	r1, [r3, #0]
 80204d0:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 80204d4:	7059      	strb	r1, [r3, #1]
 80204d6:	709c      	strb	r4, [r3, #2]
 80204d8:	70dc      	strb	r4, [r3, #3]
 80204da:	f883 40a3 	strb.w	r4, [r3, #163]	@ 0xa3
 80204de:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 80204e2:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 80204e6:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 80204ea:	2101      	movs	r1, #1
 80204ec:	f7ff fc2a 	bl	801fd44 <MobleModelSendPacket>
 80204f0:	4604      	mov	r4, r0
 80204f2:	b930      	cbnz	r0, 8020502 <MobleConfigModel_ProcessNodeReset+0x4e>
 80204f4:	f7fd fea2 	bl	801e23c <MobleStackConfigInvalidate>
 80204f8:	f7fc f9a2 	bl	801c840 <MoblePalBluetoothGracefulReset>
 80204fc:	4620      	mov	r0, r4
 80204fe:	f7e4 fe07 	bl	8005110 <BLEMesh_UnprovisionCallback>
 8020502:	4620      	mov	r0, r4
 8020504:	bd10      	pop	{r4, pc}
 8020506:	bf00      	nop
 8020508:	0802e501 	.word	0x0802e501
 802050c:	0802d7df 	.word	0x0802d7df
 8020510:	0802e513 	.word	0x0802e513

08020514 <MobleConfigModel_ProcessNodeIdentitySet>:
 8020514:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020518:	4607      	mov	r7, r0
 802051a:	4618      	mov	r0, r3
 802051c:	461a      	mov	r2, r3
 802051e:	f7f4 fb30 	bl	8014b82 <MobleConfigModelGetNetIdx>
 8020522:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020524:	f892 8002 	ldrb.w	r8, [r2, #2]
 8020528:	4689      	mov	r9, r1
 802052a:	4605      	mov	r5, r0
 802052c:	f7f5 fea4 	bl	8016278 <MoblePalCryptoHasNetworkKey>
 8020530:	b1b0      	cbz	r0, 8020560 <MobleConfigModel_ProcessNodeIdentitySet+0x4c>
 8020532:	f1b8 0f01 	cmp.w	r8, #1
 8020536:	d83d      	bhi.n	80205b4 <MobleConfigModel_ProcessNodeIdentitySet+0xa0>
 8020538:	4641      	mov	r1, r8
 802053a:	4628      	mov	r0, r5
 802053c:	f7f5 fed0 	bl	80162e0 <MoblePalCryptoSetNodeIdntyState>
 8020540:	4606      	mov	r6, r0
 8020542:	b978      	cbnz	r0, 8020564 <MobleConfigModel_ProcessNodeIdentitySet+0x50>
 8020544:	4641      	mov	r1, r8
 8020546:	4638      	mov	r0, r7
 8020548:	f7fe f80c 	bl	801e564 <BnrgmStackSetNodeIdentityState>
 802054c:	f8ad 5006 	strh.w	r5, [sp, #6]
 8020550:	b967      	cbnz	r7, 802056c <MobleConfigModel_ProcessNodeIdentitySet+0x58>
 8020552:	4b1a      	ldr	r3, [pc, #104]	@ (80205bc <MobleConfigModel_ProcessNodeIdentitySet+0xa8>)
 8020554:	4a1a      	ldr	r2, [pc, #104]	@ (80205c0 <MobleConfigModel_ProcessNodeIdentitySet+0xac>)
 8020556:	481b      	ldr	r0, [pc, #108]	@ (80205c4 <MobleConfigModel_ProcessNodeIdentitySet+0xb0>)
 8020558:	f640 113a 	movw	r1, #2362	@ 0x93a
 802055c:	f005 fb9a 	bl	8025c94 <__assert_func>
 8020560:	2604      	movs	r6, #4
 8020562:	e7f3      	b.n	802054c <MobleConfigModel_ProcessNodeIdentitySet+0x38>
 8020564:	260b      	movs	r6, #11
 8020566:	f04f 0800 	mov.w	r8, #0
 802056a:	e7ef      	b.n	802054c <MobleConfigModel_ProcessNodeIdentitySet+0x38>
 802056c:	2348      	movs	r3, #72	@ 0x48
 802056e:	2500      	movs	r5, #0
 8020570:	7023      	strb	r3, [r4, #0]
 8020572:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8020576:	7063      	strb	r3, [r4, #1]
 8020578:	f104 0209 	add.w	r2, r4, #9
 802057c:	f10d 0306 	add.w	r3, sp, #6
 8020580:	70a5      	strb	r5, [r4, #2]
 8020582:	70e5      	strb	r5, [r4, #3]
 8020584:	7226      	strb	r6, [r4, #8]
 8020586:	2101      	movs	r1, #1
 8020588:	4628      	mov	r0, r5
 802058a:	f7f4 fb01 	bl	8014b90 <MobleConfigModelPutKeyIdxs>
 802058e:	2304      	movs	r3, #4
 8020590:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8020594:	464a      	mov	r2, r9
 8020596:	4623      	mov	r3, r4
 8020598:	4638      	mov	r0, r7
 802059a:	f884 800b 	strb.w	r8, [r4, #11]
 802059e:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 80205a2:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 80205a6:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 80205aa:	b003      	add	sp, #12
 80205ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80205b0:	f7ff bbc8 	b.w	801fd44 <MobleModelSendPacket>
 80205b4:	2000      	movs	r0, #0
 80205b6:	b003      	add	sp, #12
 80205b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80205bc:	0802e501 	.word	0x0802e501
 80205c0:	0802d804 	.word	0x0802d804
 80205c4:	0802e513 	.word	0x0802e513

080205c8 <MobleConfigModel_SendNetKeyStatus>:
 80205c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80205ca:	9c08      	ldr	r4, [sp, #32]
 80205cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80205d0:	460f      	mov	r7, r1
 80205d2:	4606      	mov	r6, r0
 80205d4:	b930      	cbnz	r0, 80205e4 <MobleConfigModel_SendNetKeyStatus+0x1c>
 80205d6:	4b14      	ldr	r3, [pc, #80]	@ (8020628 <MobleConfigModel_SendNetKeyStatus+0x60>)
 80205d8:	4a14      	ldr	r2, [pc, #80]	@ (802062c <MobleConfigModel_SendNetKeyStatus+0x64>)
 80205da:	4815      	ldr	r0, [pc, #84]	@ (8020630 <MobleConfigModel_SendNetKeyStatus+0x68>)
 80205dc:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 80205e0:	f005 fb58 	bl	8025c94 <__assert_func>
 80205e4:	2344      	movs	r3, #68	@ 0x44
 80205e6:	2500      	movs	r5, #0
 80205e8:	7023      	strb	r3, [r4, #0]
 80205ea:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80205ee:	7063      	strb	r3, [r4, #1]
 80205f0:	7222      	strb	r2, [r4, #8]
 80205f2:	f10d 0306 	add.w	r3, sp, #6
 80205f6:	f104 0209 	add.w	r2, r4, #9
 80205fa:	2101      	movs	r1, #1
 80205fc:	70a5      	strb	r5, [r4, #2]
 80205fe:	70e5      	strb	r5, [r4, #3]
 8020600:	4628      	mov	r0, r5
 8020602:	f7f4 fac5 	bl	8014b90 <MobleConfigModelPutKeyIdxs>
 8020606:	2303      	movs	r3, #3
 8020608:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 802060c:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 8020610:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 8020614:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 8020618:	4623      	mov	r3, r4
 802061a:	463a      	mov	r2, r7
 802061c:	4630      	mov	r0, r6
 802061e:	f7ff fb91 	bl	801fd44 <MobleModelSendPacket>
 8020622:	b003      	add	sp, #12
 8020624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020626:	bf00      	nop
 8020628:	0802e501 	.word	0x0802e501
 802062c:	0802d82c 	.word	0x0802d82c
 8020630:	0802e513 	.word	0x0802e513

08020634 <MobleConfigModel_ProcessNetKeyUpdate>:
 8020634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020638:	4607      	mov	r7, r0
 802063a:	b08d      	sub	sp, #52	@ 0x34
 802063c:	4618      	mov	r0, r3
 802063e:	461a      	mov	r2, r3
 8020640:	f7f4 fa9f 	bl	8014b82 <MobleConfigModelGetNetIdx>
 8020644:	ac04      	add	r4, sp, #16
 8020646:	1c93      	adds	r3, r2, #2
 8020648:	4688      	mov	r8, r1
 802064a:	4605      	mov	r5, r0
 802064c:	3212      	adds	r2, #18
 802064e:	46a1      	mov	r9, r4
 8020650:	6818      	ldr	r0, [r3, #0]
 8020652:	6859      	ldr	r1, [r3, #4]
 8020654:	4626      	mov	r6, r4
 8020656:	c603      	stmia	r6!, {r0, r1}
 8020658:	3308      	adds	r3, #8
 802065a:	4293      	cmp	r3, r2
 802065c:	4634      	mov	r4, r6
 802065e:	d1f7      	bne.n	8020650 <MobleConfigModel_ProcessNetKeyUpdate+0x1c>
 8020660:	4628      	mov	r0, r5
 8020662:	f7f7 f983 	bl	801796c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8020666:	1e06      	subs	r6, r0, #0
 8020668:	db2f      	blt.n	80206ca <MobleConfigModel_ProcessNetKeyUpdate+0x96>
 802066a:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 802066e:	d22c      	bcs.n	80206ca <MobleConfigModel_ProcessNetKeyUpdate+0x96>
 8020670:	683b      	ldr	r3, [r7, #0]
 8020672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020674:	4433      	add	r3, r6
 8020676:	7d1c      	ldrb	r4, [r3, #20]
 8020678:	bb4c      	cbnz	r4, 80206ce <MobleConfigModel_ProcessNetKeyUpdate+0x9a>
 802067a:	4628      	mov	r0, r5
 802067c:	f7f5 fde2 	bl	8016244 <MoblePalCryptoHasNewNetworkKey>
 8020680:	2801      	cmp	r0, #1
 8020682:	bf08      	it	eq
 8020684:	240b      	moveq	r4, #11
 8020686:	4628      	mov	r0, r5
 8020688:	f7f5 fdf6 	bl	8016278 <MoblePalCryptoHasNetworkKey>
 802068c:	bb08      	cbnz	r0, 80206d2 <MobleConfigModel_ProcessNetKeyUpdate+0x9e>
 802068e:	2c00      	cmp	r4, #0
 8020690:	bf08      	it	eq
 8020692:	2404      	moveq	r4, #4
 8020694:	f8ad 5020 	strh.w	r5, [sp, #32]
 8020698:	f88d 402d 	strb.w	r4, [sp, #45]	@ 0x2d
 802069c:	b924      	cbnz	r4, 80206a8 <MobleConfigModel_ProcessNetKeyUpdate+0x74>
 802069e:	2310      	movs	r3, #16
 80206a0:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80206a4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80206a8:	4b16      	ldr	r3, [pc, #88]	@ (8020704 <MobleConfigModel_ProcessNetKeyUpdate+0xd0>)
 80206aa:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 80206ae:	a808      	add	r0, sp, #32
 80206b0:	69db      	ldr	r3, [r3, #28]
 80206b2:	4798      	blx	r3
 80206b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80206b6:	9300      	str	r3, [sp, #0]
 80206b8:	4622      	mov	r2, r4
 80206ba:	462b      	mov	r3, r5
 80206bc:	4641      	mov	r1, r8
 80206be:	4638      	mov	r0, r7
 80206c0:	f7ff ff82 	bl	80205c8 <MobleConfigModel_SendNetKeyStatus>
 80206c4:	b00d      	add	sp, #52	@ 0x34
 80206c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80206ca:	2404      	movs	r4, #4
 80206cc:	e7db      	b.n	8020686 <MobleConfigModel_ProcessNetKeyUpdate+0x52>
 80206ce:	240b      	movs	r4, #11
 80206d0:	e7d9      	b.n	8020686 <MobleConfigModel_ProcessNetKeyUpdate+0x52>
 80206d2:	2c00      	cmp	r4, #0
 80206d4:	d1de      	bne.n	8020694 <MobleConfigModel_ProcessNetKeyUpdate+0x60>
 80206d6:	4629      	mov	r1, r5
 80206d8:	4648      	mov	r0, r9
 80206da:	f7f6 fb1f 	bl	8016d1c <MoblePalCryptoSetNewNetworkKey>
 80206de:	2803      	cmp	r0, #3
 80206e0:	4604      	mov	r4, r0
 80206e2:	d00a      	beq.n	80206fa <MobleConfigModel_ProcessNetKeyUpdate+0xc6>
 80206e4:	b958      	cbnz	r0, 80206fe <MobleConfigModel_ProcessNetKeyUpdate+0xca>
 80206e6:	b2f1      	uxtb	r1, r6
 80206e8:	4638      	mov	r0, r7
 80206ea:	9103      	str	r1, [sp, #12]
 80206ec:	f7fb fa76 	bl	801bbdc <BnrgmFrndMgmtUpdateKeys>
 80206f0:	9903      	ldr	r1, [sp, #12]
 80206f2:	2001      	movs	r0, #1
 80206f4:	f7fe f936 	bl	801e964 <ModelConfigUpdateKRState>
 80206f8:	e7cc      	b.n	8020694 <MobleConfigModel_ProcessNetKeyUpdate+0x60>
 80206fa:	2406      	movs	r4, #6
 80206fc:	e7ca      	b.n	8020694 <MobleConfigModel_ProcessNetKeyUpdate+0x60>
 80206fe:	2405      	movs	r4, #5
 8020700:	e7c8      	b.n	8020694 <MobleConfigModel_ProcessNetKeyUpdate+0x60>
 8020702:	bf00      	nop
 8020704:	20002514 	.word	0x20002514

08020708 <MobleConfigModel_ProcessNetKeyDelete>:
 8020708:	b5f0      	push	{r4, r5, r6, r7, lr}
 802070a:	4606      	mov	r6, r0
 802070c:	b087      	sub	sp, #28
 802070e:	4618      	mov	r0, r3
 8020710:	f7f4 fa37 	bl	8014b82 <MobleConfigModelGetNetIdx>
 8020714:	4b1c      	ldr	r3, [pc, #112]	@ (8020788 <MobleConfigModel_ProcessNetKeyDelete+0x80>)
 8020716:	f893 361c 	ldrb.w	r3, [r3, #1564]	@ 0x61c
 802071a:	2b01      	cmp	r3, #1
 802071c:	460f      	mov	r7, r1
 802071e:	4605      	mov	r5, r0
 8020720:	d103      	bne.n	802072a <MobleConfigModel_ProcessNetKeyDelete+0x22>
 8020722:	f7f5 fda9 	bl	8016278 <MoblePalCryptoHasNetworkKey>
 8020726:	2801      	cmp	r0, #1
 8020728:	d007      	beq.n	802073a <MobleConfigModel_ProcessNetKeyDelete+0x32>
 802072a:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 802072e:	d225      	bcs.n	802077c <MobleConfigModel_ProcessNetKeyDelete+0x74>
 8020730:	4628      	mov	r0, r5
 8020732:	f7f6 fd7f 	bl	8017234 <MoblePalCryptoDeleteNetworkKey>
 8020736:	2803      	cmp	r0, #3
 8020738:	d122      	bne.n	8020780 <MobleConfigModel_ProcessNetKeyDelete+0x78>
 802073a:	240c      	movs	r4, #12
 802073c:	f8ad 5008 	strh.w	r5, [sp, #8]
 8020740:	f88d 4015 	strb.w	r4, [sp, #21]
 8020744:	b9f4      	cbnz	r4, 8020784 <MobleConfigModel_ProcessNetKeyDelete+0x7c>
 8020746:	9403      	str	r4, [sp, #12]
 8020748:	2310      	movs	r3, #16
 802074a:	f88d 3014 	strb.w	r3, [sp, #20]
 802074e:	4b0f      	ldr	r3, [pc, #60]	@ (802078c <MobleConfigModel_ProcessNetKeyDelete+0x84>)
 8020750:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8020754:	a802      	add	r0, sp, #8
 8020756:	695b      	ldr	r3, [r3, #20]
 8020758:	4798      	blx	r3
 802075a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802075c:	9300      	str	r3, [sp, #0]
 802075e:	4622      	mov	r2, r4
 8020760:	462b      	mov	r3, r5
 8020762:	4639      	mov	r1, r7
 8020764:	4630      	mov	r0, r6
 8020766:	f7ff ff2f 	bl	80205c8 <MobleConfigModel_SendNetKeyStatus>
 802076a:	6833      	ldr	r3, [r6, #0]
 802076c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802076e:	4602      	mov	r2, r0
 8020770:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8020772:	f7f4 fbcf 	bl	8014f14 <MoblePalTimerStop>
 8020776:	4610      	mov	r0, r2
 8020778:	b007      	add	sp, #28
 802077a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802077c:	2404      	movs	r4, #4
 802077e:	e7dd      	b.n	802073c <MobleConfigModel_ProcessNetKeyDelete+0x34>
 8020780:	2400      	movs	r4, #0
 8020782:	e7db      	b.n	802073c <MobleConfigModel_ProcessNetKeyDelete+0x34>
 8020784:	2300      	movs	r3, #0
 8020786:	e7e0      	b.n	802074a <MobleConfigModel_ProcessNetKeyDelete+0x42>
 8020788:	2000141c 	.word	0x2000141c
 802078c:	20002514 	.word	0x20002514

08020790 <MobleConfigModel_ProcessNetKeyAdd>:
 8020790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020794:	4606      	mov	r6, r0
 8020796:	b08a      	sub	sp, #40	@ 0x28
 8020798:	4618      	mov	r0, r3
 802079a:	461a      	mov	r2, r3
 802079c:	f7f4 f9f1 	bl	8014b82 <MobleConfigModelGetNetIdx>
 80207a0:	ad02      	add	r5, sp, #8
 80207a2:	1c93      	adds	r3, r2, #2
 80207a4:	460f      	mov	r7, r1
 80207a6:	4604      	mov	r4, r0
 80207a8:	3212      	adds	r2, #18
 80207aa:	46a8      	mov	r8, r5
 80207ac:	6818      	ldr	r0, [r3, #0]
 80207ae:	6859      	ldr	r1, [r3, #4]
 80207b0:	46ac      	mov	ip, r5
 80207b2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80207b6:	3308      	adds	r3, #8
 80207b8:	4293      	cmp	r3, r2
 80207ba:	4665      	mov	r5, ip
 80207bc:	d1f6      	bne.n	80207ac <MobleConfigModel_ProcessNetKeyAdd+0x1c>
 80207be:	4b1f      	ldr	r3, [pc, #124]	@ (802083c <MobleConfigModel_ProcessNetKeyAdd+0xac>)
 80207c0:	881a      	ldrh	r2, [r3, #0]
 80207c2:	4b1f      	ldr	r3, [pc, #124]	@ (8020840 <MobleConfigModel_ProcessNetKeyAdd+0xb0>)
 80207c4:	f893 361c 	ldrb.w	r3, [r3, #1564]	@ 0x61c
 80207c8:	429a      	cmp	r2, r3
 80207ca:	d103      	bne.n	80207d4 <MobleConfigModel_ProcessNetKeyAdd+0x44>
 80207cc:	4620      	mov	r0, r4
 80207ce:	f7f5 fd53 	bl	8016278 <MoblePalCryptoHasNetworkKey>
 80207d2:	b360      	cbz	r0, 802082e <MobleConfigModel_ProcessNetKeyAdd+0x9e>
 80207d4:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 80207d8:	d22d      	bcs.n	8020836 <MobleConfigModel_ProcessNetKeyAdd+0xa6>
 80207da:	4621      	mov	r1, r4
 80207dc:	4640      	mov	r0, r8
 80207de:	f7f6 fb09 	bl	8016df4 <MoblePalCryptoSetNetworkKey>
 80207e2:	4605      	mov	r5, r0
 80207e4:	b9e0      	cbnz	r0, 8020820 <MobleConfigModel_ProcessNetKeyAdd+0x90>
 80207e6:	6833      	ldr	r3, [r6, #0]
 80207e8:	f8ad 4018 	strh.w	r4, [sp, #24]
 80207ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80207ee:	f8cd 801c 	str.w	r8, [sp, #28]
 80207f2:	859c      	strh	r4, [r3, #44]	@ 0x2c
 80207f4:	2310      	movs	r3, #16
 80207f6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80207fa:	4b12      	ldr	r3, [pc, #72]	@ (8020844 <MobleConfigModel_ProcessNetKeyAdd+0xb4>)
 80207fc:	f88d 5025 	strb.w	r5, [sp, #37]	@ 0x25
 8020800:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8020804:	a806      	add	r0, sp, #24
 8020806:	691b      	ldr	r3, [r3, #16]
 8020808:	4798      	blx	r3
 802080a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802080c:	9300      	str	r3, [sp, #0]
 802080e:	462a      	mov	r2, r5
 8020810:	4623      	mov	r3, r4
 8020812:	4639      	mov	r1, r7
 8020814:	4630      	mov	r0, r6
 8020816:	f7ff fed7 	bl	80205c8 <MobleConfigModel_SendNetKeyStatus>
 802081a:	b00a      	add	sp, #40	@ 0x28
 802081c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020820:	2803      	cmp	r0, #3
 8020822:	f8ad 4018 	strh.w	r4, [sp, #24]
 8020826:	bf14      	ite	ne
 8020828:	2505      	movne	r5, #5
 802082a:	2506      	moveq	r5, #6
 802082c:	e7e5      	b.n	80207fa <MobleConfigModel_ProcessNetKeyAdd+0x6a>
 802082e:	2505      	movs	r5, #5
 8020830:	f8ad 4018 	strh.w	r4, [sp, #24]
 8020834:	e7e1      	b.n	80207fa <MobleConfigModel_ProcessNetKeyAdd+0x6a>
 8020836:	2504      	movs	r5, #4
 8020838:	e7fa      	b.n	8020830 <MobleConfigModel_ProcessNetKeyAdd+0xa0>
 802083a:	bf00      	nop
 802083c:	20000008 	.word	0x20000008
 8020840:	2000141c 	.word	0x2000141c
 8020844:	20002514 	.word	0x20002514

08020848 <MobleConfigModel_ProcessNetKeyGet>:
 8020848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802084c:	b087      	sub	sp, #28
 802084e:	f10d 0804 	add.w	r8, sp, #4
 8020852:	4605      	mov	r5, r0
 8020854:	460f      	mov	r7, r1
 8020856:	4640      	mov	r0, r8
 8020858:	f10d 0102 	add.w	r1, sp, #2
 802085c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802085e:	f7f5 fdef 	bl	8016440 <MoblePalCrypto_GetNetKeyIndexes>
 8020862:	4b18      	ldr	r3, [pc, #96]	@ (80208c4 <MobleConfigModel_ProcessNetKeyGet+0x7c>)
 8020864:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8020868:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 802086c:	f8cd 800c 	str.w	r8, [sp, #12]
 8020870:	2600      	movs	r6, #0
 8020872:	699b      	ldr	r3, [r3, #24]
 8020874:	f8ad 9010 	strh.w	r9, [sp, #16]
 8020878:	f88d 6012 	strb.w	r6, [sp, #18]
 802087c:	a803      	add	r0, sp, #12
 802087e:	4798      	blx	r3
 8020880:	b935      	cbnz	r5, 8020890 <MobleConfigModel_ProcessNetKeyGet+0x48>
 8020882:	4b11      	ldr	r3, [pc, #68]	@ (80208c8 <MobleConfigModel_ProcessNetKeyGet+0x80>)
 8020884:	4a11      	ldr	r2, [pc, #68]	@ (80208cc <MobleConfigModel_ProcessNetKeyGet+0x84>)
 8020886:	4812      	ldr	r0, [pc, #72]	@ (80208d0 <MobleConfigModel_ProcessNetKeyGet+0x88>)
 8020888:	f640 01e4 	movw	r1, #2276	@ 0x8e4
 802088c:	f005 fa02 	bl	8025c94 <__assert_func>
 8020890:	2343      	movs	r3, #67	@ 0x43
 8020892:	7023      	strb	r3, [r4, #0]
 8020894:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8020898:	7063      	strb	r3, [r4, #1]
 802089a:	f104 0208 	add.w	r2, r4, #8
 802089e:	4643      	mov	r3, r8
 80208a0:	4649      	mov	r1, r9
 80208a2:	70a6      	strb	r6, [r4, #2]
 80208a4:	70e6      	strb	r6, [r4, #3]
 80208a6:	4630      	mov	r0, r6
 80208a8:	f7f4 f972 	bl	8014b90 <MobleConfigModelPutKeyIdxs>
 80208ac:	4623      	mov	r3, r4
 80208ae:	f8c4 00a3 	str.w	r0, [r4, #163]	@ 0xa3
 80208b2:	463a      	mov	r2, r7
 80208b4:	2101      	movs	r1, #1
 80208b6:	4628      	mov	r0, r5
 80208b8:	f7ff fa44 	bl	801fd44 <MobleModelSendPacket>
 80208bc:	b007      	add	sp, #28
 80208be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80208c2:	bf00      	nop
 80208c4:	20002514 	.word	0x20002514
 80208c8:	0802e501 	.word	0x0802e501
 80208cc:	0802d84e 	.word	0x0802d84e
 80208d0:	0802e513 	.word	0x0802e513

080208d4 <MobleConfigModel_SendModelSubscriptionStatus>:
 80208d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80208d8:	460e      	mov	r6, r1
 80208da:	e9dd 7407 	ldrd	r7, r4, [sp, #28]
 80208de:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 80208e2:	4619      	mov	r1, r3
 80208e4:	4605      	mov	r5, r0
 80208e6:	b930      	cbnz	r0, 80208f6 <MobleConfigModel_SendModelSubscriptionStatus+0x22>
 80208e8:	4b18      	ldr	r3, [pc, #96]	@ (802094c <MobleConfigModel_SendModelSubscriptionStatus+0x78>)
 80208ea:	4a19      	ldr	r2, [pc, #100]	@ (8020950 <MobleConfigModel_SendModelSubscriptionStatus+0x7c>)
 80208ec:	4819      	ldr	r0, [pc, #100]	@ (8020954 <MobleConfigModel_SendModelSubscriptionStatus+0x80>)
 80208ee:	f640 01c3 	movw	r1, #2243	@ 0x8c3
 80208f2:	f005 f9cf 	bl	8025c94 <__assert_func>
 80208f6:	201f      	movs	r0, #31
 80208f8:	2300      	movs	r3, #0
 80208fa:	7020      	strb	r0, [r4, #0]
 80208fc:	f06f 007f 	mvn.w	r0, #127	@ 0x7f
 8020900:	70a3      	strb	r3, [r4, #2]
 8020902:	70e3      	strb	r3, [r4, #3]
 8020904:	7060      	strb	r0, [r4, #1]
 8020906:	7222      	strb	r2, [r4, #8]
 8020908:	f104 0009 	add.w	r0, r4, #9
 802090c:	2202      	movs	r2, #2
 802090e:	f7f8 fb33 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 8020912:	4641      	mov	r1, r8
 8020914:	f104 000b 	add.w	r0, r4, #11
 8020918:	f7f8 fb2e 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 802091c:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 8020920:	bf28      	it	cs
 8020922:	2204      	movcs	r2, #4
 8020924:	4639      	mov	r1, r7
 8020926:	f104 000d 	add.w	r0, r4, #13
 802092a:	f7f8 fb25 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 802092e:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 8020932:	bf2c      	ite	cs
 8020934:	2309      	movcs	r3, #9
 8020936:	2307      	movcc	r3, #7
 8020938:	f8c4 30a3 	str.w	r3, [r4, #163]	@ 0xa3
 802093c:	4632      	mov	r2, r6
 802093e:	4623      	mov	r3, r4
 8020940:	4628      	mov	r0, r5
 8020942:	2101      	movs	r1, #1
 8020944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020948:	f7ff b9fc 	b.w	801fd44 <MobleModelSendPacket>
 802094c:	0802e501 	.word	0x0802e501
 8020950:	0802d86e 	.word	0x0802d86e
 8020954:	0802e513 	.word	0x0802e513

08020958 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite>:
 8020958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802095c:	4689      	mov	r9, r1
 802095e:	b08f      	sub	sp, #60	@ 0x3c
 8020960:	469a      	mov	sl, r3
 8020962:	4604      	mov	r4, r0
 8020964:	b930      	cbnz	r0, 8020974 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x1c>
 8020966:	4b3c      	ldr	r3, [pc, #240]	@ (8020a58 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x100>)
 8020968:	4a3c      	ldr	r2, [pc, #240]	@ (8020a5c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x104>)
 802096a:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 802096e:	483c      	ldr	r0, [pc, #240]	@ (8020a60 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x108>)
 8020970:	f005 f990 	bl	8025c94 <__assert_func>
 8020974:	6803      	ldr	r3, [r0, #0]
 8020976:	b923      	cbnz	r3, 8020982 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x2a>
 8020978:	4b3a      	ldr	r3, [pc, #232]	@ (8020a64 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x10c>)
 802097a:	4a38      	ldr	r2, [pc, #224]	@ (8020a5c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x104>)
 802097c:	f241 51b6 	movw	r1, #5558	@ 0x15b6
 8020980:	e7f5      	b.n	802096e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x16>
 8020982:	4652      	mov	r2, sl
 8020984:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 8020988:	f852 5b02 	ldr.w	r5, [r2], #2
 802098c:	f893 801c 	ldrb.w	r8, [r3, #28]
 8020990:	b2af      	uxth	r7, r5
 8020992:	f10b 33ff 	add.w	r3, fp, #4294967295
 8020996:	4498      	add	r8, r3
 8020998:	9705      	str	r7, [sp, #20]
 802099a:	463d      	mov	r5, r7
 802099c:	ab06      	add	r3, sp, #24
 802099e:	eba7 070b 	sub.w	r7, r7, fp
 80209a2:	fa1f f888 	uxth.w	r8, r8
 80209a6:	b2ff      	uxtb	r7, r7
 80209a8:	f10a 0e12 	add.w	lr, sl, #18
 80209ac:	469c      	mov	ip, r3
 80209ae:	6810      	ldr	r0, [r2, #0]
 80209b0:	6851      	ldr	r1, [r2, #4]
 80209b2:	461e      	mov	r6, r3
 80209b4:	c603      	stmia	r6!, {r0, r1}
 80209b6:	3208      	adds	r2, #8
 80209b8:	4572      	cmp	r2, lr
 80209ba:	4633      	mov	r3, r6
 80209bc:	d1f7      	bne.n	80209ae <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x56>
 80209be:	4660      	mov	r0, ip
 80209c0:	f7f5 febe 	bl	8016740 <MobleConfigModelGetAddressFromVirtual>
 80209c4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80209c6:	2b14      	cmp	r3, #20
 80209c8:	bf0c      	ite	eq
 80209ca:	2102      	moveq	r1, #2
 80209cc:	2104      	movne	r1, #4
 80209ce:	4606      	mov	r6, r0
 80209d0:	aa05      	add	r2, sp, #20
 80209d2:	f10a 0012 	add.w	r0, sl, #18
 80209d6:	f7f7 fd4a 	bl	801846e <MobleInputStreamGetLittleEndian>
 80209da:	455d      	cmp	r5, fp
 80209dc:	f8dd a014 	ldr.w	sl, [sp, #20]
 80209e0:	d001      	beq.n	80209e6 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x8e>
 80209e2:	4545      	cmp	r5, r8
 80209e4:	d82f      	bhi.n	8020a46 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xee>
 80209e6:	4639      	mov	r1, r7
 80209e8:	4650      	mov	r0, sl
 80209ea:	f7f8 fd3e 	bl	801946a <MobleApplicationModelSupported>
 80209ee:	b370      	cbz	r0, 8020a4e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xf6>
 80209f0:	4633      	mov	r3, r6
 80209f2:	462a      	mov	r2, r5
 80209f4:	4651      	mov	r1, sl
 80209f6:	4620      	mov	r0, r4
 80209f8:	f7fa fb5c 	bl	801b0b4 <MobleConfigModel_SubscriptionOverwrite>
 80209fc:	4680      	mov	r8, r0
 80209fe:	6820      	ldr	r0, [r4, #0]
 8020a00:	f7f9 fb86 	bl	801a110 <MobleConfigNetworkSave>
 8020a04:	2301      	movs	r3, #1
 8020a06:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8020a0a:	2300      	movs	r3, #0
 8020a0c:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8020a10:	4b15      	ldr	r3, [pc, #84]	@ (8020a68 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x110>)
 8020a12:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8020a16:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8020a1a:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 8020a1e:	a80a      	add	r0, sp, #40	@ 0x28
 8020a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020a22:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 8020a26:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8020a2a:	4798      	blx	r3
 8020a2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020a2e:	9600      	str	r6, [sp, #0]
 8020a30:	e9cd a301 	strd	sl, r3, [sp, #4]
 8020a34:	4642      	mov	r2, r8
 8020a36:	462b      	mov	r3, r5
 8020a38:	4649      	mov	r1, r9
 8020a3a:	4620      	mov	r0, r4
 8020a3c:	f7ff ff4a 	bl	80208d4 <MobleConfigModel_SendModelSubscriptionStatus>
 8020a40:	b00f      	add	sp, #60	@ 0x3c
 8020a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a46:	f04f 0801 	mov.w	r8, #1
 8020a4a:	2600      	movs	r6, #0
 8020a4c:	e7da      	b.n	8020a04 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xac>
 8020a4e:	f04f 0802 	mov.w	r8, #2
 8020a52:	4606      	mov	r6, r0
 8020a54:	e7d6      	b.n	8020a04 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xac>
 8020a56:	bf00      	nop
 8020a58:	0802ea81 	.word	0x0802ea81
 8020a5c:	0802d89b 	.word	0x0802d89b
 8020a60:	0802e513 	.word	0x0802e513
 8020a64:	0802e9dc 	.word	0x0802e9dc
 8020a68:	20002514 	.word	0x20002514

08020a6c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete>:
 8020a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a70:	4689      	mov	r9, r1
 8020a72:	b08f      	sub	sp, #60	@ 0x3c
 8020a74:	469a      	mov	sl, r3
 8020a76:	4604      	mov	r4, r0
 8020a78:	b930      	cbnz	r0, 8020a88 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x1c>
 8020a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8020b6c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x100>)
 8020a7c:	4a3c      	ldr	r2, [pc, #240]	@ (8020b70 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x104>)
 8020a7e:	f241 5152 	movw	r1, #5458	@ 0x1552
 8020a82:	483c      	ldr	r0, [pc, #240]	@ (8020b74 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x108>)
 8020a84:	f005 f906 	bl	8025c94 <__assert_func>
 8020a88:	6803      	ldr	r3, [r0, #0]
 8020a8a:	b923      	cbnz	r3, 8020a96 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x2a>
 8020a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8020b78 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x10c>)
 8020a8e:	4a38      	ldr	r2, [pc, #224]	@ (8020b70 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x104>)
 8020a90:	f241 5153 	movw	r1, #5459	@ 0x1553
 8020a94:	e7f5      	b.n	8020a82 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x16>
 8020a96:	4652      	mov	r2, sl
 8020a98:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 8020a9c:	f852 5b02 	ldr.w	r5, [r2], #2
 8020aa0:	f893 801c 	ldrb.w	r8, [r3, #28]
 8020aa4:	b2af      	uxth	r7, r5
 8020aa6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8020aaa:	4498      	add	r8, r3
 8020aac:	9705      	str	r7, [sp, #20]
 8020aae:	463d      	mov	r5, r7
 8020ab0:	ab06      	add	r3, sp, #24
 8020ab2:	eba7 070b 	sub.w	r7, r7, fp
 8020ab6:	fa1f f888 	uxth.w	r8, r8
 8020aba:	b2ff      	uxtb	r7, r7
 8020abc:	f10a 0e12 	add.w	lr, sl, #18
 8020ac0:	469c      	mov	ip, r3
 8020ac2:	6810      	ldr	r0, [r2, #0]
 8020ac4:	6851      	ldr	r1, [r2, #4]
 8020ac6:	461e      	mov	r6, r3
 8020ac8:	c603      	stmia	r6!, {r0, r1}
 8020aca:	3208      	adds	r2, #8
 8020acc:	4572      	cmp	r2, lr
 8020ace:	4633      	mov	r3, r6
 8020ad0:	d1f7      	bne.n	8020ac2 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x56>
 8020ad2:	4660      	mov	r0, ip
 8020ad4:	f7f5 fe34 	bl	8016740 <MobleConfigModelGetAddressFromVirtual>
 8020ad8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020ada:	2b14      	cmp	r3, #20
 8020adc:	bf0c      	ite	eq
 8020ade:	2102      	moveq	r1, #2
 8020ae0:	2104      	movne	r1, #4
 8020ae2:	4606      	mov	r6, r0
 8020ae4:	aa05      	add	r2, sp, #20
 8020ae6:	f10a 0012 	add.w	r0, sl, #18
 8020aea:	f7f7 fcc0 	bl	801846e <MobleInputStreamGetLittleEndian>
 8020aee:	455d      	cmp	r5, fp
 8020af0:	f8dd a014 	ldr.w	sl, [sp, #20]
 8020af4:	d001      	beq.n	8020afa <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x8e>
 8020af6:	4545      	cmp	r5, r8
 8020af8:	d82f      	bhi.n	8020b5a <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xee>
 8020afa:	4639      	mov	r1, r7
 8020afc:	4650      	mov	r0, sl
 8020afe:	f7f8 fcb4 	bl	801946a <MobleApplicationModelSupported>
 8020b02:	b370      	cbz	r0, 8020b62 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xf6>
 8020b04:	4633      	mov	r3, r6
 8020b06:	462a      	mov	r2, r5
 8020b08:	4651      	mov	r1, sl
 8020b0a:	4620      	mov	r0, r4
 8020b0c:	f7fa fbd8 	bl	801b2c0 <MobleConfigModel_SubscriptionDelete>
 8020b10:	4680      	mov	r8, r0
 8020b12:	6820      	ldr	r0, [r4, #0]
 8020b14:	f7f9 fafc 	bl	801a110 <MobleConfigNetworkSave>
 8020b18:	2301      	movs	r3, #1
 8020b1a:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8020b1e:	2300      	movs	r3, #0
 8020b20:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8020b24:	4b15      	ldr	r3, [pc, #84]	@ (8020b7c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x110>)
 8020b26:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8020b2a:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8020b2e:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 8020b32:	a80a      	add	r0, sp, #40	@ 0x28
 8020b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020b36:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 8020b3a:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8020b3e:	4798      	blx	r3
 8020b40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020b42:	9600      	str	r6, [sp, #0]
 8020b44:	e9cd a301 	strd	sl, r3, [sp, #4]
 8020b48:	4642      	mov	r2, r8
 8020b4a:	462b      	mov	r3, r5
 8020b4c:	4649      	mov	r1, r9
 8020b4e:	4620      	mov	r0, r4
 8020b50:	f7ff fec0 	bl	80208d4 <MobleConfigModel_SendModelSubscriptionStatus>
 8020b54:	b00f      	add	sp, #60	@ 0x3c
 8020b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b5a:	f04f 0801 	mov.w	r8, #1
 8020b5e:	2600      	movs	r6, #0
 8020b60:	e7da      	b.n	8020b18 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xac>
 8020b62:	f04f 0802 	mov.w	r8, #2
 8020b66:	4606      	mov	r6, r0
 8020b68:	e7d6      	b.n	8020b18 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xac>
 8020b6a:	bf00      	nop
 8020b6c:	0802ea81 	.word	0x0802ea81
 8020b70:	0802d8dc 	.word	0x0802d8dc
 8020b74:	0802e513 	.word	0x0802e513
 8020b78:	0802e9dc 	.word	0x0802e9dc
 8020b7c:	20002514 	.word	0x20002514

08020b80 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd>:
 8020b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b84:	468a      	mov	sl, r1
 8020b86:	b08f      	sub	sp, #60	@ 0x3c
 8020b88:	4699      	mov	r9, r3
 8020b8a:	4604      	mov	r4, r0
 8020b8c:	b930      	cbnz	r0, 8020b9c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x1c>
 8020b8e:	4b44      	ldr	r3, [pc, #272]	@ (8020ca0 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x120>)
 8020b90:	4a44      	ldr	r2, [pc, #272]	@ (8020ca4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x124>)
 8020b92:	f241 41e8 	movw	r1, #5352	@ 0x14e8
 8020b96:	4844      	ldr	r0, [pc, #272]	@ (8020ca8 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x128>)
 8020b98:	f005 f87c 	bl	8025c94 <__assert_func>
 8020b9c:	6803      	ldr	r3, [r0, #0]
 8020b9e:	b923      	cbnz	r3, 8020baa <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x2a>
 8020ba0:	4b42      	ldr	r3, [pc, #264]	@ (8020cac <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x12c>)
 8020ba2:	4a40      	ldr	r2, [pc, #256]	@ (8020ca4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x124>)
 8020ba4:	f241 41e9 	movw	r1, #5353	@ 0x14e9
 8020ba8:	e7f5      	b.n	8020b96 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x16>
 8020baa:	464a      	mov	r2, r9
 8020bac:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 8020bb0:	f852 5b02 	ldr.w	r5, [r2], #2
 8020bb4:	f893 801c 	ldrb.w	r8, [r3, #28]
 8020bb8:	b2af      	uxth	r7, r5
 8020bba:	f10b 33ff 	add.w	r3, fp, #4294967295
 8020bbe:	4498      	add	r8, r3
 8020bc0:	9705      	str	r7, [sp, #20]
 8020bc2:	463d      	mov	r5, r7
 8020bc4:	ab06      	add	r3, sp, #24
 8020bc6:	eba7 070b 	sub.w	r7, r7, fp
 8020bca:	fa1f f888 	uxth.w	r8, r8
 8020bce:	b2ff      	uxtb	r7, r7
 8020bd0:	f109 0e12 	add.w	lr, r9, #18
 8020bd4:	469c      	mov	ip, r3
 8020bd6:	6810      	ldr	r0, [r2, #0]
 8020bd8:	6851      	ldr	r1, [r2, #4]
 8020bda:	461e      	mov	r6, r3
 8020bdc:	c603      	stmia	r6!, {r0, r1}
 8020bde:	3208      	adds	r2, #8
 8020be0:	4572      	cmp	r2, lr
 8020be2:	4633      	mov	r3, r6
 8020be4:	d1f7      	bne.n	8020bd6 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x56>
 8020be6:	4660      	mov	r0, ip
 8020be8:	f7f5 fdaa 	bl	8016740 <MobleConfigModelGetAddressFromVirtual>
 8020bec:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020bee:	2b14      	cmp	r3, #20
 8020bf0:	bf0c      	ite	eq
 8020bf2:	2102      	moveq	r1, #2
 8020bf4:	2104      	movne	r1, #4
 8020bf6:	4606      	mov	r6, r0
 8020bf8:	aa05      	add	r2, sp, #20
 8020bfa:	f109 0012 	add.w	r0, r9, #18
 8020bfe:	f7f7 fc36 	bl	801846e <MobleInputStreamGetLittleEndian>
 8020c02:	455d      	cmp	r5, fp
 8020c04:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8020c08:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
 8020c0c:	d001      	beq.n	8020c12 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x92>
 8020c0e:	4545      	cmp	r5, r8
 8020c10:	d83d      	bhi.n	8020c8e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x10e>
 8020c12:	4639      	mov	r1, r7
 8020c14:	4648      	mov	r0, r9
 8020c16:	f7f8 fc28 	bl	801946a <MobleApplicationModelSupported>
 8020c1a:	2800      	cmp	r0, #0
 8020c1c:	d03b      	beq.n	8020c96 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x116>
 8020c1e:	6823      	ldr	r3, [r4, #0]
 8020c20:	f10d 0c18 	add.w	ip, sp, #24
 8020c24:	330c      	adds	r3, #12
 8020c26:	4662      	mov	r2, ip
 8020c28:	ca03      	ldmia	r2!, {r0, r1}
 8020c2a:	455a      	cmp	r2, fp
 8020c2c:	6018      	str	r0, [r3, #0]
 8020c2e:	6059      	str	r1, [r3, #4]
 8020c30:	4694      	mov	ip, r2
 8020c32:	f103 0308 	add.w	r3, r3, #8
 8020c36:	d1f6      	bne.n	8020c26 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0xa6>
 8020c38:	4633      	mov	r3, r6
 8020c3a:	462a      	mov	r2, r5
 8020c3c:	4649      	mov	r1, r9
 8020c3e:	4620      	mov	r0, r4
 8020c40:	f7fa fa9c 	bl	801b17c <MobleConfigModel_SubscriptionAdd>
 8020c44:	4680      	mov	r8, r0
 8020c46:	6820      	ldr	r0, [r4, #0]
 8020c48:	f7f9 fa62 	bl	801a110 <MobleConfigNetworkSave>
 8020c4c:	2301      	movs	r3, #1
 8020c4e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8020c52:	2300      	movs	r3, #0
 8020c54:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8020c58:	4b15      	ldr	r3, [pc, #84]	@ (8020cb0 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x130>)
 8020c5a:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8020c5e:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8020c62:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 8020c66:	4658      	mov	r0, fp
 8020c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020c6a:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 8020c6e:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8020c72:	4798      	blx	r3
 8020c74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020c76:	9600      	str	r6, [sp, #0]
 8020c78:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8020c7c:	4642      	mov	r2, r8
 8020c7e:	462b      	mov	r3, r5
 8020c80:	4651      	mov	r1, sl
 8020c82:	4620      	mov	r0, r4
 8020c84:	f7ff fe26 	bl	80208d4 <MobleConfigModel_SendModelSubscriptionStatus>
 8020c88:	b00f      	add	sp, #60	@ 0x3c
 8020c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c8e:	f04f 0801 	mov.w	r8, #1
 8020c92:	2600      	movs	r6, #0
 8020c94:	e7da      	b.n	8020c4c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0xcc>
 8020c96:	f04f 0802 	mov.w	r8, #2
 8020c9a:	4606      	mov	r6, r0
 8020c9c:	e7d6      	b.n	8020c4c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0xcc>
 8020c9e:	bf00      	nop
 8020ca0:	0802ea81 	.word	0x0802ea81
 8020ca4:	0802d91a 	.word	0x0802d91a
 8020ca8:	0802e513 	.word	0x0802e513
 8020cac:	0802e9dc 	.word	0x0802e9dc
 8020cb0:	20002514 	.word	0x20002514

08020cb4 <MobleConfigModel_ProcessModelSubscriptionOverwrite>:
 8020cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cb8:	4689      	mov	r9, r1
 8020cba:	b08b      	sub	sp, #44	@ 0x2c
 8020cbc:	4604      	mov	r4, r0
 8020cbe:	b930      	cbnz	r0, 8020cce <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x1a>
 8020cc0:	4b31      	ldr	r3, [pc, #196]	@ (8020d88 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xd4>)
 8020cc2:	4a32      	ldr	r2, [pc, #200]	@ (8020d8c <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xd8>)
 8020cc4:	f241 4182 	movw	r1, #5250	@ 0x1482
 8020cc8:	4831      	ldr	r0, [pc, #196]	@ (8020d90 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xdc>)
 8020cca:	f004 ffe3 	bl	8025c94 <__assert_func>
 8020cce:	6802      	ldr	r2, [r0, #0]
 8020cd0:	b922      	cbnz	r2, 8020cdc <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x28>
 8020cd2:	4b30      	ldr	r3, [pc, #192]	@ (8020d94 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xe0>)
 8020cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8020d8c <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xd8>)
 8020cd6:	f241 4183 	movw	r1, #5251	@ 0x1483
 8020cda:	e7f5      	b.n	8020cc8 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x14>
 8020cdc:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 8020ce0:	7f16      	ldrb	r6, [r2, #28]
 8020ce2:	f8d3 7002 	ldr.w	r7, [r3, #2]
 8020ce6:	681d      	ldr	r5, [r3, #0]
 8020ce8:	f10b 32ff 	add.w	r2, fp, #4294967295
 8020cec:	4416      	add	r6, r2
 8020cee:	b2ba      	uxth	r2, r7
 8020cf0:	9205      	str	r2, [sp, #20]
 8020cf2:	4617      	mov	r7, r2
 8020cf4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020cf6:	2a06      	cmp	r2, #6
 8020cf8:	fa1f f885 	uxth.w	r8, r5
 8020cfc:	bf0c      	ite	eq
 8020cfe:	2102      	moveq	r1, #2
 8020d00:	2104      	movne	r1, #4
 8020d02:	aa05      	add	r2, sp, #20
 8020d04:	1d18      	adds	r0, r3, #4
 8020d06:	f7f7 fbb2 	bl	801846e <MobleInputStreamGetLittleEndian>
 8020d0a:	eba5 050b 	sub.w	r5, r5, fp
 8020d0e:	45d8      	cmp	r8, fp
 8020d10:	f8dd a014 	ldr.w	sl, [sp, #20]
 8020d14:	b2b6      	uxth	r6, r6
 8020d16:	f005 05ff 	and.w	r5, r5, #255	@ 0xff
 8020d1a:	d001      	beq.n	8020d20 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x6c>
 8020d1c:	45b0      	cmp	r8, r6
 8020d1e:	d82e      	bhi.n	8020d7e <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xca>
 8020d20:	4629      	mov	r1, r5
 8020d22:	4650      	mov	r0, sl
 8020d24:	f7f8 fba1 	bl	801946a <MobleApplicationModelSupported>
 8020d28:	b358      	cbz	r0, 8020d82 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xce>
 8020d2a:	463b      	mov	r3, r7
 8020d2c:	4642      	mov	r2, r8
 8020d2e:	4651      	mov	r1, sl
 8020d30:	4620      	mov	r0, r4
 8020d32:	f7fa f9bf 	bl	801b0b4 <MobleConfigModel_SubscriptionOverwrite>
 8020d36:	4606      	mov	r6, r0
 8020d38:	6820      	ldr	r0, [r4, #0]
 8020d3a:	f7f9 f9e9 	bl	801a110 <MobleConfigNetworkSave>
 8020d3e:	2300      	movs	r3, #0
 8020d40:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8020d44:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8020d48:	4b13      	ldr	r3, [pc, #76]	@ (8020d98 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xe4>)
 8020d4a:	f88d 5018 	strb.w	r5, [sp, #24]
 8020d4e:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8020d52:	f8cd a01c 	str.w	sl, [sp, #28]
 8020d56:	a806      	add	r0, sp, #24
 8020d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020d5a:	f8ad 7020 	strh.w	r7, [sp, #32]
 8020d5e:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8020d62:	4798      	blx	r3
 8020d64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020d66:	9700      	str	r7, [sp, #0]
 8020d68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8020d6c:	4632      	mov	r2, r6
 8020d6e:	4643      	mov	r3, r8
 8020d70:	4649      	mov	r1, r9
 8020d72:	4620      	mov	r0, r4
 8020d74:	f7ff fdae 	bl	80208d4 <MobleConfigModel_SendModelSubscriptionStatus>
 8020d78:	b00b      	add	sp, #44	@ 0x2c
 8020d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d7e:	2601      	movs	r6, #1
 8020d80:	e7dd      	b.n	8020d3e <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x8a>
 8020d82:	2602      	movs	r6, #2
 8020d84:	e7db      	b.n	8020d3e <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x8a>
 8020d86:	bf00      	nop
 8020d88:	0802ea81 	.word	0x0802ea81
 8020d8c:	0802d955 	.word	0x0802d955
 8020d90:	0802e513 	.word	0x0802e513
 8020d94:	0802e9dc 	.word	0x0802e9dc
 8020d98:	20002514 	.word	0x20002514

08020d9c <MobleConfigModel_ProcessModelSubscriptionDeleteAll>:
 8020d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020da0:	b08d      	sub	sp, #52	@ 0x34
 8020da2:	4605      	mov	r5, r0
 8020da4:	4618      	mov	r0, r3
 8020da6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020da8:	f850 6b02 	ldr.w	r6, [r0], #2
 8020dac:	f8d5 9000 	ldr.w	r9, [r5]
 8020db0:	2b04      	cmp	r3, #4
 8020db2:	4688      	mov	r8, r1
 8020db4:	b2b4      	uxth	r4, r6
 8020db6:	bf0c      	ite	eq
 8020db8:	2102      	moveq	r1, #2
 8020dba:	2104      	movne	r1, #4
 8020dbc:	aa07      	add	r2, sp, #28
 8020dbe:	f8b9 a002 	ldrh.w	sl, [r9, #2]
 8020dc2:	9407      	str	r4, [sp, #28]
 8020dc4:	f7f7 fb53 	bl	801846e <MobleInputStreamGetLittleEndian>
 8020dc8:	f8d9 3024 	ldr.w	r3, [r9, #36]	@ 0x24
 8020dcc:	9f07      	ldr	r7, [sp, #28]
 8020dce:	8819      	ldrh	r1, [r3, #0]
 8020dd0:	f899 201c 	ldrb.w	r2, [r9, #28]
 8020dd4:	42a1      	cmp	r1, r4
 8020dd6:	4626      	mov	r6, r4
 8020dd8:	d10b      	bne.n	8020df2 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x56>
 8020dda:	2f02      	cmp	r7, #2
 8020ddc:	d109      	bne.n	8020df2 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x56>
 8020dde:	2100      	movs	r1, #0
 8020de0:	f8a3 1066 	strh.w	r1, [r3, #102]	@ 0x66
 8020de4:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
 8020de8:	4648      	mov	r0, r9
 8020dea:	9205      	str	r2, [sp, #20]
 8020dec:	f7f9 f990 	bl	801a110 <MobleConfigNetworkSave>
 8020df0:	9a05      	ldr	r2, [sp, #20]
 8020df2:	2300      	movs	r3, #0
 8020df4:	4699      	mov	r9, r3
 8020df6:	b2d9      	uxtb	r1, r3
 8020df8:	428a      	cmp	r2, r1
 8020dfa:	d92e      	bls.n	8020e5a <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xbe>
 8020dfc:	f8d5 b000 	ldr.w	fp, [r5]
 8020e00:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
 8020e04:	f04f 0901 	mov.w	r9, #1
 8020e08:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 8020e0a:	8801      	ldrh	r1, [r0, #0]
 8020e0c:	42b1      	cmp	r1, r6
 8020e0e:	f103 0301 	add.w	r3, r3, #1
 8020e12:	d1f0      	bne.n	8020df6 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x5a>
 8020e14:	2300      	movs	r3, #0
 8020e16:	f04f 0c38 	mov.w	ip, #56	@ 0x38
 8020e1a:	f100 0e78 	add.w	lr, r0, #120	@ 0x78
 8020e1e:	fb0c f103 	mul.w	r1, ip, r3
 8020e22:	f85e 2001 	ldr.w	r2, [lr, r1]
 8020e26:	4297      	cmp	r7, r2
 8020e28:	d112      	bne.n	8020e50 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xb4>
 8020e2a:	f101 0380 	add.w	r3, r1, #128	@ 0x80
 8020e2e:	2214      	movs	r2, #20
 8020e30:	2100      	movs	r1, #0
 8020e32:	4418      	add	r0, r3
 8020e34:	f005 fecc 	bl	8026bd0 <memset>
 8020e38:	4658      	mov	r0, fp
 8020e3a:	f7f9 f969 	bl	801a110 <MobleConfigNetworkSave>
 8020e3e:	eba4 040a 	sub.w	r4, r4, sl
 8020e42:	b2e4      	uxtb	r4, r4
 8020e44:	f04f 0900 	mov.w	r9, #0
 8020e48:	6828      	ldr	r0, [r5, #0]
 8020e4a:	f7f9 f961 	bl	801a110 <MobleConfigNetworkSave>
 8020e4e:	e00a      	b.n	8020e66 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xca>
 8020e50:	3301      	adds	r3, #1
 8020e52:	2b0b      	cmp	r3, #11
 8020e54:	d1e3      	bne.n	8020e1e <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x82>
 8020e56:	f04f 0902 	mov.w	r9, #2
 8020e5a:	eba4 040a 	sub.w	r4, r4, sl
 8020e5e:	f1b9 0f02 	cmp.w	r9, #2
 8020e62:	b2e4      	uxtb	r4, r4
 8020e64:	d1f0      	bne.n	8020e48 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xac>
 8020e66:	2301      	movs	r3, #1
 8020e68:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8020e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8020ea8 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x10c>)
 8020e6e:	f88d 4020 	strb.w	r4, [sp, #32]
 8020e72:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8020e76:	9709      	str	r7, [sp, #36]	@ 0x24
 8020e78:	2400      	movs	r4, #0
 8020e7a:	a808      	add	r0, sp, #32
 8020e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020e7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8020e80:	4798      	blx	r3
 8020e82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020e84:	9400      	str	r4, [sp, #0]
 8020e86:	f1b9 0f02 	cmp.w	r9, #2
 8020e8a:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8020e8e:	bf08      	it	eq
 8020e90:	2205      	moveq	r2, #5
 8020e92:	4633      	mov	r3, r6
 8020e94:	bf18      	it	ne
 8020e96:	4622      	movne	r2, r4
 8020e98:	4641      	mov	r1, r8
 8020e9a:	4628      	mov	r0, r5
 8020e9c:	f7ff fd1a 	bl	80208d4 <MobleConfigModel_SendModelSubscriptionStatus>
 8020ea0:	b00d      	add	sp, #52	@ 0x34
 8020ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ea6:	bf00      	nop
 8020ea8:	20002514 	.word	0x20002514

08020eac <MobleConfigModel_ProcessModelSubscriptionDelete>:
 8020eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020eb0:	4689      	mov	r9, r1
 8020eb2:	b08b      	sub	sp, #44	@ 0x2c
 8020eb4:	4604      	mov	r4, r0
 8020eb6:	b930      	cbnz	r0, 8020ec6 <MobleConfigModel_ProcessModelSubscriptionDelete+0x1a>
 8020eb8:	4b31      	ldr	r3, [pc, #196]	@ (8020f80 <MobleConfigModel_ProcessModelSubscriptionDelete+0xd4>)
 8020eba:	4a32      	ldr	r2, [pc, #200]	@ (8020f84 <MobleConfigModel_ProcessModelSubscriptionDelete+0xd8>)
 8020ebc:	f241 31e5 	movw	r1, #5093	@ 0x13e5
 8020ec0:	4831      	ldr	r0, [pc, #196]	@ (8020f88 <MobleConfigModel_ProcessModelSubscriptionDelete+0xdc>)
 8020ec2:	f004 fee7 	bl	8025c94 <__assert_func>
 8020ec6:	6802      	ldr	r2, [r0, #0]
 8020ec8:	b922      	cbnz	r2, 8020ed4 <MobleConfigModel_ProcessModelSubscriptionDelete+0x28>
 8020eca:	4b30      	ldr	r3, [pc, #192]	@ (8020f8c <MobleConfigModel_ProcessModelSubscriptionDelete+0xe0>)
 8020ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8020f84 <MobleConfigModel_ProcessModelSubscriptionDelete+0xd8>)
 8020ece:	f241 31e6 	movw	r1, #5094	@ 0x13e6
 8020ed2:	e7f5      	b.n	8020ec0 <MobleConfigModel_ProcessModelSubscriptionDelete+0x14>
 8020ed4:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 8020ed8:	7f16      	ldrb	r6, [r2, #28]
 8020eda:	f8d3 7002 	ldr.w	r7, [r3, #2]
 8020ede:	681d      	ldr	r5, [r3, #0]
 8020ee0:	f10b 32ff 	add.w	r2, fp, #4294967295
 8020ee4:	4416      	add	r6, r2
 8020ee6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020ee8:	b2b9      	uxth	r1, r7
 8020eea:	2a06      	cmp	r2, #6
 8020eec:	9105      	str	r1, [sp, #20]
 8020eee:	fa1f f885 	uxth.w	r8, r5
 8020ef2:	460f      	mov	r7, r1
 8020ef4:	aa05      	add	r2, sp, #20
 8020ef6:	bf0c      	ite	eq
 8020ef8:	2102      	moveq	r1, #2
 8020efa:	2104      	movne	r1, #4
 8020efc:	1d18      	adds	r0, r3, #4
 8020efe:	f7f7 fab6 	bl	801846e <MobleInputStreamGetLittleEndian>
 8020f02:	eba5 050b 	sub.w	r5, r5, fp
 8020f06:	45d8      	cmp	r8, fp
 8020f08:	f8dd a014 	ldr.w	sl, [sp, #20]
 8020f0c:	b2b6      	uxth	r6, r6
 8020f0e:	f005 05ff 	and.w	r5, r5, #255	@ 0xff
 8020f12:	d001      	beq.n	8020f18 <MobleConfigModel_ProcessModelSubscriptionDelete+0x6c>
 8020f14:	45b0      	cmp	r8, r6
 8020f16:	d82e      	bhi.n	8020f76 <MobleConfigModel_ProcessModelSubscriptionDelete+0xca>
 8020f18:	4629      	mov	r1, r5
 8020f1a:	4650      	mov	r0, sl
 8020f1c:	f7f8 faa5 	bl	801946a <MobleApplicationModelSupported>
 8020f20:	b358      	cbz	r0, 8020f7a <MobleConfigModel_ProcessModelSubscriptionDelete+0xce>
 8020f22:	463b      	mov	r3, r7
 8020f24:	4642      	mov	r2, r8
 8020f26:	4651      	mov	r1, sl
 8020f28:	4620      	mov	r0, r4
 8020f2a:	f7fa f9c9 	bl	801b2c0 <MobleConfigModel_SubscriptionDelete>
 8020f2e:	4606      	mov	r6, r0
 8020f30:	6820      	ldr	r0, [r4, #0]
 8020f32:	f7f9 f8ed 	bl	801a110 <MobleConfigNetworkSave>
 8020f36:	2300      	movs	r3, #0
 8020f38:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8020f3c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8020f40:	4b13      	ldr	r3, [pc, #76]	@ (8020f90 <MobleConfigModel_ProcessModelSubscriptionDelete+0xe4>)
 8020f42:	f88d 5018 	strb.w	r5, [sp, #24]
 8020f46:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8020f4a:	f8cd a01c 	str.w	sl, [sp, #28]
 8020f4e:	a806      	add	r0, sp, #24
 8020f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020f52:	f8ad 7020 	strh.w	r7, [sp, #32]
 8020f56:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8020f5a:	4798      	blx	r3
 8020f5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020f5e:	9700      	str	r7, [sp, #0]
 8020f60:	e9cd a301 	strd	sl, r3, [sp, #4]
 8020f64:	4632      	mov	r2, r6
 8020f66:	4643      	mov	r3, r8
 8020f68:	4649      	mov	r1, r9
 8020f6a:	4620      	mov	r0, r4
 8020f6c:	f7ff fcb2 	bl	80208d4 <MobleConfigModel_SendModelSubscriptionStatus>
 8020f70:	b00b      	add	sp, #44	@ 0x2c
 8020f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f76:	2601      	movs	r6, #1
 8020f78:	e7dd      	b.n	8020f36 <MobleConfigModel_ProcessModelSubscriptionDelete+0x8a>
 8020f7a:	2602      	movs	r6, #2
 8020f7c:	e7db      	b.n	8020f36 <MobleConfigModel_ProcessModelSubscriptionDelete+0x8a>
 8020f7e:	bf00      	nop
 8020f80:	0802ea81 	.word	0x0802ea81
 8020f84:	0802d988 	.word	0x0802d988
 8020f88:	0802e513 	.word	0x0802e513
 8020f8c:	0802e9dc 	.word	0x0802e9dc
 8020f90:	20002514 	.word	0x20002514

08020f94 <MobleConfigModel_ProcessModelSubscriptionAdd>:
 8020f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f98:	4607      	mov	r7, r0
 8020f9a:	4618      	mov	r0, r3
 8020f9c:	f8d7 b000 	ldr.w	fp, [r7]
 8020fa0:	f8d0 6002 	ldr.w	r6, [r0, #2]
 8020fa4:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020fa8:	f89b 501c 	ldrb.w	r5, [fp, #28]
 8020fac:	6804      	ldr	r4, [r0, #0]
 8020fae:	b08d      	sub	sp, #52	@ 0x34
 8020fb0:	1e5a      	subs	r2, r3, #1
 8020fb2:	4415      	add	r5, r2
 8020fb4:	b2b2      	uxth	r2, r6
 8020fb6:	9207      	str	r2, [sp, #28]
 8020fb8:	4616      	mov	r6, r2
 8020fba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020fbc:	9305      	str	r3, [sp, #20]
 8020fbe:	2a06      	cmp	r2, #6
 8020fc0:	468a      	mov	sl, r1
 8020fc2:	aa07      	add	r2, sp, #28
 8020fc4:	bf0c      	ite	eq
 8020fc6:	2102      	moveq	r1, #2
 8020fc8:	2104      	movne	r1, #4
 8020fca:	3004      	adds	r0, #4
 8020fcc:	fa1f f884 	uxth.w	r8, r4
 8020fd0:	1ae4      	subs	r4, r4, r3
 8020fd2:	f7f7 fa4c 	bl	801846e <MobleInputStreamGetLittleEndian>
 8020fd6:	9b05      	ldr	r3, [sp, #20]
 8020fd8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8020fdc:	4543      	cmp	r3, r8
 8020fde:	b2ad      	uxth	r5, r5
 8020fe0:	f004 04ff 	and.w	r4, r4, #255	@ 0xff
 8020fe4:	d025      	beq.n	8021032 <MobleConfigModel_ProcessModelSubscriptionAdd+0x9e>
 8020fe6:	4545      	cmp	r5, r8
 8020fe8:	d223      	bcs.n	8021032 <MobleConfigModel_ProcessModelSubscriptionAdd+0x9e>
 8020fea:	4658      	mov	r0, fp
 8020fec:	f7f9 f890 	bl	801a110 <MobleConfigNetworkSave>
 8020ff0:	2501      	movs	r5, #1
 8020ff2:	2300      	movs	r3, #0
 8020ff4:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8020ff8:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8020ffc:	4b14      	ldr	r3, [pc, #80]	@ (8021050 <MobleConfigModel_ProcessModelSubscriptionAdd+0xbc>)
 8020ffe:	f88d 4020 	strb.w	r4, [sp, #32]
 8021002:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8021006:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 802100a:	a808      	add	r0, sp, #32
 802100c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802100e:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 8021012:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8021016:	4798      	blx	r3
 8021018:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802101a:	9600      	str	r6, [sp, #0]
 802101c:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8021020:	462a      	mov	r2, r5
 8021022:	4643      	mov	r3, r8
 8021024:	4651      	mov	r1, sl
 8021026:	4638      	mov	r0, r7
 8021028:	f7ff fc54 	bl	80208d4 <MobleConfigModel_SendModelSubscriptionStatus>
 802102c:	b00d      	add	sp, #52	@ 0x34
 802102e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021032:	4621      	mov	r1, r4
 8021034:	4648      	mov	r0, r9
 8021036:	f7f8 fa18 	bl	801946a <MobleApplicationModelSupported>
 802103a:	b138      	cbz	r0, 802104c <MobleConfigModel_ProcessModelSubscriptionAdd+0xb8>
 802103c:	4633      	mov	r3, r6
 802103e:	4642      	mov	r2, r8
 8021040:	4649      	mov	r1, r9
 8021042:	4638      	mov	r0, r7
 8021044:	f7fa f89a 	bl	801b17c <MobleConfigModel_SubscriptionAdd>
 8021048:	4605      	mov	r5, r0
 802104a:	e7d2      	b.n	8020ff2 <MobleConfigModel_ProcessModelSubscriptionAdd+0x5e>
 802104c:	2502      	movs	r5, #2
 802104e:	e7d0      	b.n	8020ff2 <MobleConfigModel_ProcessModelSubscriptionAdd+0x5e>
 8021050:	20002514 	.word	0x20002514

08021054 <MobleConfigModel_SendModelPublicationStatus>:
 8021054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021058:	b085      	sub	sp, #20
 802105a:	460e      	mov	r6, r1
 802105c:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8021060:	9401      	str	r4, [sp, #4]
 8021062:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8021066:	9402      	str	r4, [sp, #8]
 8021068:	4619      	mov	r1, r3
 802106a:	e9dd 7415 	ldrd	r7, r4, [sp, #84]	@ 0x54
 802106e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8021072:	f8bd b03c 	ldrh.w	fp, [sp, #60]	@ 0x3c
 8021076:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 802107a:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 802107e:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 8021082:	4605      	mov	r5, r0
 8021084:	b930      	cbnz	r0, 8021094 <MobleConfigModel_SendModelPublicationStatus+0x40>
 8021086:	4b25      	ldr	r3, [pc, #148]	@ (802111c <MobleConfigModel_SendModelPublicationStatus+0xc8>)
 8021088:	4a25      	ldr	r2, [pc, #148]	@ (8021120 <MobleConfigModel_SendModelPublicationStatus+0xcc>)
 802108a:	4826      	ldr	r0, [pc, #152]	@ (8021124 <MobleConfigModel_SendModelPublicationStatus+0xd0>)
 802108c:	f640 0199 	movw	r1, #2201	@ 0x899
 8021090:	f004 fe00 	bl	8025c94 <__assert_func>
 8021094:	f04f 0c19 	mov.w	ip, #25
 8021098:	2000      	movs	r0, #0
 802109a:	f884 c000 	strb.w	ip, [r4]
 802109e:	f06f 0c7f 	mvn.w	ip, #127	@ 0x7f
 80210a2:	f884 c001 	strb.w	ip, [r4, #1]
 80210a6:	70a0      	strb	r0, [r4, #2]
 80210a8:	70e0      	strb	r0, [r4, #3]
 80210aa:	7222      	strb	r2, [r4, #8]
 80210ac:	f104 0009 	add.w	r0, r4, #9
 80210b0:	2202      	movs	r2, #2
 80210b2:	9303      	str	r3, [sp, #12]
 80210b4:	f7f7 ff60 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 80210b8:	9b03      	ldr	r3, [sp, #12]
 80210ba:	f104 000b 	add.w	r0, r4, #11
 80210be:	4619      	mov	r1, r3
 80210c0:	f7f7 ff5a 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 80210c4:	4659      	mov	r1, fp
 80210c6:	f104 000d 	add.w	r0, r4, #13
 80210ca:	f7f7 ff55 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 80210ce:	7ba3      	ldrb	r3, [r4, #14]
 80210d0:	f884 900f 	strb.w	r9, [r4, #15]
 80210d4:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
 80210d8:	73a3      	strb	r3, [r4, #14]
 80210da:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 80210de:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 80210e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80210e6:	7463      	strb	r3, [r4, #17]
 80210e8:	bf28      	it	cs
 80210ea:	2204      	movcs	r2, #4
 80210ec:	4639      	mov	r1, r7
 80210ee:	f884 8010 	strb.w	r8, [r4, #16]
 80210f2:	f104 0012 	add.w	r0, r4, #18
 80210f6:	f7f7 ff3f 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 80210fa:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 80210fe:	bf2c      	ite	cs
 8021100:	230e      	movcs	r3, #14
 8021102:	230c      	movcc	r3, #12
 8021104:	f8c4 30a3 	str.w	r3, [r4, #163]	@ 0xa3
 8021108:	4632      	mov	r2, r6
 802110a:	4623      	mov	r3, r4
 802110c:	2101      	movs	r1, #1
 802110e:	4628      	mov	r0, r5
 8021110:	b005      	add	sp, #20
 8021112:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021116:	f7fe be15 	b.w	801fd44 <MobleModelSendPacket>
 802111a:	bf00      	nop
 802111c:	0802e501 	.word	0x0802e501
 8021120:	0802d9b8 	.word	0x0802d9b8
 8021124:	0802e513 	.word	0x0802e513

08021128 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet>:
 8021128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802112c:	461c      	mov	r4, r3
 802112e:	6803      	ldr	r3, [r0, #0]
 8021130:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8021134:	885b      	ldrh	r3, [r3, #2]
 8021136:	1e5a      	subs	r2, r3, #1
 8021138:	b0a3      	sub	sp, #140	@ 0x8c
 802113a:	445a      	add	r2, fp
 802113c:	b292      	uxth	r2, r2
 802113e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021140:	4622      	mov	r2, r4
 8021142:	ad10      	add	r5, sp, #64	@ 0x40
 8021144:	f852 ab02 	ldr.w	sl, [r2], #2
 8021148:	4606      	mov	r6, r0
 802114a:	4688      	mov	r8, r1
 802114c:	fa1f f78a 	uxth.w	r7, sl
 8021150:	f104 0912 	add.w	r9, r4, #18
 8021154:	46ae      	mov	lr, r5
 8021156:	6810      	ldr	r0, [r2, #0]
 8021158:	6851      	ldr	r1, [r2, #4]
 802115a:	46ac      	mov	ip, r5
 802115c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8021160:	3208      	adds	r2, #8
 8021162:	454a      	cmp	r2, r9
 8021164:	4665      	mov	r5, ip
 8021166:	d1f6      	bne.n	8021156 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x2e>
 8021168:	4670      	mov	r0, lr
 802116a:	930d      	str	r3, [sp, #52]	@ 0x34
 802116c:	f7f5 fae8 	bl	8016740 <MobleConfigModelGetAddressFromVirtual>
 8021170:	f8d4 5012 	ldr.w	r5, [r4, #18]
 8021174:	900c      	str	r0, [sp, #48]	@ 0x30
 8021176:	b2aa      	uxth	r2, r5
 8021178:	920f      	str	r2, [sp, #60]	@ 0x3c
 802117a:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 802117c:	2a19      	cmp	r2, #25
 802117e:	bf08      	it	eq
 8021180:	2102      	moveq	r1, #2
 8021182:	aa0f      	add	r2, sp, #60	@ 0x3c
 8021184:	bf18      	it	ne
 8021186:	2104      	movne	r1, #4
 8021188:	f104 0017 	add.w	r0, r4, #23
 802118c:	f7f7 f96f 	bl	801846e <MobleInputStreamGetLittleEndian>
 8021190:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021192:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 8021196:	2200      	movs	r2, #0
 8021198:	42bb      	cmp	r3, r7
 802119a:	9215      	str	r2, [sp, #84]	@ 0x54
 802119c:	921b      	str	r2, [sp, #108]	@ 0x6c
 802119e:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 80211a2:	d002      	beq.n	80211aa <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x82>
 80211a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80211a6:	42ba      	cmp	r2, r7
 80211a8:	d34e      	bcc.n	8021248 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x120>
 80211aa:	ebaa 0103 	sub.w	r1, sl, r3
 80211ae:	b2c9      	uxtb	r1, r1
 80211b0:	4648      	mov	r0, r9
 80211b2:	f7f8 f95a 	bl	801946a <MobleApplicationModelSupported>
 80211b6:	2800      	cmp	r0, #0
 80211b8:	d048      	beq.n	802124c <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x124>
 80211ba:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80211be:	4628      	mov	r0, r5
 80211c0:	f7f5 f874 	bl	80162ac <MoblePalCryptoHasAppKey>
 80211c4:	2800      	cmp	r0, #0
 80211c6:	d043      	beq.n	8021250 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x128>
 80211c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80211ca:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
 80211ce:	7ce3      	ldrb	r3, [r4, #19]
 80211d0:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 80211d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80211d8:	f88d 306c 	strb.w	r3, [sp, #108]	@ 0x6c
 80211dc:	7d23      	ldrb	r3, [r4, #20]
 80211de:	f88d 306d 	strb.w	r3, [sp, #109]	@ 0x6d
 80211e2:	7d63      	ldrb	r3, [r4, #21]
 80211e4:	f88d 306e 	strb.w	r3, [sp, #110]	@ 0x6e
 80211e8:	7da3      	ldrb	r3, [r4, #22]
 80211ea:	f8ad 5056 	strh.w	r5, [sp, #86]	@ 0x56
 80211ee:	f003 0207 	and.w	r2, r3, #7
 80211f2:	f88d 206f 	strb.w	r2, [sp, #111]	@ 0x6f
 80211f6:	08db      	lsrs	r3, r3, #3
 80211f8:	aa14      	add	r2, sp, #80	@ 0x50
 80211fa:	4639      	mov	r1, r7
 80211fc:	4658      	mov	r0, fp
 80211fe:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8021202:	f7f6 fae3 	bl	80177cc <MoblePalCrypto_UpdateModelPublicationParameters>
 8021206:	2200      	movs	r2, #0
 8021208:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 802120a:	e9cd 9307 	strd	r9, r3, [sp, #28]
 802120e:	f89d 3070 	ldrb.w	r3, [sp, #112]	@ 0x70
 8021212:	9306      	str	r3, [sp, #24]
 8021214:	f89d 306f 	ldrb.w	r3, [sp, #111]	@ 0x6f
 8021218:	9305      	str	r3, [sp, #20]
 802121a:	f89d 306e 	ldrb.w	r3, [sp, #110]	@ 0x6e
 802121e:	9304      	str	r3, [sp, #16]
 8021220:	f89d 306d 	ldrb.w	r3, [sp, #109]	@ 0x6d
 8021224:	9303      	str	r3, [sp, #12]
 8021226:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 802122a:	9302      	str	r3, [sp, #8]
 802122c:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 8021230:	9301      	str	r3, [sp, #4]
 8021232:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8021236:	9300      	str	r3, [sp, #0]
 8021238:	4641      	mov	r1, r8
 802123a:	463b      	mov	r3, r7
 802123c:	4630      	mov	r0, r6
 802123e:	f7ff ff09 	bl	8021054 <MobleConfigModel_SendModelPublicationStatus>
 8021242:	b023      	add	sp, #140	@ 0x8c
 8021244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021248:	2201      	movs	r2, #1
 802124a:	e7dd      	b.n	8021208 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0xe0>
 802124c:	2202      	movs	r2, #2
 802124e:	e7db      	b.n	8021208 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0xe0>
 8021250:	2203      	movs	r2, #3
 8021252:	e7d9      	b.n	8021208 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0xe0>

08021254 <MobleConfigModel_ProcessModelPublicationSet>:
 8021254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021258:	6802      	ldr	r2, [r0, #0]
 802125a:	ed2d 8b02 	vpush	{d8}
 802125e:	469a      	mov	sl, r3
 8021260:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021264:	f892 b01c 	ldrb.w	fp, [r2, #28]
 8021268:	f8da 7004 	ldr.w	r7, [sl, #4]
 802126c:	f8da 8000 	ldr.w	r8, [sl]
 8021270:	f109 32ff 	add.w	r2, r9, #4294967295
 8021274:	b0a3      	sub	sp, #140	@ 0x8c
 8021276:	445a      	add	r2, fp
 8021278:	b293      	uxth	r3, r2
 802127a:	b2ba      	uxth	r2, r7
 802127c:	920e      	str	r2, [sp, #56]	@ 0x38
 802127e:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8021280:	930a      	str	r3, [sp, #40]	@ 0x28
 8021282:	2a0b      	cmp	r2, #11
 8021284:	ee08 1a10 	vmov	s16, r1
 8021288:	f8da 3002 	ldr.w	r3, [sl, #2]
 802128c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802128e:	fa1f f588 	uxth.w	r5, r8
 8021292:	aa0e      	add	r2, sp, #56	@ 0x38
 8021294:	bf0c      	ite	eq
 8021296:	2102      	moveq	r1, #2
 8021298:	2104      	movne	r1, #4
 802129a:	4606      	mov	r6, r0
 802129c:	f10a 0009 	add.w	r0, sl, #9
 80212a0:	f7f7 f8e5 	bl	801846e <MobleInputStreamGetLittleEndian>
 80212a4:	2200      	movs	r2, #0
 80212a6:	45a9      	cmp	r9, r5
 80212a8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80212aa:	9215      	str	r2, [sp, #84]	@ 0x54
 80212ac:	fa5f f888 	uxtb.w	r8, r8
 80212b0:	921b      	str	r2, [sp, #108]	@ 0x6c
 80212b2:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 80212b6:	d003      	beq.n	80212c0 <MobleConfigModel_ProcessModelPublicationSet+0x6c>
 80212b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80212ba:	42ab      	cmp	r3, r5
 80212bc:	f0c0 80a8 	bcc.w	8021410 <MobleConfigModel_ProcessModelPublicationSet+0x1bc>
 80212c0:	eba8 0109 	sub.w	r1, r8, r9
 80212c4:	b2c9      	uxtb	r1, r1
 80212c6:	4620      	mov	r0, r4
 80212c8:	f7f8 f8cf 	bl	801946a <MobleApplicationModelSupported>
 80212cc:	2800      	cmp	r0, #0
 80212ce:	f000 80a1 	beq.w	8021414 <MobleConfigModel_ProcessModelPublicationSet+0x1c0>
 80212d2:	f3c7 020b 	ubfx	r2, r7, #0, #12
 80212d6:	4610      	mov	r0, r2
 80212d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80212da:	f7f4 ffe7 	bl	80162ac <MoblePalCryptoHasAppKey>
 80212de:	2800      	cmp	r0, #0
 80212e0:	f000 809a 	beq.w	8021418 <MobleConfigModel_ProcessModelPublicationSet+0x1c4>
 80212e4:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 80212e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80212ea:	2f00      	cmp	r7, #0
 80212ec:	d164      	bne.n	80213b8 <MobleConfigModel_ProcessModelPublicationSet+0x164>
 80212ee:	2c02      	cmp	r4, #2
 80212f0:	9414      	str	r4, [sp, #80]	@ 0x50
 80212f2:	d15b      	bne.n	80213ac <MobleConfigModel_ProcessModelPublicationSet+0x158>
 80212f4:	a914      	add	r1, sp, #80	@ 0x50
 80212f6:	4628      	mov	r0, r5
 80212f8:	f7f6 fac2 	bl	8017880 <MoblePalCrypto_UpdateHealthModelPublicationParameters>
 80212fc:	6830      	ldr	r0, [r6, #0]
 80212fe:	f7f8 ff07 	bl	801a110 <MobleConfigNetworkSave>
 8021302:	2c02      	cmp	r4, #2
 8021304:	d102      	bne.n	802130c <MobleConfigModel_ProcessModelPublicationSet+0xb8>
 8021306:	4630      	mov	r0, r6
 8021308:	f7f3 fe8e 	bl	8015028 <BnrgmHealthModelSetPublishTimer>
 802130c:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 8021310:	f88d 803c 	strb.w	r8, [sp, #60]	@ 0x3c
 8021314:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 802141c <MobleConfigModel_ProcessModelPublicationSet+0x1c8>
 8021318:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 802131a:	9112      	str	r1, [sp, #72]	@ 0x48
 802131c:	469a      	mov	sl, r3
 802131e:	f89d 306d 	ldrb.w	r3, [sp, #109]	@ 0x6d
 8021322:	f8d8 16f8 	ldr.w	r1, [r8, #1784]	@ 0x6f8
 8021326:	930a      	str	r3, [sp, #40]	@ 0x28
 8021328:	f89d 306e 	ldrb.w	r3, [sp, #110]	@ 0x6e
 802132c:	f8bd 9054 	ldrh.w	r9, [sp, #84]	@ 0x54
 8021330:	f8bd b056 	ldrh.w	fp, [sp, #86]	@ 0x56
 8021334:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021336:	f89d 3070 	ldrb.w	r3, [sp, #112]	@ 0x70
 802133a:	f89d 206f 	ldrb.w	r2, [sp, #111]	@ 0x6f
 802133e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8021342:	a80f      	add	r0, sp, #60	@ 0x3c
 8021344:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8021346:	9410      	str	r4, [sp, #64]	@ 0x40
 8021348:	f8ad 9044 	strh.w	r9, [sp, #68]	@ 0x44
 802134c:	f8ad b046 	strh.w	fp, [sp, #70]	@ 0x46
 8021350:	f88d 704d 	strb.w	r7, [sp, #77]	@ 0x4d
 8021354:	920d      	str	r2, [sp, #52]	@ 0x34
 8021356:	930c      	str	r3, [sp, #48]	@ 0x30
 8021358:	4788      	blx	r1
 802135a:	f898 1a39 	ldrb.w	r1, [r8, #2617]	@ 0xa39
 802135e:	f898 0a38 	ldrb.w	r0, [r8, #2616]	@ 0xa38
 8021362:	3101      	adds	r1, #1
 8021364:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	@ 0x30
 8021368:	b2c9      	uxtb	r1, r1
 802136a:	4288      	cmp	r0, r1
 802136c:	f888 1a39 	strb.w	r1, [r8, #2617]	@ 0xa39
 8021370:	bf08      	it	eq
 8021372:	2101      	moveq	r1, #1
 8021374:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021378:	bf08      	it	eq
 802137a:	f886 12b4 	strbeq.w	r1, [r6, #692]	@ 0x2b4
 802137e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021380:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8021382:	9304      	str	r3, [sp, #16]
 8021384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021386:	9303      	str	r3, [sp, #12]
 8021388:	e9cd 4107 	strd	r4, r1, [sp, #28]
 802138c:	e9cd ba01 	strd	fp, sl, [sp, #4]
 8021390:	ee18 1a10 	vmov	r1, s16
 8021394:	f8cd 9000 	str.w	r9, [sp]
 8021398:	462b      	mov	r3, r5
 802139a:	463a      	mov	r2, r7
 802139c:	4630      	mov	r0, r6
 802139e:	f7ff fe59 	bl	8021054 <MobleConfigModel_SendModelPublicationStatus>
 80213a2:	b023      	add	sp, #140	@ 0x8c
 80213a4:	ecbd 8b02 	vpop	{d8}
 80213a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213ac:	aa14      	add	r2, sp, #80	@ 0x50
 80213ae:	4629      	mov	r1, r5
 80213b0:	4658      	mov	r0, fp
 80213b2:	f7f6 fa0b 	bl	80177cc <MoblePalCrypto_UpdateModelPublicationParameters>
 80213b6:	e7a1      	b.n	80212fc <MobleConfigModel_ProcessModelPublicationSet+0xa8>
 80213b8:	f89a 3008 	ldrb.w	r3, [sl, #8]
 80213bc:	f89a 1005 	ldrb.w	r1, [sl, #5]
 80213c0:	f89a c006 	ldrb.w	ip, [sl, #6]
 80213c4:	f89a 0007 	ldrb.w	r0, [sl, #7]
 80213c8:	9414      	str	r4, [sp, #80]	@ 0x50
 80213ca:	f003 0e07 	and.w	lr, r3, #7
 80213ce:	f3c1 1100 	ubfx	r1, r1, #4, #1
 80213d2:	08db      	lsrs	r3, r3, #3
 80213d4:	2c02      	cmp	r4, #2
 80213d6:	f8ad 7054 	strh.w	r7, [sp, #84]	@ 0x54
 80213da:	f8ad 2056 	strh.w	r2, [sp, #86]	@ 0x56
 80213de:	f88d 106c 	strb.w	r1, [sp, #108]	@ 0x6c
 80213e2:	f88d c06d 	strb.w	ip, [sp, #109]	@ 0x6d
 80213e6:	f88d 006e 	strb.w	r0, [sp, #110]	@ 0x6e
 80213ea:	f88d e06f 	strb.w	lr, [sp, #111]	@ 0x6f
 80213ee:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 80213f2:	d107      	bne.n	8021404 <MobleConfigModel_ProcessModelPublicationSet+0x1b0>
 80213f4:	45a9      	cmp	r9, r5
 80213f6:	d105      	bne.n	8021404 <MobleConfigModel_ProcessModelPublicationSet+0x1b0>
 80213f8:	a914      	add	r1, sp, #80	@ 0x50
 80213fa:	4628      	mov	r0, r5
 80213fc:	f7f6 fa40 	bl	8017880 <MoblePalCrypto_UpdateHealthModelPublicationParameters>
 8021400:	2700      	movs	r7, #0
 8021402:	e77b      	b.n	80212fc <MobleConfigModel_ProcessModelPublicationSet+0xa8>
 8021404:	aa14      	add	r2, sp, #80	@ 0x50
 8021406:	4629      	mov	r1, r5
 8021408:	4658      	mov	r0, fp
 802140a:	f7f6 f9df 	bl	80177cc <MoblePalCrypto_UpdateModelPublicationParameters>
 802140e:	e7f7      	b.n	8021400 <MobleConfigModel_ProcessModelPublicationSet+0x1ac>
 8021410:	2701      	movs	r7, #1
 8021412:	e773      	b.n	80212fc <MobleConfigModel_ProcessModelPublicationSet+0xa8>
 8021414:	2702      	movs	r7, #2
 8021416:	e771      	b.n	80212fc <MobleConfigModel_ProcessModelPublicationSet+0xa8>
 8021418:	2703      	movs	r7, #3
 802141a:	e76f      	b.n	80212fc <MobleConfigModel_ProcessModelPublicationSet+0xa8>
 802141c:	20002514 	.word	0x20002514

08021420 <MobleConfigModel_ProcessModelPublicationGet>:
 8021420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021424:	b093      	sub	sp, #76	@ 0x4c
 8021426:	4680      	mov	r8, r0
 8021428:	4618      	mov	r0, r3
 802142a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802142c:	f850 5b02 	ldr.w	r5, [r0], #2
 8021430:	f8df b174 	ldr.w	fp, [pc, #372]	@ 80215a8 <MobleConfigModel_ProcessModelPublicationGet+0x188>
 8021434:	2b04      	cmp	r3, #4
 8021436:	4689      	mov	r9, r1
 8021438:	b2af      	uxth	r7, r5
 802143a:	bf0c      	ite	eq
 802143c:	2102      	moveq	r1, #2
 802143e:	2104      	movne	r1, #4
 8021440:	aa0c      	add	r2, sp, #48	@ 0x30
 8021442:	970c      	str	r7, [sp, #48]	@ 0x30
 8021444:	f7f7 f813 	bl	801846e <MobleInputStreamGetLittleEndian>
 8021448:	f8d8 3000 	ldr.w	r3, [r8]
 802144c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802144e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8021452:	7f18      	ldrb	r0, [r3, #28]
 8021454:	f10a 33ff 	add.w	r3, sl, #4294967295
 8021458:	463d      	mov	r5, r7
 802145a:	4403      	add	r3, r0
 802145c:	b29b      	uxth	r3, r3
 802145e:	4632      	mov	r2, r6
 8021460:	4629      	mov	r1, r5
 8021462:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021464:	f7f6 fa3e 	bl	80178e4 <MoblePalCrypto_GetModelPublicationParameters>
 8021468:	4555      	cmp	r5, sl
 802146a:	88c2      	ldrh	r2, [r0, #6]
 802146c:	b2ff      	uxtb	r7, r7
 802146e:	4604      	mov	r4, r0
 8021470:	d034      	beq.n	80214dc <MobleConfigModel_ProcessModelPublicationGet+0xbc>
 8021472:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021474:	429d      	cmp	r5, r3
 8021476:	d931      	bls.n	80214dc <MobleConfigModel_ProcessModelPublicationGet+0xbc>
 8021478:	2300      	movs	r3, #0
 802147a:	6043      	str	r3, [r0, #4]
 802147c:	61c3      	str	r3, [r0, #28]
 802147e:	f880 3020 	strb.w	r3, [r0, #32]
 8021482:	2201      	movs	r2, #1
 8021484:	88a3      	ldrh	r3, [r4, #4]
 8021486:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 802148a:	88e3      	ldrh	r3, [r4, #6]
 802148c:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 8021490:	f894 3020 	ldrb.w	r3, [r4, #32]
 8021494:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
 8021498:	f8db 36f8 	ldr.w	r3, [fp, #1784]	@ 0x6f8
 802149c:	69e1      	ldr	r1, [r4, #28]
 802149e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80214a0:	f88d 2045 	strb.w	r2, [sp, #69]	@ 0x45
 80214a4:	f88d 7034 	strb.w	r7, [sp, #52]	@ 0x34
 80214a8:	960e      	str	r6, [sp, #56]	@ 0x38
 80214aa:	9110      	str	r1, [sp, #64]	@ 0x40
 80214ac:	a80d      	add	r0, sp, #52	@ 0x34
 80214ae:	920b      	str	r2, [sp, #44]	@ 0x2c
 80214b0:	4798      	blx	r3
 80214b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80214b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80214b6:	e9cd 6307 	strd	r6, r3, [sp, #28]
 80214ba:	f894 3020 	ldrb.w	r3, [r4, #32]
 80214be:	9306      	str	r3, [sp, #24]
 80214c0:	7fe3      	ldrb	r3, [r4, #31]
 80214c2:	9305      	str	r3, [sp, #20]
 80214c4:	7fa3      	ldrb	r3, [r4, #30]
 80214c6:	9304      	str	r3, [sp, #16]
 80214c8:	7f63      	ldrb	r3, [r4, #29]
 80214ca:	9303      	str	r3, [sp, #12]
 80214cc:	7f23      	ldrb	r3, [r4, #28]
 80214ce:	9302      	str	r3, [sp, #8]
 80214d0:	88e3      	ldrh	r3, [r4, #6]
 80214d2:	9301      	str	r3, [sp, #4]
 80214d4:	88a3      	ldrh	r3, [r4, #4]
 80214d6:	9300      	str	r3, [sp, #0]
 80214d8:	462b      	mov	r3, r5
 80214da:	e059      	b.n	8021590 <MobleConfigModel_ProcessModelPublicationGet+0x170>
 80214dc:	eba7 010a 	sub.w	r1, r7, sl
 80214e0:	b2c9      	uxtb	r1, r1
 80214e2:	4630      	mov	r0, r6
 80214e4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80214e6:	f7f7 ffc0 	bl	801946a <MobleApplicationModelSupported>
 80214ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80214ec:	b928      	cbnz	r0, 80214fa <MobleConfigModel_ProcessModelPublicationGet+0xda>
 80214ee:	6060      	str	r0, [r4, #4]
 80214f0:	61e0      	str	r0, [r4, #28]
 80214f2:	f884 0020 	strb.w	r0, [r4, #32]
 80214f6:	2202      	movs	r2, #2
 80214f8:	e7c4      	b.n	8021484 <MobleConfigModel_ProcessModelPublicationGet+0x64>
 80214fa:	4629      	mov	r1, r5
 80214fc:	4630      	mov	r0, r6
 80214fe:	f7f5 ff81 	bl	8017404 <MoblePalCryptoHasAppKeyBind>
 8021502:	f8db 36f8 	ldr.w	r3, [fp, #1784]	@ 0x6f8
 8021506:	4602      	mov	r2, r0
 8021508:	b908      	cbnz	r0, 802150e <MobleConfigModel_ProcessModelPublicationGet+0xee>
 802150a:	80a0      	strh	r0, [r4, #4]
 802150c:	e7ba      	b.n	8021484 <MobleConfigModel_ProcessModelPublicationGet+0x64>
 802150e:	2e02      	cmp	r6, #2
 8021510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021512:	d144      	bne.n	802159e <MobleConfigModel_ProcessModelPublicationGet+0x17e>
 8021514:	4555      	cmp	r5, sl
 8021516:	d142      	bne.n	802159e <MobleConfigModel_ProcessModelPublicationGet+0x17e>
 8021518:	4c22      	ldr	r4, [pc, #136]	@ (80215a4 <MobleConfigModel_ProcessModelPublicationGet+0x184>)
 802151a:	f88d 7034 	strb.w	r7, [sp, #52]	@ 0x34
 802151e:	f8b4 210a 	ldrh.w	r2, [r4, #266]	@ 0x10a
 8021522:	f8ad 203c 	strh.w	r2, [sp, #60]	@ 0x3c
 8021526:	f8b4 210c 	ldrh.w	r2, [r4, #268]	@ 0x10c
 802152a:	f8ad 203e 	strh.w	r2, [sp, #62]	@ 0x3e
 802152e:	f8b4 210e 	ldrh.w	r2, [r4, #270]	@ 0x10e
 8021532:	960e      	str	r6, [sp, #56]	@ 0x38
 8021534:	ba52      	rev16	r2, r2
 8021536:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 802153a:	f8b4 2108 	ldrh.w	r2, [r4, #264]	@ 0x108
 802153e:	f88d 2042 	strb.w	r2, [sp, #66]	@ 0x42
 8021542:	f894 2110 	ldrb.w	r2, [r4, #272]	@ 0x110
 8021546:	f88d 2043 	strb.w	r2, [sp, #67]	@ 0x43
 802154a:	2700      	movs	r7, #0
 802154c:	f894 2111 	ldrb.w	r2, [r4, #273]	@ 0x111
 8021550:	f88d 2044 	strb.w	r2, [sp, #68]	@ 0x44
 8021554:	f88d 7045 	strb.w	r7, [sp, #69]	@ 0x45
 8021558:	a80d      	add	r0, sp, #52	@ 0x34
 802155a:	4798      	blx	r3
 802155c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802155e:	e9cd 6307 	strd	r6, r3, [sp, #28]
 8021562:	f894 3111 	ldrb.w	r3, [r4, #273]	@ 0x111
 8021566:	9306      	str	r3, [sp, #24]
 8021568:	f894 3110 	ldrb.w	r3, [r4, #272]	@ 0x110
 802156c:	9305      	str	r3, [sp, #20]
 802156e:	f894 3108 	ldrb.w	r3, [r4, #264]	@ 0x108
 8021572:	9304      	str	r3, [sp, #16]
 8021574:	f894 310e 	ldrb.w	r3, [r4, #270]	@ 0x10e
 8021578:	9303      	str	r3, [sp, #12]
 802157a:	f894 310f 	ldrb.w	r3, [r4, #271]	@ 0x10f
 802157e:	9302      	str	r3, [sp, #8]
 8021580:	f8b4 310c 	ldrh.w	r3, [r4, #268]	@ 0x10c
 8021584:	9301      	str	r3, [sp, #4]
 8021586:	f8b4 310a 	ldrh.w	r3, [r4, #266]	@ 0x10a
 802158a:	9300      	str	r3, [sp, #0]
 802158c:	463a      	mov	r2, r7
 802158e:	462b      	mov	r3, r5
 8021590:	4649      	mov	r1, r9
 8021592:	4640      	mov	r0, r8
 8021594:	f7ff fd5e 	bl	8021054 <MobleConfigModel_SendModelPublicationStatus>
 8021598:	b013      	add	sp, #76	@ 0x4c
 802159a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802159e:	2200      	movs	r2, #0
 80215a0:	e770      	b.n	8021484 <MobleConfigModel_ProcessModelPublicationGet+0x64>
 80215a2:	bf00      	nop
 80215a4:	20000324 	.word	0x20000324
 80215a8:	20002514 	.word	0x20002514

080215ac <MobleConfigModel_SendAppStatus>:
 80215ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215b0:	460e      	mov	r6, r1
 80215b2:	e9dd 7407 	ldrd	r7, r4, [sp, #28]
 80215b6:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 80215ba:	4619      	mov	r1, r3
 80215bc:	4605      	mov	r5, r0
 80215be:	b930      	cbnz	r0, 80215ce <MobleConfigModel_SendAppStatus+0x22>
 80215c0:	4b18      	ldr	r3, [pc, #96]	@ (8021624 <MobleConfigModel_SendAppStatus+0x78>)
 80215c2:	4a19      	ldr	r2, [pc, #100]	@ (8021628 <MobleConfigModel_SendAppStatus+0x7c>)
 80215c4:	4819      	ldr	r0, [pc, #100]	@ (802162c <MobleConfigModel_SendAppStatus+0x80>)
 80215c6:	f640 0172 	movw	r1, #2162	@ 0x872
 80215ca:	f004 fb63 	bl	8025c94 <__assert_func>
 80215ce:	203e      	movs	r0, #62	@ 0x3e
 80215d0:	2300      	movs	r3, #0
 80215d2:	7020      	strb	r0, [r4, #0]
 80215d4:	f06f 007f 	mvn.w	r0, #127	@ 0x7f
 80215d8:	70a3      	strb	r3, [r4, #2]
 80215da:	70e3      	strb	r3, [r4, #3]
 80215dc:	7060      	strb	r0, [r4, #1]
 80215de:	7222      	strb	r2, [r4, #8]
 80215e0:	f104 0009 	add.w	r0, r4, #9
 80215e4:	2202      	movs	r2, #2
 80215e6:	f7f7 fcc7 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 80215ea:	4641      	mov	r1, r8
 80215ec:	f104 000b 	add.w	r0, r4, #11
 80215f0:	f7f7 fcc2 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 80215f4:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 80215f8:	bf28      	it	cs
 80215fa:	2204      	movcs	r2, #4
 80215fc:	4639      	mov	r1, r7
 80215fe:	f104 000d 	add.w	r0, r4, #13
 8021602:	f7f7 fcb9 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 8021606:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 802160a:	bf2c      	ite	cs
 802160c:	2309      	movcs	r3, #9
 802160e:	2307      	movcc	r3, #7
 8021610:	f8c4 30a3 	str.w	r3, [r4, #163]	@ 0xa3
 8021614:	4632      	mov	r2, r6
 8021616:	4623      	mov	r3, r4
 8021618:	4628      	mov	r0, r5
 802161a:	2101      	movs	r1, #1
 802161c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021620:	f7fe bb90 	b.w	801fd44 <MobleModelSendPacket>
 8021624:	0802e501 	.word	0x0802e501
 8021628:	0802d9e4 	.word	0x0802d9e4
 802162c:	0802e513 	.word	0x0802e513

08021630 <MobleConfigModel_ProcessAppUnbind>:
 8021630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021634:	468a      	mov	sl, r1
 8021636:	b089      	sub	sp, #36	@ 0x24
 8021638:	4605      	mov	r5, r0
 802163a:	b930      	cbnz	r0, 802164a <MobleConfigModel_ProcessAppUnbind+0x1a>
 802163c:	4b3a      	ldr	r3, [pc, #232]	@ (8021728 <MobleConfigModel_ProcessAppUnbind+0xf8>)
 802163e:	4a3b      	ldr	r2, [pc, #236]	@ (802172c <MobleConfigModel_ProcessAppUnbind+0xfc>)
 8021640:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8021644:	483a      	ldr	r0, [pc, #232]	@ (8021730 <MobleConfigModel_ProcessAppUnbind+0x100>)
 8021646:	f004 fb25 	bl	8025c94 <__assert_func>
 802164a:	6802      	ldr	r2, [r0, #0]
 802164c:	b922      	cbnz	r2, 8021658 <MobleConfigModel_ProcessAppUnbind+0x28>
 802164e:	4b39      	ldr	r3, [pc, #228]	@ (8021734 <MobleConfigModel_ProcessAppUnbind+0x104>)
 8021650:	4a36      	ldr	r2, [pc, #216]	@ (802172c <MobleConfigModel_ProcessAppUnbind+0xfc>)
 8021652:	f241 01e3 	movw	r1, #4323	@ 0x10e3
 8021656:	e7f5      	b.n	8021644 <MobleConfigModel_ProcessAppUnbind+0x14>
 8021658:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 802165c:	7f14      	ldrb	r4, [r2, #28]
 802165e:	f8d3 6002 	ldr.w	r6, [r3, #2]
 8021662:	681f      	ldr	r7, [r3, #0]
 8021664:	f10b 32ff 	add.w	r2, fp, #4294967295
 8021668:	4414      	add	r4, r2
 802166a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802166c:	b2b1      	uxth	r1, r6
 802166e:	2a06      	cmp	r2, #6
 8021670:	9104      	str	r1, [sp, #16]
 8021672:	fa1f f887 	uxth.w	r8, r7
 8021676:	460e      	mov	r6, r1
 8021678:	aa04      	add	r2, sp, #16
 802167a:	bf0c      	ite	eq
 802167c:	2102      	moveq	r1, #2
 802167e:	2104      	movne	r1, #4
 8021680:	1d18      	adds	r0, r3, #4
 8021682:	f7f6 fef4 	bl	801846e <MobleInputStreamGetLittleEndian>
 8021686:	eba7 070b 	sub.w	r7, r7, fp
 802168a:	45d8      	cmp	r8, fp
 802168c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8021690:	b2a4      	uxth	r4, r4
 8021692:	f007 07ff 	and.w	r7, r7, #255	@ 0xff
 8021696:	d001      	beq.n	802169c <MobleConfigModel_ProcessAppUnbind+0x6c>
 8021698:	45a0      	cmp	r8, r4
 802169a:	d840      	bhi.n	802171e <MobleConfigModel_ProcessAppUnbind+0xee>
 802169c:	4639      	mov	r1, r7
 802169e:	4648      	mov	r0, r9
 80216a0:	f7f7 fee3 	bl	801946a <MobleApplicationModelSupported>
 80216a4:	2800      	cmp	r0, #0
 80216a6:	d03c      	beq.n	8021722 <MobleConfigModel_ProcessAppUnbind+0xf2>
 80216a8:	f1b9 0f02 	cmp.w	r9, #2
 80216ac:	d12d      	bne.n	802170a <MobleConfigModel_ProcessAppUnbind+0xda>
 80216ae:	45d8      	cmp	r8, fp
 80216b0:	d12b      	bne.n	802170a <MobleConfigModel_ProcessAppUnbind+0xda>
 80216b2:	4633      	mov	r3, r6
 80216b4:	464a      	mov	r2, r9
 80216b6:	4641      	mov	r1, r8
 80216b8:	4628      	mov	r0, r5
 80216ba:	f7fd fbb5 	bl	801ee28 <MobleConfigHealthModelAppUnBind>
 80216be:	4604      	mov	r4, r0
 80216c0:	b918      	cbnz	r0, 80216ca <MobleConfigModel_ProcessAppUnbind+0x9a>
 80216c2:	6828      	ldr	r0, [r5, #0]
 80216c4:	f7f8 fd24 	bl	801a110 <MobleConfigNetworkSave>
 80216c8:	e002      	b.n	80216d0 <MobleConfigModel_ProcessAppUnbind+0xa0>
 80216ca:	2c03      	cmp	r4, #3
 80216cc:	d11b      	bne.n	8021706 <MobleConfigModel_ProcessAppUnbind+0xd6>
 80216ce:	2403      	movs	r4, #3
 80216d0:	4b19      	ldr	r3, [pc, #100]	@ (8021738 <MobleConfigModel_ProcessAppUnbind+0x108>)
 80216d2:	f88d 7014 	strb.w	r7, [sp, #20]
 80216d6:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 80216da:	f8ad 6016 	strh.w	r6, [sp, #22]
 80216de:	a805      	add	r0, sp, #20
 80216e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80216e2:	f8cd 9018 	str.w	r9, [sp, #24]
 80216e6:	f88d 401c 	strb.w	r4, [sp, #28]
 80216ea:	4798      	blx	r3
 80216ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80216ee:	9600      	str	r6, [sp, #0]
 80216f0:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80216f4:	4622      	mov	r2, r4
 80216f6:	4643      	mov	r3, r8
 80216f8:	4651      	mov	r1, sl
 80216fa:	4628      	mov	r0, r5
 80216fc:	f7ff ff56 	bl	80215ac <MobleConfigModel_SendAppStatus>
 8021700:	b009      	add	sp, #36	@ 0x24
 8021702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021706:	2405      	movs	r4, #5
 8021708:	e7e2      	b.n	80216d0 <MobleConfigModel_ProcessAppUnbind+0xa0>
 802170a:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 802170e:	d2de      	bcs.n	80216ce <MobleConfigModel_ProcessAppUnbind+0x9e>
 8021710:	4633      	mov	r3, r6
 8021712:	464a      	mov	r2, r9
 8021714:	4641      	mov	r1, r8
 8021716:	4628      	mov	r0, r5
 8021718:	f7fd fade 	bl	801ecd8 <MobleConfigModelAppUnBind>
 802171c:	e7cf      	b.n	80216be <MobleConfigModel_ProcessAppUnbind+0x8e>
 802171e:	2401      	movs	r4, #1
 8021720:	e7d6      	b.n	80216d0 <MobleConfigModel_ProcessAppUnbind+0xa0>
 8021722:	2402      	movs	r4, #2
 8021724:	e7d4      	b.n	80216d0 <MobleConfigModel_ProcessAppUnbind+0xa0>
 8021726:	bf00      	nop
 8021728:	0802ea81 	.word	0x0802ea81
 802172c:	0802da03 	.word	0x0802da03
 8021730:	0802e513 	.word	0x0802e513
 8021734:	0802e9dc 	.word	0x0802e9dc
 8021738:	20002514 	.word	0x20002514

0802173c <MobleConfigModel_ProcessAppBind>:
 802173c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021740:	468a      	mov	sl, r1
 8021742:	b089      	sub	sp, #36	@ 0x24
 8021744:	4605      	mov	r5, r0
 8021746:	b930      	cbnz	r0, 8021756 <MobleConfigModel_ProcessAppBind+0x1a>
 8021748:	4b3b      	ldr	r3, [pc, #236]	@ (8021838 <MobleConfigModel_ProcessAppBind+0xfc>)
 802174a:	4a3c      	ldr	r2, [pc, #240]	@ (802183c <MobleConfigModel_ProcessAppBind+0x100>)
 802174c:	f241 0146 	movw	r1, #4166	@ 0x1046
 8021750:	483b      	ldr	r0, [pc, #236]	@ (8021840 <MobleConfigModel_ProcessAppBind+0x104>)
 8021752:	f004 fa9f 	bl	8025c94 <__assert_func>
 8021756:	6802      	ldr	r2, [r0, #0]
 8021758:	b922      	cbnz	r2, 8021764 <MobleConfigModel_ProcessAppBind+0x28>
 802175a:	4b3a      	ldr	r3, [pc, #232]	@ (8021844 <MobleConfigModel_ProcessAppBind+0x108>)
 802175c:	4a37      	ldr	r2, [pc, #220]	@ (802183c <MobleConfigModel_ProcessAppBind+0x100>)
 802175e:	f241 0147 	movw	r1, #4167	@ 0x1047
 8021762:	e7f5      	b.n	8021750 <MobleConfigModel_ProcessAppBind+0x14>
 8021764:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 8021768:	7f14      	ldrb	r4, [r2, #28]
 802176a:	f8d3 6002 	ldr.w	r6, [r3, #2]
 802176e:	f8d3 8000 	ldr.w	r8, [r3]
 8021772:	f10b 32ff 	add.w	r2, fp, #4294967295
 8021776:	4414      	add	r4, r2
 8021778:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802177a:	b2b1      	uxth	r1, r6
 802177c:	2a06      	cmp	r2, #6
 802177e:	9104      	str	r1, [sp, #16]
 8021780:	fa1f f988 	uxth.w	r9, r8
 8021784:	460e      	mov	r6, r1
 8021786:	aa04      	add	r2, sp, #16
 8021788:	bf0c      	ite	eq
 802178a:	2102      	moveq	r1, #2
 802178c:	2104      	movne	r1, #4
 802178e:	1d18      	adds	r0, r3, #4
 8021790:	f7f6 fe6d 	bl	801846e <MobleInputStreamGetLittleEndian>
 8021794:	eba8 080b 	sub.w	r8, r8, fp
 8021798:	45d9      	cmp	r9, fp
 802179a:	9f04      	ldr	r7, [sp, #16]
 802179c:	b2a4      	uxth	r4, r4
 802179e:	f008 08ff 	and.w	r8, r8, #255	@ 0xff
 80217a2:	d001      	beq.n	80217a8 <MobleConfigModel_ProcessAppBind+0x6c>
 80217a4:	45a1      	cmp	r9, r4
 80217a6:	d840      	bhi.n	802182a <MobleConfigModel_ProcessAppBind+0xee>
 80217a8:	4641      	mov	r1, r8
 80217aa:	4638      	mov	r0, r7
 80217ac:	f7f7 fe5d 	bl	801946a <MobleApplicationModelSupported>
 80217b0:	2800      	cmp	r0, #0
 80217b2:	d03c      	beq.n	802182e <MobleConfigModel_ProcessAppBind+0xf2>
 80217b4:	2f00      	cmp	r7, #0
 80217b6:	d03c      	beq.n	8021832 <MobleConfigModel_ProcessAppBind+0xf6>
 80217b8:	2f02      	cmp	r7, #2
 80217ba:	d12c      	bne.n	8021816 <MobleConfigModel_ProcessAppBind+0xda>
 80217bc:	45d9      	cmp	r9, fp
 80217be:	d12a      	bne.n	8021816 <MobleConfigModel_ProcessAppBind+0xda>
 80217c0:	4633      	mov	r3, r6
 80217c2:	463a      	mov	r2, r7
 80217c4:	4649      	mov	r1, r9
 80217c6:	4628      	mov	r0, r5
 80217c8:	f7fd faf4 	bl	801edb4 <MobleConfigHealthModelAppBind>
 80217cc:	4604      	mov	r4, r0
 80217ce:	b918      	cbnz	r0, 80217d8 <MobleConfigModel_ProcessAppBind+0x9c>
 80217d0:	6828      	ldr	r0, [r5, #0]
 80217d2:	f7f8 fc9d 	bl	801a110 <MobleConfigNetworkSave>
 80217d6:	e002      	b.n	80217de <MobleConfigModel_ProcessAppBind+0xa2>
 80217d8:	2c03      	cmp	r4, #3
 80217da:	d11a      	bne.n	8021812 <MobleConfigModel_ProcessAppBind+0xd6>
 80217dc:	2403      	movs	r4, #3
 80217de:	4b1a      	ldr	r3, [pc, #104]	@ (8021848 <MobleConfigModel_ProcessAppBind+0x10c>)
 80217e0:	f88d 8014 	strb.w	r8, [sp, #20]
 80217e4:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 80217e8:	f8ad 6016 	strh.w	r6, [sp, #22]
 80217ec:	a805      	add	r0, sp, #20
 80217ee:	6a1b      	ldr	r3, [r3, #32]
 80217f0:	9706      	str	r7, [sp, #24]
 80217f2:	f88d 401c 	strb.w	r4, [sp, #28]
 80217f6:	4798      	blx	r3
 80217f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80217fa:	9600      	str	r6, [sp, #0]
 80217fc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8021800:	4622      	mov	r2, r4
 8021802:	464b      	mov	r3, r9
 8021804:	4651      	mov	r1, sl
 8021806:	4628      	mov	r0, r5
 8021808:	f7ff fed0 	bl	80215ac <MobleConfigModel_SendAppStatus>
 802180c:	b009      	add	sp, #36	@ 0x24
 802180e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021812:	2405      	movs	r4, #5
 8021814:	e7e3      	b.n	80217de <MobleConfigModel_ProcessAppBind+0xa2>
 8021816:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 802181a:	d2df      	bcs.n	80217dc <MobleConfigModel_ProcessAppBind+0xa0>
 802181c:	4633      	mov	r3, r6
 802181e:	463a      	mov	r2, r7
 8021820:	4649      	mov	r1, r9
 8021822:	4628      	mov	r0, r5
 8021824:	f7fd f9ee 	bl	801ec04 <MobleConfigModelAppBind>
 8021828:	e7d0      	b.n	80217cc <MobleConfigModel_ProcessAppBind+0x90>
 802182a:	2401      	movs	r4, #1
 802182c:	e7d7      	b.n	80217de <MobleConfigModel_ProcessAppBind+0xa2>
 802182e:	2402      	movs	r4, #2
 8021830:	e7d5      	b.n	80217de <MobleConfigModel_ProcessAppBind+0xa2>
 8021832:	240d      	movs	r4, #13
 8021834:	e7d3      	b.n	80217de <MobleConfigModel_ProcessAppBind+0xa2>
 8021836:	bf00      	nop
 8021838:	0802ea81 	.word	0x0802ea81
 802183c:	0802da25 	.word	0x0802da25
 8021840:	0802e513 	.word	0x0802e513
 8021844:	0802e9dc 	.word	0x0802e9dc
 8021848:	20002514 	.word	0x20002514

0802184c <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet>:
 802184c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021850:	f8d3 9000 	ldr.w	r9, [r3]
 8021854:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8021856:	fa0f f389 	sxth.w	r3, r9
 802185a:	2b00      	cmp	r3, #0
 802185c:	4606      	mov	r6, r0
 802185e:	4688      	mov	r8, r1
 8021860:	dd31      	ble.n	80218c6 <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet+0x7a>
 8021862:	6803      	ldr	r3, [r0, #0]
 8021864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021866:	7c9b      	ldrb	r3, [r3, #18]
 8021868:	2b02      	cmp	r3, #2
 802186a:	d02a      	beq.n	80218c2 <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet+0x76>
 802186c:	fa1f f089 	uxth.w	r0, r9
 8021870:	f7f9 fdee 	bl	801b450 <BnrgmFrndMgmtGetLpnPollTimeout>
 8021874:	4607      	mov	r7, r0
 8021876:	232e      	movs	r3, #46	@ 0x2e
 8021878:	2500      	movs	r5, #0
 802187a:	7023      	strb	r3, [r4, #0]
 802187c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8021880:	7063      	strb	r3, [r4, #1]
 8021882:	fa1f f189 	uxth.w	r1, r9
 8021886:	70a5      	strb	r5, [r4, #2]
 8021888:	70e5      	strb	r5, [r4, #3]
 802188a:	2202      	movs	r2, #2
 802188c:	f104 0008 	add.w	r0, r4, #8
 8021890:	f7f7 fb72 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 8021894:	4639      	mov	r1, r7
 8021896:	2203      	movs	r2, #3
 8021898:	f104 000a 	add.w	r0, r4, #10
 802189c:	f7f7 fb6c 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 80218a0:	2305      	movs	r3, #5
 80218a2:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 80218a6:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 80218aa:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 80218ae:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 80218b2:	4623      	mov	r3, r4
 80218b4:	4642      	mov	r2, r8
 80218b6:	4630      	mov	r0, r6
 80218b8:	2101      	movs	r1, #1
 80218ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80218be:	f7fe ba41 	b.w	801fd44 <MobleModelSendPacket>
 80218c2:	2700      	movs	r7, #0
 80218c4:	e7d7      	b.n	8021876 <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet+0x2a>
 80218c6:	2002      	movs	r0, #2
 80218c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080218cc <MobleConfigModel_ProcessKeyRefreshPhaseSet>:
 80218cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80218d0:	461d      	mov	r5, r3
 80218d2:	4606      	mov	r6, r0
 80218d4:	4618      	mov	r0, r3
 80218d6:	f7f3 f954 	bl	8014b82 <MobleConfigModelGetNetIdx>
 80218da:	f895 9002 	ldrb.w	r9, [r5, #2]
 80218de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80218e0:	f1b9 0f03 	cmp.w	r9, #3
 80218e4:	460f      	mov	r7, r1
 80218e6:	4680      	mov	r8, r0
 80218e8:	d837      	bhi.n	802195a <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x8e>
 80218ea:	f7f6 f83f 	bl	801796c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80218ee:	1e05      	subs	r5, r0, #0
 80218f0:	db31      	blt.n	8021956 <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x8a>
 80218f2:	b2e9      	uxtb	r1, r5
 80218f4:	4648      	mov	r0, r9
 80218f6:	f7fd f835 	bl	801e964 <ModelConfigUpdateKRState>
 80218fa:	2802      	cmp	r0, #2
 80218fc:	d02d      	beq.n	802195a <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x8e>
 80218fe:	2200      	movs	r2, #0
 8021900:	6833      	ldr	r3, [r6, #0]
 8021902:	f8ad 8006 	strh.w	r8, [sp, #6]
 8021906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021908:	442b      	add	r3, r5
 802190a:	2500      	movs	r5, #0
 802190c:	f893 9014 	ldrb.w	r9, [r3, #20]
 8021910:	7222      	strb	r2, [r4, #8]
 8021912:	2317      	movs	r3, #23
 8021914:	7023      	strb	r3, [r4, #0]
 8021916:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 802191a:	7063      	strb	r3, [r4, #1]
 802191c:	f104 0209 	add.w	r2, r4, #9
 8021920:	f10d 0306 	add.w	r3, sp, #6
 8021924:	70a5      	strb	r5, [r4, #2]
 8021926:	70e5      	strb	r5, [r4, #3]
 8021928:	2101      	movs	r1, #1
 802192a:	4628      	mov	r0, r5
 802192c:	f7f3 f930 	bl	8014b90 <MobleConfigModelPutKeyIdxs>
 8021930:	2304      	movs	r3, #4
 8021932:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8021936:	463a      	mov	r2, r7
 8021938:	4623      	mov	r3, r4
 802193a:	4630      	mov	r0, r6
 802193c:	f884 900b 	strb.w	r9, [r4, #11]
 8021940:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 8021944:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 8021948:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 802194c:	b003      	add	sp, #12
 802194e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021952:	f7fe b9f7 	b.w	801fd44 <MobleModelSendPacket>
 8021956:	220f      	movs	r2, #15
 8021958:	e7d2      	b.n	8021900 <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x34>
 802195a:	2002      	movs	r0, #2
 802195c:	b003      	add	sp, #12
 802195e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08021962 <MobleConfigModel_ProcessGattProxyGet>:
 8021962:	b430      	push	{r4, r5}
 8021964:	460a      	mov	r2, r1
 8021966:	6801      	ldr	r1, [r0, #0]
 8021968:	9b03      	ldr	r3, [sp, #12]
 802196a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 802196c:	2514      	movs	r5, #20
 802196e:	7c09      	ldrb	r1, [r1, #16]
 8021970:	7219      	strb	r1, [r3, #8]
 8021972:	2400      	movs	r4, #0
 8021974:	701d      	strb	r5, [r3, #0]
 8021976:	2101      	movs	r1, #1
 8021978:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 802197c:	705d      	strb	r5, [r3, #1]
 802197e:	709c      	strb	r4, [r3, #2]
 8021980:	70dc      	strb	r4, [r3, #3]
 8021982:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 8021986:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 802198a:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 802198e:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 8021992:	bc30      	pop	{r4, r5}
 8021994:	f7fe b9d6 	b.w	801fd44 <MobleModelSendPacket>

08021998 <MobleConfigModel_ProcessFriendGet>:
 8021998:	b430      	push	{r4, r5}
 802199a:	460a      	mov	r2, r1
 802199c:	6801      	ldr	r1, [r0, #0]
 802199e:	9b03      	ldr	r3, [sp, #12]
 80219a0:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80219a2:	2511      	movs	r5, #17
 80219a4:	7c89      	ldrb	r1, [r1, #18]
 80219a6:	7219      	strb	r1, [r3, #8]
 80219a8:	2400      	movs	r4, #0
 80219aa:	701d      	strb	r5, [r3, #0]
 80219ac:	2101      	movs	r1, #1
 80219ae:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 80219b2:	705d      	strb	r5, [r3, #1]
 80219b4:	709c      	strb	r4, [r3, #2]
 80219b6:	70dc      	strb	r4, [r3, #3]
 80219b8:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 80219bc:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 80219c0:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 80219c4:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 80219c8:	bc30      	pop	{r4, r5}
 80219ca:	f7fe b9bb 	b.w	801fd44 <MobleModelSendPacket>

080219ce <MobleConfigModel_ProcessDefaultTTLSet>:
 80219ce:	b430      	push	{r4, r5}
 80219d0:	461d      	mov	r5, r3
 80219d2:	460a      	mov	r2, r1
 80219d4:	7829      	ldrb	r1, [r5, #0]
 80219d6:	f995 5000 	ldrsb.w	r5, [r5]
 80219da:	9b03      	ldr	r3, [sp, #12]
 80219dc:	2d00      	cmp	r5, #0
 80219de:	db19      	blt.n	8021a14 <MobleConfigModel_ProcessDefaultTTLSet+0x46>
 80219e0:	2901      	cmp	r1, #1
 80219e2:	d017      	beq.n	8021a14 <MobleConfigModel_ProcessDefaultTTLSet+0x46>
 80219e4:	6804      	ldr	r4, [r0, #0]
 80219e6:	6a64      	ldr	r4, [r4, #36]	@ 0x24
 80219e8:	250e      	movs	r5, #14
 80219ea:	7261      	strb	r1, [r4, #9]
 80219ec:	2400      	movs	r4, #0
 80219ee:	701d      	strb	r5, [r3, #0]
 80219f0:	7219      	strb	r1, [r3, #8]
 80219f2:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 80219f6:	2101      	movs	r1, #1
 80219f8:	705d      	strb	r5, [r3, #1]
 80219fa:	709c      	strb	r4, [r3, #2]
 80219fc:	70dc      	strb	r4, [r3, #3]
 80219fe:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 8021a02:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 8021a06:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 8021a0a:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 8021a0e:	bc30      	pop	{r4, r5}
 8021a10:	f7fe b998 	b.w	801fd44 <MobleModelSendPacket>
 8021a14:	2002      	movs	r0, #2
 8021a16:	bc30      	pop	{r4, r5}
 8021a18:	4770      	bx	lr
	...

08021a1c <MobleConfigModel_ProcessBeaconSet>:
 8021a1c:	b570      	push	{r4, r5, r6, lr}
 8021a1e:	460a      	mov	r2, r1
 8021a20:	9c05      	ldr	r4, [sp, #20]
 8021a22:	7819      	ldrb	r1, [r3, #0]
 8021a24:	b930      	cbnz	r0, 8021a34 <MobleConfigModel_ProcessBeaconSet+0x18>
 8021a26:	4b12      	ldr	r3, [pc, #72]	@ (8021a70 <MobleConfigModel_ProcessBeaconSet+0x54>)
 8021a28:	4a12      	ldr	r2, [pc, #72]	@ (8021a74 <MobleConfigModel_ProcessBeaconSet+0x58>)
 8021a2a:	4813      	ldr	r0, [pc, #76]	@ (8021a78 <MobleConfigModel_ProcessBeaconSet+0x5c>)
 8021a2c:	f640 4135 	movw	r1, #3125	@ 0xc35
 8021a30:	f004 f930 	bl	8025c94 <__assert_func>
 8021a34:	2901      	cmp	r1, #1
 8021a36:	d819      	bhi.n	8021a6c <MobleConfigModel_ProcessBeaconSet+0x50>
 8021a38:	4b10      	ldr	r3, [pc, #64]	@ (8021a7c <MobleConfigModel_ProcessBeaconSet+0x60>)
 8021a3a:	250b      	movs	r5, #11
 8021a3c:	f883 10ba 	strb.w	r1, [r3, #186]	@ 0xba
 8021a40:	2300      	movs	r3, #0
 8021a42:	7025      	strb	r5, [r4, #0]
 8021a44:	7221      	strb	r1, [r4, #8]
 8021a46:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 8021a4a:	2101      	movs	r1, #1
 8021a4c:	70a3      	strb	r3, [r4, #2]
 8021a4e:	70e3      	strb	r3, [r4, #3]
 8021a50:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 8021a54:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
 8021a58:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
 8021a5c:	7065      	strb	r5, [r4, #1]
 8021a5e:	f884 10a3 	strb.w	r1, [r4, #163]	@ 0xa3
 8021a62:	4623      	mov	r3, r4
 8021a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021a68:	f7fe b96c 	b.w	801fd44 <MobleModelSendPacket>
 8021a6c:	2002      	movs	r0, #2
 8021a6e:	bd70      	pop	{r4, r5, r6, pc}
 8021a70:	0802ea81 	.word	0x0802ea81
 8021a74:	0802da45 	.word	0x0802da45
 8021a78:	0802e513 	.word	0x0802e513
 8021a7c:	20000324 	.word	0x20000324

08021a80 <MobleConfigModel_SendAppKeyStatus>:
 8021a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021a82:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8021a84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021a88:	460f      	mov	r7, r1
 8021a8a:	4606      	mov	r6, r0
 8021a8c:	b930      	cbnz	r0, 8021a9c <MobleConfigModel_SendAppKeyStatus+0x1c>
 8021a8e:	4b16      	ldr	r3, [pc, #88]	@ (8021ae8 <MobleConfigModel_SendAppKeyStatus+0x68>)
 8021a90:	4a16      	ldr	r2, [pc, #88]	@ (8021aec <MobleConfigModel_SendAppKeyStatus+0x6c>)
 8021a92:	4817      	ldr	r0, [pc, #92]	@ (8021af0 <MobleConfigModel_SendAppKeyStatus+0x70>)
 8021a94:	f240 7145 	movw	r1, #1861	@ 0x745
 8021a98:	f004 f8fc 	bl	8025c94 <__assert_func>
 8021a9c:	2303      	movs	r3, #3
 8021a9e:	2500      	movs	r5, #0
 8021aa0:	7023      	strb	r3, [r4, #0]
 8021aa2:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8021aa6:	2101      	movs	r1, #1
 8021aa8:	7063      	strb	r3, [r4, #1]
 8021aaa:	7222      	strb	r2, [r4, #8]
 8021aac:	f10d 0306 	add.w	r3, sp, #6
 8021ab0:	f104 0209 	add.w	r2, r4, #9
 8021ab4:	70a5      	strb	r5, [r4, #2]
 8021ab6:	70e5      	strb	r5, [r4, #3]
 8021ab8:	4628      	mov	r0, r5
 8021aba:	f7f3 f869 	bl	8014b90 <MobleConfigModelPutKeyIdxs>
 8021abe:	ab08      	add	r3, sp, #32
 8021ac0:	4608      	mov	r0, r1
 8021ac2:	f7f3 f865 	bl	8014b90 <MobleConfigModelPutKeyIdxs>
 8021ac6:	2304      	movs	r3, #4
 8021ac8:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8021acc:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 8021ad0:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 8021ad4:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 8021ad8:	4623      	mov	r3, r4
 8021ada:	463a      	mov	r2, r7
 8021adc:	4630      	mov	r0, r6
 8021ade:	f7fe f931 	bl	801fd44 <MobleModelSendPacket>
 8021ae2:	b003      	add	sp, #12
 8021ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021ae6:	bf00      	nop
 8021ae8:	0802e501 	.word	0x0802e501
 8021aec:	0802da67 	.word	0x0802da67
 8021af0:	0802e513 	.word	0x0802e513

08021af4 <MobleConfigModel_ProcessAppKeyUpdate>:
 8021af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021af8:	461c      	mov	r4, r3
 8021afa:	b08a      	sub	sp, #40	@ 0x28
 8021afc:	4607      	mov	r7, r0
 8021afe:	4618      	mov	r0, r3
 8021b00:	f7f3 f83f 	bl	8014b82 <MobleConfigModelGetNetIdx>
 8021b04:	78a6      	ldrb	r6, [r4, #2]
 8021b06:	7863      	ldrb	r3, [r4, #1]
 8021b08:	0136      	lsls	r6, r6, #4
 8021b0a:	eb06 1613 	add.w	r6, r6, r3, lsr #4
 8021b0e:	4605      	mov	r5, r0
 8021b10:	f7f5 ff2c 	bl	801796c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8021b14:	aa02      	add	r2, sp, #8
 8021b16:	1ce3      	adds	r3, r4, #3
 8021b18:	4688      	mov	r8, r1
 8021b1a:	4682      	mov	sl, r0
 8021b1c:	3413      	adds	r4, #19
 8021b1e:	4691      	mov	r9, r2
 8021b20:	6818      	ldr	r0, [r3, #0]
 8021b22:	6859      	ldr	r1, [r3, #4]
 8021b24:	4694      	mov	ip, r2
 8021b26:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8021b2a:	3308      	adds	r3, #8
 8021b2c:	42a3      	cmp	r3, r4
 8021b2e:	4662      	mov	r2, ip
 8021b30:	d1f6      	bne.n	8021b20 <MobleConfigModel_ProcessAppKeyUpdate+0x2c>
 8021b32:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8021b36:	d255      	bcs.n	8021be4 <MobleConfigModel_ProcessAppKeyUpdate+0xf0>
 8021b38:	f3ca 14c0 	ubfx	r4, sl, #7, #1
 8021b3c:	00a4      	lsls	r4, r4, #2
 8021b3e:	4628      	mov	r0, r5
 8021b40:	f7f4 fb9a 	bl	8016278 <MoblePalCryptoHasNetworkKey>
 8021b44:	4320      	orrs	r0, r4
 8021b46:	b2c3      	uxtb	r3, r0
 8021b48:	2b00      	cmp	r3, #0
 8021b4a:	4b27      	ldr	r3, [pc, #156]	@ (8021be8 <MobleConfigModel_ProcessAppKeyUpdate+0xf4>)
 8021b4c:	4453      	add	r3, sl
 8021b4e:	bf08      	it	eq
 8021b50:	2404      	moveq	r4, #4
 8021b52:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8021b56:	2b01      	cmp	r3, #1
 8021b58:	d002      	beq.n	8021b60 <MobleConfigModel_ProcessAppKeyUpdate+0x6c>
 8021b5a:	2c00      	cmp	r4, #0
 8021b5c:	bf08      	it	eq
 8021b5e:	240b      	moveq	r4, #11
 8021b60:	4630      	mov	r0, r6
 8021b62:	f7f4 fba3 	bl	80162ac <MoblePalCryptoHasAppKey>
 8021b66:	bb00      	cbnz	r0, 8021baa <MobleConfigModel_ProcessAppKeyUpdate+0xb6>
 8021b68:	2c00      	cmp	r4, #0
 8021b6a:	bf08      	it	eq
 8021b6c:	2403      	moveq	r4, #3
 8021b6e:	f8ad 5018 	strh.w	r5, [sp, #24]
 8021b72:	f8ad 601a 	strh.w	r6, [sp, #26]
 8021b76:	b924      	cbnz	r4, 8021b82 <MobleConfigModel_ProcessAppKeyUpdate+0x8e>
 8021b78:	2310      	movs	r3, #16
 8021b7a:	f8cd 9020 	str.w	r9, [sp, #32]
 8021b7e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8021b82:	4b1a      	ldr	r3, [pc, #104]	@ (8021bec <MobleConfigModel_ProcessAppKeyUpdate+0xf8>)
 8021b84:	f88d 4025 	strb.w	r4, [sp, #37]	@ 0x25
 8021b88:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8021b8c:	a806      	add	r0, sp, #24
 8021b8e:	68db      	ldr	r3, [r3, #12]
 8021b90:	4798      	blx	r3
 8021b92:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021b94:	4622      	mov	r2, r4
 8021b96:	e9cd 6300 	strd	r6, r3, [sp]
 8021b9a:	4641      	mov	r1, r8
 8021b9c:	462b      	mov	r3, r5
 8021b9e:	4638      	mov	r0, r7
 8021ba0:	f7ff ff6e 	bl	8021a80 <MobleConfigModel_SendAppKeyStatus>
 8021ba4:	b00a      	add	sp, #40	@ 0x28
 8021ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021baa:	2c00      	cmp	r4, #0
 8021bac:	d1df      	bne.n	8021b6e <MobleConfigModel_ProcessAppKeyUpdate+0x7a>
 8021bae:	4631      	mov	r1, r6
 8021bb0:	4628      	mov	r0, r5
 8021bb2:	f7f5 fc73 	bl	801749c <MoblePalCryptoHasAppKeyIndex>
 8021bb6:	2803      	cmp	r0, #3
 8021bb8:	d010      	beq.n	8021bdc <MobleConfigModel_ProcessAppKeyUpdate+0xe8>
 8021bba:	2801      	cmp	r0, #1
 8021bbc:	d010      	beq.n	8021be0 <MobleConfigModel_ProcessAppKeyUpdate+0xec>
 8021bbe:	462a      	mov	r2, r5
 8021bc0:	4648      	mov	r0, r9
 8021bc2:	f7f4 fe95 	bl	80168f0 <MoblePalCryptoSetNewAppKey>
 8021bc6:	4604      	mov	r4, r0
 8021bc8:	b918      	cbnz	r0, 8021bd2 <MobleConfigModel_ProcessAppKeyUpdate+0xde>
 8021bca:	6838      	ldr	r0, [r7, #0]
 8021bcc:	f7f8 faa0 	bl	801a110 <MobleConfigNetworkSave>
 8021bd0:	e7cd      	b.n	8021b6e <MobleConfigModel_ProcessAppKeyUpdate+0x7a>
 8021bd2:	2803      	cmp	r0, #3
 8021bd4:	bf0c      	ite	eq
 8021bd6:	2406      	moveq	r4, #6
 8021bd8:	2405      	movne	r4, #5
 8021bda:	e7c8      	b.n	8021b6e <MobleConfigModel_ProcessAppKeyUpdate+0x7a>
 8021bdc:	2411      	movs	r4, #17
 8021bde:	e7c6      	b.n	8021b6e <MobleConfigModel_ProcessAppKeyUpdate+0x7a>
 8021be0:	2403      	movs	r4, #3
 8021be2:	e7c4      	b.n	8021b6e <MobleConfigModel_ProcessAppKeyUpdate+0x7a>
 8021be4:	2404      	movs	r4, #4
 8021be6:	e7aa      	b.n	8021b3e <MobleConfigModel_ProcessAppKeyUpdate+0x4a>
 8021be8:	20000324 	.word	0x20000324
 8021bec:	20002514 	.word	0x20002514

08021bf0 <MobleConfigModel_ProcessAppKeyDelete>:
 8021bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021bf4:	461a      	mov	r2, r3
 8021bf6:	b086      	sub	sp, #24
 8021bf8:	4606      	mov	r6, r0
 8021bfa:	4618      	mov	r0, r3
 8021bfc:	f7f2 ffc1 	bl	8014b82 <MobleConfigModelGetNetIdx>
 8021c00:	7895      	ldrb	r5, [r2, #2]
 8021c02:	7853      	ldrb	r3, [r2, #1]
 8021c04:	012d      	lsls	r5, r5, #4
 8021c06:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8021c0a:	460f      	mov	r7, r1
 8021c0c:	4680      	mov	r8, r0
 8021c0e:	eb05 1513 	add.w	r5, r5, r3, lsr #4
 8021c12:	d226      	bcs.n	8021c62 <MobleConfigModel_ProcessAppKeyDelete+0x72>
 8021c14:	4601      	mov	r1, r0
 8021c16:	4628      	mov	r0, r5
 8021c18:	f7f5 facc 	bl	80171b4 <MoblePalCryptoDeleteAppKey>
 8021c1c:	1e04      	subs	r4, r0, #0
 8021c1e:	bf18      	it	ne
 8021c20:	2403      	movne	r4, #3
 8021c22:	6830      	ldr	r0, [r6, #0]
 8021c24:	f7f8 fa74 	bl	801a110 <MobleConfigNetworkSave>
 8021c28:	f8ad 8008 	strh.w	r8, [sp, #8]
 8021c2c:	f8ad 500a 	strh.w	r5, [sp, #10]
 8021c30:	f88d 4015 	strb.w	r4, [sp, #21]
 8021c34:	b9bc      	cbnz	r4, 8021c66 <MobleConfigModel_ProcessAppKeyDelete+0x76>
 8021c36:	9404      	str	r4, [sp, #16]
 8021c38:	2310      	movs	r3, #16
 8021c3a:	f88d 3014 	strb.w	r3, [sp, #20]
 8021c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8021c6c <MobleConfigModel_ProcessAppKeyDelete+0x7c>)
 8021c40:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8021c44:	a802      	add	r0, sp, #8
 8021c46:	685b      	ldr	r3, [r3, #4]
 8021c48:	4798      	blx	r3
 8021c4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021c4c:	4622      	mov	r2, r4
 8021c4e:	e9cd 5300 	strd	r5, r3, [sp]
 8021c52:	4639      	mov	r1, r7
 8021c54:	4643      	mov	r3, r8
 8021c56:	4630      	mov	r0, r6
 8021c58:	f7ff ff12 	bl	8021a80 <MobleConfigModel_SendAppKeyStatus>
 8021c5c:	b006      	add	sp, #24
 8021c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c62:	2404      	movs	r4, #4
 8021c64:	e7dd      	b.n	8021c22 <MobleConfigModel_ProcessAppKeyDelete+0x32>
 8021c66:	2300      	movs	r3, #0
 8021c68:	e7e7      	b.n	8021c3a <MobleConfigModel_ProcessAppKeyDelete+0x4a>
 8021c6a:	bf00      	nop
 8021c6c:	20002514 	.word	0x20002514

08021c70 <MobleConfigModel_ProcessAppKeyAdd>:
 8021c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021c74:	461c      	mov	r4, r3
 8021c76:	b08b      	sub	sp, #44	@ 0x2c
 8021c78:	4607      	mov	r7, r0
 8021c7a:	4618      	mov	r0, r3
 8021c7c:	f7f2 ff81 	bl	8014b82 <MobleConfigModelGetNetIdx>
 8021c80:	78a5      	ldrb	r5, [r4, #2]
 8021c82:	7863      	ldrb	r3, [r4, #1]
 8021c84:	012d      	lsls	r5, r5, #4
 8021c86:	aa02      	add	r2, sp, #8
 8021c88:	eb05 1513 	add.w	r5, r5, r3, lsr #4
 8021c8c:	4688      	mov	r8, r1
 8021c8e:	1ce3      	adds	r3, r4, #3
 8021c90:	4606      	mov	r6, r0
 8021c92:	3413      	adds	r4, #19
 8021c94:	4691      	mov	r9, r2
 8021c96:	6818      	ldr	r0, [r3, #0]
 8021c98:	6859      	ldr	r1, [r3, #4]
 8021c9a:	4694      	mov	ip, r2
 8021c9c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8021ca0:	3308      	adds	r3, #8
 8021ca2:	42a3      	cmp	r3, r4
 8021ca4:	4662      	mov	r2, ip
 8021ca6:	d1f6      	bne.n	8021c96 <MobleConfigModel_ProcessAppKeyAdd+0x26>
 8021ca8:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 8021cac:	4630      	mov	r0, r6
 8021cae:	bf34      	ite	cc
 8021cb0:	2400      	movcc	r4, #0
 8021cb2:	2401      	movcs	r4, #1
 8021cb4:	f7f4 fae0 	bl	8016278 <MoblePalCryptoHasNetworkKey>
 8021cb8:	00a4      	lsls	r4, r4, #2
 8021cba:	4320      	orrs	r0, r4
 8021cbc:	b2c0      	uxtb	r0, r0
 8021cbe:	2800      	cmp	r0, #0
 8021cc0:	4628      	mov	r0, r5
 8021cc2:	bf08      	it	eq
 8021cc4:	2404      	moveq	r4, #4
 8021cc6:	f7f4 faf1 	bl	80162ac <MoblePalCryptoHasAppKey>
 8021cca:	2801      	cmp	r0, #1
 8021ccc:	d111      	bne.n	8021cf2 <MobleConfigModel_ProcessAppKeyAdd+0x82>
 8021cce:	b994      	cbnz	r4, 8021cf6 <MobleConfigModel_ProcessAppKeyAdd+0x86>
 8021cd0:	4628      	mov	r0, r5
 8021cd2:	f7f5 f9f3 	bl	80170bc <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 8021cd6:	42b0      	cmp	r0, r6
 8021cd8:	d12f      	bne.n	8021d3a <MobleConfigModel_ProcessAppKeyAdd+0xca>
 8021cda:	4632      	mov	r2, r6
 8021cdc:	4629      	mov	r1, r5
 8021cde:	4648      	mov	r0, r9
 8021ce0:	f7f4 fe94 	bl	8016a0c <MoblePalCryptoSetAppKey>
 8021ce4:	4604      	mov	r4, r0
 8021ce6:	bb18      	cbnz	r0, 8021d30 <MobleConfigModel_ProcessAppKeyAdd+0xc0>
 8021ce8:	6838      	ldr	r0, [r7, #0]
 8021cea:	6084      	str	r4, [r0, #8]
 8021cec:	f7f8 fa10 	bl	801a110 <MobleConfigNetworkSave>
 8021cf0:	e001      	b.n	8021cf6 <MobleConfigModel_ProcessAppKeyAdd+0x86>
 8021cf2:	2c00      	cmp	r4, #0
 8021cf4:	d0f1      	beq.n	8021cda <MobleConfigModel_ProcessAppKeyAdd+0x6a>
 8021cf6:	2310      	movs	r3, #16
 8021cf8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8021cfc:	4b10      	ldr	r3, [pc, #64]	@ (8021d40 <MobleConfigModel_ProcessAppKeyAdd+0xd0>)
 8021cfe:	f88d 4025 	strb.w	r4, [sp, #37]	@ 0x25
 8021d02:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8021d06:	f8ad 6018 	strh.w	r6, [sp, #24]
 8021d0a:	a806      	add	r0, sp, #24
 8021d0c:	681b      	ldr	r3, [r3, #0]
 8021d0e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8021d12:	f8cd 9020 	str.w	r9, [sp, #32]
 8021d16:	4798      	blx	r3
 8021d18:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8021d1a:	4622      	mov	r2, r4
 8021d1c:	e9cd 5300 	strd	r5, r3, [sp]
 8021d20:	4641      	mov	r1, r8
 8021d22:	4633      	mov	r3, r6
 8021d24:	4638      	mov	r0, r7
 8021d26:	f7ff feab 	bl	8021a80 <MobleConfigModel_SendAppKeyStatus>
 8021d2a:	b00b      	add	sp, #44	@ 0x2c
 8021d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021d30:	2803      	cmp	r0, #3
 8021d32:	bf0c      	ite	eq
 8021d34:	2406      	moveq	r4, #6
 8021d36:	2403      	movne	r4, #3
 8021d38:	e7dd      	b.n	8021cf6 <MobleConfigModel_ProcessAppKeyAdd+0x86>
 8021d3a:	2404      	movs	r4, #4
 8021d3c:	e7db      	b.n	8021cf6 <MobleConfigModel_ProcessAppKeyAdd+0x86>
 8021d3e:	bf00      	nop
 8021d40:	20002514 	.word	0x20002514

08021d44 <MobleConfigModel_SendAppKeyList>:
 8021d44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021d48:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021d4a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021d4e:	4688      	mov	r8, r1
 8021d50:	4606      	mov	r6, r0
 8021d52:	b930      	cbnz	r0, 8021d62 <MobleConfigModel_SendAppKeyList+0x1e>
 8021d54:	4b16      	ldr	r3, [pc, #88]	@ (8021db0 <MobleConfigModel_SendAppKeyList+0x6c>)
 8021d56:	4a17      	ldr	r2, [pc, #92]	@ (8021db4 <MobleConfigModel_SendAppKeyList+0x70>)
 8021d58:	4817      	ldr	r0, [pc, #92]	@ (8021db8 <MobleConfigModel_SendAppKeyList+0x74>)
 8021d5a:	f240 711a 	movw	r1, #1818	@ 0x71a
 8021d5e:	f003 ff99 	bl	8025c94 <__assert_func>
 8021d62:	2302      	movs	r3, #2
 8021d64:	2700      	movs	r7, #0
 8021d66:	7023      	strb	r3, [r4, #0]
 8021d68:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8021d6c:	7063      	strb	r3, [r4, #1]
 8021d6e:	7222      	strb	r2, [r4, #8]
 8021d70:	f10d 0306 	add.w	r3, sp, #6
 8021d74:	f104 0209 	add.w	r2, r4, #9
 8021d78:	70a7      	strb	r7, [r4, #2]
 8021d7a:	70e7      	strb	r7, [r4, #3]
 8021d7c:	2101      	movs	r1, #1
 8021d7e:	4638      	mov	r0, r7
 8021d80:	f7f2 ff06 	bl	8014b90 <MobleConfigModelPutKeyIdxs>
 8021d84:	9b08      	ldr	r3, [sp, #32]
 8021d86:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8021d8a:	f104 020b 	add.w	r2, r4, #11
 8021d8e:	4605      	mov	r5, r0
 8021d90:	4638      	mov	r0, r7
 8021d92:	f7f2 fefd 	bl	8014b90 <MobleConfigModelPutKeyIdxs>
 8021d96:	4405      	add	r5, r0
 8021d98:	3501      	adds	r5, #1
 8021d9a:	f8c4 50a3 	str.w	r5, [r4, #163]	@ 0xa3
 8021d9e:	4623      	mov	r3, r4
 8021da0:	4642      	mov	r2, r8
 8021da2:	2101      	movs	r1, #1
 8021da4:	4630      	mov	r0, r6
 8021da6:	f7fd ffcd 	bl	801fd44 <MobleModelSendPacket>
 8021daa:	b002      	add	sp, #8
 8021dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021db0:	0802e501 	.word	0x0802e501
 8021db4:	0802da89 	.word	0x0802da89
 8021db8:	0802e513 	.word	0x0802e513

08021dbc <MobleConfigModel_ProcessAppKeyGet>:
 8021dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021dc0:	4605      	mov	r5, r0
 8021dc2:	b08d      	sub	sp, #52	@ 0x34
 8021dc4:	4618      	mov	r0, r3
 8021dc6:	f7f2 fedc 	bl	8014b82 <MobleConfigModelGetNetIdx>
 8021dca:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8021dce:	bf28      	it	cs
 8021dd0:	2200      	movcs	r2, #0
 8021dd2:	460f      	mov	r7, r1
 8021dd4:	bf28      	it	cs
 8021dd6:	f8ad 201a 	strhcs.w	r2, [sp, #26]
 8021dda:	9005      	str	r0, [sp, #20]
 8021ddc:	f7f4 fa4c 	bl	8016278 <MoblePalCryptoHasNetworkKey>
 8021de0:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 8021de4:	9b05      	ldr	r3, [sp, #20]
 8021de6:	b908      	cbnz	r0, 8021dec <MobleConfigModel_ProcessAppKeyGet+0x30>
 8021de8:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021dec:	ae07      	add	r6, sp, #28
 8021dee:	461a      	mov	r2, r3
 8021df0:	f10d 011a 	add.w	r1, sp, #26
 8021df4:	4630      	mov	r0, r6
 8021df6:	9305      	str	r3, [sp, #20]
 8021df8:	f7f5 f920 	bl	801703c <MoblePalCryptoGetAppKeyIndexes>
 8021dfc:	9b05      	ldr	r3, [sp, #20]
 8021dfe:	4604      	mov	r4, r0
 8021e00:	b118      	cbz	r0, 8021e0a <MobleConfigModel_ProcessAppKeyGet+0x4e>
 8021e02:	2200      	movs	r2, #0
 8021e04:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021e08:	2404      	movs	r4, #4
 8021e0a:	4a10      	ldr	r2, [pc, #64]	@ (8021e4c <MobleConfigModel_ProcessAppKeyGet+0x90>)
 8021e0c:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8021e10:	f8d2 26f8 	ldr.w	r2, [r2, #1784]	@ 0x6f8
 8021e14:	f88d 402e 	strb.w	r4, [sp, #46]	@ 0x2e
 8021e18:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8021e1c:	6892      	ldr	r2, [r2, #8]
 8021e1e:	960a      	str	r6, [sp, #40]	@ 0x28
 8021e20:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 8021e24:	a809      	add	r0, sp, #36	@ 0x24
 8021e26:	9305      	str	r3, [sp, #20]
 8021e28:	4790      	blx	r2
 8021e2a:	e9cd 9801 	strd	r9, r8, [sp, #4]
 8021e2e:	9b05      	ldr	r3, [sp, #20]
 8021e30:	b944      	cbnz	r4, 8021e44 <MobleConfigModel_ProcessAppKeyGet+0x88>
 8021e32:	9600      	str	r6, [sp, #0]
 8021e34:	4622      	mov	r2, r4
 8021e36:	4639      	mov	r1, r7
 8021e38:	4628      	mov	r0, r5
 8021e3a:	f7ff ff83 	bl	8021d44 <MobleConfigModel_SendAppKeyList>
 8021e3e:	b00d      	add	sp, #52	@ 0x34
 8021e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021e44:	2200      	movs	r2, #0
 8021e46:	9200      	str	r2, [sp, #0]
 8021e48:	2204      	movs	r2, #4
 8021e4a:	e7f4      	b.n	8021e36 <MobleConfigModel_ProcessAppKeyGet+0x7a>
 8021e4c:	20002514 	.word	0x20002514

08021e50 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus>:
 8021e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e54:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021e56:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8021e5a:	f89d e024 	ldrb.w	lr, [sp, #36]	@ 0x24
 8021e5e:	f89d c028 	ldrb.w	ip, [sp, #40]	@ 0x28
 8021e62:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 8021e66:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 8021e6a:	b930      	cbnz	r0, 8021e7a <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x2a>
 8021e6c:	4b14      	ldr	r3, [pc, #80]	@ (8021ec0 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x70>)
 8021e6e:	4a15      	ldr	r2, [pc, #84]	@ (8021ec4 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x74>)
 8021e70:	4815      	ldr	r0, [pc, #84]	@ (8021ec8 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x78>)
 8021e72:	f240 71f1 	movw	r1, #2033	@ 0x7f1
 8021e76:	f003 ff0d 	bl	8025c94 <__assert_func>
 8021e7a:	2500      	movs	r5, #0
 8021e7c:	f04f 0906 	mov.w	r9, #6
 8021e80:	f8a4 3009 	strh.w	r3, [r4, #9]
 8021e84:	81e7      	strh	r7, [r4, #14]
 8021e86:	230a      	movs	r3, #10
 8021e88:	8226      	strh	r6, [r4, #16]
 8021e8a:	7222      	strb	r2, [r4, #8]
 8021e8c:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8021e90:	f884 9000 	strb.w	r9, [r4]
 8021e94:	7065      	strb	r5, [r4, #1]
 8021e96:	70a5      	strb	r5, [r4, #2]
 8021e98:	70e5      	strb	r5, [r4, #3]
 8021e9a:	f884 800b 	strb.w	r8, [r4, #11]
 8021e9e:	f884 e00c 	strb.w	lr, [r4, #12]
 8021ea2:	f884 c00d 	strb.w	ip, [r4, #13]
 8021ea6:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 8021eaa:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 8021eae:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 8021eb2:	4623      	mov	r3, r4
 8021eb4:	460a      	mov	r2, r1
 8021eb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021eba:	2101      	movs	r1, #1
 8021ebc:	f7fd bf42 	b.w	801fd44 <MobleModelSendPacket>
 8021ec0:	0802e501 	.word	0x0802e501
 8021ec4:	0802daa9 	.word	0x0802daa9
 8021ec8:	0802e513 	.word	0x0802e513

08021ecc <BnrgmConfigModel_ProcessHeartBeatPublicationSet>:
 8021ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ed0:	789d      	ldrb	r5, [r3, #2]
 8021ed2:	681f      	ldr	r7, [r3, #0]
 8021ed4:	469a      	mov	sl, r3
 8021ed6:	f1a5 0312 	sub.w	r3, r5, #18
 8021eda:	b2db      	uxtb	r3, r3
 8021edc:	2bec      	cmp	r3, #236	@ 0xec
 8021ede:	b2bf      	uxth	r7, r7
 8021ee0:	bf88      	it	hi
 8021ee2:	fab7 f487 	clzhi	r4, r7
 8021ee6:	f89a 8003 	ldrb.w	r8, [sl, #3]
 8021eea:	f99a 3004 	ldrsb.w	r3, [sl, #4]
 8021eee:	f89a 9004 	ldrb.w	r9, [sl, #4]
 8021ef2:	bf86      	itte	hi
 8021ef4:	0964      	lsrhi	r4, r4, #5
 8021ef6:	0064      	lslhi	r4, r4, #1
 8021ef8:	2402      	movls	r4, #2
 8021efa:	f1b8 0f12 	cmp.w	r8, #18
 8021efe:	bf28      	it	cs
 8021f00:	2402      	movcs	r4, #2
 8021f02:	b086      	sub	sp, #24
 8021f04:	2b00      	cmp	r3, #0
 8021f06:	4606      	mov	r6, r0
 8021f08:	f10a 0007 	add.w	r0, sl, #7
 8021f0c:	bfb8      	it	lt
 8021f0e:	2402      	movlt	r4, #2
 8021f10:	f7f2 fe37 	bl	8014b82 <MobleConfigModelGetNetIdx>
 8021f14:	2800      	cmp	r0, #0
 8021f16:	d058      	beq.n	8021fca <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xfe>
 8021f18:	4b33      	ldr	r3, [pc, #204]	@ (8021fe8 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x11c>)
 8021f1a:	227c      	movs	r2, #124	@ 0x7c
 8021f1c:	fb02 3300 	mla	r3, r2, r0, r3
 8021f20:	f893 2445 	ldrb.w	r2, [r3, #1093]	@ 0x445
 8021f24:	fab2 f282 	clz	r2, r2
 8021f28:	0952      	lsrs	r2, r2, #5
 8021f2a:	0092      	lsls	r2, r2, #2
 8021f2c:	2c00      	cmp	r4, #0
 8021f2e:	d158      	bne.n	8021fe2 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x116>
 8021f30:	6833      	ldr	r3, [r6, #0]
 8021f32:	f8da c005 	ldr.w	ip, [sl, #5]
 8021f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021f38:	2d00      	cmp	r5, #0
 8021f3a:	d048      	beq.n	8021fce <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x102>
 8021f3c:	2dff      	cmp	r5, #255	@ 0xff
 8021f3e:	d048      	beq.n	8021fd2 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x106>
 8021f40:	2d11      	cmp	r5, #17
 8021f42:	d049      	beq.n	8021fd8 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x10c>
 8021f44:	f105 3eff 	add.w	lr, r5, #4294967295
 8021f48:	fa5f fe8e 	uxtb.w	lr, lr
 8021f4c:	f1be 0f1f 	cmp.w	lr, #31
 8021f50:	bf9c      	itt	ls
 8021f52:	2401      	movls	r4, #1
 8021f54:	fa04 f40e 	lslls.w	r4, r4, lr
 8021f58:	b2a4      	uxth	r4, r4
 8021f5a:	83df      	strh	r7, [r3, #30]
 8021f5c:	625c      	str	r4, [r3, #36]	@ 0x24
 8021f5e:	f1b8 0f00 	cmp.w	r8, #0
 8021f62:	d03c      	beq.n	8021fde <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x112>
 8021f64:	f108 3eff 	add.w	lr, r8, #4294967295
 8021f68:	fa5f fe8e 	uxtb.w	lr, lr
 8021f6c:	f1be 0f1f 	cmp.w	lr, #31
 8021f70:	bf9a      	itte	ls
 8021f72:	2401      	movls	r4, #1
 8021f74:	fa04 f40e 	lslls.w	r4, r4, lr
 8021f78:	2400      	movhi	r4, #0
 8021f7a:	b2a4      	uxth	r4, r4
 8021f7c:	f00c 0c0f 	and.w	ip, ip, #15
 8021f80:	851c      	strh	r4, [r3, #40]	@ 0x28
 8021f82:	f8a3 c02a 	strh.w	ip, [r3, #42]	@ 0x2a
 8021f86:	8598      	strh	r0, [r3, #44]	@ 0x2c
 8021f88:	f883 901c 	strb.w	r9, [r3, #28]
 8021f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021f8e:	e9cd 9c02 	strd	r9, ip, [sp, #8]
 8021f92:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8021f96:	e9cd 5800 	strd	r5, r8, [sp]
 8021f9a:	463b      	mov	r3, r7
 8021f9c:	4630      	mov	r0, r6
 8021f9e:	f7ff ff57 	bl	8021e50 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus>
 8021fa2:	6833      	ldr	r3, [r6, #0]
 8021fa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8021fa6:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8021fa8:	4604      	mov	r4, r0
 8021faa:	4628      	mov	r0, r5
 8021fac:	f7f2 ffb2 	bl	8014f14 <MoblePalTimerStop>
 8021fb0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8021fb2:	b133      	cbz	r3, 8021fc2 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xf6>
 8021fb4:	8d13      	ldrh	r3, [r2, #40]	@ 0x28
 8021fb6:	b123      	cbz	r3, 8021fc2 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xf6>
 8021fb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8021fbc:	4628      	mov	r0, r5
 8021fbe:	f7f2 ff81 	bl	8014ec4 <MoblePalTimerStartOnce>
 8021fc2:	4620      	mov	r0, r4
 8021fc4:	b006      	add	sp, #24
 8021fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021fca:	4602      	mov	r2, r0
 8021fcc:	e7ae      	b.n	8021f2c <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x60>
 8021fce:	462c      	mov	r4, r5
 8021fd0:	e7c3      	b.n	8021f5a <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x8e>
 8021fd2:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8021fd6:	e7c0      	b.n	8021f5a <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x8e>
 8021fd8:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 8021fdc:	e7bd      	b.n	8021f5a <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x8e>
 8021fde:	4644      	mov	r4, r8
 8021fe0:	e7cc      	b.n	8021f7c <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xb0>
 8021fe2:	2402      	movs	r4, #2
 8021fe4:	e7ed      	b.n	8021fc2 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xf6>
 8021fe6:	bf00      	nop
 8021fe8:	2000141c 	.word	0x2000141c

08021fec <BnrgmConfigModel_ProcessHeartBeatPublicationGet>:
 8021fec:	6803      	ldr	r3, [r0, #0]
 8021fee:	b570      	push	{r4, r5, r6, lr}
 8021ff0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8021ff2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8021ff4:	b086      	sub	sp, #24
 8021ff6:	b313      	cbz	r3, 802203e <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x52>
 8021ff8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8021ffc:	4293      	cmp	r3, r2
 8021ffe:	d020      	beq.n	8022042 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x56>
 8022000:	2400      	movs	r4, #0
 8022002:	3401      	adds	r4, #1
 8022004:	2b01      	cmp	r3, #1
 8022006:	b2e4      	uxtb	r4, r4
 8022008:	d117      	bne.n	802203a <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x4e>
 802200a:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 802200c:	b12a      	cbz	r2, 802201a <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x2e>
 802200e:	4613      	mov	r3, r2
 8022010:	2200      	movs	r2, #0
 8022012:	3201      	adds	r2, #1
 8022014:	2b01      	cmp	r3, #1
 8022016:	b2d2      	uxtb	r2, r2
 8022018:	d115      	bne.n	8022046 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x5a>
 802201a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 802201c:	8beb      	ldrh	r3, [r5, #30]
 802201e:	9605      	str	r6, [sp, #20]
 8022020:	8dae      	ldrh	r6, [r5, #44]	@ 0x2c
 8022022:	9604      	str	r6, [sp, #16]
 8022024:	8d6e      	ldrh	r6, [r5, #42]	@ 0x2a
 8022026:	9603      	str	r6, [sp, #12]
 8022028:	7f2d      	ldrb	r5, [r5, #28]
 802202a:	9400      	str	r4, [sp, #0]
 802202c:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8022030:	2200      	movs	r2, #0
 8022032:	f7ff ff0d 	bl	8021e50 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus>
 8022036:	b006      	add	sp, #24
 8022038:	bd70      	pop	{r4, r5, r6, pc}
 802203a:	085b      	lsrs	r3, r3, #1
 802203c:	e7e1      	b.n	8022002 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x16>
 802203e:	461c      	mov	r4, r3
 8022040:	e7e3      	b.n	802200a <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x1e>
 8022042:	24ff      	movs	r4, #255	@ 0xff
 8022044:	e7e1      	b.n	802200a <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x1e>
 8022046:	085b      	lsrs	r3, r3, #1
 8022048:	e7e3      	b.n	8022012 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x26>
	...

0802204c <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus>:
 802204c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022050:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022052:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 8022056:	f89d e024 	ldrb.w	lr, [sp, #36]	@ 0x24
 802205a:	f89d c028 	ldrb.w	ip, [sp, #40]	@ 0x28
 802205e:	f89d 702c 	ldrb.w	r7, [sp, #44]	@ 0x2c
 8022062:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
 8022066:	b930      	cbnz	r0, 8022076 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x2a>
 8022068:	4b16      	ldr	r3, [pc, #88]	@ (80220c4 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x78>)
 802206a:	4a17      	ldr	r2, [pc, #92]	@ (80220c8 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x7c>)
 802206c:	4817      	ldr	r0, [pc, #92]	@ (80220cc <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x80>)
 802206e:	f640 0118 	movw	r1, #2072	@ 0x818
 8022072:	f003 fe0f 	bl	8025c94 <__assert_func>
 8022076:	f04f 093c 	mov.w	r9, #60	@ 0x3c
 802207a:	2500      	movs	r5, #0
 802207c:	f884 9000 	strb.w	r9, [r4]
 8022080:	f8a4 3009 	strh.w	r3, [r4, #9]
 8022084:	f06f 097f 	mvn.w	r9, #127	@ 0x7f
 8022088:	2309      	movs	r3, #9
 802208a:	f8a4 800b 	strh.w	r8, [r4, #11]
 802208e:	7222      	strb	r2, [r4, #8]
 8022090:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8022094:	f884 9001 	strb.w	r9, [r4, #1]
 8022098:	70a5      	strb	r5, [r4, #2]
 802209a:	70e5      	strb	r5, [r4, #3]
 802209c:	f884 e00d 	strb.w	lr, [r4, #13]
 80220a0:	f884 c00e 	strb.w	ip, [r4, #14]
 80220a4:	73e7      	strb	r7, [r4, #15]
 80220a6:	7426      	strb	r6, [r4, #16]
 80220a8:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 80220ac:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 80220b0:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 80220b4:	4623      	mov	r3, r4
 80220b6:	460a      	mov	r2, r1
 80220b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220bc:	2101      	movs	r1, #1
 80220be:	f7fd be41 	b.w	801fd44 <MobleModelSendPacket>
 80220c2:	bf00      	nop
 80220c4:	0802e501 	.word	0x0802e501
 80220c8:	0802dadf 	.word	0x0802dadf
 80220cc:	0802e513 	.word	0x0802e513

080220d0 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet>:
 80220d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220d4:	4688      	mov	r8, r1
 80220d6:	4943      	ldr	r1, [pc, #268]	@ (80221e4 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x114>)
 80220d8:	2600      	movs	r6, #0
 80220da:	f8c1 60e8 	str.w	r6, [r1, #232]	@ 0xe8
 80220de:	681a      	ldr	r2, [r3, #0]
 80220e0:	4607      	mov	r7, r0
 80220e2:	b290      	uxth	r0, r2
 80220e4:	b212      	sxth	r2, r2
 80220e6:	42b2      	cmp	r2, r6
 80220e8:	b086      	sub	sp, #24
 80220ea:	dc01      	bgt.n	80220f0 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x20>
 80220ec:	b9a0      	cbnz	r0, 8022118 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x48>
 80220ee:	2601      	movs	r6, #1
 80220f0:	f8d3 9002 	ldr.w	r9, [r3, #2]
 80220f4:	fa1f fa89 	uxth.w	sl, r9
 80220f8:	f1ba 0f00 	cmp.w	sl, #0
 80220fc:	d00e      	beq.n	802211c <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x4c>
 80220fe:	f409 4240 	and.w	r2, r9, #49152	@ 0xc000
 8022102:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8022106:	d007      	beq.n	8022118 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x48>
 8022108:	fa0f f289 	sxth.w	r2, r9
 802210c:	2a00      	cmp	r2, #0
 802210e:	dd06      	ble.n	802211e <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x4e>
 8022110:	683a      	ldr	r2, [r7, #0]
 8022112:	8852      	ldrh	r2, [r2, #2]
 8022114:	4552      	cmp	r2, sl
 8022116:	d002      	beq.n	802211e <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x4e>
 8022118:	2002      	movs	r0, #2
 802211a:	e04b      	b.n	80221b4 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xe4>
 802211c:	2601      	movs	r6, #1
 802211e:	791c      	ldrb	r4, [r3, #4]
 8022120:	683b      	ldr	r3, [r7, #0]
 8022122:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8022124:	8e93      	ldrh	r3, [r2, #52]	@ 0x34
 8022126:	4283      	cmp	r3, r0
 8022128:	d103      	bne.n	8022132 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x62>
 802212a:	8ed3      	ldrh	r3, [r2, #54]	@ 0x36
 802212c:	4553      	cmp	r3, sl
 802212e:	d100      	bne.n	8022132 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x62>
 8022130:	b114      	cbz	r4, 8022138 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x68>
 8022132:	f44f 03fe 	mov.w	r3, #8323072	@ 0x7f0000
 8022136:	6393      	str	r3, [r2, #56]	@ 0x38
 8022138:	8f13      	ldrh	r3, [r2, #56]	@ 0x38
 802213a:	2b00      	cmp	r3, #0
 802213c:	d03f      	beq.n	80221be <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xee>
 802213e:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8022142:	42ab      	cmp	r3, r5
 8022144:	d03d      	beq.n	80221c2 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xf2>
 8022146:	2500      	movs	r5, #0
 8022148:	3501      	adds	r5, #1
 802214a:	2b01      	cmp	r3, #1
 802214c:	b2ed      	uxtb	r5, r5
 802214e:	d134      	bne.n	80221ba <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xea>
 8022150:	2c00      	cmp	r4, #0
 8022152:	d138      	bne.n	80221c6 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xf6>
 8022154:	6354      	str	r4, [r2, #52]	@ 0x34
 8022156:	b10e      	cbz	r6, 802215c <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x8c>
 8022158:	2300      	movs	r3, #0
 802215a:	6353      	str	r3, [r2, #52]	@ 0x34
 802215c:	2400      	movs	r4, #0
 802215e:	f8c1 40e8 	str.w	r4, [r1, #232]	@ 0xe8
 8022162:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8022164:	4630      	mov	r0, r6
 8022166:	f7f2 fed5 	bl	8014f14 <MoblePalTimerStop>
 802216a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 802216c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8022170:	d304      	bcc.n	802217c <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xac>
 8022172:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8022176:	4630      	mov	r0, r6
 8022178:	f7f2 fe73 	bl	8014e62 <MoblePalTimerStart>
 802217c:	fa0f f989 	sxth.w	r9, r9
 8022180:	f1b9 0f00 	cmp.w	r9, #0
 8022184:	dc02      	bgt.n	802218c <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xbc>
 8022186:	4650      	mov	r0, sl
 8022188:	f7f8 ff80 	bl	801b08c <BnrgmFrndMgmtSubscriptionListAdd>
 802218c:	683b      	ldr	r3, [r7, #0]
 802218e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8022190:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8022192:	8e93      	ldrh	r3, [r2, #52]	@ 0x34
 8022194:	9105      	str	r1, [sp, #20]
 8022196:	f892 103b 	ldrb.w	r1, [r2, #59]	@ 0x3b
 802219a:	9104      	str	r1, [sp, #16]
 802219c:	f892 103a 	ldrb.w	r1, [r2, #58]	@ 0x3a
 80221a0:	9401      	str	r4, [sp, #4]
 80221a2:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80221a6:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 80221a8:	9200      	str	r2, [sp, #0]
 80221aa:	4641      	mov	r1, r8
 80221ac:	2200      	movs	r2, #0
 80221ae:	4638      	mov	r0, r7
 80221b0:	f7ff ff4c 	bl	802204c <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus>
 80221b4:	b006      	add	sp, #24
 80221b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80221ba:	085b      	lsrs	r3, r3, #1
 80221bc:	e7c4      	b.n	8022148 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x78>
 80221be:	461d      	mov	r5, r3
 80221c0:	e7c6      	b.n	8022150 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x80>
 80221c2:	25ff      	movs	r5, #255	@ 0xff
 80221c4:	e7c4      	b.n	8022150 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x80>
 80221c6:	8690      	strh	r0, [r2, #52]	@ 0x34
 80221c8:	f8a2 a036 	strh.w	sl, [r2, #54]	@ 0x36
 80221cc:	2e00      	cmp	r6, #0
 80221ce:	d1c3      	bne.n	8022158 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x88>
 80221d0:	2c11      	cmp	r4, #17
 80221d2:	d8c6      	bhi.n	8022162 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x92>
 80221d4:	1e60      	subs	r0, r4, #1
 80221d6:	b2c0      	uxtb	r0, r0
 80221d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80221dc:	4083      	lsls	r3, r0
 80221de:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80221e2:	e7be      	b.n	8022162 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x92>
 80221e4:	20000324 	.word	0x20000324

080221e8 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet>:
 80221e8:	6803      	ldr	r3, [r0, #0]
 80221ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80221ec:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80221ee:	8f2b      	ldrh	r3, [r5, #56]	@ 0x38
 80221f0:	b087      	sub	sp, #28
 80221f2:	468c      	mov	ip, r1
 80221f4:	b3a3      	cbz	r3, 8022260 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x78>
 80221f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80221fa:	4293      	cmp	r3, r2
 80221fc:	d032      	beq.n	8022264 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x7c>
 80221fe:	2200      	movs	r2, #0
 8022200:	3201      	adds	r2, #1
 8022202:	2b01      	cmp	r3, #1
 8022204:	b2d2      	uxtb	r2, r2
 8022206:	d129      	bne.n	802225c <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x74>
 8022208:	4b1c      	ldr	r3, [pc, #112]	@ (802227c <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x94>)
 802220a:	f8d3 40e8 	ldr.w	r4, [r3, #232]	@ 0xe8
 802220e:	f1b4 7f7a 	cmp.w	r4, #65536000	@ 0x3e80000
 8022212:	d229      	bcs.n	8022268 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x80>
 8022214:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 8022218:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 802221c:	fbb4 f3f3 	udiv	r3, r4, r3
 8022220:	b29b      	uxth	r3, r3
 8022222:	d326      	bcc.n	8022272 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x8a>
 8022224:	2400      	movs	r4, #0
 8022226:	3401      	adds	r4, #1
 8022228:	2b01      	cmp	r3, #1
 802222a:	b2e4      	uxtb	r4, r4
 802222c:	d11f      	bne.n	802226e <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x86>
 802222e:	8eab      	ldrh	r3, [r5, #52]	@ 0x34
 8022230:	f895 603a 	ldrb.w	r6, [r5, #58]	@ 0x3a
 8022234:	8eef      	ldrh	r7, [r5, #54]	@ 0x36
 8022236:	b1f3      	cbz	r3, 8022276 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x8e>
 8022238:	2f00      	cmp	r7, #0
 802223a:	bf08      	it	eq
 802223c:	2600      	moveq	r6, #0
 802223e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8022240:	9105      	str	r1, [sp, #20]
 8022242:	f895 503b 	ldrb.w	r5, [r5, #59]	@ 0x3b
 8022246:	9700      	str	r7, [sp, #0]
 8022248:	e9cd 4201 	strd	r4, r2, [sp, #4]
 802224c:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8022250:	2200      	movs	r2, #0
 8022252:	4661      	mov	r1, ip
 8022254:	f7ff fefa 	bl	802204c <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus>
 8022258:	b007      	add	sp, #28
 802225a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802225c:	085b      	lsrs	r3, r3, #1
 802225e:	e7cf      	b.n	8022200 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x18>
 8022260:	461a      	mov	r2, r3
 8022262:	e7d1      	b.n	8022208 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x20>
 8022264:	22ff      	movs	r2, #255	@ 0xff
 8022266:	e7cf      	b.n	8022208 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x20>
 8022268:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802226c:	e7da      	b.n	8022224 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x3c>
 802226e:	085b      	lsrs	r3, r3, #1
 8022270:	e7d9      	b.n	8022226 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x3e>
 8022272:	2400      	movs	r4, #0
 8022274:	e7db      	b.n	802222e <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x46>
 8022276:	461e      	mov	r6, r3
 8022278:	e7e1      	b.n	802223e <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x56>
 802227a:	bf00      	nop
 802227c:	20000324 	.word	0x20000324

08022280 <BnrgmConfigModel_SendConfigNetworkTransmitStatus>:
 8022280:	b570      	push	{r4, r5, r6, lr}
 8022282:	9c04      	ldr	r4, [sp, #16]
 8022284:	460e      	mov	r6, r1
 8022286:	b930      	cbnz	r0, 8022296 <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x16>
 8022288:	4b10      	ldr	r3, [pc, #64]	@ (80222cc <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x4c>)
 802228a:	4a11      	ldr	r2, [pc, #68]	@ (80222d0 <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x50>)
 802228c:	4811      	ldr	r0, [pc, #68]	@ (80222d4 <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x54>)
 802228e:	f640 111d 	movw	r1, #2333	@ 0x91d
 8022292:	f003 fcff 	bl	8025c94 <__assert_func>
 8022296:	2125      	movs	r1, #37	@ 0x25
 8022298:	7021      	strb	r1, [r4, #0]
 802229a:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 802229e:	2500      	movs	r5, #0
 80222a0:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
 80222a4:	7061      	strb	r1, [r4, #1]
 80222a6:	2101      	movs	r1, #1
 80222a8:	7223      	strb	r3, [r4, #8]
 80222aa:	70a5      	strb	r5, [r4, #2]
 80222ac:	70e5      	strb	r5, [r4, #3]
 80222ae:	f884 10a3 	strb.w	r1, [r4, #163]	@ 0xa3
 80222b2:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 80222b6:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 80222ba:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 80222be:	4623      	mov	r3, r4
 80222c0:	4632      	mov	r2, r6
 80222c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80222c6:	f7fd bd3d 	b.w	801fd44 <MobleModelSendPacket>
 80222ca:	bf00      	nop
 80222cc:	0802e501 	.word	0x0802e501
 80222d0:	0802db16 	.word	0x0802db16
 80222d4:	0802e513 	.word	0x0802e513

080222d8 <BnrgmConfigModel_ProcessNetworkTransmitSet>:
 80222d8:	b410      	push	{r4}
 80222da:	6804      	ldr	r4, [r0, #0]
 80222dc:	781b      	ldrb	r3, [r3, #0]
 80222de:	6a64      	ldr	r4, [r4, #36]	@ 0x24
 80222e0:	f003 0207 	and.w	r2, r3, #7
 80222e4:	08db      	lsrs	r3, r3, #3
 80222e6:	72a2      	strb	r2, [r4, #10]
 80222e8:	72e3      	strb	r3, [r4, #11]
 80222ea:	9c02      	ldr	r4, [sp, #8]
 80222ec:	9401      	str	r4, [sp, #4]
 80222ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80222f2:	f7ff bfc5 	b.w	8022280 <BnrgmConfigModel_SendConfigNetworkTransmitStatus>

080222f6 <BnrgmConfigModel_ProcessNetworkTransmitGet>:
 80222f6:	b410      	push	{r4}
 80222f8:	6803      	ldr	r3, [r0, #0]
 80222fa:	9c02      	ldr	r4, [sp, #8]
 80222fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80222fe:	7ad3      	ldrb	r3, [r2, #11]
 8022300:	7a92      	ldrb	r2, [r2, #10]
 8022302:	9401      	str	r4, [sp, #4]
 8022304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022308:	f7ff bfba 	b.w	8022280 <BnrgmConfigModel_SendConfigNetworkTransmitStatus>

0802230c <MobleConfigModel_ProcessDeviceCompositionDataGet>:
 802230c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022310:	ed2d 8b02 	vpush	{d8}
 8022314:	6803      	ldr	r3, [r0, #0]
 8022316:	b0dd      	sub	sp, #372	@ 0x174
 8022318:	885a      	ldrh	r2, [r3, #2]
 802231a:	7f1b      	ldrb	r3, [r3, #28]
 802231c:	9303      	str	r3, [sp, #12]
 802231e:	4b7a      	ldr	r3, [pc, #488]	@ (8022508 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1fc>)
 8022320:	9206      	str	r2, [sp, #24]
 8022322:	f893 40bd 	ldrb.w	r4, [r3, #189]	@ 0xbd
 8022326:	f893 20bc 	ldrb.w	r2, [r3, #188]	@ 0xbc
 802232a:	9007      	str	r0, [sp, #28]
 802232c:	3c02      	subs	r4, #2
 802232e:	bf18      	it	ne
 8022330:	2401      	movne	r4, #1
 8022332:	2a02      	cmp	r2, #2
 8022334:	f893 20be 	ldrb.w	r2, [r3, #190]	@ 0xbe
 8022338:	9e69      	ldr	r6, [sp, #420]	@ 0x1a4
 802233a:	bf18      	it	ne
 802233c:	f044 0402 	orrne.w	r4, r4, #2
 8022340:	2a02      	cmp	r2, #2
 8022342:	f893 20bf 	ldrb.w	r2, [r3, #191]	@ 0xbf
 8022346:	685b      	ldr	r3, [r3, #4]
 8022348:	bf18      	it	ne
 802234a:	f044 0404 	orrne.w	r4, r4, #4
 802234e:	699b      	ldr	r3, [r3, #24]
 8022350:	2a02      	cmp	r2, #2
 8022352:	a80a      	add	r0, sp, #40	@ 0x28
 8022354:	bf18      	it	ne
 8022356:	f044 0408 	orrne.w	r4, r4, #8
 802235a:	ee08 1a10 	vmov	s16, r1
 802235e:	4798      	blx	r3
 8022360:	2202      	movs	r2, #2
 8022362:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
 8022366:	a81d      	add	r0, sp, #116	@ 0x74
 8022368:	f7f6 fe06 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 802236c:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
 8022370:	f10d 0076 	add.w	r0, sp, #118	@ 0x76
 8022374:	f7f6 fe00 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 8022378:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 802237c:	a81e      	add	r0, sp, #120	@ 0x78
 802237e:	f7f6 fdfb 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 8022382:	2114      	movs	r1, #20
 8022384:	f10d 007a 	add.w	r0, sp, #122	@ 0x7a
 8022388:	f7f6 fdf6 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 802238c:	4621      	mov	r1, r4
 802238e:	a81f      	add	r0, sp, #124	@ 0x7c
 8022390:	f7f6 fdf2 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 8022394:	9b03      	ldr	r3, [sp, #12]
 8022396:	005b      	lsls	r3, r3, #1
 8022398:	3305      	adds	r3, #5
 802239a:	f04f 0a00 	mov.w	sl, #0
 802239e:	b2db      	uxtb	r3, r3
 80223a0:	9308      	str	r3, [sp, #32]
 80223a2:	46d0      	mov	r8, sl
 80223a4:	4654      	mov	r4, sl
 80223a6:	9a03      	ldr	r2, [sp, #12]
 80223a8:	fa5f f38a 	uxtb.w	r3, sl
 80223ac:	4293      	cmp	r3, r2
 80223ae:	d321      	bcc.n	80223f4 <MobleConfigModel_ProcessDeviceCompositionDataGet+0xe8>
 80223b0:	4a56      	ldr	r2, [pc, #344]	@ (802250c <MobleConfigModel_ProcessDeviceCompositionDataGet+0x200>)
 80223b2:	f892 3a38 	ldrb.w	r3, [r2, #2616]	@ 0xa38
 80223b6:	3b02      	subs	r3, #2
 80223b8:	f882 3a38 	strb.w	r3, [r2, #2616]	@ 0xa38
 80223bc:	2300      	movs	r3, #0
 80223be:	2202      	movs	r2, #2
 80223c0:	7032      	strb	r2, [r6, #0]
 80223c2:	7073      	strb	r3, [r6, #1]
 80223c4:	4622      	mov	r2, r4
 80223c6:	70b3      	strb	r3, [r6, #2]
 80223c8:	70f3      	strb	r3, [r6, #3]
 80223ca:	7233      	strb	r3, [r6, #8]
 80223cc:	a91d      	add	r1, sp, #116	@ 0x74
 80223ce:	f106 0009 	add.w	r0, r6, #9
 80223d2:	3401      	adds	r4, #1
 80223d4:	f004 fcad 	bl	8026d32 <memcpy>
 80223d8:	ee18 2a10 	vmov	r2, s16
 80223dc:	9807      	ldr	r0, [sp, #28]
 80223de:	f8c6 40a3 	str.w	r4, [r6, #163]	@ 0xa3
 80223e2:	4633      	mov	r3, r6
 80223e4:	2101      	movs	r1, #1
 80223e6:	f7fd fcad 	bl	801fd44 <MobleModelSendPacket>
 80223ea:	b05d      	add	sp, #372	@ 0x174
 80223ec:	ecbd 8b02 	vpop	{d8}
 80223f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223f4:	4619      	mov	r1, r3
 80223f6:	a80c      	add	r0, sp, #48	@ 0x30
 80223f8:	9304      	str	r3, [sp, #16]
 80223fa:	f7f7 f80b 	bl	8019414 <MobleApplicationGetSigModelList>
 80223fe:	9b04      	ldr	r3, [sp, #16]
 8022400:	9309      	str	r3, [sp, #36]	@ 0x24
 8022402:	4605      	mov	r5, r0
 8022404:	4619      	mov	r1, r3
 8022406:	a812      	add	r0, sp, #72	@ 0x48
 8022408:	f7f7 f826 	bl	8019458 <MobleApplicationGetVendorModelList>
 802240c:	1c69      	adds	r1, r5, #1
 802240e:	9004      	str	r0, [sp, #16]
 8022410:	d078      	beq.n	8022504 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1f8>
 8022412:	1c42      	adds	r2, r0, #1
 8022414:	d076      	beq.n	8022504 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1f8>
 8022416:	2202      	movs	r2, #2
 8022418:	fb12 5300 	smlabb	r3, r2, r0, r5
 802241c:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8022420:	9305      	str	r3, [sp, #20]
 8022422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022424:	fa59 f785 	uxtab	r7, r9, r5
 8022428:	fa5f fb85 	uxtb.w	fp, r5
 802242c:	b2ff      	uxtb	r7, r7
 802242e:	2b00      	cmp	r3, #0
 8022430:	d14d      	bne.n	80224ce <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1c2>
 8022432:	9a08      	ldr	r2, [sp, #32]
 8022434:	9905      	ldr	r1, [sp, #20]
 8022436:	1854      	adds	r4, r2, r1
 8022438:	0064      	lsls	r4, r4, #1
 802243a:	9a03      	ldr	r2, [sp, #12]
 802243c:	9201      	str	r2, [sp, #4]
 802243e:	9a06      	ldr	r2, [sp, #24]
 8022440:	9200      	str	r2, [sp, #0]
 8022442:	4639      	mov	r1, r7
 8022444:	465a      	mov	r2, fp
 8022446:	a80c      	add	r0, sp, #48	@ 0x30
 8022448:	9309      	str	r3, [sp, #36]	@ 0x24
 802244a:	f7f7 f827 	bl	801949c <MobleApplicationUpdateSigModelList>
 802244e:	9b03      	ldr	r3, [sp, #12]
 8022450:	9301      	str	r3, [sp, #4]
 8022452:	9b06      	ldr	r3, [sp, #24]
 8022454:	9300      	str	r3, [sp, #0]
 8022456:	464a      	mov	r2, r9
 8022458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802245a:	4639      	mov	r1, r7
 802245c:	a812      	add	r0, sp, #72	@ 0x48
 802245e:	f7f7 f85b 	bl	8019518 <MobleApplicationUpdateVendorModelList>
 8022462:	ab1d      	add	r3, sp, #116	@ 0x74
 8022464:	f108 000a 	add.w	r0, r8, #10
 8022468:	4418      	add	r0, r3
 802246a:	2202      	movs	r2, #2
 802246c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8022470:	f7f6 fd82 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 8022474:	f508 73b8 	add.w	r3, r8, #368	@ 0x170
 8022478:	446b      	add	r3, sp
 802247a:	b2e4      	uxtb	r4, r4
 802247c:	f803 bcf0 	strb.w	fp, [r3, #-240]
 8022480:	f803 9cef 	strb.w	r9, [r3, #-239]
 8022484:	f108 0b0e 	add.w	fp, r8, #14
 8022488:	f04f 0900 	mov.w	r9, #0
 802248c:	fa5f f389 	uxtb.w	r3, r9
 8022490:	42ab      	cmp	r3, r5
 8022492:	f109 0901 	add.w	r9, r9, #1
 8022496:	db1e      	blt.n	80224d6 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1ca>
 8022498:	f04f 0900 	mov.w	r9, #0
 802249c:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 80224a0:	3507      	adds	r5, #7
 80224a2:	9a04      	ldr	r2, [sp, #16]
 80224a4:	fa5f f389 	uxtb.w	r3, r9
 80224a8:	4293      	cmp	r3, r2
 80224aa:	f109 0901 	add.w	r9, r9, #1
 80224ae:	db1d      	blt.n	80224ec <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1e0>
 80224b0:	9b05      	ldr	r3, [sp, #20]
 80224b2:	4a16      	ldr	r2, [pc, #88]	@ (802250c <MobleConfigModel_ProcessDeviceCompositionDataGet+0x200>)
 80224b4:	3302      	adds	r3, #2
 80224b6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80224ba:	fa5f f883 	uxtb.w	r8, r3
 80224be:	f892 3a38 	ldrb.w	r3, [r2, #2616]	@ 0xa38
 80224c2:	441f      	add	r7, r3
 80224c4:	f882 7a38 	strb.w	r7, [r2, #2616]	@ 0xa38
 80224c8:	f10a 0a01 	add.w	sl, sl, #1
 80224cc:	e76b      	b.n	80223a6 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x9a>
 80224ce:	9a05      	ldr	r2, [sp, #20]
 80224d0:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 80224d4:	e7b1      	b.n	802243a <MobleConfigModel_ProcessDeviceCompositionDataGet+0x12e>
 80224d6:	a90c      	add	r1, sp, #48	@ 0x30
 80224d8:	eb0b 0043 	add.w	r0, fp, r3, lsl #1
 80224dc:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80224e0:	ab1d      	add	r3, sp, #116	@ 0x74
 80224e2:	2202      	movs	r2, #2
 80224e4:	4418      	add	r0, r3
 80224e6:	f7f6 fd47 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 80224ea:	e7cf      	b.n	802248c <MobleConfigModel_ProcessDeviceCompositionDataGet+0x180>
 80224ec:	eb05 0043 	add.w	r0, r5, r3, lsl #1
 80224f0:	f85b 1023 	ldr.w	r1, [fp, r3, lsl #2]
 80224f4:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 80224f8:	ab1d      	add	r3, sp, #116	@ 0x74
 80224fa:	2204      	movs	r2, #4
 80224fc:	4418      	add	r0, r3
 80224fe:	f7f6 fd3b 	bl	8018f78 <MobleOutputStreamPutLittleEndian>
 8022502:	e7ce      	b.n	80224a2 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x196>
 8022504:	2002      	movs	r0, #2
 8022506:	e770      	b.n	80223ea <MobleConfigModel_ProcessDeviceCompositionDataGet+0xde>
 8022508:	20000324 	.word	0x20000324
 802250c:	20002514 	.word	0x20002514

08022510 <BnrgmHealthModelPublish_TimerCallback>:
 8022510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022514:	f8d1 8000 	ldr.w	r8, [r1]
 8022518:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 802251c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8022520:	b088      	sub	sp, #32
 8022522:	460d      	mov	r5, r1
 8022524:	2b00      	cmp	r3, #0
 8022526:	d062      	beq.n	80225ee <BnrgmHealthModelPublish_TimerCallback+0xde>
 8022528:	4f32      	ldr	r7, [pc, #200]	@ (80225f4 <BnrgmHealthModelPublish_TimerCallback+0xe4>)
 802252a:	20a7      	movs	r0, #167	@ 0xa7
 802252c:	f7f5 fdfc 	bl	8018128 <MobleMemAlloc>
 8022530:	f8b7 610c 	ldrh.w	r6, [r7, #268]	@ 0x10c
 8022534:	4604      	mov	r4, r0
 8022536:	4630      	mov	r0, r6
 8022538:	f7f4 fdc0 	bl	80170bc <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 802253c:	4601      	mov	r1, r0
 802253e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8022542:	4630      	mov	r0, r6
 8022544:	f8ad 600e 	strh.w	r6, [sp, #14]
 8022548:	f7f5 fa2a 	bl	80179a0 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 802254c:	f88d 000c 	strb.w	r0, [sp, #12]
 8022550:	4608      	mov	r0, r1
 8022552:	f7f5 fa0b 	bl	801796c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8022556:	b2c0      	uxtb	r0, r0
 8022558:	f88d 0010 	strb.w	r0, [sp, #16]
 802255c:	f88d 0014 	strb.w	r0, [sp, #20]
 8022560:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8022564:	f8ad 300a 	strh.w	r3, [sp, #10]
 8022568:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 802256c:	4e22      	ldr	r6, [pc, #136]	@ (80225f8 <BnrgmHealthModelPublish_TimerCallback+0xe8>)
 802256e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8022572:	b36c      	cbz	r4, 80225d0 <BnrgmHealthModelPublish_TimerCallback+0xc0>
 8022574:	8873      	ldrh	r3, [r6, #2]
 8022576:	f8a4 3009 	strh.w	r3, [r4, #9]
 802257a:	682b      	ldr	r3, [r5, #0]
 802257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802257e:	2200      	movs	r2, #0
 8022580:	2104      	movs	r1, #4
 8022582:	7021      	strb	r1, [r4, #0]
 8022584:	7062      	strb	r2, [r4, #1]
 8022586:	70a2      	strb	r2, [r4, #2]
 8022588:	70e2      	strb	r2, [r4, #3]
 802258a:	7222      	strb	r2, [r4, #8]
 802258c:	f103 014b 	add.w	r1, r3, #75	@ 0x4b
 8022590:	f103 0753 	add.w	r7, r3, #83	@ 0x53
 8022594:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8022598:	b128      	cbz	r0, 80225a6 <BnrgmHealthModelPublish_TimerCallback+0x96>
 802259a:	eb04 0c02 	add.w	ip, r4, r2
 802259e:	3201      	adds	r2, #1
 80225a0:	f88c 000b 	strb.w	r0, [ip, #11]
 80225a4:	b2d2      	uxtb	r2, r2
 80225a6:	428f      	cmp	r7, r1
 80225a8:	d1f4      	bne.n	8022594 <BnrgmHealthModelPublish_TimerCallback+0x84>
 80225aa:	3203      	adds	r2, #3
 80225ac:	f8c4 20a3 	str.w	r2, [r4, #163]	@ 0xa3
 80225b0:	f893 1063 	ldrb.w	r1, [r3, #99]	@ 0x63
 80225b4:	3900      	subs	r1, #0
 80225b6:	bf18      	it	ne
 80225b8:	2101      	movne	r1, #1
 80225ba:	0149      	lsls	r1, r1, #5
 80225bc:	4623      	mov	r3, r4
 80225be:	466a      	mov	r2, sp
 80225c0:	f041 0101 	orr.w	r1, r1, #1
 80225c4:	4628      	mov	r0, r5
 80225c6:	f7fd fbbd 	bl	801fd44 <MobleModelSendPacket>
 80225ca:	4620      	mov	r0, r4
 80225cc:	f7f5 fe36 	bl	801823c <MobleMemFree>
 80225d0:	f896 3024 	ldrb.w	r3, [r6, #36]	@ 0x24
 80225d4:	3b01      	subs	r3, #1
 80225d6:	b2db      	uxtb	r3, r3
 80225d8:	f886 3024 	strb.w	r3, [r6, #36]	@ 0x24
 80225dc:	b93b      	cbnz	r3, 80225ee <BnrgmHealthModelPublish_TimerCallback+0xde>
 80225de:	682b      	ldr	r3, [r5, #0]
 80225e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80225e2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80225e4:	f7f2 fcb6 	bl	8014f54 <MoblePalTimerDestroy>
 80225e8:	2308      	movs	r3, #8
 80225ea:	f886 3024 	strb.w	r3, [r6, #36]	@ 0x24
 80225ee:	b008      	add	sp, #32
 80225f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80225f4:	20000324 	.word	0x20000324
 80225f8:	20000008 	.word	0x20000008

080225fc <BnrgmHealthModel_ProcessPeriodGet>:
 80225fc:	b430      	push	{r4, r5}
 80225fe:	460a      	mov	r2, r1
 8022600:	6801      	ldr	r1, [r0, #0]
 8022602:	9b03      	ldr	r3, [sp, #12]
 8022604:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8022606:	2537      	movs	r5, #55	@ 0x37
 8022608:	f891 106d 	ldrb.w	r1, [r1, #109]	@ 0x6d
 802260c:	7219      	strb	r1, [r3, #8]
 802260e:	2400      	movs	r4, #0
 8022610:	701d      	strb	r5, [r3, #0]
 8022612:	2101      	movs	r1, #1
 8022614:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 8022618:	705d      	strb	r5, [r3, #1]
 802261a:	709c      	strb	r4, [r3, #2]
 802261c:	70dc      	strb	r4, [r3, #3]
 802261e:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 8022622:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 8022626:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 802262a:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 802262e:	bc30      	pop	{r4, r5}
 8022630:	f7fd bb88 	b.w	801fd44 <MobleModelSendPacket>

08022634 <BnrgmHealthModel_ProcessAttentionGet>:
 8022634:	b430      	push	{r4, r5}
 8022636:	460a      	mov	r2, r1
 8022638:	6801      	ldr	r1, [r0, #0]
 802263a:	9b03      	ldr	r3, [sp, #12]
 802263c:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 802263e:	2507      	movs	r5, #7
 8022640:	f891 106e 	ldrb.w	r1, [r1, #110]	@ 0x6e
 8022644:	7219      	strb	r1, [r3, #8]
 8022646:	2400      	movs	r4, #0
 8022648:	701d      	strb	r5, [r3, #0]
 802264a:	2101      	movs	r1, #1
 802264c:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 8022650:	705d      	strb	r5, [r3, #1]
 8022652:	709c      	strb	r4, [r3, #2]
 8022654:	70dc      	strb	r4, [r3, #3]
 8022656:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 802265a:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 802265e:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 8022662:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 8022666:	bc30      	pop	{r4, r5}
 8022668:	f7fd bb6c 	b.w	801fd44 <MobleModelSendPacket>

0802266c <MobleConfigModel_ProcessRelayGet>:
 802266c:	b4f0      	push	{r4, r5, r6, r7}
 802266e:	460a      	mov	r2, r1
 8022670:	6801      	ldr	r1, [r0, #0]
 8022672:	9b05      	ldr	r3, [sp, #20]
 8022674:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8022676:	7b61      	ldrb	r1, [r4, #13]
 8022678:	7b25      	ldrb	r5, [r4, #12]
 802267a:	7c66      	ldrb	r6, [r4, #17]
 802267c:	721e      	strb	r6, [r3, #8]
 802267e:	2728      	movs	r7, #40	@ 0x28
 8022680:	2400      	movs	r4, #0
 8022682:	ea45 05c1 	orr.w	r5, r5, r1, lsl #3
 8022686:	701f      	strb	r7, [r3, #0]
 8022688:	2102      	movs	r1, #2
 802268a:	f06f 077f 	mvn.w	r7, #127	@ 0x7f
 802268e:	705f      	strb	r7, [r3, #1]
 8022690:	709c      	strb	r4, [r3, #2]
 8022692:	70dc      	strb	r4, [r3, #3]
 8022694:	725d      	strb	r5, [r3, #9]
 8022696:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 802269a:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 802269e:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 80226a2:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 80226a6:	2101      	movs	r1, #1
 80226a8:	bcf0      	pop	{r4, r5, r6, r7}
 80226aa:	f7fd bb4b 	b.w	801fd44 <MobleModelSendPacket>
	...

080226b0 <MobleConfigModel_ProcessNodeIdentityGet>:
 80226b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80226b4:	4607      	mov	r7, r0
 80226b6:	4618      	mov	r0, r3
 80226b8:	f7f2 fa63 	bl	8014b82 <MobleConfigModelGetNetIdx>
 80226bc:	4688      	mov	r8, r1
 80226be:	4606      	mov	r6, r0
 80226c0:	f7f3 fdda 	bl	8016278 <MoblePalCryptoHasNetworkKey>
 80226c4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80226c6:	4605      	mov	r5, r0
 80226c8:	b170      	cbz	r0, 80226e8 <MobleConfigModel_ProcessNodeIdentityGet+0x38>
 80226ca:	4630      	mov	r0, r6
 80226cc:	f7f3 fe2e 	bl	801632c <MoblePalCryptoGetNodeIdntyState>
 80226d0:	2300      	movs	r3, #0
 80226d2:	4605      	mov	r5, r0
 80226d4:	f8ad 6006 	strh.w	r6, [sp, #6]
 80226d8:	b947      	cbnz	r7, 80226ec <MobleConfigModel_ProcessNodeIdentityGet+0x3c>
 80226da:	4b16      	ldr	r3, [pc, #88]	@ (8022734 <MobleConfigModel_ProcessNodeIdentityGet+0x84>)
 80226dc:	4a16      	ldr	r2, [pc, #88]	@ (8022738 <MobleConfigModel_ProcessNodeIdentityGet+0x88>)
 80226de:	4817      	ldr	r0, [pc, #92]	@ (802273c <MobleConfigModel_ProcessNodeIdentityGet+0x8c>)
 80226e0:	f640 113a 	movw	r1, #2362	@ 0x93a
 80226e4:	f003 fad6 	bl	8025c94 <__assert_func>
 80226e8:	2304      	movs	r3, #4
 80226ea:	e7f3      	b.n	80226d4 <MobleConfigModel_ProcessNodeIdentityGet+0x24>
 80226ec:	2248      	movs	r2, #72	@ 0x48
 80226ee:	2600      	movs	r6, #0
 80226f0:	7022      	strb	r2, [r4, #0]
 80226f2:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80226f6:	7062      	strb	r2, [r4, #1]
 80226f8:	7223      	strb	r3, [r4, #8]
 80226fa:	f104 0209 	add.w	r2, r4, #9
 80226fe:	f10d 0306 	add.w	r3, sp, #6
 8022702:	70a6      	strb	r6, [r4, #2]
 8022704:	70e6      	strb	r6, [r4, #3]
 8022706:	2101      	movs	r1, #1
 8022708:	4630      	mov	r0, r6
 802270a:	f7f2 fa41 	bl	8014b90 <MobleConfigModelPutKeyIdxs>
 802270e:	2304      	movs	r3, #4
 8022710:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8022714:	4642      	mov	r2, r8
 8022716:	4623      	mov	r3, r4
 8022718:	4638      	mov	r0, r7
 802271a:	72e5      	strb	r5, [r4, #11]
 802271c:	f884 60a4 	strb.w	r6, [r4, #164]	@ 0xa4
 8022720:	f884 60a5 	strb.w	r6, [r4, #165]	@ 0xa5
 8022724:	f884 60a6 	strb.w	r6, [r4, #166]	@ 0xa6
 8022728:	b002      	add	sp, #8
 802272a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802272e:	f7fd bb09 	b.w	801fd44 <MobleModelSendPacket>
 8022732:	bf00      	nop
 8022734:	0802e501 	.word	0x0802e501
 8022738:	0802d804 	.word	0x0802d804
 802273c:	0802e513 	.word	0x0802e513

08022740 <MobleConfigModel_ProcessKeyRefreshPhaseGet>:
 8022740:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8022744:	4606      	mov	r6, r0
 8022746:	4618      	mov	r0, r3
 8022748:	f7f2 fa1b 	bl	8014b82 <MobleConfigModelGetNetIdx>
 802274c:	460f      	mov	r7, r1
 802274e:	4601      	mov	r1, r0
 8022750:	f7f5 f90c 	bl	801796c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8022754:	6833      	ldr	r3, [r6, #0]
 8022756:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802275a:	f8ad 1006 	strh.w	r1, [sp, #6]
 802275e:	1e02      	subs	r2, r0, #0
 8022760:	bfb8      	it	lt
 8022762:	2200      	movlt	r2, #0
 8022764:	4413      	add	r3, r2
 8022766:	f04f 0500 	mov.w	r5, #0
 802276a:	f893 8014 	ldrb.w	r8, [r3, #20]
 802276e:	70a5      	strb	r5, [r4, #2]
 8022770:	f04f 0317 	mov.w	r3, #23
 8022774:	bfb4      	ite	lt
 8022776:	f04f 0c04 	movlt.w	ip, #4
 802277a:	f04f 0c00 	movge.w	ip, #0
 802277e:	7023      	strb	r3, [r4, #0]
 8022780:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8022784:	7063      	strb	r3, [r4, #1]
 8022786:	f104 0209 	add.w	r2, r4, #9
 802278a:	f10d 0306 	add.w	r3, sp, #6
 802278e:	70e5      	strb	r5, [r4, #3]
 8022790:	f884 c008 	strb.w	ip, [r4, #8]
 8022794:	2101      	movs	r1, #1
 8022796:	4628      	mov	r0, r5
 8022798:	f7f2 f9fa 	bl	8014b90 <MobleConfigModelPutKeyIdxs>
 802279c:	2304      	movs	r3, #4
 802279e:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 80227a2:	463a      	mov	r2, r7
 80227a4:	4623      	mov	r3, r4
 80227a6:	4630      	mov	r0, r6
 80227a8:	f884 800b 	strb.w	r8, [r4, #11]
 80227ac:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 80227b0:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 80227b4:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 80227b8:	b002      	add	sp, #8
 80227ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80227be:	f7fd bac1 	b.w	801fd44 <MobleModelSendPacket>

080227c2 <MobleConfigModel_ProcessDefaultTTLGet>:
 80227c2:	b430      	push	{r4, r5}
 80227c4:	460a      	mov	r2, r1
 80227c6:	6801      	ldr	r1, [r0, #0]
 80227c8:	9b03      	ldr	r3, [sp, #12]
 80227ca:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80227cc:	250e      	movs	r5, #14
 80227ce:	7a49      	ldrb	r1, [r1, #9]
 80227d0:	7219      	strb	r1, [r3, #8]
 80227d2:	2400      	movs	r4, #0
 80227d4:	701d      	strb	r5, [r3, #0]
 80227d6:	2101      	movs	r1, #1
 80227d8:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 80227dc:	705d      	strb	r5, [r3, #1]
 80227de:	709c      	strb	r4, [r3, #2]
 80227e0:	70dc      	strb	r4, [r3, #3]
 80227e2:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 80227e6:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 80227ea:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 80227ee:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 80227f2:	bc30      	pop	{r4, r5}
 80227f4:	f7fd baa6 	b.w	801fd44 <MobleModelSendPacket>

080227f8 <MobleConfigModel_ProcessBeaconGet>:
 80227f8:	b570      	push	{r4, r5, r6, lr}
 80227fa:	460a      	mov	r2, r1
 80227fc:	4910      	ldr	r1, [pc, #64]	@ (8022840 <MobleConfigModel_ProcessBeaconGet+0x48>)
 80227fe:	9b05      	ldr	r3, [sp, #20]
 8022800:	f891 10ba 	ldrb.w	r1, [r1, #186]	@ 0xba
 8022804:	b930      	cbnz	r0, 8022814 <MobleConfigModel_ProcessBeaconGet+0x1c>
 8022806:	4b0f      	ldr	r3, [pc, #60]	@ (8022844 <MobleConfigModel_ProcessBeaconGet+0x4c>)
 8022808:	4a0f      	ldr	r2, [pc, #60]	@ (8022848 <MobleConfigModel_ProcessBeaconGet+0x50>)
 802280a:	4810      	ldr	r0, [pc, #64]	@ (802284c <MobleConfigModel_ProcessBeaconGet+0x54>)
 802280c:	f240 7165 	movw	r1, #1893	@ 0x765
 8022810:	f003 fa40 	bl	8025c94 <__assert_func>
 8022814:	250b      	movs	r5, #11
 8022816:	2400      	movs	r4, #0
 8022818:	701d      	strb	r5, [r3, #0]
 802281a:	7219      	strb	r1, [r3, #8]
 802281c:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 8022820:	2101      	movs	r1, #1
 8022822:	705d      	strb	r5, [r3, #1]
 8022824:	709c      	strb	r4, [r3, #2]
 8022826:	70dc      	strb	r4, [r3, #3]
 8022828:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 802282c:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 8022830:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 8022834:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 8022838:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802283c:	f7fd ba82 	b.w	801fd44 <MobleModelSendPacket>
 8022840:	20000324 	.word	0x20000324
 8022844:	0802e501 	.word	0x0802e501
 8022848:	0802db47 	.word	0x0802db47
 802284c:	0802e513 	.word	0x0802e513

08022850 <MobleBluemeshModelReadElement>:
 8022850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022854:	f04f 0800 	mov.w	r8, #0
 8022858:	b08c      	sub	sp, #48	@ 0x30
 802285a:	4607      	mov	r7, r0
 802285c:	460d      	mov	r5, r1
 802285e:	4616      	mov	r6, r2
 8022860:	4641      	mov	r1, r8
 8022862:	2228      	movs	r2, #40	@ 0x28
 8022864:	a802      	add	r0, sp, #8
 8022866:	461c      	mov	r4, r3
 8022868:	f8cd 8000 	str.w	r8, [sp]
 802286c:	f88d 8004 	strb.w	r8, [sp, #4]
 8022870:	f004 f9ae 	bl	8026bd0 <memset>
 8022874:	b38f      	cbz	r7, 80228da <MobleBluemeshModelReadElement+0x8a>
 8022876:	f004 030f 	and.w	r3, r4, #15
 802287a:	f443 5343 	orr.w	r3, r3, #12480	@ 0x30c0
 802287e:	f006 0601 	and.w	r6, r6, #1
 8022882:	f043 0310 	orr.w	r3, r3, #16
 8022886:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 802288a:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
 802288e:	f10d 0003 	add.w	r0, sp, #3
 8022892:	f8ad 3000 	strh.w	r3, [sp]
 8022896:	f88d 8002 	strb.w	r8, [sp, #2]
 802289a:	f7f5 fdf3 	bl	8018484 <MobleOutputStreamPutArray>
 802289e:	88ab      	ldrh	r3, [r5, #4]
 80228a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80228a4:	88eb      	ldrh	r3, [r5, #6]
 80228a6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80228aa:	7aeb      	ldrb	r3, [r5, #11]
 80228ac:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80228b0:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 80228b4:	7a6b      	ldrb	r3, [r5, #9]
 80228b6:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80228ba:	f10d 0303 	add.w	r3, sp, #3
 80228be:	466c      	mov	r4, sp
 80228c0:	4418      	add	r0, r3
 80228c2:	1b03      	subs	r3, r0, r4
 80228c4:	4622      	mov	r2, r4
 80228c6:	a902      	add	r1, sp, #8
 80228c8:	4638      	mov	r0, r7
 80228ca:	f7fd f9ad 	bl	801fc28 <MobleApplicationSendPacket>
 80228ce:	2801      	cmp	r0, #1
 80228d0:	bf98      	it	ls
 80228d2:	4640      	movls	r0, r8
 80228d4:	b00c      	add	sp, #48	@ 0x30
 80228d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80228da:	2003      	movs	r0, #3
 80228dc:	e7fa      	b.n	80228d4 <MobleBluemeshModelReadElement+0x84>
	...

080228e0 <MobleLibraryRequestData>:
 80228e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80228e2:	4e0e      	ldr	r6, [pc, #56]	@ (802291c <MobleLibraryRequestData+0x3c>)
 80228e4:	4605      	mov	r5, r0
 80228e6:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	@ 0x6f0
 80228ea:	b1a8      	cbz	r0, 8022918 <MobleLibraryRequestData+0x38>
 80228ec:	88ac      	ldrh	r4, [r5, #4]
 80228ee:	b19c      	cbz	r4, 8022918 <MobleLibraryRequestData+0x38>
 80228f0:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 80228f4:	b2a4      	uxth	r4, r4
 80228f6:	2cfb      	cmp	r4, #251	@ 0xfb
 80228f8:	d90e      	bls.n	8022918 <MobleLibraryRequestData+0x38>
 80228fa:	2a10      	cmp	r2, #16
 80228fc:	d80c      	bhi.n	8022918 <MobleLibraryRequestData+0x38>
 80228fe:	f896 46b4 	ldrb.w	r4, [r6, #1716]	@ 0x6b4
 8022902:	b14c      	cbz	r4, 8022918 <MobleLibraryRequestData+0x38>
 8022904:	9c06      	ldr	r4, [sp, #24]
 8022906:	e9cd 3400 	strd	r3, r4, [sp]
 802290a:	4613      	mov	r3, r2
 802290c:	460a      	mov	r2, r1
 802290e:	4629      	mov	r1, r5
 8022910:	f7ff ff9e 	bl	8022850 <MobleBluemeshModelReadElement>
 8022914:	b002      	add	sp, #8
 8022916:	bd70      	pop	{r4, r5, r6, pc}
 8022918:	2002      	movs	r0, #2
 802291a:	e7fb      	b.n	8022914 <MobleLibraryRequestData+0x34>
 802291c:	20002514 	.word	0x20002514

08022920 <BLEMesh_ReadRemoteData>:
 8022920:	b507      	push	{r0, r1, r2, lr}
 8022922:	9300      	str	r3, [sp, #0]
 8022924:	4613      	mov	r3, r2
 8022926:	460a      	mov	r2, r1
 8022928:	2101      	movs	r1, #1
 802292a:	f7ff ffd9 	bl	80228e0 <MobleLibraryRequestData>
 802292e:	b003      	add	sp, #12
 8022930:	f85d fb04 	ldr.w	pc, [sp], #4

08022934 <MobleBluemeshModelWriteElement>:
 8022934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022938:	461d      	mov	r5, r3
 802293a:	4b2c      	ldr	r3, [pc, #176]	@ (80229ec <MobleBluemeshModelWriteElement+0xb8>)
 802293c:	f8b3 994e 	ldrh.w	r9, [r3, #2382]	@ 0x94e
 8022940:	b08b      	sub	sp, #44	@ 0x2c
 8022942:	4606      	mov	r6, r0
 8022944:	4648      	mov	r0, r9
 8022946:	4688      	mov	r8, r1
 8022948:	4617      	mov	r7, r2
 802294a:	e9dd ab15 	ldrd	sl, fp, [sp, #84]	@ 0x54
 802294e:	f7f5 fbeb 	bl	8018128 <MobleMemAlloc>
 8022952:	2228      	movs	r2, #40	@ 0x28
 8022954:	4604      	mov	r4, r0
 8022956:	2100      	movs	r1, #0
 8022958:	4668      	mov	r0, sp
 802295a:	f004 f939 	bl	8026bd0 <memset>
 802295e:	2c00      	cmp	r4, #0
 8022960:	d042      	beq.n	80229e8 <MobleBluemeshModelWriteElement+0xb4>
 8022962:	b14e      	cbz	r6, 8022978 <MobleBluemeshModelWriteElement+0x44>
 8022964:	f1ba 0f00 	cmp.w	sl, #0
 8022968:	d006      	beq.n	8022978 <MobleBluemeshModelWriteElement+0x44>
 802296a:	f1bb 0f00 	cmp.w	fp, #0
 802296e:	d003      	beq.n	8022978 <MobleBluemeshModelWriteElement+0x44>
 8022970:	f1a9 0904 	sub.w	r9, r9, #4
 8022974:	45d9      	cmp	r9, fp
 8022976:	d207      	bcs.n	8022988 <MobleBluemeshModelWriteElement+0x54>
 8022978:	4620      	mov	r0, r4
 802297a:	f7f5 fc5f 	bl	801823c <MobleMemFree>
 802297e:	2503      	movs	r5, #3
 8022980:	4628      	mov	r0, r5
 8022982:	b00b      	add	sp, #44	@ 0x2c
 8022984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022988:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802298c:	016d      	lsls	r5, r5, #5
 802298e:	f003 030f 	and.w	r3, r3, #15
 8022992:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8022996:	f005 0520 	and.w	r5, r5, #32
 802299a:	431d      	orrs	r5, r3
 802299c:	7025      	strb	r5, [r4, #0]
 802299e:	2330      	movs	r3, #48	@ 0x30
 80229a0:	1ce5      	adds	r5, r4, #3
 80229a2:	f04f 0900 	mov.w	r9, #0
 80229a6:	7063      	strb	r3, [r4, #1]
 80229a8:	465a      	mov	r2, fp
 80229aa:	4651      	mov	r1, sl
 80229ac:	4628      	mov	r0, r5
 80229ae:	f884 9002 	strb.w	r9, [r4, #2]
 80229b2:	f7f5 fd67 	bl	8018484 <MobleOutputStreamPutArray>
 80229b6:	6833      	ldr	r3, [r6, #0]
 80229b8:	f8ad 8016 	strh.w	r8, [sp, #22]
 80229bc:	885b      	ldrh	r3, [r3, #2]
 80229be:	4428      	add	r0, r5
 80229c0:	441f      	add	r7, r3
 80229c2:	4622      	mov	r2, r4
 80229c4:	1b03      	subs	r3, r0, r4
 80229c6:	4669      	mov	r1, sp
 80229c8:	4630      	mov	r0, r6
 80229ca:	f8ad 7014 	strh.w	r7, [sp, #20]
 80229ce:	f7fd f92b 	bl	801fc28 <MobleApplicationSendPacket>
 80229d2:	4605      	mov	r5, r0
 80229d4:	2d01      	cmp	r5, #1
 80229d6:	4620      	mov	r0, r4
 80229d8:	d902      	bls.n	80229e0 <MobleBluemeshModelWriteElement+0xac>
 80229da:	f7f5 fc2f 	bl	801823c <MobleMemFree>
 80229de:	e7cf      	b.n	8022980 <MobleBluemeshModelWriteElement+0x4c>
 80229e0:	f7f5 fc2c 	bl	801823c <MobleMemFree>
 80229e4:	464d      	mov	r5, r9
 80229e6:	e7cb      	b.n	8022980 <MobleBluemeshModelWriteElement+0x4c>
 80229e8:	4625      	mov	r5, r4
 80229ea:	e7c9      	b.n	8022980 <MobleBluemeshModelWriteElement+0x4c>
 80229ec:	2000141c 	.word	0x2000141c

080229f0 <MobleLibrarySendData>:
 80229f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80229f2:	4f10      	ldr	r7, [pc, #64]	@ (8022a34 <MobleLibrarySendData+0x44>)
 80229f4:	b085      	sub	sp, #20
 80229f6:	4604      	mov	r4, r0
 80229f8:	f8d7 06f0 	ldr.w	r0, [r7, #1776]	@ 0x6f0
 80229fc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80229fe:	b1b8      	cbz	r0, 8022a30 <MobleLibrarySendData+0x40>
 8022a00:	b1b3      	cbz	r3, 8022a30 <MobleLibrarySendData+0x40>
 8022a02:	b1ae      	cbz	r6, 8022a30 <MobleLibrarySendData+0x40>
 8022a04:	b1a4      	cbz	r4, 8022a30 <MobleLibrarySendData+0x40>
 8022a06:	f504 7580 	add.w	r5, r4, #256	@ 0x100
 8022a0a:	b2ad      	uxth	r5, r5
 8022a0c:	2dfb      	cmp	r5, #251	@ 0xfb
 8022a0e:	d90f      	bls.n	8022a30 <MobleLibrarySendData+0x40>
 8022a10:	2a10      	cmp	r2, #16
 8022a12:	d80d      	bhi.n	8022a30 <MobleLibrarySendData+0x40>
 8022a14:	f897 56b4 	ldrb.w	r5, [r7, #1716]	@ 0x6b4
 8022a18:	b155      	cbz	r5, 8022a30 <MobleLibrarySendData+0x40>
 8022a1a:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8022a1e:	9200      	str	r2, [sp, #0]
 8022a20:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8022a24:	460a      	mov	r2, r1
 8022a26:	4621      	mov	r1, r4
 8022a28:	f7ff ff84 	bl	8022934 <MobleBluemeshModelWriteElement>
 8022a2c:	b005      	add	sp, #20
 8022a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022a30:	2002      	movs	r0, #2
 8022a32:	e7fb      	b.n	8022a2c <MobleLibrarySendData+0x3c>
 8022a34:	20002514 	.word	0x20002514

08022a38 <MobleBluemeshModelWritePublishElement>:
 8022a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a3c:	461e      	mov	r6, r3
 8022a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8022b28 <MobleBluemeshModelWritePublishElement+0xf0>)
 8022a40:	f8b3 a94e 	ldrh.w	sl, [r3, #2382]	@ 0x94e
 8022a44:	b08d      	sub	sp, #52	@ 0x34
 8022a46:	4607      	mov	r7, r0
 8022a48:	4650      	mov	r0, sl
 8022a4a:	4689      	mov	r9, r1
 8022a4c:	4615      	mov	r5, r2
 8022a4e:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 8022a52:	f7f5 fb69 	bl	8018128 <MobleMemAlloc>
 8022a56:	f8d7 b000 	ldr.w	fp, [r7]
 8022a5a:	464a      	mov	r2, r9
 8022a5c:	4604      	mov	r4, r0
 8022a5e:	4629      	mov	r1, r5
 8022a60:	f89b 001c 	ldrb.w	r0, [fp, #28]
 8022a64:	f7f4 ff3e 	bl	80178e4 <MoblePalCrypto_GetModelPublicationParameters>
 8022a68:	2228      	movs	r2, #40	@ 0x28
 8022a6a:	4681      	mov	r9, r0
 8022a6c:	2100      	movs	r1, #0
 8022a6e:	a802      	add	r0, sp, #8
 8022a70:	f004 f8ae 	bl	8026bd0 <memset>
 8022a74:	2c00      	cmp	r4, #0
 8022a76:	d052      	beq.n	8022b1e <MobleBluemeshModelWritePublishElement+0xe6>
 8022a78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022a7a:	b133      	cbz	r3, 8022a8a <MobleBluemeshModelWritePublishElement+0x52>
 8022a7c:	f1b8 0f00 	cmp.w	r8, #0
 8022a80:	d003      	beq.n	8022a8a <MobleBluemeshModelWritePublishElement+0x52>
 8022a82:	f1aa 0304 	sub.w	r3, sl, #4
 8022a86:	4543      	cmp	r3, r8
 8022a88:	d207      	bcs.n	8022a9a <MobleBluemeshModelWritePublishElement+0x62>
 8022a8a:	4620      	mov	r0, r4
 8022a8c:	f7f5 fbd6 	bl	801823c <MobleMemFree>
 8022a90:	2503      	movs	r5, #3
 8022a92:	4628      	mov	r0, r5
 8022a94:	b00d      	add	sp, #52	@ 0x34
 8022a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a9a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8022a9e:	9301      	str	r3, [sp, #4]
 8022aa0:	2b00      	cmp	r3, #0
 8022aa2:	d03e      	beq.n	8022b22 <MobleBluemeshModelWritePublishElement+0xea>
 8022aa4:	f8b9 9006 	ldrh.w	r9, [r9, #6]
 8022aa8:	4648      	mov	r0, r9
 8022aaa:	f7f4 fb07 	bl	80170bc <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 8022aae:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8022ab2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8022ab4:	1aad      	subs	r5, r5, r2
 8022ab6:	f89d 2058 	ldrb.w	r2, [sp, #88]	@ 0x58
 8022aba:	0176      	lsls	r6, r6, #5
 8022abc:	f002 020f 	and.w	r2, r2, #15
 8022ac0:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 8022ac4:	f006 0620 	and.w	r6, r6, #32
 8022ac8:	4316      	orrs	r6, r2
 8022aca:	7026      	strb	r6, [r4, #0]
 8022acc:	2230      	movs	r2, #48	@ 0x30
 8022ace:	2600      	movs	r6, #0
 8022ad0:	4682      	mov	sl, r0
 8022ad2:	7062      	strb	r2, [r4, #1]
 8022ad4:	1ce0      	adds	r0, r4, #3
 8022ad6:	4642      	mov	r2, r8
 8022ad8:	70a6      	strb	r6, [r4, #2]
 8022ada:	4680      	mov	r8, r0
 8022adc:	f7f5 fcd2 	bl	8018484 <MobleOutputStreamPutArray>
 8022ae0:	683a      	ldr	r2, [r7, #0]
 8022ae2:	9b01      	ldr	r3, [sp, #4]
 8022ae4:	8852      	ldrh	r2, [r2, #2]
 8022ae6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022aea:	4440      	add	r0, r8
 8022aec:	b2ed      	uxtb	r5, r5
 8022aee:	4415      	add	r5, r2
 8022af0:	1b03      	subs	r3, r0, r4
 8022af2:	4622      	mov	r2, r4
 8022af4:	a902      	add	r1, sp, #8
 8022af6:	4638      	mov	r0, r7
 8022af8:	f8ad 501c 	strh.w	r5, [sp, #28]
 8022afc:	f8ad a026 	strh.w	sl, [sp, #38]	@ 0x26
 8022b00:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8022b04:	f7fd f890 	bl	801fc28 <MobleApplicationSendPacket>
 8022b08:	4605      	mov	r5, r0
 8022b0a:	2d01      	cmp	r5, #1
 8022b0c:	4620      	mov	r0, r4
 8022b0e:	d902      	bls.n	8022b16 <MobleBluemeshModelWritePublishElement+0xde>
 8022b10:	f7f5 fb94 	bl	801823c <MobleMemFree>
 8022b14:	e7bd      	b.n	8022a92 <MobleBluemeshModelWritePublishElement+0x5a>
 8022b16:	f7f5 fb91 	bl	801823c <MobleMemFree>
 8022b1a:	4635      	mov	r5, r6
 8022b1c:	e7b9      	b.n	8022a92 <MobleBluemeshModelWritePublishElement+0x5a>
 8022b1e:	4625      	mov	r5, r4
 8022b20:	e7b7      	b.n	8022a92 <MobleBluemeshModelWritePublishElement+0x5a>
 8022b22:	2502      	movs	r5, #2
 8022b24:	e7b5      	b.n	8022a92 <MobleBluemeshModelWritePublishElement+0x5a>
 8022b26:	bf00      	nop
 8022b28:	2000141c 	.word	0x2000141c

08022b2c <MobleLibrarySendRemoteData>:
 8022b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022b2e:	4f10      	ldr	r7, [pc, #64]	@ (8022b70 <MobleLibrarySendRemoteData+0x44>)
 8022b30:	b085      	sub	sp, #20
 8022b32:	4604      	mov	r4, r0
 8022b34:	f8d7 06f0 	ldr.w	r0, [r7, #1776]	@ 0x6f0
 8022b38:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8022b3a:	b1b8      	cbz	r0, 8022b6c <MobleLibrarySendRemoteData+0x40>
 8022b3c:	b1b3      	cbz	r3, 8022b6c <MobleLibrarySendRemoteData+0x40>
 8022b3e:	b1ae      	cbz	r6, 8022b6c <MobleLibrarySendRemoteData+0x40>
 8022b40:	b1a1      	cbz	r1, 8022b6c <MobleLibrarySendRemoteData+0x40>
 8022b42:	f501 7580 	add.w	r5, r1, #256	@ 0x100
 8022b46:	b2ad      	uxth	r5, r5
 8022b48:	2dfb      	cmp	r5, #251	@ 0xfb
 8022b4a:	d90f      	bls.n	8022b6c <MobleLibrarySendRemoteData+0x40>
 8022b4c:	2a10      	cmp	r2, #16
 8022b4e:	d80d      	bhi.n	8022b6c <MobleLibrarySendRemoteData+0x40>
 8022b50:	f897 56b4 	ldrb.w	r5, [r7, #1716]	@ 0x6b4
 8022b54:	b155      	cbz	r5, 8022b6c <MobleLibrarySendRemoteData+0x40>
 8022b56:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8022b5a:	9200      	str	r2, [sp, #0]
 8022b5c:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8022b60:	460a      	mov	r2, r1
 8022b62:	4621      	mov	r1, r4
 8022b64:	f7ff ff68 	bl	8022a38 <MobleBluemeshModelWritePublishElement>
 8022b68:	b005      	add	sp, #20
 8022b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022b6c:	2002      	movs	r0, #2
 8022b6e:	e7fb      	b.n	8022b68 <MobleLibrarySendRemoteData+0x3c>
 8022b70:	20002514 	.word	0x20002514

08022b74 <MobleBluemeshModelResponse>:
 8022b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b78:	b08b      	sub	sp, #44	@ 0x2c
 8022b7a:	e9dd 9614 	ldrd	r9, r6, [sp, #80]	@ 0x50
 8022b7e:	4680      	mov	r8, r0
 8022b80:	468a      	mov	sl, r1
 8022b82:	4617      	mov	r7, r2
 8022b84:	2100      	movs	r1, #0
 8022b86:	2228      	movs	r2, #40	@ 0x28
 8022b88:	4668      	mov	r0, sp
 8022b8a:	461d      	mov	r5, r3
 8022b8c:	f004 f820 	bl	8026bd0 <memset>
 8022b90:	f1b9 0f00 	cmp.w	r9, #0
 8022b94:	d100      	bne.n	8022b98 <MobleBluemeshModelResponse+0x24>
 8022b96:	b98e      	cbnz	r6, 8022bbc <MobleBluemeshModelResponse+0x48>
 8022b98:	4b21      	ldr	r3, [pc, #132]	@ (8022c20 <MobleBluemeshModelResponse+0xac>)
 8022b9a:	f8b3 b94e 	ldrh.w	fp, [r3, #2382]	@ 0x94e
 8022b9e:	4658      	mov	r0, fp
 8022ba0:	f7f5 fac2 	bl	8018128 <MobleMemAlloc>
 8022ba4:	4604      	mov	r4, r0
 8022ba6:	b3a8      	cbz	r0, 8022c14 <MobleBluemeshModelResponse+0xa0>
 8022ba8:	f1b8 0f00 	cmp.w	r8, #0
 8022bac:	d003      	beq.n	8022bb6 <MobleBluemeshModelResponse+0x42>
 8022bae:	f1ab 0b03 	sub.w	fp, fp, #3
 8022bb2:	45b3      	cmp	fp, r6
 8022bb4:	d204      	bcs.n	8022bc0 <MobleBluemeshModelResponse+0x4c>
 8022bb6:	4620      	mov	r0, r4
 8022bb8:	f7f5 fb40 	bl	801823c <MobleMemFree>
 8022bbc:	2503      	movs	r5, #3
 8022bbe:	e025      	b.n	8022c0c <MobleBluemeshModelResponse+0x98>
 8022bc0:	f005 050f 	and.w	r5, r5, #15
 8022bc4:	f065 052f 	orn	r5, r5, #47	@ 0x2f
 8022bc8:	7005      	strb	r5, [r0, #0]
 8022bca:	f8a0 a001 	strh.w	sl, [r0, #1]
 8022bce:	f1b9 0f00 	cmp.w	r9, #0
 8022bd2:	d005      	beq.n	8022be0 <MobleBluemeshModelResponse+0x6c>
 8022bd4:	b126      	cbz	r6, 8022be0 <MobleBluemeshModelResponse+0x6c>
 8022bd6:	4632      	mov	r2, r6
 8022bd8:	4649      	mov	r1, r9
 8022bda:	3003      	adds	r0, #3
 8022bdc:	f7f5 fc52 	bl	8018484 <MobleOutputStreamPutArray>
 8022be0:	88fb      	ldrh	r3, [r7, #6]
 8022be2:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022be6:	88bb      	ldrh	r3, [r7, #4]
 8022be8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8022bec:	897b      	ldrh	r3, [r7, #10]
 8022bee:	ba5b      	rev16	r3, r3
 8022bf0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022bf4:	4622      	mov	r2, r4
 8022bf6:	1cf3      	adds	r3, r6, #3
 8022bf8:	4669      	mov	r1, sp
 8022bfa:	4640      	mov	r0, r8
 8022bfc:	f7fd f814 	bl	801fc28 <MobleApplicationSendPacket>
 8022c00:	2801      	cmp	r0, #1
 8022c02:	4605      	mov	r5, r0
 8022c04:	d906      	bls.n	8022c14 <MobleBluemeshModelResponse+0xa0>
 8022c06:	4620      	mov	r0, r4
 8022c08:	f7f5 fb18 	bl	801823c <MobleMemFree>
 8022c0c:	4628      	mov	r0, r5
 8022c0e:	b00b      	add	sp, #44	@ 0x2c
 8022c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c14:	4620      	mov	r0, r4
 8022c16:	f7f5 fb11 	bl	801823c <MobleMemFree>
 8022c1a:	2500      	movs	r5, #0
 8022c1c:	e7f6      	b.n	8022c0c <MobleBluemeshModelResponse+0x98>
 8022c1e:	bf00      	nop
 8022c20:	2000141c 	.word	0x2000141c

08022c24 <VendorModel_SendResponse>:
 8022c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022c26:	4c08      	ldr	r4, [pc, #32]	@ (8022c48 <VendorModel_SendResponse+0x24>)
 8022c28:	f8d4 46f0 	ldr.w	r4, [r4, #1776]	@ 0x6f0
 8022c2c:	b154      	cbz	r4, 8022c44 <VendorModel_SendResponse+0x20>
 8022c2e:	9d06      	ldr	r5, [sp, #24]
 8022c30:	e9cd 3500 	strd	r3, r5, [sp]
 8022c34:	4613      	mov	r3, r2
 8022c36:	460a      	mov	r2, r1
 8022c38:	4601      	mov	r1, r0
 8022c3a:	4620      	mov	r0, r4
 8022c3c:	f7ff ff9a 	bl	8022b74 <MobleBluemeshModelResponse>
 8022c40:	b003      	add	sp, #12
 8022c42:	bd30      	pop	{r4, r5, pc}
 8022c44:	2002      	movs	r0, #2
 8022c46:	e7fb      	b.n	8022c40 <VendorModel_SendResponse+0x1c>
 8022c48:	20002514 	.word	0x20002514

08022c4c <Test_UpperTester_Send02>:
 8022c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022c50:	4b29      	ldr	r3, [pc, #164]	@ (8022cf8 <Test_UpperTester_Send02+0xac>)
 8022c52:	b09d      	sub	sp, #116	@ 0x74
 8022c54:	aa0f      	add	r2, sp, #60	@ 0x3c
 8022c56:	4604      	mov	r4, r0
 8022c58:	460f      	mov	r7, r1
 8022c5a:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
 8022c5e:	4616      	mov	r6, r2
 8022c60:	6818      	ldr	r0, [r3, #0]
 8022c62:	6859      	ldr	r1, [r3, #4]
 8022c64:	4615      	mov	r5, r2
 8022c66:	c503      	stmia	r5!, {r0, r1}
 8022c68:	3308      	adds	r3, #8
 8022c6a:	4563      	cmp	r3, ip
 8022c6c:	462a      	mov	r2, r5
 8022c6e:	d1f7      	bne.n	8022c60 <Test_UpperTester_Send02+0x14>
 8022c70:	881b      	ldrh	r3, [r3, #0]
 8022c72:	802b      	strh	r3, [r5, #0]
 8022c74:	4b21      	ldr	r3, [pc, #132]	@ (8022cfc <Test_UpperTester_Send02+0xb0>)
 8022c76:	aa01      	add	r2, sp, #4
 8022c78:	f103 0e10 	add.w	lr, r3, #16
 8022c7c:	4615      	mov	r5, r2
 8022c7e:	6818      	ldr	r0, [r3, #0]
 8022c80:	6859      	ldr	r1, [r3, #4]
 8022c82:	4694      	mov	ip, r2
 8022c84:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8022c88:	3308      	adds	r3, #8
 8022c8a:	4573      	cmp	r3, lr
 8022c8c:	4662      	mov	r2, ip
 8022c8e:	d1f6      	bne.n	8022c7e <Test_UpperTester_Send02+0x32>
 8022c90:	f10d 0814 	add.w	r8, sp, #20
 8022c94:	2228      	movs	r2, #40	@ 0x28
 8022c96:	2100      	movs	r1, #0
 8022c98:	4640      	mov	r0, r8
 8022c9a:	f003 ff99 	bl	8026bd0 <memset>
 8022c9e:	f897 9000 	ldrb.w	r9, [r7]
 8022ca2:	f8b7 7001 	ldrh.w	r7, [r7, #1]
 8022ca6:	ba7f      	rev16	r7, r7
 8022ca8:	f407 4340 	and.w	r3, r7, #49152	@ 0xc000
 8022cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8022cb0:	d112      	bne.n	8022cd8 <Test_UpperTester_Send02+0x8c>
 8022cb2:	4b13      	ldr	r3, [pc, #76]	@ (8022d00 <Test_UpperTester_Send02+0xb4>)
 8022cb4:	685b      	ldr	r3, [r3, #4]
 8022cb6:	4628      	mov	r0, r5
 8022cb8:	695b      	ldr	r3, [r3, #20]
 8022cba:	4798      	blx	r3
 8022cbc:	6822      	ldr	r2, [r4, #0]
 8022cbe:	320c      	adds	r2, #12
 8022cc0:	462b      	mov	r3, r5
 8022cc2:	cb03      	ldmia	r3!, {r0, r1}
 8022cc4:	4543      	cmp	r3, r8
 8022cc6:	6010      	str	r0, [r2, #0]
 8022cc8:	6051      	str	r1, [r2, #4]
 8022cca:	461d      	mov	r5, r3
 8022ccc:	f102 0208 	add.w	r2, r2, #8
 8022cd0:	d1f6      	bne.n	8022cc0 <Test_UpperTester_Send02+0x74>
 8022cd2:	6820      	ldr	r0, [r4, #0]
 8022cd4:	f7f7 fa1c 	bl	801a110 <MobleConfigNetworkSave>
 8022cd8:	6823      	ldr	r3, [r4, #0]
 8022cda:	f8ad 702a 	strh.w	r7, [sp, #42]	@ 0x2a
 8022cde:	885b      	ldrh	r3, [r3, #2]
 8022ce0:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8022ce4:	4632      	mov	r2, r6
 8022ce6:	464b      	mov	r3, r9
 8022ce8:	4641      	mov	r1, r8
 8022cea:	4620      	mov	r0, r4
 8022cec:	f7fc ff9c 	bl	801fc28 <MobleApplicationSendPacket>
 8022cf0:	b01d      	add	sp, #116	@ 0x74
 8022cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022cf6:	bf00      	nop
 8022cf8:	0802eccf 	.word	0x0802eccf
 8022cfc:	0802ed02 	.word	0x0802ed02
 8022d00:	20000324 	.word	0x20000324

08022d04 <MobleTransSendControl>:
 8022d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022d08:	b088      	sub	sp, #32
 8022d0a:	4606      	mov	r6, r0
 8022d0c:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8022d0e:	2f0e      	cmp	r7, #14
 8022d10:	460d      	mov	r5, r1
 8022d12:	4614      	mov	r4, r2
 8022d14:	4698      	mov	r8, r3
 8022d16:	dd06      	ble.n	8022d26 <MobleTransSendControl+0x22>
 8022d18:	4b15      	ldr	r3, [pc, #84]	@ (8022d70 <MobleTransSendControl+0x6c>)
 8022d1a:	4a16      	ldr	r2, [pc, #88]	@ (8022d74 <MobleTransSendControl+0x70>)
 8022d1c:	4816      	ldr	r0, [pc, #88]	@ (8022d78 <MobleTransSendControl+0x74>)
 8022d1e:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8022d22:	f002 ffb7 	bl	8025c94 <__assert_func>
 8022d26:	2210      	movs	r2, #16
 8022d28:	eb0d 0002 	add.w	r0, sp, r2
 8022d2c:	2100      	movs	r1, #0
 8022d2e:	0224      	lsls	r4, r4, #8
 8022d30:	f003 ff4e 	bl	8026bd0 <memset>
 8022d34:	f044 0403 	orr.w	r4, r4, #3
 8022d38:	a904      	add	r1, sp, #16
 8022d3a:	4668      	mov	r0, sp
 8022d3c:	f8ad 4000 	strh.w	r4, [sp]
 8022d40:	f7f6 fcba 	bl	80196b8 <MobleTransportRenderHdr>
 8022d44:	463a      	mov	r2, r7
 8022d46:	4641      	mov	r1, r8
 8022d48:	f10d 0011 	add.w	r0, sp, #17
 8022d4c:	f003 fff1 	bl	8026d32 <memcpy>
 8022d50:	8b6b      	ldrh	r3, [r5, #26]
 8022d52:	f043 0308 	orr.w	r3, r3, #8
 8022d56:	836b      	strh	r3, [r5, #26]
 8022d58:	6833      	ldr	r3, [r6, #0]
 8022d5a:	885b      	ldrh	r3, [r3, #2]
 8022d5c:	82ab      	strh	r3, [r5, #20]
 8022d5e:	aa04      	add	r2, sp, #16
 8022d60:	1c7b      	adds	r3, r7, #1
 8022d62:	4629      	mov	r1, r5
 8022d64:	4630      	mov	r0, r6
 8022d66:	f7fc fc4f 	bl	801f608 <MobleNetworkSendData>
 8022d6a:	b008      	add	sp, #32
 8022d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022d70:	0802ed13 	.word	0x0802ed13
 8022d74:	0802db81 	.word	0x0802db81
 8022d78:	0802e7f8 	.word	0x0802e7f8

08022d7c <MobleTransportSendHeartbeat>:
 8022d7c:	b507      	push	{r0, r1, r2, lr}
 8022d7e:	9300      	str	r3, [sp, #0]
 8022d80:	4613      	mov	r3, r2
 8022d82:	220a      	movs	r2, #10
 8022d84:	f7ff ffbe 	bl	8022d04 <MobleTransSendControl>
 8022d88:	b003      	add	sp, #12
 8022d8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08022d90 <BnrgmConfigModelSendHeartbeat>:
 8022d90:	b530      	push	{r4, r5, lr}
 8022d92:	b08d      	sub	sp, #52	@ 0x34
 8022d94:	4604      	mov	r4, r0
 8022d96:	2228      	movs	r2, #40	@ 0x28
 8022d98:	2100      	movs	r1, #0
 8022d9a:	a802      	add	r0, sp, #8
 8022d9c:	f003 ff18 	bl	8026bd0 <memset>
 8022da0:	4b1c      	ldr	r3, [pc, #112]	@ (8022e14 <BnrgmConfigModelSendHeartbeat+0x84>)
 8022da2:	f8b3 50ca 	ldrh.w	r5, [r3, #202]	@ 0xca
 8022da6:	b39d      	cbz	r5, 8022e10 <BnrgmConfigModelSendHeartbeat+0x80>
 8022da8:	f893 10bd 	ldrb.w	r1, [r3, #189]	@ 0xbd
 8022dac:	f893 20bc 	ldrb.w	r2, [r3, #188]	@ 0xbc
 8022db0:	2902      	cmp	r1, #2
 8022db2:	bf28      	it	cs
 8022db4:	2100      	movcs	r1, #0
 8022db6:	b289      	uxth	r1, r1
 8022db8:	2a01      	cmp	r2, #1
 8022dba:	bf98      	it	ls
 8022dbc:	ea41 0142 	orrls.w	r1, r1, r2, lsl #1
 8022dc0:	f893 20be 	ldrb.w	r2, [r3, #190]	@ 0xbe
 8022dc4:	2a01      	cmp	r2, #1
 8022dc6:	bf98      	it	ls
 8022dc8:	ea41 0182 	orrls.w	r1, r1, r2, lsl #2
 8022dcc:	f893 20bf 	ldrb.w	r2, [r3, #191]	@ 0xbf
 8022dd0:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 8022dd4:	f88d 3004 	strb.w	r3, [sp, #4]
 8022dd8:	2a01      	cmp	r2, #1
 8022dda:	bf98      	it	ls
 8022ddc:	ea41 01c2 	orrls.w	r1, r1, r2, lsl #3
 8022de0:	f10d 0005 	add.w	r0, sp, #5
 8022de4:	2202      	movs	r2, #2
 8022de6:	f7f5 fb5a 	bl	801849e <MobleOutputStreamPutBigEndian>
 8022dea:	f88d 3017 	strb.w	r3, [sp, #23]
 8022dee:	2302      	movs	r3, #2
 8022df0:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8022df4:	aa01      	add	r2, sp, #4
 8022df6:	2303      	movs	r3, #3
 8022df8:	a902      	add	r1, sp, #8
 8022dfa:	4620      	mov	r0, r4
 8022dfc:	f8ad 501e 	strh.w	r5, [sp, #30]
 8022e00:	f7ff ffbc 	bl	8022d7c <MobleTransportSendHeartbeat>
 8022e04:	3800      	subs	r0, #0
 8022e06:	bf18      	it	ne
 8022e08:	2001      	movne	r0, #1
 8022e0a:	0040      	lsls	r0, r0, #1
 8022e0c:	b00d      	add	sp, #52	@ 0x34
 8022e0e:	bd30      	pop	{r4, r5, pc}
 8022e10:	2001      	movs	r0, #1
 8022e12:	e7fb      	b.n	8022e0c <BnrgmConfigModelSendHeartbeat+0x7c>
 8022e14:	20000324 	.word	0x20000324

08022e18 <MobleConfigModel_ProcessRelaySet>:
 8022e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022e1a:	460a      	mov	r2, r1
 8022e1c:	7819      	ldrb	r1, [r3, #0]
 8022e1e:	9c07      	ldr	r4, [sp, #28]
 8022e20:	2901      	cmp	r1, #1
 8022e22:	4606      	mov	r6, r0
 8022e24:	d839      	bhi.n	8022e9a <MobleConfigModel_ProcessRelaySet+0x82>
 8022e26:	6800      	ldr	r0, [r0, #0]
 8022e28:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8022e2a:	7c6f      	ldrb	r7, [r5, #17]
 8022e2c:	2f02      	cmp	r7, #2
 8022e2e:	d006      	beq.n	8022e3e <MobleConfigModel_ProcessRelaySet+0x26>
 8022e30:	785b      	ldrb	r3, [r3, #1]
 8022e32:	7469      	strb	r1, [r5, #17]
 8022e34:	f003 0107 	and.w	r1, r3, #7
 8022e38:	08db      	lsrs	r3, r3, #3
 8022e3a:	7329      	strb	r1, [r5, #12]
 8022e3c:	736b      	strb	r3, [r5, #13]
 8022e3e:	7b68      	ldrb	r0, [r5, #13]
 8022e40:	7b29      	ldrb	r1, [r5, #12]
 8022e42:	f895 c011 	ldrb.w	ip, [r5, #17]
 8022e46:	f884 c008 	strb.w	ip, [r4, #8]
 8022e4a:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 8022e4e:	2528      	movs	r5, #40	@ 0x28
 8022e50:	2300      	movs	r3, #0
 8022e52:	7025      	strb	r5, [r4, #0]
 8022e54:	7261      	strb	r1, [r4, #9]
 8022e56:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 8022e5a:	2102      	movs	r1, #2
 8022e5c:	70a3      	strb	r3, [r4, #2]
 8022e5e:	70e3      	strb	r3, [r4, #3]
 8022e60:	f884 10a3 	strb.w	r1, [r4, #163]	@ 0xa3
 8022e64:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 8022e68:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
 8022e6c:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
 8022e70:	7065      	strb	r5, [r4, #1]
 8022e72:	4623      	mov	r3, r4
 8022e74:	2101      	movs	r1, #1
 8022e76:	4630      	mov	r0, r6
 8022e78:	f7fc ff64 	bl	801fd44 <MobleModelSendPacket>
 8022e7c:	4604      	mov	r4, r0
 8022e7e:	b950      	cbnz	r0, 8022e96 <MobleConfigModel_ProcessRelaySet+0x7e>
 8022e80:	6833      	ldr	r3, [r6, #0]
 8022e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022e84:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8022e86:	07d2      	lsls	r2, r2, #31
 8022e88:	d505      	bpl.n	8022e96 <MobleConfigModel_ProcessRelaySet+0x7e>
 8022e8a:	7c5b      	ldrb	r3, [r3, #17]
 8022e8c:	42bb      	cmp	r3, r7
 8022e8e:	d002      	beq.n	8022e96 <MobleConfigModel_ProcessRelaySet+0x7e>
 8022e90:	4630      	mov	r0, r6
 8022e92:	f7ff ff7d 	bl	8022d90 <BnrgmConfigModelSendHeartbeat>
 8022e96:	4620      	mov	r0, r4
 8022e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022e9a:	2402      	movs	r4, #2
 8022e9c:	e7fb      	b.n	8022e96 <MobleConfigModel_ProcessRelaySet+0x7e>

08022e9e <MobleConfigModel_ProcessGattProxySet>:
 8022e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ea0:	460a      	mov	r2, r1
 8022ea2:	7819      	ldrb	r1, [r3, #0]
 8022ea4:	9c07      	ldr	r4, [sp, #28]
 8022ea6:	2901      	cmp	r1, #1
 8022ea8:	4605      	mov	r5, r0
 8022eaa:	d82e      	bhi.n	8022f0a <MobleConfigModel_ProcessGattProxySet+0x6c>
 8022eac:	6803      	ldr	r3, [r0, #0]
 8022eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022eb0:	2714      	movs	r7, #20
 8022eb2:	7c1e      	ldrb	r6, [r3, #16]
 8022eb4:	7419      	strb	r1, [r3, #16]
 8022eb6:	2300      	movs	r3, #0
 8022eb8:	7027      	strb	r7, [r4, #0]
 8022eba:	7221      	strb	r1, [r4, #8]
 8022ebc:	f06f 077f 	mvn.w	r7, #127	@ 0x7f
 8022ec0:	2101      	movs	r1, #1
 8022ec2:	70a3      	strb	r3, [r4, #2]
 8022ec4:	70e3      	strb	r3, [r4, #3]
 8022ec6:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 8022eca:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
 8022ece:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
 8022ed2:	7067      	strb	r7, [r4, #1]
 8022ed4:	f884 10a3 	strb.w	r1, [r4, #163]	@ 0xa3
 8022ed8:	4623      	mov	r3, r4
 8022eda:	f7fc ff33 	bl	801fd44 <MobleModelSendPacket>
 8022ede:	4604      	mov	r4, r0
 8022ee0:	b988      	cbnz	r0, 8022f06 <MobleConfigModel_ProcessGattProxySet+0x68>
 8022ee2:	682b      	ldr	r3, [r5, #0]
 8022ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022ee6:	7c1a      	ldrb	r2, [r3, #16]
 8022ee8:	42b2      	cmp	r2, r6
 8022eea:	d00c      	beq.n	8022f06 <MobleConfigModel_ProcessGattProxySet+0x68>
 8022eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8022eee:	079b      	lsls	r3, r3, #30
 8022ef0:	d502      	bpl.n	8022ef8 <MobleConfigModel_ProcessGattProxySet+0x5a>
 8022ef2:	4628      	mov	r0, r5
 8022ef4:	f7ff ff4c 	bl	8022d90 <BnrgmConfigModelSendHeartbeat>
 8022ef8:	682b      	ldr	r3, [r5, #0]
 8022efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022efc:	7c1b      	ldrb	r3, [r3, #16]
 8022efe:	2b01      	cmp	r3, #1
 8022f00:	d001      	beq.n	8022f06 <MobleConfigModel_ProcessGattProxySet+0x68>
 8022f02:	f7f9 fc9d 	bl	801c840 <MoblePalBluetoothGracefulReset>
 8022f06:	4620      	mov	r0, r4
 8022f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022f0a:	2402      	movs	r4, #2
 8022f0c:	e7fb      	b.n	8022f06 <MobleConfigModel_ProcessGattProxySet+0x68>
	...

08022f10 <BnrgmConfigModelHeartbeatPublication_TimerCallback>:
 8022f10:	b538      	push	{r3, r4, r5, lr}
 8022f12:	4604      	mov	r4, r0
 8022f14:	b330      	cbz	r0, 8022f64 <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x54>
 8022f16:	4d14      	ldr	r5, [pc, #80]	@ (8022f68 <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x58>)
 8022f18:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8022f1c:	b1eb      	cbz	r3, 8022f5a <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x4a>
 8022f1e:	f8b5 30d4 	ldrh.w	r3, [r5, #212]	@ 0xd4
 8022f22:	b1d3      	cbz	r3, 8022f5a <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x4a>
 8022f24:	4608      	mov	r0, r1
 8022f26:	f7ff ff33 	bl	8022d90 <BnrgmConfigModelSendHeartbeat>
 8022f2a:	b948      	cbnz	r0, 8022f40 <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x30>
 8022f2c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8022f30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8022f34:	4293      	cmp	r3, r2
 8022f36:	bf1c      	itt	ne
 8022f38:	f103 33ff 	addne.w	r3, r3, #4294967295
 8022f3c:	f8c5 30d0 	strne.w	r3, [r5, #208]	@ 0xd0
 8022f40:	f8b5 10d4 	ldrh.w	r1, [r5, #212]	@ 0xd4
 8022f44:	ebc1 1341 	rsb	r3, r1, r1, lsl #5
 8022f48:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8022f4c:	00c9      	lsls	r1, r1, #3
 8022f4e:	4620      	mov	r0, r4
 8022f50:	b289      	uxth	r1, r1
 8022f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022f56:	f7f1 bfb5 	b.w	8014ec4 <MoblePalTimerStartOnce>
 8022f5a:	4620      	mov	r0, r4
 8022f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022f60:	f7f1 bfd8 	b.w	8014f14 <MoblePalTimerStop>
 8022f64:	bd38      	pop	{r3, r4, r5, pc}
 8022f66:	bf00      	nop
 8022f68:	20000324 	.word	0x20000324

08022f6c <BnrgmFrndFnSendFriendPollResponse>:
 8022f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022f70:	f892 932d 	ldrb.w	r9, [r2, #813]	@ 0x32d
 8022f74:	252c      	movs	r5, #44	@ 0x2c
 8022f76:	fb05 2309 	mla	r3, r5, r9, r2
 8022f7a:	b08f      	sub	sp, #60	@ 0x3c
 8022f7c:	f893 8096 	ldrb.w	r8, [r3, #150]	@ 0x96
 8022f80:	f1b8 0f01 	cmp.w	r8, #1
 8022f84:	4606      	mov	r6, r0
 8022f86:	460f      	mov	r7, r1
 8022f88:	4614      	mov	r4, r2
 8022f8a:	d004      	beq.n	8022f96 <BnrgmFrndFnSendFriendPollResponse+0x2a>
 8022f8c:	b00f      	add	sp, #60	@ 0x3c
 8022f8e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022f92:	f7fa bdd1 	b.w	801db38 <BnrgmFrndFnSendLpnMsg>
 8022f96:	2228      	movs	r2, #40	@ 0x28
 8022f98:	2100      	movs	r1, #0
 8022f9a:	a804      	add	r0, sp, #16
 8022f9c:	f003 fe18 	bl	8026bd0 <memset>
 8022fa0:	2385      	movs	r3, #133	@ 0x85
 8022fa2:	fb15 3509 	smlabb	r5, r5, r9, r3
 8022fa6:	1963      	adds	r3, r4, r5
 8022fa8:	5960      	ldr	r0, [r4, r5]
 8022faa:	791b      	ldrb	r3, [r3, #4]
 8022fac:	f88d 300c 	strb.w	r3, [sp, #12]
 8022fb0:	f894 332c 	ldrb.w	r3, [r4, #812]	@ 0x32c
 8022fb4:	9002      	str	r0, [sp, #8]
 8022fb6:	2b01      	cmp	r3, #1
 8022fb8:	bf94      	ite	ls
 8022fba:	2300      	movls	r3, #0
 8022fbc:	2301      	movhi	r3, #1
 8022fbe:	f88d 300d 	strb.w	r3, [sp, #13]
 8022fc2:	2330      	movs	r3, #48	@ 0x30
 8022fc4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8022fc8:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
 8022fcc:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8022fd0:	88a3      	ldrh	r3, [r4, #4]
 8022fd2:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8022fd6:	2306      	movs	r3, #6
 8022fd8:	9300      	str	r3, [sp, #0]
 8022fda:	2202      	movs	r2, #2
 8022fdc:	ab02      	add	r3, sp, #8
 8022fde:	a904      	add	r1, sp, #16
 8022fe0:	4630      	mov	r0, r6
 8022fe2:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8022fe6:	f88d 8033 	strb.w	r8, [sp, #51]	@ 0x33
 8022fea:	f7ff fe8b 	bl	8022d04 <MobleTransSendControl>
 8022fee:	b00f      	add	sp, #60	@ 0x3c
 8022ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08022ff4 <BnrgmFrndFnSendFrndClear>:
 8022ff4:	b530      	push	{r4, r5, lr}
 8022ff6:	460c      	mov	r4, r1
 8022ff8:	b08f      	sub	sp, #60	@ 0x3c
 8022ffa:	4605      	mov	r5, r0
 8022ffc:	2228      	movs	r2, #40	@ 0x28
 8022ffe:	2100      	movs	r1, #0
 8023000:	a804      	add	r0, sp, #16
 8023002:	f003 fde5 	bl	8026bd0 <memset>
 8023006:	8a23      	ldrh	r3, [r4, #16]
 8023008:	b323      	cbz	r3, 8023054 <BnrgmFrndFnSendFrndClear+0x60>
 802300a:	88a1      	ldrh	r1, [r4, #4]
 802300c:	2202      	movs	r2, #2
 802300e:	a803      	add	r0, sp, #12
 8023010:	f7f5 fa45 	bl	801849e <MobleOutputStreamPutBigEndian>
 8023014:	88e1      	ldrh	r1, [r4, #6]
 8023016:	2202      	movs	r2, #2
 8023018:	f10d 000e 	add.w	r0, sp, #14
 802301c:	f7f5 fa3f 	bl	801849e <MobleOutputStreamPutBigEndian>
 8023020:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
 8023024:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8023028:	8a23      	ldrh	r3, [r4, #16]
 802302a:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 802302e:	237f      	movs	r3, #127	@ 0x7f
 8023030:	f88d 301f 	strb.w	r3, [sp, #31]
 8023034:	4b08      	ldr	r3, [pc, #32]	@ (8023058 <BnrgmFrndFnSendFrndClear+0x64>)
 8023036:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 802303a:	3301      	adds	r3, #1
 802303c:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8023040:	2304      	movs	r3, #4
 8023042:	9300      	str	r3, [sp, #0]
 8023044:	2205      	movs	r2, #5
 8023046:	ab03      	add	r3, sp, #12
 8023048:	a904      	add	r1, sp, #16
 802304a:	4628      	mov	r0, r5
 802304c:	f7ff fe5a 	bl	8022d04 <MobleTransSendControl>
 8023050:	b00f      	add	sp, #60	@ 0x3c
 8023052:	bd30      	pop	{r4, r5, pc}
 8023054:	2002      	movs	r0, #2
 8023056:	e7fb      	b.n	8023050 <BnrgmFrndFnSendFrndClear+0x5c>
 8023058:	20000324 	.word	0x20000324

0802305c <BnrgmStackSendFrndClear>:
 802305c:	b508      	push	{r3, lr}
 802305e:	4601      	mov	r1, r0
 8023060:	4801      	ldr	r0, [pc, #4]	@ (8023068 <BnrgmStackSendFrndClear+0xc>)
 8023062:	f7ff ffc7 	bl	8022ff4 <BnrgmFrndFnSendFrndClear>
 8023066:	bd08      	pop	{r3, pc}
 8023068:	20001a9c 	.word	0x20001a9c

0802306c <BnrgmFrndFnClear_TimerCallback>:
 802306c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8023070:	4293      	cmp	r3, r2
 8023072:	bf88      	it	hi
 8023074:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8023078:	1ad3      	subs	r3, r2, r3
 802307a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 802307e:	b510      	push	{r4, lr}
 8023080:	460c      	mov	r4, r1
 8023082:	d30f      	bcc.n	80230a4 <BnrgmFrndFnClear_TimerCallback+0x38>
 8023084:	005b      	lsls	r3, r3, #1
 8023086:	1e59      	subs	r1, r3, #1
 8023088:	f241 3287 	movw	r2, #4999	@ 0x1387
 802308c:	4291      	cmp	r1, r2
 802308e:	d90b      	bls.n	80230a8 <BnrgmFrndFnClear_TimerCallback+0x3c>
 8023090:	f7f1 ff60 	bl	8014f54 <MoblePalTimerDestroy>
 8023094:	2300      	movs	r3, #0
 8023096:	6163      	str	r3, [r4, #20]
 8023098:	8223      	strh	r3, [r4, #16]
 802309a:	4620      	mov	r0, r4
 802309c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80230a0:	f7ff bfdc 	b.w	802305c <BnrgmStackSendFrndClear>
 80230a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80230a8:	b299      	uxth	r1, r3
 80230aa:	f7f1 ff0b 	bl	8014ec4 <MoblePalTimerStartOnce>
 80230ae:	e7f4      	b.n	802309a <BnrgmFrndFnClear_TimerCallback+0x2e>

080230b0 <BnrgmFrndLpnSendFrndClear.isra.0>:
 80230b0:	b530      	push	{r4, r5, lr}
 80230b2:	4605      	mov	r5, r0
 80230b4:	b08f      	sub	sp, #60	@ 0x3c
 80230b6:	460c      	mov	r4, r1
 80230b8:	2228      	movs	r2, #40	@ 0x28
 80230ba:	2100      	movs	r1, #0
 80230bc:	a804      	add	r0, sp, #16
 80230be:	f003 fd87 	bl	8026bd0 <memset>
 80230c2:	682b      	ldr	r3, [r5, #0]
 80230c4:	2202      	movs	r2, #2
 80230c6:	8859      	ldrh	r1, [r3, #2]
 80230c8:	a803      	add	r0, sp, #12
 80230ca:	f7f5 f9e8 	bl	801849e <MobleOutputStreamPutBigEndian>
 80230ce:	8a61      	ldrh	r1, [r4, #18]
 80230d0:	2202      	movs	r2, #2
 80230d2:	f10d 000e 	add.w	r0, sp, #14
 80230d6:	f7f5 f9e2 	bl	801849e <MobleOutputStreamPutBigEndian>
 80230da:	8a23      	ldrh	r3, [r4, #16]
 80230dc:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80230e0:	4b0b      	ldr	r3, [pc, #44]	@ (8023110 <BnrgmFrndLpnSendFrndClear.isra.0+0x60>)
 80230e2:	f893 20b5 	ldrb.w	r2, [r3, #181]	@ 0xb5
 80230e6:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 80230ea:	f88d 201f 	strb.w	r2, [sp, #31]
 80230ee:	2000      	movs	r0, #0
 80230f0:	3301      	adds	r3, #1
 80230f2:	8220      	strh	r0, [r4, #16]
 80230f4:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 80230f8:	f7f4 fb54 	bl	80177a4 <BnrgmPalCryptoDeleteFriendshipKeys>
 80230fc:	2304      	movs	r3, #4
 80230fe:	9300      	str	r3, [sp, #0]
 8023100:	2205      	movs	r2, #5
 8023102:	ab03      	add	r3, sp, #12
 8023104:	a904      	add	r1, sp, #16
 8023106:	4628      	mov	r0, r5
 8023108:	f7ff fdfc 	bl	8022d04 <MobleTransSendControl>
 802310c:	b00f      	add	sp, #60	@ 0x3c
 802310e:	bd30      	pop	{r4, r5, pc}
 8023110:	20000324 	.word	0x20000324

08023114 <BnrgmFrndMgmtBreakFriendship>:
 8023114:	b510      	push	{r4, lr}
 8023116:	4b0e      	ldr	r3, [pc, #56]	@ (8023150 <BnrgmFrndMgmtBreakFriendship+0x3c>)
 8023118:	f893 20bf 	ldrb.w	r2, [r3, #191]	@ 0xbf
 802311c:	2a01      	cmp	r2, #1
 802311e:	d109      	bne.n	8023134 <BnrgmFrndMgmtBreakFriendship+0x20>
 8023120:	4b0c      	ldr	r3, [pc, #48]	@ (8023154 <BnrgmFrndMgmtBreakFriendship+0x40>)
 8023122:	f8d3 4a04 	ldr.w	r4, [r3, #2564]	@ 0xa04
 8023126:	4621      	mov	r1, r4
 8023128:	f7ff ffc2 	bl	80230b0 <BnrgmFrndLpnSendFrndClear.isra.0>
 802312c:	2000      	movs	r0, #0
 802312e:	f884 005e 	strb.w	r0, [r4, #94]	@ 0x5e
 8023132:	bd10      	pop	{r4, pc}
 8023134:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 8023138:	2b01      	cmp	r3, #1
 802313a:	d106      	bne.n	802314a <BnrgmFrndMgmtBreakFriendship+0x36>
 802313c:	4b05      	ldr	r3, [pc, #20]	@ (8023154 <BnrgmFrndMgmtBreakFriendship+0x40>)
 802313e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023142:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	@ 0xa04
 8023146:	f7f8 b937 	b.w	801b3b8 <BnrgmFrndFnBreakFriendship>
 802314a:	2001      	movs	r0, #1
 802314c:	e7f1      	b.n	8023132 <BnrgmFrndMgmtBreakFriendship+0x1e>
 802314e:	bf00      	nop
 8023150:	20000324 	.word	0x20000324
 8023154:	20002514 	.word	0x20002514

08023158 <MobleConfigModel_ProcessFriendSet>:
 8023158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802315a:	460a      	mov	r2, r1
 802315c:	7819      	ldrb	r1, [r3, #0]
 802315e:	9c07      	ldr	r4, [sp, #28]
 8023160:	2901      	cmp	r1, #1
 8023162:	4605      	mov	r5, r0
 8023164:	d82f      	bhi.n	80231c6 <MobleConfigModel_ProcessFriendSet+0x6e>
 8023166:	6803      	ldr	r3, [r0, #0]
 8023168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802316a:	2711      	movs	r7, #17
 802316c:	7c9e      	ldrb	r6, [r3, #18]
 802316e:	7499      	strb	r1, [r3, #18]
 8023170:	2300      	movs	r3, #0
 8023172:	7027      	strb	r7, [r4, #0]
 8023174:	7221      	strb	r1, [r4, #8]
 8023176:	f06f 077f 	mvn.w	r7, #127	@ 0x7f
 802317a:	2101      	movs	r1, #1
 802317c:	70a3      	strb	r3, [r4, #2]
 802317e:	70e3      	strb	r3, [r4, #3]
 8023180:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 8023184:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
 8023188:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
 802318c:	7067      	strb	r7, [r4, #1]
 802318e:	f884 10a3 	strb.w	r1, [r4, #163]	@ 0xa3
 8023192:	4623      	mov	r3, r4
 8023194:	f7fc fdd6 	bl	801fd44 <MobleModelSendPacket>
 8023198:	4604      	mov	r4, r0
 802319a:	b990      	cbnz	r0, 80231c2 <MobleConfigModel_ProcessFriendSet+0x6a>
 802319c:	682b      	ldr	r3, [r5, #0]
 802319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80231a0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80231a2:	0752      	lsls	r2, r2, #29
 80231a4:	d505      	bpl.n	80231b2 <MobleConfigModel_ProcessFriendSet+0x5a>
 80231a6:	7c9b      	ldrb	r3, [r3, #18]
 80231a8:	42b3      	cmp	r3, r6
 80231aa:	d002      	beq.n	80231b2 <MobleConfigModel_ProcessFriendSet+0x5a>
 80231ac:	4628      	mov	r0, r5
 80231ae:	f7ff fdef 	bl	8022d90 <BnrgmConfigModelSendHeartbeat>
 80231b2:	682b      	ldr	r3, [r5, #0]
 80231b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80231b6:	7c9b      	ldrb	r3, [r3, #18]
 80231b8:	2b01      	cmp	r3, #1
 80231ba:	d002      	beq.n	80231c2 <MobleConfigModel_ProcessFriendSet+0x6a>
 80231bc:	4628      	mov	r0, r5
 80231be:	f7ff ffa9 	bl	8023114 <BnrgmFrndMgmtBreakFriendship>
 80231c2:	4620      	mov	r0, r4
 80231c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80231c6:	2402      	movs	r4, #2
 80231c8:	e7fb      	b.n	80231c2 <MobleConfigModel_ProcessFriendSet+0x6a>

080231ca <Test_UpperTester_Set06>:
 80231ca:	f7ff bfa3 	b.w	8023114 <BnrgmFrndMgmtBreakFriendship>
	...

080231d0 <BnrgmFrndFn_FSM>:
 80231d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231d4:	b08f      	sub	sp, #60	@ 0x3c
 80231d6:	461c      	mov	r4, r3
 80231d8:	4617      	mov	r7, r2
 80231da:	f89d 5060 	ldrb.w	r5, [sp, #96]	@ 0x60
 80231de:	4680      	mov	r8, r0
 80231e0:	468a      	mov	sl, r1
 80231e2:	f7e3 fc9f 	bl	8006b24 <HAL_GetTick>
 80231e6:	6823      	ldr	r3, [r4, #0]
 80231e8:	f894 206a 	ldrb.w	r2, [r4, #106]	@ 0x6a
 80231ec:	4606      	mov	r6, r0
 80231ee:	1ac3      	subs	r3, r0, r3
 80231f0:	2a06      	cmp	r2, #6
 80231f2:	f200 80d1 	bhi.w	8023398 <BnrgmFrndFn_FSM+0x1c8>
 80231f6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80231fa:	0007      	.short	0x0007
 80231fc:	005f0011 	.word	0x005f0011
 8023200:	00a0007a 	.word	0x00a0007a
 8023204:	010d00d4 	.word	0x010d00d4
 8023208:	2d00      	cmp	r5, #0
 802320a:	d051      	beq.n	80232b0 <BnrgmFrndFn_FSM+0xe0>
 802320c:	2d01      	cmp	r5, #1
 802320e:	f040 812c 	bne.w	802346a <BnrgmFrndFn_FSM+0x29a>
 8023212:	6020      	str	r0, [r4, #0]
 8023214:	f884 506a 	strb.w	r5, [r4, #106]	@ 0x6a
 8023218:	4615      	mov	r5, r2
 802321a:	e049      	b.n	80232b0 <BnrgmFrndFn_FSM+0xe0>
 802321c:	2d00      	cmp	r5, #0
 802321e:	f040 8124 	bne.w	802346a <BnrgmFrndFn_FSM+0x29a>
 8023222:	8b22      	ldrh	r2, [r4, #24]
 8023224:	429a      	cmp	r2, r3
 8023226:	d243      	bcs.n	80232b0 <BnrgmFrndFn_FSM+0xe0>
 8023228:	f8ba 9000 	ldrh.w	r9, [sl]
 802322c:	f109 0901 	add.w	r9, r9, #1
 8023230:	fa1f f989 	uxth.w	r9, r9
 8023234:	f8aa 9000 	strh.w	r9, [sl]
 8023238:	2228      	movs	r2, #40	@ 0x28
 802323a:	4629      	mov	r1, r5
 802323c:	f8a4 9008 	strh.w	r9, [r4, #8]
 8023240:	a804      	add	r0, sp, #16
 8023242:	f003 fcc5 	bl	8026bd0 <memset>
 8023246:	f894 232e 	ldrb.w	r2, [r4, #814]	@ 0x32e
 802324a:	f88d 200b 	strb.w	r2, [sp, #11]
 802324e:	f241 03ff 	movw	r3, #4351	@ 0x10ff
 8023252:	f8ad 3008 	strh.w	r3, [sp, #8]
 8023256:	2202      	movs	r2, #2
 8023258:	2306      	movs	r3, #6
 802325a:	4649      	mov	r1, r9
 802325c:	a803      	add	r0, sp, #12
 802325e:	f88d 300a 	strb.w	r3, [sp, #10]
 8023262:	f7f5 f91c 	bl	801849e <MobleOutputStreamPutBigEndian>
 8023266:	2210      	movs	r2, #16
 8023268:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 802326c:	f894 2068 	ldrb.w	r2, [r4, #104]	@ 0x68
 8023270:	f88d 202c 	strb.w	r2, [sp, #44]	@ 0x2c
 8023274:	88a2      	ldrh	r2, [r4, #4]
 8023276:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 802327a:	2201      	movs	r2, #1
 802327c:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8023280:	9300      	str	r3, [sp, #0]
 8023282:	2204      	movs	r2, #4
 8023284:	ab02      	add	r3, sp, #8
 8023286:	a904      	add	r1, sp, #16
 8023288:	4640      	mov	r0, r8
 802328a:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 802328e:	f7ff fd39 	bl	8022d04 <MobleTransSendControl>
 8023292:	f8d8 3000 	ldr.w	r3, [r8]
 8023296:	88a1      	ldrh	r1, [r4, #4]
 8023298:	885a      	ldrh	r2, [r3, #2]
 802329a:	8923      	ldrh	r3, [r4, #8]
 802329c:	9300      	str	r3, [sp, #0]
 802329e:	9501      	str	r5, [sp, #4]
 80232a0:	88e3      	ldrh	r3, [r4, #6]
 80232a2:	4638      	mov	r0, r7
 80232a4:	f7f4 f9e8 	bl	8017678 <BnrgmPalCryptoSetFriendshipKeys>
 80232a8:	2302      	movs	r3, #2
 80232aa:	6026      	str	r6, [r4, #0]
 80232ac:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 80232b0:	4628      	mov	r0, r5
 80232b2:	b00f      	add	sp, #60	@ 0x3c
 80232b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232b8:	b95d      	cbnz	r5, 80232d2 <BnrgmFrndFn_FSM+0x102>
 80232ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80232be:	d9f7      	bls.n	80232b0 <BnrgmFrndFn_FSM+0xe0>
 80232c0:	80a5      	strh	r5, [r4, #4]
 80232c2:	4638      	mov	r0, r7
 80232c4:	f7f4 fa6e 	bl	80177a4 <BnrgmPalCryptoDeleteFriendshipKeys>
 80232c8:	f884 506a 	strb.w	r5, [r4, #106]	@ 0x6a
 80232cc:	6026      	str	r6, [r4, #0]
 80232ce:	2501      	movs	r5, #1
 80232d0:	e7ee      	b.n	80232b0 <BnrgmFrndFn_FSM+0xe0>
 80232d2:	3d02      	subs	r5, #2
 80232d4:	2d01      	cmp	r5, #1
 80232d6:	d89f      	bhi.n	8023218 <BnrgmFrndFn_FSM+0x48>
 80232d8:	2500      	movs	r5, #0
 80232da:	f8a4 532c 	strh.w	r5, [r4, #812]	@ 0x32c
 80232de:	4620      	mov	r0, r4
 80232e0:	f7f8 f8be 	bl	801b460 <BnrgmFrndFnInsertFriendUpdate>
 80232e4:	2303      	movs	r3, #3
 80232e6:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 80232ea:	6026      	str	r6, [r4, #0]
 80232ec:	e7e0      	b.n	80232b0 <BnrgmFrndFn_FSM+0xe0>
 80232ee:	2d00      	cmp	r5, #0
 80232f0:	d1ed      	bne.n	80232ce <BnrgmFrndFn_FSM+0xfe>
 80232f2:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80232f6:	8a23      	ldrh	r3, [r4, #16]
 80232f8:	2a00      	cmp	r2, #0
 80232fa:	dd10      	ble.n	802331e <BnrgmFrndFn_FSM+0x14e>
 80232fc:	f8d8 2000 	ldr.w	r2, [r8]
 8023300:	8852      	ldrh	r2, [r2, #2]
 8023302:	429a      	cmp	r2, r3
 8023304:	d00b      	beq.n	802331e <BnrgmFrndFn_FSM+0x14e>
 8023306:	495a      	ldr	r1, [pc, #360]	@ (8023470 <BnrgmFrndFn_FSM+0x2a0>)
 8023308:	4622      	mov	r2, r4
 802330a:	f104 0014 	add.w	r0, r4, #20
 802330e:	f7f1 fd6f 	bl	8014df0 <MoblePalTimerCreate>
 8023312:	2801      	cmp	r0, #1
 8023314:	d803      	bhi.n	802331e <BnrgmFrndFn_FSM+0x14e>
 8023316:	6960      	ldr	r0, [r4, #20]
 8023318:	2101      	movs	r1, #1
 802331a:	f7f1 fdd3 	bl	8014ec4 <MoblePalTimerStartOnce>
 802331e:	2305      	movs	r3, #5
 8023320:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 8023324:	8a23      	ldrh	r3, [r4, #16]
 8023326:	9300      	str	r3, [sp, #0]
 8023328:	68e2      	ldr	r2, [r4, #12]
 802332a:	f894 332f 	ldrb.w	r3, [r4, #815]	@ 0x32f
 802332e:	f894 1330 	ldrb.w	r1, [r4, #816]	@ 0x330
 8023332:	88a0      	ldrh	r0, [r4, #4]
 8023334:	f7f7 f8ae 	bl	801a494 <BnrgmLibraryFnOnFriendshipEstablished>
 8023338:	e7ba      	b.n	80232b0 <BnrgmFrndFn_FSM+0xe0>
 802333a:	b9a5      	cbnz	r5, 8023366 <BnrgmFrndFn_FSM+0x196>
 802333c:	68e2      	ldr	r2, [r4, #12]
 802333e:	429a      	cmp	r2, r3
 8023340:	d2b6      	bcs.n	80232b0 <BnrgmFrndFn_FSM+0xe0>
 8023342:	88a1      	ldrh	r1, [r4, #4]
 8023344:	2002      	movs	r0, #2
 8023346:	f7e1 ff77 	bl	8005238 <BLEMesh_FnFriendshipClearedCallback>
 802334a:	4638      	mov	r0, r7
 802334c:	f7f4 fa2a 	bl	80177a4 <BnrgmPalCryptoDeleteFriendshipKeys>
 8023350:	6960      	ldr	r0, [r4, #20]
 8023352:	b108      	cbz	r0, 8023358 <BnrgmFrndFn_FSM+0x188>
 8023354:	f7f1 fdfe 	bl	8014f54 <MoblePalTimerDestroy>
 8023358:	f44f 724d 	mov.w	r2, #820	@ 0x334
 802335c:	2100      	movs	r1, #0
 802335e:	4620      	mov	r0, r4
 8023360:	f003 fc36 	bl	8026bd0 <memset>
 8023364:	e7b2      	b.n	80232cc <BnrgmFrndFn_FSM+0xfc>
 8023366:	3d02      	subs	r5, #2
 8023368:	2d04      	cmp	r5, #4
 802336a:	d87e      	bhi.n	802346a <BnrgmFrndFn_FSM+0x29a>
 802336c:	e8df f005 	tbb	[pc, r5]
 8023370:	16161003 	.word	0x16161003
 8023374:	40          	.byte	0x40
 8023375:	00          	.byte	0x00
 8023376:	f894 332c 	ldrb.w	r3, [r4, #812]	@ 0x32c
 802337a:	b14b      	cbz	r3, 8023390 <BnrgmFrndFn_FSM+0x1c0>
 802337c:	3b01      	subs	r3, #1
 802337e:	f884 332c 	strb.w	r3, [r4, #812]	@ 0x32c
 8023382:	f894 332d 	ldrb.w	r3, [r4, #813]	@ 0x32d
 8023386:	3301      	adds	r3, #1
 8023388:	f003 030f 	and.w	r3, r3, #15
 802338c:	f884 332d 	strb.w	r3, [r4, #813]	@ 0x32d
 8023390:	6026      	str	r6, [r4, #0]
 8023392:	2305      	movs	r3, #5
 8023394:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 8023398:	2500      	movs	r5, #0
 802339a:	e789      	b.n	80232b0 <BnrgmFrndFn_FSM+0xe0>
 802339c:	6020      	str	r0, [r4, #0]
 802339e:	2306      	movs	r3, #6
 80233a0:	e7f8      	b.n	8023394 <BnrgmFrndFn_FSM+0x1c4>
 80233a2:	b985      	cbnz	r5, 80233c6 <BnrgmFrndFn_FSM+0x1f6>
 80233a4:	f894 2330 	ldrb.w	r2, [r4, #816]	@ 0x330
 80233a8:	429a      	cmp	r2, r3
 80233aa:	d281      	bcs.n	80232b0 <BnrgmFrndFn_FSM+0xe0>
 80233ac:	f894 332c 	ldrb.w	r3, [r4, #812]	@ 0x32c
 80233b0:	b913      	cbnz	r3, 80233b8 <BnrgmFrndFn_FSM+0x1e8>
 80233b2:	4620      	mov	r0, r4
 80233b4:	f7f8 f854 	bl	801b460 <BnrgmFrndFnInsertFriendUpdate>
 80233b8:	4622      	mov	r2, r4
 80233ba:	4639      	mov	r1, r7
 80233bc:	4640      	mov	r0, r8
 80233be:	f7ff fdd5 	bl	8022f6c <BnrgmFrndFnSendFriendPollResponse>
 80233c2:	2304      	movs	r3, #4
 80233c4:	e78f      	b.n	80232e6 <BnrgmFrndFn_FSM+0x116>
 80233c6:	2d02      	cmp	r5, #2
 80233c8:	d10e      	bne.n	80233e8 <BnrgmFrndFn_FSM+0x218>
 80233ca:	f894 332c 	ldrb.w	r3, [r4, #812]	@ 0x32c
 80233ce:	b14b      	cbz	r3, 80233e4 <BnrgmFrndFn_FSM+0x214>
 80233d0:	3b01      	subs	r3, #1
 80233d2:	f884 332c 	strb.w	r3, [r4, #812]	@ 0x32c
 80233d6:	f894 332d 	ldrb.w	r3, [r4, #813]	@ 0x32d
 80233da:	3301      	adds	r3, #1
 80233dc:	f003 030f 	and.w	r3, r3, #15
 80233e0:	f884 332d 	strb.w	r3, [r4, #813]	@ 0x32d
 80233e4:	6026      	str	r6, [r4, #0]
 80233e6:	e7d7      	b.n	8023398 <BnrgmFrndFn_FSM+0x1c8>
 80233e8:	2d03      	cmp	r5, #3
 80233ea:	d0fb      	beq.n	80233e4 <BnrgmFrndFn_FSM+0x214>
 80233ec:	2d06      	cmp	r5, #6
 80233ee:	d13c      	bne.n	802346a <BnrgmFrndFn_FSM+0x29a>
 80233f0:	88a1      	ldrh	r1, [r4, #4]
 80233f2:	2003      	movs	r0, #3
 80233f4:	f7e1 ff20 	bl	8005238 <BLEMesh_FnFriendshipClearedCallback>
 80233f8:	4638      	mov	r0, r7
 80233fa:	f7f4 f9d3 	bl	80177a4 <BnrgmPalCryptoDeleteFriendshipKeys>
 80233fe:	6960      	ldr	r0, [r4, #20]
 8023400:	b108      	cbz	r0, 8023406 <BnrgmFrndFn_FSM+0x236>
 8023402:	f7f1 fda7 	bl	8014f54 <MoblePalTimerDestroy>
 8023406:	f44f 724d 	mov.w	r2, #820	@ 0x334
 802340a:	2100      	movs	r1, #0
 802340c:	4620      	mov	r0, r4
 802340e:	f003 fbdf 	bl	8026bd0 <memset>
 8023412:	e7c1      	b.n	8023398 <BnrgmFrndFn_FSM+0x1c8>
 8023414:	bb2d      	cbnz	r5, 8023462 <BnrgmFrndFn_FSM+0x292>
 8023416:	f894 2330 	ldrb.w	r2, [r4, #816]	@ 0x330
 802341a:	429a      	cmp	r2, r3
 802341c:	f4bf af48 	bcs.w	80232b0 <BnrgmFrndFn_FSM+0xe0>
 8023420:	4629      	mov	r1, r5
 8023422:	2228      	movs	r2, #40	@ 0x28
 8023424:	a804      	add	r0, sp, #16
 8023426:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 802342a:	f894 a068 	ldrb.w	sl, [r4, #104]	@ 0x68
 802342e:	f894 b332 	ldrb.w	fp, [r4, #818]	@ 0x332
 8023432:	f003 fbcd 	bl	8026bd0 <memset>
 8023436:	2330      	movs	r3, #48	@ 0x30
 8023438:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 802343c:	2301      	movs	r3, #1
 802343e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8023442:	9300      	str	r3, [sp, #0]
 8023444:	2209      	movs	r2, #9
 8023446:	ab02      	add	r3, sp, #8
 8023448:	a904      	add	r1, sp, #16
 802344a:	4640      	mov	r0, r8
 802344c:	f88d b008 	strb.w	fp, [sp, #8]
 8023450:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8023454:	f88d a02c 	strb.w	sl, [sp, #44]	@ 0x2c
 8023458:	f8ad 9026 	strh.w	r9, [sp, #38]	@ 0x26
 802345c:	f7ff fc52 	bl	8022d04 <MobleTransSendControl>
 8023460:	e7af      	b.n	80233c2 <BnrgmFrndFn_FSM+0x1f2>
 8023462:	1f2b      	subs	r3, r5, #4
 8023464:	2b01      	cmp	r3, #1
 8023466:	d8c1      	bhi.n	80233ec <BnrgmFrndFn_FSM+0x21c>
 8023468:	e7bc      	b.n	80233e4 <BnrgmFrndFn_FSM+0x214>
 802346a:	2502      	movs	r5, #2
 802346c:	e720      	b.n	80232b0 <BnrgmFrndFn_FSM+0xe0>
 802346e:	bf00      	nop
 8023470:	0802306d 	.word	0x0802306d

08023474 <BnrgmFrndFnProcessFrndPoll>:
 8023474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023478:	9c06      	ldr	r4, [sp, #24]
 802347a:	4615      	mov	r5, r2
 802347c:	4606      	mov	r6, r0
 802347e:	b930      	cbnz	r0, 802348e <BnrgmFrndFnProcessFrndPoll+0x1a>
 8023480:	4b16      	ldr	r3, [pc, #88]	@ (80234dc <BnrgmFrndFnProcessFrndPoll+0x68>)
 8023482:	4a17      	ldr	r2, [pc, #92]	@ (80234e0 <BnrgmFrndFnProcessFrndPoll+0x6c>)
 8023484:	4817      	ldr	r0, [pc, #92]	@ (80234e4 <BnrgmFrndFnProcessFrndPoll+0x70>)
 8023486:	f240 2156 	movw	r1, #598	@ 0x256
 802348a:	f002 fc03 	bl	8025c94 <__assert_func>
 802348e:	2c01      	cmp	r4, #1
 8023490:	d11f      	bne.n	80234d2 <BnrgmFrndFnProcessFrndPoll+0x5e>
 8023492:	781f      	ldrb	r7, [r3, #0]
 8023494:	2f01      	cmp	r7, #1
 8023496:	d81c      	bhi.n	80234d2 <BnrgmFrndFnProcessFrndPoll+0x5e>
 8023498:	4610      	mov	r0, r2
 802349a:	8a89      	ldrh	r1, [r1, #20]
 802349c:	f7f7 ffa7 	bl	801b3ee <BnrgmFrndFnGetLpnOffset>
 80234a0:	1c42      	adds	r2, r0, #1
 80234a2:	d019      	beq.n	80234d8 <BnrgmFrndFnProcessFrndPoll+0x64>
 80234a4:	f44f 714d 	mov.w	r1, #820	@ 0x334
 80234a8:	fb01 f400 	mul.w	r4, r1, r0
 80234ac:	1d23      	adds	r3, r4, #4
 80234ae:	442c      	add	r4, r5
 80234b0:	b2c2      	uxtb	r2, r0
 80234b2:	f894 1335 	ldrb.w	r1, [r4, #821]	@ 0x335
 80234b6:	42b9      	cmp	r1, r7
 80234b8:	bf0e      	itee	eq
 80234ba:	2103      	moveq	r1, #3
 80234bc:	f884 7335 	strbne.w	r7, [r4, #821]	@ 0x335
 80234c0:	2102      	movne	r1, #2
 80234c2:	9106      	str	r1, [sp, #24]
 80234c4:	442b      	add	r3, r5
 80234c6:	4629      	mov	r1, r5
 80234c8:	4630      	mov	r0, r6
 80234ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80234ce:	f7ff be7f 	b.w	80231d0 <BnrgmFrndFn_FSM>
 80234d2:	2002      	movs	r0, #2
 80234d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80234d8:	4620      	mov	r0, r4
 80234da:	e7fb      	b.n	80234d4 <BnrgmFrndFnProcessFrndPoll+0x60>
 80234dc:	0802e4b8 	.word	0x0802e4b8
 80234e0:	0802db97 	.word	0x0802db97
 80234e4:	0802ea8b 	.word	0x0802ea8b

080234e8 <BnrgmFrndFnProcessFrndRequest>:
 80234e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234ec:	ed2d 8b02 	vpush	{d8}
 80234f0:	b085      	sub	sp, #20
 80234f2:	461f      	mov	r7, r3
 80234f4:	ee08 0a10 	vmov	s16, r0
 80234f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80234fa:	4688      	mov	r8, r1
 80234fc:	4615      	mov	r5, r2
 80234fe:	b930      	cbnz	r0, 802350e <BnrgmFrndFnProcessFrndRequest+0x26>
 8023500:	4b69      	ldr	r3, [pc, #420]	@ (80236a8 <BnrgmFrndFnProcessFrndRequest+0x1c0>)
 8023502:	4a6a      	ldr	r2, [pc, #424]	@ (80236ac <BnrgmFrndFnProcessFrndRequest+0x1c4>)
 8023504:	486a      	ldr	r0, [pc, #424]	@ (80236b0 <BnrgmFrndFnProcessFrndRequest+0x1c8>)
 8023506:	f240 217b 	movw	r1, #635	@ 0x27b
 802350a:	f002 fbc3 	bl	8025c94 <__assert_func>
 802350e:	2f00      	cmp	r7, #0
 8023510:	d067      	beq.n	80235e2 <BnrgmFrndFnProcessFrndRequest+0xfa>
 8023512:	2b09      	cmp	r3, #9
 8023514:	d965      	bls.n	80235e2 <BnrgmFrndFnProcessFrndRequest+0xfa>
 8023516:	7bcb      	ldrb	r3, [r1, #15]
 8023518:	2b00      	cmp	r3, #0
 802351a:	d162      	bne.n	80235e2 <BnrgmFrndFnProcessFrndRequest+0xfa>
 802351c:	78a9      	ldrb	r1, [r5, #2]
 802351e:	f44f 704d 	mov.w	r0, #820	@ 0x334
 8023522:	f105 0c08 	add.w	ip, r5, #8
 8023526:	b2da      	uxtb	r2, r3
 8023528:	4291      	cmp	r1, r2
 802352a:	d929      	bls.n	8023580 <BnrgmFrndFnProcessFrndRequest+0x98>
 802352c:	fb00 f403 	mul.w	r4, r0, r3
 8023530:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 8023534:	f83c e004 	ldrh.w	lr, [ip, r4]
 8023538:	4596      	cmp	lr, r2
 802353a:	461e      	mov	r6, r3
 802353c:	f103 0301 	add.w	r3, r3, #1
 8023540:	d1f1      	bne.n	8023526 <BnrgmFrndFnProcessFrndRequest+0x3e>
 8023542:	f104 0904 	add.w	r9, r4, #4
 8023546:	442c      	add	r4, r5
 8023548:	44a9      	add	r9, r5
 802354a:	8aa3      	ldrh	r3, [r4, #20]
 802354c:	b123      	cbz	r3, 8023558 <BnrgmFrndFnProcessFrndRequest+0x70>
 802354e:	ee18 0a10 	vmov	r0, s16
 8023552:	4649      	mov	r1, r9
 8023554:	f7ff fd4e 	bl	8022ff4 <BnrgmFrndFnSendFrndClear>
 8023558:	2001      	movs	r0, #1
 802355a:	8921      	ldrh	r1, [r4, #8]
 802355c:	f7e1 fe6c 	bl	8005238 <BLEMesh_FnFriendshipClearedCallback>
 8023560:	2300      	movs	r3, #0
 8023562:	8123      	strh	r3, [r4, #8]
 8023564:	f44f 734d 	mov.w	r3, #820	@ 0x334
 8023568:	fb03 5606 	mla	r6, r3, r6, r5
 802356c:	69b0      	ldr	r0, [r6, #24]
 802356e:	b108      	cbz	r0, 8023574 <BnrgmFrndFnProcessFrndRequest+0x8c>
 8023570:	f7f1 fcf0 	bl	8014f54 <MoblePalTimerDestroy>
 8023574:	f44f 724d 	mov.w	r2, #820	@ 0x334
 8023578:	2100      	movs	r1, #0
 802357a:	4648      	mov	r0, r9
 802357c:	f003 fb28 	bl	8026bd0 <memset>
 8023580:	78aa      	ldrb	r2, [r5, #2]
 8023582:	2600      	movs	r6, #0
 8023584:	f5a5 714b 	sub.w	r1, r5, #812	@ 0x32c
 8023588:	f44f 734d 	mov.w	r3, #820	@ 0x334
 802358c:	fa5f fb86 	uxtb.w	fp, r6
 8023590:	455a      	cmp	r2, fp
 8023592:	d907      	bls.n	80235a4 <BnrgmFrndFnProcessFrndRequest+0xbc>
 8023594:	fb06 3403 	mla	r4, r6, r3, r3
 8023598:	1c70      	adds	r0, r6, #1
 802359a:	5b0c      	ldrh	r4, [r1, r4]
 802359c:	b944      	cbnz	r4, 80235b0 <BnrgmFrndFnProcessFrndRequest+0xc8>
 802359e:	b276      	sxtb	r6, r6
 80235a0:	1c72      	adds	r2, r6, #1
 80235a2:	d107      	bne.n	80235b4 <BnrgmFrndFnProcessFrndRequest+0xcc>
 80235a4:	2001      	movs	r0, #1
 80235a6:	b005      	add	sp, #20
 80235a8:	ecbd 8b02 	vpop	{d8}
 80235ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235b0:	4606      	mov	r6, r0
 80235b2:	e7eb      	b.n	802358c <BnrgmFrndFnProcessFrndRequest+0xa4>
 80235b4:	783a      	ldrb	r2, [r7, #0]
 80235b6:	f3c2 1341 	ubfx	r3, r2, #5, #2
 80235ba:	1e59      	subs	r1, r3, #1
 80235bc:	2902      	cmp	r1, #2
 80235be:	bf98      	it	ls
 80235c0:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
 80235c4:	f3c2 04c1 	ubfx	r4, r2, #3, #2
 80235c8:	bf94      	ite	ls
 80235ca:	330a      	addls	r3, #10
 80235cc:	230a      	movhi	r3, #10
 80235ce:	9300      	str	r3, [sp, #0]
 80235d0:	1e63      	subs	r3, r4, #1
 80235d2:	2b02      	cmp	r3, #2
 80235d4:	bf9a      	itte	ls
 80235d6:	eb04 0484 	addls.w	r4, r4, r4, lsl #2
 80235da:	340a      	addls	r4, #10
 80235dc:	240a      	movhi	r4, #10
 80235de:	0753      	lsls	r3, r2, #29
 80235e0:	d101      	bne.n	80235e6 <BnrgmFrndFnProcessFrndRequest+0xfe>
 80235e2:	2002      	movs	r0, #2
 80235e4:	e7df      	b.n	80235a6 <BnrgmFrndFnProcessFrndRequest+0xbe>
 80235e6:	787a      	ldrb	r2, [r7, #1]
 80235e8:	2a09      	cmp	r2, #9
 80235ea:	d9fa      	bls.n	80235e2 <BnrgmFrndFnProcessFrndRequest+0xfa>
 80235ec:	f44f 734d 	mov.w	r3, #820	@ 0x334
 80235f0:	4373      	muls	r3, r6
 80235f2:	eb05 0a03 	add.w	sl, r5, r3
 80235f6:	2103      	movs	r1, #3
 80235f8:	f88a 2334 	strb.w	r2, [sl, #820]	@ 0x334
 80235fc:	1cb8      	adds	r0, r7, #2
 80235fe:	aa02      	add	r2, sp, #8
 8023600:	9301      	str	r3, [sp, #4]
 8023602:	f7f4 ff25 	bl	8018450 <MobleInputStreamGetBigEndian>
 8023606:	9a02      	ldr	r2, [sp, #8]
 8023608:	492a      	ldr	r1, [pc, #168]	@ (80236b4 <BnrgmFrndFnProcessFrndRequest+0x1cc>)
 802360a:	f1a2 000a 	sub.w	r0, r2, #10
 802360e:	4288      	cmp	r0, r1
 8023610:	d8e7      	bhi.n	80235e2 <BnrgmFrndFnProcessFrndRequest+0xfa>
 8023612:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8023616:	fb09 f202 	mul.w	r2, r9, r2
 802361a:	f8ca 2010 	str.w	r2, [sl, #16]
 802361e:	2102      	movs	r1, #2
 8023620:	aa03      	add	r2, sp, #12
 8023622:	1d78      	adds	r0, r7, #5
 8023624:	f7f4 ff14 	bl	8018450 <MobleInputStreamGetBigEndian>
 8023628:	9903      	ldr	r1, [sp, #12]
 802362a:	f8aa 1014 	strh.w	r1, [sl, #20]
 802362e:	79f9      	ldrb	r1, [r7, #7]
 8023630:	1e48      	subs	r0, r1, #1
 8023632:	2804      	cmp	r0, #4
 8023634:	d8d5      	bhi.n	80235e2 <BnrgmFrndFnProcessFrndRequest+0xfa>
 8023636:	f88a 1333 	strb.w	r1, [sl, #819]	@ 0x333
 802363a:	f107 0008 	add.w	r0, r7, #8
 802363e:	2102      	movs	r1, #2
 8023640:	f7f4 ff06 	bl	8018450 <MobleInputStreamGetBigEndian>
 8023644:	9a03      	ldr	r2, [sp, #12]
 8023646:	f8aa 200a 	strh.w	r2, [sl, #10]
 802364a:	f998 2018 	ldrsb.w	r2, [r8, #24]
 802364e:	9b00      	ldr	r3, [sp, #0]
 8023650:	f44f 714d 	mov.w	r1, #820	@ 0x334
 8023654:	fb01 5606 	mla	r6, r1, r6, r5
 8023658:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 802365c:	fb03 4412 	mls	r4, r3, r2, r4
 8023660:	f886 2332 	strb.w	r2, [r6, #818]	@ 0x332
 8023664:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 8023668:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 802366c:	bfa4      	itt	ge
 802366e:	f04f 090a 	movge.w	r9, #10
 8023672:	fb94 f9f9 	sdivge	r9, r4, r9
 8023676:	f8a6 901c 	strh.w	r9, [r6, #28]
 802367a:	f8aa 2008 	strh.w	r2, [sl, #8]
 802367e:	f898 1042 	ldrb.w	r1, [r8, #66]	@ 0x42
 8023682:	4658      	mov	r0, fp
 8023684:	f7f3 ffe2 	bl	801764c <BnrgmPalCryptoSetFriendshipNetKeyOffset>
 8023688:	9b01      	ldr	r3, [sp, #4]
 802368a:	2201      	movs	r2, #1
 802368c:	ee18 0a10 	vmov	r0, s16
 8023690:	3304      	adds	r3, #4
 8023692:	9210      	str	r2, [sp, #64]	@ 0x40
 8023694:	442b      	add	r3, r5
 8023696:	465a      	mov	r2, fp
 8023698:	4629      	mov	r1, r5
 802369a:	b005      	add	sp, #20
 802369c:	ecbd 8b02 	vpop	{d8}
 80236a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236a4:	f7ff bd94 	b.w	80231d0 <BnrgmFrndFn_FSM>
 80236a8:	0802e4b8 	.word	0x0802e4b8
 80236ac:	0802dbb2 	.word	0x0802dbb2
 80236b0:	0802ea8b 	.word	0x0802ea8b
 80236b4:	00034bb5 	.word	0x00034bb5

080236b8 <BnrgmFrndFnProcess>:
 80236b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80236bc:	2500      	movs	r5, #0
 80236be:	4606      	mov	r6, r0
 80236c0:	460c      	mov	r4, r1
 80236c2:	f44f 774d 	mov.w	r7, #820	@ 0x334
 80236c6:	46a8      	mov	r8, r5
 80236c8:	78a3      	ldrb	r3, [r4, #2]
 80236ca:	b2ea      	uxtb	r2, r5
 80236cc:	4293      	cmp	r3, r2
 80236ce:	d802      	bhi.n	80236d6 <BnrgmFrndFnProcess+0x1e>
 80236d0:	b002      	add	sp, #8
 80236d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80236d6:	fb07 4302 	mla	r3, r7, r2, r4
 80236da:	f8cd 8000 	str.w	r8, [sp]
 80236de:	3304      	adds	r3, #4
 80236e0:	4621      	mov	r1, r4
 80236e2:	4630      	mov	r0, r6
 80236e4:	f7ff fd74 	bl	80231d0 <BnrgmFrndFn_FSM>
 80236e8:	3501      	adds	r5, #1
 80236ea:	e7ed      	b.n	80236c8 <BnrgmFrndFnProcess+0x10>

080236ec <BnrgmFrndMgmtFriendshipProcess>:
 80236ec:	b508      	push	{r3, lr}
 80236ee:	4b0a      	ldr	r3, [pc, #40]	@ (8023718 <BnrgmFrndMgmtFriendshipProcess+0x2c>)
 80236f0:	f893 20be 	ldrb.w	r2, [r3, #190]	@ 0xbe
 80236f4:	2a01      	cmp	r2, #1
 80236f6:	d105      	bne.n	8023704 <BnrgmFrndMgmtFriendshipProcess+0x18>
 80236f8:	4b08      	ldr	r3, [pc, #32]	@ (802371c <BnrgmFrndMgmtFriendshipProcess+0x30>)
 80236fa:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	@ 0xa04
 80236fe:	f7ff ffdb 	bl	80236b8 <BnrgmFrndFnProcess>
 8023702:	bd08      	pop	{r3, pc}
 8023704:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8023708:	2b02      	cmp	r3, #2
 802370a:	d0fa      	beq.n	8023702 <BnrgmFrndMgmtFriendshipProcess+0x16>
 802370c:	4b03      	ldr	r3, [pc, #12]	@ (802371c <BnrgmFrndMgmtFriendshipProcess+0x30>)
 802370e:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	@ 0xa04
 8023712:	f7ed f99d 	bl	8010a50 <BnrgmFrndLpnProcess>
 8023716:	e7f4      	b.n	8023702 <BnrgmFrndMgmtFriendshipProcess+0x16>
 8023718:	20000324 	.word	0x20000324
 802371c:	20002514 	.word	0x20002514

08023720 <MobleStackProcess>:
 8023720:	b510      	push	{r4, lr}
 8023722:	4c11      	ldr	r4, [pc, #68]	@ (8023768 <MobleStackProcess+0x48>)
 8023724:	f894 37ec 	ldrb.w	r3, [r4, #2028]	@ 0x7ec
 8023728:	2b04      	cmp	r3, #4
 802372a:	d01b      	beq.n	8023764 <MobleStackProcess+0x44>
 802372c:	f7f9 f87c 	bl	801c828 <BnrgmTransmitProcess>
 8023730:	f7f4 fe14 	bl	801835c <MoblePalProcess>
 8023734:	f504 60d0 	add.w	r0, r4, #1664	@ 0x680
 8023738:	f7f5 fe4e 	bl	80193d8 <MobleApplicationProcess>
 802373c:	f7f8 fa14 	bl	801bb68 <MobleStackProcessIvUpdate>
 8023740:	f8d4 3680 	ldr.w	r3, [r4, #1664]	@ 0x680
 8023744:	781b      	ldrb	r3, [r3, #0]
 8023746:	b16b      	cbz	r3, 8023764 <MobleStackProcess+0x44>
 8023748:	f894 3934 	ldrb.w	r3, [r4, #2356]	@ 0x934
 802374c:	b153      	cbz	r3, 8023764 <MobleStackProcess+0x44>
 802374e:	f894 37ec 	ldrb.w	r3, [r4, #2028]	@ 0x7ec
 8023752:	2b02      	cmp	r3, #2
 8023754:	d001      	beq.n	802375a <MobleStackProcess+0x3a>
 8023756:	f7e1 fd2f 	bl	80051b8 <BLEMesh_ConfigurationCallback>
 802375a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802375e:	4803      	ldr	r0, [pc, #12]	@ (802376c <MobleStackProcess+0x4c>)
 8023760:	f7ff bfc4 	b.w	80236ec <BnrgmFrndMgmtFriendshipProcess>
 8023764:	bd10      	pop	{r4, pc}
 8023766:	bf00      	nop
 8023768:	2000141c 	.word	0x2000141c
 802376c:	20001a9c 	.word	0x20001a9c

08023770 <MobleLibraryProcess>:
 8023770:	b508      	push	{r3, lr}
 8023772:	4b05      	ldr	r3, [pc, #20]	@ (8023788 <MobleLibraryProcess+0x18>)
 8023774:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	@ 0x6f0
 8023778:	b11b      	cbz	r3, 8023782 <MobleLibraryProcess+0x12>
 802377a:	f7ff ffd1 	bl	8023720 <MobleStackProcess>
 802377e:	2000      	movs	r0, #0
 8023780:	bd08      	pop	{r3, pc}
 8023782:	2002      	movs	r0, #2
 8023784:	e7fc      	b.n	8023780 <MobleLibraryProcess+0x10>
 8023786:	bf00      	nop
 8023788:	20002514 	.word	0x20002514

0802378c <BLEMesh_Process>:
 802378c:	f7ff bff0 	b.w	8023770 <MobleLibraryProcess>

08023790 <BnrgmFrndFnProcessFrndClear>:
 8023790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023794:	b08e      	sub	sp, #56	@ 0x38
 8023796:	461c      	mov	r4, r3
 8023798:	460f      	mov	r7, r1
 802379a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802379c:	4615      	mov	r5, r2
 802379e:	4606      	mov	r6, r0
 80237a0:	b930      	cbnz	r0, 80237b0 <BnrgmFrndFnProcessFrndClear+0x20>
 80237a2:	4b3a      	ldr	r3, [pc, #232]	@ (802388c <BnrgmFrndFnProcessFrndClear+0xfc>)
 80237a4:	4a3a      	ldr	r2, [pc, #232]	@ (8023890 <BnrgmFrndFnProcessFrndClear+0x100>)
 80237a6:	483b      	ldr	r0, [pc, #236]	@ (8023894 <BnrgmFrndFnProcessFrndClear+0x104>)
 80237a8:	f240 3157 	movw	r1, #855	@ 0x357
 80237ac:	f002 fa72 	bl	8025c94 <__assert_func>
 80237b0:	2c00      	cmp	r4, #0
 80237b2:	d068      	beq.n	8023886 <BnrgmFrndFnProcessFrndClear+0xf6>
 80237b4:	2b04      	cmp	r3, #4
 80237b6:	d166      	bne.n	8023886 <BnrgmFrndFnProcessFrndClear+0xf6>
 80237b8:	aa02      	add	r2, sp, #8
 80237ba:	2102      	movs	r1, #2
 80237bc:	4620      	mov	r0, r4
 80237be:	f7f4 fe47 	bl	8018450 <MobleInputStreamGetBigEndian>
 80237c2:	2102      	movs	r1, #2
 80237c4:	1860      	adds	r0, r4, r1
 80237c6:	f8bd a008 	ldrh.w	sl, [sp, #8]
 80237ca:	f7f4 fe41 	bl	8018450 <MobleInputStreamGetBigEndian>
 80237ce:	78a8      	ldrb	r0, [r5, #2]
 80237d0:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 80237d4:	462a      	mov	r2, r5
 80237d6:	2300      	movs	r3, #0
 80237d8:	fa5f f883 	uxtb.w	r8, r3
 80237dc:	4540      	cmp	r0, r8
 80237de:	d90a      	bls.n	80237f6 <BnrgmFrndFnProcessFrndClear+0x66>
 80237e0:	8911      	ldrh	r1, [r2, #8]
 80237e2:	4551      	cmp	r1, sl
 80237e4:	d10b      	bne.n	80237fe <BnrgmFrndFnProcessFrndClear+0x6e>
 80237e6:	8951      	ldrh	r1, [r2, #10]
 80237e8:	eba9 0101 	sub.w	r1, r9, r1
 80237ec:	29ff      	cmp	r1, #255	@ 0xff
 80237ee:	dc06      	bgt.n	80237fe <BnrgmFrndFnProcessFrndClear+0x6e>
 80237f0:	b25c      	sxtb	r4, r3
 80237f2:	1c63      	adds	r3, r4, #1
 80237f4:	d107      	bne.n	8023806 <BnrgmFrndFnProcessFrndClear+0x76>
 80237f6:	2001      	movs	r0, #1
 80237f8:	b00e      	add	sp, #56	@ 0x38
 80237fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80237fe:	3301      	adds	r3, #1
 8023800:	f502 724d 	add.w	r2, r2, #820	@ 0x334
 8023804:	e7e8      	b.n	80237d8 <BnrgmFrndFnProcessFrndClear+0x48>
 8023806:	f44f 734d 	mov.w	r3, #820	@ 0x334
 802380a:	435c      	muls	r4, r3
 802380c:	f104 0a04 	add.w	sl, r4, #4
 8023810:	442c      	add	r4, r5
 8023812:	2228      	movs	r2, #40	@ 0x28
 8023814:	2100      	movs	r1, #0
 8023816:	a804      	add	r0, sp, #16
 8023818:	f003 f9da 	bl	8026bd0 <memset>
 802381c:	8921      	ldrh	r1, [r4, #8]
 802381e:	2202      	movs	r2, #2
 8023820:	a803      	add	r0, sp, #12
 8023822:	f7f4 fe3c 	bl	801849e <MobleOutputStreamPutBigEndian>
 8023826:	2310      	movs	r3, #16
 8023828:	2202      	movs	r2, #2
 802382a:	4649      	mov	r1, r9
 802382c:	f10d 000e 	add.w	r0, sp, #14
 8023830:	f7f4 fe35 	bl	801849e <MobleOutputStreamPutBigEndian>
 8023834:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8023838:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
 802383c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8023840:	8abb      	ldrh	r3, [r7, #20]
 8023842:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8023846:	7bfb      	ldrb	r3, [r7, #15]
 8023848:	4a13      	ldr	r2, [pc, #76]	@ (8023898 <BnrgmFrndFnProcessFrndClear+0x108>)
 802384a:	44aa      	add	sl, r5
 802384c:	b10b      	cbz	r3, 8023852 <BnrgmFrndFnProcessFrndClear+0xc2>
 802384e:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 8023852:	f88d 301f 	strb.w	r3, [sp, #31]
 8023856:	f892 30b6 	ldrb.w	r3, [r2, #182]	@ 0xb6
 802385a:	3301      	adds	r3, #1
 802385c:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8023860:	2304      	movs	r3, #4
 8023862:	9300      	str	r3, [sp, #0]
 8023864:	a904      	add	r1, sp, #16
 8023866:	ab03      	add	r3, sp, #12
 8023868:	2206      	movs	r2, #6
 802386a:	4630      	mov	r0, r6
 802386c:	f7ff fa4a 	bl	8022d04 <MobleTransSendControl>
 8023870:	2306      	movs	r3, #6
 8023872:	9316      	str	r3, [sp, #88]	@ 0x58
 8023874:	4642      	mov	r2, r8
 8023876:	4653      	mov	r3, sl
 8023878:	4629      	mov	r1, r5
 802387a:	4630      	mov	r0, r6
 802387c:	b00e      	add	sp, #56	@ 0x38
 802387e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023882:	f7ff bca5 	b.w	80231d0 <BnrgmFrndFn_FSM>
 8023886:	2002      	movs	r0, #2
 8023888:	e7b6      	b.n	80237f8 <BnrgmFrndFnProcessFrndClear+0x68>
 802388a:	bf00      	nop
 802388c:	0802e4b8 	.word	0x0802e4b8
 8023890:	0802dbd0 	.word	0x0802dbd0
 8023894:	0802ea8b 	.word	0x0802ea8b
 8023898:	20000324 	.word	0x20000324

0802389c <BnrgmFrndFnProcessFrndSubscrListRem>:
 802389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238a0:	b087      	sub	sp, #28
 80238a2:	4614      	mov	r4, r2
 80238a4:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80238a6:	4699      	mov	r9, r3
 80238a8:	4682      	mov	sl, r0
 80238aa:	b930      	cbnz	r0, 80238ba <BnrgmFrndFnProcessFrndSubscrListRem+0x1e>
 80238ac:	4b2e      	ldr	r3, [pc, #184]	@ (8023968 <BnrgmFrndFnProcessFrndSubscrListRem+0xcc>)
 80238ae:	4a2f      	ldr	r2, [pc, #188]	@ (802396c <BnrgmFrndFnProcessFrndSubscrListRem+0xd0>)
 80238b0:	482f      	ldr	r0, [pc, #188]	@ (8023970 <BnrgmFrndFnProcessFrndSubscrListRem+0xd4>)
 80238b2:	f240 4114 	movw	r1, #1044	@ 0x414
 80238b6:	f002 f9ed 	bl	8025c94 <__assert_func>
 80238ba:	2b00      	cmp	r3, #0
 80238bc:	d052      	beq.n	8023964 <BnrgmFrndFnProcessFrndSubscrListRem+0xc8>
 80238be:	2f02      	cmp	r7, #2
 80238c0:	d950      	bls.n	8023964 <BnrgmFrndFnProcessFrndSubscrListRem+0xc8>
 80238c2:	07fa      	lsls	r2, r7, #31
 80238c4:	d54e      	bpl.n	8023964 <BnrgmFrndFnProcessFrndSubscrListRem+0xc8>
 80238c6:	8a89      	ldrh	r1, [r1, #20]
 80238c8:	4620      	mov	r0, r4
 80238ca:	f7f7 fd90 	bl	801b3ee <BnrgmFrndFnGetLpnOffset>
 80238ce:	1c43      	adds	r3, r0, #1
 80238d0:	4606      	mov	r6, r0
 80238d2:	d047      	beq.n	8023964 <BnrgmFrndFnProcessFrndSubscrListRem+0xc8>
 80238d4:	f44f 754d 	mov.w	r5, #820	@ 0x334
 80238d8:	4345      	muls	r5, r0
 80238da:	1963      	adds	r3, r4, r5
 80238dc:	f899 b000 	ldrb.w	fp, [r9]
 80238e0:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80238e4:	455b      	cmp	r3, fp
 80238e6:	d02a      	beq.n	802393e <BnrgmFrndFnProcessFrndSubscrListRem+0xa2>
 80238e8:	087b      	lsrs	r3, r7, #1
 80238ea:	351c      	adds	r5, #28
 80238ec:	2700      	movs	r7, #0
 80238ee:	9303      	str	r3, [sp, #12]
 80238f0:	4425      	add	r5, r4
 80238f2:	46b8      	mov	r8, r7
 80238f4:	2102      	movs	r1, #2
 80238f6:	fb01 9008 	mla	r0, r1, r8, r9
 80238fa:	aa05      	add	r2, sp, #20
 80238fc:	3001      	adds	r0, #1
 80238fe:	f7f4 fda7 	bl	8018450 <MobleInputStreamGetBigEndian>
 8023902:	f8bd c014 	ldrh.w	ip, [sp, #20]
 8023906:	4629      	mov	r1, r5
 8023908:	2206      	movs	r2, #6
 802390a:	2300      	movs	r3, #0
 802390c:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 8023910:	b328      	cbz	r0, 802395e <BnrgmFrndFnProcessFrndSubscrListRem+0xc2>
 8023912:	4584      	cmp	ip, r0
 8023914:	d100      	bne.n	8023918 <BnrgmFrndFnProcessFrndSubscrListRem+0x7c>
 8023916:	800b      	strh	r3, [r1, #0]
 8023918:	3a01      	subs	r2, #1
 802391a:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 802391e:	d1f5      	bne.n	802390c <BnrgmFrndFnProcessFrndSubscrListRem+0x70>
 8023920:	2f06      	cmp	r7, #6
 8023922:	d006      	beq.n	8023932 <BnrgmFrndFnProcessFrndSubscrListRem+0x96>
 8023924:	9a03      	ldr	r2, [sp, #12]
 8023926:	f108 0801 	add.w	r8, r8, #1
 802392a:	fa5f f888 	uxtb.w	r8, r8
 802392e:	4590      	cmp	r8, r2
 8023930:	d3e0      	bcc.n	80238f4 <BnrgmFrndFnProcessFrndSubscrListRem+0x58>
 8023932:	f44f 734d 	mov.w	r3, #820	@ 0x334
 8023936:	fb03 4306 	mla	r3, r3, r6, r4
 802393a:	f883 b336 	strb.w	fp, [r3, #822]	@ 0x336
 802393e:	f44f 734d 	mov.w	r3, #820	@ 0x334
 8023942:	2205      	movs	r2, #5
 8023944:	fb03 4306 	mla	r3, r3, r6, r4
 8023948:	9200      	str	r2, [sp, #0]
 802394a:	3304      	adds	r3, #4
 802394c:	b2f2      	uxtb	r2, r6
 802394e:	4621      	mov	r1, r4
 8023950:	4650      	mov	r0, sl
 8023952:	f7ff fc3d 	bl	80231d0 <BnrgmFrndFn_FSM>
 8023956:	2000      	movs	r0, #0
 8023958:	b007      	add	sp, #28
 802395a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802395e:	3701      	adds	r7, #1
 8023960:	b2ff      	uxtb	r7, r7
 8023962:	e7d9      	b.n	8023918 <BnrgmFrndFnProcessFrndSubscrListRem+0x7c>
 8023964:	2002      	movs	r0, #2
 8023966:	e7f7      	b.n	8023958 <BnrgmFrndFnProcessFrndSubscrListRem+0xbc>
 8023968:	0802e4b8 	.word	0x0802e4b8
 802396c:	0802dbec 	.word	0x0802dbec
 8023970:	0802ea8b 	.word	0x0802ea8b

08023974 <BnrgmFrndFnProcessFrndSubscrListAdd>:
 8023974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023978:	b087      	sub	sp, #28
 802397a:	4614      	mov	r4, r2
 802397c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 802397e:	4698      	mov	r8, r3
 8023980:	4681      	mov	r9, r0
 8023982:	b930      	cbnz	r0, 8023992 <BnrgmFrndFnProcessFrndSubscrListAdd+0x1e>
 8023984:	4b32      	ldr	r3, [pc, #200]	@ (8023a50 <BnrgmFrndFnProcessFrndSubscrListAdd+0xdc>)
 8023986:	4a33      	ldr	r2, [pc, #204]	@ (8023a54 <BnrgmFrndFnProcessFrndSubscrListAdd+0xe0>)
 8023988:	4833      	ldr	r0, [pc, #204]	@ (8023a58 <BnrgmFrndFnProcessFrndSubscrListAdd+0xe4>)
 802398a:	f240 31c1 	movw	r1, #961	@ 0x3c1
 802398e:	f002 f981 	bl	8025c94 <__assert_func>
 8023992:	2b00      	cmp	r3, #0
 8023994:	d05a      	beq.n	8023a4c <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 8023996:	2f02      	cmp	r7, #2
 8023998:	d958      	bls.n	8023a4c <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 802399a:	07f8      	lsls	r0, r7, #31
 802399c:	d556      	bpl.n	8023a4c <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 802399e:	4610      	mov	r0, r2
 80239a0:	8a89      	ldrh	r1, [r1, #20]
 80239a2:	f7f7 fd24 	bl	801b3ee <BnrgmFrndFnGetLpnOffset>
 80239a6:	1c42      	adds	r2, r0, #1
 80239a8:	4605      	mov	r5, r0
 80239aa:	d04f      	beq.n	8023a4c <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 80239ac:	f44f 764d 	mov.w	r6, #820	@ 0x334
 80239b0:	4346      	muls	r6, r0
 80239b2:	19a3      	adds	r3, r4, r6
 80239b4:	f898 b000 	ldrb.w	fp, [r8]
 80239b8:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80239bc:	455b      	cmp	r3, fp
 80239be:	d033      	beq.n	8023a28 <BnrgmFrndFnProcessFrndSubscrListAdd+0xb4>
 80239c0:	087b      	lsrs	r3, r7, #1
 80239c2:	361c      	adds	r6, #28
 80239c4:	f44f 7acd 	mov.w	sl, #410	@ 0x19a
 80239c8:	9303      	str	r3, [sp, #12]
 80239ca:	4426      	add	r6, r4
 80239cc:	2700      	movs	r7, #0
 80239ce:	fb0a fa00 	mul.w	sl, sl, r0
 80239d2:	2102      	movs	r1, #2
 80239d4:	fb01 8007 	mla	r0, r1, r7, r8
 80239d8:	aa05      	add	r2, sp, #20
 80239da:	3001      	adds	r0, #1
 80239dc:	f7f4 fd38 	bl	8018450 <MobleInputStreamGetBigEndian>
 80239e0:	2300      	movs	r3, #0
 80239e2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 80239e6:	46b4      	mov	ip, r6
 80239e8:	4619      	mov	r1, r3
 80239ea:	f04f 32ff 	mov.w	r2, #4294967295
 80239ee:	f83c ef02 	ldrh.w	lr, [ip, #2]!
 80239f2:	f1be 0f00 	cmp.w	lr, #0
 80239f6:	d027      	beq.n	8023a48 <BnrgmFrndFnProcessFrndSubscrListAdd+0xd4>
 80239f8:	4570      	cmp	r0, lr
 80239fa:	bf08      	it	eq
 80239fc:	2101      	moveq	r1, #1
 80239fe:	3301      	adds	r3, #1
 8023a00:	2b06      	cmp	r3, #6
 8023a02:	d1f4      	bne.n	80239ee <BnrgmFrndFnProcessFrndSubscrListAdd+0x7a>
 8023a04:	1c53      	adds	r3, r2, #1
 8023a06:	d009      	beq.n	8023a1c <BnrgmFrndFnProcessFrndSubscrListAdd+0xa8>
 8023a08:	b919      	cbnz	r1, 8023a12 <BnrgmFrndFnProcessFrndSubscrListAdd+0x9e>
 8023a0a:	4452      	add	r2, sl
 8023a0c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8023a10:	83d0      	strh	r0, [r2, #30]
 8023a12:	9b03      	ldr	r3, [sp, #12]
 8023a14:	3701      	adds	r7, #1
 8023a16:	b2ff      	uxtb	r7, r7
 8023a18:	429f      	cmp	r7, r3
 8023a1a:	d3da      	bcc.n	80239d2 <BnrgmFrndFnProcessFrndSubscrListAdd+0x5e>
 8023a1c:	f44f 734d 	mov.w	r3, #820	@ 0x334
 8023a20:	fb03 4305 	mla	r3, r3, r5, r4
 8023a24:	f883 b336 	strb.w	fp, [r3, #822]	@ 0x336
 8023a28:	f44f 734d 	mov.w	r3, #820	@ 0x334
 8023a2c:	2204      	movs	r2, #4
 8023a2e:	fb03 4305 	mla	r3, r3, r5, r4
 8023a32:	9200      	str	r2, [sp, #0]
 8023a34:	4413      	add	r3, r2
 8023a36:	4621      	mov	r1, r4
 8023a38:	b2ea      	uxtb	r2, r5
 8023a3a:	4648      	mov	r0, r9
 8023a3c:	f7ff fbc8 	bl	80231d0 <BnrgmFrndFn_FSM>
 8023a40:	2000      	movs	r0, #0
 8023a42:	b007      	add	sp, #28
 8023a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a48:	b25a      	sxtb	r2, r3
 8023a4a:	e7d8      	b.n	80239fe <BnrgmFrndFnProcessFrndSubscrListAdd+0x8a>
 8023a4c:	2002      	movs	r0, #2
 8023a4e:	e7f8      	b.n	8023a42 <BnrgmFrndFnProcessFrndSubscrListAdd+0xce>
 8023a50:	0802e4b8 	.word	0x0802e4b8
 8023a54:	0802dc10 	.word	0x0802dc10
 8023a58:	0802ea8b 	.word	0x0802ea8b

08023a5c <MobleTransSarSendAck.isra.0>:
 8023a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023a60:	b090      	sub	sp, #64	@ 0x40
 8023a62:	2500      	movs	r5, #0
 8023a64:	4606      	mov	r6, r0
 8023a66:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8023a68:	9500      	str	r5, [sp, #0]
 8023a6a:	f8ad 5004 	strh.w	r5, [sp, #4]
 8023a6e:	f88d 5006 	strb.w	r5, [sp, #6]
 8023a72:	f7f1 f817 	bl	8014aa4 <htobe32>
 8023a76:	460c      	mov	r4, r1
 8023a78:	4690      	mov	r8, r2
 8023a7a:	4682      	mov	sl, r0
 8023a7c:	2228      	movs	r2, #40	@ 0x28
 8023a7e:	4629      	mov	r1, r5
 8023a80:	a806      	add	r0, sp, #24
 8023a82:	461f      	mov	r7, r3
 8023a84:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 8023a88:	f003 f8a2 	bl	8026bd0 <memset>
 8023a8c:	2302      	movs	r3, #2
 8023a8e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8023a92:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 8023a96:	f88d 300b 	strb.w	r3, [sp, #11]
 8023a9a:	a802      	add	r0, sp, #8
 8023a9c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8023aa0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8023aa4:	4669      	mov	r1, sp
 8023aa6:	f88d 500a 	strb.w	r5, [sp, #10]
 8023aaa:	f7f5 fe05 	bl	80196b8 <MobleTransportRenderHdr>
 8023aae:	2308      	movs	r3, #8
 8023ab0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8023ab4:	4b17      	ldr	r3, [pc, #92]	@ (8023b14 <MobleTransSarSendAck.isra.0+0xb8>)
 8023ab6:	f8cd a003 	str.w	sl, [sp, #3]
 8023aba:	f893 20b5 	ldrb.w	r2, [r3, #181]	@ 0xb5
 8023abe:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8023ac2:	f88d 2027 	strb.w	r2, [sp, #39]	@ 0x27
 8023ac6:	3301      	adds	r3, #1
 8023ac8:	4648      	mov	r0, r9
 8023aca:	f88d 303b 	strb.w	r3, [sp, #59]	@ 0x3b
 8023ace:	f8ad 402e 	strh.w	r4, [sp, #46]	@ 0x2e
 8023ad2:	f8ad 802c 	strh.w	r8, [sp, #44]	@ 0x2c
 8023ad6:	f7f3 ff49 	bl	801796c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8023ada:	f88d 0034 	strb.w	r0, [sp, #52]	@ 0x34
 8023ade:	4638      	mov	r0, r7
 8023ae0:	f7f3 ff5e 	bl	80179a0 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 8023ae4:	6833      	ldr	r3, [r6, #0]
 8023ae6:	f88d 0035 	strb.w	r0, [sp, #53]	@ 0x35
 8023aea:	885a      	ldrh	r2, [r3, #2]
 8023aec:	f8ad 9036 	strh.w	r9, [sp, #54]	@ 0x36
 8023af0:	4294      	cmp	r4, r2
 8023af2:	f8ad 7038 	strh.w	r7, [sp, #56]	@ 0x38
 8023af6:	d303      	bcc.n	8023b00 <MobleTransSarSendAck.isra.0+0xa4>
 8023af8:	7f1b      	ldrb	r3, [r3, #28]
 8023afa:	4413      	add	r3, r2
 8023afc:	429c      	cmp	r4, r3
 8023afe:	db05      	blt.n	8023b0c <MobleTransSarSendAck.isra.0+0xb0>
 8023b00:	2307      	movs	r3, #7
 8023b02:	466a      	mov	r2, sp
 8023b04:	a906      	add	r1, sp, #24
 8023b06:	4630      	mov	r0, r6
 8023b08:	f7fb fd7e 	bl	801f608 <MobleNetworkSendData>
 8023b0c:	b010      	add	sp, #64	@ 0x40
 8023b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b12:	bf00      	nop
 8023b14:	20000324 	.word	0x20000324

08023b18 <MobleTransSarAssemble>:
 8023b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b1c:	b0b9      	sub	sp, #228	@ 0xe4
 8023b1e:	460c      	mov	r4, r1
 8023b20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023b22:	6909      	ldr	r1, [r1, #16]
 8023b24:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8023db0 <MobleTransSarAssemble+0x298>
 8023b28:	4615      	mov	r5, r2
 8023b2a:	8892      	ldrh	r2, [r2, #4]
 8023b2c:	f421 53ff 	bic.w	r3, r1, #8160	@ 0x1fe0
 8023b30:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8023b34:	428a      	cmp	r2, r1
 8023b36:	f023 031f 	bic.w	r3, r3, #31
 8023b3a:	4413      	add	r3, r2
 8023b3c:	bf94      	ite	ls
 8023b3e:	2200      	movls	r2, #0
 8023b40:	2201      	movhi	r2, #1
 8023b42:	eba3 3342 	sub.w	r3, r3, r2, lsl #13
 8023b46:	4606      	mov	r6, r0
 8023b48:	f8b8 094c 	ldrh.w	r0, [r8, #2380]	@ 0x94c
 8023b4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8023b4e:	f7f4 faeb 	bl	8018128 <MobleMemAlloc>
 8023b52:	4607      	mov	r7, r0
 8023b54:	b150      	cbz	r0, 8023b6c <MobleTransSarAssemble+0x54>
 8023b56:	f8b8 094e 	ldrh.w	r0, [r8, #2382]	@ 0x94e
 8023b5a:	f7f4 fae5 	bl	8018128 <MobleMemAlloc>
 8023b5e:	9008      	str	r0, [sp, #32]
 8023b60:	2800      	cmp	r0, #0
 8023b62:	f040 8120 	bne.w	8023da6 <MobleTransSarAssemble+0x28e>
 8023b66:	4638      	mov	r0, r7
 8023b68:	f7f4 fb68 	bl	801823c <MobleMemFree>
 8023b6c:	2302      	movs	r3, #2
 8023b6e:	e085      	b.n	8023c7c <MobleTransSarAssemble+0x164>
 8023b70:	79aa      	ldrb	r2, [r5, #6]
 8023b72:	454a      	cmp	r2, r9
 8023b74:	d142      	bne.n	8023bfc <MobleTransSarAssemble+0xe4>
 8023b76:	a938      	add	r1, sp, #224	@ 0xe0
 8023b78:	eb01 0189 	add.w	r1, r1, r9, lsl #2
 8023b7c:	6922      	ldr	r2, [r4, #16]
 8023b7e:	f841 2c8c 	str.w	r2, [r1, #-140]
 8023b82:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023b84:	f8dd a108 	ldr.w	sl, [sp, #264]	@ 0x108
 8023b88:	2a00      	cmp	r2, #0
 8023b8a:	f000 80ff 	beq.w	8023d8c <MobleTransSarAssemble+0x274>
 8023b8e:	4611      	mov	r1, r2
 8023b90:	4652      	mov	r2, sl
 8023b92:	eb07 000b 	add.w	r0, r7, fp
 8023b96:	f003 f8cc 	bl	8026d32 <memcpy>
 8023b9a:	79ea      	ldrb	r2, [r5, #7]
 8023b9c:	454a      	cmp	r2, r9
 8023b9e:	44d3      	add	fp, sl
 8023ba0:	f109 0301 	add.w	r3, r9, #1
 8023ba4:	f040 80fb 	bne.w	8023d9e <MobleTransSarAssemble+0x286>
 8023ba8:	68f3      	ldr	r3, [r6, #12]
 8023baa:	3b01      	subs	r3, #1
 8023bac:	60f3      	str	r3, [r6, #12]
 8023bae:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8023bb2:	f413 7800 	ands.w	r8, r3, #512	@ 0x200
 8023bb6:	f000 80a1 	beq.w	8023cfc <MobleTransSarAssemble+0x1e4>
 8023bba:	7ba3      	ldrb	r3, [r4, #14]
 8023bbc:	2b00      	cmp	r3, #0
 8023bbe:	d048      	beq.n	8023c52 <MobleTransSarAssemble+0x13a>
 8023bc0:	2200      	movs	r2, #0
 8023bc2:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023bc6:	2b00      	cmp	r3, #0
 8023bc8:	dd16      	ble.n	8023bf8 <MobleTransSarAssemble+0xe0>
 8023bca:	b112      	cbz	r2, 8023bd2 <MobleTransSarAssemble+0xba>
 8023bcc:	6833      	ldr	r3, [r6, #0]
 8023bce:	885b      	ldrh	r3, [r3, #2]
 8023bd0:	82e3      	strh	r3, [r4, #22]
 8023bd2:	79e9      	ldrb	r1, [r5, #7]
 8023bd4:	2301      	movs	r3, #1
 8023bd6:	3101      	adds	r1, #1
 8023bd8:	408b      	lsls	r3, r1
 8023bda:	3b01      	subs	r3, #1
 8023bdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8023be0:	88ab      	ldrh	r3, [r5, #4]
 8023be2:	9301      	str	r3, [sp, #4]
 8023be4:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 8023be8:	9300      	str	r3, [sp, #0]
 8023bea:	8ae2      	ldrh	r2, [r4, #22]
 8023bec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8023bf0:	8aa1      	ldrh	r1, [r4, #20]
 8023bf2:	4630      	mov	r0, r6
 8023bf4:	f7ff ff32 	bl	8023a5c <MobleTransSarSendAck.isra.0>
 8023bf8:	2300      	movs	r3, #0
 8023bfa:	e037      	b.n	8023c6c <MobleTransSarAssemble+0x154>
 8023bfc:	222c      	movs	r2, #44	@ 0x2c
 8023bfe:	435a      	muls	r2, r3
 8023c00:	9209      	str	r2, [sp, #36]	@ 0x24
 8023c02:	f8d8 c2e0 	ldr.w	ip, [r8, #736]	@ 0x2e0
 8023c06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023c08:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8023c0c:	4462      	add	r2, ip
 8023c0e:	2900      	cmp	r1, #0
 8023c10:	f000 80bd 	beq.w	8023d8e <MobleTransSarAssemble+0x276>
 8023c14:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 8023c18:	8aa1      	ldrh	r1, [r4, #20]
 8023c1a:	458e      	cmp	lr, r1
 8023c1c:	f040 80b7 	bne.w	8023d8e <MobleTransSarAssemble+0x276>
 8023c20:	6851      	ldr	r1, [r2, #4]
 8023c22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8023c24:	4281      	cmp	r1, r0
 8023c26:	f040 80b2 	bne.w	8023d8e <MobleTransSarAssemble+0x276>
 8023c2a:	7c91      	ldrb	r1, [r2, #18]
 8023c2c:	4549      	cmp	r1, r9
 8023c2e:	f040 80ae 	bne.w	8023d8e <MobleTransSarAssemble+0x276>
 8023c32:	ab38      	add	r3, sp, #224	@ 0xe0
 8023c34:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8023c38:	f8d2 a028 	ldr.w	sl, [r2, #40]	@ 0x28
 8023c3c:	f102 0115 	add.w	r1, r2, #21
 8023c40:	6892      	ldr	r2, [r2, #8]
 8023c42:	f843 2c8c 	str.w	r2, [r3, #-140]
 8023c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023c48:	f04f 0300 	mov.w	r3, #0
 8023c4c:	f80c 3002 	strb.w	r3, [ip, r2]
 8023c50:	e79e      	b.n	8023b90 <MobleTransSarAssemble+0x78>
 8023c52:	6832      	ldr	r2, [r6, #0]
 8023c54:	f892 a01c 	ldrb.w	sl, [r2, #28]
 8023c58:	8aa2      	ldrh	r2, [r4, #20]
 8023c5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8023c5c:	4698      	mov	r8, r3
 8023c5e:	2302      	movs	r3, #2
 8023c60:	fa5f f288 	uxtb.w	r2, r8
 8023c64:	4552      	cmp	r2, sl
 8023c66:	d30d      	bcc.n	8023c84 <MobleTransSarAssemble+0x16c>
 8023c68:	2b01      	cmp	r3, #1
 8023c6a:	d035      	beq.n	8023cd8 <MobleTransSarAssemble+0x1c0>
 8023c6c:	4638      	mov	r0, r7
 8023c6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023c70:	f7f4 fae4 	bl	801823c <MobleMemFree>
 8023c74:	9808      	ldr	r0, [sp, #32]
 8023c76:	f7f4 fae1 	bl	801823c <MobleMemFree>
 8023c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023c7c:	4618      	mov	r0, r3
 8023c7e:	b039      	add	sp, #228	@ 0xe4
 8023c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c84:	f894 0042 	ldrb.w	r0, [r4, #66]	@ 0x42
 8023c88:	8aa2      	ldrh	r2, [r4, #20]
 8023c8a:	f7fb f909 	bl	801eea0 <MobleConfigModel_KR_UseNewKeyDec>
 8023c8e:	6833      	ldr	r3, [r6, #0]
 8023c90:	f895 c001 	ldrb.w	ip, [r5, #1]
 8023c94:	9005      	str	r0, [sp, #20]
 8023c96:	330c      	adds	r3, #12
 8023c98:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8023c9c:	9b08      	ldr	r3, [sp, #32]
 8023c9e:	78a9      	ldrb	r1, [r5, #2]
 8023ca0:	9702      	str	r7, [sp, #8]
 8023ca2:	e9cd b303 	strd	fp, r3, [sp, #12]
 8023ca6:	fa12 f288 	uxtah	r2, r2, r8
 8023caa:	8ae3      	ldrh	r3, [r4, #22]
 8023cac:	b292      	uxth	r2, r2
 8023cae:	f1bc 0000 	subs.w	r0, ip, #0
 8023cb2:	e9cd 2300 	strd	r2, r3, [sp]
 8023cb6:	bf18      	it	ne
 8023cb8:	2001      	movne	r0, #1
 8023cba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023cbc:	78ea      	ldrb	r2, [r5, #3]
 8023cbe:	f7f4 fff9 	bl	8018cb4 <MoblePalCryptoDecryptApp>
 8023cc2:	fa1f f988 	uxth.w	r9, r8
 8023cc6:	4603      	mov	r3, r0
 8023cc8:	f108 0801 	add.w	r8, r8, #1
 8023ccc:	2800      	cmp	r0, #0
 8023cce:	d1c7      	bne.n	8023c60 <MobleTransSarAssemble+0x148>
 8023cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023cd2:	4499      	add	r9, r3
 8023cd4:	f8a4 9014 	strh.w	r9, [r4, #20]
 8023cd8:	78eb      	ldrb	r3, [r5, #3]
 8023cda:	2b00      	cmp	r3, #0
 8023cdc:	bf14      	ite	ne
 8023cde:	2308      	movne	r3, #8
 8023ce0:	2304      	moveq	r3, #4
 8023ce2:	ebab 0303 	sub.w	r3, fp, r3
 8023ce6:	9300      	str	r3, [sp, #0]
 8023ce8:	462a      	mov	r2, r5
 8023cea:	9b08      	ldr	r3, [sp, #32]
 8023cec:	4621      	mov	r1, r4
 8023cee:	4630      	mov	r0, r6
 8023cf0:	f7f5 f94c 	bl	8018f8c <MobleApplicationProcessPacket>
 8023cf4:	2801      	cmp	r0, #1
 8023cf6:	4603      	mov	r3, r0
 8023cf8:	d8b8      	bhi.n	8023c6c <MobleTransSarAssemble+0x154>
 8023cfa:	e761      	b.n	8023bc0 <MobleTransSarAssemble+0xa8>
 8023cfc:	055b      	lsls	r3, r3, #21
 8023cfe:	f57f af5f 	bpl.w	8023bc0 <MobleTransSarAssemble+0xa8>
 8023d02:	2301      	movs	r3, #1
 8023d04:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8023d08:	78eb      	ldrb	r3, [r5, #3]
 8023d0a:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
 8023d0e:	78ab      	ldrb	r3, [r5, #2]
 8023d10:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8023d14:	786b      	ldrb	r3, [r5, #1]
 8023d16:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
 8023d1a:	224c      	movs	r2, #76	@ 0x4c
 8023d1c:	88ab      	ldrh	r3, [r5, #4]
 8023d1e:	f88d 903c 	strb.w	r9, [sp, #60]	@ 0x3c
 8023d22:	4621      	mov	r1, r4
 8023d24:	a825      	add	r0, sp, #148	@ 0x94
 8023d26:	f8ad 3039 	strh.w	r3, [sp, #57]	@ 0x39
 8023d2a:	f003 f802 	bl	8026d32 <memcpy>
 8023d2e:	46c1      	mov	r9, r8
 8023d30:	fa5f fa88 	uxtb.w	sl, r8
 8023d34:	a911      	add	r1, sp, #68	@ 0x44
 8023d36:	a80d      	add	r0, sp, #52	@ 0x34
 8023d38:	f88d a03b 	strb.w	sl, [sp, #59]	@ 0x3b
 8023d3c:	f7f5 fcbc 	bl	80196b8 <MobleTransportRenderHdr>
 8023d40:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 8023d44:	fb19 fa0a 	smulbb	sl, r9, sl
 8023d48:	4543      	cmp	r3, r8
 8023d4a:	fa5f fa8a 	uxtb.w	sl, sl
 8023d4e:	ab15      	add	r3, sp, #84	@ 0x54
 8023d50:	bf0c      	ite	eq
 8023d52:	ebab 090a 	subeq.w	r9, fp, sl
 8023d56:	f04f 090c 	movne.w	r9, #12
 8023d5a:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8023d5e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8023d60:	464a      	mov	r2, r9
 8023d62:	eb07 010a 	add.w	r1, r7, sl
 8023d66:	a812      	add	r0, sp, #72	@ 0x48
 8023d68:	f002 ffe3 	bl	8026d32 <memcpy>
 8023d6c:	f109 0304 	add.w	r3, r9, #4
 8023d70:	9300      	str	r3, [sp, #0]
 8023d72:	aa0d      	add	r2, sp, #52	@ 0x34
 8023d74:	ab11      	add	r3, sp, #68	@ 0x44
 8023d76:	a925      	add	r1, sp, #148	@ 0x94
 8023d78:	4630      	mov	r0, r6
 8023d7a:	f7f7 fd25 	bl	801b7c8 <BnrgmFrndMgmtQueLpnPkt>
 8023d7e:	79eb      	ldrb	r3, [r5, #7]
 8023d80:	f108 0801 	add.w	r8, r8, #1
 8023d84:	4543      	cmp	r3, r8
 8023d86:	dad3      	bge.n	8023d30 <MobleTransSarAssemble+0x218>
 8023d88:	2201      	movs	r2, #1
 8023d8a:	e71a      	b.n	8023bc2 <MobleTransSarAssemble+0xaa>
 8023d8c:	3b01      	subs	r3, #1
 8023d8e:	3301      	adds	r3, #1
 8023d90:	f898 22dc 	ldrb.w	r2, [r8, #732]	@ 0x2dc
 8023d94:	429a      	cmp	r2, r3
 8023d96:	f73f aeeb 	bgt.w	8023b70 <MobleTransSarAssemble+0x58>
 8023d9a:	2302      	movs	r3, #2
 8023d9c:	e766      	b.n	8023c6c <MobleTransSarAssemble+0x154>
 8023d9e:	4699      	mov	r9, r3
 8023da0:	f04f 33ff 	mov.w	r3, #4294967295
 8023da4:	e7f3      	b.n	8023d8e <MobleTransSarAssemble+0x276>
 8023da6:	2300      	movs	r3, #0
 8023da8:	469b      	mov	fp, r3
 8023daa:	4699      	mov	r9, r3
 8023dac:	e7f0      	b.n	8023d90 <MobleTransSarAssemble+0x278>
 8023dae:	bf00      	nop
 8023db0:	2000141c 	.word	0x2000141c

08023db4 <MobleTransSarProcessSeg>:
 8023db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023db8:	ed2d 8b02 	vpush	{d8}
 8023dbc:	b089      	sub	sp, #36	@ 0x24
 8023dbe:	ee08 3a10 	vmov	s16, r3
 8023dc2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023dc4:	9305      	str	r3, [sp, #20]
 8023dc6:	460c      	mov	r4, r1
 8023dc8:	6909      	ldr	r1, [r1, #16]
 8023dca:	4616      	mov	r6, r2
 8023dcc:	8892      	ldrh	r2, [r2, #4]
 8023dce:	f421 58ff 	bic.w	r8, r1, #8160	@ 0x1fe0
 8023dd2:	f3c1 050c 	ubfx	r5, r1, #0, #13
 8023dd6:	42aa      	cmp	r2, r5
 8023dd8:	f028 081f 	bic.w	r8, r8, #31
 8023ddc:	4490      	add	r8, r2
 8023dde:	bf94      	ite	ls
 8023de0:	2200      	movls	r2, #0
 8023de2:	2201      	movhi	r2, #1
 8023de4:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
 8023de8:	4681      	mov	r9, r0
 8023dea:	b930      	cbnz	r0, 8023dfa <MobleTransSarProcessSeg+0x46>
 8023dec:	4bb4      	ldr	r3, [pc, #720]	@ (80240c0 <MobleTransSarProcessSeg+0x30c>)
 8023dee:	4ab5      	ldr	r2, [pc, #724]	@ (80240c4 <MobleTransSarProcessSeg+0x310>)
 8023df0:	48b5      	ldr	r0, [pc, #724]	@ (80240c8 <MobleTransSarProcessSeg+0x314>)
 8023df2:	f240 41d3 	movw	r1, #1235	@ 0x4d3
 8023df6:	f001 ff4d 	bl	8025c94 <__assert_func>
 8023dfa:	4541      	cmp	r1, r8
 8023dfc:	d205      	bcs.n	8023e0a <MobleTransSarProcessSeg+0x56>
 8023dfe:	2002      	movs	r0, #2
 8023e00:	b009      	add	sp, #36	@ 0x24
 8023e02:	ecbd 8b02 	vpop	{d8}
 8023e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e0a:	79b1      	ldrb	r1, [r6, #6]
 8023e0c:	79f3      	ldrb	r3, [r6, #7]
 8023e0e:	4299      	cmp	r1, r3
 8023e10:	d8f5      	bhi.n	8023dfe <MobleTransSarProcessSeg+0x4a>
 8023e12:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 80240d8 <MobleTransSarProcessSeg+0x324>
 8023e16:	2700      	movs	r7, #0
 8023e18:	f89a 22dc 	ldrb.w	r2, [sl, #732]	@ 0x2dc
 8023e1c:	f8da 52e4 	ldr.w	r5, [sl, #740]	@ 0x2e4
 8023e20:	42ba      	cmp	r2, r7
 8023e22:	dc41      	bgt.n	8023ea8 <MobleTransSarProcessSeg+0xf4>
 8023e24:	2700      	movs	r7, #0
 8023e26:	42ba      	cmp	r2, r7
 8023e28:	d029      	beq.n	8023e7e <MobleTransSarProcessSeg+0xca>
 8023e2a:	46ab      	mov	fp, r5
 8023e2c:	f815 0b2c 	ldrb.w	r0, [r5], #44
 8023e30:	2800      	cmp	r0, #0
 8023e32:	f040 80ea 	bne.w	802400a <MobleTransSarProcessSeg+0x256>
 8023e36:	2001      	movs	r0, #1
 8023e38:	f8ab 0000 	strh.w	r0, [fp]
 8023e3c:	8aa2      	ldrh	r2, [r4, #20]
 8023e3e:	f8ab 2004 	strh.w	r2, [fp, #4]
 8023e42:	8ae2      	ldrh	r2, [r4, #22]
 8023e44:	f8ab 2006 	strh.w	r2, [fp, #6]
 8023e48:	b212      	sxth	r2, r2
 8023e4a:	4088      	lsls	r0, r1
 8023e4c:	2a00      	cmp	r2, #0
 8023e4e:	f8cb 800c 	str.w	r8, [fp, #12]
 8023e52:	f8cb 0010 	str.w	r0, [fp, #16]
 8023e56:	f8cb 9028 	str.w	r9, [fp, #40]	@ 0x28
 8023e5a:	dd10      	ble.n	8023e7e <MobleTransSarProcessSeg+0xca>
 8023e5c:	465a      	mov	r2, fp
 8023e5e:	499b      	ldr	r1, [pc, #620]	@ (80240cc <MobleTransSarProcessSeg+0x318>)
 8023e60:	f10b 0014 	add.w	r0, fp, #20
 8023e64:	f7f0 ffc4 	bl	8014df0 <MoblePalTimerCreate>
 8023e68:	f8db 0014 	ldr.w	r0, [fp, #20]
 8023e6c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8023e70:	f7f0 fff7 	bl	8014e62 <MoblePalTimerStart>
 8023e74:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8023e78:	3201      	adds	r2, #1
 8023e7a:	f8c9 200c 	str.w	r2, [r9, #12]
 8023e7e:	79f1      	ldrb	r1, [r6, #7]
 8023e80:	f89a 22dc 	ldrb.w	r2, [sl, #732]	@ 0x2dc
 8023e84:	2900      	cmp	r1, #0
 8023e86:	f040 80c2 	bne.w	802400e <MobleTransSarProcessSeg+0x25a>
 8023e8a:	4297      	cmp	r7, r2
 8023e8c:	f280 80bf 	bge.w	802400e <MobleTransSarProcessSeg+0x25a>
 8023e90:	252c      	movs	r5, #44	@ 0x2c
 8023e92:	437d      	muls	r5, r7
 8023e94:	f8da 72e4 	ldr.w	r7, [sl, #740]	@ 0x2e4
 8023e98:	1978      	adds	r0, r7, r5
 8023e9a:	3014      	adds	r0, #20
 8023e9c:	f7f1 f862 	bl	8014f64 <MobleTransEraseTimer>
 8023ea0:	f240 1201 	movw	r2, #257	@ 0x101
 8023ea4:	537a      	strh	r2, [r7, r5]
 8023ea6:	e073      	b.n	8023f90 <MobleTransSarProcessSeg+0x1dc>
 8023ea8:	222c      	movs	r2, #44	@ 0x2c
 8023eaa:	437a      	muls	r2, r7
 8023eac:	eb05 0b02 	add.w	fp, r5, r2
 8023eb0:	9204      	str	r2, [sp, #16]
 8023eb2:	5caa      	ldrb	r2, [r5, r2]
 8023eb4:	f8bb 0004 	ldrh.w	r0, [fp, #4]
 8023eb8:	f8b4 c014 	ldrh.w	ip, [r4, #20]
 8023ebc:	2a00      	cmp	r2, #0
 8023ebe:	f000 8087 	beq.w	8023fd0 <MobleTransSarProcessSeg+0x21c>
 8023ec2:	4584      	cmp	ip, r0
 8023ec4:	f040 809d 	bne.w	8024002 <MobleTransSarProcessSeg+0x24e>
 8023ec8:	f8db 000c 	ldr.w	r0, [fp, #12]
 8023ecc:	4540      	cmp	r0, r8
 8023ece:	f040 8085 	bne.w	8023fdc <MobleTransSarProcessSeg+0x228>
 8023ed2:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8023ed6:	b390      	cbz	r0, 8023f3e <MobleTransSarProcessSeg+0x18a>
 8023ed8:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8023edc:	8ae0      	ldrh	r0, [r4, #22]
 8023ede:	2b00      	cmp	r3, #0
 8023ee0:	dd2b      	ble.n	8023f3a <MobleTransSarProcessSeg+0x186>
 8023ee2:	f7f7 fb0b 	bl	801b4fc <BnrgmFrndMgmtGetFriendshipStatus>
 8023ee6:	f8da 72e4 	ldr.w	r7, [sl, #740]	@ 0x2e4
 8023eea:	9b04      	ldr	r3, [sp, #16]
 8023eec:	441f      	add	r7, r3
 8023eee:	4680      	mov	r8, r0
 8023ef0:	fab0 f580 	clz	r5, r0
 8023ef4:	f107 0014 	add.w	r0, r7, #20
 8023ef8:	f7f1 f834 	bl	8014f64 <MobleTransEraseTimer>
 8023efc:	f107 001c 	add.w	r0, r7, #28
 8023f00:	096d      	lsrs	r5, r5, #5
 8023f02:	f7f1 f82f 	bl	8014f64 <MobleTransEraseTimer>
 8023f06:	f1b8 0f00 	cmp.w	r8, #0
 8023f0a:	d103      	bne.n	8023f14 <MobleTransSarProcessSeg+0x160>
 8023f0c:	f8d9 3000 	ldr.w	r3, [r9]
 8023f10:	885b      	ldrh	r3, [r3, #2]
 8023f12:	82e3      	strh	r3, [r4, #22]
 8023f14:	79f2      	ldrb	r2, [r6, #7]
 8023f16:	8aa1      	ldrh	r1, [r4, #20]
 8023f18:	3201      	adds	r2, #1
 8023f1a:	2301      	movs	r3, #1
 8023f1c:	4093      	lsls	r3, r2
 8023f1e:	3b01      	subs	r3, #1
 8023f20:	e9cd 5302 	strd	r5, r3, [sp, #8]
 8023f24:	88b3      	ldrh	r3, [r6, #4]
 8023f26:	9301      	str	r3, [sp, #4]
 8023f28:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 8023f2c:	9300      	str	r3, [sp, #0]
 8023f2e:	8ae2      	ldrh	r2, [r4, #22]
 8023f30:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8023f34:	4648      	mov	r0, r9
 8023f36:	f7ff fd91 	bl	8023a5c <MobleTransSarSendAck.isra.0>
 8023f3a:	2000      	movs	r0, #0
 8023f3c:	e760      	b.n	8023e00 <MobleTransSarProcessSeg+0x4c>
 8023f3e:	f8db 0010 	ldr.w	r0, [fp, #16]
 8023f42:	2501      	movs	r5, #1
 8023f44:	fa05 f101 	lsl.w	r1, r5, r1
 8023f48:	4208      	tst	r0, r1
 8023f4a:	d12f      	bne.n	8023fac <MobleTransSarProcessSeg+0x1f8>
 8023f4c:	4308      	orrs	r0, r1
 8023f4e:	1959      	adds	r1, r3, r5
 8023f50:	fa05 f101 	lsl.w	r1, r5, r1
 8023f54:	3901      	subs	r1, #1
 8023f56:	4288      	cmp	r0, r1
 8023f58:	f8cb 0010 	str.w	r0, [fp, #16]
 8023f5c:	d15a      	bne.n	8024014 <MobleTransSarProcessSeg+0x260>
 8023f5e:	f10b 0014 	add.w	r0, fp, #20
 8023f62:	f7f0 ffff 	bl	8014f64 <MobleTransEraseTimer>
 8023f66:	f10b 0020 	add.w	r0, fp, #32
 8023f6a:	f7f0 fffb 	bl	8014f64 <MobleTransEraseTimer>
 8023f6e:	465a      	mov	r2, fp
 8023f70:	4957      	ldr	r1, [pc, #348]	@ (80240d0 <MobleTransSarProcessSeg+0x31c>)
 8023f72:	f10b 001c 	add.w	r0, fp, #28
 8023f76:	f7f0 ff3b 	bl	8014df0 <MoblePalTimerCreate>
 8023f7a:	f8db 001c 	ldr.w	r0, [fp, #28]
 8023f7e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023f82:	f7f0 ff9f 	bl	8014ec4 <MoblePalTimerStartOnce>
 8023f86:	f8da 22e4 	ldr.w	r2, [sl, #740]	@ 0x2e4
 8023f8a:	9b04      	ldr	r3, [sp, #16]
 8023f8c:	441a      	add	r2, r3
 8023f8e:	7055      	strb	r5, [r2, #1]
 8023f90:	9b05      	ldr	r3, [sp, #20]
 8023f92:	9314      	str	r3, [sp, #80]	@ 0x50
 8023f94:	ee18 3a10 	vmov	r3, s16
 8023f98:	4632      	mov	r2, r6
 8023f9a:	4621      	mov	r1, r4
 8023f9c:	4648      	mov	r0, r9
 8023f9e:	b009      	add	sp, #36	@ 0x24
 8023fa0:	ecbd 8b02 	vpop	{d8}
 8023fa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fa8:	f7ff bdb6 	b.w	8023b18 <MobleTransSarAssemble>
 8023fac:	f10b 001c 	add.w	r0, fp, #28
 8023fb0:	9004      	str	r0, [sp, #16]
 8023fb2:	f7f0 ffd7 	bl	8014f64 <MobleTransEraseTimer>
 8023fb6:	4946      	ldr	r1, [pc, #280]	@ (80240d0 <MobleTransSarProcessSeg+0x31c>)
 8023fb8:	9804      	ldr	r0, [sp, #16]
 8023fba:	465a      	mov	r2, fp
 8023fbc:	f7f0 ff18 	bl	8014df0 <MoblePalTimerCreate>
 8023fc0:	f8db 001c 	ldr.w	r0, [fp, #28]
 8023fc4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023fc8:	f7f0 ff7c 	bl	8014ec4 <MoblePalTimerStartOnce>
 8023fcc:	2001      	movs	r0, #1
 8023fce:	e717      	b.n	8023e00 <MobleTransSarProcessSeg+0x4c>
 8023fd0:	4584      	cmp	ip, r0
 8023fd2:	d116      	bne.n	8024002 <MobleTransSarProcessSeg+0x24e>
 8023fd4:	f8db 000c 	ldr.w	r0, [fp, #12]
 8023fd8:	4540      	cmp	r0, r8
 8023fda:	d0f7      	beq.n	8023fcc <MobleTransSarProcessSeg+0x218>
 8023fdc:	f8db 000c 	ldr.w	r0, [fp, #12]
 8023fe0:	4540      	cmp	r0, r8
 8023fe2:	d210      	bcs.n	8024006 <MobleTransSarProcessSeg+0x252>
 8023fe4:	f10b 001c 	add.w	r0, fp, #28
 8023fe8:	e9cd 1306 	strd	r1, r3, [sp, #24]
 8023fec:	f7f0 ffba 	bl	8014f64 <MobleTransEraseTimer>
 8023ff0:	f10b 0014 	add.w	r0, fp, #20
 8023ff4:	f7f0 ffb6 	bl	8014f64 <MobleTransEraseTimer>
 8023ff8:	9b04      	ldr	r3, [sp, #16]
 8023ffa:	2200      	movs	r2, #0
 8023ffc:	54ea      	strb	r2, [r5, r3]
 8023ffe:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8024002:	3701      	adds	r7, #1
 8024004:	e708      	b.n	8023e18 <MobleTransSarProcessSeg+0x64>
 8024006:	d9fc      	bls.n	8024002 <MobleTransSarProcessSeg+0x24e>
 8024008:	e6f9      	b.n	8023dfe <MobleTransSarProcessSeg+0x4a>
 802400a:	3701      	adds	r7, #1
 802400c:	e70b      	b.n	8023e26 <MobleTransSarProcessSeg+0x72>
 802400e:	4297      	cmp	r7, r2
 8024010:	f43f aef5 	beq.w	8023dfe <MobleTransSarProcessSeg+0x4a>
 8024014:	222c      	movs	r2, #44	@ 0x2c
 8024016:	f8da 52e4 	ldr.w	r5, [sl, #740]	@ 0x2e4
 802401a:	4357      	muls	r7, r2
 802401c:	443d      	add	r5, r7
 802401e:	f105 0020 	add.w	r0, r5, #32
 8024022:	9004      	str	r0, [sp, #16]
 8024024:	f7f0 ff9e 	bl	8014f64 <MobleTransEraseTimer>
 8024028:	462a      	mov	r2, r5
 802402a:	492a      	ldr	r1, [pc, #168]	@ (80240d4 <MobleTransSarProcessSeg+0x320>)
 802402c:	9804      	ldr	r0, [sp, #16]
 802402e:	f7f0 fedf 	bl	8014df0 <MoblePalTimerCreate>
 8024032:	6a28      	ldr	r0, [r5, #32]
 8024034:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8024038:	f7f0 ff44 	bl	8014ec4 <MoblePalTimerStartOnce>
 802403c:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8024040:	2a00      	cmp	r2, #0
 8024042:	dd0f      	ble.n	8024064 <MobleTransSarProcessSeg+0x2b0>
 8024044:	f8da 52e4 	ldr.w	r5, [sl, #740]	@ 0x2e4
 8024048:	443d      	add	r5, r7
 802404a:	696a      	ldr	r2, [r5, #20]
 802404c:	b952      	cbnz	r2, 8024064 <MobleTransSarProcessSeg+0x2b0>
 802404e:	491f      	ldr	r1, [pc, #124]	@ (80240cc <MobleTransSarProcessSeg+0x318>)
 8024050:	462a      	mov	r2, r5
 8024052:	f105 0014 	add.w	r0, r5, #20
 8024056:	f7f0 fecb 	bl	8014df0 <MoblePalTimerCreate>
 802405a:	6968      	ldr	r0, [r5, #20]
 802405c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8024060:	f7f0 feff 	bl	8014e62 <MoblePalTimerStart>
 8024064:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 80240d8 <MobleTransSarProcessSeg+0x324>
 8024068:	f899 12dc 	ldrb.w	r1, [r9, #732]	@ 0x2dc
 802406c:	f8d9 22e0 	ldr.w	r2, [r9, #736]	@ 0x2e0
 8024070:	2700      	movs	r7, #0
 8024072:	42b9      	cmp	r1, r7
 8024074:	dd1a      	ble.n	80240ac <MobleTransSarProcessSeg+0x2f8>
 8024076:	4615      	mov	r5, r2
 8024078:	f812 0b2c 	ldrb.w	r0, [r2], #44
 802407c:	b9e8      	cbnz	r0, 80240ba <MobleTransSarProcessSeg+0x306>
 802407e:	2201      	movs	r2, #1
 8024080:	702a      	strb	r2, [r5, #0]
 8024082:	8aa2      	ldrh	r2, [r4, #20]
 8024084:	806a      	strh	r2, [r5, #2]
 8024086:	6922      	ldr	r2, [r4, #16]
 8024088:	6830      	ldr	r0, [r6, #0]
 802408a:	6871      	ldr	r1, [r6, #4]
 802408c:	e9c5 8201 	strd	r8, r2, [r5, #4]
 8024090:	f105 020c 	add.w	r2, r5, #12
 8024094:	c203      	stmia	r2!, {r0, r1}
 8024096:	7a31      	ldrb	r1, [r6, #8]
 8024098:	7011      	strb	r1, [r2, #0]
 802409a:	f105 0015 	add.w	r0, r5, #21
 802409e:	9a05      	ldr	r2, [sp, #20]
 80240a0:	ee18 1a10 	vmov	r1, s16
 80240a4:	f002 fe45 	bl	8026d32 <memcpy>
 80240a8:	9b05      	ldr	r3, [sp, #20]
 80240aa:	62ab      	str	r3, [r5, #40]	@ 0x28
 80240ac:	f899 02dc 	ldrb.w	r0, [r9, #732]	@ 0x2dc
 80240b0:	1bc3      	subs	r3, r0, r7
 80240b2:	4258      	negs	r0, r3
 80240b4:	4158      	adcs	r0, r3
 80240b6:	0040      	lsls	r0, r0, #1
 80240b8:	e6a2      	b.n	8023e00 <MobleTransSarProcessSeg+0x4c>
 80240ba:	3701      	adds	r7, #1
 80240bc:	e7d9      	b.n	8024072 <MobleTransSarProcessSeg+0x2be>
 80240be:	bf00      	nop
 80240c0:	0802e4b8 	.word	0x0802e4b8
 80240c4:	0802dc34 	.word	0x0802dc34
 80240c8:	0802e948 	.word	0x0802e948
 80240cc:	08024121 	.word	0x08024121
 80240d0:	080240dd 	.word	0x080240dd
 80240d4:	08014f9d 	.word	0x08014f9d
 80240d8:	2000141c 	.word	0x2000141c

080240dc <MobleTransSarOnAckSentInsurance>:
 80240dc:	b530      	push	{r4, r5, lr}
 80240de:	460c      	mov	r4, r1
 80240e0:	b085      	sub	sp, #20
 80240e2:	f101 001c 	add.w	r0, r1, #28
 80240e6:	f7f0 ff3d 	bl	8014f64 <MobleTransEraseTimer>
 80240ea:	88e0      	ldrh	r0, [r4, #6]
 80240ec:	f7f7 fa06 	bl	801b4fc <BnrgmFrndMgmtGetFriendshipStatus>
 80240f0:	2800      	cmp	r0, #0
 80240f2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80240f4:	6925      	ldr	r5, [r4, #16]
 80240f6:	bf08      	it	eq
 80240f8:	6802      	ldreq	r2, [r0, #0]
 80240fa:	88a1      	ldrh	r1, [r4, #4]
 80240fc:	bf0b      	itete	eq
 80240fe:	8852      	ldrheq	r2, [r2, #2]
 8024100:	88e2      	ldrhne	r2, [r4, #6]
 8024102:	2301      	moveq	r3, #1
 8024104:	2300      	movne	r3, #0
 8024106:	e9cd 3502 	strd	r3, r5, [sp, #8]
 802410a:	68e3      	ldr	r3, [r4, #12]
 802410c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024110:	9301      	str	r3, [sp, #4]
 8024112:	8963      	ldrh	r3, [r4, #10]
 8024114:	9300      	str	r3, [sp, #0]
 8024116:	8923      	ldrh	r3, [r4, #8]
 8024118:	f7ff fca0 	bl	8023a5c <MobleTransSarSendAck.isra.0>
 802411c:	b005      	add	sp, #20
 802411e:	bd30      	pop	{r4, r5, pc}

08024120 <MobleTransSarOnAckTimer>:
 8024120:	b530      	push	{r4, r5, lr}
 8024122:	f891 3024 	ldrb.w	r3, [r1, #36]	@ 0x24
 8024126:	2b05      	cmp	r3, #5
 8024128:	b085      	sub	sp, #20
 802412a:	460c      	mov	r4, r1
 802412c:	d906      	bls.n	802413c <MobleTransSarOnAckTimer+0x1c>
 802412e:	f101 0014 	add.w	r0, r1, #20
 8024132:	b005      	add	sp, #20
 8024134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024138:	f7f0 bf14 	b.w	8014f64 <MobleTransEraseTimer>
 802413c:	3301      	adds	r3, #1
 802413e:	f881 3024 	strb.w	r3, [r1, #36]	@ 0x24
 8024142:	88c8      	ldrh	r0, [r1, #6]
 8024144:	f7f7 f9da 	bl	801b4fc <BnrgmFrndMgmtGetFriendshipStatus>
 8024148:	2800      	cmp	r0, #0
 802414a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 802414c:	6925      	ldr	r5, [r4, #16]
 802414e:	bf08      	it	eq
 8024150:	6802      	ldreq	r2, [r0, #0]
 8024152:	88a1      	ldrh	r1, [r4, #4]
 8024154:	bf0b      	itete	eq
 8024156:	8852      	ldrheq	r2, [r2, #2]
 8024158:	88e2      	ldrhne	r2, [r4, #6]
 802415a:	2301      	moveq	r3, #1
 802415c:	2300      	movne	r3, #0
 802415e:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8024162:	68e3      	ldr	r3, [r4, #12]
 8024164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024168:	9301      	str	r3, [sp, #4]
 802416a:	8963      	ldrh	r3, [r4, #10]
 802416c:	9300      	str	r3, [sp, #0]
 802416e:	8923      	ldrh	r3, [r4, #8]
 8024170:	f7ff fc74 	bl	8023a5c <MobleTransSarSendAck.isra.0>
 8024174:	b005      	add	sp, #20
 8024176:	bd30      	pop	{r4, r5, pc}

08024178 <BnrgmHealthModelCreate>:
 8024178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802417a:	4d0d      	ldr	r5, [pc, #52]	@ (80241b0 <BnrgmHealthModelCreate+0x38>)
 802417c:	f895 30f4 	ldrb.w	r3, [r5, #244]	@ 0xf4
 8024180:	2b01      	cmp	r3, #1
 8024182:	d012      	beq.n	80241aa <BnrgmHealthModelCreate+0x32>
 8024184:	2301      	movs	r3, #1
 8024186:	f885 30f4 	strb.w	r3, [r5, #244]	@ 0xf4
 802418a:	2400      	movs	r4, #0
 802418c:	686b      	ldr	r3, [r5, #4]
 802418e:	f885 40f6 	strb.w	r4, [r5, #246]	@ 0xf6
 8024192:	699b      	ldr	r3, [r3, #24]
 8024194:	4668      	mov	r0, sp
 8024196:	4798      	blx	r3
 8024198:	4b06      	ldr	r3, [pc, #24]	@ (80241b4 <BnrgmHealthModelCreate+0x3c>)
 802419a:	f8bd 2000 	ldrh.w	r2, [sp]
 802419e:	805a      	strh	r2, [r3, #2]
 80241a0:	f885 4f20 	strb.w	r4, [r5, #3872]	@ 0xf20
 80241a4:	4620      	mov	r0, r4
 80241a6:	b003      	add	sp, #12
 80241a8:	bd30      	pop	{r4, r5, pc}
 80241aa:	2002      	movs	r0, #2
 80241ac:	e7fb      	b.n	80241a6 <BnrgmHealthModelCreate+0x2e>
 80241ae:	bf00      	nop
 80241b0:	20000324 	.word	0x20000324
 80241b4:	20000008 	.word	0x20000008

080241b8 <MobleLibraryInit>:
 80241b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80241ba:	b085      	sub	sp, #20
 80241bc:	4604      	mov	r4, r0
 80241be:	f7f5 ff71 	bl	801a0a4 <MobleConfigInit>
 80241c2:	2801      	cmp	r0, #1
 80241c4:	d903      	bls.n	80241ce <MobleLibraryInit+0x16>
 80241c6:	2602      	movs	r6, #2
 80241c8:	4630      	mov	r0, r6
 80241ca:	b005      	add	sp, #20
 80241cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80241ce:	6a23      	ldr	r3, [r4, #32]
 80241d0:	4d33      	ldr	r5, [pc, #204]	@ (80242a0 <MobleLibraryInit+0xe8>)
 80241d2:	88da      	ldrh	r2, [r3, #6]
 80241d4:	8899      	ldrh	r1, [r3, #4]
 80241d6:	681b      	ldr	r3, [r3, #0]
 80241d8:	f8a5 2a08 	strh.w	r2, [r5, #2568]	@ 0xa08
 80241dc:	440b      	add	r3, r1
 80241de:	f8c5 3a04 	str.w	r3, [r5, #2564]	@ 0xa04
 80241e2:	68a3      	ldr	r3, [r4, #8]
 80241e4:	9301      	str	r3, [sp, #4]
 80241e6:	7ea3      	ldrb	r3, [r4, #26]
 80241e8:	9300      	str	r3, [sp, #0]
 80241ea:	f505 61de 	add.w	r1, r5, #1776	@ 0x6f0
 80241ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80241f2:	f205 60b4 	addw	r0, r5, #1716	@ 0x6b4
 80241f6:	f7f9 fb63 	bl	801d8c0 <MobleStackInit>
 80241fa:	2801      	cmp	r0, #1
 80241fc:	d8e3      	bhi.n	80241c6 <MobleLibraryInit+0xe>
 80241fe:	6a23      	ldr	r3, [r4, #32]
 8024200:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	@ 0x6f0
 8024204:	8959      	ldrh	r1, [r3, #10]
 8024206:	2900      	cmp	r1, #0
 8024208:	d03f      	beq.n	802428a <MobleLibraryInit+0xd2>
 802420a:	88da      	ldrh	r2, [r3, #6]
 802420c:	889e      	ldrh	r6, [r3, #4]
 802420e:	4416      	add	r6, r2
 8024210:	681a      	ldr	r2, [r3, #0]
 8024212:	4432      	add	r2, r6
 8024214:	6966      	ldr	r6, [r4, #20]
 8024216:	7937      	ldrb	r7, [r6, #4]
 8024218:	7833      	ldrb	r3, [r6, #0]
 802421a:	9703      	str	r7, [sp, #12]
 802421c:	78f7      	ldrb	r7, [r6, #3]
 802421e:	9702      	str	r7, [sp, #8]
 8024220:	78b7      	ldrb	r7, [r6, #2]
 8024222:	9701      	str	r7, [sp, #4]
 8024224:	7876      	ldrb	r6, [r6, #1]
 8024226:	9600      	str	r6, [sp, #0]
 8024228:	f7f6 f9b4 	bl	801a594 <BLEMesh_NeighborTableInit>
 802422c:	2801      	cmp	r0, #1
 802422e:	d8ca      	bhi.n	80241c6 <MobleLibraryInit+0xe>
 8024230:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	@ 0x6f0
 8024234:	f7f5 ff28 	bl	801a088 <MobleApplicationInit>
 8024238:	2801      	cmp	r0, #1
 802423a:	4606      	mov	r6, r0
 802423c:	d8c3      	bhi.n	80241c6 <MobleLibraryInit+0xe>
 802423e:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	@ 0x6f0
 8024242:	f7fa f83b 	bl	801e2bc <MobleConfigModelCreate>
 8024246:	2801      	cmp	r0, #1
 8024248:	d8bd      	bhi.n	80241c6 <MobleLibraryInit+0xe>
 802424a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 802424e:	8b21      	ldrh	r1, [r4, #24]
 8024250:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	@ 0x6f0
 8024254:	f7f9 ff68 	bl	801e128 <MobleConfigModelInit>
 8024258:	2801      	cmp	r0, #1
 802425a:	d8b4      	bhi.n	80241c6 <MobleLibraryInit+0xe>
 802425c:	f8d5 36f0 	ldr.w	r3, [r5, #1776]	@ 0x6f0
 8024260:	b15b      	cbz	r3, 802427a <MobleLibraryInit+0xc2>
 8024262:	681a      	ldr	r2, [r3, #0]
 8024264:	7812      	ldrb	r2, [r2, #0]
 8024266:	2a01      	cmp	r2, #1
 8024268:	d111      	bne.n	802428e <MobleLibraryInit+0xd6>
 802426a:	4b0e      	ldr	r3, [pc, #56]	@ (80242a4 <MobleLibraryInit+0xec>)
 802426c:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8024270:	2b02      	cmp	r3, #2
 8024272:	d010      	beq.n	8024296 <MobleLibraryInit+0xde>
 8024274:	2000      	movs	r0, #0
 8024276:	f7f8 faa1 	bl	801c7bc <BnrgmTransmitSetAutoScanState>
 802427a:	f7ff ff7d 	bl	8024178 <BnrgmHealthModelCreate>
 802427e:	2801      	cmp	r0, #1
 8024280:	d8a1      	bhi.n	80241c6 <MobleLibraryInit+0xe>
 8024282:	4b08      	ldr	r3, [pc, #32]	@ (80242a4 <MobleLibraryInit+0xec>)
 8024284:	69e2      	ldr	r2, [r4, #28]
 8024286:	601a      	str	r2, [r3, #0]
 8024288:	e79e      	b.n	80241c8 <MobleLibraryInit+0x10>
 802428a:	460a      	mov	r2, r1
 802428c:	e7c2      	b.n	8024214 <MobleLibraryInit+0x5c>
 802428e:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
 8024292:	2b01      	cmp	r3, #1
 8024294:	d1e9      	bne.n	802426a <MobleLibraryInit+0xb2>
 8024296:	4b04      	ldr	r3, [pc, #16]	@ (80242a8 <MobleLibraryInit+0xf0>)
 8024298:	2201      	movs	r2, #1
 802429a:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
 802429e:	e7ec      	b.n	802427a <MobleLibraryInit+0xc2>
 80242a0:	20002514 	.word	0x20002514
 80242a4:	20000324 	.word	0x20000324
 80242a8:	20003f64 	.word	0x20003f64

080242ac <BLEMesh_Init>:
 80242ac:	b510      	push	{r4, lr}
 80242ae:	4604      	mov	r4, r0
 80242b0:	f7f4 f8ae 	bl	8018410 <mem_alloc_init>
 80242b4:	4620      	mov	r0, r4
 80242b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80242ba:	f7ff bf7d 	b.w	80241b8 <MobleLibraryInit>

080242be <BnrgmHealthModelAttentionTimerSet>:
 80242be:	6803      	ldr	r3, [r0, #0]
 80242c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80242c2:	f883 106e 	strb.w	r1, [r3, #110]	@ 0x6e
 80242c6:	f7f0 bdcf 	b.w	8014e68 <BnrgmHealthModelSetAttentionTimer>
	...

080242cc <MobleProvision_UnprovisionedNode_DeInit>:
 80242cc:	b538      	push	{r3, r4, r5, lr}
 80242ce:	4d0c      	ldr	r5, [pc, #48]	@ (8024300 <MobleProvision_UnprovisionedNode_DeInit+0x34>)
 80242d0:	f8d5 1a0c 	ldr.w	r1, [r5, #2572]	@ 0xa0c
 80242d4:	f891 31a9 	ldrb.w	r3, [r1, #425]	@ 0x1a9
 80242d8:	2b01      	cmp	r3, #1
 80242da:	d104      	bne.n	80242e6 <MobleProvision_UnprovisionedNode_DeInit+0x1a>
 80242dc:	f7f2 fe8c 	bl	8016ff8 <MoblePalCryptoFreeEcc>
 80242e0:	2300      	movs	r3, #0
 80242e2:	f881 31a9 	strb.w	r3, [r1, #425]	@ 0x1a9
 80242e6:	2400      	movs	r4, #0
 80242e8:	4608      	mov	r0, r1
 80242ea:	f7f3 ffa7 	bl	801823c <MobleMemFree>
 80242ee:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	@ 0x6f0
 80242f2:	f8c5 4a0c 	str.w	r4, [r5, #2572]	@ 0xa0c
 80242f6:	4621      	mov	r1, r4
 80242f8:	f7ff ffe1 	bl	80242be <BnrgmHealthModelAttentionTimerSet>
 80242fc:	4620      	mov	r0, r4
 80242fe:	bd38      	pop	{r3, r4, r5, pc}
 8024300:	20002514 	.word	0x20002514

08024304 <MobleProvisionBearerGatt_DeInit>:
 8024304:	b508      	push	{r3, lr}
 8024306:	4906      	ldr	r1, [pc, #24]	@ (8024320 <MobleProvisionBearerGatt_DeInit+0x1c>)
 8024308:	f501 6024 	add.w	r0, r1, #2624	@ 0xa40
 802430c:	f7f8 f850 	bl	801c3b0 <MobleProvisionBearerGatt_DeleteTimer>
 8024310:	f601 2044 	addw	r0, r1, #2628	@ 0xa44
 8024314:	f7f8 f84c 	bl	801c3b0 <MobleProvisionBearerGatt_DeleteTimer>
 8024318:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802431c:	f7ff bfd6 	b.w	80242cc <MobleProvision_UnprovisionedNode_DeInit>
 8024320:	20002514 	.word	0x20002514

08024324 <MobleProvision_DeInit>:
 8024324:	b908      	cbnz	r0, 802432a <MobleProvision_DeInit+0x6>
 8024326:	f7f8 becb 	b.w	801d0c0 <MobleProvision_ProvisionerNode_DeInit>
 802432a:	f7ff bfcf 	b.w	80242cc <MobleProvision_UnprovisionedNode_DeInit>

0802432e <MoblePBADVCloseLink>:
 802432e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024330:	2300      	movs	r3, #0
 8024332:	4604      	mov	r4, r0
 8024334:	f88d 3007 	strb.w	r3, [sp, #7]
 8024338:	b149      	cbz	r1, 802434e <MoblePBADVCloseLink+0x20>
 802433a:	2503      	movs	r5, #3
 802433c:	2301      	movs	r3, #1
 802433e:	f10d 0207 	add.w	r2, sp, #7
 8024342:	2102      	movs	r1, #2
 8024344:	4620      	mov	r0, r4
 8024346:	f7f3 fe09 	bl	8017f5c <MoblePBADVSendControl>
 802434a:	3d01      	subs	r5, #1
 802434c:	d1f6      	bne.n	802433c <MoblePBADVCloseLink+0xe>
 802434e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8024352:	3b00      	subs	r3, #0
 8024354:	bf18      	it	ne
 8024356:	2301      	movne	r3, #1
 8024358:	7023      	strb	r3, [r4, #0]
 802435a:	2300      	movs	r3, #0
 802435c:	61e3      	str	r3, [r4, #28]
 802435e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8024362:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
 8024366:	62a3      	str	r3, [r4, #40]	@ 0x28
 8024368:	4620      	mov	r0, r4
 802436a:	f7f0 fe4c 	bl	8015006 <MoblePBADVClearTimers>
 802436e:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 8024372:	b113      	cbz	r3, 802437a <MoblePBADVCloseLink+0x4c>
 8024374:	f8d4 0170 	ldr.w	r0, [r4, #368]	@ 0x170
 8024378:	4798      	blx	r3
 802437a:	f894 315c 	ldrb.w	r3, [r4, #348]	@ 0x15c
 802437e:	b91b      	cbnz	r3, 8024388 <MoblePBADVCloseLink+0x5a>
 8024380:	f894 0020 	ldrb.w	r0, [r4, #32]
 8024384:	f7ff ffce 	bl	8024324 <MobleProvision_DeInit>
 8024388:	b003      	add	sp, #12
 802438a:	bd30      	pop	{r4, r5, pc}

0802438c <MoblePBADVOnOpenLinkRetransmit>:
 802438c:	b513      	push	{r0, r1, r4, lr}
 802438e:	f8d1 3158 	ldr.w	r3, [r1, #344]	@ 0x158
 8024392:	9001      	str	r0, [sp, #4]
 8024394:	2b63      	cmp	r3, #99	@ 0x63
 8024396:	460c      	mov	r4, r1
 8024398:	dd05      	ble.n	80243a6 <MoblePBADVOnOpenLinkRetransmit+0x1a>
 802439a:	2101      	movs	r1, #1
 802439c:	4620      	mov	r0, r4
 802439e:	f7ff ffc6 	bl	802432e <MoblePBADVCloseLink>
 80243a2:	b002      	add	sp, #8
 80243a4:	bd10      	pop	{r4, pc}
 80243a6:	a801      	add	r0, sp, #4
 80243a8:	f7f0 fe24 	bl	8014ff4 <MoblePBADVEraseTimer>
 80243ac:	f101 0208 	add.w	r2, r1, #8
 80243b0:	2310      	movs	r3, #16
 80243b2:	2100      	movs	r1, #0
 80243b4:	4620      	mov	r0, r4
 80243b6:	f7f3 fdd1 	bl	8017f5c <MoblePBADVSendControl>
 80243ba:	e7f2      	b.n	80243a2 <MoblePBADVOnOpenLinkRetransmit+0x16>

080243bc <MoblePBADVOnTransactionTimeout>:
 80243bc:	4608      	mov	r0, r1
 80243be:	2100      	movs	r1, #0
 80243c0:	f7ff bfb5 	b.w	802432e <MoblePBADVCloseLink>

080243c4 <MoblePBADVOnLinkIdleTimeout>:
 80243c4:	4608      	mov	r0, r1
 80243c6:	2101      	movs	r1, #1
 80243c8:	f7ff bfb1 	b.w	802432e <MoblePBADVCloseLink>

080243cc <MoblePBADVStopProvisioning>:
 80243cc:	b508      	push	{r3, lr}
 80243ce:	2101      	movs	r1, #1
 80243d0:	f7ff ffad 	bl	802432e <MoblePBADVCloseLink>
 80243d4:	2000      	movs	r0, #0
 80243d6:	bd08      	pop	{r3, pc}

080243d8 <MoblePBADVSendTransaction.isra.0>:
 80243d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80243dc:	4604      	mov	r4, r0
 80243de:	6840      	ldr	r0, [r0, #4]
 80243e0:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 80243e4:	2b63      	cmp	r3, #99	@ 0x63
 80243e6:	b0a2      	sub	sp, #136	@ 0x88
 80243e8:	dd4a      	ble.n	8024480 <MoblePBADVSendTransaction.isra.0+0xa8>
 80243ea:	2101      	movs	r1, #1
 80243ec:	b022      	add	sp, #136	@ 0x88
 80243ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80243f2:	f7ff bf9c 	b.w	802432e <MoblePBADVCloseLink>
 80243f6:	89a5      	ldrh	r5, [r4, #12]
 80243f8:	3b01      	subs	r3, #1
 80243fa:	429e      	cmp	r6, r3
 80243fc:	fb06 7105 	mla	r1, r6, r5, r7
 8024400:	d108      	bne.n	8024414 <MoblePBADVSendTransaction.isra.0+0x3c>
 8024402:	8a23      	ldrh	r3, [r4, #16]
 8024404:	fbb3 f2f5 	udiv	r2, r3, r5
 8024408:	fb05 3312 	mls	r3, r5, r2, r3
 802440c:	b29b      	uxth	r3, r3
 802440e:	2b00      	cmp	r3, #0
 8024410:	bf18      	it	ne
 8024412:	461d      	movne	r5, r3
 8024414:	1dab      	adds	r3, r5, #6
 8024416:	f88d 3008 	strb.w	r3, [sp, #8]
 802441a:	69c3      	ldr	r3, [r0, #28]
 802441c:	f8cd 300a 	str.w	r3, [sp, #10]
 8024420:	462a      	mov	r2, r5
 8024422:	7823      	ldrb	r3, [r4, #0]
 8024424:	f88d 300e 	strb.w	r3, [sp, #14]
 8024428:	f10d 000f 	add.w	r0, sp, #15
 802442c:	f88d 8009 	strb.w	r8, [sp, #9]
 8024430:	f002 fc7f 	bl	8026d32 <memcpy>
 8024434:	2301      	movs	r3, #1
 8024436:	2114      	movs	r1, #20
 8024438:	e9cd 3100 	strd	r3, r1, [sp]
 802443c:	1dea      	adds	r2, r5, #7
 802443e:	2300      	movs	r3, #0
 8024440:	b2d2      	uxtb	r2, r2
 8024442:	a902      	add	r1, sp, #8
 8024444:	4618      	mov	r0, r3
 8024446:	f7f3 fd73 	bl	8017f30 <BnrgmTransmitSend>
 802444a:	3601      	adds	r6, #1
 802444c:	7a23      	ldrb	r3, [r4, #8]
 802444e:	6860      	ldr	r0, [r4, #4]
 8024450:	429e      	cmp	r6, r3
 8024452:	dbd0      	blt.n	80243f6 <MoblePBADVSendTransaction.isra.0+0x1e>
 8024454:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 8024458:	490c      	ldr	r1, [pc, #48]	@ (802448c <MoblePBADVSendTransaction.isra.0+0xb4>)
 802445a:	3301      	adds	r3, #1
 802445c:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158
 8024460:	4622      	mov	r2, r4
 8024462:	f500 70aa 	add.w	r0, r0, #340	@ 0x154
 8024466:	f7f0 fcc3 	bl	8014df0 <MoblePalTimerCreate>
 802446a:	b930      	cbnz	r0, 802447a <MoblePBADVSendTransaction.isra.0+0xa2>
 802446c:	6863      	ldr	r3, [r4, #4]
 802446e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8024472:	f8d3 0154 	ldr.w	r0, [r3, #340]	@ 0x154
 8024476:	f7f0 fd25 	bl	8014ec4 <MoblePalTimerStartOnce>
 802447a:	b022      	add	sp, #136	@ 0x88
 802447c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024480:	2600      	movs	r6, #0
 8024482:	f104 0712 	add.w	r7, r4, #18
 8024486:	f04f 0829 	mov.w	r8, #41	@ 0x29
 802448a:	e7df      	b.n	802444c <MoblePBADVSendTransaction.isra.0+0x74>
 802448c:	08024491 	.word	0x08024491

08024490 <MoblePBADVOnRetransmit>:
 8024490:	b507      	push	{r0, r1, r2, lr}
 8024492:	9001      	str	r0, [sp, #4]
 8024494:	a801      	add	r0, sp, #4
 8024496:	f7f0 fdad 	bl	8014ff4 <MoblePBADVEraseTimer>
 802449a:	4608      	mov	r0, r1
 802449c:	f7ff ff9c 	bl	80243d8 <MoblePBADVSendTransaction.isra.0>
 80244a0:	b003      	add	sp, #12
 80244a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080244a8 <MoblePBADVFireProvisionStateMach>:
 80244a8:	b530      	push	{r4, r5, lr}
 80244aa:	f890 5020 	ldrb.w	r5, [r0, #32]
 80244ae:	b0a7      	sub	sp, #156	@ 0x9c
 80244b0:	4604      	mov	r4, r0
 80244b2:	4628      	mov	r0, r5
 80244b4:	f7f9 f87e 	bl	801d5b4 <MobleProvision_GetNextOperation>
 80244b8:	b118      	cbz	r0, 80244c2 <MoblePBADVFireProvisionStateMach+0x1a>
 80244ba:	2802      	cmp	r0, #2
 80244bc:	d019      	beq.n	80244f2 <MoblePBADVFireProvisionStateMach+0x4a>
 80244be:	b027      	add	sp, #156	@ 0x9c
 80244c0:	bd30      	pop	{r4, r5, pc}
 80244c2:	4628      	mov	r0, r5
 80244c4:	f7f9 f889 	bl	801d5da <MobleProvision_IsCompleted>
 80244c8:	2800      	cmp	r0, #0
 80244ca:	d0f8      	beq.n	80244be <MoblePBADVFireProvisionStateMach+0x16>
 80244cc:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 80244d0:	9003      	str	r0, [sp, #12]
 80244d2:	491f      	ldr	r1, [pc, #124]	@ (8024550 <MoblePBADVFireProvisionStateMach+0xa8>)
 80244d4:	f7f0 fd8e 	bl	8014ff4 <MoblePBADVEraseTimer>
 80244d8:	9803      	ldr	r0, [sp, #12]
 80244da:	4622      	mov	r2, r4
 80244dc:	f7f0 fc88 	bl	8014df0 <MoblePalTimerCreate>
 80244e0:	f8d4 014c 	ldr.w	r0, [r4, #332]	@ 0x14c
 80244e4:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 80244e8:	b027      	add	sp, #156	@ 0x9c
 80244ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80244ee:	f7f0 bce9 	b.w	8014ec4 <MoblePalTimerStartOnce>
 80244f2:	ab05      	add	r3, sp, #20
 80244f4:	2280      	movs	r2, #128	@ 0x80
 80244f6:	a906      	add	r1, sp, #24
 80244f8:	4628      	mov	r0, r5
 80244fa:	f7f9 f860 	bl	801d5be <MobleProvision_GetOutputMessage>
 80244fe:	b118      	cbz	r0, 8024508 <MoblePBADVFireProvisionStateMach+0x60>
 8024500:	2101      	movs	r1, #1
 8024502:	4620      	mov	r0, r4
 8024504:	f7ff ff13 	bl	802432e <MoblePBADVCloseLink>
 8024508:	2501      	movs	r5, #1
 802450a:	69a2      	ldr	r2, [r4, #24]
 802450c:	9905      	ldr	r1, [sp, #20]
 802450e:	9500      	str	r5, [sp, #0]
 8024510:	f104 03c0 	add.w	r3, r4, #192	@ 0xc0
 8024514:	a806      	add	r0, sp, #24
 8024516:	f7f7 fc3f 	bl	801bd98 <MobleSARSplit>
 802451a:	b118      	cbz	r0, 8024524 <MoblePBADVFireProvisionStateMach+0x7c>
 802451c:	4629      	mov	r1, r5
 802451e:	4620      	mov	r0, r4
 8024520:	f7ff ff05 	bl	802432e <MoblePBADVCloseLink>
 8024524:	2300      	movs	r3, #0
 8024526:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
 802452a:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 802452e:	f8c4 40bc 	str.w	r4, [r4, #188]	@ 0xbc
 8024532:	f7ff ff51 	bl	80243d8 <MoblePBADVSendTransaction.isra.0>
 8024536:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 802453a:	f7f0 fcc7 	bl	8014ecc <MoblePBADVRaiseTransTimeoutTimer>
 802453e:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 8024542:	f7f0 fd57 	bl	8014ff4 <MoblePBADVEraseTimer>
 8024546:	4620      	mov	r0, r4
 8024548:	f7f0 fcd2 	bl	8014ef0 <MoblePBADVRaiseLinkIdleTimer>
 802454c:	e7b7      	b.n	80244be <MoblePBADVFireProvisionStateMach+0x16>
 802454e:	bf00      	nop
 8024550:	080243c5 	.word	0x080243c5

08024554 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0>:
 8024554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024558:	4eaf      	ldr	r6, [pc, #700]	@ (8024818 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2c4>)
 802455a:	b0bc      	sub	sp, #240	@ 0xf0
 802455c:	4604      	mov	r4, r0
 802455e:	460f      	mov	r7, r1
 8024560:	4690      	mov	r8, r2
 8024562:	f7e2 fadf 	bl	8006b24 <HAL_GetTick>
 8024566:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	@ 0xa0c
 802456a:	f8d5 31a4 	ldr.w	r3, [r5, #420]	@ 0x1a4
 802456e:	1ac0      	subs	r0, r0, r3
 8024570:	4baa      	ldr	r3, [pc, #680]	@ (802481c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2c8>)
 8024572:	4298      	cmp	r0, r3
 8024574:	f200 82fa 	bhi.w	8024b6c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x618>
 8024578:	2c09      	cmp	r4, #9
 802457a:	d901      	bls.n	8024580 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2c>
 802457c:	2402      	movs	r4, #2
 802457e:	e058      	b.n	8024632 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xde>
 8024580:	f7e2 fad0 	bl	8006b24 <HAL_GetTick>
 8024584:	f8c5 01a4 	str.w	r0, [r5, #420]	@ 0x1a4
 8024588:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	@ 0xa0c
 802458c:	f895 9044 	ldrb.w	r9, [r5, #68]	@ 0x44
 8024590:	f1b9 0f07 	cmp.w	r9, #7
 8024594:	f200 82e4 	bhi.w	8024b60 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x60c>
 8024598:	e8df f019 	tbh	[pc, r9, lsl #1]
 802459c:	003d0008 	.word	0x003d0008
 80245a0:	02e20142 	.word	0x02e20142
 80245a4:	020201b2 	.word	0x020201b2
 80245a8:	02e602e6 	.word	0x02e602e6
 80245ac:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 80245b0:	4323      	orrs	r3, r4
 80245b2:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 80245b6:	f040 82d7 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 80245ba:	f1b8 0f01 	cmp.w	r8, #1
 80245be:	f040 82d3 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 80245c2:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 80245c6:	681a      	ldr	r2, [r3, #0]
 80245c8:	7812      	ldrb	r2, [r2, #0]
 80245ca:	2a01      	cmp	r2, #1
 80245cc:	f000 82cc 	beq.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 80245d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	@ 0x290
 80245d4:	b10b      	cbz	r3, 80245da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x86>
 80245d6:	7838      	ldrb	r0, [r7, #0]
 80245d8:	4798      	blx	r3
 80245da:	7839      	ldrb	r1, [r7, #0]
 80245dc:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	@ 0x6f0
 80245e0:	f7ff fe6d 	bl	80242be <BnrgmHealthModelAttentionTimerSet>
 80245e4:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	@ 0xa0c
 80245e8:	783a      	ldrb	r2, [r7, #0]
 80245ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80245ee:	f8d3 2046 	ldr.w	r2, [r3, #70]	@ 0x46
 80245f2:	f8c3 2052 	str.w	r2, [r3, #82]	@ 0x52
 80245f6:	f8d3 204a 	ldr.w	r2, [r3, #74]	@ 0x4a
 80245fa:	f8c3 2056 	str.w	r2, [r3, #86]	@ 0x56
 80245fe:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8024602:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 8024606:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 802460a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 802460e:	4620      	mov	r0, r4
 8024610:	b03c      	add	sp, #240	@ 0xf0
 8024612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024616:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 802461a:	2b00      	cmp	r3, #0
 802461c:	f040 809a 	bne.w	8024754 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x200>
 8024620:	2c02      	cmp	r4, #2
 8024622:	f040 82a1 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8024626:	f1b8 0f05 	cmp.w	r8, #5
 802462a:	f040 829d 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 802462e:	783b      	ldrb	r3, [r7, #0]
 8024630:	b113      	cbz	r3, 8024638 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xe4>
 8024632:	f885 41a8 	strb.w	r4, [r5, #424]	@ 0x1a8
 8024636:	e7ea      	b.n	802460e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8024638:	787b      	ldrb	r3, [r7, #1]
 802463a:	2b01      	cmp	r3, #1
 802463c:	d805      	bhi.n	802464a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 802463e:	f8d6 86f0 	ldr.w	r8, [r6, #1776]	@ 0x6f0
 8024642:	f898 21fe 	ldrb.w	r2, [r8, #510]	@ 0x1fe
 8024646:	429a      	cmp	r2, r3
 8024648:	d203      	bcs.n	8024652 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xfe>
 802464a:	2302      	movs	r3, #2
 802464c:	f885 31a8 	strb.w	r3, [r5, #424]	@ 0x1a8
 8024650:	e7dd      	b.n	802460e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8024652:	78b9      	ldrb	r1, [r7, #2]
 8024654:	2903      	cmp	r1, #3
 8024656:	d8ec      	bhi.n	8024632 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xde>
 8024658:	2901      	cmp	r1, #1
 802465a:	78fa      	ldrb	r2, [r7, #3]
 802465c:	d815      	bhi.n	802468a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x136>
 802465e:	2a00      	cmp	r2, #0
 8024660:	d1f3      	bne.n	802464a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8024662:	793a      	ldrb	r2, [r7, #4]
 8024664:	2a00      	cmp	r2, #0
 8024666:	d1f0      	bne.n	802464a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8024668:	f888 31fa 	strb.w	r3, [r8, #506]	@ 0x1fa
 802466c:	78bb      	ldrb	r3, [r7, #2]
 802466e:	f888 31fb 	strb.w	r3, [r8, #507]	@ 0x1fb
 8024672:	78fa      	ldrb	r2, [r7, #3]
 8024674:	f888 21fc 	strb.w	r2, [r8, #508]	@ 0x1fc
 8024678:	7939      	ldrb	r1, [r7, #4]
 802467a:	f888 11fd 	strb.w	r1, [r8, #509]	@ 0x1fd
 802467e:	2b03      	cmp	r3, #3
 8024680:	d82a      	bhi.n	80246d8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x184>
 8024682:	e8df f003 	tbb	[pc, r3]
 8024686:	1355      	.short	0x1355
 8024688:	4b18      	.short	0x4b18
 802468a:	2902      	cmp	r1, #2
 802468c:	d107      	bne.n	802469e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x14a>
 802468e:	2a04      	cmp	r2, #4
 8024690:	f63f af74 	bhi.w	802457c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x28>
 8024694:	793a      	ldrb	r2, [r7, #4]
 8024696:	3a01      	subs	r2, #1
 8024698:	2a07      	cmp	r2, #7
 802469a:	d9e5      	bls.n	8024668 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x114>
 802469c:	e76e      	b.n	802457c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x28>
 802469e:	2a03      	cmp	r2, #3
 80246a0:	d8d3      	bhi.n	802464a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 80246a2:	793a      	ldrb	r2, [r7, #4]
 80246a4:	3a01      	subs	r2, #1
 80246a6:	2a07      	cmp	r2, #7
 80246a8:	d9de      	bls.n	8024668 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x114>
 80246aa:	e7ce      	b.n	802464a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 80246ac:	f898 31ff 	ldrb.w	r3, [r8, #511]	@ 0x1ff
 80246b0:	07d9      	lsls	r1, r3, #31
 80246b2:	d411      	bmi.n	80246d8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x184>
 80246b4:	e7c9      	b.n	802464a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 80246b6:	2a04      	cmp	r2, #4
 80246b8:	d904      	bls.n	80246c4 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x170>
 80246ba:	2202      	movs	r2, #2
 80246bc:	f885 21a8 	strb.w	r2, [r5, #424]	@ 0x1a8
 80246c0:	461c      	mov	r4, r3
 80246c2:	e7a4      	b.n	802460e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 80246c4:	f898 0206 	ldrb.w	r0, [r8, #518]	@ 0x206
 80246c8:	4288      	cmp	r0, r1
 80246ca:	d3f6      	bcc.n	80246ba <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x166>
 80246cc:	f8b8 1202 	ldrh.w	r1, [r8, #514]	@ 0x202
 80246d0:	fa41 f202 	asr.w	r2, r1, r2
 80246d4:	07d0      	lsls	r0, r2, #31
 80246d6:	d5f0      	bpl.n	80246ba <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x166>
 80246d8:	2205      	movs	r2, #5
 80246da:	4639      	mov	r1, r7
 80246dc:	f105 005d 	add.w	r0, r5, #93	@ 0x5d
 80246e0:	f002 fa5c 	bl	8026b9c <memmove>
 80246e4:	f898 31fa 	ldrb.w	r3, [r8, #506]	@ 0x1fa
 80246e8:	bb3b      	cbnz	r3, 802473a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x1e6>
 80246ea:	461d      	mov	r5, r3
 80246ec:	f8d6 7a0c 	ldr.w	r7, [r6, #2572]	@ 0xa0c
 80246f0:	f7f0 fe22 	bl	8015338 <MoblePalBluetoothRandom>
 80246f4:	442f      	add	r7, r5
 80246f6:	3501      	adds	r5, #1
 80246f8:	2d20      	cmp	r5, #32
 80246fa:	f887 0142 	strb.w	r0, [r7, #322]	@ 0x142
 80246fe:	d1f5      	bne.n	80246ec <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x198>
 8024700:	f8d6 0a0c 	ldr.w	r0, [r6, #2572]	@ 0xa0c
 8024704:	2120      	movs	r1, #32
 8024706:	f500 70a1 	add.w	r0, r0, #322	@ 0x142
 802470a:	f7f2 fc4b 	bl	8016fa4 <MoblePalCryptoInitEcc>
 802470e:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	@ 0xa0c
 8024712:	b1d0      	cbz	r0, 802474a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x1f6>
 8024714:	2202      	movs	r2, #2
 8024716:	f883 21a8 	strb.w	r2, [r3, #424]	@ 0x1a8
 802471a:	e778      	b.n	802460e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 802471c:	2a03      	cmp	r2, #3
 802471e:	d894      	bhi.n	802464a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8024720:	f898 3207 	ldrb.w	r3, [r8, #519]	@ 0x207
 8024724:	428b      	cmp	r3, r1
 8024726:	d390      	bcc.n	802464a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8024728:	f8b8 3204 	ldrh.w	r3, [r8, #516]	@ 0x204
 802472c:	4113      	asrs	r3, r2
 802472e:	e7bf      	b.n	80246b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x15c>
 8024730:	f898 3200 	ldrb.w	r3, [r8, #512]	@ 0x200
 8024734:	2b00      	cmp	r3, #0
 8024736:	d1cf      	bne.n	80246d8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x184>
 8024738:	e787      	b.n	802464a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 802473a:	2220      	movs	r2, #32
 802473c:	f508 7112 	add.w	r1, r8, #584	@ 0x248
 8024740:	f505 70a1 	add.w	r0, r5, #322	@ 0x142
 8024744:	f002 fa2a 	bl	8026b9c <memmove>
 8024748:	e7da      	b.n	8024700 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x1ac>
 802474a:	2201      	movs	r2, #1
 802474c:	f883 21a9 	strb.w	r2, [r3, #425]	@ 0x1a9
 8024750:	2400      	movs	r4, #0
 8024752:	e75c      	b.n	802460e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8024754:	2b01      	cmp	r3, #1
 8024756:	f040 8207 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 802475a:	2c03      	cmp	r4, #3
 802475c:	f040 8204 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8024760:	f1b8 0f40 	cmp.w	r8, #64	@ 0x40
 8024764:	f040 8200 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8024768:	f8d6 16f0 	ldr.w	r1, [r6, #1776]	@ 0x6f0
 802476c:	f891 31fa 	ldrb.w	r3, [r1, #506]	@ 0x1fa
 8024770:	b32b      	cbz	r3, 80247be <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x26a>
 8024772:	4642      	mov	r2, r8
 8024774:	f501 7102 	add.w	r1, r1, #520	@ 0x208
 8024778:	f505 70b1 	add.w	r0, r5, #354	@ 0x162
 802477c:	f002 fa0e 	bl	8026b9c <memmove>
 8024780:	2240      	movs	r2, #64	@ 0x40
 8024782:	f8d6 0a0c 	ldr.w	r0, [r6, #2572]	@ 0xa0c
 8024786:	4639      	mov	r1, r7
 8024788:	f002 fa08 	bl	8026b9c <memmove>
 802478c:	f8d6 4a0c 	ldr.w	r4, [r6, #2572]	@ 0xa0c
 8024790:	aa2c      	add	r2, sp, #176	@ 0xb0
 8024792:	f504 73b1 	add.w	r3, r4, #354	@ 0x162
 8024796:	f504 7ed1 	add.w	lr, r4, #418	@ 0x1a2
 802479a:	4615      	mov	r5, r2
 802479c:	6818      	ldr	r0, [r3, #0]
 802479e:	6859      	ldr	r1, [r3, #4]
 80247a0:	4694      	mov	ip, r2
 80247a2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80247a6:	3308      	adds	r3, #8
 80247a8:	4573      	cmp	r3, lr
 80247aa:	4662      	mov	r2, ip
 80247ac:	d1f6      	bne.n	802479c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x248>
 80247ae:	4620      	mov	r0, r4
 80247b0:	f7f2 fc0c 	bl	8016fcc <MoblePalCryptoGetEccGenSecret>
 80247b4:	6420      	str	r0, [r4, #64]	@ 0x40
 80247b6:	b9d0      	cbnz	r0, 80247ee <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x29a>
 80247b8:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	@ 0xa0c
 80247bc:	e005      	b.n	80247ca <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x276>
 80247be:	a81c      	add	r0, sp, #112	@ 0x70
 80247c0:	f7f1 fcf2 	bl	80161a8 <MoblePalCryptoGetEccPublicKey.part.0>
 80247c4:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	@ 0xa0c
 80247c8:	b118      	cbz	r0, 80247d2 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x27e>
 80247ca:	2402      	movs	r4, #2
 80247cc:	f883 41a8 	strb.w	r4, [r3, #424]	@ 0x1a8
 80247d0:	e71d      	b.n	802460e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 80247d2:	aa1c      	add	r2, sp, #112	@ 0x70
 80247d4:	f503 73b1 	add.w	r3, r3, #354	@ 0x162
 80247d8:	ad2c      	add	r5, sp, #176	@ 0xb0
 80247da:	4614      	mov	r4, r2
 80247dc:	cc03      	ldmia	r4!, {r0, r1}
 80247de:	42ac      	cmp	r4, r5
 80247e0:	6018      	str	r0, [r3, #0]
 80247e2:	6059      	str	r1, [r3, #4]
 80247e4:	4622      	mov	r2, r4
 80247e6:	f103 0308 	add.w	r3, r3, #8
 80247ea:	d1f6      	bne.n	80247da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x286>
 80247ec:	e7c8      	b.n	8024780 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x22c>
 80247ee:	f8d6 4a0c 	ldr.w	r4, [r6, #2572]	@ 0xa0c
 80247f2:	2240      	movs	r2, #64	@ 0x40
 80247f4:	f104 0062 	add.w	r0, r4, #98	@ 0x62
 80247f8:	4639      	mov	r1, r7
 80247fa:	f002 f9cf 	bl	8026b9c <memmove>
 80247fe:	f104 03a2 	add.w	r3, r4, #162	@ 0xa2
 8024802:	ac3c      	add	r4, sp, #240	@ 0xf0
 8024804:	462a      	mov	r2, r5
 8024806:	ca03      	ldmia	r2!, {r0, r1}
 8024808:	42a2      	cmp	r2, r4
 802480a:	6018      	str	r0, [r3, #0]
 802480c:	6059      	str	r1, [r3, #4]
 802480e:	4615      	mov	r5, r2
 8024810:	f103 0308 	add.w	r3, r3, #8
 8024814:	d1f6      	bne.n	8024804 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2b0>
 8024816:	e79b      	b.n	8024750 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x1fc>
 8024818:	20002514 	.word	0x20002514
 802481c:	0001d4c0 	.word	0x0001d4c0
 8024820:	f895 a045 	ldrb.w	sl, [r5, #69]	@ 0x45
 8024824:	f1ba 0f00 	cmp.w	sl, #0
 8024828:	f040 819e 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 802482c:	2c05      	cmp	r4, #5
 802482e:	f040 819b 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8024832:	f1b8 0f10 	cmp.w	r8, #16
 8024836:	f040 8197 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 802483a:	4628      	mov	r0, r5
 802483c:	f7f2 fbc6 	bl	8016fcc <MoblePalCryptoGetEccGenSecret>
 8024840:	6428      	str	r0, [r5, #64]	@ 0x40
 8024842:	b930      	cbnz	r0, 8024852 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2fe>
 8024844:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	@ 0xa0c
 8024848:	2202      	movs	r2, #2
 802484a:	f883 21a8 	strb.w	r2, [r3, #424]	@ 0x1a8
 802484e:	464c      	mov	r4, r9
 8024850:	e6dd      	b.n	802460e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8024852:	f8d6 4a0c 	ldr.w	r4, [r6, #2572]	@ 0xa0c
 8024856:	4642      	mov	r2, r8
 8024858:	4639      	mov	r1, r7
 802485a:	f504 7089 	add.w	r0, r4, #274	@ 0x112
 802485e:	f002 f99d 	bl	8026b9c <memmove>
 8024862:	f104 03e2 	add.w	r3, r4, #226	@ 0xe2
 8024866:	2291      	movs	r2, #145	@ 0x91
 8024868:	f104 0151 	add.w	r1, r4, #81	@ 0x51
 802486c:	a818      	add	r0, sp, #96	@ 0x60
 802486e:	e9cd aa18 	strd	sl, sl, [sp, #96]	@ 0x60
 8024872:	e9cd aa1a 	strd	sl, sl, [sp, #104]	@ 0x68
 8024876:	f7f1 f81f 	bl	80158b8 <BAES_CmacCompute>
 802487a:	2304      	movs	r3, #4
 802487c:	f8d6 0a0c 	ldr.w	r0, [r6, #2572]	@ 0xa0c
 8024880:	9302      	str	r3, [sp, #8]
 8024882:	4bbb      	ldr	r3, [pc, #748]	@ (8024b70 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x61c>)
 8024884:	e9cd 8300 	strd	r8, r3, [sp]
 8024888:	2220      	movs	r2, #32
 802488a:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802488c:	f100 03e2 	add.w	r3, r0, #226	@ 0xe2
 8024890:	30f2      	adds	r0, #242	@ 0xf2
 8024892:	f7f1 f8df 	bl	8015a54 <MoblePalCryptoK1.part.0>
 8024896:	2800      	cmp	r0, #0
 8024898:	d1d4      	bne.n	8024844 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2f0>
 802489a:	4604      	mov	r4, r0
 802489c:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	@ 0xa0c
 80248a0:	f7f0 fd4a 	bl	8015338 <MoblePalBluetoothRandom>
 80248a4:	4425      	add	r5, r4
 80248a6:	3401      	adds	r4, #1
 80248a8:	2c10      	cmp	r4, #16
 80248aa:	f885 0122 	strb.w	r0, [r5, #290]	@ 0x122
 80248ae:	d1f5      	bne.n	802489c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x348>
 80248b0:	ac1c      	add	r4, sp, #112	@ 0x70
 80248b2:	2300      	movs	r3, #0
 80248b4:	4620      	mov	r0, r4
 80248b6:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 80248ba:	e9cd 331e 	strd	r3, r3, [sp, #120]	@ 0x78
 80248be:	f7f7 fd2f 	bl	801c320 <MobleProvisionGenerateAuthValue>
 80248c2:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	@ 0xa0c
 80248c6:	ae2c      	add	r6, sp, #176	@ 0xb0
 80248c8:	f505 7391 	add.w	r3, r5, #290	@ 0x122
 80248cc:	f505 7799 	add.w	r7, r5, #306	@ 0x132
 80248d0:	6818      	ldr	r0, [r3, #0]
 80248d2:	6859      	ldr	r1, [r3, #4]
 80248d4:	4632      	mov	r2, r6
 80248d6:	c203      	stmia	r2!, {r0, r1}
 80248d8:	3308      	adds	r3, #8
 80248da:	42bb      	cmp	r3, r7
 80248dc:	4616      	mov	r6, r2
 80248de:	d1f7      	bne.n	80248d0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x37c>
 80248e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80248e4:	ae30      	add	r6, sp, #192	@ 0xc0
 80248e6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80248ea:	f505 7381 	add.w	r3, r5, #258	@ 0x102
 80248ee:	2220      	movs	r2, #32
 80248f0:	a92c      	add	r1, sp, #176	@ 0xb0
 80248f2:	f105 00f2 	add.w	r0, r5, #242	@ 0xf2
 80248f6:	f7f0 ffdf 	bl	80158b8 <BAES_CmacCompute>
 80248fa:	f04f 0900 	mov.w	r9, #0
 80248fe:	e7a6      	b.n	802484e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2fa>
 8024900:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8024904:	f1b9 0f00 	cmp.w	r9, #0
 8024908:	f040 812e 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 802490c:	2c06      	cmp	r4, #6
 802490e:	f040 812b 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8024912:	f1b8 0f10 	cmp.w	r8, #16
 8024916:	f040 8127 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 802491a:	4639      	mov	r1, r7
 802491c:	4642      	mov	r2, r8
 802491e:	f505 7099 	add.w	r0, r5, #306	@ 0x132
 8024922:	ac1c      	add	r4, sp, #112	@ 0x70
 8024924:	f002 f93a 	bl	8026b9c <memmove>
 8024928:	4620      	mov	r0, r4
 802492a:	e9cd 9918 	strd	r9, r9, [sp, #96]	@ 0x60
 802492e:	e9cd 991a 	strd	r9, r9, [sp, #104]	@ 0x68
 8024932:	e9cd 991c 	strd	r9, r9, [sp, #112]	@ 0x70
 8024936:	e9cd 991e 	strd	r9, r9, [sp, #120]	@ 0x78
 802493a:	f7f7 fcf1 	bl	801c320 <MobleProvisionGenerateAuthValue>
 802493e:	f8d6 7a0c 	ldr.w	r7, [r6, #2572]	@ 0xa0c
 8024942:	ad2c      	add	r5, sp, #176	@ 0xb0
 8024944:	f507 7399 	add.w	r3, r7, #306	@ 0x132
 8024948:	f507 7ca1 	add.w	ip, r7, #322	@ 0x142
 802494c:	6818      	ldr	r0, [r3, #0]
 802494e:	6859      	ldr	r1, [r3, #4]
 8024950:	462a      	mov	r2, r5
 8024952:	c203      	stmia	r2!, {r0, r1}
 8024954:	3308      	adds	r3, #8
 8024956:	4563      	cmp	r3, ip
 8024958:	4615      	mov	r5, r2
 802495a:	d1f7      	bne.n	802494c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x3f8>
 802495c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8024960:	ad30      	add	r5, sp, #192	@ 0xc0
 8024962:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8024966:	ab18      	add	r3, sp, #96	@ 0x60
 8024968:	2220      	movs	r2, #32
 802496a:	a92c      	add	r1, sp, #176	@ 0xb0
 802496c:	f107 00f2 	add.w	r0, r7, #242	@ 0xf2
 8024970:	f7f0 ffa2 	bl	80158b8 <BAES_CmacCompute>
 8024974:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	@ 0xa0c
 8024978:	ab18      	add	r3, sp, #96	@ 0x60
 802497a:	f201 1211 	addw	r2, r1, #273	@ 0x111
 802497e:	f201 1021 	addw	r0, r1, #289	@ 0x121
 8024982:	f813 4b01 	ldrb.w	r4, [r3], #1
 8024986:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802498a:	42a5      	cmp	r5, r4
 802498c:	d005      	beq.n	802499a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x446>
 802498e:	2304      	movs	r3, #4
 8024990:	f881 31a8 	strb.w	r3, [r1, #424]	@ 0x1a8
 8024994:	f04f 0902 	mov.w	r9, #2
 8024998:	e759      	b.n	802484e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2fa>
 802499a:	4282      	cmp	r2, r0
 802499c:	d1f1      	bne.n	8024982 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x42e>
 802499e:	e756      	b.n	802484e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2fa>
 80249a0:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 80249a4:	2b00      	cmp	r3, #0
 80249a6:	f040 80df 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 80249aa:	2c07      	cmp	r4, #7
 80249ac:	f040 80dc 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 80249b0:	f1b8 0f21 	cmp.w	r8, #33	@ 0x21
 80249b4:	f040 80d8 	bne.w	8024b68 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 80249b8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80249bc:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 80249c0:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
 80249c4:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 80249c8:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 80249cc:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
 80249d0:	ac2c      	add	r4, sp, #176	@ 0xb0
 80249d2:	f105 03e2 	add.w	r3, r5, #226	@ 0xe2
 80249d6:	f105 0cf2 	add.w	ip, r5, #242	@ 0xf2
 80249da:	6818      	ldr	r0, [r3, #0]
 80249dc:	6859      	ldr	r1, [r3, #4]
 80249de:	4622      	mov	r2, r4
 80249e0:	c203      	stmia	r2!, {r0, r1}
 80249e2:	3308      	adds	r3, #8
 80249e4:	4563      	cmp	r3, ip
 80249e6:	4614      	mov	r4, r2
 80249e8:	d1f7      	bne.n	80249da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x486>
 80249ea:	f505 7399 	add.w	r3, r5, #306	@ 0x132
 80249ee:	ac30      	add	r4, sp, #192	@ 0xc0
 80249f0:	f505 7ea1 	add.w	lr, r5, #322	@ 0x142
 80249f4:	469c      	mov	ip, r3
 80249f6:	6818      	ldr	r0, [r3, #0]
 80249f8:	6859      	ldr	r1, [r3, #4]
 80249fa:	4622      	mov	r2, r4
 80249fc:	c203      	stmia	r2!, {r0, r1}
 80249fe:	3308      	adds	r3, #8
 8024a00:	4573      	cmp	r3, lr
 8024a02:	4614      	mov	r4, r2
 8024a04:	d1f7      	bne.n	80249f6 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x4a2>
 8024a06:	f505 7591 	add.w	r5, r5, #290	@ 0x122
 8024a0a:	aa34      	add	r2, sp, #208	@ 0xd0
 8024a0c:	6828      	ldr	r0, [r5, #0]
 8024a0e:	6869      	ldr	r1, [r5, #4]
 8024a10:	4613      	mov	r3, r2
 8024a12:	c303      	stmia	r3!, {r0, r1}
 8024a14:	3508      	adds	r5, #8
 8024a16:	4565      	cmp	r5, ip
 8024a18:	461a      	mov	r2, r3
 8024a1a:	d1f7      	bne.n	8024a0c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x4b8>
 8024a1c:	ab14      	add	r3, sp, #80	@ 0x50
 8024a1e:	2230      	movs	r2, #48	@ 0x30
 8024a20:	a92c      	add	r1, sp, #176	@ 0xb0
 8024a22:	a810      	add	r0, sp, #64	@ 0x40
 8024a24:	f7f0 ff48 	bl	80158b8 <BAES_CmacCompute>
 8024a28:	f04f 0804 	mov.w	r8, #4
 8024a2c:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	@ 0xa0c
 8024a30:	4b50      	ldr	r3, [pc, #320]	@ (8024b74 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x620>)
 8024a32:	9301      	str	r3, [sp, #4]
 8024a34:	2510      	movs	r5, #16
 8024a36:	f8cd 8008 	str.w	r8, [sp, #8]
 8024a3a:	9500      	str	r5, [sp, #0]
 8024a3c:	2220      	movs	r2, #32
 8024a3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8024a40:	ab14      	add	r3, sp, #80	@ 0x50
 8024a42:	eb0d 0002 	add.w	r0, sp, r2
 8024a46:	f7f1 f805 	bl	8015a54 <MoblePalCryptoK1.part.0>
 8024a4a:	2800      	cmp	r0, #0
 8024a4c:	f47f aeb4 	bne.w	80247b8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x264>
 8024a50:	4b49      	ldr	r3, [pc, #292]	@ (8024b78 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x624>)
 8024a52:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	@ 0xa0c
 8024a56:	f8cd 8008 	str.w	r8, [sp, #8]
 8024a5a:	e9cd 5300 	strd	r5, r3, [sp]
 8024a5e:	2220      	movs	r2, #32
 8024a60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8024a62:	ab14      	add	r3, sp, #80	@ 0x50
 8024a64:	a80c      	add	r0, sp, #48	@ 0x30
 8024a66:	f7f0 fff5 	bl	8015a54 <MoblePalCryptoK1.part.0>
 8024a6a:	4604      	mov	r4, r0
 8024a6c:	2800      	cmp	r0, #0
 8024a6e:	f47f aea3 	bne.w	80247b8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x264>
 8024a72:	2319      	movs	r3, #25
 8024a74:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8024a78:	2308      	movs	r3, #8
 8024a7a:	3719      	adds	r7, #25
 8024a7c:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8024a80:	9301      	str	r3, [sp, #4]
 8024a82:	9700      	str	r7, [sp, #0]
 8024a84:	230d      	movs	r3, #13
 8024a86:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8024a8a:	a908      	add	r1, sp, #32
 8024a8c:	a81c      	add	r0, sp, #112	@ 0x70
 8024a8e:	f7f2 f8bd 	bl	8016c0c <MoblePalCryptoAesCcmDecrypt>
 8024a92:	2801      	cmp	r0, #1
 8024a94:	d906      	bls.n	8024aa4 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x550>
 8024a96:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	@ 0xa0c
 8024a9a:	2206      	movs	r2, #6
 8024a9c:	f883 21a8 	strb.w	r2, [r3, #424]	@ 0x1a8
 8024aa0:	2402      	movs	r4, #2
 8024aa2:	e5b4      	b.n	802460e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8024aa4:	4b35      	ldr	r3, [pc, #212]	@ (8024b7c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x628>)
 8024aa6:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	@ 0xa0c
 8024aaa:	f8cd 8008 	str.w	r8, [sp, #8]
 8024aae:	e9cd 5300 	strd	r5, r3, [sp]
 8024ab2:	e9cd 4418 	strd	r4, r4, [sp, #96]	@ 0x60
 8024ab6:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
 8024aba:	ab14      	add	r3, sp, #80	@ 0x50
 8024abc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8024abe:	2220      	movs	r2, #32
 8024ac0:	a818      	add	r0, sp, #96	@ 0x60
 8024ac2:	f7f0 ffc7 	bl	8015a54 <MoblePalCryptoK1.part.0>
 8024ac6:	2801      	cmp	r0, #1
 8024ac8:	f63f ae76 	bhi.w	80247b8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x264>
 8024acc:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 8024ad0:	f89d 5081 	ldrb.w	r5, [sp, #129]	@ 0x81
 8024ad4:	021b      	lsls	r3, r3, #8
 8024ad6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8024ada:	441d      	add	r5, r3
 8024adc:	a818      	add	r0, sp, #96	@ 0x60
 8024ade:	f7f1 fced 	bl	80164bc <MoblePalCryptoSetDevKey>
 8024ae2:	4629      	mov	r1, r5
 8024ae4:	a81c      	add	r0, sp, #112	@ 0x70
 8024ae6:	f7f2 f985 	bl	8016df4 <MoblePalCryptoSetNetworkKey>
 8024aea:	2801      	cmp	r0, #1
 8024aec:	4604      	mov	r4, r0
 8024aee:	f63f ad8e 	bhi.w	802460e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8024af2:	2101      	movs	r1, #1
 8024af4:	4628      	mov	r0, r5
 8024af6:	f7f1 fbf3 	bl	80162e0 <MoblePalCryptoSetNodeIdntyState>
 8024afa:	f89d 7082 	ldrb.w	r7, [sp, #130]	@ 0x82
 8024afe:	07fa      	lsls	r2, r7, #31
 8024b00:	d50b      	bpl.n	8024b1a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x5c6>
 8024b02:	4628      	mov	r0, r5
 8024b04:	f7f2 ff32 	bl	801796c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8024b08:	4629      	mov	r1, r5
 8024b0a:	4604      	mov	r4, r0
 8024b0c:	a81c      	add	r0, sp, #112	@ 0x70
 8024b0e:	f7f2 f905 	bl	8016d1c <MoblePalCryptoSetNewNetworkKey>
 8024b12:	b2e1      	uxtb	r1, r4
 8024b14:	2002      	movs	r0, #2
 8024b16:	f7f9 ff25 	bl	801e964 <ModelConfigUpdateKRState>
 8024b1a:	07bb      	lsls	r3, r7, #30
 8024b1c:	bf42      	ittt	mi
 8024b1e:	4b18      	ldrmi	r3, [pc, #96]	@ (8024b80 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x62c>)
 8024b20:	2201      	movmi	r2, #1
 8024b22:	f883 265c 	strbmi.w	r2, [r3, #1628]	@ 0x65c
 8024b26:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 8024b2a:	681c      	ldr	r4, [r3, #0]
 8024b2c:	2104      	movs	r1, #4
 8024b2e:	1d22      	adds	r2, r4, #4
 8024b30:	f10d 0083 	add.w	r0, sp, #131	@ 0x83
 8024b34:	f7f3 fc8c 	bl	8018450 <MobleInputStreamGetBigEndian>
 8024b38:	6860      	ldr	r0, [r4, #4]
 8024b3a:	f7f6 ff5b 	bl	801b9f4 <MobleStackForcedSetIvIndex>
 8024b3e:	2400      	movs	r4, #0
 8024b40:	aa07      	add	r2, sp, #28
 8024b42:	2102      	movs	r1, #2
 8024b44:	f10d 0087 	add.w	r0, sp, #135	@ 0x87
 8024b48:	9407      	str	r4, [sp, #28]
 8024b4a:	f7f3 fc81 	bl	8018450 <MobleInputStreamGetBigEndian>
 8024b4e:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 8024b52:	9a07      	ldr	r2, [sp, #28]
 8024b54:	681b      	ldr	r3, [r3, #0]
 8024b56:	805a      	strh	r2, [r3, #2]
 8024b58:	2205      	movs	r2, #5
 8024b5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8024b5e:	e556      	b.n	802460e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8024b60:	2301      	movs	r3, #1
 8024b62:	f885 31a8 	strb.w	r3, [r5, #424]	@ 0x1a8
 8024b66:	e79b      	b.n	8024aa0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x54c>
 8024b68:	2303      	movs	r3, #3
 8024b6a:	e7fa      	b.n	8024b62 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x60e>
 8024b6c:	2403      	movs	r4, #3
 8024b6e:	e54e      	b.n	802460e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8024b70:	0802eb83 	.word	0x0802eb83
 8024b74:	0802eb88 	.word	0x0802eb88
 8024b78:	0802eb8d 	.word	0x0802eb8d
 8024b7c:	0802eb92 	.word	0x0802eb92
 8024b80:	2000141c 	.word	0x2000141c

08024b84 <MobleProvision_UnprovisionedNode_SetInputMessage>:
 8024b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024b86:	4b0d      	ldr	r3, [pc, #52]	@ (8024bbc <MobleProvision_UnprovisionedNode_SetInputMessage+0x38>)
 8024b88:	4605      	mov	r5, r0
 8024b8a:	460c      	mov	r4, r1
 8024b8c:	b939      	cbnz	r1, 8024b9e <MobleProvision_UnprovisionedNode_SetInputMessage+0x1a>
 8024b8e:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 8024b92:	2202      	movs	r2, #2
 8024b94:	f883 21a8 	strb.w	r2, [r3, #424]	@ 0x1a8
 8024b98:	2003      	movs	r0, #3
 8024b9a:	b003      	add	sp, #12
 8024b9c:	bd30      	pop	{r4, r5, pc}
 8024b9e:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 8024ba2:	9201      	str	r2, [sp, #4]
 8024ba4:	f7f7 fb16 	bl	801c1d4 <MobleProvisionGetRole>
 8024ba8:	2801      	cmp	r0, #1
 8024baa:	d1f5      	bne.n	8024b98 <MobleProvision_UnprovisionedNode_SetInputMessage+0x14>
 8024bac:	9a01      	ldr	r2, [sp, #4]
 8024bae:	4621      	mov	r1, r4
 8024bb0:	4628      	mov	r0, r5
 8024bb2:	b003      	add	sp, #12
 8024bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024bb8:	f7ff bccc 	b.w	8024554 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0>
 8024bbc:	20002514 	.word	0x20002514

08024bc0 <MobleProvisionBearerGatt_FSM>:
 8024bc0:	b538      	push	{r3, r4, r5, lr}
 8024bc2:	4d25      	ldr	r5, [pc, #148]	@ (8024c58 <MobleProvisionBearerGatt_FSM+0x98>)
 8024bc4:	461c      	mov	r4, r3
 8024bc6:	2803      	cmp	r0, #3
 8024bc8:	d804      	bhi.n	8024bd4 <MobleProvisionBearerGatt_FSM+0x14>
 8024bca:	e8df f000 	tbb	[pc, r0]
 8024bce:	3202      	.short	0x3202
 8024bd0:	1143      	.short	0x1143
 8024bd2:	b109      	cbz	r1, 8024bd8 <MobleProvisionBearerGatt_FSM+0x18>
 8024bd4:	2002      	movs	r0, #2
 8024bd6:	e00b      	b.n	8024bf0 <MobleProvisionBearerGatt_FSM+0x30>
 8024bd8:	f7f8 fa44 	bl	801d064 <MobleProvision_UnprovisionedNode_IsCompleted>
 8024bdc:	2801      	cmp	r0, #1
 8024bde:	d108      	bne.n	8024bf2 <MobleProvisionBearerGatt_FSM+0x32>
 8024be0:	4b1d      	ldr	r3, [pc, #116]	@ (8024c58 <MobleProvisionBearerGatt_FSM+0x98>)
 8024be2:	f8d3 0a44 	ldr.w	r0, [r3, #2628]	@ 0xa44
 8024be6:	f7f0 f995 	bl	8014f14 <MoblePalTimerStop>
 8024bea:	f7f0 fc05 	bl	80153f8 <MoblePalBluetoothPrvnCmpltReset>
 8024bee:	2003      	movs	r0, #3
 8024bf0:	bd38      	pop	{r3, r4, r5, pc}
 8024bf2:	f7f7 fc47 	bl	801c484 <MobleProvision_UnprovisionedNode_GetNextOperation>
 8024bf6:	2801      	cmp	r0, #1
 8024bf8:	d0fa      	beq.n	8024bf0 <MobleProvisionBearerGatt_FSM+0x30>
 8024bfa:	2802      	cmp	r0, #2
 8024bfc:	d1ea      	bne.n	8024bd4 <MobleProvisionBearerGatt_FSM+0x14>
 8024bfe:	f8d5 2a44 	ldr.w	r2, [r5, #2628]	@ 0xa44
 8024c02:	4610      	mov	r0, r2
 8024c04:	f7f0 f986 	bl	8014f14 <MoblePalTimerStop>
 8024c08:	f241 3188 	movw	r1, #5000	@ 0x1388
 8024c0c:	4610      	mov	r0, r2
 8024c0e:	f7f0 f959 	bl	8014ec4 <MoblePalTimerStartOnce>
 8024c12:	2801      	cmp	r0, #1
 8024c14:	d8de      	bhi.n	8024bd4 <MobleProvisionBearerGatt_FSM+0x14>
 8024c16:	f7f8 fa13 	bl	801d040 <MobleProvisionBearerGatt_Transmit>
 8024c1a:	f7f9 fd5f 	bl	801e6dc <MobleProvision_UnprovisionedNode_CompleteOperation>
 8024c1e:	f7f7 fc55 	bl	801c4cc <BnrgmProvision_UnprovisionedGetState>
 8024c22:	1fc3      	subs	r3, r0, #7
 8024c24:	4258      	negs	r0, r3
 8024c26:	4158      	adcs	r0, r3
 8024c28:	0040      	lsls	r0, r0, #1
 8024c2a:	2400      	movs	r4, #0
 8024c2c:	4622      	mov	r2, r4
 8024c2e:	4621      	mov	r1, r4
 8024c30:	e7c9      	b.n	8024bc6 <MobleProvisionBearerGatt_FSM+0x6>
 8024c32:	2901      	cmp	r1, #1
 8024c34:	d1ce      	bne.n	8024bd4 <MobleProvisionBearerGatt_FSM+0x14>
 8024c36:	4611      	mov	r1, r2
 8024c38:	f8d5 0a44 	ldr.w	r0, [r5, #2628]	@ 0xa44
 8024c3c:	3c01      	subs	r4, #1
 8024c3e:	f7f0 f969 	bl	8014f14 <MoblePalTimerStop>
 8024c42:	b2e2      	uxtb	r2, r4
 8024c44:	f811 0b01 	ldrb.w	r0, [r1], #1
 8024c48:	f7ff ff9c 	bl	8024b84 <MobleProvision_UnprovisionedNode_SetInputMessage>
 8024c4c:	f7f9 fd46 	bl	801e6dc <MobleProvision_UnprovisionedNode_CompleteOperation>
 8024c50:	2000      	movs	r0, #0
 8024c52:	e7ea      	b.n	8024c2a <MobleProvisionBearerGatt_FSM+0x6a>
 8024c54:	2001      	movs	r0, #1
 8024c56:	e7cb      	b.n	8024bf0 <MobleProvisionBearerGatt_FSM+0x30>
 8024c58:	20002514 	.word	0x20002514

08024c5c <MobleProvisionBearerGatt_TimerCallback>:
 8024c5c:	b510      	push	{r4, lr}
 8024c5e:	460c      	mov	r4, r1
 8024c60:	2300      	movs	r3, #0
 8024c62:	7820      	ldrb	r0, [r4, #0]
 8024c64:	461a      	mov	r2, r3
 8024c66:	2102      	movs	r1, #2
 8024c68:	f7ff ffaa 	bl	8024bc0 <MobleProvisionBearerGatt_FSM>
 8024c6c:	7020      	strb	r0, [r4, #0]
 8024c6e:	f7f9 fae5 	bl	801e23c <MobleStackConfigInvalidate>
 8024c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024c76:	f7f7 bde3 	b.w	801c840 <MoblePalBluetoothGracefulReset>
	...

08024c7c <MobleProvisionBearerGatt_Init>:
 8024c7c:	b538      	push	{r3, r4, r5, lr}
 8024c7e:	f7f7 fba1 	bl	801c3c4 <MobleProvision_UnprovisionedNode_Init>
 8024c82:	2801      	cmp	r0, #1
 8024c84:	4604      	mov	r4, r0
 8024c86:	d81a      	bhi.n	8024cbe <MobleProvisionBearerGatt_Init+0x42>
 8024c88:	4d15      	ldr	r5, [pc, #84]	@ (8024ce0 <MobleProvisionBearerGatt_Init+0x64>)
 8024c8a:	4916      	ldr	r1, [pc, #88]	@ (8024ce4 <MobleProvisionBearerGatt_Init+0x68>)
 8024c8c:	2302      	movs	r3, #2
 8024c8e:	f605 223c 	addw	r2, r5, #2620	@ 0xa3c
 8024c92:	f505 6024 	add.w	r0, r5, #2624	@ 0xa40
 8024c96:	f885 3a3c 	strb.w	r3, [r5, #2620]	@ 0xa3c
 8024c9a:	f7f0 f8a9 	bl	8014df0 <MoblePalTimerCreate>
 8024c9e:	2801      	cmp	r0, #1
 8024ca0:	4604      	mov	r4, r0
 8024ca2:	d80c      	bhi.n	8024cbe <MobleProvisionBearerGatt_Init+0x42>
 8024ca4:	4910      	ldr	r1, [pc, #64]	@ (8024ce8 <MobleProvisionBearerGatt_Init+0x6c>)
 8024ca6:	2200      	movs	r2, #0
 8024ca8:	f605 2044 	addw	r0, r5, #2628	@ 0xa44
 8024cac:	f7f0 f8a0 	bl	8014df0 <MoblePalTimerCreate>
 8024cb0:	2801      	cmp	r0, #1
 8024cb2:	4604      	mov	r4, r0
 8024cb4:	d905      	bls.n	8024cc2 <MobleProvisionBearerGatt_Init+0x46>
 8024cb6:	f505 6024 	add.w	r0, r5, #2624	@ 0xa40
 8024cba:	f7f7 fb79 	bl	801c3b0 <MobleProvisionBearerGatt_DeleteTimer>
 8024cbe:	4620      	mov	r0, r4
 8024cc0:	bd38      	pop	{r3, r4, r5, pc}
 8024cc2:	2300      	movs	r3, #0
 8024cc4:	4619      	mov	r1, r3
 8024cc6:	461a      	mov	r2, r3
 8024cc8:	4618      	mov	r0, r3
 8024cca:	f7ff ff79 	bl	8024bc0 <MobleProvisionBearerGatt_FSM>
 8024cce:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8024cd2:	f885 0a3c 	strb.w	r0, [r5, #2620]	@ 0xa3c
 8024cd6:	f8d5 0a40 	ldr.w	r0, [r5, #2624]	@ 0xa40
 8024cda:	f7f0 f8f3 	bl	8014ec4 <MoblePalTimerStartOnce>
 8024cde:	e7ee      	b.n	8024cbe <MobleProvisionBearerGatt_Init+0x42>
 8024ce0:	20002514 	.word	0x20002514
 8024ce4:	08024c5d 	.word	0x08024c5d
 8024ce8:	08014b81 	.word	0x08014b81

08024cec <MobleGattOnConnectDisconnect>:
 8024cec:	b508      	push	{r3, lr}
 8024cee:	b318      	cbz	r0, 8024d38 <MobleGattOnConnectDisconnect+0x4c>
 8024cf0:	f8d0 3164 	ldr.w	r3, [r0, #356]	@ 0x164
 8024cf4:	b313      	cbz	r3, 8024d3c <MobleGattOnConnectDisconnect+0x50>
 8024cf6:	4a12      	ldr	r2, [pc, #72]	@ (8024d40 <MobleGattOnConnectDisconnect+0x54>)
 8024cf8:	2901      	cmp	r1, #1
 8024cfa:	8992      	ldrh	r2, [r2, #12]
 8024cfc:	d112      	bne.n	8024d24 <MobleGattOnConnectDisconnect+0x38>
 8024cfe:	f8c0 3168 	str.w	r3, [r0, #360]	@ 0x168
 8024d02:	881b      	ldrh	r3, [r3, #0]
 8024d04:	4293      	cmp	r3, r2
 8024d06:	d008      	beq.n	8024d1a <MobleGattOnConnectDisconnect+0x2e>
 8024d08:	f7f5 ff3a 	bl	801ab80 <BnrgmProxyProtocol_Init>
 8024d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8024d44 <MobleGattOnConnectDisconnect+0x58>)
 8024d0e:	2000      	movs	r0, #0
 8024d10:	f883 06f4 	strb.w	r0, [r3, #1780]	@ 0x6f4
 8024d14:	f8a3 06f6 	strh.w	r0, [r3, #1782]	@ 0x6f6
 8024d18:	e003      	b.n	8024d22 <MobleGattOnConnectDisconnect+0x36>
 8024d1a:	f7ff ffaf 	bl	8024c7c <MobleProvisionBearerGatt_Init>
 8024d1e:	2801      	cmp	r0, #1
 8024d20:	d9f2      	bls.n	8024d08 <MobleGattOnConnectDisconnect+0x1c>
 8024d22:	bd08      	pop	{r3, pc}
 8024d24:	f8d0 3168 	ldr.w	r3, [r0, #360]	@ 0x168
 8024d28:	881b      	ldrh	r3, [r3, #0]
 8024d2a:	4293      	cmp	r3, r2
 8024d2c:	d101      	bne.n	8024d32 <MobleGattOnConnectDisconnect+0x46>
 8024d2e:	f7ff fae9 	bl	8024304 <MobleProvisionBearerGatt_DeInit>
 8024d32:	f7f5 ff17 	bl	801ab64 <BnrgmProxyProtocol_DeInit>
 8024d36:	e7e9      	b.n	8024d0c <MobleGattOnConnectDisconnect+0x20>
 8024d38:	2003      	movs	r0, #3
 8024d3a:	e7f2      	b.n	8024d22 <MobleGattOnConnectDisconnect+0x36>
 8024d3c:	2002      	movs	r0, #2
 8024d3e:	e7f0      	b.n	8024d22 <MobleGattOnConnectDisconnect+0x36>
 8024d40:	20000008 	.word	0x20000008
 8024d44:	20002514 	.word	0x20002514

08024d48 <MobleStackConnectionCallback>:
 8024d48:	b510      	push	{r4, lr}
 8024d4a:	f7f0 fa93 	bl	8015274 <MoblePalBluetoothGetConnectionState>
 8024d4e:	2801      	cmp	r0, #1
 8024d50:	4604      	mov	r4, r0
 8024d52:	d01b      	beq.n	8024d8c <MobleStackConnectionCallback+0x44>
 8024d54:	2802      	cmp	r0, #2
 8024d56:	d01d      	beq.n	8024d94 <MobleStackConnectionCallback+0x4c>
 8024d58:	bb50      	cbnz	r0, 8024db0 <MobleStackConnectionCallback+0x68>
 8024d5a:	4c16      	ldr	r4, [pc, #88]	@ (8024db4 <MobleStackConnectionCallback+0x6c>)
 8024d5c:	f7f5 ff62 	bl	801ac24 <BnrgmProxyConfig_ResetFilter>
 8024d60:	f7f7 fd10 	bl	801c784 <MobleTransmitSuspendAll>
 8024d64:	f7f7 fd1e 	bl	801c7a4 <MobleTransmitResumeAll>
 8024d68:	2101      	movs	r1, #1
 8024d6a:	f504 60d0 	add.w	r0, r4, #1664	@ 0x680
 8024d6e:	f7ff ffbd 	bl	8024cec <MobleGattOnConnectDisconnect>
 8024d72:	2101      	movs	r1, #1
 8024d74:	f504 60d0 	add.w	r0, r4, #1664	@ 0x680
 8024d78:	f7f8 fd34 	bl	801d7e4 <MobleStackFSM>
 8024d7c:	f8d4 07f8 	ldr.w	r0, [r4, #2040]	@ 0x7f8
 8024d80:	f504 61d0 	add.w	r1, r4, #1664	@ 0x680
 8024d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d88:	f7f3 b8a2 	b.w	8017ed0 <MobleStackFastAdvTimeoutTimerCallback>
 8024d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d90:	f7f7 bd08 	b.w	801c7a4 <MobleTransmitResumeAll>
 8024d94:	f7f7 fd06 	bl	801c7a4 <MobleTransmitResumeAll>
 8024d98:	2100      	movs	r1, #0
 8024d9a:	4807      	ldr	r0, [pc, #28]	@ (8024db8 <MobleStackConnectionCallback+0x70>)
 8024d9c:	f7ff ffa6 	bl	8024cec <MobleGattOnConnectDisconnect>
 8024da0:	4621      	mov	r1, r4
 8024da2:	4805      	ldr	r0, [pc, #20]	@ (8024db8 <MobleStackConnectionCallback+0x70>)
 8024da4:	f7f8 fd1e 	bl	801d7e4 <MobleStackFSM>
 8024da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024dac:	f7f5 bb80 	b.w	801a4b0 <MobleStackCreateStartFastAdvTimer>
 8024db0:	bd10      	pop	{r4, pc}
 8024db2:	bf00      	nop
 8024db4:	2000141c 	.word	0x2000141c
 8024db8:	20001a9c 	.word	0x20001a9c

08024dbc <MobleProvisionBearerGatt_ProcessPacket>:
 8024dbc:	b510      	push	{r4, lr}
 8024dbe:	4602      	mov	r2, r0
 8024dc0:	4c06      	ldr	r4, [pc, #24]	@ (8024ddc <MobleProvisionBearerGatt_ProcessPacket+0x20>)
 8024dc2:	460b      	mov	r3, r1
 8024dc4:	b141      	cbz	r1, 8024dd8 <MobleProvisionBearerGatt_ProcessPacket+0x1c>
 8024dc6:	f894 0a3c 	ldrb.w	r0, [r4, #2620]	@ 0xa3c
 8024dca:	2101      	movs	r1, #1
 8024dcc:	f7ff fef8 	bl	8024bc0 <MobleProvisionBearerGatt_FSM>
 8024dd0:	f884 0a3c 	strb.w	r0, [r4, #2620]	@ 0xa3c
 8024dd4:	2000      	movs	r0, #0
 8024dd6:	bd10      	pop	{r4, pc}
 8024dd8:	2002      	movs	r0, #2
 8024dda:	e7f9      	b.n	8024dd0 <MobleProvisionBearerGatt_ProcessPacket+0x14>
 8024ddc:	20002514 	.word	0x20002514

08024de0 <BnrgmProxyProtocol_ProcessPacket>:
 8024de0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8024de4:	460e      	mov	r6, r1
 8024de6:	4611      	mov	r1, r2
 8024de8:	2a00      	cmp	r2, #0
 8024dea:	f000 80a1 	beq.w	8024f30 <BnrgmProxyProtocol_ProcessPacket+0x150>
 8024dee:	2e00      	cmp	r6, #0
 8024df0:	f000 809e 	beq.w	8024f30 <BnrgmProxyProtocol_ProcessPacket+0x150>
 8024df4:	7833      	ldrb	r3, [r6, #0]
 8024df6:	f003 083f 	and.w	r8, r3, #63	@ 0x3f
 8024dfa:	b920      	cbnz	r0, 8024e06 <BnrgmProxyProtocol_ProcessPacket+0x26>
 8024dfc:	f1b8 0f03 	cmp.w	r8, #3
 8024e00:	d106      	bne.n	8024e10 <BnrgmProxyProtocol_ProcessPacket+0x30>
 8024e02:	2502      	movs	r5, #2
 8024e04:	e042      	b.n	8024e8c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8024e06:	2801      	cmp	r0, #1
 8024e08:	d102      	bne.n	8024e10 <BnrgmProxyProtocol_ProcessPacket+0x30>
 8024e0a:	f1b8 0f03 	cmp.w	r8, #3
 8024e0e:	d1f8      	bne.n	8024e02 <BnrgmProxyProtocol_ProcessPacket+0x22>
 8024e10:	f003 05c0 	and.w	r5, r3, #192	@ 0xc0
 8024e14:	2d40      	cmp	r5, #64	@ 0x40
 8024e16:	d050      	beq.n	8024eba <BnrgmProxyProtocol_ProcessPacket+0xda>
 8024e18:	d802      	bhi.n	8024e20 <BnrgmProxyProtocol_ProcessPacket+0x40>
 8024e1a:	b30d      	cbz	r5, 8024e60 <BnrgmProxyProtocol_ProcessPacket+0x80>
 8024e1c:	2500      	movs	r5, #0
 8024e1e:	e035      	b.n	8024e8c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8024e20:	061b      	lsls	r3, r3, #24
 8024e22:	d5fb      	bpl.n	8024e1c <BnrgmProxyProtocol_ProcessPacket+0x3c>
 8024e24:	4f43      	ldr	r7, [pc, #268]	@ (8024f34 <BnrgmProxyProtocol_ProcessPacket+0x154>)
 8024e26:	7a3b      	ldrb	r3, [r7, #8]
 8024e28:	2b00      	cmp	r3, #0
 8024e2a:	d0ea      	beq.n	8024e02 <BnrgmProxyProtocol_ProcessPacket+0x22>
 8024e2c:	7a7b      	ldrb	r3, [r7, #9]
 8024e2e:	4543      	cmp	r3, r8
 8024e30:	d1e7      	bne.n	8024e02 <BnrgmProxyProtocol_ProcessPacket+0x22>
 8024e32:	1e4c      	subs	r4, r1, #1
 8024e34:	b2e1      	uxtb	r1, r4
 8024e36:	1c70      	adds	r0, r6, #1
 8024e38:	f7f5 fedc 	bl	801abf4 <BnrgmProxyProtocol_AddFragment>
 8024e3c:	2800      	cmp	r0, #0
 8024e3e:	d047      	beq.n	8024ed0 <BnrgmProxyProtocol_ProcessPacket+0xf0>
 8024e40:	7833      	ldrb	r3, [r6, #0]
 8024e42:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8024e46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8024e4a:	2b80      	cmp	r3, #128	@ 0x80
 8024e4c:	4610      	mov	r0, r2
 8024e4e:	d14a      	bne.n	8024ee6 <BnrgmProxyProtocol_ProcessPacket+0x106>
 8024e50:	f7f0 f860 	bl	8014f14 <MoblePalTimerStop>
 8024e54:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8024e58:	4610      	mov	r0, r2
 8024e5a:	f7f0 f833 	bl	8014ec4 <MoblePalTimerStartOnce>
 8024e5e:	e7dd      	b.n	8024e1c <BnrgmProxyProtocol_ProcessPacket+0x3c>
 8024e60:	4b34      	ldr	r3, [pc, #208]	@ (8024f34 <BnrgmProxyProtocol_ProcessPacket+0x154>)
 8024e62:	7a1b      	ldrb	r3, [r3, #8]
 8024e64:	b10b      	cbz	r3, 8024e6a <BnrgmProxyProtocol_ProcessPacket+0x8a>
 8024e66:	f7f5 feb7 	bl	801abd8 <BnrgmProxyProtocol_ResetSar>
 8024e6a:	f1b8 0f03 	cmp.w	r8, #3
 8024e6e:	d8d5      	bhi.n	8024e1c <BnrgmProxyProtocol_ProcessPacket+0x3c>
 8024e70:	e8df f008 	tbb	[pc, r8]
 8024e74:	1d171002 	.word	0x1d171002
 8024e78:	237f      	movs	r3, #127	@ 0x7f
 8024e7a:	1e4a      	subs	r2, r1, #1
 8024e7c:	9300      	str	r3, [sp, #0]
 8024e7e:	2301      	movs	r3, #1
 8024e80:	b2d2      	uxtb	r2, r2
 8024e82:	18f1      	adds	r1, r6, r3
 8024e84:	2000      	movs	r0, #0
 8024e86:	f7fa fbaf 	bl	801f5e8 <MobleStackProcessData>
 8024e8a:	4645      	mov	r5, r8
 8024e8c:	4628      	mov	r0, r5
 8024e8e:	b002      	add	sp, #8
 8024e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024e94:	237f      	movs	r3, #127	@ 0x7f
 8024e96:	2200      	movs	r2, #0
 8024e98:	3901      	subs	r1, #1
 8024e9a:	1c70      	adds	r0, r6, #1
 8024e9c:	f7f9 fdb2 	bl	801ea04 <MobleStackProcessBeacon>
 8024ea0:	e7f4      	b.n	8024e8c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8024ea2:	3901      	subs	r1, #1
 8024ea4:	b2c9      	uxtb	r1, r1
 8024ea6:	1c70      	adds	r0, r6, #1
 8024ea8:	f7f6 f816 	bl	801aed8 <BnrgmProxyConfig_ProcessData>
 8024eac:	e7ee      	b.n	8024e8c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8024eae:	3901      	subs	r1, #1
 8024eb0:	b2c9      	uxtb	r1, r1
 8024eb2:	1c70      	adds	r0, r6, #1
 8024eb4:	f7ff ff82 	bl	8024dbc <MobleProvisionBearerGatt_ProcessPacket>
 8024eb8:	e7e8      	b.n	8024e8c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8024eba:	4d1e      	ldr	r5, [pc, #120]	@ (8024f34 <BnrgmProxyProtocol_ProcessPacket+0x154>)
 8024ebc:	7a2b      	ldrb	r3, [r5, #8]
 8024ebe:	b10b      	cbz	r3, 8024ec4 <BnrgmProxyProtocol_ProcessPacket+0xe4>
 8024ec0:	f7f5 fe8a 	bl	801abd8 <BnrgmProxyProtocol_ResetSar>
 8024ec4:	3901      	subs	r1, #1
 8024ec6:	b2c9      	uxtb	r1, r1
 8024ec8:	1c70      	adds	r0, r6, #1
 8024eca:	f7f5 fe93 	bl	801abf4 <BnrgmProxyProtocol_AddFragment>
 8024ece:	b908      	cbnz	r0, 8024ed4 <BnrgmProxyProtocol_ProcessPacket+0xf4>
 8024ed0:	2504      	movs	r5, #4
 8024ed2:	e7db      	b.n	8024e8c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8024ed4:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 8024ed8:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8024edc:	f7ef fff2 	bl	8014ec4 <MoblePalTimerStartOnce>
 8024ee0:	f885 8009 	strb.w	r8, [r5, #9]
 8024ee4:	e79a      	b.n	8024e1c <BnrgmProxyProtocol_ProcessPacket+0x3c>
 8024ee6:	f7f0 f815 	bl	8014f14 <MoblePalTimerStop>
 8024eea:	7a7b      	ldrb	r3, [r7, #9]
 8024eec:	2b03      	cmp	r3, #3
 8024eee:	d80b      	bhi.n	8024f08 <BnrgmProxyProtocol_ProcessPacket+0x128>
 8024ef0:	e8df f003 	tbb	[pc, r3]
 8024ef4:	19140d02 	.word	0x19140d02
 8024ef8:	237f      	movs	r3, #127	@ 0x7f
 8024efa:	9300      	str	r3, [sp, #0]
 8024efc:	7a3a      	ldrb	r2, [r7, #8]
 8024efe:	490e      	ldr	r1, [pc, #56]	@ (8024f38 <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8024f00:	2301      	movs	r3, #1
 8024f02:	2000      	movs	r0, #0
 8024f04:	f7fa fb70 	bl	801f5e8 <MobleStackProcessData>
 8024f08:	2500      	movs	r5, #0
 8024f0a:	723d      	strb	r5, [r7, #8]
 8024f0c:	e7be      	b.n	8024e8c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8024f0e:	7a39      	ldrb	r1, [r7, #8]
 8024f10:	4809      	ldr	r0, [pc, #36]	@ (8024f38 <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8024f12:	237f      	movs	r3, #127	@ 0x7f
 8024f14:	2200      	movs	r2, #0
 8024f16:	f7f9 fd75 	bl	801ea04 <MobleStackProcessBeacon>
 8024f1a:	e7f5      	b.n	8024f08 <BnrgmProxyProtocol_ProcessPacket+0x128>
 8024f1c:	7a39      	ldrb	r1, [r7, #8]
 8024f1e:	4806      	ldr	r0, [pc, #24]	@ (8024f38 <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8024f20:	f7f5 ffda 	bl	801aed8 <BnrgmProxyConfig_ProcessData>
 8024f24:	e7f0      	b.n	8024f08 <BnrgmProxyProtocol_ProcessPacket+0x128>
 8024f26:	7a39      	ldrb	r1, [r7, #8]
 8024f28:	4803      	ldr	r0, [pc, #12]	@ (8024f38 <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8024f2a:	f7ff ff47 	bl	8024dbc <MobleProvisionBearerGatt_ProcessPacket>
 8024f2e:	e7eb      	b.n	8024f08 <BnrgmProxyProtocol_ProcessPacket+0x128>
 8024f30:	2503      	movs	r5, #3
 8024f32:	e7ab      	b.n	8024e8c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8024f34:	20000324 	.word	0x20000324
 8024f38:	2000032e 	.word	0x2000032e

08024f3c <MobleGattWriteCallback>:
 8024f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024f3e:	460c      	mov	r4, r1
 8024f40:	4611      	mov	r1, r2
 8024f42:	461a      	mov	r2, r3
 8024f44:	2800      	cmp	r0, #0
 8024f46:	d052      	beq.n	8024fee <MobleGattWriteCallback+0xb2>
 8024f48:	2900      	cmp	r1, #0
 8024f4a:	d050      	beq.n	8024fee <MobleGattWriteCallback+0xb2>
 8024f4c:	2b00      	cmp	r3, #0
 8024f4e:	d04e      	beq.n	8024fee <MobleGattWriteCallback+0xb2>
 8024f50:	f8d0 3164 	ldr.w	r3, [r0, #356]	@ 0x164
 8024f54:	2b00      	cmp	r3, #0
 8024f56:	d048      	beq.n	8024fea <MobleGattWriteCallback+0xae>
 8024f58:	6858      	ldr	r0, [r3, #4]
 8024f5a:	2800      	cmp	r0, #0
 8024f5c:	d045      	beq.n	8024fea <MobleGattWriteCallback+0xae>
 8024f5e:	789f      	ldrb	r7, [r3, #2]
 8024f60:	2f00      	cmp	r7, #0
 8024f62:	d042      	beq.n	8024fea <MobleGattWriteCallback+0xae>
 8024f64:	2500      	movs	r5, #0
 8024f66:	8983      	ldrh	r3, [r0, #12]
 8024f68:	1c5e      	adds	r6, r3, #1
 8024f6a:	b2b6      	uxth	r6, r6
 8024f6c:	42b4      	cmp	r4, r6
 8024f6e:	d116      	bne.n	8024f9e <MobleGattWriteCallback+0x62>
 8024f70:	7903      	ldrb	r3, [r0, #4]
 8024f72:	4293      	cmp	r3, r2
 8024f74:	d33b      	bcc.n	8024fee <MobleGattWriteCallback+0xb2>
 8024f76:	7883      	ldrb	r3, [r0, #2]
 8024f78:	f013 0f06 	tst.w	r3, #6
 8024f7c:	d035      	beq.n	8024fea <MobleGattWriteCallback+0xae>
 8024f7e:	8803      	ldrh	r3, [r0, #0]
 8024f80:	f642 20db 	movw	r0, #10971	@ 0x2adb
 8024f84:	4283      	cmp	r3, r0
 8024f86:	d008      	beq.n	8024f9a <MobleGattWriteCallback+0x5e>
 8024f88:	f642 20dd 	movw	r0, #10973	@ 0x2add
 8024f8c:	4283      	cmp	r3, r0
 8024f8e:	d12c      	bne.n	8024fea <MobleGattWriteCallback+0xae>
 8024f90:	2000      	movs	r0, #0
 8024f92:	f7ff ff25 	bl	8024de0 <BnrgmProxyProtocol_ProcessPacket>
 8024f96:	2000      	movs	r0, #0
 8024f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024f9a:	2001      	movs	r0, #1
 8024f9c:	e7f9      	b.n	8024f92 <MobleGattWriteCallback+0x56>
 8024f9e:	3302      	adds	r3, #2
 8024fa0:	b29b      	uxth	r3, r3
 8024fa2:	429c      	cmp	r4, r3
 8024fa4:	d11b      	bne.n	8024fde <MobleGattWriteCallback+0xa2>
 8024fa6:	7883      	ldrb	r3, [r0, #2]
 8024fa8:	071b      	lsls	r3, r3, #28
 8024faa:	d51e      	bpl.n	8024fea <MobleGattWriteCallback+0xae>
 8024fac:	8803      	ldrh	r3, [r0, #0]
 8024fae:	f642 22dc 	movw	r2, #10972	@ 0x2adc
 8024fb2:	4293      	cmp	r3, r2
 8024fb4:	d00c      	beq.n	8024fd0 <MobleGattWriteCallback+0x94>
 8024fb6:	f642 22de 	movw	r2, #10974	@ 0x2ade
 8024fba:	4293      	cmp	r3, r2
 8024fbc:	d115      	bne.n	8024fea <MobleGattWriteCallback+0xae>
 8024fbe:	780b      	ldrb	r3, [r1, #0]
 8024fc0:	4a0c      	ldr	r2, [pc, #48]	@ (8024ff4 <MobleGattWriteCallback+0xb8>)
 8024fc2:	f003 0301 	and.w	r3, r3, #1
 8024fc6:	f882 308e 	strb.w	r3, [r2, #142]	@ 0x8e
 8024fca:	f7f5 fecf 	bl	801ad6c <BnrgmStackSendBeaconOverGatt>
 8024fce:	e7e2      	b.n	8024f96 <MobleGattWriteCallback+0x5a>
 8024fd0:	780b      	ldrb	r3, [r1, #0]
 8024fd2:	4a08      	ldr	r2, [pc, #32]	@ (8024ff4 <MobleGattWriteCallback+0xb8>)
 8024fd4:	f003 0301 	and.w	r3, r3, #1
 8024fd8:	f882 308e 	strb.w	r3, [r2, #142]	@ 0x8e
 8024fdc:	e7db      	b.n	8024f96 <MobleGattWriteCallback+0x5a>
 8024fde:	3501      	adds	r5, #1
 8024fe0:	b2eb      	uxtb	r3, r5
 8024fe2:	429f      	cmp	r7, r3
 8024fe4:	f100 0010 	add.w	r0, r0, #16
 8024fe8:	d8bd      	bhi.n	8024f66 <MobleGattWriteCallback+0x2a>
 8024fea:	2002      	movs	r0, #2
 8024fec:	e7d4      	b.n	8024f98 <MobleGattWriteCallback+0x5c>
 8024fee:	2003      	movs	r0, #3
 8024ff0:	e7d2      	b.n	8024f98 <MobleGattWriteCallback+0x5c>
 8024ff2:	bf00      	nop
 8024ff4:	20000324 	.word	0x20000324

08024ff8 <MobleProvision_SetInputMessage>:
 8024ff8:	b410      	push	{r4}
 8024ffa:	4604      	mov	r4, r0
 8024ffc:	4608      	mov	r0, r1
 8024ffe:	4611      	mov	r1, r2
 8025000:	461a      	mov	r2, r3
 8025002:	b91c      	cbnz	r4, 802500c <MobleProvision_SetInputMessage+0x14>
 8025004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025008:	f7f8 b98a 	b.w	801d320 <MobleProvision_ProvisionerNode_SetInputMessage>
 802500c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025010:	f7ff bdb8 	b.w	8024b84 <MobleProvision_UnprovisionedNode_SetInputMessage>

08025014 <MoblePBADVProcessData>:
 8025014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025018:	2a05      	cmp	r2, #5
 802501a:	b0a5      	sub	sp, #148	@ 0x94
 802501c:	4605      	mov	r5, r0
 802501e:	460c      	mov	r4, r1
 8025020:	4693      	mov	fp, r2
 8025022:	f240 8163 	bls.w	80252ec <MoblePBADVProcessData+0x2d8>
 8025026:	7a03      	ldrb	r3, [r0, #8]
 8025028:	680f      	ldr	r7, [r1, #0]
 802502a:	f891 9004 	ldrb.w	r9, [r1, #4]
 802502e:	b113      	cbz	r3, 8025036 <MoblePBADVProcessData+0x22>
 8025030:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8025032:	4297      	cmp	r7, r2
 8025034:	d025      	beq.n	8025082 <MoblePBADVProcessData+0x6e>
 8025036:	f895 217c 	ldrb.w	r2, [r5, #380]	@ 0x17c
 802503a:	2a00      	cmp	r2, #0
 802503c:	f000 814d 	beq.w	80252da <MoblePBADVProcessData+0x2c6>
 8025040:	f8d5 1198 	ldr.w	r1, [r5, #408]	@ 0x198
 8025044:	428f      	cmp	r7, r1
 8025046:	f040 8153 	bne.w	80252f0 <MoblePBADVProcessData+0x2dc>
 802504a:	2601      	movs	r6, #1
 802504c:	f44f 78ba 	mov.w	r8, #372	@ 0x174
 8025050:	fb08 f806 	mul.w	r8, r8, r6
 8025054:	f108 0708 	add.w	r7, r8, #8
 8025058:	f508 70aa 	add.w	r0, r8, #340	@ 0x154
 802505c:	4428      	add	r0, r5
 802505e:	442f      	add	r7, r5
 8025060:	f7ef ffc8 	bl	8014ff4 <MoblePBADVEraseTimer>
 8025064:	4638      	mov	r0, r7
 8025066:	f7ef ff43 	bl	8014ef0 <MoblePBADVRaiseLinkIdleTimer>
 802506a:	7963      	ldrb	r3, [r4, #5]
 802506c:	f003 0203 	and.w	r2, r3, #3
 8025070:	2a03      	cmp	r2, #3
 8025072:	d108      	bne.n	8025086 <MoblePBADVProcessData+0x72>
 8025074:	089b      	lsrs	r3, r3, #2
 8025076:	2b03      	cmp	r3, #3
 8025078:	d835      	bhi.n	80250e6 <MoblePBADVProcessData+0xd2>
 802507a:	e8df f003 	tbb	[pc, r3]
 802507e:	a686      	.short	0xa686
 8025080:	0874      	.short	0x0874
 8025082:	2600      	movs	r6, #0
 8025084:	e7e2      	b.n	802504c <MoblePBADVProcessData+0x38>
 8025086:	2a01      	cmp	r2, #1
 8025088:	d12f      	bne.n	80250ea <MoblePBADVProcessData+0xd6>
 802508a:	2b01      	cmp	r3, #1
 802508c:	d1f2      	bne.n	8025074 <MoblePBADVProcessData+0x60>
 802508e:	f894 9004 	ldrb.w	r9, [r4, #4]
 8025092:	f44f 74ba 	mov.w	r4, #372	@ 0x174
 8025096:	fb04 5406 	mla	r4, r4, r6, r5
 802509a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 802509e:	2b00      	cmp	r3, #0
 80250a0:	f000 8124 	beq.w	80252ec <MoblePBADVProcessData+0x2d8>
 80250a4:	f894 30c0 	ldrb.w	r3, [r4, #192]	@ 0xc0
 80250a8:	4599      	cmp	r9, r3
 80250aa:	f040 811f 	bne.w	80252ec <MoblePBADVProcessData+0x2d8>
 80250ae:	4638      	mov	r0, r7
 80250b0:	f7ef ffa9 	bl	8015006 <MoblePBADVClearTimers>
 80250b4:	f108 00c0 	add.w	r0, r8, #192	@ 0xc0
 80250b8:	4428      	add	r0, r5
 80250ba:	f7ef fe12 	bl	8014ce2 <MoblePBADVEraseTransaction>
 80250be:	f894 3164 	ldrb.w	r3, [r4, #356]	@ 0x164
 80250c2:	f109 0901 	add.w	r9, r9, #1
 80250c6:	f884 90c0 	strb.w	r9, [r4, #192]	@ 0xc0
 80250ca:	b3c3      	cbz	r3, 802513e <MoblePBADVProcessData+0x12a>
 80250cc:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 80250d0:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
 80250d4:	4798      	blx	r3
 80250d6:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 80250da:	fb03 5306 	mla	r3, r3, r6, r5
 80250de:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80250e2:	2b03      	cmp	r3, #3
 80250e4:	d03a      	beq.n	802515c <MoblePBADVProcessData+0x148>
 80250e6:	2400      	movs	r4, #0
 80250e8:	e13d      	b.n	8025366 <MoblePBADVProcessData+0x352>
 80250ea:	eb05 0308 	add.w	r3, r5, r8
 80250ee:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80250f2:	2a01      	cmp	r2, #1
 80250f4:	d801      	bhi.n	80250fa <MoblePBADVProcessData+0xe6>
 80250f6:	f883 902c 	strb.w	r9, [r3, #44]	@ 0x2c
 80250fa:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 80250fe:	fb03 5606 	mla	r6, r3, r6, r5
 8025102:	f896 302c 	ldrb.w	r3, [r6, #44]	@ 0x2c
 8025106:	4599      	cmp	r9, r3
 8025108:	f000 8090 	beq.w	802522c <MoblePBADVProcessData+0x218>
 802510c:	3b01      	subs	r3, #1
 802510e:	454b      	cmp	r3, r9
 8025110:	f040 80ec 	bne.w	80252ec <MoblePBADVProcessData+0x2d8>
 8025114:	2300      	movs	r3, #0
 8025116:	461a      	mov	r2, r3
 8025118:	f886 902c 	strb.w	r9, [r6, #44]	@ 0x2c
 802511c:	2103      	movs	r1, #3
 802511e:	4638      	mov	r0, r7
 8025120:	f7f2 ff1c 	bl	8017f5c <MoblePBADVSendControl>
 8025124:	f896 302c 	ldrb.w	r3, [r6, #44]	@ 0x2c
 8025128:	3301      	adds	r3, #1
 802512a:	f886 302c 	strb.w	r3, [r6, #44]	@ 0x2c
 802512e:	e0dd      	b.n	80252ec <MoblePBADVProcessData+0x2d8>
 8025130:	2a01      	cmp	r2, #1
 8025132:	f040 80db 	bne.w	80252ec <MoblePBADVProcessData+0x2d8>
 8025136:	2b01      	cmp	r3, #1
 8025138:	f040 80ea 	bne.w	8025310 <MoblePBADVProcessData+0x2fc>
 802513c:	e0d6      	b.n	80252ec <MoblePBADVProcessData+0x2d8>
 802513e:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8025142:	2a01      	cmp	r2, #1
 8025144:	d103      	bne.n	802514e <MoblePBADVProcessData+0x13a>
 8025146:	f7f7 f9c1 	bl	801c4cc <BnrgmProvision_UnprovisionedGetState>
 802514a:	2807      	cmp	r0, #7
 802514c:	d0c3      	beq.n	80250d6 <MoblePBADVProcessData+0xc2>
 802514e:	4610      	mov	r0, r2
 8025150:	f7f9 fbec 	bl	801e92c <MobleProvision_CompleteOperation>
 8025154:	4638      	mov	r0, r7
 8025156:	f7ff f9a7 	bl	80244a8 <MoblePBADVFireProvisionStateMach>
 802515a:	e7bc      	b.n	80250d6 <MoblePBADVProcessData+0xc2>
 802515c:	2101      	movs	r1, #1
 802515e:	4638      	mov	r0, r7
 8025160:	f7ff f8e5 	bl	802432e <MoblePBADVCloseLink>
 8025164:	e7bf      	b.n	80250e6 <MoblePBADVProcessData+0xd2>
 8025166:	6823      	ldr	r3, [r4, #0]
 8025168:	9303      	str	r3, [sp, #12]
 802516a:	2204      	movs	r2, #4
 802516c:	69fb      	ldr	r3, [r7, #28]
 802516e:	9304      	str	r3, [sp, #16]
 8025170:	a903      	add	r1, sp, #12
 8025172:	a804      	add	r0, sp, #16
 8025174:	f001 fd02 	bl	8026b7c <memcmp>
 8025178:	4604      	mov	r4, r0
 802517a:	2800      	cmp	r0, #0
 802517c:	f040 80b6 	bne.w	80252ec <MoblePBADVProcessData+0x2d8>
 8025180:	4601      	mov	r1, r0
 8025182:	4638      	mov	r0, r7
 8025184:	f7ff f8d3 	bl	802432e <MoblePBADVCloseLink>
 8025188:	e0ed      	b.n	8025366 <MoblePBADVProcessData+0x352>
 802518a:	7924      	ldrb	r4, [r4, #4]
 802518c:	2c00      	cmp	r4, #0
 802518e:	f040 80ad 	bne.w	80252ec <MoblePBADVProcessData+0x2d8>
 8025192:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 8025196:	fb03 5506 	mla	r5, r3, r6, r5
 802519a:	f895 6028 	ldrb.w	r6, [r5, #40]	@ 0x28
 802519e:	2e01      	cmp	r6, #1
 80251a0:	f040 80a4 	bne.w	80252ec <MoblePBADVProcessData+0x2d8>
 80251a4:	f895 3029 	ldrb.w	r3, [r5, #41]	@ 0x29
 80251a8:	2b03      	cmp	r3, #3
 80251aa:	f000 809f 	beq.w	80252ec <MoblePBADVProcessData+0x2d8>
 80251ae:	2380      	movs	r3, #128	@ 0x80
 80251b0:	f885 30c0 	strb.w	r3, [r5, #192]	@ 0xc0
 80251b4:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 80251b8:	4623      	mov	r3, r4
 80251ba:	4622      	mov	r2, r4
 80251bc:	4631      	mov	r1, r6
 80251be:	4638      	mov	r0, r7
 80251c0:	f7f2 fecc 	bl	8017f5c <MoblePBADVSendControl>
 80251c4:	f885 602c 	strb.w	r6, [r5, #44]	@ 0x2c
 80251c8:	e0cd      	b.n	8025366 <MoblePBADVProcessData+0x352>
 80251ca:	7923      	ldrb	r3, [r4, #4]
 80251cc:	2b00      	cmp	r3, #0
 80251ce:	f040 808d 	bne.w	80252ec <MoblePBADVProcessData+0x2d8>
 80251d2:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 80251d6:	fb03 5606 	mla	r6, r3, r6, r5
 80251da:	f896 4028 	ldrb.w	r4, [r6, #40]	@ 0x28
 80251de:	2c00      	cmp	r4, #0
 80251e0:	f040 8084 	bne.w	80252ec <MoblePBADVProcessData+0x2d8>
 80251e4:	f896 3029 	ldrb.w	r3, [r6, #41]	@ 0x29
 80251e8:	2b03      	cmp	r3, #3
 80251ea:	d101      	bne.n	80251f0 <MoblePBADVProcessData+0x1dc>
 80251ec:	2101      	movs	r1, #1
 80251ee:	e7c8      	b.n	8025182 <MoblePBADVProcessData+0x16e>
 80251f0:	2b01      	cmp	r3, #1
 80251f2:	d17b      	bne.n	80252ec <MoblePBADVProcessData+0x2d8>
 80251f4:	2302      	movs	r3, #2
 80251f6:	f108 00c0 	add.w	r0, r8, #192	@ 0xc0
 80251fa:	f886 3029 	strb.w	r3, [r6, #41]	@ 0x29
 80251fe:	4428      	add	r0, r5
 8025200:	f886 40c0 	strb.w	r4, [r6, #192]	@ 0xc0
 8025204:	f7ef fd6d 	bl	8014ce2 <MoblePBADVEraseTransaction>
 8025208:	4638      	mov	r0, r7
 802520a:	f7ef fefc 	bl	8015006 <MoblePBADVClearTimers>
 802520e:	f896 3164 	ldrb.w	r3, [r6, #356]	@ 0x164
 8025212:	b13b      	cbz	r3, 8025224 <MoblePBADVProcessData+0x210>
 8025214:	f8d6 3170 	ldr.w	r3, [r6, #368]	@ 0x170
 8025218:	f8d6 0178 	ldr.w	r0, [r6, #376]	@ 0x178
 802521c:	4798      	blx	r3
 802521e:	f7df ffab 	bl	8005178 <BLEMesh_PbAdvLinkOpenCb>
 8025222:	e0a0      	b.n	8025366 <MoblePBADVProcessData+0x352>
 8025224:	4638      	mov	r0, r7
 8025226:	f7ff f93f 	bl	80244a8 <MoblePBADVFireProvisionStateMach>
 802522a:	e7f8      	b.n	802521e <MoblePBADVProcessData+0x20a>
 802522c:	f8d6 90c4 	ldr.w	r9, [r6, #196]	@ 0xc4
 8025230:	f1b9 0f00 	cmp.w	r9, #0
 8025234:	d15a      	bne.n	80252ec <MoblePBADVProcessData+0x2d8>
 8025236:	ab03      	add	r3, sp, #12
 8025238:	f108 0034 	add.w	r0, r8, #52	@ 0x34
 802523c:	f04f 0a01 	mov.w	sl, #1
 8025240:	9300      	str	r3, [sp, #0]
 8025242:	1d61      	adds	r1, r4, #5
 8025244:	f8cd a004 	str.w	sl, [sp, #4]
 8025248:	ab04      	add	r3, sp, #16
 802524a:	f1ab 0205 	sub.w	r2, fp, #5
 802524e:	4428      	add	r0, r5
 8025250:	f7f6 fd1c 	bl	801bc8c <MobleSARJoin>
 8025254:	4604      	mov	r4, r0
 8025256:	bbb8      	cbnz	r0, 80252c8 <MoblePBADVProcessData+0x2b4>
 8025258:	f896 1029 	ldrb.w	r1, [r6, #41]	@ 0x29
 802525c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8025260:	2903      	cmp	r1, #3
 8025262:	4603      	mov	r3, r0
 8025264:	4602      	mov	r2, r0
 8025266:	d103      	bne.n	8025270 <MoblePBADVProcessData+0x25c>
 8025268:	4638      	mov	r0, r7
 802526a:	f7f2 fe77 	bl	8017f5c <MoblePBADVSendControl>
 802526e:	e7bd      	b.n	80251ec <MoblePBADVProcessData+0x1d8>
 8025270:	2103      	movs	r1, #3
 8025272:	4638      	mov	r0, r7
 8025274:	f7f2 fe72 	bl	8017f5c <MoblePBADVSendControl>
 8025278:	f896 302c 	ldrb.w	r3, [r6, #44]	@ 0x2c
 802527c:	f108 002c 	add.w	r0, r8, #44	@ 0x2c
 8025280:	3301      	adds	r3, #1
 8025282:	f886 302c 	strb.w	r3, [r6, #44]	@ 0x2c
 8025286:	4428      	add	r0, r5
 8025288:	f7ef fd2b 	bl	8014ce2 <MoblePBADVEraseTransaction>
 802528c:	f896 3164 	ldrb.w	r3, [r6, #356]	@ 0x164
 8025290:	b13b      	cbz	r3, 80252a2 <MoblePBADVProcessData+0x28e>
 8025292:	f8d6 3168 	ldr.w	r3, [r6, #360]	@ 0x168
 8025296:	f8d6 0178 	ldr.w	r0, [r6, #376]	@ 0x178
 802529a:	464a      	mov	r2, r9
 802529c:	a904      	add	r1, sp, #16
 802529e:	4798      	blx	r3
 80252a0:	e061      	b.n	8025366 <MoblePBADVProcessData+0x352>
 80252a2:	f109 33ff 	add.w	r3, r9, #4294967295
 80252a6:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80252aa:	f896 0028 	ldrb.w	r0, [r6, #40]	@ 0x28
 80252ae:	b2db      	uxtb	r3, r3
 80252b0:	f10d 0211 	add.w	r2, sp, #17
 80252b4:	f7ff fea0 	bl	8024ff8 <MobleProvision_SetInputMessage>
 80252b8:	f896 0028 	ldrb.w	r0, [r6, #40]	@ 0x28
 80252bc:	f7f9 fb36 	bl	801e92c <MobleProvision_CompleteOperation>
 80252c0:	4638      	mov	r0, r7
 80252c2:	f7ff f8f1 	bl	80244a8 <MoblePBADVFireProvisionStateMach>
 80252c6:	e04e      	b.n	8025366 <MoblePBADVProcessData+0x352>
 80252c8:	2801      	cmp	r0, #1
 80252ca:	f43f af0c 	beq.w	80250e6 <MoblePBADVProcessData+0xd2>
 80252ce:	4638      	mov	r0, r7
 80252d0:	f7ff f87c 	bl	80243cc <MoblePBADVStopProvisioning>
 80252d4:	e707      	b.n	80250e6 <MoblePBADVProcessData+0xd2>
 80252d6:	461c      	mov	r4, r3
 80252d8:	e045      	b.n	8025366 <MoblePBADVProcessData+0x352>
 80252da:	b13b      	cbz	r3, 80252ec <MoblePBADVProcessData+0x2d8>
 80252dc:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 80252e0:	2b01      	cmp	r3, #1
 80252e2:	d102      	bne.n	80252ea <MoblePBADVProcessData+0x2d6>
 80252e4:	f895 6029 	ldrb.w	r6, [r5, #41]	@ 0x29
 80252e8:	b166      	cbz	r6, 8025304 <MoblePBADVProcessData+0x2f0>
 80252ea:	b91a      	cbnz	r2, 80252f4 <MoblePBADVProcessData+0x2e0>
 80252ec:	2401      	movs	r4, #1
 80252ee:	e03a      	b.n	8025366 <MoblePBADVProcessData+0x352>
 80252f0:	2b00      	cmp	r3, #0
 80252f2:	d1f3      	bne.n	80252dc <MoblePBADVProcessData+0x2c8>
 80252f4:	f895 619c 	ldrb.w	r6, [r5, #412]	@ 0x19c
 80252f8:	2e01      	cmp	r6, #1
 80252fa:	d1f7      	bne.n	80252ec <MoblePBADVProcessData+0x2d8>
 80252fc:	f895 319d 	ldrb.w	r3, [r5, #413]	@ 0x19d
 8025300:	2b00      	cmp	r3, #0
 8025302:	d1f3      	bne.n	80252ec <MoblePBADVProcessData+0x2d8>
 8025304:	7963      	ldrb	r3, [r4, #5]
 8025306:	f003 0203 	and.w	r2, r3, #3
 802530a:	2a03      	cmp	r2, #3
 802530c:	f47f af10 	bne.w	8025130 <MoblePBADVProcessData+0x11c>
 8025310:	089b      	lsrs	r3, r3, #2
 8025312:	d1eb      	bne.n	80252ec <MoblePBADVProcessData+0x2d8>
 8025314:	f1b9 0f00 	cmp.w	r9, #0
 8025318:	d1e8      	bne.n	80252ec <MoblePBADVProcessData+0x2d8>
 802531a:	f1bb 0f14 	cmp.w	fp, #20
 802531e:	d9e5      	bls.n	80252ec <MoblePBADVProcessData+0x2d8>
 8025320:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 8025324:	435e      	muls	r6, r3
 8025326:	f106 0010 	add.w	r0, r6, #16
 802532a:	2210      	movs	r2, #16
 802532c:	1da1      	adds	r1, r4, #6
 802532e:	4428      	add	r0, r5
 8025330:	f001 fc24 	bl	8026b7c <memcmp>
 8025334:	2800      	cmp	r0, #0
 8025336:	d1d9      	bne.n	80252ec <MoblePBADVProcessData+0x2d8>
 8025338:	f7f7 f844 	bl	801c3c4 <MobleProvision_UnprovisionedNode_Init>
 802533c:	2302      	movs	r3, #2
 802533e:	4604      	mov	r4, r0
 8025340:	2800      	cmp	r0, #0
 8025342:	d1c8      	bne.n	80252d6 <MoblePBADVProcessData+0x2c2>
 8025344:	eb05 0806 	add.w	r8, r5, r6
 8025348:	f106 0008 	add.w	r0, r6, #8
 802534c:	f888 3029 	strb.w	r3, [r8, #41]	@ 0x29
 8025350:	f8c8 7024 	str.w	r7, [r8, #36]	@ 0x24
 8025354:	464b      	mov	r3, r9
 8025356:	464a      	mov	r2, r9
 8025358:	2101      	movs	r1, #1
 802535a:	4428      	add	r0, r5
 802535c:	f7f2 fdfe 	bl	8017f5c <MoblePBADVSendControl>
 8025360:	2301      	movs	r3, #1
 8025362:	f888 302c 	strb.w	r3, [r8, #44]	@ 0x2c
 8025366:	4620      	mov	r0, r4
 8025368:	b025      	add	sp, #148	@ 0x94
 802536a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802536e <MobleStackScanCallback>:
 802536e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025372:	4689      	mov	r9, r1
 8025374:	f99d b030 	ldrsb.w	fp, [sp, #48]	@ 0x30
 8025378:	4692      	mov	sl, r2
 802537a:	461f      	mov	r7, r3
 802537c:	4680      	mov	r8, r0
 802537e:	2800      	cmp	r0, #0
 8025380:	d03f      	beq.n	8025402 <MobleStackScanCallback+0x94>
 8025382:	2b01      	cmp	r3, #1
 8025384:	d93d      	bls.n	8025402 <MobleStackScanCallback+0x94>
 8025386:	2500      	movs	r5, #0
 8025388:	f81a 4005 	ldrb.w	r4, [sl, r5]
 802538c:	2c01      	cmp	r4, #1
 802538e:	eb0a 0605 	add.w	r6, sl, r5
 8025392:	d936      	bls.n	8025402 <MobleStackScanCallback+0x94>
 8025394:	1b7a      	subs	r2, r7, r5
 8025396:	42a2      	cmp	r2, r4
 8025398:	dd33      	ble.n	8025402 <MobleStackScanCallback+0x94>
 802539a:	7873      	ldrb	r3, [r6, #1]
 802539c:	1e61      	subs	r1, r4, #1
 802539e:	2b2a      	cmp	r3, #42	@ 0x2a
 80253a0:	b2c9      	uxtb	r1, r1
 80253a2:	d111      	bne.n	80253c8 <MobleStackScanCallback+0x5a>
 80253a4:	3c0d      	subs	r4, #13
 80253a6:	2c13      	cmp	r4, #19
 80253a8:	d807      	bhi.n	80253ba <MobleStackScanCallback+0x4c>
 80253aa:	460a      	mov	r2, r1
 80253ac:	f8cd b000 	str.w	fp, [sp]
 80253b0:	2300      	movs	r3, #0
 80253b2:	1cb1      	adds	r1, r6, #2
 80253b4:	4648      	mov	r0, r9
 80253b6:	f7fa f917 	bl	801f5e8 <MobleStackProcessData>
 80253ba:	7833      	ldrb	r3, [r6, #0]
 80253bc:	3301      	adds	r3, #1
 80253be:	442b      	add	r3, r5
 80253c0:	b2dd      	uxtb	r5, r3
 80253c2:	42af      	cmp	r7, r5
 80253c4:	d8e0      	bhi.n	8025388 <MobleStackScanCallback+0x1a>
 80253c6:	e01c      	b.n	8025402 <MobleStackScanCallback+0x94>
 80253c8:	2b29      	cmp	r3, #41	@ 0x29
 80253ca:	d10d      	bne.n	80253e8 <MobleStackScanCallback+0x7a>
 80253cc:	3c07      	subs	r4, #7
 80253ce:	2c19      	cmp	r4, #25
 80253d0:	d8f3      	bhi.n	80253ba <MobleStackScanCallback+0x4c>
 80253d2:	f898 31d4 	ldrb.w	r3, [r8, #468]	@ 0x1d4
 80253d6:	2b01      	cmp	r3, #1
 80253d8:	d1ef      	bne.n	80253ba <MobleStackScanCallback+0x4c>
 80253da:	460a      	mov	r2, r1
 80253dc:	f8d8 029c 	ldr.w	r0, [r8, #668]	@ 0x29c
 80253e0:	1cb1      	adds	r1, r6, #2
 80253e2:	f7ff fe17 	bl	8025014 <MoblePBADVProcessData>
 80253e6:	e7e8      	b.n	80253ba <MobleStackScanCallback+0x4c>
 80253e8:	2b2b      	cmp	r3, #43	@ 0x2b
 80253ea:	465b      	mov	r3, fp
 80253ec:	d104      	bne.n	80253f8 <MobleStackScanCallback+0x8a>
 80253ee:	464a      	mov	r2, r9
 80253f0:	1cb0      	adds	r0, r6, #2
 80253f2:	f7f9 fb07 	bl	801ea04 <MobleStackProcessBeacon>
 80253f6:	e7e0      	b.n	80253ba <MobleStackScanCallback+0x4c>
 80253f8:	b2d2      	uxtb	r2, r2
 80253fa:	4631      	mov	r1, r6
 80253fc:	4648      	mov	r0, r9
 80253fe:	f7f5 f840 	bl	801a482 <BLEMesh_CustomBeaconReceivedCallback>
 8025402:	b003      	add	sp, #12
 8025404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025408 <BnrgmHealthModelSetFault>:
 8025408:	2a08      	cmp	r2, #8
 802540a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802540e:	4605      	mov	r5, r0
 8025410:	d902      	bls.n	8025418 <BnrgmHealthModelSetFault+0x10>
 8025412:	2004      	movs	r0, #4
 8025414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025418:	b35a      	cbz	r2, 8025472 <BnrgmHealthModelSetFault+0x6a>
 802541a:	3a01      	subs	r2, #1
 802541c:	1e4e      	subs	r6, r1, #1
 802541e:	fa51 f482 	uxtab	r4, r1, r2
 8025422:	f04f 0801 	mov.w	r8, #1
 8025426:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 802542a:	f1b9 0f00 	cmp.w	r9, #0
 802542e:	d015      	beq.n	802545c <BnrgmHealthModelSetFault+0x54>
 8025430:	682b      	ldr	r3, [r5, #0]
 8025432:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 8025434:	2208      	movs	r2, #8
 8025436:	4649      	mov	r1, r9
 8025438:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 802543c:	f7da feb0 	bl	80001a0 <memchr>
 8025440:	4603      	mov	r3, r0
 8025442:	b968      	cbnz	r0, 8025460 <BnrgmHealthModelSetFault+0x58>
 8025444:	f107 024b 	add.w	r2, r7, #75	@ 0x4b
 8025448:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 802544c:	b969      	cbnz	r1, 802546a <BnrgmHealthModelSetFault+0x62>
 802544e:	443b      	add	r3, r7
 8025450:	f883 904c 	strb.w	r9, [r3, #76]	@ 0x4c
 8025454:	f883 9054 	strb.w	r9, [r3, #84]	@ 0x54
 8025458:	f887 8049 	strb.w	r8, [r7, #73]	@ 0x49
 802545c:	42a6      	cmp	r6, r4
 802545e:	d1e2      	bne.n	8025426 <BnrgmHealthModelSetFault+0x1e>
 8025460:	4628      	mov	r0, r5
 8025462:	f7ef fde1 	bl	8015028 <BnrgmHealthModelSetPublishTimer>
 8025466:	2000      	movs	r0, #0
 8025468:	e7d4      	b.n	8025414 <BnrgmHealthModelSetFault+0xc>
 802546a:	3301      	adds	r3, #1
 802546c:	2b08      	cmp	r3, #8
 802546e:	d1eb      	bne.n	8025448 <BnrgmHealthModelSetFault+0x40>
 8025470:	e7cf      	b.n	8025412 <BnrgmHealthModelSetFault+0xa>
 8025472:	2003      	movs	r0, #3
 8025474:	e7ce      	b.n	8025414 <BnrgmHealthModelSetFault+0xc>
	...

08025478 <BLEMesh_SetFault>:
 8025478:	b410      	push	{r4}
 802547a:	460a      	mov	r2, r1
 802547c:	b190      	cbz	r0, 80254a4 <BLEMesh_SetFault+0x2c>
 802547e:	1e4b      	subs	r3, r1, #1
 8025480:	2b07      	cmp	r3, #7
 8025482:	d80f      	bhi.n	80254a4 <BLEMesh_SetFault+0x2c>
 8025484:	1e43      	subs	r3, r0, #1
 8025486:	1dc1      	adds	r1, r0, #7
 8025488:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 802548c:	2c32      	cmp	r4, #50	@ 0x32
 802548e:	d809      	bhi.n	80254a4 <BLEMesh_SetFault+0x2c>
 8025490:	428b      	cmp	r3, r1
 8025492:	d1f9      	bne.n	8025488 <BLEMesh_SetFault+0x10>
 8025494:	4b05      	ldr	r3, [pc, #20]	@ (80254ac <BLEMesh_SetFault+0x34>)
 8025496:	f85d 4b04 	ldr.w	r4, [sp], #4
 802549a:	4601      	mov	r1, r0
 802549c:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 80254a0:	f7ff bfb2 	b.w	8025408 <BnrgmHealthModelSetFault>
 80254a4:	2003      	movs	r0, #3
 80254a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80254aa:	4770      	bx	lr
 80254ac:	20002514 	.word	0x20002514

080254b0 <BnrgmHealthModelClearFault>:
 80254b0:	2a08      	cmp	r2, #8
 80254b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80254b4:	4606      	mov	r6, r0
 80254b6:	d831      	bhi.n	802551c <BnrgmHealthModelClearFault+0x6c>
 80254b8:	b392      	cbz	r2, 8025520 <BnrgmHealthModelClearFault+0x70>
 80254ba:	2300      	movs	r3, #0
 80254bc:	3901      	subs	r1, #1
 80254be:	461d      	mov	r5, r3
 80254c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80254c4:	b980      	cbnz	r0, 80254e8 <BnrgmHealthModelClearFault+0x38>
 80254c6:	3301      	adds	r3, #1
 80254c8:	b2db      	uxtb	r3, r3
 80254ca:	429a      	cmp	r2, r3
 80254cc:	d1f8      	bne.n	80254c0 <BnrgmHealthModelClearFault+0x10>
 80254ce:	2500      	movs	r5, #0
 80254d0:	6833      	ldr	r3, [r6, #0]
 80254d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80254d4:	195a      	adds	r2, r3, r5
 80254d6:	f892 404c 	ldrb.w	r4, [r2, #76]	@ 0x4c
 80254da:	b1a4      	cbz	r4, 8025506 <BnrgmHealthModelClearFault+0x56>
 80254dc:	2201      	movs	r2, #1
 80254de:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 80254e2:	2400      	movs	r4, #0
 80254e4:	4620      	mov	r0, r4
 80254e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80254e8:	6830      	ldr	r0, [r6, #0]
 80254ea:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 80254ec:	f104 004b 	add.w	r0, r4, #75	@ 0x4b
 80254f0:	3453      	adds	r4, #83	@ 0x53
 80254f2:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 80254f6:	780f      	ldrb	r7, [r1, #0]
 80254f8:	45bc      	cmp	ip, r7
 80254fa:	bf04      	itt	eq
 80254fc:	7005      	strbeq	r5, [r0, #0]
 80254fe:	7205      	strbeq	r5, [r0, #8]
 8025500:	4284      	cmp	r4, r0
 8025502:	d1f6      	bne.n	80254f2 <BnrgmHealthModelClearFault+0x42>
 8025504:	e7df      	b.n	80254c6 <BnrgmHealthModelClearFault+0x16>
 8025506:	2d07      	cmp	r5, #7
 8025508:	d104      	bne.n	8025514 <BnrgmHealthModelClearFault+0x64>
 802550a:	f883 4049 	strb.w	r4, [r3, #73]	@ 0x49
 802550e:	4630      	mov	r0, r6
 8025510:	f7ef fd8a 	bl	8015028 <BnrgmHealthModelSetPublishTimer>
 8025514:	3501      	adds	r5, #1
 8025516:	2d08      	cmp	r5, #8
 8025518:	d1da      	bne.n	80254d0 <BnrgmHealthModelClearFault+0x20>
 802551a:	e7e3      	b.n	80254e4 <BnrgmHealthModelClearFault+0x34>
 802551c:	2404      	movs	r4, #4
 802551e:	e7e1      	b.n	80254e4 <BnrgmHealthModelClearFault+0x34>
 8025520:	2403      	movs	r4, #3
 8025522:	e7df      	b.n	80254e4 <BnrgmHealthModelClearFault+0x34>

08025524 <BLEMesh_ClearFault>:
 8025524:	460a      	mov	r2, r1
 8025526:	4601      	mov	r1, r0
 8025528:	b128      	cbz	r0, 8025536 <BLEMesh_ClearFault+0x12>
 802552a:	b122      	cbz	r2, 8025536 <BLEMesh_ClearFault+0x12>
 802552c:	4b03      	ldr	r3, [pc, #12]	@ (802553c <BLEMesh_ClearFault+0x18>)
 802552e:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 8025532:	f7ff bfbd 	b.w	80254b0 <BnrgmHealthModelClearFault>
 8025536:	2002      	movs	r0, #2
 8025538:	4770      	bx	lr
 802553a:	bf00      	nop
 802553c:	20002514 	.word	0x20002514

08025540 <Test_UpperTester_Set10>:
 8025540:	784b      	ldrb	r3, [r1, #1]
 8025542:	2b31      	cmp	r3, #49	@ 0x31
 8025544:	4608      	mov	r0, r1
 8025546:	d102      	bne.n	802554e <Test_UpperTester_Set10+0xe>
 8025548:	2101      	movs	r1, #1
 802554a:	f7ff bf95 	b.w	8025478 <BLEMesh_SetFault>
 802554e:	2b30      	cmp	r3, #48	@ 0x30
 8025550:	d102      	bne.n	8025558 <Test_UpperTester_Set10+0x18>
 8025552:	2101      	movs	r1, #1
 8025554:	f7ff bfe6 	b.w	8025524 <BLEMesh_ClearFault>
 8025558:	2000      	movs	r0, #0
 802555a:	4770      	bx	lr

0802555c <BLEMesh_SetSIGModelsCbMap>:
 802555c:	4b04      	ldr	r3, [pc, #16]	@ (8025570 <BLEMesh_SetSIGModelsCbMap+0x14>)
 802555e:	2800      	cmp	r0, #0
 8025560:	f8c3 0a24 	str.w	r0, [r3, #2596]	@ 0xa24
 8025564:	f8c3 1a34 	str.w	r1, [r3, #2612]	@ 0xa34
 8025568:	bf0c      	ite	eq
 802556a:	2003      	moveq	r0, #3
 802556c:	2000      	movne	r0, #0
 802556e:	4770      	bx	lr
 8025570:	20002514 	.word	0x20002514

08025574 <MobleSIGModelReplyStatus>:
 8025574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025578:	ed2d 8b02 	vpush	{d8}
 802557c:	b08b      	sub	sp, #44	@ 0x2c
 802557e:	ee08 0a10 	vmov	s16, r0
 8025582:	20a7      	movs	r0, #167	@ 0xa7
 8025584:	460d      	mov	r5, r1
 8025586:	4617      	mov	r7, r2
 8025588:	9305      	str	r3, [sp, #20]
 802558a:	f7f2 fdcd 	bl	8018128 <MobleMemAlloc>
 802558e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025590:	f8df b104 	ldr.w	fp, [pc, #260]	@ 8025698 <MobleSIGModelReplyStatus+0x124>
 8025594:	4606      	mov	r6, r0
 8025596:	f103 0020 	add.w	r0, r3, #32
 802559a:	f7f2 fdc5 	bl	8018128 <MobleMemAlloc>
 802559e:	88ab      	ldrh	r3, [r5, #4]
 80255a0:	8103      	strh	r3, [r0, #8]
 80255a2:	88eb      	ldrh	r3, [r5, #6]
 80255a4:	8143      	strh	r3, [r0, #10]
 80255a6:	7a2b      	ldrb	r3, [r5, #8]
 80255a8:	70c3      	strb	r3, [r0, #3]
 80255aa:	7a6b      	ldrb	r3, [r5, #9]
 80255ac:	7583      	strb	r3, [r0, #22]
 80255ae:	7aeb      	ldrb	r3, [r5, #11]
 80255b0:	7403      	strb	r3, [r0, #16]
 80255b2:	7aab      	ldrb	r3, [r5, #10]
 80255b4:	f8db 2a24 	ldr.w	r2, [fp, #2596]	@ 0xa24
 80255b8:	7303      	strb	r3, [r0, #12]
 80255ba:	4604      	mov	r4, r0
 80255bc:	f04f 0800 	mov.w	r8, #0
 80255c0:	f60b 2928 	addw	r9, fp, #2600	@ 0xa28
 80255c4:	f8db 1a34 	ldr.w	r1, [fp, #2612]	@ 0xa34
 80255c8:	f8cb 2a30 	str.w	r2, [fp, #2608]	@ 0xa30
 80255cc:	4541      	cmp	r1, r8
 80255ce:	d846      	bhi.n	802565e <MobleSIGModelReplyStatus+0xea>
 80255d0:	f04f 0802 	mov.w	r8, #2
 80255d4:	f8db 1a2c 	ldr.w	r1, [fp, #2604]	@ 0xa2c
 80255d8:	f8bb 2a28 	ldrh.w	r2, [fp, #2600]	@ 0xa28
 80255dc:	9206      	str	r2, [sp, #24]
 80255de:	4638      	mov	r0, r7
 80255e0:	9104      	str	r1, [sp, #16]
 80255e2:	f7f8 fb91 	bl	801dd08 <MobleModelGetResponseOpCode>
 80255e6:	46b2      	mov	sl, r6
 80255e8:	9a06      	ldr	r2, [sp, #24]
 80255ea:	9904      	ldr	r1, [sp, #16]
 80255ec:	f84a 0b08 	str.w	r0, [sl], #8
 80255f0:	4681      	mov	r9, r0
 80255f2:	4638      	mov	r0, r7
 80255f4:	9207      	str	r2, [sp, #28]
 80255f6:	9106      	str	r1, [sp, #24]
 80255f8:	f7f8 fba0 	bl	801dd3c <MobleModelGetMinResponseLength>
 80255fc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8025600:	9004      	str	r0, [sp, #16]
 8025602:	4638      	mov	r0, r7
 8025604:	f7f8 fbb4 	bl	801dd70 <MobleModelGetMaxResponseLength>
 8025608:	2200      	movs	r2, #0
 802560a:	f8db 3a30 	ldr.w	r3, [fp, #2608]	@ 0xa30
 802560e:	9202      	str	r2, [sp, #8]
 8025610:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8025612:	9201      	str	r2, [sp, #4]
 8025614:	9a05      	ldr	r2, [sp, #20]
 8025616:	9200      	str	r2, [sp, #0]
 8025618:	f8d3 b004 	ldr.w	fp, [r3, #4]
 802561c:	4652      	mov	r2, sl
 802561e:	ab09      	add	r3, sp, #36	@ 0x24
 8025620:	4607      	mov	r7, r0
 8025622:	4649      	mov	r1, r9
 8025624:	4628      	mov	r0, r5
 8025626:	47d8      	blx	fp
 8025628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802562a:	9a04      	ldr	r2, [sp, #16]
 802562c:	429a      	cmp	r2, r3
 802562e:	d92c      	bls.n	802568a <MobleSIGModelReplyStatus+0x116>
 8025630:	9209      	str	r2, [sp, #36]	@ 0x24
 8025632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025634:	f8c6 30a3 	str.w	r3, [r6, #163]	@ 0xa3
 8025638:	4622      	mov	r2, r4
 802563a:	4633      	mov	r3, r6
 802563c:	2100      	movs	r1, #0
 802563e:	ee18 0a10 	vmov	r0, s16
 8025642:	f7fa fb7f 	bl	801fd44 <MobleModelSendPacket>
 8025646:	4630      	mov	r0, r6
 8025648:	f7f2 fdf8 	bl	801823c <MobleMemFree>
 802564c:	4620      	mov	r0, r4
 802564e:	f7f2 fdf5 	bl	801823c <MobleMemFree>
 8025652:	4640      	mov	r0, r8
 8025654:	b00b      	add	sp, #44	@ 0x2c
 8025656:	ecbd 8b02 	vpop	{d8}
 802565a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802565e:	6812      	ldr	r2, [r2, #0]
 8025660:	480c      	ldr	r0, [pc, #48]	@ (8025694 <MobleSIGModelReplyStatus+0x120>)
 8025662:	4649      	mov	r1, r9
 8025664:	4790      	blx	r2
 8025666:	f8bb 2a28 	ldrh.w	r2, [fp, #2600]	@ 0xa28
 802566a:	f8db 1a2c 	ldr.w	r1, [fp, #2604]	@ 0xa2c
 802566e:	4638      	mov	r0, r7
 8025670:	f7f8 faeb 	bl	801dc4a <MobleModelCheckOpcodeValidity>
 8025674:	2801      	cmp	r0, #1
 8025676:	d005      	beq.n	8025684 <MobleSIGModelReplyStatus+0x110>
 8025678:	f8db 2a30 	ldr.w	r2, [fp, #2608]	@ 0xa30
 802567c:	f108 0801 	add.w	r8, r8, #1
 8025680:	320c      	adds	r2, #12
 8025682:	e79f      	b.n	80255c4 <MobleSIGModelReplyStatus+0x50>
 8025684:	f04f 0800 	mov.w	r8, #0
 8025688:	e7a4      	b.n	80255d4 <MobleSIGModelReplyStatus+0x60>
 802568a:	42bb      	cmp	r3, r7
 802568c:	bf88      	it	hi
 802568e:	9709      	strhi	r7, [sp, #36]	@ 0x24
 8025690:	e7cf      	b.n	8025632 <MobleSIGModelReplyStatus+0xbe>
 8025692:	bf00      	nop
 8025694:	20002f40 	.word	0x20002f40
 8025698:	20002514 	.word	0x20002514

0802569c <Model_SendResponse>:
 802569c:	b513      	push	{r0, r1, r4, lr}
 802569e:	4c07      	ldr	r4, [pc, #28]	@ (80256bc <Model_SendResponse+0x20>)
 80256a0:	f8d4 46f0 	ldr.w	r4, [r4, #1776]	@ 0x6f0
 80256a4:	b144      	cbz	r4, 80256b8 <Model_SendResponse+0x1c>
 80256a6:	9300      	str	r3, [sp, #0]
 80256a8:	4613      	mov	r3, r2
 80256aa:	460a      	mov	r2, r1
 80256ac:	4601      	mov	r1, r0
 80256ae:	4620      	mov	r0, r4
 80256b0:	f7ff ff60 	bl	8025574 <MobleSIGModelReplyStatus>
 80256b4:	b002      	add	sp, #8
 80256b6:	bd10      	pop	{r4, pc}
 80256b8:	2002      	movs	r0, #2
 80256ba:	e7fb      	b.n	80256b4 <Model_SendResponse+0x18>
 80256bc:	20002514 	.word	0x20002514

080256c0 <MobleLibraryGenericSendData>:
 80256c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80256c4:	4607      	mov	r7, r0
 80256c6:	20a7      	movs	r0, #167	@ 0xa7
 80256c8:	468a      	mov	sl, r1
 80256ca:	4616      	mov	r6, r2
 80256cc:	4699      	mov	r9, r3
 80256ce:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 80256d2:	f7f2 fd29 	bl	8018128 <MobleMemAlloc>
 80256d6:	4605      	mov	r5, r0
 80256d8:	f108 0020 	add.w	r0, r8, #32
 80256dc:	f7f2 fd24 	bl	8018128 <MobleMemAlloc>
 80256e0:	683b      	ldr	r3, [r7, #0]
 80256e2:	f8a0 a008 	strh.w	sl, [r0, #8]
 80256e6:	885b      	ldrh	r3, [r3, #2]
 80256e8:	441e      	add	r6, r3
 80256ea:	8146      	strh	r6, [r0, #10]
 80256ec:	2600      	movs	r6, #0
 80256ee:	4604      	mov	r4, r0
 80256f0:	7406      	strb	r6, [r0, #16]
 80256f2:	7306      	strb	r6, [r0, #12]
 80256f4:	8246      	strh	r6, [r0, #18]
 80256f6:	81c6      	strh	r6, [r0, #14]
 80256f8:	b1e5      	cbz	r5, 8025734 <MobleLibraryGenericSendData+0x74>
 80256fa:	9908      	ldr	r1, [sp, #32]
 80256fc:	f8c5 9000 	str.w	r9, [r5]
 8025700:	f8c5 80a3 	str.w	r8, [r5, #163]	@ 0xa3
 8025704:	4642      	mov	r2, r8
 8025706:	f105 0008 	add.w	r0, r5, #8
 802570a:	f7f2 febb 	bl	8018484 <MobleOutputStreamPutArray>
 802570e:	f1b8 0f9a 	cmp.w	r8, #154	@ 0x9a
 8025712:	d811      	bhi.n	8025738 <MobleLibraryGenericSendData+0x78>
 8025714:	4631      	mov	r1, r6
 8025716:	462b      	mov	r3, r5
 8025718:	4622      	mov	r2, r4
 802571a:	4638      	mov	r0, r7
 802571c:	f7fa fb12 	bl	801fd44 <MobleModelSendPacket>
 8025720:	4606      	mov	r6, r0
 8025722:	4628      	mov	r0, r5
 8025724:	f7f2 fd8a 	bl	801823c <MobleMemFree>
 8025728:	4620      	mov	r0, r4
 802572a:	f7f2 fd87 	bl	801823c <MobleMemFree>
 802572e:	4630      	mov	r0, r6
 8025730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025734:	2604      	movs	r6, #4
 8025736:	e7f4      	b.n	8025722 <MobleLibraryGenericSendData+0x62>
 8025738:	2602      	movs	r6, #2
 802573a:	e7f2      	b.n	8025722 <MobleLibraryGenericSendData+0x62>

0802573c <BLEMesh_SetRemoteData>:
 802573c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802573e:	f89d e01c 	ldrb.w	lr, [sp, #28]
 8025742:	9f05      	ldr	r7, [sp, #20]
 8025744:	f89d c018 	ldrb.w	ip, [sp, #24]
 8025748:	f1be 0f01 	cmp.w	lr, #1
 802574c:	d106      	bne.n	802575c <BLEMesh_SetRemoteData+0x20>
 802574e:	f8cd c018 	str.w	ip, [sp, #24]
 8025752:	b2d2      	uxtb	r2, r2
 8025754:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8025758:	f7fd b94a 	b.w	80229f0 <MobleLibrarySendData>
 802575c:	e9cd 7c06 	strd	r7, ip, [sp, #24]
 8025760:	9305      	str	r3, [sp, #20]
 8025762:	4613      	mov	r3, r2
 8025764:	460a      	mov	r2, r1
 8025766:	4601      	mov	r1, r0
 8025768:	4803      	ldr	r0, [pc, #12]	@ (8025778 <BLEMesh_SetRemoteData+0x3c>)
 802576a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802576e:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	@ 0x6f0
 8025772:	f7ff bfa5 	b.w	80256c0 <MobleLibraryGenericSendData>
 8025776:	bf00      	nop
 8025778:	20002514 	.word	0x20002514

0802577c <MobleLibraryGenericSendRemoteData>:
 802577c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025780:	4698      	mov	r8, r3
 8025782:	6803      	ldr	r3, [r0, #0]
 8025784:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8025786:	4691      	mov	r9, r2
 8025788:	4606      	mov	r6, r0
 802578a:	460a      	mov	r2, r1
 802578c:	7f18      	ldrb	r0, [r3, #28]
 802578e:	4649      	mov	r1, r9
 8025790:	f7f2 f8a8 	bl	80178e4 <MoblePalCrypto_GetModelPublicationParameters>
 8025794:	8883      	ldrh	r3, [r0, #4]
 8025796:	4605      	mov	r5, r0
 8025798:	2b00      	cmp	r3, #0
 802579a:	d042      	beq.n	8025822 <MobleLibraryGenericSendRemoteData+0xa6>
 802579c:	f107 0020 	add.w	r0, r7, #32
 80257a0:	f7f2 fcc2 	bl	8018128 <MobleMemAlloc>
 80257a4:	4604      	mov	r4, r0
 80257a6:	b950      	cbnz	r0, 80257be <MobleLibraryGenericSendRemoteData+0x42>
 80257a8:	2500      	movs	r5, #0
 80257aa:	2604      	movs	r6, #4
 80257ac:	4628      	mov	r0, r5
 80257ae:	f7f2 fd45 	bl	801823c <MobleMemFree>
 80257b2:	4620      	mov	r0, r4
 80257b4:	f7f2 fd42 	bl	801823c <MobleMemFree>
 80257b8:	4630      	mov	r0, r6
 80257ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80257be:	2220      	movs	r2, #32
 80257c0:	2100      	movs	r1, #0
 80257c2:	f001 fa05 	bl	8026bd0 <memset>
 80257c6:	f8a4 900a 	strh.w	r9, [r4, #10]
 80257ca:	f8b5 9006 	ldrh.w	r9, [r5, #6]
 80257ce:	88ab      	ldrh	r3, [r5, #4]
 80257d0:	8123      	strh	r3, [r4, #8]
 80257d2:	f8a4 900e 	strh.w	r9, [r4, #14]
 80257d6:	4648      	mov	r0, r9
 80257d8:	f7f1 fc70 	bl	80170bc <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 80257dc:	8260      	strh	r0, [r4, #18]
 80257de:	f7f2 f8c5 	bl	801796c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80257e2:	7420      	strb	r0, [r4, #16]
 80257e4:	4648      	mov	r0, r9
 80257e6:	f7f2 f8db 	bl	80179a0 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 80257ea:	7320      	strb	r0, [r4, #12]
 80257ec:	20a7      	movs	r0, #167	@ 0xa7
 80257ee:	f7f2 fc9b 	bl	8018128 <MobleMemAlloc>
 80257f2:	4605      	mov	r5, r0
 80257f4:	2800      	cmp	r0, #0
 80257f6:	d0d7      	beq.n	80257a8 <MobleLibraryGenericSendRemoteData+0x2c>
 80257f8:	f8c0 8000 	str.w	r8, [r0]
 80257fc:	f8c0 70a3 	str.w	r7, [r0, #163]	@ 0xa3
 8025800:	9908      	ldr	r1, [sp, #32]
 8025802:	463a      	mov	r2, r7
 8025804:	3008      	adds	r0, #8
 8025806:	f7f2 fe3d 	bl	8018484 <MobleOutputStreamPutArray>
 802580a:	2f9a      	cmp	r7, #154	@ 0x9a
 802580c:	d807      	bhi.n	802581e <MobleLibraryGenericSendRemoteData+0xa2>
 802580e:	4630      	mov	r0, r6
 8025810:	462b      	mov	r3, r5
 8025812:	4622      	mov	r2, r4
 8025814:	2100      	movs	r1, #0
 8025816:	f7fa fa95 	bl	801fd44 <MobleModelSendPacket>
 802581a:	4606      	mov	r6, r0
 802581c:	e7c6      	b.n	80257ac <MobleLibraryGenericSendRemoteData+0x30>
 802581e:	2602      	movs	r6, #2
 8025820:	e7c4      	b.n	80257ac <MobleLibraryGenericSendRemoteData+0x30>
 8025822:	2602      	movs	r6, #2
 8025824:	e7c8      	b.n	80257b8 <MobleLibraryGenericSendRemoteData+0x3c>
	...

08025828 <BLEMesh_SetRemotePublication>:
 8025828:	b5f0      	push	{r4, r5, r6, r7, lr}
 802582a:	f89d e01c 	ldrb.w	lr, [sp, #28]
 802582e:	9f05      	ldr	r7, [sp, #20]
 8025830:	f89d c018 	ldrb.w	ip, [sp, #24]
 8025834:	f1be 0f01 	cmp.w	lr, #1
 8025838:	d106      	bne.n	8025848 <BLEMesh_SetRemotePublication+0x20>
 802583a:	f8cd c018 	str.w	ip, [sp, #24]
 802583e:	b2d2      	uxtb	r2, r2
 8025840:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8025844:	f7fd b972 	b.w	8022b2c <MobleLibrarySendRemoteData>
 8025848:	e9cd 7c06 	strd	r7, ip, [sp, #24]
 802584c:	9305      	str	r3, [sp, #20]
 802584e:	4613      	mov	r3, r2
 8025850:	460a      	mov	r2, r1
 8025852:	4601      	mov	r1, r0
 8025854:	4803      	ldr	r0, [pc, #12]	@ (8025864 <BLEMesh_SetRemotePublication+0x3c>)
 8025856:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802585a:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	@ 0x6f0
 802585e:	f7ff bf8d 	b.w	802577c <MobleLibraryGenericSendRemoteData>
 8025862:	bf00      	nop
 8025864:	20002514 	.word	0x20002514

08025868 <Test_UpperTester_ProcessData>:
 8025868:	4b05      	ldr	r3, [pc, #20]	@ (8025880 <Test_UpperTester_ProcessData+0x18>)
 802586a:	b410      	push	{r4}
 802586c:	4604      	mov	r4, r0
 802586e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8025872:	4608      	mov	r0, r1
 8025874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8025878:	f85d 4b04 	ldr.w	r4, [sp], #4
 802587c:	4611      	mov	r1, r2
 802587e:	4718      	bx	r3
 8025880:	0802dbb8 	.word	0x0802dbb8

08025884 <MobleUpperTesterDataProcess>:
 8025884:	4b02      	ldr	r3, [pc, #8]	@ (8025890 <MobleUpperTesterDataProcess+0xc>)
 8025886:	460a      	mov	r2, r1
 8025888:	f8d3 16f0 	ldr.w	r1, [r3, #1776]	@ 0x6f0
 802588c:	f7ff bfec 	b.w	8025868 <Test_UpperTester_ProcessData>
 8025890:	20002514 	.word	0x20002514

08025894 <BLEMesh_UpperTesterDataProcess>:
 8025894:	f7ff bff6 	b.w	8025884 <MobleUpperTesterDataProcess>

08025898 <Test_Upper_Tester_PrintStringCb>:
 8025898:	b40f      	push	{r0, r1, r2, r3}
 802589a:	b004      	add	sp, #16
 802589c:	4770      	bx	lr
	...

080258a0 <Test_UpperTester_Print01>:
 80258a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258a4:	4605      	mov	r5, r0
 80258a6:	4859      	ldr	r0, [pc, #356]	@ (8025a0c <Test_UpperTester_Print01+0x16c>)
 80258a8:	f7ff fff6 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 80258ac:	682b      	ldr	r3, [r5, #0]
 80258ae:	781b      	ldrb	r3, [r3, #0]
 80258b0:	2b00      	cmp	r3, #0
 80258b2:	d036      	beq.n	8025922 <Test_UpperTester_Print01+0x82>
 80258b4:	4856      	ldr	r0, [pc, #344]	@ (8025a10 <Test_UpperTester_Print01+0x170>)
 80258b6:	4f57      	ldr	r7, [pc, #348]	@ (8025a14 <Test_UpperTester_Print01+0x174>)
 80258b8:	f7ff ffee 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 80258bc:	682b      	ldr	r3, [r5, #0]
 80258be:	885b      	ldrh	r3, [r3, #2]
 80258c0:	2102      	movs	r1, #2
 80258c2:	ba5b      	rev16	r3, r3
 80258c4:	a801      	add	r0, sp, #4
 80258c6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80258ca:	f7ea f9bd 	bl	800fc48 <BLEMesh_PrintDataCb>
 80258ce:	f04f 0a00 	mov.w	sl, #0
 80258d2:	f207 4824 	addw	r8, r7, #1060	@ 0x424
 80258d6:	682b      	ldr	r3, [r5, #0]
 80258d8:	6a1b      	ldr	r3, [r3, #32]
 80258da:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 80258de:	fa5f f48a 	uxtb.w	r4, sl
 80258e2:	42a3      	cmp	r3, r4
 80258e4:	d81f      	bhi.n	8025926 <Test_UpperTester_Print01+0x86>
 80258e6:	f8df a154 	ldr.w	sl, [pc, #340]	@ 8025a3c <Test_UpperTester_Print01+0x19c>
 80258ea:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 8025a40 <Test_UpperTester_Print01+0x1a0>
 80258ee:	f04f 0800 	mov.w	r8, #0
 80258f2:	682b      	ldr	r3, [r5, #0]
 80258f4:	6a1b      	ldr	r3, [r3, #32]
 80258f6:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 80258fa:	fa5f f488 	uxtb.w	r4, r8
 80258fe:	42a3      	cmp	r3, r4
 8025900:	d85b      	bhi.n	80259ba <Test_UpperTester_Print01+0x11a>
 8025902:	4845      	ldr	r0, [pc, #276]	@ (8025a18 <Test_UpperTester_Print01+0x178>)
 8025904:	f7ff ffc8 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025908:	4844      	ldr	r0, [pc, #272]	@ (8025a1c <Test_UpperTester_Print01+0x17c>)
 802590a:	2110      	movs	r1, #16
 802590c:	f7ea f99c 	bl	800fc48 <BLEMesh_PrintDataCb>
 8025910:	f8d7 1658 	ldr.w	r1, [r7, #1624]	@ 0x658
 8025914:	4842      	ldr	r0, [pc, #264]	@ (8025a20 <Test_UpperTester_Print01+0x180>)
 8025916:	f7ff ffbf 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 802591a:	2000      	movs	r0, #0
 802591c:	b003      	add	sp, #12
 802591e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025922:	4840      	ldr	r0, [pc, #256]	@ (8025a24 <Test_UpperTester_Print01+0x184>)
 8025924:	e7c7      	b.n	80258b6 <Test_UpperTester_Print01+0x16>
 8025926:	267c      	movs	r6, #124	@ 0x7c
 8025928:	fb06 7904 	mla	r9, r6, r4, r7
 802592c:	483e      	ldr	r0, [pc, #248]	@ (8025a28 <Test_UpperTester_Print01+0x188>)
 802592e:	4621      	mov	r1, r4
 8025930:	f7ff ffb2 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025934:	f899 3445 	ldrb.w	r3, [r9, #1093]	@ 0x445
 8025938:	2b01      	cmp	r3, #1
 802593a:	bf0c      	ite	eq
 802593c:	4620      	moveq	r0, r4
 802593e:	2000      	movne	r0, #0
 8025940:	b200      	sxth	r0, r0
 8025942:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8025946:	2110      	movs	r1, #16
 8025948:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 802594c:	f7ea f97c 	bl	800fc48 <BLEMesh_PrintDataCb>
 8025950:	4836      	ldr	r0, [pc, #216]	@ (8025a2c <Test_UpperTester_Print01+0x18c>)
 8025952:	4621      	mov	r1, r4
 8025954:	f7ff ffa0 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025958:	f899 3445 	ldrb.w	r3, [r9, #1093]	@ 0x445
 802595c:	2b01      	cmp	r3, #1
 802595e:	bf0c      	ite	eq
 8025960:	4620      	moveq	r0, r4
 8025962:	2000      	movne	r0, #0
 8025964:	233c      	movs	r3, #60	@ 0x3c
 8025966:	fb16 3000 	smlabb	r0, r6, r0, r3
 802596a:	2110      	movs	r1, #16
 802596c:	4440      	add	r0, r8
 802596e:	f7ea f96b 	bl	800fc48 <BLEMesh_PrintDataCb>
 8025972:	482f      	ldr	r0, [pc, #188]	@ (8025a30 <Test_UpperTester_Print01+0x190>)
 8025974:	4621      	mov	r1, r4
 8025976:	f7ff ff8f 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 802597a:	f899 3445 	ldrb.w	r3, [r9, #1093]	@ 0x445
 802597e:	2b01      	cmp	r3, #1
 8025980:	bf0c      	ite	eq
 8025982:	4620      	moveq	r0, r4
 8025984:	2000      	movne	r0, #0
 8025986:	2328      	movs	r3, #40	@ 0x28
 8025988:	fb16 3000 	smlabb	r0, r6, r0, r3
 802598c:	2108      	movs	r1, #8
 802598e:	4440      	add	r0, r8
 8025990:	f7ea f95a 	bl	800fc48 <BLEMesh_PrintDataCb>
 8025994:	4621      	mov	r1, r4
 8025996:	4827      	ldr	r0, [pc, #156]	@ (8025a34 <Test_UpperTester_Print01+0x194>)
 8025998:	f7ff ff7e 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 802599c:	f899 3445 	ldrb.w	r3, [r9, #1093]	@ 0x445
 80259a0:	2b01      	cmp	r3, #1
 80259a2:	bf18      	it	ne
 80259a4:	2400      	movne	r4, #0
 80259a6:	2338      	movs	r3, #56	@ 0x38
 80259a8:	fb16 3004 	smlabb	r0, r6, r4, r3
 80259ac:	2101      	movs	r1, #1
 80259ae:	4440      	add	r0, r8
 80259b0:	f7ea f94a 	bl	800fc48 <BLEMesh_PrintDataCb>
 80259b4:	f10a 0a01 	add.w	sl, sl, #1
 80259b8:	e78d      	b.n	80258d6 <Test_UpperTester_Print01+0x36>
 80259ba:	262c      	movs	r6, #44	@ 0x2c
 80259bc:	fb06 7b04 	mla	fp, r6, r4, r7
 80259c0:	4650      	mov	r0, sl
 80259c2:	4621      	mov	r1, r4
 80259c4:	f7ff ff68 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 80259c8:	f89b 35b8 	ldrb.w	r3, [fp, #1464]	@ 0x5b8
 80259cc:	2b01      	cmp	r3, #1
 80259ce:	bf0c      	ite	eq
 80259d0:	4620      	moveq	r0, r4
 80259d2:	2000      	movne	r0, #0
 80259d4:	f44f 73cc 	mov.w	r3, #408	@ 0x198
 80259d8:	fb16 3000 	smlabb	r0, r6, r0, r3
 80259dc:	2101      	movs	r1, #1
 80259de:	4448      	add	r0, r9
 80259e0:	f7ea f932 	bl	800fc48 <BLEMesh_PrintDataCb>
 80259e4:	4621      	mov	r1, r4
 80259e6:	4814      	ldr	r0, [pc, #80]	@ (8025a38 <Test_UpperTester_Print01+0x198>)
 80259e8:	f7ff ff56 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 80259ec:	f89b 35b8 	ldrb.w	r3, [fp, #1464]	@ 0x5b8
 80259f0:	2b01      	cmp	r3, #1
 80259f2:	bf18      	it	ne
 80259f4:	2400      	movne	r4, #0
 80259f6:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 80259fa:	fb16 3004 	smlabb	r0, r6, r4, r3
 80259fe:	2110      	movs	r1, #16
 8025a00:	4448      	add	r0, r9
 8025a02:	f7ea f921 	bl	800fc48 <BLEMesh_PrintDataCb>
 8025a06:	f108 0801 	add.w	r8, r8, #1
 8025a0a:	e772      	b.n	80258f2 <Test_UpperTester_Print01+0x52>
 8025a0c:	0802ed60 	.word	0x0802ed60
 8025a10:	0802ed7f 	.word	0x0802ed7f
 8025a14:	2000141c 	.word	0x2000141c
 8025a18:	0802ee51 	.word	0x0802ee51
 8025a1c:	20001a3c 	.word	0x20001a3c
 8025a20:	0802ee5a 	.word	0x0802ee5a
 8025a24:	0802eda4 	.word	0x0802eda4
 8025a28:	0802edcb 	.word	0x0802edcb
 8025a2c:	0802ede4 	.word	0x0802ede4
 8025a30:	0802ee00 	.word	0x0802ee00
 8025a34:	0802ee18 	.word	0x0802ee18
 8025a38:	0802ee3c 	.word	0x0802ee3c
 8025a3c:	0802ee2a 	.word	0x0802ee2a
 8025a40:	20001840 	.word	0x20001840

08025a44 <Test_UpperTester_Set15>:
 8025a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a46:	6803      	ldr	r3, [r0, #0]
 8025a48:	2400      	movs	r4, #0
 8025a4a:	7f1f      	ldrb	r7, [r3, #28]
 8025a4c:	4605      	mov	r5, r0
 8025a4e:	4626      	mov	r6, r4
 8025a50:	b2e3      	uxtb	r3, r4
 8025a52:	429f      	cmp	r7, r3
 8025a54:	d801      	bhi.n	8025a5a <Test_UpperTester_Set15+0x16>
 8025a56:	2000      	movs	r0, #0
 8025a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025a5a:	682b      	ldr	r3, [r5, #0]
 8025a5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8025a60:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8025a62:	f101 037e 	add.w	r3, r1, #126	@ 0x7e
 8025a66:	f201 21e6 	addw	r1, r1, #742	@ 0x2e6
 8025a6a:	f853 2c06 	ldr.w	r2, [r3, #-6]
 8025a6e:	b1a2      	cbz	r2, 8025a9a <Test_UpperTester_Set15+0x56>
 8025a70:	4618      	mov	r0, r3
 8025a72:	2200      	movs	r2, #0
 8025a74:	f830 cf02 	ldrh.w	ip, [r0, #2]!
 8025a78:	f1bc 0f00 	cmp.w	ip, #0
 8025a7c:	d004      	beq.n	8025a88 <Test_UpperTester_Set15+0x44>
 8025a7e:	3201      	adds	r2, #1
 8025a80:	b2d2      	uxtb	r2, r2
 8025a82:	2a0a      	cmp	r2, #10
 8025a84:	8006      	strh	r6, [r0, #0]
 8025a86:	d1f5      	bne.n	8025a74 <Test_UpperTester_Set15+0x30>
 8025a88:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8025a8c:	b10a      	cbz	r2, 8025a92 <Test_UpperTester_Set15+0x4e>
 8025a8e:	f823 6c02 	strh.w	r6, [r3, #-2]
 8025a92:	3338      	adds	r3, #56	@ 0x38
 8025a94:	428b      	cmp	r3, r1
 8025a96:	d1e8      	bne.n	8025a6a <Test_UpperTester_Set15+0x26>
 8025a98:	e005      	b.n	8025aa6 <Test_UpperTester_Set15+0x62>
 8025a9a:	4804      	ldr	r0, [pc, #16]	@ (8025aac <Test_UpperTester_Set15+0x68>)
 8025a9c:	f7ff fefc 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025aa0:	4803      	ldr	r0, [pc, #12]	@ (8025ab0 <Test_UpperTester_Set15+0x6c>)
 8025aa2:	f7ff fef9 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025aa6:	3401      	adds	r4, #1
 8025aa8:	e7d2      	b.n	8025a50 <Test_UpperTester_Set15+0xc>
 8025aaa:	bf00      	nop
 8025aac:	0802ee6a 	.word	0x0802ee6a
 8025ab0:	0802ee83 	.word	0x0802ee83

08025ab4 <Test_UpperTester_Set13>:
 8025ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025ab8:	4b35      	ldr	r3, [pc, #212]	@ (8025b90 <Test_UpperTester_Set13+0xdc>)
 8025aba:	f893 661c 	ldrb.w	r6, [r3, #1564]	@ 0x61c
 8025abe:	f893 761d 	ldrb.w	r7, [r3, #1565]	@ 0x61d
 8025ac2:	4604      	mov	r4, r0
 8025ac4:	2e00      	cmp	r6, #0
 8025ac6:	d05e      	beq.n	8025b86 <Test_UpperTester_Set13+0xd2>
 8025ac8:	6803      	ldr	r3, [r0, #0]
 8025aca:	6a18      	ldr	r0, [r3, #32]
 8025acc:	2500      	movs	r5, #0
 8025ace:	f880 509d 	strb.w	r5, [r0, #157]	@ 0x9d
 8025ad2:	f880 5022 	strb.w	r5, [r0, #34]	@ 0x22
 8025ad6:	2210      	movs	r2, #16
 8025ad8:	4629      	mov	r1, r5
 8025ada:	307c      	adds	r0, #124	@ 0x7c
 8025adc:	f001 f878 	bl	8026bd0 <memset>
 8025ae0:	6823      	ldr	r3, [r4, #0]
 8025ae2:	6a18      	ldr	r0, [r3, #32]
 8025ae4:	2210      	movs	r2, #16
 8025ae6:	4629      	mov	r1, r5
 8025ae8:	4410      	add	r0, r2
 8025aea:	f001 f871 	bl	8026bd0 <memset>
 8025aee:	2e01      	cmp	r6, #1
 8025af0:	d018      	beq.n	8025b24 <Test_UpperTester_Set13+0x70>
 8025af2:	6823      	ldr	r3, [r4, #0]
 8025af4:	6a18      	ldr	r0, [r3, #32]
 8025af6:	2210      	movs	r2, #16
 8025af8:	f880 5119 	strb.w	r5, [r0, #281]	@ 0x119
 8025afc:	f880 509e 	strb.w	r5, [r0, #158]	@ 0x9e
 8025b00:	4629      	mov	r1, r5
 8025b02:	30f8      	adds	r0, #248	@ 0xf8
 8025b04:	f001 f864 	bl	8026bd0 <memset>
 8025b08:	6823      	ldr	r3, [r4, #0]
 8025b0a:	6a18      	ldr	r0, [r3, #32]
 8025b0c:	2210      	movs	r2, #16
 8025b0e:	4629      	mov	r1, r5
 8025b10:	308c      	adds	r0, #140	@ 0x8c
 8025b12:	f001 f85d 	bl	8026bd0 <memset>
 8025b16:	6823      	ldr	r3, [r4, #0]
 8025b18:	6a1a      	ldr	r2, [r3, #32]
 8025b1a:	f892 31f8 	ldrb.w	r3, [r2, #504]	@ 0x1f8
 8025b1e:	3b01      	subs	r3, #1
 8025b20:	f882 31f8 	strb.w	r3, [r2, #504]	@ 0x1f8
 8025b24:	481b      	ldr	r0, [pc, #108]	@ (8025b94 <Test_UpperTester_Set13+0xe0>)
 8025b26:	f7ff feb7 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025b2a:	b377      	cbz	r7, 8025b8a <Test_UpperTester_Set13+0xd6>
 8025b2c:	2500      	movs	r5, #0
 8025b2e:	f44f 76ba 	mov.w	r6, #372	@ 0x174
 8025b32:	f04f 092c 	mov.w	r9, #44	@ 0x2c
 8025b36:	46a8      	mov	r8, r5
 8025b38:	6823      	ldr	r3, [r4, #0]
 8025b3a:	6a18      	ldr	r0, [r3, #32]
 8025b3c:	fb09 0305 	mla	r3, r9, r5, r0
 8025b40:	2210      	movs	r2, #16
 8025b42:	f8a3 8194 	strh.w	r8, [r3, #404]	@ 0x194
 8025b46:	2100      	movs	r1, #0
 8025b48:	4430      	add	r0, r6
 8025b4a:	f001 f841 	bl	8026bd0 <memset>
 8025b4e:	6822      	ldr	r2, [r4, #0]
 8025b50:	6a10      	ldr	r0, [r2, #32]
 8025b52:	f106 0310 	add.w	r3, r6, #16
 8025b56:	2210      	movs	r2, #16
 8025b58:	4418      	add	r0, r3
 8025b5a:	2100      	movs	r1, #0
 8025b5c:	f001 f838 	bl	8026bd0 <memset>
 8025b60:	6823      	ldr	r3, [r4, #0]
 8025b62:	6a1a      	ldr	r2, [r3, #32]
 8025b64:	f892 31f9 	ldrb.w	r3, [r2, #505]	@ 0x1f9
 8025b68:	3501      	adds	r5, #1
 8025b6a:	3b01      	subs	r3, #1
 8025b6c:	f882 31f9 	strb.w	r3, [r2, #505]	@ 0x1f9
 8025b70:	b2eb      	uxtb	r3, r5
 8025b72:	429f      	cmp	r7, r3
 8025b74:	f106 062c 	add.w	r6, r6, #44	@ 0x2c
 8025b78:	d8de      	bhi.n	8025b38 <Test_UpperTester_Set13+0x84>
 8025b7a:	4807      	ldr	r0, [pc, #28]	@ (8025b98 <Test_UpperTester_Set13+0xe4>)
 8025b7c:	f7ff fe8c 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025b80:	2000      	movs	r0, #0
 8025b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025b86:	4805      	ldr	r0, [pc, #20]	@ (8025b9c <Test_UpperTester_Set13+0xe8>)
 8025b88:	e7cd      	b.n	8025b26 <Test_UpperTester_Set13+0x72>
 8025b8a:	4805      	ldr	r0, [pc, #20]	@ (8025ba0 <Test_UpperTester_Set13+0xec>)
 8025b8c:	e7f6      	b.n	8025b7c <Test_UpperTester_Set13+0xc8>
 8025b8e:	bf00      	nop
 8025b90:	2000141c 	.word	0x2000141c
 8025b94:	0802ee9d 	.word	0x0802ee9d
 8025b98:	0802eed2 	.word	0x0802eed2
 8025b9c:	0802eeb8 	.word	0x0802eeb8
 8025ba0:	0802eeed 	.word	0x0802eeed

08025ba4 <Test_UpperTester_Set05>:
 8025ba4:	b508      	push	{r3, lr}
 8025ba6:	780b      	ldrb	r3, [r1, #0]
 8025ba8:	2b30      	cmp	r3, #48	@ 0x30
 8025baa:	d108      	bne.n	8025bbe <Test_UpperTester_Set05+0x1a>
 8025bac:	480c      	ldr	r0, [pc, #48]	@ (8025be0 <Test_UpperTester_Set05+0x3c>)
 8025bae:	f7ff fe73 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025bb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8025bb6:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8025bba:	f7f5 bb6b 	b.w	801b294 <BnrgmFrndMgmtSubscriptionListRemove>
 8025bbe:	2b31      	cmp	r3, #49	@ 0x31
 8025bc0:	d108      	bne.n	8025bd4 <Test_UpperTester_Set05+0x30>
 8025bc2:	4808      	ldr	r0, [pc, #32]	@ (8025be4 <Test_UpperTester_Set05+0x40>)
 8025bc4:	f7ff fe68 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025bc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8025bcc:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8025bd0:	f7f5 ba5c 	b.w	801b08c <BnrgmFrndMgmtSubscriptionListAdd>
 8025bd4:	4804      	ldr	r0, [pc, #16]	@ (8025be8 <Test_UpperTester_Set05+0x44>)
 8025bd6:	f7ff fe5f 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025bda:	2003      	movs	r0, #3
 8025bdc:	bd08      	pop	{r3, pc}
 8025bde:	bf00      	nop
 8025be0:	0802ef07 	.word	0x0802ef07
 8025be4:	0802ef1c 	.word	0x0802ef1c
 8025be8:	0802ef2f 	.word	0x0802ef2f

08025bec <Test_UpperTester_Set03>:
 8025bec:	780b      	ldrb	r3, [r1, #0]
 8025bee:	2b30      	cmp	r3, #48	@ 0x30
 8025bf0:	b510      	push	{r4, lr}
 8025bf2:	4604      	mov	r4, r0
 8025bf4:	d107      	bne.n	8025c06 <Test_UpperTester_Set03+0x1a>
 8025bf6:	2301      	movs	r3, #1
 8025bf8:	f880 32ac 	strb.w	r3, [r0, #684]	@ 0x2ac
 8025bfc:	4809      	ldr	r0, [pc, #36]	@ (8025c24 <Test_UpperTester_Set03+0x38>)
 8025bfe:	f7ff fe4b 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025c02:	2000      	movs	r0, #0
 8025c04:	bd10      	pop	{r4, pc}
 8025c06:	2b31      	cmp	r3, #49	@ 0x31
 8025c08:	d106      	bne.n	8025c18 <Test_UpperTester_Set03+0x2c>
 8025c0a:	4806      	ldr	r0, [pc, #24]	@ (8025c24 <Test_UpperTester_Set03+0x38>)
 8025c0c:	f7ff fe44 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025c10:	2300      	movs	r3, #0
 8025c12:	f884 32ac 	strb.w	r3, [r4, #684]	@ 0x2ac
 8025c16:	e7f4      	b.n	8025c02 <Test_UpperTester_Set03+0x16>
 8025c18:	4803      	ldr	r0, [pc, #12]	@ (8025c28 <Test_UpperTester_Set03+0x3c>)
 8025c1a:	f7ff fe3d 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025c1e:	2003      	movs	r0, #3
 8025c20:	e7f0      	b.n	8025c04 <Test_UpperTester_Set03+0x18>
 8025c22:	bf00      	nop
 8025c24:	0802ef42 	.word	0x0802ef42
 8025c28:	0802ef2f 	.word	0x0802ef2f

08025c2c <Test_UpperTester_Set02>:
 8025c2c:	b510      	push	{r4, lr}
 8025c2e:	f7f8 fb05 	bl	801e23c <MobleStackConfigInvalidate>
 8025c32:	4604      	mov	r4, r0
 8025c34:	b930      	cbnz	r0, 8025c44 <Test_UpperTester_Set02+0x18>
 8025c36:	f7f6 fe03 	bl	801c840 <MoblePalBluetoothGracefulReset>
 8025c3a:	4806      	ldr	r0, [pc, #24]	@ (8025c54 <Test_UpperTester_Set02+0x28>)
 8025c3c:	f7ff fe2c 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025c40:	4620      	mov	r0, r4
 8025c42:	bd10      	pop	{r4, pc}
 8025c44:	2801      	cmp	r0, #1
 8025c46:	d1fb      	bne.n	8025c40 <Test_UpperTester_Set02+0x14>
 8025c48:	4803      	ldr	r0, [pc, #12]	@ (8025c58 <Test_UpperTester_Set02+0x2c>)
 8025c4a:	f7ff fe25 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025c4e:	2400      	movs	r4, #0
 8025c50:	e7f6      	b.n	8025c40 <Test_UpperTester_Set02+0x14>
 8025c52:	bf00      	nop
 8025c54:	0802ef64 	.word	0x0802ef64
 8025c58:	0802ef86 	.word	0x0802ef86

08025c5c <Test_UpperTester_Set01>:
 8025c5c:	b508      	push	{r3, lr}
 8025c5e:	4809      	ldr	r0, [pc, #36]	@ (8025c84 <Test_UpperTester_Set01+0x28>)
 8025c60:	f7ff fe1a 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025c64:	4808      	ldr	r0, [pc, #32]	@ (8025c88 <Test_UpperTester_Set01+0x2c>)
 8025c66:	f7ff fe17 	bl	8025898 <Test_Upper_Tester_PrintStringCb>
 8025c6a:	f3bf 8f4f 	dsb	sy
 8025c6e:	4907      	ldr	r1, [pc, #28]	@ (8025c8c <Test_UpperTester_Set01+0x30>)
 8025c70:	4b07      	ldr	r3, [pc, #28]	@ (8025c90 <Test_UpperTester_Set01+0x34>)
 8025c72:	68ca      	ldr	r2, [r1, #12]
 8025c74:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8025c78:	4313      	orrs	r3, r2
 8025c7a:	60cb      	str	r3, [r1, #12]
 8025c7c:	f3bf 8f4f 	dsb	sy
 8025c80:	bf00      	nop
 8025c82:	e7fd      	b.n	8025c80 <Test_UpperTester_Set01+0x24>
 8025c84:	0802efa3 	.word	0x0802efa3
 8025c88:	0802efb1 	.word	0x0802efb1
 8025c8c:	e000ed00 	.word	0xe000ed00
 8025c90:	05fa0004 	.word	0x05fa0004

08025c94 <__assert_func>:
 8025c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025c96:	4614      	mov	r4, r2
 8025c98:	461a      	mov	r2, r3
 8025c9a:	4b09      	ldr	r3, [pc, #36]	@ (8025cc0 <__assert_func+0x2c>)
 8025c9c:	681b      	ldr	r3, [r3, #0]
 8025c9e:	4605      	mov	r5, r0
 8025ca0:	68d8      	ldr	r0, [r3, #12]
 8025ca2:	b954      	cbnz	r4, 8025cba <__assert_func+0x26>
 8025ca4:	4b07      	ldr	r3, [pc, #28]	@ (8025cc4 <__assert_func+0x30>)
 8025ca6:	461c      	mov	r4, r3
 8025ca8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025cac:	9100      	str	r1, [sp, #0]
 8025cae:	462b      	mov	r3, r5
 8025cb0:	4905      	ldr	r1, [pc, #20]	@ (8025cc8 <__assert_func+0x34>)
 8025cb2:	f000 fdbf 	bl	8026834 <fiprintf>
 8025cb6:	f001 f84a 	bl	8026d4e <abort>
 8025cba:	4b04      	ldr	r3, [pc, #16]	@ (8025ccc <__assert_func+0x38>)
 8025cbc:	e7f4      	b.n	8025ca8 <__assert_func+0x14>
 8025cbe:	bf00      	nop
 8025cc0:	200000ec 	.word	0x200000ec
 8025cc4:	0802e5bf 	.word	0x0802e5bf
 8025cc8:	0802efcf 	.word	0x0802efcf
 8025ccc:	0802efc2 	.word	0x0802efc2

08025cd0 <malloc>:
 8025cd0:	4b02      	ldr	r3, [pc, #8]	@ (8025cdc <malloc+0xc>)
 8025cd2:	4601      	mov	r1, r0
 8025cd4:	6818      	ldr	r0, [r3, #0]
 8025cd6:	f000 b825 	b.w	8025d24 <_malloc_r>
 8025cda:	bf00      	nop
 8025cdc:	200000ec 	.word	0x200000ec

08025ce0 <sbrk_aligned>:
 8025ce0:	b570      	push	{r4, r5, r6, lr}
 8025ce2:	4e0f      	ldr	r6, [pc, #60]	@ (8025d20 <sbrk_aligned+0x40>)
 8025ce4:	460c      	mov	r4, r1
 8025ce6:	6831      	ldr	r1, [r6, #0]
 8025ce8:	4605      	mov	r5, r0
 8025cea:	b911      	cbnz	r1, 8025cf2 <sbrk_aligned+0x12>
 8025cec:	f000 ffd2 	bl	8026c94 <_sbrk_r>
 8025cf0:	6030      	str	r0, [r6, #0]
 8025cf2:	4621      	mov	r1, r4
 8025cf4:	4628      	mov	r0, r5
 8025cf6:	f000 ffcd 	bl	8026c94 <_sbrk_r>
 8025cfa:	1c43      	adds	r3, r0, #1
 8025cfc:	d103      	bne.n	8025d06 <sbrk_aligned+0x26>
 8025cfe:	f04f 34ff 	mov.w	r4, #4294967295
 8025d02:	4620      	mov	r0, r4
 8025d04:	bd70      	pop	{r4, r5, r6, pc}
 8025d06:	1cc4      	adds	r4, r0, #3
 8025d08:	f024 0403 	bic.w	r4, r4, #3
 8025d0c:	42a0      	cmp	r0, r4
 8025d0e:	d0f8      	beq.n	8025d02 <sbrk_aligned+0x22>
 8025d10:	1a21      	subs	r1, r4, r0
 8025d12:	4628      	mov	r0, r5
 8025d14:	f000 ffbe 	bl	8026c94 <_sbrk_r>
 8025d18:	3001      	adds	r0, #1
 8025d1a:	d1f2      	bne.n	8025d02 <sbrk_aligned+0x22>
 8025d1c:	e7ef      	b.n	8025cfe <sbrk_aligned+0x1e>
 8025d1e:	bf00      	nop
 8025d20:	200080b8 	.word	0x200080b8

08025d24 <_malloc_r>:
 8025d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025d28:	1ccd      	adds	r5, r1, #3
 8025d2a:	f025 0503 	bic.w	r5, r5, #3
 8025d2e:	3508      	adds	r5, #8
 8025d30:	2d0c      	cmp	r5, #12
 8025d32:	bf38      	it	cc
 8025d34:	250c      	movcc	r5, #12
 8025d36:	2d00      	cmp	r5, #0
 8025d38:	4606      	mov	r6, r0
 8025d3a:	db01      	blt.n	8025d40 <_malloc_r+0x1c>
 8025d3c:	42a9      	cmp	r1, r5
 8025d3e:	d904      	bls.n	8025d4a <_malloc_r+0x26>
 8025d40:	230c      	movs	r3, #12
 8025d42:	6033      	str	r3, [r6, #0]
 8025d44:	2000      	movs	r0, #0
 8025d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025d4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8025e20 <_malloc_r+0xfc>
 8025d4e:	f000 f869 	bl	8025e24 <__malloc_lock>
 8025d52:	f8d8 3000 	ldr.w	r3, [r8]
 8025d56:	461c      	mov	r4, r3
 8025d58:	bb44      	cbnz	r4, 8025dac <_malloc_r+0x88>
 8025d5a:	4629      	mov	r1, r5
 8025d5c:	4630      	mov	r0, r6
 8025d5e:	f7ff ffbf 	bl	8025ce0 <sbrk_aligned>
 8025d62:	1c43      	adds	r3, r0, #1
 8025d64:	4604      	mov	r4, r0
 8025d66:	d158      	bne.n	8025e1a <_malloc_r+0xf6>
 8025d68:	f8d8 4000 	ldr.w	r4, [r8]
 8025d6c:	4627      	mov	r7, r4
 8025d6e:	2f00      	cmp	r7, #0
 8025d70:	d143      	bne.n	8025dfa <_malloc_r+0xd6>
 8025d72:	2c00      	cmp	r4, #0
 8025d74:	d04b      	beq.n	8025e0e <_malloc_r+0xea>
 8025d76:	6823      	ldr	r3, [r4, #0]
 8025d78:	4639      	mov	r1, r7
 8025d7a:	4630      	mov	r0, r6
 8025d7c:	eb04 0903 	add.w	r9, r4, r3
 8025d80:	f000 ff88 	bl	8026c94 <_sbrk_r>
 8025d84:	4581      	cmp	r9, r0
 8025d86:	d142      	bne.n	8025e0e <_malloc_r+0xea>
 8025d88:	6821      	ldr	r1, [r4, #0]
 8025d8a:	1a6d      	subs	r5, r5, r1
 8025d8c:	4629      	mov	r1, r5
 8025d8e:	4630      	mov	r0, r6
 8025d90:	f7ff ffa6 	bl	8025ce0 <sbrk_aligned>
 8025d94:	3001      	adds	r0, #1
 8025d96:	d03a      	beq.n	8025e0e <_malloc_r+0xea>
 8025d98:	6823      	ldr	r3, [r4, #0]
 8025d9a:	442b      	add	r3, r5
 8025d9c:	6023      	str	r3, [r4, #0]
 8025d9e:	f8d8 3000 	ldr.w	r3, [r8]
 8025da2:	685a      	ldr	r2, [r3, #4]
 8025da4:	bb62      	cbnz	r2, 8025e00 <_malloc_r+0xdc>
 8025da6:	f8c8 7000 	str.w	r7, [r8]
 8025daa:	e00f      	b.n	8025dcc <_malloc_r+0xa8>
 8025dac:	6822      	ldr	r2, [r4, #0]
 8025dae:	1b52      	subs	r2, r2, r5
 8025db0:	d420      	bmi.n	8025df4 <_malloc_r+0xd0>
 8025db2:	2a0b      	cmp	r2, #11
 8025db4:	d917      	bls.n	8025de6 <_malloc_r+0xc2>
 8025db6:	1961      	adds	r1, r4, r5
 8025db8:	42a3      	cmp	r3, r4
 8025dba:	6025      	str	r5, [r4, #0]
 8025dbc:	bf18      	it	ne
 8025dbe:	6059      	strne	r1, [r3, #4]
 8025dc0:	6863      	ldr	r3, [r4, #4]
 8025dc2:	bf08      	it	eq
 8025dc4:	f8c8 1000 	streq.w	r1, [r8]
 8025dc8:	5162      	str	r2, [r4, r5]
 8025dca:	604b      	str	r3, [r1, #4]
 8025dcc:	4630      	mov	r0, r6
 8025dce:	f000 f82f 	bl	8025e30 <__malloc_unlock>
 8025dd2:	f104 000b 	add.w	r0, r4, #11
 8025dd6:	1d23      	adds	r3, r4, #4
 8025dd8:	f020 0007 	bic.w	r0, r0, #7
 8025ddc:	1ac2      	subs	r2, r0, r3
 8025dde:	bf1c      	itt	ne
 8025de0:	1a1b      	subne	r3, r3, r0
 8025de2:	50a3      	strne	r3, [r4, r2]
 8025de4:	e7af      	b.n	8025d46 <_malloc_r+0x22>
 8025de6:	6862      	ldr	r2, [r4, #4]
 8025de8:	42a3      	cmp	r3, r4
 8025dea:	bf0c      	ite	eq
 8025dec:	f8c8 2000 	streq.w	r2, [r8]
 8025df0:	605a      	strne	r2, [r3, #4]
 8025df2:	e7eb      	b.n	8025dcc <_malloc_r+0xa8>
 8025df4:	4623      	mov	r3, r4
 8025df6:	6864      	ldr	r4, [r4, #4]
 8025df8:	e7ae      	b.n	8025d58 <_malloc_r+0x34>
 8025dfa:	463c      	mov	r4, r7
 8025dfc:	687f      	ldr	r7, [r7, #4]
 8025dfe:	e7b6      	b.n	8025d6e <_malloc_r+0x4a>
 8025e00:	461a      	mov	r2, r3
 8025e02:	685b      	ldr	r3, [r3, #4]
 8025e04:	42a3      	cmp	r3, r4
 8025e06:	d1fb      	bne.n	8025e00 <_malloc_r+0xdc>
 8025e08:	2300      	movs	r3, #0
 8025e0a:	6053      	str	r3, [r2, #4]
 8025e0c:	e7de      	b.n	8025dcc <_malloc_r+0xa8>
 8025e0e:	230c      	movs	r3, #12
 8025e10:	6033      	str	r3, [r6, #0]
 8025e12:	4630      	mov	r0, r6
 8025e14:	f000 f80c 	bl	8025e30 <__malloc_unlock>
 8025e18:	e794      	b.n	8025d44 <_malloc_r+0x20>
 8025e1a:	6005      	str	r5, [r0, #0]
 8025e1c:	e7d6      	b.n	8025dcc <_malloc_r+0xa8>
 8025e1e:	bf00      	nop
 8025e20:	200080bc 	.word	0x200080bc

08025e24 <__malloc_lock>:
 8025e24:	4801      	ldr	r0, [pc, #4]	@ (8025e2c <__malloc_lock+0x8>)
 8025e26:	f000 bf82 	b.w	8026d2e <__retarget_lock_acquire_recursive>
 8025e2a:	bf00      	nop
 8025e2c:	20008200 	.word	0x20008200

08025e30 <__malloc_unlock>:
 8025e30:	4801      	ldr	r0, [pc, #4]	@ (8025e38 <__malloc_unlock+0x8>)
 8025e32:	f000 bf7d 	b.w	8026d30 <__retarget_lock_release_recursive>
 8025e36:	bf00      	nop
 8025e38:	20008200 	.word	0x20008200

08025e3c <__cvt>:
 8025e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025e40:	ec57 6b10 	vmov	r6, r7, d0
 8025e44:	2f00      	cmp	r7, #0
 8025e46:	460c      	mov	r4, r1
 8025e48:	4619      	mov	r1, r3
 8025e4a:	463b      	mov	r3, r7
 8025e4c:	bfbb      	ittet	lt
 8025e4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8025e52:	461f      	movlt	r7, r3
 8025e54:	2300      	movge	r3, #0
 8025e56:	232d      	movlt	r3, #45	@ 0x2d
 8025e58:	700b      	strb	r3, [r1, #0]
 8025e5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025e5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8025e60:	4691      	mov	r9, r2
 8025e62:	f023 0820 	bic.w	r8, r3, #32
 8025e66:	bfbc      	itt	lt
 8025e68:	4632      	movlt	r2, r6
 8025e6a:	4616      	movlt	r6, r2
 8025e6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8025e70:	d005      	beq.n	8025e7e <__cvt+0x42>
 8025e72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8025e76:	d100      	bne.n	8025e7a <__cvt+0x3e>
 8025e78:	3401      	adds	r4, #1
 8025e7a:	2102      	movs	r1, #2
 8025e7c:	e000      	b.n	8025e80 <__cvt+0x44>
 8025e7e:	2103      	movs	r1, #3
 8025e80:	ab03      	add	r3, sp, #12
 8025e82:	9301      	str	r3, [sp, #4]
 8025e84:	ab02      	add	r3, sp, #8
 8025e86:	9300      	str	r3, [sp, #0]
 8025e88:	ec47 6b10 	vmov	d0, r6, r7
 8025e8c:	4653      	mov	r3, sl
 8025e8e:	4622      	mov	r2, r4
 8025e90:	f000 ffee 	bl	8026e70 <_dtoa_r>
 8025e94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8025e98:	4605      	mov	r5, r0
 8025e9a:	d119      	bne.n	8025ed0 <__cvt+0x94>
 8025e9c:	f019 0f01 	tst.w	r9, #1
 8025ea0:	d00e      	beq.n	8025ec0 <__cvt+0x84>
 8025ea2:	eb00 0904 	add.w	r9, r0, r4
 8025ea6:	2200      	movs	r2, #0
 8025ea8:	2300      	movs	r3, #0
 8025eaa:	4630      	mov	r0, r6
 8025eac:	4639      	mov	r1, r7
 8025eae:	f7da fdf3 	bl	8000a98 <__aeabi_dcmpeq>
 8025eb2:	b108      	cbz	r0, 8025eb8 <__cvt+0x7c>
 8025eb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8025eb8:	2230      	movs	r2, #48	@ 0x30
 8025eba:	9b03      	ldr	r3, [sp, #12]
 8025ebc:	454b      	cmp	r3, r9
 8025ebe:	d31e      	bcc.n	8025efe <__cvt+0xc2>
 8025ec0:	9b03      	ldr	r3, [sp, #12]
 8025ec2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025ec4:	1b5b      	subs	r3, r3, r5
 8025ec6:	4628      	mov	r0, r5
 8025ec8:	6013      	str	r3, [r2, #0]
 8025eca:	b004      	add	sp, #16
 8025ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025ed0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8025ed4:	eb00 0904 	add.w	r9, r0, r4
 8025ed8:	d1e5      	bne.n	8025ea6 <__cvt+0x6a>
 8025eda:	7803      	ldrb	r3, [r0, #0]
 8025edc:	2b30      	cmp	r3, #48	@ 0x30
 8025ede:	d10a      	bne.n	8025ef6 <__cvt+0xba>
 8025ee0:	2200      	movs	r2, #0
 8025ee2:	2300      	movs	r3, #0
 8025ee4:	4630      	mov	r0, r6
 8025ee6:	4639      	mov	r1, r7
 8025ee8:	f7da fdd6 	bl	8000a98 <__aeabi_dcmpeq>
 8025eec:	b918      	cbnz	r0, 8025ef6 <__cvt+0xba>
 8025eee:	f1c4 0401 	rsb	r4, r4, #1
 8025ef2:	f8ca 4000 	str.w	r4, [sl]
 8025ef6:	f8da 3000 	ldr.w	r3, [sl]
 8025efa:	4499      	add	r9, r3
 8025efc:	e7d3      	b.n	8025ea6 <__cvt+0x6a>
 8025efe:	1c59      	adds	r1, r3, #1
 8025f00:	9103      	str	r1, [sp, #12]
 8025f02:	701a      	strb	r2, [r3, #0]
 8025f04:	e7d9      	b.n	8025eba <__cvt+0x7e>

08025f06 <__exponent>:
 8025f06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025f08:	2900      	cmp	r1, #0
 8025f0a:	bfba      	itte	lt
 8025f0c:	4249      	neglt	r1, r1
 8025f0e:	232d      	movlt	r3, #45	@ 0x2d
 8025f10:	232b      	movge	r3, #43	@ 0x2b
 8025f12:	2909      	cmp	r1, #9
 8025f14:	7002      	strb	r2, [r0, #0]
 8025f16:	7043      	strb	r3, [r0, #1]
 8025f18:	dd29      	ble.n	8025f6e <__exponent+0x68>
 8025f1a:	f10d 0307 	add.w	r3, sp, #7
 8025f1e:	461d      	mov	r5, r3
 8025f20:	270a      	movs	r7, #10
 8025f22:	461a      	mov	r2, r3
 8025f24:	fbb1 f6f7 	udiv	r6, r1, r7
 8025f28:	fb07 1416 	mls	r4, r7, r6, r1
 8025f2c:	3430      	adds	r4, #48	@ 0x30
 8025f2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8025f32:	460c      	mov	r4, r1
 8025f34:	2c63      	cmp	r4, #99	@ 0x63
 8025f36:	f103 33ff 	add.w	r3, r3, #4294967295
 8025f3a:	4631      	mov	r1, r6
 8025f3c:	dcf1      	bgt.n	8025f22 <__exponent+0x1c>
 8025f3e:	3130      	adds	r1, #48	@ 0x30
 8025f40:	1e94      	subs	r4, r2, #2
 8025f42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8025f46:	1c41      	adds	r1, r0, #1
 8025f48:	4623      	mov	r3, r4
 8025f4a:	42ab      	cmp	r3, r5
 8025f4c:	d30a      	bcc.n	8025f64 <__exponent+0x5e>
 8025f4e:	f10d 0309 	add.w	r3, sp, #9
 8025f52:	1a9b      	subs	r3, r3, r2
 8025f54:	42ac      	cmp	r4, r5
 8025f56:	bf88      	it	hi
 8025f58:	2300      	movhi	r3, #0
 8025f5a:	3302      	adds	r3, #2
 8025f5c:	4403      	add	r3, r0
 8025f5e:	1a18      	subs	r0, r3, r0
 8025f60:	b003      	add	sp, #12
 8025f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025f64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8025f68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8025f6c:	e7ed      	b.n	8025f4a <__exponent+0x44>
 8025f6e:	2330      	movs	r3, #48	@ 0x30
 8025f70:	3130      	adds	r1, #48	@ 0x30
 8025f72:	7083      	strb	r3, [r0, #2]
 8025f74:	70c1      	strb	r1, [r0, #3]
 8025f76:	1d03      	adds	r3, r0, #4
 8025f78:	e7f1      	b.n	8025f5e <__exponent+0x58>
	...

08025f7c <_printf_float>:
 8025f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f80:	b08d      	sub	sp, #52	@ 0x34
 8025f82:	460c      	mov	r4, r1
 8025f84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8025f88:	4616      	mov	r6, r2
 8025f8a:	461f      	mov	r7, r3
 8025f8c:	4605      	mov	r5, r0
 8025f8e:	f000 fe49 	bl	8026c24 <_localeconv_r>
 8025f92:	6803      	ldr	r3, [r0, #0]
 8025f94:	9304      	str	r3, [sp, #16]
 8025f96:	4618      	mov	r0, r3
 8025f98:	f7da f952 	bl	8000240 <strlen>
 8025f9c:	2300      	movs	r3, #0
 8025f9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025fa0:	f8d8 3000 	ldr.w	r3, [r8]
 8025fa4:	9005      	str	r0, [sp, #20]
 8025fa6:	3307      	adds	r3, #7
 8025fa8:	f023 0307 	bic.w	r3, r3, #7
 8025fac:	f103 0208 	add.w	r2, r3, #8
 8025fb0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8025fb4:	f8d4 b000 	ldr.w	fp, [r4]
 8025fb8:	f8c8 2000 	str.w	r2, [r8]
 8025fbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8025fc0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8025fc4:	9307      	str	r3, [sp, #28]
 8025fc6:	f8cd 8018 	str.w	r8, [sp, #24]
 8025fca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8025fce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025fd2:	4b9c      	ldr	r3, [pc, #624]	@ (8026244 <_printf_float+0x2c8>)
 8025fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8025fd8:	f7da fd90 	bl	8000afc <__aeabi_dcmpun>
 8025fdc:	bb70      	cbnz	r0, 802603c <_printf_float+0xc0>
 8025fde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025fe2:	4b98      	ldr	r3, [pc, #608]	@ (8026244 <_printf_float+0x2c8>)
 8025fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8025fe8:	f7da fd6a 	bl	8000ac0 <__aeabi_dcmple>
 8025fec:	bb30      	cbnz	r0, 802603c <_printf_float+0xc0>
 8025fee:	2200      	movs	r2, #0
 8025ff0:	2300      	movs	r3, #0
 8025ff2:	4640      	mov	r0, r8
 8025ff4:	4649      	mov	r1, r9
 8025ff6:	f7da fd59 	bl	8000aac <__aeabi_dcmplt>
 8025ffa:	b110      	cbz	r0, 8026002 <_printf_float+0x86>
 8025ffc:	232d      	movs	r3, #45	@ 0x2d
 8025ffe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026002:	4a91      	ldr	r2, [pc, #580]	@ (8026248 <_printf_float+0x2cc>)
 8026004:	4b91      	ldr	r3, [pc, #580]	@ (802624c <_printf_float+0x2d0>)
 8026006:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802600a:	bf94      	ite	ls
 802600c:	4690      	movls	r8, r2
 802600e:	4698      	movhi	r8, r3
 8026010:	2303      	movs	r3, #3
 8026012:	6123      	str	r3, [r4, #16]
 8026014:	f02b 0304 	bic.w	r3, fp, #4
 8026018:	6023      	str	r3, [r4, #0]
 802601a:	f04f 0900 	mov.w	r9, #0
 802601e:	9700      	str	r7, [sp, #0]
 8026020:	4633      	mov	r3, r6
 8026022:	aa0b      	add	r2, sp, #44	@ 0x2c
 8026024:	4621      	mov	r1, r4
 8026026:	4628      	mov	r0, r5
 8026028:	f000 f9d2 	bl	80263d0 <_printf_common>
 802602c:	3001      	adds	r0, #1
 802602e:	f040 808d 	bne.w	802614c <_printf_float+0x1d0>
 8026032:	f04f 30ff 	mov.w	r0, #4294967295
 8026036:	b00d      	add	sp, #52	@ 0x34
 8026038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802603c:	4642      	mov	r2, r8
 802603e:	464b      	mov	r3, r9
 8026040:	4640      	mov	r0, r8
 8026042:	4649      	mov	r1, r9
 8026044:	f7da fd5a 	bl	8000afc <__aeabi_dcmpun>
 8026048:	b140      	cbz	r0, 802605c <_printf_float+0xe0>
 802604a:	464b      	mov	r3, r9
 802604c:	2b00      	cmp	r3, #0
 802604e:	bfbc      	itt	lt
 8026050:	232d      	movlt	r3, #45	@ 0x2d
 8026052:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8026056:	4a7e      	ldr	r2, [pc, #504]	@ (8026250 <_printf_float+0x2d4>)
 8026058:	4b7e      	ldr	r3, [pc, #504]	@ (8026254 <_printf_float+0x2d8>)
 802605a:	e7d4      	b.n	8026006 <_printf_float+0x8a>
 802605c:	6863      	ldr	r3, [r4, #4]
 802605e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8026062:	9206      	str	r2, [sp, #24]
 8026064:	1c5a      	adds	r2, r3, #1
 8026066:	d13b      	bne.n	80260e0 <_printf_float+0x164>
 8026068:	2306      	movs	r3, #6
 802606a:	6063      	str	r3, [r4, #4]
 802606c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8026070:	2300      	movs	r3, #0
 8026072:	6022      	str	r2, [r4, #0]
 8026074:	9303      	str	r3, [sp, #12]
 8026076:	ab0a      	add	r3, sp, #40	@ 0x28
 8026078:	e9cd a301 	strd	sl, r3, [sp, #4]
 802607c:	ab09      	add	r3, sp, #36	@ 0x24
 802607e:	9300      	str	r3, [sp, #0]
 8026080:	6861      	ldr	r1, [r4, #4]
 8026082:	ec49 8b10 	vmov	d0, r8, r9
 8026086:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 802608a:	4628      	mov	r0, r5
 802608c:	f7ff fed6 	bl	8025e3c <__cvt>
 8026090:	9b06      	ldr	r3, [sp, #24]
 8026092:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026094:	2b47      	cmp	r3, #71	@ 0x47
 8026096:	4680      	mov	r8, r0
 8026098:	d129      	bne.n	80260ee <_printf_float+0x172>
 802609a:	1cc8      	adds	r0, r1, #3
 802609c:	db02      	blt.n	80260a4 <_printf_float+0x128>
 802609e:	6863      	ldr	r3, [r4, #4]
 80260a0:	4299      	cmp	r1, r3
 80260a2:	dd41      	ble.n	8026128 <_printf_float+0x1ac>
 80260a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80260a8:	fa5f fa8a 	uxtb.w	sl, sl
 80260ac:	3901      	subs	r1, #1
 80260ae:	4652      	mov	r2, sl
 80260b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80260b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80260b6:	f7ff ff26 	bl	8025f06 <__exponent>
 80260ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80260bc:	1813      	adds	r3, r2, r0
 80260be:	2a01      	cmp	r2, #1
 80260c0:	4681      	mov	r9, r0
 80260c2:	6123      	str	r3, [r4, #16]
 80260c4:	dc02      	bgt.n	80260cc <_printf_float+0x150>
 80260c6:	6822      	ldr	r2, [r4, #0]
 80260c8:	07d2      	lsls	r2, r2, #31
 80260ca:	d501      	bpl.n	80260d0 <_printf_float+0x154>
 80260cc:	3301      	adds	r3, #1
 80260ce:	6123      	str	r3, [r4, #16]
 80260d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80260d4:	2b00      	cmp	r3, #0
 80260d6:	d0a2      	beq.n	802601e <_printf_float+0xa2>
 80260d8:	232d      	movs	r3, #45	@ 0x2d
 80260da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80260de:	e79e      	b.n	802601e <_printf_float+0xa2>
 80260e0:	9a06      	ldr	r2, [sp, #24]
 80260e2:	2a47      	cmp	r2, #71	@ 0x47
 80260e4:	d1c2      	bne.n	802606c <_printf_float+0xf0>
 80260e6:	2b00      	cmp	r3, #0
 80260e8:	d1c0      	bne.n	802606c <_printf_float+0xf0>
 80260ea:	2301      	movs	r3, #1
 80260ec:	e7bd      	b.n	802606a <_printf_float+0xee>
 80260ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80260f2:	d9db      	bls.n	80260ac <_printf_float+0x130>
 80260f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80260f8:	d118      	bne.n	802612c <_printf_float+0x1b0>
 80260fa:	2900      	cmp	r1, #0
 80260fc:	6863      	ldr	r3, [r4, #4]
 80260fe:	dd0b      	ble.n	8026118 <_printf_float+0x19c>
 8026100:	6121      	str	r1, [r4, #16]
 8026102:	b913      	cbnz	r3, 802610a <_printf_float+0x18e>
 8026104:	6822      	ldr	r2, [r4, #0]
 8026106:	07d0      	lsls	r0, r2, #31
 8026108:	d502      	bpl.n	8026110 <_printf_float+0x194>
 802610a:	3301      	adds	r3, #1
 802610c:	440b      	add	r3, r1
 802610e:	6123      	str	r3, [r4, #16]
 8026110:	65a1      	str	r1, [r4, #88]	@ 0x58
 8026112:	f04f 0900 	mov.w	r9, #0
 8026116:	e7db      	b.n	80260d0 <_printf_float+0x154>
 8026118:	b913      	cbnz	r3, 8026120 <_printf_float+0x1a4>
 802611a:	6822      	ldr	r2, [r4, #0]
 802611c:	07d2      	lsls	r2, r2, #31
 802611e:	d501      	bpl.n	8026124 <_printf_float+0x1a8>
 8026120:	3302      	adds	r3, #2
 8026122:	e7f4      	b.n	802610e <_printf_float+0x192>
 8026124:	2301      	movs	r3, #1
 8026126:	e7f2      	b.n	802610e <_printf_float+0x192>
 8026128:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 802612c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802612e:	4299      	cmp	r1, r3
 8026130:	db05      	blt.n	802613e <_printf_float+0x1c2>
 8026132:	6823      	ldr	r3, [r4, #0]
 8026134:	6121      	str	r1, [r4, #16]
 8026136:	07d8      	lsls	r0, r3, #31
 8026138:	d5ea      	bpl.n	8026110 <_printf_float+0x194>
 802613a:	1c4b      	adds	r3, r1, #1
 802613c:	e7e7      	b.n	802610e <_printf_float+0x192>
 802613e:	2900      	cmp	r1, #0
 8026140:	bfd4      	ite	le
 8026142:	f1c1 0202 	rsble	r2, r1, #2
 8026146:	2201      	movgt	r2, #1
 8026148:	4413      	add	r3, r2
 802614a:	e7e0      	b.n	802610e <_printf_float+0x192>
 802614c:	6823      	ldr	r3, [r4, #0]
 802614e:	055a      	lsls	r2, r3, #21
 8026150:	d407      	bmi.n	8026162 <_printf_float+0x1e6>
 8026152:	6923      	ldr	r3, [r4, #16]
 8026154:	4642      	mov	r2, r8
 8026156:	4631      	mov	r1, r6
 8026158:	4628      	mov	r0, r5
 802615a:	47b8      	blx	r7
 802615c:	3001      	adds	r0, #1
 802615e:	d12b      	bne.n	80261b8 <_printf_float+0x23c>
 8026160:	e767      	b.n	8026032 <_printf_float+0xb6>
 8026162:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8026166:	f240 80dd 	bls.w	8026324 <_printf_float+0x3a8>
 802616a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 802616e:	2200      	movs	r2, #0
 8026170:	2300      	movs	r3, #0
 8026172:	f7da fc91 	bl	8000a98 <__aeabi_dcmpeq>
 8026176:	2800      	cmp	r0, #0
 8026178:	d033      	beq.n	80261e2 <_printf_float+0x266>
 802617a:	4a37      	ldr	r2, [pc, #220]	@ (8026258 <_printf_float+0x2dc>)
 802617c:	2301      	movs	r3, #1
 802617e:	4631      	mov	r1, r6
 8026180:	4628      	mov	r0, r5
 8026182:	47b8      	blx	r7
 8026184:	3001      	adds	r0, #1
 8026186:	f43f af54 	beq.w	8026032 <_printf_float+0xb6>
 802618a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 802618e:	4543      	cmp	r3, r8
 8026190:	db02      	blt.n	8026198 <_printf_float+0x21c>
 8026192:	6823      	ldr	r3, [r4, #0]
 8026194:	07d8      	lsls	r0, r3, #31
 8026196:	d50f      	bpl.n	80261b8 <_printf_float+0x23c>
 8026198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802619c:	4631      	mov	r1, r6
 802619e:	4628      	mov	r0, r5
 80261a0:	47b8      	blx	r7
 80261a2:	3001      	adds	r0, #1
 80261a4:	f43f af45 	beq.w	8026032 <_printf_float+0xb6>
 80261a8:	f04f 0900 	mov.w	r9, #0
 80261ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80261b0:	f104 0a1a 	add.w	sl, r4, #26
 80261b4:	45c8      	cmp	r8, r9
 80261b6:	dc09      	bgt.n	80261cc <_printf_float+0x250>
 80261b8:	6823      	ldr	r3, [r4, #0]
 80261ba:	079b      	lsls	r3, r3, #30
 80261bc:	f100 8103 	bmi.w	80263c6 <_printf_float+0x44a>
 80261c0:	68e0      	ldr	r0, [r4, #12]
 80261c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80261c4:	4298      	cmp	r0, r3
 80261c6:	bfb8      	it	lt
 80261c8:	4618      	movlt	r0, r3
 80261ca:	e734      	b.n	8026036 <_printf_float+0xba>
 80261cc:	2301      	movs	r3, #1
 80261ce:	4652      	mov	r2, sl
 80261d0:	4631      	mov	r1, r6
 80261d2:	4628      	mov	r0, r5
 80261d4:	47b8      	blx	r7
 80261d6:	3001      	adds	r0, #1
 80261d8:	f43f af2b 	beq.w	8026032 <_printf_float+0xb6>
 80261dc:	f109 0901 	add.w	r9, r9, #1
 80261e0:	e7e8      	b.n	80261b4 <_printf_float+0x238>
 80261e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80261e4:	2b00      	cmp	r3, #0
 80261e6:	dc39      	bgt.n	802625c <_printf_float+0x2e0>
 80261e8:	4a1b      	ldr	r2, [pc, #108]	@ (8026258 <_printf_float+0x2dc>)
 80261ea:	2301      	movs	r3, #1
 80261ec:	4631      	mov	r1, r6
 80261ee:	4628      	mov	r0, r5
 80261f0:	47b8      	blx	r7
 80261f2:	3001      	adds	r0, #1
 80261f4:	f43f af1d 	beq.w	8026032 <_printf_float+0xb6>
 80261f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80261fc:	ea59 0303 	orrs.w	r3, r9, r3
 8026200:	d102      	bne.n	8026208 <_printf_float+0x28c>
 8026202:	6823      	ldr	r3, [r4, #0]
 8026204:	07d9      	lsls	r1, r3, #31
 8026206:	d5d7      	bpl.n	80261b8 <_printf_float+0x23c>
 8026208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802620c:	4631      	mov	r1, r6
 802620e:	4628      	mov	r0, r5
 8026210:	47b8      	blx	r7
 8026212:	3001      	adds	r0, #1
 8026214:	f43f af0d 	beq.w	8026032 <_printf_float+0xb6>
 8026218:	f04f 0a00 	mov.w	sl, #0
 802621c:	f104 0b1a 	add.w	fp, r4, #26
 8026220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026222:	425b      	negs	r3, r3
 8026224:	4553      	cmp	r3, sl
 8026226:	dc01      	bgt.n	802622c <_printf_float+0x2b0>
 8026228:	464b      	mov	r3, r9
 802622a:	e793      	b.n	8026154 <_printf_float+0x1d8>
 802622c:	2301      	movs	r3, #1
 802622e:	465a      	mov	r2, fp
 8026230:	4631      	mov	r1, r6
 8026232:	4628      	mov	r0, r5
 8026234:	47b8      	blx	r7
 8026236:	3001      	adds	r0, #1
 8026238:	f43f aefb 	beq.w	8026032 <_printf_float+0xb6>
 802623c:	f10a 0a01 	add.w	sl, sl, #1
 8026240:	e7ee      	b.n	8026220 <_printf_float+0x2a4>
 8026242:	bf00      	nop
 8026244:	7fefffff 	.word	0x7fefffff
 8026248:	0802effe 	.word	0x0802effe
 802624c:	0802f002 	.word	0x0802f002
 8026250:	0802f006 	.word	0x0802f006
 8026254:	0802f00a 	.word	0x0802f00a
 8026258:	0802eeeb 	.word	0x0802eeeb
 802625c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802625e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8026262:	4553      	cmp	r3, sl
 8026264:	bfa8      	it	ge
 8026266:	4653      	movge	r3, sl
 8026268:	2b00      	cmp	r3, #0
 802626a:	4699      	mov	r9, r3
 802626c:	dc36      	bgt.n	80262dc <_printf_float+0x360>
 802626e:	f04f 0b00 	mov.w	fp, #0
 8026272:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026276:	f104 021a 	add.w	r2, r4, #26
 802627a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802627c:	9306      	str	r3, [sp, #24]
 802627e:	eba3 0309 	sub.w	r3, r3, r9
 8026282:	455b      	cmp	r3, fp
 8026284:	dc31      	bgt.n	80262ea <_printf_float+0x36e>
 8026286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026288:	459a      	cmp	sl, r3
 802628a:	dc3a      	bgt.n	8026302 <_printf_float+0x386>
 802628c:	6823      	ldr	r3, [r4, #0]
 802628e:	07da      	lsls	r2, r3, #31
 8026290:	d437      	bmi.n	8026302 <_printf_float+0x386>
 8026292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026294:	ebaa 0903 	sub.w	r9, sl, r3
 8026298:	9b06      	ldr	r3, [sp, #24]
 802629a:	ebaa 0303 	sub.w	r3, sl, r3
 802629e:	4599      	cmp	r9, r3
 80262a0:	bfa8      	it	ge
 80262a2:	4699      	movge	r9, r3
 80262a4:	f1b9 0f00 	cmp.w	r9, #0
 80262a8:	dc33      	bgt.n	8026312 <_printf_float+0x396>
 80262aa:	f04f 0800 	mov.w	r8, #0
 80262ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80262b2:	f104 0b1a 	add.w	fp, r4, #26
 80262b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262b8:	ebaa 0303 	sub.w	r3, sl, r3
 80262bc:	eba3 0309 	sub.w	r3, r3, r9
 80262c0:	4543      	cmp	r3, r8
 80262c2:	f77f af79 	ble.w	80261b8 <_printf_float+0x23c>
 80262c6:	2301      	movs	r3, #1
 80262c8:	465a      	mov	r2, fp
 80262ca:	4631      	mov	r1, r6
 80262cc:	4628      	mov	r0, r5
 80262ce:	47b8      	blx	r7
 80262d0:	3001      	adds	r0, #1
 80262d2:	f43f aeae 	beq.w	8026032 <_printf_float+0xb6>
 80262d6:	f108 0801 	add.w	r8, r8, #1
 80262da:	e7ec      	b.n	80262b6 <_printf_float+0x33a>
 80262dc:	4642      	mov	r2, r8
 80262de:	4631      	mov	r1, r6
 80262e0:	4628      	mov	r0, r5
 80262e2:	47b8      	blx	r7
 80262e4:	3001      	adds	r0, #1
 80262e6:	d1c2      	bne.n	802626e <_printf_float+0x2f2>
 80262e8:	e6a3      	b.n	8026032 <_printf_float+0xb6>
 80262ea:	2301      	movs	r3, #1
 80262ec:	4631      	mov	r1, r6
 80262ee:	4628      	mov	r0, r5
 80262f0:	9206      	str	r2, [sp, #24]
 80262f2:	47b8      	blx	r7
 80262f4:	3001      	adds	r0, #1
 80262f6:	f43f ae9c 	beq.w	8026032 <_printf_float+0xb6>
 80262fa:	9a06      	ldr	r2, [sp, #24]
 80262fc:	f10b 0b01 	add.w	fp, fp, #1
 8026300:	e7bb      	b.n	802627a <_printf_float+0x2fe>
 8026302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026306:	4631      	mov	r1, r6
 8026308:	4628      	mov	r0, r5
 802630a:	47b8      	blx	r7
 802630c:	3001      	adds	r0, #1
 802630e:	d1c0      	bne.n	8026292 <_printf_float+0x316>
 8026310:	e68f      	b.n	8026032 <_printf_float+0xb6>
 8026312:	9a06      	ldr	r2, [sp, #24]
 8026314:	464b      	mov	r3, r9
 8026316:	4442      	add	r2, r8
 8026318:	4631      	mov	r1, r6
 802631a:	4628      	mov	r0, r5
 802631c:	47b8      	blx	r7
 802631e:	3001      	adds	r0, #1
 8026320:	d1c3      	bne.n	80262aa <_printf_float+0x32e>
 8026322:	e686      	b.n	8026032 <_printf_float+0xb6>
 8026324:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8026328:	f1ba 0f01 	cmp.w	sl, #1
 802632c:	dc01      	bgt.n	8026332 <_printf_float+0x3b6>
 802632e:	07db      	lsls	r3, r3, #31
 8026330:	d536      	bpl.n	80263a0 <_printf_float+0x424>
 8026332:	2301      	movs	r3, #1
 8026334:	4642      	mov	r2, r8
 8026336:	4631      	mov	r1, r6
 8026338:	4628      	mov	r0, r5
 802633a:	47b8      	blx	r7
 802633c:	3001      	adds	r0, #1
 802633e:	f43f ae78 	beq.w	8026032 <_printf_float+0xb6>
 8026342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026346:	4631      	mov	r1, r6
 8026348:	4628      	mov	r0, r5
 802634a:	47b8      	blx	r7
 802634c:	3001      	adds	r0, #1
 802634e:	f43f ae70 	beq.w	8026032 <_printf_float+0xb6>
 8026352:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8026356:	2200      	movs	r2, #0
 8026358:	2300      	movs	r3, #0
 802635a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802635e:	f7da fb9b 	bl	8000a98 <__aeabi_dcmpeq>
 8026362:	b9c0      	cbnz	r0, 8026396 <_printf_float+0x41a>
 8026364:	4653      	mov	r3, sl
 8026366:	f108 0201 	add.w	r2, r8, #1
 802636a:	4631      	mov	r1, r6
 802636c:	4628      	mov	r0, r5
 802636e:	47b8      	blx	r7
 8026370:	3001      	adds	r0, #1
 8026372:	d10c      	bne.n	802638e <_printf_float+0x412>
 8026374:	e65d      	b.n	8026032 <_printf_float+0xb6>
 8026376:	2301      	movs	r3, #1
 8026378:	465a      	mov	r2, fp
 802637a:	4631      	mov	r1, r6
 802637c:	4628      	mov	r0, r5
 802637e:	47b8      	blx	r7
 8026380:	3001      	adds	r0, #1
 8026382:	f43f ae56 	beq.w	8026032 <_printf_float+0xb6>
 8026386:	f108 0801 	add.w	r8, r8, #1
 802638a:	45d0      	cmp	r8, sl
 802638c:	dbf3      	blt.n	8026376 <_printf_float+0x3fa>
 802638e:	464b      	mov	r3, r9
 8026390:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8026394:	e6df      	b.n	8026156 <_printf_float+0x1da>
 8026396:	f04f 0800 	mov.w	r8, #0
 802639a:	f104 0b1a 	add.w	fp, r4, #26
 802639e:	e7f4      	b.n	802638a <_printf_float+0x40e>
 80263a0:	2301      	movs	r3, #1
 80263a2:	4642      	mov	r2, r8
 80263a4:	e7e1      	b.n	802636a <_printf_float+0x3ee>
 80263a6:	2301      	movs	r3, #1
 80263a8:	464a      	mov	r2, r9
 80263aa:	4631      	mov	r1, r6
 80263ac:	4628      	mov	r0, r5
 80263ae:	47b8      	blx	r7
 80263b0:	3001      	adds	r0, #1
 80263b2:	f43f ae3e 	beq.w	8026032 <_printf_float+0xb6>
 80263b6:	f108 0801 	add.w	r8, r8, #1
 80263ba:	68e3      	ldr	r3, [r4, #12]
 80263bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80263be:	1a5b      	subs	r3, r3, r1
 80263c0:	4543      	cmp	r3, r8
 80263c2:	dcf0      	bgt.n	80263a6 <_printf_float+0x42a>
 80263c4:	e6fc      	b.n	80261c0 <_printf_float+0x244>
 80263c6:	f04f 0800 	mov.w	r8, #0
 80263ca:	f104 0919 	add.w	r9, r4, #25
 80263ce:	e7f4      	b.n	80263ba <_printf_float+0x43e>

080263d0 <_printf_common>:
 80263d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80263d4:	4616      	mov	r6, r2
 80263d6:	4698      	mov	r8, r3
 80263d8:	688a      	ldr	r2, [r1, #8]
 80263da:	690b      	ldr	r3, [r1, #16]
 80263dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80263e0:	4293      	cmp	r3, r2
 80263e2:	bfb8      	it	lt
 80263e4:	4613      	movlt	r3, r2
 80263e6:	6033      	str	r3, [r6, #0]
 80263e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80263ec:	4607      	mov	r7, r0
 80263ee:	460c      	mov	r4, r1
 80263f0:	b10a      	cbz	r2, 80263f6 <_printf_common+0x26>
 80263f2:	3301      	adds	r3, #1
 80263f4:	6033      	str	r3, [r6, #0]
 80263f6:	6823      	ldr	r3, [r4, #0]
 80263f8:	0699      	lsls	r1, r3, #26
 80263fa:	bf42      	ittt	mi
 80263fc:	6833      	ldrmi	r3, [r6, #0]
 80263fe:	3302      	addmi	r3, #2
 8026400:	6033      	strmi	r3, [r6, #0]
 8026402:	6825      	ldr	r5, [r4, #0]
 8026404:	f015 0506 	ands.w	r5, r5, #6
 8026408:	d106      	bne.n	8026418 <_printf_common+0x48>
 802640a:	f104 0a19 	add.w	sl, r4, #25
 802640e:	68e3      	ldr	r3, [r4, #12]
 8026410:	6832      	ldr	r2, [r6, #0]
 8026412:	1a9b      	subs	r3, r3, r2
 8026414:	42ab      	cmp	r3, r5
 8026416:	dc26      	bgt.n	8026466 <_printf_common+0x96>
 8026418:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802641c:	6822      	ldr	r2, [r4, #0]
 802641e:	3b00      	subs	r3, #0
 8026420:	bf18      	it	ne
 8026422:	2301      	movne	r3, #1
 8026424:	0692      	lsls	r2, r2, #26
 8026426:	d42b      	bmi.n	8026480 <_printf_common+0xb0>
 8026428:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802642c:	4641      	mov	r1, r8
 802642e:	4638      	mov	r0, r7
 8026430:	47c8      	blx	r9
 8026432:	3001      	adds	r0, #1
 8026434:	d01e      	beq.n	8026474 <_printf_common+0xa4>
 8026436:	6823      	ldr	r3, [r4, #0]
 8026438:	6922      	ldr	r2, [r4, #16]
 802643a:	f003 0306 	and.w	r3, r3, #6
 802643e:	2b04      	cmp	r3, #4
 8026440:	bf02      	ittt	eq
 8026442:	68e5      	ldreq	r5, [r4, #12]
 8026444:	6833      	ldreq	r3, [r6, #0]
 8026446:	1aed      	subeq	r5, r5, r3
 8026448:	68a3      	ldr	r3, [r4, #8]
 802644a:	bf0c      	ite	eq
 802644c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026450:	2500      	movne	r5, #0
 8026452:	4293      	cmp	r3, r2
 8026454:	bfc4      	itt	gt
 8026456:	1a9b      	subgt	r3, r3, r2
 8026458:	18ed      	addgt	r5, r5, r3
 802645a:	2600      	movs	r6, #0
 802645c:	341a      	adds	r4, #26
 802645e:	42b5      	cmp	r5, r6
 8026460:	d11a      	bne.n	8026498 <_printf_common+0xc8>
 8026462:	2000      	movs	r0, #0
 8026464:	e008      	b.n	8026478 <_printf_common+0xa8>
 8026466:	2301      	movs	r3, #1
 8026468:	4652      	mov	r2, sl
 802646a:	4641      	mov	r1, r8
 802646c:	4638      	mov	r0, r7
 802646e:	47c8      	blx	r9
 8026470:	3001      	adds	r0, #1
 8026472:	d103      	bne.n	802647c <_printf_common+0xac>
 8026474:	f04f 30ff 	mov.w	r0, #4294967295
 8026478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802647c:	3501      	adds	r5, #1
 802647e:	e7c6      	b.n	802640e <_printf_common+0x3e>
 8026480:	18e1      	adds	r1, r4, r3
 8026482:	1c5a      	adds	r2, r3, #1
 8026484:	2030      	movs	r0, #48	@ 0x30
 8026486:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802648a:	4422      	add	r2, r4
 802648c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8026490:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8026494:	3302      	adds	r3, #2
 8026496:	e7c7      	b.n	8026428 <_printf_common+0x58>
 8026498:	2301      	movs	r3, #1
 802649a:	4622      	mov	r2, r4
 802649c:	4641      	mov	r1, r8
 802649e:	4638      	mov	r0, r7
 80264a0:	47c8      	blx	r9
 80264a2:	3001      	adds	r0, #1
 80264a4:	d0e6      	beq.n	8026474 <_printf_common+0xa4>
 80264a6:	3601      	adds	r6, #1
 80264a8:	e7d9      	b.n	802645e <_printf_common+0x8e>
	...

080264ac <_printf_i>:
 80264ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80264b0:	7e0f      	ldrb	r7, [r1, #24]
 80264b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80264b4:	2f78      	cmp	r7, #120	@ 0x78
 80264b6:	4691      	mov	r9, r2
 80264b8:	4680      	mov	r8, r0
 80264ba:	460c      	mov	r4, r1
 80264bc:	469a      	mov	sl, r3
 80264be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80264c2:	d807      	bhi.n	80264d4 <_printf_i+0x28>
 80264c4:	2f62      	cmp	r7, #98	@ 0x62
 80264c6:	d80a      	bhi.n	80264de <_printf_i+0x32>
 80264c8:	2f00      	cmp	r7, #0
 80264ca:	f000 80d2 	beq.w	8026672 <_printf_i+0x1c6>
 80264ce:	2f58      	cmp	r7, #88	@ 0x58
 80264d0:	f000 80b9 	beq.w	8026646 <_printf_i+0x19a>
 80264d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80264d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80264dc:	e03a      	b.n	8026554 <_printf_i+0xa8>
 80264de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80264e2:	2b15      	cmp	r3, #21
 80264e4:	d8f6      	bhi.n	80264d4 <_printf_i+0x28>
 80264e6:	a101      	add	r1, pc, #4	@ (adr r1, 80264ec <_printf_i+0x40>)
 80264e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80264ec:	08026545 	.word	0x08026545
 80264f0:	08026559 	.word	0x08026559
 80264f4:	080264d5 	.word	0x080264d5
 80264f8:	080264d5 	.word	0x080264d5
 80264fc:	080264d5 	.word	0x080264d5
 8026500:	080264d5 	.word	0x080264d5
 8026504:	08026559 	.word	0x08026559
 8026508:	080264d5 	.word	0x080264d5
 802650c:	080264d5 	.word	0x080264d5
 8026510:	080264d5 	.word	0x080264d5
 8026514:	080264d5 	.word	0x080264d5
 8026518:	08026659 	.word	0x08026659
 802651c:	08026583 	.word	0x08026583
 8026520:	08026613 	.word	0x08026613
 8026524:	080264d5 	.word	0x080264d5
 8026528:	080264d5 	.word	0x080264d5
 802652c:	0802667b 	.word	0x0802667b
 8026530:	080264d5 	.word	0x080264d5
 8026534:	08026583 	.word	0x08026583
 8026538:	080264d5 	.word	0x080264d5
 802653c:	080264d5 	.word	0x080264d5
 8026540:	0802661b 	.word	0x0802661b
 8026544:	6833      	ldr	r3, [r6, #0]
 8026546:	1d1a      	adds	r2, r3, #4
 8026548:	681b      	ldr	r3, [r3, #0]
 802654a:	6032      	str	r2, [r6, #0]
 802654c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026550:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8026554:	2301      	movs	r3, #1
 8026556:	e09d      	b.n	8026694 <_printf_i+0x1e8>
 8026558:	6833      	ldr	r3, [r6, #0]
 802655a:	6820      	ldr	r0, [r4, #0]
 802655c:	1d19      	adds	r1, r3, #4
 802655e:	6031      	str	r1, [r6, #0]
 8026560:	0606      	lsls	r6, r0, #24
 8026562:	d501      	bpl.n	8026568 <_printf_i+0xbc>
 8026564:	681d      	ldr	r5, [r3, #0]
 8026566:	e003      	b.n	8026570 <_printf_i+0xc4>
 8026568:	0645      	lsls	r5, r0, #25
 802656a:	d5fb      	bpl.n	8026564 <_printf_i+0xb8>
 802656c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8026570:	2d00      	cmp	r5, #0
 8026572:	da03      	bge.n	802657c <_printf_i+0xd0>
 8026574:	232d      	movs	r3, #45	@ 0x2d
 8026576:	426d      	negs	r5, r5
 8026578:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802657c:	4859      	ldr	r0, [pc, #356]	@ (80266e4 <_printf_i+0x238>)
 802657e:	230a      	movs	r3, #10
 8026580:	e011      	b.n	80265a6 <_printf_i+0xfa>
 8026582:	6821      	ldr	r1, [r4, #0]
 8026584:	6833      	ldr	r3, [r6, #0]
 8026586:	0608      	lsls	r0, r1, #24
 8026588:	f853 5b04 	ldr.w	r5, [r3], #4
 802658c:	d402      	bmi.n	8026594 <_printf_i+0xe8>
 802658e:	0649      	lsls	r1, r1, #25
 8026590:	bf48      	it	mi
 8026592:	b2ad      	uxthmi	r5, r5
 8026594:	2f6f      	cmp	r7, #111	@ 0x6f
 8026596:	4853      	ldr	r0, [pc, #332]	@ (80266e4 <_printf_i+0x238>)
 8026598:	6033      	str	r3, [r6, #0]
 802659a:	bf14      	ite	ne
 802659c:	230a      	movne	r3, #10
 802659e:	2308      	moveq	r3, #8
 80265a0:	2100      	movs	r1, #0
 80265a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80265a6:	6866      	ldr	r6, [r4, #4]
 80265a8:	60a6      	str	r6, [r4, #8]
 80265aa:	2e00      	cmp	r6, #0
 80265ac:	bfa2      	ittt	ge
 80265ae:	6821      	ldrge	r1, [r4, #0]
 80265b0:	f021 0104 	bicge.w	r1, r1, #4
 80265b4:	6021      	strge	r1, [r4, #0]
 80265b6:	b90d      	cbnz	r5, 80265bc <_printf_i+0x110>
 80265b8:	2e00      	cmp	r6, #0
 80265ba:	d04b      	beq.n	8026654 <_printf_i+0x1a8>
 80265bc:	4616      	mov	r6, r2
 80265be:	fbb5 f1f3 	udiv	r1, r5, r3
 80265c2:	fb03 5711 	mls	r7, r3, r1, r5
 80265c6:	5dc7      	ldrb	r7, [r0, r7]
 80265c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80265cc:	462f      	mov	r7, r5
 80265ce:	42bb      	cmp	r3, r7
 80265d0:	460d      	mov	r5, r1
 80265d2:	d9f4      	bls.n	80265be <_printf_i+0x112>
 80265d4:	2b08      	cmp	r3, #8
 80265d6:	d10b      	bne.n	80265f0 <_printf_i+0x144>
 80265d8:	6823      	ldr	r3, [r4, #0]
 80265da:	07df      	lsls	r7, r3, #31
 80265dc:	d508      	bpl.n	80265f0 <_printf_i+0x144>
 80265de:	6923      	ldr	r3, [r4, #16]
 80265e0:	6861      	ldr	r1, [r4, #4]
 80265e2:	4299      	cmp	r1, r3
 80265e4:	bfde      	ittt	le
 80265e6:	2330      	movle	r3, #48	@ 0x30
 80265e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80265ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80265f0:	1b92      	subs	r2, r2, r6
 80265f2:	6122      	str	r2, [r4, #16]
 80265f4:	f8cd a000 	str.w	sl, [sp]
 80265f8:	464b      	mov	r3, r9
 80265fa:	aa03      	add	r2, sp, #12
 80265fc:	4621      	mov	r1, r4
 80265fe:	4640      	mov	r0, r8
 8026600:	f7ff fee6 	bl	80263d0 <_printf_common>
 8026604:	3001      	adds	r0, #1
 8026606:	d14a      	bne.n	802669e <_printf_i+0x1f2>
 8026608:	f04f 30ff 	mov.w	r0, #4294967295
 802660c:	b004      	add	sp, #16
 802660e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026612:	6823      	ldr	r3, [r4, #0]
 8026614:	f043 0320 	orr.w	r3, r3, #32
 8026618:	6023      	str	r3, [r4, #0]
 802661a:	4833      	ldr	r0, [pc, #204]	@ (80266e8 <_printf_i+0x23c>)
 802661c:	2778      	movs	r7, #120	@ 0x78
 802661e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8026622:	6823      	ldr	r3, [r4, #0]
 8026624:	6831      	ldr	r1, [r6, #0]
 8026626:	061f      	lsls	r7, r3, #24
 8026628:	f851 5b04 	ldr.w	r5, [r1], #4
 802662c:	d402      	bmi.n	8026634 <_printf_i+0x188>
 802662e:	065f      	lsls	r7, r3, #25
 8026630:	bf48      	it	mi
 8026632:	b2ad      	uxthmi	r5, r5
 8026634:	6031      	str	r1, [r6, #0]
 8026636:	07d9      	lsls	r1, r3, #31
 8026638:	bf44      	itt	mi
 802663a:	f043 0320 	orrmi.w	r3, r3, #32
 802663e:	6023      	strmi	r3, [r4, #0]
 8026640:	b11d      	cbz	r5, 802664a <_printf_i+0x19e>
 8026642:	2310      	movs	r3, #16
 8026644:	e7ac      	b.n	80265a0 <_printf_i+0xf4>
 8026646:	4827      	ldr	r0, [pc, #156]	@ (80266e4 <_printf_i+0x238>)
 8026648:	e7e9      	b.n	802661e <_printf_i+0x172>
 802664a:	6823      	ldr	r3, [r4, #0]
 802664c:	f023 0320 	bic.w	r3, r3, #32
 8026650:	6023      	str	r3, [r4, #0]
 8026652:	e7f6      	b.n	8026642 <_printf_i+0x196>
 8026654:	4616      	mov	r6, r2
 8026656:	e7bd      	b.n	80265d4 <_printf_i+0x128>
 8026658:	6833      	ldr	r3, [r6, #0]
 802665a:	6825      	ldr	r5, [r4, #0]
 802665c:	6961      	ldr	r1, [r4, #20]
 802665e:	1d18      	adds	r0, r3, #4
 8026660:	6030      	str	r0, [r6, #0]
 8026662:	062e      	lsls	r6, r5, #24
 8026664:	681b      	ldr	r3, [r3, #0]
 8026666:	d501      	bpl.n	802666c <_printf_i+0x1c0>
 8026668:	6019      	str	r1, [r3, #0]
 802666a:	e002      	b.n	8026672 <_printf_i+0x1c6>
 802666c:	0668      	lsls	r0, r5, #25
 802666e:	d5fb      	bpl.n	8026668 <_printf_i+0x1bc>
 8026670:	8019      	strh	r1, [r3, #0]
 8026672:	2300      	movs	r3, #0
 8026674:	6123      	str	r3, [r4, #16]
 8026676:	4616      	mov	r6, r2
 8026678:	e7bc      	b.n	80265f4 <_printf_i+0x148>
 802667a:	6833      	ldr	r3, [r6, #0]
 802667c:	1d1a      	adds	r2, r3, #4
 802667e:	6032      	str	r2, [r6, #0]
 8026680:	681e      	ldr	r6, [r3, #0]
 8026682:	6862      	ldr	r2, [r4, #4]
 8026684:	2100      	movs	r1, #0
 8026686:	4630      	mov	r0, r6
 8026688:	f7d9 fd8a 	bl	80001a0 <memchr>
 802668c:	b108      	cbz	r0, 8026692 <_printf_i+0x1e6>
 802668e:	1b80      	subs	r0, r0, r6
 8026690:	6060      	str	r0, [r4, #4]
 8026692:	6863      	ldr	r3, [r4, #4]
 8026694:	6123      	str	r3, [r4, #16]
 8026696:	2300      	movs	r3, #0
 8026698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802669c:	e7aa      	b.n	80265f4 <_printf_i+0x148>
 802669e:	6923      	ldr	r3, [r4, #16]
 80266a0:	4632      	mov	r2, r6
 80266a2:	4649      	mov	r1, r9
 80266a4:	4640      	mov	r0, r8
 80266a6:	47d0      	blx	sl
 80266a8:	3001      	adds	r0, #1
 80266aa:	d0ad      	beq.n	8026608 <_printf_i+0x15c>
 80266ac:	6823      	ldr	r3, [r4, #0]
 80266ae:	079b      	lsls	r3, r3, #30
 80266b0:	d413      	bmi.n	80266da <_printf_i+0x22e>
 80266b2:	68e0      	ldr	r0, [r4, #12]
 80266b4:	9b03      	ldr	r3, [sp, #12]
 80266b6:	4298      	cmp	r0, r3
 80266b8:	bfb8      	it	lt
 80266ba:	4618      	movlt	r0, r3
 80266bc:	e7a6      	b.n	802660c <_printf_i+0x160>
 80266be:	2301      	movs	r3, #1
 80266c0:	4632      	mov	r2, r6
 80266c2:	4649      	mov	r1, r9
 80266c4:	4640      	mov	r0, r8
 80266c6:	47d0      	blx	sl
 80266c8:	3001      	adds	r0, #1
 80266ca:	d09d      	beq.n	8026608 <_printf_i+0x15c>
 80266cc:	3501      	adds	r5, #1
 80266ce:	68e3      	ldr	r3, [r4, #12]
 80266d0:	9903      	ldr	r1, [sp, #12]
 80266d2:	1a5b      	subs	r3, r3, r1
 80266d4:	42ab      	cmp	r3, r5
 80266d6:	dcf2      	bgt.n	80266be <_printf_i+0x212>
 80266d8:	e7eb      	b.n	80266b2 <_printf_i+0x206>
 80266da:	2500      	movs	r5, #0
 80266dc:	f104 0619 	add.w	r6, r4, #25
 80266e0:	e7f5      	b.n	80266ce <_printf_i+0x222>
 80266e2:	bf00      	nop
 80266e4:	0802f00e 	.word	0x0802f00e
 80266e8:	0802f01f 	.word	0x0802f01f

080266ec <std>:
 80266ec:	2300      	movs	r3, #0
 80266ee:	b510      	push	{r4, lr}
 80266f0:	4604      	mov	r4, r0
 80266f2:	e9c0 3300 	strd	r3, r3, [r0]
 80266f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80266fa:	6083      	str	r3, [r0, #8]
 80266fc:	8181      	strh	r1, [r0, #12]
 80266fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8026700:	81c2      	strh	r2, [r0, #14]
 8026702:	6183      	str	r3, [r0, #24]
 8026704:	4619      	mov	r1, r3
 8026706:	2208      	movs	r2, #8
 8026708:	305c      	adds	r0, #92	@ 0x5c
 802670a:	f000 fa61 	bl	8026bd0 <memset>
 802670e:	4b0d      	ldr	r3, [pc, #52]	@ (8026744 <std+0x58>)
 8026710:	6263      	str	r3, [r4, #36]	@ 0x24
 8026712:	4b0d      	ldr	r3, [pc, #52]	@ (8026748 <std+0x5c>)
 8026714:	62a3      	str	r3, [r4, #40]	@ 0x28
 8026716:	4b0d      	ldr	r3, [pc, #52]	@ (802674c <std+0x60>)
 8026718:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802671a:	4b0d      	ldr	r3, [pc, #52]	@ (8026750 <std+0x64>)
 802671c:	6323      	str	r3, [r4, #48]	@ 0x30
 802671e:	4b0d      	ldr	r3, [pc, #52]	@ (8026754 <std+0x68>)
 8026720:	6224      	str	r4, [r4, #32]
 8026722:	429c      	cmp	r4, r3
 8026724:	d006      	beq.n	8026734 <std+0x48>
 8026726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802672a:	4294      	cmp	r4, r2
 802672c:	d002      	beq.n	8026734 <std+0x48>
 802672e:	33d0      	adds	r3, #208	@ 0xd0
 8026730:	429c      	cmp	r4, r3
 8026732:	d105      	bne.n	8026740 <std+0x54>
 8026734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8026738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802673c:	f000 baf6 	b.w	8026d2c <__retarget_lock_init_recursive>
 8026740:	bd10      	pop	{r4, pc}
 8026742:	bf00      	nop
 8026744:	080269c9 	.word	0x080269c9
 8026748:	080269ef 	.word	0x080269ef
 802674c:	08026a27 	.word	0x08026a27
 8026750:	08026a4b 	.word	0x08026a4b
 8026754:	200080c0 	.word	0x200080c0

08026758 <stdio_exit_handler>:
 8026758:	4a02      	ldr	r2, [pc, #8]	@ (8026764 <stdio_exit_handler+0xc>)
 802675a:	4903      	ldr	r1, [pc, #12]	@ (8026768 <stdio_exit_handler+0x10>)
 802675c:	4803      	ldr	r0, [pc, #12]	@ (802676c <stdio_exit_handler+0x14>)
 802675e:	f000 b87b 	b.w	8026858 <_fwalk_sglue>
 8026762:	bf00      	nop
 8026764:	200000e0 	.word	0x200000e0
 8026768:	08028b51 	.word	0x08028b51
 802676c:	200000f0 	.word	0x200000f0

08026770 <cleanup_stdio>:
 8026770:	6841      	ldr	r1, [r0, #4]
 8026772:	4b0c      	ldr	r3, [pc, #48]	@ (80267a4 <cleanup_stdio+0x34>)
 8026774:	4299      	cmp	r1, r3
 8026776:	b510      	push	{r4, lr}
 8026778:	4604      	mov	r4, r0
 802677a:	d001      	beq.n	8026780 <cleanup_stdio+0x10>
 802677c:	f002 f9e8 	bl	8028b50 <_fflush_r>
 8026780:	68a1      	ldr	r1, [r4, #8]
 8026782:	4b09      	ldr	r3, [pc, #36]	@ (80267a8 <cleanup_stdio+0x38>)
 8026784:	4299      	cmp	r1, r3
 8026786:	d002      	beq.n	802678e <cleanup_stdio+0x1e>
 8026788:	4620      	mov	r0, r4
 802678a:	f002 f9e1 	bl	8028b50 <_fflush_r>
 802678e:	68e1      	ldr	r1, [r4, #12]
 8026790:	4b06      	ldr	r3, [pc, #24]	@ (80267ac <cleanup_stdio+0x3c>)
 8026792:	4299      	cmp	r1, r3
 8026794:	d004      	beq.n	80267a0 <cleanup_stdio+0x30>
 8026796:	4620      	mov	r0, r4
 8026798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802679c:	f002 b9d8 	b.w	8028b50 <_fflush_r>
 80267a0:	bd10      	pop	{r4, pc}
 80267a2:	bf00      	nop
 80267a4:	200080c0 	.word	0x200080c0
 80267a8:	20008128 	.word	0x20008128
 80267ac:	20008190 	.word	0x20008190

080267b0 <global_stdio_init.part.0>:
 80267b0:	b510      	push	{r4, lr}
 80267b2:	4b0b      	ldr	r3, [pc, #44]	@ (80267e0 <global_stdio_init.part.0+0x30>)
 80267b4:	4c0b      	ldr	r4, [pc, #44]	@ (80267e4 <global_stdio_init.part.0+0x34>)
 80267b6:	4a0c      	ldr	r2, [pc, #48]	@ (80267e8 <global_stdio_init.part.0+0x38>)
 80267b8:	601a      	str	r2, [r3, #0]
 80267ba:	4620      	mov	r0, r4
 80267bc:	2200      	movs	r2, #0
 80267be:	2104      	movs	r1, #4
 80267c0:	f7ff ff94 	bl	80266ec <std>
 80267c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80267c8:	2201      	movs	r2, #1
 80267ca:	2109      	movs	r1, #9
 80267cc:	f7ff ff8e 	bl	80266ec <std>
 80267d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80267d4:	2202      	movs	r2, #2
 80267d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80267da:	2112      	movs	r1, #18
 80267dc:	f7ff bf86 	b.w	80266ec <std>
 80267e0:	200081f8 	.word	0x200081f8
 80267e4:	200080c0 	.word	0x200080c0
 80267e8:	08026759 	.word	0x08026759

080267ec <__sfp_lock_acquire>:
 80267ec:	4801      	ldr	r0, [pc, #4]	@ (80267f4 <__sfp_lock_acquire+0x8>)
 80267ee:	f000 ba9e 	b.w	8026d2e <__retarget_lock_acquire_recursive>
 80267f2:	bf00      	nop
 80267f4:	20008201 	.word	0x20008201

080267f8 <__sfp_lock_release>:
 80267f8:	4801      	ldr	r0, [pc, #4]	@ (8026800 <__sfp_lock_release+0x8>)
 80267fa:	f000 ba99 	b.w	8026d30 <__retarget_lock_release_recursive>
 80267fe:	bf00      	nop
 8026800:	20008201 	.word	0x20008201

08026804 <__sinit>:
 8026804:	b510      	push	{r4, lr}
 8026806:	4604      	mov	r4, r0
 8026808:	f7ff fff0 	bl	80267ec <__sfp_lock_acquire>
 802680c:	6a23      	ldr	r3, [r4, #32]
 802680e:	b11b      	cbz	r3, 8026818 <__sinit+0x14>
 8026810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026814:	f7ff bff0 	b.w	80267f8 <__sfp_lock_release>
 8026818:	4b04      	ldr	r3, [pc, #16]	@ (802682c <__sinit+0x28>)
 802681a:	6223      	str	r3, [r4, #32]
 802681c:	4b04      	ldr	r3, [pc, #16]	@ (8026830 <__sinit+0x2c>)
 802681e:	681b      	ldr	r3, [r3, #0]
 8026820:	2b00      	cmp	r3, #0
 8026822:	d1f5      	bne.n	8026810 <__sinit+0xc>
 8026824:	f7ff ffc4 	bl	80267b0 <global_stdio_init.part.0>
 8026828:	e7f2      	b.n	8026810 <__sinit+0xc>
 802682a:	bf00      	nop
 802682c:	08026771 	.word	0x08026771
 8026830:	200081f8 	.word	0x200081f8

08026834 <fiprintf>:
 8026834:	b40e      	push	{r1, r2, r3}
 8026836:	b503      	push	{r0, r1, lr}
 8026838:	4601      	mov	r1, r0
 802683a:	ab03      	add	r3, sp, #12
 802683c:	4805      	ldr	r0, [pc, #20]	@ (8026854 <fiprintf+0x20>)
 802683e:	f853 2b04 	ldr.w	r2, [r3], #4
 8026842:	6800      	ldr	r0, [r0, #0]
 8026844:	9301      	str	r3, [sp, #4]
 8026846:	f001 fe99 	bl	802857c <_vfiprintf_r>
 802684a:	b002      	add	sp, #8
 802684c:	f85d eb04 	ldr.w	lr, [sp], #4
 8026850:	b003      	add	sp, #12
 8026852:	4770      	bx	lr
 8026854:	200000ec 	.word	0x200000ec

08026858 <_fwalk_sglue>:
 8026858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802685c:	4607      	mov	r7, r0
 802685e:	4688      	mov	r8, r1
 8026860:	4614      	mov	r4, r2
 8026862:	2600      	movs	r6, #0
 8026864:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026868:	f1b9 0901 	subs.w	r9, r9, #1
 802686c:	d505      	bpl.n	802687a <_fwalk_sglue+0x22>
 802686e:	6824      	ldr	r4, [r4, #0]
 8026870:	2c00      	cmp	r4, #0
 8026872:	d1f7      	bne.n	8026864 <_fwalk_sglue+0xc>
 8026874:	4630      	mov	r0, r6
 8026876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802687a:	89ab      	ldrh	r3, [r5, #12]
 802687c:	2b01      	cmp	r3, #1
 802687e:	d907      	bls.n	8026890 <_fwalk_sglue+0x38>
 8026880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026884:	3301      	adds	r3, #1
 8026886:	d003      	beq.n	8026890 <_fwalk_sglue+0x38>
 8026888:	4629      	mov	r1, r5
 802688a:	4638      	mov	r0, r7
 802688c:	47c0      	blx	r8
 802688e:	4306      	orrs	r6, r0
 8026890:	3568      	adds	r5, #104	@ 0x68
 8026892:	e7e9      	b.n	8026868 <_fwalk_sglue+0x10>

08026894 <iprintf>:
 8026894:	b40f      	push	{r0, r1, r2, r3}
 8026896:	b507      	push	{r0, r1, r2, lr}
 8026898:	4906      	ldr	r1, [pc, #24]	@ (80268b4 <iprintf+0x20>)
 802689a:	ab04      	add	r3, sp, #16
 802689c:	6808      	ldr	r0, [r1, #0]
 802689e:	f853 2b04 	ldr.w	r2, [r3], #4
 80268a2:	6881      	ldr	r1, [r0, #8]
 80268a4:	9301      	str	r3, [sp, #4]
 80268a6:	f001 fe69 	bl	802857c <_vfiprintf_r>
 80268aa:	b003      	add	sp, #12
 80268ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80268b0:	b004      	add	sp, #16
 80268b2:	4770      	bx	lr
 80268b4:	200000ec 	.word	0x200000ec

080268b8 <_puts_r>:
 80268b8:	6a03      	ldr	r3, [r0, #32]
 80268ba:	b570      	push	{r4, r5, r6, lr}
 80268bc:	6884      	ldr	r4, [r0, #8]
 80268be:	4605      	mov	r5, r0
 80268c0:	460e      	mov	r6, r1
 80268c2:	b90b      	cbnz	r3, 80268c8 <_puts_r+0x10>
 80268c4:	f7ff ff9e 	bl	8026804 <__sinit>
 80268c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80268ca:	07db      	lsls	r3, r3, #31
 80268cc:	d405      	bmi.n	80268da <_puts_r+0x22>
 80268ce:	89a3      	ldrh	r3, [r4, #12]
 80268d0:	0598      	lsls	r0, r3, #22
 80268d2:	d402      	bmi.n	80268da <_puts_r+0x22>
 80268d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80268d6:	f000 fa2a 	bl	8026d2e <__retarget_lock_acquire_recursive>
 80268da:	89a3      	ldrh	r3, [r4, #12]
 80268dc:	0719      	lsls	r1, r3, #28
 80268de:	d502      	bpl.n	80268e6 <_puts_r+0x2e>
 80268e0:	6923      	ldr	r3, [r4, #16]
 80268e2:	2b00      	cmp	r3, #0
 80268e4:	d135      	bne.n	8026952 <_puts_r+0x9a>
 80268e6:	4621      	mov	r1, r4
 80268e8:	4628      	mov	r0, r5
 80268ea:	f000 f8f1 	bl	8026ad0 <__swsetup_r>
 80268ee:	b380      	cbz	r0, 8026952 <_puts_r+0x9a>
 80268f0:	f04f 35ff 	mov.w	r5, #4294967295
 80268f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80268f6:	07da      	lsls	r2, r3, #31
 80268f8:	d405      	bmi.n	8026906 <_puts_r+0x4e>
 80268fa:	89a3      	ldrh	r3, [r4, #12]
 80268fc:	059b      	lsls	r3, r3, #22
 80268fe:	d402      	bmi.n	8026906 <_puts_r+0x4e>
 8026900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026902:	f000 fa15 	bl	8026d30 <__retarget_lock_release_recursive>
 8026906:	4628      	mov	r0, r5
 8026908:	bd70      	pop	{r4, r5, r6, pc}
 802690a:	2b00      	cmp	r3, #0
 802690c:	da04      	bge.n	8026918 <_puts_r+0x60>
 802690e:	69a2      	ldr	r2, [r4, #24]
 8026910:	429a      	cmp	r2, r3
 8026912:	dc17      	bgt.n	8026944 <_puts_r+0x8c>
 8026914:	290a      	cmp	r1, #10
 8026916:	d015      	beq.n	8026944 <_puts_r+0x8c>
 8026918:	6823      	ldr	r3, [r4, #0]
 802691a:	1c5a      	adds	r2, r3, #1
 802691c:	6022      	str	r2, [r4, #0]
 802691e:	7019      	strb	r1, [r3, #0]
 8026920:	68a3      	ldr	r3, [r4, #8]
 8026922:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8026926:	3b01      	subs	r3, #1
 8026928:	60a3      	str	r3, [r4, #8]
 802692a:	2900      	cmp	r1, #0
 802692c:	d1ed      	bne.n	802690a <_puts_r+0x52>
 802692e:	2b00      	cmp	r3, #0
 8026930:	da11      	bge.n	8026956 <_puts_r+0x9e>
 8026932:	4622      	mov	r2, r4
 8026934:	210a      	movs	r1, #10
 8026936:	4628      	mov	r0, r5
 8026938:	f000 f88b 	bl	8026a52 <__swbuf_r>
 802693c:	3001      	adds	r0, #1
 802693e:	d0d7      	beq.n	80268f0 <_puts_r+0x38>
 8026940:	250a      	movs	r5, #10
 8026942:	e7d7      	b.n	80268f4 <_puts_r+0x3c>
 8026944:	4622      	mov	r2, r4
 8026946:	4628      	mov	r0, r5
 8026948:	f000 f883 	bl	8026a52 <__swbuf_r>
 802694c:	3001      	adds	r0, #1
 802694e:	d1e7      	bne.n	8026920 <_puts_r+0x68>
 8026950:	e7ce      	b.n	80268f0 <_puts_r+0x38>
 8026952:	3e01      	subs	r6, #1
 8026954:	e7e4      	b.n	8026920 <_puts_r+0x68>
 8026956:	6823      	ldr	r3, [r4, #0]
 8026958:	1c5a      	adds	r2, r3, #1
 802695a:	6022      	str	r2, [r4, #0]
 802695c:	220a      	movs	r2, #10
 802695e:	701a      	strb	r2, [r3, #0]
 8026960:	e7ee      	b.n	8026940 <_puts_r+0x88>
	...

08026964 <puts>:
 8026964:	4b02      	ldr	r3, [pc, #8]	@ (8026970 <puts+0xc>)
 8026966:	4601      	mov	r1, r0
 8026968:	6818      	ldr	r0, [r3, #0]
 802696a:	f7ff bfa5 	b.w	80268b8 <_puts_r>
 802696e:	bf00      	nop
 8026970:	200000ec 	.word	0x200000ec

08026974 <siscanf>:
 8026974:	b40e      	push	{r1, r2, r3}
 8026976:	b530      	push	{r4, r5, lr}
 8026978:	b09c      	sub	sp, #112	@ 0x70
 802697a:	ac1f      	add	r4, sp, #124	@ 0x7c
 802697c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8026980:	f854 5b04 	ldr.w	r5, [r4], #4
 8026984:	f8ad 2014 	strh.w	r2, [sp, #20]
 8026988:	9002      	str	r0, [sp, #8]
 802698a:	9006      	str	r0, [sp, #24]
 802698c:	f7d9 fc58 	bl	8000240 <strlen>
 8026990:	4b0b      	ldr	r3, [pc, #44]	@ (80269c0 <siscanf+0x4c>)
 8026992:	9003      	str	r0, [sp, #12]
 8026994:	9007      	str	r0, [sp, #28]
 8026996:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026998:	480a      	ldr	r0, [pc, #40]	@ (80269c4 <siscanf+0x50>)
 802699a:	9401      	str	r4, [sp, #4]
 802699c:	2300      	movs	r3, #0
 802699e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80269a0:	9314      	str	r3, [sp, #80]	@ 0x50
 80269a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80269a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80269aa:	462a      	mov	r2, r5
 80269ac:	4623      	mov	r3, r4
 80269ae:	a902      	add	r1, sp, #8
 80269b0:	6800      	ldr	r0, [r0, #0]
 80269b2:	f001 fc45 	bl	8028240 <__ssvfiscanf_r>
 80269b6:	b01c      	add	sp, #112	@ 0x70
 80269b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80269bc:	b003      	add	sp, #12
 80269be:	4770      	bx	lr
 80269c0:	080269eb 	.word	0x080269eb
 80269c4:	200000ec 	.word	0x200000ec

080269c8 <__sread>:
 80269c8:	b510      	push	{r4, lr}
 80269ca:	460c      	mov	r4, r1
 80269cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80269d0:	f000 f94e 	bl	8026c70 <_read_r>
 80269d4:	2800      	cmp	r0, #0
 80269d6:	bfab      	itete	ge
 80269d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80269da:	89a3      	ldrhlt	r3, [r4, #12]
 80269dc:	181b      	addge	r3, r3, r0
 80269de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80269e2:	bfac      	ite	ge
 80269e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80269e6:	81a3      	strhlt	r3, [r4, #12]
 80269e8:	bd10      	pop	{r4, pc}

080269ea <__seofread>:
 80269ea:	2000      	movs	r0, #0
 80269ec:	4770      	bx	lr

080269ee <__swrite>:
 80269ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80269f2:	461f      	mov	r7, r3
 80269f4:	898b      	ldrh	r3, [r1, #12]
 80269f6:	05db      	lsls	r3, r3, #23
 80269f8:	4605      	mov	r5, r0
 80269fa:	460c      	mov	r4, r1
 80269fc:	4616      	mov	r6, r2
 80269fe:	d505      	bpl.n	8026a0c <__swrite+0x1e>
 8026a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026a04:	2302      	movs	r3, #2
 8026a06:	2200      	movs	r2, #0
 8026a08:	f000 f920 	bl	8026c4c <_lseek_r>
 8026a0c:	89a3      	ldrh	r3, [r4, #12]
 8026a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8026a16:	81a3      	strh	r3, [r4, #12]
 8026a18:	4632      	mov	r2, r6
 8026a1a:	463b      	mov	r3, r7
 8026a1c:	4628      	mov	r0, r5
 8026a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026a22:	f000 b947 	b.w	8026cb4 <_write_r>

08026a26 <__sseek>:
 8026a26:	b510      	push	{r4, lr}
 8026a28:	460c      	mov	r4, r1
 8026a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026a2e:	f000 f90d 	bl	8026c4c <_lseek_r>
 8026a32:	1c43      	adds	r3, r0, #1
 8026a34:	89a3      	ldrh	r3, [r4, #12]
 8026a36:	bf15      	itete	ne
 8026a38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8026a3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8026a3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8026a42:	81a3      	strheq	r3, [r4, #12]
 8026a44:	bf18      	it	ne
 8026a46:	81a3      	strhne	r3, [r4, #12]
 8026a48:	bd10      	pop	{r4, pc}

08026a4a <__sclose>:
 8026a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026a4e:	f000 b8ed 	b.w	8026c2c <_close_r>

08026a52 <__swbuf_r>:
 8026a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026a54:	460e      	mov	r6, r1
 8026a56:	4614      	mov	r4, r2
 8026a58:	4605      	mov	r5, r0
 8026a5a:	b118      	cbz	r0, 8026a64 <__swbuf_r+0x12>
 8026a5c:	6a03      	ldr	r3, [r0, #32]
 8026a5e:	b90b      	cbnz	r3, 8026a64 <__swbuf_r+0x12>
 8026a60:	f7ff fed0 	bl	8026804 <__sinit>
 8026a64:	69a3      	ldr	r3, [r4, #24]
 8026a66:	60a3      	str	r3, [r4, #8]
 8026a68:	89a3      	ldrh	r3, [r4, #12]
 8026a6a:	071a      	lsls	r2, r3, #28
 8026a6c:	d501      	bpl.n	8026a72 <__swbuf_r+0x20>
 8026a6e:	6923      	ldr	r3, [r4, #16]
 8026a70:	b943      	cbnz	r3, 8026a84 <__swbuf_r+0x32>
 8026a72:	4621      	mov	r1, r4
 8026a74:	4628      	mov	r0, r5
 8026a76:	f000 f82b 	bl	8026ad0 <__swsetup_r>
 8026a7a:	b118      	cbz	r0, 8026a84 <__swbuf_r+0x32>
 8026a7c:	f04f 37ff 	mov.w	r7, #4294967295
 8026a80:	4638      	mov	r0, r7
 8026a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026a84:	6823      	ldr	r3, [r4, #0]
 8026a86:	6922      	ldr	r2, [r4, #16]
 8026a88:	1a98      	subs	r0, r3, r2
 8026a8a:	6963      	ldr	r3, [r4, #20]
 8026a8c:	b2f6      	uxtb	r6, r6
 8026a8e:	4283      	cmp	r3, r0
 8026a90:	4637      	mov	r7, r6
 8026a92:	dc05      	bgt.n	8026aa0 <__swbuf_r+0x4e>
 8026a94:	4621      	mov	r1, r4
 8026a96:	4628      	mov	r0, r5
 8026a98:	f002 f85a 	bl	8028b50 <_fflush_r>
 8026a9c:	2800      	cmp	r0, #0
 8026a9e:	d1ed      	bne.n	8026a7c <__swbuf_r+0x2a>
 8026aa0:	68a3      	ldr	r3, [r4, #8]
 8026aa2:	3b01      	subs	r3, #1
 8026aa4:	60a3      	str	r3, [r4, #8]
 8026aa6:	6823      	ldr	r3, [r4, #0]
 8026aa8:	1c5a      	adds	r2, r3, #1
 8026aaa:	6022      	str	r2, [r4, #0]
 8026aac:	701e      	strb	r6, [r3, #0]
 8026aae:	6962      	ldr	r2, [r4, #20]
 8026ab0:	1c43      	adds	r3, r0, #1
 8026ab2:	429a      	cmp	r2, r3
 8026ab4:	d004      	beq.n	8026ac0 <__swbuf_r+0x6e>
 8026ab6:	89a3      	ldrh	r3, [r4, #12]
 8026ab8:	07db      	lsls	r3, r3, #31
 8026aba:	d5e1      	bpl.n	8026a80 <__swbuf_r+0x2e>
 8026abc:	2e0a      	cmp	r6, #10
 8026abe:	d1df      	bne.n	8026a80 <__swbuf_r+0x2e>
 8026ac0:	4621      	mov	r1, r4
 8026ac2:	4628      	mov	r0, r5
 8026ac4:	f002 f844 	bl	8028b50 <_fflush_r>
 8026ac8:	2800      	cmp	r0, #0
 8026aca:	d0d9      	beq.n	8026a80 <__swbuf_r+0x2e>
 8026acc:	e7d6      	b.n	8026a7c <__swbuf_r+0x2a>
	...

08026ad0 <__swsetup_r>:
 8026ad0:	b538      	push	{r3, r4, r5, lr}
 8026ad2:	4b29      	ldr	r3, [pc, #164]	@ (8026b78 <__swsetup_r+0xa8>)
 8026ad4:	4605      	mov	r5, r0
 8026ad6:	6818      	ldr	r0, [r3, #0]
 8026ad8:	460c      	mov	r4, r1
 8026ada:	b118      	cbz	r0, 8026ae4 <__swsetup_r+0x14>
 8026adc:	6a03      	ldr	r3, [r0, #32]
 8026ade:	b90b      	cbnz	r3, 8026ae4 <__swsetup_r+0x14>
 8026ae0:	f7ff fe90 	bl	8026804 <__sinit>
 8026ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026ae8:	0719      	lsls	r1, r3, #28
 8026aea:	d422      	bmi.n	8026b32 <__swsetup_r+0x62>
 8026aec:	06da      	lsls	r2, r3, #27
 8026aee:	d407      	bmi.n	8026b00 <__swsetup_r+0x30>
 8026af0:	2209      	movs	r2, #9
 8026af2:	602a      	str	r2, [r5, #0]
 8026af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026af8:	81a3      	strh	r3, [r4, #12]
 8026afa:	f04f 30ff 	mov.w	r0, #4294967295
 8026afe:	e033      	b.n	8026b68 <__swsetup_r+0x98>
 8026b00:	0758      	lsls	r0, r3, #29
 8026b02:	d512      	bpl.n	8026b2a <__swsetup_r+0x5a>
 8026b04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026b06:	b141      	cbz	r1, 8026b1a <__swsetup_r+0x4a>
 8026b08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026b0c:	4299      	cmp	r1, r3
 8026b0e:	d002      	beq.n	8026b16 <__swsetup_r+0x46>
 8026b10:	4628      	mov	r0, r5
 8026b12:	f000 ff71 	bl	80279f8 <_free_r>
 8026b16:	2300      	movs	r3, #0
 8026b18:	6363      	str	r3, [r4, #52]	@ 0x34
 8026b1a:	89a3      	ldrh	r3, [r4, #12]
 8026b1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8026b20:	81a3      	strh	r3, [r4, #12]
 8026b22:	2300      	movs	r3, #0
 8026b24:	6063      	str	r3, [r4, #4]
 8026b26:	6923      	ldr	r3, [r4, #16]
 8026b28:	6023      	str	r3, [r4, #0]
 8026b2a:	89a3      	ldrh	r3, [r4, #12]
 8026b2c:	f043 0308 	orr.w	r3, r3, #8
 8026b30:	81a3      	strh	r3, [r4, #12]
 8026b32:	6923      	ldr	r3, [r4, #16]
 8026b34:	b94b      	cbnz	r3, 8026b4a <__swsetup_r+0x7a>
 8026b36:	89a3      	ldrh	r3, [r4, #12]
 8026b38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8026b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8026b40:	d003      	beq.n	8026b4a <__swsetup_r+0x7a>
 8026b42:	4621      	mov	r1, r4
 8026b44:	4628      	mov	r0, r5
 8026b46:	f002 f851 	bl	8028bec <__smakebuf_r>
 8026b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026b4e:	f013 0201 	ands.w	r2, r3, #1
 8026b52:	d00a      	beq.n	8026b6a <__swsetup_r+0x9a>
 8026b54:	2200      	movs	r2, #0
 8026b56:	60a2      	str	r2, [r4, #8]
 8026b58:	6962      	ldr	r2, [r4, #20]
 8026b5a:	4252      	negs	r2, r2
 8026b5c:	61a2      	str	r2, [r4, #24]
 8026b5e:	6922      	ldr	r2, [r4, #16]
 8026b60:	b942      	cbnz	r2, 8026b74 <__swsetup_r+0xa4>
 8026b62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8026b66:	d1c5      	bne.n	8026af4 <__swsetup_r+0x24>
 8026b68:	bd38      	pop	{r3, r4, r5, pc}
 8026b6a:	0799      	lsls	r1, r3, #30
 8026b6c:	bf58      	it	pl
 8026b6e:	6962      	ldrpl	r2, [r4, #20]
 8026b70:	60a2      	str	r2, [r4, #8]
 8026b72:	e7f4      	b.n	8026b5e <__swsetup_r+0x8e>
 8026b74:	2000      	movs	r0, #0
 8026b76:	e7f7      	b.n	8026b68 <__swsetup_r+0x98>
 8026b78:	200000ec 	.word	0x200000ec

08026b7c <memcmp>:
 8026b7c:	b510      	push	{r4, lr}
 8026b7e:	3901      	subs	r1, #1
 8026b80:	4402      	add	r2, r0
 8026b82:	4290      	cmp	r0, r2
 8026b84:	d101      	bne.n	8026b8a <memcmp+0xe>
 8026b86:	2000      	movs	r0, #0
 8026b88:	e005      	b.n	8026b96 <memcmp+0x1a>
 8026b8a:	7803      	ldrb	r3, [r0, #0]
 8026b8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8026b90:	42a3      	cmp	r3, r4
 8026b92:	d001      	beq.n	8026b98 <memcmp+0x1c>
 8026b94:	1b18      	subs	r0, r3, r4
 8026b96:	bd10      	pop	{r4, pc}
 8026b98:	3001      	adds	r0, #1
 8026b9a:	e7f2      	b.n	8026b82 <memcmp+0x6>

08026b9c <memmove>:
 8026b9c:	4288      	cmp	r0, r1
 8026b9e:	b510      	push	{r4, lr}
 8026ba0:	eb01 0402 	add.w	r4, r1, r2
 8026ba4:	d902      	bls.n	8026bac <memmove+0x10>
 8026ba6:	4284      	cmp	r4, r0
 8026ba8:	4623      	mov	r3, r4
 8026baa:	d807      	bhi.n	8026bbc <memmove+0x20>
 8026bac:	1e43      	subs	r3, r0, #1
 8026bae:	42a1      	cmp	r1, r4
 8026bb0:	d008      	beq.n	8026bc4 <memmove+0x28>
 8026bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026bba:	e7f8      	b.n	8026bae <memmove+0x12>
 8026bbc:	4402      	add	r2, r0
 8026bbe:	4601      	mov	r1, r0
 8026bc0:	428a      	cmp	r2, r1
 8026bc2:	d100      	bne.n	8026bc6 <memmove+0x2a>
 8026bc4:	bd10      	pop	{r4, pc}
 8026bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8026bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8026bce:	e7f7      	b.n	8026bc0 <memmove+0x24>

08026bd0 <memset>:
 8026bd0:	4402      	add	r2, r0
 8026bd2:	4603      	mov	r3, r0
 8026bd4:	4293      	cmp	r3, r2
 8026bd6:	d100      	bne.n	8026bda <memset+0xa>
 8026bd8:	4770      	bx	lr
 8026bda:	f803 1b01 	strb.w	r1, [r3], #1
 8026bde:	e7f9      	b.n	8026bd4 <memset+0x4>

08026be0 <strcat>:
 8026be0:	b510      	push	{r4, lr}
 8026be2:	4602      	mov	r2, r0
 8026be4:	7814      	ldrb	r4, [r2, #0]
 8026be6:	4613      	mov	r3, r2
 8026be8:	3201      	adds	r2, #1
 8026bea:	2c00      	cmp	r4, #0
 8026bec:	d1fa      	bne.n	8026be4 <strcat+0x4>
 8026bee:	3b01      	subs	r3, #1
 8026bf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026bf4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026bf8:	2a00      	cmp	r2, #0
 8026bfa:	d1f9      	bne.n	8026bf0 <strcat+0x10>
 8026bfc:	bd10      	pop	{r4, pc}

08026bfe <strncmp>:
 8026bfe:	b510      	push	{r4, lr}
 8026c00:	b16a      	cbz	r2, 8026c1e <strncmp+0x20>
 8026c02:	3901      	subs	r1, #1
 8026c04:	1884      	adds	r4, r0, r2
 8026c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026c0a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8026c0e:	429a      	cmp	r2, r3
 8026c10:	d103      	bne.n	8026c1a <strncmp+0x1c>
 8026c12:	42a0      	cmp	r0, r4
 8026c14:	d001      	beq.n	8026c1a <strncmp+0x1c>
 8026c16:	2a00      	cmp	r2, #0
 8026c18:	d1f5      	bne.n	8026c06 <strncmp+0x8>
 8026c1a:	1ad0      	subs	r0, r2, r3
 8026c1c:	bd10      	pop	{r4, pc}
 8026c1e:	4610      	mov	r0, r2
 8026c20:	e7fc      	b.n	8026c1c <strncmp+0x1e>
	...

08026c24 <_localeconv_r>:
 8026c24:	4800      	ldr	r0, [pc, #0]	@ (8026c28 <_localeconv_r+0x4>)
 8026c26:	4770      	bx	lr
 8026c28:	2000022c 	.word	0x2000022c

08026c2c <_close_r>:
 8026c2c:	b538      	push	{r3, r4, r5, lr}
 8026c2e:	4d06      	ldr	r5, [pc, #24]	@ (8026c48 <_close_r+0x1c>)
 8026c30:	2300      	movs	r3, #0
 8026c32:	4604      	mov	r4, r0
 8026c34:	4608      	mov	r0, r1
 8026c36:	602b      	str	r3, [r5, #0]
 8026c38:	f7dc fd41 	bl	80036be <_close>
 8026c3c:	1c43      	adds	r3, r0, #1
 8026c3e:	d102      	bne.n	8026c46 <_close_r+0x1a>
 8026c40:	682b      	ldr	r3, [r5, #0]
 8026c42:	b103      	cbz	r3, 8026c46 <_close_r+0x1a>
 8026c44:	6023      	str	r3, [r4, #0]
 8026c46:	bd38      	pop	{r3, r4, r5, pc}
 8026c48:	200081fc 	.word	0x200081fc

08026c4c <_lseek_r>:
 8026c4c:	b538      	push	{r3, r4, r5, lr}
 8026c4e:	4d07      	ldr	r5, [pc, #28]	@ (8026c6c <_lseek_r+0x20>)
 8026c50:	4604      	mov	r4, r0
 8026c52:	4608      	mov	r0, r1
 8026c54:	4611      	mov	r1, r2
 8026c56:	2200      	movs	r2, #0
 8026c58:	602a      	str	r2, [r5, #0]
 8026c5a:	461a      	mov	r2, r3
 8026c5c:	f7dc fd56 	bl	800370c <_lseek>
 8026c60:	1c43      	adds	r3, r0, #1
 8026c62:	d102      	bne.n	8026c6a <_lseek_r+0x1e>
 8026c64:	682b      	ldr	r3, [r5, #0]
 8026c66:	b103      	cbz	r3, 8026c6a <_lseek_r+0x1e>
 8026c68:	6023      	str	r3, [r4, #0]
 8026c6a:	bd38      	pop	{r3, r4, r5, pc}
 8026c6c:	200081fc 	.word	0x200081fc

08026c70 <_read_r>:
 8026c70:	b538      	push	{r3, r4, r5, lr}
 8026c72:	4d07      	ldr	r5, [pc, #28]	@ (8026c90 <_read_r+0x20>)
 8026c74:	4604      	mov	r4, r0
 8026c76:	4608      	mov	r0, r1
 8026c78:	4611      	mov	r1, r2
 8026c7a:	2200      	movs	r2, #0
 8026c7c:	602a      	str	r2, [r5, #0]
 8026c7e:	461a      	mov	r2, r3
 8026c80:	f7dc fd00 	bl	8003684 <_read>
 8026c84:	1c43      	adds	r3, r0, #1
 8026c86:	d102      	bne.n	8026c8e <_read_r+0x1e>
 8026c88:	682b      	ldr	r3, [r5, #0]
 8026c8a:	b103      	cbz	r3, 8026c8e <_read_r+0x1e>
 8026c8c:	6023      	str	r3, [r4, #0]
 8026c8e:	bd38      	pop	{r3, r4, r5, pc}
 8026c90:	200081fc 	.word	0x200081fc

08026c94 <_sbrk_r>:
 8026c94:	b538      	push	{r3, r4, r5, lr}
 8026c96:	4d06      	ldr	r5, [pc, #24]	@ (8026cb0 <_sbrk_r+0x1c>)
 8026c98:	2300      	movs	r3, #0
 8026c9a:	4604      	mov	r4, r0
 8026c9c:	4608      	mov	r0, r1
 8026c9e:	602b      	str	r3, [r5, #0]
 8026ca0:	f7dc fd42 	bl	8003728 <_sbrk>
 8026ca4:	1c43      	adds	r3, r0, #1
 8026ca6:	d102      	bne.n	8026cae <_sbrk_r+0x1a>
 8026ca8:	682b      	ldr	r3, [r5, #0]
 8026caa:	b103      	cbz	r3, 8026cae <_sbrk_r+0x1a>
 8026cac:	6023      	str	r3, [r4, #0]
 8026cae:	bd38      	pop	{r3, r4, r5, pc}
 8026cb0:	200081fc 	.word	0x200081fc

08026cb4 <_write_r>:
 8026cb4:	b538      	push	{r3, r4, r5, lr}
 8026cb6:	4d07      	ldr	r5, [pc, #28]	@ (8026cd4 <_write_r+0x20>)
 8026cb8:	4604      	mov	r4, r0
 8026cba:	4608      	mov	r0, r1
 8026cbc:	4611      	mov	r1, r2
 8026cbe:	2200      	movs	r2, #0
 8026cc0:	602a      	str	r2, [r5, #0]
 8026cc2:	461a      	mov	r2, r3
 8026cc4:	f7ec fef8 	bl	8013ab8 <_write>
 8026cc8:	1c43      	adds	r3, r0, #1
 8026cca:	d102      	bne.n	8026cd2 <_write_r+0x1e>
 8026ccc:	682b      	ldr	r3, [r5, #0]
 8026cce:	b103      	cbz	r3, 8026cd2 <_write_r+0x1e>
 8026cd0:	6023      	str	r3, [r4, #0]
 8026cd2:	bd38      	pop	{r3, r4, r5, pc}
 8026cd4:	200081fc 	.word	0x200081fc

08026cd8 <__errno>:
 8026cd8:	4b01      	ldr	r3, [pc, #4]	@ (8026ce0 <__errno+0x8>)
 8026cda:	6818      	ldr	r0, [r3, #0]
 8026cdc:	4770      	bx	lr
 8026cde:	bf00      	nop
 8026ce0:	200000ec 	.word	0x200000ec

08026ce4 <__libc_init_array>:
 8026ce4:	b570      	push	{r4, r5, r6, lr}
 8026ce6:	4d0d      	ldr	r5, [pc, #52]	@ (8026d1c <__libc_init_array+0x38>)
 8026ce8:	4c0d      	ldr	r4, [pc, #52]	@ (8026d20 <__libc_init_array+0x3c>)
 8026cea:	1b64      	subs	r4, r4, r5
 8026cec:	10a4      	asrs	r4, r4, #2
 8026cee:	2600      	movs	r6, #0
 8026cf0:	42a6      	cmp	r6, r4
 8026cf2:	d109      	bne.n	8026d08 <__libc_init_array+0x24>
 8026cf4:	4d0b      	ldr	r5, [pc, #44]	@ (8026d24 <__libc_init_array+0x40>)
 8026cf6:	4c0c      	ldr	r4, [pc, #48]	@ (8026d28 <__libc_init_array+0x44>)
 8026cf8:	f002 f9e4 	bl	80290c4 <_init>
 8026cfc:	1b64      	subs	r4, r4, r5
 8026cfe:	10a4      	asrs	r4, r4, #2
 8026d00:	2600      	movs	r6, #0
 8026d02:	42a6      	cmp	r6, r4
 8026d04:	d105      	bne.n	8026d12 <__libc_init_array+0x2e>
 8026d06:	bd70      	pop	{r4, r5, r6, pc}
 8026d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8026d0c:	4798      	blx	r3
 8026d0e:	3601      	adds	r6, #1
 8026d10:	e7ee      	b.n	8026cf0 <__libc_init_array+0xc>
 8026d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8026d16:	4798      	blx	r3
 8026d18:	3601      	adds	r6, #1
 8026d1a:	e7f2      	b.n	8026d02 <__libc_init_array+0x1e>
 8026d1c:	0802f358 	.word	0x0802f358
 8026d20:	0802f358 	.word	0x0802f358
 8026d24:	0802f358 	.word	0x0802f358
 8026d28:	0802f35c 	.word	0x0802f35c

08026d2c <__retarget_lock_init_recursive>:
 8026d2c:	4770      	bx	lr

08026d2e <__retarget_lock_acquire_recursive>:
 8026d2e:	4770      	bx	lr

08026d30 <__retarget_lock_release_recursive>:
 8026d30:	4770      	bx	lr

08026d32 <memcpy>:
 8026d32:	440a      	add	r2, r1
 8026d34:	4291      	cmp	r1, r2
 8026d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8026d3a:	d100      	bne.n	8026d3e <memcpy+0xc>
 8026d3c:	4770      	bx	lr
 8026d3e:	b510      	push	{r4, lr}
 8026d40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026d44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026d48:	4291      	cmp	r1, r2
 8026d4a:	d1f9      	bne.n	8026d40 <memcpy+0xe>
 8026d4c:	bd10      	pop	{r4, pc}

08026d4e <abort>:
 8026d4e:	b508      	push	{r3, lr}
 8026d50:	2006      	movs	r0, #6
 8026d52:	f002 f823 	bl	8028d9c <raise>
 8026d56:	2001      	movs	r0, #1
 8026d58:	f7dc fc89 	bl	800366e <_exit>

08026d5c <quorem>:
 8026d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d60:	6903      	ldr	r3, [r0, #16]
 8026d62:	690c      	ldr	r4, [r1, #16]
 8026d64:	42a3      	cmp	r3, r4
 8026d66:	4607      	mov	r7, r0
 8026d68:	db7e      	blt.n	8026e68 <quorem+0x10c>
 8026d6a:	3c01      	subs	r4, #1
 8026d6c:	f101 0814 	add.w	r8, r1, #20
 8026d70:	00a3      	lsls	r3, r4, #2
 8026d72:	f100 0514 	add.w	r5, r0, #20
 8026d76:	9300      	str	r3, [sp, #0]
 8026d78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026d7c:	9301      	str	r3, [sp, #4]
 8026d7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8026d82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026d86:	3301      	adds	r3, #1
 8026d88:	429a      	cmp	r2, r3
 8026d8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8026d8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8026d92:	d32e      	bcc.n	8026df2 <quorem+0x96>
 8026d94:	f04f 0a00 	mov.w	sl, #0
 8026d98:	46c4      	mov	ip, r8
 8026d9a:	46ae      	mov	lr, r5
 8026d9c:	46d3      	mov	fp, sl
 8026d9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8026da2:	b298      	uxth	r0, r3
 8026da4:	fb06 a000 	mla	r0, r6, r0, sl
 8026da8:	0c02      	lsrs	r2, r0, #16
 8026daa:	0c1b      	lsrs	r3, r3, #16
 8026dac:	fb06 2303 	mla	r3, r6, r3, r2
 8026db0:	f8de 2000 	ldr.w	r2, [lr]
 8026db4:	b280      	uxth	r0, r0
 8026db6:	b292      	uxth	r2, r2
 8026db8:	1a12      	subs	r2, r2, r0
 8026dba:	445a      	add	r2, fp
 8026dbc:	f8de 0000 	ldr.w	r0, [lr]
 8026dc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026dc4:	b29b      	uxth	r3, r3
 8026dc6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8026dca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8026dce:	b292      	uxth	r2, r2
 8026dd0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8026dd4:	45e1      	cmp	r9, ip
 8026dd6:	f84e 2b04 	str.w	r2, [lr], #4
 8026dda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8026dde:	d2de      	bcs.n	8026d9e <quorem+0x42>
 8026de0:	9b00      	ldr	r3, [sp, #0]
 8026de2:	58eb      	ldr	r3, [r5, r3]
 8026de4:	b92b      	cbnz	r3, 8026df2 <quorem+0x96>
 8026de6:	9b01      	ldr	r3, [sp, #4]
 8026de8:	3b04      	subs	r3, #4
 8026dea:	429d      	cmp	r5, r3
 8026dec:	461a      	mov	r2, r3
 8026dee:	d32f      	bcc.n	8026e50 <quorem+0xf4>
 8026df0:	613c      	str	r4, [r7, #16]
 8026df2:	4638      	mov	r0, r7
 8026df4:	f001 f8c4 	bl	8027f80 <__mcmp>
 8026df8:	2800      	cmp	r0, #0
 8026dfa:	db25      	blt.n	8026e48 <quorem+0xec>
 8026dfc:	4629      	mov	r1, r5
 8026dfe:	2000      	movs	r0, #0
 8026e00:	f858 2b04 	ldr.w	r2, [r8], #4
 8026e04:	f8d1 c000 	ldr.w	ip, [r1]
 8026e08:	fa1f fe82 	uxth.w	lr, r2
 8026e0c:	fa1f f38c 	uxth.w	r3, ip
 8026e10:	eba3 030e 	sub.w	r3, r3, lr
 8026e14:	4403      	add	r3, r0
 8026e16:	0c12      	lsrs	r2, r2, #16
 8026e18:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8026e1c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8026e20:	b29b      	uxth	r3, r3
 8026e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026e26:	45c1      	cmp	r9, r8
 8026e28:	f841 3b04 	str.w	r3, [r1], #4
 8026e2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8026e30:	d2e6      	bcs.n	8026e00 <quorem+0xa4>
 8026e32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026e3a:	b922      	cbnz	r2, 8026e46 <quorem+0xea>
 8026e3c:	3b04      	subs	r3, #4
 8026e3e:	429d      	cmp	r5, r3
 8026e40:	461a      	mov	r2, r3
 8026e42:	d30b      	bcc.n	8026e5c <quorem+0x100>
 8026e44:	613c      	str	r4, [r7, #16]
 8026e46:	3601      	adds	r6, #1
 8026e48:	4630      	mov	r0, r6
 8026e4a:	b003      	add	sp, #12
 8026e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e50:	6812      	ldr	r2, [r2, #0]
 8026e52:	3b04      	subs	r3, #4
 8026e54:	2a00      	cmp	r2, #0
 8026e56:	d1cb      	bne.n	8026df0 <quorem+0x94>
 8026e58:	3c01      	subs	r4, #1
 8026e5a:	e7c6      	b.n	8026dea <quorem+0x8e>
 8026e5c:	6812      	ldr	r2, [r2, #0]
 8026e5e:	3b04      	subs	r3, #4
 8026e60:	2a00      	cmp	r2, #0
 8026e62:	d1ef      	bne.n	8026e44 <quorem+0xe8>
 8026e64:	3c01      	subs	r4, #1
 8026e66:	e7ea      	b.n	8026e3e <quorem+0xe2>
 8026e68:	2000      	movs	r0, #0
 8026e6a:	e7ee      	b.n	8026e4a <quorem+0xee>
 8026e6c:	0000      	movs	r0, r0
	...

08026e70 <_dtoa_r>:
 8026e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e74:	69c7      	ldr	r7, [r0, #28]
 8026e76:	b099      	sub	sp, #100	@ 0x64
 8026e78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8026e7c:	ec55 4b10 	vmov	r4, r5, d0
 8026e80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8026e82:	9109      	str	r1, [sp, #36]	@ 0x24
 8026e84:	4683      	mov	fp, r0
 8026e86:	920e      	str	r2, [sp, #56]	@ 0x38
 8026e88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026e8a:	b97f      	cbnz	r7, 8026eac <_dtoa_r+0x3c>
 8026e8c:	2010      	movs	r0, #16
 8026e8e:	f7fe ff1f 	bl	8025cd0 <malloc>
 8026e92:	4602      	mov	r2, r0
 8026e94:	f8cb 001c 	str.w	r0, [fp, #28]
 8026e98:	b920      	cbnz	r0, 8026ea4 <_dtoa_r+0x34>
 8026e9a:	4ba7      	ldr	r3, [pc, #668]	@ (8027138 <_dtoa_r+0x2c8>)
 8026e9c:	21ef      	movs	r1, #239	@ 0xef
 8026e9e:	48a7      	ldr	r0, [pc, #668]	@ (802713c <_dtoa_r+0x2cc>)
 8026ea0:	f7fe fef8 	bl	8025c94 <__assert_func>
 8026ea4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8026ea8:	6007      	str	r7, [r0, #0]
 8026eaa:	60c7      	str	r7, [r0, #12]
 8026eac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8026eb0:	6819      	ldr	r1, [r3, #0]
 8026eb2:	b159      	cbz	r1, 8026ecc <_dtoa_r+0x5c>
 8026eb4:	685a      	ldr	r2, [r3, #4]
 8026eb6:	604a      	str	r2, [r1, #4]
 8026eb8:	2301      	movs	r3, #1
 8026eba:	4093      	lsls	r3, r2
 8026ebc:	608b      	str	r3, [r1, #8]
 8026ebe:	4658      	mov	r0, fp
 8026ec0:	f000 fe24 	bl	8027b0c <_Bfree>
 8026ec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8026ec8:	2200      	movs	r2, #0
 8026eca:	601a      	str	r2, [r3, #0]
 8026ecc:	1e2b      	subs	r3, r5, #0
 8026ece:	bfb9      	ittee	lt
 8026ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8026ed4:	9303      	strlt	r3, [sp, #12]
 8026ed6:	2300      	movge	r3, #0
 8026ed8:	6033      	strge	r3, [r6, #0]
 8026eda:	9f03      	ldr	r7, [sp, #12]
 8026edc:	4b98      	ldr	r3, [pc, #608]	@ (8027140 <_dtoa_r+0x2d0>)
 8026ede:	bfbc      	itt	lt
 8026ee0:	2201      	movlt	r2, #1
 8026ee2:	6032      	strlt	r2, [r6, #0]
 8026ee4:	43bb      	bics	r3, r7
 8026ee6:	d112      	bne.n	8026f0e <_dtoa_r+0x9e>
 8026ee8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026eea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8026eee:	6013      	str	r3, [r2, #0]
 8026ef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8026ef4:	4323      	orrs	r3, r4
 8026ef6:	f000 854d 	beq.w	8027994 <_dtoa_r+0xb24>
 8026efa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026efc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8027154 <_dtoa_r+0x2e4>
 8026f00:	2b00      	cmp	r3, #0
 8026f02:	f000 854f 	beq.w	80279a4 <_dtoa_r+0xb34>
 8026f06:	f10a 0303 	add.w	r3, sl, #3
 8026f0a:	f000 bd49 	b.w	80279a0 <_dtoa_r+0xb30>
 8026f0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026f12:	2200      	movs	r2, #0
 8026f14:	ec51 0b17 	vmov	r0, r1, d7
 8026f18:	2300      	movs	r3, #0
 8026f1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8026f1e:	f7d9 fdbb 	bl	8000a98 <__aeabi_dcmpeq>
 8026f22:	4680      	mov	r8, r0
 8026f24:	b158      	cbz	r0, 8026f3e <_dtoa_r+0xce>
 8026f26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8026f28:	2301      	movs	r3, #1
 8026f2a:	6013      	str	r3, [r2, #0]
 8026f2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026f2e:	b113      	cbz	r3, 8026f36 <_dtoa_r+0xc6>
 8026f30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026f32:	4b84      	ldr	r3, [pc, #528]	@ (8027144 <_dtoa_r+0x2d4>)
 8026f34:	6013      	str	r3, [r2, #0]
 8026f36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8027158 <_dtoa_r+0x2e8>
 8026f3a:	f000 bd33 	b.w	80279a4 <_dtoa_r+0xb34>
 8026f3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8026f42:	aa16      	add	r2, sp, #88	@ 0x58
 8026f44:	a917      	add	r1, sp, #92	@ 0x5c
 8026f46:	4658      	mov	r0, fp
 8026f48:	f001 f8ca 	bl	80280e0 <__d2b>
 8026f4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8026f50:	4681      	mov	r9, r0
 8026f52:	2e00      	cmp	r6, #0
 8026f54:	d077      	beq.n	8027046 <_dtoa_r+0x1d6>
 8026f56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026f58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8026f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8026f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8026f64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8026f68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8026f6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8026f70:	4619      	mov	r1, r3
 8026f72:	2200      	movs	r2, #0
 8026f74:	4b74      	ldr	r3, [pc, #464]	@ (8027148 <_dtoa_r+0x2d8>)
 8026f76:	f7d9 f96f 	bl	8000258 <__aeabi_dsub>
 8026f7a:	a369      	add	r3, pc, #420	@ (adr r3, 8027120 <_dtoa_r+0x2b0>)
 8026f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f80:	f7d9 fb22 	bl	80005c8 <__aeabi_dmul>
 8026f84:	a368      	add	r3, pc, #416	@ (adr r3, 8027128 <_dtoa_r+0x2b8>)
 8026f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f8a:	f7d9 f967 	bl	800025c <__adddf3>
 8026f8e:	4604      	mov	r4, r0
 8026f90:	4630      	mov	r0, r6
 8026f92:	460d      	mov	r5, r1
 8026f94:	f7d9 faae 	bl	80004f4 <__aeabi_i2d>
 8026f98:	a365      	add	r3, pc, #404	@ (adr r3, 8027130 <_dtoa_r+0x2c0>)
 8026f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f9e:	f7d9 fb13 	bl	80005c8 <__aeabi_dmul>
 8026fa2:	4602      	mov	r2, r0
 8026fa4:	460b      	mov	r3, r1
 8026fa6:	4620      	mov	r0, r4
 8026fa8:	4629      	mov	r1, r5
 8026faa:	f7d9 f957 	bl	800025c <__adddf3>
 8026fae:	4604      	mov	r4, r0
 8026fb0:	460d      	mov	r5, r1
 8026fb2:	f7d9 fdb9 	bl	8000b28 <__aeabi_d2iz>
 8026fb6:	2200      	movs	r2, #0
 8026fb8:	4607      	mov	r7, r0
 8026fba:	2300      	movs	r3, #0
 8026fbc:	4620      	mov	r0, r4
 8026fbe:	4629      	mov	r1, r5
 8026fc0:	f7d9 fd74 	bl	8000aac <__aeabi_dcmplt>
 8026fc4:	b140      	cbz	r0, 8026fd8 <_dtoa_r+0x168>
 8026fc6:	4638      	mov	r0, r7
 8026fc8:	f7d9 fa94 	bl	80004f4 <__aeabi_i2d>
 8026fcc:	4622      	mov	r2, r4
 8026fce:	462b      	mov	r3, r5
 8026fd0:	f7d9 fd62 	bl	8000a98 <__aeabi_dcmpeq>
 8026fd4:	b900      	cbnz	r0, 8026fd8 <_dtoa_r+0x168>
 8026fd6:	3f01      	subs	r7, #1
 8026fd8:	2f16      	cmp	r7, #22
 8026fda:	d851      	bhi.n	8027080 <_dtoa_r+0x210>
 8026fdc:	4b5b      	ldr	r3, [pc, #364]	@ (802714c <_dtoa_r+0x2dc>)
 8026fde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8026fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8026fea:	f7d9 fd5f 	bl	8000aac <__aeabi_dcmplt>
 8026fee:	2800      	cmp	r0, #0
 8026ff0:	d048      	beq.n	8027084 <_dtoa_r+0x214>
 8026ff2:	3f01      	subs	r7, #1
 8026ff4:	2300      	movs	r3, #0
 8026ff6:	9312      	str	r3, [sp, #72]	@ 0x48
 8026ff8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026ffa:	1b9b      	subs	r3, r3, r6
 8026ffc:	1e5a      	subs	r2, r3, #1
 8026ffe:	bf44      	itt	mi
 8027000:	f1c3 0801 	rsbmi	r8, r3, #1
 8027004:	2300      	movmi	r3, #0
 8027006:	9208      	str	r2, [sp, #32]
 8027008:	bf54      	ite	pl
 802700a:	f04f 0800 	movpl.w	r8, #0
 802700e:	9308      	strmi	r3, [sp, #32]
 8027010:	2f00      	cmp	r7, #0
 8027012:	db39      	blt.n	8027088 <_dtoa_r+0x218>
 8027014:	9b08      	ldr	r3, [sp, #32]
 8027016:	970f      	str	r7, [sp, #60]	@ 0x3c
 8027018:	443b      	add	r3, r7
 802701a:	9308      	str	r3, [sp, #32]
 802701c:	2300      	movs	r3, #0
 802701e:	930a      	str	r3, [sp, #40]	@ 0x28
 8027020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027022:	2b09      	cmp	r3, #9
 8027024:	d864      	bhi.n	80270f0 <_dtoa_r+0x280>
 8027026:	2b05      	cmp	r3, #5
 8027028:	bfc4      	itt	gt
 802702a:	3b04      	subgt	r3, #4
 802702c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802702e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027030:	f1a3 0302 	sub.w	r3, r3, #2
 8027034:	bfcc      	ite	gt
 8027036:	2400      	movgt	r4, #0
 8027038:	2401      	movle	r4, #1
 802703a:	2b03      	cmp	r3, #3
 802703c:	d863      	bhi.n	8027106 <_dtoa_r+0x296>
 802703e:	e8df f003 	tbb	[pc, r3]
 8027042:	372a      	.short	0x372a
 8027044:	5535      	.short	0x5535
 8027046:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802704a:	441e      	add	r6, r3
 802704c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8027050:	2b20      	cmp	r3, #32
 8027052:	bfc1      	itttt	gt
 8027054:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8027058:	409f      	lslgt	r7, r3
 802705a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802705e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8027062:	bfd6      	itet	le
 8027064:	f1c3 0320 	rsble	r3, r3, #32
 8027068:	ea47 0003 	orrgt.w	r0, r7, r3
 802706c:	fa04 f003 	lslle.w	r0, r4, r3
 8027070:	f7d9 fa30 	bl	80004d4 <__aeabi_ui2d>
 8027074:	2201      	movs	r2, #1
 8027076:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802707a:	3e01      	subs	r6, #1
 802707c:	9214      	str	r2, [sp, #80]	@ 0x50
 802707e:	e777      	b.n	8026f70 <_dtoa_r+0x100>
 8027080:	2301      	movs	r3, #1
 8027082:	e7b8      	b.n	8026ff6 <_dtoa_r+0x186>
 8027084:	9012      	str	r0, [sp, #72]	@ 0x48
 8027086:	e7b7      	b.n	8026ff8 <_dtoa_r+0x188>
 8027088:	427b      	negs	r3, r7
 802708a:	930a      	str	r3, [sp, #40]	@ 0x28
 802708c:	2300      	movs	r3, #0
 802708e:	eba8 0807 	sub.w	r8, r8, r7
 8027092:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027094:	e7c4      	b.n	8027020 <_dtoa_r+0x1b0>
 8027096:	2300      	movs	r3, #0
 8027098:	930b      	str	r3, [sp, #44]	@ 0x2c
 802709a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802709c:	2b00      	cmp	r3, #0
 802709e:	dc35      	bgt.n	802710c <_dtoa_r+0x29c>
 80270a0:	2301      	movs	r3, #1
 80270a2:	9300      	str	r3, [sp, #0]
 80270a4:	9307      	str	r3, [sp, #28]
 80270a6:	461a      	mov	r2, r3
 80270a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80270aa:	e00b      	b.n	80270c4 <_dtoa_r+0x254>
 80270ac:	2301      	movs	r3, #1
 80270ae:	e7f3      	b.n	8027098 <_dtoa_r+0x228>
 80270b0:	2300      	movs	r3, #0
 80270b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80270b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80270b6:	18fb      	adds	r3, r7, r3
 80270b8:	9300      	str	r3, [sp, #0]
 80270ba:	3301      	adds	r3, #1
 80270bc:	2b01      	cmp	r3, #1
 80270be:	9307      	str	r3, [sp, #28]
 80270c0:	bfb8      	it	lt
 80270c2:	2301      	movlt	r3, #1
 80270c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80270c8:	2100      	movs	r1, #0
 80270ca:	2204      	movs	r2, #4
 80270cc:	f102 0514 	add.w	r5, r2, #20
 80270d0:	429d      	cmp	r5, r3
 80270d2:	d91f      	bls.n	8027114 <_dtoa_r+0x2a4>
 80270d4:	6041      	str	r1, [r0, #4]
 80270d6:	4658      	mov	r0, fp
 80270d8:	f000 fcd8 	bl	8027a8c <_Balloc>
 80270dc:	4682      	mov	sl, r0
 80270de:	2800      	cmp	r0, #0
 80270e0:	d13c      	bne.n	802715c <_dtoa_r+0x2ec>
 80270e2:	4b1b      	ldr	r3, [pc, #108]	@ (8027150 <_dtoa_r+0x2e0>)
 80270e4:	4602      	mov	r2, r0
 80270e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80270ea:	e6d8      	b.n	8026e9e <_dtoa_r+0x2e>
 80270ec:	2301      	movs	r3, #1
 80270ee:	e7e0      	b.n	80270b2 <_dtoa_r+0x242>
 80270f0:	2401      	movs	r4, #1
 80270f2:	2300      	movs	r3, #0
 80270f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80270f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80270f8:	f04f 33ff 	mov.w	r3, #4294967295
 80270fc:	9300      	str	r3, [sp, #0]
 80270fe:	9307      	str	r3, [sp, #28]
 8027100:	2200      	movs	r2, #0
 8027102:	2312      	movs	r3, #18
 8027104:	e7d0      	b.n	80270a8 <_dtoa_r+0x238>
 8027106:	2301      	movs	r3, #1
 8027108:	930b      	str	r3, [sp, #44]	@ 0x2c
 802710a:	e7f5      	b.n	80270f8 <_dtoa_r+0x288>
 802710c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802710e:	9300      	str	r3, [sp, #0]
 8027110:	9307      	str	r3, [sp, #28]
 8027112:	e7d7      	b.n	80270c4 <_dtoa_r+0x254>
 8027114:	3101      	adds	r1, #1
 8027116:	0052      	lsls	r2, r2, #1
 8027118:	e7d8      	b.n	80270cc <_dtoa_r+0x25c>
 802711a:	bf00      	nop
 802711c:	f3af 8000 	nop.w
 8027120:	636f4361 	.word	0x636f4361
 8027124:	3fd287a7 	.word	0x3fd287a7
 8027128:	8b60c8b3 	.word	0x8b60c8b3
 802712c:	3fc68a28 	.word	0x3fc68a28
 8027130:	509f79fb 	.word	0x509f79fb
 8027134:	3fd34413 	.word	0x3fd34413
 8027138:	0802f03d 	.word	0x0802f03d
 802713c:	0802f054 	.word	0x0802f054
 8027140:	7ff00000 	.word	0x7ff00000
 8027144:	0802eeec 	.word	0x0802eeec
 8027148:	3ff80000 	.word	0x3ff80000
 802714c:	0802f150 	.word	0x0802f150
 8027150:	0802f0ac 	.word	0x0802f0ac
 8027154:	0802f039 	.word	0x0802f039
 8027158:	0802eeeb 	.word	0x0802eeeb
 802715c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8027160:	6018      	str	r0, [r3, #0]
 8027162:	9b07      	ldr	r3, [sp, #28]
 8027164:	2b0e      	cmp	r3, #14
 8027166:	f200 80a4 	bhi.w	80272b2 <_dtoa_r+0x442>
 802716a:	2c00      	cmp	r4, #0
 802716c:	f000 80a1 	beq.w	80272b2 <_dtoa_r+0x442>
 8027170:	2f00      	cmp	r7, #0
 8027172:	dd33      	ble.n	80271dc <_dtoa_r+0x36c>
 8027174:	4bad      	ldr	r3, [pc, #692]	@ (802742c <_dtoa_r+0x5bc>)
 8027176:	f007 020f 	and.w	r2, r7, #15
 802717a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802717e:	ed93 7b00 	vldr	d7, [r3]
 8027182:	05f8      	lsls	r0, r7, #23
 8027184:	ed8d 7b04 	vstr	d7, [sp, #16]
 8027188:	ea4f 1427 	mov.w	r4, r7, asr #4
 802718c:	d516      	bpl.n	80271bc <_dtoa_r+0x34c>
 802718e:	4ba8      	ldr	r3, [pc, #672]	@ (8027430 <_dtoa_r+0x5c0>)
 8027190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8027194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8027198:	f7d9 fb40 	bl	800081c <__aeabi_ddiv>
 802719c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80271a0:	f004 040f 	and.w	r4, r4, #15
 80271a4:	2603      	movs	r6, #3
 80271a6:	4da2      	ldr	r5, [pc, #648]	@ (8027430 <_dtoa_r+0x5c0>)
 80271a8:	b954      	cbnz	r4, 80271c0 <_dtoa_r+0x350>
 80271aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80271ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80271b2:	f7d9 fb33 	bl	800081c <__aeabi_ddiv>
 80271b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80271ba:	e028      	b.n	802720e <_dtoa_r+0x39e>
 80271bc:	2602      	movs	r6, #2
 80271be:	e7f2      	b.n	80271a6 <_dtoa_r+0x336>
 80271c0:	07e1      	lsls	r1, r4, #31
 80271c2:	d508      	bpl.n	80271d6 <_dtoa_r+0x366>
 80271c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80271c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80271cc:	f7d9 f9fc 	bl	80005c8 <__aeabi_dmul>
 80271d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80271d4:	3601      	adds	r6, #1
 80271d6:	1064      	asrs	r4, r4, #1
 80271d8:	3508      	adds	r5, #8
 80271da:	e7e5      	b.n	80271a8 <_dtoa_r+0x338>
 80271dc:	f000 80d2 	beq.w	8027384 <_dtoa_r+0x514>
 80271e0:	427c      	negs	r4, r7
 80271e2:	4b92      	ldr	r3, [pc, #584]	@ (802742c <_dtoa_r+0x5bc>)
 80271e4:	4d92      	ldr	r5, [pc, #584]	@ (8027430 <_dtoa_r+0x5c0>)
 80271e6:	f004 020f 	and.w	r2, r4, #15
 80271ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80271ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80271f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80271f6:	f7d9 f9e7 	bl	80005c8 <__aeabi_dmul>
 80271fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80271fe:	1124      	asrs	r4, r4, #4
 8027200:	2300      	movs	r3, #0
 8027202:	2602      	movs	r6, #2
 8027204:	2c00      	cmp	r4, #0
 8027206:	f040 80b2 	bne.w	802736e <_dtoa_r+0x4fe>
 802720a:	2b00      	cmp	r3, #0
 802720c:	d1d3      	bne.n	80271b6 <_dtoa_r+0x346>
 802720e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8027210:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8027214:	2b00      	cmp	r3, #0
 8027216:	f000 80b7 	beq.w	8027388 <_dtoa_r+0x518>
 802721a:	4b86      	ldr	r3, [pc, #536]	@ (8027434 <_dtoa_r+0x5c4>)
 802721c:	2200      	movs	r2, #0
 802721e:	4620      	mov	r0, r4
 8027220:	4629      	mov	r1, r5
 8027222:	f7d9 fc43 	bl	8000aac <__aeabi_dcmplt>
 8027226:	2800      	cmp	r0, #0
 8027228:	f000 80ae 	beq.w	8027388 <_dtoa_r+0x518>
 802722c:	9b07      	ldr	r3, [sp, #28]
 802722e:	2b00      	cmp	r3, #0
 8027230:	f000 80aa 	beq.w	8027388 <_dtoa_r+0x518>
 8027234:	9b00      	ldr	r3, [sp, #0]
 8027236:	2b00      	cmp	r3, #0
 8027238:	dd37      	ble.n	80272aa <_dtoa_r+0x43a>
 802723a:	1e7b      	subs	r3, r7, #1
 802723c:	9304      	str	r3, [sp, #16]
 802723e:	4620      	mov	r0, r4
 8027240:	4b7d      	ldr	r3, [pc, #500]	@ (8027438 <_dtoa_r+0x5c8>)
 8027242:	2200      	movs	r2, #0
 8027244:	4629      	mov	r1, r5
 8027246:	f7d9 f9bf 	bl	80005c8 <__aeabi_dmul>
 802724a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802724e:	9c00      	ldr	r4, [sp, #0]
 8027250:	3601      	adds	r6, #1
 8027252:	4630      	mov	r0, r6
 8027254:	f7d9 f94e 	bl	80004f4 <__aeabi_i2d>
 8027258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802725c:	f7d9 f9b4 	bl	80005c8 <__aeabi_dmul>
 8027260:	4b76      	ldr	r3, [pc, #472]	@ (802743c <_dtoa_r+0x5cc>)
 8027262:	2200      	movs	r2, #0
 8027264:	f7d8 fffa 	bl	800025c <__adddf3>
 8027268:	4605      	mov	r5, r0
 802726a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802726e:	2c00      	cmp	r4, #0
 8027270:	f040 808d 	bne.w	802738e <_dtoa_r+0x51e>
 8027274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027278:	4b71      	ldr	r3, [pc, #452]	@ (8027440 <_dtoa_r+0x5d0>)
 802727a:	2200      	movs	r2, #0
 802727c:	f7d8 ffec 	bl	8000258 <__aeabi_dsub>
 8027280:	4602      	mov	r2, r0
 8027282:	460b      	mov	r3, r1
 8027284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8027288:	462a      	mov	r2, r5
 802728a:	4633      	mov	r3, r6
 802728c:	f7d9 fc2c 	bl	8000ae8 <__aeabi_dcmpgt>
 8027290:	2800      	cmp	r0, #0
 8027292:	f040 828b 	bne.w	80277ac <_dtoa_r+0x93c>
 8027296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802729a:	462a      	mov	r2, r5
 802729c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80272a0:	f7d9 fc04 	bl	8000aac <__aeabi_dcmplt>
 80272a4:	2800      	cmp	r0, #0
 80272a6:	f040 8128 	bne.w	80274fa <_dtoa_r+0x68a>
 80272aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80272ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80272b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80272b4:	2b00      	cmp	r3, #0
 80272b6:	f2c0 815a 	blt.w	802756e <_dtoa_r+0x6fe>
 80272ba:	2f0e      	cmp	r7, #14
 80272bc:	f300 8157 	bgt.w	802756e <_dtoa_r+0x6fe>
 80272c0:	4b5a      	ldr	r3, [pc, #360]	@ (802742c <_dtoa_r+0x5bc>)
 80272c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80272c6:	ed93 7b00 	vldr	d7, [r3]
 80272ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80272cc:	2b00      	cmp	r3, #0
 80272ce:	ed8d 7b00 	vstr	d7, [sp]
 80272d2:	da03      	bge.n	80272dc <_dtoa_r+0x46c>
 80272d4:	9b07      	ldr	r3, [sp, #28]
 80272d6:	2b00      	cmp	r3, #0
 80272d8:	f340 8101 	ble.w	80274de <_dtoa_r+0x66e>
 80272dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80272e0:	4656      	mov	r6, sl
 80272e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80272e6:	4620      	mov	r0, r4
 80272e8:	4629      	mov	r1, r5
 80272ea:	f7d9 fa97 	bl	800081c <__aeabi_ddiv>
 80272ee:	f7d9 fc1b 	bl	8000b28 <__aeabi_d2iz>
 80272f2:	4680      	mov	r8, r0
 80272f4:	f7d9 f8fe 	bl	80004f4 <__aeabi_i2d>
 80272f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80272fc:	f7d9 f964 	bl	80005c8 <__aeabi_dmul>
 8027300:	4602      	mov	r2, r0
 8027302:	460b      	mov	r3, r1
 8027304:	4620      	mov	r0, r4
 8027306:	4629      	mov	r1, r5
 8027308:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802730c:	f7d8 ffa4 	bl	8000258 <__aeabi_dsub>
 8027310:	f806 4b01 	strb.w	r4, [r6], #1
 8027314:	9d07      	ldr	r5, [sp, #28]
 8027316:	eba6 040a 	sub.w	r4, r6, sl
 802731a:	42a5      	cmp	r5, r4
 802731c:	4602      	mov	r2, r0
 802731e:	460b      	mov	r3, r1
 8027320:	f040 8117 	bne.w	8027552 <_dtoa_r+0x6e2>
 8027324:	f7d8 ff9a 	bl	800025c <__adddf3>
 8027328:	e9dd 2300 	ldrd	r2, r3, [sp]
 802732c:	4604      	mov	r4, r0
 802732e:	460d      	mov	r5, r1
 8027330:	f7d9 fbda 	bl	8000ae8 <__aeabi_dcmpgt>
 8027334:	2800      	cmp	r0, #0
 8027336:	f040 80f9 	bne.w	802752c <_dtoa_r+0x6bc>
 802733a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802733e:	4620      	mov	r0, r4
 8027340:	4629      	mov	r1, r5
 8027342:	f7d9 fba9 	bl	8000a98 <__aeabi_dcmpeq>
 8027346:	b118      	cbz	r0, 8027350 <_dtoa_r+0x4e0>
 8027348:	f018 0f01 	tst.w	r8, #1
 802734c:	f040 80ee 	bne.w	802752c <_dtoa_r+0x6bc>
 8027350:	4649      	mov	r1, r9
 8027352:	4658      	mov	r0, fp
 8027354:	f000 fbda 	bl	8027b0c <_Bfree>
 8027358:	2300      	movs	r3, #0
 802735a:	7033      	strb	r3, [r6, #0]
 802735c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802735e:	3701      	adds	r7, #1
 8027360:	601f      	str	r7, [r3, #0]
 8027362:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027364:	2b00      	cmp	r3, #0
 8027366:	f000 831d 	beq.w	80279a4 <_dtoa_r+0xb34>
 802736a:	601e      	str	r6, [r3, #0]
 802736c:	e31a      	b.n	80279a4 <_dtoa_r+0xb34>
 802736e:	07e2      	lsls	r2, r4, #31
 8027370:	d505      	bpl.n	802737e <_dtoa_r+0x50e>
 8027372:	e9d5 2300 	ldrd	r2, r3, [r5]
 8027376:	f7d9 f927 	bl	80005c8 <__aeabi_dmul>
 802737a:	3601      	adds	r6, #1
 802737c:	2301      	movs	r3, #1
 802737e:	1064      	asrs	r4, r4, #1
 8027380:	3508      	adds	r5, #8
 8027382:	e73f      	b.n	8027204 <_dtoa_r+0x394>
 8027384:	2602      	movs	r6, #2
 8027386:	e742      	b.n	802720e <_dtoa_r+0x39e>
 8027388:	9c07      	ldr	r4, [sp, #28]
 802738a:	9704      	str	r7, [sp, #16]
 802738c:	e761      	b.n	8027252 <_dtoa_r+0x3e2>
 802738e:	4b27      	ldr	r3, [pc, #156]	@ (802742c <_dtoa_r+0x5bc>)
 8027390:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8027392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8027396:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802739a:	4454      	add	r4, sl
 802739c:	2900      	cmp	r1, #0
 802739e:	d053      	beq.n	8027448 <_dtoa_r+0x5d8>
 80273a0:	4928      	ldr	r1, [pc, #160]	@ (8027444 <_dtoa_r+0x5d4>)
 80273a2:	2000      	movs	r0, #0
 80273a4:	f7d9 fa3a 	bl	800081c <__aeabi_ddiv>
 80273a8:	4633      	mov	r3, r6
 80273aa:	462a      	mov	r2, r5
 80273ac:	f7d8 ff54 	bl	8000258 <__aeabi_dsub>
 80273b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80273b4:	4656      	mov	r6, sl
 80273b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80273ba:	f7d9 fbb5 	bl	8000b28 <__aeabi_d2iz>
 80273be:	4605      	mov	r5, r0
 80273c0:	f7d9 f898 	bl	80004f4 <__aeabi_i2d>
 80273c4:	4602      	mov	r2, r0
 80273c6:	460b      	mov	r3, r1
 80273c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80273cc:	f7d8 ff44 	bl	8000258 <__aeabi_dsub>
 80273d0:	3530      	adds	r5, #48	@ 0x30
 80273d2:	4602      	mov	r2, r0
 80273d4:	460b      	mov	r3, r1
 80273d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80273da:	f806 5b01 	strb.w	r5, [r6], #1
 80273de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80273e2:	f7d9 fb63 	bl	8000aac <__aeabi_dcmplt>
 80273e6:	2800      	cmp	r0, #0
 80273e8:	d171      	bne.n	80274ce <_dtoa_r+0x65e>
 80273ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80273ee:	4911      	ldr	r1, [pc, #68]	@ (8027434 <_dtoa_r+0x5c4>)
 80273f0:	2000      	movs	r0, #0
 80273f2:	f7d8 ff31 	bl	8000258 <__aeabi_dsub>
 80273f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80273fa:	f7d9 fb57 	bl	8000aac <__aeabi_dcmplt>
 80273fe:	2800      	cmp	r0, #0
 8027400:	f040 8095 	bne.w	802752e <_dtoa_r+0x6be>
 8027404:	42a6      	cmp	r6, r4
 8027406:	f43f af50 	beq.w	80272aa <_dtoa_r+0x43a>
 802740a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802740e:	4b0a      	ldr	r3, [pc, #40]	@ (8027438 <_dtoa_r+0x5c8>)
 8027410:	2200      	movs	r2, #0
 8027412:	f7d9 f8d9 	bl	80005c8 <__aeabi_dmul>
 8027416:	4b08      	ldr	r3, [pc, #32]	@ (8027438 <_dtoa_r+0x5c8>)
 8027418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802741c:	2200      	movs	r2, #0
 802741e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8027422:	f7d9 f8d1 	bl	80005c8 <__aeabi_dmul>
 8027426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802742a:	e7c4      	b.n	80273b6 <_dtoa_r+0x546>
 802742c:	0802f150 	.word	0x0802f150
 8027430:	0802f128 	.word	0x0802f128
 8027434:	3ff00000 	.word	0x3ff00000
 8027438:	40240000 	.word	0x40240000
 802743c:	401c0000 	.word	0x401c0000
 8027440:	40140000 	.word	0x40140000
 8027444:	3fe00000 	.word	0x3fe00000
 8027448:	4631      	mov	r1, r6
 802744a:	4628      	mov	r0, r5
 802744c:	f7d9 f8bc 	bl	80005c8 <__aeabi_dmul>
 8027450:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8027454:	9415      	str	r4, [sp, #84]	@ 0x54
 8027456:	4656      	mov	r6, sl
 8027458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802745c:	f7d9 fb64 	bl	8000b28 <__aeabi_d2iz>
 8027460:	4605      	mov	r5, r0
 8027462:	f7d9 f847 	bl	80004f4 <__aeabi_i2d>
 8027466:	4602      	mov	r2, r0
 8027468:	460b      	mov	r3, r1
 802746a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802746e:	f7d8 fef3 	bl	8000258 <__aeabi_dsub>
 8027472:	3530      	adds	r5, #48	@ 0x30
 8027474:	f806 5b01 	strb.w	r5, [r6], #1
 8027478:	4602      	mov	r2, r0
 802747a:	460b      	mov	r3, r1
 802747c:	42a6      	cmp	r6, r4
 802747e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8027482:	f04f 0200 	mov.w	r2, #0
 8027486:	d124      	bne.n	80274d2 <_dtoa_r+0x662>
 8027488:	4bac      	ldr	r3, [pc, #688]	@ (802773c <_dtoa_r+0x8cc>)
 802748a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802748e:	f7d8 fee5 	bl	800025c <__adddf3>
 8027492:	4602      	mov	r2, r0
 8027494:	460b      	mov	r3, r1
 8027496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802749a:	f7d9 fb25 	bl	8000ae8 <__aeabi_dcmpgt>
 802749e:	2800      	cmp	r0, #0
 80274a0:	d145      	bne.n	802752e <_dtoa_r+0x6be>
 80274a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80274a6:	49a5      	ldr	r1, [pc, #660]	@ (802773c <_dtoa_r+0x8cc>)
 80274a8:	2000      	movs	r0, #0
 80274aa:	f7d8 fed5 	bl	8000258 <__aeabi_dsub>
 80274ae:	4602      	mov	r2, r0
 80274b0:	460b      	mov	r3, r1
 80274b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80274b6:	f7d9 faf9 	bl	8000aac <__aeabi_dcmplt>
 80274ba:	2800      	cmp	r0, #0
 80274bc:	f43f aef5 	beq.w	80272aa <_dtoa_r+0x43a>
 80274c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80274c2:	1e73      	subs	r3, r6, #1
 80274c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80274c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80274ca:	2b30      	cmp	r3, #48	@ 0x30
 80274cc:	d0f8      	beq.n	80274c0 <_dtoa_r+0x650>
 80274ce:	9f04      	ldr	r7, [sp, #16]
 80274d0:	e73e      	b.n	8027350 <_dtoa_r+0x4e0>
 80274d2:	4b9b      	ldr	r3, [pc, #620]	@ (8027740 <_dtoa_r+0x8d0>)
 80274d4:	f7d9 f878 	bl	80005c8 <__aeabi_dmul>
 80274d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80274dc:	e7bc      	b.n	8027458 <_dtoa_r+0x5e8>
 80274de:	d10c      	bne.n	80274fa <_dtoa_r+0x68a>
 80274e0:	4b98      	ldr	r3, [pc, #608]	@ (8027744 <_dtoa_r+0x8d4>)
 80274e2:	2200      	movs	r2, #0
 80274e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80274e8:	f7d9 f86e 	bl	80005c8 <__aeabi_dmul>
 80274ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80274f0:	f7d9 faf0 	bl	8000ad4 <__aeabi_dcmpge>
 80274f4:	2800      	cmp	r0, #0
 80274f6:	f000 8157 	beq.w	80277a8 <_dtoa_r+0x938>
 80274fa:	2400      	movs	r4, #0
 80274fc:	4625      	mov	r5, r4
 80274fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027500:	43db      	mvns	r3, r3
 8027502:	9304      	str	r3, [sp, #16]
 8027504:	4656      	mov	r6, sl
 8027506:	2700      	movs	r7, #0
 8027508:	4621      	mov	r1, r4
 802750a:	4658      	mov	r0, fp
 802750c:	f000 fafe 	bl	8027b0c <_Bfree>
 8027510:	2d00      	cmp	r5, #0
 8027512:	d0dc      	beq.n	80274ce <_dtoa_r+0x65e>
 8027514:	b12f      	cbz	r7, 8027522 <_dtoa_r+0x6b2>
 8027516:	42af      	cmp	r7, r5
 8027518:	d003      	beq.n	8027522 <_dtoa_r+0x6b2>
 802751a:	4639      	mov	r1, r7
 802751c:	4658      	mov	r0, fp
 802751e:	f000 faf5 	bl	8027b0c <_Bfree>
 8027522:	4629      	mov	r1, r5
 8027524:	4658      	mov	r0, fp
 8027526:	f000 faf1 	bl	8027b0c <_Bfree>
 802752a:	e7d0      	b.n	80274ce <_dtoa_r+0x65e>
 802752c:	9704      	str	r7, [sp, #16]
 802752e:	4633      	mov	r3, r6
 8027530:	461e      	mov	r6, r3
 8027532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8027536:	2a39      	cmp	r2, #57	@ 0x39
 8027538:	d107      	bne.n	802754a <_dtoa_r+0x6da>
 802753a:	459a      	cmp	sl, r3
 802753c:	d1f8      	bne.n	8027530 <_dtoa_r+0x6c0>
 802753e:	9a04      	ldr	r2, [sp, #16]
 8027540:	3201      	adds	r2, #1
 8027542:	9204      	str	r2, [sp, #16]
 8027544:	2230      	movs	r2, #48	@ 0x30
 8027546:	f88a 2000 	strb.w	r2, [sl]
 802754a:	781a      	ldrb	r2, [r3, #0]
 802754c:	3201      	adds	r2, #1
 802754e:	701a      	strb	r2, [r3, #0]
 8027550:	e7bd      	b.n	80274ce <_dtoa_r+0x65e>
 8027552:	4b7b      	ldr	r3, [pc, #492]	@ (8027740 <_dtoa_r+0x8d0>)
 8027554:	2200      	movs	r2, #0
 8027556:	f7d9 f837 	bl	80005c8 <__aeabi_dmul>
 802755a:	2200      	movs	r2, #0
 802755c:	2300      	movs	r3, #0
 802755e:	4604      	mov	r4, r0
 8027560:	460d      	mov	r5, r1
 8027562:	f7d9 fa99 	bl	8000a98 <__aeabi_dcmpeq>
 8027566:	2800      	cmp	r0, #0
 8027568:	f43f aebb 	beq.w	80272e2 <_dtoa_r+0x472>
 802756c:	e6f0      	b.n	8027350 <_dtoa_r+0x4e0>
 802756e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8027570:	2a00      	cmp	r2, #0
 8027572:	f000 80db 	beq.w	802772c <_dtoa_r+0x8bc>
 8027576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027578:	2a01      	cmp	r2, #1
 802757a:	f300 80bf 	bgt.w	80276fc <_dtoa_r+0x88c>
 802757e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027580:	2a00      	cmp	r2, #0
 8027582:	f000 80b7 	beq.w	80276f4 <_dtoa_r+0x884>
 8027586:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802758a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802758c:	4646      	mov	r6, r8
 802758e:	9a08      	ldr	r2, [sp, #32]
 8027590:	2101      	movs	r1, #1
 8027592:	441a      	add	r2, r3
 8027594:	4658      	mov	r0, fp
 8027596:	4498      	add	r8, r3
 8027598:	9208      	str	r2, [sp, #32]
 802759a:	f000 fb6b 	bl	8027c74 <__i2b>
 802759e:	4605      	mov	r5, r0
 80275a0:	b15e      	cbz	r6, 80275ba <_dtoa_r+0x74a>
 80275a2:	9b08      	ldr	r3, [sp, #32]
 80275a4:	2b00      	cmp	r3, #0
 80275a6:	dd08      	ble.n	80275ba <_dtoa_r+0x74a>
 80275a8:	42b3      	cmp	r3, r6
 80275aa:	9a08      	ldr	r2, [sp, #32]
 80275ac:	bfa8      	it	ge
 80275ae:	4633      	movge	r3, r6
 80275b0:	eba8 0803 	sub.w	r8, r8, r3
 80275b4:	1af6      	subs	r6, r6, r3
 80275b6:	1ad3      	subs	r3, r2, r3
 80275b8:	9308      	str	r3, [sp, #32]
 80275ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80275bc:	b1f3      	cbz	r3, 80275fc <_dtoa_r+0x78c>
 80275be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80275c0:	2b00      	cmp	r3, #0
 80275c2:	f000 80b7 	beq.w	8027734 <_dtoa_r+0x8c4>
 80275c6:	b18c      	cbz	r4, 80275ec <_dtoa_r+0x77c>
 80275c8:	4629      	mov	r1, r5
 80275ca:	4622      	mov	r2, r4
 80275cc:	4658      	mov	r0, fp
 80275ce:	f000 fc11 	bl	8027df4 <__pow5mult>
 80275d2:	464a      	mov	r2, r9
 80275d4:	4601      	mov	r1, r0
 80275d6:	4605      	mov	r5, r0
 80275d8:	4658      	mov	r0, fp
 80275da:	f000 fb61 	bl	8027ca0 <__multiply>
 80275de:	4649      	mov	r1, r9
 80275e0:	9004      	str	r0, [sp, #16]
 80275e2:	4658      	mov	r0, fp
 80275e4:	f000 fa92 	bl	8027b0c <_Bfree>
 80275e8:	9b04      	ldr	r3, [sp, #16]
 80275ea:	4699      	mov	r9, r3
 80275ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80275ee:	1b1a      	subs	r2, r3, r4
 80275f0:	d004      	beq.n	80275fc <_dtoa_r+0x78c>
 80275f2:	4649      	mov	r1, r9
 80275f4:	4658      	mov	r0, fp
 80275f6:	f000 fbfd 	bl	8027df4 <__pow5mult>
 80275fa:	4681      	mov	r9, r0
 80275fc:	2101      	movs	r1, #1
 80275fe:	4658      	mov	r0, fp
 8027600:	f000 fb38 	bl	8027c74 <__i2b>
 8027604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027606:	4604      	mov	r4, r0
 8027608:	2b00      	cmp	r3, #0
 802760a:	f000 81cf 	beq.w	80279ac <_dtoa_r+0xb3c>
 802760e:	461a      	mov	r2, r3
 8027610:	4601      	mov	r1, r0
 8027612:	4658      	mov	r0, fp
 8027614:	f000 fbee 	bl	8027df4 <__pow5mult>
 8027618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802761a:	2b01      	cmp	r3, #1
 802761c:	4604      	mov	r4, r0
 802761e:	f300 8095 	bgt.w	802774c <_dtoa_r+0x8dc>
 8027622:	9b02      	ldr	r3, [sp, #8]
 8027624:	2b00      	cmp	r3, #0
 8027626:	f040 8087 	bne.w	8027738 <_dtoa_r+0x8c8>
 802762a:	9b03      	ldr	r3, [sp, #12]
 802762c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8027630:	2b00      	cmp	r3, #0
 8027632:	f040 8089 	bne.w	8027748 <_dtoa_r+0x8d8>
 8027636:	9b03      	ldr	r3, [sp, #12]
 8027638:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802763c:	0d1b      	lsrs	r3, r3, #20
 802763e:	051b      	lsls	r3, r3, #20
 8027640:	b12b      	cbz	r3, 802764e <_dtoa_r+0x7de>
 8027642:	9b08      	ldr	r3, [sp, #32]
 8027644:	3301      	adds	r3, #1
 8027646:	9308      	str	r3, [sp, #32]
 8027648:	f108 0801 	add.w	r8, r8, #1
 802764c:	2301      	movs	r3, #1
 802764e:	930a      	str	r3, [sp, #40]	@ 0x28
 8027650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027652:	2b00      	cmp	r3, #0
 8027654:	f000 81b0 	beq.w	80279b8 <_dtoa_r+0xb48>
 8027658:	6923      	ldr	r3, [r4, #16]
 802765a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802765e:	6918      	ldr	r0, [r3, #16]
 8027660:	f000 fabc 	bl	8027bdc <__hi0bits>
 8027664:	f1c0 0020 	rsb	r0, r0, #32
 8027668:	9b08      	ldr	r3, [sp, #32]
 802766a:	4418      	add	r0, r3
 802766c:	f010 001f 	ands.w	r0, r0, #31
 8027670:	d077      	beq.n	8027762 <_dtoa_r+0x8f2>
 8027672:	f1c0 0320 	rsb	r3, r0, #32
 8027676:	2b04      	cmp	r3, #4
 8027678:	dd6b      	ble.n	8027752 <_dtoa_r+0x8e2>
 802767a:	9b08      	ldr	r3, [sp, #32]
 802767c:	f1c0 001c 	rsb	r0, r0, #28
 8027680:	4403      	add	r3, r0
 8027682:	4480      	add	r8, r0
 8027684:	4406      	add	r6, r0
 8027686:	9308      	str	r3, [sp, #32]
 8027688:	f1b8 0f00 	cmp.w	r8, #0
 802768c:	dd05      	ble.n	802769a <_dtoa_r+0x82a>
 802768e:	4649      	mov	r1, r9
 8027690:	4642      	mov	r2, r8
 8027692:	4658      	mov	r0, fp
 8027694:	f000 fc08 	bl	8027ea8 <__lshift>
 8027698:	4681      	mov	r9, r0
 802769a:	9b08      	ldr	r3, [sp, #32]
 802769c:	2b00      	cmp	r3, #0
 802769e:	dd05      	ble.n	80276ac <_dtoa_r+0x83c>
 80276a0:	4621      	mov	r1, r4
 80276a2:	461a      	mov	r2, r3
 80276a4:	4658      	mov	r0, fp
 80276a6:	f000 fbff 	bl	8027ea8 <__lshift>
 80276aa:	4604      	mov	r4, r0
 80276ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80276ae:	2b00      	cmp	r3, #0
 80276b0:	d059      	beq.n	8027766 <_dtoa_r+0x8f6>
 80276b2:	4621      	mov	r1, r4
 80276b4:	4648      	mov	r0, r9
 80276b6:	f000 fc63 	bl	8027f80 <__mcmp>
 80276ba:	2800      	cmp	r0, #0
 80276bc:	da53      	bge.n	8027766 <_dtoa_r+0x8f6>
 80276be:	1e7b      	subs	r3, r7, #1
 80276c0:	9304      	str	r3, [sp, #16]
 80276c2:	4649      	mov	r1, r9
 80276c4:	2300      	movs	r3, #0
 80276c6:	220a      	movs	r2, #10
 80276c8:	4658      	mov	r0, fp
 80276ca:	f000 fa41 	bl	8027b50 <__multadd>
 80276ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80276d0:	4681      	mov	r9, r0
 80276d2:	2b00      	cmp	r3, #0
 80276d4:	f000 8172 	beq.w	80279bc <_dtoa_r+0xb4c>
 80276d8:	2300      	movs	r3, #0
 80276da:	4629      	mov	r1, r5
 80276dc:	220a      	movs	r2, #10
 80276de:	4658      	mov	r0, fp
 80276e0:	f000 fa36 	bl	8027b50 <__multadd>
 80276e4:	9b00      	ldr	r3, [sp, #0]
 80276e6:	2b00      	cmp	r3, #0
 80276e8:	4605      	mov	r5, r0
 80276ea:	dc67      	bgt.n	80277bc <_dtoa_r+0x94c>
 80276ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80276ee:	2b02      	cmp	r3, #2
 80276f0:	dc41      	bgt.n	8027776 <_dtoa_r+0x906>
 80276f2:	e063      	b.n	80277bc <_dtoa_r+0x94c>
 80276f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80276f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80276fa:	e746      	b.n	802758a <_dtoa_r+0x71a>
 80276fc:	9b07      	ldr	r3, [sp, #28]
 80276fe:	1e5c      	subs	r4, r3, #1
 8027700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027702:	42a3      	cmp	r3, r4
 8027704:	bfbf      	itttt	lt
 8027706:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8027708:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802770a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802770c:	1ae3      	sublt	r3, r4, r3
 802770e:	bfb4      	ite	lt
 8027710:	18d2      	addlt	r2, r2, r3
 8027712:	1b1c      	subge	r4, r3, r4
 8027714:	9b07      	ldr	r3, [sp, #28]
 8027716:	bfbc      	itt	lt
 8027718:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802771a:	2400      	movlt	r4, #0
 802771c:	2b00      	cmp	r3, #0
 802771e:	bfb5      	itete	lt
 8027720:	eba8 0603 	sublt.w	r6, r8, r3
 8027724:	9b07      	ldrge	r3, [sp, #28]
 8027726:	2300      	movlt	r3, #0
 8027728:	4646      	movge	r6, r8
 802772a:	e730      	b.n	802758e <_dtoa_r+0x71e>
 802772c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802772e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8027730:	4646      	mov	r6, r8
 8027732:	e735      	b.n	80275a0 <_dtoa_r+0x730>
 8027734:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8027736:	e75c      	b.n	80275f2 <_dtoa_r+0x782>
 8027738:	2300      	movs	r3, #0
 802773a:	e788      	b.n	802764e <_dtoa_r+0x7de>
 802773c:	3fe00000 	.word	0x3fe00000
 8027740:	40240000 	.word	0x40240000
 8027744:	40140000 	.word	0x40140000
 8027748:	9b02      	ldr	r3, [sp, #8]
 802774a:	e780      	b.n	802764e <_dtoa_r+0x7de>
 802774c:	2300      	movs	r3, #0
 802774e:	930a      	str	r3, [sp, #40]	@ 0x28
 8027750:	e782      	b.n	8027658 <_dtoa_r+0x7e8>
 8027752:	d099      	beq.n	8027688 <_dtoa_r+0x818>
 8027754:	9a08      	ldr	r2, [sp, #32]
 8027756:	331c      	adds	r3, #28
 8027758:	441a      	add	r2, r3
 802775a:	4498      	add	r8, r3
 802775c:	441e      	add	r6, r3
 802775e:	9208      	str	r2, [sp, #32]
 8027760:	e792      	b.n	8027688 <_dtoa_r+0x818>
 8027762:	4603      	mov	r3, r0
 8027764:	e7f6      	b.n	8027754 <_dtoa_r+0x8e4>
 8027766:	9b07      	ldr	r3, [sp, #28]
 8027768:	9704      	str	r7, [sp, #16]
 802776a:	2b00      	cmp	r3, #0
 802776c:	dc20      	bgt.n	80277b0 <_dtoa_r+0x940>
 802776e:	9300      	str	r3, [sp, #0]
 8027770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027772:	2b02      	cmp	r3, #2
 8027774:	dd1e      	ble.n	80277b4 <_dtoa_r+0x944>
 8027776:	9b00      	ldr	r3, [sp, #0]
 8027778:	2b00      	cmp	r3, #0
 802777a:	f47f aec0 	bne.w	80274fe <_dtoa_r+0x68e>
 802777e:	4621      	mov	r1, r4
 8027780:	2205      	movs	r2, #5
 8027782:	4658      	mov	r0, fp
 8027784:	f000 f9e4 	bl	8027b50 <__multadd>
 8027788:	4601      	mov	r1, r0
 802778a:	4604      	mov	r4, r0
 802778c:	4648      	mov	r0, r9
 802778e:	f000 fbf7 	bl	8027f80 <__mcmp>
 8027792:	2800      	cmp	r0, #0
 8027794:	f77f aeb3 	ble.w	80274fe <_dtoa_r+0x68e>
 8027798:	4656      	mov	r6, sl
 802779a:	2331      	movs	r3, #49	@ 0x31
 802779c:	f806 3b01 	strb.w	r3, [r6], #1
 80277a0:	9b04      	ldr	r3, [sp, #16]
 80277a2:	3301      	adds	r3, #1
 80277a4:	9304      	str	r3, [sp, #16]
 80277a6:	e6ae      	b.n	8027506 <_dtoa_r+0x696>
 80277a8:	9c07      	ldr	r4, [sp, #28]
 80277aa:	9704      	str	r7, [sp, #16]
 80277ac:	4625      	mov	r5, r4
 80277ae:	e7f3      	b.n	8027798 <_dtoa_r+0x928>
 80277b0:	9b07      	ldr	r3, [sp, #28]
 80277b2:	9300      	str	r3, [sp, #0]
 80277b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80277b6:	2b00      	cmp	r3, #0
 80277b8:	f000 8104 	beq.w	80279c4 <_dtoa_r+0xb54>
 80277bc:	2e00      	cmp	r6, #0
 80277be:	dd05      	ble.n	80277cc <_dtoa_r+0x95c>
 80277c0:	4629      	mov	r1, r5
 80277c2:	4632      	mov	r2, r6
 80277c4:	4658      	mov	r0, fp
 80277c6:	f000 fb6f 	bl	8027ea8 <__lshift>
 80277ca:	4605      	mov	r5, r0
 80277cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80277ce:	2b00      	cmp	r3, #0
 80277d0:	d05a      	beq.n	8027888 <_dtoa_r+0xa18>
 80277d2:	6869      	ldr	r1, [r5, #4]
 80277d4:	4658      	mov	r0, fp
 80277d6:	f000 f959 	bl	8027a8c <_Balloc>
 80277da:	4606      	mov	r6, r0
 80277dc:	b928      	cbnz	r0, 80277ea <_dtoa_r+0x97a>
 80277de:	4b84      	ldr	r3, [pc, #528]	@ (80279f0 <_dtoa_r+0xb80>)
 80277e0:	4602      	mov	r2, r0
 80277e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80277e6:	f7ff bb5a 	b.w	8026e9e <_dtoa_r+0x2e>
 80277ea:	692a      	ldr	r2, [r5, #16]
 80277ec:	3202      	adds	r2, #2
 80277ee:	0092      	lsls	r2, r2, #2
 80277f0:	f105 010c 	add.w	r1, r5, #12
 80277f4:	300c      	adds	r0, #12
 80277f6:	f7ff fa9c 	bl	8026d32 <memcpy>
 80277fa:	2201      	movs	r2, #1
 80277fc:	4631      	mov	r1, r6
 80277fe:	4658      	mov	r0, fp
 8027800:	f000 fb52 	bl	8027ea8 <__lshift>
 8027804:	f10a 0301 	add.w	r3, sl, #1
 8027808:	9307      	str	r3, [sp, #28]
 802780a:	9b00      	ldr	r3, [sp, #0]
 802780c:	4453      	add	r3, sl
 802780e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027810:	9b02      	ldr	r3, [sp, #8]
 8027812:	f003 0301 	and.w	r3, r3, #1
 8027816:	462f      	mov	r7, r5
 8027818:	930a      	str	r3, [sp, #40]	@ 0x28
 802781a:	4605      	mov	r5, r0
 802781c:	9b07      	ldr	r3, [sp, #28]
 802781e:	4621      	mov	r1, r4
 8027820:	3b01      	subs	r3, #1
 8027822:	4648      	mov	r0, r9
 8027824:	9300      	str	r3, [sp, #0]
 8027826:	f7ff fa99 	bl	8026d5c <quorem>
 802782a:	4639      	mov	r1, r7
 802782c:	9002      	str	r0, [sp, #8]
 802782e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8027832:	4648      	mov	r0, r9
 8027834:	f000 fba4 	bl	8027f80 <__mcmp>
 8027838:	462a      	mov	r2, r5
 802783a:	9008      	str	r0, [sp, #32]
 802783c:	4621      	mov	r1, r4
 802783e:	4658      	mov	r0, fp
 8027840:	f000 fbba 	bl	8027fb8 <__mdiff>
 8027844:	68c2      	ldr	r2, [r0, #12]
 8027846:	4606      	mov	r6, r0
 8027848:	bb02      	cbnz	r2, 802788c <_dtoa_r+0xa1c>
 802784a:	4601      	mov	r1, r0
 802784c:	4648      	mov	r0, r9
 802784e:	f000 fb97 	bl	8027f80 <__mcmp>
 8027852:	4602      	mov	r2, r0
 8027854:	4631      	mov	r1, r6
 8027856:	4658      	mov	r0, fp
 8027858:	920e      	str	r2, [sp, #56]	@ 0x38
 802785a:	f000 f957 	bl	8027b0c <_Bfree>
 802785e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027860:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8027862:	9e07      	ldr	r6, [sp, #28]
 8027864:	ea43 0102 	orr.w	r1, r3, r2
 8027868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802786a:	4319      	orrs	r1, r3
 802786c:	d110      	bne.n	8027890 <_dtoa_r+0xa20>
 802786e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8027872:	d029      	beq.n	80278c8 <_dtoa_r+0xa58>
 8027874:	9b08      	ldr	r3, [sp, #32]
 8027876:	2b00      	cmp	r3, #0
 8027878:	dd02      	ble.n	8027880 <_dtoa_r+0xa10>
 802787a:	9b02      	ldr	r3, [sp, #8]
 802787c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8027880:	9b00      	ldr	r3, [sp, #0]
 8027882:	f883 8000 	strb.w	r8, [r3]
 8027886:	e63f      	b.n	8027508 <_dtoa_r+0x698>
 8027888:	4628      	mov	r0, r5
 802788a:	e7bb      	b.n	8027804 <_dtoa_r+0x994>
 802788c:	2201      	movs	r2, #1
 802788e:	e7e1      	b.n	8027854 <_dtoa_r+0x9e4>
 8027890:	9b08      	ldr	r3, [sp, #32]
 8027892:	2b00      	cmp	r3, #0
 8027894:	db04      	blt.n	80278a0 <_dtoa_r+0xa30>
 8027896:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027898:	430b      	orrs	r3, r1
 802789a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802789c:	430b      	orrs	r3, r1
 802789e:	d120      	bne.n	80278e2 <_dtoa_r+0xa72>
 80278a0:	2a00      	cmp	r2, #0
 80278a2:	dded      	ble.n	8027880 <_dtoa_r+0xa10>
 80278a4:	4649      	mov	r1, r9
 80278a6:	2201      	movs	r2, #1
 80278a8:	4658      	mov	r0, fp
 80278aa:	f000 fafd 	bl	8027ea8 <__lshift>
 80278ae:	4621      	mov	r1, r4
 80278b0:	4681      	mov	r9, r0
 80278b2:	f000 fb65 	bl	8027f80 <__mcmp>
 80278b6:	2800      	cmp	r0, #0
 80278b8:	dc03      	bgt.n	80278c2 <_dtoa_r+0xa52>
 80278ba:	d1e1      	bne.n	8027880 <_dtoa_r+0xa10>
 80278bc:	f018 0f01 	tst.w	r8, #1
 80278c0:	d0de      	beq.n	8027880 <_dtoa_r+0xa10>
 80278c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80278c6:	d1d8      	bne.n	802787a <_dtoa_r+0xa0a>
 80278c8:	9a00      	ldr	r2, [sp, #0]
 80278ca:	2339      	movs	r3, #57	@ 0x39
 80278cc:	7013      	strb	r3, [r2, #0]
 80278ce:	4633      	mov	r3, r6
 80278d0:	461e      	mov	r6, r3
 80278d2:	3b01      	subs	r3, #1
 80278d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80278d8:	2a39      	cmp	r2, #57	@ 0x39
 80278da:	d052      	beq.n	8027982 <_dtoa_r+0xb12>
 80278dc:	3201      	adds	r2, #1
 80278de:	701a      	strb	r2, [r3, #0]
 80278e0:	e612      	b.n	8027508 <_dtoa_r+0x698>
 80278e2:	2a00      	cmp	r2, #0
 80278e4:	dd07      	ble.n	80278f6 <_dtoa_r+0xa86>
 80278e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80278ea:	d0ed      	beq.n	80278c8 <_dtoa_r+0xa58>
 80278ec:	9a00      	ldr	r2, [sp, #0]
 80278ee:	f108 0301 	add.w	r3, r8, #1
 80278f2:	7013      	strb	r3, [r2, #0]
 80278f4:	e608      	b.n	8027508 <_dtoa_r+0x698>
 80278f6:	9b07      	ldr	r3, [sp, #28]
 80278f8:	9a07      	ldr	r2, [sp, #28]
 80278fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80278fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8027900:	4293      	cmp	r3, r2
 8027902:	d028      	beq.n	8027956 <_dtoa_r+0xae6>
 8027904:	4649      	mov	r1, r9
 8027906:	2300      	movs	r3, #0
 8027908:	220a      	movs	r2, #10
 802790a:	4658      	mov	r0, fp
 802790c:	f000 f920 	bl	8027b50 <__multadd>
 8027910:	42af      	cmp	r7, r5
 8027912:	4681      	mov	r9, r0
 8027914:	f04f 0300 	mov.w	r3, #0
 8027918:	f04f 020a 	mov.w	r2, #10
 802791c:	4639      	mov	r1, r7
 802791e:	4658      	mov	r0, fp
 8027920:	d107      	bne.n	8027932 <_dtoa_r+0xac2>
 8027922:	f000 f915 	bl	8027b50 <__multadd>
 8027926:	4607      	mov	r7, r0
 8027928:	4605      	mov	r5, r0
 802792a:	9b07      	ldr	r3, [sp, #28]
 802792c:	3301      	adds	r3, #1
 802792e:	9307      	str	r3, [sp, #28]
 8027930:	e774      	b.n	802781c <_dtoa_r+0x9ac>
 8027932:	f000 f90d 	bl	8027b50 <__multadd>
 8027936:	4629      	mov	r1, r5
 8027938:	4607      	mov	r7, r0
 802793a:	2300      	movs	r3, #0
 802793c:	220a      	movs	r2, #10
 802793e:	4658      	mov	r0, fp
 8027940:	f000 f906 	bl	8027b50 <__multadd>
 8027944:	4605      	mov	r5, r0
 8027946:	e7f0      	b.n	802792a <_dtoa_r+0xaba>
 8027948:	9b00      	ldr	r3, [sp, #0]
 802794a:	2b00      	cmp	r3, #0
 802794c:	bfcc      	ite	gt
 802794e:	461e      	movgt	r6, r3
 8027950:	2601      	movle	r6, #1
 8027952:	4456      	add	r6, sl
 8027954:	2700      	movs	r7, #0
 8027956:	4649      	mov	r1, r9
 8027958:	2201      	movs	r2, #1
 802795a:	4658      	mov	r0, fp
 802795c:	f000 faa4 	bl	8027ea8 <__lshift>
 8027960:	4621      	mov	r1, r4
 8027962:	4681      	mov	r9, r0
 8027964:	f000 fb0c 	bl	8027f80 <__mcmp>
 8027968:	2800      	cmp	r0, #0
 802796a:	dcb0      	bgt.n	80278ce <_dtoa_r+0xa5e>
 802796c:	d102      	bne.n	8027974 <_dtoa_r+0xb04>
 802796e:	f018 0f01 	tst.w	r8, #1
 8027972:	d1ac      	bne.n	80278ce <_dtoa_r+0xa5e>
 8027974:	4633      	mov	r3, r6
 8027976:	461e      	mov	r6, r3
 8027978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802797c:	2a30      	cmp	r2, #48	@ 0x30
 802797e:	d0fa      	beq.n	8027976 <_dtoa_r+0xb06>
 8027980:	e5c2      	b.n	8027508 <_dtoa_r+0x698>
 8027982:	459a      	cmp	sl, r3
 8027984:	d1a4      	bne.n	80278d0 <_dtoa_r+0xa60>
 8027986:	9b04      	ldr	r3, [sp, #16]
 8027988:	3301      	adds	r3, #1
 802798a:	9304      	str	r3, [sp, #16]
 802798c:	2331      	movs	r3, #49	@ 0x31
 802798e:	f88a 3000 	strb.w	r3, [sl]
 8027992:	e5b9      	b.n	8027508 <_dtoa_r+0x698>
 8027994:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8027996:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80279f4 <_dtoa_r+0xb84>
 802799a:	b11b      	cbz	r3, 80279a4 <_dtoa_r+0xb34>
 802799c:	f10a 0308 	add.w	r3, sl, #8
 80279a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80279a2:	6013      	str	r3, [r2, #0]
 80279a4:	4650      	mov	r0, sl
 80279a6:	b019      	add	sp, #100	@ 0x64
 80279a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80279ae:	2b01      	cmp	r3, #1
 80279b0:	f77f ae37 	ble.w	8027622 <_dtoa_r+0x7b2>
 80279b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80279b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80279b8:	2001      	movs	r0, #1
 80279ba:	e655      	b.n	8027668 <_dtoa_r+0x7f8>
 80279bc:	9b00      	ldr	r3, [sp, #0]
 80279be:	2b00      	cmp	r3, #0
 80279c0:	f77f aed6 	ble.w	8027770 <_dtoa_r+0x900>
 80279c4:	4656      	mov	r6, sl
 80279c6:	4621      	mov	r1, r4
 80279c8:	4648      	mov	r0, r9
 80279ca:	f7ff f9c7 	bl	8026d5c <quorem>
 80279ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80279d2:	f806 8b01 	strb.w	r8, [r6], #1
 80279d6:	9b00      	ldr	r3, [sp, #0]
 80279d8:	eba6 020a 	sub.w	r2, r6, sl
 80279dc:	4293      	cmp	r3, r2
 80279de:	ddb3      	ble.n	8027948 <_dtoa_r+0xad8>
 80279e0:	4649      	mov	r1, r9
 80279e2:	2300      	movs	r3, #0
 80279e4:	220a      	movs	r2, #10
 80279e6:	4658      	mov	r0, fp
 80279e8:	f000 f8b2 	bl	8027b50 <__multadd>
 80279ec:	4681      	mov	r9, r0
 80279ee:	e7ea      	b.n	80279c6 <_dtoa_r+0xb56>
 80279f0:	0802f0ac 	.word	0x0802f0ac
 80279f4:	0802f030 	.word	0x0802f030

080279f8 <_free_r>:
 80279f8:	b538      	push	{r3, r4, r5, lr}
 80279fa:	4605      	mov	r5, r0
 80279fc:	2900      	cmp	r1, #0
 80279fe:	d041      	beq.n	8027a84 <_free_r+0x8c>
 8027a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027a04:	1f0c      	subs	r4, r1, #4
 8027a06:	2b00      	cmp	r3, #0
 8027a08:	bfb8      	it	lt
 8027a0a:	18e4      	addlt	r4, r4, r3
 8027a0c:	f7fe fa0a 	bl	8025e24 <__malloc_lock>
 8027a10:	4a1d      	ldr	r2, [pc, #116]	@ (8027a88 <_free_r+0x90>)
 8027a12:	6813      	ldr	r3, [r2, #0]
 8027a14:	b933      	cbnz	r3, 8027a24 <_free_r+0x2c>
 8027a16:	6063      	str	r3, [r4, #4]
 8027a18:	6014      	str	r4, [r2, #0]
 8027a1a:	4628      	mov	r0, r5
 8027a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027a20:	f7fe ba06 	b.w	8025e30 <__malloc_unlock>
 8027a24:	42a3      	cmp	r3, r4
 8027a26:	d908      	bls.n	8027a3a <_free_r+0x42>
 8027a28:	6820      	ldr	r0, [r4, #0]
 8027a2a:	1821      	adds	r1, r4, r0
 8027a2c:	428b      	cmp	r3, r1
 8027a2e:	bf01      	itttt	eq
 8027a30:	6819      	ldreq	r1, [r3, #0]
 8027a32:	685b      	ldreq	r3, [r3, #4]
 8027a34:	1809      	addeq	r1, r1, r0
 8027a36:	6021      	streq	r1, [r4, #0]
 8027a38:	e7ed      	b.n	8027a16 <_free_r+0x1e>
 8027a3a:	461a      	mov	r2, r3
 8027a3c:	685b      	ldr	r3, [r3, #4]
 8027a3e:	b10b      	cbz	r3, 8027a44 <_free_r+0x4c>
 8027a40:	42a3      	cmp	r3, r4
 8027a42:	d9fa      	bls.n	8027a3a <_free_r+0x42>
 8027a44:	6811      	ldr	r1, [r2, #0]
 8027a46:	1850      	adds	r0, r2, r1
 8027a48:	42a0      	cmp	r0, r4
 8027a4a:	d10b      	bne.n	8027a64 <_free_r+0x6c>
 8027a4c:	6820      	ldr	r0, [r4, #0]
 8027a4e:	4401      	add	r1, r0
 8027a50:	1850      	adds	r0, r2, r1
 8027a52:	4283      	cmp	r3, r0
 8027a54:	6011      	str	r1, [r2, #0]
 8027a56:	d1e0      	bne.n	8027a1a <_free_r+0x22>
 8027a58:	6818      	ldr	r0, [r3, #0]
 8027a5a:	685b      	ldr	r3, [r3, #4]
 8027a5c:	6053      	str	r3, [r2, #4]
 8027a5e:	4408      	add	r0, r1
 8027a60:	6010      	str	r0, [r2, #0]
 8027a62:	e7da      	b.n	8027a1a <_free_r+0x22>
 8027a64:	d902      	bls.n	8027a6c <_free_r+0x74>
 8027a66:	230c      	movs	r3, #12
 8027a68:	602b      	str	r3, [r5, #0]
 8027a6a:	e7d6      	b.n	8027a1a <_free_r+0x22>
 8027a6c:	6820      	ldr	r0, [r4, #0]
 8027a6e:	1821      	adds	r1, r4, r0
 8027a70:	428b      	cmp	r3, r1
 8027a72:	bf04      	itt	eq
 8027a74:	6819      	ldreq	r1, [r3, #0]
 8027a76:	685b      	ldreq	r3, [r3, #4]
 8027a78:	6063      	str	r3, [r4, #4]
 8027a7a:	bf04      	itt	eq
 8027a7c:	1809      	addeq	r1, r1, r0
 8027a7e:	6021      	streq	r1, [r4, #0]
 8027a80:	6054      	str	r4, [r2, #4]
 8027a82:	e7ca      	b.n	8027a1a <_free_r+0x22>
 8027a84:	bd38      	pop	{r3, r4, r5, pc}
 8027a86:	bf00      	nop
 8027a88:	200080bc 	.word	0x200080bc

08027a8c <_Balloc>:
 8027a8c:	b570      	push	{r4, r5, r6, lr}
 8027a8e:	69c6      	ldr	r6, [r0, #28]
 8027a90:	4604      	mov	r4, r0
 8027a92:	460d      	mov	r5, r1
 8027a94:	b976      	cbnz	r6, 8027ab4 <_Balloc+0x28>
 8027a96:	2010      	movs	r0, #16
 8027a98:	f7fe f91a 	bl	8025cd0 <malloc>
 8027a9c:	4602      	mov	r2, r0
 8027a9e:	61e0      	str	r0, [r4, #28]
 8027aa0:	b920      	cbnz	r0, 8027aac <_Balloc+0x20>
 8027aa2:	4b18      	ldr	r3, [pc, #96]	@ (8027b04 <_Balloc+0x78>)
 8027aa4:	4818      	ldr	r0, [pc, #96]	@ (8027b08 <_Balloc+0x7c>)
 8027aa6:	216b      	movs	r1, #107	@ 0x6b
 8027aa8:	f7fe f8f4 	bl	8025c94 <__assert_func>
 8027aac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027ab0:	6006      	str	r6, [r0, #0]
 8027ab2:	60c6      	str	r6, [r0, #12]
 8027ab4:	69e6      	ldr	r6, [r4, #28]
 8027ab6:	68f3      	ldr	r3, [r6, #12]
 8027ab8:	b183      	cbz	r3, 8027adc <_Balloc+0x50>
 8027aba:	69e3      	ldr	r3, [r4, #28]
 8027abc:	68db      	ldr	r3, [r3, #12]
 8027abe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8027ac2:	b9b8      	cbnz	r0, 8027af4 <_Balloc+0x68>
 8027ac4:	2101      	movs	r1, #1
 8027ac6:	fa01 f605 	lsl.w	r6, r1, r5
 8027aca:	1d72      	adds	r2, r6, #5
 8027acc:	0092      	lsls	r2, r2, #2
 8027ace:	4620      	mov	r0, r4
 8027ad0:	f001 f9a2 	bl	8028e18 <_calloc_r>
 8027ad4:	b160      	cbz	r0, 8027af0 <_Balloc+0x64>
 8027ad6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8027ada:	e00e      	b.n	8027afa <_Balloc+0x6e>
 8027adc:	2221      	movs	r2, #33	@ 0x21
 8027ade:	2104      	movs	r1, #4
 8027ae0:	4620      	mov	r0, r4
 8027ae2:	f001 f999 	bl	8028e18 <_calloc_r>
 8027ae6:	69e3      	ldr	r3, [r4, #28]
 8027ae8:	60f0      	str	r0, [r6, #12]
 8027aea:	68db      	ldr	r3, [r3, #12]
 8027aec:	2b00      	cmp	r3, #0
 8027aee:	d1e4      	bne.n	8027aba <_Balloc+0x2e>
 8027af0:	2000      	movs	r0, #0
 8027af2:	bd70      	pop	{r4, r5, r6, pc}
 8027af4:	6802      	ldr	r2, [r0, #0]
 8027af6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8027afa:	2300      	movs	r3, #0
 8027afc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027b00:	e7f7      	b.n	8027af2 <_Balloc+0x66>
 8027b02:	bf00      	nop
 8027b04:	0802f03d 	.word	0x0802f03d
 8027b08:	0802f0bd 	.word	0x0802f0bd

08027b0c <_Bfree>:
 8027b0c:	b570      	push	{r4, r5, r6, lr}
 8027b0e:	69c6      	ldr	r6, [r0, #28]
 8027b10:	4605      	mov	r5, r0
 8027b12:	460c      	mov	r4, r1
 8027b14:	b976      	cbnz	r6, 8027b34 <_Bfree+0x28>
 8027b16:	2010      	movs	r0, #16
 8027b18:	f7fe f8da 	bl	8025cd0 <malloc>
 8027b1c:	4602      	mov	r2, r0
 8027b1e:	61e8      	str	r0, [r5, #28]
 8027b20:	b920      	cbnz	r0, 8027b2c <_Bfree+0x20>
 8027b22:	4b09      	ldr	r3, [pc, #36]	@ (8027b48 <_Bfree+0x3c>)
 8027b24:	4809      	ldr	r0, [pc, #36]	@ (8027b4c <_Bfree+0x40>)
 8027b26:	218f      	movs	r1, #143	@ 0x8f
 8027b28:	f7fe f8b4 	bl	8025c94 <__assert_func>
 8027b2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027b30:	6006      	str	r6, [r0, #0]
 8027b32:	60c6      	str	r6, [r0, #12]
 8027b34:	b13c      	cbz	r4, 8027b46 <_Bfree+0x3a>
 8027b36:	69eb      	ldr	r3, [r5, #28]
 8027b38:	6862      	ldr	r2, [r4, #4]
 8027b3a:	68db      	ldr	r3, [r3, #12]
 8027b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8027b40:	6021      	str	r1, [r4, #0]
 8027b42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8027b46:	bd70      	pop	{r4, r5, r6, pc}
 8027b48:	0802f03d 	.word	0x0802f03d
 8027b4c:	0802f0bd 	.word	0x0802f0bd

08027b50 <__multadd>:
 8027b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027b54:	690d      	ldr	r5, [r1, #16]
 8027b56:	4607      	mov	r7, r0
 8027b58:	460c      	mov	r4, r1
 8027b5a:	461e      	mov	r6, r3
 8027b5c:	f101 0c14 	add.w	ip, r1, #20
 8027b60:	2000      	movs	r0, #0
 8027b62:	f8dc 3000 	ldr.w	r3, [ip]
 8027b66:	b299      	uxth	r1, r3
 8027b68:	fb02 6101 	mla	r1, r2, r1, r6
 8027b6c:	0c1e      	lsrs	r6, r3, #16
 8027b6e:	0c0b      	lsrs	r3, r1, #16
 8027b70:	fb02 3306 	mla	r3, r2, r6, r3
 8027b74:	b289      	uxth	r1, r1
 8027b76:	3001      	adds	r0, #1
 8027b78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027b7c:	4285      	cmp	r5, r0
 8027b7e:	f84c 1b04 	str.w	r1, [ip], #4
 8027b82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8027b86:	dcec      	bgt.n	8027b62 <__multadd+0x12>
 8027b88:	b30e      	cbz	r6, 8027bce <__multadd+0x7e>
 8027b8a:	68a3      	ldr	r3, [r4, #8]
 8027b8c:	42ab      	cmp	r3, r5
 8027b8e:	dc19      	bgt.n	8027bc4 <__multadd+0x74>
 8027b90:	6861      	ldr	r1, [r4, #4]
 8027b92:	4638      	mov	r0, r7
 8027b94:	3101      	adds	r1, #1
 8027b96:	f7ff ff79 	bl	8027a8c <_Balloc>
 8027b9a:	4680      	mov	r8, r0
 8027b9c:	b928      	cbnz	r0, 8027baa <__multadd+0x5a>
 8027b9e:	4602      	mov	r2, r0
 8027ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8027bd4 <__multadd+0x84>)
 8027ba2:	480d      	ldr	r0, [pc, #52]	@ (8027bd8 <__multadd+0x88>)
 8027ba4:	21ba      	movs	r1, #186	@ 0xba
 8027ba6:	f7fe f875 	bl	8025c94 <__assert_func>
 8027baa:	6922      	ldr	r2, [r4, #16]
 8027bac:	3202      	adds	r2, #2
 8027bae:	f104 010c 	add.w	r1, r4, #12
 8027bb2:	0092      	lsls	r2, r2, #2
 8027bb4:	300c      	adds	r0, #12
 8027bb6:	f7ff f8bc 	bl	8026d32 <memcpy>
 8027bba:	4621      	mov	r1, r4
 8027bbc:	4638      	mov	r0, r7
 8027bbe:	f7ff ffa5 	bl	8027b0c <_Bfree>
 8027bc2:	4644      	mov	r4, r8
 8027bc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8027bc8:	3501      	adds	r5, #1
 8027bca:	615e      	str	r6, [r3, #20]
 8027bcc:	6125      	str	r5, [r4, #16]
 8027bce:	4620      	mov	r0, r4
 8027bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027bd4:	0802f0ac 	.word	0x0802f0ac
 8027bd8:	0802f0bd 	.word	0x0802f0bd

08027bdc <__hi0bits>:
 8027bdc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8027be0:	4603      	mov	r3, r0
 8027be2:	bf36      	itet	cc
 8027be4:	0403      	lslcc	r3, r0, #16
 8027be6:	2000      	movcs	r0, #0
 8027be8:	2010      	movcc	r0, #16
 8027bea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8027bee:	bf3c      	itt	cc
 8027bf0:	021b      	lslcc	r3, r3, #8
 8027bf2:	3008      	addcc	r0, #8
 8027bf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8027bf8:	bf3c      	itt	cc
 8027bfa:	011b      	lslcc	r3, r3, #4
 8027bfc:	3004      	addcc	r0, #4
 8027bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8027c02:	bf3c      	itt	cc
 8027c04:	009b      	lslcc	r3, r3, #2
 8027c06:	3002      	addcc	r0, #2
 8027c08:	2b00      	cmp	r3, #0
 8027c0a:	db05      	blt.n	8027c18 <__hi0bits+0x3c>
 8027c0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8027c10:	f100 0001 	add.w	r0, r0, #1
 8027c14:	bf08      	it	eq
 8027c16:	2020      	moveq	r0, #32
 8027c18:	4770      	bx	lr

08027c1a <__lo0bits>:
 8027c1a:	6803      	ldr	r3, [r0, #0]
 8027c1c:	4602      	mov	r2, r0
 8027c1e:	f013 0007 	ands.w	r0, r3, #7
 8027c22:	d00b      	beq.n	8027c3c <__lo0bits+0x22>
 8027c24:	07d9      	lsls	r1, r3, #31
 8027c26:	d421      	bmi.n	8027c6c <__lo0bits+0x52>
 8027c28:	0798      	lsls	r0, r3, #30
 8027c2a:	bf49      	itett	mi
 8027c2c:	085b      	lsrmi	r3, r3, #1
 8027c2e:	089b      	lsrpl	r3, r3, #2
 8027c30:	2001      	movmi	r0, #1
 8027c32:	6013      	strmi	r3, [r2, #0]
 8027c34:	bf5c      	itt	pl
 8027c36:	6013      	strpl	r3, [r2, #0]
 8027c38:	2002      	movpl	r0, #2
 8027c3a:	4770      	bx	lr
 8027c3c:	b299      	uxth	r1, r3
 8027c3e:	b909      	cbnz	r1, 8027c44 <__lo0bits+0x2a>
 8027c40:	0c1b      	lsrs	r3, r3, #16
 8027c42:	2010      	movs	r0, #16
 8027c44:	b2d9      	uxtb	r1, r3
 8027c46:	b909      	cbnz	r1, 8027c4c <__lo0bits+0x32>
 8027c48:	3008      	adds	r0, #8
 8027c4a:	0a1b      	lsrs	r3, r3, #8
 8027c4c:	0719      	lsls	r1, r3, #28
 8027c4e:	bf04      	itt	eq
 8027c50:	091b      	lsreq	r3, r3, #4
 8027c52:	3004      	addeq	r0, #4
 8027c54:	0799      	lsls	r1, r3, #30
 8027c56:	bf04      	itt	eq
 8027c58:	089b      	lsreq	r3, r3, #2
 8027c5a:	3002      	addeq	r0, #2
 8027c5c:	07d9      	lsls	r1, r3, #31
 8027c5e:	d403      	bmi.n	8027c68 <__lo0bits+0x4e>
 8027c60:	085b      	lsrs	r3, r3, #1
 8027c62:	f100 0001 	add.w	r0, r0, #1
 8027c66:	d003      	beq.n	8027c70 <__lo0bits+0x56>
 8027c68:	6013      	str	r3, [r2, #0]
 8027c6a:	4770      	bx	lr
 8027c6c:	2000      	movs	r0, #0
 8027c6e:	4770      	bx	lr
 8027c70:	2020      	movs	r0, #32
 8027c72:	4770      	bx	lr

08027c74 <__i2b>:
 8027c74:	b510      	push	{r4, lr}
 8027c76:	460c      	mov	r4, r1
 8027c78:	2101      	movs	r1, #1
 8027c7a:	f7ff ff07 	bl	8027a8c <_Balloc>
 8027c7e:	4602      	mov	r2, r0
 8027c80:	b928      	cbnz	r0, 8027c8e <__i2b+0x1a>
 8027c82:	4b05      	ldr	r3, [pc, #20]	@ (8027c98 <__i2b+0x24>)
 8027c84:	4805      	ldr	r0, [pc, #20]	@ (8027c9c <__i2b+0x28>)
 8027c86:	f240 1145 	movw	r1, #325	@ 0x145
 8027c8a:	f7fe f803 	bl	8025c94 <__assert_func>
 8027c8e:	2301      	movs	r3, #1
 8027c90:	6144      	str	r4, [r0, #20]
 8027c92:	6103      	str	r3, [r0, #16]
 8027c94:	bd10      	pop	{r4, pc}
 8027c96:	bf00      	nop
 8027c98:	0802f0ac 	.word	0x0802f0ac
 8027c9c:	0802f0bd 	.word	0x0802f0bd

08027ca0 <__multiply>:
 8027ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ca4:	4614      	mov	r4, r2
 8027ca6:	690a      	ldr	r2, [r1, #16]
 8027ca8:	6923      	ldr	r3, [r4, #16]
 8027caa:	429a      	cmp	r2, r3
 8027cac:	bfa8      	it	ge
 8027cae:	4623      	movge	r3, r4
 8027cb0:	460f      	mov	r7, r1
 8027cb2:	bfa4      	itt	ge
 8027cb4:	460c      	movge	r4, r1
 8027cb6:	461f      	movge	r7, r3
 8027cb8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8027cbc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8027cc0:	68a3      	ldr	r3, [r4, #8]
 8027cc2:	6861      	ldr	r1, [r4, #4]
 8027cc4:	eb0a 0609 	add.w	r6, sl, r9
 8027cc8:	42b3      	cmp	r3, r6
 8027cca:	b085      	sub	sp, #20
 8027ccc:	bfb8      	it	lt
 8027cce:	3101      	addlt	r1, #1
 8027cd0:	f7ff fedc 	bl	8027a8c <_Balloc>
 8027cd4:	b930      	cbnz	r0, 8027ce4 <__multiply+0x44>
 8027cd6:	4602      	mov	r2, r0
 8027cd8:	4b44      	ldr	r3, [pc, #272]	@ (8027dec <__multiply+0x14c>)
 8027cda:	4845      	ldr	r0, [pc, #276]	@ (8027df0 <__multiply+0x150>)
 8027cdc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8027ce0:	f7fd ffd8 	bl	8025c94 <__assert_func>
 8027ce4:	f100 0514 	add.w	r5, r0, #20
 8027ce8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8027cec:	462b      	mov	r3, r5
 8027cee:	2200      	movs	r2, #0
 8027cf0:	4543      	cmp	r3, r8
 8027cf2:	d321      	bcc.n	8027d38 <__multiply+0x98>
 8027cf4:	f107 0114 	add.w	r1, r7, #20
 8027cf8:	f104 0214 	add.w	r2, r4, #20
 8027cfc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8027d00:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8027d04:	9302      	str	r3, [sp, #8]
 8027d06:	1b13      	subs	r3, r2, r4
 8027d08:	3b15      	subs	r3, #21
 8027d0a:	f023 0303 	bic.w	r3, r3, #3
 8027d0e:	3304      	adds	r3, #4
 8027d10:	f104 0715 	add.w	r7, r4, #21
 8027d14:	42ba      	cmp	r2, r7
 8027d16:	bf38      	it	cc
 8027d18:	2304      	movcc	r3, #4
 8027d1a:	9301      	str	r3, [sp, #4]
 8027d1c:	9b02      	ldr	r3, [sp, #8]
 8027d1e:	9103      	str	r1, [sp, #12]
 8027d20:	428b      	cmp	r3, r1
 8027d22:	d80c      	bhi.n	8027d3e <__multiply+0x9e>
 8027d24:	2e00      	cmp	r6, #0
 8027d26:	dd03      	ble.n	8027d30 <__multiply+0x90>
 8027d28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8027d2c:	2b00      	cmp	r3, #0
 8027d2e:	d05b      	beq.n	8027de8 <__multiply+0x148>
 8027d30:	6106      	str	r6, [r0, #16]
 8027d32:	b005      	add	sp, #20
 8027d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d38:	f843 2b04 	str.w	r2, [r3], #4
 8027d3c:	e7d8      	b.n	8027cf0 <__multiply+0x50>
 8027d3e:	f8b1 a000 	ldrh.w	sl, [r1]
 8027d42:	f1ba 0f00 	cmp.w	sl, #0
 8027d46:	d024      	beq.n	8027d92 <__multiply+0xf2>
 8027d48:	f104 0e14 	add.w	lr, r4, #20
 8027d4c:	46a9      	mov	r9, r5
 8027d4e:	f04f 0c00 	mov.w	ip, #0
 8027d52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8027d56:	f8d9 3000 	ldr.w	r3, [r9]
 8027d5a:	fa1f fb87 	uxth.w	fp, r7
 8027d5e:	b29b      	uxth	r3, r3
 8027d60:	fb0a 330b 	mla	r3, sl, fp, r3
 8027d64:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8027d68:	f8d9 7000 	ldr.w	r7, [r9]
 8027d6c:	4463      	add	r3, ip
 8027d6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8027d72:	fb0a c70b 	mla	r7, sl, fp, ip
 8027d76:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8027d7a:	b29b      	uxth	r3, r3
 8027d7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8027d80:	4572      	cmp	r2, lr
 8027d82:	f849 3b04 	str.w	r3, [r9], #4
 8027d86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8027d8a:	d8e2      	bhi.n	8027d52 <__multiply+0xb2>
 8027d8c:	9b01      	ldr	r3, [sp, #4]
 8027d8e:	f845 c003 	str.w	ip, [r5, r3]
 8027d92:	9b03      	ldr	r3, [sp, #12]
 8027d94:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8027d98:	3104      	adds	r1, #4
 8027d9a:	f1b9 0f00 	cmp.w	r9, #0
 8027d9e:	d021      	beq.n	8027de4 <__multiply+0x144>
 8027da0:	682b      	ldr	r3, [r5, #0]
 8027da2:	f104 0c14 	add.w	ip, r4, #20
 8027da6:	46ae      	mov	lr, r5
 8027da8:	f04f 0a00 	mov.w	sl, #0
 8027dac:	f8bc b000 	ldrh.w	fp, [ip]
 8027db0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8027db4:	fb09 770b 	mla	r7, r9, fp, r7
 8027db8:	4457      	add	r7, sl
 8027dba:	b29b      	uxth	r3, r3
 8027dbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8027dc0:	f84e 3b04 	str.w	r3, [lr], #4
 8027dc4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8027dc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8027dcc:	f8be 3000 	ldrh.w	r3, [lr]
 8027dd0:	fb09 330a 	mla	r3, r9, sl, r3
 8027dd4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8027dd8:	4562      	cmp	r2, ip
 8027dda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8027dde:	d8e5      	bhi.n	8027dac <__multiply+0x10c>
 8027de0:	9f01      	ldr	r7, [sp, #4]
 8027de2:	51eb      	str	r3, [r5, r7]
 8027de4:	3504      	adds	r5, #4
 8027de6:	e799      	b.n	8027d1c <__multiply+0x7c>
 8027de8:	3e01      	subs	r6, #1
 8027dea:	e79b      	b.n	8027d24 <__multiply+0x84>
 8027dec:	0802f0ac 	.word	0x0802f0ac
 8027df0:	0802f0bd 	.word	0x0802f0bd

08027df4 <__pow5mult>:
 8027df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027df8:	4615      	mov	r5, r2
 8027dfa:	f012 0203 	ands.w	r2, r2, #3
 8027dfe:	4607      	mov	r7, r0
 8027e00:	460e      	mov	r6, r1
 8027e02:	d007      	beq.n	8027e14 <__pow5mult+0x20>
 8027e04:	4c25      	ldr	r4, [pc, #148]	@ (8027e9c <__pow5mult+0xa8>)
 8027e06:	3a01      	subs	r2, #1
 8027e08:	2300      	movs	r3, #0
 8027e0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8027e0e:	f7ff fe9f 	bl	8027b50 <__multadd>
 8027e12:	4606      	mov	r6, r0
 8027e14:	10ad      	asrs	r5, r5, #2
 8027e16:	d03d      	beq.n	8027e94 <__pow5mult+0xa0>
 8027e18:	69fc      	ldr	r4, [r7, #28]
 8027e1a:	b97c      	cbnz	r4, 8027e3c <__pow5mult+0x48>
 8027e1c:	2010      	movs	r0, #16
 8027e1e:	f7fd ff57 	bl	8025cd0 <malloc>
 8027e22:	4602      	mov	r2, r0
 8027e24:	61f8      	str	r0, [r7, #28]
 8027e26:	b928      	cbnz	r0, 8027e34 <__pow5mult+0x40>
 8027e28:	4b1d      	ldr	r3, [pc, #116]	@ (8027ea0 <__pow5mult+0xac>)
 8027e2a:	481e      	ldr	r0, [pc, #120]	@ (8027ea4 <__pow5mult+0xb0>)
 8027e2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8027e30:	f7fd ff30 	bl	8025c94 <__assert_func>
 8027e34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8027e38:	6004      	str	r4, [r0, #0]
 8027e3a:	60c4      	str	r4, [r0, #12]
 8027e3c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8027e40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8027e44:	b94c      	cbnz	r4, 8027e5a <__pow5mult+0x66>
 8027e46:	f240 2171 	movw	r1, #625	@ 0x271
 8027e4a:	4638      	mov	r0, r7
 8027e4c:	f7ff ff12 	bl	8027c74 <__i2b>
 8027e50:	2300      	movs	r3, #0
 8027e52:	f8c8 0008 	str.w	r0, [r8, #8]
 8027e56:	4604      	mov	r4, r0
 8027e58:	6003      	str	r3, [r0, #0]
 8027e5a:	f04f 0900 	mov.w	r9, #0
 8027e5e:	07eb      	lsls	r3, r5, #31
 8027e60:	d50a      	bpl.n	8027e78 <__pow5mult+0x84>
 8027e62:	4631      	mov	r1, r6
 8027e64:	4622      	mov	r2, r4
 8027e66:	4638      	mov	r0, r7
 8027e68:	f7ff ff1a 	bl	8027ca0 <__multiply>
 8027e6c:	4631      	mov	r1, r6
 8027e6e:	4680      	mov	r8, r0
 8027e70:	4638      	mov	r0, r7
 8027e72:	f7ff fe4b 	bl	8027b0c <_Bfree>
 8027e76:	4646      	mov	r6, r8
 8027e78:	106d      	asrs	r5, r5, #1
 8027e7a:	d00b      	beq.n	8027e94 <__pow5mult+0xa0>
 8027e7c:	6820      	ldr	r0, [r4, #0]
 8027e7e:	b938      	cbnz	r0, 8027e90 <__pow5mult+0x9c>
 8027e80:	4622      	mov	r2, r4
 8027e82:	4621      	mov	r1, r4
 8027e84:	4638      	mov	r0, r7
 8027e86:	f7ff ff0b 	bl	8027ca0 <__multiply>
 8027e8a:	6020      	str	r0, [r4, #0]
 8027e8c:	f8c0 9000 	str.w	r9, [r0]
 8027e90:	4604      	mov	r4, r0
 8027e92:	e7e4      	b.n	8027e5e <__pow5mult+0x6a>
 8027e94:	4630      	mov	r0, r6
 8027e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027e9a:	bf00      	nop
 8027e9c:	0802f118 	.word	0x0802f118
 8027ea0:	0802f03d 	.word	0x0802f03d
 8027ea4:	0802f0bd 	.word	0x0802f0bd

08027ea8 <__lshift>:
 8027ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027eac:	460c      	mov	r4, r1
 8027eae:	6849      	ldr	r1, [r1, #4]
 8027eb0:	6923      	ldr	r3, [r4, #16]
 8027eb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8027eb6:	68a3      	ldr	r3, [r4, #8]
 8027eb8:	4607      	mov	r7, r0
 8027eba:	4691      	mov	r9, r2
 8027ebc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8027ec0:	f108 0601 	add.w	r6, r8, #1
 8027ec4:	42b3      	cmp	r3, r6
 8027ec6:	db0b      	blt.n	8027ee0 <__lshift+0x38>
 8027ec8:	4638      	mov	r0, r7
 8027eca:	f7ff fddf 	bl	8027a8c <_Balloc>
 8027ece:	4605      	mov	r5, r0
 8027ed0:	b948      	cbnz	r0, 8027ee6 <__lshift+0x3e>
 8027ed2:	4602      	mov	r2, r0
 8027ed4:	4b28      	ldr	r3, [pc, #160]	@ (8027f78 <__lshift+0xd0>)
 8027ed6:	4829      	ldr	r0, [pc, #164]	@ (8027f7c <__lshift+0xd4>)
 8027ed8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8027edc:	f7fd feda 	bl	8025c94 <__assert_func>
 8027ee0:	3101      	adds	r1, #1
 8027ee2:	005b      	lsls	r3, r3, #1
 8027ee4:	e7ee      	b.n	8027ec4 <__lshift+0x1c>
 8027ee6:	2300      	movs	r3, #0
 8027ee8:	f100 0114 	add.w	r1, r0, #20
 8027eec:	f100 0210 	add.w	r2, r0, #16
 8027ef0:	4618      	mov	r0, r3
 8027ef2:	4553      	cmp	r3, sl
 8027ef4:	db33      	blt.n	8027f5e <__lshift+0xb6>
 8027ef6:	6920      	ldr	r0, [r4, #16]
 8027ef8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027efc:	f104 0314 	add.w	r3, r4, #20
 8027f00:	f019 091f 	ands.w	r9, r9, #31
 8027f04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027f08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8027f0c:	d02b      	beq.n	8027f66 <__lshift+0xbe>
 8027f0e:	f1c9 0e20 	rsb	lr, r9, #32
 8027f12:	468a      	mov	sl, r1
 8027f14:	2200      	movs	r2, #0
 8027f16:	6818      	ldr	r0, [r3, #0]
 8027f18:	fa00 f009 	lsl.w	r0, r0, r9
 8027f1c:	4310      	orrs	r0, r2
 8027f1e:	f84a 0b04 	str.w	r0, [sl], #4
 8027f22:	f853 2b04 	ldr.w	r2, [r3], #4
 8027f26:	459c      	cmp	ip, r3
 8027f28:	fa22 f20e 	lsr.w	r2, r2, lr
 8027f2c:	d8f3      	bhi.n	8027f16 <__lshift+0x6e>
 8027f2e:	ebac 0304 	sub.w	r3, ip, r4
 8027f32:	3b15      	subs	r3, #21
 8027f34:	f023 0303 	bic.w	r3, r3, #3
 8027f38:	3304      	adds	r3, #4
 8027f3a:	f104 0015 	add.w	r0, r4, #21
 8027f3e:	4584      	cmp	ip, r0
 8027f40:	bf38      	it	cc
 8027f42:	2304      	movcc	r3, #4
 8027f44:	50ca      	str	r2, [r1, r3]
 8027f46:	b10a      	cbz	r2, 8027f4c <__lshift+0xa4>
 8027f48:	f108 0602 	add.w	r6, r8, #2
 8027f4c:	3e01      	subs	r6, #1
 8027f4e:	4638      	mov	r0, r7
 8027f50:	612e      	str	r6, [r5, #16]
 8027f52:	4621      	mov	r1, r4
 8027f54:	f7ff fdda 	bl	8027b0c <_Bfree>
 8027f58:	4628      	mov	r0, r5
 8027f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027f5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8027f62:	3301      	adds	r3, #1
 8027f64:	e7c5      	b.n	8027ef2 <__lshift+0x4a>
 8027f66:	3904      	subs	r1, #4
 8027f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8027f6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8027f70:	459c      	cmp	ip, r3
 8027f72:	d8f9      	bhi.n	8027f68 <__lshift+0xc0>
 8027f74:	e7ea      	b.n	8027f4c <__lshift+0xa4>
 8027f76:	bf00      	nop
 8027f78:	0802f0ac 	.word	0x0802f0ac
 8027f7c:	0802f0bd 	.word	0x0802f0bd

08027f80 <__mcmp>:
 8027f80:	690a      	ldr	r2, [r1, #16]
 8027f82:	4603      	mov	r3, r0
 8027f84:	6900      	ldr	r0, [r0, #16]
 8027f86:	1a80      	subs	r0, r0, r2
 8027f88:	b530      	push	{r4, r5, lr}
 8027f8a:	d10e      	bne.n	8027faa <__mcmp+0x2a>
 8027f8c:	3314      	adds	r3, #20
 8027f8e:	3114      	adds	r1, #20
 8027f90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8027f94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8027f98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8027f9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8027fa0:	4295      	cmp	r5, r2
 8027fa2:	d003      	beq.n	8027fac <__mcmp+0x2c>
 8027fa4:	d205      	bcs.n	8027fb2 <__mcmp+0x32>
 8027fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8027faa:	bd30      	pop	{r4, r5, pc}
 8027fac:	42a3      	cmp	r3, r4
 8027fae:	d3f3      	bcc.n	8027f98 <__mcmp+0x18>
 8027fb0:	e7fb      	b.n	8027faa <__mcmp+0x2a>
 8027fb2:	2001      	movs	r0, #1
 8027fb4:	e7f9      	b.n	8027faa <__mcmp+0x2a>
	...

08027fb8 <__mdiff>:
 8027fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027fbc:	4689      	mov	r9, r1
 8027fbe:	4606      	mov	r6, r0
 8027fc0:	4611      	mov	r1, r2
 8027fc2:	4648      	mov	r0, r9
 8027fc4:	4614      	mov	r4, r2
 8027fc6:	f7ff ffdb 	bl	8027f80 <__mcmp>
 8027fca:	1e05      	subs	r5, r0, #0
 8027fcc:	d112      	bne.n	8027ff4 <__mdiff+0x3c>
 8027fce:	4629      	mov	r1, r5
 8027fd0:	4630      	mov	r0, r6
 8027fd2:	f7ff fd5b 	bl	8027a8c <_Balloc>
 8027fd6:	4602      	mov	r2, r0
 8027fd8:	b928      	cbnz	r0, 8027fe6 <__mdiff+0x2e>
 8027fda:	4b3f      	ldr	r3, [pc, #252]	@ (80280d8 <__mdiff+0x120>)
 8027fdc:	f240 2137 	movw	r1, #567	@ 0x237
 8027fe0:	483e      	ldr	r0, [pc, #248]	@ (80280dc <__mdiff+0x124>)
 8027fe2:	f7fd fe57 	bl	8025c94 <__assert_func>
 8027fe6:	2301      	movs	r3, #1
 8027fe8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8027fec:	4610      	mov	r0, r2
 8027fee:	b003      	add	sp, #12
 8027ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ff4:	bfbc      	itt	lt
 8027ff6:	464b      	movlt	r3, r9
 8027ff8:	46a1      	movlt	r9, r4
 8027ffa:	4630      	mov	r0, r6
 8027ffc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8028000:	bfba      	itte	lt
 8028002:	461c      	movlt	r4, r3
 8028004:	2501      	movlt	r5, #1
 8028006:	2500      	movge	r5, #0
 8028008:	f7ff fd40 	bl	8027a8c <_Balloc>
 802800c:	4602      	mov	r2, r0
 802800e:	b918      	cbnz	r0, 8028018 <__mdiff+0x60>
 8028010:	4b31      	ldr	r3, [pc, #196]	@ (80280d8 <__mdiff+0x120>)
 8028012:	f240 2145 	movw	r1, #581	@ 0x245
 8028016:	e7e3      	b.n	8027fe0 <__mdiff+0x28>
 8028018:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802801c:	6926      	ldr	r6, [r4, #16]
 802801e:	60c5      	str	r5, [r0, #12]
 8028020:	f109 0310 	add.w	r3, r9, #16
 8028024:	f109 0514 	add.w	r5, r9, #20
 8028028:	f104 0e14 	add.w	lr, r4, #20
 802802c:	f100 0b14 	add.w	fp, r0, #20
 8028030:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8028034:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8028038:	9301      	str	r3, [sp, #4]
 802803a:	46d9      	mov	r9, fp
 802803c:	f04f 0c00 	mov.w	ip, #0
 8028040:	9b01      	ldr	r3, [sp, #4]
 8028042:	f85e 0b04 	ldr.w	r0, [lr], #4
 8028046:	f853 af04 	ldr.w	sl, [r3, #4]!
 802804a:	9301      	str	r3, [sp, #4]
 802804c:	fa1f f38a 	uxth.w	r3, sl
 8028050:	4619      	mov	r1, r3
 8028052:	b283      	uxth	r3, r0
 8028054:	1acb      	subs	r3, r1, r3
 8028056:	0c00      	lsrs	r0, r0, #16
 8028058:	4463      	add	r3, ip
 802805a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802805e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8028062:	b29b      	uxth	r3, r3
 8028064:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8028068:	4576      	cmp	r6, lr
 802806a:	f849 3b04 	str.w	r3, [r9], #4
 802806e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8028072:	d8e5      	bhi.n	8028040 <__mdiff+0x88>
 8028074:	1b33      	subs	r3, r6, r4
 8028076:	3b15      	subs	r3, #21
 8028078:	f023 0303 	bic.w	r3, r3, #3
 802807c:	3415      	adds	r4, #21
 802807e:	3304      	adds	r3, #4
 8028080:	42a6      	cmp	r6, r4
 8028082:	bf38      	it	cc
 8028084:	2304      	movcc	r3, #4
 8028086:	441d      	add	r5, r3
 8028088:	445b      	add	r3, fp
 802808a:	461e      	mov	r6, r3
 802808c:	462c      	mov	r4, r5
 802808e:	4544      	cmp	r4, r8
 8028090:	d30e      	bcc.n	80280b0 <__mdiff+0xf8>
 8028092:	f108 0103 	add.w	r1, r8, #3
 8028096:	1b49      	subs	r1, r1, r5
 8028098:	f021 0103 	bic.w	r1, r1, #3
 802809c:	3d03      	subs	r5, #3
 802809e:	45a8      	cmp	r8, r5
 80280a0:	bf38      	it	cc
 80280a2:	2100      	movcc	r1, #0
 80280a4:	440b      	add	r3, r1
 80280a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80280aa:	b191      	cbz	r1, 80280d2 <__mdiff+0x11a>
 80280ac:	6117      	str	r7, [r2, #16]
 80280ae:	e79d      	b.n	8027fec <__mdiff+0x34>
 80280b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80280b4:	46e6      	mov	lr, ip
 80280b6:	0c08      	lsrs	r0, r1, #16
 80280b8:	fa1c fc81 	uxtah	ip, ip, r1
 80280bc:	4471      	add	r1, lr
 80280be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80280c2:	b289      	uxth	r1, r1
 80280c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80280c8:	f846 1b04 	str.w	r1, [r6], #4
 80280cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80280d0:	e7dd      	b.n	802808e <__mdiff+0xd6>
 80280d2:	3f01      	subs	r7, #1
 80280d4:	e7e7      	b.n	80280a6 <__mdiff+0xee>
 80280d6:	bf00      	nop
 80280d8:	0802f0ac 	.word	0x0802f0ac
 80280dc:	0802f0bd 	.word	0x0802f0bd

080280e0 <__d2b>:
 80280e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80280e4:	460f      	mov	r7, r1
 80280e6:	2101      	movs	r1, #1
 80280e8:	ec59 8b10 	vmov	r8, r9, d0
 80280ec:	4616      	mov	r6, r2
 80280ee:	f7ff fccd 	bl	8027a8c <_Balloc>
 80280f2:	4604      	mov	r4, r0
 80280f4:	b930      	cbnz	r0, 8028104 <__d2b+0x24>
 80280f6:	4602      	mov	r2, r0
 80280f8:	4b23      	ldr	r3, [pc, #140]	@ (8028188 <__d2b+0xa8>)
 80280fa:	4824      	ldr	r0, [pc, #144]	@ (802818c <__d2b+0xac>)
 80280fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8028100:	f7fd fdc8 	bl	8025c94 <__assert_func>
 8028104:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8028108:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802810c:	b10d      	cbz	r5, 8028112 <__d2b+0x32>
 802810e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8028112:	9301      	str	r3, [sp, #4]
 8028114:	f1b8 0300 	subs.w	r3, r8, #0
 8028118:	d023      	beq.n	8028162 <__d2b+0x82>
 802811a:	4668      	mov	r0, sp
 802811c:	9300      	str	r3, [sp, #0]
 802811e:	f7ff fd7c 	bl	8027c1a <__lo0bits>
 8028122:	e9dd 1200 	ldrd	r1, r2, [sp]
 8028126:	b1d0      	cbz	r0, 802815e <__d2b+0x7e>
 8028128:	f1c0 0320 	rsb	r3, r0, #32
 802812c:	fa02 f303 	lsl.w	r3, r2, r3
 8028130:	430b      	orrs	r3, r1
 8028132:	40c2      	lsrs	r2, r0
 8028134:	6163      	str	r3, [r4, #20]
 8028136:	9201      	str	r2, [sp, #4]
 8028138:	9b01      	ldr	r3, [sp, #4]
 802813a:	61a3      	str	r3, [r4, #24]
 802813c:	2b00      	cmp	r3, #0
 802813e:	bf0c      	ite	eq
 8028140:	2201      	moveq	r2, #1
 8028142:	2202      	movne	r2, #2
 8028144:	6122      	str	r2, [r4, #16]
 8028146:	b1a5      	cbz	r5, 8028172 <__d2b+0x92>
 8028148:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802814c:	4405      	add	r5, r0
 802814e:	603d      	str	r5, [r7, #0]
 8028150:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8028154:	6030      	str	r0, [r6, #0]
 8028156:	4620      	mov	r0, r4
 8028158:	b003      	add	sp, #12
 802815a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802815e:	6161      	str	r1, [r4, #20]
 8028160:	e7ea      	b.n	8028138 <__d2b+0x58>
 8028162:	a801      	add	r0, sp, #4
 8028164:	f7ff fd59 	bl	8027c1a <__lo0bits>
 8028168:	9b01      	ldr	r3, [sp, #4]
 802816a:	6163      	str	r3, [r4, #20]
 802816c:	3020      	adds	r0, #32
 802816e:	2201      	movs	r2, #1
 8028170:	e7e8      	b.n	8028144 <__d2b+0x64>
 8028172:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8028176:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802817a:	6038      	str	r0, [r7, #0]
 802817c:	6918      	ldr	r0, [r3, #16]
 802817e:	f7ff fd2d 	bl	8027bdc <__hi0bits>
 8028182:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8028186:	e7e5      	b.n	8028154 <__d2b+0x74>
 8028188:	0802f0ac 	.word	0x0802f0ac
 802818c:	0802f0bd 	.word	0x0802f0bd

08028190 <_sungetc_r>:
 8028190:	b538      	push	{r3, r4, r5, lr}
 8028192:	1c4b      	adds	r3, r1, #1
 8028194:	4614      	mov	r4, r2
 8028196:	d103      	bne.n	80281a0 <_sungetc_r+0x10>
 8028198:	f04f 35ff 	mov.w	r5, #4294967295
 802819c:	4628      	mov	r0, r5
 802819e:	bd38      	pop	{r3, r4, r5, pc}
 80281a0:	8993      	ldrh	r3, [r2, #12]
 80281a2:	f023 0320 	bic.w	r3, r3, #32
 80281a6:	8193      	strh	r3, [r2, #12]
 80281a8:	6853      	ldr	r3, [r2, #4]
 80281aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80281ac:	b2cd      	uxtb	r5, r1
 80281ae:	b18a      	cbz	r2, 80281d4 <_sungetc_r+0x44>
 80281b0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80281b2:	429a      	cmp	r2, r3
 80281b4:	dd08      	ble.n	80281c8 <_sungetc_r+0x38>
 80281b6:	6823      	ldr	r3, [r4, #0]
 80281b8:	1e5a      	subs	r2, r3, #1
 80281ba:	6022      	str	r2, [r4, #0]
 80281bc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80281c0:	6863      	ldr	r3, [r4, #4]
 80281c2:	3301      	adds	r3, #1
 80281c4:	6063      	str	r3, [r4, #4]
 80281c6:	e7e9      	b.n	802819c <_sungetc_r+0xc>
 80281c8:	4621      	mov	r1, r4
 80281ca:	f000 fd84 	bl	8028cd6 <__submore>
 80281ce:	2800      	cmp	r0, #0
 80281d0:	d0f1      	beq.n	80281b6 <_sungetc_r+0x26>
 80281d2:	e7e1      	b.n	8028198 <_sungetc_r+0x8>
 80281d4:	6921      	ldr	r1, [r4, #16]
 80281d6:	6822      	ldr	r2, [r4, #0]
 80281d8:	b141      	cbz	r1, 80281ec <_sungetc_r+0x5c>
 80281da:	4291      	cmp	r1, r2
 80281dc:	d206      	bcs.n	80281ec <_sungetc_r+0x5c>
 80281de:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80281e2:	42a9      	cmp	r1, r5
 80281e4:	d102      	bne.n	80281ec <_sungetc_r+0x5c>
 80281e6:	3a01      	subs	r2, #1
 80281e8:	6022      	str	r2, [r4, #0]
 80281ea:	e7ea      	b.n	80281c2 <_sungetc_r+0x32>
 80281ec:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80281f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80281f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80281f6:	2303      	movs	r3, #3
 80281f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80281fa:	4623      	mov	r3, r4
 80281fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8028200:	6023      	str	r3, [r4, #0]
 8028202:	2301      	movs	r3, #1
 8028204:	e7de      	b.n	80281c4 <_sungetc_r+0x34>

08028206 <__ssrefill_r>:
 8028206:	b510      	push	{r4, lr}
 8028208:	460c      	mov	r4, r1
 802820a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 802820c:	b169      	cbz	r1, 802822a <__ssrefill_r+0x24>
 802820e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028212:	4299      	cmp	r1, r3
 8028214:	d001      	beq.n	802821a <__ssrefill_r+0x14>
 8028216:	f7ff fbef 	bl	80279f8 <_free_r>
 802821a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802821c:	6063      	str	r3, [r4, #4]
 802821e:	2000      	movs	r0, #0
 8028220:	6360      	str	r0, [r4, #52]	@ 0x34
 8028222:	b113      	cbz	r3, 802822a <__ssrefill_r+0x24>
 8028224:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8028226:	6023      	str	r3, [r4, #0]
 8028228:	bd10      	pop	{r4, pc}
 802822a:	6923      	ldr	r3, [r4, #16]
 802822c:	6023      	str	r3, [r4, #0]
 802822e:	2300      	movs	r3, #0
 8028230:	6063      	str	r3, [r4, #4]
 8028232:	89a3      	ldrh	r3, [r4, #12]
 8028234:	f043 0320 	orr.w	r3, r3, #32
 8028238:	81a3      	strh	r3, [r4, #12]
 802823a:	f04f 30ff 	mov.w	r0, #4294967295
 802823e:	e7f3      	b.n	8028228 <__ssrefill_r+0x22>

08028240 <__ssvfiscanf_r>:
 8028240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028244:	460c      	mov	r4, r1
 8028246:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 802824a:	2100      	movs	r1, #0
 802824c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8028250:	49a5      	ldr	r1, [pc, #660]	@ (80284e8 <__ssvfiscanf_r+0x2a8>)
 8028252:	91a0      	str	r1, [sp, #640]	@ 0x280
 8028254:	f10d 0804 	add.w	r8, sp, #4
 8028258:	49a4      	ldr	r1, [pc, #656]	@ (80284ec <__ssvfiscanf_r+0x2ac>)
 802825a:	4fa5      	ldr	r7, [pc, #660]	@ (80284f0 <__ssvfiscanf_r+0x2b0>)
 802825c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8028260:	4606      	mov	r6, r0
 8028262:	91a1      	str	r1, [sp, #644]	@ 0x284
 8028264:	9300      	str	r3, [sp, #0]
 8028266:	7813      	ldrb	r3, [r2, #0]
 8028268:	2b00      	cmp	r3, #0
 802826a:	f000 8158 	beq.w	802851e <__ssvfiscanf_r+0x2de>
 802826e:	5cf9      	ldrb	r1, [r7, r3]
 8028270:	f011 0108 	ands.w	r1, r1, #8
 8028274:	f102 0501 	add.w	r5, r2, #1
 8028278:	d019      	beq.n	80282ae <__ssvfiscanf_r+0x6e>
 802827a:	6863      	ldr	r3, [r4, #4]
 802827c:	2b00      	cmp	r3, #0
 802827e:	dd0f      	ble.n	80282a0 <__ssvfiscanf_r+0x60>
 8028280:	6823      	ldr	r3, [r4, #0]
 8028282:	781a      	ldrb	r2, [r3, #0]
 8028284:	5cba      	ldrb	r2, [r7, r2]
 8028286:	0712      	lsls	r2, r2, #28
 8028288:	d401      	bmi.n	802828e <__ssvfiscanf_r+0x4e>
 802828a:	462a      	mov	r2, r5
 802828c:	e7eb      	b.n	8028266 <__ssvfiscanf_r+0x26>
 802828e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8028290:	3201      	adds	r2, #1
 8028292:	9245      	str	r2, [sp, #276]	@ 0x114
 8028294:	6862      	ldr	r2, [r4, #4]
 8028296:	3301      	adds	r3, #1
 8028298:	3a01      	subs	r2, #1
 802829a:	6062      	str	r2, [r4, #4]
 802829c:	6023      	str	r3, [r4, #0]
 802829e:	e7ec      	b.n	802827a <__ssvfiscanf_r+0x3a>
 80282a0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80282a2:	4621      	mov	r1, r4
 80282a4:	4630      	mov	r0, r6
 80282a6:	4798      	blx	r3
 80282a8:	2800      	cmp	r0, #0
 80282aa:	d0e9      	beq.n	8028280 <__ssvfiscanf_r+0x40>
 80282ac:	e7ed      	b.n	802828a <__ssvfiscanf_r+0x4a>
 80282ae:	2b25      	cmp	r3, #37	@ 0x25
 80282b0:	d012      	beq.n	80282d8 <__ssvfiscanf_r+0x98>
 80282b2:	4699      	mov	r9, r3
 80282b4:	6863      	ldr	r3, [r4, #4]
 80282b6:	2b00      	cmp	r3, #0
 80282b8:	f340 8093 	ble.w	80283e2 <__ssvfiscanf_r+0x1a2>
 80282bc:	6822      	ldr	r2, [r4, #0]
 80282be:	7813      	ldrb	r3, [r2, #0]
 80282c0:	454b      	cmp	r3, r9
 80282c2:	f040 812c 	bne.w	802851e <__ssvfiscanf_r+0x2de>
 80282c6:	6863      	ldr	r3, [r4, #4]
 80282c8:	3b01      	subs	r3, #1
 80282ca:	6063      	str	r3, [r4, #4]
 80282cc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80282ce:	3201      	adds	r2, #1
 80282d0:	3301      	adds	r3, #1
 80282d2:	6022      	str	r2, [r4, #0]
 80282d4:	9345      	str	r3, [sp, #276]	@ 0x114
 80282d6:	e7d8      	b.n	802828a <__ssvfiscanf_r+0x4a>
 80282d8:	9141      	str	r1, [sp, #260]	@ 0x104
 80282da:	9143      	str	r1, [sp, #268]	@ 0x10c
 80282dc:	7853      	ldrb	r3, [r2, #1]
 80282de:	2b2a      	cmp	r3, #42	@ 0x2a
 80282e0:	bf02      	ittt	eq
 80282e2:	2310      	moveq	r3, #16
 80282e4:	1c95      	addeq	r5, r2, #2
 80282e6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80282e8:	220a      	movs	r2, #10
 80282ea:	46a9      	mov	r9, r5
 80282ec:	f819 1b01 	ldrb.w	r1, [r9], #1
 80282f0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80282f4:	2b09      	cmp	r3, #9
 80282f6:	d91e      	bls.n	8028336 <__ssvfiscanf_r+0xf6>
 80282f8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80284f4 <__ssvfiscanf_r+0x2b4>
 80282fc:	2203      	movs	r2, #3
 80282fe:	4650      	mov	r0, sl
 8028300:	f7d7 ff4e 	bl	80001a0 <memchr>
 8028304:	b138      	cbz	r0, 8028316 <__ssvfiscanf_r+0xd6>
 8028306:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8028308:	eba0 000a 	sub.w	r0, r0, sl
 802830c:	2301      	movs	r3, #1
 802830e:	4083      	lsls	r3, r0
 8028310:	4313      	orrs	r3, r2
 8028312:	9341      	str	r3, [sp, #260]	@ 0x104
 8028314:	464d      	mov	r5, r9
 8028316:	f815 3b01 	ldrb.w	r3, [r5], #1
 802831a:	2b78      	cmp	r3, #120	@ 0x78
 802831c:	d806      	bhi.n	802832c <__ssvfiscanf_r+0xec>
 802831e:	2b57      	cmp	r3, #87	@ 0x57
 8028320:	d810      	bhi.n	8028344 <__ssvfiscanf_r+0x104>
 8028322:	2b25      	cmp	r3, #37	@ 0x25
 8028324:	d0c5      	beq.n	80282b2 <__ssvfiscanf_r+0x72>
 8028326:	d857      	bhi.n	80283d8 <__ssvfiscanf_r+0x198>
 8028328:	2b00      	cmp	r3, #0
 802832a:	d065      	beq.n	80283f8 <__ssvfiscanf_r+0x1b8>
 802832c:	2303      	movs	r3, #3
 802832e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8028330:	230a      	movs	r3, #10
 8028332:	9342      	str	r3, [sp, #264]	@ 0x108
 8028334:	e078      	b.n	8028428 <__ssvfiscanf_r+0x1e8>
 8028336:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8028338:	fb02 1103 	mla	r1, r2, r3, r1
 802833c:	3930      	subs	r1, #48	@ 0x30
 802833e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8028340:	464d      	mov	r5, r9
 8028342:	e7d2      	b.n	80282ea <__ssvfiscanf_r+0xaa>
 8028344:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8028348:	2a20      	cmp	r2, #32
 802834a:	d8ef      	bhi.n	802832c <__ssvfiscanf_r+0xec>
 802834c:	a101      	add	r1, pc, #4	@ (adr r1, 8028354 <__ssvfiscanf_r+0x114>)
 802834e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8028352:	bf00      	nop
 8028354:	08028407 	.word	0x08028407
 8028358:	0802832d 	.word	0x0802832d
 802835c:	0802832d 	.word	0x0802832d
 8028360:	08028461 	.word	0x08028461
 8028364:	0802832d 	.word	0x0802832d
 8028368:	0802832d 	.word	0x0802832d
 802836c:	0802832d 	.word	0x0802832d
 8028370:	0802832d 	.word	0x0802832d
 8028374:	0802832d 	.word	0x0802832d
 8028378:	0802832d 	.word	0x0802832d
 802837c:	0802832d 	.word	0x0802832d
 8028380:	08028477 	.word	0x08028477
 8028384:	0802845d 	.word	0x0802845d
 8028388:	080283df 	.word	0x080283df
 802838c:	080283df 	.word	0x080283df
 8028390:	080283df 	.word	0x080283df
 8028394:	0802832d 	.word	0x0802832d
 8028398:	08028419 	.word	0x08028419
 802839c:	0802832d 	.word	0x0802832d
 80283a0:	0802832d 	.word	0x0802832d
 80283a4:	0802832d 	.word	0x0802832d
 80283a8:	0802832d 	.word	0x0802832d
 80283ac:	08028487 	.word	0x08028487
 80283b0:	08028421 	.word	0x08028421
 80283b4:	080283ff 	.word	0x080283ff
 80283b8:	0802832d 	.word	0x0802832d
 80283bc:	0802832d 	.word	0x0802832d
 80283c0:	08028483 	.word	0x08028483
 80283c4:	0802832d 	.word	0x0802832d
 80283c8:	0802845d 	.word	0x0802845d
 80283cc:	0802832d 	.word	0x0802832d
 80283d0:	0802832d 	.word	0x0802832d
 80283d4:	08028407 	.word	0x08028407
 80283d8:	3b45      	subs	r3, #69	@ 0x45
 80283da:	2b02      	cmp	r3, #2
 80283dc:	d8a6      	bhi.n	802832c <__ssvfiscanf_r+0xec>
 80283de:	2305      	movs	r3, #5
 80283e0:	e021      	b.n	8028426 <__ssvfiscanf_r+0x1e6>
 80283e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80283e4:	4621      	mov	r1, r4
 80283e6:	4630      	mov	r0, r6
 80283e8:	4798      	blx	r3
 80283ea:	2800      	cmp	r0, #0
 80283ec:	f43f af66 	beq.w	80282bc <__ssvfiscanf_r+0x7c>
 80283f0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80283f2:	2800      	cmp	r0, #0
 80283f4:	f040 808b 	bne.w	802850e <__ssvfiscanf_r+0x2ce>
 80283f8:	f04f 30ff 	mov.w	r0, #4294967295
 80283fc:	e08b      	b.n	8028516 <__ssvfiscanf_r+0x2d6>
 80283fe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8028400:	f042 0220 	orr.w	r2, r2, #32
 8028404:	9241      	str	r2, [sp, #260]	@ 0x104
 8028406:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8028408:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802840c:	9241      	str	r2, [sp, #260]	@ 0x104
 802840e:	2210      	movs	r2, #16
 8028410:	2b6e      	cmp	r3, #110	@ 0x6e
 8028412:	9242      	str	r2, [sp, #264]	@ 0x108
 8028414:	d902      	bls.n	802841c <__ssvfiscanf_r+0x1dc>
 8028416:	e005      	b.n	8028424 <__ssvfiscanf_r+0x1e4>
 8028418:	2300      	movs	r3, #0
 802841a:	9342      	str	r3, [sp, #264]	@ 0x108
 802841c:	2303      	movs	r3, #3
 802841e:	e002      	b.n	8028426 <__ssvfiscanf_r+0x1e6>
 8028420:	2308      	movs	r3, #8
 8028422:	9342      	str	r3, [sp, #264]	@ 0x108
 8028424:	2304      	movs	r3, #4
 8028426:	9347      	str	r3, [sp, #284]	@ 0x11c
 8028428:	6863      	ldr	r3, [r4, #4]
 802842a:	2b00      	cmp	r3, #0
 802842c:	dd39      	ble.n	80284a2 <__ssvfiscanf_r+0x262>
 802842e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8028430:	0659      	lsls	r1, r3, #25
 8028432:	d404      	bmi.n	802843e <__ssvfiscanf_r+0x1fe>
 8028434:	6823      	ldr	r3, [r4, #0]
 8028436:	781a      	ldrb	r2, [r3, #0]
 8028438:	5cba      	ldrb	r2, [r7, r2]
 802843a:	0712      	lsls	r2, r2, #28
 802843c:	d438      	bmi.n	80284b0 <__ssvfiscanf_r+0x270>
 802843e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8028440:	2b02      	cmp	r3, #2
 8028442:	dc47      	bgt.n	80284d4 <__ssvfiscanf_r+0x294>
 8028444:	466b      	mov	r3, sp
 8028446:	4622      	mov	r2, r4
 8028448:	a941      	add	r1, sp, #260	@ 0x104
 802844a:	4630      	mov	r0, r6
 802844c:	f000 f9ae 	bl	80287ac <_scanf_chars>
 8028450:	2801      	cmp	r0, #1
 8028452:	d064      	beq.n	802851e <__ssvfiscanf_r+0x2de>
 8028454:	2802      	cmp	r0, #2
 8028456:	f47f af18 	bne.w	802828a <__ssvfiscanf_r+0x4a>
 802845a:	e7c9      	b.n	80283f0 <__ssvfiscanf_r+0x1b0>
 802845c:	220a      	movs	r2, #10
 802845e:	e7d7      	b.n	8028410 <__ssvfiscanf_r+0x1d0>
 8028460:	4629      	mov	r1, r5
 8028462:	4640      	mov	r0, r8
 8028464:	f000 fbfe 	bl	8028c64 <__sccl>
 8028468:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802846a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802846e:	9341      	str	r3, [sp, #260]	@ 0x104
 8028470:	4605      	mov	r5, r0
 8028472:	2301      	movs	r3, #1
 8028474:	e7d7      	b.n	8028426 <__ssvfiscanf_r+0x1e6>
 8028476:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8028478:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802847c:	9341      	str	r3, [sp, #260]	@ 0x104
 802847e:	2300      	movs	r3, #0
 8028480:	e7d1      	b.n	8028426 <__ssvfiscanf_r+0x1e6>
 8028482:	2302      	movs	r3, #2
 8028484:	e7cf      	b.n	8028426 <__ssvfiscanf_r+0x1e6>
 8028486:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8028488:	06c3      	lsls	r3, r0, #27
 802848a:	f53f aefe 	bmi.w	802828a <__ssvfiscanf_r+0x4a>
 802848e:	9b00      	ldr	r3, [sp, #0]
 8028490:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8028492:	1d19      	adds	r1, r3, #4
 8028494:	9100      	str	r1, [sp, #0]
 8028496:	681b      	ldr	r3, [r3, #0]
 8028498:	07c0      	lsls	r0, r0, #31
 802849a:	bf4c      	ite	mi
 802849c:	801a      	strhmi	r2, [r3, #0]
 802849e:	601a      	strpl	r2, [r3, #0]
 80284a0:	e6f3      	b.n	802828a <__ssvfiscanf_r+0x4a>
 80284a2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80284a4:	4621      	mov	r1, r4
 80284a6:	4630      	mov	r0, r6
 80284a8:	4798      	blx	r3
 80284aa:	2800      	cmp	r0, #0
 80284ac:	d0bf      	beq.n	802842e <__ssvfiscanf_r+0x1ee>
 80284ae:	e79f      	b.n	80283f0 <__ssvfiscanf_r+0x1b0>
 80284b0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80284b2:	3201      	adds	r2, #1
 80284b4:	9245      	str	r2, [sp, #276]	@ 0x114
 80284b6:	6862      	ldr	r2, [r4, #4]
 80284b8:	3a01      	subs	r2, #1
 80284ba:	2a00      	cmp	r2, #0
 80284bc:	6062      	str	r2, [r4, #4]
 80284be:	dd02      	ble.n	80284c6 <__ssvfiscanf_r+0x286>
 80284c0:	3301      	adds	r3, #1
 80284c2:	6023      	str	r3, [r4, #0]
 80284c4:	e7b6      	b.n	8028434 <__ssvfiscanf_r+0x1f4>
 80284c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80284c8:	4621      	mov	r1, r4
 80284ca:	4630      	mov	r0, r6
 80284cc:	4798      	blx	r3
 80284ce:	2800      	cmp	r0, #0
 80284d0:	d0b0      	beq.n	8028434 <__ssvfiscanf_r+0x1f4>
 80284d2:	e78d      	b.n	80283f0 <__ssvfiscanf_r+0x1b0>
 80284d4:	2b04      	cmp	r3, #4
 80284d6:	dc0f      	bgt.n	80284f8 <__ssvfiscanf_r+0x2b8>
 80284d8:	466b      	mov	r3, sp
 80284da:	4622      	mov	r2, r4
 80284dc:	a941      	add	r1, sp, #260	@ 0x104
 80284de:	4630      	mov	r0, r6
 80284e0:	f000 f9be 	bl	8028860 <_scanf_i>
 80284e4:	e7b4      	b.n	8028450 <__ssvfiscanf_r+0x210>
 80284e6:	bf00      	nop
 80284e8:	08028191 	.word	0x08028191
 80284ec:	08028207 	.word	0x08028207
 80284f0:	0802f24f 	.word	0x0802f24f
 80284f4:	0802f218 	.word	0x0802f218
 80284f8:	4b0a      	ldr	r3, [pc, #40]	@ (8028524 <__ssvfiscanf_r+0x2e4>)
 80284fa:	2b00      	cmp	r3, #0
 80284fc:	f43f aec5 	beq.w	802828a <__ssvfiscanf_r+0x4a>
 8028500:	466b      	mov	r3, sp
 8028502:	4622      	mov	r2, r4
 8028504:	a941      	add	r1, sp, #260	@ 0x104
 8028506:	4630      	mov	r0, r6
 8028508:	f3af 8000 	nop.w
 802850c:	e7a0      	b.n	8028450 <__ssvfiscanf_r+0x210>
 802850e:	89a3      	ldrh	r3, [r4, #12]
 8028510:	065b      	lsls	r3, r3, #25
 8028512:	f53f af71 	bmi.w	80283f8 <__ssvfiscanf_r+0x1b8>
 8028516:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 802851a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802851e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8028520:	e7f9      	b.n	8028516 <__ssvfiscanf_r+0x2d6>
 8028522:	bf00      	nop
 8028524:	00000000 	.word	0x00000000

08028528 <__sfputc_r>:
 8028528:	6893      	ldr	r3, [r2, #8]
 802852a:	3b01      	subs	r3, #1
 802852c:	2b00      	cmp	r3, #0
 802852e:	b410      	push	{r4}
 8028530:	6093      	str	r3, [r2, #8]
 8028532:	da08      	bge.n	8028546 <__sfputc_r+0x1e>
 8028534:	6994      	ldr	r4, [r2, #24]
 8028536:	42a3      	cmp	r3, r4
 8028538:	db01      	blt.n	802853e <__sfputc_r+0x16>
 802853a:	290a      	cmp	r1, #10
 802853c:	d103      	bne.n	8028546 <__sfputc_r+0x1e>
 802853e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028542:	f7fe ba86 	b.w	8026a52 <__swbuf_r>
 8028546:	6813      	ldr	r3, [r2, #0]
 8028548:	1c58      	adds	r0, r3, #1
 802854a:	6010      	str	r0, [r2, #0]
 802854c:	7019      	strb	r1, [r3, #0]
 802854e:	4608      	mov	r0, r1
 8028550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028554:	4770      	bx	lr

08028556 <__sfputs_r>:
 8028556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028558:	4606      	mov	r6, r0
 802855a:	460f      	mov	r7, r1
 802855c:	4614      	mov	r4, r2
 802855e:	18d5      	adds	r5, r2, r3
 8028560:	42ac      	cmp	r4, r5
 8028562:	d101      	bne.n	8028568 <__sfputs_r+0x12>
 8028564:	2000      	movs	r0, #0
 8028566:	e007      	b.n	8028578 <__sfputs_r+0x22>
 8028568:	f814 1b01 	ldrb.w	r1, [r4], #1
 802856c:	463a      	mov	r2, r7
 802856e:	4630      	mov	r0, r6
 8028570:	f7ff ffda 	bl	8028528 <__sfputc_r>
 8028574:	1c43      	adds	r3, r0, #1
 8028576:	d1f3      	bne.n	8028560 <__sfputs_r+0xa>
 8028578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802857c <_vfiprintf_r>:
 802857c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028580:	460d      	mov	r5, r1
 8028582:	b09d      	sub	sp, #116	@ 0x74
 8028584:	4614      	mov	r4, r2
 8028586:	4698      	mov	r8, r3
 8028588:	4606      	mov	r6, r0
 802858a:	b118      	cbz	r0, 8028594 <_vfiprintf_r+0x18>
 802858c:	6a03      	ldr	r3, [r0, #32]
 802858e:	b90b      	cbnz	r3, 8028594 <_vfiprintf_r+0x18>
 8028590:	f7fe f938 	bl	8026804 <__sinit>
 8028594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8028596:	07d9      	lsls	r1, r3, #31
 8028598:	d405      	bmi.n	80285a6 <_vfiprintf_r+0x2a>
 802859a:	89ab      	ldrh	r3, [r5, #12]
 802859c:	059a      	lsls	r2, r3, #22
 802859e:	d402      	bmi.n	80285a6 <_vfiprintf_r+0x2a>
 80285a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80285a2:	f7fe fbc4 	bl	8026d2e <__retarget_lock_acquire_recursive>
 80285a6:	89ab      	ldrh	r3, [r5, #12]
 80285a8:	071b      	lsls	r3, r3, #28
 80285aa:	d501      	bpl.n	80285b0 <_vfiprintf_r+0x34>
 80285ac:	692b      	ldr	r3, [r5, #16]
 80285ae:	b99b      	cbnz	r3, 80285d8 <_vfiprintf_r+0x5c>
 80285b0:	4629      	mov	r1, r5
 80285b2:	4630      	mov	r0, r6
 80285b4:	f7fe fa8c 	bl	8026ad0 <__swsetup_r>
 80285b8:	b170      	cbz	r0, 80285d8 <_vfiprintf_r+0x5c>
 80285ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80285bc:	07dc      	lsls	r4, r3, #31
 80285be:	d504      	bpl.n	80285ca <_vfiprintf_r+0x4e>
 80285c0:	f04f 30ff 	mov.w	r0, #4294967295
 80285c4:	b01d      	add	sp, #116	@ 0x74
 80285c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80285ca:	89ab      	ldrh	r3, [r5, #12]
 80285cc:	0598      	lsls	r0, r3, #22
 80285ce:	d4f7      	bmi.n	80285c0 <_vfiprintf_r+0x44>
 80285d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80285d2:	f7fe fbad 	bl	8026d30 <__retarget_lock_release_recursive>
 80285d6:	e7f3      	b.n	80285c0 <_vfiprintf_r+0x44>
 80285d8:	2300      	movs	r3, #0
 80285da:	9309      	str	r3, [sp, #36]	@ 0x24
 80285dc:	2320      	movs	r3, #32
 80285de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80285e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80285e6:	2330      	movs	r3, #48	@ 0x30
 80285e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8028798 <_vfiprintf_r+0x21c>
 80285ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80285f0:	f04f 0901 	mov.w	r9, #1
 80285f4:	4623      	mov	r3, r4
 80285f6:	469a      	mov	sl, r3
 80285f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80285fc:	b10a      	cbz	r2, 8028602 <_vfiprintf_r+0x86>
 80285fe:	2a25      	cmp	r2, #37	@ 0x25
 8028600:	d1f9      	bne.n	80285f6 <_vfiprintf_r+0x7a>
 8028602:	ebba 0b04 	subs.w	fp, sl, r4
 8028606:	d00b      	beq.n	8028620 <_vfiprintf_r+0xa4>
 8028608:	465b      	mov	r3, fp
 802860a:	4622      	mov	r2, r4
 802860c:	4629      	mov	r1, r5
 802860e:	4630      	mov	r0, r6
 8028610:	f7ff ffa1 	bl	8028556 <__sfputs_r>
 8028614:	3001      	adds	r0, #1
 8028616:	f000 80a7 	beq.w	8028768 <_vfiprintf_r+0x1ec>
 802861a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802861c:	445a      	add	r2, fp
 802861e:	9209      	str	r2, [sp, #36]	@ 0x24
 8028620:	f89a 3000 	ldrb.w	r3, [sl]
 8028624:	2b00      	cmp	r3, #0
 8028626:	f000 809f 	beq.w	8028768 <_vfiprintf_r+0x1ec>
 802862a:	2300      	movs	r3, #0
 802862c:	f04f 32ff 	mov.w	r2, #4294967295
 8028630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028634:	f10a 0a01 	add.w	sl, sl, #1
 8028638:	9304      	str	r3, [sp, #16]
 802863a:	9307      	str	r3, [sp, #28]
 802863c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8028640:	931a      	str	r3, [sp, #104]	@ 0x68
 8028642:	4654      	mov	r4, sl
 8028644:	2205      	movs	r2, #5
 8028646:	f814 1b01 	ldrb.w	r1, [r4], #1
 802864a:	4853      	ldr	r0, [pc, #332]	@ (8028798 <_vfiprintf_r+0x21c>)
 802864c:	f7d7 fda8 	bl	80001a0 <memchr>
 8028650:	9a04      	ldr	r2, [sp, #16]
 8028652:	b9d8      	cbnz	r0, 802868c <_vfiprintf_r+0x110>
 8028654:	06d1      	lsls	r1, r2, #27
 8028656:	bf44      	itt	mi
 8028658:	2320      	movmi	r3, #32
 802865a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802865e:	0713      	lsls	r3, r2, #28
 8028660:	bf44      	itt	mi
 8028662:	232b      	movmi	r3, #43	@ 0x2b
 8028664:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028668:	f89a 3000 	ldrb.w	r3, [sl]
 802866c:	2b2a      	cmp	r3, #42	@ 0x2a
 802866e:	d015      	beq.n	802869c <_vfiprintf_r+0x120>
 8028670:	9a07      	ldr	r2, [sp, #28]
 8028672:	4654      	mov	r4, sl
 8028674:	2000      	movs	r0, #0
 8028676:	f04f 0c0a 	mov.w	ip, #10
 802867a:	4621      	mov	r1, r4
 802867c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028680:	3b30      	subs	r3, #48	@ 0x30
 8028682:	2b09      	cmp	r3, #9
 8028684:	d94b      	bls.n	802871e <_vfiprintf_r+0x1a2>
 8028686:	b1b0      	cbz	r0, 80286b6 <_vfiprintf_r+0x13a>
 8028688:	9207      	str	r2, [sp, #28]
 802868a:	e014      	b.n	80286b6 <_vfiprintf_r+0x13a>
 802868c:	eba0 0308 	sub.w	r3, r0, r8
 8028690:	fa09 f303 	lsl.w	r3, r9, r3
 8028694:	4313      	orrs	r3, r2
 8028696:	9304      	str	r3, [sp, #16]
 8028698:	46a2      	mov	sl, r4
 802869a:	e7d2      	b.n	8028642 <_vfiprintf_r+0xc6>
 802869c:	9b03      	ldr	r3, [sp, #12]
 802869e:	1d19      	adds	r1, r3, #4
 80286a0:	681b      	ldr	r3, [r3, #0]
 80286a2:	9103      	str	r1, [sp, #12]
 80286a4:	2b00      	cmp	r3, #0
 80286a6:	bfbb      	ittet	lt
 80286a8:	425b      	neglt	r3, r3
 80286aa:	f042 0202 	orrlt.w	r2, r2, #2
 80286ae:	9307      	strge	r3, [sp, #28]
 80286b0:	9307      	strlt	r3, [sp, #28]
 80286b2:	bfb8      	it	lt
 80286b4:	9204      	strlt	r2, [sp, #16]
 80286b6:	7823      	ldrb	r3, [r4, #0]
 80286b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80286ba:	d10a      	bne.n	80286d2 <_vfiprintf_r+0x156>
 80286bc:	7863      	ldrb	r3, [r4, #1]
 80286be:	2b2a      	cmp	r3, #42	@ 0x2a
 80286c0:	d132      	bne.n	8028728 <_vfiprintf_r+0x1ac>
 80286c2:	9b03      	ldr	r3, [sp, #12]
 80286c4:	1d1a      	adds	r2, r3, #4
 80286c6:	681b      	ldr	r3, [r3, #0]
 80286c8:	9203      	str	r2, [sp, #12]
 80286ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80286ce:	3402      	adds	r4, #2
 80286d0:	9305      	str	r3, [sp, #20]
 80286d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80287a8 <_vfiprintf_r+0x22c>
 80286d6:	7821      	ldrb	r1, [r4, #0]
 80286d8:	2203      	movs	r2, #3
 80286da:	4650      	mov	r0, sl
 80286dc:	f7d7 fd60 	bl	80001a0 <memchr>
 80286e0:	b138      	cbz	r0, 80286f2 <_vfiprintf_r+0x176>
 80286e2:	9b04      	ldr	r3, [sp, #16]
 80286e4:	eba0 000a 	sub.w	r0, r0, sl
 80286e8:	2240      	movs	r2, #64	@ 0x40
 80286ea:	4082      	lsls	r2, r0
 80286ec:	4313      	orrs	r3, r2
 80286ee:	3401      	adds	r4, #1
 80286f0:	9304      	str	r3, [sp, #16]
 80286f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80286f6:	4829      	ldr	r0, [pc, #164]	@ (802879c <_vfiprintf_r+0x220>)
 80286f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80286fc:	2206      	movs	r2, #6
 80286fe:	f7d7 fd4f 	bl	80001a0 <memchr>
 8028702:	2800      	cmp	r0, #0
 8028704:	d03f      	beq.n	8028786 <_vfiprintf_r+0x20a>
 8028706:	4b26      	ldr	r3, [pc, #152]	@ (80287a0 <_vfiprintf_r+0x224>)
 8028708:	bb1b      	cbnz	r3, 8028752 <_vfiprintf_r+0x1d6>
 802870a:	9b03      	ldr	r3, [sp, #12]
 802870c:	3307      	adds	r3, #7
 802870e:	f023 0307 	bic.w	r3, r3, #7
 8028712:	3308      	adds	r3, #8
 8028714:	9303      	str	r3, [sp, #12]
 8028716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028718:	443b      	add	r3, r7
 802871a:	9309      	str	r3, [sp, #36]	@ 0x24
 802871c:	e76a      	b.n	80285f4 <_vfiprintf_r+0x78>
 802871e:	fb0c 3202 	mla	r2, ip, r2, r3
 8028722:	460c      	mov	r4, r1
 8028724:	2001      	movs	r0, #1
 8028726:	e7a8      	b.n	802867a <_vfiprintf_r+0xfe>
 8028728:	2300      	movs	r3, #0
 802872a:	3401      	adds	r4, #1
 802872c:	9305      	str	r3, [sp, #20]
 802872e:	4619      	mov	r1, r3
 8028730:	f04f 0c0a 	mov.w	ip, #10
 8028734:	4620      	mov	r0, r4
 8028736:	f810 2b01 	ldrb.w	r2, [r0], #1
 802873a:	3a30      	subs	r2, #48	@ 0x30
 802873c:	2a09      	cmp	r2, #9
 802873e:	d903      	bls.n	8028748 <_vfiprintf_r+0x1cc>
 8028740:	2b00      	cmp	r3, #0
 8028742:	d0c6      	beq.n	80286d2 <_vfiprintf_r+0x156>
 8028744:	9105      	str	r1, [sp, #20]
 8028746:	e7c4      	b.n	80286d2 <_vfiprintf_r+0x156>
 8028748:	fb0c 2101 	mla	r1, ip, r1, r2
 802874c:	4604      	mov	r4, r0
 802874e:	2301      	movs	r3, #1
 8028750:	e7f0      	b.n	8028734 <_vfiprintf_r+0x1b8>
 8028752:	ab03      	add	r3, sp, #12
 8028754:	9300      	str	r3, [sp, #0]
 8028756:	462a      	mov	r2, r5
 8028758:	4b12      	ldr	r3, [pc, #72]	@ (80287a4 <_vfiprintf_r+0x228>)
 802875a:	a904      	add	r1, sp, #16
 802875c:	4630      	mov	r0, r6
 802875e:	f7fd fc0d 	bl	8025f7c <_printf_float>
 8028762:	4607      	mov	r7, r0
 8028764:	1c78      	adds	r0, r7, #1
 8028766:	d1d6      	bne.n	8028716 <_vfiprintf_r+0x19a>
 8028768:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802876a:	07d9      	lsls	r1, r3, #31
 802876c:	d405      	bmi.n	802877a <_vfiprintf_r+0x1fe>
 802876e:	89ab      	ldrh	r3, [r5, #12]
 8028770:	059a      	lsls	r2, r3, #22
 8028772:	d402      	bmi.n	802877a <_vfiprintf_r+0x1fe>
 8028774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8028776:	f7fe fadb 	bl	8026d30 <__retarget_lock_release_recursive>
 802877a:	89ab      	ldrh	r3, [r5, #12]
 802877c:	065b      	lsls	r3, r3, #25
 802877e:	f53f af1f 	bmi.w	80285c0 <_vfiprintf_r+0x44>
 8028782:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8028784:	e71e      	b.n	80285c4 <_vfiprintf_r+0x48>
 8028786:	ab03      	add	r3, sp, #12
 8028788:	9300      	str	r3, [sp, #0]
 802878a:	462a      	mov	r2, r5
 802878c:	4b05      	ldr	r3, [pc, #20]	@ (80287a4 <_vfiprintf_r+0x228>)
 802878e:	a904      	add	r1, sp, #16
 8028790:	4630      	mov	r0, r6
 8028792:	f7fd fe8b 	bl	80264ac <_printf_i>
 8028796:	e7e4      	b.n	8028762 <_vfiprintf_r+0x1e6>
 8028798:	0802f21c 	.word	0x0802f21c
 802879c:	0802f222 	.word	0x0802f222
 80287a0:	08025f7d 	.word	0x08025f7d
 80287a4:	08028557 	.word	0x08028557
 80287a8:	0802f218 	.word	0x0802f218

080287ac <_scanf_chars>:
 80287ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80287b0:	4615      	mov	r5, r2
 80287b2:	688a      	ldr	r2, [r1, #8]
 80287b4:	4680      	mov	r8, r0
 80287b6:	460c      	mov	r4, r1
 80287b8:	b932      	cbnz	r2, 80287c8 <_scanf_chars+0x1c>
 80287ba:	698a      	ldr	r2, [r1, #24]
 80287bc:	2a00      	cmp	r2, #0
 80287be:	bf14      	ite	ne
 80287c0:	f04f 32ff 	movne.w	r2, #4294967295
 80287c4:	2201      	moveq	r2, #1
 80287c6:	608a      	str	r2, [r1, #8]
 80287c8:	6822      	ldr	r2, [r4, #0]
 80287ca:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 802885c <_scanf_chars+0xb0>
 80287ce:	06d1      	lsls	r1, r2, #27
 80287d0:	bf5f      	itttt	pl
 80287d2:	681a      	ldrpl	r2, [r3, #0]
 80287d4:	1d11      	addpl	r1, r2, #4
 80287d6:	6019      	strpl	r1, [r3, #0]
 80287d8:	6816      	ldrpl	r6, [r2, #0]
 80287da:	2700      	movs	r7, #0
 80287dc:	69a0      	ldr	r0, [r4, #24]
 80287de:	b188      	cbz	r0, 8028804 <_scanf_chars+0x58>
 80287e0:	2801      	cmp	r0, #1
 80287e2:	d107      	bne.n	80287f4 <_scanf_chars+0x48>
 80287e4:	682b      	ldr	r3, [r5, #0]
 80287e6:	781a      	ldrb	r2, [r3, #0]
 80287e8:	6963      	ldr	r3, [r4, #20]
 80287ea:	5c9b      	ldrb	r3, [r3, r2]
 80287ec:	b953      	cbnz	r3, 8028804 <_scanf_chars+0x58>
 80287ee:	2f00      	cmp	r7, #0
 80287f0:	d031      	beq.n	8028856 <_scanf_chars+0xaa>
 80287f2:	e022      	b.n	802883a <_scanf_chars+0x8e>
 80287f4:	2802      	cmp	r0, #2
 80287f6:	d120      	bne.n	802883a <_scanf_chars+0x8e>
 80287f8:	682b      	ldr	r3, [r5, #0]
 80287fa:	781b      	ldrb	r3, [r3, #0]
 80287fc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8028800:	071b      	lsls	r3, r3, #28
 8028802:	d41a      	bmi.n	802883a <_scanf_chars+0x8e>
 8028804:	6823      	ldr	r3, [r4, #0]
 8028806:	06da      	lsls	r2, r3, #27
 8028808:	bf5e      	ittt	pl
 802880a:	682b      	ldrpl	r3, [r5, #0]
 802880c:	781b      	ldrbpl	r3, [r3, #0]
 802880e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8028812:	682a      	ldr	r2, [r5, #0]
 8028814:	686b      	ldr	r3, [r5, #4]
 8028816:	3201      	adds	r2, #1
 8028818:	602a      	str	r2, [r5, #0]
 802881a:	68a2      	ldr	r2, [r4, #8]
 802881c:	3b01      	subs	r3, #1
 802881e:	3a01      	subs	r2, #1
 8028820:	606b      	str	r3, [r5, #4]
 8028822:	3701      	adds	r7, #1
 8028824:	60a2      	str	r2, [r4, #8]
 8028826:	b142      	cbz	r2, 802883a <_scanf_chars+0x8e>
 8028828:	2b00      	cmp	r3, #0
 802882a:	dcd7      	bgt.n	80287dc <_scanf_chars+0x30>
 802882c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8028830:	4629      	mov	r1, r5
 8028832:	4640      	mov	r0, r8
 8028834:	4798      	blx	r3
 8028836:	2800      	cmp	r0, #0
 8028838:	d0d0      	beq.n	80287dc <_scanf_chars+0x30>
 802883a:	6823      	ldr	r3, [r4, #0]
 802883c:	f013 0310 	ands.w	r3, r3, #16
 8028840:	d105      	bne.n	802884e <_scanf_chars+0xa2>
 8028842:	68e2      	ldr	r2, [r4, #12]
 8028844:	3201      	adds	r2, #1
 8028846:	60e2      	str	r2, [r4, #12]
 8028848:	69a2      	ldr	r2, [r4, #24]
 802884a:	b102      	cbz	r2, 802884e <_scanf_chars+0xa2>
 802884c:	7033      	strb	r3, [r6, #0]
 802884e:	6923      	ldr	r3, [r4, #16]
 8028850:	443b      	add	r3, r7
 8028852:	6123      	str	r3, [r4, #16]
 8028854:	2000      	movs	r0, #0
 8028856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802885a:	bf00      	nop
 802885c:	0802f24f 	.word	0x0802f24f

08028860 <_scanf_i>:
 8028860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028864:	4698      	mov	r8, r3
 8028866:	4b74      	ldr	r3, [pc, #464]	@ (8028a38 <_scanf_i+0x1d8>)
 8028868:	460c      	mov	r4, r1
 802886a:	4682      	mov	sl, r0
 802886c:	4616      	mov	r6, r2
 802886e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8028872:	b087      	sub	sp, #28
 8028874:	ab03      	add	r3, sp, #12
 8028876:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802887a:	4b70      	ldr	r3, [pc, #448]	@ (8028a3c <_scanf_i+0x1dc>)
 802887c:	69a1      	ldr	r1, [r4, #24]
 802887e:	4a70      	ldr	r2, [pc, #448]	@ (8028a40 <_scanf_i+0x1e0>)
 8028880:	2903      	cmp	r1, #3
 8028882:	bf08      	it	eq
 8028884:	461a      	moveq	r2, r3
 8028886:	68a3      	ldr	r3, [r4, #8]
 8028888:	9201      	str	r2, [sp, #4]
 802888a:	1e5a      	subs	r2, r3, #1
 802888c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8028890:	bf88      	it	hi
 8028892:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8028896:	4627      	mov	r7, r4
 8028898:	bf82      	ittt	hi
 802889a:	eb03 0905 	addhi.w	r9, r3, r5
 802889e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80288a2:	60a3      	strhi	r3, [r4, #8]
 80288a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80288a8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80288ac:	bf98      	it	ls
 80288ae:	f04f 0900 	movls.w	r9, #0
 80288b2:	6023      	str	r3, [r4, #0]
 80288b4:	463d      	mov	r5, r7
 80288b6:	f04f 0b00 	mov.w	fp, #0
 80288ba:	6831      	ldr	r1, [r6, #0]
 80288bc:	ab03      	add	r3, sp, #12
 80288be:	7809      	ldrb	r1, [r1, #0]
 80288c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80288c4:	2202      	movs	r2, #2
 80288c6:	f7d7 fc6b 	bl	80001a0 <memchr>
 80288ca:	b328      	cbz	r0, 8028918 <_scanf_i+0xb8>
 80288cc:	f1bb 0f01 	cmp.w	fp, #1
 80288d0:	d159      	bne.n	8028986 <_scanf_i+0x126>
 80288d2:	6862      	ldr	r2, [r4, #4]
 80288d4:	b92a      	cbnz	r2, 80288e2 <_scanf_i+0x82>
 80288d6:	6822      	ldr	r2, [r4, #0]
 80288d8:	2108      	movs	r1, #8
 80288da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80288de:	6061      	str	r1, [r4, #4]
 80288e0:	6022      	str	r2, [r4, #0]
 80288e2:	6822      	ldr	r2, [r4, #0]
 80288e4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80288e8:	6022      	str	r2, [r4, #0]
 80288ea:	68a2      	ldr	r2, [r4, #8]
 80288ec:	1e51      	subs	r1, r2, #1
 80288ee:	60a1      	str	r1, [r4, #8]
 80288f0:	b192      	cbz	r2, 8028918 <_scanf_i+0xb8>
 80288f2:	6832      	ldr	r2, [r6, #0]
 80288f4:	1c51      	adds	r1, r2, #1
 80288f6:	6031      	str	r1, [r6, #0]
 80288f8:	7812      	ldrb	r2, [r2, #0]
 80288fa:	f805 2b01 	strb.w	r2, [r5], #1
 80288fe:	6872      	ldr	r2, [r6, #4]
 8028900:	3a01      	subs	r2, #1
 8028902:	2a00      	cmp	r2, #0
 8028904:	6072      	str	r2, [r6, #4]
 8028906:	dc07      	bgt.n	8028918 <_scanf_i+0xb8>
 8028908:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 802890c:	4631      	mov	r1, r6
 802890e:	4650      	mov	r0, sl
 8028910:	4790      	blx	r2
 8028912:	2800      	cmp	r0, #0
 8028914:	f040 8085 	bne.w	8028a22 <_scanf_i+0x1c2>
 8028918:	f10b 0b01 	add.w	fp, fp, #1
 802891c:	f1bb 0f03 	cmp.w	fp, #3
 8028920:	d1cb      	bne.n	80288ba <_scanf_i+0x5a>
 8028922:	6863      	ldr	r3, [r4, #4]
 8028924:	b90b      	cbnz	r3, 802892a <_scanf_i+0xca>
 8028926:	230a      	movs	r3, #10
 8028928:	6063      	str	r3, [r4, #4]
 802892a:	6863      	ldr	r3, [r4, #4]
 802892c:	4945      	ldr	r1, [pc, #276]	@ (8028a44 <_scanf_i+0x1e4>)
 802892e:	6960      	ldr	r0, [r4, #20]
 8028930:	1ac9      	subs	r1, r1, r3
 8028932:	f000 f997 	bl	8028c64 <__sccl>
 8028936:	f04f 0b00 	mov.w	fp, #0
 802893a:	68a3      	ldr	r3, [r4, #8]
 802893c:	6822      	ldr	r2, [r4, #0]
 802893e:	2b00      	cmp	r3, #0
 8028940:	d03d      	beq.n	80289be <_scanf_i+0x15e>
 8028942:	6831      	ldr	r1, [r6, #0]
 8028944:	6960      	ldr	r0, [r4, #20]
 8028946:	f891 c000 	ldrb.w	ip, [r1]
 802894a:	f810 000c 	ldrb.w	r0, [r0, ip]
 802894e:	2800      	cmp	r0, #0
 8028950:	d035      	beq.n	80289be <_scanf_i+0x15e>
 8028952:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8028956:	d124      	bne.n	80289a2 <_scanf_i+0x142>
 8028958:	0510      	lsls	r0, r2, #20
 802895a:	d522      	bpl.n	80289a2 <_scanf_i+0x142>
 802895c:	f10b 0b01 	add.w	fp, fp, #1
 8028960:	f1b9 0f00 	cmp.w	r9, #0
 8028964:	d003      	beq.n	802896e <_scanf_i+0x10e>
 8028966:	3301      	adds	r3, #1
 8028968:	f109 39ff 	add.w	r9, r9, #4294967295
 802896c:	60a3      	str	r3, [r4, #8]
 802896e:	6873      	ldr	r3, [r6, #4]
 8028970:	3b01      	subs	r3, #1
 8028972:	2b00      	cmp	r3, #0
 8028974:	6073      	str	r3, [r6, #4]
 8028976:	dd1b      	ble.n	80289b0 <_scanf_i+0x150>
 8028978:	6833      	ldr	r3, [r6, #0]
 802897a:	3301      	adds	r3, #1
 802897c:	6033      	str	r3, [r6, #0]
 802897e:	68a3      	ldr	r3, [r4, #8]
 8028980:	3b01      	subs	r3, #1
 8028982:	60a3      	str	r3, [r4, #8]
 8028984:	e7d9      	b.n	802893a <_scanf_i+0xda>
 8028986:	f1bb 0f02 	cmp.w	fp, #2
 802898a:	d1ae      	bne.n	80288ea <_scanf_i+0x8a>
 802898c:	6822      	ldr	r2, [r4, #0]
 802898e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8028992:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8028996:	d1bf      	bne.n	8028918 <_scanf_i+0xb8>
 8028998:	2110      	movs	r1, #16
 802899a:	6061      	str	r1, [r4, #4]
 802899c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80289a0:	e7a2      	b.n	80288e8 <_scanf_i+0x88>
 80289a2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80289a6:	6022      	str	r2, [r4, #0]
 80289a8:	780b      	ldrb	r3, [r1, #0]
 80289aa:	f805 3b01 	strb.w	r3, [r5], #1
 80289ae:	e7de      	b.n	802896e <_scanf_i+0x10e>
 80289b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80289b4:	4631      	mov	r1, r6
 80289b6:	4650      	mov	r0, sl
 80289b8:	4798      	blx	r3
 80289ba:	2800      	cmp	r0, #0
 80289bc:	d0df      	beq.n	802897e <_scanf_i+0x11e>
 80289be:	6823      	ldr	r3, [r4, #0]
 80289c0:	05d9      	lsls	r1, r3, #23
 80289c2:	d50d      	bpl.n	80289e0 <_scanf_i+0x180>
 80289c4:	42bd      	cmp	r5, r7
 80289c6:	d909      	bls.n	80289dc <_scanf_i+0x17c>
 80289c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80289cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80289d0:	4632      	mov	r2, r6
 80289d2:	4650      	mov	r0, sl
 80289d4:	4798      	blx	r3
 80289d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80289da:	464d      	mov	r5, r9
 80289dc:	42bd      	cmp	r5, r7
 80289de:	d028      	beq.n	8028a32 <_scanf_i+0x1d2>
 80289e0:	6822      	ldr	r2, [r4, #0]
 80289e2:	f012 0210 	ands.w	r2, r2, #16
 80289e6:	d113      	bne.n	8028a10 <_scanf_i+0x1b0>
 80289e8:	702a      	strb	r2, [r5, #0]
 80289ea:	6863      	ldr	r3, [r4, #4]
 80289ec:	9e01      	ldr	r6, [sp, #4]
 80289ee:	4639      	mov	r1, r7
 80289f0:	4650      	mov	r0, sl
 80289f2:	47b0      	blx	r6
 80289f4:	f8d8 3000 	ldr.w	r3, [r8]
 80289f8:	6821      	ldr	r1, [r4, #0]
 80289fa:	1d1a      	adds	r2, r3, #4
 80289fc:	f8c8 2000 	str.w	r2, [r8]
 8028a00:	f011 0f20 	tst.w	r1, #32
 8028a04:	681b      	ldr	r3, [r3, #0]
 8028a06:	d00f      	beq.n	8028a28 <_scanf_i+0x1c8>
 8028a08:	6018      	str	r0, [r3, #0]
 8028a0a:	68e3      	ldr	r3, [r4, #12]
 8028a0c:	3301      	adds	r3, #1
 8028a0e:	60e3      	str	r3, [r4, #12]
 8028a10:	6923      	ldr	r3, [r4, #16]
 8028a12:	1bed      	subs	r5, r5, r7
 8028a14:	445d      	add	r5, fp
 8028a16:	442b      	add	r3, r5
 8028a18:	6123      	str	r3, [r4, #16]
 8028a1a:	2000      	movs	r0, #0
 8028a1c:	b007      	add	sp, #28
 8028a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a22:	f04f 0b00 	mov.w	fp, #0
 8028a26:	e7ca      	b.n	80289be <_scanf_i+0x15e>
 8028a28:	07ca      	lsls	r2, r1, #31
 8028a2a:	bf4c      	ite	mi
 8028a2c:	8018      	strhmi	r0, [r3, #0]
 8028a2e:	6018      	strpl	r0, [r3, #0]
 8028a30:	e7eb      	b.n	8028a0a <_scanf_i+0x1aa>
 8028a32:	2001      	movs	r0, #1
 8028a34:	e7f2      	b.n	8028a1c <_scanf_i+0x1bc>
 8028a36:	bf00      	nop
 8028a38:	0802dcb4 	.word	0x0802dcb4
 8028a3c:	08028fb5 	.word	0x08028fb5
 8028a40:	08029095 	.word	0x08029095
 8028a44:	0802f239 	.word	0x0802f239

08028a48 <__sflush_r>:
 8028a48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8028a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028a50:	0716      	lsls	r6, r2, #28
 8028a52:	4605      	mov	r5, r0
 8028a54:	460c      	mov	r4, r1
 8028a56:	d454      	bmi.n	8028b02 <__sflush_r+0xba>
 8028a58:	684b      	ldr	r3, [r1, #4]
 8028a5a:	2b00      	cmp	r3, #0
 8028a5c:	dc02      	bgt.n	8028a64 <__sflush_r+0x1c>
 8028a5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8028a60:	2b00      	cmp	r3, #0
 8028a62:	dd48      	ble.n	8028af6 <__sflush_r+0xae>
 8028a64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8028a66:	2e00      	cmp	r6, #0
 8028a68:	d045      	beq.n	8028af6 <__sflush_r+0xae>
 8028a6a:	2300      	movs	r3, #0
 8028a6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8028a70:	682f      	ldr	r7, [r5, #0]
 8028a72:	6a21      	ldr	r1, [r4, #32]
 8028a74:	602b      	str	r3, [r5, #0]
 8028a76:	d030      	beq.n	8028ada <__sflush_r+0x92>
 8028a78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028a7a:	89a3      	ldrh	r3, [r4, #12]
 8028a7c:	0759      	lsls	r1, r3, #29
 8028a7e:	d505      	bpl.n	8028a8c <__sflush_r+0x44>
 8028a80:	6863      	ldr	r3, [r4, #4]
 8028a82:	1ad2      	subs	r2, r2, r3
 8028a84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028a86:	b10b      	cbz	r3, 8028a8c <__sflush_r+0x44>
 8028a88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028a8a:	1ad2      	subs	r2, r2, r3
 8028a8c:	2300      	movs	r3, #0
 8028a8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8028a90:	6a21      	ldr	r1, [r4, #32]
 8028a92:	4628      	mov	r0, r5
 8028a94:	47b0      	blx	r6
 8028a96:	1c43      	adds	r3, r0, #1
 8028a98:	89a3      	ldrh	r3, [r4, #12]
 8028a9a:	d106      	bne.n	8028aaa <__sflush_r+0x62>
 8028a9c:	6829      	ldr	r1, [r5, #0]
 8028a9e:	291d      	cmp	r1, #29
 8028aa0:	d82b      	bhi.n	8028afa <__sflush_r+0xb2>
 8028aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8028b4c <__sflush_r+0x104>)
 8028aa4:	410a      	asrs	r2, r1
 8028aa6:	07d6      	lsls	r6, r2, #31
 8028aa8:	d427      	bmi.n	8028afa <__sflush_r+0xb2>
 8028aaa:	2200      	movs	r2, #0
 8028aac:	6062      	str	r2, [r4, #4]
 8028aae:	04d9      	lsls	r1, r3, #19
 8028ab0:	6922      	ldr	r2, [r4, #16]
 8028ab2:	6022      	str	r2, [r4, #0]
 8028ab4:	d504      	bpl.n	8028ac0 <__sflush_r+0x78>
 8028ab6:	1c42      	adds	r2, r0, #1
 8028ab8:	d101      	bne.n	8028abe <__sflush_r+0x76>
 8028aba:	682b      	ldr	r3, [r5, #0]
 8028abc:	b903      	cbnz	r3, 8028ac0 <__sflush_r+0x78>
 8028abe:	6560      	str	r0, [r4, #84]	@ 0x54
 8028ac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028ac2:	602f      	str	r7, [r5, #0]
 8028ac4:	b1b9      	cbz	r1, 8028af6 <__sflush_r+0xae>
 8028ac6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028aca:	4299      	cmp	r1, r3
 8028acc:	d002      	beq.n	8028ad4 <__sflush_r+0x8c>
 8028ace:	4628      	mov	r0, r5
 8028ad0:	f7fe ff92 	bl	80279f8 <_free_r>
 8028ad4:	2300      	movs	r3, #0
 8028ad6:	6363      	str	r3, [r4, #52]	@ 0x34
 8028ad8:	e00d      	b.n	8028af6 <__sflush_r+0xae>
 8028ada:	2301      	movs	r3, #1
 8028adc:	4628      	mov	r0, r5
 8028ade:	47b0      	blx	r6
 8028ae0:	4602      	mov	r2, r0
 8028ae2:	1c50      	adds	r0, r2, #1
 8028ae4:	d1c9      	bne.n	8028a7a <__sflush_r+0x32>
 8028ae6:	682b      	ldr	r3, [r5, #0]
 8028ae8:	2b00      	cmp	r3, #0
 8028aea:	d0c6      	beq.n	8028a7a <__sflush_r+0x32>
 8028aec:	2b1d      	cmp	r3, #29
 8028aee:	d001      	beq.n	8028af4 <__sflush_r+0xac>
 8028af0:	2b16      	cmp	r3, #22
 8028af2:	d11e      	bne.n	8028b32 <__sflush_r+0xea>
 8028af4:	602f      	str	r7, [r5, #0]
 8028af6:	2000      	movs	r0, #0
 8028af8:	e022      	b.n	8028b40 <__sflush_r+0xf8>
 8028afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028afe:	b21b      	sxth	r3, r3
 8028b00:	e01b      	b.n	8028b3a <__sflush_r+0xf2>
 8028b02:	690f      	ldr	r7, [r1, #16]
 8028b04:	2f00      	cmp	r7, #0
 8028b06:	d0f6      	beq.n	8028af6 <__sflush_r+0xae>
 8028b08:	0793      	lsls	r3, r2, #30
 8028b0a:	680e      	ldr	r6, [r1, #0]
 8028b0c:	bf08      	it	eq
 8028b0e:	694b      	ldreq	r3, [r1, #20]
 8028b10:	600f      	str	r7, [r1, #0]
 8028b12:	bf18      	it	ne
 8028b14:	2300      	movne	r3, #0
 8028b16:	eba6 0807 	sub.w	r8, r6, r7
 8028b1a:	608b      	str	r3, [r1, #8]
 8028b1c:	f1b8 0f00 	cmp.w	r8, #0
 8028b20:	dde9      	ble.n	8028af6 <__sflush_r+0xae>
 8028b22:	6a21      	ldr	r1, [r4, #32]
 8028b24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8028b26:	4643      	mov	r3, r8
 8028b28:	463a      	mov	r2, r7
 8028b2a:	4628      	mov	r0, r5
 8028b2c:	47b0      	blx	r6
 8028b2e:	2800      	cmp	r0, #0
 8028b30:	dc08      	bgt.n	8028b44 <__sflush_r+0xfc>
 8028b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028b36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028b3a:	81a3      	strh	r3, [r4, #12]
 8028b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8028b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028b44:	4407      	add	r7, r0
 8028b46:	eba8 0800 	sub.w	r8, r8, r0
 8028b4a:	e7e7      	b.n	8028b1c <__sflush_r+0xd4>
 8028b4c:	dfbffffe 	.word	0xdfbffffe

08028b50 <_fflush_r>:
 8028b50:	b538      	push	{r3, r4, r5, lr}
 8028b52:	690b      	ldr	r3, [r1, #16]
 8028b54:	4605      	mov	r5, r0
 8028b56:	460c      	mov	r4, r1
 8028b58:	b913      	cbnz	r3, 8028b60 <_fflush_r+0x10>
 8028b5a:	2500      	movs	r5, #0
 8028b5c:	4628      	mov	r0, r5
 8028b5e:	bd38      	pop	{r3, r4, r5, pc}
 8028b60:	b118      	cbz	r0, 8028b6a <_fflush_r+0x1a>
 8028b62:	6a03      	ldr	r3, [r0, #32]
 8028b64:	b90b      	cbnz	r3, 8028b6a <_fflush_r+0x1a>
 8028b66:	f7fd fe4d 	bl	8026804 <__sinit>
 8028b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028b6e:	2b00      	cmp	r3, #0
 8028b70:	d0f3      	beq.n	8028b5a <_fflush_r+0xa>
 8028b72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028b74:	07d0      	lsls	r0, r2, #31
 8028b76:	d404      	bmi.n	8028b82 <_fflush_r+0x32>
 8028b78:	0599      	lsls	r1, r3, #22
 8028b7a:	d402      	bmi.n	8028b82 <_fflush_r+0x32>
 8028b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028b7e:	f7fe f8d6 	bl	8026d2e <__retarget_lock_acquire_recursive>
 8028b82:	4628      	mov	r0, r5
 8028b84:	4621      	mov	r1, r4
 8028b86:	f7ff ff5f 	bl	8028a48 <__sflush_r>
 8028b8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028b8c:	07da      	lsls	r2, r3, #31
 8028b8e:	4605      	mov	r5, r0
 8028b90:	d4e4      	bmi.n	8028b5c <_fflush_r+0xc>
 8028b92:	89a3      	ldrh	r3, [r4, #12]
 8028b94:	059b      	lsls	r3, r3, #22
 8028b96:	d4e1      	bmi.n	8028b5c <_fflush_r+0xc>
 8028b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028b9a:	f7fe f8c9 	bl	8026d30 <__retarget_lock_release_recursive>
 8028b9e:	e7dd      	b.n	8028b5c <_fflush_r+0xc>

08028ba0 <__swhatbuf_r>:
 8028ba0:	b570      	push	{r4, r5, r6, lr}
 8028ba2:	460c      	mov	r4, r1
 8028ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028ba8:	2900      	cmp	r1, #0
 8028baa:	b096      	sub	sp, #88	@ 0x58
 8028bac:	4615      	mov	r5, r2
 8028bae:	461e      	mov	r6, r3
 8028bb0:	da0d      	bge.n	8028bce <__swhatbuf_r+0x2e>
 8028bb2:	89a3      	ldrh	r3, [r4, #12]
 8028bb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8028bb8:	f04f 0100 	mov.w	r1, #0
 8028bbc:	bf14      	ite	ne
 8028bbe:	2340      	movne	r3, #64	@ 0x40
 8028bc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8028bc4:	2000      	movs	r0, #0
 8028bc6:	6031      	str	r1, [r6, #0]
 8028bc8:	602b      	str	r3, [r5, #0]
 8028bca:	b016      	add	sp, #88	@ 0x58
 8028bcc:	bd70      	pop	{r4, r5, r6, pc}
 8028bce:	466a      	mov	r2, sp
 8028bd0:	f000 f8ec 	bl	8028dac <_fstat_r>
 8028bd4:	2800      	cmp	r0, #0
 8028bd6:	dbec      	blt.n	8028bb2 <__swhatbuf_r+0x12>
 8028bd8:	9901      	ldr	r1, [sp, #4]
 8028bda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8028bde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8028be2:	4259      	negs	r1, r3
 8028be4:	4159      	adcs	r1, r3
 8028be6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8028bea:	e7eb      	b.n	8028bc4 <__swhatbuf_r+0x24>

08028bec <__smakebuf_r>:
 8028bec:	898b      	ldrh	r3, [r1, #12]
 8028bee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028bf0:	079d      	lsls	r5, r3, #30
 8028bf2:	4606      	mov	r6, r0
 8028bf4:	460c      	mov	r4, r1
 8028bf6:	d507      	bpl.n	8028c08 <__smakebuf_r+0x1c>
 8028bf8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8028bfc:	6023      	str	r3, [r4, #0]
 8028bfe:	6123      	str	r3, [r4, #16]
 8028c00:	2301      	movs	r3, #1
 8028c02:	6163      	str	r3, [r4, #20]
 8028c04:	b003      	add	sp, #12
 8028c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028c08:	ab01      	add	r3, sp, #4
 8028c0a:	466a      	mov	r2, sp
 8028c0c:	f7ff ffc8 	bl	8028ba0 <__swhatbuf_r>
 8028c10:	9f00      	ldr	r7, [sp, #0]
 8028c12:	4605      	mov	r5, r0
 8028c14:	4639      	mov	r1, r7
 8028c16:	4630      	mov	r0, r6
 8028c18:	f7fd f884 	bl	8025d24 <_malloc_r>
 8028c1c:	b948      	cbnz	r0, 8028c32 <__smakebuf_r+0x46>
 8028c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028c22:	059a      	lsls	r2, r3, #22
 8028c24:	d4ee      	bmi.n	8028c04 <__smakebuf_r+0x18>
 8028c26:	f023 0303 	bic.w	r3, r3, #3
 8028c2a:	f043 0302 	orr.w	r3, r3, #2
 8028c2e:	81a3      	strh	r3, [r4, #12]
 8028c30:	e7e2      	b.n	8028bf8 <__smakebuf_r+0xc>
 8028c32:	89a3      	ldrh	r3, [r4, #12]
 8028c34:	6020      	str	r0, [r4, #0]
 8028c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8028c3a:	81a3      	strh	r3, [r4, #12]
 8028c3c:	9b01      	ldr	r3, [sp, #4]
 8028c3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8028c42:	b15b      	cbz	r3, 8028c5c <__smakebuf_r+0x70>
 8028c44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028c48:	4630      	mov	r0, r6
 8028c4a:	f000 f8c1 	bl	8028dd0 <_isatty_r>
 8028c4e:	b128      	cbz	r0, 8028c5c <__smakebuf_r+0x70>
 8028c50:	89a3      	ldrh	r3, [r4, #12]
 8028c52:	f023 0303 	bic.w	r3, r3, #3
 8028c56:	f043 0301 	orr.w	r3, r3, #1
 8028c5a:	81a3      	strh	r3, [r4, #12]
 8028c5c:	89a3      	ldrh	r3, [r4, #12]
 8028c5e:	431d      	orrs	r5, r3
 8028c60:	81a5      	strh	r5, [r4, #12]
 8028c62:	e7cf      	b.n	8028c04 <__smakebuf_r+0x18>

08028c64 <__sccl>:
 8028c64:	b570      	push	{r4, r5, r6, lr}
 8028c66:	780b      	ldrb	r3, [r1, #0]
 8028c68:	4604      	mov	r4, r0
 8028c6a:	2b5e      	cmp	r3, #94	@ 0x5e
 8028c6c:	bf0b      	itete	eq
 8028c6e:	784b      	ldrbeq	r3, [r1, #1]
 8028c70:	1c4a      	addne	r2, r1, #1
 8028c72:	1c8a      	addeq	r2, r1, #2
 8028c74:	2100      	movne	r1, #0
 8028c76:	bf08      	it	eq
 8028c78:	2101      	moveq	r1, #1
 8028c7a:	3801      	subs	r0, #1
 8028c7c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8028c80:	f800 1f01 	strb.w	r1, [r0, #1]!
 8028c84:	42a8      	cmp	r0, r5
 8028c86:	d1fb      	bne.n	8028c80 <__sccl+0x1c>
 8028c88:	b90b      	cbnz	r3, 8028c8e <__sccl+0x2a>
 8028c8a:	1e50      	subs	r0, r2, #1
 8028c8c:	bd70      	pop	{r4, r5, r6, pc}
 8028c8e:	f081 0101 	eor.w	r1, r1, #1
 8028c92:	54e1      	strb	r1, [r4, r3]
 8028c94:	4610      	mov	r0, r2
 8028c96:	4602      	mov	r2, r0
 8028c98:	f812 5b01 	ldrb.w	r5, [r2], #1
 8028c9c:	2d2d      	cmp	r5, #45	@ 0x2d
 8028c9e:	d005      	beq.n	8028cac <__sccl+0x48>
 8028ca0:	2d5d      	cmp	r5, #93	@ 0x5d
 8028ca2:	d016      	beq.n	8028cd2 <__sccl+0x6e>
 8028ca4:	2d00      	cmp	r5, #0
 8028ca6:	d0f1      	beq.n	8028c8c <__sccl+0x28>
 8028ca8:	462b      	mov	r3, r5
 8028caa:	e7f2      	b.n	8028c92 <__sccl+0x2e>
 8028cac:	7846      	ldrb	r6, [r0, #1]
 8028cae:	2e5d      	cmp	r6, #93	@ 0x5d
 8028cb0:	d0fa      	beq.n	8028ca8 <__sccl+0x44>
 8028cb2:	42b3      	cmp	r3, r6
 8028cb4:	dcf8      	bgt.n	8028ca8 <__sccl+0x44>
 8028cb6:	3002      	adds	r0, #2
 8028cb8:	461a      	mov	r2, r3
 8028cba:	3201      	adds	r2, #1
 8028cbc:	4296      	cmp	r6, r2
 8028cbe:	54a1      	strb	r1, [r4, r2]
 8028cc0:	dcfb      	bgt.n	8028cba <__sccl+0x56>
 8028cc2:	1af2      	subs	r2, r6, r3
 8028cc4:	3a01      	subs	r2, #1
 8028cc6:	1c5d      	adds	r5, r3, #1
 8028cc8:	42b3      	cmp	r3, r6
 8028cca:	bfa8      	it	ge
 8028ccc:	2200      	movge	r2, #0
 8028cce:	18ab      	adds	r3, r5, r2
 8028cd0:	e7e1      	b.n	8028c96 <__sccl+0x32>
 8028cd2:	4610      	mov	r0, r2
 8028cd4:	e7da      	b.n	8028c8c <__sccl+0x28>

08028cd6 <__submore>:
 8028cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028cda:	460c      	mov	r4, r1
 8028cdc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8028cde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028ce2:	4299      	cmp	r1, r3
 8028ce4:	d11d      	bne.n	8028d22 <__submore+0x4c>
 8028ce6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8028cea:	f7fd f81b 	bl	8025d24 <_malloc_r>
 8028cee:	b918      	cbnz	r0, 8028cf8 <__submore+0x22>
 8028cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8028cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028cf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8028cfc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8028cfe:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8028d02:	6360      	str	r0, [r4, #52]	@ 0x34
 8028d04:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8028d08:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8028d0c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8028d10:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8028d14:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8028d18:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8028d1c:	6020      	str	r0, [r4, #0]
 8028d1e:	2000      	movs	r0, #0
 8028d20:	e7e8      	b.n	8028cf4 <__submore+0x1e>
 8028d22:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8028d24:	0077      	lsls	r7, r6, #1
 8028d26:	463a      	mov	r2, r7
 8028d28:	f000 f89c 	bl	8028e64 <_realloc_r>
 8028d2c:	4605      	mov	r5, r0
 8028d2e:	2800      	cmp	r0, #0
 8028d30:	d0de      	beq.n	8028cf0 <__submore+0x1a>
 8028d32:	eb00 0806 	add.w	r8, r0, r6
 8028d36:	4601      	mov	r1, r0
 8028d38:	4632      	mov	r2, r6
 8028d3a:	4640      	mov	r0, r8
 8028d3c:	f7fd fff9 	bl	8026d32 <memcpy>
 8028d40:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8028d44:	f8c4 8000 	str.w	r8, [r4]
 8028d48:	e7e9      	b.n	8028d1e <__submore+0x48>

08028d4a <_raise_r>:
 8028d4a:	291f      	cmp	r1, #31
 8028d4c:	b538      	push	{r3, r4, r5, lr}
 8028d4e:	4605      	mov	r5, r0
 8028d50:	460c      	mov	r4, r1
 8028d52:	d904      	bls.n	8028d5e <_raise_r+0x14>
 8028d54:	2316      	movs	r3, #22
 8028d56:	6003      	str	r3, [r0, #0]
 8028d58:	f04f 30ff 	mov.w	r0, #4294967295
 8028d5c:	bd38      	pop	{r3, r4, r5, pc}
 8028d5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8028d60:	b112      	cbz	r2, 8028d68 <_raise_r+0x1e>
 8028d62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028d66:	b94b      	cbnz	r3, 8028d7c <_raise_r+0x32>
 8028d68:	4628      	mov	r0, r5
 8028d6a:	f000 f853 	bl	8028e14 <_getpid_r>
 8028d6e:	4622      	mov	r2, r4
 8028d70:	4601      	mov	r1, r0
 8028d72:	4628      	mov	r0, r5
 8028d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028d78:	f000 b83a 	b.w	8028df0 <_kill_r>
 8028d7c:	2b01      	cmp	r3, #1
 8028d7e:	d00a      	beq.n	8028d96 <_raise_r+0x4c>
 8028d80:	1c59      	adds	r1, r3, #1
 8028d82:	d103      	bne.n	8028d8c <_raise_r+0x42>
 8028d84:	2316      	movs	r3, #22
 8028d86:	6003      	str	r3, [r0, #0]
 8028d88:	2001      	movs	r0, #1
 8028d8a:	e7e7      	b.n	8028d5c <_raise_r+0x12>
 8028d8c:	2100      	movs	r1, #0
 8028d8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8028d92:	4620      	mov	r0, r4
 8028d94:	4798      	blx	r3
 8028d96:	2000      	movs	r0, #0
 8028d98:	e7e0      	b.n	8028d5c <_raise_r+0x12>
	...

08028d9c <raise>:
 8028d9c:	4b02      	ldr	r3, [pc, #8]	@ (8028da8 <raise+0xc>)
 8028d9e:	4601      	mov	r1, r0
 8028da0:	6818      	ldr	r0, [r3, #0]
 8028da2:	f7ff bfd2 	b.w	8028d4a <_raise_r>
 8028da6:	bf00      	nop
 8028da8:	200000ec 	.word	0x200000ec

08028dac <_fstat_r>:
 8028dac:	b538      	push	{r3, r4, r5, lr}
 8028dae:	4d07      	ldr	r5, [pc, #28]	@ (8028dcc <_fstat_r+0x20>)
 8028db0:	2300      	movs	r3, #0
 8028db2:	4604      	mov	r4, r0
 8028db4:	4608      	mov	r0, r1
 8028db6:	4611      	mov	r1, r2
 8028db8:	602b      	str	r3, [r5, #0]
 8028dba:	f7da fc8c 	bl	80036d6 <_fstat>
 8028dbe:	1c43      	adds	r3, r0, #1
 8028dc0:	d102      	bne.n	8028dc8 <_fstat_r+0x1c>
 8028dc2:	682b      	ldr	r3, [r5, #0]
 8028dc4:	b103      	cbz	r3, 8028dc8 <_fstat_r+0x1c>
 8028dc6:	6023      	str	r3, [r4, #0]
 8028dc8:	bd38      	pop	{r3, r4, r5, pc}
 8028dca:	bf00      	nop
 8028dcc:	200081fc 	.word	0x200081fc

08028dd0 <_isatty_r>:
 8028dd0:	b538      	push	{r3, r4, r5, lr}
 8028dd2:	4d06      	ldr	r5, [pc, #24]	@ (8028dec <_isatty_r+0x1c>)
 8028dd4:	2300      	movs	r3, #0
 8028dd6:	4604      	mov	r4, r0
 8028dd8:	4608      	mov	r0, r1
 8028dda:	602b      	str	r3, [r5, #0]
 8028ddc:	f7da fc8b 	bl	80036f6 <_isatty>
 8028de0:	1c43      	adds	r3, r0, #1
 8028de2:	d102      	bne.n	8028dea <_isatty_r+0x1a>
 8028de4:	682b      	ldr	r3, [r5, #0]
 8028de6:	b103      	cbz	r3, 8028dea <_isatty_r+0x1a>
 8028de8:	6023      	str	r3, [r4, #0]
 8028dea:	bd38      	pop	{r3, r4, r5, pc}
 8028dec:	200081fc 	.word	0x200081fc

08028df0 <_kill_r>:
 8028df0:	b538      	push	{r3, r4, r5, lr}
 8028df2:	4d07      	ldr	r5, [pc, #28]	@ (8028e10 <_kill_r+0x20>)
 8028df4:	2300      	movs	r3, #0
 8028df6:	4604      	mov	r4, r0
 8028df8:	4608      	mov	r0, r1
 8028dfa:	4611      	mov	r1, r2
 8028dfc:	602b      	str	r3, [r5, #0]
 8028dfe:	f7da fc26 	bl	800364e <_kill>
 8028e02:	1c43      	adds	r3, r0, #1
 8028e04:	d102      	bne.n	8028e0c <_kill_r+0x1c>
 8028e06:	682b      	ldr	r3, [r5, #0]
 8028e08:	b103      	cbz	r3, 8028e0c <_kill_r+0x1c>
 8028e0a:	6023      	str	r3, [r4, #0]
 8028e0c:	bd38      	pop	{r3, r4, r5, pc}
 8028e0e:	bf00      	nop
 8028e10:	200081fc 	.word	0x200081fc

08028e14 <_getpid_r>:
 8028e14:	f7da bc13 	b.w	800363e <_getpid>

08028e18 <_calloc_r>:
 8028e18:	b570      	push	{r4, r5, r6, lr}
 8028e1a:	fba1 5402 	umull	r5, r4, r1, r2
 8028e1e:	b93c      	cbnz	r4, 8028e30 <_calloc_r+0x18>
 8028e20:	4629      	mov	r1, r5
 8028e22:	f7fc ff7f 	bl	8025d24 <_malloc_r>
 8028e26:	4606      	mov	r6, r0
 8028e28:	b928      	cbnz	r0, 8028e36 <_calloc_r+0x1e>
 8028e2a:	2600      	movs	r6, #0
 8028e2c:	4630      	mov	r0, r6
 8028e2e:	bd70      	pop	{r4, r5, r6, pc}
 8028e30:	220c      	movs	r2, #12
 8028e32:	6002      	str	r2, [r0, #0]
 8028e34:	e7f9      	b.n	8028e2a <_calloc_r+0x12>
 8028e36:	462a      	mov	r2, r5
 8028e38:	4621      	mov	r1, r4
 8028e3a:	f7fd fec9 	bl	8026bd0 <memset>
 8028e3e:	e7f5      	b.n	8028e2c <_calloc_r+0x14>

08028e40 <__ascii_mbtowc>:
 8028e40:	b082      	sub	sp, #8
 8028e42:	b901      	cbnz	r1, 8028e46 <__ascii_mbtowc+0x6>
 8028e44:	a901      	add	r1, sp, #4
 8028e46:	b142      	cbz	r2, 8028e5a <__ascii_mbtowc+0x1a>
 8028e48:	b14b      	cbz	r3, 8028e5e <__ascii_mbtowc+0x1e>
 8028e4a:	7813      	ldrb	r3, [r2, #0]
 8028e4c:	600b      	str	r3, [r1, #0]
 8028e4e:	7812      	ldrb	r2, [r2, #0]
 8028e50:	1e10      	subs	r0, r2, #0
 8028e52:	bf18      	it	ne
 8028e54:	2001      	movne	r0, #1
 8028e56:	b002      	add	sp, #8
 8028e58:	4770      	bx	lr
 8028e5a:	4610      	mov	r0, r2
 8028e5c:	e7fb      	b.n	8028e56 <__ascii_mbtowc+0x16>
 8028e5e:	f06f 0001 	mvn.w	r0, #1
 8028e62:	e7f8      	b.n	8028e56 <__ascii_mbtowc+0x16>

08028e64 <_realloc_r>:
 8028e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028e68:	4680      	mov	r8, r0
 8028e6a:	4615      	mov	r5, r2
 8028e6c:	460c      	mov	r4, r1
 8028e6e:	b921      	cbnz	r1, 8028e7a <_realloc_r+0x16>
 8028e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028e74:	4611      	mov	r1, r2
 8028e76:	f7fc bf55 	b.w	8025d24 <_malloc_r>
 8028e7a:	b92a      	cbnz	r2, 8028e88 <_realloc_r+0x24>
 8028e7c:	f7fe fdbc 	bl	80279f8 <_free_r>
 8028e80:	2400      	movs	r4, #0
 8028e82:	4620      	mov	r0, r4
 8028e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028e88:	f000 f913 	bl	80290b2 <_malloc_usable_size_r>
 8028e8c:	4285      	cmp	r5, r0
 8028e8e:	4606      	mov	r6, r0
 8028e90:	d802      	bhi.n	8028e98 <_realloc_r+0x34>
 8028e92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8028e96:	d8f4      	bhi.n	8028e82 <_realloc_r+0x1e>
 8028e98:	4629      	mov	r1, r5
 8028e9a:	4640      	mov	r0, r8
 8028e9c:	f7fc ff42 	bl	8025d24 <_malloc_r>
 8028ea0:	4607      	mov	r7, r0
 8028ea2:	2800      	cmp	r0, #0
 8028ea4:	d0ec      	beq.n	8028e80 <_realloc_r+0x1c>
 8028ea6:	42b5      	cmp	r5, r6
 8028ea8:	462a      	mov	r2, r5
 8028eaa:	4621      	mov	r1, r4
 8028eac:	bf28      	it	cs
 8028eae:	4632      	movcs	r2, r6
 8028eb0:	f7fd ff3f 	bl	8026d32 <memcpy>
 8028eb4:	4621      	mov	r1, r4
 8028eb6:	4640      	mov	r0, r8
 8028eb8:	f7fe fd9e 	bl	80279f8 <_free_r>
 8028ebc:	463c      	mov	r4, r7
 8028ebe:	e7e0      	b.n	8028e82 <_realloc_r+0x1e>

08028ec0 <_strtol_l.constprop.0>:
 8028ec0:	2b24      	cmp	r3, #36	@ 0x24
 8028ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028ec6:	4686      	mov	lr, r0
 8028ec8:	4690      	mov	r8, r2
 8028eca:	d801      	bhi.n	8028ed0 <_strtol_l.constprop.0+0x10>
 8028ecc:	2b01      	cmp	r3, #1
 8028ece:	d106      	bne.n	8028ede <_strtol_l.constprop.0+0x1e>
 8028ed0:	f7fd ff02 	bl	8026cd8 <__errno>
 8028ed4:	2316      	movs	r3, #22
 8028ed6:	6003      	str	r3, [r0, #0]
 8028ed8:	2000      	movs	r0, #0
 8028eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028ede:	4834      	ldr	r0, [pc, #208]	@ (8028fb0 <_strtol_l.constprop.0+0xf0>)
 8028ee0:	460d      	mov	r5, r1
 8028ee2:	462a      	mov	r2, r5
 8028ee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028ee8:	5d06      	ldrb	r6, [r0, r4]
 8028eea:	f016 0608 	ands.w	r6, r6, #8
 8028eee:	d1f8      	bne.n	8028ee2 <_strtol_l.constprop.0+0x22>
 8028ef0:	2c2d      	cmp	r4, #45	@ 0x2d
 8028ef2:	d12d      	bne.n	8028f50 <_strtol_l.constprop.0+0x90>
 8028ef4:	782c      	ldrb	r4, [r5, #0]
 8028ef6:	2601      	movs	r6, #1
 8028ef8:	1c95      	adds	r5, r2, #2
 8028efa:	f033 0210 	bics.w	r2, r3, #16
 8028efe:	d109      	bne.n	8028f14 <_strtol_l.constprop.0+0x54>
 8028f00:	2c30      	cmp	r4, #48	@ 0x30
 8028f02:	d12a      	bne.n	8028f5a <_strtol_l.constprop.0+0x9a>
 8028f04:	782a      	ldrb	r2, [r5, #0]
 8028f06:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8028f0a:	2a58      	cmp	r2, #88	@ 0x58
 8028f0c:	d125      	bne.n	8028f5a <_strtol_l.constprop.0+0x9a>
 8028f0e:	786c      	ldrb	r4, [r5, #1]
 8028f10:	2310      	movs	r3, #16
 8028f12:	3502      	adds	r5, #2
 8028f14:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8028f18:	f10c 3cff 	add.w	ip, ip, #4294967295
 8028f1c:	2200      	movs	r2, #0
 8028f1e:	fbbc f9f3 	udiv	r9, ip, r3
 8028f22:	4610      	mov	r0, r2
 8028f24:	fb03 ca19 	mls	sl, r3, r9, ip
 8028f28:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8028f2c:	2f09      	cmp	r7, #9
 8028f2e:	d81b      	bhi.n	8028f68 <_strtol_l.constprop.0+0xa8>
 8028f30:	463c      	mov	r4, r7
 8028f32:	42a3      	cmp	r3, r4
 8028f34:	dd27      	ble.n	8028f86 <_strtol_l.constprop.0+0xc6>
 8028f36:	1c57      	adds	r7, r2, #1
 8028f38:	d007      	beq.n	8028f4a <_strtol_l.constprop.0+0x8a>
 8028f3a:	4581      	cmp	r9, r0
 8028f3c:	d320      	bcc.n	8028f80 <_strtol_l.constprop.0+0xc0>
 8028f3e:	d101      	bne.n	8028f44 <_strtol_l.constprop.0+0x84>
 8028f40:	45a2      	cmp	sl, r4
 8028f42:	db1d      	blt.n	8028f80 <_strtol_l.constprop.0+0xc0>
 8028f44:	fb00 4003 	mla	r0, r0, r3, r4
 8028f48:	2201      	movs	r2, #1
 8028f4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028f4e:	e7eb      	b.n	8028f28 <_strtol_l.constprop.0+0x68>
 8028f50:	2c2b      	cmp	r4, #43	@ 0x2b
 8028f52:	bf04      	itt	eq
 8028f54:	782c      	ldrbeq	r4, [r5, #0]
 8028f56:	1c95      	addeq	r5, r2, #2
 8028f58:	e7cf      	b.n	8028efa <_strtol_l.constprop.0+0x3a>
 8028f5a:	2b00      	cmp	r3, #0
 8028f5c:	d1da      	bne.n	8028f14 <_strtol_l.constprop.0+0x54>
 8028f5e:	2c30      	cmp	r4, #48	@ 0x30
 8028f60:	bf0c      	ite	eq
 8028f62:	2308      	moveq	r3, #8
 8028f64:	230a      	movne	r3, #10
 8028f66:	e7d5      	b.n	8028f14 <_strtol_l.constprop.0+0x54>
 8028f68:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8028f6c:	2f19      	cmp	r7, #25
 8028f6e:	d801      	bhi.n	8028f74 <_strtol_l.constprop.0+0xb4>
 8028f70:	3c37      	subs	r4, #55	@ 0x37
 8028f72:	e7de      	b.n	8028f32 <_strtol_l.constprop.0+0x72>
 8028f74:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8028f78:	2f19      	cmp	r7, #25
 8028f7a:	d804      	bhi.n	8028f86 <_strtol_l.constprop.0+0xc6>
 8028f7c:	3c57      	subs	r4, #87	@ 0x57
 8028f7e:	e7d8      	b.n	8028f32 <_strtol_l.constprop.0+0x72>
 8028f80:	f04f 32ff 	mov.w	r2, #4294967295
 8028f84:	e7e1      	b.n	8028f4a <_strtol_l.constprop.0+0x8a>
 8028f86:	1c53      	adds	r3, r2, #1
 8028f88:	d108      	bne.n	8028f9c <_strtol_l.constprop.0+0xdc>
 8028f8a:	2322      	movs	r3, #34	@ 0x22
 8028f8c:	f8ce 3000 	str.w	r3, [lr]
 8028f90:	4660      	mov	r0, ip
 8028f92:	f1b8 0f00 	cmp.w	r8, #0
 8028f96:	d0a0      	beq.n	8028eda <_strtol_l.constprop.0+0x1a>
 8028f98:	1e69      	subs	r1, r5, #1
 8028f9a:	e006      	b.n	8028faa <_strtol_l.constprop.0+0xea>
 8028f9c:	b106      	cbz	r6, 8028fa0 <_strtol_l.constprop.0+0xe0>
 8028f9e:	4240      	negs	r0, r0
 8028fa0:	f1b8 0f00 	cmp.w	r8, #0
 8028fa4:	d099      	beq.n	8028eda <_strtol_l.constprop.0+0x1a>
 8028fa6:	2a00      	cmp	r2, #0
 8028fa8:	d1f6      	bne.n	8028f98 <_strtol_l.constprop.0+0xd8>
 8028faa:	f8c8 1000 	str.w	r1, [r8]
 8028fae:	e794      	b.n	8028eda <_strtol_l.constprop.0+0x1a>
 8028fb0:	0802f24f 	.word	0x0802f24f

08028fb4 <_strtol_r>:
 8028fb4:	f7ff bf84 	b.w	8028ec0 <_strtol_l.constprop.0>

08028fb8 <_strtoul_l.constprop.0>:
 8028fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028fbc:	4e34      	ldr	r6, [pc, #208]	@ (8029090 <_strtoul_l.constprop.0+0xd8>)
 8028fbe:	4686      	mov	lr, r0
 8028fc0:	460d      	mov	r5, r1
 8028fc2:	4628      	mov	r0, r5
 8028fc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028fc8:	5d37      	ldrb	r7, [r6, r4]
 8028fca:	f017 0708 	ands.w	r7, r7, #8
 8028fce:	d1f8      	bne.n	8028fc2 <_strtoul_l.constprop.0+0xa>
 8028fd0:	2c2d      	cmp	r4, #45	@ 0x2d
 8028fd2:	d12f      	bne.n	8029034 <_strtoul_l.constprop.0+0x7c>
 8028fd4:	782c      	ldrb	r4, [r5, #0]
 8028fd6:	2701      	movs	r7, #1
 8028fd8:	1c85      	adds	r5, r0, #2
 8028fda:	f033 0010 	bics.w	r0, r3, #16
 8028fde:	d109      	bne.n	8028ff4 <_strtoul_l.constprop.0+0x3c>
 8028fe0:	2c30      	cmp	r4, #48	@ 0x30
 8028fe2:	d12c      	bne.n	802903e <_strtoul_l.constprop.0+0x86>
 8028fe4:	7828      	ldrb	r0, [r5, #0]
 8028fe6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8028fea:	2858      	cmp	r0, #88	@ 0x58
 8028fec:	d127      	bne.n	802903e <_strtoul_l.constprop.0+0x86>
 8028fee:	786c      	ldrb	r4, [r5, #1]
 8028ff0:	2310      	movs	r3, #16
 8028ff2:	3502      	adds	r5, #2
 8028ff4:	f04f 38ff 	mov.w	r8, #4294967295
 8028ff8:	2600      	movs	r6, #0
 8028ffa:	fbb8 f8f3 	udiv	r8, r8, r3
 8028ffe:	fb03 f908 	mul.w	r9, r3, r8
 8029002:	ea6f 0909 	mvn.w	r9, r9
 8029006:	4630      	mov	r0, r6
 8029008:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 802900c:	f1bc 0f09 	cmp.w	ip, #9
 8029010:	d81c      	bhi.n	802904c <_strtoul_l.constprop.0+0x94>
 8029012:	4664      	mov	r4, ip
 8029014:	42a3      	cmp	r3, r4
 8029016:	dd2a      	ble.n	802906e <_strtoul_l.constprop.0+0xb6>
 8029018:	f1b6 3fff 	cmp.w	r6, #4294967295
 802901c:	d007      	beq.n	802902e <_strtoul_l.constprop.0+0x76>
 802901e:	4580      	cmp	r8, r0
 8029020:	d322      	bcc.n	8029068 <_strtoul_l.constprop.0+0xb0>
 8029022:	d101      	bne.n	8029028 <_strtoul_l.constprop.0+0x70>
 8029024:	45a1      	cmp	r9, r4
 8029026:	db1f      	blt.n	8029068 <_strtoul_l.constprop.0+0xb0>
 8029028:	fb00 4003 	mla	r0, r0, r3, r4
 802902c:	2601      	movs	r6, #1
 802902e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029032:	e7e9      	b.n	8029008 <_strtoul_l.constprop.0+0x50>
 8029034:	2c2b      	cmp	r4, #43	@ 0x2b
 8029036:	bf04      	itt	eq
 8029038:	782c      	ldrbeq	r4, [r5, #0]
 802903a:	1c85      	addeq	r5, r0, #2
 802903c:	e7cd      	b.n	8028fda <_strtoul_l.constprop.0+0x22>
 802903e:	2b00      	cmp	r3, #0
 8029040:	d1d8      	bne.n	8028ff4 <_strtoul_l.constprop.0+0x3c>
 8029042:	2c30      	cmp	r4, #48	@ 0x30
 8029044:	bf0c      	ite	eq
 8029046:	2308      	moveq	r3, #8
 8029048:	230a      	movne	r3, #10
 802904a:	e7d3      	b.n	8028ff4 <_strtoul_l.constprop.0+0x3c>
 802904c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8029050:	f1bc 0f19 	cmp.w	ip, #25
 8029054:	d801      	bhi.n	802905a <_strtoul_l.constprop.0+0xa2>
 8029056:	3c37      	subs	r4, #55	@ 0x37
 8029058:	e7dc      	b.n	8029014 <_strtoul_l.constprop.0+0x5c>
 802905a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 802905e:	f1bc 0f19 	cmp.w	ip, #25
 8029062:	d804      	bhi.n	802906e <_strtoul_l.constprop.0+0xb6>
 8029064:	3c57      	subs	r4, #87	@ 0x57
 8029066:	e7d5      	b.n	8029014 <_strtoul_l.constprop.0+0x5c>
 8029068:	f04f 36ff 	mov.w	r6, #4294967295
 802906c:	e7df      	b.n	802902e <_strtoul_l.constprop.0+0x76>
 802906e:	1c73      	adds	r3, r6, #1
 8029070:	d106      	bne.n	8029080 <_strtoul_l.constprop.0+0xc8>
 8029072:	2322      	movs	r3, #34	@ 0x22
 8029074:	f8ce 3000 	str.w	r3, [lr]
 8029078:	4630      	mov	r0, r6
 802907a:	b932      	cbnz	r2, 802908a <_strtoul_l.constprop.0+0xd2>
 802907c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029080:	b107      	cbz	r7, 8029084 <_strtoul_l.constprop.0+0xcc>
 8029082:	4240      	negs	r0, r0
 8029084:	2a00      	cmp	r2, #0
 8029086:	d0f9      	beq.n	802907c <_strtoul_l.constprop.0+0xc4>
 8029088:	b106      	cbz	r6, 802908c <_strtoul_l.constprop.0+0xd4>
 802908a:	1e69      	subs	r1, r5, #1
 802908c:	6011      	str	r1, [r2, #0]
 802908e:	e7f5      	b.n	802907c <_strtoul_l.constprop.0+0xc4>
 8029090:	0802f24f 	.word	0x0802f24f

08029094 <_strtoul_r>:
 8029094:	f7ff bf90 	b.w	8028fb8 <_strtoul_l.constprop.0>

08029098 <__ascii_wctomb>:
 8029098:	4603      	mov	r3, r0
 802909a:	4608      	mov	r0, r1
 802909c:	b141      	cbz	r1, 80290b0 <__ascii_wctomb+0x18>
 802909e:	2aff      	cmp	r2, #255	@ 0xff
 80290a0:	d904      	bls.n	80290ac <__ascii_wctomb+0x14>
 80290a2:	228a      	movs	r2, #138	@ 0x8a
 80290a4:	601a      	str	r2, [r3, #0]
 80290a6:	f04f 30ff 	mov.w	r0, #4294967295
 80290aa:	4770      	bx	lr
 80290ac:	700a      	strb	r2, [r1, #0]
 80290ae:	2001      	movs	r0, #1
 80290b0:	4770      	bx	lr

080290b2 <_malloc_usable_size_r>:
 80290b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80290b6:	1f18      	subs	r0, r3, #4
 80290b8:	2b00      	cmp	r3, #0
 80290ba:	bfbc      	itt	lt
 80290bc:	580b      	ldrlt	r3, [r1, r0]
 80290be:	18c0      	addlt	r0, r0, r3
 80290c0:	4770      	bx	lr
	...

080290c4 <_init>:
 80290c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80290c6:	bf00      	nop
 80290c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80290ca:	bc08      	pop	{r3}
 80290cc:	469e      	mov	lr, r3
 80290ce:	4770      	bx	lr

080290d0 <_fini>:
 80290d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80290d2:	bf00      	nop
 80290d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80290d6:	bc08      	pop	{r3}
 80290d8:	469e      	mov	lr, r3
 80290da:	4770      	bx	lr

Disassembly of section .RamFunc:

080290dc <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80290dc:	b480      	push	{r7}
 80290de:	b089      	sub	sp, #36	@ 0x24
 80290e0:	af00      	add	r7, sp, #0
 80290e2:	6078      	str	r0, [r7, #4]
 80290e4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80290e6:	2380      	movs	r3, #128	@ 0x80
 80290e8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 80290ea:	687b      	ldr	r3, [r7, #4]
 80290ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 80290ee:	683b      	ldr	r3, [r7, #0]
 80290f0:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80290f2:	4b18      	ldr	r3, [pc, #96]	@ (8029154 <FLASH_Program_Fast+0x78>)
 80290f4:	695b      	ldr	r3, [r3, #20]
 80290f6:	4a17      	ldr	r2, [pc, #92]	@ (8029154 <FLASH_Program_Fast+0x78>)
 80290f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80290fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80290fe:	f3ef 8310 	mrs	r3, PRIMASK
 8029102:	60fb      	str	r3, [r7, #12]
  return(result);
 8029104:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8029106:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8029108:	b672      	cpsid	i
}
 802910a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 802910c:	697b      	ldr	r3, [r7, #20]
 802910e:	681a      	ldr	r2, [r3, #0]
 8029110:	69bb      	ldr	r3, [r7, #24]
 8029112:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8029114:	69bb      	ldr	r3, [r7, #24]
 8029116:	3304      	adds	r3, #4
 8029118:	61bb      	str	r3, [r7, #24]
    src_addr++;
 802911a:	697b      	ldr	r3, [r7, #20]
 802911c:	3304      	adds	r3, #4
 802911e:	617b      	str	r3, [r7, #20]
    row_index--;
 8029120:	7ffb      	ldrb	r3, [r7, #31]
 8029122:	3b01      	subs	r3, #1
 8029124:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8029126:	7ffb      	ldrb	r3, [r7, #31]
 8029128:	2b00      	cmp	r3, #0
 802912a:	d1ef      	bne.n	802910c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 802912c:	bf00      	nop
 802912e:	4b09      	ldr	r3, [pc, #36]	@ (8029154 <FLASH_Program_Fast+0x78>)
 8029130:	691b      	ldr	r3, [r3, #16]
 8029132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8029136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802913a:	d0f8      	beq.n	802912e <FLASH_Program_Fast+0x52>
 802913c:	693b      	ldr	r3, [r7, #16]
 802913e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8029140:	68bb      	ldr	r3, [r7, #8]
 8029142:	f383 8810 	msr	PRIMASK, r3
}
 8029146:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8029148:	bf00      	nop
 802914a:	3724      	adds	r7, #36	@ 0x24
 802914c:	46bd      	mov	sp, r7
 802914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029152:	4770      	bx	lr
 8029154:	58004000 	.word	0x58004000
