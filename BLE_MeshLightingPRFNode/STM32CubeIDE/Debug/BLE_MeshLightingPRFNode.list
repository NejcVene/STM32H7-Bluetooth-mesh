
BLE_MeshLightingPRFNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002c5d8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .RamFunc      0000007c  0802c718  0802c718  0002d718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000055b0  0802c798  0802c798  0002d798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08031d48  08031d48  00032d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08031d50  08031d50  00032d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08031d54  08031d54  00032d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000290  20000008  08031d58  00033008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000049  20000298  08031fe8  00033298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200002e4  08032031  000332e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00007dfc  200002f8  08032042  000332f8  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  200080f4  08032042  000340f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000332f5  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00034000  2**2
                  ALLOC
 14 MB_MEM1       000001bc  20030028  20030028  00034028  2**2
                  ALLOC
 15 MB_MEM2       00000883  200301e4  200301e4  00034028  2**2
                  ALLOC
 16 .debug_info   00044ee8  00000000  00000000  00033325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00009cdb  00000000  00000000  0007820d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003cf8  00000000  00000000  00081ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002f1f  00000000  00000000  00085be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00037f3b  00000000  00000000  00088aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00051dfc  00000000  00000000  000c0a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0011cea8  00000000  00000000  00112836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000086  00000000  00000000  0022f6de  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00011774  00000000  00000000  0022f764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000081  00000000  00000000  00240ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002f8 	.word	0x200002f8
 800015c:	00000000 	.word	0x00000000
 8000160:	0802c700 	.word	0x0802c700

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002fc 	.word	0x200002fc
 800017c:	0802c700 	.word	0x0802c700

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b96a 	b.w	8000f04 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	460c      	mov	r4, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d14e      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c54:	4694      	mov	ip, r2
 8000c56:	458c      	cmp	ip, r1
 8000c58:	4686      	mov	lr, r0
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	d962      	bls.n	8000d26 <__udivmoddi4+0xde>
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	4091      	lsls	r1, r2
 8000c68:	fa20 f303 	lsr.w	r3, r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	4319      	orrs	r1, r3
 8000c72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f f68c 	uxth.w	r6, ip
 8000c7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb07 1114 	mls	r1, r7, r4, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb04 f106 	mul.w	r1, r4, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c9e:	f080 8112 	bcs.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 810f 	bls.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca8:	3c02      	subs	r4, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	fa1f f38e 	uxth.w	r3, lr
 8000cb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f606 	mul.w	r6, r0, r6
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x94>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cce:	f080 80fc 	bcs.w	8000eca <__udivmoddi4+0x282>
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	f240 80f9 	bls.w	8000eca <__udivmoddi4+0x282>
 8000cd8:	4463      	add	r3, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa6>
 8000ce6:	40d3      	lsrs	r3, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xba>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb4>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x150>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xcc>
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	f0c0 80f0 	bcc.w	8000ef4 <__udivmoddi4+0x2ac>
 8000d14:	1a86      	subs	r6, r0, r2
 8000d16:	eb64 0303 	sbc.w	r3, r4, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d0e6      	beq.n	8000cee <__udivmoddi4+0xa6>
 8000d20:	e9c5 6300 	strd	r6, r3, [r5]
 8000d24:	e7e3      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	f040 8090 	bne.w	8000e4c <__udivmoddi4+0x204>
 8000d2c:	eba1 040c 	sub.w	r4, r1, ip
 8000d30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d42:	fb08 4416 	mls	r4, r8, r6, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb07 f006 	mul.w	r0, r7, r6
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x11c>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x11a>
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	f200 80cd 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d62:	4626      	mov	r6, r4
 8000d64:	1a1c      	subs	r4, r3, r0
 8000d66:	fa1f f38e 	uxth.w	r3, lr
 8000d6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d76:	fb00 f707 	mul.w	r7, r0, r7
 8000d7a:	429f      	cmp	r7, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x148>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x146>
 8000d88:	429f      	cmp	r7, r3
 8000d8a:	f200 80b0 	bhi.w	8000eee <__udivmoddi4+0x2a6>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	1bdb      	subs	r3, r3, r7
 8000d92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x9c>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dac:	ea43 030c 	orr.w	r3, r3, ip
 8000db0:	40f4      	lsrs	r4, r6
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	0c38      	lsrs	r0, r7, #16
 8000db8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc0:	fa1f fc87 	uxth.w	ip, r7
 8000dc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd0:	45a1      	cmp	r9, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90a      	bls.n	8000dee <__udivmoddi4+0x1a6>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dde:	f080 8084 	bcs.w	8000eea <__udivmoddi4+0x2a2>
 8000de2:	45a1      	cmp	r9, r4
 8000de4:	f240 8081 	bls.w	8000eea <__udivmoddi4+0x2a2>
 8000de8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dfa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x1d2>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e10:	d267      	bcs.n	8000ee2 <__udivmoddi4+0x29a>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d965      	bls.n	8000ee2 <__udivmoddi4+0x29a>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	429c      	cmp	r4, r3
 8000e28:	46ce      	mov	lr, r9
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	d351      	bcc.n	8000ed2 <__udivmoddi4+0x28a>
 8000e2e:	d04e      	beq.n	8000ece <__udivmoddi4+0x286>
 8000e30:	b155      	cbz	r5, 8000e48 <__udivmoddi4+0x200>
 8000e32:	ebb8 030e 	subs.w	r3, r8, lr
 8000e36:	eb64 040c 	sbc.w	r4, r4, ip
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	40cb      	lsrs	r3, r1
 8000e40:	431e      	orrs	r6, r3
 8000e42:	40cc      	lsrs	r4, r1
 8000e44:	e9c5 6400 	strd	r6, r4, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e750      	b.n	8000cee <__udivmoddi4+0xa6>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f103 	lsr.w	r1, r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa24 f303 	lsr.w	r3, r4, r3
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3110 	mls	r1, r8, r0, r3
 8000e74:	0c23      	lsrs	r3, r4, #16
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f107 	mul.w	r1, r0, r7
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x24c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e8a:	d22c      	bcs.n	8000ee6 <__udivmoddi4+0x29e>
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d92a      	bls.n	8000ee6 <__udivmoddi4+0x29e>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb01 f307 	mul.w	r3, r1, r7
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x276>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eb4:	d213      	bcs.n	8000ede <__udivmoddi4+0x296>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d911      	bls.n	8000ede <__udivmoddi4+0x296>
 8000eba:	3902      	subs	r1, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	1ae4      	subs	r4, r4, r3
 8000ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec4:	e739      	b.n	8000d3a <__udivmoddi4+0xf2>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	e6f0      	b.n	8000cac <__udivmoddi4+0x64>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e706      	b.n	8000cdc <__udivmoddi4+0x94>
 8000ece:	45c8      	cmp	r8, r9
 8000ed0:	d2ae      	bcs.n	8000e30 <__udivmoddi4+0x1e8>
 8000ed2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ed6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7a8      	b.n	8000e30 <__udivmoddi4+0x1e8>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	e7ed      	b.n	8000ebe <__udivmoddi4+0x276>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	e799      	b.n	8000e1a <__udivmoddi4+0x1d2>
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e7d4      	b.n	8000e94 <__udivmoddi4+0x24c>
 8000eea:	46d6      	mov	lr, sl
 8000eec:	e77f      	b.n	8000dee <__udivmoddi4+0x1a6>
 8000eee:	4463      	add	r3, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e74d      	b.n	8000d90 <__udivmoddi4+0x148>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e70f      	b.n	8000d1c <__udivmoddi4+0xd4>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	e730      	b.n	8000d64 <__udivmoddi4+0x11c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <LL_EXTI_EnableIT_32_63+0x24>)
 8000f12:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000f16:	4905      	ldr	r1, [pc, #20]	@ (8000f2c <LL_EXTI_EnableIT_32_63+0x24>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	58000800 	.word	0x58000800

08000f30 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4013      	ands	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f54:	68fb      	ldr	r3, [r7, #12]
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b085      	sub	sp, #20
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f6e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000f72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f82:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000f9e:	f006 ff61 	bl	8007e64 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000fa2:	f006 ff65 	bl	8007e70 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000fa6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000faa:	f7ff ffad 	bl	8000f08 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000fae:	f015 f911 	bl	80161d4 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000fb2:	f000 f821 	bl	8000ff8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000fb6:	f000 f8c1 	bl	800113c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000fba:	bf00      	nop
}
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <APPD_EnableCPU2+0x34>)
 8000fc8:	1d3c      	adds	r4, r7, #4
 8000fca:	461d      	mov	r5, r3
 8000fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fd4:	c403      	stmia	r4!, {r0, r1}
 8000fd6:	8022      	strh	r2, [r4, #0]
 8000fd8:	3402      	adds	r4, #2
 8000fda:	0c13      	lsrs	r3, r2, #16
 8000fdc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000fde:	f015 f835 	bl	801604c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f014 faae 	bl	8015546 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000fea:	bf00      	nop
}
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	0802c798 	.word	0x0802c798

08000ff8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001018:	2300      	movs	r3, #0
 800101a:	77fb      	strb	r3, [r7, #31]
 800101c:	e036      	b.n	800108c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800101e:	7ffb      	ldrb	r3, [r7, #31]
 8001020:	4a43      	ldr	r2, [pc, #268]	@ (8001130 <APPD_SetCPU2GpioConfig+0x138>)
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4413      	add	r3, r2
 8001026:	799b      	ldrb	r3, [r3, #6]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d02c      	beq.n	8001086 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800102c:	7ffb      	ldrb	r3, [r7, #31]
 800102e:	4a40      	ldr	r2, [pc, #256]	@ (8001130 <APPD_SetCPU2GpioConfig+0x138>)
 8001030:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001034:	4a3f      	ldr	r2, [pc, #252]	@ (8001134 <APPD_SetCPU2GpioConfig+0x13c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d01b      	beq.n	8001072 <APPD_SetCPU2GpioConfig+0x7a>
 800103a:	4a3e      	ldr	r2, [pc, #248]	@ (8001134 <APPD_SetCPU2GpioConfig+0x13c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d821      	bhi.n	8001084 <APPD_SetCPU2GpioConfig+0x8c>
 8001040:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001044:	d003      	beq.n	800104e <APPD_SetCPU2GpioConfig+0x56>
 8001046:	4a3c      	ldr	r2, [pc, #240]	@ (8001138 <APPD_SetCPU2GpioConfig+0x140>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d009      	beq.n	8001060 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 800104c:	e01a      	b.n	8001084 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800104e:	7ffb      	ldrb	r3, [r7, #31]
 8001050:	4a37      	ldr	r2, [pc, #220]	@ (8001130 <APPD_SetCPU2GpioConfig+0x138>)
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	889a      	ldrh	r2, [r3, #4]
 8001058:	8bbb      	ldrh	r3, [r7, #28]
 800105a:	4313      	orrs	r3, r2
 800105c:	83bb      	strh	r3, [r7, #28]
          break;
 800105e:	e012      	b.n	8001086 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001060:	7ffb      	ldrb	r3, [r7, #31]
 8001062:	4a33      	ldr	r2, [pc, #204]	@ (8001130 <APPD_SetCPU2GpioConfig+0x138>)
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4413      	add	r3, r2
 8001068:	889a      	ldrh	r2, [r3, #4]
 800106a:	8b7b      	ldrh	r3, [r7, #26]
 800106c:	4313      	orrs	r3, r2
 800106e:	837b      	strh	r3, [r7, #26]
          break;
 8001070:	e009      	b.n	8001086 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8001072:	7ffb      	ldrb	r3, [r7, #31]
 8001074:	4a2e      	ldr	r2, [pc, #184]	@ (8001130 <APPD_SetCPU2GpioConfig+0x138>)
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4413      	add	r3, r2
 800107a:	889a      	ldrh	r2, [r3, #4]
 800107c:	8b3b      	ldrh	r3, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	833b      	strh	r3, [r7, #24]
          break;
 8001082:	e000      	b.n	8001086 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8001084:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001086:	7ffb      	ldrb	r3, [r7, #31]
 8001088:	3301      	adds	r3, #1
 800108a:	77fb      	strb	r3, [r7, #31]
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	2b25      	cmp	r3, #37	@ 0x25
 8001090:	d9c5      	bls.n	800101e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2303      	movs	r3, #3
 800109c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800109e:	8bbb      	ldrh	r3, [r7, #28]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d014      	beq.n	80010ce <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 80010a4:	8bbb      	ldrh	r3, [r7, #28]
 80010a6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	2001      	movs	r0, #1
 80010aa:	f7ff ff41 	bl	8000f30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80010ae:	2001      	movs	r0, #1
 80010b0:	f7ff ff57 	bl	8000f62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	4619      	mov	r1, r3
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010bc:	f007 fde4 	bl	8008c88 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80010c0:	8bbb      	ldrh	r3, [r7, #28]
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ca:	f007 ff65 	bl	8008f98 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80010ce:	8b7b      	ldrh	r3, [r7, #26]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d012      	beq.n	80010fa <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 80010d4:	8b7b      	ldrh	r3, [r7, #26]
 80010d6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	2002      	movs	r0, #2
 80010da:	f7ff ff29 	bl	8000f30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80010de:	2002      	movs	r0, #2
 80010e0:	f7ff ff3f 	bl	8000f62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4813      	ldr	r0, [pc, #76]	@ (8001138 <APPD_SetCPU2GpioConfig+0x140>)
 80010ea:	f007 fdcd 	bl	8008c88 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80010ee:	8b7b      	ldrh	r3, [r7, #26]
 80010f0:	2200      	movs	r2, #0
 80010f2:	4619      	mov	r1, r3
 80010f4:	4810      	ldr	r0, [pc, #64]	@ (8001138 <APPD_SetCPU2GpioConfig+0x140>)
 80010f6:	f007 ff4f 	bl	8008f98 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80010fa:	8b3b      	ldrh	r3, [r7, #24]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d013      	beq.n	8001128 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001100:	8b3b      	ldrh	r3, [r7, #24]
 8001102:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001104:	2004      	movs	r0, #4
 8001106:	f7ff ff13 	bl	8000f30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800110a:	2004      	movs	r0, #4
 800110c:	f7ff ff29 	bl	8000f62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	4619      	mov	r1, r3
 8001114:	4807      	ldr	r0, [pc, #28]	@ (8001134 <APPD_SetCPU2GpioConfig+0x13c>)
 8001116:	f007 fdb7 	bl	8008c88 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800111a:	8b3b      	ldrh	r3, [r7, #24]
 800111c:	2200      	movs	r2, #0
 800111e:	4619      	mov	r1, r3
 8001120:	4804      	ldr	r0, [pc, #16]	@ (8001134 <APPD_SetCPU2GpioConfig+0x13c>)
 8001122:	f007 ff39 	bl	8008f98 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001126:	bf00      	nop
 8001128:	bf00      	nop
}
 800112a:	3720      	adds	r7, #32
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	08030374 	.word	0x08030374
 8001134:	48000800 	.word	0x48000800
 8001138:	48000400 	.word	0x48000400

0800113c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8001140:	bf00      	nop
}
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN DbgOutputInit */
	HW_UART_Init(CFG_DEBUG_TRACE_UART);
 800114e:	2000      	movs	r0, #0
 8001150:	f001 fc7f 	bl	8002a52 <HW_UART_Init>
/* USER CODE END DbgOutputInit */
  return;
 8001154:	bf00      	nop
}
 8001156:	bd80      	pop	{r7, pc}

08001158 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	460b      	mov	r3, r1
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001166:	897a      	ldrh	r2, [r7, #10]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	2000      	movs	r0, #0
 800116e:	f001 fca5 	bl	8002abc <HW_UART_Transmit_DMA>
/* USER CODE END DbgOutputTraces */
  return;
 8001172:	bf00      	nop
}
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <LL_EXTI_EnableIT_32_63>:
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <LL_EXTI_EnableIT_32_63+0x24>)
 8001186:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800118a:	4905      	ldr	r1, [pc, #20]	@ (80011a0 <LL_EXTI_EnableIT_32_63+0x24>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4313      	orrs	r3, r2
 8001190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	58000800 	.word	0x58000800

080011a4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80011ac:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <LL_C2_PWR_SetPowerMode+0x28>)
 80011ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011b2:	f023 0207 	bic.w	r2, r3, #7
 80011b6:	4905      	ldr	r1, [pc, #20]	@ (80011cc <LL_C2_PWR_SetPowerMode+0x28>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	58000400 	.word	0x58000400

080011d0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80011d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80011de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80011e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011ea:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011f6:	4313      	orrs	r3, r2
 80011f8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	cafecafe 	.word	0xcafecafe

0800120c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800121e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4313      	orrs	r3, r2
 8001226:	608b      	str	r3, [r1, #8]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800123c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001240:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800125a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800125e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001262:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800126a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800127c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001280:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001284:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001288:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800128c:	d101      	bne.n	8001292 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80012a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80012b2:	d101      	bne.n	80012b8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_AHB3_GRP1_EnableClock>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80012cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80012dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80012fc:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <LL_DBGMCU_GetDeviceID+0x18>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e0042000 	.word	0xe0042000

08001314 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001318:	4b04      	ldr	r3, [pc, #16]	@ (800132c <LL_DBGMCU_GetRevisionID+0x18>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	0c1b      	lsrs	r3, r3, #16
 800131e:	b29b      	uxth	r3, r3
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e0042000 	.word	0xe0042000

08001330 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	041b      	lsls	r3, r3, #16
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	605a      	str	r2, [r3, #4]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	605a      	str	r2, [r3, #4]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	041b      	lsls	r3, r3, #16
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	615a      	str	r2, [r3, #20]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	615a      	str	r2, [r3, #20]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	609a      	str	r2, [r3, #8]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	619a      	str	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <LL_LPM_EnableSleep+0x1c>)
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	4a04      	ldr	r2, [pc, #16]	@ (8001410 <LL_LPM_EnableSleep+0x1c>)
 80013fe:	f023 0304 	bic.w	r3, r3, #4
 8001402:	6113      	str	r3, [r2, #16]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	22ff      	movs	r2, #255	@ 0xff
 8001420:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	22ca      	movs	r2, #202	@ 0xca
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2253      	movs	r2, #83	@ 0x53
 8001440:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f023 0207 	bic.w	r2, r3, #7
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	609a      	str	r2, [r3, #8]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <MX_APPE_Config>:

uint8_t Mesh_Stop_Mode;

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8001478:	4b04      	ldr	r3, [pc, #16]	@ (800148c <MX_APPE_Config+0x18>)
 800147a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800147e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8001480:	f000 f854 	bl	800152c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001484:	f000 f894 	bl	80015b0 <Config_HSE>

  return;
 8001488:	bf00      	nop
}
 800148a:	bd80      	pop	{r7, pc}
 800148c:	58004000 	.word	0x58004000

08001490 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
#ifdef STM32WB15xx
  MOBLEUINT32 last_user_flash_address = ((READ_BIT(FLASH->SFR, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos) << 11) + FLASH_BASE;
#endif
#ifdef STM32WB55xx
  MOBLEUINT32 last_user_flash_address = ((READ_BIT(FLASH->SFR, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos) << 12) + FLASH_BASE;
 8001496:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <MX_APPE_Init+0x6c>)
 8001498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800149c:	031b      	lsls	r3, r3, #12
 800149e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80014a2:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80014a6:	607b      	str	r3, [r7, #4]
#endif
  
  System_Init( );       /**< System initialization */
 80014a8:	f000 f896 	bl	80015d8 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80014ac:	f000 f8ae 	bl	800160c <SystemPower_Config>
  
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80014b0:	4913      	ldr	r1, [pc, #76]	@ (8001500 <MX_APPE_Init+0x70>)
 80014b2:	2000      	movs	r0, #0
 80014b4:	f001 f862 	bl	800257c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init( );
 80014b8:	f7ff fd6f 	bl	8000f9a <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80014bc:	2101      	movs	r1, #1
 80014be:	2001      	movs	r0, #1
 80014c0:	f014 ff70 	bl	80163a4 <UTIL_LPM_SetOffMode>

  Led_Init();
 80014c4:	f000 fa04 	bl	80018d0 <Led_Init>

  Button_Init();
 80014c8:	f000 fa0f 	bl	80018ea <Button_Init>
  
  mobleNvmBase = (const void *)(last_user_flash_address - NVM_SIZE);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <MX_APPE_Init+0x74>)
 80014d6:	601a      	str	r2, [r3, #0]
  appNvmBase   = (const void *)(last_user_flash_address - NVM_SIZE - APP_NVM_SIZE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f5a3 5340 	sub.w	r3, r3, #12288	@ 0x3000
 80014de:	461a      	mov	r2, r3
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_APPE_Init+0x78>)
 80014e2:	601a      	str	r2, [r3, #0]
  prvsnr_data  = (const void *)(last_user_flash_address - NVM_SIZE - APP_NVM_SIZE - PRVN_NVM_PAGE_SIZE);    
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b07      	ldr	r3, [pc, #28]	@ (800150c <MX_APPE_Init+0x7c>)
 80014ee:	601a      	str	r2, [r3, #0]

  /* For MESH done in serial_if.c */
//  RxUART_Init();

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/*  Initialize all transport layers */
 80014f0:	f000 f89a 	bl	8001628 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  return;
 80014f4:	bf00      	nop
}
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	58004000 	.word	0x58004000
 8001500:	200043cc 	.word	0x200043cc
 8001504:	20004444 	.word	0x20004444
 8001508:	20004448 	.word	0x20004448
 800150c:	2000444c 	.word	0x2000444c

08001510 <Init_Smps>:

void Init_Smps( void )
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001514:	bf00      	nop
}
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <Init_Exti>:

void Init_Exti( void )
{
 800151e:	b580      	push	{r7, lr}
 8001520:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001522:	2050      	movs	r0, #80	@ 0x50
 8001524:	f7ff fe2a 	bl	800117c <LL_EXTI_EnableIT_32_63>


  return;
 8001528:	bf00      	nop
}
 800152a:	bd80      	pop	{r7, pc}

0800152c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8001530:	f000 f804 	bl	800153c <Reset_BackupDomain>

  Reset_IPCC();
 8001534:	f000 f81a 	bl	800156c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001538:	bf00      	nop
}
 800153a:	bd80      	pop	{r7, pc}

0800153c <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001540:	f7ff fe9a 	bl	8001278 <LL_RCC_IsActiveFlag_PINRST>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00d      	beq.n	8001566 <Reset_BackupDomain+0x2a>
 800154a:	f7ff fea8 	bl	800129e <LL_RCC_IsActiveFlag_SFTRST>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d108      	bne.n	8001566 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001554:	f007 fdfa 	bl	800914c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001558:	f007 fdf8 	bl	800914c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800155c:	f7ff fe6a 	bl	8001234 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001560:	f7ff fe79 	bl	8001256 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001564:	bf00      	nop
 8001566:	bf00      	nop
}
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <Reset_IPCC>:

static void Reset_IPCC( void )
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001570:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001574:	f7ff fea6 	bl	80012c4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001578:	213f      	movs	r1, #63	@ 0x3f
 800157a:	480c      	ldr	r0, [pc, #48]	@ (80015ac <Reset_IPCC+0x40>)
 800157c:	f7ff ff1e 	bl	80013bc <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001580:	213f      	movs	r1, #63	@ 0x3f
 8001582:	480a      	ldr	r0, [pc, #40]	@ (80015ac <Reset_IPCC+0x40>)
 8001584:	f7ff ff28 	bl	80013d8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001588:	213f      	movs	r1, #63	@ 0x3f
 800158a:	4808      	ldr	r0, [pc, #32]	@ (80015ac <Reset_IPCC+0x40>)
 800158c:	f7ff fed0 	bl	8001330 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001590:	213f      	movs	r1, #63	@ 0x3f
 8001592:	4806      	ldr	r0, [pc, #24]	@ (80015ac <Reset_IPCC+0x40>)
 8001594:	f7ff feef 	bl	8001376 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001598:	213f      	movs	r1, #63	@ 0x3f
 800159a:	4804      	ldr	r0, [pc, #16]	@ (80015ac <Reset_IPCC+0x40>)
 800159c:	f7ff feda 	bl	8001354 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80015a0:	213f      	movs	r1, #63	@ 0x3f
 80015a2:	4802      	ldr	r0, [pc, #8]	@ (80015ac <Reset_IPCC+0x40>)
 80015a4:	f7ff fef9 	bl	800139a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80015a8:	bf00      	nop
}
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	58000c00 	.word	0x58000c00

080015b0 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f014 fe8a 	bl	80162d0 <OTP_Read>
 80015bc:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	799b      	ldrb	r3, [r3, #6]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fe01 	bl	80011d0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80015ce:	bf00      	nop
 80015d0:	bf00      	nop
}
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <System_Init>:

static void System_Init( void )
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  Init_Smps( );
 80015dc:	f7ff ff98 	bl	8001510 <Init_Smps>

  Init_Exti( );
 80015e0:	f7ff ff9d 	bl	800151e <Init_Exti>

  Init_Rtc( );
 80015e4:	f000 f802 	bl	80015ec <Init_Rtc>

  return;
 80015e8:	bf00      	nop
}
 80015ea:	bd80      	pop	{r7, pc}

080015ec <Init_Rtc>:

static void Init_Rtc( void )
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80015f0:	4805      	ldr	r0, [pc, #20]	@ (8001608 <Init_Rtc+0x1c>)
 80015f2:	f7ff ff1c 	bl	800142e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80015f6:	2100      	movs	r1, #0
 80015f8:	4803      	ldr	r0, [pc, #12]	@ (8001608 <Init_Rtc+0x1c>)
 80015fa:	f7ff ff28 	bl	800144e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80015fe:	4802      	ldr	r0, [pc, #8]	@ (8001608 <Init_Rtc+0x1c>)
 8001600:	f7ff ff08 	bl	8001414 <LL_RTC_EnableWriteProtection>

  return;
 8001604:	bf00      	nop
}
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40002800 	.word	0x40002800

0800160c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001610:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001614:	f7ff fdfa 	bl	800120c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001618:	f014 fe82 	bl	8016320 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800161c:	2004      	movs	r0, #4
 800161e:	f7ff fdc1 	bl	80011a4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001622:	bf00      	nop
}
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800162e:	f014 fb57 	bl	8015ce0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8001632:	4a11      	ldr	r2, [pc, #68]	@ (8001678 <appe_Tl_Init+0x50>)
 8001634:	2100      	movs	r1, #0
 8001636:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800163a:	f014 ffdf 	bl	80165fc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <appe_Tl_Init+0x54>)
 8001640:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <appe_Tl_Init+0x58>)
 8001644:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001646:	463b      	mov	r3, r7
 8001648:	4619      	mov	r1, r3
 800164a:	480e      	ldr	r0, [pc, #56]	@ (8001684 <appe_Tl_Init+0x5c>)
 800164c:	f014 fa0a 	bl	8015a64 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001650:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <appe_Tl_Init+0x60>)
 8001652:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001654:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <appe_Tl_Init+0x64>)
 8001656:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001658:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <appe_Tl_Init+0x68>)
 800165a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800165c:	f240 533c 	movw	r3, #1340	@ 0x53c
 8001660:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	4618      	mov	r0, r3
 8001668:	f014 fc7c 	bl	8015f64 <TL_MM_Init>

  TL_Enable();
 800166c:	f014 fb32 	bl	8015cd4 <TL_Enable>

  return;
 8001670:	bf00      	nop
}
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	08015a9d 	.word	0x08015a9d
 800167c:	20030734 	.word	0x20030734
 8001680:	08001695 	.word	0x08001695
 8001684:	080016ad 	.word	0x080016ad
 8001688:	2003094c 	.word	0x2003094c
 800168c:	20030840 	.word	0x20030840
 8001690:	200301f8 	.word	0x200301f8

08001694 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800169e:	bf00      	nop
}
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <APPE_SysUserEvtRx>:
* The buffer shall not be released
* ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
* When the status is not filled, the buffer is released by default
*/
static void APPE_SysUserEvtRx( void * pPayload )
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;
  
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	330b      	adds	r3, #11
 80016ba:	61fb      	str	r3, [r7, #28]
  
  switch(p_sys_event->subevtcode)
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80016c6:	2b07      	cmp	r3, #7
 80016c8:	d860      	bhi.n	800178c <APPE_SysUserEvtRx+0xe0>
 80016ca:	a201      	add	r2, pc, #4	@ (adr r2, 80016d0 <APPE_SysUserEvtRx+0x24>)
 80016cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d0:	080016f1 	.word	0x080016f1
 80016d4:	08001733 	.word	0x08001733
 80016d8:	08001741 	.word	0x08001741
 80016dc:	0800178d 	.word	0x0800178d
 80016e0:	0800175d 	.word	0x0800175d
 80016e4:	0800176d 	.word	0x0800176d
 80016e8:	08001775 	.word	0x08001775
 80016ec:	08001785 	.word	0x08001785
  {
  case SHCI_SUB_EVT_CODE_READY:
  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4618      	mov	r0, r3
 80016f6:	f013 ff6b 	bl	80155d0 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80016fa:	7b3b      	ldrb	r3, [r7, #12]
 80016fc:	4619      	mov	r1, r3
 80016fe:	7b7b      	ldrb	r3, [r7, #13]
 8001700:	461a      	mov	r2, r3
 8001702:	7bbb      	ldrb	r3, [r7, #14]
 8001704:	4824      	ldr	r0, [pc, #144]	@ (8001798 <APPE_SysUserEvtRx+0xec>)
 8001706:	f027 fbb3 	bl	8028e70 <iprintf>
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800170a:	7c3b      	ldrb	r3, [r7, #16]
 800170c:	4619      	mov	r1, r3
 800170e:	4823      	ldr	r0, [pc, #140]	@ (800179c <APPE_SysUserEvtRx+0xf0>)
 8001710:	f027 fbae 	bl	8028e70 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001714:	7dbb      	ldrb	r3, [r7, #22]
 8001716:	4619      	mov	r1, r3
 8001718:	7dfb      	ldrb	r3, [r7, #23]
 800171a:	461a      	mov	r2, r3
 800171c:	7e3b      	ldrb	r3, [r7, #24]
 800171e:	4820      	ldr	r0, [pc, #128]	@ (80017a0 <APPE_SysUserEvtRx+0xf4>)
 8001720:	f027 fba6 	bl	8028e70 <iprintf>
  
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001724:	481f      	ldr	r0, [pc, #124]	@ (80017a4 <APPE_SysUserEvtRx+0xf8>)
 8001726:	f027 fba3 	bl	8028e70 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f870 	bl	8001810 <APPE_SysEvtReadyProcessing>
    break;
 8001730:	e02d      	b.n	800178e <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001732:	481d      	ldr	r0, [pc, #116]	@ (80017a8 <APPE_SysUserEvtRx+0xfc>)
 8001734:	f027 fb9c 	bl	8028e70 <iprintf>
    APPE_SysEvtError(pPayload);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f843 	bl	80017c4 <APPE_SysEvtError>
    break;
 800173e:	e026      	b.n	800178e <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 8001740:	481a      	ldr	r0, [pc, #104]	@ (80017ac <APPE_SysUserEvtRx+0x100>)
 8001742:	f027 fbfd 	bl	8028f40 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800174a:	6819      	ldr	r1, [r3, #0]
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	461a      	mov	r2, r3
 8001754:	4816      	ldr	r0, [pc, #88]	@ (80017b0 <APPE_SysUserEvtRx+0x104>)
 8001756:	f027 fb8b 	bl	8028e70 <iprintf>
    break;
 800175a:	e018      	b.n	800178e <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4619      	mov	r1, r3
 8001764:	4813      	ldr	r0, [pc, #76]	@ (80017b4 <APPE_SysUserEvtRx+0x108>)
 8001766:	f027 fb83 	bl	8028e70 <iprintf>
    break;
 800176a:	e010      	b.n	800178e <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800176c:	4812      	ldr	r0, [pc, #72]	@ (80017b8 <APPE_SysUserEvtRx+0x10c>)
 800176e:	f027 fb7f 	bl	8028e70 <iprintf>
    break;
 8001772:	e00c      	b.n	800178e <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4619      	mov	r1, r3
 800177c:	480f      	ldr	r0, [pc, #60]	@ (80017bc <APPE_SysUserEvtRx+0x110>)
 800177e:	f027 fb77 	bl	8028e70 <iprintf>
    break;
 8001782:	e004      	b.n	800178e <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001784:	480e      	ldr	r0, [pc, #56]	@ (80017c0 <APPE_SysUserEvtRx+0x114>)
 8001786:	f027 fb73 	bl	8028e70 <iprintf>
    break;
 800178a:	e000      	b.n	800178e <APPE_SysUserEvtRx+0xe2>
    
  default:
    break;
 800178c:	bf00      	nop
  }
  
  return;
 800178e:	bf00      	nop
}
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	0802c7b4 	.word	0x0802c7b4
 800179c:	0802c7d8 	.word	0x0802c7d8
 80017a0:	0802c7f4 	.word	0x0802c7f4
 80017a4:	0802c80c 	.word	0x0802c80c
 80017a8:	0802c82c 	.word	0x0802c82c
 80017ac:	0802c850 	.word	0x0802c850
 80017b0:	0802c8a0 	.word	0x0802c8a0
 80017b4:	0802c8c8 	.word	0x0802c8c8
 80017b8:	0802c904 	.word	0x0802c904
 80017bc:	0802c928 	.word	0x0802c928
 80017c0:	0802c964 	.word	0x0802c964

080017c4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
*/
static void APPE_SysEvtError(void * pPayload)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	330b      	adds	r3, #11
 80017d2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3302      	adds	r3, #2
 80017d8:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	4619      	mov	r1, r3
 80017e0:	4808      	ldr	r0, [pc, #32]	@ (8001804 <APPE_SysEvtError+0x40>)
 80017e2:	f027 fb45 	bl	8028e70 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d103      	bne.n	80017f6 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80017ee:	4806      	ldr	r0, [pc, #24]	@ (8001808 <APPE_SysEvtError+0x44>)
 80017f0:	f027 fba6 	bl	8028f40 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80017f4:	e003      	b.n	80017fe <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80017f6:	4805      	ldr	r0, [pc, #20]	@ (800180c <APPE_SysEvtError+0x48>)
 80017f8:	f027 fba2 	bl	8028f40 <puts>
  return;
 80017fc:	bf00      	nop
}
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	0802c988 	.word	0x0802c988
 8001808:	0802c9b8 	.word	0x0802c9b8
 800180c:	0802c9f4 	.word	0x0802c9f4

08001810 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;
  
  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
  
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	330b      	adds	r3, #11
 8001834:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3302      	adds	r3, #2
 800183a:	61bb      	str	r3, [r7, #24]
  
  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d128      	bne.n	8001896 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001844:	481d      	ldr	r0, [pc, #116]	@ (80018bc <APPE_SysEvtReadyProcessing+0xac>)
 8001846:	f027 fb7b 	bl	8028f40 <puts>
    
    /* Traces channel initialization */
    APPD_EnableCPU2( );
 800184a:	f7ff fbb9 	bl	8000fc0 <APPD_EnableCPU2>
    
    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800184e:	230f      	movs	r3, #15
 8001850:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE  
 8001852:	237f      	movs	r3, #127	@ 0x7f
 8001854:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001856:	f7ff fd5d 	bl	8001314 <LL_DBGMCU_GetRevisionID>
 800185a:	6278      	str	r0, [r7, #36]	@ 0x24
    
    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 800185c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800185e:	4818      	ldr	r0, [pc, #96]	@ (80018c0 <APPE_SysEvtReadyProcessing+0xb0>)
 8001860:	f027 fb06 	bl	8028e70 <iprintf>
    
    config_param.RevisionID = (uint16_t)RevisionID;
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	b29b      	uxth	r3, r3
 8001868:	82bb      	strh	r3, [r7, #20]
    
    DeviceID = LL_DBGMCU_GetDeviceID();
 800186a:	f7ff fd45 	bl	80012f8 <LL_DBGMCU_GetDeviceID>
 800186e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001870:	6a39      	ldr	r1, [r7, #32]
 8001872:	4814      	ldr	r0, [pc, #80]	@ (80018c4 <APPE_SysEvtReadyProcessing+0xb4>)
 8001874:	f027 fafc 	bl	8028e70 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	b29b      	uxth	r3, r3
 800187c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	4618      	mov	r0, r3
 8001884:	f013 fe8f 	bl	80155a6 <SHCI_C2_Config>
    
    APP_BLE_Init( );
 8001888:	f001 fefa 	bl	8003680 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800188c:	2100      	movs	r1, #0
 800188e:	2001      	movs	r0, #1
 8001890:	f014 fd88 	bl	80163a4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
}

  return;
 8001894:	e00e      	b.n	80018b4 <APPE_SysEvtReadyProcessing+0xa4>
  else  if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING) 
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d106      	bne.n	80018ac <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800189e:	480a      	ldr	r0, [pc, #40]	@ (80018c8 <APPE_SysEvtReadyProcessing+0xb8>)
 80018a0:	f027 fae6 	bl	8028e70 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
  return;
 80018aa:	e003      	b.n	80018b4 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80018ac:	4807      	ldr	r0, [pc, #28]	@ (80018cc <APPE_SysEvtReadyProcessing+0xbc>)
 80018ae:	f027 fadf 	bl	8028e70 <iprintf>
  return;
 80018b2:	bf00      	nop
}
 80018b4:	3728      	adds	r7, #40	@ 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	0802ca2c 	.word	0x0802ca2c
 80018c0:	0802ca48 	.word	0x0802ca48
 80018c4:	0802ca6c 	.word	0x0802ca6c
 80018c8:	0802ca8c 	.word	0x0802ca8c
 80018cc:	0802cac0 	.word	0x0802cac0

080018d0 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */
  BSP_LED_Init(LED_BLUE);
 80018d4:	2000      	movs	r0, #0
 80018d6:	f006 f8c5 	bl	8007a64 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80018da:	2001      	movs	r0, #1
 80018dc:	f006 f8c2 	bl	8007a64 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80018e0:	2002      	movs	r0, #2
 80018e2:	f006 f8bf 	bl	8007a64 <BSP_LED_Init>
#endif

    return;
 80018e6:	bf00      	nop
}
 80018e8:	bd80      	pop	{r7, pc}

080018ea <Button_Init>:

static void Button_Init( void )
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80018ee:	2101      	movs	r1, #1
 80018f0:	2000      	movs	r0, #0
 80018f2:	f006 f925 	bl	8007b40 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80018f6:	2101      	movs	r1, #1
 80018f8:	2001      	movs	r0, #1
 80018fa:	f006 f921 	bl	8007b40 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80018fe:	2101      	movs	r1, #1
 8001900:	2002      	movs	r0, #2
 8001902:	f006 f91d 	bl	8007b40 <BSP_PB_Init>
#endif

  return;
 8001906:	bf00      	nop
}
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b084      	sub	sp, #16
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001912:	f006 fa83 	bl	8007e1c <HAL_GetTick>
 8001916:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001922:	d00a      	beq.n	800193a <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001924:	f006 fa92 	bl	8007e4c <HAL_GetTickFreq>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001932:	e002      	b.n	800193a <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001934:	f7ff fd5e 	bl	80013f4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /*__ARMCC_VERSION */

    __WFI( );
 8001938:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800193a:	f006 fa6f 	bl	8007e1c <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	429a      	cmp	r2, r3
 8001948:	d8f4      	bhi.n	8001934 <HAL_Delay+0x2a>
  }
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f014 fd52 	bl	8016404 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}

08001964 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  {
    UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);
  }
#endif
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001968:	bf00      	nop
}
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
#if (LOW_POWER_FEATURE == 1)
  UTIL_SEQ_Run( 0 );
#else
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f014 fd40 	bl	8016404 <UTIL_SEQ_Run>
#endif

  return;
 8001984:	bf00      	nop
}
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001994:	2100      	movs	r1, #0
 8001996:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800199a:	f014 fe51 	bl	8016640 <UTIL_SEQ_SetTask>
  return;
 800199e:	bf00      	nop
}
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80019ae:	2002      	movs	r0, #2
 80019b0:	f014 feb2 	bl	8016718 <UTIL_SEQ_SetEvt>
  return;
 80019b4:	bf00      	nop
}
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80019c4:	2002      	movs	r0, #2
 80019c6:	f014 fec7 	bl	8016758 <UTIL_SEQ_WaitEvt>
  return;
 80019ca:	bf00      	nop
}
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	2b10      	cmp	r3, #16
 80019e0:	d104      	bne.n	80019ec <HAL_GPIO_EXTI_Callback+0x1a>
      break;
#endif

    case BUTTON_SW1_PIN:
      {
        UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_SW1_REQ_ID, CFG_SCH_PRIO_0);
 80019e2:	2100      	movs	r1, #0
 80019e4:	2040      	movs	r0, #64	@ 0x40
 80019e6:	f014 fe2b 	bl	8016640 <UTIL_SEQ_SetTask>
      }
      break;
 80019ea:	e000      	b.n	80019ee <HAL_GPIO_EXTI_Callback+0x1c>
      break;
#endif

      
  default:
      break;
 80019ec:	bf00      	nop

  }
  return;
 80019ee:	bf00      	nop
}
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80019fc:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <LL_FLASH_IsActiveFlag_OperationSuspended+0x24>)
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a04:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001a08:	d101      	bne.n	8001a0e <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	58004000 	.word	0x58004000

08001a20 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	3220      	adds	r2, #32
 8001a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a34:	4a05      	ldr	r2, [pc, #20]	@ (8001a4c <LL_HSEM_1StepLock+0x2c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d001      	beq.n	8001a3e <LL_HSEM_1StepLock+0x1e>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <LL_HSEM_1StepLock+0x20>
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	80000400 	.word	0x80000400

08001a50 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_HSEM_GetStatus>:
  * @rmtoll R            LOCK          LL_HSEM_GetStatus
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 0 semaphore is free, 1 semaphore is locked  */
__STATIC_INLINE uint32_t LL_HSEM_GetStatus(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	6039      	str	r1, [r7, #0]
  return ((HSEMx->R[Semaphore] != 0U) ? 1UL : 0UL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <LL_HSEM_GetStatus+0x1a>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <LL_HSEM_GetStatus+0x1c>
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <FD_EraseSectors>:
static SingleFlashOperationStatus_t ProcessSingleFlashOperation(FlashOperationType_t FlashOperationType,
                                                                uint32_t SectorNumberOrDestAddress,
                                                                uint64_t Data);
/* Public functions ----------------------------------------------------------*/
uint32_t FD_EraseSectors(uint32_t FirstSector, uint32_t NbrOfSectors)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t loop_flash;
  uint32_t return_value;
  SingleFlashOperationStatus_t single_flash_operation_status;

  single_flash_operation_status = SINGLE_FLASH_OPERATION_DONE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	73fb      	strb	r3, [r7, #15]

  /**
   *  Take the semaphore to take ownership of the Flash IP
   */
  while(LL_HSEM_1StepLock(HSEM, CFG_HW_FLASH_SEMID));
 8001aae:	bf00      	nop
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	481d      	ldr	r0, [pc, #116]	@ (8001b28 <FD_EraseSectors+0x88>)
 8001ab4:	f7ff ffb4 	bl	8001a20 <LL_HSEM_1StepLock>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f8      	bne.n	8001ab0 <FD_EraseSectors+0x10>

  HAL_FLASH_Unlock();
 8001abe:	f006 ff4f 	bl	8008960 <HAL_FLASH_Unlock>
   *  Notify the CPU2 that some flash erase activity may be executed
   *  On reception of this command, the CPU2 enables the BLE timing protection versus flash erase processing
   *  The Erase flash activity will be executed only when the BLE RF is idle for at least 25ms
   *  The CPU2 will prevent all flash activity (write or erase) in all cases when the BL RF Idle is shorter than 25ms.
   */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f013 fd56 	bl	8015574 <SHCI_C2_FLASH_EraseActivity>

  for(loop_flash = 0; (loop_flash < NbrOfSectors) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e00a      	b.n	8001ae4 <FD_EraseSectors+0x44>
  {
    single_flash_operation_status = FD_EraseSingleSector(FirstSector+loop_flash);
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 f871 	bl	8001bbc <FD_EraseSingleSector>
 8001ada:	4603      	mov	r3, r0
 8001adc:	73fb      	strb	r3, [r7, #15]
  for(loop_flash = 0; (loop_flash < NbrOfSectors) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d202      	bcs.n	8001af2 <FD_EraseSectors+0x52>
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0ed      	beq.n	8001ace <FD_EraseSectors+0x2e>
  }

  if(single_flash_operation_status != SINGLE_FLASH_OPERATION_DONE)
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <FD_EraseSectors+0x64>
  {
    return_value = NbrOfSectors - loop_flash + 1;
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	e00b      	b.n	8001b1c <FD_EraseSectors+0x7c>
    /**
     *  Notify the CPU2 there will be no request anymore to erase the flash
     *  On reception of this command, the CPU2 will disables the BLE timing protection versus flash erase processing
     *  The protection is active until next end of radio event.
     */
    SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f013 fd35 	bl	8015574 <SHCI_C2_FLASH_EraseActivity>

    HAL_FLASH_Lock();
 8001b0a:	f006 ff4b 	bl	80089a4 <HAL_FLASH_Lock>

    /**
     *  Release the ownership of the Flash IP
     */
    LL_HSEM_ReleaseLock(HSEM, CFG_HW_FLASH_SEMID, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2102      	movs	r1, #2
 8001b12:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <FD_EraseSectors+0x88>)
 8001b14:	f7ff ff9c 	bl	8001a50 <LL_HSEM_ReleaseLock>

    return_value = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
  }

  return return_value;
 8001b1c:	693b      	ldr	r3, [r7, #16]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	58001400 	.word	0x58001400

08001b2c <FD_WriteData>:

uint32_t FD_WriteData(uint32_t DestAddress, uint64_t * pSrcBuffer, uint32_t NbrOfData)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  uint32_t loop_flash;
  uint32_t return_value;
  SingleFlashOperationStatus_t single_flash_operation_status;

  single_flash_operation_status = SINGLE_FLASH_OPERATION_DONE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	75fb      	strb	r3, [r7, #23]

  /**
   *  Take the semaphore to take ownership of the Flash IP
   */
  while(LL_HSEM_1StepLock(HSEM, CFG_HW_FLASH_SEMID));
 8001b3c:	bf00      	nop
 8001b3e:	2102      	movs	r1, #2
 8001b40:	481d      	ldr	r0, [pc, #116]	@ (8001bb8 <FD_WriteData+0x8c>)
 8001b42:	f7ff ff6d 	bl	8001a20 <LL_HSEM_1StepLock>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f8      	bne.n	8001b3e <FD_WriteData+0x12>

  HAL_FLASH_Unlock();
 8001b4c:	f006 ff08 	bl	8008960 <HAL_FLASH_Unlock>

  for(loop_flash = 0; (loop_flash < NbrOfData) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	e011      	b.n	8001b7a <FD_WriteData+0x4e>
  {
    single_flash_operation_status = FD_WriteSingleData(DestAddress+(8*loop_flash), *(pSrcBuffer+loop_flash));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	00da      	lsls	r2, r3, #3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	18d1      	adds	r1, r2, r3
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	4413      	add	r3, r2
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	4608      	mov	r0, r1
 8001b6c:	f000 f842 	bl	8001bf4 <FD_WriteSingleData>
 8001b70:	4603      	mov	r3, r0
 8001b72:	75fb      	strb	r3, [r7, #23]
  for(loop_flash = 0; (loop_flash < NbrOfData) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	3301      	adds	r3, #1
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d202      	bcs.n	8001b88 <FD_WriteData+0x5c>
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0e6      	beq.n	8001b56 <FD_WriteData+0x2a>
  }

  if(single_flash_operation_status != SINGLE_FLASH_OPERATION_DONE)
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <FD_WriteData+0x6e>
  {
    return_value = NbrOfData - loop_flash + 1;
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	3301      	adds	r3, #1
 8001b96:	61bb      	str	r3, [r7, #24]
 8001b98:	e008      	b.n	8001bac <FD_WriteData+0x80>
  }
  else
  {
    HAL_FLASH_Lock();
 8001b9a:	f006 ff03 	bl	80089a4 <HAL_FLASH_Lock>

    /**
     *  Release the ownership of the Flash IP
     */
    LL_HSEM_ReleaseLock(HSEM, CFG_HW_FLASH_SEMID, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <FD_WriteData+0x8c>)
 8001ba4:	f7ff ff54 	bl	8001a50 <LL_HSEM_ReleaseLock>

    return_value = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
  }

  return return_value;
 8001bac:	69bb      	ldr	r3, [r7, #24]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3720      	adds	r7, #32
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	58001400 	.word	0x58001400

08001bbc <FD_EraseSingleSector>:

SingleFlashOperationStatus_t FD_EraseSingleSector(uint32_t SectorNumber)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  SingleFlashOperationStatus_t return_value;

   /* Add at least 5us (CPU1 up to 64MHz) to guarantee that CPU2 can take SEM7 to protect BLE timing */ 
   for (volatile uint32_t i = 0; i < 35; i++);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	e002      	b.n	8001bd0 <FD_EraseSingleSector+0x14>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b22      	cmp	r3, #34	@ 0x22
 8001bd4:	d9f9      	bls.n	8001bca <FD_EraseSingleSector+0xe>
   
  /* The last parameter is unused in that case and set to 0 */
  return_value =  ProcessSingleFlashOperation(FLASH_ERASE, SectorNumber, 0);
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	2000      	movs	r0, #0
 8001be2:	f000 f81b 	bl	8001c1c <ProcessSingleFlashOperation>
 8001be6:	4603      	mov	r3, r0
 8001be8:	73fb      	strb	r3, [r7, #15]

  return return_value;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <FD_WriteSingleData>:

SingleFlashOperationStatus_t FD_WriteSingleData(uint32_t DestAddress, uint64_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	e9c7 2300 	strd	r2, r3, [r7]
  SingleFlashOperationStatus_t return_value;

  return_value =  ProcessSingleFlashOperation(FLASH_WRITE, DestAddress, Data);
 8001c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c04:	68f9      	ldr	r1, [r7, #12]
 8001c06:	2001      	movs	r0, #1
 8001c08:	f000 f808 	bl	8001c1c <ProcessSingleFlashOperation>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	75fb      	strb	r3, [r7, #23]

  return return_value;
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <ProcessSingleFlashOperation>:
 *
 *************************************************************/
static SingleFlashOperationStatus_t ProcessSingleFlashOperation(FlashOperationType_t FlashOperationType,
                                                                uint32_t SectorNumberOrDestAddress,
                                                                uint64_t Data)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08e      	sub	sp, #56	@ 0x38
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	e9c7 2300 	strd	r2, r3, [r7]
 8001c28:	4603      	mov	r3, r0
 8001c2a:	73fb      	strb	r3, [r7, #15]
  SingleFlashOperationStatus_t return_status;

  uint32_t page_error;
  FLASH_EraseInitTypeDef p_erase_init;

  waited_sem_status = WAITED_SEM_FREE;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

  p_erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001c32:	2302      	movs	r3, #2
 8001c34:	617b      	str	r3, [r7, #20]
  p_erase_init.NbPages = 1;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61fb      	str	r3, [r7, #28]
  p_erase_init.Page = SectorNumberOrDestAddress;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	61bb      	str	r3, [r7, #24]
     * the flash processing has been requested but suspended due to the PESD bit.
     *
     * Note: This code is required only when the PESD mechanism is used to protect the CPU2 timing.
     * However, keeping that code make it compatible with the two mechanisms.
     */
    while(LL_FLASH_IsActiveFlag_OperationSuspended());
 8001c3e:	bf00      	nop
 8001c40:	f7ff feda 	bl	80019f8 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1fa      	bne.n	8001c40 <ProcessSingleFlashOperation+0x24>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8001c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8001c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    UTILS_ENTER_CRITICAL_SECTION();
 8001c52:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8001c54:	b672      	cpsid	i
}
 8001c56:	bf00      	nop
     *  some latency in critical code execution
     *  When flash processing is ongoing, the CPU cannot access the flash anymore.
     *  Trying to access the flash during that time stalls the CPU.
     *  The only way for CPU1 to disallow flash processing is to take CFG_HW_BLOCK_FLASH_REQ_BY_CPU1_SEMID.
     */
    cpu1_sem_status = (SemStatus_t)LL_HSEM_GetStatus(HSEM, CFG_HW_BLOCK_FLASH_REQ_BY_CPU1_SEMID);
 8001c58:	2106      	movs	r1, #6
 8001c5a:	4836      	ldr	r0, [pc, #216]	@ (8001d34 <ProcessSingleFlashOperation+0x118>)
 8001c5c:	f7ff ff0b 	bl	8001a76 <LL_HSEM_GetStatus>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if(cpu1_sem_status == SEM_LOCK_SUCCESSFUL)
 8001c66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d121      	bne.n	8001cb2 <ProcessSingleFlashOperation+0x96>
       *
       *  However, keeping that code make it compatible with the two mechanisms.
       *  The protection by semaphore is enabled on CPU2 side with the command SHCI_C2_SetFlashActivityControl()
       *
       */
      cpu2_sem_status = (SemStatus_t)LL_HSEM_1StepLock(HSEM, CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID);
 8001c6e:	2107      	movs	r1, #7
 8001c70:	4830      	ldr	r0, [pc, #192]	@ (8001d34 <ProcessSingleFlashOperation+0x118>)
 8001c72:	f7ff fed5 	bl	8001a20 <LL_HSEM_1StepLock>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      if(cpu2_sem_status == SEM_LOCK_SUCCESSFUL)
 8001c7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d116      	bne.n	8001cb2 <ProcessSingleFlashOperation+0x96>
         * When CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID is taken, it is allowed to only erase one sector or
         * write one single 64bits data
         * When either several sectors need to be erased or several 64bits data need to be written,
         * the application shall first exit from the critical section and try again.
         */
        if(FlashOperationType == FLASH_ERASE)
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d108      	bne.n	8001c9c <ProcessSingleFlashOperation+0x80>
        {
          HAL_FLASHEx_Erase(&p_erase_init, &page_error);
 8001c8a:	f107 0220 	add.w	r2, r7, #32
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f006 ff33 	bl	8008b00 <HAL_FLASHEx_Erase>
 8001c9a:	e005      	b.n	8001ca8 <ProcessSingleFlashOperation+0x8c>
        }
        else
        {
          HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, SectorNumberOrDestAddress, Data);
 8001c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f006 fe18 	bl	80088d8 <HAL_FLASH_Program>
         *  Release the semaphore to give the opportunity to CPU2 to protect its timing versus the next flash operation
         *  by taking this semaphore.
         *  Note that the CPU2 is polling on this semaphore so CPU1 shall release it as fast as possible.
         *  This is why this code is protected by a critical section.
         */
        LL_HSEM_ReleaseLock(HSEM, CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2107      	movs	r1, #7
 8001cac:	4821      	ldr	r0, [pc, #132]	@ (8001d34 <ProcessSingleFlashOperation+0x118>)
 8001cae:	f7ff fecf 	bl	8001a50 <LL_HSEM_ReleaseLock>
 8001cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	f383 8810 	msr	PRIMASK, r3
}
 8001cbc:	bf00      	nop
      }
    }

    UTILS_EXIT_CRITICAL_SECTION();

    if(cpu1_sem_status != SEM_LOCK_SUCCESSFUL)
 8001cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <ProcessSingleFlashOperation+0xb8>
    {
      /**
       * To avoid looping in ProcessSingleFlashOperation(), FD_WaitForSemAvailable() should implement a mechanism to
       * continue only when CFG_HW_BLOCK_FLASH_REQ_BY_CPU1_SEMID is free
       */
      waited_sem_status = FD_WaitForSemAvailable(WAIT_FOR_SEM_BLOCK_FLASH_REQ_BY_CPU1);
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f000 f838 	bl	8001d3c <FD_WaitForSemAvailable>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001cd2:	e009      	b.n	8001ce8 <ProcessSingleFlashOperation+0xcc>
    }
    else if(cpu2_sem_status != SEM_LOCK_SUCCESSFUL)
 8001cd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <ProcessSingleFlashOperation+0xcc>
    {
      /**
       * To avoid looping in ProcessSingleFlashOperation(), FD_WaitForSemAvailable() should implement a mechanism to
       * continue only when CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID is free
       */
      waited_sem_status = FD_WaitForSemAvailable(WAIT_FOR_SEM_BLOCK_FLASH_REQ_BY_CPU2);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f000 f82d 	bl	8001d3c <FD_WaitForSemAvailable>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  while( ((cpu2_sem_status != SEM_LOCK_SUCCESSFUL) || (cpu1_sem_status != SEM_LOCK_SUCCESSFUL))
      && (waited_sem_status != WAITED_SEM_BUSY) );
 8001ce8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d103      	bne.n	8001cf8 <ProcessSingleFlashOperation+0xdc>
  while( ((cpu2_sem_status != SEM_LOCK_SUCCESSFUL) || (cpu1_sem_status != SEM_LOCK_SUCCESSFUL))
 8001cf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <ProcessSingleFlashOperation+0xe4>
      && (waited_sem_status != WAITED_SEM_BUSY) );
 8001cf8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d19e      	bne.n	8001c3e <ProcessSingleFlashOperation+0x22>
   * way to recover than applying a device reset.
   *
   * Note: This code is required only when the PESD mechanism is used to protect the CPU2 timing.
   * However, keeping that code make it compatible with the two mechanisms.
   */
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY));
 8001d00:	bf00      	nop
 8001d02:	4b0d      	ldr	r3, [pc, #52]	@ (8001d38 <ProcessSingleFlashOperation+0x11c>)
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001d0e:	d0f8      	beq.n	8001d02 <ProcessSingleFlashOperation+0xe6>

  if(waited_sem_status != WAITED_SEM_BUSY)
 8001d10:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <ProcessSingleFlashOperation+0x104>
  {
    /**
     * The flash processing has been done. It has not been checked whether it has been successful or not.
     * The only commitment is that it is possible to request a new flash processing
     */
    return_status = SINGLE_FLASH_OPERATION_DONE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001d1e:	e002      	b.n	8001d26 <ProcessSingleFlashOperation+0x10a>
    /**
     * The flash processing has not been executed due to timing protection from either the CPU1 or the CPU2.
     * This status is reported up to the user that should retry after checking that each CPU do not
     * protect its timing anymore.
     */
    return_status = SINGLE_FLASH_OPERATION_NOT_EXECUTED;
 8001d20:	2301      	movs	r3, #1
 8001d22:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  }

  return return_status;
 8001d26:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3738      	adds	r7, #56	@ 0x38
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	58001400 	.word	0x58001400
 8001d38:	58004000 	.word	0x58004000

08001d3c <FD_WaitForSemAvailable>:
 *
 * WEAK FUNCTIONS
 *
 *************************************************************/
__WEAK WaitedSemStatus_t FD_WaitForSemAvailable(WaitedSemId_t WaitedSemId)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
   * WAITED_SEM_FREE keep looping in the driver until the action is executed. This will result in the current stack looping
   * until this is done. In a bare metal implementation, only the code within interrupt handler can be executed. With an OS,
   * only task with higher priority can be processed
   *
   */
  return WAITED_SEM_BUSY;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_EXTI_EnableIT_0_31>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <LL_EXTI_EnableIT_0_31+0x24>)
 8001d5e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001d62:	4905      	ldr	r1, [pc, #20]	@ (8001d78 <LL_EXTI_EnableIT_0_31+0x24>)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	58000800 	.word	0x58000800

08001d7c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4904      	ldr	r1, [pc, #16]	@ (8001d9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]

}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	58000800 	.word	0x58000800

08001da0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001da6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <ReadRtcSsrValue+0x3c>)
 8001da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001dae:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <ReadRtcSsrValue+0x3c>)
 8001db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001db6:	e005      	b.n	8001dc4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001dbc:	4b07      	ldr	r3, [pc, #28]	@ (8001ddc <ReadRtcSsrValue+0x3c>)
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d1f5      	bne.n	8001db8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001dcc:	683b      	ldr	r3, [r7, #0]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40002800 	.word	0x40002800

08001de0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	460a      	mov	r2, r1
 8001dea:	71fb      	strb	r3, [r7, #7]
 8001dec:	4613      	mov	r3, r2
 8001dee:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001df0:	79ba      	ldrb	r2, [r7, #6]
 8001df2:	491d      	ldr	r1, [pc, #116]	@ (8001e68 <LinkTimerAfter+0x88>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3315      	adds	r3, #21
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d009      	beq.n	8001e1e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	4916      	ldr	r1, [pc, #88]	@ (8001e68 <LinkTimerAfter+0x88>)
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	440b      	add	r3, r1
 8001e18:	3314      	adds	r3, #20
 8001e1a:	79fa      	ldrb	r2, [r7, #7]
 8001e1c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001e1e:	79fa      	ldrb	r2, [r7, #7]
 8001e20:	4911      	ldr	r1, [pc, #68]	@ (8001e68 <LinkTimerAfter+0x88>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3315      	adds	r3, #21
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001e32:	79fa      	ldrb	r2, [r7, #7]
 8001e34:	490c      	ldr	r1, [pc, #48]	@ (8001e68 <LinkTimerAfter+0x88>)
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	440b      	add	r3, r1
 8001e40:	3314      	adds	r3, #20
 8001e42:	79ba      	ldrb	r2, [r7, #6]
 8001e44:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001e46:	79ba      	ldrb	r2, [r7, #6]
 8001e48:	4907      	ldr	r1, [pc, #28]	@ (8001e68 <LinkTimerAfter+0x88>)
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	3315      	adds	r3, #21
 8001e56:	79fa      	ldrb	r2, [r7, #7]
 8001e58:	701a      	strb	r2, [r3, #0]

  return;
 8001e5a:	bf00      	nop
}
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	200040ec 	.word	0x200040ec

08001e6c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	460a      	mov	r2, r1
 8001e76:	71fb      	strb	r3, [r7, #7]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001e7c:	4b29      	ldr	r3, [pc, #164]	@ (8001f24 <LinkTimerBefore+0xb8>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	79ba      	ldrb	r2, [r7, #6]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d032      	beq.n	8001eee <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001e88:	79ba      	ldrb	r2, [r7, #6]
 8001e8a:	4927      	ldr	r1, [pc, #156]	@ (8001f28 <LinkTimerBefore+0xbc>)
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	3314      	adds	r3, #20
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	4922      	ldr	r1, [pc, #136]	@ (8001f28 <LinkTimerBefore+0xbc>)
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3315      	adds	r3, #21
 8001eac:	79fa      	ldrb	r2, [r7, #7]
 8001eae:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001eb0:	79fa      	ldrb	r2, [r7, #7]
 8001eb2:	491d      	ldr	r1, [pc, #116]	@ (8001f28 <LinkTimerBefore+0xbc>)
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3315      	adds	r3, #21
 8001ec0:	79ba      	ldrb	r2, [r7, #6]
 8001ec2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001ec4:	79fa      	ldrb	r2, [r7, #7]
 8001ec6:	4918      	ldr	r1, [pc, #96]	@ (8001f28 <LinkTimerBefore+0xbc>)
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3314      	adds	r3, #20
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001ed8:	79ba      	ldrb	r2, [r7, #6]
 8001eda:	4913      	ldr	r1, [pc, #76]	@ (8001f28 <LinkTimerBefore+0xbc>)
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3314      	adds	r3, #20
 8001ee8:	79fa      	ldrb	r2, [r7, #7]
 8001eea:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001eec:	e014      	b.n	8001f18 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001eee:	79fa      	ldrb	r2, [r7, #7]
 8001ef0:	490d      	ldr	r1, [pc, #52]	@ (8001f28 <LinkTimerBefore+0xbc>)
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	3315      	adds	r3, #21
 8001efe:	79ba      	ldrb	r2, [r7, #6]
 8001f00:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001f02:	79ba      	ldrb	r2, [r7, #6]
 8001f04:	4908      	ldr	r1, [pc, #32]	@ (8001f28 <LinkTimerBefore+0xbc>)
 8001f06:	4613      	mov	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	3314      	adds	r3, #20
 8001f12:	79fa      	ldrb	r2, [r7, #7]
 8001f14:	701a      	strb	r2, [r3, #0]
  return;
 8001f16:	bf00      	nop
}
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	2000417c 	.word	0x2000417c
 8001f28:	200040ec 	.word	0x200040ec

08001f2c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f36:	4b4e      	ldr	r3, [pc, #312]	@ (8002070 <linkTimer+0x144>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b06      	cmp	r3, #6
 8001f3e:	d118      	bne.n	8001f72 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001f40:	4b4b      	ldr	r3, [pc, #300]	@ (8002070 <linkTimer+0x144>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4b4b      	ldr	r3, [pc, #300]	@ (8002074 <linkTimer+0x148>)
 8001f48:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001f4a:	4a49      	ldr	r2, [pc, #292]	@ (8002070 <linkTimer+0x144>)
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001f50:	79fa      	ldrb	r2, [r7, #7]
 8001f52:	4949      	ldr	r1, [pc, #292]	@ (8002078 <linkTimer+0x14c>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3315      	adds	r3, #21
 8001f60:	2206      	movs	r2, #6
 8001f62:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f64:	4b45      	ldr	r3, [pc, #276]	@ (800207c <linkTimer+0x150>)
 8001f66:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	81fb      	strh	r3, [r7, #14]
 8001f70:	e078      	b.n	8002064 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001f72:	f000 f909 	bl	8002188 <ReturnTimeElapsed>
 8001f76:	4603      	mov	r3, r0
 8001f78:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001f7a:	79fa      	ldrb	r2, [r7, #7]
 8001f7c:	493e      	ldr	r1, [pc, #248]	@ (8002078 <linkTimer+0x14c>)
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	3308      	adds	r3, #8
 8001f8a:	6819      	ldr	r1, [r3, #0]
 8001f8c:	89fb      	ldrh	r3, [r7, #14]
 8001f8e:	79fa      	ldrb	r2, [r7, #7]
 8001f90:	4419      	add	r1, r3
 8001f92:	4839      	ldr	r0, [pc, #228]	@ (8002078 <linkTimer+0x14c>)
 8001f94:	4613      	mov	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	4403      	add	r3, r0
 8001f9e:	3308      	adds	r3, #8
 8001fa0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001fa2:	79fa      	ldrb	r2, [r7, #7]
 8001fa4:	4934      	ldr	r1, [pc, #208]	@ (8002078 <linkTimer+0x14c>)
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	3308      	adds	r3, #8
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8002070 <linkTimer+0x144>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8002078 <linkTimer+0x14c>)
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	440b      	add	r3, r1
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3308      	adds	r3, #8
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d337      	bcc.n	8002044 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001fd4:	4b26      	ldr	r3, [pc, #152]	@ (8002070 <linkTimer+0x144>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001fda:	7b7a      	ldrb	r2, [r7, #13]
 8001fdc:	4926      	ldr	r1, [pc, #152]	@ (8002078 <linkTimer+0x14c>)
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3315      	adds	r3, #21
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001fee:	e013      	b.n	8002018 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001ff0:	7b7a      	ldrb	r2, [r7, #13]
 8001ff2:	4921      	ldr	r1, [pc, #132]	@ (8002078 <linkTimer+0x14c>)
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3315      	adds	r3, #21
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002004:	7b7a      	ldrb	r2, [r7, #13]
 8002006:	491c      	ldr	r1, [pc, #112]	@ (8002078 <linkTimer+0x14c>)
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	440b      	add	r3, r1
 8002012:	3315      	adds	r3, #21
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002018:	7b3b      	ldrb	r3, [r7, #12]
 800201a:	2b06      	cmp	r3, #6
 800201c:	d00b      	beq.n	8002036 <linkTimer+0x10a>
 800201e:	7b3a      	ldrb	r2, [r7, #12]
 8002020:	4915      	ldr	r1, [pc, #84]	@ (8002078 <linkTimer+0x14c>)
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	440b      	add	r3, r1
 800202c:	3308      	adds	r3, #8
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	429a      	cmp	r2, r3
 8002034:	d2dc      	bcs.n	8001ff0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002036:	7b7a      	ldrb	r2, [r7, #13]
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fecf 	bl	8001de0 <LinkTimerAfter>
 8002042:	e00f      	b.n	8002064 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002044:	4b0a      	ldr	r3, [pc, #40]	@ (8002070 <linkTimer+0x144>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	4611      	mov	r1, r2
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff0c 	bl	8001e6c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <linkTimer+0x144>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <linkTimer+0x148>)
 800205c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800205e:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <linkTimer+0x144>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002064:	89fb      	ldrh	r3, [r7, #14]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000417c 	.word	0x2000417c
 8002074:	2000417d 	.word	0x2000417d
 8002078:	200040ec 	.word	0x200040ec
 800207c:	20004180 	.word	0x20004180

08002080 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	460a      	mov	r2, r1
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	4613      	mov	r3, r2
 800208e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002090:	4b39      	ldr	r3, [pc, #228]	@ (8002178 <UnlinkTimer+0xf8>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	79fa      	ldrb	r2, [r7, #7]
 8002098:	429a      	cmp	r2, r3
 800209a:	d111      	bne.n	80020c0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800209c:	4b36      	ldr	r3, [pc, #216]	@ (8002178 <UnlinkTimer+0xf8>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b36      	ldr	r3, [pc, #216]	@ (800217c <UnlinkTimer+0xfc>)
 80020a4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80020a6:	79fa      	ldrb	r2, [r7, #7]
 80020a8:	4935      	ldr	r1, [pc, #212]	@ (8002180 <UnlinkTimer+0x100>)
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	3315      	adds	r3, #21
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002178 <UnlinkTimer+0xf8>)
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	e03e      	b.n	800213e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80020c0:	79fa      	ldrb	r2, [r7, #7]
 80020c2:	492f      	ldr	r1, [pc, #188]	@ (8002180 <UnlinkTimer+0x100>)
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	3314      	adds	r3, #20
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80020d4:	79fa      	ldrb	r2, [r7, #7]
 80020d6:	492a      	ldr	r1, [pc, #168]	@ (8002180 <UnlinkTimer+0x100>)
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	3315      	adds	r3, #21
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80020e8:	79f9      	ldrb	r1, [r7, #7]
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	4824      	ldr	r0, [pc, #144]	@ (8002180 <UnlinkTimer+0x100>)
 80020ee:	460b      	mov	r3, r1
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	440b      	add	r3, r1
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4403      	add	r3, r0
 80020f8:	3315      	adds	r3, #21
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	b2d8      	uxtb	r0, r3
 80020fe:	4920      	ldr	r1, [pc, #128]	@ (8002180 <UnlinkTimer+0x100>)
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	3315      	adds	r3, #21
 800210c:	4602      	mov	r2, r0
 800210e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002110:	7bbb      	ldrb	r3, [r7, #14]
 8002112:	2b06      	cmp	r3, #6
 8002114:	d013      	beq.n	800213e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002116:	79f9      	ldrb	r1, [r7, #7]
 8002118:	7bba      	ldrb	r2, [r7, #14]
 800211a:	4819      	ldr	r0, [pc, #100]	@ (8002180 <UnlinkTimer+0x100>)
 800211c:	460b      	mov	r3, r1
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	440b      	add	r3, r1
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4403      	add	r3, r0
 8002126:	3314      	adds	r3, #20
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	b2d8      	uxtb	r0, r3
 800212c:	4914      	ldr	r1, [pc, #80]	@ (8002180 <UnlinkTimer+0x100>)
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	3314      	adds	r3, #20
 800213a:	4602      	mov	r2, r0
 800213c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800213e:	79fa      	ldrb	r2, [r7, #7]
 8002140:	490f      	ldr	r1, [pc, #60]	@ (8002180 <UnlinkTimer+0x100>)
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	330c      	adds	r3, #12
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <UnlinkTimer+0xf8>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b06      	cmp	r3, #6
 800215a:	d107      	bne.n	800216c <UnlinkTimer+0xec>
 800215c:	79bb      	ldrb	r3, [r7, #6]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d104      	bne.n	800216c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002162:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <UnlinkTimer+0x104>)
 8002164:	f04f 32ff 	mov.w	r2, #4294967295
 8002168:	601a      	str	r2, [r3, #0]
  }

  return;
 800216a:	bf00      	nop
 800216c:	bf00      	nop
}
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	2000417c 	.word	0x2000417c
 800217c:	2000417d 	.word	0x2000417d
 8002180:	200040ec 	.word	0x200040ec
 8002184:	20004180 	.word	0x20004180

08002188 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800218e:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <ReturnTimeElapsed+0x70>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002196:	d026      	beq.n	80021e6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002198:	f7ff fe02 	bl	8001da0 <ReadRtcSsrValue>
 800219c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800219e:	4b16      	ldr	r3, [pc, #88]	@ (80021f8 <ReturnTimeElapsed+0x70>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d805      	bhi.n	80021b4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80021a8:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <ReturnTimeElapsed+0x70>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	e00a      	b.n	80021ca <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <ReturnTimeElapsed+0x74>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80021c0:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <ReturnTimeElapsed+0x70>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80021ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002200 <ReturnTimeElapsed+0x78>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	fb02 f303 	mul.w	r3, r2, r3
 80021d6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80021d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <ReturnTimeElapsed+0x7c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	40d3      	lsrs	r3, r2
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	e001      	b.n	80021ea <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	b29b      	uxth	r3, r3
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20004180 	.word	0x20004180
 80021fc:	20004188 	.word	0x20004188
 8002200:	20004186 	.word	0x20004186
 8002204:	20004185 	.word	0x20004185

08002208 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d108      	bne.n	800222a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002218:	f7ff fdc2 	bl	8001da0 <ReadRtcSsrValue>
 800221c:	4603      	mov	r3, r0
 800221e:	4a21      	ldr	r2, [pc, #132]	@ (80022a4 <RestartWakeupCounter+0x9c>)
 8002220:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002222:	2003      	movs	r0, #3
 8002224:	f005 ffa7 	bl	8008176 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002228:	e039      	b.n	800229e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d803      	bhi.n	8002238 <RestartWakeupCounter+0x30>
 8002230:	4b1d      	ldr	r3, [pc, #116]	@ (80022a8 <RestartWakeupCounter+0xa0>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d002      	beq.n	800223e <RestartWakeupCounter+0x36>
      Value -= 1;
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	3b01      	subs	r3, #1
 800223c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800223e:	bf00      	nop
 8002240:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <RestartWakeupCounter+0xa4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f8      	beq.n	8002240 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800224e:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <RestartWakeupCounter+0xa4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <RestartWakeupCounter+0xa4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800225e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002260:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <RestartWakeupCounter+0xa8>)
 8002262:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002266:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002268:	2003      	movs	r0, #3
 800226a:	f005 ff92 	bl	8008192 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800226e:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <RestartWakeupCounter+0xac>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	0c1b      	lsrs	r3, r3, #16
 8002274:	041b      	lsls	r3, r3, #16
 8002276:	88fa      	ldrh	r2, [r7, #6]
 8002278:	490e      	ldr	r1, [pc, #56]	@ (80022b4 <RestartWakeupCounter+0xac>)
 800227a:	4313      	orrs	r3, r2
 800227c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800227e:	f7ff fd8f 	bl	8001da0 <ReadRtcSsrValue>
 8002282:	4603      	mov	r3, r0
 8002284:	4a07      	ldr	r2, [pc, #28]	@ (80022a4 <RestartWakeupCounter+0x9c>)
 8002286:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002288:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <RestartWakeupCounter+0xa4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <RestartWakeupCounter+0xa4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002296:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002298:	f3af 8000 	nop.w
  return ;
 800229c:	bf00      	nop
}
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20004180 	.word	0x20004180
 80022a8:	20004185 	.word	0x20004185
 80022ac:	200043cc 	.word	0x200043cc
 80022b0:	58000800 	.word	0x58000800
 80022b4:	40002800 	.word	0x40002800

080022b8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80022be:	4b45      	ldr	r3, [pc, #276]	@ (80023d4 <RescheduleTimerList+0x11c>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ca:	d107      	bne.n	80022dc <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80022cc:	bf00      	nop
 80022ce:	4b42      	ldr	r3, [pc, #264]	@ (80023d8 <RescheduleTimerList+0x120>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f8      	bne.n	80022ce <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80022dc:	4b3e      	ldr	r3, [pc, #248]	@ (80023d8 <RescheduleTimerList+0x120>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	4b3d      	ldr	r3, [pc, #244]	@ (80023d8 <RescheduleTimerList+0x120>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ea:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80022ec:	4b3b      	ldr	r3, [pc, #236]	@ (80023dc <RescheduleTimerList+0x124>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	493a      	ldr	r1, [pc, #232]	@ (80023e0 <RescheduleTimerList+0x128>)
 80022f6:	4613      	mov	r3, r2
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	440b      	add	r3, r1
 8002300:	3308      	adds	r3, #8
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002306:	f7ff ff3f 	bl	8002188 <ReturnTimeElapsed>
 800230a:	4603      	mov	r3, r0
 800230c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	429a      	cmp	r2, r3
 8002314:	d205      	bcs.n	8002322 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800231a:	4b32      	ldr	r3, [pc, #200]	@ (80023e4 <RescheduleTimerList+0x12c>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
 8002320:	e04d      	b.n	80023be <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	4a30      	ldr	r2, [pc, #192]	@ (80023e8 <RescheduleTimerList+0x130>)
 8002326:	8812      	ldrh	r2, [r2, #0]
 8002328:	b292      	uxth	r2, r2
 800232a:	4413      	add	r3, r2
 800232c:	461a      	mov	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	4293      	cmp	r3, r2
 8002332:	d906      	bls.n	8002342 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002334:	4b2c      	ldr	r3, [pc, #176]	@ (80023e8 <RescheduleTimerList+0x130>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800233a:	4b2a      	ldr	r3, [pc, #168]	@ (80023e4 <RescheduleTimerList+0x12c>)
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	e03d      	b.n	80023be <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	b29a      	uxth	r2, r3
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800234c:	4b25      	ldr	r3, [pc, #148]	@ (80023e4 <RescheduleTimerList+0x12c>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002352:	e034      	b.n	80023be <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	4922      	ldr	r1, [pc, #136]	@ (80023e0 <RescheduleTimerList+0x128>)
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	3308      	adds	r3, #8
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	429a      	cmp	r2, r3
 800236a:	d20a      	bcs.n	8002382 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	491c      	ldr	r1, [pc, #112]	@ (80023e0 <RescheduleTimerList+0x128>)
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	440b      	add	r3, r1
 800237a:	3308      	adds	r3, #8
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	e013      	b.n	80023aa <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	4916      	ldr	r1, [pc, #88]	@ (80023e0 <RescheduleTimerList+0x128>)
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	3308      	adds	r3, #8
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	1ac9      	subs	r1, r1, r3
 800239a:	4811      	ldr	r0, [pc, #68]	@ (80023e0 <RescheduleTimerList+0x128>)
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4403      	add	r3, r0
 80023a6:	3308      	adds	r3, #8
 80023a8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	490c      	ldr	r1, [pc, #48]	@ (80023e0 <RescheduleTimerList+0x128>)
 80023ae:	4613      	mov	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	3315      	adds	r3, #21
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b06      	cmp	r3, #6
 80023c2:	d1c7      	bne.n	8002354 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80023c4:	89bb      	ldrh	r3, [r7, #12]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff1e 	bl	8002208 <RestartWakeupCounter>

  return ;
 80023cc:	bf00      	nop
}
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40002800 	.word	0x40002800
 80023d8:	200043cc 	.word	0x200043cc
 80023dc:	2000417c 	.word	0x2000417c
 80023e0:	200040ec 	.word	0x200040ec
 80023e4:	20004184 	.word	0x20004184
 80023e8:	2000418a 	.word	0x2000418a

080023ec <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	@ 0x28
 80023f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023f2:	f3ef 8310 	mrs	r3, PRIMASK
 80023f6:	617b      	str	r3, [r7, #20]
  return(result);
 80023f8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80023fc:	b672      	cpsid	i
}
 80023fe:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002400:	4b59      	ldr	r3, [pc, #356]	@ (8002568 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	22ca      	movs	r2, #202	@ 0xca
 8002406:	625a      	str	r2, [r3, #36]	@ 0x24
 8002408:	4b57      	ldr	r3, [pc, #348]	@ (8002568 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2253      	movs	r2, #83	@ 0x53
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002410:	4b55      	ldr	r3, [pc, #340]	@ (8002568 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	4b54      	ldr	r3, [pc, #336]	@ (8002568 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800241e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002420:	4b52      	ldr	r3, [pc, #328]	@ (800256c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002428:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800242c:	4950      	ldr	r1, [pc, #320]	@ (8002570 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	440b      	add	r3, r1
 8002438:	330c      	adds	r3, #12
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d16e      	bne.n	8002520 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002442:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002446:	494a      	ldr	r1, [pc, #296]	@ (8002570 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002456:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800245a:	4945      	ldr	r1, [pc, #276]	@ (8002570 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	3310      	adds	r3, #16
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800246c:	4b41      	ldr	r3, [pc, #260]	@ (8002574 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d04c      	beq.n	8002510 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002476:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800247a:	493d      	ldr	r1, [pc, #244]	@ (8002570 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	330d      	adds	r3, #13
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b01      	cmp	r3, #1
 800248e:	d124      	bne.n	80024da <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002490:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002494:	2101      	movs	r1, #1
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fdf2 	bl	8002080 <UnlinkTimer>
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f383 8810 	msr	PRIMASK, r3
}
 80024a6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80024a8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80024ac:	4930      	ldr	r1, [pc, #192]	@ (8002570 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80024ae:	4613      	mov	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	440b      	add	r3, r1
 80024b8:	3304      	adds	r3, #4
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fa32 	bl	800292c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024c8:	4b27      	ldr	r3, [pc, #156]	@ (8002568 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	22ca      	movs	r2, #202	@ 0xca
 80024ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80024d0:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2253      	movs	r2, #83	@ 0x53
 80024d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80024d8:	e012      	b.n	8002500 <HW_TS_RTC_Wakeup_Handler+0x114>
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f383 8810 	msr	PRIMASK, r3
}
 80024e4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80024e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f99a 	bl	8002824 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002568 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	22ca      	movs	r2, #202	@ 0xca
 80024f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80024f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2253      	movs	r2, #83	@ 0x53
 80024fe:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002500:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	4619      	mov	r1, r3
 8002508:	69b8      	ldr	r0, [r7, #24]
 800250a:	f000 fa95 	bl	8002a38 <HW_TS_RTC_Int_AppNot>
 800250e:	e022      	b.n	8002556 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002510:	f7ff fed2 	bl	80022b8 <RescheduleTimerList>
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f383 8810 	msr	PRIMASK, r3
}
 800251e:	e01a      	b.n	8002556 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002520:	bf00      	nop
 8002522:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f8      	beq.n	8002522 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002530:	4b0d      	ldr	r3, [pc, #52]	@ (8002568 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002540:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002542:	4b0d      	ldr	r3, [pc, #52]	@ (8002578 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002544:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f383 8810 	msr	PRIMASK, r3
}
 8002554:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002556:	4b04      	ldr	r3, [pc, #16]	@ (8002568 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	22ff      	movs	r2, #255	@ 0xff
 800255c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 800255e:	bf00      	nop
}
 8002560:	3728      	adds	r7, #40	@ 0x28
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	200043cc 	.word	0x200043cc
 800256c:	2000417c 	.word	0x2000417c
 8002570:	200040ec 	.word	0x200040ec
 8002574:	20004184 	.word	0x20004184
 8002578:	58000800 	.word	0x58000800

0800257c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002588:	4b5e      	ldr	r3, [pc, #376]	@ (8002704 <HW_TS_Init+0x188>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	22ca      	movs	r2, #202	@ 0xca
 800258e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002590:	4b5c      	ldr	r3, [pc, #368]	@ (8002704 <HW_TS_Init+0x188>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2253      	movs	r2, #83	@ 0x53
 8002596:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002598:	4b5b      	ldr	r3, [pc, #364]	@ (8002708 <HW_TS_Init+0x18c>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a5a      	ldr	r2, [pc, #360]	@ (8002708 <HW_TS_Init+0x18c>)
 800259e:	f043 0320 	orr.w	r3, r3, #32
 80025a2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80025a4:	4b58      	ldr	r3, [pc, #352]	@ (8002708 <HW_TS_Init+0x18c>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f1c3 0304 	rsb	r3, r3, #4
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b55      	ldr	r3, [pc, #340]	@ (800270c <HW_TS_Init+0x190>)
 80025b8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80025ba:	4b53      	ldr	r3, [pc, #332]	@ (8002708 <HW_TS_Init+0x18c>)
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80025c2:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80025c6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	fa92 f2a2 	rbit	r2, r2
 80025ce:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	2a00      	cmp	r2, #0
 80025d8:	d101      	bne.n	80025de <HW_TS_Init+0x62>
  {
    return 32U;
 80025da:	2220      	movs	r2, #32
 80025dc:	e003      	b.n	80025e6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	fab2 f282 	clz	r2, r2
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	40d3      	lsrs	r3, r2
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	3301      	adds	r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b48      	ldr	r3, [pc, #288]	@ (8002710 <HW_TS_Init+0x194>)
 80025f0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80025f2:	4b45      	ldr	r3, [pc, #276]	@ (8002708 <HW_TS_Init+0x18c>)
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	4b44      	ldr	r3, [pc, #272]	@ (8002714 <HW_TS_Init+0x198>)
 8002604:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002606:	4b43      	ldr	r3, [pc, #268]	@ (8002714 <HW_TS_Init+0x198>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	3b01      	subs	r3, #1
 800260c:	4a40      	ldr	r2, [pc, #256]	@ (8002710 <HW_TS_Init+0x194>)
 800260e:	7812      	ldrb	r2, [r2, #0]
 8002610:	fb02 f303 	mul.w	r3, r2, r3
 8002614:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002618:	4a3c      	ldr	r2, [pc, #240]	@ (800270c <HW_TS_Init+0x190>)
 800261a:	7812      	ldrb	r2, [r2, #0]
 800261c:	40d3      	lsrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002626:	4293      	cmp	r3, r2
 8002628:	d904      	bls.n	8002634 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800262a:	4b3b      	ldr	r3, [pc, #236]	@ (8002718 <HW_TS_Init+0x19c>)
 800262c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002630:	801a      	strh	r2, [r3, #0]
 8002632:	e003      	b.n	800263c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	b29a      	uxth	r2, r3
 8002638:	4b37      	ldr	r3, [pc, #220]	@ (8002718 <HW_TS_Init+0x19c>)
 800263a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800263c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002640:	f7ff fb9c 	bl	8001d7c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002644:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002648:	f7ff fb84 	bl	8001d54 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d13d      	bne.n	80026ce <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002652:	4b32      	ldr	r3, [pc, #200]	@ (800271c <HW_TS_Init+0x1a0>)
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002658:	4b31      	ldr	r3, [pc, #196]	@ (8002720 <HW_TS_Init+0x1a4>)
 800265a:	f04f 32ff 	mov.w	r2, #4294967295
 800265e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002660:	2300      	movs	r3, #0
 8002662:	77fb      	strb	r3, [r7, #31]
 8002664:	e00c      	b.n	8002680 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002666:	7ffa      	ldrb	r2, [r7, #31]
 8002668:	492e      	ldr	r1, [pc, #184]	@ (8002724 <HW_TS_Init+0x1a8>)
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	440b      	add	r3, r1
 8002674:	330c      	adds	r3, #12
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800267a:	7ffb      	ldrb	r3, [r7, #31]
 800267c:	3301      	adds	r3, #1
 800267e:	77fb      	strb	r3, [r7, #31]
 8002680:	7ffb      	ldrb	r3, [r7, #31]
 8002682:	2b05      	cmp	r3, #5
 8002684:	d9ef      	bls.n	8002666 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002686:	4b28      	ldr	r3, [pc, #160]	@ (8002728 <HW_TS_Init+0x1ac>)
 8002688:	2206      	movs	r2, #6
 800268a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800268c:	4b1d      	ldr	r3, [pc, #116]	@ (8002704 <HW_TS_Init+0x188>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	4b1c      	ldr	r3, [pc, #112]	@ (8002704 <HW_TS_Init+0x188>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800269a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800269c:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <HW_TS_Init+0x188>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	4b17      	ldr	r3, [pc, #92]	@ (8002704 <HW_TS_Init+0x188>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80026ac:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80026ae:	4b1f      	ldr	r3, [pc, #124]	@ (800272c <HW_TS_Init+0x1b0>)
 80026b0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80026b4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80026b6:	2003      	movs	r0, #3
 80026b8:	f005 fd6b 	bl	8008192 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80026bc:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <HW_TS_Init+0x188>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <HW_TS_Init+0x188>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	e009      	b.n	80026e2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80026ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <HW_TS_Init+0x188>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80026dc:	2003      	movs	r0, #3
 80026de:	f005 fd4a 	bl	8008176 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80026e2:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <HW_TS_Init+0x188>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	22ff      	movs	r2, #255	@ 0xff
 80026e8:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80026ea:	2200      	movs	r2, #0
 80026ec:	2103      	movs	r1, #3
 80026ee:	2003      	movs	r0, #3
 80026f0:	f005 fcff 	bl	80080f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80026f4:	2003      	movs	r0, #3
 80026f6:	f005 fd16 	bl	8008126 <HAL_NVIC_EnableIRQ>

  return;
 80026fa:	bf00      	nop
}
 80026fc:	3720      	adds	r7, #32
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200043cc 	.word	0x200043cc
 8002708:	40002800 	.word	0x40002800
 800270c:	20004185 	.word	0x20004185
 8002710:	20004186 	.word	0x20004186
 8002714:	20004188 	.word	0x20004188
 8002718:	2000418a 	.word	0x2000418a
 800271c:	20004184 	.word	0x20004184
 8002720:	20004180 	.word	0x20004180
 8002724:	200040ec 	.word	0x200040ec
 8002728:	2000417c 	.word	0x2000417c
 800272c:	58000800 	.word	0x58000800

08002730 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002730:	b480      	push	{r7}
 8002732:	b08b      	sub	sp, #44	@ 0x2c
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002746:	f3ef 8310 	mrs	r3, PRIMASK
 800274a:	61fb      	str	r3, [r7, #28]
  return(result);
 800274c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800274e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002750:	b672      	cpsid	i
}
 8002752:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002754:	e004      	b.n	8002760 <HW_TS_Create+0x30>
  {
    loop++;
 8002756:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800275a:	3301      	adds	r3, #1
 800275c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002760:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002764:	2b05      	cmp	r3, #5
 8002766:	d80c      	bhi.n	8002782 <HW_TS_Create+0x52>
 8002768:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800276c:	492c      	ldr	r1, [pc, #176]	@ (8002820 <HW_TS_Create+0xf0>)
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	440b      	add	r3, r1
 8002778:	330c      	adds	r3, #12
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1e9      	bne.n	8002756 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002782:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002786:	2b06      	cmp	r3, #6
 8002788:	d038      	beq.n	80027fc <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800278a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800278e:	4924      	ldr	r1, [pc, #144]	@ (8002820 <HW_TS_Create+0xf0>)
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	440b      	add	r3, r1
 800279a:	330c      	adds	r3, #12
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f383 8810 	msr	PRIMASK, r3
}
 80027aa:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80027ac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80027b0:	491b      	ldr	r1, [pc, #108]	@ (8002820 <HW_TS_Create+0xf0>)
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	3310      	adds	r3, #16
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80027c2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80027c6:	4916      	ldr	r1, [pc, #88]	@ (8002820 <HW_TS_Create+0xf0>)
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	330d      	adds	r3, #13
 80027d4:	79fa      	ldrb	r2, [r7, #7]
 80027d6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80027d8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80027dc:	4910      	ldr	r1, [pc, #64]	@ (8002820 <HW_TS_Create+0xf0>)
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	440b      	add	r3, r1
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80027f2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80027fa:	e008      	b.n	800280e <HW_TS_Create+0xde>
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f383 8810 	msr	PRIMASK, r3
}
 8002806:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002808:	2301      	movs	r3, #1
 800280a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 800280e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002812:	4618      	mov	r0, r3
 8002814:	372c      	adds	r7, #44	@ 0x2c
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	200040ec 	.word	0x200040ec

08002824 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800282e:	f3ef 8310 	mrs	r3, PRIMASK
 8002832:	60fb      	str	r3, [r7, #12]
  return(result);
 8002834:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002836:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002838:	b672      	cpsid	i
}
 800283a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800283c:	2003      	movs	r0, #3
 800283e:	f005 fc80 	bl	8008142 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002842:	4b34      	ldr	r3, [pc, #208]	@ (8002914 <HW_TS_Stop+0xf0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	22ca      	movs	r2, #202	@ 0xca
 8002848:	625a      	str	r2, [r3, #36]	@ 0x24
 800284a:	4b32      	ldr	r3, [pc, #200]	@ (8002914 <HW_TS_Stop+0xf0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2253      	movs	r2, #83	@ 0x53
 8002850:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002852:	79fa      	ldrb	r2, [r7, #7]
 8002854:	4930      	ldr	r1, [pc, #192]	@ (8002918 <HW_TS_Stop+0xf4>)
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	330c      	adds	r3, #12
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d142      	bne.n	80028f0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fc06 	bl	8002080 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002874:	4b29      	ldr	r3, [pc, #164]	@ (800291c <HW_TS_Stop+0xf8>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800287a:	7cfb      	ldrb	r3, [r7, #19]
 800287c:	2b06      	cmp	r3, #6
 800287e:	d12f      	bne.n	80028e0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002880:	4b27      	ldr	r3, [pc, #156]	@ (8002920 <HW_TS_Stop+0xfc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800288c:	d107      	bne.n	800289e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800288e:	bf00      	nop
 8002890:	4b20      	ldr	r3, [pc, #128]	@ (8002914 <HW_TS_Stop+0xf0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f8      	bne.n	8002890 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800289e:	4b1d      	ldr	r3, [pc, #116]	@ (8002914 <HW_TS_Stop+0xf0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <HW_TS_Stop+0xf0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028ac:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80028ae:	bf00      	nop
 80028b0:	4b18      	ldr	r3, [pc, #96]	@ (8002914 <HW_TS_Stop+0xf0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f8      	beq.n	80028b0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <HW_TS_Stop+0xf0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <HW_TS_Stop+0xf0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80028ce:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80028d0:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <HW_TS_Stop+0x100>)
 80028d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80028d6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80028d8:	2003      	movs	r0, #3
 80028da:	f005 fc5a 	bl	8008192 <HAL_NVIC_ClearPendingIRQ>
 80028de:	e007      	b.n	80028f0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80028e0:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <HW_TS_Stop+0x104>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	7cfa      	ldrb	r2, [r7, #19]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80028ec:	f7ff fce4 	bl	80022b8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80028f0:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <HW_TS_Stop+0xf0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	22ff      	movs	r2, #255	@ 0xff
 80028f6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80028f8:	2003      	movs	r0, #3
 80028fa:	f005 fc14 	bl	8008126 <HAL_NVIC_EnableIRQ>
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f383 8810 	msr	PRIMASK, r3
}
 8002908:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800290a:	bf00      	nop
}
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200043cc 	.word	0x200043cc
 8002918:	200040ec 	.word	0x200040ec
 800291c:	2000417c 	.word	0x2000417c
 8002920:	40002800 	.word	0x40002800
 8002924:	58000800 	.word	0x58000800
 8002928:	2000417d 	.word	0x2000417d

0800292c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002938:	79fa      	ldrb	r2, [r7, #7]
 800293a:	493b      	ldr	r1, [pc, #236]	@ (8002a28 <HW_TS_Start+0xfc>)
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	330c      	adds	r3, #12
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d103      	bne.n	8002958 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff66 	bl	8002824 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002958:	f3ef 8310 	mrs	r3, PRIMASK
 800295c:	60fb      	str	r3, [r7, #12]
  return(result);
 800295e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002960:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002962:	b672      	cpsid	i
}
 8002964:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002966:	2003      	movs	r0, #3
 8002968:	f005 fbeb 	bl	8008142 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800296c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a2c <HW_TS_Start+0x100>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	22ca      	movs	r2, #202	@ 0xca
 8002972:	625a      	str	r2, [r3, #36]	@ 0x24
 8002974:	4b2d      	ldr	r3, [pc, #180]	@ (8002a2c <HW_TS_Start+0x100>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2253      	movs	r2, #83	@ 0x53
 800297a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800297c:	79fa      	ldrb	r2, [r7, #7]
 800297e:	492a      	ldr	r1, [pc, #168]	@ (8002a28 <HW_TS_Start+0xfc>)
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	330c      	adds	r3, #12
 800298c:	2202      	movs	r2, #2
 800298e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002990:	79fa      	ldrb	r2, [r7, #7]
 8002992:	4925      	ldr	r1, [pc, #148]	@ (8002a28 <HW_TS_Start+0xfc>)
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	440b      	add	r3, r1
 800299e:	3308      	adds	r3, #8
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80029a4:	79fa      	ldrb	r2, [r7, #7]
 80029a6:	4920      	ldr	r1, [pc, #128]	@ (8002a28 <HW_TS_Start+0xfc>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	3304      	adds	r3, #4
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fab6 	bl	8001f2c <linkTimer>
 80029c0:	4603      	mov	r3, r0
 80029c2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80029c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a30 <HW_TS_Start+0x104>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80029ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002a34 <HW_TS_Start+0x108>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	7c7a      	ldrb	r2, [r7, #17]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d002      	beq.n	80029dc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80029d6:	f7ff fc6f 	bl	80022b8 <RescheduleTimerList>
 80029da:	e013      	b.n	8002a04 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80029dc:	79fa      	ldrb	r2, [r7, #7]
 80029de:	4912      	ldr	r1, [pc, #72]	@ (8002a28 <HW_TS_Start+0xfc>)
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	440b      	add	r3, r1
 80029ea:	3308      	adds	r3, #8
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	8a7b      	ldrh	r3, [r7, #18]
 80029f0:	79fa      	ldrb	r2, [r7, #7]
 80029f2:	1ac9      	subs	r1, r1, r3
 80029f4:	480c      	ldr	r0, [pc, #48]	@ (8002a28 <HW_TS_Start+0xfc>)
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4403      	add	r3, r0
 8002a00:	3308      	adds	r3, #8
 8002a02:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002a04:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <HW_TS_Start+0x100>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	22ff      	movs	r2, #255	@ 0xff
 8002a0a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002a0c:	2003      	movs	r0, #3
 8002a0e:	f005 fb8a 	bl	8008126 <HAL_NVIC_EnableIRQ>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f383 8810 	msr	PRIMASK, r3
}
 8002a1c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002a1e:	bf00      	nop
}
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200040ec 	.word	0x200040ec
 8002a2c:	200043cc 	.word	0x200043cc
 8002a30:	2000417c 	.word	0x2000417c
 8002a34:	2000417d 	.word	0x2000417d

08002a38 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	460b      	mov	r3, r1
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4798      	blx	r3

  return;
 8002a4a:	bf00      	nop
}
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HW_UART_Init>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Init(hw_uart_id_t hw_uart_id)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4603      	mov	r3, r0
 8002a5a:	71fb      	strb	r3, [r7, #7]
	switch (hw_uart_id)
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <HW_UART_Init+0x16>
	{
#if (CFG_HW_USART1_ENABLED == 1)
		case hw_uart1:
			MX_USART1_UART_Init();
 8002a62:	f000 f9a7 	bl	8002db4 <MX_USART1_UART_Init>
			break;
 8002a66:	e000      	b.n	8002a6a <HW_UART_Init+0x18>
			MX_LPUART1_UART_Init();
			break;
#endif

		default:
			break;
 8002a68:	bf00      	nop
		}
	return;
 8002a6a:	bf00      	nop
}
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HW_UART_Receive_IT>:

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	4613      	mov	r3, r2
 8002a84:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10c      	bne.n	8002aa6 <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8002a8c:	4a08      	ldr	r2, [pc, #32]	@ (8002ab0 <HW_UART_Receive_IT+0x3c>)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <HW_UART_Receive_IT+0x40>)
 8002a94:	4a08      	ldr	r2, [pc, #32]	@ (8002ab8 <HW_UART_Receive_IT+0x44>)
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	89bb      	ldrh	r3, [r7, #12]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	4805      	ldr	r0, [pc, #20]	@ (8002ab4 <HW_UART_Receive_IT+0x40>)
 8002aa0:	f008 fb82 	bl	800b1a8 <HAL_UART_Receive_IT>
            break;
 8002aa4:	e000      	b.n	8002aa8 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002aa6:	bf00      	nop
    }

    return;
 8002aa8:	bf00      	nop
}
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	2000418c 	.word	0x2000418c
 8002ab4:	20004264 	.word	0x20004264
 8002ab8:	40013800 	.word	0x40013800

08002abc <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	73fb      	strb	r3, [r7, #15]
 8002aca:	4613      	mov	r3, r2
 8002acc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10e      	bne.n	8002afa <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002adc:	4a17      	ldr	r2, [pc, #92]	@ (8002b3c <HW_UART_Transmit_DMA+0x80>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002ae2:	4b17      	ldr	r3, [pc, #92]	@ (8002b40 <HW_UART_Transmit_DMA+0x84>)
 8002ae4:	4a17      	ldr	r2, [pc, #92]	@ (8002b44 <HW_UART_Transmit_DMA+0x88>)
 8002ae6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002ae8:	89bb      	ldrh	r3, [r7, #12]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	4814      	ldr	r0, [pc, #80]	@ (8002b40 <HW_UART_Transmit_DMA+0x84>)
 8002af0:	f008 fba6 	bl	800b240 <HAL_UART_Transmit_DMA>
 8002af4:	4603      	mov	r3, r0
 8002af6:	75fb      	strb	r3, [r7, #23]
            break;
 8002af8:	e000      	b.n	8002afc <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002afa:	bf00      	nop
    }

    switch (hal_status)
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d816      	bhi.n	8002b30 <HW_UART_Transmit_DMA+0x74>
 8002b02:	a201      	add	r2, pc, #4	@ (adr r2, 8002b08 <HW_UART_Transmit_DMA+0x4c>)
 8002b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b1f 	.word	0x08002b1f
 8002b10:	08002b25 	.word	0x08002b25
 8002b14:	08002b2b 	.word	0x08002b2b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	75bb      	strb	r3, [r7, #22]
            break;
 8002b1c:	e009      	b.n	8002b32 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75bb      	strb	r3, [r7, #22]
            break;
 8002b22:	e006      	b.n	8002b32 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002b24:	2302      	movs	r3, #2
 8002b26:	75bb      	strb	r3, [r7, #22]
            break;
 8002b28:	e003      	b.n	8002b32 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	75bb      	strb	r3, [r7, #22]
            break;
 8002b2e:	e000      	b.n	8002b32 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002b30:	bf00      	nop
    }

    return hw_status;
 8002b32:	7dbb      	ldrb	r3, [r7, #22]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20004190 	.word	0x20004190
 8002b40:	20004264 	.word	0x20004264
 8002b44:	40013800 	.word	0x40013800

08002b48 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <HAL_UART_RxCpltCallback+0x34>)
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d107      	bne.n	8002b6c <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002b5c:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <HAL_UART_RxCpltCallback+0x38>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002b64:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <HAL_UART_RxCpltCallback+0x38>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4798      	blx	r3
            }
            break;
 8002b6a:	e001      	b.n	8002b70 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8002b70:	bf00      	nop
    }

    return;
 8002b72:	bf00      	nop
}
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40013800 	.word	0x40013800
 8002b80:	2000418c 	.word	0x2000418c

08002b84 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <HAL_UART_TxCpltCallback+0x34>)
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d107      	bne.n	8002ba8 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002b98:	4b08      	ldr	r3, [pc, #32]	@ (8002bbc <HAL_UART_TxCpltCallback+0x38>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_UART_TxCpltCallback+0x38>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4798      	blx	r3
            }
            break;
 8002ba6:	e001      	b.n	8002bac <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002ba8:	bf00      	nop
 8002baa:	e000      	b.n	8002bae <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002bac:	bf00      	nop
    }

    return;
 8002bae:	bf00      	nop
}
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40013800 	.word	0x40013800
 8002bbc:	20004190 	.word	0x20004190

08002bc0 <LL_RCC_LSE_SetDriveCapability>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd0:	f023 0218 	bic.w	r2, r3, #24
 8002bd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_AHB1_GRP1_EnableClock>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c10:	68fb      	ldr	r3, [r7, #12]
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_AHB2_GRP1_EnableClock>:
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b085      	sub	sp, #20
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c42:	68fb      	ldr	r3, [r7, #12]
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c54:	f005 f874 	bl	8007d40 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002c58:	f7fe fc0c 	bl	8001474 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c5c:	f000 f818 	bl	8002c90 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002c60:	f000 f874 	bl	8002d4c <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8002c64:	f000 f892 	bl	8002d8c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c68:	f000 f962 	bl	8002f30 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c6c:	f000 f942 	bl	8002ef4 <MX_DMA_Init>
  MX_RF_Init();
 8002c70:	f000 f8ee 	bl	8002e50 <MX_RF_Init>
  MX_RTC_Init();
 8002c74:	f000 f90a 	bl	8002e8c <MX_RTC_Init>
  MX_RNG_Init();
 8002c78:	f000 f8f2 	bl	8002e60 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  /* Enable CRC clock */
  __HAL_RCC_CRC_CLK_ENABLE();
 8002c7c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002c80:	f7ff ffb4 	bl	8002bec <LL_AHB1_GRP1_EnableClock>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002c84:	f7fe fc04 	bl	8001490 <MX_APPE_Init>
  // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);

	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002c88:	f7fe fe64 	bl	8001954 <MX_APPE_Process>
 8002c8c:	e7fc      	b.n	8002c88 <main+0x38>
	...

08002c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b09a      	sub	sp, #104	@ 0x68
 8002c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c96:	f107 0320 	add.w	r3, r7, #32
 8002c9a:	2248      	movs	r2, #72	@ 0x48
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f026 fa84 	bl	80291ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	60da      	str	r2, [r3, #12]
 8002cb0:	611a      	str	r2, [r3, #16]
 8002cb2:	615a      	str	r2, [r3, #20]
 8002cb4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002cb6:	f006 fa49 	bl	800914c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7ff ff80 	bl	8002bc0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cc0:	4b21      	ldr	r3, [pc, #132]	@ (8002d48 <SystemClock_Config+0xb8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d48 <SystemClock_Config+0xb8>)
 8002cca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <SystemClock_Config+0xb8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002cdc:	2347      	movs	r3, #71	@ 0x47
 8002cde:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ce0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cf4:	2340      	movs	r3, #64	@ 0x40
 8002cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cfc:	f107 0320 	add.w	r3, r7, #32
 8002d00:	4618      	mov	r0, r3
 8002d02:	f006 fdb7 	bl	8009874 <HAL_RCC_OscConfig>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002d0c:	f000 f93c 	bl	8002f88 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002d10:	236f      	movs	r3, #111	@ 0x6f
 8002d12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002d14:	2302      	movs	r3, #2
 8002d16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	f007 f913 	bl	8009f5c <HAL_RCC_ClockConfig>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002d3c:	f000 f924 	bl	8002f88 <Error_Handler>
  }
}
 8002d40:	bf00      	nop
 8002d42:	3768      	adds	r7, #104	@ 0x68
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	58000400 	.word	0x58000400

08002d4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b094      	sub	sp, #80	@ 0x50
 8002d50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d52:	463b      	mov	r3, r7
 8002d54:	2250      	movs	r2, #80	@ 0x50
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f026 fa27 	bl	80291ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002d5e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002d62:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002d64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d68:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002d6e:	2310      	movs	r3, #16
 8002d70:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d72:	463b      	mov	r3, r7
 8002d74:	4618      	mov	r0, r3
 8002d76:	f007 fd2e 	bl	800a7d6 <HAL_RCCEx_PeriphCLKConfig>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002d80:	f000 f902 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002d84:	bf00      	nop
 8002d86:	3750      	adds	r7, #80	@ 0x50
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002d90:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <MX_IPCC_Init+0x20>)
 8002d92:	4a07      	ldr	r2, [pc, #28]	@ (8002db0 <MX_IPCC_Init+0x24>)
 8002d94:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002d96:	4805      	ldr	r0, [pc, #20]	@ (8002dac <MX_IPCC_Init+0x20>)
 8002d98:	f006 f952 	bl	8009040 <HAL_IPCC_Init>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002da2:	f000 f8f1 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20004194 	.word	0x20004194
 8002db0:	58000c00 	.word	0x58000c00

08002db4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002db8:	4b23      	ldr	r3, [pc, #140]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002dba:	4a24      	ldr	r2, [pc, #144]	@ (8002e4c <MX_USART1_UART_Init+0x98>)
 8002dbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002dbe:	4b22      	ldr	r3, [pc, #136]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002dc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002dc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dc6:	4b20      	ldr	r3, [pc, #128]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002dda:	220c      	movs	r2, #12
 8002ddc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dde:	4b1a      	ldr	r3, [pc, #104]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002de4:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002de6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002dea:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dec:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002df2:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002df8:	4b13      	ldr	r3, [pc, #76]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dfe:	4812      	ldr	r0, [pc, #72]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002e00:	f008 f982 	bl	800b108 <HAL_UART_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002e0a:	f000 f8bd 	bl	8002f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e0e:	2100      	movs	r1, #0
 8002e10:	480d      	ldr	r0, [pc, #52]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002e12:	f00a f9d6 	bl	800d1c2 <HAL_UARTEx_SetTxFifoThreshold>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002e1c:	f000 f8b4 	bl	8002f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002e20:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8002e24:	4808      	ldr	r0, [pc, #32]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002e26:	f00a fa0a 	bl	800d23e <HAL_UARTEx_SetRxFifoThreshold>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8002e30:	f000 f8aa 	bl	8002f88 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002e34:	4804      	ldr	r0, [pc, #16]	@ (8002e48 <MX_USART1_UART_Init+0x94>)
 8002e36:	f00a f989 	bl	800d14c <HAL_UARTEx_EnableFifoMode>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8002e40:	f000 f8a2 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20004264 	.word	0x20004264
 8002e4c:	40013800 	.word	0x40013800

08002e50 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002e64:	4b07      	ldr	r3, [pc, #28]	@ (8002e84 <MX_RNG_Init+0x24>)
 8002e66:	4a08      	ldr	r2, [pc, #32]	@ (8002e88 <MX_RNG_Init+0x28>)
 8002e68:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002e6a:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <MX_RNG_Init+0x24>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002e70:	4804      	ldr	r0, [pc, #16]	@ (8002e84 <MX_RNG_Init+0x24>)
 8002e72:	f007 ff37 	bl	800ace4 <HAL_RNG_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002e7c:	f000 f884 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	200043b8 	.word	0x200043b8
 8002e88:	58001000 	.word	0x58001000

08002e8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e90:	4b16      	ldr	r3, [pc, #88]	@ (8002eec <MX_RTC_Init+0x60>)
 8002e92:	4a17      	ldr	r2, [pc, #92]	@ (8002ef0 <MX_RTC_Init+0x64>)
 8002e94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <MX_RTC_Init+0x60>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <MX_RTC_Init+0x60>)
 8002e9e:	220f      	movs	r2, #15
 8002ea0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002ea2:	4b12      	ldr	r3, [pc, #72]	@ (8002eec <MX_RTC_Init+0x60>)
 8002ea4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002ea8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <MX_RTC_Init+0x60>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8002eec <MX_RTC_Init+0x60>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <MX_RTC_Init+0x60>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <MX_RTC_Init+0x60>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ec2:	480a      	ldr	r0, [pc, #40]	@ (8002eec <MX_RTC_Init+0x60>)
 8002ec4:	f007 ff44 	bl	800ad50 <HAL_RTC_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002ece:	f000 f85b 	bl	8002f88 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4805      	ldr	r0, [pc, #20]	@ (8002eec <MX_RTC_Init+0x60>)
 8002ed8:	f008 f83a 	bl	800af50 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002ee2:	f000 f851 	bl	8002f88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	200043cc 	.word	0x200043cc
 8002ef0:	40002800 	.word	0x40002800

08002ef4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002ef8:	2004      	movs	r0, #4
 8002efa:	f7ff fe77 	bl	8002bec <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002efe:	2001      	movs	r0, #1
 8002f00:	f7ff fe74 	bl	8002bec <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f04:	2002      	movs	r0, #2
 8002f06:	f7ff fe71 	bl	8002bec <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	210f      	movs	r1, #15
 8002f0e:	200e      	movs	r0, #14
 8002f10:	f005 f8ef 	bl	80080f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002f14:	200e      	movs	r0, #14
 8002f16:	f005 f906 	bl	8008126 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	210f      	movs	r1, #15
 8002f1e:	203a      	movs	r0, #58	@ 0x3a
 8002f20:	f005 f8e7 	bl	80080f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002f24:	203a      	movs	r0, #58	@ 0x3a
 8002f26:	f005 f8fe 	bl	8008126 <HAL_NVIC_EnableIRQ>

}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f36:	2004      	movs	r0, #4
 8002f38:	f7ff fe71 	bl	8002c1e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f7ff fe6e 	bl	8002c1e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	2002      	movs	r0, #2
 8002f44:	f7ff fe6b 	bl	8002c1e <LL_AHB2_GRP1_EnableClock>

  // Configure GPIO pin output level
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	480d      	ldr	r0, [pc, #52]	@ (8002f84 <MX_GPIO_Init+0x54>)
 8002f4e:	f006 f823 	bl	8008f98 <HAL_GPIO_WritePin>

  // Configure GPIO pin PC0 (PA0 on board)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f60:	2301      	movs	r3, #1
 8002f62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f64:	2301      	movs	r3, #1
 8002f66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	4619      	mov	r1, r3
 8002f74:	4803      	ldr	r0, [pc, #12]	@ (8002f84 <MX_GPIO_Init+0x54>)
 8002f76:	f005 fe87 	bl	8008c88 <HAL_GPIO_Init>

}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	48000800 	.word	0x48000800

08002f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <LL_RCC_EnableRTC>:
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002faa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002fae:	bf00      	nop
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_AHB2_GRP1_EnableClock>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002fc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <LL_AHB3_GRP1_EnableClock>:
{
 8002fea:	b480      	push	{r7}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ff8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003006:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4013      	ands	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800300e:	68fb      	ldr	r3, [r7, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_APB1_GRP1_EnableClock>:
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003028:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800302a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4313      	orrs	r3, r2
 8003032:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003038:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003040:	68fb      	ldr	r3, [r7, #12]
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_APB1_GRP2_EnableClock>:
{
 800304e:	b480      	push	{r7}
 8003050:	b085      	sub	sp, #20
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8003056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800305a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800305c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4313      	orrs	r3, r2
 8003064:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8003066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4013      	ands	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	bf00      	nop
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_APB2_GRP1_EnableClock>:
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800308c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800308e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4313      	orrs	r3, r2
 8003096:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800309c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4013      	ands	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030a4:	68fb      	ldr	r3, [r7, #12]
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80030b6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80030ba:	f7ff ff96 	bl	8002fea <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80030be:	2200      	movs	r2, #0
 80030c0:	2100      	movs	r1, #0
 80030c2:	202e      	movs	r0, #46	@ 0x2e
 80030c4:	f005 f815 	bl	80080f2 <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80030c8:	202e      	movs	r0, #46	@ 0x2e
 80030ca:	f005 f82c 	bl	8008126 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003118 <HAL_IPCC_MspInit+0x44>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d113      	bne.n	800310e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80030e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80030ea:	f7ff ff7e 	bl	8002fea <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80030ee:	2200      	movs	r2, #0
 80030f0:	2100      	movs	r1, #0
 80030f2:	202c      	movs	r0, #44	@ 0x2c
 80030f4:	f004 fffd 	bl	80080f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80030f8:	202c      	movs	r0, #44	@ 0x2c
 80030fa:	f005 f814 	bl	8008126 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80030fe:	2200      	movs	r2, #0
 8003100:	2100      	movs	r1, #0
 8003102:	202d      	movs	r0, #45	@ 0x2d
 8003104:	f004 fff5 	bl	80080f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003108:	202d      	movs	r0, #45	@ 0x2d
 800310a:	f005 f80c 	bl	8008126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	58000c00 	.word	0x58000c00

0800311c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b0a0      	sub	sp, #128	@ 0x80
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003124:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003134:	f107 030c 	add.w	r3, r7, #12
 8003138:	2250      	movs	r2, #80	@ 0x50
 800313a:	2100      	movs	r1, #0
 800313c:	4618      	mov	r0, r3
 800313e:	f026 f835 	bl	80291ac <memset>
  if(huart->Instance==LPUART1)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a68      	ldr	r2, [pc, #416]	@ (80032e8 <HAL_UART_MspInit+0x1cc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d16e      	bne.n	800322a <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800314c:	2302      	movs	r3, #2
 800314e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003150:	2300      	movs	r3, #0
 8003152:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003154:	f107 030c 	add.w	r3, r7, #12
 8003158:	4618      	mov	r0, r3
 800315a:	f007 fb3c 	bl	800a7d6 <HAL_RCCEx_PeriphCLKConfig>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003164:	f7ff ff10 	bl	8002f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003168:	2001      	movs	r0, #1
 800316a:	f7ff ff70 	bl	800304e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316e:	2001      	movs	r0, #1
 8003170:	f7ff ff22 	bl	8002fb8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003174:	230c      	movs	r3, #12
 8003176:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003180:	2303      	movs	r3, #3
 8003182:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003184:	2308      	movs	r3, #8
 8003186:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003188:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800318c:	4619      	mov	r1, r3
 800318e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003192:	f005 fd79 	bl	8008c88 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8003196:	4b55      	ldr	r3, [pc, #340]	@ (80032ec <HAL_UART_MspInit+0x1d0>)
 8003198:	4a55      	ldr	r2, [pc, #340]	@ (80032f0 <HAL_UART_MspInit+0x1d4>)
 800319a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800319c:	4b53      	ldr	r3, [pc, #332]	@ (80032ec <HAL_UART_MspInit+0x1d0>)
 800319e:	2211      	movs	r2, #17
 80031a0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031a2:	4b52      	ldr	r3, [pc, #328]	@ (80032ec <HAL_UART_MspInit+0x1d0>)
 80031a4:	2210      	movs	r2, #16
 80031a6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031a8:	4b50      	ldr	r3, [pc, #320]	@ (80032ec <HAL_UART_MspInit+0x1d0>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031ae:	4b4f      	ldr	r3, [pc, #316]	@ (80032ec <HAL_UART_MspInit+0x1d0>)
 80031b0:	2280      	movs	r2, #128	@ 0x80
 80031b2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031b4:	4b4d      	ldr	r3, [pc, #308]	@ (80032ec <HAL_UART_MspInit+0x1d0>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031ba:	4b4c      	ldr	r3, [pc, #304]	@ (80032ec <HAL_UART_MspInit+0x1d0>)
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80031c0:	4b4a      	ldr	r3, [pc, #296]	@ (80032ec <HAL_UART_MspInit+0x1d0>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031c6:	4b49      	ldr	r3, [pc, #292]	@ (80032ec <HAL_UART_MspInit+0x1d0>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80031cc:	4847      	ldr	r0, [pc, #284]	@ (80032ec <HAL_UART_MspInit+0x1d0>)
 80031ce:	f004 ffef 	bl	80081b0 <HAL_DMA_Init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80031d8:	f7ff fed6 	bl	8002f88 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 80031dc:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 80031e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80031e2:	2300      	movs	r3, #0
 80031e4:	663b      	str	r3, [r7, #96]	@ 0x60
    pSyncConfig.SyncEnable = DISABLE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    pSyncConfig.EventEnable = DISABLE;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
    pSyncConfig.RequestNumber = 1;
 80031f2:	2301      	movs	r3, #1
 80031f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 80031f6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80031fa:	4619      	mov	r1, r3
 80031fc:	483b      	ldr	r0, [pc, #236]	@ (80032ec <HAL_UART_MspInit+0x1d0>)
 80031fe:	f005 fb09 	bl	8008814 <HAL_DMAEx_ConfigMuxSync>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8003208:	f7ff febe 	bl	8002f88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a37      	ldr	r2, [pc, #220]	@ (80032ec <HAL_UART_MspInit+0x1d0>)
 8003210:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003212:	4a36      	ldr	r2, [pc, #216]	@ (80032ec <HAL_UART_MspInit+0x1d0>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003218:	2200      	movs	r2, #0
 800321a:	2100      	movs	r1, #0
 800321c:	2025      	movs	r0, #37	@ 0x25
 800321e:	f004 ff68 	bl	80080f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003222:	2025      	movs	r0, #37	@ 0x25
 8003224:	f004 ff7f 	bl	8008126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003228:	e05a      	b.n	80032e0 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a31      	ldr	r2, [pc, #196]	@ (80032f4 <HAL_UART_MspInit+0x1d8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d155      	bne.n	80032e0 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003234:	2301      	movs	r3, #1
 8003236:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003238:	2300      	movs	r3, #0
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800323c:	f107 030c 	add.w	r3, r7, #12
 8003240:	4618      	mov	r0, r3
 8003242:	f007 fac8 	bl	800a7d6 <HAL_RCCEx_PeriphCLKConfig>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_UART_MspInit+0x134>
      Error_Handler();
 800324c:	f7ff fe9c 	bl	8002f88 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003250:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003254:	f7ff ff14 	bl	8003080 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003258:	2002      	movs	r0, #2
 800325a:	f7ff fead 	bl	8002fb8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800325e:	23c0      	movs	r3, #192	@ 0xc0
 8003260:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800326a:	2303      	movs	r3, #3
 800326c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800326e:	2307      	movs	r3, #7
 8003270:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003272:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003276:	4619      	mov	r1, r3
 8003278:	481f      	ldr	r0, [pc, #124]	@ (80032f8 <HAL_UART_MspInit+0x1dc>)
 800327a:	f005 fd05 	bl	8008c88 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800327e:	4b1f      	ldr	r3, [pc, #124]	@ (80032fc <HAL_UART_MspInit+0x1e0>)
 8003280:	4a1f      	ldr	r2, [pc, #124]	@ (8003300 <HAL_UART_MspInit+0x1e4>)
 8003282:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003284:	4b1d      	ldr	r3, [pc, #116]	@ (80032fc <HAL_UART_MspInit+0x1e0>)
 8003286:	220f      	movs	r2, #15
 8003288:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800328a:	4b1c      	ldr	r3, [pc, #112]	@ (80032fc <HAL_UART_MspInit+0x1e0>)
 800328c:	2210      	movs	r2, #16
 800328e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003290:	4b1a      	ldr	r3, [pc, #104]	@ (80032fc <HAL_UART_MspInit+0x1e0>)
 8003292:	2200      	movs	r2, #0
 8003294:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003296:	4b19      	ldr	r3, [pc, #100]	@ (80032fc <HAL_UART_MspInit+0x1e0>)
 8003298:	2280      	movs	r2, #128	@ 0x80
 800329a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800329c:	4b17      	ldr	r3, [pc, #92]	@ (80032fc <HAL_UART_MspInit+0x1e0>)
 800329e:	2200      	movs	r2, #0
 80032a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032a2:	4b16      	ldr	r3, [pc, #88]	@ (80032fc <HAL_UART_MspInit+0x1e0>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80032a8:	4b14      	ldr	r3, [pc, #80]	@ (80032fc <HAL_UART_MspInit+0x1e0>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032ae:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <HAL_UART_MspInit+0x1e0>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80032b4:	4811      	ldr	r0, [pc, #68]	@ (80032fc <HAL_UART_MspInit+0x1e0>)
 80032b6:	f004 ff7b 	bl	80081b0 <HAL_DMA_Init>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80032c0:	f7ff fe62 	bl	8002f88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a0d      	ldr	r2, [pc, #52]	@ (80032fc <HAL_UART_MspInit+0x1e0>)
 80032c8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80032ca:	4a0c      	ldr	r2, [pc, #48]	@ (80032fc <HAL_UART_MspInit+0x1e0>)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2100      	movs	r1, #0
 80032d4:	2024      	movs	r0, #36	@ 0x24
 80032d6:	f004 ff0c 	bl	80080f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032da:	2024      	movs	r0, #36	@ 0x24
 80032dc:	f004 ff23 	bl	8008126 <HAL_NVIC_EnableIRQ>
}
 80032e0:	bf00      	nop
 80032e2:	3780      	adds	r7, #128	@ 0x80
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40008000 	.word	0x40008000
 80032ec:	200042f8 	.word	0x200042f8
 80032f0:	40020044 	.word	0x40020044
 80032f4:	40013800 	.word	0x40013800
 80032f8:	48000400 	.word	0x48000400
 80032fc:	20004358 	.word	0x20004358
 8003300:	40020444 	.word	0x40020444

08003304 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b096      	sub	sp, #88	@ 0x58
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800330c:	f107 0308 	add.w	r3, r7, #8
 8003310:	2250      	movs	r2, #80	@ 0x50
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f025 ff49 	bl	80291ac <memset>
  if(hrng->Instance==RNG)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a0d      	ldr	r2, [pc, #52]	@ (8003354 <HAL_RNG_MspInit+0x50>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d113      	bne.n	800334c <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003324:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003328:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800332a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800332e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003330:	f107 0308 	add.w	r3, r7, #8
 8003334:	4618      	mov	r0, r3
 8003336:	f007 fa4e 	bl	800a7d6 <HAL_RCCEx_PeriphCLKConfig>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8003340:	f7ff fe22 	bl	8002f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003344:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003348:	f7ff fe4f 	bl	8002fea <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800334c:	bf00      	nop
 800334e:	3758      	adds	r7, #88	@ 0x58
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	58001000 	.word	0x58001000

08003358 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b096      	sub	sp, #88	@ 0x58
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003360:	f107 0308 	add.w	r3, r7, #8
 8003364:	2250      	movs	r2, #80	@ 0x50
 8003366:	2100      	movs	r1, #0
 8003368:	4618      	mov	r0, r3
 800336a:	f025 ff1f 	bl	80291ac <memset>
  if(hrtc->Instance==RTC)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a12      	ldr	r2, [pc, #72]	@ (80033bc <HAL_RTC_MspInit+0x64>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d11d      	bne.n	80033b4 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003378:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800337c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800337e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003382:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003384:	f107 0308 	add.w	r3, r7, #8
 8003388:	4618      	mov	r0, r3
 800338a:	f007 fa24 	bl	800a7d6 <HAL_RCCEx_PeriphCLKConfig>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003394:	f7ff fdf8 	bl	8002f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003398:	f7ff fdfd 	bl	8002f96 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800339c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80033a0:	f7ff fe3c 	bl	800301c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80033a4:	2200      	movs	r2, #0
 80033a6:	2100      	movs	r1, #0
 80033a8:	2003      	movs	r0, #3
 80033aa:	f004 fea2 	bl	80080f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80033ae:	2003      	movs	r0, #3
 80033b0:	f004 feb9 	bl	8008126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033b4:	bf00      	nop
 80033b6:	3758      	adds	r7, #88	@ 0x58
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40002800 	.word	0x40002800

080033c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  BSP_LED_On(LED_RED);
 80033d4:	2002      	movs	r0, #2
 80033d6:	f004 fb7f 	bl	8007ad8 <BSP_LED_On>
#ifndef DISABLE_TRACES
  printf("HARDFAULT !\r\n");
 80033da:	4802      	ldr	r0, [pc, #8]	@ (80033e4 <HardFault_Handler+0x14>)
 80033dc:	f025 fdb0 	bl	8028f40 <puts>
#endif
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033e0:	bf00      	nop
 80033e2:	e7fd      	b.n	80033e0 <HardFault_Handler+0x10>
 80033e4:	0802caf4 	.word	0x0802caf4

080033e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <MemManage_Handler+0x4>

080033f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033f4:	bf00      	nop
 80033f6:	e7fd      	b.n	80033f4 <BusFault_Handler+0x4>

080033f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <UsageFault_Handler+0x4>

08003400 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800340e:	b480      	push	{r7}
 8003410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800342e:	f004 fce1 	bl	8007df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}

08003436 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800343a:	f7fe ffd7 	bl	80023ec <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003448:	4802      	ldr	r0, [pc, #8]	@ (8003454 <DMA1_Channel4_IRQHandler+0x10>)
 800344a:	f005 f892 	bl	8008572 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	200042f8 	.word	0x200042f8

08003458 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800345c:	4802      	ldr	r0, [pc, #8]	@ (8003468 <USART1_IRQHandler+0x10>)
 800345e:	f007 ff6f 	bl	800b340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	20004264 	.word	0x20004264

0800346c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003470:	4802      	ldr	r0, [pc, #8]	@ (800347c <LPUART1_IRQHandler+0x10>)
 8003472:	f007 ff65 	bl	800b340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	200041d0 	.word	0x200041d0

08003480 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003484:	f004 f960 	bl	8007748 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003488:	bf00      	nop
 800348a:	bd80      	pop	{r7, pc}

0800348c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003490:	f004 f990 	bl	80077b4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}

08003498 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800349c:	f005 fdac 	bl	8008ff8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80034a0:	bf00      	nop
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80034a8:	4802      	ldr	r0, [pc, #8]	@ (80034b4 <DMA2_Channel4_IRQHandler+0x10>)
 80034aa:	f005 f862 	bl	8008572 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20004358 	.word	0x20004358

080034b8 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80034bc:	2010      	movs	r0, #16
 80034be:	f005 fd83 	bl	8008fc8 <HAL_GPIO_EXTI_IRQHandler>
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80034ca:	2001      	movs	r0, #1
 80034cc:	f005 fd7c 	bl	8008fc8 <HAL_GPIO_EXTI_IRQHandler>
}
 80034d0:	bf00      	nop
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 80034d8:	2002      	movs	r0, #2
 80034da:	f005 fd75 	bl	8008fc8 <HAL_GPIO_EXTI_IRQHandler>
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0
  return 1;
 80034e6:	2301      	movs	r3, #1
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <_kill>:

int _kill(int pid, int sig)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034fc:	f025 feba 	bl	8029274 <__errno>
 8003500:	4603      	mov	r3, r0
 8003502:	2216      	movs	r2, #22
 8003504:	601a      	str	r2, [r3, #0]
  return -1;
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <_exit>:

void _exit (int status)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800351a:	f04f 31ff 	mov.w	r1, #4294967295
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ffe7 	bl	80034f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <_exit+0x12>

08003528 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e00a      	b.n	8003550 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800353a:	f3af 8000 	nop.w
 800353e:	4601      	mov	r1, r0
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	60ba      	str	r2, [r7, #8]
 8003546:	b2ca      	uxtb	r2, r1
 8003548:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	3301      	adds	r3, #1
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	429a      	cmp	r2, r3
 8003556:	dbf0      	blt.n	800353a <_read+0x12>
  }

  return len;
 8003558:	687b      	ldr	r3, [r7, #4]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800358a:	605a      	str	r2, [r3, #4]
  return 0;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <_isatty>:

int _isatty(int file)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035a2:	2301      	movs	r3, #1
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035d4:	4a14      	ldr	r2, [pc, #80]	@ (8003628 <_sbrk+0x5c>)
 80035d6:	4b15      	ldr	r3, [pc, #84]	@ (800362c <_sbrk+0x60>)
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035e0:	4b13      	ldr	r3, [pc, #76]	@ (8003630 <_sbrk+0x64>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035e8:	4b11      	ldr	r3, [pc, #68]	@ (8003630 <_sbrk+0x64>)
 80035ea:	4a12      	ldr	r2, [pc, #72]	@ (8003634 <_sbrk+0x68>)
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ee:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <_sbrk+0x64>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d207      	bcs.n	800360c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035fc:	f025 fe3a 	bl	8029274 <__errno>
 8003600:	4603      	mov	r3, r0
 8003602:	220c      	movs	r2, #12
 8003604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	e009      	b.n	8003620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800360c:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <_sbrk+0x64>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003612:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <_sbrk+0x64>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	4a05      	ldr	r2, [pc, #20]	@ (8003630 <_sbrk+0x64>)
 800361c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800361e:	68fb      	ldr	r3, [r7, #12]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20030000 	.word	0x20030000
 800362c:	00001000 	.word	0x00001000
 8003630:	200043f0 	.word	0x200043f0
 8003634:	200080f8 	.word	0x200080f8

08003638 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800363c:	4b03      	ldr	r3, [pc, #12]	@ (800364c <LL_FLASH_GetUDN+0x14>)
 800363e:	681b      	ldr	r3, [r3, #0]
}
 8003640:	4618      	mov	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	1fff7580 	.word	0x1fff7580

08003650 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8003654:	4b03      	ldr	r3, [pc, #12]	@ (8003664 <LL_FLASH_GetDeviceID+0x14>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	b2db      	uxtb	r3, r3
}
 800365a:	4618      	mov	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	1fff7584 	.word	0x1fff7584

08003668 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800366c:	4b03      	ldr	r3, [pc, #12]	@ (800367c <LL_FLASH_GetSTCompanyID+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	0a1b      	lsrs	r3, r3, #8
}
 8003672:	4618      	mov	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	1fff7584 	.word	0x1fff7584

08003680 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8003680:	b5b0      	push	{r4, r5, r7, lr}
 8003682:	b096      	sub	sp, #88	@ 0x58
 8003684:	af04      	add	r7, sp, #16
  SHCI_CmdStatus_t status;
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8003686:	4b3a      	ldr	r3, [pc, #232]	@ (8003770 <APP_BLE_Init+0xf0>)
 8003688:	1d3c      	adds	r4, r7, #4
 800368a:	461d      	mov	r5, r3
 800368c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800368e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003698:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800369c:	c403      	stmia	r4!, {r0, r1}
 800369e:	8022      	strh	r2, [r4, #0]
  };

  /**
     * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 80036a0:	f000 f880 	bl	80037a4 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80036a4:	2101      	movs	r1, #1
 80036a6:	2002      	movs	r0, #2
 80036a8:	f012 fe7c 	bl	80163a4 <UTIL_LPM_SetOffMode>

  /**
   * Do not allow stop mode in the application
   */
#if (LOW_POWER_FEATURE == 0)
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80036ac:	2101      	movs	r1, #1
 80036ae:	2002      	movs	r0, #2
 80036b0:	f012 fe48 	bl	8016344 <UTIL_LPM_SetStopMode>
#endif

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80036b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003774 <APP_BLE_Init+0xf4>)
 80036b6:	2100      	movs	r1, #0
 80036b8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80036bc:	f012 ff9e 	bl	80165fc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	4618      	mov	r0, r3
 80036c4:	f011 ff28 	bl	8015518 <SHCI_C2_BLE_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  if (status != SHCI_Success)
 80036ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d008      	beq.n	80036e8 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80036d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80036da:	4619      	mov	r1, r3
 80036dc:	4826      	ldr	r0, [pc, #152]	@ (8003778 <APP_BLE_Init+0xf8>)
 80036de:	f025 fbc7 	bl	8028e70 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80036e2:	f7ff fc51 	bl	8002f88 <Error_Handler>
 80036e6:	e002      	b.n	80036ee <APP_BLE_Init+0x6e>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 80036e8:	4824      	ldr	r0, [pc, #144]	@ (800377c <APP_BLE_Init+0xfc>)
 80036ea:	f025 fbc1 	bl	8028e70 <iprintf>
  /**
   * Initialization of HCI & GATT & GAP layer
   */
  {
    const uint8_t *p_bd_addr;
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80036ee:	2392      	movs	r3, #146	@ 0x92
 80036f0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    /**
     * Write the BD Address
     */
    p_bd_addr = BleGetBdAddress();
 80036f4:	f000 f86c 	bl	80037d0 <BleGetBdAddress>
 80036f8:	6438      	str	r0, [r7, #64]	@ 0x40
    ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80036fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036fc:	2106      	movs	r1, #6
 80036fe:	2000      	movs	r0, #0
 8003700:	f011 fada 	bl	8014cb8 <aci_hal_write_config_data>
 8003704:	4603      	mov	r3, r0
 8003706:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    if (ret != BLE_STATUS_SUCCESS)
 800370a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800370e:	2b00      	cmp	r3, #0
 8003710:	d006      	beq.n	8003720 <APP_BLE_Init+0xa0>
    {
      APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8003712:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003716:	4619      	mov	r1, r3
 8003718:	4819      	ldr	r0, [pc, #100]	@ (8003780 <APP_BLE_Init+0x100>)
 800371a:	f025 fba9 	bl	8028e70 <iprintf>
 800371e:	e021      	b.n	8003764 <APP_BLE_Init+0xe4>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8003720:	4818      	ldr	r0, [pc, #96]	@ (8003784 <APP_BLE_Init+0x104>)
 8003722:	f025 fc0d 	bl	8028f40 <puts>
      APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8003726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003728:	3305      	adds	r3, #5
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003730:	3304      	adds	r3, #4
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	461c      	mov	r4, r3
 8003736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003738:	3303      	adds	r3, #3
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	461d      	mov	r5, r3
 800373e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003740:	3302      	adds	r3, #2
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003748:	3301      	adds	r3, #1
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	4619      	mov	r1, r3
 800374e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	9302      	str	r3, [sp, #8]
 8003754:	9101      	str	r1, [sp, #4]
 8003756:	9200      	str	r2, [sp, #0]
 8003758:	462b      	mov	r3, r5
 800375a:	4622      	mov	r2, r4
 800375c:	4601      	mov	r1, r0
 800375e:	480a      	ldr	r0, [pc, #40]	@ (8003788 <APP_BLE_Init+0x108>)
 8003760:	f025 fb86 	bl	8028e70 <iprintf>
    }
  }
  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8003764:	f00f ffb6 	bl	80136d4 <SVCCTL_Init>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */

  return;
 8003768:	bf00      	nop
}
 800376a:	3748      	adds	r7, #72	@ 0x48
 800376c:	46bd      	mov	sp, r7
 800376e:	bdb0      	pop	{r4, r5, r7, pc}
 8003770:	0802cc48 	.word	0x0802cc48
 8003774:	08015765 	.word	0x08015765
 8003778:	0802cb04 	.word	0x0802cb04
 800377c:	0802cb3c 	.word	0x0802cb3c
 8003780:	0802cb64 	.word	0x0802cb64
 8003784:	0802cbc0 	.word	0x0802cbc0
 8003788:	0802cc0c 	.word	0x0802cc0c

0800378c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *p_Pckt )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* callback of mesh Library to receive all GAP/GATT events*/  
  HCI_Event_CB(p_Pckt);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f01b fc29 	bl	801efec <HCI_Event_CB>

#if (LOW_POWER_FEATURE == 1)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);
#endif

  return (SVCCTL_UserEvtFlowEnable);
 800379a:	2301      	movs	r3, #1
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80037aa:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <Ble_Tl_Init+0x20>)
 80037ac:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80037ae:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <Ble_Tl_Init+0x24>)
 80037b0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80037b2:	463b      	mov	r3, r7
 80037b4:	4619      	mov	r1, r3
 80037b6:	4805      	ldr	r0, [pc, #20]	@ (80037cc <Ble_Tl_Init+0x28>)
 80037b8:	f011 ffb8 	bl	801572c <hci_init>

  return;
 80037bc:	bf00      	nop
}
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	20030028 	.word	0x20030028
 80037c8:	080038d7 	.word	0x080038d7
 80037cc:	0800389f 	.word	0x0800389f

080037d0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80037d6:	f7ff ff2f 	bl	8003638 <LL_FLASH_GetUDN>
 80037da:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e2:	d023      	beq.n	800382c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80037e4:	f7ff ff40 	bl	8003668 <LL_FLASH_GetSTCompanyID>
 80037e8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80037ea:	f7ff ff31 	bl	8003650 <LL_FLASH_GetDeviceID>
 80037ee:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	4b16      	ldr	r3, [pc, #88]	@ (8003850 <BleGetBdAddress+0x80>)
 80037f6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4b14      	ldr	r3, [pc, #80]	@ (8003850 <BleGetBdAddress+0x80>)
 8003800:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	b2da      	uxtb	r2, r3
 8003806:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <BleGetBdAddress+0x80>)
 8003808:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	b2da      	uxtb	r2, r3
 800380e:	4b10      	ldr	r3, [pc, #64]	@ (8003850 <BleGetBdAddress+0x80>)
 8003810:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	0a1b      	lsrs	r3, r3, #8
 8003816:	b2da      	uxtb	r2, r3
 8003818:	4b0d      	ldr	r3, [pc, #52]	@ (8003850 <BleGetBdAddress+0x80>)
 800381a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	0c1b      	lsrs	r3, r3, #16
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <BleGetBdAddress+0x80>)
 8003824:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8003826:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <BleGetBdAddress+0x80>)
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e00b      	b.n	8003844 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800382c:	2000      	movs	r0, #0
 800382e:	f012 fd4f 	bl	80162d0 <OTP_Read>
 8003832:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	e001      	b.n	8003844 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8003840:	4b04      	ldr	r3, [pc, #16]	@ (8003854 <BleGetBdAddress+0x84>)
 8003842:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8003844:	697b      	ldr	r3, [r7, #20]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	200043f4 	.word	0x200043f4
 8003854:	080304a4 	.word	0x080304a4

08003858 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8003860:	2100      	movs	r1, #0
 8003862:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003866:	f012 feeb 	bl	8016640 <UTIL_SEQ_SetTask>

  return;
 800386a:	bf00      	nop
}
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <hci_cmd_resp_release>:
#if (LOW_POWER_FEATURE == 1)
static volatile uint8_t HciResponse = 0;
#endif

void hci_cmd_resp_release(uint32_t Flag)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800387a:	2001      	movs	r0, #1
 800387c:	f012 ff4c 	bl	8016718 <UTIL_SEQ_SetEvt>
#else
  HciResponse = 1;
#endif
  return;
 8003880:	bf00      	nop
}
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003890:	2001      	movs	r0, #1
 8003892:	f012 ff61 	bl	8016758 <UTIL_SEQ_WaitEvt>
#else
  while(HciResponse == 0);
  HciResponse = 0;
#endif  
  return;
 8003896:	bf00      	nop
}
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * p_Payload )
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	60fb      	str	r3, [r7, #12]
  
  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	3308      	adds	r3, #8
 80038b0:	4618      	mov	r0, r3
 80038b2:	f00f ff47 	bl	8013744 <SVCCTL_UserEvtRx>
 80038b6:	4603      	mov	r3, r0
 80038b8:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80038ba:	7afb      	ldrb	r3, [r7, #11]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80038c6:	e003      	b.n	80038d0 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	701a      	strb	r2, [r3, #0]
  return;
 80038ce:	bf00      	nop
}
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t Status )
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <BLE_StatusNot+0x16>
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d007      	beq.n	80038fa <BLE_StatusNot+0x24>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80038ea:	e00d      	b.n	8003908 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80038ec:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80038f0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f012 fed0 	bl	8016698 <UTIL_SEQ_PauseTask>
      break;
 80038f8:	e006      	b.n	8003908 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80038fa:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80038fe:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f012 fee9 	bl	80166d8 <UTIL_SEQ_ResumeTask>
      break;
 8003906:	bf00      	nop
  }

  return;
 8003908:	bf00      	nop
}
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <Appli_GetAppKeyAddParamsCb>:
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndex
*                                               appKey, keySize & status
* @retval none
*/ 
void Appli_GetAppKeyAddParamsCb(model_securityKeyParams_t* appKeyAddParams)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"AppKey Add received for netKeyIndex %.2x, appKeyIndex %.2x \r\n",\
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	4619      	mov	r1, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	885b      	ldrh	r3, [r3, #2]
 8003922:	461a      	mov	r2, r3
 8003924:	4816      	ldr	r0, [pc, #88]	@ (8003980 <Appli_GetAppKeyAddParamsCb+0x70>)
 8003926:	f025 faa3 	bl	8028e70 <iprintf>
          appKeyAddParams->netKeyIndex, appKeyAddParams->appKeyIndex);

  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyAddParams->status);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7b5b      	ldrb	r3, [r3, #13]
 800392e:	4619      	mov	r1, r3
 8003930:	4814      	ldr	r0, [pc, #80]	@ (8003984 <Appli_GetAppKeyAddParamsCb+0x74>)
 8003932:	f025 fa9d 	bl	8028e70 <iprintf>
  /*Success Command*/
  if(appKeyAddParams->status == 0x00)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	7b5b      	ldrb	r3, [r3, #13]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d11c      	bne.n	8003978 <Appli_GetAppKeyAddParamsCb+0x68>
  {
    TRACE_I(TF_CONFIG_SERVER,"AppKey is: ");
 800393e:	4812      	ldr	r0, [pc, #72]	@ (8003988 <Appli_GetAppKeyAddParamsCb+0x78>)
 8003940:	f025 fa96 	bl	8028e70 <iprintf>
    for (MOBLEUINT8 count=0 ; count<appKeyAddParams->keySize; count++)
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]
 8003948:	e00e      	b.n	8003968 <Appli_GetAppKeyAddParamsCb+0x58>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(appKeyAddParams->appKey));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	4619      	mov	r1, r3
 8003952:	480e      	ldr	r0, [pc, #56]	@ (800398c <Appli_GetAppKeyAddParamsCb+0x7c>)
 8003954:	f025 fa8c 	bl	8028e70 <iprintf>
      appKeyAddParams->appKey++;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	609a      	str	r2, [r3, #8]
    for (MOBLEUINT8 count=0 ; count<appKeyAddParams->keySize; count++)
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	3301      	adds	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	7b1b      	ldrb	r3, [r3, #12]
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	429a      	cmp	r2, r3
 8003970:	d3eb      	bcc.n	800394a <Appli_GetAppKeyAddParamsCb+0x3a>
    }  
    TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003972:	4807      	ldr	r0, [pc, #28]	@ (8003990 <Appli_GetAppKeyAddParamsCb+0x80>)
 8003974:	f025 fae4 	bl	8028f40 <puts>
  }
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	0802cc84 	.word	0x0802cc84
 8003984:	0802ccc4 	.word	0x0802ccc4
 8003988:	0802ccd8 	.word	0x0802ccd8
 800398c:	0802cce4 	.word	0x0802cce4
 8003990:	0802ccec 	.word	0x0802ccec

08003994 <Appli_GetAppKeyDeleteParamsCb>:
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndex
*                                               appKey, keySize & status
* @retval none
*/ 
void Appli_GetAppKeyDeleteParamsCb(model_securityKeyParams_t* appKeyDeleteParams)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"App Key Delete received for netKeyIndex %.2x, appKeyIndex %.2x \r\n",\
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	4619      	mov	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	885b      	ldrh	r3, [r3, #2]
 80039a6:	461a      	mov	r2, r3
 80039a8:	4806      	ldr	r0, [pc, #24]	@ (80039c4 <Appli_GetAppKeyDeleteParamsCb+0x30>)
 80039aa:	f025 fa61 	bl	8028e70 <iprintf>
          appKeyDeleteParams->netKeyIndex, appKeyDeleteParams->appKeyIndex);
  
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyDeleteParams->status);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7b5b      	ldrb	r3, [r3, #13]
 80039b2:	4619      	mov	r1, r3
 80039b4:	4804      	ldr	r0, [pc, #16]	@ (80039c8 <Appli_GetAppKeyDeleteParamsCb+0x34>)
 80039b6:	f025 fa5b 	bl	8028e70 <iprintf>
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	0802ccf0 	.word	0x0802ccf0
 80039c8:	0802ccc4 	.word	0x0802ccc4

080039cc <Appli_GetAppKeyListParamsCb>:
* @brief  Callback from Config Model to receive the AppKey List
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndexes & appKeyListParams Size
* @retval none
*/ 
void Appli_GetAppKeyListParamsCb(model_appKeyListParams_t* appKeyListParams)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"App Key List for netKeyIndex %.2x is \r\n", appKeyListParams->netKeyIndex);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	4619      	mov	r1, r3
 80039da:	4817      	ldr	r0, [pc, #92]	@ (8003a38 <Appli_GetAppKeyListParamsCb+0x6c>)
 80039dc:	f025 fa48 	bl	8028e70 <iprintf>
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyListParams->status);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7a9b      	ldrb	r3, [r3, #10]
 80039e4:	4619      	mov	r1, r3
 80039e6:	4815      	ldr	r0, [pc, #84]	@ (8003a3c <Appli_GetAppKeyListParamsCb+0x70>)
 80039e8:	f025 fa42 	bl	8028e70 <iprintf>
  /*Success*/
  if(appKeyListParams->status == 0x00)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	7a9b      	ldrb	r3, [r3, #10]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11d      	bne.n	8003a30 <Appli_GetAppKeyListParamsCb+0x64>
  {
    TRACE_I(TF_CONFIG_SERVER,"AppKey Indexes are: \r\n");
 80039f4:	4812      	ldr	r0, [pc, #72]	@ (8003a40 <Appli_GetAppKeyListParamsCb+0x74>)
 80039f6:	f025 faa3 	bl	8028f40 <puts>
    for (MOBLEUINT8 count=0 ; count< appKeyListParams->appKeyIndexList_size; count++)
 80039fa:	2300      	movs	r3, #0
 80039fc:	73fb      	strb	r3, [r7, #15]
 80039fe:	e00e      	b.n	8003a1e <Appli_GetAppKeyListParamsCb+0x52>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(appKeyListParams->appKeyIndexList));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	4619      	mov	r1, r3
 8003a08:	480e      	ldr	r0, [pc, #56]	@ (8003a44 <Appli_GetAppKeyListParamsCb+0x78>)
 8003a0a:	f025 fa31 	bl	8028e70 <iprintf>
      appKeyListParams->appKeyIndexList++;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	1c9a      	adds	r2, r3, #2
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	605a      	str	r2, [r3, #4]
    for (MOBLEUINT8 count=0 ; count< appKeyListParams->appKeyIndexList_size; count++)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	891b      	ldrh	r3, [r3, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d3ea      	bcc.n	8003a00 <Appli_GetAppKeyListParamsCb+0x34>
    }  
   TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003a2a:	4807      	ldr	r0, [pc, #28]	@ (8003a48 <Appli_GetAppKeyListParamsCb+0x7c>)
 8003a2c:	f025 fa88 	bl	8028f40 <puts>
  }
}
 8003a30:	bf00      	nop
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	0802cd34 	.word	0x0802cd34
 8003a3c:	0802ccc4 	.word	0x0802ccc4
 8003a40:	0802cd5c 	.word	0x0802cd5c
 8003a44:	0802cce4 	.word	0x0802cce4
 8003a48:	0802ccec 	.word	0x0802ccec

08003a4c <Appli_GetAppKeyUpdateParamsCb>:
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndex
*                                               appKey, keySize & status
* @retval none
*/ 
void Appli_GetAppKeyUpdateParamsCb(model_securityKeyParams_t* appKeyUpdatedParams)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"App Key Update received for netKeyIndex %.2x, appKeyIndex %.2x \r\n",\
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	885b      	ldrh	r3, [r3, #2]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4818      	ldr	r0, [pc, #96]	@ (8003ac4 <Appli_GetAppKeyUpdateParamsCb+0x78>)
 8003a62:	f025 fa05 	bl	8028e70 <iprintf>
          appKeyUpdatedParams->netKeyIndex, appKeyUpdatedParams->appKeyIndex);

  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyUpdatedParams->status);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	7b5b      	ldrb	r3, [r3, #13]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4816      	ldr	r0, [pc, #88]	@ (8003ac8 <Appli_GetAppKeyUpdateParamsCb+0x7c>)
 8003a6e:	f025 f9ff 	bl	8028e70 <iprintf>
  
  /*Success Command*/
  if(appKeyUpdatedParams->status == 0x00)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	7b5b      	ldrb	r3, [r3, #13]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11f      	bne.n	8003aba <Appli_GetAppKeyUpdateParamsCb+0x6e>
  {
    TRACE_I(TF_CONFIG_SERVER,"Updated AppKey is: ");
 8003a7a:	4814      	ldr	r0, [pc, #80]	@ (8003acc <Appli_GetAppKeyUpdateParamsCb+0x80>)
 8003a7c:	f025 f9f8 	bl	8028e70 <iprintf>
    for (MOBLEUINT8 count=0 ; count<appKeyUpdatedParams->keySize; count++)
 8003a80:	2300      	movs	r3, #0
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	e00e      	b.n	8003aa4 <Appli_GetAppKeyUpdateParamsCb+0x58>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(appKeyUpdatedParams->appKey));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4810      	ldr	r0, [pc, #64]	@ (8003ad0 <Appli_GetAppKeyUpdateParamsCb+0x84>)
 8003a90:	f025 f9ee 	bl	8028e70 <iprintf>
      appKeyUpdatedParams->appKey++;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	609a      	str	r2, [r3, #8]
    for (MOBLEUINT8 count=0 ; count<appKeyUpdatedParams->keySize; count++)
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7b1b      	ldrb	r3, [r3, #12]
 8003aa8:	7bfa      	ldrb	r2, [r7, #15]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d3eb      	bcc.n	8003a86 <Appli_GetAppKeyUpdateParamsCb+0x3a>
    }
    TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003aae:	4809      	ldr	r0, [pc, #36]	@ (8003ad4 <Appli_GetAppKeyUpdateParamsCb+0x88>)
 8003ab0:	f025 fa46 	bl	8028f40 <puts>
    TRACE_I(TF_CONFIG_SERVER,"It will be replaced by old appKey after Key Refresh \r\n");
 8003ab4:	4808      	ldr	r0, [pc, #32]	@ (8003ad8 <Appli_GetAppKeyUpdateParamsCb+0x8c>)
 8003ab6:	f025 fa43 	bl	8028f40 <puts>
  }
  
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	0802cd74 	.word	0x0802cd74
 8003ac8:	0802ccc4 	.word	0x0802ccc4
 8003acc:	0802cdb8 	.word	0x0802cdb8
 8003ad0:	0802cce4 	.word	0x0802cce4
 8003ad4:	0802ccec 	.word	0x0802ccec
 8003ad8:	0802cdcc 	.word	0x0802cdcc

08003adc <Appli_GetNetKeyAddParamsCb>:
* @brief  Callback from Config Model to receive the NetKey Add Command
* @param  Structure Pointer having parameters - netKeyIndex & netKey
* @retval none
*/ 
void Appli_GetNetKeyAddParamsCb(model_securityKeyParams_t* netKeyAddParams)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Net Key Add received for netKeyIndex %.2x \r\n",\
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4817      	ldr	r0, [pc, #92]	@ (8003b48 <Appli_GetNetKeyAddParamsCb+0x6c>)
 8003aec:	f025 f9c0 	bl	8028e70 <iprintf>
                                               netKeyAddParams->netKeyIndex);

  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyAddParams->status);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	7b5b      	ldrb	r3, [r3, #13]
 8003af4:	4619      	mov	r1, r3
 8003af6:	4815      	ldr	r0, [pc, #84]	@ (8003b4c <Appli_GetNetKeyAddParamsCb+0x70>)
 8003af8:	f025 f9ba 	bl	8028e70 <iprintf>

  /*Success Command*/
  if(netKeyAddParams->status == 0x00)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	7b5b      	ldrb	r3, [r3, #13]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d11c      	bne.n	8003b3e <Appli_GetNetKeyAddParamsCb+0x62>
  {
    TRACE_I(TF_CONFIG_SERVER,"NetKey is: ");
 8003b04:	4812      	ldr	r0, [pc, #72]	@ (8003b50 <Appli_GetNetKeyAddParamsCb+0x74>)
 8003b06:	f025 f9b3 	bl	8028e70 <iprintf>
    for (MOBLEUINT8 count=0 ; count < netKeyAddParams->keySize; count++)
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	73fb      	strb	r3, [r7, #15]
 8003b0e:	e00e      	b.n	8003b2e <Appli_GetNetKeyAddParamsCb+0x52>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(netKeyAddParams->netKey));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	4619      	mov	r1, r3
 8003b18:	480e      	ldr	r0, [pc, #56]	@ (8003b54 <Appli_GetNetKeyAddParamsCb+0x78>)
 8003b1a:	f025 f9a9 	bl	8028e70 <iprintf>
      netKeyAddParams->netKey++;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	605a      	str	r2, [r3, #4]
    for (MOBLEUINT8 count=0 ; count < netKeyAddParams->keySize; count++)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	7b1b      	ldrb	r3, [r3, #12]
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d3eb      	bcc.n	8003b10 <Appli_GetNetKeyAddParamsCb+0x34>
    } 
    TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003b38:	4807      	ldr	r0, [pc, #28]	@ (8003b58 <Appli_GetNetKeyAddParamsCb+0x7c>)
 8003b3a:	f025 fa01 	bl	8028f40 <puts>
  }
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	0802ce04 	.word	0x0802ce04
 8003b4c:	0802ccc4 	.word	0x0802ccc4
 8003b50:	0802ce34 	.word	0x0802ce34
 8003b54:	0802cce4 	.word	0x0802cce4
 8003b58:	0802ccec 	.word	0x0802ccec

08003b5c <Appli_GetNetKeyDeleteParamsCb>:
* @brief  Callback from Config Model to receive the NetKey Delete Command
* @param  Structure Pointer having parameters - netKeyIndex & netKey
* @retval none
*/ 
void Appli_GetNetKeyDeleteParamsCb(model_securityKeyParams_t* netKeyDeleteParams)
{ 
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
   TRACE_I(TF_CONFIG_SERVER,"Net Key Delete received for netKeyIndex %d \r\n",\
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4806      	ldr	r0, [pc, #24]	@ (8003b84 <Appli_GetNetKeyDeleteParamsCb+0x28>)
 8003b6c:	f025 f980 	bl	8028e70 <iprintf>
                                               netKeyDeleteParams->netKeyIndex);
   TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyDeleteParams->status);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	7b5b      	ldrb	r3, [r3, #13]
 8003b74:	4619      	mov	r1, r3
 8003b76:	4804      	ldr	r0, [pc, #16]	@ (8003b88 <Appli_GetNetKeyDeleteParamsCb+0x2c>)
 8003b78:	f025 f97a 	bl	8028e70 <iprintf>
}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	0802ce40 	.word	0x0802ce40
 8003b88:	0802ccc4 	.word	0x0802ccc4

08003b8c <Appli_GetNetKeyListParamsCb>:
* @brief  Callback from Config Model to receive the NetKey List
* @param  Structure Pointer having parameters - netKeyIndexes & netKeyListParams Size
* @retval none
*/ 
void Appli_GetNetKeyListParamsCb(model_netKeyListParams_t* netKeyListParams)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyListParams->status);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	799b      	ldrb	r3, [r3, #6]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4812      	ldr	r0, [pc, #72]	@ (8003be4 <Appli_GetNetKeyListParamsCb+0x58>)
 8003b9c:	f025 f968 	bl	8028e70 <iprintf>
  TRACE_I(TF_CONFIG_SERVER,"NetKey Indexes are: \r\n");
 8003ba0:	4811      	ldr	r0, [pc, #68]	@ (8003be8 <Appli_GetNetKeyListParamsCb+0x5c>)
 8003ba2:	f025 f9cd 	bl	8028f40 <puts>
  for (MOBLEUINT8 count=0 ; count< netKeyListParams->netKeyIndexList_size; count++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
 8003baa:	e00e      	b.n	8003bca <Appli_GetNetKeyListParamsCb+0x3e>
  {
    TRACE_I(TF_CONFIG_SERVER,"%.2x", *(netKeyListParams->netKeyIndexList));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	480d      	ldr	r0, [pc, #52]	@ (8003bec <Appli_GetNetKeyListParamsCb+0x60>)
 8003bb6:	f025 f95b 	bl	8028e70 <iprintf>
    netKeyListParams->netKeyIndexList++;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	1c9a      	adds	r2, r3, #2
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	601a      	str	r2, [r3, #0]
  for (MOBLEUINT8 count=0 ; count< netKeyListParams->netKeyIndexList_size; count++)
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	889b      	ldrh	r3, [r3, #4]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d3ea      	bcc.n	8003bac <Appli_GetNetKeyListParamsCb+0x20>
  }
  TRACE_I(TF_CONFIG_SERVER," \r\n");  
 8003bd6:	4806      	ldr	r0, [pc, #24]	@ (8003bf0 <Appli_GetNetKeyListParamsCb+0x64>)
 8003bd8:	f025 f9b2 	bl	8028f40 <puts>
}
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	0802ccc4 	.word	0x0802ccc4
 8003be8:	0802ce70 	.word	0x0802ce70
 8003bec:	0802cce4 	.word	0x0802cce4
 8003bf0:	0802ccec 	.word	0x0802ccec

08003bf4 <Appli_GetNetKeyUpdateParamsCb>:
* @brief  Callback from Config Model to receive the Updated NetKey Command
* @param  Structure Pointer having parameters - netKeyIndex & netKey
* @retval none
*/ 
void Appli_GetNetKeyUpdateParamsCb(model_securityKeyParams_t* netKeyUpdatedParams)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Net Key Update received for netKeyIndex %d \r\n",\
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	4619      	mov	r1, r3
 8003c02:	4818      	ldr	r0, [pc, #96]	@ (8003c64 <Appli_GetNetKeyUpdateParamsCb+0x70>)
 8003c04:	f025 f934 	bl	8028e70 <iprintf>
                                     netKeyUpdatedParams->netKeyIndex);
  
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyUpdatedParams->status);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	7b5b      	ldrb	r3, [r3, #13]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4816      	ldr	r0, [pc, #88]	@ (8003c68 <Appli_GetNetKeyUpdateParamsCb+0x74>)
 8003c10:	f025 f92e 	bl	8028e70 <iprintf>
  if(netKeyUpdatedParams->status == 0)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7b5b      	ldrb	r3, [r3, #13]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d11f      	bne.n	8003c5c <Appli_GetNetKeyUpdateParamsCb+0x68>
  {
    TRACE_I(TF_CONFIG_SERVER,"Updated NetKey is:");
 8003c1c:	4813      	ldr	r0, [pc, #76]	@ (8003c6c <Appli_GetNetKeyUpdateParamsCb+0x78>)
 8003c1e:	f025 f927 	bl	8028e70 <iprintf>
    for (MOBLEUINT8 count=0; count<netKeyUpdatedParams->keySize; count++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	73fb      	strb	r3, [r7, #15]
 8003c26:	e00e      	b.n	8003c46 <Appli_GetNetKeyUpdateParamsCb+0x52>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(netKeyUpdatedParams->netKey));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	480f      	ldr	r0, [pc, #60]	@ (8003c70 <Appli_GetNetKeyUpdateParamsCb+0x7c>)
 8003c32:	f025 f91d 	bl	8028e70 <iprintf>
      netKeyUpdatedParams->netKey++;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	605a      	str	r2, [r3, #4]
    for (MOBLEUINT8 count=0; count<netKeyUpdatedParams->keySize; count++)
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	3301      	adds	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	7b1b      	ldrb	r3, [r3, #12]
 8003c4a:	7bfa      	ldrb	r2, [r7, #15]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d3eb      	bcc.n	8003c28 <Appli_GetNetKeyUpdateParamsCb+0x34>
    }
  TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003c50:	4808      	ldr	r0, [pc, #32]	@ (8003c74 <Appli_GetNetKeyUpdateParamsCb+0x80>)
 8003c52:	f025 f975 	bl	8028f40 <puts>
  TRACE_I(TF_CONFIG_SERVER,"It will be replaced by old netKey after Key Refresh \r\n");
 8003c56:	4808      	ldr	r0, [pc, #32]	@ (8003c78 <Appli_GetNetKeyUpdateParamsCb+0x84>)
 8003c58:	f025 f972 	bl	8028f40 <puts>
  }
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	0802ce88 	.word	0x0802ce88
 8003c68:	0802ccc4 	.word	0x0802ccc4
 8003c6c:	0802ceb8 	.word	0x0802ceb8
 8003c70:	0802cce4 	.word	0x0802cce4
 8003c74:	0802ccec 	.word	0x0802ccec
 8003c78:	0802cecc 	.word	0x0802cecc

08003c7c <Appli_GetAppKeyBindingParamsCb>:
* @brief  Callback from Config Model to receive the AppKey binding params
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex & modelID
* @retval none
*/ 
void Appli_GetAppKeyBindingParamsCb(model_appKeyBindingParams_t* appKeyBindParams)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"AppKey binding received for elementIndex %d, modelID %.2lx,\
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	885b      	ldrh	r3, [r3, #2]
 8003c92:	4618      	mov	r0, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	7a1b      	ldrb	r3, [r3, #8]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4803      	ldr	r0, [pc, #12]	@ (8003cac <Appli_GetAppKeyBindingParamsCb+0x30>)
 8003c9e:	f025 f8e7 	bl	8028e70 <iprintf>
          appKeyIndex %.2x & status %.2x \r\n", appKeyBindParams->elementIndex,\
          appKeyBindParams->modelID, appKeyBindParams->appKeyIndex, appKeyBindParams->status);
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	0802cf04 	.word	0x0802cf04

08003cb0 <Appli_GetAppKeyUnBindingParamsCb>:
* @brief  Callback from Config Model to receive the AppKey Unbinding params
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex & modelID
* @retval none
*/ 
void Appli_GetAppKeyUnBindingParamsCb(model_appKeyBindingParams_t* appKeyUnbindParams)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"AppKey unbinding received for elementIndex %d, modelID %.2lx,\
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	885b      	ldrh	r3, [r3, #2]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	7a1b      	ldrb	r3, [r3, #8]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4803      	ldr	r0, [pc, #12]	@ (8003ce0 <Appli_GetAppKeyUnBindingParamsCb+0x30>)
 8003cd2:	f025 f8cd 	bl	8028e70 <iprintf>
          appKeyIndex %.2x & status %.2x \r\n",appKeyUnbindParams->elementIndex,\
          appKeyUnbindParams->modelID, appKeyUnbindParams->appKeyIndex,\
          appKeyUnbindParams->status);  
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	0802cf6c 	.word	0x0802cf6c

08003ce4 <Appli_GetSubAddParamsCb>:
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex, modelID
*            subAddress, isVirtual & allSubDeleted
* @retval none
*/ 
void Appli_GetSubAddParamsCb(model_subParams_t* subAddParams)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", subAddParams->status); 
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	7a9b      	ldrb	r3, [r3, #10]
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4810      	ldr	r0, [pc, #64]	@ (8003d34 <Appli_GetSubAddParamsCb+0x50>)
 8003cf4:	f025 f8bc 	bl	8028e70 <iprintf>
  if(subAddParams->isVirtual)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	7adb      	ldrb	r3, [r3, #11]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <Appli_GetSubAddParamsCb+0x32>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Virtual Add received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	4619      	mov	r1, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	891b      	ldrh	r3, [r3, #8]
 8003d0e:	480a      	ldr	r0, [pc, #40]	@ (8003d38 <Appli_GetSubAddParamsCb+0x54>)
 8003d10:	f025 f8ae 	bl	8028e70 <iprintf>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Add received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
                              subAddParams->elementIndex, subAddParams->modelID,\
                                                 subAddParams->subAddress); 
  }
}
 8003d14:	e009      	b.n	8003d2a <Appli_GetSubAddParamsCb+0x46>
    TRACE_I(TF_CONFIG_SERVER,"Subscription Add received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	891b      	ldrh	r3, [r3, #8]
 8003d24:	4805      	ldr	r0, [pc, #20]	@ (8003d3c <Appli_GetSubAddParamsCb+0x58>)
 8003d26:	f025 f8a3 	bl	8028e70 <iprintf>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	0802ccc4 	.word	0x0802ccc4
 8003d38:	0802cfd8 	.word	0x0802cfd8
 8003d3c:	0802d034 	.word	0x0802d034

08003d40 <Appli_GetSubDeleteParamsCb>:
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex, modelID
*            subAddress, isVirtual & allSubDeleted
* @retval none
*/ 
void Appli_GetSubDeleteParamsCb(model_subParams_t* subDeleteParams)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", subDeleteParams->status); 
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	7a9b      	ldrb	r3, [r3, #10]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4817      	ldr	r0, [pc, #92]	@ (8003dac <Appli_GetSubDeleteParamsCb+0x6c>)
 8003d50:	f025 f88e 	bl	8028e70 <iprintf>
  if(subDeleteParams->isVirtual)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7adb      	ldrb	r3, [r3, #11]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <Appli_GetSubDeleteParamsCb+0x32>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Virtual Add Delete received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	4619      	mov	r1, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	891b      	ldrh	r3, [r3, #8]
 8003d6a:	4811      	ldr	r0, [pc, #68]	@ (8003db0 <Appli_GetSubDeleteParamsCb+0x70>)
 8003d6c:	f025 f880 	bl	8028e70 <iprintf>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Delete received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
                              subDeleteParams->elementIndex, subDeleteParams->modelID,\
                                                 subDeleteParams->subAddress); 
  }  
}
 8003d70:	e017      	b.n	8003da2 <Appli_GetSubDeleteParamsCb+0x62>
  else if(subDeleteParams->allSubDeleted)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7b1b      	ldrb	r3, [r3, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <Appli_GetSubDeleteParamsCb+0x4e>
     TRACE_I(TF_CONFIG_SERVER,"Delete All Subscription received for elementIndex %d, modelID %.2lx \r\n",\
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	4619      	mov	r1, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	461a      	mov	r2, r3
 8003d86:	480b      	ldr	r0, [pc, #44]	@ (8003db4 <Appli_GetSubDeleteParamsCb+0x74>)
 8003d88:	f025 f872 	bl	8028e70 <iprintf>
}
 8003d8c:	e009      	b.n	8003da2 <Appli_GetSubDeleteParamsCb+0x62>
    TRACE_I(TF_CONFIG_SERVER,"Subscription Delete received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	4619      	mov	r1, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	891b      	ldrh	r3, [r3, #8]
 8003d9c:	4806      	ldr	r0, [pc, #24]	@ (8003db8 <Appli_GetSubDeleteParamsCb+0x78>)
 8003d9e:	f025 f867 	bl	8028e70 <iprintf>
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	0802ccc4 	.word	0x0802ccc4
 8003db0:	0802d088 	.word	0x0802d088
 8003db4:	0802d0ec 	.word	0x0802d0ec
 8003db8:	0802d134 	.word	0x0802d134

08003dbc <Appli_GetSubOverwriteParamsCb>:
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex, modelID
*            subAddress, isVirtual & allSubDeleted
* @retval none
*/ 
void Appli_GetSubOverwriteParamsCb(model_subParams_t* subOverwriteParams)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", subOverwriteParams->status); 
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	7a9b      	ldrb	r3, [r3, #10]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4810      	ldr	r0, [pc, #64]	@ (8003e0c <Appli_GetSubOverwriteParamsCb+0x50>)
 8003dcc:	f025 f850 	bl	8028e70 <iprintf>
  if(subOverwriteParams->isVirtual)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	7adb      	ldrb	r3, [r3, #11]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <Appli_GetSubOverwriteParamsCb+0x32>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Virtual Overwrite received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	891b      	ldrh	r3, [r3, #8]
 8003de6:	480a      	ldr	r0, [pc, #40]	@ (8003e10 <Appli_GetSubOverwriteParamsCb+0x54>)
 8003de8:	f025 f842 	bl	8028e70 <iprintf>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Overwrite received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
                     subOverwriteParams->elementIndex, subOverwriteParams->modelID,\
                                                 subOverwriteParams->subAddress); 
  }  
}
 8003dec:	e009      	b.n	8003e02 <Appli_GetSubOverwriteParamsCb+0x46>
    TRACE_I(TF_CONFIG_SERVER,"Subscription Overwrite received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	4619      	mov	r1, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	891b      	ldrh	r3, [r3, #8]
 8003dfc:	4805      	ldr	r0, [pc, #20]	@ (8003e14 <Appli_GetSubOverwriteParamsCb+0x58>)
 8003dfe:	f025 f837 	bl	8028e70 <iprintf>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	0802ccc4 	.word	0x0802ccc4
 8003e10:	0802d18c 	.word	0x0802d18c
 8003e14:	0802d1ec 	.word	0x0802d1ec

08003e18 <Appli_GetPublicationSetParamsCb>:
*         Publish Address, PublishPeriod, PublishTTL, Credential Flag, 
*         Publish AppKeyIndex, Retransmit Count, Restransmit Interval Steps & status
* @retval none
*/ 
void Appli_GetPublicationSetParamsCb(model_publicationparams_t* pPubParameters)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Publication Add received for modelID %.2lx & elementAddress %.2x \r\n",
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6859      	ldr	r1, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4807      	ldr	r0, [pc, #28]	@ (8003e48 <Appli_GetPublicationSetParamsCb+0x30>)
 8003e2c:	f025 f820 	bl	8028e70 <iprintf>
          pPubParameters->modelID,
          pPubParameters->elementAddress); 
  if(pPubParameters->modelID == SENSOR_SERVER_MODEL_ID)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 8003e38:	d102      	bne.n	8003e40 <Appli_GetPublicationSetParamsCb+0x28>
  {
    Sensor_ModelPublishSet(pPubParameters);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f00f fb74 	bl	8013528 <Sensor_ModelPublishSet>
  }
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	0802d244 	.word	0x0802d244

08003e4c <Appli_GetPublicationGetParamsCb>:
*         Publish Address, PublishPeriod, PublishTTL, Credential Flag, 
*         Publish AppKeyIndex, Retransmit Count, Restransmit Interval Steps & status
* @retval none
*/ 
void Appli_GetPublicationGetParamsCb(model_publicationparams_t* pPubParameters)
{
 8003e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e4e:	b089      	sub	sp, #36	@ 0x24
 8003e50:	af06      	add	r7, sp, #24
 8003e52:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", pPubParameters->status); 
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	7c5b      	ldrb	r3, [r3, #17]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4814      	ldr	r0, [pc, #80]	@ (8003eac <Appli_GetPublicationGetParamsCb+0x60>)
 8003e5c:	f025 f808 	bl	8028e70 <iprintf>
  TRACE_I(TF_CONFIG_SERVER,"Received Publication parameters:  credentialFlag = %.2x,\
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	7b1b      	ldrb	r3, [r3, #12]
 8003e64:	461e      	mov	r6, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	469c      	mov	ip, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	895b      	ldrh	r3, [r3, #10]
 8003e74:	4619      	mov	r1, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	7b9b      	ldrb	r3, [r3, #14]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7bdb      	ldrb	r3, [r3, #15]
 8003e80:	461c      	mov	r4, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7c1b      	ldrb	r3, [r3, #16]
 8003e86:	461d      	mov	r5, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	7b5b      	ldrb	r3, [r3, #13]
 8003e8c:	9304      	str	r3, [sp, #16]
 8003e8e:	9503      	str	r5, [sp, #12]
 8003e90:	9402      	str	r4, [sp, #8]
 8003e92:	9001      	str	r0, [sp, #4]
 8003e94:	9100      	str	r1, [sp, #0]
 8003e96:	4613      	mov	r3, r2
 8003e98:	4662      	mov	r2, ip
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	4804      	ldr	r0, [pc, #16]	@ (8003eb0 <Appli_GetPublicationGetParamsCb+0x64>)
 8003e9e:	f024 ffe7 	bl	8028e70 <iprintf>
          elementAddress = %.2x, modelID = %.2lx, appKeyIndex = %.2x,\
          publishPeriod = %.2x, publishRetransmitCount = %.2x, publishRetransmitIntervalSteps = %.2x,\
          publishTTL = %.2x \r\n", pPubParameters->credentialFlag, pPubParameters->elementAddress, pPubParameters->modelID,\
          pPubParameters->publishAppKeyIndex, pPubParameters->publishPeriod, pPubParameters->publishRetransmitCount,\
          pPubParameters->publishRetransmitIntervalSteps, pPubParameters->publishTTL);
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	0802ccc4 	.word	0x0802ccc4
 8003eb0:	0802d288 	.word	0x0802d288

08003eb4 <Appli_Generic_OnOff_Set>:
*/ 
MOBLE_RESULT Appli_Generic_OnOff_Set(Generic_OnOffStatus_t* pGeneric_OnOffParam, 
                                     MOBLEUINT8 OptionalValid,
                                     MOBLEUINT16 dstPeer,
                                     MOBLEUINT8 elementIndex)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	70fb      	strb	r3, [r7, #3]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	803b      	strh	r3, [r7, #0]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	70bb      	strb	r3, [r7, #2]
  /* LED control only for main element */
  if(elementIndex == GENERIC_SERVER_MAIN_ELEMENT_INDEX)
 8003ece:	78bb      	ldrb	r3, [r7, #2]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 80a7 	bne.w	8004024 <Appli_Generic_OnOff_Set+0x170>
  {
    /*User need to modify the parameters as per the number of elements per node*/
    AppliOnOffSet[elementIndex].Present_OnOff = pGeneric_OnOffParam->Present_OnOff_State;
 8003ed6:	78ba      	ldrb	r2, [r7, #2]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	7818      	ldrb	r0, [r3, #0]
 8003edc:	495f      	ldr	r1, [pc, #380]	@ (800405c <Appli_Generic_OnOff_Set+0x1a8>)
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	701a      	strb	r2, [r3, #0]
    AppliOnOffSet[elementIndex].Present_OnOffValue = pGeneric_OnOffParam->Present_OnOff_Value; 
 8003eea:	78ba      	ldrb	r2, [r7, #2]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003ef2:	b298      	uxth	r0, r3
 8003ef4:	4959      	ldr	r1, [pc, #356]	@ (800405c <Appli_Generic_OnOff_Set+0x1a8>)
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	440b      	add	r3, r1
 8003efe:	4602      	mov	r2, r0
 8003f00:	f8a3 2001 	strh.w	r2, [r3, #1]

    /* This condition is applicable when user want to on off the light with some 
      default transition value, or optionalValid =IN_TRANSITION ,
      transition is in progress.
    */
    if((OptionalValid == DEFAULT_TRANSITION) || (OptionalValid == IN_TRANSITION))
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d002      	beq.n	8003f10 <Appli_Generic_OnOff_Set+0x5c>
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d148      	bne.n	8003fa2 <Appli_Generic_OnOff_Set+0xee>
    {
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
      Appli_LightPwmValue.IntensityValue = AppliOnOffSet[elementIndex].Present_OnOffValue;
 8003f10:	78ba      	ldrb	r2, [r7, #2]
 8003f12:	4952      	ldr	r1, [pc, #328]	@ (800405c <Appli_Generic_OnOff_Set+0x1a8>)
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	4b4f      	ldr	r3, [pc, #316]	@ (8004060 <Appli_Generic_OnOff_Set+0x1ac>)
 8003f24:	801a      	strh	r2, [r3, #0]
      Light_UpdateLedValue(LOAD_STATE ,Appli_LightPwmValue);
 8003f26:	4b4e      	ldr	r3, [pc, #312]	@ (8004060 <Appli_Generic_OnOff_Set+0x1ac>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	6858      	ldr	r0, [r3, #4]
 8003f2e:	4602      	mov	r2, r0
 8003f30:	6898      	ldr	r0, [r3, #8]
 8003f32:	4603      	mov	r3, r0
 8003f34:	2004      	movs	r0, #4
 8003f36:	f000 ff19 	bl	8004d6c <Light_UpdateLedValue>
      else
      {
        AppliOnOffSet[elementIndex].TargetValue = APPLI_LED_OFF;
      }
  #else
      AppliOnOffSet[elementIndex].TargetValue = pGeneric_OnOffParam->Target_OnOff; 
 8003f3a:	78ba      	ldrb	r2, [r7, #2]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003f42:	b298      	uxth	r0, r3
 8003f44:	4945      	ldr	r1, [pc, #276]	@ (800405c <Appli_Generic_OnOff_Set+0x1a8>)
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	4602      	mov	r2, r0
 8003f50:	f8a3 2003 	strh.w	r2, [r3, #3]
  #endif /* EME */

      if(AppliOnOffSet[elementIndex].Present_OnOffValue == AppliOnOffSet[elementIndex].TargetValue)
 8003f54:	78ba      	ldrb	r2, [r7, #2]
 8003f56:	4941      	ldr	r1, [pc, #260]	@ (800405c <Appli_Generic_OnOff_Set+0x1a8>)
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	440b      	add	r3, r1
 8003f60:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003f64:	b299      	uxth	r1, r3
 8003f66:	78ba      	ldrb	r2, [r7, #2]
 8003f68:	483c      	ldr	r0, [pc, #240]	@ (800405c <Appli_Generic_OnOff_Set+0x1a8>)
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	4403      	add	r3, r0
 8003f72:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	4299      	cmp	r1, r3
 8003f7a:	d153      	bne.n	8004024 <Appli_Generic_OnOff_Set+0x170>
      {
        if(AppliOnOffSet[elementIndex].Present_OnOffValue > 0)
 8003f7c:	78ba      	ldrb	r2, [r7, #2]
 8003f7e:	4937      	ldr	r1, [pc, #220]	@ (800405c <Appli_Generic_OnOff_Set+0x1a8>)
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	440b      	add	r3, r1
 8003f88:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <Appli_Generic_OnOff_Set+0xe6>
        {
          BSP_LED_On(LED_BLUE);
 8003f92:	2000      	movs	r0, #0
 8003f94:	f003 fda0 	bl	8007ad8 <BSP_LED_On>
      if(AppliOnOffSet[elementIndex].Present_OnOffValue == AppliOnOffSet[elementIndex].TargetValue)
 8003f98:	e044      	b.n	8004024 <Appli_Generic_OnOff_Set+0x170>
          // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); IT CAN BE DONE!
        }
        else
        {
          BSP_LED_Off(LED_BLUE);
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	f003 fdb6 	bl	8007b0c <BSP_LED_Off>
      if(AppliOnOffSet[elementIndex].Present_OnOffValue == AppliOnOffSet[elementIndex].TargetValue)
 8003fa0:	e040      	b.n	8004024 <Appli_Generic_OnOff_Set+0x170>
        }
      }
    }  
    else
    {
      if((AppliOnOffSet[elementIndex].Present_OnOff == APPLI_LED_ON) && (OptionalValid == NO_TRANSITION))
 8003fa2:	78ba      	ldrb	r2, [r7, #2]
 8003fa4:	492d      	ldr	r1, [pc, #180]	@ (800405c <Appli_Generic_OnOff_Set+0x1a8>)
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	440b      	add	r3, r1
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d11e      	bne.n	8003ff2 <Appli_Generic_OnOff_Set+0x13e>
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d11b      	bne.n	8003ff2 <Appli_Generic_OnOff_Set+0x13e>
      { 
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
        Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
 8003fba:	4b29      	ldr	r3, [pc, #164]	@ (8004060 <Appli_Generic_OnOff_Set+0x1ac>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f062 0209 	orn	r2, r2, #9
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f042 027c 	orr.w	r2, r2, #124	@ 0x7c
 8003fca:	705a      	strb	r2, [r3, #1]
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 8003fcc:	4b24      	ldr	r3, [pc, #144]	@ (8004060 <Appli_Generic_OnOff_Set+0x1ac>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	6858      	ldr	r0, [r3, #4]
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6898      	ldr	r0, [r3, #8]
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2004      	movs	r0, #4
 8003fdc:	f000 fec6 	bl	8004d6c <Light_UpdateLedValue>
#endif
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	481f      	ldr	r0, [pc, #124]	@ (8004064 <Appli_Generic_OnOff_Set+0x1b0>)
 8003fe6:	f004 ffd7 	bl	8008f98 <HAL_GPIO_WritePin>
        BSP_LED_On(LED_BLUE);
 8003fea:	2000      	movs	r0, #0
 8003fec:	f003 fd74 	bl	8007ad8 <BSP_LED_On>
 8003ff0:	e018      	b.n	8004024 <Appli_Generic_OnOff_Set+0x170>
      }
      else
      {  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
        Appli_LightPwmValue.IntensityValue = PWM_VALUE_OFF;
 8003ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8004060 <Appli_Generic_OnOff_Set+0x1ac>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	705a      	strb	r2, [r3, #1]
        Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);
 8004000:	4b17      	ldr	r3, [pc, #92]	@ (8004060 <Appli_Generic_OnOff_Set+0x1ac>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4611      	mov	r1, r2
 8004006:	6858      	ldr	r0, [r3, #4]
 8004008:	4602      	mov	r2, r0
 800400a:	6898      	ldr	r0, [r3, #8]
 800400c:	4603      	mov	r3, r0
 800400e:	2002      	movs	r0, #2
 8004010:	f000 feac 	bl	8004d6c <Light_UpdateLedValue>
#endif
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8004014:	2200      	movs	r2, #0
 8004016:	2101      	movs	r1, #1
 8004018:	4812      	ldr	r0, [pc, #72]	@ (8004064 <Appli_Generic_OnOff_Set+0x1b0>)
 800401a:	f004 ffbd 	bl	8008f98 <HAL_GPIO_WritePin>
        BSP_LED_Off(LED_BLUE);
 800401e:	2000      	movs	r0, #0
 8004020:	f003 fd74 	bl	8007b0c <BSP_LED_Off>
      }
    } 
  }
  
  TRACE_M(TF_GENERIC, "Appli_Generic_OnOff_Set callback received for elementIndex %d \r\n", elementIndex);           
 8004024:	2100      	movs	r1, #0
 8004026:	4810      	ldr	r0, [pc, #64]	@ (8004068 <Appli_Generic_OnOff_Set+0x1b4>)
 8004028:	f009 fa78 	bl	800d51c <TraceHeader>
 800402c:	78bb      	ldrb	r3, [r7, #2]
 800402e:	4619      	mov	r1, r3
 8004030:	480e      	ldr	r0, [pc, #56]	@ (800406c <Appli_Generic_OnOff_Set+0x1b8>)
 8004032:	f024 ff1d 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL, "#8202!for elementIndex %d \r\n", elementIndex);
 8004036:	2100      	movs	r1, #0
 8004038:	480b      	ldr	r0, [pc, #44]	@ (8004068 <Appli_Generic_OnOff_Set+0x1b4>)
 800403a:	f009 fa6f 	bl	800d51c <TraceHeader>
 800403e:	78bb      	ldrb	r3, [r7, #2]
 8004040:	4619      	mov	r1, r3
 8004042:	480b      	ldr	r0, [pc, #44]	@ (8004070 <Appli_Generic_OnOff_Set+0x1bc>)
 8004044:	f024 ff14 	bl	8028e70 <iprintf>

  NvmStatePowerFlag_Set(GENERIC_ON_OFF_NVM_FLAG, elementIndex);
 8004048:	78bb      	ldrb	r3, [r7, #2]
 800404a:	4619      	mov	r1, r3
 800404c:	2001      	movs	r0, #1
 800404e:	f009 fc9b 	bl	800d988 <NvmStatePowerFlag_Set>

  return MOBLE_RESULT_SUCCESS;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	200043fc 	.word	0x200043fc
 8004060:	2000441c 	.word	0x2000441c
 8004064:	48000800 	.word	0x48000800
 8004068:	080304ac 	.word	0x080304ac
 800406c:	0802d38c 	.word	0x0802d38c
 8004070:	0802d3d0 	.word	0x0802d3d0

08004074 <Appli_Generic_Level_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_Level_Set(Generic_LevelStatus_t* plevelParam, 
                                     MOBLEUINT8 OptionalValid,MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	4608      	mov	r0, r1
 800407e:	4611      	mov	r1, r2
 8004080:	461a      	mov	r2, r3
 8004082:	4603      	mov	r3, r0
 8004084:	70fb      	strb	r3, [r7, #3]
 8004086:	460b      	mov	r3, r1
 8004088:	803b      	strh	r3, [r7, #0]
 800408a:	4613      	mov	r3, r2
 800408c:	70bb      	strb	r3, [r7, #2]
  MOBLEUINT16 duty;
  static MOBLEUINT16 previousIntensity = 0;
   
  AppliLevelSet[elementIndex].Present_Level16= plevelParam->Present_Level16;
 800408e:	78ba      	ldrb	r2, [r7, #2]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004096:	b218      	sxth	r0, r3
 8004098:	4948      	ldr	r1, [pc, #288]	@ (80041bc <Appli_Generic_Level_Set+0x148>)
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	4602      	mov	r2, r0
 80040a6:	801a      	strh	r2, [r3, #0]
  if(AppliLevelSet[elementIndex].Present_Level16 <= 0)
 80040a8:	78ba      	ldrb	r2, [r7, #2]
 80040aa:	4944      	ldr	r1, [pc, #272]	@ (80041bc <Appli_Generic_Level_Set+0x148>)
 80040ac:	4613      	mov	r3, r2
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	dc08      	bgt.n	80040d0 <Appli_Generic_Level_Set+0x5c>
  {
    AppliLevelSet[elementIndex].Present_Level16 = 0;
 80040be:	78ba      	ldrb	r2, [r7, #2]
 80040c0:	493e      	ldr	r1, [pc, #248]	@ (80041bc <Appli_Generic_Level_Set+0x148>)
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	2200      	movs	r2, #0
 80040ce:	801a      	strh	r2, [r3, #0]
  }
  
  IntensityValue =  AppliLevelSet[elementIndex].Present_Level16;
 80040d0:	78ba      	ldrb	r2, [r7, #2]
 80040d2:	493a      	ldr	r1, [pc, #232]	@ (80041bc <Appli_Generic_Level_Set+0x148>)
 80040d4:	4613      	mov	r3, r2
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	4b36      	ldr	r3, [pc, #216]	@ (80041c0 <Appli_Generic_Level_Set+0x14c>)
 80040e6:	801a      	strh	r2, [r3, #0]
  
  if(((IntensityValue > previousIntensity) && (IntensityValue <PWM_TIME_PERIOD)) ||
 80040e8:	4b35      	ldr	r3, [pc, #212]	@ (80041c0 <Appli_Generic_Level_Set+0x14c>)
 80040ea:	881a      	ldrh	r2, [r3, #0]
 80040ec:	4b35      	ldr	r3, [pc, #212]	@ (80041c4 <Appli_Generic_Level_Set+0x150>)
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d905      	bls.n	8004100 <Appli_Generic_Level_Set+0x8c>
 80040f4:	4b32      	ldr	r3, [pc, #200]	@ (80041c0 <Appli_Generic_Level_Set+0x14c>)
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	f647 42f5 	movw	r2, #31989	@ 0x7cf5
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d903      	bls.n	8004108 <Appli_Generic_Level_Set+0x94>
     IntensityValue == INTENSITY_LEVEL_ZERO)
 8004100:	4b2f      	ldr	r3, [pc, #188]	@ (80041c0 <Appli_Generic_Level_Set+0x14c>)
 8004102:	881b      	ldrh	r3, [r3, #0]
  if(((IntensityValue > previousIntensity) && (IntensityValue <PWM_TIME_PERIOD)) ||
 8004104:	2b00      	cmp	r3, #0
 8004106:	d103      	bne.n	8004110 <Appli_Generic_Level_Set+0x9c>
  {
    IntensityFlag = MOBLE_FALSE;
 8004108:	4b2f      	ldr	r3, [pc, #188]	@ (80041c8 <Appli_Generic_Level_Set+0x154>)
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	e002      	b.n	8004116 <Appli_Generic_Level_Set+0xa2>
  }
  else
  {
    IntensityFlag = MOBLE_TRUE;
 8004110:	4b2d      	ldr	r3, [pc, #180]	@ (80041c8 <Appli_Generic_Level_Set+0x154>)
 8004112:	2201      	movs	r2, #1
 8004114:	701a      	strb	r2, [r3, #0]
  }
  previousIntensity = IntensityValue;     
 8004116:	4b2a      	ldr	r3, [pc, #168]	@ (80041c0 <Appli_Generic_Level_Set+0x14c>)
 8004118:	881a      	ldrh	r2, [r3, #0]
 800411a:	4b2a      	ldr	r3, [pc, #168]	@ (80041c4 <Appli_Generic_Level_Set+0x150>)
 800411c:	801a      	strh	r2, [r3, #0]
  
  if(AppliLevelSet[elementIndex].Present_Level16 < 0x00)
 800411e:	78ba      	ldrb	r2, [r7, #2]
 8004120:	4926      	ldr	r1, [pc, #152]	@ (80041bc <Appli_Generic_Level_Set+0x148>)
 8004122:	4613      	mov	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004130:	2b00      	cmp	r3, #0
 8004132:	da08      	bge.n	8004146 <Appli_Generic_Level_Set+0xd2>
  {
     AppliLevelSet[elementIndex].Present_Level16 = 0;
 8004134:	78ba      	ldrb	r2, [r7, #2]
 8004136:	4921      	ldr	r1, [pc, #132]	@ (80041bc <Appli_Generic_Level_Set+0x148>)
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	2200      	movs	r2, #0
 8004144:	801a      	strh	r2, [r3, #0]
  }
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
  duty = PwmValueMapping(AppliLevelSet[elementIndex].Present_Level16 , 0x7FFF ,0x0000); 
 8004146:	78ba      	ldrb	r2, [r7, #2]
 8004148:	491c      	ldr	r1, [pc, #112]	@ (80041bc <Appli_Generic_Level_Set+0x148>)
 800414a:	4613      	mov	r3, r2
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004158:	b29b      	uxth	r3, r3
 800415a:	2200      	movs	r2, #0
 800415c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8004160:	4618      	mov	r0, r3
 8004162:	f002 fb13 	bl	800678c <PwmValueMapping>
 8004166:	4603      	mov	r3, r0
 8004168:	81fb      	strh	r3, [r7, #14]
  Appli_LightPwmValue.IntensityValue = duty;
 800416a:	4b18      	ldr	r3, [pc, #96]	@ (80041cc <Appli_Generic_Level_Set+0x158>)
 800416c:	89fa      	ldrh	r2, [r7, #14]
 800416e:	801a      	strh	r2, [r3, #0]
  Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 8004170:	4b16      	ldr	r3, [pc, #88]	@ (80041cc <Appli_Generic_Level_Set+0x158>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4611      	mov	r1, r2
 8004176:	6858      	ldr	r0, [r3, #4]
 8004178:	4602      	mov	r2, r0
 800417a:	6898      	ldr	r0, [r3, #8]
 800417c:	4603      	mov	r3, r0
 800417e:	2004      	movs	r0, #4
 8004180:	f000 fdf4 	bl	8004d6c <Light_UpdateLedValue>
#endif
  
  TRACE_M(TF_GENERIC,"Appli_Generic_Level_Set callback received for elementIndex %d \r\n", elementIndex);
 8004184:	2100      	movs	r1, #0
 8004186:	4812      	ldr	r0, [pc, #72]	@ (80041d0 <Appli_Generic_Level_Set+0x15c>)
 8004188:	f009 f9c8 	bl	800d51c <TraceHeader>
 800418c:	78bb      	ldrb	r3, [r7, #2]
 800418e:	4619      	mov	r1, r3
 8004190:	4810      	ldr	r0, [pc, #64]	@ (80041d4 <Appli_Generic_Level_Set+0x160>)
 8004192:	f024 fe6d 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8206!for elementIndex %d \r\n", elementIndex);
 8004196:	2100      	movs	r1, #0
 8004198:	480d      	ldr	r0, [pc, #52]	@ (80041d0 <Appli_Generic_Level_Set+0x15c>)
 800419a:	f009 f9bf 	bl	800d51c <TraceHeader>
 800419e:	78bb      	ldrb	r3, [r7, #2]
 80041a0:	4619      	mov	r1, r3
 80041a2:	480d      	ldr	r0, [pc, #52]	@ (80041d8 <Appli_Generic_Level_Set+0x164>)
 80041a4:	f024 fe64 	bl	8028e70 <iprintf>
  
  NvmStatePowerFlag_Set(GENERIC_LEVEL_NVM_FLAG, elementIndex);
 80041a8:	78bb      	ldrb	r3, [r7, #2]
 80041aa:	4619      	mov	r1, r3
 80041ac:	2002      	movs	r0, #2
 80041ae:	f009 fbeb 	bl	800d988 <NvmStatePowerFlag_Set>
    
  return MOBLE_RESULT_SUCCESS;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20004404 	.word	0x20004404
 80041c0:	2000442c 	.word	0x2000442c
 80041c4:	20004416 	.word	0x20004416
 80041c8:	2000442e 	.word	0x2000442e
 80041cc:	2000441c 	.word	0x2000441c
 80041d0:	080304c4 	.word	0x080304c4
 80041d4:	0802d3f0 	.word	0x0802d3f0
 80041d8:	0802d434 	.word	0x0802d434

080041dc <Appli_Generic_Delta_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_Delta_Set(Generic_LevelStatus_t* pdeltalevelParam, 
                                          MOBLEUINT8 OptionalValid,MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	4608      	mov	r0, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	461a      	mov	r2, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	70fb      	strb	r3, [r7, #3]
 80041ee:	460b      	mov	r3, r1
 80041f0:	803b      	strh	r3, [r7, #0]
 80041f2:	4613      	mov	r3, r2
 80041f4:	70bb      	strb	r3, [r7, #2]
  AppliLevelSet[elementIndex].Present_Level16 = pdeltalevelParam->Present_Level16;
 80041f6:	78ba      	ldrb	r2, [r7, #2]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041fe:	b218      	sxth	r0, r3
 8004200:	4925      	ldr	r1, [pc, #148]	@ (8004298 <Appli_Generic_Delta_Set+0xbc>)
 8004202:	4613      	mov	r3, r2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	4602      	mov	r2, r0
 800420e:	801a      	strh	r2, [r3, #0]
  
  /* For demo, if Level is more than 50, switch ON the LED */
  if (AppliLevelSet[elementIndex].Present_Level16 >= 50)
 8004210:	78ba      	ldrb	r2, [r7, #2]
 8004212:	4921      	ldr	r1, [pc, #132]	@ (8004298 <Appli_Generic_Delta_Set+0xbc>)
 8004214:	4613      	mov	r3, r2
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004222:	2b31      	cmp	r3, #49	@ 0x31
 8004224:	dd16      	ble.n	8004254 <Appli_Generic_Delta_Set+0x78>
  {
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
 8004226:	4b1d      	ldr	r3, [pc, #116]	@ (800429c <Appli_Generic_Delta_Set+0xc0>)
 8004228:	2200      	movs	r2, #0
 800422a:	f062 0209 	orn	r2, r2, #9
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	2200      	movs	r2, #0
 8004232:	f042 027c 	orr.w	r2, r2, #124	@ 0x7c
 8004236:	705a      	strb	r2, [r3, #1]
    Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 8004238:	4b18      	ldr	r3, [pc, #96]	@ (800429c <Appli_Generic_Delta_Set+0xc0>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	4611      	mov	r1, r2
 800423e:	6858      	ldr	r0, [r3, #4]
 8004240:	4602      	mov	r2, r0
 8004242:	6898      	ldr	r0, [r3, #8]
 8004244:	4603      	mov	r3, r0
 8004246:	2004      	movs	r0, #4
 8004248:	f000 fd90 	bl	8004d6c <Light_UpdateLedValue>
#endif
    BSP_LED_On(LED_BLUE);
 800424c:	2000      	movs	r0, #0
 800424e:	f003 fc43 	bl	8007ad8 <BSP_LED_On>
 8004252:	e00c      	b.n	800426e <Appli_Generic_Delta_Set+0x92>
  }
  else
  {
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);
 8004254:	4b11      	ldr	r3, [pc, #68]	@ (800429c <Appli_Generic_Delta_Set+0xc0>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4611      	mov	r1, r2
 800425a:	6858      	ldr	r0, [r3, #4]
 800425c:	4602      	mov	r2, r0
 800425e:	6898      	ldr	r0, [r3, #8]
 8004260:	4603      	mov	r3, r0
 8004262:	2002      	movs	r0, #2
 8004264:	f000 fd82 	bl	8004d6c <Light_UpdateLedValue>
#endif
    BSP_LED_Off(LED_BLUE);
 8004268:	2000      	movs	r0, #0
 800426a:	f003 fc4f 	bl	8007b0c <BSP_LED_Off>
  }
  
  TRACE_M(TF_GENERIC,"Generic_LevelDelta_Set callback received for element %d \r\n", elementIndex);
 800426e:	2100      	movs	r1, #0
 8004270:	480b      	ldr	r0, [pc, #44]	@ (80042a0 <Appli_Generic_Delta_Set+0xc4>)
 8004272:	f009 f953 	bl	800d51c <TraceHeader>
 8004276:	78bb      	ldrb	r3, [r7, #2]
 8004278:	4619      	mov	r1, r3
 800427a:	480a      	ldr	r0, [pc, #40]	@ (80042a4 <Appli_Generic_Delta_Set+0xc8>)
 800427c:	f024 fdf8 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8209!\r\n");
 8004280:	2100      	movs	r1, #0
 8004282:	4807      	ldr	r0, [pc, #28]	@ (80042a0 <Appli_Generic_Delta_Set+0xc4>)
 8004284:	f009 f94a 	bl	800d51c <TraceHeader>
 8004288:	4807      	ldr	r0, [pc, #28]	@ (80042a8 <Appli_Generic_Delta_Set+0xcc>)
 800428a:	f024 fe59 	bl	8028f40 <puts>

  
  return MOBLE_RESULT_SUCCESS;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20004404 	.word	0x20004404
 800429c:	2000441c 	.word	0x2000441c
 80042a0:	080304dc 	.word	0x080304dc
 80042a4:	0802d454 	.word	0x0802d454
 80042a8:	0802d490 	.word	0x0802d490

080042ac <Appli_Generic_Move_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_Move_Set(Generic_LevelStatus_t* pdeltaMoveParam, 
                                         MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                         MOBLEUINT8 elementIndex)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	4608      	mov	r0, r1
 80042b6:	4611      	mov	r1, r2
 80042b8:	461a      	mov	r2, r3
 80042ba:	4603      	mov	r3, r0
 80042bc:	70fb      	strb	r3, [r7, #3]
 80042be:	460b      	mov	r3, r1
 80042c0:	803b      	strh	r3, [r7, #0]
 80042c2:	4613      	mov	r3, r2
 80042c4:	70bb      	strb	r3, [r7, #2]
//  if(OptionalValid == 1)
//  {
    AppliLevelSet[elementIndex].Last_delta_level     = pdeltaMoveParam->Last_delta_level;
 80042c6:	78ba      	ldrb	r2, [r7, #2]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6899      	ldr	r1, [r3, #8]
 80042cc:	482e      	ldr	r0, [pc, #184]	@ (8004388 <Appli_Generic_Move_Set+0xdc>)
 80042ce:	4613      	mov	r3, r2
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4403      	add	r3, r0
 80042d8:	3308      	adds	r3, #8
 80042da:	6019      	str	r1, [r3, #0]
    AppliLevelSet[elementIndex].Last_Level_TID       = pdeltaMoveParam->Last_Level_TID;
 80042dc:	78ba      	ldrb	r2, [r7, #2]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	7958      	ldrb	r0, [r3, #5]
 80042e2:	4929      	ldr	r1, [pc, #164]	@ (8004388 <Appli_Generic_Move_Set+0xdc>)
 80042e4:	4613      	mov	r3, r2
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	3305      	adds	r3, #5
 80042f0:	4602      	mov	r2, r0
 80042f2:	701a      	strb	r2, [r3, #0]
    AppliLevelSet[elementIndex].Last_Present_Level16 = pdeltaMoveParam->Last_Present_Level16;
 80042f4:	78ba      	ldrb	r2, [r7, #2]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80042fc:	b218      	sxth	r0, r3
 80042fe:	4922      	ldr	r1, [pc, #136]	@ (8004388 <Appli_Generic_Move_Set+0xdc>)
 8004300:	4613      	mov	r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	3306      	adds	r3, #6
 800430c:	4602      	mov	r2, r0
 800430e:	801a      	strh	r2, [r3, #0]
    AppliLevelSet[elementIndex].Present_Level16      = pdeltaMoveParam->Present_Level16;   
 8004310:	78ba      	ldrb	r2, [r7, #2]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004318:	b218      	sxth	r0, r3
 800431a:	491b      	ldr	r1, [pc, #108]	@ (8004388 <Appli_Generic_Move_Set+0xdc>)
 800431c:	4613      	mov	r3, r2
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	4602      	mov	r2, r0
 8004328:	801a      	strh	r2, [r3, #0]
    AppliLevelSet[elementIndex].RemainingTime        = pdeltaMoveParam->RemainingTime;
 800432a:	78ba      	ldrb	r2, [r7, #2]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	7918      	ldrb	r0, [r3, #4]
 8004330:	4915      	ldr	r1, [pc, #84]	@ (8004388 <Appli_Generic_Move_Set+0xdc>)
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	3304      	adds	r3, #4
 800433e:	4602      	mov	r2, r0
 8004340:	701a      	strb	r2, [r3, #0]
    AppliLevelSet[elementIndex].Target_Level16       = pdeltaMoveParam->Target_Level16;
 8004342:	78ba      	ldrb	r2, [r7, #2]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800434a:	b218      	sxth	r0, r3
 800434c:	490e      	ldr	r1, [pc, #56]	@ (8004388 <Appli_Generic_Move_Set+0xdc>)
 800434e:	4613      	mov	r3, r2
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	3302      	adds	r3, #2
 800435a:	4602      	mov	r2, r0
 800435c:	801a      	strh	r2, [r3, #0]
//  }
  
    TRACE_M(TF_GENERIC,"Generic_LevelMove_Set callback received for element %d \r\n", elementIndex);
 800435e:	2100      	movs	r1, #0
 8004360:	480a      	ldr	r0, [pc, #40]	@ (800438c <Appli_Generic_Move_Set+0xe0>)
 8004362:	f009 f8db 	bl	800d51c <TraceHeader>
 8004366:	78bb      	ldrb	r3, [r7, #2]
 8004368:	4619      	mov	r1, r3
 800436a:	4809      	ldr	r0, [pc, #36]	@ (8004390 <Appli_Generic_Move_Set+0xe4>)
 800436c:	f024 fd80 	bl	8028e70 <iprintf>
    TRACE_M(TF_SERIAL_CTRL,"#820B! \r\n");
 8004370:	2100      	movs	r1, #0
 8004372:	4806      	ldr	r0, [pc, #24]	@ (800438c <Appli_Generic_Move_Set+0xe0>)
 8004374:	f009 f8d2 	bl	800d51c <TraceHeader>
 8004378:	4806      	ldr	r0, [pc, #24]	@ (8004394 <Appli_Generic_Move_Set+0xe8>)
 800437a:	f024 fde1 	bl	8028f40 <puts>
    return MOBLE_RESULT_SUCCESS;
 800437e:	2300      	movs	r3, #0
  
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20004404 	.word	0x20004404
 800438c:	080304f4 	.word	0x080304f4
 8004390:	0802d498 	.word	0x0802d498
 8004394:	0802d4d4 	.word	0x0802d4d4

08004398 <Appli_Generic_PowerOnOff_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_PowerOnOff_Set(Generic_PowerOnOffParam_t* pPowerOnOffParam, 
                                         MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{ 
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	4608      	mov	r0, r1
 80043a2:	4611      	mov	r1, r2
 80043a4:	461a      	mov	r2, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	70fb      	strb	r3, [r7, #3]
 80043aa:	460b      	mov	r3, r1
 80043ac:	803b      	strh	r3, [r7, #0]
 80043ae:	4613      	mov	r3, r2
 80043b0:	70bb      	strb	r3, [r7, #2]
  
  AppliPowerOnSet[elementIndex].PowerOnState = pPowerOnOffParam->PowerOnOffState;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	781a      	ldrb	r2, [r3, #0]
 80043b6:	78bb      	ldrb	r3, [r7, #2]
 80043b8:	b211      	sxth	r1, r2
 80043ba:	4a12      	ldr	r2, [pc, #72]	@ (8004404 <Appli_Generic_PowerOnOff_Set+0x6c>)
 80043bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  TRACE_M(TF_SERIAL_CTRL,"#8213! for elementIndex %d \r\n", elementIndex);
 80043c0:	2100      	movs	r1, #0
 80043c2:	4811      	ldr	r0, [pc, #68]	@ (8004408 <Appli_Generic_PowerOnOff_Set+0x70>)
 80043c4:	f009 f8aa 	bl	800d51c <TraceHeader>
 80043c8:	78bb      	ldrb	r3, [r7, #2]
 80043ca:	4619      	mov	r1, r3
 80043cc:	480f      	ldr	r0, [pc, #60]	@ (800440c <Appli_Generic_PowerOnOff_Set+0x74>)
 80043ce:	f024 fd4f 	bl	8028e70 <iprintf>
  TRACE_M(TF_GENERIC,"Appli_Generic_PowerOnOff_Set callback received for elementIndex %d \r\n", elementIndex);
 80043d2:	2100      	movs	r1, #0
 80043d4:	480c      	ldr	r0, [pc, #48]	@ (8004408 <Appli_Generic_PowerOnOff_Set+0x70>)
 80043d6:	f009 f8a1 	bl	800d51c <TraceHeader>
 80043da:	78bb      	ldrb	r3, [r7, #2]
 80043dc:	4619      	mov	r1, r3
 80043de:	480c      	ldr	r0, [pc, #48]	@ (8004410 <Appli_Generic_PowerOnOff_Set+0x78>)
 80043e0:	f024 fd46 	bl	8028e70 <iprintf>

  if(AppliPowerOnSet[elementIndex].PowerOnState == GENERIC_POWER_ON_STATE)
 80043e4:	78bb      	ldrb	r3, [r7, #2]
 80043e6:	4a07      	ldr	r2, [pc, #28]	@ (8004404 <Appli_Generic_PowerOnOff_Set+0x6c>)
 80043e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d102      	bne.n	80043f6 <Appli_Generic_PowerOnOff_Set+0x5e>
  {
    /* set the flag value for NVM store */
    RestoreFlag = GENERIC_ON_OFF_NVM_FLAG;
 80043f0:	4b08      	ldr	r3, [pc, #32]	@ (8004414 <Appli_Generic_PowerOnOff_Set+0x7c>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
  }

  AppliNvm_SaveMessageParam();
 80043f6:	f002 fa2b 	bl	8006850 <AppliNvm_SaveMessageParam>
    
  return MOBLE_RESULT_SUCCESS;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20004410 	.word	0x20004410
 8004408:	0803050c 	.word	0x0803050c
 800440c:	0802d4e0 	.word	0x0802d4e0
 8004410:	0802d500 	.word	0x0802d500
 8004414:	20004540 	.word	0x20004540

08004418 <Appli_Generic_GetOnOffStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetOnOffStatus(MOBLEUINT8* pOnOff_Status,MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex)                                        
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
 8004424:	4613      	mov	r3, r2
 8004426:	707b      	strb	r3, [r7, #1]
  
  *pOnOff_Status = AppliOnOffSet[elementIndex].Present_OnOff;
 8004428:	787a      	ldrb	r2, [r7, #1]
 800442a:	4907      	ldr	r1, [pc, #28]	@ (8004448 <Appli_Generic_GetOnOffStatus+0x30>)
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	440b      	add	r3, r1
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS; 
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	200043fc 	.word	0x200043fc

0800444c <Appli_Generic_GetOnOffValue>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetOnOffValue(MOBLEUINT8* pOnOff_Value, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex)                                        
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	807b      	strh	r3, [r7, #2]
 8004458:	4613      	mov	r3, r2
 800445a:	707b      	strb	r3, [r7, #1]
  
  *pOnOff_Value = AppliOnOffSet[elementIndex].Present_OnOffValue;
 800445c:	787a      	ldrb	r2, [r7, #1]
 800445e:	491e      	ldr	r1, [pc, #120]	@ (80044d8 <Appli_Generic_GetOnOffValue+0x8c>)
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	440b      	add	r3, r1
 8004468:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800446c:	b29b      	uxth	r3, r3
 800446e:	b2da      	uxtb	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	701a      	strb	r2, [r3, #0]
  *(pOnOff_Value+1) = AppliOnOffSet[elementIndex].Present_OnOffValue >> 8;
 8004474:	787a      	ldrb	r2, [r7, #1]
 8004476:	4918      	ldr	r1, [pc, #96]	@ (80044d8 <Appli_Generic_GetOnOffValue+0x8c>)
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	440b      	add	r3, r1
 8004480:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004484:	b29b      	uxth	r3, r3
 8004486:	0a1b      	lsrs	r3, r3, #8
 8004488:	b29a      	uxth	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3301      	adds	r3, #1
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]
  *(pOnOff_Value+2) = AppliOnOffSet[elementIndex].TargetValue;
 8004492:	787a      	ldrb	r2, [r7, #1]
 8004494:	4910      	ldr	r1, [pc, #64]	@ (80044d8 <Appli_Generic_GetOnOffValue+0x8c>)
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	440b      	add	r3, r1
 800449e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3302      	adds	r3, #2
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]
  *(pOnOff_Value+3) = AppliOnOffSet[elementIndex].TargetValue >> 8;
 80044ac:	787a      	ldrb	r2, [r7, #1]
 80044ae:	490a      	ldr	r1, [pc, #40]	@ (80044d8 <Appli_Generic_GetOnOffValue+0x8c>)
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	440b      	add	r3, r1
 80044b8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3303      	adds	r3, #3
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS; 
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	200043fc 	.word	0x200043fc

080044dc <Appli_Generic_GetLevelStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetLevelStatus(MOBLEUINT8* pLevel_Status, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{ 
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	807b      	strh	r3, [r7, #2]
 80044e8:	4613      	mov	r3, r2
 80044ea:	707b      	strb	r3, [r7, #1]

   *pLevel_Status = AppliLevelSet[elementIndex].Present_Level16;
 80044ec:	787a      	ldrb	r2, [r7, #1]
 80044ee:	491f      	ldr	r1, [pc, #124]	@ (800456c <Appli_Generic_GetLevelStatus+0x90>)
 80044f0:	4613      	mov	r3, r2
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	701a      	strb	r2, [r3, #0]
   *(pLevel_Status+1) = AppliLevelSet[elementIndex].Present_Level16 >> 8;
 8004504:	787a      	ldrb	r2, [r7, #1]
 8004506:	4919      	ldr	r1, [pc, #100]	@ (800456c <Appli_Generic_GetLevelStatus+0x90>)
 8004508:	4613      	mov	r3, r2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004516:	121b      	asrs	r3, r3, #8
 8004518:	b21a      	sxth	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3301      	adds	r3, #1
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]
   *(pLevel_Status+2) = AppliLevelSet[elementIndex].Target_Level16;
 8004522:	787a      	ldrb	r2, [r7, #1]
 8004524:	4911      	ldr	r1, [pc, #68]	@ (800456c <Appli_Generic_GetLevelStatus+0x90>)
 8004526:	4613      	mov	r3, r2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	3302      	adds	r3, #2
 8004532:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3302      	adds	r3, #2
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]
   *(pLevel_Status+3) = AppliLevelSet[elementIndex].Target_Level16 >> 8;
 800453e:	787a      	ldrb	r2, [r7, #1]
 8004540:	490a      	ldr	r1, [pc, #40]	@ (800456c <Appli_Generic_GetLevelStatus+0x90>)
 8004542:	4613      	mov	r3, r2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	3302      	adds	r3, #2
 800454e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004552:	121b      	asrs	r3, r3, #8
 8004554:	b21a      	sxth	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3303      	adds	r3, #3
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS; 
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	20004404 	.word	0x20004404

08004570 <Appli_Generic_GetPowerOnOffStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetPowerOnOffStatus(MOBLEUINT8* pPower_Status, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{ 
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	807b      	strh	r3, [r7, #2]
 800457c:	4613      	mov	r3, r2
 800457e:	707b      	strb	r3, [r7, #1]

  *pPower_Status = AppliPowerOnSet[elementIndex].PowerOnState;
 8004580:	787b      	ldrb	r3, [r7, #1]
 8004582:	4a06      	ldr	r2, [pc, #24]	@ (800459c <Appli_Generic_GetPowerOnOffStatus+0x2c>)
 8004584:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS; 
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	20004410 	.word	0x20004410

080045a0 <Appli_Generic_GetDefaultTransitionStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetDefaultTransitionStatus(MOBLEUINT8* pTransition_Status,MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{ 
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	807b      	strh	r3, [r7, #2]
 80045ac:	4613      	mov	r3, r2
 80045ae:	707b      	strb	r3, [r7, #1]

  *pTransition_Status = AppliDefaultTransitionSet[elementIndex].DefaultTransitionTime;
 80045b0:	787b      	ldrb	r3, [r7, #1]
 80045b2:	4a05      	ldr	r2, [pc, #20]	@ (80045c8 <Appli_Generic_GetDefaultTransitionStatus+0x28>)
 80045b4:	5cd2      	ldrb	r2, [r2, r3]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS; 
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	20004414 	.word	0x20004414

080045cc <Appli_Generic_OnOff_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_OnOff_Status(MOBLEUINT8 const *pOnOff_status, MOBLEUINT32 plength, 
                                        MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	4611      	mov	r1, r2
 80045d8:	461a      	mov	r2, r3
 80045da:	460b      	mov	r3, r1
 80045dc:	80fb      	strh	r3, [r7, #6]
 80045de:	4613      	mov	r3, r2
 80045e0:	717b      	strb	r3, [r7, #5]
  MOBLEUINT8 i;
  
  TRACE_M(TF_GENERIC,"Generic_OnOff_Status callback received for element %d \r\n", elementIndex);
 80045e2:	2100      	movs	r1, #0
 80045e4:	4826      	ldr	r0, [pc, #152]	@ (8004680 <Appli_Generic_OnOff_Status+0xb4>)
 80045e6:	f008 ff99 	bl	800d51c <TraceHeader>
 80045ea:	797b      	ldrb	r3, [r7, #5]
 80045ec:	4619      	mov	r1, r3
 80045ee:	4825      	ldr	r0, [pc, #148]	@ (8004684 <Appli_Generic_OnOff_Status+0xb8>)
 80045f0:	f024 fc3e 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8204!\r\n");
 80045f4:	2100      	movs	r1, #0
 80045f6:	4822      	ldr	r0, [pc, #136]	@ (8004680 <Appli_Generic_OnOff_Status+0xb4>)
 80045f8:	f008 ff90 	bl	800d51c <TraceHeader>
 80045fc:	4822      	ldr	r0, [pc, #136]	@ (8004688 <Appli_Generic_OnOff_Status+0xbc>)
 80045fe:	f024 fc9f 	bl	8028f40 <puts>
  
  for(i = 0; i < plength; i++)
 8004602:	2300      	movs	r3, #0
 8004604:	75fb      	strb	r3, [r7, #23]
 8004606:	e031      	b.n	800466c <Appli_Generic_OnOff_Status+0xa0>
  {
    if(i == 0)
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10c      	bne.n	8004628 <Appli_Generic_OnOff_Status+0x5c>
      TRACE_M(TF_SERIAL_CTRL,"Present OnOff value: %d\n\r", pOnOff_status[i]);
 800460e:	2100      	movs	r1, #0
 8004610:	481b      	ldr	r0, [pc, #108]	@ (8004680 <Appli_Generic_OnOff_Status+0xb4>)
 8004612:	f008 ff83 	bl	800d51c <TraceHeader>
 8004616:	7dfb      	ldrb	r3, [r7, #23]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4413      	add	r3, r2
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	4619      	mov	r1, r3
 8004620:	481a      	ldr	r0, [pc, #104]	@ (800468c <Appli_Generic_OnOff_Status+0xc0>)
 8004622:	f024 fc25 	bl	8028e70 <iprintf>
 8004626:	e01e      	b.n	8004666 <Appli_Generic_OnOff_Status+0x9a>
    else if(i == 1)
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d10c      	bne.n	8004648 <Appli_Generic_OnOff_Status+0x7c>
      TRACE_M(TF_SERIAL_CTRL,"Target OnOff value: %d\n\r", pOnOff_status[i]);
 800462e:	2100      	movs	r1, #0
 8004630:	4813      	ldr	r0, [pc, #76]	@ (8004680 <Appli_Generic_OnOff_Status+0xb4>)
 8004632:	f008 ff73 	bl	800d51c <TraceHeader>
 8004636:	7dfb      	ldrb	r3, [r7, #23]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	4619      	mov	r1, r3
 8004640:	4813      	ldr	r0, [pc, #76]	@ (8004690 <Appli_Generic_OnOff_Status+0xc4>)
 8004642:	f024 fc15 	bl	8028e70 <iprintf>
 8004646:	e00e      	b.n	8004666 <Appli_Generic_OnOff_Status+0x9a>
    else if(i == 2)
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d10b      	bne.n	8004666 <Appli_Generic_OnOff_Status+0x9a>
      TRACE_M(TF_SERIAL_CTRL,"Remaining Time value: %d\n\r", pOnOff_status[i]);
 800464e:	2100      	movs	r1, #0
 8004650:	480b      	ldr	r0, [pc, #44]	@ (8004680 <Appli_Generic_OnOff_Status+0xb4>)
 8004652:	f008 ff63 	bl	800d51c <TraceHeader>
 8004656:	7dfb      	ldrb	r3, [r7, #23]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	4619      	mov	r1, r3
 8004660:	480c      	ldr	r0, [pc, #48]	@ (8004694 <Appli_Generic_OnOff_Status+0xc8>)
 8004662:	f024 fc05 	bl	8028e70 <iprintf>
  for(i = 0; i < plength; i++)
 8004666:	7dfb      	ldrb	r3, [r7, #23]
 8004668:	3301      	adds	r3, #1
 800466a:	75fb      	strb	r3, [r7, #23]
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	429a      	cmp	r2, r3
 8004672:	d8c9      	bhi.n	8004608 <Appli_Generic_OnOff_Status+0x3c>
  }
  
  return MOBLE_RESULT_SUCCESS;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	0803052c 	.word	0x0803052c
 8004684:	0802d548 	.word	0x0802d548
 8004688:	0802d584 	.word	0x0802d584
 800468c:	0802d58c 	.word	0x0802d58c
 8004690:	0802d5a8 	.word	0x0802d5a8
 8004694:	0802d5c4 	.word	0x0802d5c4

08004698 <Appli_Generic_DefaultTransitionTime_Status>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Generic_DefaultTransitionTime_Status(MOBLEUINT8 const *pTransition_status , MOBLEUINT32 plength,MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{  
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	4611      	mov	r1, r2
 80046a4:	461a      	mov	r2, r3
 80046a6:	460b      	mov	r3, r1
 80046a8:	80fb      	strh	r3, [r7, #6]
 80046aa:	4613      	mov	r3, r2
 80046ac:	717b      	strb	r3, [r7, #5]

  TRACE_M(TF_GENERIC,"Generic_DefaultTransitionTime_Status callback received for element %d \r\n", elementIndex);
 80046ae:	2100      	movs	r1, #0
 80046b0:	4809      	ldr	r0, [pc, #36]	@ (80046d8 <Appli_Generic_DefaultTransitionTime_Status+0x40>)
 80046b2:	f008 ff33 	bl	800d51c <TraceHeader>
 80046b6:	797b      	ldrb	r3, [r7, #5]
 80046b8:	4619      	mov	r1, r3
 80046ba:	4808      	ldr	r0, [pc, #32]	@ (80046dc <Appli_Generic_DefaultTransitionTime_Status+0x44>)
 80046bc:	f024 fbd8 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8210!\r\n");
 80046c0:	2100      	movs	r1, #0
 80046c2:	4805      	ldr	r0, [pc, #20]	@ (80046d8 <Appli_Generic_DefaultTransitionTime_Status+0x40>)
 80046c4:	f008 ff2a 	bl	800d51c <TraceHeader>
 80046c8:	4805      	ldr	r0, [pc, #20]	@ (80046e0 <Appli_Generic_DefaultTransitionTime_Status+0x48>)
 80046ca:	f024 fc39 	bl	8028f40 <puts>
  
  return MOBLE_RESULT_SUCCESS;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	08030548 	.word	0x08030548
 80046dc:	0802d5e0 	.word	0x0802d5e0
 80046e0:	0802d62c 	.word	0x0802d62c

080046e4 <Appli_Generic_PowerOnOff_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_PowerOnOff_Status(MOBLEUINT8 const *powerOnOff_status,\
                 MOBLEUINT32 plength, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{  
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	4611      	mov	r1, r2
 80046f0:	461a      	mov	r2, r3
 80046f2:	460b      	mov	r3, r1
 80046f4:	80fb      	strh	r3, [r7, #6]
 80046f6:	4613      	mov	r3, r2
 80046f8:	717b      	strb	r3, [r7, #5]
  MOBLEUINT8 i;

  TRACE_M(TF_GENERIC,"Generic_PowerOnOff_Status callback received for element %d \r\n", elementIndex);
 80046fa:	2100      	movs	r1, #0
 80046fc:	4816      	ldr	r0, [pc, #88]	@ (8004758 <Appli_Generic_PowerOnOff_Status+0x74>)
 80046fe:	f008 ff0d 	bl	800d51c <TraceHeader>
 8004702:	797b      	ldrb	r3, [r7, #5]
 8004704:	4619      	mov	r1, r3
 8004706:	4815      	ldr	r0, [pc, #84]	@ (800475c <Appli_Generic_PowerOnOff_Status+0x78>)
 8004708:	f024 fbb2 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8212!\r\n");
 800470c:	2100      	movs	r1, #0
 800470e:	4812      	ldr	r0, [pc, #72]	@ (8004758 <Appli_Generic_PowerOnOff_Status+0x74>)
 8004710:	f008 ff04 	bl	800d51c <TraceHeader>
 8004714:	4812      	ldr	r0, [pc, #72]	@ (8004760 <Appli_Generic_PowerOnOff_Status+0x7c>)
 8004716:	f024 fc13 	bl	8028f40 <puts>
  
  for(i = 0; i < plength; i++)
 800471a:	2300      	movs	r3, #0
 800471c:	75fb      	strb	r3, [r7, #23]
 800471e:	e011      	b.n	8004744 <Appli_Generic_PowerOnOff_Status+0x60>
  {
    if(i == 0)
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10b      	bne.n	800473e <Appli_Generic_PowerOnOff_Status+0x5a>
      TRACE_M(TF_SERIAL_CTRL,"On Power up value: %d\n\r", 
 8004726:	2100      	movs	r1, #0
 8004728:	480b      	ldr	r0, [pc, #44]	@ (8004758 <Appli_Generic_PowerOnOff_Status+0x74>)
 800472a:	f008 fef7 	bl	800d51c <TraceHeader>
 800472e:	7dfb      	ldrb	r3, [r7, #23]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	4619      	mov	r1, r3
 8004738:	480a      	ldr	r0, [pc, #40]	@ (8004764 <Appli_Generic_PowerOnOff_Status+0x80>)
 800473a:	f024 fb99 	bl	8028e70 <iprintf>
  for(i = 0; i < plength; i++)
 800473e:	7dfb      	ldrb	r3, [r7, #23]
 8004740:	3301      	adds	r3, #1
 8004742:	75fb      	strb	r3, [r7, #23]
 8004744:	7dfb      	ldrb	r3, [r7, #23]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	d8e9      	bhi.n	8004720 <Appli_Generic_PowerOnOff_Status+0x3c>
              powerOnOff_status[i]);
  }

  return MOBLE_RESULT_SUCCESS;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	08030574 	.word	0x08030574
 800475c:	0802d634 	.word	0x0802d634
 8004760:	0802d674 	.word	0x0802d674
 8004764:	0802d67c 	.word	0x0802d67c

08004768 <Appli_Light_Lightness_Set>:
*/ 
MOBLE_RESULT Appli_Light_Lightness_Set(Light_LightnessStatus_t* pLight_LightnessParam,
                                       MOBLEUINT8 OptionalValid,
                                       MOBLEUINT16 dstPeer,
                                       MOBLEUINT8 elementIndex)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	4608      	mov	r0, r1
 8004772:	4611      	mov	r1, r2
 8004774:	461a      	mov	r2, r3
 8004776:	4603      	mov	r3, r0
 8004778:	70fb      	strb	r3, [r7, #3]
 800477a:	460b      	mov	r3, r1
 800477c:	803b      	strh	r3, [r7, #0]
 800477e:	4613      	mov	r3, r2
 8004780:	70bb      	strb	r3, [r7, #2]
  MOBLEUINT16 duty;
  static MOBLEUINT16 previousIntensity = 0;
  
  TRACE_M(TF_SERIAL_CTRL, "#824C!\n\r");
 8004782:	2100      	movs	r1, #0
 8004784:	4841      	ldr	r0, [pc, #260]	@ (800488c <Appli_Light_Lightness_Set+0x124>)
 8004786:	f008 fec9 	bl	800d51c <TraceHeader>
 800478a:	4841      	ldr	r0, [pc, #260]	@ (8004890 <Appli_Light_Lightness_Set+0x128>)
 800478c:	f024 fb70 	bl	8028e70 <iprintf>
  TRACE_M(TF_LIGHT, "Element index %d present 0x%.2x last 0x%.2x\r\n", 
 8004790:	2100      	movs	r1, #0
 8004792:	483e      	ldr	r0, [pc, #248]	@ (800488c <Appli_Light_Lightness_Set+0x124>)
 8004794:	f008 fec2 	bl	800d51c <TraceHeader>
 8004798:	78b9      	ldrb	r1, [r7, #2]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	483a      	ldr	r0, [pc, #232]	@ (8004894 <Appli_Light_Lightness_Set+0x12c>)
 80047ac:	f024 fb60 	bl	8028e70 <iprintf>
          elementIndex,
          pLight_LightnessParam->LightnessPresentValue16,
          pLight_LightnessParam->LightnessLastStatus);  
  
  ApplilightnessSet[elementIndex].PresentState16 = pLight_LightnessParam->LightnessPresentValue16;
 80047b0:	78ba      	ldrb	r2, [r7, #2]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b298      	uxth	r0, r3
 80047b8:	4937      	ldr	r1, [pc, #220]	@ (8004898 <Appli_Light_Lightness_Set+0x130>)
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	4413      	add	r3, r2
 80047c4:	440b      	add	r3, r1
 80047c6:	4602      	mov	r2, r0
 80047c8:	801a      	strh	r2, [r3, #0]
  ApplilightnessSet[elementIndex].LastLightness16 = pLight_LightnessParam->LightnessLastStatus;
 80047ca:	78ba      	ldrb	r2, [r7, #2]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80047d2:	b298      	uxth	r0, r3
 80047d4:	4930      	ldr	r1, [pc, #192]	@ (8004898 <Appli_Light_Lightness_Set+0x130>)
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	4413      	add	r3, r2
 80047e0:	440b      	add	r3, r1
 80047e2:	3302      	adds	r3, #2
 80047e4:	4602      	mov	r2, r0
 80047e6:	801a      	strh	r2, [r3, #0]

  if(pLight_LightnessParam->LightnessPresentValue16 != 0x00)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00d      	beq.n	800480e <Appli_Light_Lightness_Set+0xa6>
  {
    ApplilightnessSet[elementIndex].LastLightness16 = pLight_LightnessParam->LightnessPresentValue16;
 80047f2:	78ba      	ldrb	r2, [r7, #2]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b298      	uxth	r0, r3
 80047fa:	4927      	ldr	r1, [pc, #156]	@ (8004898 <Appli_Light_Lightness_Set+0x130>)
 80047fc:	4613      	mov	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	4413      	add	r3, r2
 8004806:	440b      	add	r3, r1
 8004808:	3302      	adds	r3, #2
 800480a:	4602      	mov	r2, r0
 800480c:	801a      	strh	r2, [r3, #0]
  }

  if(((IntensityValue > previousIntensity) && (IntensityValue <PWM_TIME_PERIOD)) ||
 800480e:	4b23      	ldr	r3, [pc, #140]	@ (800489c <Appli_Light_Lightness_Set+0x134>)
 8004810:	881a      	ldrh	r2, [r3, #0]
 8004812:	4b23      	ldr	r3, [pc, #140]	@ (80048a0 <Appli_Light_Lightness_Set+0x138>)
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d905      	bls.n	8004826 <Appli_Light_Lightness_Set+0xbe>
 800481a:	4b20      	ldr	r3, [pc, #128]	@ (800489c <Appli_Light_Lightness_Set+0x134>)
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	f647 42f5 	movw	r2, #31989	@ 0x7cf5
 8004822:	4293      	cmp	r3, r2
 8004824:	d903      	bls.n	800482e <Appli_Light_Lightness_Set+0xc6>
     IntensityValue == INTENSITY_LEVEL_ZERO)
 8004826:	4b1d      	ldr	r3, [pc, #116]	@ (800489c <Appli_Light_Lightness_Set+0x134>)
 8004828:	881b      	ldrh	r3, [r3, #0]
  if(((IntensityValue > previousIntensity) && (IntensityValue <PWM_TIME_PERIOD)) ||
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <Appli_Light_Lightness_Set+0xce>
  {
    IntensityFlag = MOBLE_FALSE;
 800482e:	4b1d      	ldr	r3, [pc, #116]	@ (80048a4 <Appli_Light_Lightness_Set+0x13c>)
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e002      	b.n	800483c <Appli_Light_Lightness_Set+0xd4>
  }
  else
  {
    IntensityFlag = MOBLE_TRUE;
 8004836:	4b1b      	ldr	r3, [pc, #108]	@ (80048a4 <Appli_Light_Lightness_Set+0x13c>)
 8004838:	2201      	movs	r2, #1
 800483a:	701a      	strb	r2, [r3, #0]
  }
  previousIntensity = IntensityValue; 
 800483c:	4b17      	ldr	r3, [pc, #92]	@ (800489c <Appli_Light_Lightness_Set+0x134>)
 800483e:	881a      	ldrh	r2, [r3, #0]
 8004840:	4b17      	ldr	r3, [pc, #92]	@ (80048a0 <Appli_Light_Lightness_Set+0x138>)
 8004842:	801a      	strh	r2, [r3, #0]
  {
    BSP_LED_Off(LED_BLUE);
  }
#endif

  duty = PwmValueMapping(ApplilightnessSet[elementIndex].PresentState16 , 0xfFFF ,0); 
 8004844:	78ba      	ldrb	r2, [r7, #2]
 8004846:	4914      	ldr	r1, [pc, #80]	@ (8004898 <Appli_Light_Lightness_Set+0x130>)
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4413      	add	r3, r2
 8004852:	440b      	add	r3, r1
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	b29b      	uxth	r3, r3
 8004858:	2200      	movs	r2, #0
 800485a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800485e:	4618      	mov	r0, r3
 8004860:	f001 ff94 	bl	800678c <PwmValueMapping>
 8004864:	4603      	mov	r3, r0
 8004866:	81fb      	strh	r3, [r7, #14]
  Appli_LightPwmValue.IntensityValue = duty;
 8004868:	4a0f      	ldr	r2, [pc, #60]	@ (80048a8 <Appli_Light_Lightness_Set+0x140>)
 800486a:	89fb      	ldrh	r3, [r7, #14]
 800486c:	8013      	strh	r3, [r2, #0]
  Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 800486e:	4b0e      	ldr	r3, [pc, #56]	@ (80048a8 <Appli_Light_Lightness_Set+0x140>)
 8004870:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004872:	2004      	movs	r0, #4
 8004874:	f000 fa7a 	bl	8004d6c <Light_UpdateLedValue>

  /* set the flag value for NVM store */
  NvmStatePowerFlag_Set(LIGHT_LIGHTNESS_NVM_FLAG, elementIndex);
 8004878:	78bb      	ldrb	r3, [r7, #2]
 800487a:	4619      	mov	r1, r3
 800487c:	2003      	movs	r0, #3
 800487e:	f009 f883 	bl	800d988 <NvmStatePowerFlag_Set>
  
  return MOBLE_RESULT_SUCCESS;
 8004882:	2300      	movs	r3, #0
  
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	08030594 	.word	0x08030594
 8004890:	0802d6b0 	.word	0x0802d6b0
 8004894:	0802d6bc 	.word	0x0802d6bc
 8004898:	20000074 	.word	0x20000074
 800489c:	2000442c 	.word	0x2000442c
 80048a0:	20004428 	.word	0x20004428
 80048a4:	2000442e 	.word	0x2000442e
 80048a8:	2000441c 	.word	0x2000441c

080048ac <Appli_Light_Lightness_Linear_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Linear_Set(Light_LightnessStatus_t* pLight_LightnessLinearParam,
                                              MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	4608      	mov	r0, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	461a      	mov	r2, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	70fb      	strb	r3, [r7, #3]
 80048be:	460b      	mov	r3, r1
 80048c0:	803b      	strh	r3, [r7, #0]
 80048c2:	4613      	mov	r3, r2
 80048c4:	70bb      	strb	r3, [r7, #2]
  ApplilightnessLinearSet[elementIndex].PresentState16 = pLight_LightnessLinearParam->LinearPresentValue16; 
 80048c6:	78bb      	ldrb	r3, [r7, #2]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	8852      	ldrh	r2, [r2, #2]
 80048cc:	b291      	uxth	r1, r2
 80048ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004900 <Appli_Light_Lightness_Linear_Set+0x54>)
 80048d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  
  TRACE_M(TF_LIGHT,"Light_LightnessLinear_Set callback received for elementIndex %d \r\n", elementIndex);
 80048d4:	2100      	movs	r1, #0
 80048d6:	480b      	ldr	r0, [pc, #44]	@ (8004904 <Appli_Light_Lightness_Linear_Set+0x58>)
 80048d8:	f008 fe20 	bl	800d51c <TraceHeader>
 80048dc:	78bb      	ldrb	r3, [r7, #2]
 80048de:	4619      	mov	r1, r3
 80048e0:	4809      	ldr	r0, [pc, #36]	@ (8004908 <Appli_Light_Lightness_Linear_Set+0x5c>)
 80048e2:	f024 fac5 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8250!\n\r");
 80048e6:	2100      	movs	r1, #0
 80048e8:	4806      	ldr	r0, [pc, #24]	@ (8004904 <Appli_Light_Lightness_Linear_Set+0x58>)
 80048ea:	f008 fe17 	bl	800d51c <TraceHeader>
 80048ee:	4807      	ldr	r0, [pc, #28]	@ (800490c <Appli_Light_Lightness_Linear_Set+0x60>)
 80048f0:	f024 fabe 	bl	8028e70 <iprintf>
  
  return MOBLE_RESULT_SUCCESS;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20004418 	.word	0x20004418
 8004904:	080305b0 	.word	0x080305b0
 8004908:	0802d6ec 	.word	0x0802d6ec
 800490c:	0802d730 	.word	0x0802d730

08004910 <Appli_Light_Lightness_Default_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Default_Set(Light_LightnessDefaultParam_t* pLight_LightnessDefaultParam,
                                               MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	4608      	mov	r0, r1
 800491a:	4611      	mov	r1, r2
 800491c:	461a      	mov	r2, r3
 800491e:	4603      	mov	r3, r0
 8004920:	70fb      	strb	r3, [r7, #3]
 8004922:	460b      	mov	r3, r1
 8004924:	803b      	strh	r3, [r7, #0]
 8004926:	4613      	mov	r3, r2
 8004928:	70bb      	strb	r3, [r7, #2]
  if(pLight_LightnessDefaultParam->LightnessDefaultStatus > 0)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <Appli_Light_Lightness_Default_Set+0x2c>
  {
    BSP_LED_On(LED_BLUE);
 8004934:	2000      	movs	r0, #0
 8004936:	f003 f8cf 	bl	8007ad8 <BSP_LED_On>
 800493a:	e002      	b.n	8004942 <Appli_Light_Lightness_Default_Set+0x32>
  }
  else
  {
    BSP_LED_Off(LED_BLUE);
 800493c:	2000      	movs	r0, #0
 800493e:	f003 f8e5 	bl	8007b0c <BSP_LED_Off>
  }
  
  ApplilightnessSet[elementIndex].LightnessDefault = 
 8004942:	78ba      	ldrb	r2, [r7, #2]
    pLight_LightnessDefaultParam->LightnessDefaultStatus;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b298      	uxth	r0, r3
  ApplilightnessSet[elementIndex].LightnessDefault = 
 800494a:	4912      	ldr	r1, [pc, #72]	@ (8004994 <Appli_Light_Lightness_Default_Set+0x84>)
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	4413      	add	r3, r2
 8004956:	440b      	add	r3, r1
 8004958:	3304      	adds	r3, #4
 800495a:	4602      	mov	r2, r0
 800495c:	801a      	strh	r2, [r3, #0]
  
  TRACE_M(TF_SERIAL_CTRL,"#8259! \r\n");
 800495e:	2100      	movs	r1, #0
 8004960:	480d      	ldr	r0, [pc, #52]	@ (8004998 <Appli_Light_Lightness_Default_Set+0x88>)
 8004962:	f008 fddb 	bl	800d51c <TraceHeader>
 8004966:	480d      	ldr	r0, [pc, #52]	@ (800499c <Appli_Light_Lightness_Default_Set+0x8c>)
 8004968:	f024 faea 	bl	8028f40 <puts>
  TRACE_M(TF_LIGHT,"Appli_Light_Lightness_Default_Set callback received for elementIndex %d \r\n", elementIndex);
 800496c:	2100      	movs	r1, #0
 800496e:	480a      	ldr	r0, [pc, #40]	@ (8004998 <Appli_Light_Lightness_Default_Set+0x88>)
 8004970:	f008 fdd4 	bl	800d51c <TraceHeader>
 8004974:	78bb      	ldrb	r3, [r7, #2]
 8004976:	4619      	mov	r1, r3
 8004978:	4809      	ldr	r0, [pc, #36]	@ (80049a0 <Appli_Light_Lightness_Default_Set+0x90>)
 800497a:	f024 fa79 	bl	8028e70 <iprintf>
	
  NvmStatePowerFlag_Set(LIGHT_LIGHTNESS_NVM_FLAG,elementIndex);
 800497e:	78bb      	ldrb	r3, [r7, #2]
 8004980:	4619      	mov	r1, r3
 8004982:	2003      	movs	r0, #3
 8004984:	f009 f800 	bl	800d988 <NvmStatePowerFlag_Set>
   
  return MOBLE_RESULT_SUCCESS;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000074 	.word	0x20000074
 8004998:	080305d4 	.word	0x080305d4
 800499c:	0802d73c 	.word	0x0802d73c
 80049a0:	0802d748 	.word	0x0802d748

080049a4 <Appli_Light_Lightness_Last_Set>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Last_Set(Light_LightnessStatus_t* pLight_LightnessParam,                                             
                                              MOBLEUINT8 elementIndex)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
  ApplilightnessSet[elementIndex].LastLightness16 = pLight_LightnessParam->LightnessLastStatus;
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80049b8:	b298      	uxth	r0, r3
 80049ba:	4914      	ldr	r1, [pc, #80]	@ (8004a0c <Appli_Light_Lightness_Last_Set+0x68>)
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	4413      	add	r3, r2
 80049c6:	440b      	add	r3, r1
 80049c8:	3302      	adds	r3, #2
 80049ca:	4602      	mov	r2, r0
 80049cc:	801a      	strh	r2, [r3, #0]
  
  TRACE_M(TF_SERIAL_CTRL,"#8259!\n\r");
 80049ce:	2100      	movs	r1, #0
 80049d0:	480f      	ldr	r0, [pc, #60]	@ (8004a10 <Appli_Light_Lightness_Last_Set+0x6c>)
 80049d2:	f008 fda3 	bl	800d51c <TraceHeader>
 80049d6:	480f      	ldr	r0, [pc, #60]	@ (8004a14 <Appli_Light_Lightness_Last_Set+0x70>)
 80049d8:	f024 fa4a 	bl	8028e70 <iprintf>
  TRACE_M(TF_LIGHT,
 80049dc:	2100      	movs	r1, #0
 80049de:	480c      	ldr	r0, [pc, #48]	@ (8004a10 <Appli_Light_Lightness_Last_Set+0x6c>)
 80049e0:	f008 fd9c 	bl	800d51c <TraceHeader>
 80049e4:	78fa      	ldrb	r2, [r7, #3]
 80049e6:	4909      	ldr	r1, [pc, #36]	@ (8004a0c <Appli_Light_Lightness_Last_Set+0x68>)
 80049e8:	4613      	mov	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	4413      	add	r3, r2
 80049f2:	440b      	add	r3, r1
 80049f4:	3302      	adds	r3, #2
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	4619      	mov	r1, r3
 80049fc:	4806      	ldr	r0, [pc, #24]	@ (8004a18 <Appli_Light_Lightness_Last_Set+0x74>)
 80049fe:	f024 fa37 	bl	8028e70 <iprintf>
          "Appli_Light_Lightness_Last_Set Light Last Value 0x%.2x \r\n", 
          ApplilightnessSet[elementIndex].LastLightness16);
   
  return MOBLE_RESULT_SUCCESS;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20000074 	.word	0x20000074
 8004a10:	080305f8 	.word	0x080305f8
 8004a14:	0802d794 	.word	0x0802d794
 8004a18:	0802d7a0 	.word	0x0802d7a0

08004a1c <Appli_Light_Lightness_Range_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Range_Set(Light_LightnessRangeParam_t* pLight_LightnessRangeParam,
                                             MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	4608      	mov	r0, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	70fb      	strb	r3, [r7, #3]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	803b      	strh	r3, [r7, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	70bb      	strb	r3, [r7, #2]
  ApplilightnessSet[elementIndex].StatusCode = pLight_LightnessRangeParam->StatusCode;
 8004a36:	78ba      	ldrb	r2, [r7, #2]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	7818      	ldrb	r0, [r3, #0]
 8004a3c:	491e      	ldr	r1, [pc, #120]	@ (8004ab8 <Appli_Light_Lightness_Range_Set+0x9c>)
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	4413      	add	r3, r2
 8004a48:	440b      	add	r3, r1
 8004a4a:	3306      	adds	r3, #6
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	701a      	strb	r2, [r3, #0]
  ApplilightnessSet[elementIndex].RangeMin = pLight_LightnessRangeParam->MinRangeStatus; 
 8004a50:	78ba      	ldrb	r2, [r7, #2]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004a58:	b298      	uxth	r0, r3
 8004a5a:	4917      	ldr	r1, [pc, #92]	@ (8004ab8 <Appli_Light_Lightness_Range_Set+0x9c>)
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	4413      	add	r3, r2
 8004a66:	440b      	add	r3, r1
 8004a68:	4602      	mov	r2, r0
 8004a6a:	f8a3 2007 	strh.w	r2, [r3, #7]
  ApplilightnessSet[elementIndex].RangeMax = pLight_LightnessRangeParam->MaxRangeStatus;
 8004a6e:	78ba      	ldrb	r2, [r7, #2]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004a76:	b298      	uxth	r0, r3
 8004a78:	490f      	ldr	r1, [pc, #60]	@ (8004ab8 <Appli_Light_Lightness_Range_Set+0x9c>)
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4413      	add	r3, r2
 8004a84:	440b      	add	r3, r1
 8004a86:	3308      	adds	r3, #8
 8004a88:	4602      	mov	r2, r0
 8004a8a:	f8a3 2001 	strh.w	r2, [r3, #1]
  
  TRACE_M(TF_SERIAL_CTRL,"#825B! \n\r");
 8004a8e:	2100      	movs	r1, #0
 8004a90:	480a      	ldr	r0, [pc, #40]	@ (8004abc <Appli_Light_Lightness_Range_Set+0xa0>)
 8004a92:	f008 fd43 	bl	800d51c <TraceHeader>
 8004a96:	480a      	ldr	r0, [pc, #40]	@ (8004ac0 <Appli_Light_Lightness_Range_Set+0xa4>)
 8004a98:	f024 f9ea 	bl	8028e70 <iprintf>
  TRACE_M(TF_LIGHT,"Appli_Light_Lightness_Range_Set callback received for elementIndex %d \r\n", elementIndex);
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4807      	ldr	r0, [pc, #28]	@ (8004abc <Appli_Light_Lightness_Range_Set+0xa0>)
 8004aa0:	f008 fd3c 	bl	800d51c <TraceHeader>
 8004aa4:	78bb      	ldrb	r3, [r7, #2]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4806      	ldr	r0, [pc, #24]	@ (8004ac4 <Appli_Light_Lightness_Range_Set+0xa8>)
 8004aaa:	f024 f9e1 	bl	8028e70 <iprintf>
  
  return MOBLE_RESULT_SUCCESS;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000074 	.word	0x20000074
 8004abc:	08030618 	.word	0x08030618
 8004ac0:	0802d7dc 	.word	0x0802d7dc
 8004ac4:	0802d7e8 	.word	0x0802d7e8

08004ac8 <Appli_Light_GetLightnessStatus>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/  
MOBLE_RESULT Appli_Light_GetLightnessStatus(MOBLEUINT8* lLightnessState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	807b      	strh	r3, [r7, #2]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	707b      	strb	r3, [r7, #1]
  *(lLightnessState) = ApplilightnessSet[elementIndex].PresentState16;
 8004ad8:	787a      	ldrb	r2, [r7, #1]
 8004ada:	4921      	ldr	r1, [pc, #132]	@ (8004b60 <Appli_Light_GetLightnessStatus+0x98>)
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	4413      	add	r3, r2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+1) = ApplilightnessSet[elementIndex].PresentState16 >> 8;
 8004af2:	787a      	ldrb	r2, [r7, #1]
 8004af4:	491a      	ldr	r1, [pc, #104]	@ (8004b60 <Appli_Light_GetLightnessStatus+0x98>)
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	4413      	add	r3, r2
 8004b00:	440b      	add	r3, r1
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	0a1b      	lsrs	r3, r3, #8
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+2) = ApplilightnessSet[elementIndex].LastLightness16 ;
 8004b12:	787a      	ldrb	r2, [r7, #1]
 8004b14:	4912      	ldr	r1, [pc, #72]	@ (8004b60 <Appli_Light_GetLightnessStatus+0x98>)
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	4413      	add	r3, r2
 8004b20:	440b      	add	r3, r1
 8004b22:	3302      	adds	r3, #2
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3302      	adds	r3, #2
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+3) = ApplilightnessSet[elementIndex].LastLightness16 >> 8;
 8004b30:	787a      	ldrb	r2, [r7, #1]
 8004b32:	490b      	ldr	r1, [pc, #44]	@ (8004b60 <Appli_Light_GetLightnessStatus+0x98>)
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	4413      	add	r3, r2
 8004b3e:	440b      	add	r3, r1
 8004b40:	3302      	adds	r3, #2
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3303      	adds	r3, #3
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]
    
  return MOBLE_RESULT_SUCCESS;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	20000074 	.word	0x20000074

08004b64 <Appli_Light_GetLightnessLinearStatus>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_GetLightnessLinearStatus(MOBLEUINT8* lLightnessState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	807b      	strh	r3, [r7, #2]
 8004b70:	4613      	mov	r3, r2
 8004b72:	707b      	strb	r3, [r7, #1]
  *(lLightnessState) = ApplilightnessLinearSet[elementIndex].PresentState16;
 8004b74:	787b      	ldrb	r3, [r7, #1]
 8004b76:	4a1b      	ldr	r2, [pc, #108]	@ (8004be4 <Appli_Light_GetLightnessLinearStatus+0x80>)
 8004b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+1) = ApplilightnessLinearSet[elementIndex].PresentState16 >> 8;
 8004b82:	787b      	ldrb	r3, [r7, #1]
 8004b84:	4a17      	ldr	r2, [pc, #92]	@ (8004be4 <Appli_Light_GetLightnessLinearStatus+0x80>)
 8004b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b8a:	0a1b      	lsrs	r3, r3, #8
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3301      	adds	r3, #1
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+2) = ApplilightnessSet[elementIndex].LastLightness16 ;
 8004b96:	787a      	ldrb	r2, [r7, #1]
 8004b98:	4913      	ldr	r1, [pc, #76]	@ (8004be8 <Appli_Light_GetLightnessLinearStatus+0x84>)
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	4413      	add	r3, r2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3302      	adds	r3, #2
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+3) = ApplilightnessSet[elementIndex].LastLightness16 >> 8;
 8004bb4:	787a      	ldrb	r2, [r7, #1]
 8004bb6:	490c      	ldr	r1, [pc, #48]	@ (8004be8 <Appli_Light_GetLightnessLinearStatus+0x84>)
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	4413      	add	r3, r2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	3302      	adds	r3, #2
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3303      	adds	r3, #3
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]
    
  return MOBLE_RESULT_SUCCESS;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	20004418 	.word	0x20004418
 8004be8:	20000074 	.word	0x20000074

08004bec <Appli_Light_GetLightnessDefaultStatus>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_GetLightnessDefaultStatus(MOBLEUINT8* lDefaultState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	807b      	strh	r3, [r7, #2]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	707b      	strb	r3, [r7, #1]
  *(lDefaultState) = ApplilightnessSet[elementIndex].LightnessDefault;
 8004bfc:	787a      	ldrb	r2, [r7, #1]
 8004bfe:	4912      	ldr	r1, [pc, #72]	@ (8004c48 <Appli_Light_GetLightnessDefaultStatus+0x5c>)
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4413      	add	r3, r2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	701a      	strb	r2, [r3, #0]
  *(lDefaultState+1) = ApplilightnessSet[elementIndex].LightnessDefault >> 8;
 8004c18:	787a      	ldrb	r2, [r7, #1]
 8004c1a:	490b      	ldr	r1, [pc, #44]	@ (8004c48 <Appli_Light_GetLightnessDefaultStatus+0x5c>)
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	4413      	add	r3, r2
 8004c26:	440b      	add	r3, r1
 8004c28:	3304      	adds	r3, #4
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	0a1b      	lsrs	r3, r3, #8
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3301      	adds	r3, #1
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	20000074 	.word	0x20000074

08004c4c <Appli_Light_GetLightnessLastStatus>:
* @param  lLastState: Pointer to the status message
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_GetLightnessLastStatus(MOBLEUINT8* lLastState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	807b      	strh	r3, [r7, #2]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	707b      	strb	r3, [r7, #1]
  *(lLastState) = ApplilightnessSet[elementIndex].LastLightness16;
 8004c5c:	787a      	ldrb	r2, [r7, #1]
 8004c5e:	4912      	ldr	r1, [pc, #72]	@ (8004ca8 <Appli_Light_GetLightnessLastStatus+0x5c>)
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	4413      	add	r3, r2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	701a      	strb	r2, [r3, #0]
  *(lLastState+1) = ApplilightnessSet[elementIndex].LastLightness16 >> 8;
 8004c78:	787a      	ldrb	r2, [r7, #1]
 8004c7a:	490b      	ldr	r1, [pc, #44]	@ (8004ca8 <Appli_Light_GetLightnessLastStatus+0x5c>)
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	4413      	add	r3, r2
 8004c86:	440b      	add	r3, r1
 8004c88:	3302      	adds	r3, #2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3301      	adds	r3, #1
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]

  return MOBLE_RESULT_SUCCESS;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	20000074 	.word	0x20000074

08004cac <Appli_Light_GetLightnessRangeStatus>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_GetLightnessRangeStatus(MOBLEUINT8* lRangeState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	807b      	strh	r3, [r7, #2]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	707b      	strb	r3, [r7, #1]
  *(lRangeState) = ApplilightnessSet[elementIndex].StatusCode;
 8004cbc:	787a      	ldrb	r2, [r7, #1]
 8004cbe:	492a      	ldr	r1, [pc, #168]	@ (8004d68 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	4413      	add	r3, r2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3306      	adds	r3, #6
 8004cce:	781a      	ldrb	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	701a      	strb	r2, [r3, #0]
  *(lRangeState+1) = ApplilightnessSet[elementIndex].RangeMin;
 8004cd4:	787a      	ldrb	r2, [r7, #1]
 8004cd6:	4924      	ldr	r1, [pc, #144]	@ (8004d68 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	4413      	add	r3, r2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	3301      	adds	r3, #1
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]
  *(lRangeState+2) = ApplilightnessSet[elementIndex].RangeMin >> 8;
 8004cf2:	787a      	ldrb	r2, [r7, #1]
 8004cf4:	491c      	ldr	r1, [pc, #112]	@ (8004d68 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	4413      	add	r3, r2
 8004d00:	440b      	add	r3, r1
 8004d02:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	0a1b      	lsrs	r3, r3, #8
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3302      	adds	r3, #2
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]
  *(lRangeState+3) = ApplilightnessSet[elementIndex].RangeMax;
 8004d14:	787a      	ldrb	r2, [r7, #1]
 8004d16:	4914      	ldr	r1, [pc, #80]	@ (8004d68 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	4413      	add	r3, r2
 8004d22:	440b      	add	r3, r1
 8004d24:	3308      	adds	r3, #8
 8004d26:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3303      	adds	r3, #3
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]
  *(lRangeState+4) = ApplilightnessSet[elementIndex].RangeMax >> 8;
 8004d34:	787a      	ldrb	r2, [r7, #1]
 8004d36:	490c      	ldr	r1, [pc, #48]	@ (8004d68 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004d38:	4613      	mov	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	4413      	add	r3, r2
 8004d42:	440b      	add	r3, r1
 8004d44:	3308      	adds	r3, #8
 8004d46:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	0a1b      	lsrs	r3, r3, #8
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3304      	adds	r3, #4
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20000074 	.word	0x20000074

08004d6c <Light_UpdateLedValue>:
* @brief  Function to set the values for PWM for RGB board.
* @param  state: decided the state of PWM according to the condition.
* @retval void
*/
void Light_UpdateLedValue(MOBLEUINT8 state ,Appli_LightPwmValue_t light_state)
{
 8004d6c:	b490      	push	{r4, r7}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4604      	mov	r4, r0
 8004d74:	4638      	mov	r0, r7
 8004d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004d7a:	4623      	mov	r3, r4
 8004d7c:	73fb      	strb	r3, [r7, #15]
    Modify_PWM(RED_LED, light_state.PwmRedValue); 
    Modify_PWM(GREEN_LED, light_state.PwmGreenValue); 
    Modify_PWM(BLUE_LED, light_state.PwmBlueValue); 
#endif    
  } 
}
 8004d7e:	bf00      	nop
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc90      	pop	{r4, r7}
 8004d86:	4770      	bx	lr

08004d88 <Appli_Light_Lightness_Status>:
* @param  pLength: length of data 
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Status(MOBLEUINT8 const *pLightness_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	4611      	mov	r1, r2
 8004d94:	461a      	mov	r2, r3
 8004d96:	460b      	mov	r3, r1
 8004d98:	80fb      	strh	r3, [r7, #6]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_Lightness_Status callback received for element %d \r\n", elementIndex);
 8004da2:	2100      	movs	r1, #0
 8004da4:	483a      	ldr	r0, [pc, #232]	@ (8004e90 <Appli_Light_Lightness_Status+0x108>)
 8004da6:	f008 fbb9 	bl	800d51c <TraceHeader>
 8004daa:	797b      	ldrb	r3, [r7, #5]
 8004dac:	4619      	mov	r1, r3
 8004dae:	4839      	ldr	r0, [pc, #228]	@ (8004e94 <Appli_Light_Lightness_Status+0x10c>)
 8004db0:	f024 f85e 	bl	8028e70 <iprintf>
    TRACE_M(TF_SERIAL_CTRL,"#824E!\r\n");
 8004db4:	2100      	movs	r1, #0
 8004db6:	4836      	ldr	r0, [pc, #216]	@ (8004e90 <Appli_Light_Lightness_Status+0x108>)
 8004db8:	f008 fbb0 	bl	800d51c <TraceHeader>
 8004dbc:	4836      	ldr	r0, [pc, #216]	@ (8004e98 <Appli_Light_Lightness_Status+0x110>)
 8004dbe:	f024 f8bf 	bl	8028f40 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	e05a      	b.n	8004e7e <Appli_Light_Lightness_Status+0xf6>
  {
    if((i == 0) || (i == 2))
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <Appli_Light_Lightness_Status+0x4c>
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d105      	bne.n	8004de0 <Appli_Light_Lightness_Status+0x58>
    {
      value = pLightness_status[i];
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	4413      	add	r3, r2
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	827b      	strh	r3, [r7, #18]
 8004dde:	e04b      	b.n	8004e78 <Appli_Light_Lightness_Status+0xf0>
    }
    else if(i == 1)
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d118      	bne.n	8004e18 <Appli_Light_Lightness_Status+0x90>
    {
      TRACE_M(TF_LIGHT,"Present Lightness: 0x%x (%d)\r\n",
 8004de6:	2100      	movs	r1, #0
 8004de8:	4829      	ldr	r0, [pc, #164]	@ (8004e90 <Appli_Light_Lightness_Status+0x108>)
 8004dea:	f008 fb97 	bl	800d51c <TraceHeader>
 8004dee:	8a7a      	ldrh	r2, [r7, #18]
 8004df0:	68f9      	ldr	r1, [r7, #12]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	440b      	add	r3, r1
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	ea42 0003 	orr.w	r0, r2, r3
 8004dfe:	8a7a      	ldrh	r2, [r7, #18]
 8004e00:	68f9      	ldr	r1, [r7, #12]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	440b      	add	r3, r1
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	021b      	lsls	r3, r3, #8
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4601      	mov	r1, r0
 8004e10:	4822      	ldr	r0, [pc, #136]	@ (8004e9c <Appli_Light_Lightness_Status+0x114>)
 8004e12:	f024 f82d 	bl	8028e70 <iprintf>
 8004e16:	e02f      	b.n	8004e78 <Appli_Light_Lightness_Status+0xf0>
              value | pLightness_status[i] << 8,
              value | pLightness_status[i] << 8);
    }
    else if(i == 3)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d118      	bne.n	8004e50 <Appli_Light_Lightness_Status+0xc8>
    {
      TRACE_M(TF_LIGHT,"Target Lightness: 0x%x (%d)\r\n",
 8004e1e:	2100      	movs	r1, #0
 8004e20:	481b      	ldr	r0, [pc, #108]	@ (8004e90 <Appli_Light_Lightness_Status+0x108>)
 8004e22:	f008 fb7b 	bl	800d51c <TraceHeader>
 8004e26:	8a7a      	ldrh	r2, [r7, #18]
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	440b      	add	r3, r1
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	ea42 0003 	orr.w	r0, r2, r3
 8004e36:	8a7a      	ldrh	r2, [r7, #18]
 8004e38:	68f9      	ldr	r1, [r7, #12]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	440b      	add	r3, r1
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	021b      	lsls	r3, r3, #8
 8004e42:	4313      	orrs	r3, r2
 8004e44:	461a      	mov	r2, r3
 8004e46:	4601      	mov	r1, r0
 8004e48:	4815      	ldr	r0, [pc, #84]	@ (8004ea0 <Appli_Light_Lightness_Status+0x118>)
 8004e4a:	f024 f811 	bl	8028e70 <iprintf>
 8004e4e:	e013      	b.n	8004e78 <Appli_Light_Lightness_Status+0xf0>
              value | pLightness_status[i] << 8,
              value | pLightness_status[i] << 8);
    }
    else if(i == 4)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d110      	bne.n	8004e78 <Appli_Light_Lightness_Status+0xf0>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\r\n",
 8004e56:	2100      	movs	r1, #0
 8004e58:	480d      	ldr	r0, [pc, #52]	@ (8004e90 <Appli_Light_Lightness_Status+0x108>)
 8004e5a:	f008 fb5f 	bl	800d51c <TraceHeader>
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	4413      	add	r3, r2
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	4619      	mov	r1, r3
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	480c      	ldr	r0, [pc, #48]	@ (8004ea4 <Appli_Light_Lightness_Status+0x11c>)
 8004e74:	f023 fffc 	bl	8028e70 <iprintf>
  for(i = 0; i < pLength; i++)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d3a0      	bcc.n	8004dc8 <Appli_Light_Lightness_Status+0x40>
              pLightness_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	08030638 	.word	0x08030638
 8004e94:	0802d850 	.word	0x0802d850
 8004e98:	0802d88c 	.word	0x0802d88c
 8004e9c:	0802d894 	.word	0x0802d894
 8004ea0:	0802d8b4 	.word	0x0802d8b4
 8004ea4:	0802d8d4 	.word	0x0802d8d4

08004ea8 <Appli_Light_Lightness_Linear_Status>:
* @param  pLength: length of data
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_Lightness_Linear_Status(MOBLEUINT8 const *pLightnessLinear_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	80fb      	strh	r3, [r7, #6]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_Lightness_Linear_Status callback received for element %d \r\n", elementIndex);
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	483a      	ldr	r0, [pc, #232]	@ (8004fb0 <Appli_Light_Lightness_Linear_Status+0x108>)
 8004ec6:	f008 fb29 	bl	800d51c <TraceHeader>
 8004eca:	797b      	ldrb	r3, [r7, #5]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4839      	ldr	r0, [pc, #228]	@ (8004fb4 <Appli_Light_Lightness_Linear_Status+0x10c>)
 8004ed0:	f023 ffce 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8252!\r\n");
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	4836      	ldr	r0, [pc, #216]	@ (8004fb0 <Appli_Light_Lightness_Linear_Status+0x108>)
 8004ed8:	f008 fb20 	bl	800d51c <TraceHeader>
 8004edc:	4836      	ldr	r0, [pc, #216]	@ (8004fb8 <Appli_Light_Lightness_Linear_Status+0x110>)
 8004ede:	f024 f82f 	bl	8028f40 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	e05a      	b.n	8004f9e <Appli_Light_Lightness_Linear_Status+0xf6>
  {
    if((i == 0) || (i == 2))
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <Appli_Light_Lightness_Linear_Status+0x4c>
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d105      	bne.n	8004f00 <Appli_Light_Lightness_Linear_Status+0x58>
    {
      value = pLightnessLinear_status[i];
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4413      	add	r3, r2
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	827b      	strh	r3, [r7, #18]
 8004efe:	e04b      	b.n	8004f98 <Appli_Light_Lightness_Linear_Status+0xf0>
    }
    else if(i == 1)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d118      	bne.n	8004f38 <Appli_Light_Lightness_Linear_Status+0x90>
    {
      TRACE_M(TF_LIGHT,"Present Lightness: 0x%x (%d)\r\n",
 8004f06:	2100      	movs	r1, #0
 8004f08:	4829      	ldr	r0, [pc, #164]	@ (8004fb0 <Appli_Light_Lightness_Linear_Status+0x108>)
 8004f0a:	f008 fb07 	bl	800d51c <TraceHeader>
 8004f0e:	8a7a      	ldrh	r2, [r7, #18]
 8004f10:	68f9      	ldr	r1, [r7, #12]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	440b      	add	r3, r1
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	ea42 0003 	orr.w	r0, r2, r3
 8004f1e:	8a7a      	ldrh	r2, [r7, #18]
 8004f20:	68f9      	ldr	r1, [r7, #12]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	440b      	add	r3, r1
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	4601      	mov	r1, r0
 8004f30:	4822      	ldr	r0, [pc, #136]	@ (8004fbc <Appli_Light_Lightness_Linear_Status+0x114>)
 8004f32:	f023 ff9d 	bl	8028e70 <iprintf>
 8004f36:	e02f      	b.n	8004f98 <Appli_Light_Lightness_Linear_Status+0xf0>
              value | pLightnessLinear_status[i] << 8,
              value | pLightnessLinear_status[i] << 8);
    }
    else if(i == 3)
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d118      	bne.n	8004f70 <Appli_Light_Lightness_Linear_Status+0xc8>
    {
      TRACE_M(TF_LIGHT,"Target Lightness: 0x%x (%d)\r\n",
 8004f3e:	2100      	movs	r1, #0
 8004f40:	481b      	ldr	r0, [pc, #108]	@ (8004fb0 <Appli_Light_Lightness_Linear_Status+0x108>)
 8004f42:	f008 faeb 	bl	800d51c <TraceHeader>
 8004f46:	8a7a      	ldrh	r2, [r7, #18]
 8004f48:	68f9      	ldr	r1, [r7, #12]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	440b      	add	r3, r1
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	ea42 0003 	orr.w	r0, r2, r3
 8004f56:	8a7a      	ldrh	r2, [r7, #18]
 8004f58:	68f9      	ldr	r1, [r7, #12]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	440b      	add	r3, r1
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	021b      	lsls	r3, r3, #8
 8004f62:	4313      	orrs	r3, r2
 8004f64:	461a      	mov	r2, r3
 8004f66:	4601      	mov	r1, r0
 8004f68:	4815      	ldr	r0, [pc, #84]	@ (8004fc0 <Appli_Light_Lightness_Linear_Status+0x118>)
 8004f6a:	f023 ff81 	bl	8028e70 <iprintf>
 8004f6e:	e013      	b.n	8004f98 <Appli_Light_Lightness_Linear_Status+0xf0>
              value | pLightnessLinear_status[i] << 8,
              value | pLightnessLinear_status[i] << 8);
    }
    else if(i == 4)
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d110      	bne.n	8004f98 <Appli_Light_Lightness_Linear_Status+0xf0>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\r\n",
 8004f76:	2100      	movs	r1, #0
 8004f78:	480d      	ldr	r0, [pc, #52]	@ (8004fb0 <Appli_Light_Lightness_Linear_Status+0x108>)
 8004f7a:	f008 facf 	bl	800d51c <TraceHeader>
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	4413      	add	r3, r2
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	4619      	mov	r1, r3
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	480c      	ldr	r0, [pc, #48]	@ (8004fc4 <Appli_Light_Lightness_Linear_Status+0x11c>)
 8004f94:	f023 ff6c 	bl	8028e70 <iprintf>
  for(i = 0; i < pLength; i++)
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d3a0      	bcc.n	8004ee8 <Appli_Light_Lightness_Linear_Status+0x40>
              pLightnessLinear_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	08030658 	.word	0x08030658
 8004fb4:	0802d8f0 	.word	0x0802d8f0
 8004fb8:	0802d934 	.word	0x0802d934
 8004fbc:	0802d894 	.word	0x0802d894
 8004fc0:	0802d8b4 	.word	0x0802d8b4
 8004fc4:	0802d8d4 	.word	0x0802d8d4

08004fc8 <Appli_Light_Lightness_Last_Status>:
*/
MOBLE_RESULT Appli_Light_Lightness_Last_Status(MOBLEUINT8 const *pLightnessLast_status, 
                                               MOBLEUINT32 pLength, 
                                               MOBLEUINT16 dstPeer, 
                                               MOBLEUINT8 elementIndex)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	80fb      	strh	r3, [r7, #6]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value;
#endif
 
  TRACE_M(TF_LIGHT,"Light_Lightness_Last_Status callback received for element %d \r\n", elementIndex);
 8004fde:	2100      	movs	r1, #0
 8004fe0:	4820      	ldr	r0, [pc, #128]	@ (8005064 <Appli_Light_Lightness_Last_Status+0x9c>)
 8004fe2:	f008 fa9b 	bl	800d51c <TraceHeader>
 8004fe6:	797b      	ldrb	r3, [r7, #5]
 8004fe8:	4619      	mov	r1, r3
 8004fea:	481f      	ldr	r0, [pc, #124]	@ (8005068 <Appli_Light_Lightness_Last_Status+0xa0>)
 8004fec:	f023 ff40 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8256!\r\n");
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	481c      	ldr	r0, [pc, #112]	@ (8005064 <Appli_Light_Lightness_Last_Status+0x9c>)
 8004ff4:	f008 fa92 	bl	800d51c <TraceHeader>
 8004ff8:	481c      	ldr	r0, [pc, #112]	@ (800506c <Appli_Light_Lightness_Last_Status+0xa4>)
 8004ffa:	f023 ffa1 	bl	8028f40 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e026      	b.n	8005052 <Appli_Light_Lightness_Last_Status+0x8a>
  {
    if(i == 0)
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d105      	bne.n	8005016 <Appli_Light_Lightness_Last_Status+0x4e>
    {
      value = pLightnessLast_status[i];
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	4413      	add	r3, r2
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	827b      	strh	r3, [r7, #18]
 8005014:	e01a      	b.n	800504c <Appli_Light_Lightness_Last_Status+0x84>
    }
    else if(i == 1)
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d117      	bne.n	800504c <Appli_Light_Lightness_Last_Status+0x84>
    {
      TRACE_M(TF_LIGHT,"Lightness Last: 0x%x (%d)\r\n",
 800501c:	2100      	movs	r1, #0
 800501e:	4811      	ldr	r0, [pc, #68]	@ (8005064 <Appli_Light_Lightness_Last_Status+0x9c>)
 8005020:	f008 fa7c 	bl	800d51c <TraceHeader>
 8005024:	8a7a      	ldrh	r2, [r7, #18]
 8005026:	68f9      	ldr	r1, [r7, #12]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	440b      	add	r3, r1
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	ea42 0003 	orr.w	r0, r2, r3
 8005034:	8a7a      	ldrh	r2, [r7, #18]
 8005036:	68f9      	ldr	r1, [r7, #12]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	440b      	add	r3, r1
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	4313      	orrs	r3, r2
 8005042:	461a      	mov	r2, r3
 8005044:	4601      	mov	r1, r0
 8005046:	480a      	ldr	r0, [pc, #40]	@ (8005070 <Appli_Light_Lightness_Last_Status+0xa8>)
 8005048:	f023 ff12 	bl	8028e70 <iprintf>
  for(i = 0; i < pLength; i++)
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	3301      	adds	r3, #1
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	429a      	cmp	r2, r3
 8005058:	d3d4      	bcc.n	8005004 <Appli_Light_Lightness_Last_Status+0x3c>
              value | pLightnessLast_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	0803067c 	.word	0x0803067c
 8005068:	0802d93c 	.word	0x0802d93c
 800506c:	0802d97c 	.word	0x0802d97c
 8005070:	0802d984 	.word	0x0802d984

08005074 <Appli_Light_Lightness_Default_Status>:
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_Lightness_Default_Status(MOBLEUINT8 const *pLightnessDefault_status, MOBLEUINT32 pLength
                                                  , MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	4611      	mov	r1, r2
 8005080:	461a      	mov	r2, r3
 8005082:	460b      	mov	r3, r1
 8005084:	80fb      	strh	r3, [r7, #6]
 8005086:	4613      	mov	r3, r2
 8005088:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value;
#endif
  
  TRACE_M(TF_LIGHT,"Light_Lightness_Default_Status callback received for element %d \r\n", elementIndex);
 800508a:	2100      	movs	r1, #0
 800508c:	4820      	ldr	r0, [pc, #128]	@ (8005110 <Appli_Light_Lightness_Default_Status+0x9c>)
 800508e:	f008 fa45 	bl	800d51c <TraceHeader>
 8005092:	797b      	ldrb	r3, [r7, #5]
 8005094:	4619      	mov	r1, r3
 8005096:	481f      	ldr	r0, [pc, #124]	@ (8005114 <Appli_Light_Lightness_Default_Status+0xa0>)
 8005098:	f023 feea 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8256!\r\n");
 800509c:	2100      	movs	r1, #0
 800509e:	481c      	ldr	r0, [pc, #112]	@ (8005110 <Appli_Light_Lightness_Default_Status+0x9c>)
 80050a0:	f008 fa3c 	bl	800d51c <TraceHeader>
 80050a4:	481c      	ldr	r0, [pc, #112]	@ (8005118 <Appli_Light_Lightness_Default_Status+0xa4>)
 80050a6:	f023 ff4b 	bl	8028f40 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	e026      	b.n	80050fe <Appli_Light_Lightness_Default_Status+0x8a>
  {
    if(i == 0)
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d105      	bne.n	80050c2 <Appli_Light_Lightness_Default_Status+0x4e>
    {
      value = pLightnessDefault_status[i];
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	4413      	add	r3, r2
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	827b      	strh	r3, [r7, #18]
 80050c0:	e01a      	b.n	80050f8 <Appli_Light_Lightness_Default_Status+0x84>
    }
    else if(i == 1)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d117      	bne.n	80050f8 <Appli_Light_Lightness_Default_Status+0x84>
    {
      TRACE_M(TF_LIGHT,"Lightness Default: 0x%x (%d)\r\n",
 80050c8:	2100      	movs	r1, #0
 80050ca:	4811      	ldr	r0, [pc, #68]	@ (8005110 <Appli_Light_Lightness_Default_Status+0x9c>)
 80050cc:	f008 fa26 	bl	800d51c <TraceHeader>
 80050d0:	8a7a      	ldrh	r2, [r7, #18]
 80050d2:	68f9      	ldr	r1, [r7, #12]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	440b      	add	r3, r1
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	ea42 0003 	orr.w	r0, r2, r3
 80050e0:	8a7a      	ldrh	r2, [r7, #18]
 80050e2:	68f9      	ldr	r1, [r7, #12]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	440b      	add	r3, r1
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	4313      	orrs	r3, r2
 80050ee:	461a      	mov	r2, r3
 80050f0:	4601      	mov	r1, r0
 80050f2:	480a      	ldr	r0, [pc, #40]	@ (800511c <Appli_Light_Lightness_Default_Status+0xa8>)
 80050f4:	f023 febc 	bl	8028e70 <iprintf>
  for(i = 0; i < pLength; i++)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	3301      	adds	r3, #1
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	d3d4      	bcc.n	80050b0 <Appli_Light_Lightness_Default_Status+0x3c>
              value | pLightnessDefault_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	080306a0 	.word	0x080306a0
 8005114:	0802d9a0 	.word	0x0802d9a0
 8005118:	0802d97c 	.word	0x0802d97c
 800511c:	0802d9e4 	.word	0x0802d9e4

08005120 <Appli_Light_Lightness_Range_Status>:
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_Lightness_Range_Status(MOBLEUINT8 const *pLightnessRange_status, MOBLEUINT32 pLength
                                                , MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	4611      	mov	r1, r2
 800512c:	461a      	mov	r2, r3
 800512e:	460b      	mov	r3, r1
 8005130:	80fb      	strh	r3, [r7, #6]
 8005132:	4613      	mov	r3, r2
 8005134:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value;
#endif
  
  TRACE_M(TF_LIGHT,"Light_Lightness_Range_Status callback received for element %d \r\n", elementIndex);
 8005136:	2100      	movs	r1, #0
 8005138:	483a      	ldr	r0, [pc, #232]	@ (8005224 <Appli_Light_Lightness_Range_Status+0x104>)
 800513a:	f008 f9ef 	bl	800d51c <TraceHeader>
 800513e:	797b      	ldrb	r3, [r7, #5]
 8005140:	4619      	mov	r1, r3
 8005142:	4839      	ldr	r0, [pc, #228]	@ (8005228 <Appli_Light_Lightness_Range_Status+0x108>)
 8005144:	f023 fe94 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8258!\r\n");
 8005148:	2100      	movs	r1, #0
 800514a:	4836      	ldr	r0, [pc, #216]	@ (8005224 <Appli_Light_Lightness_Range_Status+0x104>)
 800514c:	f008 f9e6 	bl	800d51c <TraceHeader>
 8005150:	4836      	ldr	r0, [pc, #216]	@ (800522c <Appli_Light_Lightness_Range_Status+0x10c>)
 8005152:	f023 fef5 	bl	8028f40 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	e05a      	b.n	8005212 <Appli_Light_Lightness_Range_Status+0xf2>
  {
    if(i == 0)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d111      	bne.n	8005186 <Appli_Light_Lightness_Range_Status+0x66>
    {
      TRACE_M(TF_LIGHT,"Status Code: 0x%x (%d)\r\n",
 8005162:	2100      	movs	r1, #0
 8005164:	482f      	ldr	r0, [pc, #188]	@ (8005224 <Appli_Light_Lightness_Range_Status+0x104>)
 8005166:	f008 f9d9 	bl	800d51c <TraceHeader>
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	4413      	add	r3, r2
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	4619      	mov	r1, r3
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	4413      	add	r3, r2
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	461a      	mov	r2, r3
 800517e:	482c      	ldr	r0, [pc, #176]	@ (8005230 <Appli_Light_Lightness_Range_Status+0x110>)
 8005180:	f023 fe76 	bl	8028e70 <iprintf>
 8005184:	e042      	b.n	800520c <Appli_Light_Lightness_Range_Status+0xec>
              pLightnessRange_status[i],
              pLightnessRange_status[i]);
    }
    else if((i == 1) || (i == 3))
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d002      	beq.n	8005192 <Appli_Light_Lightness_Range_Status+0x72>
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2b03      	cmp	r3, #3
 8005190:	d105      	bne.n	800519e <Appli_Light_Lightness_Range_Status+0x7e>
    {
      value = pLightnessRange_status[i];
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	4413      	add	r3, r2
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	827b      	strh	r3, [r7, #18]
 800519c:	e036      	b.n	800520c <Appli_Light_Lightness_Range_Status+0xec>
    }
    else if(i == 2)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d118      	bne.n	80051d6 <Appli_Light_Lightness_Range_Status+0xb6>
    {
      TRACE_M(TF_LIGHT,"Range Min: 0x%x (%d)\r\n",
 80051a4:	2100      	movs	r1, #0
 80051a6:	481f      	ldr	r0, [pc, #124]	@ (8005224 <Appli_Light_Lightness_Range_Status+0x104>)
 80051a8:	f008 f9b8 	bl	800d51c <TraceHeader>
 80051ac:	8a7a      	ldrh	r2, [r7, #18]
 80051ae:	68f9      	ldr	r1, [r7, #12]
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	440b      	add	r3, r1
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	ea42 0003 	orr.w	r0, r2, r3
 80051bc:	8a7a      	ldrh	r2, [r7, #18]
 80051be:	68f9      	ldr	r1, [r7, #12]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	440b      	add	r3, r1
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	4313      	orrs	r3, r2
 80051ca:	461a      	mov	r2, r3
 80051cc:	4601      	mov	r1, r0
 80051ce:	4819      	ldr	r0, [pc, #100]	@ (8005234 <Appli_Light_Lightness_Range_Status+0x114>)
 80051d0:	f023 fe4e 	bl	8028e70 <iprintf>
 80051d4:	e01a      	b.n	800520c <Appli_Light_Lightness_Range_Status+0xec>
              value | pLightnessRange_status[i] << 8,
              value | pLightnessRange_status[i] << 8);
    }
    else if(i == 4)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d117      	bne.n	800520c <Appli_Light_Lightness_Range_Status+0xec>
    {
      TRACE_M(TF_LIGHT,"Range Max: 0x%x (%d)\r\n",
 80051dc:	2100      	movs	r1, #0
 80051de:	4811      	ldr	r0, [pc, #68]	@ (8005224 <Appli_Light_Lightness_Range_Status+0x104>)
 80051e0:	f008 f99c 	bl	800d51c <TraceHeader>
 80051e4:	8a7a      	ldrh	r2, [r7, #18]
 80051e6:	68f9      	ldr	r1, [r7, #12]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	440b      	add	r3, r1
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	ea42 0003 	orr.w	r0, r2, r3
 80051f4:	8a7a      	ldrh	r2, [r7, #18]
 80051f6:	68f9      	ldr	r1, [r7, #12]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	440b      	add	r3, r1
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	4313      	orrs	r3, r2
 8005202:	461a      	mov	r2, r3
 8005204:	4601      	mov	r1, r0
 8005206:	480c      	ldr	r0, [pc, #48]	@ (8005238 <Appli_Light_Lightness_Range_Status+0x118>)
 8005208:	f023 fe32 	bl	8028e70 <iprintf>
  for(i = 0; i < pLength; i++)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	3301      	adds	r3, #1
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	d3a0      	bcc.n	800515c <Appli_Light_Lightness_Range_Status+0x3c>
              value | pLightnessRange_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	080306c8 	.word	0x080306c8
 8005228:	0802da04 	.word	0x0802da04
 800522c:	0802da48 	.word	0x0802da48
 8005230:	0802da50 	.word	0x0802da50
 8005234:	0802da6c 	.word	0x0802da6c
 8005238:	0802da84 	.word	0x0802da84

0800523c <Appli_Light_Ctl_Status>:
* @param  pLength: length of data
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Ctl_Status(MOBLEUINT8 const *pLightCtl_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	4611      	mov	r1, r2
 8005248:	461a      	mov	r2, r3
 800524a:	460b      	mov	r3, r1
 800524c:	80fb      	strh	r3, [r7, #6]
 800524e:	4613      	mov	r3, r2
 8005250:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	827b      	strh	r3, [r7, #18]
#endif

  TRACE_M(TF_LIGHT,"Light_Ctl_Status callback received for element %d \r\n", elementIndex);
 8005256:	2100      	movs	r1, #0
 8005258:	485a      	ldr	r0, [pc, #360]	@ (80053c4 <Appli_Light_Ctl_Status+0x188>)
 800525a:	f008 f95f 	bl	800d51c <TraceHeader>
 800525e:	797b      	ldrb	r3, [r7, #5]
 8005260:	4619      	mov	r1, r3
 8005262:	4859      	ldr	r0, [pc, #356]	@ (80053c8 <Appli_Light_Ctl_Status+0x18c>)
 8005264:	f023 fe04 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8260!\r\n");
 8005268:	2100      	movs	r1, #0
 800526a:	4856      	ldr	r0, [pc, #344]	@ (80053c4 <Appli_Light_Ctl_Status+0x188>)
 800526c:	f008 f956 	bl	800d51c <TraceHeader>
 8005270:	4856      	ldr	r0, [pc, #344]	@ (80053cc <Appli_Light_Ctl_Status+0x190>)
 8005272:	f023 fe65 	bl	8028f40 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	e098      	b.n	80053ae <Appli_Light_Ctl_Status+0x172>
  {
    if((i == 0) || (i == 2) || (i == 4) || (i == 6))
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d008      	beq.n	8005294 <Appli_Light_Ctl_Status+0x58>
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b02      	cmp	r3, #2
 8005286:	d005      	beq.n	8005294 <Appli_Light_Ctl_Status+0x58>
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b04      	cmp	r3, #4
 800528c:	d002      	beq.n	8005294 <Appli_Light_Ctl_Status+0x58>
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2b06      	cmp	r3, #6
 8005292:	d105      	bne.n	80052a0 <Appli_Light_Ctl_Status+0x64>
    {
      value = pLightCtl_status[i];
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	4413      	add	r3, r2
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	827b      	strh	r3, [r7, #18]
 800529e:	e083      	b.n	80053a8 <Appli_Light_Ctl_Status+0x16c>
    }
    else if(i == 1)
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d118      	bne.n	80052d8 <Appli_Light_Ctl_Status+0x9c>
    {
      TRACE_M(TF_LIGHT,"Present CTL Lightness: 0x%x (%d)\r\n",
 80052a6:	2100      	movs	r1, #0
 80052a8:	4846      	ldr	r0, [pc, #280]	@ (80053c4 <Appli_Light_Ctl_Status+0x188>)
 80052aa:	f008 f937 	bl	800d51c <TraceHeader>
 80052ae:	8a7a      	ldrh	r2, [r7, #18]
 80052b0:	68f9      	ldr	r1, [r7, #12]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	440b      	add	r3, r1
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	ea42 0003 	orr.w	r0, r2, r3
 80052be:	8a7a      	ldrh	r2, [r7, #18]
 80052c0:	68f9      	ldr	r1, [r7, #12]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	440b      	add	r3, r1
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	021b      	lsls	r3, r3, #8
 80052ca:	4313      	orrs	r3, r2
 80052cc:	461a      	mov	r2, r3
 80052ce:	4601      	mov	r1, r0
 80052d0:	483f      	ldr	r0, [pc, #252]	@ (80053d0 <Appli_Light_Ctl_Status+0x194>)
 80052d2:	f023 fdcd 	bl	8028e70 <iprintf>
 80052d6:	e067      	b.n	80053a8 <Appli_Light_Ctl_Status+0x16c>
              value | pLightCtl_status[i] << 8,
              value | pLightCtl_status[i] << 8);
    }
    else if(i == 3)
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d118      	bne.n	8005310 <Appli_Light_Ctl_Status+0xd4>
    {
      TRACE_M(TF_LIGHT,"Present CTL Temperature: 0x%x (%d)\r\n",
 80052de:	2100      	movs	r1, #0
 80052e0:	4838      	ldr	r0, [pc, #224]	@ (80053c4 <Appli_Light_Ctl_Status+0x188>)
 80052e2:	f008 f91b 	bl	800d51c <TraceHeader>
 80052e6:	8a7a      	ldrh	r2, [r7, #18]
 80052e8:	68f9      	ldr	r1, [r7, #12]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	440b      	add	r3, r1
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	ea42 0003 	orr.w	r0, r2, r3
 80052f6:	8a7a      	ldrh	r2, [r7, #18]
 80052f8:	68f9      	ldr	r1, [r7, #12]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	440b      	add	r3, r1
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	4313      	orrs	r3, r2
 8005304:	461a      	mov	r2, r3
 8005306:	4601      	mov	r1, r0
 8005308:	4832      	ldr	r0, [pc, #200]	@ (80053d4 <Appli_Light_Ctl_Status+0x198>)
 800530a:	f023 fdb1 	bl	8028e70 <iprintf>
 800530e:	e04b      	b.n	80053a8 <Appli_Light_Ctl_Status+0x16c>
              value | pLightCtl_status[i] << 8,
              value | pLightCtl_status[i] << 8);
    }
    else if(i == 5)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2b05      	cmp	r3, #5
 8005314:	d118      	bne.n	8005348 <Appli_Light_Ctl_Status+0x10c>
    {
      TRACE_M(TF_LIGHT,"Target CTL Lightness: 0x%x (%d)\r\n",
 8005316:	2100      	movs	r1, #0
 8005318:	482a      	ldr	r0, [pc, #168]	@ (80053c4 <Appli_Light_Ctl_Status+0x188>)
 800531a:	f008 f8ff 	bl	800d51c <TraceHeader>
 800531e:	8a7a      	ldrh	r2, [r7, #18]
 8005320:	68f9      	ldr	r1, [r7, #12]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	440b      	add	r3, r1
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	021b      	lsls	r3, r3, #8
 800532a:	ea42 0003 	orr.w	r0, r2, r3
 800532e:	8a7a      	ldrh	r2, [r7, #18]
 8005330:	68f9      	ldr	r1, [r7, #12]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	440b      	add	r3, r1
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	021b      	lsls	r3, r3, #8
 800533a:	4313      	orrs	r3, r2
 800533c:	461a      	mov	r2, r3
 800533e:	4601      	mov	r1, r0
 8005340:	4825      	ldr	r0, [pc, #148]	@ (80053d8 <Appli_Light_Ctl_Status+0x19c>)
 8005342:	f023 fd95 	bl	8028e70 <iprintf>
 8005346:	e02f      	b.n	80053a8 <Appli_Light_Ctl_Status+0x16c>
              value | pLightCtl_status[i] << 8,
              value | pLightCtl_status[i] << 8);
    }
    else if(i == 7)
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2b07      	cmp	r3, #7
 800534c:	d118      	bne.n	8005380 <Appli_Light_Ctl_Status+0x144>
    {
      TRACE_M(TF_LIGHT,"Target CTL Temperature: 0x%x (%d)\r\n",
 800534e:	2100      	movs	r1, #0
 8005350:	481c      	ldr	r0, [pc, #112]	@ (80053c4 <Appli_Light_Ctl_Status+0x188>)
 8005352:	f008 f8e3 	bl	800d51c <TraceHeader>
 8005356:	8a7a      	ldrh	r2, [r7, #18]
 8005358:	68f9      	ldr	r1, [r7, #12]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	440b      	add	r3, r1
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	ea42 0003 	orr.w	r0, r2, r3
 8005366:	8a7a      	ldrh	r2, [r7, #18]
 8005368:	68f9      	ldr	r1, [r7, #12]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	440b      	add	r3, r1
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	4313      	orrs	r3, r2
 8005374:	461a      	mov	r2, r3
 8005376:	4601      	mov	r1, r0
 8005378:	4818      	ldr	r0, [pc, #96]	@ (80053dc <Appli_Light_Ctl_Status+0x1a0>)
 800537a:	f023 fd79 	bl	8028e70 <iprintf>
 800537e:	e013      	b.n	80053a8 <Appli_Light_Ctl_Status+0x16c>
              value | pLightCtl_status[i] << 8,
              value | pLightCtl_status[i] << 8);
    }
    else if(i == 8)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b08      	cmp	r3, #8
 8005384:	d110      	bne.n	80053a8 <Appli_Light_Ctl_Status+0x16c>
    {
      TRACE_M(TF_LIGHT,"Remaining Time:0x%x (%d)\r\n",
 8005386:	2100      	movs	r1, #0
 8005388:	480e      	ldr	r0, [pc, #56]	@ (80053c4 <Appli_Light_Ctl_Status+0x188>)
 800538a:	f008 f8c7 	bl	800d51c <TraceHeader>
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	4413      	add	r3, r2
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	4619      	mov	r1, r3
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	4413      	add	r3, r2
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	480f      	ldr	r0, [pc, #60]	@ (80053e0 <Appli_Light_Ctl_Status+0x1a4>)
 80053a4:	f023 fd64 	bl	8028e70 <iprintf>
  for(i = 0; i < pLength; i++)
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	3301      	adds	r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	f4ff af62 	bcc.w	800527c <Appli_Light_Ctl_Status+0x40>
              pLightCtl_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	080306ec 	.word	0x080306ec
 80053c8:	0802da9c 	.word	0x0802da9c
 80053cc:	0802dad4 	.word	0x0802dad4
 80053d0:	0802dadc 	.word	0x0802dadc
 80053d4:	0802db00 	.word	0x0802db00
 80053d8:	0802db28 	.word	0x0802db28
 80053dc:	0802db4c 	.word	0x0802db4c
 80053e0:	0802db70 	.word	0x0802db70

080053e4 <Appli_Light_CtlTemperature_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_CtlTemperature_Status(MOBLEUINT8 const *pLightCtlTemp_status, MOBLEUINT32 pLength
                                               , MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	4611      	mov	r1, r2
 80053f0:	461a      	mov	r2, r3
 80053f2:	460b      	mov	r3, r1
 80053f4:	80fb      	strh	r3, [r7, #6]
 80053f6:	4613      	mov	r3, r2
 80053f8:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_CtlTemperature_Status callback received for element %d \r\n", elementIndex);
 80053fe:	2100      	movs	r1, #0
 8005400:	485a      	ldr	r0, [pc, #360]	@ (800556c <Appli_Light_CtlTemperature_Status+0x188>)
 8005402:	f008 f88b 	bl	800d51c <TraceHeader>
 8005406:	797b      	ldrb	r3, [r7, #5]
 8005408:	4619      	mov	r1, r3
 800540a:	4859      	ldr	r0, [pc, #356]	@ (8005570 <Appli_Light_CtlTemperature_Status+0x18c>)
 800540c:	f023 fd30 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8266!\r\n");
 8005410:	2100      	movs	r1, #0
 8005412:	4856      	ldr	r0, [pc, #344]	@ (800556c <Appli_Light_CtlTemperature_Status+0x188>)
 8005414:	f008 f882 	bl	800d51c <TraceHeader>
 8005418:	4856      	ldr	r0, [pc, #344]	@ (8005574 <Appli_Light_CtlTemperature_Status+0x190>)
 800541a:	f023 fd91 	bl	8028f40 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e098      	b.n	8005556 <Appli_Light_CtlTemperature_Status+0x172>
  {
    if((i == 0) || (i == 2) || (i == 4) || (i == 6))
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d008      	beq.n	800543c <Appli_Light_CtlTemperature_Status+0x58>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d005      	beq.n	800543c <Appli_Light_CtlTemperature_Status+0x58>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b04      	cmp	r3, #4
 8005434:	d002      	beq.n	800543c <Appli_Light_CtlTemperature_Status+0x58>
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b06      	cmp	r3, #6
 800543a:	d105      	bne.n	8005448 <Appli_Light_CtlTemperature_Status+0x64>
    {
      value = pLightCtlTemp_status[i];
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	4413      	add	r3, r2
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	827b      	strh	r3, [r7, #18]
 8005446:	e083      	b.n	8005550 <Appli_Light_CtlTemperature_Status+0x16c>
    }
    else if(i == 1)
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d118      	bne.n	8005480 <Appli_Light_CtlTemperature_Status+0x9c>
    {
      TRACE_M(TF_LIGHT,"Present CTL Temperature: 0x%x (%d)\r\n",
 800544e:	2100      	movs	r1, #0
 8005450:	4846      	ldr	r0, [pc, #280]	@ (800556c <Appli_Light_CtlTemperature_Status+0x188>)
 8005452:	f008 f863 	bl	800d51c <TraceHeader>
 8005456:	8a7a      	ldrh	r2, [r7, #18]
 8005458:	68f9      	ldr	r1, [r7, #12]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	440b      	add	r3, r1
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	021b      	lsls	r3, r3, #8
 8005462:	ea42 0003 	orr.w	r0, r2, r3
 8005466:	8a7a      	ldrh	r2, [r7, #18]
 8005468:	68f9      	ldr	r1, [r7, #12]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	440b      	add	r3, r1
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	4313      	orrs	r3, r2
 8005474:	461a      	mov	r2, r3
 8005476:	4601      	mov	r1, r0
 8005478:	483f      	ldr	r0, [pc, #252]	@ (8005578 <Appli_Light_CtlTemperature_Status+0x194>)
 800547a:	f023 fcf9 	bl	8028e70 <iprintf>
 800547e:	e067      	b.n	8005550 <Appli_Light_CtlTemperature_Status+0x16c>
              value | pLightCtlTemp_status[i] << 8,
              value | pLightCtlTemp_status[i] << 8);
    }
    else if(i == 3)
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2b03      	cmp	r3, #3
 8005484:	d118      	bne.n	80054b8 <Appli_Light_CtlTemperature_Status+0xd4>
    {
      TRACE_M(TF_LIGHT,"Present CTL Delta UV: 0x%x (%d)\r\n",
 8005486:	2100      	movs	r1, #0
 8005488:	4838      	ldr	r0, [pc, #224]	@ (800556c <Appli_Light_CtlTemperature_Status+0x188>)
 800548a:	f008 f847 	bl	800d51c <TraceHeader>
 800548e:	8a7a      	ldrh	r2, [r7, #18]
 8005490:	68f9      	ldr	r1, [r7, #12]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	440b      	add	r3, r1
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	ea42 0003 	orr.w	r0, r2, r3
 800549e:	8a7a      	ldrh	r2, [r7, #18]
 80054a0:	68f9      	ldr	r1, [r7, #12]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	440b      	add	r3, r1
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	4313      	orrs	r3, r2
 80054ac:	461a      	mov	r2, r3
 80054ae:	4601      	mov	r1, r0
 80054b0:	4832      	ldr	r0, [pc, #200]	@ (800557c <Appli_Light_CtlTemperature_Status+0x198>)
 80054b2:	f023 fcdd 	bl	8028e70 <iprintf>
 80054b6:	e04b      	b.n	8005550 <Appli_Light_CtlTemperature_Status+0x16c>
              value | pLightCtlTemp_status[i] << 8,
              value | pLightCtlTemp_status[i] << 8);
    }
    else if(i == 5)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2b05      	cmp	r3, #5
 80054bc:	d118      	bne.n	80054f0 <Appli_Light_CtlTemperature_Status+0x10c>
    {
      TRACE_M(TF_LIGHT,"Target CTL Temperature: 0x%x (%d)\r\n",
 80054be:	2100      	movs	r1, #0
 80054c0:	482a      	ldr	r0, [pc, #168]	@ (800556c <Appli_Light_CtlTemperature_Status+0x188>)
 80054c2:	f008 f82b 	bl	800d51c <TraceHeader>
 80054c6:	8a7a      	ldrh	r2, [r7, #18]
 80054c8:	68f9      	ldr	r1, [r7, #12]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	440b      	add	r3, r1
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	021b      	lsls	r3, r3, #8
 80054d2:	ea42 0003 	orr.w	r0, r2, r3
 80054d6:	8a7a      	ldrh	r2, [r7, #18]
 80054d8:	68f9      	ldr	r1, [r7, #12]
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	440b      	add	r3, r1
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	021b      	lsls	r3, r3, #8
 80054e2:	4313      	orrs	r3, r2
 80054e4:	461a      	mov	r2, r3
 80054e6:	4601      	mov	r1, r0
 80054e8:	4825      	ldr	r0, [pc, #148]	@ (8005580 <Appli_Light_CtlTemperature_Status+0x19c>)
 80054ea:	f023 fcc1 	bl	8028e70 <iprintf>
 80054ee:	e02f      	b.n	8005550 <Appli_Light_CtlTemperature_Status+0x16c>
              value | pLightCtlTemp_status[i] << 8,
              value | pLightCtlTemp_status[i] << 8);
    }
    else if(i == 7)
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2b07      	cmp	r3, #7
 80054f4:	d118      	bne.n	8005528 <Appli_Light_CtlTemperature_Status+0x144>
    {
      TRACE_M(TF_LIGHT,"Target CTL Delta UV: 0x%x (%d)\r\n",
 80054f6:	2100      	movs	r1, #0
 80054f8:	481c      	ldr	r0, [pc, #112]	@ (800556c <Appli_Light_CtlTemperature_Status+0x188>)
 80054fa:	f008 f80f 	bl	800d51c <TraceHeader>
 80054fe:	8a7a      	ldrh	r2, [r7, #18]
 8005500:	68f9      	ldr	r1, [r7, #12]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	440b      	add	r3, r1
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	ea42 0003 	orr.w	r0, r2, r3
 800550e:	8a7a      	ldrh	r2, [r7, #18]
 8005510:	68f9      	ldr	r1, [r7, #12]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	440b      	add	r3, r1
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	4313      	orrs	r3, r2
 800551c:	461a      	mov	r2, r3
 800551e:	4601      	mov	r1, r0
 8005520:	4818      	ldr	r0, [pc, #96]	@ (8005584 <Appli_Light_CtlTemperature_Status+0x1a0>)
 8005522:	f023 fca5 	bl	8028e70 <iprintf>
 8005526:	e013      	b.n	8005550 <Appli_Light_CtlTemperature_Status+0x16c>
              value | pLightCtlTemp_status[i] << 8,
              value | pLightCtlTemp_status[i] << 8);
    }
    else if(i == 8)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2b08      	cmp	r3, #8
 800552c:	d110      	bne.n	8005550 <Appli_Light_CtlTemperature_Status+0x16c>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\r\n",
 800552e:	2100      	movs	r1, #0
 8005530:	480e      	ldr	r0, [pc, #56]	@ (800556c <Appli_Light_CtlTemperature_Status+0x188>)
 8005532:	f007 fff3 	bl	800d51c <TraceHeader>
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	4413      	add	r3, r2
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	4619      	mov	r1, r3
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	4413      	add	r3, r2
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	480f      	ldr	r0, [pc, #60]	@ (8005588 <Appli_Light_CtlTemperature_Status+0x1a4>)
 800554c:	f023 fc90 	bl	8028e70 <iprintf>
  for(i = 0; i < pLength; i++)
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	3301      	adds	r3, #1
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	429a      	cmp	r2, r3
 800555c:	f4ff af62 	bcc.w	8005424 <Appli_Light_CtlTemperature_Status+0x40>
              pLightCtlTemp_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	08030704 	.word	0x08030704
 8005570:	0802db8c 	.word	0x0802db8c
 8005574:	0802dbcc 	.word	0x0802dbcc
 8005578:	0802db00 	.word	0x0802db00
 800557c:	0802dbd4 	.word	0x0802dbd4
 8005580:	0802db4c 	.word	0x0802db4c
 8005584:	0802dbf8 	.word	0x0802dbf8
 8005588:	0802d8d4 	.word	0x0802d8d4

0800558c <Appli_Light_CtlTemperature_Range_Status>:
*/ 
MOBLE_RESULT Appli_Light_CtlTemperature_Range_Status(MOBLEUINT8 const *pCtlTempRange_status, 
                                                     MOBLEUINT32 pLength, 
                                                     MOBLEUINT16 dstPeer, 
                                                     MOBLEUINT8 elementIndex)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	4611      	mov	r1, r2
 8005598:	461a      	mov	r2, r3
 800559a:	460b      	mov	r3, r1
 800559c:	80fb      	strh	r3, [r7, #6]
 800559e:	4613      	mov	r3, r2
 80055a0:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value;
#endif
  
  TRACE_M(TF_LIGHT,"Light_CtlTemperature_Range_Status callback received for element %d \r\n", elementIndex);
 80055a2:	2100      	movs	r1, #0
 80055a4:	483a      	ldr	r0, [pc, #232]	@ (8005690 <Appli_Light_CtlTemperature_Range_Status+0x104>)
 80055a6:	f007 ffb9 	bl	800d51c <TraceHeader>
 80055aa:	797b      	ldrb	r3, [r7, #5]
 80055ac:	4619      	mov	r1, r3
 80055ae:	4839      	ldr	r0, [pc, #228]	@ (8005694 <Appli_Light_CtlTemperature_Range_Status+0x108>)
 80055b0:	f023 fc5e 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8263!\r\n");
 80055b4:	2100      	movs	r1, #0
 80055b6:	4836      	ldr	r0, [pc, #216]	@ (8005690 <Appli_Light_CtlTemperature_Range_Status+0x104>)
 80055b8:	f007 ffb0 	bl	800d51c <TraceHeader>
 80055bc:	4836      	ldr	r0, [pc, #216]	@ (8005698 <Appli_Light_CtlTemperature_Range_Status+0x10c>)
 80055be:	f023 fcbf 	bl	8028f40 <puts>
    
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e05a      	b.n	800567e <Appli_Light_CtlTemperature_Range_Status+0xf2>
  {
    if(i == 0)
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d111      	bne.n	80055f2 <Appli_Light_CtlTemperature_Range_Status+0x66>
    {
      TRACE_M(TF_LIGHT,"Status Code: 0x%x (%d)\r\n",
 80055ce:	2100      	movs	r1, #0
 80055d0:	482f      	ldr	r0, [pc, #188]	@ (8005690 <Appli_Light_CtlTemperature_Range_Status+0x104>)
 80055d2:	f007 ffa3 	bl	800d51c <TraceHeader>
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	4413      	add	r3, r2
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	4619      	mov	r1, r3
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	4413      	add	r3, r2
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	482c      	ldr	r0, [pc, #176]	@ (800569c <Appli_Light_CtlTemperature_Range_Status+0x110>)
 80055ec:	f023 fc40 	bl	8028e70 <iprintf>
 80055f0:	e042      	b.n	8005678 <Appli_Light_CtlTemperature_Range_Status+0xec>
              pCtlTempRange_status[i],
              pCtlTempRange_status[i]);
    }
    else if((i == 1) || (i == 3))
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d002      	beq.n	80055fe <Appli_Light_CtlTemperature_Range_Status+0x72>
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d105      	bne.n	800560a <Appli_Light_CtlTemperature_Range_Status+0x7e>
    {
      value = pCtlTempRange_status[i];
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	4413      	add	r3, r2
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	827b      	strh	r3, [r7, #18]
 8005608:	e036      	b.n	8005678 <Appli_Light_CtlTemperature_Range_Status+0xec>
    }
    else if(i == 2)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b02      	cmp	r3, #2
 800560e:	d118      	bne.n	8005642 <Appli_Light_CtlTemperature_Range_Status+0xb6>
    {
      TRACE_M(TF_LIGHT,"Range Min: 0x%x (%d)\r\n",
 8005610:	2100      	movs	r1, #0
 8005612:	481f      	ldr	r0, [pc, #124]	@ (8005690 <Appli_Light_CtlTemperature_Range_Status+0x104>)
 8005614:	f007 ff82 	bl	800d51c <TraceHeader>
 8005618:	8a7a      	ldrh	r2, [r7, #18]
 800561a:	68f9      	ldr	r1, [r7, #12]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	440b      	add	r3, r1
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	021b      	lsls	r3, r3, #8
 8005624:	ea42 0003 	orr.w	r0, r2, r3
 8005628:	8a7a      	ldrh	r2, [r7, #18]
 800562a:	68f9      	ldr	r1, [r7, #12]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	440b      	add	r3, r1
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	4313      	orrs	r3, r2
 8005636:	461a      	mov	r2, r3
 8005638:	4601      	mov	r1, r0
 800563a:	4819      	ldr	r0, [pc, #100]	@ (80056a0 <Appli_Light_CtlTemperature_Range_Status+0x114>)
 800563c:	f023 fc18 	bl	8028e70 <iprintf>
 8005640:	e01a      	b.n	8005678 <Appli_Light_CtlTemperature_Range_Status+0xec>
              value | pCtlTempRange_status[i] << 8,
              value | pCtlTempRange_status[i] << 8 );
    }
    else if(i == 4)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b04      	cmp	r3, #4
 8005646:	d117      	bne.n	8005678 <Appli_Light_CtlTemperature_Range_Status+0xec>
    {
      TRACE_M(TF_LIGHT,"Range Max: 0x%x (%d)\r\n",
 8005648:	2100      	movs	r1, #0
 800564a:	4811      	ldr	r0, [pc, #68]	@ (8005690 <Appli_Light_CtlTemperature_Range_Status+0x104>)
 800564c:	f007 ff66 	bl	800d51c <TraceHeader>
 8005650:	8a7a      	ldrh	r2, [r7, #18]
 8005652:	68f9      	ldr	r1, [r7, #12]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	440b      	add	r3, r1
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	ea42 0003 	orr.w	r0, r2, r3
 8005660:	8a7a      	ldrh	r2, [r7, #18]
 8005662:	68f9      	ldr	r1, [r7, #12]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	440b      	add	r3, r1
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	4313      	orrs	r3, r2
 800566e:	461a      	mov	r2, r3
 8005670:	4601      	mov	r1, r0
 8005672:	480c      	ldr	r0, [pc, #48]	@ (80056a4 <Appli_Light_CtlTemperature_Range_Status+0x118>)
 8005674:	f023 fbfc 	bl	8028e70 <iprintf>
  for(i = 0; i < pLength; i++)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	3301      	adds	r3, #1
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	429a      	cmp	r2, r3
 8005684:	d3a0      	bcc.n	80055c8 <Appli_Light_CtlTemperature_Range_Status+0x3c>
              value | pCtlTempRange_status[i] << 8 );
    }
  }
#endif

  return MOBLE_RESULT_SUCCESS;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	08030728 	.word	0x08030728
 8005694:	0802dc1c 	.word	0x0802dc1c
 8005698:	0802dc64 	.word	0x0802dc64
 800569c:	0802da50 	.word	0x0802da50
 80056a0:	0802da6c 	.word	0x0802da6c
 80056a4:	0802da84 	.word	0x0802da84

080056a8 <Appli_Light_CtlDefault_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_CtlDefault_Status(MOBLEUINT8 const *pCtlDefault_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	4611      	mov	r1, r2
 80056b4:	461a      	mov	r2, r3
 80056b6:	460b      	mov	r3, r1
 80056b8:	80fb      	strh	r3, [r7, #6]
 80056ba:	4613      	mov	r3, r2
 80056bc:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_Ctl_DefaultStatus callback received for element %d \r\n", elementIndex);
 80056c2:	2100      	movs	r1, #0
 80056c4:	483f      	ldr	r0, [pc, #252]	@ (80057c4 <Appli_Light_CtlDefault_Status+0x11c>)
 80056c6:	f007 ff29 	bl	800d51c <TraceHeader>
 80056ca:	797b      	ldrb	r3, [r7, #5]
 80056cc:	4619      	mov	r1, r3
 80056ce:	483e      	ldr	r0, [pc, #248]	@ (80057c8 <Appli_Light_CtlDefault_Status+0x120>)
 80056d0:	f023 fbce 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8268!\r\n");
 80056d4:	2100      	movs	r1, #0
 80056d6:	483b      	ldr	r0, [pc, #236]	@ (80057c4 <Appli_Light_CtlDefault_Status+0x11c>)
 80056d8:	f007 ff20 	bl	800d51c <TraceHeader>
 80056dc:	483b      	ldr	r0, [pc, #236]	@ (80057cc <Appli_Light_CtlDefault_Status+0x124>)
 80056de:	f023 fc2f 	bl	8028f40 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e064      	b.n	80057b2 <Appli_Light_CtlDefault_Status+0x10a>
  {
    if((i == 0) || (i == 2) || (i == 4))
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <Appli_Light_CtlDefault_Status+0x52>
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d002      	beq.n	80056fa <Appli_Light_CtlDefault_Status+0x52>
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d105      	bne.n	8005706 <Appli_Light_CtlDefault_Status+0x5e>
    {
      value = pCtlDefault_status[i];
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	4413      	add	r3, r2
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	827b      	strh	r3, [r7, #18]
 8005704:	e052      	b.n	80057ac <Appli_Light_CtlDefault_Status+0x104>
    }
    else if(i == 1)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d118      	bne.n	800573e <Appli_Light_CtlDefault_Status+0x96>
    {
      TRACE_M(TF_LIGHT,"Lightness: 0x%x (%d)\n\r",
 800570c:	2100      	movs	r1, #0
 800570e:	482d      	ldr	r0, [pc, #180]	@ (80057c4 <Appli_Light_CtlDefault_Status+0x11c>)
 8005710:	f007 ff04 	bl	800d51c <TraceHeader>
 8005714:	8a7a      	ldrh	r2, [r7, #18]
 8005716:	68f9      	ldr	r1, [r7, #12]
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	440b      	add	r3, r1
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	ea42 0003 	orr.w	r0, r2, r3
 8005724:	8a7a      	ldrh	r2, [r7, #18]
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	440b      	add	r3, r1
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	4313      	orrs	r3, r2
 8005732:	461a      	mov	r2, r3
 8005734:	4601      	mov	r1, r0
 8005736:	4826      	ldr	r0, [pc, #152]	@ (80057d0 <Appli_Light_CtlDefault_Status+0x128>)
 8005738:	f023 fb9a 	bl	8028e70 <iprintf>
 800573c:	e036      	b.n	80057ac <Appli_Light_CtlDefault_Status+0x104>
              value | pCtlDefault_status[i] << 8,
              value | pCtlDefault_status[i] << 8);
    }
    else if(i == 3)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d118      	bne.n	8005776 <Appli_Light_CtlDefault_Status+0xce>
    {
      TRACE_M(TF_LIGHT,"Temperature: 0x%x (%d)\n\r",
 8005744:	2100      	movs	r1, #0
 8005746:	481f      	ldr	r0, [pc, #124]	@ (80057c4 <Appli_Light_CtlDefault_Status+0x11c>)
 8005748:	f007 fee8 	bl	800d51c <TraceHeader>
 800574c:	8a7a      	ldrh	r2, [r7, #18]
 800574e:	68f9      	ldr	r1, [r7, #12]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	440b      	add	r3, r1
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	ea42 0003 	orr.w	r0, r2, r3
 800575c:	8a7a      	ldrh	r2, [r7, #18]
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	440b      	add	r3, r1
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	021b      	lsls	r3, r3, #8
 8005768:	4313      	orrs	r3, r2
 800576a:	461a      	mov	r2, r3
 800576c:	4601      	mov	r1, r0
 800576e:	4819      	ldr	r0, [pc, #100]	@ (80057d4 <Appli_Light_CtlDefault_Status+0x12c>)
 8005770:	f023 fb7e 	bl	8028e70 <iprintf>
 8005774:	e01a      	b.n	80057ac <Appli_Light_CtlDefault_Status+0x104>
              value | pCtlDefault_status[i] << 8,
              value | pCtlDefault_status[i] << 8);
    }
    else if(i == 5)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b05      	cmp	r3, #5
 800577a:	d117      	bne.n	80057ac <Appli_Light_CtlDefault_Status+0x104>
    {
      TRACE_M(TF_LIGHT,"Delta UV: 0x%x (%d)\n\r",
 800577c:	2100      	movs	r1, #0
 800577e:	4811      	ldr	r0, [pc, #68]	@ (80057c4 <Appli_Light_CtlDefault_Status+0x11c>)
 8005780:	f007 fecc 	bl	800d51c <TraceHeader>
 8005784:	8a7a      	ldrh	r2, [r7, #18]
 8005786:	68f9      	ldr	r1, [r7, #12]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	440b      	add	r3, r1
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	ea42 0003 	orr.w	r0, r2, r3
 8005794:	8a7a      	ldrh	r2, [r7, #18]
 8005796:	68f9      	ldr	r1, [r7, #12]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	440b      	add	r3, r1
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	4313      	orrs	r3, r2
 80057a2:	461a      	mov	r2, r3
 80057a4:	4601      	mov	r1, r0
 80057a6:	480c      	ldr	r0, [pc, #48]	@ (80057d8 <Appli_Light_CtlDefault_Status+0x130>)
 80057a8:	f023 fb62 	bl	8028e70 <iprintf>
  for(i = 0; i < pLength; i++)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	3301      	adds	r3, #1
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d396      	bcc.n	80056e8 <Appli_Light_CtlDefault_Status+0x40>
              value | pCtlDefault_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 80057ba:	2300      	movs	r3, #0
} 
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	08030750 	.word	0x08030750
 80057c8:	0802dc6c 	.word	0x0802dc6c
 80057cc:	0802dca8 	.word	0x0802dca8
 80057d0:	0802dcb0 	.word	0x0802dcb0
 80057d4:	0802dcc8 	.word	0x0802dcc8
 80057d8:	0802dce4 	.word	0x0802dce4

080057dc <Appli_Light_Hsl_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_Hsl_Status(MOBLEUINT8 const *pHsl_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	4611      	mov	r1, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	460b      	mov	r3, r1
 80057ec:	80fb      	strh	r3, [r7, #6]
 80057ee:	4613      	mov	r3, r2
 80057f0:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	827b      	strh	r3, [r7, #18]
#endif

  TRACE_M(TF_LIGHT,"Light_Hsl_Status callback received for element %d \r\n", elementIndex);
 80057f6:	2100      	movs	r1, #0
 80057f8:	484a      	ldr	r0, [pc, #296]	@ (8005924 <Appli_Light_Hsl_Status+0x148>)
 80057fa:	f007 fe8f 	bl	800d51c <TraceHeader>
 80057fe:	797b      	ldrb	r3, [r7, #5]
 8005800:	4619      	mov	r1, r3
 8005802:	4849      	ldr	r0, [pc, #292]	@ (8005928 <Appli_Light_Hsl_Status+0x14c>)
 8005804:	f023 fb34 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8278!\r\n");
 8005808:	2100      	movs	r1, #0
 800580a:	4846      	ldr	r0, [pc, #280]	@ (8005924 <Appli_Light_Hsl_Status+0x148>)
 800580c:	f007 fe86 	bl	800d51c <TraceHeader>
 8005810:	4846      	ldr	r0, [pc, #280]	@ (800592c <Appli_Light_Hsl_Status+0x150>)
 8005812:	f023 fb95 	bl	8028f40 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e079      	b.n	8005910 <Appli_Light_Hsl_Status+0x134>
  {
    if((i == 0) || (i == 2) || (i == 4))
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <Appli_Light_Hsl_Status+0x52>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d002      	beq.n	800582e <Appli_Light_Hsl_Status+0x52>
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2b04      	cmp	r3, #4
 800582c:	d105      	bne.n	800583a <Appli_Light_Hsl_Status+0x5e>
    {
      value = pHsl_status[i];
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	4413      	add	r3, r2
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	827b      	strh	r3, [r7, #18]
 8005838:	e067      	b.n	800590a <Appli_Light_Hsl_Status+0x12e>
    }
    else if(i == 1)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d118      	bne.n	8005872 <Appli_Light_Hsl_Status+0x96>
    {
      TRACE_M(TF_LIGHT,"HSL Lightness: 0x%x (%d)\n\r",
 8005840:	2100      	movs	r1, #0
 8005842:	4838      	ldr	r0, [pc, #224]	@ (8005924 <Appli_Light_Hsl_Status+0x148>)
 8005844:	f007 fe6a 	bl	800d51c <TraceHeader>
 8005848:	8a7a      	ldrh	r2, [r7, #18]
 800584a:	68f9      	ldr	r1, [r7, #12]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	440b      	add	r3, r1
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	021b      	lsls	r3, r3, #8
 8005854:	ea42 0003 	orr.w	r0, r2, r3
 8005858:	8a7a      	ldrh	r2, [r7, #18]
 800585a:	68f9      	ldr	r1, [r7, #12]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	440b      	add	r3, r1
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	4313      	orrs	r3, r2
 8005866:	461a      	mov	r2, r3
 8005868:	4601      	mov	r1, r0
 800586a:	4831      	ldr	r0, [pc, #196]	@ (8005930 <Appli_Light_Hsl_Status+0x154>)
 800586c:	f023 fb00 	bl	8028e70 <iprintf>
 8005870:	e04b      	b.n	800590a <Appli_Light_Hsl_Status+0x12e>
              value | pHsl_status[i] << 8,
              value | pHsl_status[i] << 8);
    }
    else if(i == 3)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b03      	cmp	r3, #3
 8005876:	d118      	bne.n	80058aa <Appli_Light_Hsl_Status+0xce>
    {
      TRACE_M(TF_LIGHT,"HSL Hue: 0x%x (%d)\n\r",
 8005878:	2100      	movs	r1, #0
 800587a:	482a      	ldr	r0, [pc, #168]	@ (8005924 <Appli_Light_Hsl_Status+0x148>)
 800587c:	f007 fe4e 	bl	800d51c <TraceHeader>
 8005880:	8a7a      	ldrh	r2, [r7, #18]
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	440b      	add	r3, r1
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	021b      	lsls	r3, r3, #8
 800588c:	ea42 0003 	orr.w	r0, r2, r3
 8005890:	8a7a      	ldrh	r2, [r7, #18]
 8005892:	68f9      	ldr	r1, [r7, #12]
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	440b      	add	r3, r1
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	4313      	orrs	r3, r2
 800589e:	461a      	mov	r2, r3
 80058a0:	4601      	mov	r1, r0
 80058a2:	4824      	ldr	r0, [pc, #144]	@ (8005934 <Appli_Light_Hsl_Status+0x158>)
 80058a4:	f023 fae4 	bl	8028e70 <iprintf>
 80058a8:	e02f      	b.n	800590a <Appli_Light_Hsl_Status+0x12e>
              value | pHsl_status[i] << 8,
              value | pHsl_status[i] << 8);
    }
    else if(i == 5)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2b05      	cmp	r3, #5
 80058ae:	d118      	bne.n	80058e2 <Appli_Light_Hsl_Status+0x106>
    {
      TRACE_M(TF_LIGHT,"HSL Saturation: 0x%x (%d)\n\r",
 80058b0:	2100      	movs	r1, #0
 80058b2:	481c      	ldr	r0, [pc, #112]	@ (8005924 <Appli_Light_Hsl_Status+0x148>)
 80058b4:	f007 fe32 	bl	800d51c <TraceHeader>
 80058b8:	8a7a      	ldrh	r2, [r7, #18]
 80058ba:	68f9      	ldr	r1, [r7, #12]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	440b      	add	r3, r1
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	ea42 0003 	orr.w	r0, r2, r3
 80058c8:	8a7a      	ldrh	r2, [r7, #18]
 80058ca:	68f9      	ldr	r1, [r7, #12]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	440b      	add	r3, r1
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	4313      	orrs	r3, r2
 80058d6:	461a      	mov	r2, r3
 80058d8:	4601      	mov	r1, r0
 80058da:	4817      	ldr	r0, [pc, #92]	@ (8005938 <Appli_Light_Hsl_Status+0x15c>)
 80058dc:	f023 fac8 	bl	8028e70 <iprintf>
 80058e0:	e013      	b.n	800590a <Appli_Light_Hsl_Status+0x12e>
              value | pHsl_status[i] << 8,
              value | pHsl_status[i] << 8);
    }
    else if(i == 6)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b06      	cmp	r3, #6
 80058e6:	d110      	bne.n	800590a <Appli_Light_Hsl_Status+0x12e>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\n\r",
 80058e8:	2100      	movs	r1, #0
 80058ea:	480e      	ldr	r0, [pc, #56]	@ (8005924 <Appli_Light_Hsl_Status+0x148>)
 80058ec:	f007 fe16 	bl	800d51c <TraceHeader>
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	4413      	add	r3, r2
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	4619      	mov	r1, r3
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	4413      	add	r3, r2
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	480d      	ldr	r0, [pc, #52]	@ (800593c <Appli_Light_Hsl_Status+0x160>)
 8005906:	f023 fab3 	bl	8028e70 <iprintf>
  for(i = 0; i < pLength; i++)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	3301      	adds	r3, #1
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	429a      	cmp	r2, r3
 8005916:	d381      	bcc.n	800581c <Appli_Light_Hsl_Status+0x40>
              pHsl_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	08030770 	.word	0x08030770
 8005928:	0802dcfc 	.word	0x0802dcfc
 800592c:	0802dd34 	.word	0x0802dd34
 8005930:	0802dd3c 	.word	0x0802dd3c
 8005934:	0802dd58 	.word	0x0802dd58
 8005938:	0802dd70 	.word	0x0802dd70
 800593c:	0802dd8c 	.word	0x0802dd8c

08005940 <Appli_Light_HslHue_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_HslHue_Status(MOBLEUINT8 const *pHslHue_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	4611      	mov	r1, r2
 800594c:	461a      	mov	r2, r3
 800594e:	460b      	mov	r3, r1
 8005950:	80fb      	strh	r3, [r7, #6]
 8005952:	4613      	mov	r3, r2
 8005954:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_HslHue_Status callback received for element %d \r\n", elementIndex);
 800595a:	2100      	movs	r1, #0
 800595c:	483a      	ldr	r0, [pc, #232]	@ (8005a48 <Appli_Light_HslHue_Status+0x108>)
 800595e:	f007 fddd 	bl	800d51c <TraceHeader>
 8005962:	797b      	ldrb	r3, [r7, #5]
 8005964:	4619      	mov	r1, r3
 8005966:	4839      	ldr	r0, [pc, #228]	@ (8005a4c <Appli_Light_HslHue_Status+0x10c>)
 8005968:	f023 fa82 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8271!\r\n");
 800596c:	2100      	movs	r1, #0
 800596e:	4836      	ldr	r0, [pc, #216]	@ (8005a48 <Appli_Light_HslHue_Status+0x108>)
 8005970:	f007 fdd4 	bl	800d51c <TraceHeader>
 8005974:	4836      	ldr	r0, [pc, #216]	@ (8005a50 <Appli_Light_HslHue_Status+0x110>)
 8005976:	f023 fae3 	bl	8028f40 <puts>
    
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 800597a:	2300      	movs	r3, #0
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	e05a      	b.n	8005a36 <Appli_Light_HslHue_Status+0xf6>
  {
    if((i == 0) || (i == 2))
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d002      	beq.n	800598c <Appli_Light_HslHue_Status+0x4c>
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2b02      	cmp	r3, #2
 800598a:	d105      	bne.n	8005998 <Appli_Light_HslHue_Status+0x58>
    {
      value = pHslHue_status[i];
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	4413      	add	r3, r2
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	827b      	strh	r3, [r7, #18]
 8005996:	e04b      	b.n	8005a30 <Appli_Light_HslHue_Status+0xf0>
    }
    else if(i == 1)
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d118      	bne.n	80059d0 <Appli_Light_HslHue_Status+0x90>
    {
      TRACE_M(TF_LIGHT,"Present Hue: 0x%x (%d)\n\r",
 800599e:	2100      	movs	r1, #0
 80059a0:	4829      	ldr	r0, [pc, #164]	@ (8005a48 <Appli_Light_HslHue_Status+0x108>)
 80059a2:	f007 fdbb 	bl	800d51c <TraceHeader>
 80059a6:	8a7a      	ldrh	r2, [r7, #18]
 80059a8:	68f9      	ldr	r1, [r7, #12]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	440b      	add	r3, r1
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	021b      	lsls	r3, r3, #8
 80059b2:	ea42 0003 	orr.w	r0, r2, r3
 80059b6:	8a7a      	ldrh	r2, [r7, #18]
 80059b8:	68f9      	ldr	r1, [r7, #12]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	440b      	add	r3, r1
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	4313      	orrs	r3, r2
 80059c4:	461a      	mov	r2, r3
 80059c6:	4601      	mov	r1, r0
 80059c8:	4822      	ldr	r0, [pc, #136]	@ (8005a54 <Appli_Light_HslHue_Status+0x114>)
 80059ca:	f023 fa51 	bl	8028e70 <iprintf>
 80059ce:	e02f      	b.n	8005a30 <Appli_Light_HslHue_Status+0xf0>
              value | pHslHue_status[i] << 8,
              value | pHslHue_status[i] << 8);
    }
    else if(i == 3)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d118      	bne.n	8005a08 <Appli_Light_HslHue_Status+0xc8>
    {
      TRACE_M(TF_LIGHT,"Target Hue: 0x%x (%d)\n\r",
 80059d6:	2100      	movs	r1, #0
 80059d8:	481b      	ldr	r0, [pc, #108]	@ (8005a48 <Appli_Light_HslHue_Status+0x108>)
 80059da:	f007 fd9f 	bl	800d51c <TraceHeader>
 80059de:	8a7a      	ldrh	r2, [r7, #18]
 80059e0:	68f9      	ldr	r1, [r7, #12]
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	440b      	add	r3, r1
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	021b      	lsls	r3, r3, #8
 80059ea:	ea42 0003 	orr.w	r0, r2, r3
 80059ee:	8a7a      	ldrh	r2, [r7, #18]
 80059f0:	68f9      	ldr	r1, [r7, #12]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	440b      	add	r3, r1
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	4313      	orrs	r3, r2
 80059fc:	461a      	mov	r2, r3
 80059fe:	4601      	mov	r1, r0
 8005a00:	4815      	ldr	r0, [pc, #84]	@ (8005a58 <Appli_Light_HslHue_Status+0x118>)
 8005a02:	f023 fa35 	bl	8028e70 <iprintf>
 8005a06:	e013      	b.n	8005a30 <Appli_Light_HslHue_Status+0xf0>
              value | pHslHue_status[i] << 8,
              value | pHslHue_status[i] << 8);
    }
    else if(i == 4)
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d110      	bne.n	8005a30 <Appli_Light_HslHue_Status+0xf0>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\n\r",
 8005a0e:	2100      	movs	r1, #0
 8005a10:	480d      	ldr	r0, [pc, #52]	@ (8005a48 <Appli_Light_HslHue_Status+0x108>)
 8005a12:	f007 fd83 	bl	800d51c <TraceHeader>
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	4413      	add	r3, r2
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	480c      	ldr	r0, [pc, #48]	@ (8005a5c <Appli_Light_HslHue_Status+0x11c>)
 8005a2c:	f023 fa20 	bl	8028e70 <iprintf>
  for(i = 0; i < pLength; i++)
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	3301      	adds	r3, #1
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d3a0      	bcc.n	8005980 <Appli_Light_HslHue_Status+0x40>
              pHslHue_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005a3e:	2300      	movs	r3, #0
} 
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	08030788 	.word	0x08030788
 8005a4c:	0802dda8 	.word	0x0802dda8
 8005a50:	0802dde0 	.word	0x0802dde0
 8005a54:	0802dde8 	.word	0x0802dde8
 8005a58:	0802de04 	.word	0x0802de04
 8005a5c:	0802dd8c 	.word	0x0802dd8c

08005a60 <Appli_Light_HslSaturation_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_HslSaturation_Status(MOBLEUINT8 const *pHslSaturation_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	460b      	mov	r3, r1
 8005a70:	80fb      	strh	r3, [r7, #6]
 8005a72:	4613      	mov	r3, r2
 8005a74:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_HslSaturation_Status callback received for element %d \r\n", elementIndex);
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	483a      	ldr	r0, [pc, #232]	@ (8005b68 <Appli_Light_HslSaturation_Status+0x108>)
 8005a7e:	f007 fd4d 	bl	800d51c <TraceHeader>
 8005a82:	797b      	ldrb	r3, [r7, #5]
 8005a84:	4619      	mov	r1, r3
 8005a86:	4839      	ldr	r0, [pc, #228]	@ (8005b6c <Appli_Light_HslSaturation_Status+0x10c>)
 8005a88:	f023 f9f2 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8275!\r\n");
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	4836      	ldr	r0, [pc, #216]	@ (8005b68 <Appli_Light_HslSaturation_Status+0x108>)
 8005a90:	f007 fd44 	bl	800d51c <TraceHeader>
 8005a94:	4836      	ldr	r0, [pc, #216]	@ (8005b70 <Appli_Light_HslSaturation_Status+0x110>)
 8005a96:	f023 fa53 	bl	8028f40 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e05a      	b.n	8005b56 <Appli_Light_HslSaturation_Status+0xf6>
  {
    if((i == 0) || (i == 2))
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <Appli_Light_HslSaturation_Status+0x4c>
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d105      	bne.n	8005ab8 <Appli_Light_HslSaturation_Status+0x58>
    {
      value = pHslSaturation_status[i];
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	827b      	strh	r3, [r7, #18]
 8005ab6:	e04b      	b.n	8005b50 <Appli_Light_HslSaturation_Status+0xf0>
    }
    else if(i == 1)
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d118      	bne.n	8005af0 <Appli_Light_HslSaturation_Status+0x90>
    {
      TRACE_M(TF_LIGHT,"Present Saturation: 0x%x (%d)\n\r",
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4829      	ldr	r0, [pc, #164]	@ (8005b68 <Appli_Light_HslSaturation_Status+0x108>)
 8005ac2:	f007 fd2b 	bl	800d51c <TraceHeader>
 8005ac6:	8a7a      	ldrh	r2, [r7, #18]
 8005ac8:	68f9      	ldr	r1, [r7, #12]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	440b      	add	r3, r1
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	ea42 0003 	orr.w	r0, r2, r3
 8005ad6:	8a7a      	ldrh	r2, [r7, #18]
 8005ad8:	68f9      	ldr	r1, [r7, #12]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	440b      	add	r3, r1
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4601      	mov	r1, r0
 8005ae8:	4822      	ldr	r0, [pc, #136]	@ (8005b74 <Appli_Light_HslSaturation_Status+0x114>)
 8005aea:	f023 f9c1 	bl	8028e70 <iprintf>
 8005aee:	e02f      	b.n	8005b50 <Appli_Light_HslSaturation_Status+0xf0>
              value | pHslSaturation_status[i] << 8,
              value | pHslSaturation_status[i] << 8);
    }
    else if(i == 3)
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d118      	bne.n	8005b28 <Appli_Light_HslSaturation_Status+0xc8>
    {
      TRACE_M(TF_LIGHT,"Target Saturation: 0x%x (%d)\n\r",
 8005af6:	2100      	movs	r1, #0
 8005af8:	481b      	ldr	r0, [pc, #108]	@ (8005b68 <Appli_Light_HslSaturation_Status+0x108>)
 8005afa:	f007 fd0f 	bl	800d51c <TraceHeader>
 8005afe:	8a7a      	ldrh	r2, [r7, #18]
 8005b00:	68f9      	ldr	r1, [r7, #12]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	440b      	add	r3, r1
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	021b      	lsls	r3, r3, #8
 8005b0a:	ea42 0003 	orr.w	r0, r2, r3
 8005b0e:	8a7a      	ldrh	r2, [r7, #18]
 8005b10:	68f9      	ldr	r1, [r7, #12]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	440b      	add	r3, r1
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	4601      	mov	r1, r0
 8005b20:	4815      	ldr	r0, [pc, #84]	@ (8005b78 <Appli_Light_HslSaturation_Status+0x118>)
 8005b22:	f023 f9a5 	bl	8028e70 <iprintf>
 8005b26:	e013      	b.n	8005b50 <Appli_Light_HslSaturation_Status+0xf0>
              value | pHslSaturation_status[i] << 8,
              value | pHslSaturation_status[i] << 8);
    }
    else if(i == 4)
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d110      	bne.n	8005b50 <Appli_Light_HslSaturation_Status+0xf0>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\n\r",
 8005b2e:	2100      	movs	r1, #0
 8005b30:	480d      	ldr	r0, [pc, #52]	@ (8005b68 <Appli_Light_HslSaturation_Status+0x108>)
 8005b32:	f007 fcf3 	bl	800d51c <TraceHeader>
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	4413      	add	r3, r2
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	480c      	ldr	r0, [pc, #48]	@ (8005b7c <Appli_Light_HslSaturation_Status+0x11c>)
 8005b4c:	f023 f990 	bl	8028e70 <iprintf>
  for(i = 0; i < pLength; i++)
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	3301      	adds	r3, #1
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d3a0      	bcc.n	8005aa0 <Appli_Light_HslSaturation_Status+0x40>
              pHslSaturation_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	080307a4 	.word	0x080307a4
 8005b6c:	0802de1c 	.word	0x0802de1c
 8005b70:	0802de5c 	.word	0x0802de5c
 8005b74:	0802de64 	.word	0x0802de64
 8005b78:	0802de84 	.word	0x0802de84
 8005b7c:	0802dd8c 	.word	0x0802dd8c

08005b80 <Appli_Light_HslDefault_Status>:
* @param  pLength: length of data
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_HslDefault_Status(MOBLEUINT8 const *pHslDefault_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	460b      	mov	r3, r1
 8005b90:	80fb      	strh	r3, [r7, #6]
 8005b92:	4613      	mov	r3, r2
 8005b94:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_HslDefault_Status callback received for element %d \r\n", elementIndex);  
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	483f      	ldr	r0, [pc, #252]	@ (8005c9c <Appli_Light_HslDefault_Status+0x11c>)
 8005b9e:	f007 fcbd 	bl	800d51c <TraceHeader>
 8005ba2:	797b      	ldrb	r3, [r7, #5]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	483e      	ldr	r0, [pc, #248]	@ (8005ca0 <Appli_Light_HslDefault_Status+0x120>)
 8005ba8:	f023 f962 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#827C!\r\n");
 8005bac:	2100      	movs	r1, #0
 8005bae:	483b      	ldr	r0, [pc, #236]	@ (8005c9c <Appli_Light_HslDefault_Status+0x11c>)
 8005bb0:	f007 fcb4 	bl	800d51c <TraceHeader>
 8005bb4:	483b      	ldr	r0, [pc, #236]	@ (8005ca4 <Appli_Light_HslDefault_Status+0x124>)
 8005bb6:	f023 f9c3 	bl	8028f40 <puts>

#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	e064      	b.n	8005c8a <Appli_Light_HslDefault_Status+0x10a>
  {
    if((i == 0) || (i == 2) || (i == 4))
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d005      	beq.n	8005bd2 <Appli_Light_HslDefault_Status+0x52>
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d002      	beq.n	8005bd2 <Appli_Light_HslDefault_Status+0x52>
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d105      	bne.n	8005bde <Appli_Light_HslDefault_Status+0x5e>
    {
      value = pHslDefault_status[i];
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	827b      	strh	r3, [r7, #18]
 8005bdc:	e052      	b.n	8005c84 <Appli_Light_HslDefault_Status+0x104>
    }
    else if(i == 1)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d118      	bne.n	8005c16 <Appli_Light_HslDefault_Status+0x96>
    {
      TRACE_M(TF_LIGHT,"Lightness: 0x%x (%d)\n\r",
 8005be4:	2100      	movs	r1, #0
 8005be6:	482d      	ldr	r0, [pc, #180]	@ (8005c9c <Appli_Light_HslDefault_Status+0x11c>)
 8005be8:	f007 fc98 	bl	800d51c <TraceHeader>
 8005bec:	8a7a      	ldrh	r2, [r7, #18]
 8005bee:	68f9      	ldr	r1, [r7, #12]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	440b      	add	r3, r1
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	021b      	lsls	r3, r3, #8
 8005bf8:	ea42 0003 	orr.w	r0, r2, r3
 8005bfc:	8a7a      	ldrh	r2, [r7, #18]
 8005bfe:	68f9      	ldr	r1, [r7, #12]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	440b      	add	r3, r1
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4601      	mov	r1, r0
 8005c0e:	4826      	ldr	r0, [pc, #152]	@ (8005ca8 <Appli_Light_HslDefault_Status+0x128>)
 8005c10:	f023 f92e 	bl	8028e70 <iprintf>
 8005c14:	e036      	b.n	8005c84 <Appli_Light_HslDefault_Status+0x104>
              value | pHslDefault_status[i] << 8,
              value | pHslDefault_status[i] << 8);
    }
    else if(i == 3)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d118      	bne.n	8005c4e <Appli_Light_HslDefault_Status+0xce>
    {
      TRACE_M(TF_LIGHT,"Hue: 0x%x (%d)\n\r",
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	481f      	ldr	r0, [pc, #124]	@ (8005c9c <Appli_Light_HslDefault_Status+0x11c>)
 8005c20:	f007 fc7c 	bl	800d51c <TraceHeader>
 8005c24:	8a7a      	ldrh	r2, [r7, #18]
 8005c26:	68f9      	ldr	r1, [r7, #12]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	440b      	add	r3, r1
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	ea42 0003 	orr.w	r0, r2, r3
 8005c34:	8a7a      	ldrh	r2, [r7, #18]
 8005c36:	68f9      	ldr	r1, [r7, #12]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	440b      	add	r3, r1
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	021b      	lsls	r3, r3, #8
 8005c40:	4313      	orrs	r3, r2
 8005c42:	461a      	mov	r2, r3
 8005c44:	4601      	mov	r1, r0
 8005c46:	4819      	ldr	r0, [pc, #100]	@ (8005cac <Appli_Light_HslDefault_Status+0x12c>)
 8005c48:	f023 f912 	bl	8028e70 <iprintf>
 8005c4c:	e01a      	b.n	8005c84 <Appli_Light_HslDefault_Status+0x104>
              value | pHslDefault_status[i] << 8,
              value | pHslDefault_status[i] << 8);
    }
    else if(i == 5)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b05      	cmp	r3, #5
 8005c52:	d117      	bne.n	8005c84 <Appli_Light_HslDefault_Status+0x104>
    {
      TRACE_M(TF_LIGHT,"Saturation: 0x%x (%d)\n\r",
 8005c54:	2100      	movs	r1, #0
 8005c56:	4811      	ldr	r0, [pc, #68]	@ (8005c9c <Appli_Light_HslDefault_Status+0x11c>)
 8005c58:	f007 fc60 	bl	800d51c <TraceHeader>
 8005c5c:	8a7a      	ldrh	r2, [r7, #18]
 8005c5e:	68f9      	ldr	r1, [r7, #12]
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	440b      	add	r3, r1
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	ea42 0003 	orr.w	r0, r2, r3
 8005c6c:	8a7a      	ldrh	r2, [r7, #18]
 8005c6e:	68f9      	ldr	r1, [r7, #12]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	440b      	add	r3, r1
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	4601      	mov	r1, r0
 8005c7e:	480c      	ldr	r0, [pc, #48]	@ (8005cb0 <Appli_Light_HslDefault_Status+0x130>)
 8005c80:	f023 f8f6 	bl	8028e70 <iprintf>
  for(i = 0; i < pLength; i++)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	3301      	adds	r3, #1
 8005c88:	617b      	str	r3, [r7, #20]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d396      	bcc.n	8005bc0 <Appli_Light_HslDefault_Status+0x40>
              value | pHslDefault_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	080307c8 	.word	0x080307c8
 8005ca0:	0802dea4 	.word	0x0802dea4
 8005ca4:	0802dee0 	.word	0x0802dee0
 8005ca8:	0802dcb0 	.word	0x0802dcb0
 8005cac:	0802dee8 	.word	0x0802dee8
 8005cb0:	0802defc 	.word	0x0802defc

08005cb4 <Appli_Light_HslRange_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_HslRange_Status(MOBLEUINT8 const *pHslRange_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	80fb      	strh	r3, [r7, #6]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_HslRange_Status callback received for element %d \r\n", elementIndex); 
 8005cce:	2100      	movs	r1, #0
 8005cd0:	485a      	ldr	r0, [pc, #360]	@ (8005e3c <Appli_Light_HslRange_Status+0x188>)
 8005cd2:	f007 fc23 	bl	800d51c <TraceHeader>
 8005cd6:	797b      	ldrb	r3, [r7, #5]
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4859      	ldr	r0, [pc, #356]	@ (8005e40 <Appli_Light_HslRange_Status+0x18c>)
 8005cdc:	f023 f8c8 	bl	8028e70 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#827E!\r\n");
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	4856      	ldr	r0, [pc, #344]	@ (8005e3c <Appli_Light_HslRange_Status+0x188>)
 8005ce4:	f007 fc1a 	bl	800d51c <TraceHeader>
 8005ce8:	4856      	ldr	r0, [pc, #344]	@ (8005e44 <Appli_Light_HslRange_Status+0x190>)
 8005cea:	f023 f929 	bl	8028f40 <puts>
  
    
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	e098      	b.n	8005e26 <Appli_Light_HslRange_Status+0x172>
  {
    if(i == 0)
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d111      	bne.n	8005d1e <Appli_Light_HslRange_Status+0x6a>
    {
      TRACE_M(TF_LIGHT,"Status Code: 0x%x (%d)\n\r",
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	484f      	ldr	r0, [pc, #316]	@ (8005e3c <Appli_Light_HslRange_Status+0x188>)
 8005cfe:	f007 fc0d 	bl	800d51c <TraceHeader>
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	4413      	add	r3, r2
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4413      	add	r3, r2
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	484c      	ldr	r0, [pc, #304]	@ (8005e48 <Appli_Light_HslRange_Status+0x194>)
 8005d18:	f023 f8aa 	bl	8028e70 <iprintf>
 8005d1c:	e080      	b.n	8005e20 <Appli_Light_HslRange_Status+0x16c>
              pHslRange_status[i],
              pHslRange_status[i]);
    }
    else if((i == 1) || (i == 3) || (i == 5) || (i == 7))
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d008      	beq.n	8005d36 <Appli_Light_HslRange_Status+0x82>
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d005      	beq.n	8005d36 <Appli_Light_HslRange_Status+0x82>
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b05      	cmp	r3, #5
 8005d2e:	d002      	beq.n	8005d36 <Appli_Light_HslRange_Status+0x82>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2b07      	cmp	r3, #7
 8005d34:	d105      	bne.n	8005d42 <Appli_Light_HslRange_Status+0x8e>
    {
      value = pHslRange_status[i];
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	827b      	strh	r3, [r7, #18]
 8005d40:	e06e      	b.n	8005e20 <Appli_Light_HslRange_Status+0x16c>
    }
    else if(i == 2)
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d118      	bne.n	8005d7a <Appli_Light_HslRange_Status+0xc6>
    {
      TRACE_M(TF_LIGHT,"Hue Range Min: 0x%x (%d)\n\r",
 8005d48:	2100      	movs	r1, #0
 8005d4a:	483c      	ldr	r0, [pc, #240]	@ (8005e3c <Appli_Light_HslRange_Status+0x188>)
 8005d4c:	f007 fbe6 	bl	800d51c <TraceHeader>
 8005d50:	8a7a      	ldrh	r2, [r7, #18]
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	440b      	add	r3, r1
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	021b      	lsls	r3, r3, #8
 8005d5c:	ea42 0003 	orr.w	r0, r2, r3
 8005d60:	8a7a      	ldrh	r2, [r7, #18]
 8005d62:	68f9      	ldr	r1, [r7, #12]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	440b      	add	r3, r1
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	461a      	mov	r2, r3
 8005d70:	4601      	mov	r1, r0
 8005d72:	4836      	ldr	r0, [pc, #216]	@ (8005e4c <Appli_Light_HslRange_Status+0x198>)
 8005d74:	f023 f87c 	bl	8028e70 <iprintf>
 8005d78:	e052      	b.n	8005e20 <Appli_Light_HslRange_Status+0x16c>
              value | pHslRange_status[i] << 8,
              value | pHslRange_status[i] << 8);
    }
    else if(i == 4)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d118      	bne.n	8005db2 <Appli_Light_HslRange_Status+0xfe>
    {
      TRACE_M(TF_LIGHT,"Hue Range Max: 0x%x (%d)\n\r",
 8005d80:	2100      	movs	r1, #0
 8005d82:	482e      	ldr	r0, [pc, #184]	@ (8005e3c <Appli_Light_HslRange_Status+0x188>)
 8005d84:	f007 fbca 	bl	800d51c <TraceHeader>
 8005d88:	8a7a      	ldrh	r2, [r7, #18]
 8005d8a:	68f9      	ldr	r1, [r7, #12]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	440b      	add	r3, r1
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	ea42 0003 	orr.w	r0, r2, r3
 8005d98:	8a7a      	ldrh	r2, [r7, #18]
 8005d9a:	68f9      	ldr	r1, [r7, #12]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	440b      	add	r3, r1
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	4313      	orrs	r3, r2
 8005da6:	461a      	mov	r2, r3
 8005da8:	4601      	mov	r1, r0
 8005daa:	4829      	ldr	r0, [pc, #164]	@ (8005e50 <Appli_Light_HslRange_Status+0x19c>)
 8005dac:	f023 f860 	bl	8028e70 <iprintf>
 8005db0:	e036      	b.n	8005e20 <Appli_Light_HslRange_Status+0x16c>
              value | pHslRange_status[i] << 8,
              value | pHslRange_status[i] << 8);
    }
    else if(i == 6)
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b06      	cmp	r3, #6
 8005db6:	d118      	bne.n	8005dea <Appli_Light_HslRange_Status+0x136>
    {
      TRACE_M(TF_LIGHT,"Saturation Range Min: 0x%x (%d)\n\r",
 8005db8:	2100      	movs	r1, #0
 8005dba:	4820      	ldr	r0, [pc, #128]	@ (8005e3c <Appli_Light_HslRange_Status+0x188>)
 8005dbc:	f007 fbae 	bl	800d51c <TraceHeader>
 8005dc0:	8a7a      	ldrh	r2, [r7, #18]
 8005dc2:	68f9      	ldr	r1, [r7, #12]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	440b      	add	r3, r1
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	ea42 0003 	orr.w	r0, r2, r3
 8005dd0:	8a7a      	ldrh	r2, [r7, #18]
 8005dd2:	68f9      	ldr	r1, [r7, #12]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	440b      	add	r3, r1
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	461a      	mov	r2, r3
 8005de0:	4601      	mov	r1, r0
 8005de2:	481c      	ldr	r0, [pc, #112]	@ (8005e54 <Appli_Light_HslRange_Status+0x1a0>)
 8005de4:	f023 f844 	bl	8028e70 <iprintf>
 8005de8:	e01a      	b.n	8005e20 <Appli_Light_HslRange_Status+0x16c>
              value | pHslRange_status[i] << 8,
              value | pHslRange_status[i] << 8);
    }
    else if(i == 8)
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d117      	bne.n	8005e20 <Appli_Light_HslRange_Status+0x16c>
    {
      TRACE_M(TF_LIGHT,"Saturation Range Max: 0x%x (%d)\n\r",
 8005df0:	2100      	movs	r1, #0
 8005df2:	4812      	ldr	r0, [pc, #72]	@ (8005e3c <Appli_Light_HslRange_Status+0x188>)
 8005df4:	f007 fb92 	bl	800d51c <TraceHeader>
 8005df8:	8a7a      	ldrh	r2, [r7, #18]
 8005dfa:	68f9      	ldr	r1, [r7, #12]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	440b      	add	r3, r1
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	ea42 0003 	orr.w	r0, r2, r3
 8005e08:	8a7a      	ldrh	r2, [r7, #18]
 8005e0a:	68f9      	ldr	r1, [r7, #12]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	440b      	add	r3, r1
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	4313      	orrs	r3, r2
 8005e16:	461a      	mov	r2, r3
 8005e18:	4601      	mov	r1, r0
 8005e1a:	480f      	ldr	r0, [pc, #60]	@ (8005e58 <Appli_Light_HslRange_Status+0x1a4>)
 8005e1c:	f023 f828 	bl	8028e70 <iprintf>
  for(i = 0; i < pLength; i++)
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	3301      	adds	r3, #1
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	f4ff af62 	bcc.w	8005cf4 <Appli_Light_HslRange_Status+0x40>
              value | pHslRange_status[i] << 8);
    }
  }
#endif

  return MOBLE_RESULT_SUCCESS;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	080307e8 	.word	0x080307e8
 8005e40:	0802df14 	.word	0x0802df14
 8005e44:	0802df50 	.word	0x0802df50
 8005e48:	0802df58 	.word	0x0802df58
 8005e4c:	0802df74 	.word	0x0802df74
 8005e50:	0802df90 	.word	0x0802df90
 8005e54:	0802dfac 	.word	0x0802dfac
 8005e58:	0802dfd0 	.word	0x0802dfd0

08005e5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005e60:	f3bf 8f4f 	dsb	sy
}
 8005e64:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005e66:	4b06      	ldr	r3, [pc, #24]	@ (8005e80 <__NVIC_SystemReset+0x24>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005e6e:	4904      	ldr	r1, [pc, #16]	@ (8005e80 <__NVIC_SystemReset+0x24>)
 8005e70:	4b04      	ldr	r3, [pc, #16]	@ (8005e84 <__NVIC_SystemReset+0x28>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e76:	f3bf 8f4f 	dsb	sy
}
 8005e7a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005e7c:	bf00      	nop
 8005e7e:	e7fd      	b.n	8005e7c <__NVIC_SystemReset+0x20>
 8005e80:	e000ed00 	.word	0xe000ed00
 8005e84:	05fa0004 	.word	0x05fa0004

08005e88 <LL_FLASH_IsActiveFlag_OperationSuspended>:
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8005e8c:	4b07      	ldr	r3, [pc, #28]	@ (8005eac <LL_FLASH_IsActiveFlag_OperationSuspended+0x24>)
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e98:	d101      	bne.n	8005e9e <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	58004000 	.word	0x58004000

08005eb0 <Appli_ShortButtonPress>:
* @brief  Function calls when a button is pressed for short duration  
* @param  void
* @retval void
*/ 
static void Appli_ShortButtonPress(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  BLEMesh_ModelsCommand();
 8005eb4:	f001 f8a2 	bl	8006ffc <BLEMesh_ModelsCommand>
}
 8005eb8:	bf00      	nop
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <Appli_LongButtonPress>:
* @brief  Function calls when a button is pressed for Long duration  
* @param  void
* @retval void
*/ 
static void Appli_LongButtonPress(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
//  TRACE_I(TF_LIGHT_CLIENT_M, "----------- API LIGHT LC ON OFF GET ------------- \r\n");
//  Appli_LightClient_API(0, LIGHT_LC_ON_OFF_GET, NULL);
  
  /** LIGHT LC PROPERTY **/
//LIGHT_CONTROL_AMBIENT_LUXLEVEL_ON_PID  : 0x002B
  pPropertyId[0]= 0x2B;           // Property ID byte 0 : Property ID identifying a Light LC Property.
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8005eec <Appli_LongButtonPress+0x30>)
 8005ec2:	222b      	movs	r2, #43	@ 0x2b
 8005ec4:	701a      	strb	r2, [r3, #0]
  pPropertyId[1]= 0x00;           // Property ID byte 1 : Property ID identifying a Light LC Property.
 8005ec6:	4b09      	ldr	r3, [pc, #36]	@ (8005eec <Appli_LongButtonPress+0x30>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	705a      	strb	r2, [r3, #1]
//  Appli_LightClient_API(0, LIGHT_LC_PROPERTY_GET, pPropertyId);
  

  /* SENSOR APIs */
  //PRESENT_AMBIENT_TEMPERATURE_PID : 0x004F
  pPropertyId[0]= 0x4F;           // Property ID byte 0 : Property ID for the sensor
 8005ecc:	4b07      	ldr	r3, [pc, #28]	@ (8005eec <Appli_LongButtonPress+0x30>)
 8005ece:	224f      	movs	r2, #79	@ 0x4f
 8005ed0:	701a      	strb	r2, [r3, #0]
  pPropertyId[1]= 0x00;           // Property ID byte 1 : Property ID for the sensor
 8005ed2:	4b06      	ldr	r3, [pc, #24]	@ (8005eec <Appli_LongButtonPress+0x30>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	705a      	strb	r2, [r3, #1]
    /** SENSOR SETTINGS **/
//  TRACE_I(TF_SENSOR_CLIENT_M, "----------- API SENSOR SETTINGS GET ------------- \r\n");
//  Appli_SensorsClient_API(0, SENSOR_SETTINGS_GET, pPropertyId);
  
    /** SENSOR SETTING **/
  pPropertyId[2]= 0xAD;           // Sensor Setting Property ID byte 0 : Property ID for the sensor setting
 8005ed8:	4b04      	ldr	r3, [pc, #16]	@ (8005eec <Appli_LongButtonPress+0x30>)
 8005eda:	22ad      	movs	r2, #173	@ 0xad
 8005edc:	709a      	strb	r2, [r3, #2]
  pPropertyId[3]= 0x00;           // Sensor Setting Property ID byte 1 : Property ID for the sensor setting
 8005ede:	4b03      	ldr	r3, [pc, #12]	@ (8005eec <Appli_LongButtonPress+0x30>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	70da      	strb	r2, [r3, #3]
//  pPropertyId[2]= 0x01;           // Raw Value X1 byte 0 : Raw value identifying a starting column.
//  pPropertyId[3]= 0x02;           // Raw Value X2 byte 0 : Raw value identifying an ending column.
//  TRACE_I(TF_SENSOR_CLIENT_M, "----------- API SENSOR SERIES GET ------------- \r\n");
//  Appli_SensorsClient_API(0, SENSOR_SERIES_GET, pPropertyId);
  
  IntensityPublish();
 8005ee4:	f000 fbee 	bl	80066c4 <IntensityPublish>
  
}
 8005ee8:	bf00      	nop
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	20004438 	.word	0x20004438

08005ef0 <Appli_UpdateButtonState>:
* @brief  Updates the button status  
* @param  int isPressed
* @retval void
*/ 
static void Appli_UpdateButtonState(int isPressed)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t t0 = 0,t1 = 1;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	2301      	movs	r3, #1
 8005efe:	60bb      	str	r3, [r7, #8]

  t0 = Clock_Time(); /* SW1 press timing */
 8005f00:	f001 ff8c 	bl	8007e1c <HAL_GetTick>
 8005f04:	60f8      	str	r0, [r7, #12]
  
  while(BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED);
 8005f06:	bf00      	nop
 8005f08:	2000      	movs	r0, #0
 8005f0a:	f001 fe89 	bl	8007c20 <BSP_PB_GetState>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0f9      	beq.n	8005f08 <Appli_UpdateButtonState+0x18>
  t1 = Clock_Time(); /* SW1 release timing */
 8005f14:	f001 ff82 	bl	8007e1c <HAL_GetTick>
 8005f18:	60b8      	str	r0, [r7, #8]
  
  if((t1 - t0) > LONG_PRESS_THRESHOLD)
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f24:	d902      	bls.n	8005f2c <Appli_UpdateButtonState+0x3c>
  {
    Appli_LongButtonPress();
 8005f26:	f7ff ffc9 	bl	8005ebc <Appli_LongButtonPress>
  else if((t1 - t0) > BOUNCE_THRESHOLD)
  {
    /* Button 1 short press action */
    Appli_ShortButtonPress();
  }
}
 8005f2a:	e006      	b.n	8005f3a <Appli_UpdateButtonState+0x4a>
  else if((t1 - t0) > BOUNCE_THRESHOLD)
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b14      	cmp	r3, #20
 8005f34:	d901      	bls.n	8005f3a <Appli_UpdateButtonState+0x4a>
    Appli_ShortButtonPress();
 8005f36:	f7ff ffbb 	bl	8005eb0 <Appli_ShortButtonPress>
}
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <Mesh_Task>:
* @brief  task for the BLE MESH, the MESH Models and the Appli processes  
* @param  void
* @retval void
*/ 
static void Mesh_Task()
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  BLEMesh_Process();
 8005f48:	f01f ffc4 	bl	8025ed4 <BLEMesh_Process>
  BLEMesh_ModelsProcess(); /* Models Processing */
 8005f4c:	f001 f84c 	bl	8006fe8 <BLEMesh_ModelsProcess>
  
  if((UnprovisionInProgress > 0) &&
 8005f50:	4b0f      	ldr	r3, [pc, #60]	@ (8005f90 <Mesh_Task+0x4c>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d015      	beq.n	8005f84 <Mesh_Task+0x40>
     (!LL_FLASH_IsActiveFlag_OperationSuspended()))
 8005f58:	f7ff ff96 	bl	8005e88 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8005f5c:	4603      	mov	r3, r0
  if((UnprovisionInProgress > 0) &&
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d110      	bne.n	8005f84 <Mesh_Task+0x40>
  {
    UnprovisionInProgress = 0;
 8005f62:	4b0b      	ldr	r3, [pc, #44]	@ (8005f90 <Mesh_Task+0x4c>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	701a      	strb	r2, [r3, #0]
    AppliNvm_ClearModelState();
 8005f68:	f000 fc57 	bl	800681a <AppliNvm_ClearModelState>
    PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 8005f6c:	4b09      	ldr	r3, [pc, #36]	@ (8005f94 <Mesh_Task+0x50>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2104      	movs	r1, #4
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 fa60 	bl	8007438 <PalNvmErase>
    TRACE_I(TF_PROVISION,"NVM erased\r\n");      
 8005f78:	4807      	ldr	r0, [pc, #28]	@ (8005f98 <Mesh_Task+0x54>)
 8005f7a:	f022 ffe1 	bl	8028f40 <puts>
    TRACE_I(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 8005f7e:	4807      	ldr	r0, [pc, #28]	@ (8005f9c <Mesh_Task+0x58>)
 8005f80:	f022 ffde 	bl	8028f40 <puts>
  }
    
#if (APPLI_OPTIM == 0)
  /* Set the task in the scheduler for the next execution */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);
 8005f84:	2100      	movs	r1, #0
 8005f86:	2002      	movs	r0, #2
 8005f88:	f010 fb5a 	bl	8016640 <UTIL_SEQ_SetTask>
#endif
#endif
}
 8005f8c:	bf00      	nop
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20004431 	.word	0x20004431
 8005f94:	2000444c 	.word	0x2000444c
 8005f98:	0802dff4 	.word	0x0802dff4
 8005f9c:	0802e000 	.word	0x0802e000

08005fa0 <Appli_Task>:
* @brief  task for the BLE MESH, the MESH Models and the Appli processes  
* @param  void
* @retval void
*/ 
static void Appli_Task()
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  Appli_Process();
 8005fa4:	f000 fb95 	bl	80066d2 <Appli_Process>
  
#if (APPLI_OPTIM == 0)
  /* Set the task in the scheduler for the next execution */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_APPLI_REQ_ID, CFG_SCH_PRIO_0);
 8005fa8:	2100      	movs	r1, #0
 8005faa:	2020      	movs	r0, #32
 8005fac:	f010 fb48 	bl	8016640 <UTIL_SEQ_SetTask>
#endif
#endif
}
 8005fb0:	bf00      	nop
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <Appli_LedCtrl>:
* @brief  Controls the state of on board LED
* @param  void
* @retval void
*/ 
void Appli_LedCtrl(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  if(Appli_LedState)
 8005fb8:	4b06      	ldr	r3, [pc, #24]	@ (8005fd4 <Appli_LedCtrl+0x20>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <Appli_LedCtrl+0x14>
  {
    BSP_LED_On(LED_BLUE);
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	f001 fd89 	bl	8007ad8 <BSP_LED_On>
  else
  {
    BSP_LED_Off(LED_BLUE);

  }
}
 8005fc6:	e002      	b.n	8005fce <Appli_LedCtrl+0x1a>
    BSP_LED_Off(LED_BLUE);
 8005fc8:	2000      	movs	r0, #0
 8005fca:	f001 fd9f 	bl	8007b0c <BSP_LED_Off>
}
 8005fce:	bf00      	nop
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	2000442a 	.word	0x2000442a

08005fd8 <Appli_LedBlink>:
* @brief  Blinks the on board LED  
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_LedBlink(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* Switch On the LED */
  Appli_LedState = 1;
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8006008 <Appli_LedBlink+0x30>)
 8005fde:	2201      	movs	r2, #1
 8005fe0:	701a      	strb	r2, [r3, #0]
  Appli_LedCtrl();
 8005fe2:	f7ff ffe7 	bl	8005fb4 <Appli_LedCtrl>
  Clock_Wait(500);
 8005fe6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005fea:	f7fb fc8e 	bl	800190a <HAL_Delay>
  
  /* Switch Off the LED */
  Appli_LedState = 0;
 8005fee:	4b06      	ldr	r3, [pc, #24]	@ (8006008 <Appli_LedBlink+0x30>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
  Appli_LedCtrl();
 8005ff4:	f7ff ffde 	bl	8005fb4 <Appli_LedCtrl>
  Clock_Wait(500);
 8005ff8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005ffc:	f7fb fc85 	bl	800190a <HAL_Delay>
  
  return MOBLE_RESULT_SUCCESS;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	2000442a 	.word	0x2000442a

0800600c <Appli_BleStackInitCb>:
* @brief  initializes BLE Stack    
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleStackInitCb()
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  /* BLE Stack initialization */
  /* Not Required in BLE */
  return MOBLE_RESULT_SUCCESS;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <Appli_BleSetTxPowerCb>:
* @brief  Sets transmission power of RF 
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleSetTxPowerCb(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
  /* API to change the Transmission power of BLE Device */
  /* uint8_t en_high_power, uint8_t pa_level
  en_high_power Can be only 0 or 1. Set high power bit on or off.
  pa_level Can be from 0 to 7. Set the PA level value
  */ 
  status = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8006022:	2118      	movs	r1, #24
 8006024:	2001      	movs	r0, #1
 8006026:	f00e ff51 	bl	8014ecc <aci_hal_set_tx_power_level>
 800602a:	4603      	mov	r3, r0
 800602c:	71fb      	strb	r3, [r7, #7]
  if (status)
 800602e:	79fb      	ldrb	r3, [r7, #7]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <Appli_BleSetTxPowerCb+0x1c>
    return MOBLE_RESULT_FAIL;
 8006034:	2302      	movs	r3, #2
 8006036:	e000      	b.n	800603a <Appli_BleSetTxPowerCb+0x1e>
  else
    return MOBLE_RESULT_SUCCESS;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
	...

08006044 <Appli_BleSetUUIDCb>:
* @brief  SET UUID value 
* @param  uuid_prefix_data : Pointer of UUID buffer data
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleSetUUIDCb(MOBLEUINT8 *uuid_prefix_data)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
      Y = 4 i.e. Conforming to the current spec 
    For UUID information refer RFC4122
  */
  
  /* copy UUID prefix data*/
  uint8_t uuid_buff[10] = {NC_NODE_CONFIG_FEATURES, NC_NODE_CONFIG_MODELS, 0x4F, 0xAE, 0x7D, 0xEC};/*random value by user */
 800604c:	4a16      	ldr	r2, [pc, #88]	@ (80060a8 <Appli_BleSetUUIDCb+0x64>)
 800604e:	f107 030c 	add.w	r3, r7, #12
 8006052:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006056:	6018      	str	r0, [r3, #0]
 8006058:	3304      	adds	r3, #4
 800605a:	8019      	strh	r1, [r3, #0]
 800605c:	3302      	adds	r3, #2
 800605e:	0c0a      	lsrs	r2, r1, #16
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	f107 0313 	add.w	r3, r7, #19
 8006066:	2200      	movs	r2, #0
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	709a      	strb	r2, [r3, #2]

   uuid_buff[6] = 0x4B;  /* 0x4B => 4 : Random */
 800606c:	234b      	movs	r3, #75	@ 0x4b
 800606e:	74bb      	strb	r3, [r7, #18]
   uuid_buff[7] = 'S' ;  /* User define value */
 8006070:	2353      	movs	r3, #83	@ 0x53
 8006072:	74fb      	strb	r3, [r7, #19]
   uuid_buff[8] = 0xA1;  /* 0xA1 => A : Conforming to the current Spec */
 8006074:	23a1      	movs	r3, #161	@ 0xa1
 8006076:	753b      	strb	r3, [r7, #20]
   uuid_buff[9] = 'T' ;  /* User define value */  
 8006078:	2354      	movs	r3, #84	@ 0x54
 800607a:	757b      	strb	r3, [r7, #21]

   memcpy(uuid_prefix_data,uuid_buff,sizeof(uuid_buff));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	461a      	mov	r2, r3
 8006080:	f107 030c 	add.w	r3, r7, #12
 8006084:	cb03      	ldmia	r3!, {r0, r1}
 8006086:	6010      	str	r0, [r2, #0]
 8006088:	6051      	str	r1, [r2, #4]
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	8113      	strh	r3, [r2, #8]
   memcpy(&uuid_prefix_data[10],bdaddr,6);  /* Copy bdaddr to last 6 bytes of UUID */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	330a      	adds	r3, #10
 8006092:	2206      	movs	r2, #6
 8006094:	4905      	ldr	r1, [pc, #20]	@ (80060ac <Appli_BleSetUUIDCb+0x68>)
 8006096:	4618      	mov	r0, r3
 8006098:	f023 f919 	bl	80292ce <memcpy>
   
   return MOBLE_RESULT_SUCCESS;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	0802e02c 	.word	0x0802e02c
 80060ac:	2000443c 	.word	0x2000443c

080060b0 <Appli_BleSetProductInfoCB>:
* @brief  SET CID , PID and VID values 
* @param  company_product_info : vendor fill product information in this buffer
* @retval MOBLE_RESULT status of result
*/
MOBLE_RESULT Appli_BleSetProductInfoCB(MOBLEUINT8 *company_product_info)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* CID : provide 16-bit company identifier assigned by the Bluetooth SIG */
  uint16_t company_id                   = COMPANY_ID;
 80060b8:	2330      	movs	r3, #48	@ 0x30
 80060ba:	81fb      	strh	r3, [r7, #14]
  
  /* PID : Provide 16-bit vendor-assigned product identifier */
  uint16_t product_id                   = PRODUCT_ID;
 80060bc:	2302      	movs	r3, #2
 80060be:	81bb      	strh	r3, [r7, #12]
  
  /* VID : Provide 16-bit vendor-assigned product version identifier*/
  uint16_t product_version_id           = PRODUCT_VERSION_ID;
 80060c0:	f44f 7385 	mov.w	r3, #266	@ 0x10a
 80060c4:	817b      	strh	r3, [r7, #10]
  
  memcpy(company_product_info + 0,(void *)&company_id,sizeof(company_id));
 80060c6:	89fa      	ldrh	r2, [r7, #14]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	801a      	strh	r2, [r3, #0]
  memcpy(company_product_info + 2 ,(void *)&product_id,sizeof(product_id));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3302      	adds	r3, #2
 80060d0:	89ba      	ldrh	r2, [r7, #12]
 80060d2:	801a      	strh	r2, [r3, #0]
  memcpy(company_product_info + 4 ,(void *)&product_version_id,sizeof(product_version_id));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	3304      	adds	r3, #4
 80060d8:	897a      	ldrh	r2, [r7, #10]
 80060da:	801a      	strh	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <Appli_BleGattConnectionCompleteCb>:
* @brief  Call back function called when GATT Connection Created  
* @param  none
* @retval none
*/ 
void Appli_BleGattConnectionCompleteCb(void)
{ 
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  ProvisionFlag = 1;
 80060f0:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <Appli_BleGattConnectionCompleteCb+0x1c>)
 80060f2:	2201      	movs	r2, #1
 80060f4:	701a      	strb	r2, [r3, #0]
  /* Proxy Node, will be called whenever Gatt connection is established */
  /* Turn ON Red LED*/
  ProxyFlag = 1;
 80060f6:	4b05      	ldr	r3, [pc, #20]	@ (800610c <Appli_BleGattConnectionCompleteCb+0x20>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	701a      	strb	r2, [r3, #0]
  BSP_LED_On(LED_GREEN);
 80060fc:	2001      	movs	r0, #1
 80060fe:	f001 fceb 	bl	8007ad8 <BSP_LED_On>
}
 8006102:	bf00      	nop
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20004430 	.word	0x20004430
 800610c:	2000442f 	.word	0x2000442f

08006110 <Appli_BleGattDisconnectionCompleteCb>:
* @brief  Call back function called when GATT Disconnection Complete  
* @param  none
* @retval none
*/ 
void Appli_BleGattDisconnectionCompleteCb(void)
{ 
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  ProvisionFlag = 0;
 8006114:	4b05      	ldr	r3, [pc, #20]	@ (800612c <Appli_BleGattDisconnectionCompleteCb+0x1c>)
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
  /* Proxy Node, will be called whenever Gatt disconnected */
  /* Turn Off Red LED*/
  ProxyFlag = 0;
 800611a:	4b05      	ldr	r3, [pc, #20]	@ (8006130 <Appli_BleGattDisconnectionCompleteCb+0x20>)
 800611c:	2200      	movs	r2, #0
 800611e:	701a      	strb	r2, [r3, #0]
  BSP_LED_Off(LED_GREEN);
 8006120:	2001      	movs	r0, #1
 8006122:	f001 fcf3 	bl	8007b0c <BSP_LED_Off>
}
 8006126:	bf00      	nop
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20004430 	.word	0x20004430
 8006130:	2000442f 	.word	0x2000442f

08006134 <Appli_BleUnprovisionedIdentifyCb>:
* @brief Unprovisioned Node Identification
* @param MOBLEUINT8 data 
* @retval none
*/
void Appli_BleUnprovisionedIdentifyCb(MOBLEUINT8 data)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	71fb      	strb	r3, [r7, #7]
#ifdef ENABLE_AUTH_TYPE_OUTPUT_OOB
  PrvngInProcess = 1;  
#endif   
  TRACE_I(TF_PROVISION,"Unprovisioned Node Identifier received: %02x\n\r", data);    
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	4619      	mov	r1, r3
 8006142:	4803      	ldr	r0, [pc, #12]	@ (8006150 <Appli_BleUnprovisionedIdentifyCb+0x1c>)
 8006144:	f022 fe94 	bl	8028e70 <iprintf>
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	0802e038 	.word	0x0802e038

08006154 <Appli_BleSetNumberOfElementsCb>:
* @brief  Set Number of Elements in a Node
* @param  none
* @retval Sending the value to BLE Mesh Library
*/ 
MOBLEUINT8 Appli_BleSetNumberOfElementsCb(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  if(NumberOfElements > BLEMesh_GetNumberOfElements())
 8006158:	f016 fcc6 	bl	801cae8 <BLEMesh_GetNumberOfElements>
 800615c:	4603      	mov	r3, r0
 800615e:	461a      	mov	r2, r3
 8006160:	4b0b      	ldr	r3, [pc, #44]	@ (8006190 <Appli_BleSetNumberOfElementsCb+0x3c>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d206      	bcs.n	8006176 <Appli_BleSetNumberOfElementsCb+0x22>
  {
    TRACE_I(TF_MISC, "Number of Elements enabled in application exceeding from Library Capability!\r\n"); 
 8006168:	480a      	ldr	r0, [pc, #40]	@ (8006194 <Appli_BleSetNumberOfElementsCb+0x40>)
 800616a:	f022 fee9 	bl	8028f40 <puts>
    return BLEMesh_GetNumberOfElements();
 800616e:	f016 fcbb 	bl	801cae8 <BLEMesh_GetNumberOfElements>
 8006172:	4603      	mov	r3, r0
 8006174:	e00a      	b.n	800618c <Appli_BleSetNumberOfElementsCb+0x38>
  }
  
  else if(NumberOfElements == 0)
 8006176:	4b06      	ldr	r3, [pc, #24]	@ (8006190 <Appli_BleSetNumberOfElementsCb+0x3c>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d104      	bne.n	8006188 <Appli_BleSetNumberOfElementsCb+0x34>
  {
    TRACE_I(TF_MISC,"Number Of Elements must be 1 or greater than 1!\r\n"); 
 800617e:	4806      	ldr	r0, [pc, #24]	@ (8006198 <Appli_BleSetNumberOfElementsCb+0x44>)
 8006180:	f022 fede 	bl	8028f40 <puts>
    return 1;
 8006184:	2301      	movs	r3, #1
 8006186:	e001      	b.n	800618c <Appli_BleSetNumberOfElementsCb+0x38>
  }
  
  else
  {
    return NumberOfElements;
 8006188:	4b01      	ldr	r3, [pc, #4]	@ (8006190 <Appli_BleSetNumberOfElementsCb+0x3c>)
 800618a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800618c:	4618      	mov	r0, r3
 800618e:	bd80      	pop	{r7, pc}
 8006190:	2000007f 	.word	0x2000007f
 8006194:	0802e068 	.word	0x0802e068
 8006198:	0802e0b8 	.word	0x0802e0b8

0800619c <Appli_BleAttentionTimerCb>:
* @brief  Sets the Attention Timer Callback function
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleAttentionTimerCb(void)
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
/* avoid printf, if low power feature is supported */  
#if (LOW_POWER_FEATURE == 0)
/*  TRACE_I(TF_MISC, " \r\n"); */
#endif /* LOW_POWER_FEATURE == 0 */
  return MOBLE_RESULT_SUCCESS;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <Appli_BleOutputOOBAuthCb>:
* @param  MOBLEUINT8* output_oob
* @param  MOBLEUINT8 size
* @retval void
*/ 
void Appli_BleOutputOOBAuthCb(MOBLEUINT8* output_oob, MOBLEUINT8 size)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
        ooBData |= (output_oob[i] << 8*i);
    }
    OutputOobData = ooBData;
    TRACE_I(TF_PROVISION,"Output OOB information for provisioner: %ld\n\r", ooBData);
  #endif
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <Appli_BleInputOOBAuthCb>:
* @brief  Call back function to provide Input OOB information
* @param  MOBLEUINT8 size
* @retval MOBLEUINT8*  
*/ 
MOBLEUINT8* Appli_BleInputOOBAuthCb(MOBLEUINT8 size)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	71fb      	strb	r3, [r7, #7]
  
  inputOOBDataReady = 0;
  return InputOobData; 
#endif
#else
  return NULL;
 80061ce:	2300      	movs	r3, #0
#endif
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <Appli_BleDisableFilterCb>:
* @brief  Application BLE Disable Filter 
* @param  none
* @retval Status is replied
*/
MOBLEUINT8 Appli_BleDisableFilterCb(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
    return DisableFilter;
 80061e0:	4b03      	ldr	r3, [pc, #12]	@ (80061f0 <Appli_BleDisableFilterCb+0x14>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	20004432 	.word	0x20004432

080061f4 <Appli_CheckForUnprovision>:
* @brief  Checks and do Manual Unprovision of board  
* @param  void
* @retval void
*/ 
void Appli_CheckForUnprovision(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
  /* Checks if the User button is pressed or not at the startup */
  if (BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED)
 80061fa:	2000      	movs	r0, #0
 80061fc:	f001 fd10 	bl	8007c20 <BSP_PB_GetState>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d14b      	bne.n	800629e <Appli_CheckForUnprovision+0xaa>
  {
    BSP_LED_On(LED_BLUE);
 8006206:	2000      	movs	r0, #0
 8006208:	f001 fc66 	bl	8007ad8 <BSP_LED_On>
    tClockTime t = Clock_Time();
 800620c:	f001 fe06 	bl	8007e1c <HAL_GetTick>
 8006210:	6038      	str	r0, [r7, #0]
    int interrupted = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	607b      	str	r3, [r7, #4]
    
    /*Wait to check if user is pressing the button persistently*/
    while ((Clock_Time() - t) < MANUAL_UNPROVISION_TIMER)
 8006216:	e008      	b.n	800622a <Appli_CheckForUnprovision+0x36>
    {
      if (BSP_PB_GetState(BUTTON_SW1) != BUTTON_PRESSED)
 8006218:	2000      	movs	r0, #0
 800621a:	f001 fd01 	bl	8007c20 <BSP_PB_GetState>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <Appli_CheckForUnprovision+0x36>
      {
        interrupted = 1;
 8006224:	2301      	movs	r3, #1
 8006226:	607b      	str	r3, [r7, #4]
        break;
 8006228:	e008      	b.n	800623c <Appli_CheckForUnprovision+0x48>
    while ((Clock_Time() - t) < MANUAL_UNPROVISION_TIMER)
 800622a:	f001 fdf7 	bl	8007e1c <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8006238:	4293      	cmp	r3, r2
 800623a:	d9ed      	bls.n	8006218 <Appli_CheckForUnprovision+0x24>
      }
    }
    /* Unprovision, show that unprovisioning is completed, and 
    wait until user releases button*/
    if (!interrupted)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d12a      	bne.n	8006298 <Appli_CheckForUnprovision+0xa4>
    {
      /* No GATT connection */
      BLEMesh_StopAdvScan();
 8006242:	f018 fe98 	bl	801ef76 <BLEMesh_StopAdvScan>
      HAL_Delay(10);
 8006246:	200a      	movs	r0, #10
 8006248:	f7fb fb5f 	bl	800190a <HAL_Delay>

      PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 800624c:	4b1f      	ldr	r3, [pc, #124]	@ (80062cc <Appli_CheckForUnprovision+0xd8>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2104      	movs	r1, #4
 8006252:	4618      	mov	r0, r3
 8006254:	f001 f8f0 	bl	8007438 <PalNvmErase>
      TRACE_I(TF_PROVISION,"NVM erased\r\n");      
 8006258:	481d      	ldr	r0, [pc, #116]	@ (80062d0 <Appli_CheckForUnprovision+0xdc>)
 800625a:	f022 fe71 	bl	8028f40 <puts>
      
      BLEMesh_Unprovision();
 800625e:	f01a fbbf 	bl	80209e0 <BLEMesh_Unprovision>
      AppliNvm_ClearModelState();     
 8006262:	f000 fada 	bl	800681a <AppliNvm_ClearModelState>
      TRACE_I(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 8006266:	481b      	ldr	r0, [pc, #108]	@ (80062d4 <Appli_CheckForUnprovision+0xe0>)
 8006268:	f022 fe6a 	bl	8028f40 <puts>
      t = Clock_Time();
 800626c:	f001 fdd6 	bl	8007e1c <HAL_GetTick>
 8006270:	6038      	str	r0, [r7, #0]
      while ((Clock_Time() - t) < FLASH_ERASE_TIME)
 8006272:	e001      	b.n	8006278 <Appli_CheckForUnprovision+0x84>
      {
        BLEMesh_Process();
 8006274:	f01f fe2e 	bl	8025ed4 <BLEMesh_Process>
      while ((Clock_Time() - t) < FLASH_ERASE_TIME)
 8006278:	f001 fdd0 	bl	8007e1c <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b63      	cmp	r3, #99	@ 0x63
 8006284:	d9f6      	bls.n	8006274 <Appli_CheckForUnprovision+0x80>
      }
      
      while (BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED)
 8006286:	e001      	b.n	800628c <Appli_CheckForUnprovision+0x98>
      {
        Appli_LedBlink();
 8006288:	f7ff fea6 	bl	8005fd8 <Appli_LedBlink>
      while (BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED)
 800628c:	2000      	movs	r0, #0
 800628e:	f001 fcc7 	bl	8007c20 <BSP_PB_GetState>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0f7      	beq.n	8006288 <Appli_CheckForUnprovision+0x94>
      }
    }
    BSP_LED_Off(LED_BLUE);
 8006298:	2000      	movs	r0, #0
 800629a:	f001 fc37 	bl	8007b0c <BSP_LED_Off>
  }
  
  /* Register the task for all MESH dedicated processes */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_REQ_ID, UTIL_SEQ_RFU, Mesh_Task );
 800629e:	4a0e      	ldr	r2, [pc, #56]	@ (80062d8 <Appli_CheckForUnprovision+0xe4>)
 80062a0:	2100      	movs	r1, #0
 80062a2:	2002      	movs	r0, #2
 80062a4:	f010 f9aa 	bl	80165fc <UTIL_SEQ_RegTask>
  /* Set the task in the scheduler for the next scheduling */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);  
 80062a8:	2100      	movs	r1, #0
 80062aa:	2002      	movs	r0, #2
 80062ac:	f010 f9c8 	bl	8016640 <UTIL_SEQ_SetTask>
#else
  BleProcessInit = 1;
#endif
  
  /* Register the task for all MESH dedicated processes */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_APPLI_REQ_ID, UTIL_SEQ_RFU, Appli_Task );
 80062b0:	4a0a      	ldr	r2, [pc, #40]	@ (80062dc <Appli_CheckForUnprovision+0xe8>)
 80062b2:	2100      	movs	r1, #0
 80062b4:	2020      	movs	r0, #32
 80062b6:	f010 f9a1 	bl	80165fc <UTIL_SEQ_RegTask>
  /* Set the task in the scheduler for the next scheduling */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_APPLI_REQ_ID, CFG_SCH_PRIO_0);
 80062ba:	2100      	movs	r1, #0
 80062bc:	2020      	movs	r0, #32
 80062be:	f010 f9bf 	bl	8016640 <UTIL_SEQ_SetTask>
#if (APPLI_OPTIM == 1)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &appliTaskTimer_Id, hw_ts_Repeated, AppliMeshTask);
  
  HW_TS_Start(appliTaskTimer_Id, APPLI_MESH_TIMER_INTERVAL);
#endif
}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	2000444c 	.word	0x2000444c
 80062d0:	0802dff4 	.word	0x0802dff4
 80062d4:	0802e000 	.word	0x0802e000
 80062d8:	08005f45 	.word	0x08005f45
 80062dc:	08005fa1 	.word	0x08005fa1

080062e0 <Appli_Unprovision>:

void Appli_Unprovision(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  if(!ProxyFlag)
 80062e4:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <Appli_Unprovision+0x3c>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d114      	bne.n	8006316 <Appli_Unprovision+0x36>
  {
    /* No GATT connection */
    BLEMesh_StopAdvScan();
 80062ec:	f018 fe43 	bl	801ef76 <BLEMesh_StopAdvScan>
    HAL_Delay(10);
 80062f0:	200a      	movs	r0, #10
 80062f2:	f7fb fb0a 	bl	800190a <HAL_Delay>
      
    PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 80062f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006320 <Appli_Unprovision+0x40>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2104      	movs	r1, #4
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 f89b 	bl	8007438 <PalNvmErase>
    TRACE_I(TF_PROVISION,"NVM erased\r\n");      
 8006302:	4808      	ldr	r0, [pc, #32]	@ (8006324 <Appli_Unprovision+0x44>)
 8006304:	f022 fe1c 	bl	8028f40 <puts>
  
    TRACE_I(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 8006308:	4807      	ldr	r0, [pc, #28]	@ (8006328 <Appli_Unprovision+0x48>)
 800630a:	f022 fe19 	bl	8028f40 <puts>

    BLEMesh_Process();
 800630e:	f01f fde1 	bl	8025ed4 <BLEMesh_Process>
    NVIC_SystemReset();
 8006312:	f7ff fda3 	bl	8005e5c <__NVIC_SystemReset>
  }
}
 8006316:	bf00      	nop
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	2000442f 	.word	0x2000442f
 8006320:	2000444c 	.word	0x2000444c
 8006324:	0802dff4 	.word	0x0802dff4
 8006328:	0802e000 	.word	0x0802e000

0800632c <Appli_CheckBdMacAddr>:
* @brief  Checks and updates Mac address to generate MAC Address
* @param  void
* @retval MOBLEUINT8 sum return the sum calculated mac
*/ 
int Appli_CheckBdMacAddr(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
  MOBLEUINT8 sum = 239;
 8006332:	23ef      	movs	r3, #239	@ 0xef
 8006334:	73fb      	strb	r3, [r7, #15]
  MOBLEUINT8 result = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	73bb      	strb	r3, [r7, #14]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800633a:	2300      	movs	r3, #0
 800633c:	71fb      	strb	r3, [r7, #7]
  memcpy(bdaddr, (MOBLEUINT8 *)CFG_ADV_BD_ADDRESS, 7);
  bdaddr[7] = (EXTERNAL_MAC_ADDR_MGMT | EXTERNAL_MAC_TYPE);
#endif
  
#ifdef INTERNAL_UNIQUE_NUMBER_MAC
  status = aci_hal_read_config_data(CONFIG_DATA_PUBADDR_OFFSET, 
 800633e:	4a1c      	ldr	r2, [pc, #112]	@ (80063b0 <Appli_CheckBdMacAddr+0x84>)
 8006340:	491c      	ldr	r1, [pc, #112]	@ (80063b4 <Appli_CheckBdMacAddr+0x88>)
 8006342:	2000      	movs	r0, #0
 8006344:	f00e fd3d 	bl	8014dc2 <aci_hal_read_config_data>
 8006348:	4603      	mov	r3, r0
 800634a:	71fb      	strb	r3, [r7, #7]
                                    &bdaddr[7],
                                    bdaddr); 
  if(status != BLE_STATUS_SUCCESS) 
 800634c:	79fb      	ldrb	r3, [r7, #7]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d004      	beq.n	800635c <Appli_CheckBdMacAddr+0x30>
  {
    TRACE_I(TF_PROVISION, "Failed to read Public Address %d", status);
 8006352:	79fb      	ldrb	r3, [r7, #7]
 8006354:	4619      	mov	r1, r3
 8006356:	4818      	ldr	r0, [pc, #96]	@ (80063b8 <Appli_CheckBdMacAddr+0x8c>)
 8006358:	f022 fd8a 	bl	8028e70 <iprintf>
  }

  Appli_GetMACfromUniqueNumber();
 800635c:	f000 f82e 	bl	80063bc <Appli_GetMACfromUniqueNumber>
  bdaddr[7] = INTERNAL_UNIQUE_NUMBER_MAC;
 8006360:	4b13      	ldr	r3, [pc, #76]	@ (80063b0 <Appli_CheckBdMacAddr+0x84>)
 8006362:	2203      	movs	r2, #3
 8006364:	71da      	strb	r2, [r3, #7]
#endif

  for (int i = 0; i < 6; ++i)
 8006366:	2300      	movs	r3, #0
 8006368:	60bb      	str	r3, [r7, #8]
 800636a:	e00b      	b.n	8006384 <Appli_CheckBdMacAddr+0x58>
  {
    sum = (sum << 1) + bdaddr[i];
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	b2da      	uxtb	r2, r3
 8006372:	490f      	ldr	r1, [pc, #60]	@ (80063b0 <Appli_CheckBdMacAddr+0x84>)
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	440b      	add	r3, r1
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	4413      	add	r3, r2
 800637c:	73fb      	strb	r3, [r7, #15]
  for (int i = 0; i < 6; ++i)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	3301      	adds	r3, #1
 8006382:	60bb      	str	r3, [r7, #8]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b05      	cmp	r3, #5
 8006388:	ddf0      	ble.n	800636c <Appli_CheckBdMacAddr+0x40>
  }

  if (sum == bdaddr[6])
 800638a:	4b09      	ldr	r3, [pc, #36]	@ (80063b0 <Appli_CheckBdMacAddr+0x84>)
 800638c:	799b      	ldrb	r3, [r3, #6]
 800638e:	7bfa      	ldrb	r2, [r7, #15]
 8006390:	429a      	cmp	r2, r3
 8006392:	d101      	bne.n	8006398 <Appli_CheckBdMacAddr+0x6c>
  {
    result = 1;
 8006394:	2301      	movs	r3, #1
 8006396:	73bb      	strb	r3, [r7, #14]
  }
  
#if defined(EXTERNAL_MAC_ADDR_MGMT) && defined(EXTERNAL_MAC_IS_PUBLIC_ADDR)
   /* Do nothing for modification of 2 MSb */
#else
  bdaddr[5] |= 0xC0;    /* 2 Msb bits shall be 11b for Static Random Address */
 8006398:	4b05      	ldr	r3, [pc, #20]	@ (80063b0 <Appli_CheckBdMacAddr+0x84>)
 800639a:	795b      	ldrb	r3, [r3, #5]
 800639c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	4b03      	ldr	r3, [pc, #12]	@ (80063b0 <Appli_CheckBdMacAddr+0x84>)
 80063a4:	715a      	strb	r2, [r3, #5]
                      /* Do nothing for bdaddr, just pass the identification */
  result = 1;         /* This will overwrite the above for loop result, 
                          which is redundant for this case */
#endif  
  
  return result;
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	2000443c 	.word	0x2000443c
 80063b4:	20004443 	.word	0x20004443
 80063b8:	0802e0ec 	.word	0x0802e0ec

080063bc <Appli_GetMACfromUniqueNumber>:
* @param  void
* @retval void
*/
#ifdef INTERNAL_UNIQUE_NUMBER_MAC
static void Appli_GetMACfromUniqueNumber(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
  DEVICE_ID_REG1 could be identical for same batch samples, 
  4 bytes have been taken from DEVICE_ID_REG2
  */
  
  uint8_t i;
  uint8_t sum = 239;
 80063c2:	23ef      	movs	r3, #239	@ 0xef
 80063c4:	71bb      	strb	r3, [r7, #6]
  /* Static Device Address: 
  The two most significant bits 
  of the address shall be equal to 1, 
  hence ORed with 0xC0)*/
  
  for (i = 0; i < 6; ++i)
 80063c6:	2300      	movs	r3, #0
 80063c8:	71fb      	strb	r3, [r7, #7]
 80063ca:	e00a      	b.n	80063e2 <Appli_GetMACfromUniqueNumber+0x26>
  {
    sum = (sum << 1) + bdaddr[i];
 80063cc:	79bb      	ldrb	r3, [r7, #6]
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	79fb      	ldrb	r3, [r7, #7]
 80063d4:	4909      	ldr	r1, [pc, #36]	@ (80063fc <Appli_GetMACfromUniqueNumber+0x40>)
 80063d6:	5ccb      	ldrb	r3, [r1, r3]
 80063d8:	4413      	add	r3, r2
 80063da:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 6; ++i)
 80063dc:	79fb      	ldrb	r3, [r7, #7]
 80063de:	3301      	adds	r3, #1
 80063e0:	71fb      	strb	r3, [r7, #7]
 80063e2:	79fb      	ldrb	r3, [r7, #7]
 80063e4:	2b05      	cmp	r3, #5
 80063e6:	d9f1      	bls.n	80063cc <Appli_GetMACfromUniqueNumber+0x10>
  }
  bdaddr[6] = sum;
 80063e8:	4a04      	ldr	r2, [pc, #16]	@ (80063fc <Appli_GetMACfromUniqueNumber+0x40>)
 80063ea:	79bb      	ldrb	r3, [r7, #6]
 80063ec:	7193      	strb	r3, [r2, #6]
}
 80063ee:	bf00      	nop
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	2000443c 	.word	0x2000443c

08006400 <BLEMesh_UnprovisionCallback>:
* @brief  callback for unprovision the node by provisioner.
* @param  status reserved for future 
* @retval void
*/
void BLEMesh_UnprovisionCallback(MOBLEUINT8 reason)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	4603      	mov	r3, r0
 8006408:	71fb      	strb	r3, [r7, #7]
  ProvisionFlag = 0; 
 800640a:	4b12      	ldr	r3, [pc, #72]	@ (8006454 <BLEMesh_UnprovisionCallback+0x54>)
 800640c:	2200      	movs	r2, #0
 800640e:	701a      	strb	r2, [r3, #0]
  
  BLEMesh_Process();
 8006410:	f01f fd60 	bl	8025ed4 <BLEMesh_Process>
  HAL_Delay(100);
 8006414:	2064      	movs	r0, #100	@ 0x64
 8006416:	f7fb fa78 	bl	800190a <HAL_Delay>
#if PB_ADV_SUPPORTED
  BLEMesh_SetUnprovisionedDevBeaconInterval(PBADV_UNPROV_DEV_BEACON_INTERVAL);
 800641a:	2064      	movs	r0, #100	@ 0x64
 800641c:	f016 fba0 	bl	801cb60 <BLEMesh_SetUnprovisionedDevBeaconInterval>
#endif
  BLEMesh_StopAdvScan();
 8006420:	f018 fda9 	bl	801ef76 <BLEMesh_StopAdvScan>
  HAL_Delay(100);
 8006424:	2064      	movs	r0, #100	@ 0x64
 8006426:	f7fb fa70 	bl	800190a <HAL_Delay>
    
  TRACE_I(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 800642a:	480b      	ldr	r0, [pc, #44]	@ (8006458 <BLEMesh_UnprovisionCallback+0x58>)
 800642c:	f022 fd88 	bl	8028f40 <puts>

  PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 8006430:	4b0a      	ldr	r3, [pc, #40]	@ (800645c <BLEMesh_UnprovisionCallback+0x5c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2104      	movs	r1, #4
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fffe 	bl	8007438 <PalNvmErase>
  TRACE_I(TF_PROVISION,"NVM erased\r\n");      
 800643c:	4808      	ldr	r0, [pc, #32]	@ (8006460 <BLEMesh_UnprovisionCallback+0x60>)
 800643e:	f022 fd7f 	bl	8028f40 <puts>
  TRACE_I(TF_PROVISION,"Reset Device\r\n");      
 8006442:	4808      	ldr	r0, [pc, #32]	@ (8006464 <BLEMesh_UnprovisionCallback+0x64>)
 8006444:	f022 fd7c 	bl	8028f40 <puts>

  HAL_Delay(100);
 8006448:	2064      	movs	r0, #100	@ 0x64
 800644a:	f7fb fa5e 	bl	800190a <HAL_Delay>

  NVIC_SystemReset();
 800644e:	f7ff fd05 	bl	8005e5c <__NVIC_SystemReset>
 8006452:	bf00      	nop
 8006454:	20004430 	.word	0x20004430
 8006458:	0802e000 	.word	0x0802e000
 800645c:	2000444c 	.word	0x2000444c
 8006460:	0802dff4 	.word	0x0802dff4
 8006464:	0802e110 	.word	0x0802e110

08006468 <BLEMesh_PbAdvLinkOpenCb>:
* @brief  Call back function called when PB-ADV link Opened  
* @param  none
* @retval none
*/ 
void BLEMesh_PbAdvLinkOpenCb(void)
{ 
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  ProvisionFlag = 0;
 800646c:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <BLEMesh_PbAdvLinkOpenCb+0x1c>)
 800646e:	2200      	movs	r2, #0
 8006470:	701a      	strb	r2, [r3, #0]
  TRACE_I(TF_PROVISION,"PB-ADV Link opened successfully \n\r");    
 8006472:	4805      	ldr	r0, [pc, #20]	@ (8006488 <BLEMesh_PbAdvLinkOpenCb+0x20>)
 8006474:	f022 fcfc 	bl	8028e70 <iprintf>
  /* Turn ON Red LED*/
#if LOW_POWER_FEATURE
  /* do nothing */
#else
  BSP_LED_On(LED_RED);
 8006478:	2002      	movs	r0, #2
 800647a:	f001 fb2d 	bl	8007ad8 <BSP_LED_On>
#endif
}
 800647e:	bf00      	nop
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	20004430 	.word	0x20004430
 8006488:	0802e154 	.word	0x0802e154

0800648c <BLEMesh_ProvisionCallback>:
* @brief  callback for provision the node by provisioner.
* @param  void
* @retval void
*/
void BLEMesh_ProvisionCallback(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  ProvisionFlag = 1;
 8006490:	4b03      	ldr	r3, [pc, #12]	@ (80064a0 <BLEMesh_ProvisionCallback+0x14>)
 8006492:	2201      	movs	r2, #1
 8006494:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_AUTH_TYPE_OUTPUT_OOB
  PrvngInProcess = 0;
#endif
  TRACE_I(TF_PROVISION,"Device is provisioned by provisioner \r\n");
 8006496:	4803      	ldr	r0, [pc, #12]	@ (80064a4 <BLEMesh_ProvisionCallback+0x18>)
 8006498:	f022 fd52 	bl	8028f40 <puts>
  
#if (LOW_POWER_FEATURE == 1)
  /* Call API LPN_API_TIMER_INTERVAL after LPN provisioning */
//  HW_TS_Start(lowPowerNodeApiTimer_Id, LPN_API_TIMER_INTERVAL);
#endif
}
 800649c:	bf00      	nop
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	20004430 	.word	0x20004430
 80064a4:	0802e19c 	.word	0x0802e19c

080064a8 <BLEMesh_ConfigurationCallback>:
* @brief  callback for configuration the node by provisioner.
* @param  void
* @retval void
*/
void BLEMesh_ConfigurationCallback(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  {
    HW_TS_Start(lowPowerNodeApiTimer_Id, LPN_API_TIMER_INTERVAL);
    LPN_scan_enabled = MOBLE_TRUE;
  }
#endif
}
 80064ac:	bf00      	nop
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <BLEMesh_FnFriendshipEstablishedCallback>:
void BLEMesh_FnFriendshipEstablishedCallback(MOBLE_ADDRESS lpnAddress,
                                             MOBLEUINT8 lpnReceiveDelay,
                                             MOBLEUINT32 lpnPollTimeout,
                                             MOBLEUINT8 lpnNumElements,
                                             MOBLE_ADDRESS lpnPrevFriendAddress)
{ 
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	603a      	str	r2, [r7, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	4603      	mov	r3, r0
 80064c4:	80fb      	strh	r3, [r7, #6]
 80064c6:	460b      	mov	r3, r1
 80064c8:	717b      	strb	r3, [r7, #5]
 80064ca:	4613      	mov	r3, r2
 80064cc:	713b      	strb	r3, [r7, #4]
  TRACE_I(TF_LPN_FRND,"Friendship established. Low power node address 0x%.4X \r\n", lpnAddress);
 80064ce:	88fb      	ldrh	r3, [r7, #6]
 80064d0:	4619      	mov	r1, r3
 80064d2:	4810      	ldr	r0, [pc, #64]	@ (8006514 <BLEMesh_FnFriendshipEstablishedCallback+0x5c>)
 80064d4:	f022 fccc 	bl	8028e70 <iprintf>
  TRACE_I(TF_LPN_FRND,"Low power node receive delay %dms \r\n", lpnReceiveDelay);
 80064d8:	797b      	ldrb	r3, [r7, #5]
 80064da:	4619      	mov	r1, r3
 80064dc:	480e      	ldr	r0, [pc, #56]	@ (8006518 <BLEMesh_FnFriendshipEstablishedCallback+0x60>)
 80064de:	f022 fcc7 	bl	8028e70 <iprintf>
  TRACE_I(TF_LPN_FRND,"Low power node poll timeout %ldms \r\n", lpnPollTimeout*100);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2264      	movs	r2, #100	@ 0x64
 80064e6:	fb02 f303 	mul.w	r3, r2, r3
 80064ea:	4619      	mov	r1, r3
 80064ec:	480b      	ldr	r0, [pc, #44]	@ (800651c <BLEMesh_FnFriendshipEstablishedCallback+0x64>)
 80064ee:	f022 fcbf 	bl	8028e70 <iprintf>
  TRACE_I(TF_LPN_FRND,"Low power node number of elements %d \r\n", lpnNumElements);
 80064f2:	793b      	ldrb	r3, [r7, #4]
 80064f4:	4619      	mov	r1, r3
 80064f6:	480a      	ldr	r0, [pc, #40]	@ (8006520 <BLEMesh_FnFriendshipEstablishedCallback+0x68>)
 80064f8:	f022 fcba 	bl	8028e70 <iprintf>
  if (lpnPrevFriendAddress != MOBLE_ADDRESS_UNASSIGNED)
 80064fc:	8a3b      	ldrh	r3, [r7, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d004      	beq.n	800650c <BLEMesh_FnFriendshipEstablishedCallback+0x54>
  {
    TRACE_I(TF_LPN_FRND,"Low power node previous friend address 0x%.4X \r\n", lpnPrevFriendAddress);
 8006502:	8a3b      	ldrh	r3, [r7, #16]
 8006504:	4619      	mov	r1, r3
 8006506:	4807      	ldr	r0, [pc, #28]	@ (8006524 <BLEMesh_FnFriendshipEstablishedCallback+0x6c>)
 8006508:	f022 fcb2 	bl	8028e70 <iprintf>
  }
}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	0802e1c4 	.word	0x0802e1c4
 8006518:	0802e200 	.word	0x0802e200
 800651c:	0802e228 	.word	0x0802e228
 8006520:	0802e250 	.word	0x0802e250
 8006524:	0802e278 	.word	0x0802e278

08006528 <BLEMesh_FnFriendshipClearedCallback>:
*         3: friend clear received
* @param  previous friend address of low power node (can be invalid address)
* @retval void
*/
void BLEMesh_FnFriendshipClearedCallback(MOBLEUINT8 reason, MOBLE_ADDRESS lpnAddress)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	460a      	mov	r2, r1
 8006532:	71fb      	strb	r3, [r7, #7]
 8006534:	4613      	mov	r3, r2
 8006536:	80bb      	strh	r3, [r7, #4]
  TRACE_I(TF_LPN_FRND,"Friendship cleared. Low power node address 0x%.4X \r\n", lpnAddress);
 8006538:	88bb      	ldrh	r3, [r7, #4]
 800653a:	4619      	mov	r1, r3
 800653c:	4810      	ldr	r0, [pc, #64]	@ (8006580 <BLEMesh_FnFriendshipClearedCallback+0x58>)
 800653e:	f022 fc97 	bl	8028e70 <iprintf>
  
  switch(reason)
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	2b03      	cmp	r3, #3
 8006546:	d00e      	beq.n	8006566 <BLEMesh_FnFriendshipClearedCallback+0x3e>
 8006548:	2b03      	cmp	r3, #3
 800654a:	dc10      	bgt.n	800656e <BLEMesh_FnFriendshipClearedCallback+0x46>
 800654c:	2b01      	cmp	r3, #1
 800654e:	d002      	beq.n	8006556 <BLEMesh_FnFriendshipClearedCallback+0x2e>
 8006550:	2b02      	cmp	r3, #2
 8006552:	d004      	beq.n	800655e <BLEMesh_FnFriendshipClearedCallback+0x36>
 8006554:	e00b      	b.n	800656e <BLEMesh_FnFriendshipClearedCallback+0x46>
  {
  case FN_CLEARED_REPEAT_REQUEST: 
    TRACE_I(TF_LPN_FRND,"Reason: New friend request received from existing low power node \r\n");
 8006556:	480b      	ldr	r0, [pc, #44]	@ (8006584 <BLEMesh_FnFriendshipClearedCallback+0x5c>)
 8006558:	f022 fcf2 	bl	8028f40 <puts>
    break;
 800655c:	e00b      	b.n	8006576 <BLEMesh_FnFriendshipClearedCallback+0x4e>
  case FN_CLEARED_POLL_TIMEOUT:
    TRACE_I(TF_LPN_FRND,"Reason: Low power node poll timeout occurred \r\n");
 800655e:	480a      	ldr	r0, [pc, #40]	@ (8006588 <BLEMesh_FnFriendshipClearedCallback+0x60>)
 8006560:	f022 fcee 	bl	8028f40 <puts>
    break;
 8006564:	e007      	b.n	8006576 <BLEMesh_FnFriendshipClearedCallback+0x4e>
  case FN_CLEARED_FRIEND_CLEAR:
    TRACE_I(TF_LPN_FRND,"Reason: Friend clear received \r\n");
 8006566:	4809      	ldr	r0, [pc, #36]	@ (800658c <BLEMesh_FnFriendshipClearedCallback+0x64>)
 8006568:	f022 fcea 	bl	8028f40 <puts>
    break;
 800656c:	e003      	b.n	8006576 <BLEMesh_FnFriendshipClearedCallback+0x4e>
  default:
    TRACE_I(TF_LPN_FRND,"Reason: Invalid \r\n");
 800656e:	4808      	ldr	r0, [pc, #32]	@ (8006590 <BLEMesh_FnFriendshipClearedCallback+0x68>)
 8006570:	f022 fce6 	bl	8028f40 <puts>
    break;
 8006574:	bf00      	nop
  }
}
 8006576:	bf00      	nop
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	0802e2ac 	.word	0x0802e2ac
 8006584:	0802e2e4 	.word	0x0802e2e4
 8006588:	0802e328 	.word	0x0802e328
 800658c:	0802e358 	.word	0x0802e358
 8006590:	0802e378 	.word	0x0802e378

08006594 <BLEMesh_NeighborAppearedCallback>:
void BLEMesh_NeighborAppearedCallback(const MOBLEUINT8* bdAddr,
                                          MOBLEBOOL provisioned,
                                          const MOBLEUINT8* uuid,
                                          MOBLE_ADDRESS networkAddress,
                                          MOBLEINT8 rssi)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	607a      	str	r2, [r7, #4]
 800659e:	461a      	mov	r2, r3
 80065a0:	460b      	mov	r3, r1
 80065a2:	72fb      	strb	r3, [r7, #11]
 80065a4:	4613      	mov	r3, r2
 80065a6:	813b      	strh	r3, [r7, #8]
  TRACE_I(TF_NEIGHBOUR,"New neighbor appeared. Neighbor MAC address:");
  
  for (MOBLEUINT8 count=0 ; count<6; count++)
 80065a8:	2300      	movs	r3, #0
 80065aa:	75fb      	strb	r3, [r7, #23]
 80065ac:	e002      	b.n	80065b4 <BLEMesh_NeighborAppearedCallback+0x20>
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
 80065b0:	3301      	adds	r3, #1
 80065b2:	75fb      	strb	r3, [r7, #23]
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	2b05      	cmp	r3, #5
 80065b8:	d9f9      	bls.n	80065ae <BLEMesh_NeighborAppearedCallback+0x1a>
  else
  {
    TRACE_I(TF_NEIGHBOUR,"Network address not available\n\r");
  }

  for (MOBLEUINT8 i=0; i<16; i++)
 80065ba:	2300      	movs	r3, #0
 80065bc:	75bb      	strb	r3, [r7, #22]
 80065be:	e013      	b.n	80065e8 <BLEMesh_NeighborAppearedCallback+0x54>
  {
    if (uuid[i] == 0x00)
 80065c0:	7dbb      	ldrb	r3, [r7, #22]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	4413      	add	r3, r2
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d009      	beq.n	80065e0 <BLEMesh_NeighborAppearedCallback+0x4c>
    }
    else
    {
      TRACE_I(TF_NEIGHBOUR,"UUID: ");
      
      for (MOBLEUINT8 count=0 ; count<16; count++)
 80065cc:	2300      	movs	r3, #0
 80065ce:	757b      	strb	r3, [r7, #21]
 80065d0:	e002      	b.n	80065d8 <BLEMesh_NeighborAppearedCallback+0x44>
 80065d2:	7d7b      	ldrb	r3, [r7, #21]
 80065d4:	3301      	adds	r3, #1
 80065d6:	757b      	strb	r3, [r7, #21]
 80065d8:	7d7b      	ldrb	r3, [r7, #21]
 80065da:	2b0f      	cmp	r3, #15
 80065dc:	d9f9      	bls.n	80065d2 <BLEMesh_NeighborAppearedCallback+0x3e>
      {
        TRACE_I(TF_NEIGHBOUR,"%.2x ", uuid[count]);
      }
      
      break;
 80065de:	e007      	b.n	80065f0 <BLEMesh_NeighborAppearedCallback+0x5c>
      continue;
 80065e0:	bf00      	nop
  for (MOBLEUINT8 i=0; i<16; i++)
 80065e2:	7dbb      	ldrb	r3, [r7, #22]
 80065e4:	3301      	adds	r3, #1
 80065e6:	75bb      	strb	r3, [r7, #22]
 80065e8:	7dbb      	ldrb	r3, [r7, #22]
 80065ea:	2b0f      	cmp	r3, #15
 80065ec:	d9e8      	bls.n	80065c0 <BLEMesh_NeighborAppearedCallback+0x2c>
    }
  }
  
  TRACE_I(TF_NEIGHBOUR,"\n\r");
}
 80065ee:	bf00      	nop
 80065f0:	bf00      	nop
 80065f2:	371c      	adds	r7, #28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <BLEMesh_NeighborRefreshedCallback>:
void BLEMesh_NeighborRefreshedCallback(const MOBLEUINT8* bdAddr,
                                          MOBLEBOOL provisioned,
                                          const MOBLEUINT8* uuid,
                                          MOBLE_ADDRESS networkAddress,
                                          MOBLEINT8 rssi)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	607a      	str	r2, [r7, #4]
 8006606:	461a      	mov	r2, r3
 8006608:	460b      	mov	r3, r1
 800660a:	72fb      	strb	r3, [r7, #11]
 800660c:	4613      	mov	r3, r2
 800660e:	813b      	strh	r3, [r7, #8]
  TRACE_I(TF_NEIGHBOUR,"Existing neighbor refreshed. Neighbor MAC address:");
  
  for (MOBLEUINT8 count=0 ; count<6; count++)
 8006610:	2300      	movs	r3, #0
 8006612:	75fb      	strb	r3, [r7, #23]
 8006614:	e002      	b.n	800661c <BLEMesh_NeighborRefreshedCallback+0x20>
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	3301      	adds	r3, #1
 800661a:	75fb      	strb	r3, [r7, #23]
 800661c:	7dfb      	ldrb	r3, [r7, #23]
 800661e:	2b05      	cmp	r3, #5
 8006620:	d9f9      	bls.n	8006616 <BLEMesh_NeighborRefreshedCallback+0x1a>
  else
  {
    TRACE_I(TF_NEIGHBOUR,"Network address not available\n\r");
  }
  
  for (MOBLEUINT8 i=0; i<16; i++)
 8006622:	2300      	movs	r3, #0
 8006624:	75bb      	strb	r3, [r7, #22]
 8006626:	e013      	b.n	8006650 <BLEMesh_NeighborRefreshedCallback+0x54>
  {
    if (uuid[i] == 0x00)
 8006628:	7dbb      	ldrb	r3, [r7, #22]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	4413      	add	r3, r2
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d009      	beq.n	8006648 <BLEMesh_NeighborRefreshedCallback+0x4c>
    }
    else
    {
      TRACE_I(TF_NEIGHBOUR,"UUID: ");
      
      for (MOBLEUINT8 count=0 ; count<16; count++)
 8006634:	2300      	movs	r3, #0
 8006636:	757b      	strb	r3, [r7, #21]
 8006638:	e002      	b.n	8006640 <BLEMesh_NeighborRefreshedCallback+0x44>
 800663a:	7d7b      	ldrb	r3, [r7, #21]
 800663c:	3301      	adds	r3, #1
 800663e:	757b      	strb	r3, [r7, #21]
 8006640:	7d7b      	ldrb	r3, [r7, #21]
 8006642:	2b0f      	cmp	r3, #15
 8006644:	d9f9      	bls.n	800663a <BLEMesh_NeighborRefreshedCallback+0x3e>
      {
        TRACE_I(TF_NEIGHBOUR,"%.2x ", uuid[count]);
      }
      
      break;
 8006646:	e007      	b.n	8006658 <BLEMesh_NeighborRefreshedCallback+0x5c>
      continue;
 8006648:	bf00      	nop
  for (MOBLEUINT8 i=0; i<16; i++)
 800664a:	7dbb      	ldrb	r3, [r7, #22]
 800664c:	3301      	adds	r3, #1
 800664e:	75bb      	strb	r3, [r7, #22]
 8006650:	7dbb      	ldrb	r3, [r7, #22]
 8006652:	2b0f      	cmp	r3, #15
 8006654:	d9e8      	bls.n	8006628 <BLEMesh_NeighborRefreshedCallback+0x2c>
    }
  }
  
  TRACE_I(TF_NEIGHBOUR,"\n\r");
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	371c      	adds	r7, #28
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <BLEMesh_CustomBeaconGeneratorCallback>:
* @param  beacon data buffer. It includes length and AD type fields
*         buffer size
* @retval void
*/
void BLEMesh_CustomBeaconGeneratorCallback(void* buffer, MOBLEUINT8* size)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 adType = CUSTOM_BEACON_AD_TYPE;
 800666e:	2300      	movs	r3, #0
 8006670:	75fb      	strb	r3, [r7, #23]
  MOBLEUINT8 dataLength = 5;
 8006672:	2305      	movs	r3, #5
 8006674:	75bb      	strb	r3, [r7, #22]
  MOBLEUINT8 data[5] = {0x00,0x01,0x02,0x03,0x04};
 8006676:	4a12      	ldr	r2, [pc, #72]	@ (80066c0 <BLEMesh_CustomBeaconGeneratorCallback+0x5c>)
 8006678:	f107 0308 	add.w	r3, r7, #8
 800667c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006680:	6018      	str	r0, [r3, #0]
 8006682:	3304      	adds	r3, #4
 8006684:	7019      	strb	r1, [r3, #0]
  MOBLEUINT8* buf = (MOBLEUINT8*)buffer;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	613b      	str	r3, [r7, #16]
  
  buf[0] = dataLength+1;
 800668a:	7dbb      	ldrb	r3, [r7, #22]
 800668c:	3301      	adds	r3, #1
 800668e:	b2da      	uxtb	r2, r3
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	701a      	strb	r2, [r3, #0]
  buf[1] = adType;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	3301      	adds	r3, #1
 8006698:	7dfa      	ldrb	r2, [r7, #23]
 800669a:	701a      	strb	r2, [r3, #0]
  memcpy(buf+2, data, dataLength);
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	3302      	adds	r3, #2
 80066a0:	7dba      	ldrb	r2, [r7, #22]
 80066a2:	f107 0108 	add.w	r1, r7, #8
 80066a6:	4618      	mov	r0, r3
 80066a8:	f022 fe11 	bl	80292ce <memcpy>
  
  *size = dataLength+2;  
 80066ac:	7dbb      	ldrb	r3, [r7, #22]
 80066ae:	3302      	adds	r3, #2
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	701a      	strb	r2, [r3, #0]
}
 80066b6:	bf00      	nop
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	0802e41c 	.word	0x0802e41c

080066c4 <IntensityPublish>:
*         This function should be called in main loop
* @param  void
* @retval void
*/
void IntensityPublish(void)
{  
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
  
  Appli_IntensityControlPublishing(pGeneric_LevelParam);
  Appli_GenericClient_API(elementIndex, GENERIC_LEVEL_SET_ACK, pGeneric_LevelParam); 
#endif  
#endif
}
 80066c8:	bf00      	nop
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <Appli_Process>:
*         This function should be called in main loop
* @param  void
* @retval void
*/
void Appli_Process(void)
{
 80066d2:	b480      	push	{r7}
 80066d4:	af00      	add	r7, sp, #0
  else
  {
    //SdkEvalLedOff(LED1);
  }
#endif      
}
 80066d6:	bf00      	nop
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <UnprovisionedDeviceBeaconApp>:

#if PB_ADV_SUPPORTED
static void UnprovisionedDeviceBeaconApp(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  BLEMesh_SetUnprovisionedDevBeaconInterval(0);
 80066e4:	2000      	movs	r0, #0
 80066e6:	f016 fa3b 	bl	801cb60 <BLEMesh_SetUnprovisionedDevBeaconInterval>
}
 80066ea:	bf00      	nop
 80066ec:	bd80      	pop	{r7, pc}

080066ee <UnprovisionedDeviceBeaconTask>:

static void UnprovisionedDeviceBeaconTask(void)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_BEACON_REQ_ID, CFG_SCH_PRIO_0);
 80066f2:	2100      	movs	r1, #0
 80066f4:	2004      	movs	r0, #4
 80066f6:	f00f ffa3 	bl	8016640 <UTIL_SEQ_SetTask>

  return;
 80066fa:	bf00      	nop
}
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <AppliMeshSW1Task>:
  return;
}
#endif

static void AppliMeshSW1Task(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  /* Check if button action is emulated with SW1 command on USART1 */
#if ENABLE_SERIAL_INTERFACE
  if(!button_emulation)
 8006704:	4b0b      	ldr	r3, [pc, #44]	@ (8006734 <AppliMeshSW1Task+0x34>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10c      	bne.n	8006726 <AppliMeshSW1Task+0x26>
  {
  Appli_UpdateButtonState(BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED);
 800670c:	2000      	movs	r0, #0
 800670e:	f001 fa87 	bl	8007c20 <BSP_PB_GetState>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	bf0c      	ite	eq
 8006718:	2301      	moveq	r3, #1
 800671a:	2300      	movne	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fbe6 	bl	8005ef0 <Appli_UpdateButtonState>
    button_emulation = 0;
  }
#else
  Appli_UpdateButtonState(BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED);
#endif  
  return;
 8006724:	e005      	b.n	8006732 <AppliMeshSW1Task+0x32>
    Appli_ShortButtonPress();
 8006726:	f7ff fbc3 	bl	8005eb0 <Appli_ShortButtonPress>
    button_emulation = 0;
 800672a:	4b02      	ldr	r3, [pc, #8]	@ (8006734 <AppliMeshSW1Task+0x34>)
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]
  return;
 8006730:	bf00      	nop
}
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20004650 	.word	0x20004650

08006738 <Appli_Init>:
* @brief  Initializes the Application  
* @param  void
* @retval void
*/
void Appli_Init(MOBLEUINT8 *flag)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  AppliNvm_FactorySettingReset();
#endif
#endif
  
#if PB_ADV_SUPPORTED
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_BEACON_REQ_ID, UTIL_SEQ_RFU, UnprovisionedDeviceBeaconApp );
 8006740:	4a0d      	ldr	r2, [pc, #52]	@ (8006778 <Appli_Init+0x40>)
 8006742:	2100      	movs	r1, #0
 8006744:	2004      	movs	r0, #4
 8006746:	f00f ff59 	bl	80165fc <UTIL_SEQ_RegTask>
  /**
   * Create Timer to control unprovisioned device beacons
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &discoverTimer_Id, hw_ts_SingleShot, UnprovisionedDeviceBeaconTask);
 800674a:	4b0c      	ldr	r3, [pc, #48]	@ (800677c <Appli_Init+0x44>)
 800674c:	2200      	movs	r2, #0
 800674e:	490c      	ldr	r1, [pc, #48]	@ (8006780 <Appli_Init+0x48>)
 8006750:	2000      	movs	r0, #0
 8006752:	f7fb ffed 	bl	8002730 <HW_TS_Create>
  
  HW_TS_Start(discoverTimer_Id, DISCOVER_TIMER_INTERVAL);
 8006756:	4b0a      	ldr	r3, [pc, #40]	@ (8006780 <Appli_Init+0x48>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	490a      	ldr	r1, [pc, #40]	@ (8006784 <Appli_Init+0x4c>)
 800675c:	4618      	mov	r0, r3
 800675e:	f7fc f8e5 	bl	800292c <HW_TS_Start>
#endif
  
#if ENABLE_SERIAL_INTERFACE
  Serial_Init();
 8006762:	f00b fded 	bl	8012340 <Serial_Init>
  Modify_PWM(BLUE_LED, 1);
#endif
#endif
#endif
  
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_SW1_REQ_ID, UTIL_SEQ_RFU, AppliMeshSW1Task );
 8006766:	4a08      	ldr	r2, [pc, #32]	@ (8006788 <Appli_Init+0x50>)
 8006768:	2100      	movs	r1, #0
 800676a:	2040      	movs	r0, #64	@ 0x40
 800676c:	f00f ff46 	bl	80165fc <UTIL_SEQ_RegTask>
  * Create Timer to control Input OOB information
  */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &InputOOBTimeOut_Id, hw_ts_SingleShot, InputOOBTimeOutTask);
#endif

}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	080066e1 	.word	0x080066e1
 800677c:	080066ef 	.word	0x080066ef
 8006780:	20004436 	.word	0x20004436
 8006784:	0012c258 	.word	0x0012c258
 8006788:	08006701 	.word	0x08006701

0800678c <PwmValueMapping>:
* @param  maxRange: Max range of the parameter
* @param  minRange: Min range of the parameter
* @retval MOBLEUINT8
*/
MOBLEUINT16 PwmValueMapping(MOBLEUINT16 setValue , MOBLEUINT16 maxRange , MOBLEINT16 minRange)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	4603      	mov	r3, r0
 8006794:	80fb      	strh	r3, [r7, #6]
 8006796:	460b      	mov	r3, r1
 8006798:	80bb      	strh	r3, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	807b      	strh	r3, [r7, #2]
   else if(percentValue > 90)
   {
     duty = 10;
   }
#else
   if(minRange > 0x00)
 800679e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	dd15      	ble.n	80067d2 <PwmValueMapping+0x46>
   {
     percentValue =  (setValue - 800)/ (maxRange - minRange);
 80067a6:	88fb      	ldrh	r3, [r7, #6]
 80067a8:	f5a3 7248 	sub.w	r2, r3, #800	@ 0x320
 80067ac:	88b9      	ldrh	r1, [r7, #4]
 80067ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067b2:	1acb      	subs	r3, r1, r3
 80067b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80067b8:	81fb      	strh	r3, [r7, #14]
     percentValue = (percentValue*100);
 80067ba:	89fb      	ldrh	r3, [r7, #14]
 80067bc:	461a      	mov	r2, r3
 80067be:	0092      	lsls	r2, r2, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	461a      	mov	r2, r3
 80067c4:	0091      	lsls	r1, r2, #2
 80067c6:	461a      	mov	r2, r3
 80067c8:	460b      	mov	r3, r1
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	81fb      	strh	r3, [r7, #14]
 80067d0:	e00a      	b.n	80067e8 <PwmValueMapping+0x5c>
   }
   else
   {
     percentValue =  (setValue * 100)/ (maxRange - minRange);
 80067d2:	88fb      	ldrh	r3, [r7, #6]
 80067d4:	2264      	movs	r2, #100	@ 0x64
 80067d6:	fb03 f202 	mul.w	r2, r3, r2
 80067da:	88b9      	ldrh	r1, [r7, #4]
 80067dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067e0:	1acb      	subs	r3, r1, r3
 80067e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80067e6:	81fb      	strh	r3, [r7, #14]
   }
   
   duty = percentValue*320 ;
 80067e8:	89fb      	ldrh	r3, [r7, #14]
 80067ea:	461a      	mov	r2, r3
 80067ec:	0092      	lsls	r2, r2, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	019b      	lsls	r3, r3, #6
 80067f2:	81bb      	strh	r3, [r7, #12]
   
   if(duty >= 32000)
 80067f4:	89bb      	ldrh	r3, [r7, #12]
 80067f6:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80067fa:	d302      	bcc.n	8006802 <PwmValueMapping+0x76>
   {
     duty = 31999;
 80067fc:	f647 43ff 	movw	r3, #31999	@ 0x7cff
 8006800:	81bb      	strh	r3, [r7, #12]
   }
   if(duty == 0)
 8006802:	89bb      	ldrh	r3, [r7, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <PwmValueMapping+0x80>
   {
     duty = 1;
 8006808:	2301      	movs	r3, #1
 800680a:	81bb      	strh	r3, [r7, #12]
   }
#endif
     
   return duty;
 800680c:	89bb      	ldrh	r3, [r7, #12]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <AppliNvm_ClearModelState>:
* @brief  Clear model states in nvm
* @param  none
* @retval MOBLE_RESULT_SUCCESS on success
*/
MOBLE_RESULT AppliNvm_ClearModelState(void)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
  MOBLE_RESULT result = MOBLE_RESULT_FAIL; /* if save model state not defined, return MOBLE_RESULT_FAIL */
 8006820:	2302      	movs	r3, #2
 8006822:	71fb      	strb	r3, [r7, #7]
                                     (uint32_t*)&subPageTemp, 
                                     APP_NVM_SUBPAGE_SIZE);
    }
  }
#endif /* SAVE_MODEL_STATE_NVM */  
  return result;
 8006824:	79fb      	ldrb	r3, [r7, #7]
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <AppliNvm_LoadModelState>:
* @param  model state buff size
* @retval MOBLE_RESULT_SUCCESS on success
*/
MOBLE_RESULT AppliNvm_LoadModelState(uint8_t state[], 
                                     uint16_t* size)
{  
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
      *size = APP_NVM_MODEL_SIZE;
    }
  }
  return result;  
#else /* SAVE_MODEL_STATE_NVM */  
  *size = 0;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2200      	movs	r2, #0
 8006840:	801a      	strh	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS;
 8006842:	2300      	movs	r3, #0
#endif /* SAVE_MODEL_STATE_NVM */
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <AppliNvm_SaveMessageParam>:
  states in flash.
* @param  void
* @retval void
*/
void AppliNvm_SaveMessageParam (void)
{
 8006850:	b480      	push	{r7}
 8006852:	af00      	add	r7, sp, #0
#ifdef SAVE_MODEL_STATE_FOR_ALL_MESSAGES
  PowerOnOff_flag = FLAG_SET;
#endif 
} 
 8006854:	bf00      	nop
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <Appli_Vendor_DeviceInfo>:
* @param  data: Pointer to the data received from peer_addr
* @param  length: Length of the data
* @retval MOBLE_RESULT status of result
*/          
MOBLE_RESULT Appli_Vendor_DeviceInfo(MOBLEUINT8 const *data, MOBLEUINT32 length)
{
 8006860:	b590      	push	{r4, r7, lr}
 8006862:	b089      	sub	sp, #36	@ 0x24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 tempBuffer[10];
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;  
 800686a:	2300      	movs	r3, #0
 800686c:	77fb      	strb	r3, [r7, #31]
  
  MOBLEUINT8 subCmd = data[0];
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	74bb      	strb	r3, [r7, #18]
  char *libVersion;
  char *subLibVersion;
  MOBLEUINT8 inc = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	74fb      	strb	r3, [r7, #19]
        /*First Byte is sending the Sub Command*/      
  ResponseBuffer[0] = subCmd;
 8006878:	4a78      	ldr	r2, [pc, #480]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 800687a:	7cbb      	ldrb	r3, [r7, #18]
 800687c:	7013      	strb	r3, [r2, #0]
        TRACE_M(TF_VENDOR,"#02-%02hx! \n\r",data[0]);
 800687e:	2100      	movs	r1, #0
 8006880:	4877      	ldr	r0, [pc, #476]	@ (8006a60 <Appli_Vendor_DeviceInfo+0x200>)
 8006882:	f006 fe4b 	bl	800d51c <TraceHeader>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	4619      	mov	r1, r3
 800688c:	4875      	ldr	r0, [pc, #468]	@ (8006a64 <Appli_Vendor_DeviceInfo+0x204>)
 800688e:	f022 faef 	bl	8028e70 <iprintf>
  
  switch(subCmd)
 8006892:	7cbb      	ldrb	r3, [r7, #18]
 8006894:	3b01      	subs	r3, #1
 8006896:	2b03      	cmp	r3, #3
 8006898:	f200 80d7 	bhi.w	8006a4a <Appli_Vendor_DeviceInfo+0x1ea>
 800689c:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <Appli_Vendor_DeviceInfo+0x44>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068c3 	.word	0x080068c3
 80068ac:	08006983 	.word	0x08006983
 80068b0:	08006a51 	.word	0x08006a51
#ifdef BLUENRG_MS    
      ResponseBuffer[1] = BLUENRG_MS_BRD;               
#endif
      
#ifdef STM32WB55xx
      ResponseBuffer[1] = STM32WB55XX_BRD;               
 80068b4:	4b69      	ldr	r3, [pc, #420]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 80068b6:	2204      	movs	r2, #4
 80068b8:	705a      	strb	r2, [r3, #1]
#endif      

      BuffLength = 2;
 80068ba:	4b6b      	ldr	r3, [pc, #428]	@ (8006a68 <Appli_Vendor_DeviceInfo+0x208>)
 80068bc:	2202      	movs	r2, #2
 80068be:	801a      	strh	r2, [r3, #0]
      break;
 80068c0:	e0c7      	b.n	8006a52 <Appli_Vendor_DeviceInfo+0x1f2>
    }
  case LIB_VER:
    {
      libVersion = BLEMesh_GetLibraryVersion();
 80068c2:	f016 fb33 	bl	801cf2c <BLEMesh_GetLibraryVersion>
 80068c6:	61b8      	str	r0, [r7, #24]
      while(*libVersion != '\0')
 80068c8:	e03e      	b.n	8006948 <Appli_Vendor_DeviceInfo+0xe8>
      {
        tempBuffer[inc] = *libVersion;
 80068ca:	7cfb      	ldrb	r3, [r7, #19]
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	7812      	ldrb	r2, [r2, #0]
 80068d0:	3320      	adds	r3, #32
 80068d2:	443b      	add	r3, r7
 80068d4:	f803 2c18 	strb.w	r2, [r3, #-24]
        if(tempBuffer[inc] != 0x2E)
 80068d8:	7cfb      	ldrb	r3, [r7, #19]
 80068da:	3320      	adds	r3, #32
 80068dc:	443b      	add	r3, r7
 80068de:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80068e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80068e4:	d01d      	beq.n	8006922 <Appli_Vendor_DeviceInfo+0xc2>
        {
          tempBuffer[inc] = BLEMesh_ModelsASCII_To_Char(tempBuffer[inc]);
 80068e6:	7cfb      	ldrb	r3, [r7, #19]
 80068e8:	3320      	adds	r3, #32
 80068ea:	443b      	add	r3, r7
 80068ec:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80068f0:	7cfc      	ldrb	r4, [r7, #19]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fcb8 	bl	8007268 <BLEMesh_ModelsASCII_To_Char>
 80068f8:	4603      	mov	r3, r0
 80068fa:	461a      	mov	r2, r3
 80068fc:	f104 0320 	add.w	r3, r4, #32
 8006900:	443b      	add	r3, r7
 8006902:	f803 2c18 	strb.w	r2, [r3, #-24]
          TRACE_M(TF_VENDOR,"Lib version is %x\n\r" ,(unsigned char)tempBuffer[inc]);
 8006906:	2100      	movs	r1, #0
 8006908:	4855      	ldr	r0, [pc, #340]	@ (8006a60 <Appli_Vendor_DeviceInfo+0x200>)
 800690a:	f006 fe07 	bl	800d51c <TraceHeader>
 800690e:	7cfb      	ldrb	r3, [r7, #19]
 8006910:	3320      	adds	r3, #32
 8006912:	443b      	add	r3, r7
 8006914:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006918:	4619      	mov	r1, r3
 800691a:	4854      	ldr	r0, [pc, #336]	@ (8006a6c <Appli_Vendor_DeviceInfo+0x20c>)
 800691c:	f022 faa8 	bl	8028e70 <iprintf>
 8006920:	e00c      	b.n	800693c <Appli_Vendor_DeviceInfo+0xdc>
        }
        else
        {
          TRACE_M(TF_VENDOR,"Lib version is %c\n\r" ,(unsigned char)tempBuffer[inc]);
 8006922:	2100      	movs	r1, #0
 8006924:	484e      	ldr	r0, [pc, #312]	@ (8006a60 <Appli_Vendor_DeviceInfo+0x200>)
 8006926:	f006 fdf9 	bl	800d51c <TraceHeader>
 800692a:	7cfb      	ldrb	r3, [r7, #19]
 800692c:	3320      	adds	r3, #32
 800692e:	443b      	add	r3, r7
 8006930:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006934:	4619      	mov	r1, r3
 8006936:	484e      	ldr	r0, [pc, #312]	@ (8006a70 <Appli_Vendor_DeviceInfo+0x210>)
 8006938:	f022 fa9a 	bl	8028e70 <iprintf>
        }             
        libVersion++;  
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	3301      	adds	r3, #1
 8006940:	61bb      	str	r3, [r7, #24]
             
        inc++;
 8006942:	7cfb      	ldrb	r3, [r7, #19]
 8006944:	3301      	adds	r3, #1
 8006946:	74fb      	strb	r3, [r7, #19]
      while(*libVersion != '\0')
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1bc      	bne.n	80068ca <Appli_Vendor_DeviceInfo+0x6a>
      } 
      ResponseBuffer[1]= tempBuffer[0];
 8006950:	7a3a      	ldrb	r2, [r7, #8]
 8006952:	4b42      	ldr	r3, [pc, #264]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006954:	705a      	strb	r2, [r3, #1]
      ResponseBuffer[2]= tempBuffer[1];
 8006956:	7a7a      	ldrb	r2, [r7, #9]
 8006958:	4b40      	ldr	r3, [pc, #256]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 800695a:	709a      	strb	r2, [r3, #2]
      ResponseBuffer[3]= tempBuffer[3];
 800695c:	7afa      	ldrb	r2, [r7, #11]
 800695e:	4b3f      	ldr	r3, [pc, #252]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006960:	70da      	strb	r2, [r3, #3]
      ResponseBuffer[4]= tempBuffer[4];
 8006962:	7b3a      	ldrb	r2, [r7, #12]
 8006964:	4b3d      	ldr	r3, [pc, #244]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006966:	711a      	strb	r2, [r3, #4]
      ResponseBuffer[5]= tempBuffer[6];
 8006968:	7bba      	ldrb	r2, [r7, #14]
 800696a:	4b3c      	ldr	r3, [pc, #240]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 800696c:	715a      	strb	r2, [r3, #5]
      ResponseBuffer[6]= tempBuffer[7];
 800696e:	7bfa      	ldrb	r2, [r7, #15]
 8006970:	4b3a      	ldr	r3, [pc, #232]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006972:	719a      	strb	r2, [r3, #6]
      ResponseBuffer[7]= tempBuffer[8];
 8006974:	7c3a      	ldrb	r2, [r7, #16]
 8006976:	4b39      	ldr	r3, [pc, #228]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006978:	71da      	strb	r2, [r3, #7]
      BuffLength = 8;      
 800697a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a68 <Appli_Vendor_DeviceInfo+0x208>)
 800697c:	2208      	movs	r2, #8
 800697e:	801a      	strh	r2, [r3, #0]
      break;
 8006980:	e067      	b.n	8006a52 <Appli_Vendor_DeviceInfo+0x1f2>
    }
  case LIB_SUB_VER:
    {
      subLibVersion = BLEMesh_GetLibrarySubVersion();
 8006982:	f016 fad7 	bl	801cf34 <BLEMesh_GetLibrarySubVersion>
 8006986:	6178      	str	r0, [r7, #20]
      while(*subLibVersion != '\0')
 8006988:	e045      	b.n	8006a16 <Appli_Vendor_DeviceInfo+0x1b6>
      {
        tempBuffer[inc] = * subLibVersion;
 800698a:	7cfb      	ldrb	r3, [r7, #19]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	7812      	ldrb	r2, [r2, #0]
 8006990:	3320      	adds	r3, #32
 8006992:	443b      	add	r3, r7
 8006994:	f803 2c18 	strb.w	r2, [r3, #-24]
        if((tempBuffer[inc] != 0x2E) && (tempBuffer[inc] != 0x52))
 8006998:	7cfb      	ldrb	r3, [r7, #19]
 800699a:	3320      	adds	r3, #32
 800699c:	443b      	add	r3, r7
 800699e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80069a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80069a4:	d024      	beq.n	80069f0 <Appli_Vendor_DeviceInfo+0x190>
 80069a6:	7cfb      	ldrb	r3, [r7, #19]
 80069a8:	3320      	adds	r3, #32
 80069aa:	443b      	add	r3, r7
 80069ac:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80069b0:	2b52      	cmp	r3, #82	@ 0x52
 80069b2:	d01d      	beq.n	80069f0 <Appli_Vendor_DeviceInfo+0x190>
        {               
          tempBuffer[inc] = BLEMesh_ModelsASCII_To_Char(tempBuffer[inc]);
 80069b4:	7cfb      	ldrb	r3, [r7, #19]
 80069b6:	3320      	adds	r3, #32
 80069b8:	443b      	add	r3, r7
 80069ba:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80069be:	7cfc      	ldrb	r4, [r7, #19]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fc51 	bl	8007268 <BLEMesh_ModelsASCII_To_Char>
 80069c6:	4603      	mov	r3, r0
 80069c8:	461a      	mov	r2, r3
 80069ca:	f104 0320 	add.w	r3, r4, #32
 80069ce:	443b      	add	r3, r7
 80069d0:	f803 2c18 	strb.w	r2, [r3, #-24]
          TRACE_M(TF_VENDOR,"Sub Lib version is %x\n\r" ,(unsigned char)tempBuffer[inc]);
 80069d4:	2100      	movs	r1, #0
 80069d6:	4822      	ldr	r0, [pc, #136]	@ (8006a60 <Appli_Vendor_DeviceInfo+0x200>)
 80069d8:	f006 fda0 	bl	800d51c <TraceHeader>
 80069dc:	7cfb      	ldrb	r3, [r7, #19]
 80069de:	3320      	adds	r3, #32
 80069e0:	443b      	add	r3, r7
 80069e2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80069e6:	4619      	mov	r1, r3
 80069e8:	4822      	ldr	r0, [pc, #136]	@ (8006a74 <Appli_Vendor_DeviceInfo+0x214>)
 80069ea:	f022 fa41 	bl	8028e70 <iprintf>
 80069ee:	e00c      	b.n	8006a0a <Appli_Vendor_DeviceInfo+0x1aa>
        }
        else
        {
          TRACE_M(TF_VENDOR,"Sub Lib version is %c\n\r" ,(unsigned char)tempBuffer[inc]);
 80069f0:	2100      	movs	r1, #0
 80069f2:	481b      	ldr	r0, [pc, #108]	@ (8006a60 <Appli_Vendor_DeviceInfo+0x200>)
 80069f4:	f006 fd92 	bl	800d51c <TraceHeader>
 80069f8:	7cfb      	ldrb	r3, [r7, #19]
 80069fa:	3320      	adds	r3, #32
 80069fc:	443b      	add	r3, r7
 80069fe:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006a02:	4619      	mov	r1, r3
 8006a04:	481c      	ldr	r0, [pc, #112]	@ (8006a78 <Appli_Vendor_DeviceInfo+0x218>)
 8006a06:	f022 fa33 	bl	8028e70 <iprintf>
        } 
        subLibVersion++;  
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	617b      	str	r3, [r7, #20]
        inc++;
 8006a10:	7cfb      	ldrb	r3, [r7, #19]
 8006a12:	3301      	adds	r3, #1
 8006a14:	74fb      	strb	r3, [r7, #19]
      while(*subLibVersion != '\0')
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1b5      	bne.n	800698a <Appli_Vendor_DeviceInfo+0x12a>
      } 
      ResponseBuffer[1]= tempBuffer[0];
 8006a1e:	7a3a      	ldrb	r2, [r7, #8]
 8006a20:	4b0e      	ldr	r3, [pc, #56]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a22:	705a      	strb	r2, [r3, #1]
      ResponseBuffer[2]= tempBuffer[1];
 8006a24:	7a7a      	ldrb	r2, [r7, #9]
 8006a26:	4b0d      	ldr	r3, [pc, #52]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a28:	709a      	strb	r2, [r3, #2]
      ResponseBuffer[3]= tempBuffer[3];
 8006a2a:	7afa      	ldrb	r2, [r7, #11]
 8006a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a2e:	70da      	strb	r2, [r3, #3]
      ResponseBuffer[4]= tempBuffer[5];
 8006a30:	7b7a      	ldrb	r2, [r7, #13]
 8006a32:	4b0a      	ldr	r3, [pc, #40]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a34:	711a      	strb	r2, [r3, #4]
      ResponseBuffer[5]= tempBuffer[7];
 8006a36:	7bfa      	ldrb	r2, [r7, #15]
 8006a38:	4b08      	ldr	r3, [pc, #32]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a3a:	715a      	strb	r2, [r3, #5]
      ResponseBuffer[6]= tempBuffer[9];
 8006a3c:	7c7a      	ldrb	r2, [r7, #17]
 8006a3e:	4b07      	ldr	r3, [pc, #28]	@ (8006a5c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a40:	719a      	strb	r2, [r3, #6]
      
      BuffLength = 7;
 8006a42:	4b09      	ldr	r3, [pc, #36]	@ (8006a68 <Appli_Vendor_DeviceInfo+0x208>)
 8006a44:	2207      	movs	r2, #7
 8006a46:	801a      	strh	r2, [r3, #0]
      
      break;
 8006a48:	e003      	b.n	8006a52 <Appli_Vendor_DeviceInfo+0x1f2>
      break;
    }
    
  default:
    {
      status = MOBLE_RESULT_FALSE;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	77fb      	strb	r3, [r7, #31]
      break;
 8006a4e:	e000      	b.n	8006a52 <Appli_Vendor_DeviceInfo+0x1f2>
      break;
 8006a50:	bf00      	nop
    }
    
  }
  
  return status;
 8006a52:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3724      	adds	r7, #36	@ 0x24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd90      	pop	{r4, r7, pc}
 8006a5c:	20004450 	.word	0x20004450
 8006a60:	08030868 	.word	0x08030868
 8006a64:	0802e424 	.word	0x0802e424
 8006a68:	2000448c 	.word	0x2000448c
 8006a6c:	0802e434 	.word	0x0802e434
 8006a70:	0802e448 	.word	0x0802e448
 8006a74:	0802e45c 	.word	0x0802e45c
 8006a78:	0802e474 	.word	0x0802e474

08006a7c <Appli_Vendor_Test>:
* @param  data: Pointer to the data received from peer_addr
* @param  length: Length of the data
* @retval MOBLE_RESULT status of result
*/          
MOBLE_RESULT Appli_Vendor_Test(MOBLEUINT8 const *data, MOBLEUINT32 length)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;  
 8006a86:	2300      	movs	r3, #0
 8006a88:	73fb      	strb	r3, [r7, #15]
  MOBLEUINT8 subCmd = data[0];
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	737b      	strb	r3, [r7, #13]
       /*First Byte is sending the Sub Command*/      
       ResponseBuffer[0]=subCmd;
 8006a90:	4a2b      	ldr	r2, [pc, #172]	@ (8006b40 <Appli_Vendor_Test+0xc4>)
 8006a92:	7b7b      	ldrb	r3, [r7, #13]
 8006a94:	7013      	strb	r3, [r2, #0]
       TRACE_M(TF_VENDOR,"#01-%02hx! \n\r",data[0]);
 8006a96:	2100      	movs	r1, #0
 8006a98:	482a      	ldr	r0, [pc, #168]	@ (8006b44 <Appli_Vendor_Test+0xc8>)
 8006a9a:	f006 fd3f 	bl	800d51c <TraceHeader>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4828      	ldr	r0, [pc, #160]	@ (8006b48 <Appli_Vendor_Test+0xcc>)
 8006aa6:	f022 f9e3 	bl	8028e70 <iprintf>
  switch(subCmd)
 8006aaa:	7b7b      	ldrb	r3, [r7, #13]
 8006aac:	3b02      	subs	r3, #2
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d83c      	bhi.n	8006b2c <Appli_Vendor_Test+0xb0>
 8006ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab8 <Appli_Vendor_Test+0x3c>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006acd 	.word	0x08006acd
 8006abc:	08006b33 	.word	0x08006b33
 8006ac0:	08006b33 	.word	0x08006b33
 8006ac4:	08006b33 	.word	0x08006b33
 8006ac8:	08006aff 	.word	0x08006aff
  {             
  case APPLI_TEST_ECHO: 
    {
      if(length > sizeof(ResponseBuffer))
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2b3c      	cmp	r3, #60	@ 0x3c
 8006ad0:	d908      	bls.n	8006ae4 <Appli_Vendor_Test+0x68>
      {
        length = sizeof(ResponseBuffer);
 8006ad2:	233c      	movs	r3, #60	@ 0x3c
 8006ad4:	603b      	str	r3, [r7, #0]
        TRACE_M(TF_VENDOR,"Length received greater than size of response buffer \r\n");
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	481a      	ldr	r0, [pc, #104]	@ (8006b44 <Appli_Vendor_Test+0xc8>)
 8006ada:	f006 fd1f 	bl	800d51c <TraceHeader>
 8006ade:	481b      	ldr	r0, [pc, #108]	@ (8006b4c <Appli_Vendor_Test+0xd0>)
 8006ae0:	f022 fa2e 	bl	8028f40 <puts>
      }
      memcpy (&(ResponseBuffer[1]),&(data[1]),(length-1));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	1c59      	adds	r1, r3, #1
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	461a      	mov	r2, r3
 8006aee:	4818      	ldr	r0, [pc, #96]	@ (8006b50 <Appli_Vendor_Test+0xd4>)
 8006af0:	f022 fbed 	bl	80292ce <memcpy>
      BuffLength = length;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	4b16      	ldr	r3, [pc, #88]	@ (8006b54 <Appli_Vendor_Test+0xd8>)
 8006afa:	801a      	strh	r2, [r3, #0]
      break;
 8006afc:	e01a      	b.n	8006b34 <Appli_Vendor_Test+0xb8>
      /*Insert Test related Commands here*/
      break;
    }
  case APPLI_MODEL_PUBLISH_SELECT:
    {
       for (MOBLEUINT8 idx=0; idx<length; idx++)
 8006afe:	2300      	movs	r3, #0
 8006b00:	73bb      	strb	r3, [r7, #14]
 8006b02:	e00e      	b.n	8006b22 <Appli_Vendor_Test+0xa6>
       {
         TRACE_I(TF_VENDOR,"data[%d]= %d",idx,data[idx]);  
 8006b04:	7bb9      	ldrb	r1, [r7, #14]
 8006b06:	7bbb      	ldrb	r3, [r7, #14]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	4811      	ldr	r0, [pc, #68]	@ (8006b58 <Appli_Vendor_Test+0xdc>)
 8006b12:	f022 f9ad 	bl	8028e70 <iprintf>
         TRACE_I(TF_VENDOR,"\n\r");
 8006b16:	4811      	ldr	r0, [pc, #68]	@ (8006b5c <Appli_Vendor_Test+0xe0>)
 8006b18:	f022 f9aa 	bl	8028e70 <iprintf>
       for (MOBLEUINT8 idx=0; idx<length; idx++)
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	73bb      	strb	r3, [r7, #14]
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d8ec      	bhi.n	8006b04 <Appli_Vendor_Test+0x88>
       } 
       break;
 8006b2a:	e003      	b.n	8006b34 <Appli_Vendor_Test+0xb8>
     }
             
  default:
    {
      status = MOBLE_RESULT_FALSE;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b30:	e000      	b.n	8006b34 <Appli_Vendor_Test+0xb8>
      break;
 8006b32:	bf00      	nop
    }
  }
       
  return status;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	20004450 	.word	0x20004450
 8006b44:	08030880 	.word	0x08030880
 8006b48:	0802e48c 	.word	0x0802e48c
 8006b4c:	0802e49c 	.word	0x0802e49c
 8006b50:	20004451 	.word	0x20004451
 8006b54:	2000448c 	.word	0x2000448c
 8006b58:	0802e4d4 	.word	0x0802e4d4
 8006b5c:	0802e4e4 	.word	0x0802e4e4

08006b60 <Appli_Vendor_LEDControl>:
* @param  elementIndex : selected element where '0' is first element       
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_Vendor_LEDControl( MOBLEUINT8 const *data, MOBLEUINT32 length,
                                       MOBLEUINT8 elementIndex , MOBLE_ADDRESS dst_peer)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	460b      	mov	r3, r1
 8006b70:	71fb      	strb	r3, [r7, #7]
 8006b72:	4613      	mov	r3, r2
 8006b74:	80bb      	strh	r3, [r7, #4]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8006b76:	2300      	movs	r3, #0
 8006b78:	75fb      	strb	r3, [r7, #23]
  MOBLEUINT8 subCommand; 
  subCommand = data[0];
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	74fb      	strb	r3, [r7, #19]
  MOBLEUINT16 duty;
  MOBLEUINT16 intensityValue = 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	82bb      	strh	r3, [r7, #20]
      
  TRACE_M(TF_VENDOR,"#03-%02hx!\n\r",data[0]);
 8006b84:	2100      	movs	r1, #0
 8006b86:	488a      	ldr	r0, [pc, #552]	@ (8006db0 <Appli_Vendor_LEDControl+0x250>)
 8006b88:	f006 fcc8 	bl	800d51c <TraceHeader>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	4619      	mov	r1, r3
 8006b92:	4888      	ldr	r0, [pc, #544]	@ (8006db4 <Appli_Vendor_LEDControl+0x254>)
 8006b94:	f022 f96c 	bl	8028e70 <iprintf>
  switch(subCommand)
 8006b98:	7cfb      	ldrb	r3, [r7, #19]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	2b05      	cmp	r3, #5
 8006b9e:	f200 80e3 	bhi.w	8006d68 <Appli_Vendor_LEDControl+0x208>
 8006ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba8 <Appli_Vendor_LEDControl+0x48>)
 8006ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba8:	08006c73 	.word	0x08006c73
 8006bac:	08006cb9 	.word	0x08006cb9
 8006bb0:	08006bf5 	.word	0x08006bf5
 8006bb4:	08006d69 	.word	0x08006d69
 8006bb8:	08006bc1 	.word	0x08006bc1
 8006bbc:	08006cfb 	.word	0x08006cfb
    */
  case APPLI_CMD_LED_BULB:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_Control callback received for elementIndex %d \r\n", elementIndex);
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	487b      	ldr	r0, [pc, #492]	@ (8006db0 <Appli_Vendor_LEDControl+0x250>)
 8006bc4:	f006 fcaa 	bl	800d51c <TraceHeader>
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	487a      	ldr	r0, [pc, #488]	@ (8006db8 <Appli_Vendor_LEDControl+0x258>)
 8006bce:	f022 f94f 	bl	8028e70 <iprintf>
      Appli_LedState = *(data+1); /* Toggle the state of the Blue LED */
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	781a      	ldrb	r2, [r3, #0]
 8006bd8:	4b78      	ldr	r3, [pc, #480]	@ (8006dbc <Appli_Vendor_LEDControl+0x25c>)
 8006bda:	701a      	strb	r2, [r3, #0]
      if( Appli_LedState == 1)
 8006bdc:	4b77      	ldr	r3, [pc, #476]	@ (8006dbc <Appli_Vendor_LEDControl+0x25c>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d103      	bne.n	8006bec <Appli_Vendor_LEDControl+0x8c>
      {
        BSP_LED_On(LED_BLUE);
 8006be4:	2000      	movs	r0, #0
 8006be6:	f000 ff77 	bl	8007ad8 <BSP_LED_On>
      }
      else
      {
        BSP_LED_Off(LED_BLUE);
      }  
      break;
 8006bea:	e0c0      	b.n	8006d6e <Appli_Vendor_LEDControl+0x20e>
        BSP_LED_Off(LED_BLUE);
 8006bec:	2000      	movs	r0, #0
 8006bee:	f000 ff8d 	bl	8007b0c <BSP_LED_Off>
      break;
 8006bf2:	e0bc      	b.n	8006d6e <Appli_Vendor_LEDControl+0x20e>
    /* Toggle Command */  
  case APPLI_CMD_TOGGLE:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_Toggle callback received for elementIndex %d \r\n", elementIndex);
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	486e      	ldr	r0, [pc, #440]	@ (8006db0 <Appli_Vendor_LEDControl+0x250>)
 8006bf8:	f006 fc90 	bl	800d51c <TraceHeader>
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	486f      	ldr	r0, [pc, #444]	@ (8006dc0 <Appli_Vendor_LEDControl+0x260>)
 8006c02:	f022 f935 	bl	8028e70 <iprintf>
      if(Appli_LedState == 1)
 8006c06:	4b6d      	ldr	r3, [pc, #436]	@ (8006dbc <Appli_Vendor_LEDControl+0x25c>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d117      	bne.n	8006c3e <Appli_Vendor_LEDControl+0xde>
      {
        Appli_LightPwmValue.IntensityValue = LED_OFF_VALUE;
 8006c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8006dc4 <Appli_Vendor_LEDControl+0x264>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	f042 0201 	orr.w	r2, r2, #1
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	705a      	strb	r2, [r3, #1]
                                    
#ifndef CUSTOM_BOARD_PWM_SELECTION            
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
 8006c1c:	4b69      	ldr	r3, [pc, #420]	@ (8006dc4 <Appli_Vendor_LEDControl+0x264>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	4611      	mov	r1, r2
 8006c22:	6858      	ldr	r0, [r3, #4]
 8006c24:	4602      	mov	r2, r0
 8006c26:	6898      	ldr	r0, [r3, #8]
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2004      	movs	r0, #4
 8006c2c:	f7fe f89e 	bl	8004d6c <Light_UpdateLedValue>
#else
        Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
#endif            
        Appli_LedState = 0;
 8006c30:	4b62      	ldr	r3, [pc, #392]	@ (8006dbc <Appli_Vendor_LEDControl+0x25c>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED_BLUE);
 8006c36:	2000      	movs	r0, #0
 8006c38:	f000 ff68 	bl	8007b0c <BSP_LED_Off>
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
        Appli_LedState = 1;
        BSP_LED_On(LED_BLUE);
      }
              
      break;
 8006c3c:	e097      	b.n	8006d6e <Appli_Vendor_LEDControl+0x20e>
        Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
 8006c3e:	4b61      	ldr	r3, [pc, #388]	@ (8006dc4 <Appli_Vendor_LEDControl+0x264>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	f062 0209 	orn	r2, r2, #9
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f042 027c 	orr.w	r2, r2, #124	@ 0x7c
 8006c4e:	705a      	strb	r2, [r3, #1]
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 8006c50:	4b5c      	ldr	r3, [pc, #368]	@ (8006dc4 <Appli_Vendor_LEDControl+0x264>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	4611      	mov	r1, r2
 8006c56:	6858      	ldr	r0, [r3, #4]
 8006c58:	4602      	mov	r2, r0
 8006c5a:	6898      	ldr	r0, [r3, #8]
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2004      	movs	r0, #4
 8006c60:	f7fe f884 	bl	8004d6c <Light_UpdateLedValue>
        Appli_LedState = 1;
 8006c64:	4b55      	ldr	r3, [pc, #340]	@ (8006dbc <Appli_Vendor_LEDControl+0x25c>)
 8006c66:	2201      	movs	r2, #1
 8006c68:	701a      	strb	r2, [r3, #0]
        BSP_LED_On(LED_BLUE);
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	f000 ff34 	bl	8007ad8 <BSP_LED_On>
      break;
 8006c70:	e07d      	b.n	8006d6e <Appli_Vendor_LEDControl+0x20e>
    /* On Command */  
  case APPLI_CMD_ON:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_ON callback received for elementIndex %d \r\n", elementIndex);     
 8006c72:	2100      	movs	r1, #0
 8006c74:	484e      	ldr	r0, [pc, #312]	@ (8006db0 <Appli_Vendor_LEDControl+0x250>)
 8006c76:	f006 fc51 	bl	800d51c <TraceHeader>
 8006c7a:	79fb      	ldrb	r3, [r7, #7]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4852      	ldr	r0, [pc, #328]	@ (8006dc8 <Appli_Vendor_LEDControl+0x268>)
 8006c80:	f022 f8f6 	bl	8028e70 <iprintf>
      Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
 8006c84:	4b4f      	ldr	r3, [pc, #316]	@ (8006dc4 <Appli_Vendor_LEDControl+0x264>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	f062 0209 	orn	r2, r2, #9
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f042 027c 	orr.w	r2, r2, #124	@ 0x7c
 8006c94:	705a      	strb	r2, [r3, #1]
      Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
 8006c96:	4b4b      	ldr	r3, [pc, #300]	@ (8006dc4 <Appli_Vendor_LEDControl+0x264>)
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	6858      	ldr	r0, [r3, #4]
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	6898      	ldr	r0, [r3, #8]
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2004      	movs	r0, #4
 8006ca6:	f7fe f861 	bl	8004d6c <Light_UpdateLedValue>
      BSP_LED_On(LED_BLUE);
 8006caa:	2000      	movs	r0, #0
 8006cac:	f000 ff14 	bl	8007ad8 <BSP_LED_On>
      Appli_LedState = 1;
 8006cb0:	4b42      	ldr	r3, [pc, #264]	@ (8006dbc <Appli_Vendor_LEDControl+0x25c>)
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	701a      	strb	r2, [r3, #0]
          
      break;
 8006cb6:	e05a      	b.n	8006d6e <Appli_Vendor_LEDControl+0x20e>
    /* Off Command */  
  case APPLI_CMD_OFF:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_OFF callback received for elementIndex %d \r\n", elementIndex);                   
 8006cb8:	2100      	movs	r1, #0
 8006cba:	483d      	ldr	r0, [pc, #244]	@ (8006db0 <Appli_Vendor_LEDControl+0x250>)
 8006cbc:	f006 fc2e 	bl	800d51c <TraceHeader>
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4841      	ldr	r0, [pc, #260]	@ (8006dcc <Appli_Vendor_LEDControl+0x26c>)
 8006cc6:	f022 f8d3 	bl	8028e70 <iprintf>
      Appli_LightPwmValue.IntensityValue = LED_OFF_VALUE;
 8006cca:	4b3e      	ldr	r3, [pc, #248]	@ (8006dc4 <Appli_Vendor_LEDControl+0x264>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	701a      	strb	r2, [r3, #0]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	705a      	strb	r2, [r3, #1]
            
#ifndef CUSTOM_BOARD_PWM_SELECTION            
      Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
 8006cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8006dc4 <Appli_Vendor_LEDControl+0x264>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	4611      	mov	r1, r2
 8006cde:	6858      	ldr	r0, [r3, #4]
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	6898      	ldr	r0, [r3, #8]
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2004      	movs	r0, #4
 8006ce8:	f7fe f840 	bl	8004d6c <Light_UpdateLedValue>
#else
      Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
#endif            
      Appli_LedState = 0;
 8006cec:	4b33      	ldr	r3, [pc, #204]	@ (8006dbc <Appli_Vendor_LEDControl+0x25c>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	701a      	strb	r2, [r3, #0]
      BSP_LED_Off(LED_BLUE);
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	f000 ff0a 	bl	8007b0c <BSP_LED_Off>
          
      break;
 8006cf8:	e039      	b.n	8006d6e <Appli_Vendor_LEDControl+0x20e>
        /* intensity command */
    case APPLI_CMD_LED_INTENSITY:
      {
        /*User Need to write the commands as per the element selected*/
          
        TRACE_M(TF_VENDOR,"Appli_LED_Intensity callback received for elementIndex %d \r\n", elementIndex);    
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	482c      	ldr	r0, [pc, #176]	@ (8006db0 <Appli_Vendor_LEDControl+0x250>)
 8006cfe:	f006 fc0d 	bl	800d51c <TraceHeader>
 8006d02:	79fb      	ldrb	r3, [r7, #7]
 8006d04:	4619      	mov	r1, r3
 8006d06:	4832      	ldr	r0, [pc, #200]	@ (8006dd0 <Appli_Vendor_LEDControl+0x270>)
 8006d08:	f022 f8b2 	bl	8028e70 <iprintf>
        intensityValue = data[2] << 8;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3302      	adds	r3, #2
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	021b      	lsls	r3, r3, #8
 8006d14:	82bb      	strh	r3, [r7, #20]
        intensityValue |= data[1];
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	8abb      	ldrh	r3, [r7, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	82bb      	strh	r3, [r7, #20]
                    
        duty = PwmValueMapping(intensityValue , 0x7FFF ,0);                         
 8006d24:	8abb      	ldrh	r3, [r7, #20]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff fd2d 	bl	800678c <PwmValueMapping>
 8006d32:	4603      	mov	r3, r0
 8006d34:	823b      	strh	r3, [r7, #16]
        Appli_LightPwmValue.IntensityValue = duty;
 8006d36:	4b23      	ldr	r3, [pc, #140]	@ (8006dc4 <Appli_Vendor_LEDControl+0x264>)
 8006d38:	8a3a      	ldrh	r2, [r7, #16]
 8006d3a:	801a      	strh	r2, [r3, #0]
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);             
 8006d3c:	4b21      	ldr	r3, [pc, #132]	@ (8006dc4 <Appli_Vendor_LEDControl+0x264>)
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	4611      	mov	r1, r2
 8006d42:	6858      	ldr	r0, [r3, #4]
 8006d44:	4602      	mov	r2, r0
 8006d46:	6898      	ldr	r0, [r3, #8]
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2004      	movs	r0, #4
 8006d4c:	f7fe f80e 	bl	8004d6c <Light_UpdateLedValue>
        if(duty > 16000)
 8006d50:	8a3b      	ldrh	r3, [r7, #16]
 8006d52:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8006d56:	d903      	bls.n	8006d60 <Appli_Vendor_LEDControl+0x200>
        {
          BSP_LED_On(LED_BLUE);
 8006d58:	2000      	movs	r0, #0
 8006d5a:	f000 febd 	bl	8007ad8 <BSP_LED_On>
        }
        else
        {
          BSP_LED_Off(LED_BLUE);
        }
        break;
 8006d5e:	e006      	b.n	8006d6e <Appli_Vendor_LEDControl+0x20e>
          BSP_LED_Off(LED_BLUE);
 8006d60:	2000      	movs	r0, #0
 8006d62:	f000 fed3 	bl	8007b0c <BSP_LED_Off>
        break;
 8006d66:	e002      	b.n	8006d6e <Appli_Vendor_LEDControl+0x20e>
      }
    /* Default case - Not valid command */
  default:
    {
      status = MOBLE_RESULT_FALSE;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d6c:	bf00      	nop
    }
  }
  /*Buffer will be sent for Reliable Response*/
  /*First Byte is Sub Command and 2nd Byte is LED Status*/
  ResponseBuffer[0] = subCommand;
 8006d6e:	4a19      	ldr	r2, [pc, #100]	@ (8006dd4 <Appli_Vendor_LEDControl+0x274>)
 8006d70:	7cfb      	ldrb	r3, [r7, #19]
 8006d72:	7013      	strb	r3, [r2, #0]
  if(subCommand == APPLI_CMD_LED_INTENSITY)
 8006d74:	7cfb      	ldrb	r3, [r7, #19]
 8006d76:	2b06      	cmp	r3, #6
 8006d78:	d10d      	bne.n	8006d96 <Appli_Vendor_LEDControl+0x236>
  {
    ResponseBuffer[1] = intensityValue >> 8 ;
 8006d7a:	8abb      	ldrh	r3, [r7, #20]
 8006d7c:	0a1b      	lsrs	r3, r3, #8
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	4b14      	ldr	r3, [pc, #80]	@ (8006dd4 <Appli_Vendor_LEDControl+0x274>)
 8006d84:	705a      	strb	r2, [r3, #1]
    ResponseBuffer[2] = intensityValue ;
 8006d86:	8abb      	ldrh	r3, [r7, #20]
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	4b12      	ldr	r3, [pc, #72]	@ (8006dd4 <Appli_Vendor_LEDControl+0x274>)
 8006d8c:	709a      	strb	r2, [r3, #2]
    BuffLength = 3;
 8006d8e:	4b12      	ldr	r3, [pc, #72]	@ (8006dd8 <Appli_Vendor_LEDControl+0x278>)
 8006d90:	2203      	movs	r2, #3
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	e006      	b.n	8006da4 <Appli_Vendor_LEDControl+0x244>
  }
  else
  {
    ResponseBuffer[1] = Appli_LedState ;
 8006d96:	4b09      	ldr	r3, [pc, #36]	@ (8006dbc <Appli_Vendor_LEDControl+0x25c>)
 8006d98:	781a      	ldrb	r2, [r3, #0]
 8006d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd4 <Appli_Vendor_LEDControl+0x274>)
 8006d9c:	705a      	strb	r2, [r3, #1]
    BuffLength = 2; 
 8006d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd8 <Appli_Vendor_LEDControl+0x278>)
 8006da0:	2202      	movs	r2, #2
 8006da2:	801a      	strh	r2, [r3, #0]
  }
      
  return status;
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	08030894 	.word	0x08030894
 8006db4:	0802e4e8 	.word	0x0802e4e8
 8006db8:	0802e4f8 	.word	0x0802e4f8
 8006dbc:	2000442a 	.word	0x2000442a
 8006dc0:	0802e534 	.word	0x0802e534
 8006dc4:	2000441c 	.word	0x2000441c
 8006dc8:	0802e570 	.word	0x0802e570
 8006dcc:	0802e5a8 	.word	0x0802e5a8
 8006dd0:	0802e5e0 	.word	0x0802e5e0
 8006dd4:	20004450 	.word	0x20004450
 8006dd8:	2000448c 	.word	0x2000448c

08006ddc <Appli_Vendor_Data_write>:
* @param  data: Pointer to the data received from peer_addr
* @param  length: Length of the data
* @retval MOBLE_RESULT status of result
*/          
MOBLE_RESULT Appli_Vendor_Data_write(MOBLEUINT8 const *data, MOBLEUINT32 length)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;  
 8006de6:	2300      	movs	r3, #0
 8006de8:	73fb      	strb	r3, [r7, #15]
  MOBLEUINT8 subCmd = data[0];
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	72fb      	strb	r3, [r7, #11]
  /*First Byte is sending the Sub Command*/      
  ResponseBuffer[0]=subCmd;
 8006df0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e60 <Appli_Vendor_Data_write+0x84>)
 8006df2:	7afb      	ldrb	r3, [r7, #11]
 8006df4:	7013      	strb	r3, [r2, #0]
       
  TRACE_M(TF_VENDOR, "#0E-%02hx %02lx! \n\r",data[0], length);
 8006df6:	2100      	movs	r1, #0
 8006df8:	481a      	ldr	r0, [pc, #104]	@ (8006e64 <Appli_Vendor_Data_write+0x88>)
 8006dfa:	f006 fb8f 	bl	800d51c <TraceHeader>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	4619      	mov	r1, r3
 8006e06:	4818      	ldr	r0, [pc, #96]	@ (8006e68 <Appli_Vendor_Data_write+0x8c>)
 8006e08:	f022 f832 	bl	8028e70 <iprintf>
  for(MOBLEUINT16 i=0; i<length; i++)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	81bb      	strh	r3, [r7, #12]
 8006e10:	e00a      	b.n	8006e28 <Appli_Vendor_Data_write+0x4c>
  {
    TRACE_I(TF_VENDOR,"%02hx ",data[i]);
 8006e12:	89bb      	ldrh	r3, [r7, #12]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	4413      	add	r3, r2
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	4813      	ldr	r0, [pc, #76]	@ (8006e6c <Appli_Vendor_Data_write+0x90>)
 8006e1e:	f022 f827 	bl	8028e70 <iprintf>
  for(MOBLEUINT16 i=0; i<length; i++)
 8006e22:	89bb      	ldrh	r3, [r7, #12]
 8006e24:	3301      	adds	r3, #1
 8006e26:	81bb      	strh	r3, [r7, #12]
 8006e28:	89bb      	ldrh	r3, [r7, #12]
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d8f0      	bhi.n	8006e12 <Appli_Vendor_Data_write+0x36>
  }
  TRACE_I(TF_VENDOR,"\n\r");
 8006e30:	480f      	ldr	r0, [pc, #60]	@ (8006e70 <Appli_Vendor_Data_write+0x94>)
 8006e32:	f022 f81d 	bl	8028e70 <iprintf>
  switch(subCmd)
 8006e36:	7afb      	ldrb	r3, [r7, #11]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d109      	bne.n	8006e50 <Appli_Vendor_Data_write+0x74>
  {     
    case APPLI_STRING_WRITE:
    {            
      memcpy(&ResponseBuffer,data,length);
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4807      	ldr	r0, [pc, #28]	@ (8006e60 <Appli_Vendor_Data_write+0x84>)
 8006e42:	f022 fa44 	bl	80292ce <memcpy>
      BuffLength = length;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e74 <Appli_Vendor_Data_write+0x98>)
 8006e4c:	801a      	strh	r2, [r3, #0]
      break;
 8006e4e:	e002      	b.n	8006e56 <Appli_Vendor_Data_write+0x7a>
    }
    default:
    {
      status = MOBLE_RESULT_FALSE;
 8006e50:	2301      	movs	r3, #1
 8006e52:	73fb      	strb	r3, [r7, #15]
      break;
 8006e54:	bf00      	nop
    }
  }
  return status;        
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20004450 	.word	0x20004450
 8006e64:	080308ac 	.word	0x080308ac
 8006e68:	0802e620 	.word	0x0802e620
 8006e6c:	0802e634 	.word	0x0802e634
 8006e70:	0802e4e4 	.word	0x0802e4e4
 8006e74:	2000448c 	.word	0x2000448c

08006e78 <Appli_GetTestValue>:
*          when Vensor application test command received then status message is to be provided
* @param  responseValue: Pointer to the status message
* @retval void
*/ 
void Appli_GetTestValue (MOBLEUINT8 *responseValue)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  *responseValue = TestHitCounter;
 8006e80:	4b11      	ldr	r3, [pc, #68]	@ (8006ec8 <Appli_GetTestValue+0x50>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	701a      	strb	r2, [r3, #0]
  *(responseValue+1)  = TestHitCounter >> 8;
 8006e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ec8 <Appli_GetTestValue+0x50>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	0a1a      	lsrs	r2, r3, #8
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3301      	adds	r3, #1
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	701a      	strb	r2, [r3, #0]
  *(responseValue+2)  = TestHitCounter >> 16;
 8006e98:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec8 <Appli_GetTestValue+0x50>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	0c1a      	lsrs	r2, r3, #16
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3302      	adds	r3, #2
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]
  *(responseValue+3)  = TestHitCounter >> 24;
 8006ea6:	4b08      	ldr	r3, [pc, #32]	@ (8006ec8 <Appli_GetTestValue+0x50>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	0e1a      	lsrs	r2, r3, #24
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3303      	adds	r3, #3
 8006eb0:	b2d2      	uxtb	r2, r2
 8006eb2:	701a      	strb	r2, [r3, #0]
  TestHitCounter = 0;
 8006eb4:	4b04      	ldr	r3, [pc, #16]	@ (8006ec8 <Appli_GetTestValue+0x50>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	200044d8 	.word	0x200044d8

08006ecc <Appli_Vendor_SetBigDataPacket>:
* @param  dst_peer : Destination address
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_Vendor_SetBigDataPacket(MOBLEUINT8 *data, MOBLEUINT32 length,
                                       MOBLEUINT8 elementIndex , MOBLE_ADDRESS dst_peer)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	461a      	mov	r2, r3
 8006eda:	460b      	mov	r3, r1
 8006edc:	71fb      	strb	r3, [r7, #7]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80bb      	strh	r3, [r7, #4]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]
  
  if (length > VENDOR_DATA_BUFFER_SIZE)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b3c      	cmp	r3, #60	@ 0x3c
 8006eea:	d901      	bls.n	8006ef0 <Appli_Vendor_SetBigDataPacket+0x24>
  {
    status = MOBLE_RESULT_INVALIDARG;
 8006eec:	2303      	movs	r3, #3
 8006eee:	75fb      	strb	r3, [r7, #23]
  }
  memmove(Appli_VendorBigData.data, data, length);
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	68f9      	ldr	r1, [r7, #12]
 8006ef4:	4808      	ldr	r0, [pc, #32]	@ (8006f18 <Appli_Vendor_SetBigDataPacket+0x4c>)
 8006ef6:	f022 f93f 	bl	8029178 <memmove>
  Appli_VendorBigData.dst = dst_peer;
 8006efa:	4a08      	ldr	r2, [pc, #32]	@ (8006f1c <Appli_Vendor_SetBigDataPacket+0x50>)
 8006efc:	88bb      	ldrh	r3, [r7, #4]
 8006efe:	8013      	strh	r3, [r2, #0]
  Appli_VendorBigData.length = length;
 8006f00:	4a06      	ldr	r2, [pc, #24]	@ (8006f1c <Appli_Vendor_SetBigDataPacket+0x50>)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	6413      	str	r3, [r2, #64]	@ 0x40
  Appli_VendorBigData.elementIndex = elementIndex;
 8006f06:	4a05      	ldr	r2, [pc, #20]	@ (8006f1c <Appli_Vendor_SetBigDataPacket+0x50>)
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	f882 3044 	strb.w	r3, [r2, #68]	@ 0x44
  return status;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20004492 	.word	0x20004492
 8006f1c:	20004490 	.word	0x20004490

08006f20 <Appli_Vendor_SendBigDataPacket>:
* @brief  Send Vendor big data packet
* @param  void      
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_Vendor_SendBigDataPacket(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af04      	add	r7, sp, #16
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8006f26:	2300      	movs	r3, #0
 8006f28:	71fb      	strb	r3, [r7, #7]
  
  if(BLEMesh_TrsptIsBusyState())
 8006f2a:	f015 fe4f 	bl	801cbcc <BLEMesh_TrsptIsBusyState>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <Appli_Vendor_SendBigDataPacket+0x20>
  {
    BSP_LED_On(LED_BLUE);
 8006f34:	2000      	movs	r0, #0
 8006f36:	f000 fdcf 	bl	8007ad8 <BSP_LED_On>
    status = MOBLE_RESULT_FALSE;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	71fb      	strb	r3, [r7, #7]
 8006f3e:	e014      	b.n	8006f6a <Appli_Vendor_SendBigDataPacket+0x4a>
  }
  else
  {
    BSP_LED_Off(LED_BLUE);
 8006f40:	2000      	movs	r0, #0
 8006f42:	f000 fde3 	bl	8007b0c <BSP_LED_Off>
    status = BLEMesh_SetRemoteData(Appli_VendorBigData.dst,
 8006f46:	4b0b      	ldr	r3, [pc, #44]	@ (8006f74 <Appli_Vendor_SendBigDataPacket+0x54>)
 8006f48:	8818      	ldrh	r0, [r3, #0]
 8006f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f74 <Appli_Vendor_SendBigDataPacket+0x54>)
 8006f4c:	f893 1044 	ldrb.w	r1, [r3, #68]	@ 0x44
 8006f50:	4b08      	ldr	r3, [pc, #32]	@ (8006f74 <Appli_Vendor_SendBigDataPacket+0x54>)
 8006f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f54:	2201      	movs	r2, #1
 8006f56:	9202      	str	r2, [sp, #8]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	9201      	str	r2, [sp, #4]
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	4b06      	ldr	r3, [pc, #24]	@ (8006f78 <Appli_Vendor_SendBigDataPacket+0x58>)
 8006f60:	220e      	movs	r2, #14
 8006f62:	f020 ff8f 	bl	8027e84 <BLEMesh_SetRemoteData>
 8006f66:	4603      	mov	r3, r0
 8006f68:	71fb      	strb	r3, [r7, #7]
                                       Appli_VendorBigData.length,
                                       MOBLE_FALSE, 
                                       MOBLE_TRUE);

  }
  return status;
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20004490 	.word	0x20004490
 8006f78:	20004492 	.word	0x20004492

08006f7c <GetApplicationVendorModels>:

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

void GetApplicationVendorModels(const MODEL_Vendor_cb_t** pModelsTable, MOBLEUINT32* VendorModelscount)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
#ifdef ENABLE_VENDOR_MODEL_SERVER
  *pModelsTable = Model_Vendor_cb       ;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a05      	ldr	r2, [pc, #20]	@ (8006fa0 <GetApplicationVendorModels+0x24>)
 8006f8a:	601a      	str	r2, [r3, #0]
  *VendorModelscount = MODEL_VENDOR_COUNT;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	601a      	str	r2, [r3, #0]
  
   TRACE_M(TF_VENDOR_M, "GetApplicationVendorModels \r\n");
#endif
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	080309f0 	.word	0x080309f0

08006fa4 <BLEMesh_ModelsInit>:
* @brief  Initialization Commands for Models
* @param  void
* @retval void
*/    
void BLEMesh_ModelsInit(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b092      	sub	sp, #72	@ 0x48
 8006fa8:	af00      	add	r7, sp, #0
#endif	
#endif
  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
  /* Inintialise the light model range states with default values */
  Light_ModelRangeInit();
 8006faa:	f009 fd41 	bl	8010a30 <Light_ModelRangeInit>
#endif
  
  /* Callbacks used by BlueNRG-Mesh Models */
  BLEMesh_SetSIGModelsCbMap(Model_SIG_cb, MODEL_SIG_COUNT);
 8006fae:	2102      	movs	r1, #2
 8006fb0:	480c      	ldr	r0, [pc, #48]	@ (8006fe4 <BLEMesh_ModelsInit+0x40>)
 8006fb2:	f020 fe77 	bl	8027ca4 <BLEMesh_SetSIGModelsCbMap>
#ifdef ENABLE_LIGHT_MODEL_SERVER_LC
  Appli_Light_LCs_Init();
#endif
  
  /* Load generic model states from nvm */
  AppliNvm_LoadModelState(modelStateLoadBuff, &modelStateLoad_Size);
 8006fb6:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 8006fba:	1d3b      	adds	r3, r7, #4
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7ff fc37 	bl	8006832 <AppliNvm_LoadModelState>
  if (modelStateLoad_Size != 0)
 8006fc4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <BLEMesh_ModelsInit+0x38>
  {
    /* update states of generic model */
    Model_RestoreStates(modelStateLoadBuff, modelStateLoad_Size);
 8006fcc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	1d3b      	adds	r3, r7, #4
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f006 fac2 	bl	800d560 <Model_RestoreStates>
  }
}
 8006fdc:	bf00      	nop
 8006fde:	3748      	adds	r7, #72	@ 0x48
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	080309cc 	.word	0x080309cc

08006fe8 <BLEMesh_ModelsProcess>:
* @brief  Process Commands for Models
* @param  void
* @retval void
*/    
void BLEMesh_ModelsProcess(void)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
#ifdef ENABLE_GENERIC_MODEL_SERVER  
  Generic_Process();
 8006fec:	f007 ff06 	bl	800edfc <Generic_Process>
#endif

#ifdef ENABLE_LIGHT_MODEL_SERVER  
  Lighting_Process();
 8006ff0:	f009 fb8a 	bl	8010708 <Lighting_Process>
#endif

#ifdef ENABLE_VENDOR_MODEL_SERVER  
  Vendor_Process();
 8006ff4:	f00c fe18 	bl	8013c28 <Vendor_Process>
#endif
  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LC   
  Light_LC_Process();
#endif
}
 8006ff8:	bf00      	nop
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <BLEMesh_ModelsCommand>:
* @brief  Publish Command for Models
* @param  void
* @retval void
*/    
void BLEMesh_ModelsCommand(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
  
      
/* if CLIENT and SERVER => Publish is already done in CLIENT */
#ifdef GENERIC_SERVER_MODEL_PUBLISH 
#ifndef GENERIC_CLIENT_MODEL_PUBLISH  
  Generic_Publish(BLEMesh_GetAddress());
 8007000:	f015 fd3c 	bl	801ca7c <BLEMesh_GetAddress>
 8007004:	4603      	mov	r3, r0
 8007006:	4618      	mov	r0, r3
 8007008:	f008 f890 	bl	800f12c <Generic_Publish>
#endif
#endif
}
 800700c:	bf00      	nop
 800700e:	bd80      	pop	{r7, pc}

08007010 <BLEMesh_ModelsDelayPacket>:
*/ 
void BLEMesh_ModelsDelayPacket(MODEL_MessageHeader_t *pmsgParams,
                               MOBLEUINT8 command, 
                               MOBLEUINT8 const * data, 
                               MOBLEUINT32 length)
{
 8007010:	b590      	push	{r4, r7, lr}
 8007012:	b089      	sub	sp, #36	@ 0x24
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	607a      	str	r2, [r7, #4]
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	460b      	mov	r3, r1
 800701e:	72fb      	strb	r3, [r7, #11]
  MOBLEUINT8 random_time[8];
  
  if (Appli_PendingPackets.packet_count == 0)
 8007020:	4b55      	ldr	r3, [pc, #340]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d136      	bne.n	8007096 <BLEMesh_ModelsDelayPacket+0x86>
  {
    Appli_PendingPackets.packet_count = 1;
 8007028:	4b53      	ldr	r3, [pc, #332]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 800702a:	2201      	movs	r2, #1
 800702c:	701a      	strb	r2, [r3, #0]
    hci_le_rand(random_time);
 800702e:	f107 0314 	add.w	r3, r7, #20
 8007032:	4618      	mov	r0, r3
 8007034:	f00e f979 	bl	801532a <hci_le_rand>
    Appli_PendingPackets.send_time = Clock_Time() + 
 8007038:	f000 fef0 	bl	8007e1c <HAL_GetTick>
 800703c:	4601      	mov	r1, r0
      DEFAULT_DELAY_PACKET_FROM + 
        (random_time[0] + random_time[1]*256)\
 800703e:	7d3b      	ldrb	r3, [r7, #20]
 8007040:	461a      	mov	r2, r3
 8007042:	7d7b      	ldrb	r3, [r7, #21]
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	4413      	add	r3, r2
 8007048:	461a      	mov	r2, r3
          %DEFAULT_DELAY_PACKET_RANDOM_TIME;    
 800704a:	4b4c      	ldr	r3, [pc, #304]	@ (800717c <BLEMesh_ModelsDelayPacket+0x16c>)
 800704c:	fba3 0302 	umull	r0, r3, r3, r2
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007056:	fb00 f303 	mul.w	r3, r0, r3
 800705a:	1ad3      	subs	r3, r2, r3
      DEFAULT_DELAY_PACKET_FROM + 
 800705c:	440b      	add	r3, r1
 800705e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
    Appli_PendingPackets.send_time = Clock_Time() + 
 8007062:	4a45      	ldr	r2, [pc, #276]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 8007064:	f8c2 3001 	str.w	r3, [r2, #1]
    Appli_PendingPackets.head = Appli_PendingPackets.packet;
 8007068:	4b43      	ldr	r3, [pc, #268]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 800706a:	4a45      	ldr	r2, [pc, #276]	@ (8007180 <BLEMesh_ModelsDelayPacket+0x170>)
 800706c:	f8c3 2005 	str.w	r2, [r3, #5]
    Appli_PendingPackets.head_index = 0;
 8007070:	4b41      	ldr	r3, [pc, #260]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 8007072:	2200      	movs	r2, #0
 8007074:	725a      	strb	r2, [r3, #9]
    TRACE_M(TF_MISC, "Randomized time: %ld\n\r", Appli_PendingPackets.send_time - Clock_Time());
 8007076:	2100      	movs	r1, #0
 8007078:	4842      	ldr	r0, [pc, #264]	@ (8007184 <BLEMesh_ModelsDelayPacket+0x174>)
 800707a:	f006 fa4f 	bl	800d51c <TraceHeader>
 800707e:	4b3e      	ldr	r3, [pc, #248]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 8007080:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8007084:	f000 feca 	bl	8007e1c <HAL_GetTick>
 8007088:	4603      	mov	r3, r0
 800708a:	1ae3      	subs	r3, r4, r3
 800708c:	4619      	mov	r1, r3
 800708e:	483e      	ldr	r0, [pc, #248]	@ (8007188 <BLEMesh_ModelsDelayPacket+0x178>)
 8007090:	f021 feee 	bl	8028e70 <iprintf>
 8007094:	e02d      	b.n	80070f2 <BLEMesh_ModelsDelayPacket+0xe2>
  }
  else 
  {
    Appli_PendingPackets.packet_count += 1;
 8007096:	4b38      	ldr	r3, [pc, #224]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	3301      	adds	r3, #1
 800709c:	b2da      	uxtb	r2, r3
 800709e:	4b36      	ldr	r3, [pc, #216]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 80070a0:	701a      	strb	r2, [r3, #0]
    Appli_PendingPackets.packet_count = (Appli_PendingPackets.packet_count)%\
 80070a2:	4b35      	ldr	r3, [pc, #212]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 80070a4:	781a      	ldrb	r2, [r3, #0]
 80070a6:	4b39      	ldr	r3, [pc, #228]	@ (800718c <BLEMesh_ModelsDelayPacket+0x17c>)
 80070a8:	fba3 1302 	umull	r1, r3, r3, r2
 80070ac:	0859      	lsrs	r1, r3, #1
 80070ae:	460b      	mov	r3, r1
 80070b0:	005b      	lsls	r3, r3, #1
 80070b2:	440b      	add	r3, r1
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	4b2f      	ldr	r3, [pc, #188]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 80070ba:	701a      	strb	r2, [r3, #0]
      (MAX_PENDING_PACKETS_QUE_SIZE+1);
    
    if (Appli_PendingPackets.head != (Appli_PendingPackets.packet + \
 80070bc:	4b2e      	ldr	r3, [pc, #184]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 80070be:	f8d3 3005 	ldr.w	r3, [r3, #5]
      MAX_PENDING_PACKETS_QUE_SIZE - 1))
 80070c2:	4a33      	ldr	r2, [pc, #204]	@ (8007190 <BLEMesh_ModelsDelayPacket+0x180>)
    if (Appli_PendingPackets.head != (Appli_PendingPackets.packet + \
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00d      	beq.n	80070e4 <BLEMesh_ModelsDelayPacket+0xd4>
    {
      Appli_PendingPackets.head = Appli_PendingPackets.head +1;
 80070c8:	4b2b      	ldr	r3, [pc, #172]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 80070ca:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80070ce:	331c      	adds	r3, #28
 80070d0:	4a29      	ldr	r2, [pc, #164]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 80070d2:	f8c2 3005 	str.w	r3, [r2, #5]
      Appli_PendingPackets.head_index = Appli_PendingPackets.head_index+1;
 80070d6:	4b28      	ldr	r3, [pc, #160]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 80070d8:	7a5b      	ldrb	r3, [r3, #9]
 80070da:	3301      	adds	r3, #1
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	4b26      	ldr	r3, [pc, #152]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 80070e0:	725a      	strb	r2, [r3, #9]
 80070e2:	e006      	b.n	80070f2 <BLEMesh_ModelsDelayPacket+0xe2>
    }
    else
    {
      Appli_PendingPackets.head = Appli_PendingPackets.packet;
 80070e4:	4b24      	ldr	r3, [pc, #144]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 80070e6:	4a26      	ldr	r2, [pc, #152]	@ (8007180 <BLEMesh_ModelsDelayPacket+0x170>)
 80070e8:	f8c3 2005 	str.w	r2, [r3, #5]
      Appli_PendingPackets.head_index = 0;
 80070ec:	4b22      	ldr	r3, [pc, #136]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	725a      	strb	r2, [r3, #9]
    }
  }  
  
  Appli_PendingPackets.head->peer = pmsgParams->peer_addr;
 80070f2:	4b21      	ldr	r3, [pc, #132]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 80070f4:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	8892      	ldrh	r2, [r2, #4]
 80070fc:	801a      	strh	r2, [r3, #0]
  Appli_PendingPackets.head->dst = pmsgParams->dst_peer;
 80070fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 8007100:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	88d2      	ldrh	r2, [r2, #6]
 8007108:	805a      	strh	r2, [r3, #2]
  Appli_PendingPackets.head->elementIndex = pmsgParams->elementIndex;
 800710a:	4b1b      	ldr	r3, [pc, #108]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 800710c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	7812      	ldrb	r2, [r2, #0]
 8007114:	715a      	strb	r2, [r3, #5]
  Appli_PendingPackets.head->appKeyOffset = pmsgParams->rcvdAppKeyOffset;
 8007116:	4b18      	ldr	r3, [pc, #96]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 8007118:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	7a92      	ldrb	r2, [r2, #10]
 8007120:	719a      	strb	r2, [r3, #6]
  Appli_PendingPackets.head->netKeyOffset = pmsgParams->rcvdNetKeyOffset;
 8007122:	4b15      	ldr	r3, [pc, #84]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 8007124:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	7ad2      	ldrb	r2, [r2, #11]
 800712c:	71da      	strb	r2, [r3, #7]
  Appli_PendingPackets.head->command = command;
 800712e:	4b12      	ldr	r3, [pc, #72]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 8007130:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007134:	7afa      	ldrb	r2, [r7, #11]
 8007136:	711a      	strb	r2, [r3, #4]
  Appli_PendingPackets.head->length = length;
 8007138:	4b0f      	ldr	r3, [pc, #60]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 800713a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	619a      	str	r2, [r3, #24]
  for (MOBLEUINT8 count=0; count<length; count++)
 8007142:	2300      	movs	r3, #0
 8007144:	77fb      	strb	r3, [r7, #31]
 8007146:	e00d      	b.n	8007164 <BLEMesh_ModelsDelayPacket+0x154>
    Appli_PendingPackets.head->data[count] = data[count];
 8007148:	7ffb      	ldrb	r3, [r7, #31]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	18d1      	adds	r1, r2, r3
 800714e:	4b0a      	ldr	r3, [pc, #40]	@ (8007178 <BLEMesh_ModelsDelayPacket+0x168>)
 8007150:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8007154:	7ffb      	ldrb	r3, [r7, #31]
 8007156:	7809      	ldrb	r1, [r1, #0]
 8007158:	4413      	add	r3, r2
 800715a:	460a      	mov	r2, r1
 800715c:	721a      	strb	r2, [r3, #8]
  for (MOBLEUINT8 count=0; count<length; count++)
 800715e:	7ffb      	ldrb	r3, [r7, #31]
 8007160:	3301      	adds	r3, #1
 8007162:	77fb      	strb	r3, [r7, #31]
 8007164:	7ffb      	ldrb	r3, [r7, #31]
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d8ed      	bhi.n	8007148 <BLEMesh_ModelsDelayPacket+0x138>
}   
 800716c:	bf00      	nop
 800716e:	bf00      	nop
 8007170:	3724      	adds	r7, #36	@ 0x24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd90      	pop	{r4, r7, pc}
 8007176:	bf00      	nop
 8007178:	200044dc 	.word	0x200044dc
 800717c:	10624dd3 	.word	0x10624dd3
 8007180:	200044e6 	.word	0x200044e6
 8007184:	08030a08 	.word	0x08030a08
 8007188:	0802e63c 	.word	0x0802e63c
 800718c:	aaaaaaab 	.word	0xaaaaaaab
 8007190:	20004502 	.word	0x20004502

08007194 <BLEMesh_ModelsSendDelayedPacket>:
* @brief  If send timestamp is reached and que is not empty, send all packets
* @param  None
* @retval None
*/
void BLEMesh_ModelsSendDelayedPacket(void)
{
 8007194:	b590      	push	{r4, r7, lr}
 8007196:	b089      	sub	sp, #36	@ 0x24
 8007198:	af02      	add	r7, sp, #8
  APPLI_SEND_RESPONSE_MODULE* ptr;
  MODEL_MessageHeader_t msgParam;
  MOBLEUINT8 temp_index;
  
  if ((Appli_PendingPackets.packet_count != 0) && 
 800719a:	4b2f      	ldr	r3, [pc, #188]	@ (8007258 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d055      	beq.n	800724e <BLEMesh_ModelsSendDelayedPacket+0xba>
      (Appli_PendingPackets.send_time <= Clock_Time()))
 80071a2:	4b2d      	ldr	r3, [pc, #180]	@ (8007258 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 80071a4:	f8d3 4001 	ldr.w	r4, [r3, #1]
 80071a8:	f000 fe38 	bl	8007e1c <HAL_GetTick>
 80071ac:	4603      	mov	r3, r0
  if ((Appli_PendingPackets.packet_count != 0) && 
 80071ae:	429c      	cmp	r4, r3
 80071b0:	d84d      	bhi.n	800724e <BLEMesh_ModelsSendDelayedPacket+0xba>
  {
    for (MOBLEUINT8 count=Appli_PendingPackets.packet_count; count!=0; count--)
 80071b2:	4b29      	ldr	r3, [pc, #164]	@ (8007258 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	75fb      	strb	r3, [r7, #23]
 80071b8:	e043      	b.n	8007242 <BLEMesh_ModelsSendDelayedPacket+0xae>
    {
    TRACE_M(TF_MISC, "Sending randomized packets. Packet count: %d \n\r",\
 80071ba:	2100      	movs	r1, #0
 80071bc:	4827      	ldr	r0, [pc, #156]	@ (800725c <BLEMesh_ModelsSendDelayedPacket+0xc8>)
 80071be:	f006 f9ad 	bl	800d51c <TraceHeader>
 80071c2:	4b25      	ldr	r3, [pc, #148]	@ (8007258 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	3301      	adds	r3, #1
 80071ce:	4619      	mov	r1, r3
 80071d0:	4823      	ldr	r0, [pc, #140]	@ (8007260 <BLEMesh_ModelsSendDelayedPacket+0xcc>)
 80071d2:	f021 fe4d 	bl	8028e70 <iprintf>
        Appli_PendingPackets.packet_count - count + 1);
      temp_index = ((Appli_PendingPackets.head_index+MAX_PENDING_PACKETS_QUE_SIZE+1)\
 80071d6:	4b20      	ldr	r3, [pc, #128]	@ (8007258 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 80071d8:	7a5b      	ldrb	r3, [r3, #9]
 80071da:	1cda      	adds	r2, r3, #3
        -count)%MAX_PENDING_PACKETS_QUE_SIZE;
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	bfb8      	it	lt
 80071e8:	425b      	neglt	r3, r3
      temp_index = ((Appli_PendingPackets.head_index+MAX_PENDING_PACKETS_QUE_SIZE+1)\
 80071ea:	75bb      	strb	r3, [r7, #22]
      ptr = Appli_PendingPackets.packet + temp_index;
 80071ec:	7dba      	ldrb	r2, [r7, #22]
 80071ee:	4613      	mov	r3, r2
 80071f0:	00db      	lsls	r3, r3, #3
 80071f2:	1a9b      	subs	r3, r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	461a      	mov	r2, r3
 80071f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007264 <BLEMesh_ModelsSendDelayedPacket+0xd0>)
 80071fa:	4413      	add	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]
      
      /* Initialize the messageParam*/
      msgParam.dst_peer = ptr->dst;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	885b      	ldrh	r3, [r3, #2]
 8007202:	b29b      	uxth	r3, r3
 8007204:	817b      	strh	r3, [r7, #10]
      msgParam.peer_addr = ptr->peer;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	b29b      	uxth	r3, r3
 800720c:	813b      	strh	r3, [r7, #8]
      msgParam.elementIndex = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	713b      	strb	r3, [r7, #4]
      msgParam.rcvdAppKeyOffset = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	73bb      	strb	r3, [r7, #14]
      msgParam.rcvdNetKeyOffset = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]
      msgParam.rssi = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	737b      	strb	r3, [r7, #13]
      msgParam.ttl = 0;
 800721e:	2300      	movs	r3, #0
 8007220:	733b      	strb	r3, [r7, #12]
      
      VendorModel_SendResponse(VENDOR_STMICRO_CID, 
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	791a      	ldrb	r2, [r3, #4]
                               &msgParam,
                               ptr->command,
                               ptr->data,
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f103 0008 	add.w	r0, r3, #8
      VendorModel_SendResponse(VENDOR_STMICRO_CID, 
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	1d39      	adds	r1, r7, #4
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	4603      	mov	r3, r0
 8007236:	2030      	movs	r0, #48	@ 0x30
 8007238:	f01e f898 	bl	802536c <VendorModel_SendResponse>
    for (MOBLEUINT8 count=Appli_PendingPackets.packet_count; count!=0; count--)
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	3b01      	subs	r3, #1
 8007240:	75fb      	strb	r3, [r7, #23]
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1b8      	bne.n	80071ba <BLEMesh_ModelsSendDelayedPacket+0x26>
                               ptr->length);
    }
    
    Appli_PendingPackets.packet_count = 0;
 8007248:	4b03      	ldr	r3, [pc, #12]	@ (8007258 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 800724a:	2200      	movs	r2, #0
 800724c:	701a      	strb	r2, [r3, #0]
  }
}
 800724e:	bf00      	nop
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	bd90      	pop	{r4, r7, pc}
 8007256:	bf00      	nop
 8007258:	200044dc 	.word	0x200044dc
 800725c:	08030a24 	.word	0x08030a24
 8007260:	0802e654 	.word	0x0802e654
 8007264:	200044e6 	.word	0x200044e6

08007268 <BLEMesh_ModelsASCII_To_Char>:
* @brief  Convert ASCII value into Character
* @param  tempValue : 8bit value for conversion
* @retval MOBLEUINT8 
*/         
MOBLEUINT8 BLEMesh_ModelsASCII_To_Char(MOBLEUINT8 tempValue)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	4603      	mov	r3, r0
 8007270:	71fb      	strb	r3, [r7, #7]
  tempValue = tempValue - 0x30;
 8007272:	79fb      	ldrb	r3, [r7, #7]
 8007274:	3b30      	subs	r3, #48	@ 0x30
 8007276:	71fb      	strb	r3, [r7, #7]
  return tempValue;
 8007278:	79fb      	ldrb	r3, [r7, #7]
} 
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
	...

08007288 <GetPage>:
  * @brief  Gets the page of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The page of a given address
  */
static MOBLEUINT32 GetPage(MOBLEUINT32 Addr)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  MOBLEUINT32 page = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8007294:	4b10      	ldr	r3, [pc, #64]	@ (80072d8 <GetPage+0x50>)
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	029a      	lsls	r2, r3, #10
 800729a:	4b10      	ldr	r3, [pc, #64]	@ (80072dc <GetPage+0x54>)
 800729c:	4013      	ands	r3, r2
 800729e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d205      	bcs.n	80072b4 <GetPage+0x2c>
  {
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80072ae:	0b1b      	lsrs	r3, r3, #12
 80072b0:	60fb      	str	r3, [r7, #12]
 80072b2:	e00a      	b.n	80072ca <GetPage+0x42>
  }
  else
  {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 80072b4:	4b08      	ldr	r3, [pc, #32]	@ (80072d8 <GetPage+0x50>)
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	029a      	lsls	r2, r3, #10
 80072ba:	4b08      	ldr	r3, [pc, #32]	@ (80072dc <GetPage+0x54>)
 80072bc:	4013      	ands	r3, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80072c6:	0b1b      	lsrs	r3, r3, #12
 80072c8:	60fb      	str	r3, [r7, #12]
  }

  return page;
 80072ca:	68fb      	ldr	r3, [r7, #12]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	1fff75e0 	.word	0x1fff75e0
 80072dc:	001ffc00 	.word	0x001ffc00

080072e0 <PalNvmIsWriteProtected>:
* @brief  returns NVM write protect status
* @param  None
* @retval TRUE if flash is write protected
*/
MOBLEBOOL PalNvmIsWriteProtected(void)
{
 80072e0:	b480      	push	{r7}
 80072e2:	af00      	add	r7, sp, #0
    /* All flash is writable */
    return MOBLE_FALSE;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <PalNvmRead>:
*/
MOBLE_RESULT PalNvmRead(MOBLEUINT32 address,
                        void *buf, 
                        MOBLEUINT32 size, 
                        MOBLEBOOL backup)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	70fb      	strb	r3, [r7, #3]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 80072fe:	2300      	movs	r3, #0
 8007300:	75fb      	strb	r3, [r7, #23]
  
//  printf("MoblePalNvmRead >>>\r\n");  

  if (address > (NVM_BASE + NVM_SIZE))
 8007302:	4b13      	ldr	r3, [pc, #76]	@ (8007350 <PalNvmRead+0x60>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	429a      	cmp	r2, r3
 800730e:	d902      	bls.n	8007316 <PalNvmRead+0x26>
  {
    result = MOBLE_RESULT_INVALIDARG;
 8007310:	2303      	movs	r3, #3
 8007312:	75fb      	strb	r3, [r7, #23]
 8007314:	e017      	b.n	8007346 <PalNvmRead+0x56>
  }
  else if (size == 0)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d102      	bne.n	8007322 <PalNvmRead+0x32>
  {
    result = MOBLE_RESULT_FALSE;
 800731c:	2301      	movs	r3, #1
 800731e:	75fb      	strb	r3, [r7, #23]
 8007320:	e011      	b.n	8007346 <PalNvmRead+0x56>
  }
  else if ((address + size) > (NVM_BASE + NVM_SIZE))
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	441a      	add	r2, r3
 8007328:	4b09      	ldr	r3, [pc, #36]	@ (8007350 <PalNvmRead+0x60>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007330:	429a      	cmp	r2, r3
 8007332:	d902      	bls.n	800733a <PalNvmRead+0x4a>
  {
    result = MOBLE_RESULT_INVALIDARG;
 8007334:	2303      	movs	r3, #3
 8007336:	75fb      	strb	r3, [r7, #23]
 8007338:	e005      	b.n	8007346 <PalNvmRead+0x56>
  }
  else
  {
    memcpy(buf, (void *)(address), size);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	4619      	mov	r1, r3
 8007340:	68b8      	ldr	r0, [r7, #8]
 8007342:	f021 ffc4 	bl	80292ce <memcpy>
  }
  
//  printf("MoblePalNvmRead <<<\r\n");  
  return result;
 8007346:	7dfb      	ldrb	r3, [r7, #23]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	20004444 	.word	0x20004444

08007354 <PalNvmCompare>:
*/
MOBLE_RESULT PalNvmCompare(MOBLEUINT32 address,
                           void const *buf, 
                           MOBLEUINT32 size, 
                           MOBLE_NVM_COMPARE* comparison)
{
 8007354:	b480      	push	{r7}
 8007356:	b089      	sub	sp, #36	@ 0x24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8007362:	2300      	movs	r3, #0
 8007364:	77fb      	strb	r3, [r7, #31]
  MOBLEUINT32 i;

//  printf("MoblePalNvmCompare >>>\r\n");
  
  if ((comparison == NULL) || (buf == NULL))
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <PalNvmCompare+0x1e>
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d102      	bne.n	8007378 <PalNvmCompare+0x24>
  {
    result = MOBLE_RESULT_INVALIDARG;
 8007372:	2303      	movs	r3, #3
 8007374:	77fb      	strb	r3, [r7, #31]
 8007376:	e055      	b.n	8007424 <PalNvmCompare+0xd0>
  }
  else if (address > (NVM_BASE + NVM_SIZE))
 8007378:	4b2e      	ldr	r3, [pc, #184]	@ (8007434 <PalNvmCompare+0xe0>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	429a      	cmp	r2, r3
 8007384:	d902      	bls.n	800738c <PalNvmCompare+0x38>
  {
    result = MOBLE_RESULT_INVALIDARG;
 8007386:	2303      	movs	r3, #3
 8007388:	77fb      	strb	r3, [r7, #31]
 800738a:	e04b      	b.n	8007424 <PalNvmCompare+0xd0>
  }
  else if (size == 0)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d102      	bne.n	8007398 <PalNvmCompare+0x44>
  {
    result = MOBLE_RESULT_FALSE;
 8007392:	2301      	movs	r3, #1
 8007394:	77fb      	strb	r3, [r7, #31]
 8007396:	e045      	b.n	8007424 <PalNvmCompare+0xd0>
  }
  else if ((address + size) > (NVM_BASE + NVM_SIZE))
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	441a      	add	r2, r3
 800739e:	4b25      	ldr	r3, [pc, #148]	@ (8007434 <PalNvmCompare+0xe0>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d902      	bls.n	80073b0 <PalNvmCompare+0x5c>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80073aa:	2303      	movs	r3, #3
 80073ac:	77fb      	strb	r3, [r7, #31]
 80073ae:	e039      	b.n	8007424 <PalNvmCompare+0xd0>
  }
  else if (address & 3)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <PalNvmCompare+0x6c>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80073ba:	2303      	movs	r3, #3
 80073bc:	77fb      	strb	r3, [r7, #31]
 80073be:	e031      	b.n	8007424 <PalNvmCompare+0xd0>
  }
  else if (size & 3)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <PalNvmCompare+0x7c>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80073ca:	2303      	movs	r3, #3
 80073cc:	77fb      	strb	r3, [r7, #31]
 80073ce:	e029      	b.n	8007424 <PalNvmCompare+0xd0>
  }
  else
  {
    *comparison = MOBLE_NVM_COMPARE_EQUAL;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2200      	movs	r2, #0
 80073d4:	701a      	strb	r2, [r3, #0]
    size >>= 2;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	089b      	lsrs	r3, r3, #2
 80073da:	607b      	str	r3, [r7, #4]

    MOBLEUINT32 * src = (MOBLEUINT32*)buf;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	617b      	str	r3, [r7, #20]
    MOBLEUINT32 * dst = (MOBLEUINT32*)(address);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	613b      	str	r3, [r7, #16]
    
    i = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61bb      	str	r3, [r7, #24]
    do
    {
      if ((src[i] != dst[i]) && (*comparison == MOBLE_NVM_COMPARE_EQUAL))
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4413      	add	r3, r2
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	6939      	ldr	r1, [r7, #16]
 80073f8:	440b      	add	r3, r1
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d006      	beq.n	800740e <PalNvmCompare+0xba>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <PalNvmCompare+0xba>
      {
        *comparison = MOBLE_NVM_COMPARE_NOT_EQUAL;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2201      	movs	r2, #1
 800740c:	701a      	strb	r2, [r3, #0]
      }
      i++;
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	3301      	adds	r3, #1
 8007412:	61bb      	str	r3, [r7, #24]
    } while((*comparison != MOBLE_NVM_COMPARE_NOT_EQUAL) && (i < size));
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d003      	beq.n	8007424 <PalNvmCompare+0xd0>
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d3e1      	bcc.n	80073e8 <PalNvmCompare+0x94>
  }
  
//  printf("MoblePalNvmCompare <<<\r\n");
  return result;
 8007424:	7ffb      	ldrb	r3, [r7, #31]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3724      	adds	r7, #36	@ 0x24
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	20004444 	.word	0x20004444

08007438 <PalNvmErase>:
* @param  None
* @retval Result
*/
MOBLE_RESULT PalNvmErase(MOBLEUINT32 address,
                         MOBLEUINT8 nb_pages)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	70fb      	strb	r3, [r7, #3]
  if(FD_EraseSectors(GetPage(address), nb_pages) != 0)
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff ff1f 	bl	8007288 <GetPage>
 800744a:	4602      	mov	r2, r0
 800744c:	78fb      	ldrb	r3, [r7, #3]
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7fa fb25 	bl	8001aa0 <FD_EraseSectors>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <PalNvmErase+0x28>
  {
    return MOBLE_RESULT_FAIL;
 800745c:	2302      	movs	r3, #2
 800745e:	e000      	b.n	8007462 <PalNvmErase+0x2a>
  }

  return MOBLE_RESULT_SUCCESS;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <PalNvmWrite>:
* @retval Result
*/
MOBLE_RESULT PalNvmWrite(MOBLEUINT32 address,
                          void const *buf, 
                          MOBLEUINT32 size)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8007478:	2300      	movs	r3, #0
 800747a:	77fb      	strb	r3, [r7, #31]

  if (address > (NVM_BASE + NVM_SIZE))
 800747c:	4b27      	ldr	r3, [pc, #156]	@ (800751c <PalNvmWrite+0xb0>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	429a      	cmp	r2, r3
 8007488:	d902      	bls.n	8007490 <PalNvmWrite+0x24>
  {
    result = MOBLE_RESULT_INVALIDARG;
 800748a:	2303      	movs	r3, #3
 800748c:	77fb      	strb	r3, [r7, #31]
 800748e:	e03d      	b.n	800750c <PalNvmWrite+0xa0>
  }
  else if (size == 0)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d102      	bne.n	800749c <PalNvmWrite+0x30>
  {
    result = MOBLE_RESULT_FALSE;
 8007496:	2301      	movs	r3, #1
 8007498:	77fb      	strb	r3, [r7, #31]
 800749a:	e037      	b.n	800750c <PalNvmWrite+0xa0>
  }
  else if ((address + size) > (NVM_BASE + NVM_SIZE))
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	441a      	add	r2, r3
 80074a2:	4b1e      	ldr	r3, [pc, #120]	@ (800751c <PalNvmWrite+0xb0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d902      	bls.n	80074b4 <PalNvmWrite+0x48>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80074ae:	2303      	movs	r3, #3
 80074b0:	77fb      	strb	r3, [r7, #31]
 80074b2:	e02b      	b.n	800750c <PalNvmWrite+0xa0>
  }
  else if (address & 3)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <PalNvmWrite+0x58>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80074be:	2303      	movs	r3, #3
 80074c0:	77fb      	strb	r3, [r7, #31]
 80074c2:	e023      	b.n	800750c <PalNvmWrite+0xa0>
  }
  else if (size & 3)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <PalNvmWrite+0x68>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80074ce:	2303      	movs	r3, #3
 80074d0:	77fb      	strb	r3, [r7, #31]
 80074d2:	e01b      	b.n	800750c <PalNvmWrite+0xa0>
  }
  else
  {
    MOBLEUINT32 remain = 0;
 80074d4:	2300      	movs	r3, #0
 80074d6:	617b      	str	r3, [r7, #20]
    MOBLEUINT32 nb_dword = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	61bb      	str	r3, [r7, #24]
  
    nb_dword = (size >> 3);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	08db      	lsrs	r3, r3, #3
 80074e0:	61bb      	str	r3, [r7, #24]
    remain = size - ((nb_dword) << 3);
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	00db      	lsls	r3, r3, #3
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	617b      	str	r3, [r7, #20]
    if(remain > 0)
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <PalNvmWrite+0x8c>
      nb_dword += 1;
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	3301      	adds	r3, #1
 80074f6:	61bb      	str	r3, [r7, #24]
    
  if(FD_WriteData(address, (uint64_t*)buf, nb_dword) != 0)
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f7fa fb15 	bl	8001b2c <FD_WriteData>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <PalNvmWrite+0xa0>
    result = MOBLE_RESULT_FAIL;
 8007508:	2302      	movs	r3, #2
 800750a:	77fb      	strb	r3, [r7, #31]
  }
  
  TRACE_I(TF_PROVISION,"NVM updated\r\n");      
 800750c:	4804      	ldr	r0, [pc, #16]	@ (8007520 <PalNvmWrite+0xb4>)
 800750e:	f021 fd17 	bl	8028f40 <puts>
  return result;
 8007512:	7ffb      	ldrb	r3, [r7, #31]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3720      	adds	r7, #32
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20004444 	.word	0x20004444
 8007520:	0802e684 	.word	0x0802e684

08007524 <PalNvmProcess>:
* @brief  NVM process
* @param  None
* @retval Result
*/
MOBLE_RESULT PalNvmProcess(void)
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  /* do nothing */
  return MOBLE_RESULT_SUCCESS;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800753c:	4b06      	ldr	r3, [pc, #24]	@ (8007558 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800753e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007542:	4905      	ldr	r1, [pc, #20]	@ (8007558 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	58000800 	.word	0x58000800

0800755c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007564:	4b05      	ldr	r3, [pc, #20]	@ (800757c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007566:	6a1a      	ldr	r2, [r3, #32]
 8007568:	4904      	ldr	r1, [pc, #16]	@ (800757c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4313      	orrs	r3, r2
 800756e:	620b      	str	r3, [r1, #32]
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	58000800 	.word	0x58000800

08007580 <LL_PWR_EnableBootC2>:
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8007584:	4b05      	ldr	r3, [pc, #20]	@ (800759c <LL_PWR_EnableBootC2+0x1c>)
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	4a04      	ldr	r2, [pc, #16]	@ (800759c <LL_PWR_EnableBootC2+0x1c>)
 800758a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800758e:	60d3      	str	r3, [r2, #12]
}
 8007590:	bf00      	nop
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	58000400 	.word	0x58000400

080075a0 <LL_AHB3_GRP1_EnableClock>:
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80075a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80075b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4013      	ands	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80075c4:	68fb      	ldr	r3, [r7, #12]
}
 80075c6:	bf00      	nop
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b085      	sub	sp, #20
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80075da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075de:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80075e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80075ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075f2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4013      	ands	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80075fc:	68fb      	ldr	r3, [r7, #12]
}
 80075fe:	bf00      	nop
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <LL_C1_IPCC_EnableIT_TXF>:
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	601a      	str	r2, [r3, #0]
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <LL_C1_IPCC_EnableIT_RXO>:
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f043 0201 	orr.w	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	601a      	str	r2, [r3, #0]
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800764a:	b480      	push	{r7}
 800764c:	b083      	sub	sp, #12
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	041b      	lsls	r3, r3, #16
 800765c:	43db      	mvns	r3, r3
 800765e:	401a      	ands	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	605a      	str	r2, [r3, #4]
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	041b      	lsls	r3, r3, #16
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	605a      	str	r2, [r3, #4]
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	43db      	mvns	r3, r3
 80076a6:	401a      	ands	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	605a      	str	r2, [r3, #4]
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	609a      	str	r2, [r3, #8]
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <LL_C1_IPCC_SetFlag_CHx>:
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	041a      	lsls	r2, r3, #16
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	609a      	str	r2, [r3, #8]
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	4013      	ands	r3, r2
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d101      	bne.n	800770e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800770a:	2301      	movs	r3, #1
 800770c:	e000      	b.n	8007710 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	69da      	ldr	r2, [r3, #28]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	4013      	ands	r3, r2
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d101      	bne.n	8007738 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8007734:	2301      	movs	r3, #1
 8007736:	e000      	b.n	800773a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800774c:	2102      	movs	r1, #2
 800774e:	4818      	ldr	r0, [pc, #96]	@ (80077b0 <HW_IPCC_Rx_Handler+0x68>)
 8007750:	f7ff ffe4 	bl	800771c <LL_C2_IPCC_IsActiveFlag_CHx>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d008      	beq.n	800776c <HW_IPCC_Rx_Handler+0x24>
 800775a:	4b15      	ldr	r3, [pc, #84]	@ (80077b0 <HW_IPCC_Rx_Handler+0x68>)
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8007766:	f000 f8d5 	bl	8007914 <HW_IPCC_SYS_EvtHandler>
 800776a:	e01e      	b.n	80077aa <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800776c:	2101      	movs	r1, #1
 800776e:	4810      	ldr	r0, [pc, #64]	@ (80077b0 <HW_IPCC_Rx_Handler+0x68>)
 8007770:	f7ff ffd4 	bl	800771c <LL_C2_IPCC_IsActiveFlag_CHx>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d008      	beq.n	800778c <HW_IPCC_Rx_Handler+0x44>
 800777a:	4b0d      	ldr	r3, [pc, #52]	@ (80077b0 <HW_IPCC_Rx_Handler+0x68>)
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d102      	bne.n	800778c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8007786:	f000 f889 	bl	800789c <HW_IPCC_BLE_EvtHandler>
 800778a:	e00e      	b.n	80077aa <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800778c:	2108      	movs	r1, #8
 800778e:	4808      	ldr	r0, [pc, #32]	@ (80077b0 <HW_IPCC_Rx_Handler+0x68>)
 8007790:	f7ff ffc4 	bl	800771c <LL_C2_IPCC_IsActiveFlag_CHx>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d008      	beq.n	80077ac <HW_IPCC_Rx_Handler+0x64>
 800779a:	4b05      	ldr	r3, [pc, #20]	@ (80077b0 <HW_IPCC_Rx_Handler+0x68>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80077a6:	f000 f901 	bl	80079ac <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80077aa:	bf00      	nop
 80077ac:	bf00      	nop
}
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	58000c00 	.word	0x58000c00

080077b4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80077b8:	2102      	movs	r1, #2
 80077ba:	4818      	ldr	r0, [pc, #96]	@ (800781c <HW_IPCC_Tx_Handler+0x68>)
 80077bc:	f7ff ff99 	bl	80076f2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d108      	bne.n	80077d8 <HW_IPCC_Tx_Handler+0x24>
 80077c6:	4b15      	ldr	r3, [pc, #84]	@ (800781c <HW_IPCC_Tx_Handler+0x68>)
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d102      	bne.n	80077d8 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80077d2:	f000 f893 	bl	80078fc <HW_IPCC_SYS_CmdEvtHandler>
 80077d6:	e01e      	b.n	8007816 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80077d8:	2108      	movs	r1, #8
 80077da:	4810      	ldr	r0, [pc, #64]	@ (800781c <HW_IPCC_Tx_Handler+0x68>)
 80077dc:	f7ff ff89 	bl	80076f2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d108      	bne.n	80077f8 <HW_IPCC_Tx_Handler+0x44>
 80077e6:	4b0d      	ldr	r3, [pc, #52]	@ (800781c <HW_IPCC_Tx_Handler+0x68>)
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d102      	bne.n	80077f8 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80077f2:	f000 f8bd 	bl	8007970 <HW_IPCC_MM_FreeBufHandler>
 80077f6:	e00e      	b.n	8007816 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80077f8:	2120      	movs	r1, #32
 80077fa:	4808      	ldr	r0, [pc, #32]	@ (800781c <HW_IPCC_Tx_Handler+0x68>)
 80077fc:	f7ff ff79 	bl	80076f2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d108      	bne.n	8007818 <HW_IPCC_Tx_Handler+0x64>
 8007806:	4b05      	ldr	r3, [pc, #20]	@ (800781c <HW_IPCC_Tx_Handler+0x68>)
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d102      	bne.n	8007818 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8007812:	f000 f84f 	bl	80078b4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8007816:	bf00      	nop
 8007818:	bf00      	nop
}
 800781a:	bd80      	pop	{r7, pc}
 800781c:	58000c00 	.word	0x58000c00

08007820 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8007824:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007828:	f7ff fed3 	bl	80075d2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800782c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007830:	f7ff fe94 	bl	800755c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8007834:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007838:	f7ff fe7c 	bl	8007534 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800783c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800783e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8007840:	f7ff fe9e 	bl	8007580 <LL_PWR_EnableBootC2>

  return;
 8007844:	bf00      	nop
}
 8007846:	bd80      	pop	{r7, pc}

08007848 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800784c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007850:	f7ff fea6 	bl	80075a0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8007854:	4806      	ldr	r0, [pc, #24]	@ (8007870 <HW_IPCC_Init+0x28>)
 8007856:	f7ff fee8 	bl	800762a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800785a:	4805      	ldr	r0, [pc, #20]	@ (8007870 <HW_IPCC_Init+0x28>)
 800785c:	f7ff fed5 	bl	800760a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8007860:	202c      	movs	r0, #44	@ 0x2c
 8007862:	f000 fc60 	bl	8008126 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8007866:	202d      	movs	r0, #45	@ 0x2d
 8007868:	f000 fc5d 	bl	8008126 <HAL_NVIC_EnableIRQ>

  return;
 800786c:	bf00      	nop
}
 800786e:	bd80      	pop	{r7, pc}
 8007870:	58000c00 	.word	0x58000c00

08007874 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007878:	2101      	movs	r1, #1
 800787a:	4802      	ldr	r0, [pc, #8]	@ (8007884 <HW_IPCC_BLE_Init+0x10>)
 800787c:	f7ff ff0a 	bl	8007694 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007880:	bf00      	nop
}
 8007882:	bd80      	pop	{r7, pc}
 8007884:	58000c00 	.word	0x58000c00

08007888 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800788c:	2101      	movs	r1, #1
 800788e:	4802      	ldr	r0, [pc, #8]	@ (8007898 <HW_IPCC_BLE_SendCmd+0x10>)
 8007890:	f7ff ff20 	bl	80076d4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007894:	bf00      	nop
}
 8007896:	bd80      	pop	{r7, pc}
 8007898:	58000c00 	.word	0x58000c00

0800789c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80078a0:	f00e faa8 	bl	8015df4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80078a4:	2101      	movs	r1, #1
 80078a6:	4802      	ldr	r0, [pc, #8]	@ (80078b0 <HW_IPCC_BLE_EvtHandler+0x14>)
 80078a8:	f7ff ff06 	bl	80076b8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80078ac:	bf00      	nop
}
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	58000c00 	.word	0x58000c00

080078b4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80078b8:	2120      	movs	r1, #32
 80078ba:	4803      	ldr	r0, [pc, #12]	@ (80078c8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80078bc:	f7ff fed8 	bl	8007670 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80078c0:	f00e fac8 	bl	8015e54 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80078c4:	bf00      	nop
}
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	58000c00 	.word	0x58000c00

080078cc <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80078d0:	2102      	movs	r1, #2
 80078d2:	4802      	ldr	r0, [pc, #8]	@ (80078dc <HW_IPCC_SYS_Init+0x10>)
 80078d4:	f7ff fede 	bl	8007694 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80078d8:	bf00      	nop
}
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	58000c00 	.word	0x58000c00

080078e0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80078e4:	2102      	movs	r1, #2
 80078e6:	4804      	ldr	r0, [pc, #16]	@ (80078f8 <HW_IPCC_SYS_SendCmd+0x18>)
 80078e8:	f7ff fef4 	bl	80076d4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80078ec:	2102      	movs	r1, #2
 80078ee:	4802      	ldr	r0, [pc, #8]	@ (80078f8 <HW_IPCC_SYS_SendCmd+0x18>)
 80078f0:	f7ff feab 	bl	800764a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80078f4:	bf00      	nop
}
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	58000c00 	.word	0x58000c00

080078fc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007900:	2102      	movs	r1, #2
 8007902:	4803      	ldr	r0, [pc, #12]	@ (8007910 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8007904:	f7ff feb4 	bl	8007670 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8007908:	f00e faf4 	bl	8015ef4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800790c:	bf00      	nop
}
 800790e:	bd80      	pop	{r7, pc}
 8007910:	58000c00 	.word	0x58000c00

08007914 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8007918:	f00e fb02 	bl	8015f20 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800791c:	2102      	movs	r1, #2
 800791e:	4802      	ldr	r0, [pc, #8]	@ (8007928 <HW_IPCC_SYS_EvtHandler+0x14>)
 8007920:	f7ff feca 	bl	80076b8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007924:	bf00      	nop
}
 8007926:	bd80      	pop	{r7, pc}
 8007928:	58000c00 	.word	0x58000c00

0800792c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8007934:	2108      	movs	r1, #8
 8007936:	480c      	ldr	r0, [pc, #48]	@ (8007968 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007938:	f7ff fedb 	bl	80076f2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d007      	beq.n	8007952 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8007942:	4a0a      	ldr	r2, [pc, #40]	@ (800796c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007948:	2108      	movs	r1, #8
 800794a:	4807      	ldr	r0, [pc, #28]	@ (8007968 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800794c:	f7ff fe7d 	bl	800764a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8007950:	e006      	b.n	8007960 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007956:	2108      	movs	r1, #8
 8007958:	4803      	ldr	r0, [pc, #12]	@ (8007968 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800795a:	f7ff febb 	bl	80076d4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800795e:	bf00      	nop
}
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	58000c00 	.word	0x58000c00
 800796c:	20004520 	.word	0x20004520

08007970 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007974:	2108      	movs	r1, #8
 8007976:	4806      	ldr	r0, [pc, #24]	@ (8007990 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007978:	f7ff fe7a 	bl	8007670 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800797c:	4b05      	ldr	r3, [pc, #20]	@ (8007994 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007982:	2108      	movs	r1, #8
 8007984:	4802      	ldr	r0, [pc, #8]	@ (8007990 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007986:	f7ff fea5 	bl	80076d4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800798a:	bf00      	nop
}
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	58000c00 	.word	0x58000c00
 8007994:	20004520 	.word	0x20004520

08007998 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800799c:	2108      	movs	r1, #8
 800799e:	4802      	ldr	r0, [pc, #8]	@ (80079a8 <HW_IPCC_TRACES_Init+0x10>)
 80079a0:	f7ff fe78 	bl	8007694 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80079a4:	bf00      	nop
}
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	58000c00 	.word	0x58000c00

080079ac <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80079b0:	f00e fb5e 	bl	8016070 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80079b4:	2108      	movs	r1, #8
 80079b6:	4802      	ldr	r0, [pc, #8]	@ (80079c0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80079b8:	f7ff fe7e 	bl	80076b8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80079bc:	bf00      	nop
}
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	58000c00 	.word	0x58000c00

080079c4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80079c4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80079c6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80079c8:	3304      	adds	r3, #4

080079ca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80079ca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80079cc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80079ce:	d3f9      	bcc.n	80079c4 <CopyDataInit>
  bx lr
 80079d0:	4770      	bx	lr

080079d2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80079d2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80079d4:	3004      	adds	r0, #4

080079d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80079d6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80079d8:	d3fb      	bcc.n	80079d2 <FillZerobss>
  bx lr
 80079da:	4770      	bx	lr

080079dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80079dc:	480c      	ldr	r0, [pc, #48]	@ (8007a10 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80079de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80079e0:	f000 f938 	bl	8007c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80079e4:	480b      	ldr	r0, [pc, #44]	@ (8007a14 <LoopForever+0x8>)
 80079e6:	490c      	ldr	r1, [pc, #48]	@ (8007a18 <LoopForever+0xc>)
 80079e8:	4a0c      	ldr	r2, [pc, #48]	@ (8007a1c <LoopForever+0x10>)
 80079ea:	2300      	movs	r3, #0
 80079ec:	f7ff ffed 	bl	80079ca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80079f0:	480b      	ldr	r0, [pc, #44]	@ (8007a20 <LoopForever+0x14>)
 80079f2:	490c      	ldr	r1, [pc, #48]	@ (8007a24 <LoopForever+0x18>)
 80079f4:	2300      	movs	r3, #0
 80079f6:	f7ff ffee 	bl	80079d6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80079fa:	480b      	ldr	r0, [pc, #44]	@ (8007a28 <LoopForever+0x1c>)
 80079fc:	490b      	ldr	r1, [pc, #44]	@ (8007a2c <LoopForever+0x20>)
 80079fe:	2300      	movs	r3, #0
 8007a00:	f7ff ffe9 	bl	80079d6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007a04:	f021 fc3c 	bl	8029280 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8007a08:	f7fb f922 	bl	8002c50 <main>

08007a0c <LoopForever>:

LoopForever:
  b LoopForever
 8007a0c:	e7fe      	b.n	8007a0c <LoopForever>
 8007a0e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8007a10:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007a14:	20000008 	.word	0x20000008
 8007a18:	20000298 	.word	0x20000298
 8007a1c:	08031d58 	.word	0x08031d58
  INIT_BSS _sbss, _ebss
 8007a20:	200002f8 	.word	0x200002f8
 8007a24:	200080f4 	.word	0x200080f4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8007a28:	200301e4 	.word	0x200301e4
 8007a2c:	20030a67 	.word	0x20030a67

08007a30 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007a30:	e7fe      	b.n	8007a30 <ADC1_IRQHandler>

08007a32 <LL_AHB2_GRP1_EnableClock>:
{
 8007a32:	b480      	push	{r7}
 8007a34:	b085      	sub	sp, #20
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4013      	ands	r3, r2
 8007a54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a56:	68fb      	ldr	r3, [r7, #12]
}
 8007a58:	bf00      	nop
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8007a6e:	f107 030c 	add.w	r3, r7, #12
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	605a      	str	r2, [r3, #4]
 8007a78:	609a      	str	r2, [r3, #8]
 8007a7a:	60da      	str	r2, [r3, #12]
 8007a7c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8007a7e:	2002      	movs	r0, #2
 8007a80:	f7ff ffd7 	bl	8007a32 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8007a84:	79fb      	ldrb	r3, [r7, #7]
 8007a86:	4a12      	ldr	r2, [pc, #72]	@ (8007ad0 <BSP_LED_Init+0x6c>)
 8007a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a8c:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a96:	2302      	movs	r3, #2
 8007a98:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8007ad4 <BSP_LED_Init+0x70>)
 8007a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa2:	f107 020c 	add.w	r2, r7, #12
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f001 f8ed 	bl	8008c88 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8007aae:	79fb      	ldrb	r3, [r7, #7]
 8007ab0:	4a08      	ldr	r2, [pc, #32]	@ (8007ad4 <BSP_LED_Init+0x70>)
 8007ab2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	4a05      	ldr	r2, [pc, #20]	@ (8007ad0 <BSP_LED_Init+0x6c>)
 8007aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	f001 fa69 	bl	8008f98 <HAL_GPIO_WritePin>
}
 8007ac6:	bf00      	nop
 8007ac8:	3720      	adds	r7, #32
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	08030a44 	.word	0x08030a44
 8007ad4:	20000080 	.word	0x20000080

08007ad8 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	4a07      	ldr	r2, [pc, #28]	@ (8007b04 <BSP_LED_On+0x2c>)
 8007ae6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007aea:	79fb      	ldrb	r3, [r7, #7]
 8007aec:	4a06      	ldr	r2, [pc, #24]	@ (8007b08 <BSP_LED_On+0x30>)
 8007aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007af2:	2201      	movs	r2, #1
 8007af4:	4619      	mov	r1, r3
 8007af6:	f001 fa4f 	bl	8008f98 <HAL_GPIO_WritePin>
}
 8007afa:	bf00      	nop
 8007afc:	3708      	adds	r7, #8
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20000080 	.word	0x20000080
 8007b08:	08030a44 	.word	0x08030a44

08007b0c <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	4a07      	ldr	r2, [pc, #28]	@ (8007b38 <BSP_LED_Off+0x2c>)
 8007b1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b1e:	79fb      	ldrb	r3, [r7, #7]
 8007b20:	4a06      	ldr	r2, [pc, #24]	@ (8007b3c <BSP_LED_Off+0x30>)
 8007b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b26:	2200      	movs	r2, #0
 8007b28:	4619      	mov	r1, r3
 8007b2a:	f001 fa35 	bl	8008f98 <HAL_GPIO_WritePin>
}
 8007b2e:	bf00      	nop
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20000080 	.word	0x20000080
 8007b3c:	08030a44 	.word	0x08030a44

08007b40 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b088      	sub	sp, #32
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	4603      	mov	r3, r0
 8007b48:	460a      	mov	r2, r1
 8007b4a:	71fb      	strb	r3, [r7, #7]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8007b50:	f107 030c 	add.w	r3, r7, #12
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	605a      	str	r2, [r3, #4]
 8007b5a:	609a      	str	r2, [r3, #8]
 8007b5c:	60da      	str	r2, [r3, #12]
 8007b5e:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8007b60:	79fb      	ldrb	r3, [r7, #7]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d103      	bne.n	8007b6e <BSP_PB_Init+0x2e>
 8007b66:	2004      	movs	r0, #4
 8007b68:	f7ff ff63 	bl	8007a32 <LL_AHB2_GRP1_EnableClock>
 8007b6c:	e00c      	b.n	8007b88 <BSP_PB_Init+0x48>
 8007b6e:	79fb      	ldrb	r3, [r7, #7]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d103      	bne.n	8007b7c <BSP_PB_Init+0x3c>
 8007b74:	2008      	movs	r0, #8
 8007b76:	f7ff ff5c 	bl	8007a32 <LL_AHB2_GRP1_EnableClock>
 8007b7a:	e005      	b.n	8007b88 <BSP_PB_Init+0x48>
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d102      	bne.n	8007b88 <BSP_PB_Init+0x48>
 8007b82:	2008      	movs	r0, #8
 8007b84:	f7ff ff55 	bl	8007a32 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8007b88:	79bb      	ldrb	r3, [r7, #6]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d117      	bne.n	8007bbe <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	4a20      	ldr	r2, [pc, #128]	@ (8007c14 <BSP_PB_Init+0xd4>)
 8007b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b96:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8007c18 <BSP_PB_Init+0xd8>)
 8007ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bac:	f107 020c 	add.w	r2, r7, #12
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f001 f868 	bl	8008c88 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8007bb8:	2001      	movs	r0, #1
 8007bba:	f7f9 fea6 	bl	800190a <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8007bbe:	79bb      	ldrb	r3, [r7, #6]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d123      	bne.n	8007c0c <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	4a13      	ldr	r2, [pc, #76]	@ (8007c14 <BSP_PB_Init+0xd4>)
 8007bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bcc:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8007bd2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8007bd6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8007bd8:	79fb      	ldrb	r3, [r7, #7]
 8007bda:	4a0f      	ldr	r2, [pc, #60]	@ (8007c18 <BSP_PB_Init+0xd8>)
 8007bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007be0:	f107 020c 	add.w	r2, r7, #12
 8007be4:	4611      	mov	r1, r2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f001 f84e 	bl	8008c88 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	4a0b      	ldr	r2, [pc, #44]	@ (8007c1c <BSP_PB_Init+0xdc>)
 8007bf0:	5cd3      	ldrb	r3, [r2, r3]
 8007bf2:	b25b      	sxtb	r3, r3
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	210f      	movs	r1, #15
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fa7a 	bl	80080f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	4a06      	ldr	r2, [pc, #24]	@ (8007c1c <BSP_PB_Init+0xdc>)
 8007c02:	5cd3      	ldrb	r3, [r2, r3]
 8007c04:	b25b      	sxtb	r3, r3
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 fa8d 	bl	8008126 <HAL_NVIC_EnableIRQ>
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	3720      	adds	r7, #32
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	08030a4c 	.word	0x08030a4c
 8007c18:	2000008c 	.word	0x2000008c
 8007c1c:	08030a54 	.word	0x08030a54

08007c20 <BSP_PB_GetState>:
  *     @arg BUTTON_SW2
  *     @arg BUTTON_SW3
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	4603      	mov	r3, r0
 8007c28:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8007c2a:	79fb      	ldrb	r3, [r7, #7]
 8007c2c:	4a07      	ldr	r2, [pc, #28]	@ (8007c4c <BSP_PB_GetState+0x2c>)
 8007c2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	4906      	ldr	r1, [pc, #24]	@ (8007c50 <BSP_PB_GetState+0x30>)
 8007c36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f001 f993 	bl	8008f68 <HAL_GPIO_ReadPin>
 8007c42:	4603      	mov	r3, r0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	2000008c 	.word	0x2000008c
 8007c50:	08030a4c 	.word	0x08030a4c

08007c54 <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8007c54:	b480      	push	{r7}
 8007c56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8007c58:	4b26      	ldr	r3, [pc, #152]	@ (8007cf4 <SystemInit+0xa0>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	609a      	str	r2, [r3, #8]
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8007c5e:	4b25      	ldr	r3, [pc, #148]	@ (8007cf4 <SystemInit+0xa0>)
 8007c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c64:	4a23      	ldr	r2, [pc, #140]	@ (8007cf4 <SystemInit+0xa0>)
 8007c66:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c6a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c78:	f043 0301 	orr.w	r3, r3, #1
 8007c7c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8007c7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c82:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8007c86:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8007c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c92:	4b19      	ldr	r3, [pc, #100]	@ (8007cf8 <SystemInit+0xa4>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8007c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ca0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ca4:	f023 0305 	bic.w	r3, r3, #5
 8007ca8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cb8:	f023 0301 	bic.w	r3, r3, #1
 8007cbc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8007cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8007cfc <SystemInit+0xa8>)
 8007cc6:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8007cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8007cfc <SystemInit+0xa8>)
 8007cce:	611a      	str	r2, [r3, #16]
#endif

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	619a      	str	r2, [r3, #24]
}
 8007ce8:	bf00      	nop
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	e000ed00 	.word	0xe000ed00
 8007cf8:	faf6fefb 	.word	0xfaf6fefb
 8007cfc:	22041000 	.word	0x22041000

08007d00 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8007d04:	4b05      	ldr	r3, [pc, #20]	@ (8007d1c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	4a04      	ldr	r2, [pc, #16]	@ (8007d1c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8007d0a:	f043 0301 	orr.w	r3, r3, #1
 8007d0e:	6053      	str	r3, [r2, #4]
}
 8007d10:	bf00      	nop
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	e0042000 	.word	0xe0042000

08007d20 <LL_DBGMCU_EnableDBGStopMode>:
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8007d24:	4b05      	ldr	r3, [pc, #20]	@ (8007d3c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	4a04      	ldr	r2, [pc, #16]	@ (8007d3c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8007d2a:	f043 0302 	orr.w	r3, r3, #2
 8007d2e:	6053      	str	r3, [r2, #4]
}
 8007d30:	bf00      	nop
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	e0042000 	.word	0xe0042000

08007d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d7c <HAL_Init+0x3c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a0b      	ldr	r2, [pc, #44]	@ (8007d7c <HAL_Init+0x3c>)
 8007d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d56:	2003      	movs	r0, #3
 8007d58:	f000 f9c0 	bl	80080dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	f000 f80f 	bl	8007d80 <HAL_InitTick>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	71fb      	strb	r3, [r7, #7]
 8007d6c:	e001      	b.n	8007d72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007d6e:	f7fb f9a0 	bl	80030b2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007d72:	79fb      	ldrb	r3, [r7, #7]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	58004000 	.word	0x58004000

08007d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007d8c:	4b17      	ldr	r3, [pc, #92]	@ (8007dec <HAL_InitTick+0x6c>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d024      	beq.n	8007dde <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007d94:	f002 fa8e 	bl	800a2b4 <HAL_RCC_GetHCLKFreq>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	4b14      	ldr	r3, [pc, #80]	@ (8007dec <HAL_InitTick+0x6c>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007da4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 f9d6 	bl	800815e <HAL_SYSTICK_Config>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10f      	bne.n	8007dd8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b0f      	cmp	r3, #15
 8007dbc:	d809      	bhi.n	8007dd2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	6879      	ldr	r1, [r7, #4]
 8007dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc6:	f000 f994 	bl	80080f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007dca:	4a09      	ldr	r2, [pc, #36]	@ (8007df0 <HAL_InitTick+0x70>)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	e007      	b.n	8007de2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
 8007dd6:	e004      	b.n	8007de2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	73fb      	strb	r3, [r7, #15]
 8007ddc:	e001      	b.n	8007de2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	200000a0 	.word	0x200000a0
 8007df0:	2000009c 	.word	0x2000009c

08007df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007df4:	b480      	push	{r7}
 8007df6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007df8:	4b06      	ldr	r3, [pc, #24]	@ (8007e14 <HAL_IncTick+0x20>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	4b06      	ldr	r3, [pc, #24]	@ (8007e18 <HAL_IncTick+0x24>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4413      	add	r3, r2
 8007e04:	4a04      	ldr	r2, [pc, #16]	@ (8007e18 <HAL_IncTick+0x24>)
 8007e06:	6013      	str	r3, [r2, #0]
}
 8007e08:	bf00      	nop
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	200000a0 	.word	0x200000a0
 8007e18:	20004524 	.word	0x20004524

08007e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8007e20:	4b03      	ldr	r3, [pc, #12]	@ (8007e30 <HAL_GetTick+0x14>)
 8007e22:	681b      	ldr	r3, [r3, #0]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	20004524 	.word	0x20004524

08007e34 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007e34:	b480      	push	{r7}
 8007e36:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007e38:	4b03      	ldr	r3, [pc, #12]	@ (8007e48 <HAL_GetTickPrio+0x14>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	2000009c 	.word	0x2000009c

08007e4c <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007e50:	4b03      	ldr	r3, [pc, #12]	@ (8007e60 <HAL_GetTickFreq+0x14>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	200000a0 	.word	0x200000a0

08007e64 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8007e68:	f7ff ff4a 	bl	8007d00 <LL_DBGMCU_EnableDBGSleepMode>
}
 8007e6c:	bf00      	nop
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8007e74:	f7ff ff54 	bl	8007d20 <LL_DBGMCU_EnableDBGStopMode>
}
 8007e78:	bf00      	nop
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <__NVIC_SetPriorityGrouping>:
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007e98:	4013      	ands	r3, r2
 8007e9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ea4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007eae:	4a04      	ldr	r2, [pc, #16]	@ (8007ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	60d3      	str	r3, [r2, #12]
}
 8007eb4:	bf00      	nop
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	e000ed00 	.word	0xe000ed00

08007ec4 <__NVIC_GetPriorityGrouping>:
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ec8:	4b04      	ldr	r3, [pc, #16]	@ (8007edc <__NVIC_GetPriorityGrouping+0x18>)
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	0a1b      	lsrs	r3, r3, #8
 8007ece:	f003 0307 	and.w	r3, r3, #7
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	e000ed00 	.word	0xe000ed00

08007ee0 <__NVIC_EnableIRQ>:
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	db0b      	blt.n	8007f0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ef2:	79fb      	ldrb	r3, [r7, #7]
 8007ef4:	f003 021f 	and.w	r2, r3, #31
 8007ef8:	4907      	ldr	r1, [pc, #28]	@ (8007f18 <__NVIC_EnableIRQ+0x38>)
 8007efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007efe:	095b      	lsrs	r3, r3, #5
 8007f00:	2001      	movs	r0, #1
 8007f02:	fa00 f202 	lsl.w	r2, r0, r2
 8007f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007f0a:	bf00      	nop
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	e000e100 	.word	0xe000e100

08007f1c <__NVIC_DisableIRQ>:
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	4603      	mov	r3, r0
 8007f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	db12      	blt.n	8007f54 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f2e:	79fb      	ldrb	r3, [r7, #7]
 8007f30:	f003 021f 	and.w	r2, r3, #31
 8007f34:	490a      	ldr	r1, [pc, #40]	@ (8007f60 <__NVIC_DisableIRQ+0x44>)
 8007f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f3a:	095b      	lsrs	r3, r3, #5
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8007f42:	3320      	adds	r3, #32
 8007f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007f48:	f3bf 8f4f 	dsb	sy
}
 8007f4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007f4e:	f3bf 8f6f 	isb	sy
}
 8007f52:	bf00      	nop
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	e000e100 	.word	0xe000e100

08007f64 <__NVIC_SetPendingIRQ>:
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	db0c      	blt.n	8007f90 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f76:	79fb      	ldrb	r3, [r7, #7]
 8007f78:	f003 021f 	and.w	r2, r3, #31
 8007f7c:	4907      	ldr	r1, [pc, #28]	@ (8007f9c <__NVIC_SetPendingIRQ+0x38>)
 8007f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f82:	095b      	lsrs	r3, r3, #5
 8007f84:	2001      	movs	r0, #1
 8007f86:	fa00 f202 	lsl.w	r2, r0, r2
 8007f8a:	3340      	adds	r3, #64	@ 0x40
 8007f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	e000e100 	.word	0xe000e100

08007fa0 <__NVIC_ClearPendingIRQ>:
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	db0c      	blt.n	8007fcc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fb2:	79fb      	ldrb	r3, [r7, #7]
 8007fb4:	f003 021f 	and.w	r2, r3, #31
 8007fb8:	4907      	ldr	r1, [pc, #28]	@ (8007fd8 <__NVIC_ClearPendingIRQ+0x38>)
 8007fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fbe:	095b      	lsrs	r3, r3, #5
 8007fc0:	2001      	movs	r0, #1
 8007fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8007fc6:	3360      	adds	r3, #96	@ 0x60
 8007fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	e000e100 	.word	0xe000e100

08007fdc <__NVIC_SetPriority>:
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	6039      	str	r1, [r7, #0]
 8007fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	db0a      	blt.n	8008006 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	490c      	ldr	r1, [pc, #48]	@ (8008028 <__NVIC_SetPriority+0x4c>)
 8007ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ffa:	0112      	lsls	r2, r2, #4
 8007ffc:	b2d2      	uxtb	r2, r2
 8007ffe:	440b      	add	r3, r1
 8008000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008004:	e00a      	b.n	800801c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	b2da      	uxtb	r2, r3
 800800a:	4908      	ldr	r1, [pc, #32]	@ (800802c <__NVIC_SetPriority+0x50>)
 800800c:	79fb      	ldrb	r3, [r7, #7]
 800800e:	f003 030f 	and.w	r3, r3, #15
 8008012:	3b04      	subs	r3, #4
 8008014:	0112      	lsls	r2, r2, #4
 8008016:	b2d2      	uxtb	r2, r2
 8008018:	440b      	add	r3, r1
 800801a:	761a      	strb	r2, [r3, #24]
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr
 8008028:	e000e100 	.word	0xe000e100
 800802c:	e000ed00 	.word	0xe000ed00

08008030 <NVIC_EncodePriority>:
{
 8008030:	b480      	push	{r7}
 8008032:	b089      	sub	sp, #36	@ 0x24
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	f1c3 0307 	rsb	r3, r3, #7
 800804a:	2b04      	cmp	r3, #4
 800804c:	bf28      	it	cs
 800804e:	2304      	movcs	r3, #4
 8008050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	3304      	adds	r3, #4
 8008056:	2b06      	cmp	r3, #6
 8008058:	d902      	bls.n	8008060 <NVIC_EncodePriority+0x30>
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	3b03      	subs	r3, #3
 800805e:	e000      	b.n	8008062 <NVIC_EncodePriority+0x32>
 8008060:	2300      	movs	r3, #0
 8008062:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008064:	f04f 32ff 	mov.w	r2, #4294967295
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	fa02 f303 	lsl.w	r3, r2, r3
 800806e:	43da      	mvns	r2, r3
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	401a      	ands	r2, r3
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008078:	f04f 31ff 	mov.w	r1, #4294967295
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	fa01 f303 	lsl.w	r3, r1, r3
 8008082:	43d9      	mvns	r1, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008088:	4313      	orrs	r3, r2
}
 800808a:	4618      	mov	r0, r3
 800808c:	3724      	adds	r7, #36	@ 0x24
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
	...

08008098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3b01      	subs	r3, #1
 80080a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080a8:	d301      	bcc.n	80080ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80080aa:	2301      	movs	r3, #1
 80080ac:	e00f      	b.n	80080ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080ae:	4a0a      	ldr	r2, [pc, #40]	@ (80080d8 <SysTick_Config+0x40>)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3b01      	subs	r3, #1
 80080b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80080b6:	210f      	movs	r1, #15
 80080b8:	f04f 30ff 	mov.w	r0, #4294967295
 80080bc:	f7ff ff8e 	bl	8007fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80080c0:	4b05      	ldr	r3, [pc, #20]	@ (80080d8 <SysTick_Config+0x40>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80080c6:	4b04      	ldr	r3, [pc, #16]	@ (80080d8 <SysTick_Config+0x40>)
 80080c8:	2207      	movs	r2, #7
 80080ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	e000e010 	.word	0xe000e010

080080dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff fec9 	bl	8007e7c <__NVIC_SetPriorityGrouping>
}
 80080ea:	bf00      	nop
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b086      	sub	sp, #24
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	4603      	mov	r3, r0
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
 80080fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008100:	f7ff fee0 	bl	8007ec4 <__NVIC_GetPriorityGrouping>
 8008104:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	6978      	ldr	r0, [r7, #20]
 800810c:	f7ff ff90 	bl	8008030 <NVIC_EncodePriority>
 8008110:	4602      	mov	r2, r0
 8008112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008116:	4611      	mov	r1, r2
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff ff5f 	bl	8007fdc <__NVIC_SetPriority>
}
 800811e:	bf00      	nop
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	4603      	mov	r3, r0
 800812e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff fed3 	bl	8007ee0 <__NVIC_EnableIRQ>
}
 800813a:	bf00      	nop
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b082      	sub	sp, #8
 8008146:	af00      	add	r7, sp, #0
 8008148:	4603      	mov	r3, r0
 800814a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800814c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008150:	4618      	mov	r0, r3
 8008152:	f7ff fee3 	bl	8007f1c <__NVIC_DisableIRQ>
}
 8008156:	bf00      	nop
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f7ff ff96 	bl	8008098 <SysTick_Config>
 800816c:	4603      	mov	r3, r0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	4603      	mov	r3, r0
 800817e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8008180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008184:	4618      	mov	r0, r3
 8008186:	f7ff feed 	bl	8007f64 <__NVIC_SetPendingIRQ>
}
 800818a:	bf00      	nop
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b082      	sub	sp, #8
 8008196:	af00      	add	r7, sp, #0
 8008198:	4603      	mov	r3, r0
 800819a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800819c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff fefd 	bl	8007fa0 <__NVIC_ClearPendingIRQ>
}
 80081a6:	bf00      	nop
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d101      	bne.n	80081c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e08e      	b.n	80082e0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	4b47      	ldr	r3, [pc, #284]	@ (80082e8 <HAL_DMA_Init+0x138>)
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d80f      	bhi.n	80081ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	461a      	mov	r2, r3
 80081d4:	4b45      	ldr	r3, [pc, #276]	@ (80082ec <HAL_DMA_Init+0x13c>)
 80081d6:	4413      	add	r3, r2
 80081d8:	4a45      	ldr	r2, [pc, #276]	@ (80082f0 <HAL_DMA_Init+0x140>)
 80081da:	fba2 2303 	umull	r2, r3, r2, r3
 80081de:	091b      	lsrs	r3, r3, #4
 80081e0:	009a      	lsls	r2, r3, #2
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a42      	ldr	r2, [pc, #264]	@ (80082f4 <HAL_DMA_Init+0x144>)
 80081ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80081ec:	e00e      	b.n	800820c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	4b40      	ldr	r3, [pc, #256]	@ (80082f8 <HAL_DMA_Init+0x148>)
 80081f6:	4413      	add	r3, r2
 80081f8:	4a3d      	ldr	r2, [pc, #244]	@ (80082f0 <HAL_DMA_Init+0x140>)
 80081fa:	fba2 2303 	umull	r2, r3, r2, r3
 80081fe:	091b      	lsrs	r3, r3, #4
 8008200:	009a      	lsls	r2, r3, #2
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a3c      	ldr	r2, [pc, #240]	@ (80082fc <HAL_DMA_Init+0x14c>)
 800820a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008226:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800823c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	4313      	orrs	r3, r2
 8008254:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fa74 	bl	800874c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800826c:	d102      	bne.n	8008274 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800827c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008280:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800828a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d010      	beq.n	80082b6 <HAL_DMA_Init+0x106>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	2b04      	cmp	r3, #4
 800829a:	d80c      	bhi.n	80082b6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fa93 	bl	80087c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80082b2:	605a      	str	r2, [r3, #4]
 80082b4:	e008      	b.n	80082c8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	40020407 	.word	0x40020407
 80082ec:	bffdfff8 	.word	0xbffdfff8
 80082f0:	cccccccd 	.word	0xcccccccd
 80082f4:	40020000 	.word	0x40020000
 80082f8:	bffdfbf8 	.word	0xbffdfbf8
 80082fc:	40020400 	.word	0x40020400

08008300 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
 800830c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008318:	2b01      	cmp	r3, #1
 800831a:	d101      	bne.n	8008320 <HAL_DMA_Start_IT+0x20>
 800831c:	2302      	movs	r3, #2
 800831e:	e066      	b.n	80083ee <HAL_DMA_Start_IT+0xee>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b01      	cmp	r3, #1
 8008332:	d155      	bne.n	80083e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2202      	movs	r2, #2
 8008338:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 0201 	bic.w	r2, r2, #1
 8008350:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	68b9      	ldr	r1, [r7, #8]
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 f9b9 	bl	80086d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008362:	2b00      	cmp	r3, #0
 8008364:	d008      	beq.n	8008378 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f042 020e 	orr.w	r2, r2, #14
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	e00f      	b.n	8008398 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0204 	bic.w	r2, r2, #4
 8008386:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f042 020a 	orr.w	r2, r2, #10
 8008396:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d007      	beq.n	80083b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d007      	beq.n	80083ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f042 0201 	orr.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	e005      	b.n	80083ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80083e8:	2302      	movs	r3, #2
 80083ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e04f      	b.n	80084a8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d008      	beq.n	8008426 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2204      	movs	r2, #4
 8008418:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e040      	b.n	80084a8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 020e 	bic.w	r2, r2, #14
 8008434:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008440:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008444:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 0201 	bic.w	r2, r2, #1
 8008454:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800845a:	f003 021c 	and.w	r2, r3, #28
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008462:	2101      	movs	r1, #1
 8008464:	fa01 f202 	lsl.w	r2, r1, r2
 8008468:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008472:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00c      	beq.n	8008496 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008486:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800848a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008494:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d005      	beq.n	80084d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2204      	movs	r2, #4
 80084d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	73fb      	strb	r3, [r7, #15]
 80084d6:	e047      	b.n	8008568 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 020e 	bic.w	r2, r2, #14
 80084e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 0201 	bic.w	r2, r2, #1
 80084f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008502:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008506:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800850c:	f003 021c 	and.w	r2, r3, #28
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008514:	2101      	movs	r1, #1
 8008516:	fa01 f202 	lsl.w	r2, r1, r2
 800851a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008524:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00c      	beq.n	8008548 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800853c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008546:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855c:	2b00      	cmp	r3, #0
 800855e:	d003      	beq.n	8008568 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	4798      	blx	r3
    }
  }
  return status;
 8008568:	7bfb      	ldrb	r3, [r7, #15]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800858e:	f003 031c 	and.w	r3, r3, #28
 8008592:	2204      	movs	r2, #4
 8008594:	409a      	lsls	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	4013      	ands	r3, r2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d026      	beq.n	80085ec <HAL_DMA_IRQHandler+0x7a>
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d021      	beq.n	80085ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d107      	bne.n	80085c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f022 0204 	bic.w	r2, r2, #4
 80085c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ca:	f003 021c 	and.w	r2, r3, #28
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d2:	2104      	movs	r1, #4
 80085d4:	fa01 f202 	lsl.w	r2, r1, r2
 80085d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d071      	beq.n	80086c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80085ea:	e06c      	b.n	80086c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085f0:	f003 031c 	and.w	r3, r3, #28
 80085f4:	2202      	movs	r2, #2
 80085f6:	409a      	lsls	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4013      	ands	r3, r2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d02e      	beq.n	800865e <HAL_DMA_IRQHandler+0xec>
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d029      	beq.n	800865e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0320 	and.w	r3, r3, #32
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10b      	bne.n	8008630 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f022 020a 	bic.w	r2, r2, #10
 8008626:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008634:	f003 021c 	and.w	r2, r3, #28
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863c:	2102      	movs	r1, #2
 800863e:	fa01 f202 	lsl.w	r2, r1, r2
 8008642:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008650:	2b00      	cmp	r3, #0
 8008652:	d038      	beq.n	80086c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800865c:	e033      	b.n	80086c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008662:	f003 031c 	and.w	r3, r3, #28
 8008666:	2208      	movs	r2, #8
 8008668:	409a      	lsls	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	4013      	ands	r3, r2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d02a      	beq.n	80086c8 <HAL_DMA_IRQHandler+0x156>
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f003 0308 	and.w	r3, r3, #8
 8008678:	2b00      	cmp	r3, #0
 800867a:	d025      	beq.n	80086c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 020e 	bic.w	r2, r2, #14
 800868a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008690:	f003 021c 	and.w	r2, r3, #28
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008698:	2101      	movs	r1, #1
 800869a:	fa01 f202 	lsl.w	r2, r1, r2
 800869e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d004      	beq.n	80086c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80086c6:	bf00      	nop
 80086c8:	bf00      	nop
}
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80086e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d004      	beq.n	80086fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80086f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086fe:	f003 021c 	and.w	r2, r3, #28
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008706:	2101      	movs	r1, #1
 8008708:	fa01 f202 	lsl.w	r2, r1, r2
 800870c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	2b10      	cmp	r3, #16
 800871c:	d108      	bne.n	8008730 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800872e:	e007      	b.n	8008740 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	60da      	str	r2, [r3, #12]
}
 8008740:	bf00      	nop
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	461a      	mov	r2, r3
 800875a:	4b17      	ldr	r3, [pc, #92]	@ (80087b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800875c:	429a      	cmp	r2, r3
 800875e:	d80a      	bhi.n	8008776 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008764:	089b      	lsrs	r3, r3, #2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800876c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	6493      	str	r3, [r2, #72]	@ 0x48
 8008774:	e007      	b.n	8008786 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800877a:	089b      	lsrs	r3, r3, #2
 800877c:	009a      	lsls	r2, r3, #2
 800877e:	4b0f      	ldr	r3, [pc, #60]	@ (80087bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008780:	4413      	add	r3, r2
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	b2db      	uxtb	r3, r3
 800878c:	3b08      	subs	r3, #8
 800878e:	4a0c      	ldr	r2, [pc, #48]	@ (80087c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008790:	fba2 2303 	umull	r2, r3, r2, r3
 8008794:	091b      	lsrs	r3, r3, #4
 8008796:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a0a      	ldr	r2, [pc, #40]	@ (80087c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800879c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f003 031f 	and.w	r3, r3, #31
 80087a4:	2201      	movs	r2, #1
 80087a6:	409a      	lsls	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80087ac:	bf00      	nop
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	40020407 	.word	0x40020407
 80087bc:	4002081c 	.word	0x4002081c
 80087c0:	cccccccd 	.word	0xcccccccd
 80087c4:	40020880 	.word	0x40020880

080087c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087d8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	4b0b      	ldr	r3, [pc, #44]	@ (800880c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	461a      	mov	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a09      	ldr	r2, [pc, #36]	@ (8008810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80087ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	f003 0303 	and.w	r3, r3, #3
 80087f6:	2201      	movs	r2, #1
 80087f8:	409a      	lsls	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80087fe:	bf00      	nop
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	1000823f 	.word	0x1000823f
 8008810:	40020940 	.word	0x40020940

08008814 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b01      	cmp	r3, #1
 8008828:	d12b      	bne.n	8008882 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008830:	2b01      	cmp	r3, #1
 8008832:	d101      	bne.n	8008838 <HAL_DMAEx_ConfigMuxSync+0x24>
 8008834:	2302      	movs	r3, #2
 8008836:	e025      	b.n	8008884 <HAL_DMAEx_ConfigMuxSync+0x70>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	4b12      	ldr	r3, [pc, #72]	@ (8008890 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8008848:	4013      	ands	r3, r2
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	6811      	ldr	r1, [r2, #0]
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	68d2      	ldr	r2, [r2, #12]
 8008852:	3a01      	subs	r2, #1
 8008854:	04d2      	lsls	r2, r2, #19
 8008856:	4311      	orrs	r1, r2
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	6852      	ldr	r2, [r2, #4]
 800885c:	4311      	orrs	r1, r2
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	7a12      	ldrb	r2, [r2, #8]
 8008862:	0412      	lsls	r2, r2, #16
 8008864:	4311      	orrs	r1, r2
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	7a52      	ldrb	r2, [r2, #9]
 800886a:	0252      	lsls	r2, r2, #9
 800886c:	4311      	orrs	r1, r2
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008872:	430b      	orrs	r3, r1
 8008874:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	e000      	b.n	8008884 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
  }
}
 8008884:	4618      	mov	r0, r3
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	e000fdff 	.word	0xe000fdff

08008894 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	0c1b      	lsrs	r3, r3, #16
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 031f 	and.w	r3, r3, #31
 80088b0:	2201      	movs	r2, #1
 80088b2:	fa02 f303 	lsl.w	r3, r2, r3
 80088b6:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	015b      	lsls	r3, r3, #5
 80088bc:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 80088c0:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 80088c4:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	601a      	str	r2, [r3, #0]
}
 80088cc:	bf00      	nop
 80088ce:	371c      	adds	r7, #28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80088e6:	4b1c      	ldr	r3, [pc, #112]	@ (8008958 <HAL_FLASH_Program+0x80>)
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <HAL_FLASH_Program+0x1a>
 80088ee:	2302      	movs	r3, #2
 80088f0:	e02d      	b.n	800894e <HAL_FLASH_Program+0x76>
 80088f2:	4b19      	ldr	r3, [pc, #100]	@ (8008958 <HAL_FLASH_Program+0x80>)
 80088f4:	2201      	movs	r2, #1
 80088f6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80088f8:	4b17      	ldr	r3, [pc, #92]	@ (8008958 <HAL_FLASH_Program+0x80>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80088fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008902:	f000 f869 	bl	80089d8 <FLASH_WaitForLastOperation>
 8008906:	4603      	mov	r3, r0
 8008908:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d11a      	bne.n	8008946 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d105      	bne.n	8008922 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8008916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800891a:	68b8      	ldr	r0, [r7, #8]
 800891c:	f000 f8ca 	bl	8008ab4 <FLASH_Program_DoubleWord>
 8008920:	e004      	b.n	800892c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	4619      	mov	r1, r3
 8008926:	68b8      	ldr	r0, [r7, #8]
 8008928:	f023 fef6 	bl	802c718 <_etext>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800892c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008930:	f000 f852 	bl	80089d8 <FLASH_WaitForLastOperation>
 8008934:	4603      	mov	r3, r0
 8008936:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8008938:	4b08      	ldr	r3, [pc, #32]	@ (800895c <HAL_FLASH_Program+0x84>)
 800893a:	695a      	ldr	r2, [r3, #20]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	43db      	mvns	r3, r3
 8008940:	4906      	ldr	r1, [pc, #24]	@ (800895c <HAL_FLASH_Program+0x84>)
 8008942:	4013      	ands	r3, r2
 8008944:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008946:	4b04      	ldr	r3, [pc, #16]	@ (8008958 <HAL_FLASH_Program+0x80>)
 8008948:	2200      	movs	r2, #0
 800894a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800894c:	7dfb      	ldrb	r3, [r7, #23]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	20004528 	.word	0x20004528
 800895c:	58004000 	.word	0x58004000

08008960 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800896a:	4b0b      	ldr	r3, [pc, #44]	@ (8008998 <HAL_FLASH_Unlock+0x38>)
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	2b00      	cmp	r3, #0
 8008970:	da0b      	bge.n	800898a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008972:	4b09      	ldr	r3, [pc, #36]	@ (8008998 <HAL_FLASH_Unlock+0x38>)
 8008974:	4a09      	ldr	r2, [pc, #36]	@ (800899c <HAL_FLASH_Unlock+0x3c>)
 8008976:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008978:	4b07      	ldr	r3, [pc, #28]	@ (8008998 <HAL_FLASH_Unlock+0x38>)
 800897a:	4a09      	ldr	r2, [pc, #36]	@ (80089a0 <HAL_FLASH_Unlock+0x40>)
 800897c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800897e:	4b06      	ldr	r3, [pc, #24]	@ (8008998 <HAL_FLASH_Unlock+0x38>)
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	2b00      	cmp	r3, #0
 8008984:	da01      	bge.n	800898a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800898a:	79fb      	ldrb	r3, [r7, #7]
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	58004000 	.word	0x58004000
 800899c:	45670123 	.word	0x45670123
 80089a0:	cdef89ab 	.word	0xcdef89ab

080089a4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80089ae:	4b09      	ldr	r3, [pc, #36]	@ (80089d4 <HAL_FLASH_Lock+0x30>)
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	4a08      	ldr	r2, [pc, #32]	@ (80089d4 <HAL_FLASH_Lock+0x30>)
 80089b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089b8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80089ba:	4b06      	ldr	r3, [pc, #24]	@ (80089d4 <HAL_FLASH_Lock+0x30>)
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	db01      	blt.n	80089c6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80089c6:	79fb      	ldrb	r3, [r7, #7]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	58004000 	.word	0x58004000

080089d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80089e0:	f7ff fa1c 	bl	8007e1c <HAL_GetTick>
 80089e4:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80089e6:	e009      	b.n	80089fc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80089e8:	f7ff fa18 	bl	8007e1c <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d801      	bhi.n	80089fc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e053      	b.n	8008aa4 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80089fc:	4b2b      	ldr	r3, [pc, #172]	@ (8008aac <FLASH_WaitForLastOperation+0xd4>)
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a08:	d0ee      	beq.n	80089e8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8008a0a:	4b28      	ldr	r3, [pc, #160]	@ (8008aac <FLASH_WaitForLastOperation+0xd4>)
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d002      	beq.n	8008a20 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008a1a:	4b24      	ldr	r3, [pc, #144]	@ (8008aac <FLASH_WaitForLastOperation+0xd4>)
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d007      	beq.n	8008a3a <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8008a2a:	4b20      	ldr	r3, [pc, #128]	@ (8008aac <FLASH_WaitForLastOperation+0xd4>)
 8008a2c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008a30:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a38:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8008a40:	4013      	ands	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a4a:	d307      	bcc.n	8008a5c <FLASH_WaitForLastOperation+0x84>
 8008a4c:	4b17      	ldr	r3, [pc, #92]	@ (8008aac <FLASH_WaitForLastOperation+0xd4>)
 8008a4e:	699a      	ldr	r2, [r3, #24]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008a56:	4915      	ldr	r1, [pc, #84]	@ (8008aac <FLASH_WaitForLastOperation+0xd4>)
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	618b      	str	r3, [r1, #24]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d004      	beq.n	8008a70 <FLASH_WaitForLastOperation+0x98>
 8008a66:	4a11      	ldr	r2, [pc, #68]	@ (8008aac <FLASH_WaitForLastOperation+0xd4>)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8008a6e:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00e      	beq.n	8008a94 <FLASH_WaitForLastOperation+0xbc>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8008a76:	4a0e      	ldr	r2, [pc, #56]	@ (8008ab0 <FLASH_WaitForLastOperation+0xd8>)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e011      	b.n	8008aa4 <FLASH_WaitForLastOperation+0xcc>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8008a80:	f7ff f9cc 	bl	8007e1c <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d801      	bhi.n	8008a94 <FLASH_WaitForLastOperation+0xbc>
    {
      return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e007      	b.n	8008aa4 <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8008a94:	4b05      	ldr	r3, [pc, #20]	@ (8008aac <FLASH_WaitForLastOperation+0xd4>)
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008a9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008aa0:	d0ee      	beq.n	8008a80 <FLASH_WaitForLastOperation+0xa8>
    }
  }

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	58004000 	.word	0x58004000
 8008ab0:	20004528 	.word	0x20004528

08008ab4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8008afc <FLASH_Program_DoubleWord+0x48>)
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8008afc <FLASH_Program_DoubleWord+0x48>)
 8008ac6:	f043 0301 	orr.w	r3, r3, #1
 8008aca:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008ad2:	f3bf 8f6f 	isb	sy
}
 8008ad6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008adc:	f04f 0200 	mov.w	r2, #0
 8008ae0:	f04f 0300 	mov.w	r3, #0
 8008ae4:	000a      	movs	r2, r1
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	68f9      	ldr	r1, [r7, #12]
 8008aea:	3104      	adds	r1, #4
 8008aec:	4613      	mov	r3, r2
 8008aee:	600b      	str	r3, [r1, #0]
}
 8008af0:	bf00      	nop
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	58004000 	.word	0x58004000

08008b00 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008b0a:	4b24      	ldr	r3, [pc, #144]	@ (8008b9c <HAL_FLASHEx_Erase+0x9c>)
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d101      	bne.n	8008b16 <HAL_FLASHEx_Erase+0x16>
 8008b12:	2302      	movs	r3, #2
 8008b14:	e03d      	b.n	8008b92 <HAL_FLASHEx_Erase+0x92>
 8008b16:	4b21      	ldr	r3, [pc, #132]	@ (8008b9c <HAL_FLASHEx_Erase+0x9c>)
 8008b18:	2201      	movs	r2, #1
 8008b1a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8008b9c <HAL_FLASHEx_Erase+0x9c>)
 8008b1e:	2200      	movs	r2, #0
 8008b20:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008b22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008b26:	f7ff ff57 	bl	80089d8 <FLASH_WaitForLastOperation>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d12a      	bne.n	8008b8a <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d124      	bne.n	8008b86 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b42:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	60bb      	str	r3, [r7, #8]
 8008b4a:	e012      	b.n	8008b72 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8008b4c:	68b8      	ldr	r0, [r7, #8]
 8008b4e:	f000 f827 	bl	8008ba0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008b52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008b56:	f7ff ff3f 	bl	80089d8 <FLASH_WaitForLastOperation>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d003      	beq.n	8008b6c <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	601a      	str	r2, [r3, #0]
          break;
 8008b6a:	e00a      	b.n	8008b82 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	60bb      	str	r3, [r7, #8]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	685a      	ldr	r2, [r3, #4]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d3e4      	bcc.n	8008b4c <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8008b82:	f000 f86f 	bl	8008c64 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008b86:	f000 f825 	bl	8008bd4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008b8a:	4b04      	ldr	r3, [pc, #16]	@ (8008b9c <HAL_FLASHEx_Erase+0x9c>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	701a      	strb	r2, [r3, #0]

  return status;
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	20004528 	.word	0x20004528

08008ba0 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8008ba8:	4b09      	ldr	r3, [pc, #36]	@ (8008bd0 <FLASH_PageErase+0x30>)
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	4a06      	ldr	r2, [pc, #24]	@ (8008bd0 <FLASH_PageErase+0x30>)
 8008bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bbc:	f043 0302 	orr.w	r3, r3, #2
 8008bc0:	6153      	str	r3, [r2, #20]
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	58004000 	.word	0x58004000

08008bd4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8008bd8:	4b21      	ldr	r3, [pc, #132]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008be4:	d117      	bne.n	8008c16 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008be6:	4b1e      	ldr	r3, [pc, #120]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a1d      	ldr	r2, [pc, #116]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008bec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008bf0:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008bf8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	4b18      	ldr	r3, [pc, #96]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a17      	ldr	r2, [pc, #92]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008c04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c08:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008c0a:	4b15      	ldr	r3, [pc, #84]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a14      	ldr	r2, [pc, #80]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008c10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008c14:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8008c16:	4b12      	ldr	r3, [pc, #72]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c22:	d117      	bne.n	8008c54 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008c24:	4b0e      	ldr	r3, [pc, #56]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a0d      	ldr	r2, [pc, #52]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008c2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c2e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008c30:	4b0b      	ldr	r3, [pc, #44]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a0a      	ldr	r2, [pc, #40]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008c36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	4b08      	ldr	r3, [pc, #32]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a07      	ldr	r2, [pc, #28]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008c42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c46:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008c48:	4b05      	ldr	r3, [pc, #20]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a04      	ldr	r2, [pc, #16]	@ (8008c60 <FLASH_FlushCaches+0x8c>)
 8008c4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008c52:	6013      	str	r3, [r2, #0]
  }
}
 8008c54:	bf00      	nop
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	58004000 	.word	0x58004000

08008c64 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8008c64:	b480      	push	{r7}
 8008c66:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8008c68:	4b06      	ldr	r3, [pc, #24]	@ (8008c84 <FLASH_AcknowledgePageErase+0x20>)
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	4a05      	ldr	r2, [pc, #20]	@ (8008c84 <FLASH_AcknowledgePageErase+0x20>)
 8008c6e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008c72:	f023 0302 	bic.w	r3, r3, #2
 8008c76:	6153      	str	r3, [r2, #20]
}
 8008c78:	bf00      	nop
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	58004000 	.word	0x58004000

08008c88 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008c92:	2300      	movs	r3, #0
 8008c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c96:	e14c      	b.n	8008f32 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 813e 	beq.w	8008f2c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f003 0303 	and.w	r3, r3, #3
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d005      	beq.n	8008cc8 <HAL_GPIO_Init+0x40>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f003 0303 	and.w	r3, r3, #3
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d130      	bne.n	8008d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd8:	43db      	mvns	r3, r3
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	4013      	ands	r3, r2
 8008cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	68da      	ldr	r2, [r3, #12]
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	005b      	lsls	r3, r3, #1
 8008ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008cfe:	2201      	movs	r2, #1
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	fa02 f303 	lsl.w	r3, r2, r3
 8008d06:	43db      	mvns	r3, r3
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	091b      	lsrs	r3, r3, #4
 8008d14:	f003 0201 	and.w	r2, r3, #1
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d017      	beq.n	8008d66 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	2203      	movs	r2, #3
 8008d42:	fa02 f303 	lsl.w	r3, r2, r3
 8008d46:	43db      	mvns	r3, r3
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	689a      	ldr	r2, [r3, #8]
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f003 0303 	and.w	r3, r3, #3
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d123      	bne.n	8008dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	08da      	lsrs	r2, r3, #3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	3208      	adds	r2, #8
 8008d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	220f      	movs	r2, #15
 8008d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8e:	43db      	mvns	r3, r3
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	4013      	ands	r3, r2
 8008d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	691a      	ldr	r2, [r3, #16]
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f003 0307 	and.w	r3, r3, #7
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	fa02 f303 	lsl.w	r3, r2, r3
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	08da      	lsrs	r2, r3, #3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3208      	adds	r2, #8
 8008db4:	6939      	ldr	r1, [r7, #16]
 8008db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dca:	43db      	mvns	r3, r3
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f003 0203 	and.w	r2, r3, #3
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	005b      	lsls	r3, r3, #1
 8008dde:	fa02 f303 	lsl.w	r3, r2, r3
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f000 8098 	beq.w	8008f2c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008dfc:	4a54      	ldr	r2, [pc, #336]	@ (8008f50 <HAL_GPIO_Init+0x2c8>)
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	089b      	lsrs	r3, r3, #2
 8008e02:	3302      	adds	r3, #2
 8008e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f003 0303 	and.w	r3, r3, #3
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	220f      	movs	r2, #15
 8008e14:	fa02 f303 	lsl.w	r3, r2, r3
 8008e18:	43db      	mvns	r3, r3
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008e26:	d019      	beq.n	8008e5c <HAL_GPIO_Init+0x1d4>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a4a      	ldr	r2, [pc, #296]	@ (8008f54 <HAL_GPIO_Init+0x2cc>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d013      	beq.n	8008e58 <HAL_GPIO_Init+0x1d0>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a49      	ldr	r2, [pc, #292]	@ (8008f58 <HAL_GPIO_Init+0x2d0>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00d      	beq.n	8008e54 <HAL_GPIO_Init+0x1cc>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a48      	ldr	r2, [pc, #288]	@ (8008f5c <HAL_GPIO_Init+0x2d4>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d007      	beq.n	8008e50 <HAL_GPIO_Init+0x1c8>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a47      	ldr	r2, [pc, #284]	@ (8008f60 <HAL_GPIO_Init+0x2d8>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d101      	bne.n	8008e4c <HAL_GPIO_Init+0x1c4>
 8008e48:	2304      	movs	r3, #4
 8008e4a:	e008      	b.n	8008e5e <HAL_GPIO_Init+0x1d6>
 8008e4c:	2307      	movs	r3, #7
 8008e4e:	e006      	b.n	8008e5e <HAL_GPIO_Init+0x1d6>
 8008e50:	2303      	movs	r3, #3
 8008e52:	e004      	b.n	8008e5e <HAL_GPIO_Init+0x1d6>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e002      	b.n	8008e5e <HAL_GPIO_Init+0x1d6>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e000      	b.n	8008e5e <HAL_GPIO_Init+0x1d6>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	f002 0203 	and.w	r2, r2, #3
 8008e64:	0092      	lsls	r2, r2, #2
 8008e66:	4093      	lsls	r3, r2
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008e6e:	4938      	ldr	r1, [pc, #224]	@ (8008f50 <HAL_GPIO_Init+0x2c8>)
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	089b      	lsrs	r3, r3, #2
 8008e74:	3302      	adds	r3, #2
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e7c:	4b39      	ldr	r3, [pc, #228]	@ (8008f64 <HAL_GPIO_Init+0x2dc>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	43db      	mvns	r3, r3
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	4013      	ands	r3, r2
 8008e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d003      	beq.n	8008ea0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008ea0:	4a30      	ldr	r2, [pc, #192]	@ (8008f64 <HAL_GPIO_Init+0x2dc>)
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8008f64 <HAL_GPIO_Init+0x2dc>)
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	43db      	mvns	r3, r3
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008eca:	4a26      	ldr	r2, [pc, #152]	@ (8008f64 <HAL_GPIO_Init+0x2dc>)
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008ed0:	4b24      	ldr	r3, [pc, #144]	@ (8008f64 <HAL_GPIO_Init+0x2dc>)
 8008ed2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	43db      	mvns	r3, r3
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	4013      	ands	r3, r2
 8008ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d003      	beq.n	8008ef6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8008eee:	693a      	ldr	r2, [r7, #16]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8008f64 <HAL_GPIO_Init+0x2dc>)
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8008efe:	4b19      	ldr	r3, [pc, #100]	@ (8008f64 <HAL_GPIO_Init+0x2dc>)
 8008f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d003      	beq.n	8008f24 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008f24:	4a0f      	ldr	r2, [pc, #60]	@ (8008f64 <HAL_GPIO_Init+0x2dc>)
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	fa22 f303 	lsr.w	r3, r2, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f47f aeab 	bne.w	8008c98 <HAL_GPIO_Init+0x10>
  }
}
 8008f42:	bf00      	nop
 8008f44:	bf00      	nop
 8008f46:	371c      	adds	r7, #28
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	40010000 	.word	0x40010000
 8008f54:	48000400 	.word	0x48000400
 8008f58:	48000800 	.word	0x48000800
 8008f5c:	48000c00 	.word	0x48000c00
 8008f60:	48001000 	.word	0x48001000
 8008f64:	58000800 	.word	0x58000800

08008f68 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	460b      	mov	r3, r1
 8008f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	691a      	ldr	r2, [r3, #16]
 8008f78:	887b      	ldrh	r3, [r7, #2]
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f80:	2301      	movs	r3, #1
 8008f82:	73fb      	strb	r3, [r7, #15]
 8008f84:	e001      	b.n	8008f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3714      	adds	r7, #20
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	807b      	strh	r3, [r7, #2]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008fa8:	787b      	ldrb	r3, [r7, #1]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008fae:	887a      	ldrh	r2, [r7, #2]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008fb4:	e002      	b.n	8008fbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008fb6:	887a      	ldrh	r2, [r7, #2]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008fd2:	4b08      	ldr	r3, [pc, #32]	@ (8008ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008fd4:	68da      	ldr	r2, [r3, #12]
 8008fd6:	88fb      	ldrh	r3, [r7, #6]
 8008fd8:	4013      	ands	r3, r2
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d006      	beq.n	8008fec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008fde:	4a05      	ldr	r2, [pc, #20]	@ (8008ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008fe0:	88fb      	ldrh	r3, [r7, #6]
 8008fe2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008fe4:	88fb      	ldrh	r3, [r7, #6]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7f8 fcf3 	bl	80019d2 <HAL_GPIO_EXTI_Callback>
  }
}
 8008fec:	bf00      	nop
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	58000800 	.word	0x58000800

08008ff8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8008ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8009028 <HAL_HSEM_IRQHandler+0x30>)
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8009004:	4b08      	ldr	r3, [pc, #32]	@ (8009028 <HAL_HSEM_IRQHandler+0x30>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	43db      	mvns	r3, r3
 800900c:	4906      	ldr	r1, [pc, #24]	@ (8009028 <HAL_HSEM_IRQHandler+0x30>)
 800900e:	4013      	ands	r3, r2
 8009010:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8009012:	4a05      	ldr	r2, [pc, #20]	@ (8009028 <HAL_HSEM_IRQHandler+0x30>)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f807 	bl	800902c <HAL_HSEM_FreeCallback>
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	58001500 	.word	0x58001500

0800902c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d01e      	beq.n	8009090 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8009052:	4b13      	ldr	r3, [pc, #76]	@ (80090a0 <HAL_IPCC_Init+0x60>)
 8009054:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b00      	cmp	r3, #0
 8009060:	d102      	bne.n	8009068 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7fa f836 	bl	80030d4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8009068:	68b8      	ldr	r0, [r7, #8]
 800906a:	f000 f85b 	bl	8009124 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f82c 	bl	80090d8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800908e:	e001      	b.n	8009094 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8009094:	7bfb      	ldrb	r3, [r7, #15]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	58000c00 	.word	0x58000c00

080090a4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	4613      	mov	r3, r2
 80090b0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80090b2:	bf00      	nop
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80090be:	b480      	push	{r7}
 80090c0:	b085      	sub	sp, #20
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	60f8      	str	r0, [r7, #12]
 80090c6:	60b9      	str	r1, [r7, #8]
 80090c8:	4613      	mov	r3, r2
 80090ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80090cc:	bf00      	nop
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80090e0:	2300      	movs	r3, #0
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	e00f      	b.n	8009106 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	4a0b      	ldr	r2, [pc, #44]	@ (800911c <IPCC_SetDefaultCallbacks+0x44>)
 80090f0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	3306      	adds	r3, #6
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	4a08      	ldr	r2, [pc, #32]	@ (8009120 <IPCC_SetDefaultCallbacks+0x48>)
 80090fe:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	3301      	adds	r3, #1
 8009104:	60fb      	str	r3, [r7, #12]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2b05      	cmp	r3, #5
 800910a:	d9ec      	bls.n	80090e6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800910c:	bf00      	nop
 800910e:	bf00      	nop
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	080090a5 	.word	0x080090a5
 8009120:	080090bf 	.word	0x080090bf

08009124 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8009138:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	223f      	movs	r2, #63	@ 0x3f
 800913e:	609a      	str	r2, [r3, #8]
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800914c:	b480      	push	{r7}
 800914e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009150:	4b05      	ldr	r3, [pc, #20]	@ (8009168 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a04      	ldr	r2, [pc, #16]	@ (8009168 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800915a:	6013      	str	r3, [r2, #0]
}
 800915c:	bf00      	nop
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	58000400 	.word	0x58000400

0800916c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800916c:	b480      	push	{r7}
 800916e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8009170:	4b04      	ldr	r3, [pc, #16]	@ (8009184 <HAL_PWREx_GetVoltageRange+0x18>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8009178:	4618      	mov	r0, r3
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	58000400 	.word	0x58000400

08009188 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800918c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800919a:	d101      	bne.n	80091a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800919c:	2301      	movs	r3, #1
 800919e:	e000      	b.n	80091a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <LL_RCC_HSE_Enable>:
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80091b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80091ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091be:	6013      	str	r3, [r2, #0]
}
 80091c0:	bf00      	nop
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <LL_RCC_HSE_Disable>:
{
 80091ca:	b480      	push	{r7}
 80091cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80091ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80091d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091dc:	6013      	str	r3, [r2, #0]
}
 80091de:	bf00      	nop
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <LL_RCC_HSE_IsReady>:
{
 80091e8:	b480      	push	{r7}
 80091ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80091ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091fa:	d101      	bne.n	8009200 <LL_RCC_HSE_IsReady+0x18>
 80091fc:	2301      	movs	r3, #1
 80091fe:	e000      	b.n	8009202 <LL_RCC_HSE_IsReady+0x1a>
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <LL_RCC_HSI_Enable>:
{
 800920c:	b480      	push	{r7}
 800920e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800921a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800921e:	6013      	str	r3, [r2, #0]
}
 8009220:	bf00      	nop
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <LL_RCC_HSI_Disable>:
{
 800922a:	b480      	push	{r7}
 800922c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800922e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800923c:	6013      	str	r3, [r2, #0]
}
 800923e:	bf00      	nop
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <LL_RCC_HSI_IsReady>:
{
 8009248:	b480      	push	{r7}
 800924a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800924c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800925a:	d101      	bne.n	8009260 <LL_RCC_HSI_IsReady+0x18>
 800925c:	2301      	movs	r3, #1
 800925e:	e000      	b.n	8009262 <LL_RCC_HSI_IsReady+0x1a>
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <LL_RCC_HSI_SetCalibTrimming>:
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8009274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	061b      	lsls	r3, r3, #24
 8009282:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009286:	4313      	orrs	r3, r2
 8009288:	604b      	str	r3, [r1, #4]
}
 800928a:	bf00      	nop
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <LL_RCC_HSI48_Enable>:
{
 8009296:	b480      	push	{r7}
 8009298:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800929a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800929e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80092a6:	f043 0301 	orr.w	r3, r3, #1
 80092aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80092ae:	bf00      	nop
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <LL_RCC_HSI48_Disable>:
{
 80092b8:	b480      	push	{r7}
 80092ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80092bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80092c8:	f023 0301 	bic.w	r3, r3, #1
 80092cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80092d0:	bf00      	nop
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <LL_RCC_HSI48_IsReady>:
{
 80092da:	b480      	push	{r7}
 80092dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80092de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d101      	bne.n	80092f2 <LL_RCC_HSI48_IsReady+0x18>
 80092ee:	2301      	movs	r3, #1
 80092f0:	e000      	b.n	80092f4 <LL_RCC_HSI48_IsReady+0x1a>
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <LL_RCC_LSE_Enable>:
{
 80092fe:	b480      	push	{r7}
 8009300:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800930a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800930e:	f043 0301 	orr.w	r3, r3, #1
 8009312:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8009316:	bf00      	nop
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <LL_RCC_LSE_Disable>:
{
 8009320:	b480      	push	{r7}
 8009322:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800932c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009330:	f023 0301 	bic.w	r3, r3, #1
 8009334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8009338:	bf00      	nop
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <LL_RCC_LSE_EnableBypass>:
{
 8009342:	b480      	push	{r7}
 8009344:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800934a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800934e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009352:	f043 0304 	orr.w	r3, r3, #4
 8009356:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800935a:	bf00      	nop
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <LL_RCC_LSE_DisableBypass>:
{
 8009364:	b480      	push	{r7}
 8009366:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800936c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009370:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009374:	f023 0304 	bic.w	r3, r3, #4
 8009378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800937c:	bf00      	nop
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr

08009386 <LL_RCC_LSE_IsReady>:
{
 8009386:	b480      	push	{r7}
 8009388:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800938a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800938e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	2b02      	cmp	r3, #2
 8009398:	d101      	bne.n	800939e <LL_RCC_LSE_IsReady+0x18>
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <LL_RCC_LSE_IsReady+0x1a>
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <LL_RCC_LSI1_Enable>:
{
 80093aa:	b480      	push	{r7}
 80093ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80093ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80093b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80093ba:	f043 0301 	orr.w	r3, r3, #1
 80093be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80093c2:	bf00      	nop
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <LL_RCC_LSI1_Disable>:
{
 80093cc:	b480      	push	{r7}
 80093ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80093d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80093d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80093dc:	f023 0301 	bic.w	r3, r3, #1
 80093e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80093e4:	bf00      	nop
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <LL_RCC_LSI1_IsReady>:
{
 80093ee:	b480      	push	{r7}
 80093f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80093f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d101      	bne.n	8009406 <LL_RCC_LSI1_IsReady+0x18>
 8009402:	2301      	movs	r3, #1
 8009404:	e000      	b.n	8009408 <LL_RCC_LSI1_IsReady+0x1a>
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <LL_RCC_LSI2_Enable>:
{
 8009412:	b480      	push	{r7}
 8009414:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800941a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800941e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009422:	f043 0304 	orr.w	r3, r3, #4
 8009426:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800942a:	bf00      	nop
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <LL_RCC_LSI2_Disable>:
{
 8009434:	b480      	push	{r7}
 8009436:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009438:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800943c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009440:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009444:	f023 0304 	bic.w	r3, r3, #4
 8009448:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800944c:	bf00      	nop
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <LL_RCC_LSI2_IsReady>:
{
 8009456:	b480      	push	{r7}
 8009458:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800945a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800945e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009462:	f003 0308 	and.w	r3, r3, #8
 8009466:	2b08      	cmp	r3, #8
 8009468:	d101      	bne.n	800946e <LL_RCC_LSI2_IsReady+0x18>
 800946a:	2301      	movs	r3, #1
 800946c:	e000      	b.n	8009470 <LL_RCC_LSI2_IsReady+0x1a>
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <LL_RCC_LSI2_SetTrimming>:
{
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8009482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800948a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	021b      	lsls	r3, r3, #8
 8009492:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009496:	4313      	orrs	r3, r2
 8009498:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <LL_RCC_MSI_Enable>:
{
 80094a8:	b480      	push	{r7}
 80094aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80094ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80094b6:	f043 0301 	orr.w	r3, r3, #1
 80094ba:	6013      	str	r3, [r2, #0]
}
 80094bc:	bf00      	nop
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <LL_RCC_MSI_Disable>:
{
 80094c6:	b480      	push	{r7}
 80094c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80094ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80094d4:	f023 0301 	bic.w	r3, r3, #1
 80094d8:	6013      	str	r3, [r2, #0]
}
 80094da:	bf00      	nop
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <LL_RCC_MSI_IsReady>:
{
 80094e4:	b480      	push	{r7}
 80094e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80094e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d101      	bne.n	80094fa <LL_RCC_MSI_IsReady+0x16>
 80094f6:	2301      	movs	r3, #1
 80094f8:	e000      	b.n	80094fc <LL_RCC_MSI_IsReady+0x18>
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <LL_RCC_MSI_SetRange>:
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800950e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009518:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4313      	orrs	r3, r2
 8009520:	600b      	str	r3, [r1, #0]
}
 8009522:	bf00      	nop
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <LL_RCC_MSI_GetRange>:
{
 800952e:	b480      	push	{r7}
 8009530:	b083      	sub	sp, #12
 8009532:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8009534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800953e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2bb0      	cmp	r3, #176	@ 0xb0
 8009544:	d901      	bls.n	800954a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8009546:	23b0      	movs	r3, #176	@ 0xb0
 8009548:	607b      	str	r3, [r7, #4]
  return msiRange;
 800954a:	687b      	ldr	r3, [r7, #4]
}
 800954c:	4618      	mov	r0, r3
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <LL_RCC_MSI_SetCalibTrimming>:
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8009560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	021b      	lsls	r3, r3, #8
 800956e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009572:	4313      	orrs	r3, r2
 8009574:	604b      	str	r3, [r1, #4]
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <LL_RCC_SetSysClkSource>:
{
 8009582:	b480      	push	{r7}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800958a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f023 0203 	bic.w	r2, r3, #3
 8009594:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4313      	orrs	r3, r2
 800959c:	608b      	str	r3, [r1, #8]
}
 800959e:	bf00      	nop
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <LL_RCC_GetSysClkSource>:
{
 80095aa:	b480      	push	{r7}
 80095ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80095ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f003 030c 	and.w	r3, r3, #12
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <LL_RCC_SetAHBPrescaler>:
{
 80095c2:	b480      	push	{r7}
 80095c4:	b083      	sub	sp, #12
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80095ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80095d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4313      	orrs	r3, r2
 80095dc:	608b      	str	r3, [r1, #8]
}
 80095de:	bf00      	nop
 80095e0:	370c      	adds	r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <LL_C2_RCC_SetAHBPrescaler>:
{
 80095ea:	b480      	push	{r7}
 80095ec:	b083      	sub	sp, #12
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80095f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80095fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80095fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4313      	orrs	r3, r2
 8009606:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800960a:	bf00      	nop
 800960c:	370c      	adds	r7, #12
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <LL_RCC_SetAHB4Prescaler>:
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800961e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009622:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009626:	f023 020f 	bic.w	r2, r3, #15
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	091b      	lsrs	r3, r3, #4
 800962e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009632:	4313      	orrs	r3, r2
 8009634:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <LL_RCC_SetAPB1Prescaler>:
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800964c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009656:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4313      	orrs	r3, r2
 800965e:	608b      	str	r3, [r1, #8]
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <LL_RCC_SetAPB2Prescaler>:
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8009674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800967e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4313      	orrs	r3, r2
 8009686:	608b      	str	r3, [r1, #8]
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <LL_RCC_GetAHBPrescaler>:
{
 8009694:	b480      	push	{r7}
 8009696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <LL_RCC_GetAHB4Prescaler>:
{
 80096ac:	b480      	push	{r7}
 80096ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80096b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80096b8:	011b      	lsls	r3, r3, #4
 80096ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <LL_RCC_GetAPB1Prescaler>:
{
 80096c8:	b480      	push	{r7}
 80096ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80096cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <LL_RCC_GetAPB2Prescaler>:
{
 80096e0:	b480      	push	{r7}
 80096e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80096e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <LL_RCC_PLL_Enable>:
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80096fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800970a:	6013      	str	r3, [r2, #0]
}
 800970c:	bf00      	nop
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <LL_RCC_PLL_Disable>:
{
 8009716:	b480      	push	{r7}
 8009718:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800971a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009724:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009728:	6013      	str	r3, [r2, #0]
}
 800972a:	bf00      	nop
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <LL_RCC_PLL_IsReady>:
{
 8009734:	b480      	push	{r7}
 8009736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8009738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009742:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009746:	d101      	bne.n	800974c <LL_RCC_PLL_IsReady+0x18>
 8009748:	2301      	movs	r3, #1
 800974a:	e000      	b.n	800974e <LL_RCC_PLL_IsReady+0x1a>
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <LL_RCC_PLL_GetN>:
{
 8009758:	b480      	push	{r7}
 800975a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800975c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	0a1b      	lsrs	r3, r3, #8
 8009764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8009768:	4618      	mov	r0, r3
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <LL_RCC_PLL_GetR>:
{
 8009772:	b480      	push	{r7}
 8009774:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8009780:	4618      	mov	r0, r3
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <LL_RCC_PLL_GetDivider>:
{
 800978a:	b480      	push	{r7}
 800978c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800978e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8009798:	4618      	mov	r0, r3
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <LL_RCC_PLL_GetMainSource>:
{
 80097a2:	b480      	push	{r7}
 80097a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80097a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	f003 0303 	and.w	r3, r3, #3
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <LL_RCC_IsActiveFlag_HPRE>:
{
 80097ba:	b480      	push	{r7}
 80097bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80097be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80097c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097cc:	d101      	bne.n	80097d2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80097ce:	2301      	movs	r3, #1
 80097d0:	e000      	b.n	80097d4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80097de:	b480      	push	{r7}
 80097e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80097e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80097ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097f2:	d101      	bne.n	80097f8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80097f4:	2301      	movs	r3, #1
 80097f6:	e000      	b.n	80097fa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8009804:	b480      	push	{r7}
 8009806:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8009808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800980c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8009810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009818:	d101      	bne.n	800981e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800981a:	2301      	movs	r3, #1
 800981c:	e000      	b.n	8009820 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800982a:	b480      	push	{r7}
 800982c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800982e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009838:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800983c:	d101      	bne.n	8009842 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800983e:	2301      	movs	r3, #1
 8009840:	e000      	b.n	8009844 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800984e:	b480      	push	{r7}
 8009850:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8009852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800985c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009860:	d101      	bne.n	8009866 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8009862:	2301      	movs	r3, #1
 8009864:	e000      	b.n	8009868 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
	...

08009874 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009874:	b590      	push	{r4, r7, lr}
 8009876:	b08d      	sub	sp, #52	@ 0x34
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e363      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f003 0320 	and.w	r3, r3, #32
 800988e:	2b00      	cmp	r3, #0
 8009890:	f000 808d 	beq.w	80099ae <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009894:	f7ff fe89 	bl	80095aa <LL_RCC_GetSysClkSource>
 8009898:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800989a:	f7ff ff82 	bl	80097a2 <LL_RCC_PLL_GetMainSource>
 800989e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80098a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d005      	beq.n	80098b2 <HAL_RCC_OscConfig+0x3e>
 80098a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a8:	2b0c      	cmp	r3, #12
 80098aa:	d147      	bne.n	800993c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80098ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d144      	bne.n	800993c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	69db      	ldr	r3, [r3, #28]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d101      	bne.n	80098be <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e347      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80098c2:	f7ff fe34 	bl	800952e <LL_RCC_MSI_GetRange>
 80098c6:	4603      	mov	r3, r0
 80098c8:	429c      	cmp	r4, r3
 80098ca:	d914      	bls.n	80098f6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 fd2f 	bl	800a334 <RCC_SetFlashLatencyFromMSIRange>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	e336      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7ff fe0e 	bl	8009506 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7ff fe32 	bl	8009558 <LL_RCC_MSI_SetCalibTrimming>
 80098f4:	e013      	b.n	800991e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff fe03 	bl	8009506 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a1b      	ldr	r3, [r3, #32]
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff fe27 	bl	8009558 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800990e:	4618      	mov	r0, r3
 8009910:	f000 fd10 	bl	800a334 <RCC_SetFlashLatencyFromMSIRange>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e317      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800991e:	f000 fcc9 	bl	800a2b4 <HAL_RCC_GetHCLKFreq>
 8009922:	4603      	mov	r3, r0
 8009924:	4aa4      	ldr	r2, [pc, #656]	@ (8009bb8 <HAL_RCC_OscConfig+0x344>)
 8009926:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009928:	4ba4      	ldr	r3, [pc, #656]	@ (8009bbc <HAL_RCC_OscConfig+0x348>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4618      	mov	r0, r3
 800992e:	f7fe fa27 	bl	8007d80 <HAL_InitTick>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d039      	beq.n	80099ac <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e308      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	69db      	ldr	r3, [r3, #28]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d01e      	beq.n	8009982 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009944:	f7ff fdb0 	bl	80094a8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009948:	f7fe fa68 	bl	8007e1c <HAL_GetTick>
 800994c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800994e:	e008      	b.n	8009962 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009950:	f7fe fa64 	bl	8007e1c <HAL_GetTick>
 8009954:	4602      	mov	r2, r0
 8009956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	2b02      	cmp	r3, #2
 800995c:	d901      	bls.n	8009962 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800995e:	2303      	movs	r3, #3
 8009960:	e2f5      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8009962:	f7ff fdbf 	bl	80094e4 <LL_RCC_MSI_IsReady>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d0f1      	beq.n	8009950 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009970:	4618      	mov	r0, r3
 8009972:	f7ff fdc8 	bl	8009506 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	4618      	mov	r0, r3
 800997c:	f7ff fdec 	bl	8009558 <LL_RCC_MSI_SetCalibTrimming>
 8009980:	e015      	b.n	80099ae <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009982:	f7ff fda0 	bl	80094c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009986:	f7fe fa49 	bl	8007e1c <HAL_GetTick>
 800998a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800998c:	e008      	b.n	80099a0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800998e:	f7fe fa45 	bl	8007e1c <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	2b02      	cmp	r3, #2
 800999a:	d901      	bls.n	80099a0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e2d6      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80099a0:	f7ff fda0 	bl	80094e4 <LL_RCC_MSI_IsReady>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1f1      	bne.n	800998e <HAL_RCC_OscConfig+0x11a>
 80099aa:	e000      	b.n	80099ae <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80099ac:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d047      	beq.n	8009a4a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099ba:	f7ff fdf6 	bl	80095aa <LL_RCC_GetSysClkSource>
 80099be:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099c0:	f7ff feef 	bl	80097a2 <LL_RCC_PLL_GetMainSource>
 80099c4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	2b08      	cmp	r3, #8
 80099ca:	d005      	beq.n	80099d8 <HAL_RCC_OscConfig+0x164>
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	2b0c      	cmp	r3, #12
 80099d0:	d108      	bne.n	80099e4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d105      	bne.n	80099e4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d134      	bne.n	8009a4a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e2b4      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099ec:	d102      	bne.n	80099f4 <HAL_RCC_OscConfig+0x180>
 80099ee:	f7ff fbdd 	bl	80091ac <LL_RCC_HSE_Enable>
 80099f2:	e001      	b.n	80099f8 <HAL_RCC_OscConfig+0x184>
 80099f4:	f7ff fbe9 	bl	80091ca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d012      	beq.n	8009a26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a00:	f7fe fa0c 	bl	8007e1c <HAL_GetTick>
 8009a04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8009a06:	e008      	b.n	8009a1a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a08:	f7fe fa08 	bl	8007e1c <HAL_GetTick>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	2b64      	cmp	r3, #100	@ 0x64
 8009a14:	d901      	bls.n	8009a1a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e299      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8009a1a:	f7ff fbe5 	bl	80091e8 <LL_RCC_HSE_IsReady>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d0f1      	beq.n	8009a08 <HAL_RCC_OscConfig+0x194>
 8009a24:	e011      	b.n	8009a4a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a26:	f7fe f9f9 	bl	8007e1c <HAL_GetTick>
 8009a2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8009a2c:	e008      	b.n	8009a40 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a2e:	f7fe f9f5 	bl	8007e1c <HAL_GetTick>
 8009a32:	4602      	mov	r2, r0
 8009a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	2b64      	cmp	r3, #100	@ 0x64
 8009a3a:	d901      	bls.n	8009a40 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e286      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8009a40:	f7ff fbd2 	bl	80091e8 <LL_RCC_HSE_IsReady>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1f1      	bne.n	8009a2e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 0302 	and.w	r3, r3, #2
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d04c      	beq.n	8009af0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a56:	f7ff fda8 	bl	80095aa <LL_RCC_GetSysClkSource>
 8009a5a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a5c:	f7ff fea1 	bl	80097a2 <LL_RCC_PLL_GetMainSource>
 8009a60:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	2b04      	cmp	r3, #4
 8009a66:	d005      	beq.n	8009a74 <HAL_RCC_OscConfig+0x200>
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	2b0c      	cmp	r3, #12
 8009a6c:	d10e      	bne.n	8009a8c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d10b      	bne.n	8009a8c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e266      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7ff fbf1 	bl	800926c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009a8a:	e031      	b.n	8009af0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d019      	beq.n	8009ac8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a94:	f7ff fbba 	bl	800920c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a98:	f7fe f9c0 	bl	8007e1c <HAL_GetTick>
 8009a9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8009a9e:	e008      	b.n	8009ab2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009aa0:	f7fe f9bc 	bl	8007e1c <HAL_GetTick>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d901      	bls.n	8009ab2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e24d      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8009ab2:	f7ff fbc9 	bl	8009248 <LL_RCC_HSI_IsReady>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d0f1      	beq.n	8009aa0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7ff fbd3 	bl	800926c <LL_RCC_HSI_SetCalibTrimming>
 8009ac6:	e013      	b.n	8009af0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ac8:	f7ff fbaf 	bl	800922a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009acc:	f7fe f9a6 	bl	8007e1c <HAL_GetTick>
 8009ad0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8009ad2:	e008      	b.n	8009ae6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ad4:	f7fe f9a2 	bl	8007e1c <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d901      	bls.n	8009ae6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e233      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8009ae6:	f7ff fbaf 	bl	8009248 <LL_RCC_HSI_IsReady>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1f1      	bne.n	8009ad4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 0308 	and.w	r3, r3, #8
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d106      	bne.n	8009b0a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 80a3 	beq.w	8009c50 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d076      	beq.n	8009c00 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 0310 	and.w	r3, r3, #16
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d046      	beq.n	8009bac <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8009b1e:	f7ff fc66 	bl	80093ee <LL_RCC_LSI1_IsReady>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d113      	bne.n	8009b50 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8009b28:	f7ff fc3f 	bl	80093aa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009b2c:	f7fe f976 	bl	8007e1c <HAL_GetTick>
 8009b30:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009b32:	e008      	b.n	8009b46 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009b34:	f7fe f972 	bl	8007e1c <HAL_GetTick>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3c:	1ad3      	subs	r3, r2, r3
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d901      	bls.n	8009b46 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8009b42:	2303      	movs	r3, #3
 8009b44:	e203      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009b46:	f7ff fc52 	bl	80093ee <LL_RCC_LSI1_IsReady>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d0f1      	beq.n	8009b34 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8009b50:	f7ff fc5f 	bl	8009412 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b54:	f7fe f962 	bl	8007e1c <HAL_GetTick>
 8009b58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009b5a:	e008      	b.n	8009b6e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009b5c:	f7fe f95e 	bl	8007e1c <HAL_GetTick>
 8009b60:	4602      	mov	r2, r0
 8009b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d901      	bls.n	8009b6e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e1ef      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009b6e:	f7ff fc72 	bl	8009456 <LL_RCC_LSI2_IsReady>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0f1      	beq.n	8009b5c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff fc7c 	bl	800947a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8009b82:	f7ff fc23 	bl	80093cc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b86:	f7fe f949 	bl	8007e1c <HAL_GetTick>
 8009b8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009b8c:	e008      	b.n	8009ba0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009b8e:	f7fe f945 	bl	8007e1c <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d901      	bls.n	8009ba0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e1d6      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009ba0:	f7ff fc25 	bl	80093ee <LL_RCC_LSI1_IsReady>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1f1      	bne.n	8009b8e <HAL_RCC_OscConfig+0x31a>
 8009baa:	e051      	b.n	8009c50 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8009bac:	f7ff fbfd 	bl	80093aa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb0:	f7fe f934 	bl	8007e1c <HAL_GetTick>
 8009bb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009bb6:	e00c      	b.n	8009bd2 <HAL_RCC_OscConfig+0x35e>
 8009bb8:	20000098 	.word	0x20000098
 8009bbc:	2000009c 	.word	0x2000009c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009bc0:	f7fe f92c 	bl	8007e1c <HAL_GetTick>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d901      	bls.n	8009bd2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e1bd      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009bd2:	f7ff fc0c 	bl	80093ee <LL_RCC_LSI1_IsReady>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d0f1      	beq.n	8009bc0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8009bdc:	f7ff fc2a 	bl	8009434 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009be0:	e008      	b.n	8009bf4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009be2:	f7fe f91b 	bl	8007e1c <HAL_GetTick>
 8009be6:	4602      	mov	r2, r0
 8009be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	2b03      	cmp	r3, #3
 8009bee:	d901      	bls.n	8009bf4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e1ac      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009bf4:	f7ff fc2f 	bl	8009456 <LL_RCC_LSI2_IsReady>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1f1      	bne.n	8009be2 <HAL_RCC_OscConfig+0x36e>
 8009bfe:	e027      	b.n	8009c50 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8009c00:	f7ff fc18 	bl	8009434 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c04:	f7fe f90a 	bl	8007e1c <HAL_GetTick>
 8009c08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009c0a:	e008      	b.n	8009c1e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009c0c:	f7fe f906 	bl	8007e1c <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	d901      	bls.n	8009c1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e197      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009c1e:	f7ff fc1a 	bl	8009456 <LL_RCC_LSI2_IsReady>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1f1      	bne.n	8009c0c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8009c28:	f7ff fbd0 	bl	80093cc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c2c:	f7fe f8f6 	bl	8007e1c <HAL_GetTick>
 8009c30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009c32:	e008      	b.n	8009c46 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009c34:	f7fe f8f2 	bl	8007e1c <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d901      	bls.n	8009c46 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e183      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009c46:	f7ff fbd2 	bl	80093ee <LL_RCC_LSI1_IsReady>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1f1      	bne.n	8009c34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0304 	and.w	r3, r3, #4
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d05b      	beq.n	8009d14 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c5c:	4ba7      	ldr	r3, [pc, #668]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d114      	bne.n	8009c92 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009c68:	f7ff fa70 	bl	800914c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c6c:	f7fe f8d6 	bl	8007e1c <HAL_GetTick>
 8009c70:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c72:	e008      	b.n	8009c86 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c74:	f7fe f8d2 	bl	8007e1c <HAL_GetTick>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d901      	bls.n	8009c86 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e163      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c86:	4b9d      	ldr	r3, [pc, #628]	@ (8009efc <HAL_RCC_OscConfig+0x688>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0f0      	beq.n	8009c74 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d102      	bne.n	8009ca0 <HAL_RCC_OscConfig+0x42c>
 8009c9a:	f7ff fb30 	bl	80092fe <LL_RCC_LSE_Enable>
 8009c9e:	e00c      	b.n	8009cba <HAL_RCC_OscConfig+0x446>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	2b05      	cmp	r3, #5
 8009ca6:	d104      	bne.n	8009cb2 <HAL_RCC_OscConfig+0x43e>
 8009ca8:	f7ff fb4b 	bl	8009342 <LL_RCC_LSE_EnableBypass>
 8009cac:	f7ff fb27 	bl	80092fe <LL_RCC_LSE_Enable>
 8009cb0:	e003      	b.n	8009cba <HAL_RCC_OscConfig+0x446>
 8009cb2:	f7ff fb35 	bl	8009320 <LL_RCC_LSE_Disable>
 8009cb6:	f7ff fb55 	bl	8009364 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d014      	beq.n	8009cec <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cc2:	f7fe f8ab 	bl	8007e1c <HAL_GetTick>
 8009cc6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009cc8:	e00a      	b.n	8009ce0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cca:	f7fe f8a7 	bl	8007e1c <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d901      	bls.n	8009ce0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e136      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009ce0:	f7ff fb51 	bl	8009386 <LL_RCC_LSE_IsReady>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0ef      	beq.n	8009cca <HAL_RCC_OscConfig+0x456>
 8009cea:	e013      	b.n	8009d14 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cec:	f7fe f896 	bl	8007e1c <HAL_GetTick>
 8009cf0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8009cf2:	e00a      	b.n	8009d0a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cf4:	f7fe f892 	bl	8007e1c <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d901      	bls.n	8009d0a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8009d06:	2303      	movs	r3, #3
 8009d08:	e121      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8009d0a:	f7ff fb3c 	bl	8009386 <LL_RCC_LSE_IsReady>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1ef      	bne.n	8009cf4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d02c      	beq.n	8009d7a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d014      	beq.n	8009d52 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d28:	f7ff fab5 	bl	8009296 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d2c:	f7fe f876 	bl	8007e1c <HAL_GetTick>
 8009d30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009d32:	e008      	b.n	8009d46 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d34:	f7fe f872 	bl	8007e1c <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d901      	bls.n	8009d46 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e103      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009d46:	f7ff fac8 	bl	80092da <LL_RCC_HSI48_IsReady>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0f1      	beq.n	8009d34 <HAL_RCC_OscConfig+0x4c0>
 8009d50:	e013      	b.n	8009d7a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d52:	f7ff fab1 	bl	80092b8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d56:	f7fe f861 	bl	8007e1c <HAL_GetTick>
 8009d5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009d5c:	e008      	b.n	8009d70 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d5e:	f7fe f85d 	bl	8007e1c <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d901      	bls.n	8009d70 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e0ee      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009d70:	f7ff fab3 	bl	80092da <LL_RCC_HSI48_IsReady>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1f1      	bne.n	8009d5e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f000 80e4 	beq.w	8009f4c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d84:	f7ff fc11 	bl	80095aa <LL_RCC_GetSysClkSource>
 8009d88:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8009d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	f040 80b4 	bne.w	8009f04 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f003 0203 	and.w	r2, r3, #3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d123      	bne.n	8009df2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d11c      	bne.n	8009df2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	0a1b      	lsrs	r3, r3, #8
 8009dbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d114      	bne.n	8009df2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d10d      	bne.n	8009df2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d106      	bne.n	8009df2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d05d      	beq.n	8009eae <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	2b0c      	cmp	r3, #12
 8009df6:	d058      	beq.n	8009eaa <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e0a1      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009e0a:	f7ff fc84 	bl	8009716 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009e0e:	f7fe f805 	bl	8007e1c <HAL_GetTick>
 8009e12:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e14:	e008      	b.n	8009e28 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e16:	f7fe f801 	bl	8007e1c <HAL_GetTick>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d901      	bls.n	8009e28 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e092      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1ef      	bne.n	8009e16 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009e3a:	68da      	ldr	r2, [r3, #12]
 8009e3c:	4b30      	ldr	r3, [pc, #192]	@ (8009f00 <HAL_RCC_OscConfig+0x68c>)
 8009e3e:	4013      	ands	r3, r2
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009e48:	4311      	orrs	r1, r2
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009e4e:	0212      	lsls	r2, r2, #8
 8009e50:	4311      	orrs	r1, r2
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009e56:	4311      	orrs	r1, r2
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009e5c:	4311      	orrs	r1, r2
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8009e62:	430a      	orrs	r2, r1
 8009e64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009e68:	4313      	orrs	r3, r2
 8009e6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009e6c:	f7ff fc44 	bl	80096f8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009e80:	f7fd ffcc 	bl	8007e1c <HAL_GetTick>
 8009e84:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e86:	e008      	b.n	8009e9a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e88:	f7fd ffc8 	bl	8007e1c <HAL_GetTick>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d901      	bls.n	8009e9a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8009e96:	2303      	movs	r3, #3
 8009e98:	e059      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d0ef      	beq.n	8009e88 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ea8:	e050      	b.n	8009f4c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e04f      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d147      	bne.n	8009f4c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009ebc:	f7ff fc1c 	bl	80096f8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009eca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ece:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009ed0:	f7fd ffa4 	bl	8007e1c <HAL_GetTick>
 8009ed4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ed6:	e008      	b.n	8009eea <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ed8:	f7fd ffa0 	bl	8007e1c <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d901      	bls.n	8009eea <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e031      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d0ef      	beq.n	8009ed8 <HAL_RCC_OscConfig+0x664>
 8009ef8:	e028      	b.n	8009f4c <HAL_RCC_OscConfig+0x6d8>
 8009efa:	bf00      	nop
 8009efc:	58000400 	.word	0x58000400
 8009f00:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	2b0c      	cmp	r3, #12
 8009f08:	d01e      	beq.n	8009f48 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f0a:	f7ff fc04 	bl	8009716 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f0e:	f7fd ff85 	bl	8007e1c <HAL_GetTick>
 8009f12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f14:	e008      	b.n	8009f28 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f16:	f7fd ff81 	bl	8007e1c <HAL_GetTick>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d901      	bls.n	8009f28 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e012      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1ef      	bne.n	8009f16 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8009f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009f3a:	68da      	ldr	r2, [r3, #12]
 8009f3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009f40:	4b05      	ldr	r3, [pc, #20]	@ (8009f58 <HAL_RCC_OscConfig+0x6e4>)
 8009f42:	4013      	ands	r3, r2
 8009f44:	60cb      	str	r3, [r1, #12]
 8009f46:	e001      	b.n	8009f4c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e000      	b.n	8009f4e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3734      	adds	r7, #52	@ 0x34
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd90      	pop	{r4, r7, pc}
 8009f56:	bf00      	nop
 8009f58:	eefefffc 	.word	0xeefefffc

08009f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d101      	bne.n	8009f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e12d      	b.n	800a1cc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f70:	4b98      	ldr	r3, [pc, #608]	@ (800a1d4 <HAL_RCC_ClockConfig+0x278>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 0307 	and.w	r3, r3, #7
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d91b      	bls.n	8009fb6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f7e:	4b95      	ldr	r3, [pc, #596]	@ (800a1d4 <HAL_RCC_ClockConfig+0x278>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f023 0207 	bic.w	r2, r3, #7
 8009f86:	4993      	ldr	r1, [pc, #588]	@ (800a1d4 <HAL_RCC_ClockConfig+0x278>)
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f8e:	f7fd ff45 	bl	8007e1c <HAL_GetTick>
 8009f92:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f94:	e008      	b.n	8009fa8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009f96:	f7fd ff41 	bl	8007e1c <HAL_GetTick>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d901      	bls.n	8009fa8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	e111      	b.n	800a1cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fa8:	4b8a      	ldr	r3, [pc, #552]	@ (800a1d4 <HAL_RCC_ClockConfig+0x278>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0307 	and.w	r3, r3, #7
 8009fb0:	683a      	ldr	r2, [r7, #0]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d1ef      	bne.n	8009f96 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 0302 	and.w	r3, r3, #2
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d016      	beq.n	8009ff0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7ff fafb 	bl	80095c2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009fcc:	f7fd ff26 	bl	8007e1c <HAL_GetTick>
 8009fd0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009fd2:	e008      	b.n	8009fe6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009fd4:	f7fd ff22 	bl	8007e1c <HAL_GetTick>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d901      	bls.n	8009fe6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	e0f2      	b.n	800a1cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009fe6:	f7ff fbe8 	bl	80097ba <LL_RCC_IsActiveFlag_HPRE>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d0f1      	beq.n	8009fd4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0320 	and.w	r3, r3, #32
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d016      	beq.n	800a02a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	695b      	ldr	r3, [r3, #20]
 800a000:	4618      	mov	r0, r3
 800a002:	f7ff faf2 	bl	80095ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a006:	f7fd ff09 	bl	8007e1c <HAL_GetTick>
 800a00a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800a00c:	e008      	b.n	800a020 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a00e:	f7fd ff05 	bl	8007e1c <HAL_GetTick>
 800a012:	4602      	mov	r2, r0
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d901      	bls.n	800a020 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e0d5      	b.n	800a1cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800a020:	f7ff fbdd 	bl	80097de <LL_RCC_IsActiveFlag_C2HPRE>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d0f1      	beq.n	800a00e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a032:	2b00      	cmp	r3, #0
 800a034:	d016      	beq.n	800a064 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7ff faeb 	bl	8009616 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a040:	f7fd feec 	bl	8007e1c <HAL_GetTick>
 800a044:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800a046:	e008      	b.n	800a05a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a048:	f7fd fee8 	bl	8007e1c <HAL_GetTick>
 800a04c:	4602      	mov	r2, r0
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	2b02      	cmp	r3, #2
 800a054:	d901      	bls.n	800a05a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e0b8      	b.n	800a1cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800a05a:	f7ff fbd3 	bl	8009804 <LL_RCC_IsActiveFlag_SHDHPRE>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d0f1      	beq.n	800a048 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0304 	and.w	r3, r3, #4
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d016      	beq.n	800a09e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	4618      	mov	r0, r3
 800a076:	f7ff fae5 	bl	8009644 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a07a:	f7fd fecf 	bl	8007e1c <HAL_GetTick>
 800a07e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800a080:	e008      	b.n	800a094 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a082:	f7fd fecb 	bl	8007e1c <HAL_GetTick>
 800a086:	4602      	mov	r2, r0
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d901      	bls.n	800a094 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800a090:	2303      	movs	r3, #3
 800a092:	e09b      	b.n	800a1cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800a094:	f7ff fbc9 	bl	800982a <LL_RCC_IsActiveFlag_PPRE1>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d0f1      	beq.n	800a082 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 0308 	and.w	r3, r3, #8
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d017      	beq.n	800a0da <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	00db      	lsls	r3, r3, #3
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7ff fadb 	bl	800966c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a0b6:	f7fd feb1 	bl	8007e1c <HAL_GetTick>
 800a0ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a0bc:	e008      	b.n	800a0d0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a0be:	f7fd fead 	bl	8007e1c <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d901      	bls.n	800a0d0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e07d      	b.n	800a1cc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a0d0:	f7ff fbbd 	bl	800984e <LL_RCC_IsActiveFlag_PPRE2>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d0f1      	beq.n	800a0be <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0301 	and.w	r3, r3, #1
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d043      	beq.n	800a16e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d106      	bne.n	800a0fc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800a0ee:	f7ff f87b 	bl	80091e8 <LL_RCC_HSE_IsReady>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d11e      	bne.n	800a136 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e067      	b.n	800a1cc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	2b03      	cmp	r3, #3
 800a102:	d106      	bne.n	800a112 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800a104:	f7ff fb16 	bl	8009734 <LL_RCC_PLL_IsReady>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d113      	bne.n	800a136 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e05c      	b.n	800a1cc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d106      	bne.n	800a128 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800a11a:	f7ff f9e3 	bl	80094e4 <LL_RCC_MSI_IsReady>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d108      	bne.n	800a136 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e051      	b.n	800a1cc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800a128:	f7ff f88e 	bl	8009248 <LL_RCC_HSI_IsReady>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d101      	bne.n	800a136 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e04a      	b.n	800a1cc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7ff fa21 	bl	8009582 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a140:	f7fd fe6c 	bl	8007e1c <HAL_GetTick>
 800a144:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a146:	e00a      	b.n	800a15e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a148:	f7fd fe68 	bl	8007e1c <HAL_GetTick>
 800a14c:	4602      	mov	r2, r0
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a156:	4293      	cmp	r3, r2
 800a158:	d901      	bls.n	800a15e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800a15a:	2303      	movs	r3, #3
 800a15c:	e036      	b.n	800a1cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a15e:	f7ff fa24 	bl	80095aa <LL_RCC_GetSysClkSource>
 800a162:	4602      	mov	r2, r0
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d1ec      	bne.n	800a148 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a16e:	4b19      	ldr	r3, [pc, #100]	@ (800a1d4 <HAL_RCC_ClockConfig+0x278>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0307 	and.w	r3, r3, #7
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d21b      	bcs.n	800a1b4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a17c:	4b15      	ldr	r3, [pc, #84]	@ (800a1d4 <HAL_RCC_ClockConfig+0x278>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f023 0207 	bic.w	r2, r3, #7
 800a184:	4913      	ldr	r1, [pc, #76]	@ (800a1d4 <HAL_RCC_ClockConfig+0x278>)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	4313      	orrs	r3, r2
 800a18a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a18c:	f7fd fe46 	bl	8007e1c <HAL_GetTick>
 800a190:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a192:	e008      	b.n	800a1a6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a194:	f7fd fe42 	bl	8007e1c <HAL_GetTick>
 800a198:	4602      	mov	r2, r0
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d901      	bls.n	800a1a6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e012      	b.n	800a1cc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a1d4 <HAL_RCC_ClockConfig+0x278>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0307 	and.w	r3, r3, #7
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d1ef      	bne.n	800a194 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a1b4:	f000 f87e 	bl	800a2b4 <HAL_RCC_GetHCLKFreq>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	4a07      	ldr	r2, [pc, #28]	@ (800a1d8 <HAL_RCC_ClockConfig+0x27c>)
 800a1bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800a1be:	f7fd fe39 	bl	8007e34 <HAL_GetTickPrio>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7fd fddb 	bl	8007d80 <HAL_InitTick>
 800a1ca:	4603      	mov	r3, r0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	58004000 	.word	0x58004000
 800a1d8:	20000098 	.word	0x20000098

0800a1dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1dc:	b590      	push	{r4, r7, lr}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1e2:	f7ff f9e2 	bl	80095aa <LL_RCC_GetSysClkSource>
 800a1e6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d10a      	bne.n	800a204 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a1ee:	f7ff f99e 	bl	800952e <LL_RCC_MSI_GetRange>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	091b      	lsrs	r3, r3, #4
 800a1f6:	f003 030f 	and.w	r3, r3, #15
 800a1fa:	4a2b      	ldr	r2, [pc, #172]	@ (800a2a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a1fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a200:	60fb      	str	r3, [r7, #12]
 800a202:	e04b      	b.n	800a29c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b04      	cmp	r3, #4
 800a208:	d102      	bne.n	800a210 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a20a:	4b28      	ldr	r3, [pc, #160]	@ (800a2ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800a20c:	60fb      	str	r3, [r7, #12]
 800a20e:	e045      	b.n	800a29c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b08      	cmp	r3, #8
 800a214:	d10a      	bne.n	800a22c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a216:	f7fe ffb7 	bl	8009188 <LL_RCC_HSE_IsEnabledDiv2>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d102      	bne.n	800a226 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800a220:	4b22      	ldr	r3, [pc, #136]	@ (800a2ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	e03a      	b.n	800a29c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800a226:	4b22      	ldr	r3, [pc, #136]	@ (800a2b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a228:	60fb      	str	r3, [r7, #12]
 800a22a:	e037      	b.n	800a29c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800a22c:	f7ff fab9 	bl	80097a2 <LL_RCC_PLL_GetMainSource>
 800a230:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2b02      	cmp	r3, #2
 800a236:	d003      	beq.n	800a240 <HAL_RCC_GetSysClockFreq+0x64>
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d003      	beq.n	800a246 <HAL_RCC_GetSysClockFreq+0x6a>
 800a23e:	e00d      	b.n	800a25c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800a240:	4b1a      	ldr	r3, [pc, #104]	@ (800a2ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800a242:	60bb      	str	r3, [r7, #8]
        break;
 800a244:	e015      	b.n	800a272 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a246:	f7fe ff9f 	bl	8009188 <LL_RCC_HSE_IsEnabledDiv2>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d102      	bne.n	800a256 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800a250:	4b16      	ldr	r3, [pc, #88]	@ (800a2ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800a252:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800a254:	e00d      	b.n	800a272 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800a256:	4b16      	ldr	r3, [pc, #88]	@ (800a2b0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800a258:	60bb      	str	r3, [r7, #8]
        break;
 800a25a:	e00a      	b.n	800a272 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a25c:	f7ff f967 	bl	800952e <LL_RCC_MSI_GetRange>
 800a260:	4603      	mov	r3, r0
 800a262:	091b      	lsrs	r3, r3, #4
 800a264:	f003 030f 	and.w	r3, r3, #15
 800a268:	4a0f      	ldr	r2, [pc, #60]	@ (800a2a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a26a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a26e:	60bb      	str	r3, [r7, #8]
        break;
 800a270:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800a272:	f7ff fa71 	bl	8009758 <LL_RCC_PLL_GetN>
 800a276:	4602      	mov	r2, r0
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	fb03 f402 	mul.w	r4, r3, r2
 800a27e:	f7ff fa84 	bl	800978a <LL_RCC_PLL_GetDivider>
 800a282:	4603      	mov	r3, r0
 800a284:	091b      	lsrs	r3, r3, #4
 800a286:	3301      	adds	r3, #1
 800a288:	fbb4 f4f3 	udiv	r4, r4, r3
 800a28c:	f7ff fa71 	bl	8009772 <LL_RCC_PLL_GetR>
 800a290:	4603      	mov	r3, r0
 800a292:	0f5b      	lsrs	r3, r3, #29
 800a294:	3301      	adds	r3, #1
 800a296:	fbb4 f3f3 	udiv	r3, r4, r3
 800a29a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800a29c:	68fb      	ldr	r3, [r7, #12]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3714      	adds	r7, #20
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd90      	pop	{r4, r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	08030ab8 	.word	0x08030ab8
 800a2ac:	00f42400 	.word	0x00f42400
 800a2b0:	01e84800 	.word	0x01e84800

0800a2b4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2b4:	b598      	push	{r3, r4, r7, lr}
 800a2b6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800a2b8:	f7ff ff90 	bl	800a1dc <HAL_RCC_GetSysClockFreq>
 800a2bc:	4604      	mov	r4, r0
 800a2be:	f7ff f9e9 	bl	8009694 <LL_RCC_GetAHBPrescaler>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	091b      	lsrs	r3, r3, #4
 800a2c6:	f003 030f 	and.w	r3, r3, #15
 800a2ca:	4a03      	ldr	r2, [pc, #12]	@ (800a2d8 <HAL_RCC_GetHCLKFreq+0x24>)
 800a2cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2d0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	bd98      	pop	{r3, r4, r7, pc}
 800a2d8:	08030a58 	.word	0x08030a58

0800a2dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a2dc:	b598      	push	{r3, r4, r7, lr}
 800a2de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a2e0:	f7ff ffe8 	bl	800a2b4 <HAL_RCC_GetHCLKFreq>
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	f7ff f9ef 	bl	80096c8 <LL_RCC_GetAPB1Prescaler>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	0a1b      	lsrs	r3, r3, #8
 800a2ee:	f003 0307 	and.w	r3, r3, #7
 800a2f2:	4a04      	ldr	r2, [pc, #16]	@ (800a304 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a2f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2f8:	f003 031f 	and.w	r3, r3, #31
 800a2fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a300:	4618      	mov	r0, r3
 800a302:	bd98      	pop	{r3, r4, r7, pc}
 800a304:	08030a98 	.word	0x08030a98

0800a308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a308:	b598      	push	{r3, r4, r7, lr}
 800a30a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800a30c:	f7ff ffd2 	bl	800a2b4 <HAL_RCC_GetHCLKFreq>
 800a310:	4604      	mov	r4, r0
 800a312:	f7ff f9e5 	bl	80096e0 <LL_RCC_GetAPB2Prescaler>
 800a316:	4603      	mov	r3, r0
 800a318:	0adb      	lsrs	r3, r3, #11
 800a31a:	f003 0307 	and.w	r3, r3, #7
 800a31e:	4a04      	ldr	r2, [pc, #16]	@ (800a330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a324:	f003 031f 	and.w	r3, r3, #31
 800a328:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	bd98      	pop	{r3, r4, r7, pc}
 800a330:	08030a98 	.word	0x08030a98

0800a334 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800a334:	b590      	push	{r4, r7, lr}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2bb0      	cmp	r3, #176	@ 0xb0
 800a340:	d903      	bls.n	800a34a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800a342:	4b15      	ldr	r3, [pc, #84]	@ (800a398 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	e007      	b.n	800a35a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	091b      	lsrs	r3, r3, #4
 800a34e:	f003 030f 	and.w	r3, r3, #15
 800a352:	4a11      	ldr	r2, [pc, #68]	@ (800a398 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a358:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800a35a:	f7ff f9a7 	bl	80096ac <LL_RCC_GetAHB4Prescaler>
 800a35e:	4603      	mov	r3, r0
 800a360:	091b      	lsrs	r3, r3, #4
 800a362:	f003 030f 	and.w	r3, r3, #15
 800a366:	4a0d      	ldr	r2, [pc, #52]	@ (800a39c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800a368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a372:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	4a0a      	ldr	r2, [pc, #40]	@ (800a3a0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800a378:	fba2 2303 	umull	r2, r3, r2, r3
 800a37c:	0c9c      	lsrs	r4, r3, #18
 800a37e:	f7fe fef5 	bl	800916c <HAL_PWREx_GetVoltageRange>
 800a382:	4603      	mov	r3, r0
 800a384:	4619      	mov	r1, r3
 800a386:	4620      	mov	r0, r4
 800a388:	f000 f80c 	bl	800a3a4 <RCC_SetFlashLatency>
 800a38c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3714      	adds	r7, #20
 800a392:	46bd      	mov	sp, r7
 800a394:	bd90      	pop	{r4, r7, pc}
 800a396:	bf00      	nop
 800a398:	08030ab8 	.word	0x08030ab8
 800a39c:	08030a58 	.word	0x08030a58
 800a3a0:	431bde83 	.word	0x431bde83

0800a3a4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800a3a4:	b590      	push	{r4, r7, lr}
 800a3a6:	b093      	sub	sp, #76	@ 0x4c
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800a3ae:	4b37      	ldr	r3, [pc, #220]	@ (800a48c <RCC_SetFlashLatency+0xe8>)
 800a3b0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800a3b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a3b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800a3ba:	4a35      	ldr	r2, [pc, #212]	@ (800a490 <RCC_SetFlashLatency+0xec>)
 800a3bc:	f107 031c 	add.w	r3, r7, #28
 800a3c0:	ca07      	ldmia	r2, {r0, r1, r2}
 800a3c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800a3c6:	4b33      	ldr	r3, [pc, #204]	@ (800a494 <RCC_SetFlashLatency+0xf0>)
 800a3c8:	f107 040c 	add.w	r4, r7, #12
 800a3cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a3ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3dc:	d11a      	bne.n	800a414 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a3de:	2300      	movs	r3, #0
 800a3e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3e2:	e013      	b.n	800a40c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800a3e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	3348      	adds	r3, #72	@ 0x48
 800a3ea:	443b      	add	r3, r7
 800a3ec:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d807      	bhi.n	800a406 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a3f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	3348      	adds	r3, #72	@ 0x48
 800a3fc:	443b      	add	r3, r7
 800a3fe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a402:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800a404:	e020      	b.n	800a448 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a408:	3301      	adds	r3, #1
 800a40a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a40c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a40e:	2b03      	cmp	r3, #3
 800a410:	d9e8      	bls.n	800a3e4 <RCC_SetFlashLatency+0x40>
 800a412:	e019      	b.n	800a448 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a414:	2300      	movs	r3, #0
 800a416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a418:	e013      	b.n	800a442 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800a41a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	3348      	adds	r3, #72	@ 0x48
 800a420:	443b      	add	r3, r7
 800a422:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d807      	bhi.n	800a43c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a42c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	3348      	adds	r3, #72	@ 0x48
 800a432:	443b      	add	r3, r7
 800a434:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a438:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800a43a:	e005      	b.n	800a448 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a43c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a43e:	3301      	adds	r3, #1
 800a440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a444:	2b02      	cmp	r3, #2
 800a446:	d9e8      	bls.n	800a41a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800a448:	4b13      	ldr	r3, [pc, #76]	@ (800a498 <RCC_SetFlashLatency+0xf4>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f023 0207 	bic.w	r2, r3, #7
 800a450:	4911      	ldr	r1, [pc, #68]	@ (800a498 <RCC_SetFlashLatency+0xf4>)
 800a452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a454:	4313      	orrs	r3, r2
 800a456:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a458:	f7fd fce0 	bl	8007e1c <HAL_GetTick>
 800a45c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a45e:	e008      	b.n	800a472 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a460:	f7fd fcdc 	bl	8007e1c <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d901      	bls.n	800a472 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800a46e:	2303      	movs	r3, #3
 800a470:	e007      	b.n	800a482 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a472:	4b09      	ldr	r3, [pc, #36]	@ (800a498 <RCC_SetFlashLatency+0xf4>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0307 	and.w	r3, r3, #7
 800a47a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d1ef      	bne.n	800a460 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	374c      	adds	r7, #76	@ 0x4c
 800a486:	46bd      	mov	sp, r7
 800a488:	bd90      	pop	{r4, r7, pc}
 800a48a:	bf00      	nop
 800a48c:	0802e694 	.word	0x0802e694
 800a490:	0802e6a4 	.word	0x0802e6a4
 800a494:	0802e6b0 	.word	0x0802e6b0
 800a498:	58004000 	.word	0x58004000

0800a49c <LL_RCC_LSE_IsEnabled>:
{
 800a49c:	b480      	push	{r7}
 800a49e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800a4a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d101      	bne.n	800a4b4 <LL_RCC_LSE_IsEnabled+0x18>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e000      	b.n	800a4b6 <LL_RCC_LSE_IsEnabled+0x1a>
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <LL_RCC_LSE_IsReady>:
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a4c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4cc:	f003 0302 	and.w	r3, r3, #2
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d101      	bne.n	800a4d8 <LL_RCC_LSE_IsReady+0x18>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e000      	b.n	800a4da <LL_RCC_LSE_IsReady+0x1a>
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <LL_RCC_SetRFWKPClockSource>:
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800a4ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a4f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <LL_RCC_SetSMPSClockSource>:
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800a518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a51e:	f023 0203 	bic.w	r2, r3, #3
 800a522:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4313      	orrs	r3, r2
 800a52a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <LL_RCC_SetSMPSPrescaler>:
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800a540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a546:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a54a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4313      	orrs	r3, r2
 800a552:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <LL_RCC_SetUSARTClockSource>:
{
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800a568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a570:	f023 0203 	bic.w	r2, r3, #3
 800a574:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <LL_RCC_SetLPUARTClockSource>:
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800a594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a59c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a5a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <LL_RCC_SetI2CClockSource>:
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a5c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	091b      	lsrs	r3, r3, #4
 800a5cc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800a5d0:	43db      	mvns	r3, r3
 800a5d2:	401a      	ands	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	011b      	lsls	r3, r3, #4
 800a5d8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800a5dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a5e6:	bf00      	nop
 800a5e8:	370c      	adds	r7, #12
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <LL_RCC_SetLPTIMClockSource>:
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b083      	sub	sp, #12
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800a5fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	0c1b      	lsrs	r3, r3, #16
 800a606:	041b      	lsls	r3, r3, #16
 800a608:	43db      	mvns	r3, r3
 800a60a:	401a      	ands	r2, r3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	041b      	lsls	r3, r3, #16
 800a610:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a614:	4313      	orrs	r3, r2
 800a616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a61a:	bf00      	nop
 800a61c:	370c      	adds	r7, #12
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <LL_RCC_SetSAIClockSource>:
{
 800a626:	b480      	push	{r7}
 800a628:	b083      	sub	sp, #12
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800a62e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a636:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a63a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4313      	orrs	r3, r2
 800a642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a646:	bf00      	nop
 800a648:	370c      	adds	r7, #12
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr

0800a652 <LL_RCC_SetRNGClockSource>:
{
 800a652:	b480      	push	{r7}
 800a654:	b083      	sub	sp, #12
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800a65a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a65e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a662:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a666:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a672:	bf00      	nop
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <LL_RCC_SetCLK48ClockSource>:
{
 800a67e:	b480      	push	{r7}
 800a680:	b083      	sub	sp, #12
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800a686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a68a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a68e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a692:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4313      	orrs	r3, r2
 800a69a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a69e:	bf00      	nop
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <LL_RCC_SetUSBClockSource>:
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b082      	sub	sp, #8
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7ff ffe3 	bl	800a67e <LL_RCC_SetCLK48ClockSource>
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <LL_RCC_SetADCClockSource>:
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800a6c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6d0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a6d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <LL_RCC_SetRTCClockSource>:
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a6f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a6fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a700:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4313      	orrs	r3, r2
 800a708:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <LL_RCC_GetRTCClockSource>:
{
 800a718:	b480      	push	{r7}
 800a71a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800a71c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a724:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800a728:	4618      	mov	r0, r3
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <LL_RCC_ForceBackupDomainReset>:
{
 800a732:	b480      	push	{r7}
 800a734:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a73a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a73e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a746:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a74a:	bf00      	nop
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <LL_RCC_ReleaseBackupDomainReset>:
{
 800a754:	b480      	push	{r7}
 800a756:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a75c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a760:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a76c:	bf00      	nop
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <LL_RCC_PLLSAI1_Enable>:
{
 800a776:	b480      	push	{r7}
 800a778:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a77a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a784:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a788:	6013      	str	r3, [r2, #0]
}
 800a78a:	bf00      	nop
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <LL_RCC_PLLSAI1_Disable>:
{
 800a794:	b480      	push	{r7}
 800a796:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a7a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a7a6:	6013      	str	r3, [r2, #0]
}
 800a7a8:	bf00      	nop
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <LL_RCC_PLLSAI1_IsReady>:
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800a7b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7c4:	d101      	bne.n	800a7ca <LL_RCC_PLLSAI1_IsReady+0x18>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e000      	b.n	800a7cc <LL_RCC_PLLSAI1_IsReady+0x1a>
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr

0800a7d6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b088      	sub	sp, #32
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800a7de:	2300      	movs	r3, #0
 800a7e0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d034      	beq.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a7fa:	d021      	beq.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a7fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a800:	d81b      	bhi.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a802:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a806:	d01d      	beq.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a808:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a80c:	d815      	bhi.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00b      	beq.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x54>
 800a812:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a816:	d110      	bne.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800a818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a826:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800a828:	e00d      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	3304      	adds	r3, #4
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 f947 	bl	800aac2 <RCCEx_PLLSAI1_ConfigNP>
 800a834:	4603      	mov	r3, r0
 800a836:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a838:	e005      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	77fb      	strb	r3, [r7, #31]
        break;
 800a83e:	e002      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a840:	bf00      	nop
 800a842:	e000      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a844:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a846:	7ffb      	ldrb	r3, [r7, #31]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d105      	bne.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a850:	4618      	mov	r0, r3
 800a852:	f7ff fee8 	bl	800a626 <LL_RCC_SetSAIClockSource>
 800a856:	e001      	b.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a858:	7ffb      	ldrb	r3, [r7, #31]
 800a85a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a864:	2b00      	cmp	r3, #0
 800a866:	d046      	beq.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800a868:	f7ff ff56 	bl	800a718 <LL_RCC_GetRTCClockSource>
 800a86c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a872:	69ba      	ldr	r2, [r7, #24]
 800a874:	429a      	cmp	r2, r3
 800a876:	d03c      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a878:	f7fe fc68 	bl	800914c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800a87c:	69bb      	ldr	r3, [r7, #24]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d105      	bne.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff ff30 	bl	800a6ec <LL_RCC_SetRTCClockSource>
 800a88c:	e02e      	b.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800a88e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a896:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800a898:	f7ff ff4b 	bl	800a732 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800a89c:	f7ff ff5a 	bl	800a754 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800a8ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800a8b8:	f7ff fdf0 	bl	800a49c <LL_RCC_LSE_IsEnabled>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d114      	bne.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a8c2:	f7fd faab 	bl	8007e1c <HAL_GetTick>
 800a8c6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800a8c8:	e00b      	b.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8ca:	f7fd faa7 	bl	8007e1c <HAL_GetTick>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d902      	bls.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	77fb      	strb	r3, [r7, #31]
              break;
 800a8e0:	e004      	b.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800a8e2:	f7ff fded 	bl	800a4c0 <LL_RCC_LSE_IsReady>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d1ee      	bne.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800a8ec:	7ffb      	ldrb	r3, [r7, #31]
 800a8ee:	77bb      	strb	r3, [r7, #30]
 800a8f0:	e001      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8f2:	7ffb      	ldrb	r3, [r7, #31]
 800a8f4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d004      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	4618      	mov	r0, r3
 800a908:	f7ff fe2a 	bl	800a560 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 0302 	and.w	r3, r3, #2
 800a914:	2b00      	cmp	r3, #0
 800a916:	d004      	beq.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	69db      	ldr	r3, [r3, #28]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7ff fe35 	bl	800a58c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f003 0310 	and.w	r3, r3, #16
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d004      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a932:	4618      	mov	r0, r3
 800a934:	f7ff fe5d 	bl	800a5f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 0320 	and.w	r3, r3, #32
 800a940:	2b00      	cmp	r3, #0
 800a942:	d004      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a948:	4618      	mov	r0, r3
 800a94a:	f7ff fe52 	bl	800a5f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 0304 	and.w	r3, r3, #4
 800a956:	2b00      	cmp	r3, #0
 800a958:	d004      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a1b      	ldr	r3, [r3, #32]
 800a95e:	4618      	mov	r0, r3
 800a960:	f7ff fe2a 	bl	800a5b8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 0308 	and.w	r3, r3, #8
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d004      	beq.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a974:	4618      	mov	r0, r3
 800a976:	f7ff fe1f 	bl	800a5b8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a982:	2b00      	cmp	r3, #0
 800a984:	d022      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7ff fe8d 	bl	800a6aa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a994:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a998:	d107      	bne.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800a99a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a9a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a9a8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a9b2:	d10b      	bne.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 f8dd 	bl	800ab78 <RCCEx_PLLSAI1_ConfigNQ>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800a9c2:	7ffb      	ldrb	r3, [r7, #31]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d001      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800a9c8:	7ffb      	ldrb	r3, [r7, #31]
 800a9ca:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d02b      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9e0:	d008      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9ea:	d003      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d105      	bne.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7ff fe2a 	bl	800a652 <LL_RCC_SetRNGClockSource>
 800a9fe:	e00a      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa08:	60fb      	str	r3, [r7, #12]
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	f7ff fe21 	bl	800a652 <LL_RCC_SetRNGClockSource>
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f7ff fe34 	bl	800a67e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa1a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800aa1e:	d107      	bne.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800aa20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aa2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d022      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7ff fe3d 	bl	800a6c0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa4e:	d107      	bne.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800aa50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa5e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa68:	d10b      	bne.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	3304      	adds	r3, #4
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f000 f8dd 	bl	800ac2e <RCCEx_PLLSAI1_ConfigNR>
 800aa74:	4603      	mov	r3, r0
 800aa76:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800aa78:	7ffb      	ldrb	r3, [r7, #31]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d001      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800aa7e:	7ffb      	ldrb	r3, [r7, #31]
 800aa80:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d004      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff fd26 	bl	800a4e4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d009      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7ff fd45 	bl	800a538 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7ff fd2c 	bl	800a510 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800aab8:	7fbb      	ldrb	r3, [r7, #30]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3720      	adds	r7, #32
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800aace:	f7ff fe61 	bl	800a794 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800aad2:	f7fd f9a3 	bl	8007e1c <HAL_GetTick>
 800aad6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aad8:	e009      	b.n	800aaee <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aada:	f7fd f99f 	bl	8007e1c <HAL_GetTick>
 800aade:	4602      	mov	r2, r0
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d902      	bls.n	800aaee <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800aae8:	2303      	movs	r3, #3
 800aaea:	73fb      	strb	r3, [r7, #15]
      break;
 800aaec:	e004      	b.n	800aaf8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aaee:	f7ff fe60 	bl	800a7b2 <LL_RCC_PLLSAI1_IsReady>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1f0      	bne.n	800aada <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800aaf8:	7bfb      	ldrb	r3, [r7, #15]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d137      	bne.n	800ab6e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800aafe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	021b      	lsls	r3, r3, #8
 800ab0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ab12:	4313      	orrs	r3, r2
 800ab14:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800ab16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab1a:	691b      	ldr	r3, [r3, #16]
 800ab1c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ab2c:	f7ff fe23 	bl	800a776 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab30:	f7fd f974 	bl	8007e1c <HAL_GetTick>
 800ab34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ab36:	e009      	b.n	800ab4c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ab38:	f7fd f970 	bl	8007e1c <HAL_GetTick>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	2b02      	cmp	r3, #2
 800ab44:	d902      	bls.n	800ab4c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800ab46:	2303      	movs	r3, #3
 800ab48:	73fb      	strb	r3, [r7, #15]
        break;
 800ab4a:	e004      	b.n	800ab56 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ab4c:	f7ff fe31 	bl	800a7b2 <LL_RCC_PLLSAI1_IsReady>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d1f0      	bne.n	800ab38 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800ab56:	7bfb      	ldrb	r3, [r7, #15]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d108      	bne.n	800ab6e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ab5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab60:	691a      	ldr	r2, [r3, #16]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ab6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab80:	2300      	movs	r3, #0
 800ab82:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ab84:	f7ff fe06 	bl	800a794 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ab88:	f7fd f948 	bl	8007e1c <HAL_GetTick>
 800ab8c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ab8e:	e009      	b.n	800aba4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ab90:	f7fd f944 	bl	8007e1c <HAL_GetTick>
 800ab94:	4602      	mov	r2, r0
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	1ad3      	subs	r3, r2, r3
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d902      	bls.n	800aba4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800ab9e:	2303      	movs	r3, #3
 800aba0:	73fb      	strb	r3, [r7, #15]
      break;
 800aba2:	e004      	b.n	800abae <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aba4:	f7ff fe05 	bl	800a7b2 <LL_RCC_PLLSAI1_IsReady>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1f0      	bne.n	800ab90 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d137      	bne.n	800ac24 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800abb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	021b      	lsls	r3, r3, #8
 800abc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800abc8:	4313      	orrs	r3, r2
 800abca:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800abcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800abde:	4313      	orrs	r3, r2
 800abe0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800abe2:	f7ff fdc8 	bl	800a776 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abe6:	f7fd f919 	bl	8007e1c <HAL_GetTick>
 800abea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800abec:	e009      	b.n	800ac02 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800abee:	f7fd f915 	bl	8007e1c <HAL_GetTick>
 800abf2:	4602      	mov	r2, r0
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	d902      	bls.n	800ac02 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800abfc:	2303      	movs	r3, #3
 800abfe:	73fb      	strb	r3, [r7, #15]
        break;
 800ac00:	e004      	b.n	800ac0c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ac02:	f7ff fdd6 	bl	800a7b2 <LL_RCC_PLLSAI1_IsReady>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d1f0      	bne.n	800abee <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d108      	bne.n	800ac24 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ac12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac16:	691a      	ldr	r2, [r3, #16]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ac20:	4313      	orrs	r3, r2
 800ac22:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ac24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ac3a:	f7ff fdab 	bl	800a794 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ac3e:	f7fd f8ed 	bl	8007e1c <HAL_GetTick>
 800ac42:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ac44:	e009      	b.n	800ac5a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ac46:	f7fd f8e9 	bl	8007e1c <HAL_GetTick>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d902      	bls.n	800ac5a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800ac54:	2303      	movs	r3, #3
 800ac56:	73fb      	strb	r3, [r7, #15]
      break;
 800ac58:	e004      	b.n	800ac64 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ac5a:	f7ff fdaa 	bl	800a7b2 <LL_RCC_PLLSAI1_IsReady>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1f0      	bne.n	800ac46 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d137      	bne.n	800acda <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ac6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	021b      	lsls	r3, r3, #8
 800ac7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800ac82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ac94:	4313      	orrs	r3, r2
 800ac96:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ac98:	f7ff fd6d 	bl	800a776 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac9c:	f7fd f8be 	bl	8007e1c <HAL_GetTick>
 800aca0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800aca2:	e009      	b.n	800acb8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aca4:	f7fd f8ba 	bl	8007e1c <HAL_GetTick>
 800aca8:	4602      	mov	r2, r0
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d902      	bls.n	800acb8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800acb2:	2303      	movs	r3, #3
 800acb4:	73fb      	strb	r3, [r7, #15]
        break;
 800acb6:	e004      	b.n	800acc2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800acb8:	f7ff fd7b 	bl	800a7b2 <LL_RCC_PLLSAI1_IsReady>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d1f0      	bne.n	800aca4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d108      	bne.n	800acda <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800acc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800accc:	691a      	ldr	r2, [r3, #16]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	691b      	ldr	r3, [r3, #16]
 800acd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800acd6:	4313      	orrs	r3, r2
 800acd8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800acda:	7bfb      	ldrb	r3, [r7, #15]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d101      	bne.n	800acf6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	e027      	b.n	800ad46 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	7a5b      	ldrb	r3, [r3, #9]
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d105      	bne.n	800ad0c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7f8 fafc 	bl	8003304 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2202      	movs	r2, #2
 800ad10:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f023 0120 	bic.w	r1, r3, #32
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685a      	ldr	r2, [r3, #4]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	430a      	orrs	r2, r1
 800ad26:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f042 0204 	orr.w	r2, r2, #4
 800ad36:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
	...

0800ad50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d101      	bne.n	800ad62 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e09f      	b.n	800aea2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d106      	bne.n	800ad7c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7f8 faee 	bl	8003358 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2202      	movs	r2, #2
 800ad80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ad84:	4b49      	ldr	r3, [pc, #292]	@ (800aeac <HAL_RTC_Init+0x15c>)
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	f003 0310 	and.w	r3, r3, #16
 800ad8c:	2b10      	cmp	r3, #16
 800ad8e:	d07e      	beq.n	800ae8e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	22ca      	movs	r2, #202	@ 0xca
 800ad96:	625a      	str	r2, [r3, #36]	@ 0x24
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2253      	movs	r2, #83	@ 0x53
 800ad9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f8ab 	bl	800aefc <RTC_EnterInitMode>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00a      	beq.n	800adc2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	22ff      	movs	r2, #255	@ 0xff
 800adb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2204      	movs	r2, #4
 800adb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	73fb      	strb	r3, [r7, #15]
 800adc0:	e067      	b.n	800ae92 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	6812      	ldr	r2, [r2, #0]
 800adcc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800add0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800add4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	6899      	ldr	r1, [r3, #8]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	431a      	orrs	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	431a      	orrs	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	430a      	orrs	r2, r1
 800adf2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	68d2      	ldr	r2, [r2, #12]
 800adfc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	6919      	ldr	r1, [r3, #16]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	041a      	lsls	r2, r3, #16
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	430a      	orrs	r2, r1
 800ae10:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68da      	ldr	r2, [r3, #12]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ae20:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f022 0203 	bic.w	r2, r2, #3
 800ae30:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	69da      	ldr	r2, [r3, #28]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	695b      	ldr	r3, [r3, #20]
 800ae40:	431a      	orrs	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	430a      	orrs	r2, r1
 800ae48:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	f003 0320 	and.w	r3, r3, #32
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d113      	bne.n	800ae80 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f829 	bl	800aeb0 <HAL_RTC_WaitForSynchro>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00d      	beq.n	800ae80 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	22ff      	movs	r2, #255	@ 0xff
 800ae6a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2204      	movs	r2, #4
 800ae70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e010      	b.n	800aea2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	22ff      	movs	r2, #255	@ 0xff
 800ae86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	73fb      	strb	r3, [r7, #15]
 800ae8c:	e001      	b.n	800ae92 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ae92:	7bfb      	ldrb	r3, [r7, #15]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d103      	bne.n	800aea0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800aea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	40002800 	.word	0x40002800

0800aeb0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68da      	ldr	r2, [r3, #12]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800aec6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800aec8:	f7fc ffa8 	bl	8007e1c <HAL_GetTick>
 800aecc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aece:	e009      	b.n	800aee4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800aed0:	f7fc ffa4 	bl	8007e1c <HAL_GetTick>
 800aed4:	4602      	mov	r2, r0
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	1ad3      	subs	r3, r2, r3
 800aeda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aede:	d901      	bls.n	800aee4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e007      	b.n	800aef4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	f003 0320 	and.w	r3, r3, #32
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d0ee      	beq.n	800aed0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d119      	bne.n	800af46 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f04f 32ff 	mov.w	r2, #4294967295
 800af1a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800af1c:	f7fc ff7e 	bl	8007e1c <HAL_GetTick>
 800af20:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800af22:	e009      	b.n	800af38 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800af24:	f7fc ff7a 	bl	8007e1c <HAL_GetTick>
 800af28:	4602      	mov	r2, r0
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	1ad3      	subs	r3, r2, r3
 800af2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800af32:	d901      	bls.n	800af38 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800af34:	2303      	movs	r3, #3
 800af36:	e007      	b.n	800af48 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af42:	2b00      	cmp	r3, #0
 800af44:	d0ee      	beq.n	800af24 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d101      	bne.n	800af6a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800af66:	2302      	movs	r3, #2
 800af68:	e0a8      	b.n	800b0bc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2202      	movs	r2, #2
 800af76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	22ca      	movs	r2, #202	@ 0xca
 800af80:	625a      	str	r2, [r3, #36]	@ 0x24
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2253      	movs	r2, #83	@ 0x53
 800af88:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af94:	2b00      	cmp	r3, #0
 800af96:	d020      	beq.n	800afda <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800af98:	f7fc ff40 	bl	8007e1c <HAL_GetTick>
 800af9c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800af9e:	e015      	b.n	800afcc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800afa0:	f7fc ff3c 	bl	8007e1c <HAL_GetTick>
 800afa4:	4602      	mov	r2, r0
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800afae:	d90d      	bls.n	800afcc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	22ff      	movs	r2, #255	@ 0xff
 800afb6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2203      	movs	r2, #3
 800afbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800afc8:	2303      	movs	r3, #3
 800afca:	e077      	b.n	800b0bc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	f003 0304 	and.w	r3, r3, #4
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1e2      	bne.n	800afa0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	689a      	ldr	r2, [r3, #8]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afe8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800affa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800affc:	f7fc ff0e 	bl	8007e1c <HAL_GetTick>
 800b000:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800b002:	e015      	b.n	800b030 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b004:	f7fc ff0a 	bl	8007e1c <HAL_GetTick>
 800b008:	4602      	mov	r2, r0
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b012:	d90d      	bls.n	800b030 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	22ff      	movs	r2, #255	@ 0xff
 800b01a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2203      	movs	r2, #3
 800b020:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800b02c:	2303      	movs	r3, #3
 800b02e:	e045      	b.n	800b0bc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	f003 0304 	and.w	r3, r3, #4
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d0e2      	beq.n	800b004 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	689a      	ldr	r2, [r3, #8]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f022 0207 	bic.w	r2, r2, #7
 800b054:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	6899      	ldr	r1, [r3, #8]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	430a      	orrs	r2, r1
 800b064:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800b066:	4b17      	ldr	r3, [pc, #92]	@ (800b0c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b068:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b06c:	4a15      	ldr	r2, [pc, #84]	@ (800b0c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b06e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b072:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800b076:	4b13      	ldr	r3, [pc, #76]	@ (800b0c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a12      	ldr	r2, [pc, #72]	@ (800b0c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b07c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b080:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	689a      	ldr	r2, [r3, #8]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b090:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	689a      	ldr	r2, [r3, #8]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b0a0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	22ff      	movs	r2, #255	@ 0xff
 800b0a8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3718      	adds	r7, #24
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	58000800 	.word	0x58000800

0800b0c8 <LL_RCC_GetUSARTClockSource>:
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800b0d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4013      	ands	r3, r2
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <LL_RCC_GetLPUARTClockSource>:
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b0f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4013      	ands	r3, r2
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d101      	bne.n	800b11a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	e042      	b.n	800b1a0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b120:	2b00      	cmp	r3, #0
 800b122:	d106      	bne.n	800b132 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7f7 fff5 	bl	800311c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2224      	movs	r2, #36	@ 0x24
 800b136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f022 0201 	bic.w	r2, r2, #1
 800b148:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d002      	beq.n	800b158 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fe60 	bl	800be18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fc35 	bl	800b9c8 <UART_SetConfig>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b01      	cmp	r3, #1
 800b162:	d101      	bne.n	800b168 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	e01b      	b.n	800b1a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	685a      	ldr	r2, [r3, #4]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b176:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	689a      	ldr	r2, [r3, #8]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b186:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f042 0201 	orr.w	r2, r2, #1
 800b196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fedf 	bl	800bf5c <UART_CheckIdleState>
 800b19e:	4603      	mov	r3, r0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b08a      	sub	sp, #40	@ 0x28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1bc:	2b20      	cmp	r3, #32
 800b1be:	d137      	bne.n	800b230 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d002      	beq.n	800b1cc <HAL_UART_Receive_IT+0x24>
 800b1c6:	88fb      	ldrh	r3, [r7, #6]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e030      	b.n	800b232 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a18      	ldr	r2, [pc, #96]	@ (800b23c <HAL_UART_Receive_IT+0x94>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d01f      	beq.n	800b220 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d018      	beq.n	800b220 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	e853 3f00 	ldrex	r3, [r3]
 800b1fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b202:	627b      	str	r3, [r7, #36]	@ 0x24
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	461a      	mov	r2, r3
 800b20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20c:	623b      	str	r3, [r7, #32]
 800b20e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b210:	69f9      	ldr	r1, [r7, #28]
 800b212:	6a3a      	ldr	r2, [r7, #32]
 800b214:	e841 2300 	strex	r3, r2, [r1]
 800b218:	61bb      	str	r3, [r7, #24]
   return(result);
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d1e6      	bne.n	800b1ee <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b220:	88fb      	ldrh	r3, [r7, #6]
 800b222:	461a      	mov	r2, r3
 800b224:	68b9      	ldr	r1, [r7, #8]
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f000 ffb0 	bl	800c18c <UART_Start_Receive_IT>
 800b22c:	4603      	mov	r3, r0
 800b22e:	e000      	b.n	800b232 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b230:	2302      	movs	r3, #2
  }
}
 800b232:	4618      	mov	r0, r3
 800b234:	3728      	adds	r7, #40	@ 0x28
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	40008000 	.word	0x40008000

0800b240 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b08a      	sub	sp, #40	@ 0x28
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	4613      	mov	r3, r2
 800b24c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b254:	2b20      	cmp	r3, #32
 800b256:	d167      	bne.n	800b328 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <HAL_UART_Transmit_DMA+0x24>
 800b25e:	88fb      	ldrh	r3, [r7, #6]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d101      	bne.n	800b268 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	e060      	b.n	800b32a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	68ba      	ldr	r2, [r7, #8]
 800b26c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	88fa      	ldrh	r2, [r7, #6]
 800b272:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	88fa      	ldrh	r2, [r7, #6]
 800b27a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2221      	movs	r2, #33	@ 0x21
 800b28a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b292:	2b00      	cmp	r3, #0
 800b294:	d028      	beq.n	800b2e8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b29a:	4a26      	ldr	r2, [pc, #152]	@ (800b334 <HAL_UART_Transmit_DMA+0xf4>)
 800b29c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2a2:	4a25      	ldr	r2, [pc, #148]	@ (800b338 <HAL_UART_Transmit_DMA+0xf8>)
 800b2a4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2aa:	4a24      	ldr	r2, [pc, #144]	@ (800b33c <HAL_UART_Transmit_DMA+0xfc>)
 800b2ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	3328      	adds	r3, #40	@ 0x28
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	88fb      	ldrh	r3, [r7, #6]
 800b2ca:	f7fd f819 	bl	8008300 <HAL_DMA_Start_IT>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d009      	beq.n	800b2e8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2210      	movs	r2, #16
 800b2d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2220      	movs	r2, #32
 800b2e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e020      	b.n	800b32a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2240      	movs	r2, #64	@ 0x40
 800b2ee:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3308      	adds	r3, #8
 800b2f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	e853 3f00 	ldrex	r3, [r3]
 800b2fe:	613b      	str	r3, [r7, #16]
   return(result);
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b306:	627b      	str	r3, [r7, #36]	@ 0x24
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	3308      	adds	r3, #8
 800b30e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b310:	623a      	str	r2, [r7, #32]
 800b312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b314:	69f9      	ldr	r1, [r7, #28]
 800b316:	6a3a      	ldr	r2, [r7, #32]
 800b318:	e841 2300 	strex	r3, r2, [r1]
 800b31c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1e5      	bne.n	800b2f0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b324:	2300      	movs	r3, #0
 800b326:	e000      	b.n	800b32a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b328:	2302      	movs	r3, #2
  }
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3728      	adds	r7, #40	@ 0x28
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	0800c51f 	.word	0x0800c51f
 800b338:	0800c5b9 	.word	0x0800c5b9
 800b33c:	0800c5d5 	.word	0x0800c5d5

0800b340 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b0ba      	sub	sp, #232	@ 0xe8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	69db      	ldr	r3, [r3, #28]
 800b34e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b366:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b36a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b36e:	4013      	ands	r3, r2
 800b370:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d11b      	bne.n	800b3b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b37c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b380:	f003 0320 	and.w	r3, r3, #32
 800b384:	2b00      	cmp	r3, #0
 800b386:	d015      	beq.n	800b3b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b38c:	f003 0320 	and.w	r3, r3, #32
 800b390:	2b00      	cmp	r3, #0
 800b392:	d105      	bne.n	800b3a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d009      	beq.n	800b3b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	f000 82e3 	beq.w	800b970 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	4798      	blx	r3
      }
      return;
 800b3b2:	e2dd      	b.n	800b970 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b3b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f000 8123 	beq.w	800b604 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b3be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b3c2:	4b8d      	ldr	r3, [pc, #564]	@ (800b5f8 <HAL_UART_IRQHandler+0x2b8>)
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d106      	bne.n	800b3d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b3ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b3ce:	4b8b      	ldr	r3, [pc, #556]	@ (800b5fc <HAL_UART_IRQHandler+0x2bc>)
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f000 8116 	beq.w	800b604 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3dc:	f003 0301 	and.w	r3, r3, #1
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d011      	beq.n	800b408 <HAL_UART_IRQHandler+0xc8>
 800b3e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00b      	beq.n	800b408 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3fe:	f043 0201 	orr.w	r2, r3, #1
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b40c:	f003 0302 	and.w	r3, r3, #2
 800b410:	2b00      	cmp	r3, #0
 800b412:	d011      	beq.n	800b438 <HAL_UART_IRQHandler+0xf8>
 800b414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b418:	f003 0301 	and.w	r3, r3, #1
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00b      	beq.n	800b438 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2202      	movs	r2, #2
 800b426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b42e:	f043 0204 	orr.w	r2, r3, #4
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b43c:	f003 0304 	and.w	r3, r3, #4
 800b440:	2b00      	cmp	r3, #0
 800b442:	d011      	beq.n	800b468 <HAL_UART_IRQHandler+0x128>
 800b444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b448:	f003 0301 	and.w	r3, r3, #1
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00b      	beq.n	800b468 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2204      	movs	r2, #4
 800b456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b45e:	f043 0202 	orr.w	r2, r3, #2
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b46c:	f003 0308 	and.w	r3, r3, #8
 800b470:	2b00      	cmp	r3, #0
 800b472:	d017      	beq.n	800b4a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b478:	f003 0320 	and.w	r3, r3, #32
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d105      	bne.n	800b48c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b480:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b484:	4b5c      	ldr	r3, [pc, #368]	@ (800b5f8 <HAL_UART_IRQHandler+0x2b8>)
 800b486:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00b      	beq.n	800b4a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2208      	movs	r2, #8
 800b492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b49a:	f043 0208 	orr.w	r2, r3, #8
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d012      	beq.n	800b4d6 <HAL_UART_IRQHandler+0x196>
 800b4b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00c      	beq.n	800b4d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4cc:	f043 0220 	orr.w	r2, r3, #32
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f000 8249 	beq.w	800b974 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4e6:	f003 0320 	and.w	r3, r3, #32
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d013      	beq.n	800b516 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b4ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4f2:	f003 0320 	and.w	r3, r3, #32
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d105      	bne.n	800b506 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b4fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d007      	beq.n	800b516 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d003      	beq.n	800b516 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b51c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b52a:	2b40      	cmp	r3, #64	@ 0x40
 800b52c:	d005      	beq.n	800b53a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b52e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b532:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b536:	2b00      	cmp	r3, #0
 800b538:	d054      	beq.n	800b5e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 ff89 	bl	800c452 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b54a:	2b40      	cmp	r3, #64	@ 0x40
 800b54c:	d146      	bne.n	800b5dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3308      	adds	r3, #8
 800b554:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b558:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b55c:	e853 3f00 	ldrex	r3, [r3]
 800b560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b564:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b568:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b56c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3308      	adds	r3, #8
 800b576:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b57a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b57e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b582:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b586:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b58a:	e841 2300 	strex	r3, r2, [r1]
 800b58e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1d9      	bne.n	800b54e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d017      	beq.n	800b5d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5aa:	4a15      	ldr	r2, [pc, #84]	@ (800b600 <HAL_UART_IRQHandler+0x2c0>)
 800b5ac:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7fc ff7d 	bl	80084b4 <HAL_DMA_Abort_IT>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d019      	beq.n	800b5f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5d2:	e00f      	b.n	800b5f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f9e1 	bl	800b99c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5da:	e00b      	b.n	800b5f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f9dd 	bl	800b99c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5e2:	e007      	b.n	800b5f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f9d9 	bl	800b99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b5f2:	e1bf      	b.n	800b974 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5f4:	bf00      	nop
    return;
 800b5f6:	e1bd      	b.n	800b974 <HAL_UART_IRQHandler+0x634>
 800b5f8:	10000001 	.word	0x10000001
 800b5fc:	04000120 	.word	0x04000120
 800b600:	0800c655 	.word	0x0800c655

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b608:	2b01      	cmp	r3, #1
 800b60a:	f040 8153 	bne.w	800b8b4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b60e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b612:	f003 0310 	and.w	r3, r3, #16
 800b616:	2b00      	cmp	r3, #0
 800b618:	f000 814c 	beq.w	800b8b4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b61c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b620:	f003 0310 	and.w	r3, r3, #16
 800b624:	2b00      	cmp	r3, #0
 800b626:	f000 8145 	beq.w	800b8b4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2210      	movs	r2, #16
 800b630:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b63c:	2b40      	cmp	r3, #64	@ 0x40
 800b63e:	f040 80bb 	bne.w	800b7b8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 818f 	beq.w	800b978 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b660:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b664:	429a      	cmp	r2, r3
 800b666:	f080 8187 	bcs.w	800b978 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b670:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f003 0320 	and.w	r3, r3, #32
 800b682:	2b00      	cmp	r3, #0
 800b684:	f040 8087 	bne.w	800b796 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b690:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b694:	e853 3f00 	ldrex	r3, [r3]
 800b698:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b69c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b6b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b6b6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b6be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b6c2:	e841 2300 	strex	r3, r2, [r1]
 800b6c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b6ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1da      	bne.n	800b688 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	3308      	adds	r3, #8
 800b6d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6dc:	e853 3f00 	ldrex	r3, [r3]
 800b6e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b6e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6e4:	f023 0301 	bic.w	r3, r3, #1
 800b6e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b6f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b6fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b6fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b702:	e841 2300 	strex	r3, r2, [r1]
 800b706:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b708:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1e1      	bne.n	800b6d2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3308      	adds	r3, #8
 800b714:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b716:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b718:	e853 3f00 	ldrex	r3, [r3]
 800b71c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b71e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b724:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3308      	adds	r3, #8
 800b72e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b732:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b734:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b736:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b738:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b73a:	e841 2300 	strex	r3, r2, [r1]
 800b73e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1e3      	bne.n	800b70e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2220      	movs	r2, #32
 800b74a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b75c:	e853 3f00 	ldrex	r3, [r3]
 800b760:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b764:	f023 0310 	bic.w	r3, r3, #16
 800b768:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	461a      	mov	r2, r3
 800b772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b776:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b778:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b77c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b77e:	e841 2300 	strex	r3, r2, [r1]
 800b782:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1e4      	bne.n	800b754 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b790:	4618      	mov	r0, r3
 800b792:	f7fc fe30 	bl	80083f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2202      	movs	r2, #2
 800b79a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	1ad3      	subs	r3, r2, r3
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 f8fd 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b7b6:	e0df      	b.n	800b978 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	1ad3      	subs	r3, r2, r3
 800b7c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 80d1 	beq.w	800b97c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b7da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f000 80cc 	beq.w	800b97c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ec:	e853 3f00 	ldrex	r3, [r3]
 800b7f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b7f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	461a      	mov	r2, r3
 800b802:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b806:	647b      	str	r3, [r7, #68]	@ 0x44
 800b808:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b80c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b80e:	e841 2300 	strex	r3, r2, [r1]
 800b812:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1e4      	bne.n	800b7e4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	3308      	adds	r3, #8
 800b820:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b824:	e853 3f00 	ldrex	r3, [r3]
 800b828:	623b      	str	r3, [r7, #32]
   return(result);
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b830:	f023 0301 	bic.w	r3, r3, #1
 800b834:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	3308      	adds	r3, #8
 800b83e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b842:	633a      	str	r2, [r7, #48]	@ 0x30
 800b844:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b846:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b84a:	e841 2300 	strex	r3, r2, [r1]
 800b84e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1e1      	bne.n	800b81a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2220      	movs	r2, #32
 800b85a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	e853 3f00 	ldrex	r3, [r3]
 800b876:	60fb      	str	r3, [r7, #12]
   return(result);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f023 0310 	bic.w	r3, r3, #16
 800b87e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	461a      	mov	r2, r3
 800b888:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b88c:	61fb      	str	r3, [r7, #28]
 800b88e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b890:	69b9      	ldr	r1, [r7, #24]
 800b892:	69fa      	ldr	r2, [r7, #28]
 800b894:	e841 2300 	strex	r3, r2, [r1]
 800b898:	617b      	str	r3, [r7, #20]
   return(result);
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d1e4      	bne.n	800b86a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f87f 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b8b2:	e063      	b.n	800b97c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b8b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00e      	beq.n	800b8de <HAL_UART_IRQHandler+0x59e>
 800b8c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d008      	beq.n	800b8de <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b8d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f001 fc1a 	bl	800d110 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b8dc:	e051      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b8de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d014      	beq.n	800b914 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b8ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b8ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d105      	bne.n	800b902 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b8f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d008      	beq.n	800b914 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b906:	2b00      	cmp	r3, #0
 800b908:	d03a      	beq.n	800b980 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	4798      	blx	r3
    }
    return;
 800b912:	e035      	b.n	800b980 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d009      	beq.n	800b934 <HAL_UART_IRQHandler+0x5f4>
 800b920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d003      	beq.n	800b934 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 fea7 	bl	800c680 <UART_EndTransmit_IT>
    return;
 800b932:	e026      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b938:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d009      	beq.n	800b954 <HAL_UART_IRQHandler+0x614>
 800b940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b944:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d003      	beq.n	800b954 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f001 fbf3 	bl	800d138 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b952:	e016      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b958:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d010      	beq.n	800b982 <HAL_UART_IRQHandler+0x642>
 800b960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b964:	2b00      	cmp	r3, #0
 800b966:	da0c      	bge.n	800b982 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f001 fbdb 	bl	800d124 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b96e:	e008      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
      return;
 800b970:	bf00      	nop
 800b972:	e006      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
    return;
 800b974:	bf00      	nop
 800b976:	e004      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
      return;
 800b978:	bf00      	nop
 800b97a:	e002      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
      return;
 800b97c:	bf00      	nop
 800b97e:	e000      	b.n	800b982 <HAL_UART_IRQHandler+0x642>
    return;
 800b980:	bf00      	nop
  }
}
 800b982:	37e8      	adds	r7, #232	@ 0xe8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9cc:	b08c      	sub	sp, #48	@ 0x30
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	689a      	ldr	r2, [r3, #8]
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	431a      	orrs	r2, r3
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	431a      	orrs	r2, r3
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	69db      	ldr	r3, [r3, #28]
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	4baf      	ldr	r3, [pc, #700]	@ (800bcb4 <UART_SetConfig+0x2ec>)
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	6812      	ldr	r2, [r2, #0]
 800b9fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba00:	430b      	orrs	r3, r1
 800ba02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	68da      	ldr	r2, [r3, #12]
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	430a      	orrs	r2, r1
 800ba18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	699b      	ldr	r3, [r3, #24]
 800ba1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4aa4      	ldr	r2, [pc, #656]	@ (800bcb8 <UART_SetConfig+0x2f0>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d004      	beq.n	800ba34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	6a1b      	ldr	r3, [r3, #32]
 800ba2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba30:	4313      	orrs	r3, r2
 800ba32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ba3e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	6812      	ldr	r2, [r2, #0]
 800ba46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba48:	430b      	orrs	r3, r1
 800ba4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba52:	f023 010f 	bic.w	r1, r3, #15
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	430a      	orrs	r2, r1
 800ba60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a95      	ldr	r2, [pc, #596]	@ (800bcbc <UART_SetConfig+0x2f4>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d125      	bne.n	800bab8 <UART_SetConfig+0xf0>
 800ba6c:	2003      	movs	r0, #3
 800ba6e:	f7ff fb2b 	bl	800b0c8 <LL_RCC_GetUSARTClockSource>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b03      	cmp	r3, #3
 800ba76:	d81b      	bhi.n	800bab0 <UART_SetConfig+0xe8>
 800ba78:	a201      	add	r2, pc, #4	@ (adr r2, 800ba80 <UART_SetConfig+0xb8>)
 800ba7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba7e:	bf00      	nop
 800ba80:	0800ba91 	.word	0x0800ba91
 800ba84:	0800baa1 	.word	0x0800baa1
 800ba88:	0800ba99 	.word	0x0800ba99
 800ba8c:	0800baa9 	.word	0x0800baa9
 800ba90:	2301      	movs	r3, #1
 800ba92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba96:	e042      	b.n	800bb1e <UART_SetConfig+0x156>
 800ba98:	2302      	movs	r3, #2
 800ba9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba9e:	e03e      	b.n	800bb1e <UART_SetConfig+0x156>
 800baa0:	2304      	movs	r3, #4
 800baa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baa6:	e03a      	b.n	800bb1e <UART_SetConfig+0x156>
 800baa8:	2308      	movs	r3, #8
 800baaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baae:	e036      	b.n	800bb1e <UART_SetConfig+0x156>
 800bab0:	2310      	movs	r3, #16
 800bab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bab6:	e032      	b.n	800bb1e <UART_SetConfig+0x156>
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a7e      	ldr	r2, [pc, #504]	@ (800bcb8 <UART_SetConfig+0x2f0>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d12a      	bne.n	800bb18 <UART_SetConfig+0x150>
 800bac2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800bac6:	f7ff fb0f 	bl	800b0e8 <LL_RCC_GetLPUARTClockSource>
 800baca:	4603      	mov	r3, r0
 800bacc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bad0:	d01a      	beq.n	800bb08 <UART_SetConfig+0x140>
 800bad2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bad6:	d81b      	bhi.n	800bb10 <UART_SetConfig+0x148>
 800bad8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800badc:	d00c      	beq.n	800baf8 <UART_SetConfig+0x130>
 800bade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bae2:	d815      	bhi.n	800bb10 <UART_SetConfig+0x148>
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d003      	beq.n	800baf0 <UART_SetConfig+0x128>
 800bae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800baec:	d008      	beq.n	800bb00 <UART_SetConfig+0x138>
 800baee:	e00f      	b.n	800bb10 <UART_SetConfig+0x148>
 800baf0:	2300      	movs	r3, #0
 800baf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baf6:	e012      	b.n	800bb1e <UART_SetConfig+0x156>
 800baf8:	2302      	movs	r3, #2
 800bafa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bafe:	e00e      	b.n	800bb1e <UART_SetConfig+0x156>
 800bb00:	2304      	movs	r3, #4
 800bb02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb06:	e00a      	b.n	800bb1e <UART_SetConfig+0x156>
 800bb08:	2308      	movs	r3, #8
 800bb0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb0e:	e006      	b.n	800bb1e <UART_SetConfig+0x156>
 800bb10:	2310      	movs	r3, #16
 800bb12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb16:	e002      	b.n	800bb1e <UART_SetConfig+0x156>
 800bb18:	2310      	movs	r3, #16
 800bb1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a65      	ldr	r2, [pc, #404]	@ (800bcb8 <UART_SetConfig+0x2f0>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	f040 8097 	bne.w	800bc58 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb2e:	2b08      	cmp	r3, #8
 800bb30:	d823      	bhi.n	800bb7a <UART_SetConfig+0x1b2>
 800bb32:	a201      	add	r2, pc, #4	@ (adr r2, 800bb38 <UART_SetConfig+0x170>)
 800bb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb38:	0800bb5d 	.word	0x0800bb5d
 800bb3c:	0800bb7b 	.word	0x0800bb7b
 800bb40:	0800bb65 	.word	0x0800bb65
 800bb44:	0800bb7b 	.word	0x0800bb7b
 800bb48:	0800bb6b 	.word	0x0800bb6b
 800bb4c:	0800bb7b 	.word	0x0800bb7b
 800bb50:	0800bb7b 	.word	0x0800bb7b
 800bb54:	0800bb7b 	.word	0x0800bb7b
 800bb58:	0800bb73 	.word	0x0800bb73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb5c:	f7fe fbbe 	bl	800a2dc <HAL_RCC_GetPCLK1Freq>
 800bb60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb62:	e010      	b.n	800bb86 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb64:	4b56      	ldr	r3, [pc, #344]	@ (800bcc0 <UART_SetConfig+0x2f8>)
 800bb66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb68:	e00d      	b.n	800bb86 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb6a:	f7fe fb37 	bl	800a1dc <HAL_RCC_GetSysClockFreq>
 800bb6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb70:	e009      	b.n	800bb86 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb78:	e005      	b.n	800bb86 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bb84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 812b 	beq.w	800bde4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb92:	4a4c      	ldr	r2, [pc, #304]	@ (800bcc4 <UART_SetConfig+0x2fc>)
 800bb94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb98:	461a      	mov	r2, r3
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bba0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	685a      	ldr	r2, [r3, #4]
 800bba6:	4613      	mov	r3, r2
 800bba8:	005b      	lsls	r3, r3, #1
 800bbaa:	4413      	add	r3, r2
 800bbac:	69ba      	ldr	r2, [r7, #24]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	d305      	bcc.n	800bbbe <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbb8:	69ba      	ldr	r2, [r7, #24]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d903      	bls.n	800bbc6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bbc4:	e10e      	b.n	800bde4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc8:	2200      	movs	r2, #0
 800bbca:	60bb      	str	r3, [r7, #8]
 800bbcc:	60fa      	str	r2, [r7, #12]
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbd2:	4a3c      	ldr	r2, [pc, #240]	@ (800bcc4 <UART_SetConfig+0x2fc>)
 800bbd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	2200      	movs	r2, #0
 800bbdc:	603b      	str	r3, [r7, #0]
 800bbde:	607a      	str	r2, [r7, #4]
 800bbe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbe4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bbe8:	f7f5 f816 	bl	8000c18 <__aeabi_uldivmod>
 800bbec:	4602      	mov	r2, r0
 800bbee:	460b      	mov	r3, r1
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	f04f 0200 	mov.w	r2, #0
 800bbf8:	f04f 0300 	mov.w	r3, #0
 800bbfc:	020b      	lsls	r3, r1, #8
 800bbfe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc02:	0202      	lsls	r2, r0, #8
 800bc04:	6979      	ldr	r1, [r7, #20]
 800bc06:	6849      	ldr	r1, [r1, #4]
 800bc08:	0849      	lsrs	r1, r1, #1
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	460c      	mov	r4, r1
 800bc0e:	4605      	mov	r5, r0
 800bc10:	eb12 0804 	adds.w	r8, r2, r4
 800bc14:	eb43 0905 	adc.w	r9, r3, r5
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	469a      	mov	sl, r3
 800bc20:	4693      	mov	fp, r2
 800bc22:	4652      	mov	r2, sl
 800bc24:	465b      	mov	r3, fp
 800bc26:	4640      	mov	r0, r8
 800bc28:	4649      	mov	r1, r9
 800bc2a:	f7f4 fff5 	bl	8000c18 <__aeabi_uldivmod>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	460b      	mov	r3, r1
 800bc32:	4613      	mov	r3, r2
 800bc34:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc3c:	d308      	bcc.n	800bc50 <UART_SetConfig+0x288>
 800bc3e:	6a3b      	ldr	r3, [r7, #32]
 800bc40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc44:	d204      	bcs.n	800bc50 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	6a3a      	ldr	r2, [r7, #32]
 800bc4c:	60da      	str	r2, [r3, #12]
 800bc4e:	e0c9      	b.n	800bde4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800bc50:	2301      	movs	r3, #1
 800bc52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bc56:	e0c5      	b.n	800bde4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	69db      	ldr	r3, [r3, #28]
 800bc5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc60:	d16d      	bne.n	800bd3e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800bc62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bc66:	3b01      	subs	r3, #1
 800bc68:	2b07      	cmp	r3, #7
 800bc6a:	d82d      	bhi.n	800bcc8 <UART_SetConfig+0x300>
 800bc6c:	a201      	add	r2, pc, #4	@ (adr r2, 800bc74 <UART_SetConfig+0x2ac>)
 800bc6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc72:	bf00      	nop
 800bc74:	0800bc95 	.word	0x0800bc95
 800bc78:	0800bc9d 	.word	0x0800bc9d
 800bc7c:	0800bcc9 	.word	0x0800bcc9
 800bc80:	0800bca3 	.word	0x0800bca3
 800bc84:	0800bcc9 	.word	0x0800bcc9
 800bc88:	0800bcc9 	.word	0x0800bcc9
 800bc8c:	0800bcc9 	.word	0x0800bcc9
 800bc90:	0800bcab 	.word	0x0800bcab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc94:	f7fe fb38 	bl	800a308 <HAL_RCC_GetPCLK2Freq>
 800bc98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc9a:	e01b      	b.n	800bcd4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc9c:	4b08      	ldr	r3, [pc, #32]	@ (800bcc0 <UART_SetConfig+0x2f8>)
 800bc9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bca0:	e018      	b.n	800bcd4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bca2:	f7fe fa9b 	bl	800a1dc <HAL_RCC_GetSysClockFreq>
 800bca6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bca8:	e014      	b.n	800bcd4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bcb0:	e010      	b.n	800bcd4 <UART_SetConfig+0x30c>
 800bcb2:	bf00      	nop
 800bcb4:	cfff69f3 	.word	0xcfff69f3
 800bcb8:	40008000 	.word	0x40008000
 800bcbc:	40013800 	.word	0x40013800
 800bcc0:	00f42400 	.word	0x00f42400
 800bcc4:	08030af8 	.word	0x08030af8
      default:
        pclk = 0U;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bcd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bcd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	f000 8084 	beq.w	800bde4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce0:	4a4b      	ldr	r2, [pc, #300]	@ (800be10 <UART_SetConfig+0x448>)
 800bce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bce6:	461a      	mov	r2, r3
 800bce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcea:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcee:	005a      	lsls	r2, r3, #1
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	085b      	lsrs	r3, r3, #1
 800bcf6:	441a      	add	r2, r3
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd00:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd02:	6a3b      	ldr	r3, [r7, #32]
 800bd04:	2b0f      	cmp	r3, #15
 800bd06:	d916      	bls.n	800bd36 <UART_SetConfig+0x36e>
 800bd08:	6a3b      	ldr	r3, [r7, #32]
 800bd0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd0e:	d212      	bcs.n	800bd36 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd10:	6a3b      	ldr	r3, [r7, #32]
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	f023 030f 	bic.w	r3, r3, #15
 800bd18:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd1a:	6a3b      	ldr	r3, [r7, #32]
 800bd1c:	085b      	lsrs	r3, r3, #1
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	f003 0307 	and.w	r3, r3, #7
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	8bfb      	ldrh	r3, [r7, #30]
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	8bfa      	ldrh	r2, [r7, #30]
 800bd32:	60da      	str	r2, [r3, #12]
 800bd34:	e056      	b.n	800bde4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bd3c:	e052      	b.n	800bde4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd42:	3b01      	subs	r3, #1
 800bd44:	2b07      	cmp	r3, #7
 800bd46:	d822      	bhi.n	800bd8e <UART_SetConfig+0x3c6>
 800bd48:	a201      	add	r2, pc, #4	@ (adr r2, 800bd50 <UART_SetConfig+0x388>)
 800bd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4e:	bf00      	nop
 800bd50:	0800bd71 	.word	0x0800bd71
 800bd54:	0800bd79 	.word	0x0800bd79
 800bd58:	0800bd8f 	.word	0x0800bd8f
 800bd5c:	0800bd7f 	.word	0x0800bd7f
 800bd60:	0800bd8f 	.word	0x0800bd8f
 800bd64:	0800bd8f 	.word	0x0800bd8f
 800bd68:	0800bd8f 	.word	0x0800bd8f
 800bd6c:	0800bd87 	.word	0x0800bd87
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd70:	f7fe faca 	bl	800a308 <HAL_RCC_GetPCLK2Freq>
 800bd74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd76:	e010      	b.n	800bd9a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd78:	4b26      	ldr	r3, [pc, #152]	@ (800be14 <UART_SetConfig+0x44c>)
 800bd7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd7c:	e00d      	b.n	800bd9a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd7e:	f7fe fa2d 	bl	800a1dc <HAL_RCC_GetSysClockFreq>
 800bd82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd84:	e009      	b.n	800bd9a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd8c:	e005      	b.n	800bd9a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bd98:	bf00      	nop
    }

    if (pclk != 0U)
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d021      	beq.n	800bde4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bda4:	4a1a      	ldr	r2, [pc, #104]	@ (800be10 <UART_SetConfig+0x448>)
 800bda6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdae:	fbb3 f2f2 	udiv	r2, r3, r2
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	085b      	lsrs	r3, r3, #1
 800bdb8:	441a      	add	r2, r3
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdc4:	6a3b      	ldr	r3, [r7, #32]
 800bdc6:	2b0f      	cmp	r3, #15
 800bdc8:	d909      	bls.n	800bdde <UART_SetConfig+0x416>
 800bdca:	6a3b      	ldr	r3, [r7, #32]
 800bdcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdd0:	d205      	bcs.n	800bdde <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bdd2:	6a3b      	ldr	r3, [r7, #32]
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	60da      	str	r2, [r3, #12]
 800bddc:	e002      	b.n	800bde4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	2201      	movs	r2, #1
 800bde8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800be04:	4618      	mov	r0, r3
 800be06:	3730      	adds	r7, #48	@ 0x30
 800be08:	46bd      	mov	sp, r7
 800be0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be0e:	bf00      	nop
 800be10:	08030af8 	.word	0x08030af8
 800be14:	00f42400 	.word	0x00f42400

0800be18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be24:	f003 0308 	and.w	r3, r3, #8
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00a      	beq.n	800be42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	430a      	orrs	r2, r1
 800be40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be46:	f003 0301 	and.w	r3, r3, #1
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00a      	beq.n	800be64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	430a      	orrs	r2, r1
 800be62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be68:	f003 0302 	and.w	r3, r3, #2
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00a      	beq.n	800be86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	430a      	orrs	r2, r1
 800be84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be8a:	f003 0304 	and.w	r3, r3, #4
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00a      	beq.n	800bea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	430a      	orrs	r2, r1
 800bea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beac:	f003 0310 	and.w	r3, r3, #16
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00a      	beq.n	800beca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	430a      	orrs	r2, r1
 800bec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bece:	f003 0320 	and.w	r3, r3, #32
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00a      	beq.n	800beec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	430a      	orrs	r2, r1
 800beea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d01a      	beq.n	800bf2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	430a      	orrs	r2, r1
 800bf0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf16:	d10a      	bne.n	800bf2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	430a      	orrs	r2, r1
 800bf2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00a      	beq.n	800bf50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	430a      	orrs	r2, r1
 800bf4e:	605a      	str	r2, [r3, #4]
  }
}
 800bf50:	bf00      	nop
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b098      	sub	sp, #96	@ 0x60
 800bf60:	af02      	add	r7, sp, #8
 800bf62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf6c:	f7fb ff56 	bl	8007e1c <HAL_GetTick>
 800bf70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f003 0308 	and.w	r3, r3, #8
 800bf7c:	2b08      	cmp	r3, #8
 800bf7e:	d12f      	bne.n	800bfe0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf84:	9300      	str	r3, [sp, #0]
 800bf86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 f88e 	bl	800c0b0 <UART_WaitOnFlagUntilTimeout>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d022      	beq.n	800bfe0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa2:	e853 3f00 	ldrex	r3, [r3]
 800bfa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bfa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfae:	653b      	str	r3, [r7, #80]	@ 0x50
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfb8:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bfbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfc0:	e841 2300 	strex	r3, r2, [r1]
 800bfc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bfc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1e6      	bne.n	800bf9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2220      	movs	r2, #32
 800bfd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	e063      	b.n	800c0a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f003 0304 	and.w	r3, r3, #4
 800bfea:	2b04      	cmp	r3, #4
 800bfec:	d149      	bne.n	800c082 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bff6:	2200      	movs	r2, #0
 800bff8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f857 	bl	800c0b0 <UART_WaitOnFlagUntilTimeout>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d03c      	beq.n	800c082 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c010:	e853 3f00 	ldrex	r3, [r3]
 800c014:	623b      	str	r3, [r7, #32]
   return(result);
 800c016:	6a3b      	ldr	r3, [r7, #32]
 800c018:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c01c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	461a      	mov	r2, r3
 800c024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c026:	633b      	str	r3, [r7, #48]	@ 0x30
 800c028:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c02c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c02e:	e841 2300 	strex	r3, r2, [r1]
 800c032:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1e6      	bne.n	800c008 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	3308      	adds	r3, #8
 800c040:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	e853 3f00 	ldrex	r3, [r3]
 800c048:	60fb      	str	r3, [r7, #12]
   return(result);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f023 0301 	bic.w	r3, r3, #1
 800c050:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	3308      	adds	r3, #8
 800c058:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c05a:	61fa      	str	r2, [r7, #28]
 800c05c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05e:	69b9      	ldr	r1, [r7, #24]
 800c060:	69fa      	ldr	r2, [r7, #28]
 800c062:	e841 2300 	strex	r3, r2, [r1]
 800c066:	617b      	str	r3, [r7, #20]
   return(result);
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d1e5      	bne.n	800c03a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2220      	movs	r2, #32
 800c072:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2200      	movs	r2, #0
 800c07a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c07e:	2303      	movs	r3, #3
 800c080:	e012      	b.n	800c0a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2220      	movs	r2, #32
 800c086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2220      	movs	r2, #32
 800c08e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3758      	adds	r7, #88	@ 0x58
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	603b      	str	r3, [r7, #0]
 800c0bc:	4613      	mov	r3, r2
 800c0be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0c0:	e04f      	b.n	800c162 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c8:	d04b      	beq.n	800c162 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0ca:	f7fb fea7 	bl	8007e1c <HAL_GetTick>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	69ba      	ldr	r2, [r7, #24]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d302      	bcc.n	800c0e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d101      	bne.n	800c0e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	e04e      	b.n	800c182 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f003 0304 	and.w	r3, r3, #4
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d037      	beq.n	800c162 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	2b80      	cmp	r3, #128	@ 0x80
 800c0f6:	d034      	beq.n	800c162 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	2b40      	cmp	r3, #64	@ 0x40
 800c0fc:	d031      	beq.n	800c162 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	69db      	ldr	r3, [r3, #28]
 800c104:	f003 0308 	and.w	r3, r3, #8
 800c108:	2b08      	cmp	r3, #8
 800c10a:	d110      	bne.n	800c12e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2208      	movs	r2, #8
 800c112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c114:	68f8      	ldr	r0, [r7, #12]
 800c116:	f000 f99c 	bl	800c452 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2208      	movs	r2, #8
 800c11e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	e029      	b.n	800c182 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	69db      	ldr	r3, [r3, #28]
 800c134:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c13c:	d111      	bne.n	800c162 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c146:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c148:	68f8      	ldr	r0, [r7, #12]
 800c14a:	f000 f982 	bl	800c452 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2220      	movs	r2, #32
 800c152:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c15e:	2303      	movs	r3, #3
 800c160:	e00f      	b.n	800c182 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	69da      	ldr	r2, [r3, #28]
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	4013      	ands	r3, r2
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	429a      	cmp	r2, r3
 800c170:	bf0c      	ite	eq
 800c172:	2301      	moveq	r3, #1
 800c174:	2300      	movne	r3, #0
 800c176:	b2db      	uxtb	r3, r3
 800c178:	461a      	mov	r2, r3
 800c17a:	79fb      	ldrb	r3, [r7, #7]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d0a0      	beq.n	800c0c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c180:	2300      	movs	r3, #0
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
	...

0800c18c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b0a3      	sub	sp, #140	@ 0x8c
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	4613      	mov	r3, r2
 800c198:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	68ba      	ldr	r2, [r7, #8]
 800c19e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	88fa      	ldrh	r2, [r7, #6]
 800c1a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	88fa      	ldrh	r2, [r7, #6]
 800c1ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1be:	d10e      	bne.n	800c1de <UART_Start_Receive_IT+0x52>
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	691b      	ldr	r3, [r3, #16]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d105      	bne.n	800c1d4 <UART_Start_Receive_IT+0x48>
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c1ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c1d2:	e02d      	b.n	800c230 <UART_Start_Receive_IT+0xa4>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	22ff      	movs	r2, #255	@ 0xff
 800c1d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c1dc:	e028      	b.n	800c230 <UART_Start_Receive_IT+0xa4>
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10d      	bne.n	800c202 <UART_Start_Receive_IT+0x76>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	691b      	ldr	r3, [r3, #16]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d104      	bne.n	800c1f8 <UART_Start_Receive_IT+0x6c>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	22ff      	movs	r2, #255	@ 0xff
 800c1f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c1f6:	e01b      	b.n	800c230 <UART_Start_Receive_IT+0xa4>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	227f      	movs	r2, #127	@ 0x7f
 800c1fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c200:	e016      	b.n	800c230 <UART_Start_Receive_IT+0xa4>
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c20a:	d10d      	bne.n	800c228 <UART_Start_Receive_IT+0x9c>
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d104      	bne.n	800c21e <UART_Start_Receive_IT+0x92>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	227f      	movs	r2, #127	@ 0x7f
 800c218:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c21c:	e008      	b.n	800c230 <UART_Start_Receive_IT+0xa4>
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	223f      	movs	r2, #63	@ 0x3f
 800c222:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c226:	e003      	b.n	800c230 <UART_Start_Receive_IT+0xa4>
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2200      	movs	r2, #0
 800c22c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2200      	movs	r2, #0
 800c234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2222      	movs	r2, #34	@ 0x22
 800c23c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3308      	adds	r3, #8
 800c246:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c24a:	e853 3f00 	ldrex	r3, [r3]
 800c24e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c250:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c252:	f043 0301 	orr.w	r3, r3, #1
 800c256:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	3308      	adds	r3, #8
 800c260:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c264:	673a      	str	r2, [r7, #112]	@ 0x70
 800c266:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c268:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c26a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c26c:	e841 2300 	strex	r3, r2, [r1]
 800c270:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c272:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1e3      	bne.n	800c240 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c27c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c280:	d14f      	bne.n	800c322 <UART_Start_Receive_IT+0x196>
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c288:	88fa      	ldrh	r2, [r7, #6]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d349      	bcc.n	800c322 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	689b      	ldr	r3, [r3, #8]
 800c292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c296:	d107      	bne.n	800c2a8 <UART_Start_Receive_IT+0x11c>
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d103      	bne.n	800c2a8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	4a47      	ldr	r2, [pc, #284]	@ (800c3c0 <UART_Start_Receive_IT+0x234>)
 800c2a4:	675a      	str	r2, [r3, #116]	@ 0x74
 800c2a6:	e002      	b.n	800c2ae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	4a46      	ldr	r2, [pc, #280]	@ (800c3c4 <UART_Start_Receive_IT+0x238>)
 800c2ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	691b      	ldr	r3, [r3, #16]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d01a      	beq.n	800c2ec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2be:	e853 3f00 	ldrex	r3, [r3]
 800c2c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c2c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c2d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c2da:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c2de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c2e0:	e841 2300 	strex	r3, r2, [r1]
 800c2e4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c2e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1e4      	bne.n	800c2b6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	3308      	adds	r3, #8
 800c2f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2f6:	e853 3f00 	ldrex	r3, [r3]
 800c2fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c302:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	3308      	adds	r3, #8
 800c30a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c30c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c30e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c310:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c312:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c314:	e841 2300 	strex	r3, r2, [r1]
 800c318:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c31a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1e5      	bne.n	800c2ec <UART_Start_Receive_IT+0x160>
 800c320:	e046      	b.n	800c3b0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c32a:	d107      	bne.n	800c33c <UART_Start_Receive_IT+0x1b0>
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d103      	bne.n	800c33c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	4a24      	ldr	r2, [pc, #144]	@ (800c3c8 <UART_Start_Receive_IT+0x23c>)
 800c338:	675a      	str	r2, [r3, #116]	@ 0x74
 800c33a:	e002      	b.n	800c342 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	4a23      	ldr	r2, [pc, #140]	@ (800c3cc <UART_Start_Receive_IT+0x240>)
 800c340:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	691b      	ldr	r3, [r3, #16]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d019      	beq.n	800c37e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c352:	e853 3f00 	ldrex	r3, [r3]
 800c356:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c35e:	677b      	str	r3, [r7, #116]	@ 0x74
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	461a      	mov	r2, r3
 800c366:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c368:	637b      	str	r3, [r7, #52]	@ 0x34
 800c36a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c36e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c370:	e841 2300 	strex	r3, r2, [r1]
 800c374:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1e6      	bne.n	800c34a <UART_Start_Receive_IT+0x1be>
 800c37c:	e018      	b.n	800c3b0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	e853 3f00 	ldrex	r3, [r3]
 800c38a:	613b      	str	r3, [r7, #16]
   return(result);
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	f043 0320 	orr.w	r3, r3, #32
 800c392:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	461a      	mov	r2, r3
 800c39a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c39c:	623b      	str	r3, [r7, #32]
 800c39e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a0:	69f9      	ldr	r1, [r7, #28]
 800c3a2:	6a3a      	ldr	r2, [r7, #32]
 800c3a4:	e841 2300 	strex	r3, r2, [r1]
 800c3a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d1e6      	bne.n	800c37e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	378c      	adds	r7, #140	@ 0x8c
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	0800cda9 	.word	0x0800cda9
 800c3c4:	0800ca49 	.word	0x0800ca49
 800c3c8:	0800c891 	.word	0x0800c891
 800c3cc:	0800c6d9 	.word	0x0800c6d9

0800c3d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b08f      	sub	sp, #60	@ 0x3c
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3de:	6a3b      	ldr	r3, [r7, #32]
 800c3e0:	e853 3f00 	ldrex	r3, [r3]
 800c3e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c3ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c3f8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c3fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3fe:	e841 2300 	strex	r3, r2, [r1]
 800c402:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1e6      	bne.n	800c3d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	3308      	adds	r3, #8
 800c410:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	e853 3f00 	ldrex	r3, [r3]
 800c418:	60bb      	str	r3, [r7, #8]
   return(result);
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c420:	633b      	str	r3, [r7, #48]	@ 0x30
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	3308      	adds	r3, #8
 800c428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c42a:	61ba      	str	r2, [r7, #24]
 800c42c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42e:	6979      	ldr	r1, [r7, #20]
 800c430:	69ba      	ldr	r2, [r7, #24]
 800c432:	e841 2300 	strex	r3, r2, [r1]
 800c436:	613b      	str	r3, [r7, #16]
   return(result);
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d1e5      	bne.n	800c40a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2220      	movs	r2, #32
 800c442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c446:	bf00      	nop
 800c448:	373c      	adds	r7, #60	@ 0x3c
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr

0800c452 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c452:	b480      	push	{r7}
 800c454:	b095      	sub	sp, #84	@ 0x54
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c462:	e853 3f00 	ldrex	r3, [r3]
 800c466:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c46a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c46e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	461a      	mov	r2, r3
 800c476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c478:	643b      	str	r3, [r7, #64]	@ 0x40
 800c47a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c47e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c480:	e841 2300 	strex	r3, r2, [r1]
 800c484:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1e6      	bne.n	800c45a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	3308      	adds	r3, #8
 800c492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c494:	6a3b      	ldr	r3, [r7, #32]
 800c496:	e853 3f00 	ldrex	r3, [r3]
 800c49a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c4a2:	f023 0301 	bic.w	r3, r3, #1
 800c4a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	3308      	adds	r3, #8
 800c4ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c4b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c4b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4b8:	e841 2300 	strex	r3, r2, [r1]
 800c4bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d1e3      	bne.n	800c48c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d118      	bne.n	800c4fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	e853 3f00 	ldrex	r3, [r3]
 800c4d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	f023 0310 	bic.w	r3, r3, #16
 800c4e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4ea:	61bb      	str	r3, [r7, #24]
 800c4ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ee:	6979      	ldr	r1, [r7, #20]
 800c4f0:	69ba      	ldr	r2, [r7, #24]
 800c4f2:	e841 2300 	strex	r3, r2, [r1]
 800c4f6:	613b      	str	r3, [r7, #16]
   return(result);
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1e6      	bne.n	800c4cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2220      	movs	r2, #32
 800c502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2200      	movs	r2, #0
 800c50a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c512:	bf00      	nop
 800c514:	3754      	adds	r7, #84	@ 0x54
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr

0800c51e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b090      	sub	sp, #64	@ 0x40
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c52a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f003 0320 	and.w	r3, r3, #32
 800c536:	2b00      	cmp	r3, #0
 800c538:	d137      	bne.n	800c5aa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c53a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c53c:	2200      	movs	r2, #0
 800c53e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	3308      	adds	r3, #8
 800c548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54c:	e853 3f00 	ldrex	r3, [r3]
 800c550:	623b      	str	r3, [r7, #32]
   return(result);
 800c552:	6a3b      	ldr	r3, [r7, #32]
 800c554:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c558:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	3308      	adds	r3, #8
 800c560:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c562:	633a      	str	r2, [r7, #48]	@ 0x30
 800c564:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c56a:	e841 2300 	strex	r3, r2, [r1]
 800c56e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1e5      	bne.n	800c542 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	e853 3f00 	ldrex	r3, [r3]
 800c582:	60fb      	str	r3, [r7, #12]
   return(result);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c58a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c58c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	461a      	mov	r2, r3
 800c592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c594:	61fb      	str	r3, [r7, #28]
 800c596:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c598:	69b9      	ldr	r1, [r7, #24]
 800c59a:	69fa      	ldr	r2, [r7, #28]
 800c59c:	e841 2300 	strex	r3, r2, [r1]
 800c5a0:	617b      	str	r3, [r7, #20]
   return(result);
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d1e6      	bne.n	800c576 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c5a8:	e002      	b.n	800c5b0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c5aa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c5ac:	f7f6 faea 	bl	8002b84 <HAL_UART_TxCpltCallback>
}
 800c5b0:	bf00      	nop
 800c5b2:	3740      	adds	r7, #64	@ 0x40
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5c4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f7ff f9de 	bl	800b988 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5cc:	bf00      	nop
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5e0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c5f0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5fc:	2b80      	cmp	r3, #128	@ 0x80
 800c5fe:	d109      	bne.n	800c614 <UART_DMAError+0x40>
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	2b21      	cmp	r3, #33	@ 0x21
 800c604:	d106      	bne.n	800c614 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	2200      	movs	r2, #0
 800c60a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c60e:	6978      	ldr	r0, [r7, #20]
 800c610:	f7ff fede 	bl	800c3d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c61e:	2b40      	cmp	r3, #64	@ 0x40
 800c620:	d109      	bne.n	800c636 <UART_DMAError+0x62>
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2b22      	cmp	r3, #34	@ 0x22
 800c626:	d106      	bne.n	800c636 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c630:	6978      	ldr	r0, [r7, #20]
 800c632:	f7ff ff0e 	bl	800c452 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c63c:	f043 0210 	orr.w	r2, r3, #16
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c646:	6978      	ldr	r0, [r7, #20]
 800c648:	f7ff f9a8 	bl	800b99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c64c:	bf00      	nop
 800c64e:	3718      	adds	r7, #24
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c660:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c672:	68f8      	ldr	r0, [r7, #12]
 800c674:	f7ff f992 	bl	800b99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c678:	bf00      	nop
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b088      	sub	sp, #32
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	e853 3f00 	ldrex	r3, [r3]
 800c694:	60bb      	str	r3, [r7, #8]
   return(result);
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c69c:	61fb      	str	r3, [r7, #28]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	61bb      	str	r3, [r7, #24]
 800c6a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6aa:	6979      	ldr	r1, [r7, #20]
 800c6ac:	69ba      	ldr	r2, [r7, #24]
 800c6ae:	e841 2300 	strex	r3, r2, [r1]
 800c6b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1e6      	bne.n	800c688 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2220      	movs	r2, #32
 800c6be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7f6 fa5b 	bl	8002b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6ce:	bf00      	nop
 800c6d0:	3720      	adds	r7, #32
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
	...

0800c6d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b09c      	sub	sp, #112	@ 0x70
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c6e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6f0:	2b22      	cmp	r3, #34	@ 0x22
 800c6f2:	f040 80be 	bne.w	800c872 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c700:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c704:	b2d9      	uxtb	r1, r3
 800c706:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c70a:	b2da      	uxtb	r2, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c710:	400a      	ands	r2, r1
 800c712:	b2d2      	uxtb	r2, r2
 800c714:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c71a:	1c5a      	adds	r2, r3, #1
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c726:	b29b      	uxth	r3, r3
 800c728:	3b01      	subs	r3, #1
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c738:	b29b      	uxth	r3, r3
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f040 80a1 	bne.w	800c882 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c748:	e853 3f00 	ldrex	r3, [r3]
 800c74c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c74e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c754:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	461a      	mov	r2, r3
 800c75c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c75e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c760:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c762:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c764:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c766:	e841 2300 	strex	r3, r2, [r1]
 800c76a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c76c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1e6      	bne.n	800c740 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3308      	adds	r3, #8
 800c778:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77c:	e853 3f00 	ldrex	r3, [r3]
 800c780:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c784:	f023 0301 	bic.w	r3, r3, #1
 800c788:	667b      	str	r3, [r7, #100]	@ 0x64
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3308      	adds	r3, #8
 800c790:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c792:	647a      	str	r2, [r7, #68]	@ 0x44
 800c794:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c796:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c798:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c79a:	e841 2300 	strex	r3, r2, [r1]
 800c79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c7a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1e5      	bne.n	800c772 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a33      	ldr	r2, [pc, #204]	@ (800c88c <UART_RxISR_8BIT+0x1b4>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d01f      	beq.n	800c804 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d018      	beq.n	800c804 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7da:	e853 3f00 	ldrex	r3, [r3]
 800c7de:	623b      	str	r3, [r7, #32]
   return(result);
 800c7e0:	6a3b      	ldr	r3, [r7, #32]
 800c7e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c7e6:	663b      	str	r3, [r7, #96]	@ 0x60
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c7f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7f8:	e841 2300 	strex	r3, r2, [r1]
 800c7fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c800:	2b00      	cmp	r3, #0
 800c802:	d1e6      	bne.n	800c7d2 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d12e      	bne.n	800c86a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	e853 3f00 	ldrex	r3, [r3]
 800c81e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f023 0310 	bic.w	r3, r3, #16
 800c826:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	461a      	mov	r2, r3
 800c82e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c830:	61fb      	str	r3, [r7, #28]
 800c832:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c834:	69b9      	ldr	r1, [r7, #24]
 800c836:	69fa      	ldr	r2, [r7, #28]
 800c838:	e841 2300 	strex	r3, r2, [r1]
 800c83c:	617b      	str	r3, [r7, #20]
   return(result);
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1e6      	bne.n	800c812 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	69db      	ldr	r3, [r3, #28]
 800c84a:	f003 0310 	and.w	r3, r3, #16
 800c84e:	2b10      	cmp	r3, #16
 800c850:	d103      	bne.n	800c85a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2210      	movs	r2, #16
 800c858:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c860:	4619      	mov	r1, r3
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f7ff f8a4 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c868:	e00b      	b.n	800c882 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7f6 f96c 	bl	8002b48 <HAL_UART_RxCpltCallback>
}
 800c870:	e007      	b.n	800c882 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	699a      	ldr	r2, [r3, #24]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f042 0208 	orr.w	r2, r2, #8
 800c880:	619a      	str	r2, [r3, #24]
}
 800c882:	bf00      	nop
 800c884:	3770      	adds	r7, #112	@ 0x70
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	40008000 	.word	0x40008000

0800c890 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b09c      	sub	sp, #112	@ 0x70
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c89e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8a8:	2b22      	cmp	r3, #34	@ 0x22
 800c8aa:	f040 80be 	bne.w	800ca2a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c8be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c8c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c8c6:	4013      	ands	r3, r2
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c8cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8d2:	1c9a      	adds	r2, r3, #2
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	3b01      	subs	r3, #1
 800c8e2:	b29a      	uxth	r2, r3
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	f040 80a1 	bne.w	800ca3a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c900:	e853 3f00 	ldrex	r3, [r3]
 800c904:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c90c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	461a      	mov	r2, r3
 800c914:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c916:	657b      	str	r3, [r7, #84]	@ 0x54
 800c918:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c91a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c91c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c91e:	e841 2300 	strex	r3, r2, [r1]
 800c922:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1e6      	bne.n	800c8f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	3308      	adds	r3, #8
 800c930:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c934:	e853 3f00 	ldrex	r3, [r3]
 800c938:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c93c:	f023 0301 	bic.w	r3, r3, #1
 800c940:	663b      	str	r3, [r7, #96]	@ 0x60
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	3308      	adds	r3, #8
 800c948:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c94a:	643a      	str	r2, [r7, #64]	@ 0x40
 800c94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c94e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c950:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c952:	e841 2300 	strex	r3, r2, [r1]
 800c956:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1e5      	bne.n	800c92a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2220      	movs	r2, #32
 800c962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a33      	ldr	r2, [pc, #204]	@ (800ca44 <UART_RxISR_16BIT+0x1b4>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d01f      	beq.n	800c9bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c986:	2b00      	cmp	r3, #0
 800c988:	d018      	beq.n	800c9bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c990:	6a3b      	ldr	r3, [r7, #32]
 800c992:	e853 3f00 	ldrex	r3, [r3]
 800c996:	61fb      	str	r3, [r7, #28]
   return(result);
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c99e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c9aa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9b0:	e841 2300 	strex	r3, r2, [r1]
 800c9b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1e6      	bne.n	800c98a <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d12e      	bne.n	800ca22 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	e853 3f00 	ldrex	r3, [r3]
 800c9d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	f023 0310 	bic.w	r3, r3, #16
 800c9de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9e8:	61bb      	str	r3, [r7, #24]
 800c9ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ec:	6979      	ldr	r1, [r7, #20]
 800c9ee:	69ba      	ldr	r2, [r7, #24]
 800c9f0:	e841 2300 	strex	r3, r2, [r1]
 800c9f4:	613b      	str	r3, [r7, #16]
   return(result);
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1e6      	bne.n	800c9ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	69db      	ldr	r3, [r3, #28]
 800ca02:	f003 0310 	and.w	r3, r3, #16
 800ca06:	2b10      	cmp	r3, #16
 800ca08:	d103      	bne.n	800ca12 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2210      	movs	r2, #16
 800ca10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ca18:	4619      	mov	r1, r3
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7fe ffc8 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca20:	e00b      	b.n	800ca3a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7f6 f890 	bl	8002b48 <HAL_UART_RxCpltCallback>
}
 800ca28:	e007      	b.n	800ca3a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	699a      	ldr	r2, [r3, #24]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f042 0208 	orr.w	r2, r2, #8
 800ca38:	619a      	str	r2, [r3, #24]
}
 800ca3a:	bf00      	nop
 800ca3c:	3770      	adds	r7, #112	@ 0x70
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	40008000 	.word	0x40008000

0800ca48 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b0ac      	sub	sp, #176	@ 0xb0
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ca56:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	69db      	ldr	r3, [r3, #28]
 800ca60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca7e:	2b22      	cmp	r3, #34	@ 0x22
 800ca80:	f040 8182 	bne.w	800cd88 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ca8a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ca8e:	e125      	b.n	800ccdc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca96:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ca9a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ca9e:	b2d9      	uxtb	r1, r3
 800caa0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800caaa:	400a      	ands	r2, r1
 800caac:	b2d2      	uxtb	r2, r2
 800caae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cab4:	1c5a      	adds	r2, r3, #1
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	3b01      	subs	r3, #1
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	69db      	ldr	r3, [r3, #28]
 800cad2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cada:	f003 0307 	and.w	r3, r3, #7
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d053      	beq.n	800cb8a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cae6:	f003 0301 	and.w	r3, r3, #1
 800caea:	2b00      	cmp	r3, #0
 800caec:	d011      	beq.n	800cb12 <UART_RxISR_8BIT_FIFOEN+0xca>
 800caee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800caf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00b      	beq.n	800cb12 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2201      	movs	r2, #1
 800cb00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb08:	f043 0201 	orr.w	r2, r3, #1
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb16:	f003 0302 	and.w	r3, r3, #2
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d011      	beq.n	800cb42 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800cb1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cb22:	f003 0301 	and.w	r3, r3, #1
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00b      	beq.n	800cb42 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2202      	movs	r2, #2
 800cb30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb38:	f043 0204 	orr.w	r2, r3, #4
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb46:	f003 0304 	and.w	r3, r3, #4
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d011      	beq.n	800cb72 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800cb4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cb52:	f003 0301 	and.w	r3, r3, #1
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00b      	beq.n	800cb72 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2204      	movs	r2, #4
 800cb60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb68:	f043 0202 	orr.w	r2, r3, #2
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d006      	beq.n	800cb8a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f7fe ff0d 	bl	800b99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f040 80a2 	bne.w	800ccdc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cba0:	e853 3f00 	ldrex	r3, [r3]
 800cba4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800cba6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cbac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cbba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cbbc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbbe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800cbc0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cbc2:	e841 2300 	strex	r3, r2, [r1]
 800cbc6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800cbc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1e4      	bne.n	800cb98 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	3308      	adds	r3, #8
 800cbd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbd8:	e853 3f00 	ldrex	r3, [r3]
 800cbdc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800cbde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cbe0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cbe4:	f023 0301 	bic.w	r3, r3, #1
 800cbe8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	3308      	adds	r3, #8
 800cbf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cbf6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800cbf8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800cbfc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cbfe:	e841 2300 	strex	r3, r2, [r1]
 800cc02:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800cc04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1e1      	bne.n	800cbce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2220      	movs	r2, #32
 800cc0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4a5f      	ldr	r2, [pc, #380]	@ (800cda0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d021      	beq.n	800cc6c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d01a      	beq.n	800cc6c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc3e:	e853 3f00 	ldrex	r3, [r3]
 800cc42:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cc44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cc4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	461a      	mov	r2, r3
 800cc54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cc58:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc5a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc5c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc60:	e841 2300 	strex	r3, r2, [r1]
 800cc64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cc66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1e4      	bne.n	800cc36 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d130      	bne.n	800ccd6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc82:	e853 3f00 	ldrex	r3, [r3]
 800cc86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc8a:	f023 0310 	bic.w	r3, r3, #16
 800cc8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	461a      	mov	r2, r3
 800cc98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc9c:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cca2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cca4:	e841 2300 	strex	r3, r2, [r1]
 800cca8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ccaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d1e4      	bne.n	800cc7a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	69db      	ldr	r3, [r3, #28]
 800ccb6:	f003 0310 	and.w	r3, r3, #16
 800ccba:	2b10      	cmp	r3, #16
 800ccbc:	d103      	bne.n	800ccc6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2210      	movs	r2, #16
 800ccc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cccc:	4619      	mov	r1, r3
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7fe fe6e 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
 800ccd4:	e002      	b.n	800ccdc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f7f5 ff36 	bl	8002b48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ccdc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d006      	beq.n	800ccf2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800cce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cce8:	f003 0320 	and.w	r3, r3, #32
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f47f aecf 	bne.w	800ca90 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ccf8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ccfc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d049      	beq.n	800cd98 <UART_RxISR_8BIT_FIFOEN+0x350>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cd0a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d242      	bcs.n	800cd98 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	3308      	adds	r3, #8
 800cd18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd1a:	6a3b      	ldr	r3, [r7, #32]
 800cd1c:	e853 3f00 	ldrex	r3, [r3]
 800cd20:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cd28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	3308      	adds	r3, #8
 800cd32:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cd36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cd38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd3e:	e841 2300 	strex	r3, r2, [r1]
 800cd42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d1e3      	bne.n	800cd12 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	4a15      	ldr	r2, [pc, #84]	@ (800cda4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800cd4e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	e853 3f00 	ldrex	r3, [r3]
 800cd5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	f043 0320 	orr.w	r3, r3, #32
 800cd64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cd72:	61bb      	str	r3, [r7, #24]
 800cd74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd76:	6979      	ldr	r1, [r7, #20]
 800cd78:	69ba      	ldr	r2, [r7, #24]
 800cd7a:	e841 2300 	strex	r3, r2, [r1]
 800cd7e:	613b      	str	r3, [r7, #16]
   return(result);
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1e4      	bne.n	800cd50 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd86:	e007      	b.n	800cd98 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	699a      	ldr	r2, [r3, #24]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f042 0208 	orr.w	r2, r2, #8
 800cd96:	619a      	str	r2, [r3, #24]
}
 800cd98:	bf00      	nop
 800cd9a:	37b0      	adds	r7, #176	@ 0xb0
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	40008000 	.word	0x40008000
 800cda4:	0800c6d9 	.word	0x0800c6d9

0800cda8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b0ae      	sub	sp, #184	@ 0xb8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cdb6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	69db      	ldr	r3, [r3, #28]
 800cdc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdde:	2b22      	cmp	r3, #34	@ 0x22
 800cde0:	f040 8186 	bne.w	800d0f0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cdea:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cdee:	e129      	b.n	800d044 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdf6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ce02:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ce06:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ce0a:	4013      	ands	r3, r2
 800ce0c:	b29a      	uxth	r2, r3
 800ce0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ce12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce18:	1c9a      	adds	r2, r3, #2
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	3b01      	subs	r3, #1
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	69db      	ldr	r3, [r3, #28]
 800ce36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ce3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce3e:	f003 0307 	and.w	r3, r3, #7
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d053      	beq.n	800ceee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce4a:	f003 0301 	and.w	r3, r3, #1
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d011      	beq.n	800ce76 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ce52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00b      	beq.n	800ce76 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2201      	movs	r2, #1
 800ce64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce6c:	f043 0201 	orr.w	r2, r3, #1
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce7a:	f003 0302 	and.w	r3, r3, #2
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d011      	beq.n	800cea6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ce82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce86:	f003 0301 	and.w	r3, r3, #1
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00b      	beq.n	800cea6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2202      	movs	r2, #2
 800ce94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce9c:	f043 0204 	orr.w	r2, r3, #4
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cea6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ceaa:	f003 0304 	and.w	r3, r3, #4
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d011      	beq.n	800ced6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ceb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ceb6:	f003 0301 	and.w	r3, r3, #1
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00b      	beq.n	800ced6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2204      	movs	r2, #4
 800cec4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cecc:	f043 0202 	orr.w	r2, r3, #2
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d006      	beq.n	800ceee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7fe fd5b 	bl	800b99c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2200      	movs	r2, #0
 800ceea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f040 80a4 	bne.w	800d044 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf04:	e853 3f00 	ldrex	r3, [r3]
 800cf08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cf0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	461a      	mov	r2, r3
 800cf1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cf22:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cf26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cf2a:	e841 2300 	strex	r3, r2, [r1]
 800cf2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cf30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d1e2      	bne.n	800cefc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	3308      	adds	r3, #8
 800cf3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf40:	e853 3f00 	ldrex	r3, [r3]
 800cf44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cf46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cf4c:	f023 0301 	bic.w	r3, r3, #1
 800cf50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	3308      	adds	r3, #8
 800cf5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cf5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cf60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf66:	e841 2300 	strex	r3, r2, [r1]
 800cf6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cf6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d1e1      	bne.n	800cf36 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2220      	movs	r2, #32
 800cf76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a5f      	ldr	r2, [pc, #380]	@ (800d108 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d021      	beq.n	800cfd4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d01a      	beq.n	800cfd4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfa6:	e853 3f00 	ldrex	r3, [r3]
 800cfaa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cfac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cfb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	461a      	mov	r2, r3
 800cfbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cfc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cfc2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cfc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cfc8:	e841 2300 	strex	r3, r2, [r1]
 800cfcc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cfce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d1e4      	bne.n	800cf9e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d130      	bne.n	800d03e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfea:	e853 3f00 	ldrex	r3, [r3]
 800cfee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cff2:	f023 0310 	bic.w	r3, r3, #16
 800cff6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	461a      	mov	r2, r3
 800d000:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d004:	647b      	str	r3, [r7, #68]	@ 0x44
 800d006:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d008:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d00a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d00c:	e841 2300 	strex	r3, r2, [r1]
 800d010:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d014:	2b00      	cmp	r3, #0
 800d016:	d1e4      	bne.n	800cfe2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	69db      	ldr	r3, [r3, #28]
 800d01e:	f003 0310 	and.w	r3, r3, #16
 800d022:	2b10      	cmp	r3, #16
 800d024:	d103      	bne.n	800d02e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	2210      	movs	r2, #16
 800d02c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d034:	4619      	mov	r1, r3
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f7fe fcba 	bl	800b9b0 <HAL_UARTEx_RxEventCallback>
 800d03c:	e002      	b.n	800d044 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7f5 fd82 	bl	8002b48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d044:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d006      	beq.n	800d05a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800d04c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d050:	f003 0320 	and.w	r3, r3, #32
 800d054:	2b00      	cmp	r3, #0
 800d056:	f47f aecb 	bne.w	800cdf0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d060:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d064:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d049      	beq.n	800d100 <UART_RxISR_16BIT_FIFOEN+0x358>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d072:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d076:	429a      	cmp	r2, r3
 800d078:	d242      	bcs.n	800d100 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	3308      	adds	r3, #8
 800d080:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d084:	e853 3f00 	ldrex	r3, [r3]
 800d088:	623b      	str	r3, [r7, #32]
   return(result);
 800d08a:	6a3b      	ldr	r3, [r7, #32]
 800d08c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d090:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	3308      	adds	r3, #8
 800d09a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d09e:	633a      	str	r2, [r7, #48]	@ 0x30
 800d0a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d0a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0a6:	e841 2300 	strex	r3, r2, [r1]
 800d0aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1e3      	bne.n	800d07a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4a15      	ldr	r2, [pc, #84]	@ (800d10c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d0b6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	e853 3f00 	ldrex	r3, [r3]
 800d0c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f043 0320 	orr.w	r3, r3, #32
 800d0cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d0da:	61fb      	str	r3, [r7, #28]
 800d0dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0de:	69b9      	ldr	r1, [r7, #24]
 800d0e0:	69fa      	ldr	r2, [r7, #28]
 800d0e2:	e841 2300 	strex	r3, r2, [r1]
 800d0e6:	617b      	str	r3, [r7, #20]
   return(result);
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d1e4      	bne.n	800d0b8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d0ee:	e007      	b.n	800d100 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	699a      	ldr	r2, [r3, #24]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f042 0208 	orr.w	r2, r2, #8
 800d0fe:	619a      	str	r2, [r3, #24]
}
 800d100:	bf00      	nop
 800d102:	37b8      	adds	r7, #184	@ 0xb8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	40008000 	.word	0x40008000
 800d10c:	0800c891 	.word	0x0800c891

0800d110 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d118:	bf00      	nop
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d12c:	bf00      	nop
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d140:	bf00      	nop
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	d101      	bne.n	800d162 <HAL_UARTEx_EnableFifoMode+0x16>
 800d15e:	2302      	movs	r3, #2
 800d160:	e02b      	b.n	800d1ba <HAL_UARTEx_EnableFifoMode+0x6e>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2201      	movs	r2, #1
 800d166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2224      	movs	r2, #36	@ 0x24
 800d16e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f022 0201 	bic.w	r2, r2, #1
 800d188:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d190:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800d198:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f000 f88a 	bl	800d2bc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2220      	movs	r2, #32
 800d1ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b084      	sub	sp, #16
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
 800d1ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d101      	bne.n	800d1da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d1d6:	2302      	movs	r3, #2
 800d1d8:	e02d      	b.n	800d236 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2224      	movs	r2, #36	@ 0x24
 800d1e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f022 0201 	bic.w	r2, r2, #1
 800d200:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	683a      	ldr	r2, [r7, #0]
 800d212:	430a      	orrs	r2, r1
 800d214:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 f850 	bl	800d2bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2220      	movs	r2, #32
 800d228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d234:	2300      	movs	r3, #0
}
 800d236:	4618      	mov	r0, r3
 800d238:	3710      	adds	r7, #16
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d23e:	b580      	push	{r7, lr}
 800d240:	b084      	sub	sp, #16
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
 800d246:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d101      	bne.n	800d256 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d252:	2302      	movs	r3, #2
 800d254:	e02d      	b.n	800d2b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2201      	movs	r2, #1
 800d25a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2224      	movs	r2, #36	@ 0x24
 800d262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f022 0201 	bic.w	r2, r2, #1
 800d27c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	683a      	ldr	r2, [r7, #0]
 800d28e:	430a      	orrs	r2, r1
 800d290:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 f812 	bl	800d2bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2220      	movs	r2, #32
 800d2a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d2b0:	2300      	movs	r3, #0
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
	...

0800d2bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d108      	bne.n	800d2de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d2dc:	e031      	b.n	800d342 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d2de:	2308      	movs	r3, #8
 800d2e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d2e2:	2308      	movs	r3, #8
 800d2e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	0e5b      	lsrs	r3, r3, #25
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	f003 0307 	and.w	r3, r3, #7
 800d2f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	689b      	ldr	r3, [r3, #8]
 800d2fc:	0f5b      	lsrs	r3, r3, #29
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	f003 0307 	and.w	r3, r3, #7
 800d304:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d306:	7bbb      	ldrb	r3, [r7, #14]
 800d308:	7b3a      	ldrb	r2, [r7, #12]
 800d30a:	4911      	ldr	r1, [pc, #68]	@ (800d350 <UARTEx_SetNbDataToProcess+0x94>)
 800d30c:	5c8a      	ldrb	r2, [r1, r2]
 800d30e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d312:	7b3a      	ldrb	r2, [r7, #12]
 800d314:	490f      	ldr	r1, [pc, #60]	@ (800d354 <UARTEx_SetNbDataToProcess+0x98>)
 800d316:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d318:	fb93 f3f2 	sdiv	r3, r3, r2
 800d31c:	b29a      	uxth	r2, r3
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d324:	7bfb      	ldrb	r3, [r7, #15]
 800d326:	7b7a      	ldrb	r2, [r7, #13]
 800d328:	4909      	ldr	r1, [pc, #36]	@ (800d350 <UARTEx_SetNbDataToProcess+0x94>)
 800d32a:	5c8a      	ldrb	r2, [r1, r2]
 800d32c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d330:	7b7a      	ldrb	r2, [r7, #13]
 800d332:	4908      	ldr	r1, [pc, #32]	@ (800d354 <UARTEx_SetNbDataToProcess+0x98>)
 800d334:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d336:	fb93 f3f2 	sdiv	r3, r3, r2
 800d33a:	b29a      	uxth	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d342:	bf00      	nop
 800d344:	3714      	adds	r7, #20
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop
 800d350:	08030b10 	.word	0x08030b10
 800d354:	08030b18 	.word	0x08030b18

0800d358 <Chk_ParamValidity>:
* @param  param: Parameter 
* @param  max_param_value: Max Parameter Value 
* @retval MOBLE_RESULT
*/ 
 MOBLE_RESULT Chk_ParamValidity(MOBLEUINT8 param, MOBLEUINT8 max_param_val )
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	4603      	mov	r3, r0
 800d360:	460a      	mov	r2, r1
 800d362:	71fb      	strb	r3, [r7, #7]
 800d364:	4613      	mov	r3, r2
 800d366:	71bb      	strb	r3, [r7, #6]
  if (param > max_param_val) 
 800d368:	79fa      	ldrb	r2, [r7, #7]
 800d36a:	79bb      	ldrb	r3, [r7, #6]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d901      	bls.n	800d374 <Chk_ParamValidity+0x1c>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d370:	2303      	movs	r3, #3
 800d372:	e000      	b.n	800d376 <Chk_ParamValidity+0x1e>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800d374:	2300      	movs	r3, #0
  }
}
 800d376:	4618      	mov	r0, r3
 800d378:	370c      	adds	r7, #12
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr

0800d382 <Chk_RangeValidity>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Chk_RangeValidity(MOBLEUINT16 min_param_value, 
                                const MOBLEUINT8* param,
                                                     MOBLEUINT16 max_param_value )
{
 800d382:	b480      	push	{r7}
 800d384:	b085      	sub	sp, #20
 800d386:	af00      	add	r7, sp, #0
 800d388:	4603      	mov	r3, r0
 800d38a:	6039      	str	r1, [r7, #0]
 800d38c:	80fb      	strh	r3, [r7, #6]
 800d38e:	4613      	mov	r3, r2
 800d390:	80bb      	strh	r3, [r7, #4]
   MOBLEUINT16 minRange;
   MOBLEUINT16 maxRange;
    
    minRange =  param[1] << 8;
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	3301      	adds	r3, #1
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	021b      	lsls	r3, r3, #8
 800d39a:	81fb      	strh	r3, [r7, #14]
    minRange |= param[0];
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	89fb      	ldrh	r3, [r7, #14]
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	81fb      	strh	r3, [r7, #14]
    
    maxRange =  param[3] << 8;
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	3303      	adds	r3, #3
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	021b      	lsls	r3, r3, #8
 800d3b0:	81bb      	strh	r3, [r7, #12]
    maxRange |= param[2];
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	3302      	adds	r3, #2
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	89bb      	ldrh	r3, [r7, #12]
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	81bb      	strh	r3, [r7, #12]
    
  if(minRange < min_param_value)
 800d3c0:	89fa      	ldrh	r2, [r7, #14]
 800d3c2:	88fb      	ldrh	r3, [r7, #6]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d201      	bcs.n	800d3cc <Chk_RangeValidity+0x4a>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d3c8:	2303      	movs	r3, #3
 800d3ca:	e00a      	b.n	800d3e2 <Chk_RangeValidity+0x60>
  }
  
  if((maxRange > max_param_value) || (maxRange < minRange))        
 800d3cc:	89ba      	ldrh	r2, [r7, #12]
 800d3ce:	88bb      	ldrh	r3, [r7, #4]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d803      	bhi.n	800d3dc <Chk_RangeValidity+0x5a>
 800d3d4:	89ba      	ldrh	r2, [r7, #12]
 800d3d6:	89fb      	ldrh	r3, [r7, #14]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d201      	bcs.n	800d3e0 <Chk_RangeValidity+0x5e>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d3dc:	2303      	movs	r3, #3
 800d3de:	e000      	b.n	800d3e2 <Chk_RangeValidity+0x60>
  } 
  
  return MOBLE_RESULT_SUCCESS;  
 800d3e0:	2300      	movs	r3, #0
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3714      	adds	r7, #20
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr

0800d3ee <Chk_OptionalParamValidity>:
*/ 
MOBLE_RESULT Chk_OptionalParamValidity(MOBLEUINT8 param_length,
                                       MOBLEUINT8 mandatory_length,
                                       MOBLEUINT8 param, 
                                       MOBLEUINT8 max_param_value  )
{
 800d3ee:	b490      	push	{r4, r7}
 800d3f0:	b082      	sub	sp, #8
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	4608      	mov	r0, r1
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	4623      	mov	r3, r4
 800d3fe:	71fb      	strb	r3, [r7, #7]
 800d400:	4603      	mov	r3, r0
 800d402:	71bb      	strb	r3, [r7, #6]
 800d404:	460b      	mov	r3, r1
 800d406:	717b      	strb	r3, [r7, #5]
 800d408:	4613      	mov	r3, r2
 800d40a:	713b      	strb	r3, [r7, #4]
  if ((param_length > mandatory_length) && (param > max_param_value))
 800d40c:	79fa      	ldrb	r2, [r7, #7]
 800d40e:	79bb      	ldrb	r3, [r7, #6]
 800d410:	429a      	cmp	r2, r3
 800d412:	d905      	bls.n	800d420 <Chk_OptionalParamValidity+0x32>
 800d414:	797a      	ldrb	r2, [r7, #5]
 800d416:	793b      	ldrb	r3, [r7, #4]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d901      	bls.n	800d420 <Chk_OptionalParamValidity+0x32>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d41c:	2303      	movs	r3, #3
 800d41e:	e000      	b.n	800d422 <Chk_OptionalParamValidity+0x34>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800d420:	2300      	movs	r3, #0
  }
}
 800d422:	4618      	mov	r0, r3
 800d424:	3708      	adds	r7, #8
 800d426:	46bd      	mov	sp, r7
 800d428:	bc90      	pop	{r4, r7}
 800d42a:	4770      	bx	lr

0800d42c <Chk_ParamMinMaxIntValidity>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Chk_ParamMinMaxIntValidity(MOBLEINT16 min_param_value,
                                        const MOBLEUINT8* param,
                                                     MOBLEINT16 max_param_value )
{
 800d42c:	b480      	push	{r7}
 800d42e:	b085      	sub	sp, #20
 800d430:	af00      	add	r7, sp, #0
 800d432:	4603      	mov	r3, r0
 800d434:	6039      	str	r1, [r7, #0]
 800d436:	80fb      	strh	r3, [r7, #6]
 800d438:	4613      	mov	r3, r2
 800d43a:	80bb      	strh	r3, [r7, #4]
  MOBLEINT16 param_State1;
    
  param_State1 =  param[1] << 8;
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	3301      	adds	r3, #1
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	021b      	lsls	r3, r3, #8
 800d444:	81fb      	strh	r3, [r7, #14]
  param_State1 |= param[0];
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	b21a      	sxth	r2, r3
 800d44c:	89fb      	ldrh	r3, [r7, #14]
 800d44e:	4313      	orrs	r3, r2
 800d450:	81fb      	strh	r3, [r7, #14]
    
  if((param_State1 < min_param_value) || (param_State1 > max_param_value))
 800d452:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	db05      	blt.n	800d46a <Chk_ParamMinMaxIntValidity+0x3e>
 800d45e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d462:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d466:	429a      	cmp	r2, r3
 800d468:	dd01      	ble.n	800d46e <Chk_ParamMinMaxIntValidity+0x42>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d46a:	2303      	movs	r3, #3
 800d46c:	e000      	b.n	800d470 <Chk_ParamMinMaxIntValidity+0x44>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800d46e:	2300      	movs	r3, #0
  }
}
 800d470:	4618      	mov	r0, r3
 800d472:	3714      	adds	r7, #20
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <Chk_ParamMinMaxValidity>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Chk_ParamMinMaxValidity(MOBLEUINT16 min_param_value,
                                     const MOBLEUINT8* param,
                                                     MOBLEUINT16 max_param_value )
{
 800d47c:	b480      	push	{r7}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	4603      	mov	r3, r0
 800d484:	6039      	str	r1, [r7, #0]
 800d486:	80fb      	strh	r3, [r7, #6]
 800d488:	4613      	mov	r3, r2
 800d48a:	80bb      	strh	r3, [r7, #4]
   MOBLEUINT16 param_State1;
    
    param_State1 =  param[1] << 8;
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	3301      	adds	r3, #1
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	021b      	lsls	r3, r3, #8
 800d494:	81fb      	strh	r3, [r7, #14]
    param_State1 |= param[0];
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	461a      	mov	r2, r3
 800d49c:	89fb      	ldrh	r3, [r7, #14]
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	81fb      	strh	r3, [r7, #14]

  if((param_State1 < min_param_value) || (param_State1 > max_param_value))
 800d4a2:	89fa      	ldrh	r2, [r7, #14]
 800d4a4:	88fb      	ldrh	r3, [r7, #6]
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d303      	bcc.n	800d4b2 <Chk_ParamMinMaxValidity+0x36>
 800d4aa:	89fa      	ldrh	r2, [r7, #14]
 800d4ac:	88bb      	ldrh	r3, [r7, #4]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d901      	bls.n	800d4b6 <Chk_ParamMinMaxValidity+0x3a>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d4b2:	2303      	movs	r3, #3
 800d4b4:	e000      	b.n	800d4b8 <Chk_ParamMinMaxValidity+0x3c>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800d4b6:	2300      	movs	r3, #0
  }
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3714      	adds	r7, #20
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <Get_StepResolutionValue>:
* @brief  Get actual value in milliseconds from default transition step resolution 
* @param  time_param: integer value received for transition time
* @retval stepResolution 
 */                                         
MOBLEUINT32 Get_StepResolutionValue(MOBLEUINT8 time_param)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT32 stepResolution = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	60fb      	str	r3, [r7, #12]
  
  if(time_param == STEP_HEX_VALUE_0)
 800d4d2:	79fb      	ldrb	r3, [r7, #7]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d102      	bne.n	800d4de <Get_StepResolutionValue+0x1a>
  {
    stepResolution = STEP_RESOLUTION_100MS;   
 800d4d8:	2364      	movs	r3, #100	@ 0x64
 800d4da:	60fb      	str	r3, [r7, #12]
 800d4dc:	e015      	b.n	800d50a <Get_StepResolutionValue+0x46>
  }
  else if(time_param == STEP_HEX_VALUE_1)
 800d4de:	79fb      	ldrb	r3, [r7, #7]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d103      	bne.n	800d4ec <Get_StepResolutionValue+0x28>
  {
    stepResolution = STEP_RESOLUTION_1S;   
 800d4e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d4e8:	60fb      	str	r3, [r7, #12]
 800d4ea:	e00e      	b.n	800d50a <Get_StepResolutionValue+0x46>
  }
  else if(time_param == STEP_HEX_VALUE_2)
 800d4ec:	79fb      	ldrb	r3, [r7, #7]
 800d4ee:	2b02      	cmp	r3, #2
 800d4f0:	d103      	bne.n	800d4fa <Get_StepResolutionValue+0x36>
  {
    stepResolution = STEP_RESOLUTION_10S;   
 800d4f2:	f242 7310 	movw	r3, #10000	@ 0x2710
 800d4f6:	60fb      	str	r3, [r7, #12]
 800d4f8:	e007      	b.n	800d50a <Get_StepResolutionValue+0x46>
  }
  else if(time_param == STEP_HEX_VALUE_3)
 800d4fa:	79fb      	ldrb	r3, [r7, #7]
 800d4fc:	2b03      	cmp	r3, #3
 800d4fe:	d102      	bne.n	800d506 <Get_StepResolutionValue+0x42>
  {
    stepResolution = STEP_RESOLUTION_10M;
 800d500:	4b05      	ldr	r3, [pc, #20]	@ (800d518 <Get_StepResolutionValue+0x54>)
 800d502:	60fb      	str	r3, [r7, #12]
 800d504:	e001      	b.n	800d50a <Get_StepResolutionValue+0x46>
  }
  else
  {
    stepResolution = 0;   
 800d506:	2300      	movs	r3, #0
 800d508:	60fb      	str	r3, [r7, #12]
  }  
  
  return stepResolution;  
 800d50a:	68fb      	ldr	r3, [r7, #12]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3714      	adds	r7, #20
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr
 800d518:	000927c0 	.word	0x000927c0

0800d51c <TraceHeader>:
* @param  func_name: function pointer.
* @param  mode: Flag
* @retval void
*/ 
void TraceHeader(const char* func_name, int mode)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
    if (mode >= 0)
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	db08      	blt.n	800d53e <TraceHeader+0x22>
        printf("%ld %s - ", Clock_Time(), func_name);
 800d52c:	f7fa fc76 	bl	8007e1c <HAL_GetTick>
 800d530:	4603      	mov	r3, r0
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	4619      	mov	r1, r3
 800d536:	4808      	ldr	r0, [pc, #32]	@ (800d558 <TraceHeader+0x3c>)
 800d538:	f01b fc9a 	bl	8028e70 <iprintf>
    else
        printf("%ld %s - <<<ERROR>>>", Clock_Time(), func_name);
}    
 800d53c:	e007      	b.n	800d54e <TraceHeader+0x32>
        printf("%ld %s - <<<ERROR>>>", Clock_Time(), func_name);
 800d53e:	f7fa fc6d 	bl	8007e1c <HAL_GetTick>
 800d542:	4603      	mov	r3, r0
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	4619      	mov	r1, r3
 800d548:	4804      	ldr	r0, [pc, #16]	@ (800d55c <TraceHeader+0x40>)
 800d54a:	f01b fc91 	bl	8028e70 <iprintf>
}    
 800d54e:	bf00      	nop
 800d550:	3708      	adds	r7, #8
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	0802e6c0 	.word	0x0802e6c0
 800d55c:	0802e6cc 	.word	0x0802e6cc

0800d560 <Model_RestoreStates>:
*        saved states.
* @param void.
* return void.
*/
void Model_RestoreStates(MOBLEUINT8 const *pModelState_Load, MOBLEUINT8 size)
{ 
 800d560:	b580      	push	{r7, lr}
 800d562:	b090      	sub	sp, #64	@ 0x40
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	460b      	mov	r3, r1
 800d56a:	70fb      	strb	r3, [r7, #3]
  MOBLEUINT8 setData[4];
  MOBLE_ADDRESS publishAddress;
  MOBLEUINT16 model_ID = 0;
 800d56c:	2300      	movs	r3, #0
 800d56e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  MOBLEUINT16 opcode = 0;
 800d570:	2300      	movs	r3, #0
 800d572:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  MOBLEUINT32 length = 0;
 800d574:	2300      	movs	r3, #0
 800d576:	637b      	str	r3, [r7, #52]	@ 0x34
  MOBLEUINT16 dstPeer;
  MODEL_MessageHeader_t msgParam;
  
  MOBLEUINT16 saveBuffSize;
  
  my_Address = BLEMesh_GetAddress(); /* Get the Primary address */
 800d578:	f00f fa80 	bl	801ca7c <BLEMesh_GetAddress>
 800d57c:	4603      	mov	r3, r0
 800d57e:	877b      	strh	r3, [r7, #58]	@ 0x3a
  
  Models_ParamNvm_t Models_ParamNvm[APPLICATION_NUMBER_OF_ELEMENTS];
  
  saveBuffSize = sizeof(Models_ParamNvm);
 800d580:	2310      	movs	r3, #16
 800d582:	867b      	strh	r3, [r7, #50]	@ 0x32
  
  TRACE_I(TF_NVM,"Retrieved data from flash \r\n");
  for(MOBLEUINT8 count=0;count<saveBuffSize;count++)
 800d584:	2300      	movs	r3, #0
 800d586:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 800d58a:	e004      	b.n	800d596 <Model_RestoreStates+0x36>
 800d58c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d590:	3301      	adds	r3, #1
 800d592:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 800d596:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d8f4      	bhi.n	800d58c <Model_RestoreStates+0x2c>
  {
    TRACE_I(TF_NVM,"%.2x %c",pModelState_Load[count],' ');
  }
  TRACE_I(TF_NVM,"\r\n");
  
  if (size > 0)
 800d5a2:	78fb      	ldrb	r3, [r7, #3]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	f000 80c6 	beq.w	800d736 <Model_RestoreStates+0x1d6>
  {
    for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 800d5b0:	e0bc      	b.n	800d72c <Model_RestoreStates+0x1cc>
    {
      
      memcpy((void*)&Models_ParamNvm,pModelState_Load,sizeof(Models_ParamNvm));
 800d5b2:	f107 030c 	add.w	r3, r7, #12
 800d5b6:	2210      	movs	r2, #16
 800d5b8:	6879      	ldr	r1, [r7, #4]
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f01b fe87 	bl	80292ce <memcpy>
      
      Generic_RestoreModelStates(&Models_ParamNvm[elementIndex] , elementIndex);
 800d5c0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d5c4:	f107 020c 	add.w	r2, r7, #12
 800d5c8:	011b      	lsls	r3, r3, #4
 800d5ca:	4413      	add	r3, r2
 800d5cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d5d0:	4611      	mov	r1, r2
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f001 fe9e 	bl	800f314 <Generic_RestoreModelStates>
      Light_RestoreModelStates(&Models_ParamNvm[elementIndex] , elementIndex);
 800d5d8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d5dc:	f107 020c 	add.w	r2, r7, #12
 800d5e0:	011b      	lsls	r3, r3, #4
 800d5e2:	4413      	add	r3, r2
 800d5e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d5e8:	4611      	mov	r1, r2
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f004 f986 	bl	80118fc <Light_RestoreModelStates>
      
      dstPeer = my_Address+elementIndex;
 800d5f0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d5f4:	b29a      	uxth	r2, r3
 800d5f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d5f8:	4413      	add	r3, r2
 800d5fa:	863b      	strh	r3, [r7, #48]	@ 0x30
    
      /* Initialize the messageParam */
      msgParam.dst_peer = dstPeer;
 800d5fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d5fe:	847b      	strh	r3, [r7, #34]	@ 0x22
      msgParam.peer_addr = dstPeer;
 800d600:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d602:	843b      	strh	r3, [r7, #32]
      msgParam.elementIndex = elementIndex;
 800d604:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d608:	773b      	strb	r3, [r7, #28]
      msgParam.rcvdAppKeyOffset = 0;
 800d60a:	2300      	movs	r3, #0
 800d60c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
      msgParam.rcvdNetKeyOffset = 0;
 800d610:	2300      	movs	r3, #0
 800d612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      msgParam.rssi = 0;
 800d616:	2300      	movs	r3, #0
 800d618:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      msgParam.ttl = 0;
 800d61c:	2300      	movs	r3, #0
 800d61e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      
      switch(Models_ParamNvm[elementIndex].Restore_Flag)  
 800d622:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d626:	011b      	lsls	r3, r3, #4
 800d628:	3340      	adds	r3, #64	@ 0x40
 800d62a:	443b      	add	r3, r7
 800d62c:	3b34      	subs	r3, #52	@ 0x34
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	2bfe      	cmp	r3, #254	@ 0xfe
 800d632:	d057      	beq.n	800d6e4 <Model_RestoreStates+0x184>
 800d634:	2bfe      	cmp	r3, #254	@ 0xfe
 800d636:	dc57      	bgt.n	800d6e8 <Model_RestoreStates+0x188>
 800d638:	2b03      	cmp	r3, #3
 800d63a:	d02f      	beq.n	800d69c <Model_RestoreStates+0x13c>
 800d63c:	2b03      	cmp	r3, #3
 800d63e:	dc53      	bgt.n	800d6e8 <Model_RestoreStates+0x188>
 800d640:	2b01      	cmp	r3, #1
 800d642:	d002      	beq.n	800d64a <Model_RestoreStates+0xea>
 800d644:	2b02      	cmp	r3, #2
 800d646:	d013      	beq.n	800d670 <Model_RestoreStates+0x110>
        }
        
        default: 
        {
          TRACE_M(TF_LIGHT_M, "No Saved Data Found \r\n");
          break;
 800d648:	e04e      	b.n	800d6e8 <Model_RestoreStates+0x188>
          Generic_OnOffPowerOnValue(&Models_ParamNvm[elementIndex], &msgParam);				
 800d64a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d64e:	f107 020c 	add.w	r2, r7, #12
 800d652:	011b      	lsls	r3, r3, #4
 800d654:	4413      	add	r3, r2
 800d656:	f107 021c 	add.w	r2, r7, #28
 800d65a:	4611      	mov	r1, r2
 800d65c:	4618      	mov	r0, r3
 800d65e:	f000 f86e 	bl	800d73e <Generic_OnOffPowerOnValue>
          opcode = GENERIC_ON_OFF_SET_UNACK;
 800d662:	f248 2303 	movw	r3, #33283	@ 0x8203
 800d666:	87bb      	strh	r3, [r7, #60]	@ 0x3c
          model_ID = GENERIC_ONOFF_SERVER_MODEL_ID;
 800d668:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d66c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
          break;
 800d66e:	e03c      	b.n	800d6ea <Model_RestoreStates+0x18a>
          CopyU8LittleEndienArray_fromU16word (setData, Models_ParamNvm[elementIndex].Generic_Level);
 800d670:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d674:	011b      	lsls	r3, r3, #4
 800d676:	3340      	adds	r3, #64	@ 0x40
 800d678:	443b      	add	r3, r7
 800d67a:	3b2e      	subs	r3, #46	@ 0x2e
 800d67c:	881a      	ldrh	r2, [r3, #0]
 800d67e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d682:	4611      	mov	r1, r2
 800d684:	4618      	mov	r0, r3
 800d686:	f000 f941 	bl	800d90c <CopyU8LittleEndienArray_fromU16word>
          Generic_Level_Set(setData,2, &msgParam);
 800d68a:	f107 021c 	add.w	r2, r7, #28
 800d68e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d692:	2102      	movs	r1, #2
 800d694:	4618      	mov	r0, r3
 800d696:	f000 fb55 	bl	800dd44 <Generic_Level_Set>
          break;
 800d69a:	e026      	b.n	800d6ea <Model_RestoreStates+0x18a>
          light_LightnessValue = Light_lightnessPowerOnValue(&Models_ParamNvm[elementIndex], &msgParam);
 800d69c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d6a0:	f107 020c 	add.w	r2, r7, #12
 800d6a4:	011b      	lsls	r3, r3, #4
 800d6a6:	4413      	add	r3, r2
 800d6a8:	f107 021c 	add.w	r2, r7, #28
 800d6ac:	4611      	mov	r1, r2
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f000 f882 	bl	800d7b8 <Light_lightnessPowerOnValue>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
          CopyU8LittleEndienArray_fromU16word (setData, light_LightnessValue);
 800d6b8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d6ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d6be:	4611      	mov	r1, r2
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f000 f923 	bl	800d90c <CopyU8LittleEndienArray_fromU16word>
          Light_Lightness_Set(setData, 2, &msgParam);
 800d6c6:	f107 021c 	add.w	r2, r7, #28
 800d6ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d6ce:	2102      	movs	r1, #2
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f001 fe99 	bl	800f408 <Light_Lightness_Set>
          opcode = LIGHT_LIGHTNESS_SET_UNACK;
 800d6d6:	f248 234d 	movw	r3, #33357	@ 0x824d
 800d6da:	87bb      	strh	r3, [r7, #60]	@ 0x3c
          model_ID = LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 800d6dc:	f44f 5398 	mov.w	r3, #4864	@ 0x1300
 800d6e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
          break;
 800d6e2:	e002      	b.n	800d6ea <Model_RestoreStates+0x18a>
          break;
 800d6e4:	bf00      	nop
 800d6e6:	e000      	b.n	800d6ea <Model_RestoreStates+0x18a>
          break;
 800d6e8:	bf00      	nop
        }
        
      } /* switch(pModelState_Load[GENERIC_VALID_FLAG_OFFSET]) */    
    
      my_Address = BLEMesh_GetAddress();
 800d6ea:	f00f f9c7 	bl	801ca7c <BLEMesh_GetAddress>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	877b      	strh	r3, [r7, #58]	@ 0x3a
      publishAddress = BLEMesh_GetPublishAddress(elementIndex, model_ID);
 800d6f2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d6f4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d6f8:	4611      	mov	r1, r2
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f00f f9ce 	bl	801ca9c <BLEMesh_GetPublishAddress>
 800d700:	4603      	mov	r3, r0
 800d702:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      
      if(publishAddress != 0x0000 )
 800d704:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00b      	beq.n	800d722 <Model_RestoreStates+0x1c2>
      {
        msgParam.peer_addr = publishAddress;
 800d70a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d70c:	843b      	strh	r3, [r7, #32]
        msgParam.dst_peer = dstPeer;
 800d70e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d710:	847b      	strh	r3, [r7, #34]	@ 0x22
      
        Model_SendResponse(&msgParam, opcode, setData,length);
 800d712:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800d716:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 800d718:	f107 001c 	add.w	r0, r7, #28
 800d71c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d71e:	f01a fb61 	bl	8027de4 <Model_SendResponse>
    for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800d722:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d726:	3301      	adds	r3, #1
 800d728:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 800d72c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800d730:	2b00      	cmp	r3, #0
 800d732:	f43f af3e 	beq.w	800d5b2 <Model_RestoreStates+0x52>
      } /* if(publishAddress != 0x0000) */
     
     // break; /* Run only once for element index 0 */
    } /* for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++) */
  } /* if (size > 0) */
}
 800d736:	bf00      	nop
 800d738:	3740      	adds	r7, #64	@ 0x40
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <Generic_OnOffPowerOnValue>:
* @param  *pmsgParam: Pointer to structure of message header for parameters:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & ApkmpKey Offset
* @retval MOBLEUINT16
*/
void Generic_OnOffPowerOnValue(Models_ParamNvm_t *state_Value, MODEL_MessageHeader_t *pmsgParam)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b084      	sub	sp, #16
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
 800d746:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 transitionStatus;
  MOBLEUINT8 setData[2]; 
  
  transitionStatus = state_Value->GenericTransitionStatus;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	789b      	ldrb	r3, [r3, #2]
 800d74c:	73fb      	strb	r3, [r7, #15]
  
  if(transitionStatus)
 800d74e:	7bfb      	ldrb	r3, [r7, #15]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d003      	beq.n	800d75c <Generic_OnOffPowerOnValue+0x1e>
  {
    setData[0] = state_Value->GenericTarget;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	795b      	ldrb	r3, [r3, #5]
 800d758:	733b      	strb	r3, [r7, #12]
 800d75a:	e002      	b.n	800d762 <Generic_OnOffPowerOnValue+0x24>
  }
  else
  {
    setData[0] = state_Value->Generic_OnOff;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	791b      	ldrb	r3, [r3, #4]
 800d760:	733b      	strb	r3, [r7, #12]
  }
  
  if(state_Value->PowerOnOff == GENERIC_POWER_OFF_STATE)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	78db      	ldrb	r3, [r3, #3]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d109      	bne.n	800d77e <Generic_OnOffPowerOnValue+0x40>
  {
    setData[0] = APPLI_LED_OFF;
 800d76a:	2300      	movs	r3, #0
 800d76c:	733b      	strb	r3, [r7, #12]
    Generic_OnOff_Set(setData,1,pmsgParam); 
 800d76e:	f107 030c 	add.w	r3, r7, #12
 800d772:	683a      	ldr	r2, [r7, #0]
 800d774:	2101      	movs	r1, #1
 800d776:	4618      	mov	r0, r3
 800d778:	f000 f990 	bl	800da9c <Generic_OnOff_Set>
  }
  else
  {
    
  }           
}
 800d77c:	e018      	b.n	800d7b0 <Generic_OnOffPowerOnValue+0x72>
  else if(state_Value->PowerOnOff == GENERIC_POWER_ON_STATE)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	78db      	ldrb	r3, [r3, #3]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d109      	bne.n	800d79a <Generic_OnOffPowerOnValue+0x5c>
    setData[0] = APPLI_LED_ON;
 800d786:	2301      	movs	r3, #1
 800d788:	733b      	strb	r3, [r7, #12]
    Generic_OnOff_Set(setData,1,pmsgParam);
 800d78a:	f107 030c 	add.w	r3, r7, #12
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	2101      	movs	r1, #1
 800d792:	4618      	mov	r0, r3
 800d794:	f000 f982 	bl	800da9c <Generic_OnOff_Set>
}
 800d798:	e00a      	b.n	800d7b0 <Generic_OnOffPowerOnValue+0x72>
  else if(state_Value->PowerOnOff == GENERIC_POWER_RESTORE_STATE)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	78db      	ldrb	r3, [r3, #3]
 800d79e:	2b02      	cmp	r3, #2
 800d7a0:	d106      	bne.n	800d7b0 <Generic_OnOffPowerOnValue+0x72>
    Generic_OnOff_Set(setData, 1,pmsgParam);
 800d7a2:	f107 030c 	add.w	r3, r7, #12
 800d7a6:	683a      	ldr	r2, [r7, #0]
 800d7a8:	2101      	movs	r1, #1
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f000 f976 	bl	800da9c <Generic_OnOff_Set>
}
 800d7b0:	bf00      	nop
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <Light_lightnessPowerOnValue>:
* @param  *pmsgParam: Pointer to structure of message header for parameters:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & ApkmpKey Offset
* @retval MOBLEUINT16
*/
MOBLEUINT16 Light_lightnessPowerOnValue(Models_ParamNvm_t *state_Value, MODEL_MessageHeader_t *pmsgParam)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b086      	sub	sp, #24
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 powerOn_Value;
  MOBLEUINT16 light_Actual = 0;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	82fb      	strh	r3, [r7, #22]
  MOBLEUINT16 last_KnownValue;
  MOBLEUINT8 transitionStatus;
  MOBLEUINT8 setData[4];
  transitionStatus = state_Value->LightTransitionStatus;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	785b      	ldrb	r3, [r3, #1]
 800d7ca:	74fb      	strb	r3, [r7, #19]
  
  if(transitionStatus)
 800d7cc:	7cfb      	ldrb	r3, [r7, #19]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d003      	beq.n	800d7da <Light_lightnessPowerOnValue+0x22>
  {
    last_KnownValue = state_Value->LightTarget;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	895b      	ldrh	r3, [r3, #10]
 800d7d6:	82bb      	strh	r3, [r7, #20]
 800d7d8:	e002      	b.n	800d7e0 <Light_lightnessPowerOnValue+0x28>
    TRACE_M(TF_COMMON,"Transition Flag is = %.2x, Last_Known Value = 0x%.2x \r\n",\
            transitionStatus, last_KnownValue);
  }
  else
  {
    last_KnownValue = state_Value->LightLightness;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	891b      	ldrh	r3, [r3, #8]
 800d7de:	82bb      	strh	r3, [r7, #20]
    
    TRACE_M(TF_COMMON,"Transition Flag is = %.2x, Last_Known Value = 0x%.2x \r\n",\
            transitionStatus, last_KnownValue);
  }
  
  powerOn_Value = state_Value->PowerOnOff;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	78db      	ldrb	r3, [r3, #3]
 800d7e4:	74bb      	strb	r3, [r7, #18]
  
  CopyU8LittleEndienArray_fromU16word (setData, state_Value->LightLast);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	89da      	ldrh	r2, [r3, #14]
 800d7ea:	f107 030c 	add.w	r3, r7, #12
 800d7ee:	4611      	mov	r1, r2
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f000 f88b 	bl	800d90c <CopyU8LittleEndienArray_fromU16word>
  
  Light_LightnessLast_Set(setData,2, pmsgParam);
 800d7f6:	f107 030c 	add.w	r3, r7, #12
 800d7fa:	683a      	ldr	r2, [r7, #0]
 800d7fc:	2102      	movs	r1, #2
 800d7fe:	4618      	mov	r0, r3
 800d800:	f002 f91a 	bl	800fa38 <Light_LightnessLast_Set>
  
  CopyU8LittleEndienArray_fromU16word (setData, state_Value->LightDefault);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	899a      	ldrh	r2, [r3, #12]
 800d808:	f107 030c 	add.w	r3, r7, #12
 800d80c:	4611      	mov	r1, r2
 800d80e:	4618      	mov	r0, r3
 800d810:	f000 f87c 	bl	800d90c <CopyU8LittleEndienArray_fromU16word>
  Light_LightnessDefault_Set(setData,2, pmsgParam);
 800d814:	f107 030c 	add.w	r3, r7, #12
 800d818:	683a      	ldr	r2, [r7, #0]
 800d81a:	2102      	movs	r1, #2
 800d81c:	4618      	mov	r0, r3
 800d81e:	f002 f981 	bl	800fb24 <Light_LightnessDefault_Set>
   
  if(powerOn_Value == GENERIC_POWER_OFF_STATE)
 800d822:	7cbb      	ldrb	r3, [r7, #18]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d102      	bne.n	800d82e <Light_lightnessPowerOnValue+0x76>
  { /* Light Lightness Actual = 0 for value of the Generic OnPowerUp state equal 
       to 0x00 */
    light_Actual = 0x00;
 800d828:	2300      	movs	r3, #0
 800d82a:	82fb      	strh	r3, [r7, #22]
 800d82c:	e01a      	b.n	800d864 <Light_lightnessPowerOnValue+0xac>
  }
  else if((powerOn_Value == GENERIC_POWER_ON_STATE) && (state_Value->LightDefault != 0x00))
 800d82e:	7cbb      	ldrb	r3, [r7, #18]
 800d830:	2b01      	cmp	r3, #1
 800d832:	d107      	bne.n	800d844 <Light_lightnessPowerOnValue+0x8c>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	899b      	ldrh	r3, [r3, #12]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d003      	beq.n	800d844 <Light_lightnessPowerOnValue+0x8c>
  {
    /* Light Lightness Actual = Light Lightness Default for value of the Generic 
        OnPowerUp state equal to 0x01 and Light Lightness Default not equal to zero, */
    light_Actual = state_Value->LightDefault;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	899b      	ldrh	r3, [r3, #12]
 800d840:	82fb      	strh	r3, [r7, #22]
 800d842:	e00f      	b.n	800d864 <Light_lightnessPowerOnValue+0xac>
  }
  else if((powerOn_Value == GENERIC_POWER_ON_STATE) && (state_Value->LightDefault == 0x00))
 800d844:	7cbb      	ldrb	r3, [r7, #18]
 800d846:	2b01      	cmp	r3, #1
 800d848:	d107      	bne.n	800d85a <Light_lightnessPowerOnValue+0xa2>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	899b      	ldrh	r3, [r3, #12]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d103      	bne.n	800d85a <Light_lightnessPowerOnValue+0xa2>
  {
    /* Light Lightness Actual = Light Lightness Last (see Section 6.1.2.3)
       for value of the Generic OnPowerUp state equal to 0x01 and 
       Light Lightness Default equal to zero */
    light_Actual = state_Value->LightLast;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	89db      	ldrh	r3, [r3, #14]
 800d856:	82fb      	strh	r3, [r7, #22]
 800d858:	e004      	b.n	800d864 <Light_lightnessPowerOnValue+0xac>
  }
  else if(powerOn_Value == GENERIC_POWER_RESTORE_STATE)
 800d85a:	7cbb      	ldrb	r3, [r7, #18]
 800d85c:	2b02      	cmp	r3, #2
 800d85e:	d101      	bne.n	800d864 <Light_lightnessPowerOnValue+0xac>
  {
    light_Actual = last_KnownValue;
 800d860:	8abb      	ldrh	r3, [r7, #20]
 800d862:	82fb      	strh	r3, [r7, #22]
  {
     
  }

  TRACE_I(TF_COMMON, "LIGHT LIGHTNESS VALUE ON POWER UP %.2x \r\n",light_Actual);
  return light_Actual;
 800d864:	8afb      	ldrh	r3, [r7, #22]
}  
 800d866:	4618      	mov	r0, r3
 800d868:	3718      	adds	r7, #24
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
	...

0800d870 <Chk_TidValidity>:
  * @brief  
  * @param  
  * @retval 
  */
MOBLE_RESULT Chk_TidValidity(MOBLE_ADDRESS peerAddr, MOBLE_ADDRESS dstAddr, MOBLEUINT8 tidValue)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	4603      	mov	r3, r0
 800d878:	80fb      	strh	r3, [r7, #6]
 800d87a:	460b      	mov	r3, r1
 800d87c:	80bb      	strh	r3, [r7, #4]
 800d87e:	4613      	mov	r3, r2
 800d880:	70fb      	strb	r3, [r7, #3]
  static MOBLEUINT32 Check_time;
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 800d882:	2300      	movs	r3, #0
 800d884:	73fb      	strb	r3, [r7, #15]
  
  TRACE_M(TF_COMMON, "dst_peer %.2X peer_add %.2X, tid %d\r\n", dstAddr, peerAddr, tidValue);
  
  if(((Clock_Time()- Check_time) <= 6000))
 800d886:	f7fa fac9 	bl	8007e1c <HAL_GetTick>
 800d88a:	4602      	mov	r2, r0
 800d88c:	4b1d      	ldr	r3, [pc, #116]	@ (800d904 <Chk_TidValidity+0x94>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	1ad3      	subs	r3, r2, r3
 800d892:	f241 7270 	movw	r2, #6000	@ 0x1770
 800d896:	4293      	cmp	r3, r2
 800d898:	d820      	bhi.n	800d8dc <Chk_TidValidity+0x6c>
  {
    if((Model_Tid.Peer_Addrs == peerAddr)&&(Model_Tid.Dst_Addrs == dstAddr)&&(Model_Tid.Tid_Value == tidValue))
 800d89a:	4b1b      	ldr	r3, [pc, #108]	@ (800d908 <Chk_TidValidity+0x98>)
 800d89c:	885b      	ldrh	r3, [r3, #2]
 800d89e:	88fa      	ldrh	r2, [r7, #6]
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d10c      	bne.n	800d8be <Chk_TidValidity+0x4e>
 800d8a4:	4b18      	ldr	r3, [pc, #96]	@ (800d908 <Chk_TidValidity+0x98>)
 800d8a6:	889b      	ldrh	r3, [r3, #4]
 800d8a8:	88ba      	ldrh	r2, [r7, #4]
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d107      	bne.n	800d8be <Chk_TidValidity+0x4e>
 800d8ae:	4b16      	ldr	r3, [pc, #88]	@ (800d908 <Chk_TidValidity+0x98>)
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	78fa      	ldrb	r2, [r7, #3]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d102      	bne.n	800d8be <Chk_TidValidity+0x4e>
    {
      TRACE_M(TF_COMMON,"Duplicate Message Parameter within six second \r\n");
      status =  MOBLE_RESULT_INVALIDARG;       
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	73fb      	strb	r3, [r7, #15]
 800d8bc:	e01c      	b.n	800d8f8 <Chk_TidValidity+0x88>
    }
    else
    {
      Check_time = Clock_Time();
 800d8be:	f7fa faad 	bl	8007e1c <HAL_GetTick>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	4a0f      	ldr	r2, [pc, #60]	@ (800d904 <Chk_TidValidity+0x94>)
 800d8c6:	6013      	str	r3, [r2, #0]
      Model_Tid.Peer_Addrs = peerAddr;
 800d8c8:	4a0f      	ldr	r2, [pc, #60]	@ (800d908 <Chk_TidValidity+0x98>)
 800d8ca:	88fb      	ldrh	r3, [r7, #6]
 800d8cc:	8053      	strh	r3, [r2, #2]
      Model_Tid.Dst_Addrs = dstAddr;
 800d8ce:	4a0e      	ldr	r2, [pc, #56]	@ (800d908 <Chk_TidValidity+0x98>)
 800d8d0:	88bb      	ldrh	r3, [r7, #4]
 800d8d2:	8093      	strh	r3, [r2, #4]
      Model_Tid.Tid_Value = tidValue; 
 800d8d4:	4a0c      	ldr	r2, [pc, #48]	@ (800d908 <Chk_TidValidity+0x98>)
 800d8d6:	78fb      	ldrb	r3, [r7, #3]
 800d8d8:	7013      	strb	r3, [r2, #0]
 800d8da:	e00d      	b.n	800d8f8 <Chk_TidValidity+0x88>
      TRACE_M(TF_COMMON,"New Message Parameter within six second \r\n");
    }
  }
  else
  {
    Check_time = Clock_Time();
 800d8dc:	f7fa fa9e 	bl	8007e1c <HAL_GetTick>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	4a08      	ldr	r2, [pc, #32]	@ (800d904 <Chk_TidValidity+0x94>)
 800d8e4:	6013      	str	r3, [r2, #0]
    Model_Tid.Peer_Addrs = peerAddr;
 800d8e6:	4a08      	ldr	r2, [pc, #32]	@ (800d908 <Chk_TidValidity+0x98>)
 800d8e8:	88fb      	ldrh	r3, [r7, #6]
 800d8ea:	8053      	strh	r3, [r2, #2]
    Model_Tid.Dst_Addrs = dstAddr;
 800d8ec:	4a06      	ldr	r2, [pc, #24]	@ (800d908 <Chk_TidValidity+0x98>)
 800d8ee:	88bb      	ldrh	r3, [r7, #4]
 800d8f0:	8093      	strh	r3, [r2, #4]
    Model_Tid.Tid_Value = tidValue;
 800d8f2:	4a05      	ldr	r2, [pc, #20]	@ (800d908 <Chk_TidValidity+0x98>)
 800d8f4:	78fb      	ldrb	r3, [r7, #3]
 800d8f6:	7013      	strb	r3, [r2, #0]
    TRACE_M(TF_COMMON,"New Message Parameter after six second\r\n");
  }
  
  return status;
 800d8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3710      	adds	r7, #16
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	20004554 	.word	0x20004554
 800d908:	20004544 	.word	0x20004544

0800d90c <CopyU8LittleEndienArray_fromU16word>:
  * and copy in one byte size array.  
  * @param pArray: pointer too the input array
  * @param inputWord: 16 bit variabale  
*/
void CopyU8LittleEndienArray_fromU16word (MOBLEUINT8* pArray, MOBLEUINT16 inputWord)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	460b      	mov	r3, r1
 800d916:	807b      	strh	r3, [r7, #2]
  *(pArray) = (MOBLEUINT8)(inputWord & 0x00ff);  /* Copy the LSB first */
 800d918:	887b      	ldrh	r3, [r7, #2]
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	701a      	strb	r2, [r3, #0]
  *(pArray+1) = (MOBLEUINT8)((inputWord & 0xff00) >> 0x08); /* Copy the MSB later */
 800d920:	887b      	ldrh	r3, [r7, #2]
 800d922:	0a1b      	lsrs	r3, r3, #8
 800d924:	b29a      	uxth	r2, r3
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	3301      	adds	r3, #1
 800d92a:	b2d2      	uxtb	r2, r2
 800d92c:	701a      	strb	r2, [r3, #0]
}
 800d92e:	bf00      	nop
 800d930:	370c      	adds	r7, #12
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr

0800d93a <CopyU8LittleEndienArrayToU16word>:
  * bit variable
  * @param pArray: pointer too the input array
  * @retval u16Word : 16 bit value. 
*/
MOBLEUINT16 CopyU8LittleEndienArrayToU16word (MOBLEUINT8* pArray) 
{
 800d93a:	b480      	push	{r7}
 800d93c:	b085      	sub	sp, #20
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
  MOBLEUINT16 u16Word=0;
 800d942:	2300      	movs	r3, #0
 800d944:	81fb      	strh	r3, [r7, #14]
  MOBLEUINT8 lsb_byte=0;
 800d946:	2300      	movs	r3, #0
 800d948:	737b      	strb	r3, [r7, #13]
  MOBLEUINT8 msb_byte=0;
 800d94a:	2300      	movs	r3, #0
 800d94c:	733b      	strb	r3, [r7, #12]
  
  lsb_byte = *pArray;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	737b      	strb	r3, [r7, #13]
  pArray++;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	3301      	adds	r3, #1
 800d958:	607b      	str	r3, [r7, #4]
  msb_byte = *pArray;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	733b      	strb	r3, [r7, #12]
  u16Word = (msb_byte<<8);
 800d960:	7b3b      	ldrb	r3, [r7, #12]
 800d962:	b29b      	uxth	r3, r3
 800d964:	021b      	lsls	r3, r3, #8
 800d966:	81fb      	strh	r3, [r7, #14]
  u16Word &= 0xFF00;
 800d968:	89fb      	ldrh	r3, [r7, #14]
 800d96a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d96e:	81fb      	strh	r3, [r7, #14]
  u16Word |= lsb_byte;
 800d970:	7b7b      	ldrb	r3, [r7, #13]
 800d972:	b29a      	uxth	r2, r3
 800d974:	89fb      	ldrh	r3, [r7, #14]
 800d976:	4313      	orrs	r3, r2
 800d978:	81fb      	strh	r3, [r7, #14]

  return u16Word;
 800d97a:	89fb      	ldrh	r3, [r7, #14]
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3714      	adds	r7, #20
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <NvmStatePowerFlag_Set>:
* @brief  Update parameters for ModelSaveProcess to save model states
* @param  NVM flag for model
* @retval None
*/
void NvmStatePowerFlag_Set(MOBLEUINT8 nvmModelFlag, MOBLEUINT8 elementIndex)
{
 800d988:	b480      	push	{r7}
 800d98a:	b083      	sub	sp, #12
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	4603      	mov	r3, r0
 800d990:	460a      	mov	r2, r1
 800d992:	71fb      	strb	r3, [r7, #7]
 800d994:	4613      	mov	r3, r2
 800d996:	71bb      	strb	r3, [r7, #6]
#ifdef SAVE_MODEL_STATE_FOR_ALL_MESSAGES
  PowerOnOff_flag = FLAG_SET;
  RestoreFlag[elementIndex] = nvmModelFlag;
#endif
}
 800d998:	bf00      	nop
 800d99a:	370c      	adds	r7, #12
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr

0800d9a4 <Binding_GenericOnOff_LightLcLightOnOff>:
MOBLE_RESULT Binding_GenericOnOff_LightLcLightOnOff(MOBLEUINT8 genericElementIndex, 
                                                    MOBLEUINT8 genericOnOff,
                                                    MOBLEUINT8 optionalParams,
                                                    MOBLEUINT32 delayMs,
                                                      MOBLEUINT8 transitionParam)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b086      	sub	sp, #24
 800d9a8:	af02      	add	r7, sp, #8
 800d9aa:	603b      	str	r3, [r7, #0]
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	71fb      	strb	r3, [r7, #7]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	71bb      	strb	r3, [r7, #6]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	717b      	strb	r3, [r7, #5]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	73fb      	strb	r3, [r7, #15]
  
  /* optional params to be inserted */
  Light_LC_LcOnOffUpdate(genericElementIndex, genericOnOff, 0, 0, 0, 0);
 800d9bc:	79b9      	ldrb	r1, [r7, #6]
 800d9be:	79f8      	ldrb	r0, [r7, #7]
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	9301      	str	r3, [sp, #4]
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	9300      	str	r3, [sp, #0]
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f005 fcc8 	bl	8013360 <Light_LC_LcOnOffUpdate>
  
  return result;
 800d9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3710      	adds	r7, #16
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <BindingDisable_LcLinearOut_LightLightnessLinear>:
  *         Extract target LC Server element index
  * @param  element index of Light Lightness Server
  * @retval None
  */
void BindingDisable_LcLinearOut_LightLightnessLinear(MOBLEUINT8 lightnessLinearElementIndex)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b082      	sub	sp, #8
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	71fb      	strb	r3, [r7, #7]
  if(lightnessLinearElementIndex == LIGHT_LIGHTNESS_SERVER_MAIN_ELEMENT_INDEX)
 800d9e4:	79fb      	ldrb	r3, [r7, #7]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d103      	bne.n	800d9f2 <BindingDisable_LcLinearOut_LightLightnessLinear+0x18>
  {
    Light_LC_LigtnessLinearUnsolicitedChange(lightnessLinearElementIndex);
 800d9ea:	79fb      	ldrb	r3, [r7, #7]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f005 fcac 	bl	801334a <Light_LC_LigtnessLinearUnsolicitedChange>
  }
}
 800d9f2:	bf00      	nop
 800d9f4:	3708      	adds	r7, #8
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <ApplicationGetConfigServerDeviceKey>:


WEAK_FUNCTION ( MOBLE_RESULT ApplicationGetConfigServerDeviceKey(MOBLE_ADDRESS src, 
                                                 const MOBLEUINT8 **ppkeyTbUse))
{
 800d9fa:	b480      	push	{r7}
 800d9fc:	b083      	sub	sp, #12
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	4603      	mov	r3, r0
 800da02:	6039      	str	r1, [r7, #0]
 800da04:	80fb      	strh	r3, [r7, #6]
  return MOBLE_RESULT_SUCCESS;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <Wait_RandomTime>:
* @brief  Function used to calculate the delay with random time..
* @param  MOBLEUINT16
* @retval MOBLEUINT8
*/
MOBLEBOOL Wait_RandomTime(void)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
   static MOBLEUINT8 Clockflag = 0;
   static MOBLEUINT32 wait_Time;
   static MOBLEUINT32 check_Time;
   MOBLEUINT8 random_time[8];
 
   if(Clockflag == 0)
 800da1a:	4b1c      	ldr	r3, [pc, #112]	@ (800da8c <Wait_RandomTime+0x78>)
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d120      	bne.n	800da64 <Wait_RandomTime+0x50>
   {   
    hci_le_rand(random_time);
 800da22:	463b      	mov	r3, r7
 800da24:	4618      	mov	r0, r3
 800da26:	f007 fc80 	bl	801532a <hci_le_rand>
    check_Time = Clock_Time();
 800da2a:	f7fa f9f7 	bl	8007e1c <HAL_GetTick>
 800da2e:	4603      	mov	r3, r0
 800da30:	4a17      	ldr	r2, [pc, #92]	@ (800da90 <Wait_RandomTime+0x7c>)
 800da32:	6013      	str	r3, [r2, #0]
    wait_Time = DEFAULT_RANDOM_DELAY_VALUE + 
                                     (random_time[0] + random_time[1]*256)\
 800da34:	783b      	ldrb	r3, [r7, #0]
 800da36:	461a      	mov	r2, r3
 800da38:	787b      	ldrb	r3, [r7, #1]
 800da3a:	021b      	lsls	r3, r3, #8
 800da3c:	441a      	add	r2, r3
                                         %DEFAULT_RANDOM_DELAY_VALUE; 
 800da3e:	4b15      	ldr	r3, [pc, #84]	@ (800da94 <Wait_RandomTime+0x80>)
 800da40:	fb83 1302 	smull	r1, r3, r3, r2
 800da44:	1159      	asrs	r1, r3, #5
 800da46:	17d3      	asrs	r3, r2, #31
 800da48:	1acb      	subs	r3, r1, r3
 800da4a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800da4e:	fb01 f303 	mul.w	r3, r1, r3
 800da52:	1ad3      	subs	r3, r2, r3
    wait_Time = DEFAULT_RANDOM_DELAY_VALUE + 
 800da54:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800da58:	461a      	mov	r2, r3
 800da5a:	4b0f      	ldr	r3, [pc, #60]	@ (800da98 <Wait_RandomTime+0x84>)
 800da5c:	601a      	str	r2, [r3, #0]
                                        
     Clockflag = 1;
 800da5e:	4b0b      	ldr	r3, [pc, #44]	@ (800da8c <Wait_RandomTime+0x78>)
 800da60:	2201      	movs	r2, #1
 800da62:	701a      	strb	r2, [r3, #0]
   } 
/* The function will called until the testcount will not become zero */     

     if((Clock_Time() - check_Time) >=  wait_Time)
 800da64:	f7fa f9da 	bl	8007e1c <HAL_GetTick>
 800da68:	4602      	mov	r2, r0
 800da6a:	4b09      	ldr	r3, [pc, #36]	@ (800da90 <Wait_RandomTime+0x7c>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	1ad2      	subs	r2, r2, r3
 800da70:	4b09      	ldr	r3, [pc, #36]	@ (800da98 <Wait_RandomTime+0x84>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	429a      	cmp	r2, r3
 800da76:	d304      	bcc.n	800da82 <Wait_RandomTime+0x6e>
     {
        Clockflag = 0;
 800da78:	4b04      	ldr	r3, [pc, #16]	@ (800da8c <Wait_RandomTime+0x78>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	701a      	strb	r2, [r3, #0]
        return MOBLE_TRUE;
 800da7e:	2301      	movs	r3, #1
 800da80:	e000      	b.n	800da84 <Wait_RandomTime+0x70>

       }
   return MOBLE_FALSE;
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3708      	adds	r7, #8
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	20004558 	.word	0x20004558
 800da90:	2000455c 	.word	0x2000455c
 800da94:	1b4e81b5 	.word	0x1b4e81b5
 800da98:	20004560 	.word	0x20004560

0800da9c <Generic_OnOff_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_OnOff_Set(MOBLEUINT8 const *pOnOff_param, 
                               MOBLEUINT32 length,
                               MODEL_MessageHeader_t *pmsgParam)  
{
 800da9c:	b5b0      	push	{r4, r5, r7, lr}
 800da9e:	b088      	sub	sp, #32
 800daa0:	af02      	add	r7, sp, #8
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
  */
  
  TRACE_M(TF_GENERIC_M, "Generic_OnOff_Set callback received \r\n");  
  
  Generic_OnOffParam_t Generic_OnOffParam; 
  Generic_OnOffParam.TargetOnOffState = pOnOff_param[0];
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	753b      	strb	r3, [r7, #20]
  Generic_OnOffParam.Generic_TID = pOnOff_param[1];
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	3301      	adds	r3, #1
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	757b      	strb	r3, [r7, #21]
  Generic_OnOffParam.Transition_Time = 0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	75bb      	strb	r3, [r7, #22]
  Generic_OnOffParam.Delay_Time = 0;
 800daba:	2300      	movs	r3, #0
 800dabc:	75fb      	strb	r3, [r7, #23]
  Checking for optional parameters
  length > 2 , 4 values  received(OnOff status, TID, Trasmisition time(optional),
  Delay(optional)),length < 2 OnOff status and TID   
  */
  
  if((length > 2) && (pOnOff_param[2] !=0))
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	d96f      	bls.n	800dba4 <Generic_OnOff_Set+0x108>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	3302      	adds	r3, #2
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d06a      	beq.n	800dba4 <Generic_OnOff_Set+0x108>
  {
    /* Transition_Time & Delay_Time Present */
    Generic_OnOffParam.Transition_Time = pOnOff_param[2];
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	3302      	adds	r3, #2
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	75bb      	strb	r3, [r7, #22]
    Generic_OnOffParam.Delay_Time = pOnOff_param[3];
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	3303      	adds	r3, #3
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	75fb      	strb	r3, [r7, #23]
      
    /* 3.1.1.1 Binary state transitions: Because binary states cannot support transitions, 
       when changing to 0x01 (On), the Generic OnOff state shall change immediately 
       when the transition starts, and when changing to 0x00, the state shall
       change when the transition finishes.*/
    if(pOnOff_param[0] == 1)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d10c      	bne.n	800db00 <Generic_OnOff_Set+0x64>
    {
      Generic_OnOffStatus[pmsgParam->elementIndex].Present_OnOff_State = pOnOff_param[0];
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	4619      	mov	r1, r3
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	7818      	ldrb	r0, [r3, #0]
 800daf0:	4a56      	ldr	r2, [pc, #344]	@ (800dc4c <Generic_OnOff_Set+0x1b0>)
 800daf2:	460b      	mov	r3, r1
 800daf4:	005b      	lsls	r3, r3, #1
 800daf6:	440b      	add	r3, r1
 800daf8:	005b      	lsls	r3, r3, #1
 800dafa:	4413      	add	r3, r2
 800dafc:	4602      	mov	r2, r0
 800dafe:	701a      	strb	r2, [r3, #0]
    }
    Generic_OnOffStatus[pmsgParam->elementIndex].Target_OnOff = Generic_OnOffParam.TargetOnOffState;
 800db00:	7d3a      	ldrb	r2, [r7, #20]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	4619      	mov	r1, r3
 800db08:	4610      	mov	r0, r2
 800db0a:	4a50      	ldr	r2, [pc, #320]	@ (800dc4c <Generic_OnOff_Set+0x1b0>)
 800db0c:	460b      	mov	r3, r1
 800db0e:	005b      	lsls	r3, r3, #1
 800db10:	440b      	add	r3, r1
 800db12:	005b      	lsls	r3, r3, #1
 800db14:	4413      	add	r3, r2
 800db16:	4602      	mov	r2, r0
 800db18:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_OnOffStatus[pmsgParam->elementIndex].RemainingTime = Generic_OnOffParam.Transition_Time;   
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	4619      	mov	r1, r3
 800db22:	7db8      	ldrb	r0, [r7, #22]
 800db24:	4a49      	ldr	r2, [pc, #292]	@ (800dc4c <Generic_OnOff_Set+0x1b0>)
 800db26:	460b      	mov	r3, r1
 800db28:	005b      	lsls	r3, r3, #1
 800db2a:	440b      	add	r3, r1
 800db2c:	005b      	lsls	r3, r3, #1
 800db2e:	4413      	add	r3, r2
 800db30:	3305      	adds	r3, #5
 800db32:	4602      	mov	r2, r0
 800db34:	701a      	strb	r2, [r3, #0]
    
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Generic_OnOffStatus[pmsgParam->elementIndex].RemainingTime;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	4618      	mov	r0, r3
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	4619      	mov	r1, r3
 800db42:	4a42      	ldr	r2, [pc, #264]	@ (800dc4c <Generic_OnOff_Set+0x1b0>)
 800db44:	4603      	mov	r3, r0
 800db46:	005b      	lsls	r3, r3, #1
 800db48:	4403      	add	r3, r0
 800db4a:	005b      	lsls	r3, r3, #1
 800db4c:	4413      	add	r3, r2
 800db4e:	3305      	adds	r3, #5
 800db50:	7818      	ldrb	r0, [r3, #0]
 800db52:	4a3f      	ldr	r2, [pc, #252]	@ (800dc50 <Generic_OnOff_Set+0x1b4>)
 800db54:	460b      	mov	r3, r1
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	440b      	add	r3, r1
 800db5a:	4413      	add	r3, r2
 800db5c:	4602      	mov	r2, r0
 800db5e:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
      step size for transition state machine
    */
    Generic_GetStepValue(pOnOff_param[2], pmsgParam->elementIndex);   
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	3302      	adds	r3, #2
 800db64:	781a      	ldrb	r2, [r3, #0]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	4619      	mov	r1, r3
 800db6c:	4610      	mov	r0, r2
 800db6e:	f001 f8b9 	bl	800ece4 <Generic_GetStepValue>
    /*option parameter flag, enable to send optional parameters in status.*/         
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	4619      	mov	r1, r3
 800db78:	4a36      	ldr	r2, [pc, #216]	@ (800dc54 <Generic_OnOff_Set+0x1b8>)
 800db7a:	460b      	mov	r3, r1
 800db7c:	005b      	lsls	r3, r3, #1
 800db7e:	440b      	add	r3, r1
 800db80:	4413      	add	r3, r2
 800db82:	3301      	adds	r3, #1
 800db84:	2201      	movs	r2, #1
 800db86:	701a      	strb	r2, [r3, #0]
    /*Flag to enable the on Off transition state machine */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_ON_OFF_TRANSITION_START;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	4619      	mov	r1, r3
 800db8e:	4a31      	ldr	r2, [pc, #196]	@ (800dc54 <Generic_OnOff_Set+0x1b8>)
 800db90:	460b      	mov	r3, r1
 800db92:	005b      	lsls	r3, r3, #1
 800db94:	440b      	add	r3, r1
 800db96:	4413      	add	r3, r2
 800db98:	2201      	movs	r2, #1
 800db9a:	701a      	strb	r2, [r3, #0]
    /* flag is used for the application to get the information about the transition 
       time parameter is included or not in the received message.
    */
    OptionalParam = IN_TRANSITION;
 800db9c:	4b2e      	ldr	r3, [pc, #184]	@ (800dc58 <Generic_OnOff_Set+0x1bc>)
 800db9e:	2202      	movs	r2, #2
 800dba0:	701a      	strb	r2, [r3, #0]
 800dba2:	e013      	b.n	800dbcc <Generic_OnOff_Set+0x130>
/* EME END: management of Present_OnOff_Value and Target_OnOff on immediate transition */
#else
    /* When no optional parameter received, target value will be set as present
       value in application.
    */  
    OptionalParam = NO_TRANSITION;
 800dba4:	4b2c      	ldr	r3, [pc, #176]	@ (800dc58 <Generic_OnOff_Set+0x1bc>)
 800dba6:	2201      	movs	r2, #1
 800dba8:	701a      	strb	r2, [r3, #0]
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f001 fb84 	bl	800f2bc <Generic_TransitionParameterReset>
#endif       
    
    Generic_OnOffStatus[pmsgParam->elementIndex].Present_OnOff_State = Generic_OnOffParam.TargetOnOffState;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	4619      	mov	r1, r3
 800dbba:	7d38      	ldrb	r0, [r7, #20]
 800dbbc:	4a23      	ldr	r2, [pc, #140]	@ (800dc4c <Generic_OnOff_Set+0x1b0>)
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	005b      	lsls	r3, r3, #1
 800dbc2:	440b      	add	r3, r1
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	4413      	add	r3, r2
 800dbc8:	4602      	mov	r2, r0
 800dbca:	701a      	strb	r2, [r3, #0]
  }
  
  /* Application Callback */
  (GenericAppli_cb.OnOff_Set_cb)(&Generic_OnOffStatus[pmsgParam->elementIndex], OptionalParam, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800dbcc:	4b23      	ldr	r3, [pc, #140]	@ (800dc5c <Generic_OnOff_Set+0x1c0>)
 800dbce:	681c      	ldr	r4, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	005b      	lsls	r3, r3, #1
 800dbda:	4413      	add	r3, r2
 800dbdc:	005b      	lsls	r3, r3, #1
 800dbde:	4a1b      	ldr	r2, [pc, #108]	@ (800dc4c <Generic_OnOff_Set+0x1b0>)
 800dbe0:	1898      	adds	r0, r3, r2
 800dbe2:	4b1d      	ldr	r3, [pc, #116]	@ (800dc58 <Generic_OnOff_Set+0x1bc>)
 800dbe4:	7819      	ldrb	r1, [r3, #0]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	88da      	ldrh	r2, [r3, #6]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	47a0      	blx	r4
#ifdef ENABLE_MODEL_BINDING    

#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS  
  /* Binding of data b/w Generic on off and Light lightness Actual model */
  GenericOnOff_LightActualBinding(&Generic_OnOffStatus[pmsgParam->elementIndex],pmsgParam->elementIndex,
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	005b      	lsls	r3, r3, #1
 800dbfa:	4413      	add	r3, r2
 800dbfc:	005b      	lsls	r3, r3, #1
 800dbfe:	4a13      	ldr	r2, [pc, #76]	@ (800dc4c <Generic_OnOff_Set+0x1b0>)
 800dc00:	1898      	adds	r0, r3, r2
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	7819      	ldrb	r1, [r3, #0]
           Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	461c      	mov	r4, r3
  GenericOnOff_LightActualBinding(&Generic_OnOffStatus[pmsgParam->elementIndex],pmsgParam->elementIndex,
 800dc0c:	4a11      	ldr	r2, [pc, #68]	@ (800dc54 <Generic_OnOff_Set+0x1b8>)
 800dc0e:	4623      	mov	r3, r4
 800dc10:	005b      	lsls	r3, r3, #1
 800dc12:	4423      	add	r3, r4
 800dc14:	4413      	add	r3, r2
 800dc16:	781a      	ldrb	r2, [r3, #0]
           Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	461d      	mov	r5, r3
  GenericOnOff_LightActualBinding(&Generic_OnOffStatus[pmsgParam->elementIndex],pmsgParam->elementIndex,
 800dc1e:	4c0d      	ldr	r4, [pc, #52]	@ (800dc54 <Generic_OnOff_Set+0x1b8>)
 800dc20:	462b      	mov	r3, r5
 800dc22:	005b      	lsls	r3, r3, #1
 800dc24:	442b      	add	r3, r5
 800dc26:	4423      	add	r3, r4
 800dc28:	3302      	adds	r3, #2
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	f003 fa78 	bl	8011120 <GenericOnOff_LightActualBinding>
#endif

  /* For corresponding element which supports Light LC Server */
  Binding_GenericOnOff_LightLcLightOnOff(pmsgParam->elementIndex,
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	7818      	ldrb	r0, [r3, #0]
 800dc34:	7d39      	ldrb	r1, [r7, #20]
 800dc36:	2300      	movs	r3, #0
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f7ff feb1 	bl	800d9a4 <Binding_GenericOnOff_LightLcLightOnOff>
                                         Generic_OnOffParam.TargetOnOffState,
                                          0, 0, 0);
  
#endif
  
  return MOBLE_RESULT_SUCCESS;
 800dc42:	2300      	movs	r3, #0
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3718      	adds	r7, #24
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bdb0      	pop	{r4, r5, r7, pc}
 800dc4c:	20004584 	.word	0x20004584
 800dc50:	20004564 	.word	0x20004564
 800dc54:	2000458c 	.word	0x2000458c
 800dc58:	20004590 	.word	0x20004590
 800dc5c:	080308dc 	.word	0x080308dc

0800dc60 <Generic_OnOff_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_OnOff_Status(MOBLEUINT8* pOnOff_status, 
                                  MOBLEUINT32 *plength,
                                  MODEL_MessageHeader_t *pmsgParam) 
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	60b9      	str	r1, [r7, #8]
 800dc6a:	607a      	str	r2, [r7, #4]
  Target OnOff The target value of the Generic OnOff state (optional).
  Remaining Time is transition time. 
  */
  
  TRACE_M(TF_GENERIC_M, ">>>\r\n");
  TRACE_M(TF_SERIAL_CTRL,"#8201! \n\r");
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	4830      	ldr	r0, [pc, #192]	@ (800dd30 <Generic_OnOff_Status+0xd0>)
 800dc70:	f7ff fc54 	bl	800d51c <TraceHeader>
 800dc74:	482f      	ldr	r0, [pc, #188]	@ (800dd34 <Generic_OnOff_Status+0xd4>)
 800dc76:	f01b f8fb 	bl	8028e70 <iprintf>
  /* 
  Default value of GenericOptionalParam=0, 
  GenericOptionalParam set equal to 1 in Generic_OnOff_Set for Generic_OnOff_Status 
  */
  if((Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam == 1) || (Generic_TimeParam[pmsgParam->elementIndex].StepValue != 0))
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	4619      	mov	r1, r3
 800dc80:	4a2d      	ldr	r2, [pc, #180]	@ (800dd38 <Generic_OnOff_Status+0xd8>)
 800dc82:	460b      	mov	r3, r1
 800dc84:	005b      	lsls	r3, r3, #1
 800dc86:	440b      	add	r3, r1
 800dc88:	4413      	add	r3, r2
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d00c      	beq.n	800dcac <Generic_OnOff_Status+0x4c>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	4619      	mov	r1, r3
 800dc98:	4a28      	ldr	r2, [pc, #160]	@ (800dd3c <Generic_OnOff_Status+0xdc>)
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	009b      	lsls	r3, r3, #2
 800dc9e:	440b      	add	r3, r1
 800dca0:	005b      	lsls	r3, r3, #1
 800dca2:	4413      	add	r3, r2
 800dca4:	f993 3000 	ldrsb.w	r3, [r3]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d02c      	beq.n	800dd06 <Generic_OnOff_Status+0xa6>
    When optional parameter received present value,targert value, remaining time be sent in status message
    length of received data is equal to 4B
    */
    TRACE_M(TF_GENERIC_M, "Generic_OnOff_Status sent with Transition \r\n"); 

    *(pOnOff_status+1) = Generic_OnOffStatus[pmsgParam->elementIndex].Target_OnOff;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	4a23      	ldr	r2, [pc, #140]	@ (800dd40 <Generic_OnOff_Status+0xe0>)
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	005b      	lsls	r3, r3, #1
 800dcb8:	440b      	add	r3, r1
 800dcba:	005b      	lsls	r3, r3, #1
 800dcbc:	4413      	add	r3, r2
 800dcbe:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800dcc2:	b29a      	uxth	r2, r3
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	b2d2      	uxtb	r2, r2
 800dcca:	701a      	strb	r2, [r3, #0]
    *(pOnOff_status+2) = Generic_OnOffStatus[pmsgParam->elementIndex].RemainingTime;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	1c9a      	adds	r2, r3, #2
 800dcd6:	491a      	ldr	r1, [pc, #104]	@ (800dd40 <Generic_OnOff_Status+0xe0>)
 800dcd8:	4603      	mov	r3, r0
 800dcda:	005b      	lsls	r3, r3, #1
 800dcdc:	4403      	add	r3, r0
 800dcde:	005b      	lsls	r3, r3, #1
 800dce0:	440b      	add	r3, r1
 800dce2:	3305      	adds	r3, #5
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	7013      	strb	r3, [r2, #0]
       *plength = 3; 
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	2203      	movs	r2, #3
 800dcec:	601a      	str	r2, [r3, #0]
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 0;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	4a10      	ldr	r2, [pc, #64]	@ (800dd38 <Generic_OnOff_Status+0xd8>)
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	005b      	lsls	r3, r3, #1
 800dcfa:	440b      	add	r3, r1
 800dcfc:	4413      	add	r3, r2
 800dcfe:	3301      	adds	r3, #1
 800dd00:	2200      	movs	r2, #0
 800dd02:	701a      	strb	r2, [r3, #0]
 800dd04:	e002      	b.n	800dd0c <Generic_OnOff_Status+0xac>
       be sent in status message.
       length of received data is equal to 2B
    */
    TRACE_M(TF_GENERIC_M, "Generic_OnOff_Status sent without Transition \r\n"); 
    TRACE_M(TF_GENERIC_M, "%d \r\n",*pOnOff_status);
    *plength = 1;
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	601a      	str	r2, [r3, #0]
  }
  *pOnOff_status = Generic_OnOffStatus[pmsgParam->elementIndex].Present_OnOff_State; 
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	4619      	mov	r1, r3
 800dd12:	4a0b      	ldr	r2, [pc, #44]	@ (800dd40 <Generic_OnOff_Status+0xe0>)
 800dd14:	460b      	mov	r3, r1
 800dd16:	005b      	lsls	r3, r3, #1
 800dd18:	440b      	add	r3, r1
 800dd1a:	005b      	lsls	r3, r3, #1
 800dd1c:	4413      	add	r3, r2
 800dd1e:	781a      	ldrb	r2, [r3, #0]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3710      	adds	r7, #16
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	08030bc8 	.word	0x08030bc8
 800dd34:	0802e6f0 	.word	0x0802e6f0
 800dd38:	2000458c 	.word	0x2000458c
 800dd3c:	2000456c 	.word	0x2000456c
 800dd40:	20004584 	.word	0x20004584

0800dd44 <Generic_Level_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Level_Set(const MOBLEUINT8* plevel_param, 
                               MOBLEUINT32 length,
                               MODEL_MessageHeader_t *pmsgParam) 
{
 800dd44:	b5b0      	push	{r4, r5, r7, lr}
 800dd46:	b088      	sub	sp, #32
 800dd48:	af02      	add	r7, sp, #8
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
  TRACE_M(TF_GENERIC_M, "Generic_Level_Set callback received \r\n");
  
  Generic_LevelParam_t Generic_LevelParam;
  MOBLEINT16 setValue;
  
  Generic_LevelParam.TargetLevel = CopyU8LittleEndienArrayToU16word((MOBLEUINT8*)plevel_param);
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f7ff fdf2 	bl	800d93a <CopyU8LittleEndienArrayToU16word>
 800dd56:	4603      	mov	r3, r0
 800dd58:	b21b      	sxth	r3, r3
 800dd5a:	823b      	strh	r3, [r7, #16]
  Generic_LevelParam.Generic_TID = plevel_param[2]; 
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	3302      	adds	r3, #2
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	74bb      	strb	r3, [r7, #18]
  
  setValue =  Generic_LevelParam.TargetLevel;
 800dd64:	8a3b      	ldrh	r3, [r7, #16]
 800dd66:	82fb      	strh	r3, [r7, #22]
  /* Check for Optional Parameters. 
     length > 3  plevel_param has level,TID,Transition Time, Delay      
     length < 3  plevel_param has level,TID
  */ 
  if((length > 3) && (plevel_param[3] !=0))
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	2b03      	cmp	r3, #3
 800dd6c:	d970      	bls.n	800de50 <Generic_Level_Set+0x10c>
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	3303      	adds	r3, #3
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d06b      	beq.n	800de50 <Generic_Level_Set+0x10c>
  {
     Generic_LevelParam.Transition_Time = plevel_param[3];
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	3303      	adds	r3, #3
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	74fb      	strb	r3, [r7, #19]
     Generic_LevelParam.Delay_Time = plevel_param[4];
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	3304      	adds	r3, #4
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	753b      	strb	r3, [r7, #20]
     /* Copy the data into status message which needs to be update in 
       application message.
     */
    Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = setValue;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	4a66      	ldr	r2, [pc, #408]	@ (800df28 <Generic_Level_Set+0x1e4>)
 800dd90:	460b      	mov	r3, r1
 800dd92:	005b      	lsls	r3, r3, #1
 800dd94:	440b      	add	r3, r1
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	4413      	add	r3, r2
 800dd9a:	3302      	adds	r3, #2
 800dd9c:	8afa      	ldrh	r2, [r7, #22]
 800dd9e:	801a      	strh	r2, [r3, #0]
    Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime = Generic_LevelParam.Transition_Time;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	4619      	mov	r1, r3
 800dda6:	7cf8      	ldrb	r0, [r7, #19]
 800dda8:	4a5f      	ldr	r2, [pc, #380]	@ (800df28 <Generic_Level_Set+0x1e4>)
 800ddaa:	460b      	mov	r3, r1
 800ddac:	005b      	lsls	r3, r3, #1
 800ddae:	440b      	add	r3, r1
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	4413      	add	r3, r2
 800ddb4:	3304      	adds	r3, #4
 800ddb6:	4602      	mov	r2, r0
 800ddb8:	701a      	strb	r2, [r3, #0]
    /* copy status parameters in Temporary parameters for transition 
       process.
    */
    Generic_TemporaryStatus[pmsgParam->elementIndex].TargetValue16 = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	4a58      	ldr	r2, [pc, #352]	@ (800df28 <Generic_Level_Set+0x1e4>)
 800ddc8:	4603      	mov	r3, r0
 800ddca:	005b      	lsls	r3, r3, #1
 800ddcc:	4403      	add	r3, r0
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	4413      	add	r3, r2
 800ddd2:	3302      	adds	r3, #2
 800ddd4:	f9b3 0000 	ldrsh.w	r0, [r3]
 800ddd8:	4a54      	ldr	r2, [pc, #336]	@ (800df2c <Generic_Level_Set+0x1e8>)
 800ddda:	460b      	mov	r3, r1
 800dddc:	009b      	lsls	r3, r3, #2
 800ddde:	440b      	add	r3, r1
 800dde0:	4413      	add	r3, r2
 800dde2:	4602      	mov	r2, r0
 800dde4:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	4618      	mov	r0, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	4a4c      	ldr	r2, [pc, #304]	@ (800df28 <Generic_Level_Set+0x1e4>)
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	005b      	lsls	r3, r3, #1
 800ddfa:	4403      	add	r3, r0
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	4413      	add	r3, r2
 800de00:	3304      	adds	r3, #4
 800de02:	7818      	ldrb	r0, [r3, #0]
 800de04:	4a49      	ldr	r2, [pc, #292]	@ (800df2c <Generic_Level_Set+0x1e8>)
 800de06:	460b      	mov	r3, r1
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	440b      	add	r3, r1
 800de0c:	4413      	add	r3, r2
 800de0e:	4602      	mov	r2, r0
 800de10:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
      step size for transition state machine
    */
    Generic_GetStepValue(plevel_param[3], pmsgParam->elementIndex); 
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	3303      	adds	r3, #3
 800de16:	781a      	ldrb	r2, [r3, #0]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	4619      	mov	r1, r3
 800de1e:	4610      	mov	r0, r2
 800de20:	f000 ff60 	bl	800ece4 <Generic_GetStepValue>
    /*option parameter flag, enable to sent all required parameter in status.*/
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	4619      	mov	r1, r3
 800de2a:	4a41      	ldr	r2, [pc, #260]	@ (800df30 <Generic_Level_Set+0x1ec>)
 800de2c:	460b      	mov	r3, r1
 800de2e:	005b      	lsls	r3, r3, #1
 800de30:	440b      	add	r3, r1
 800de32:	4413      	add	r3, r2
 800de34:	3301      	adds	r3, #1
 800de36:	2201      	movs	r2, #1
 800de38:	701a      	strb	r2, [r3, #0]
    /*transition process enable flag. */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_LEVEL_TRANSITION_START;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	4619      	mov	r1, r3
 800de40:	4a3b      	ldr	r2, [pc, #236]	@ (800df30 <Generic_Level_Set+0x1ec>)
 800de42:	460b      	mov	r3, r1
 800de44:	005b      	lsls	r3, r3, #1
 800de46:	440b      	add	r3, r1
 800de48:	4413      	add	r3, r2
 800de4a:	2202      	movs	r2, #2
 800de4c:	701a      	strb	r2, [r3, #0]
 800de4e:	e01a      	b.n	800de86 <Generic_Level_Set+0x142>

#else
     /* When no optional parameter received, target value will
         be set as present value in application.
     */
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	4618      	mov	r0, r3
 800de56:	f001 fa31 	bl	800f2bc <Generic_TransitionParameterReset>
    Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16= setValue;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	4619      	mov	r1, r3
 800de60:	4a31      	ldr	r2, [pc, #196]	@ (800df28 <Generic_Level_Set+0x1e4>)
 800de62:	460b      	mov	r3, r1
 800de64:	005b      	lsls	r3, r3, #1
 800de66:	440b      	add	r3, r1
 800de68:	009b      	lsls	r3, r3, #2
 800de6a:	4413      	add	r3, r2
 800de6c:	8afa      	ldrh	r2, [r7, #22]
 800de6e:	801a      	strh	r2, [r3, #0]
    Generic_TimeParam[pmsgParam->elementIndex].StepValue = 0;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	4619      	mov	r1, r3
 800de76:	4a2f      	ldr	r2, [pc, #188]	@ (800df34 <Generic_Level_Set+0x1f0>)
 800de78:	460b      	mov	r3, r1
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	440b      	add	r3, r1
 800de7e:	005b      	lsls	r3, r3, #1
 800de80:	4413      	add	r3, r2
 800de82:	2200      	movs	r2, #0
 800de84:	701a      	strb	r2, [r3, #0]
#endif    
  }  
  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	4618      	mov	r0, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	4619      	mov	r1, r3
 800de92:	4a25      	ldr	r2, [pc, #148]	@ (800df28 <Generic_Level_Set+0x1e4>)
 800de94:	4603      	mov	r3, r0
 800de96:	005b      	lsls	r3, r3, #1
 800de98:	4403      	add	r3, r0
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	4413      	add	r3, r2
 800de9e:	f9b3 0000 	ldrsh.w	r0, [r3]
 800dea2:	4a21      	ldr	r2, [pc, #132]	@ (800df28 <Generic_Level_Set+0x1e4>)
 800dea4:	460b      	mov	r3, r1
 800dea6:	005b      	lsls	r3, r3, #1
 800dea8:	440b      	add	r3, r1
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	4413      	add	r3, r2
 800deae:	3306      	adds	r3, #6
 800deb0:	4602      	mov	r2, r0
 800deb2:	801a      	strh	r2, [r3, #0]
 
  /* Application Callback */
  (GenericAppli_cb.Level_Set_cb)(&Generic_LevelStatus[pmsgParam->elementIndex], 0, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800deb4:	4b20      	ldr	r3, [pc, #128]	@ (800df38 <Generic_Level_Set+0x1f4>)
 800deb6:	689c      	ldr	r4, [r3, #8]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	461a      	mov	r2, r3
 800debe:	4613      	mov	r3, r2
 800dec0:	005b      	lsls	r3, r3, #1
 800dec2:	4413      	add	r3, r2
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	4a18      	ldr	r2, [pc, #96]	@ (800df28 <Generic_Level_Set+0x1e4>)
 800dec8:	1898      	adds	r0, r3, r2
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	88da      	ldrh	r2, [r3, #6]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	2100      	movs	r1, #0
 800ded4:	47a0      	blx	r4
#ifdef ENABLE_MODEL_BINDING       
  /* Binding of Generic level with light lightnes actual */
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET, pmsgParam->elementIndex,
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	461a      	mov	r2, r3
 800dedc:	4613      	mov	r3, r2
 800dede:	005b      	lsls	r3, r3, #1
 800dee0:	4413      	add	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	4a10      	ldr	r2, [pc, #64]	@ (800df28 <Generic_Level_Set+0x1e4>)
 800dee6:	1898      	adds	r0, r3, r2
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	781a      	ldrb	r2, [r3, #0]
        Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	461c      	mov	r4, r3
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET, pmsgParam->elementIndex,
 800def2:	490f      	ldr	r1, [pc, #60]	@ (800df30 <Generic_Level_Set+0x1ec>)
 800def4:	4623      	mov	r3, r4
 800def6:	005b      	lsls	r3, r3, #1
 800def8:	4423      	add	r3, r4
 800defa:	440b      	add	r3, r1
 800defc:	7819      	ldrb	r1, [r3, #0]
        Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	461d      	mov	r5, r3
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET, pmsgParam->elementIndex,
 800df04:	4c0a      	ldr	r4, [pc, #40]	@ (800df30 <Generic_Level_Set+0x1ec>)
 800df06:	462b      	mov	r3, r5
 800df08:	005b      	lsls	r3, r3, #1
 800df0a:	442b      	add	r3, r5
 800df0c:	4423      	add	r3, r4
 800df0e:	3302      	adds	r3, #2
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	460b      	mov	r3, r1
 800df16:	2101      	movs	r1, #1
 800df18:	f003 f9cc 	bl	80112b4 <GenericLevel_LightBinding>
#endif 
        
  return MOBLE_RESULT_SUCCESS;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3718      	adds	r7, #24
 800df22:	46bd      	mov	sp, r7
 800df24:	bdb0      	pop	{r4, r5, r7, pc}
 800df26:	bf00      	nop
 800df28:	20004578 	.word	0x20004578
 800df2c:	20004564 	.word	0x20004564
 800df30:	2000458c 	.word	0x2000458c
 800df34:	2000456c 	.word	0x2000456c
 800df38:	080308dc 	.word	0x080308dc

0800df3c <Generic_Delta_Set>:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & AppKey Offset
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Delta_Set(const MOBLEUINT8* plevel_param, MOBLEUINT32 length,\
                               MODEL_MessageHeader_t *pmsgParam) 
{
 800df3c:	b5b0      	push	{r4, r5, r7, lr}
 800df3e:	b08a      	sub	sp, #40	@ 0x28
 800df40:	af02      	add	r7, sp, #8
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]
  
  Generic_DeltaLevelParam_t Generic_DeltaLevelParam ;
  MOBLEUINT32 delta;
  
  /* Copy the 4Bytes data to local variable */
  delta = (plevel_param[3] << 24);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	3303      	adds	r3, #3
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	061b      	lsls	r3, r3, #24
 800df50:	61fb      	str	r3, [r7, #28]
  delta |= (plevel_param[2] << 16);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	3302      	adds	r3, #2
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	041b      	lsls	r3, r3, #16
 800df5a:	69fa      	ldr	r2, [r7, #28]
 800df5c:	4313      	orrs	r3, r2
 800df5e:	61fb      	str	r3, [r7, #28]
  delta |= (plevel_param[1] << 8);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	3301      	adds	r3, #1
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	021b      	lsls	r3, r3, #8
 800df68:	69fa      	ldr	r2, [r7, #28]
 800df6a:	4313      	orrs	r3, r2
 800df6c:	61fb      	str	r3, [r7, #28]
  delta |= (plevel_param[0]);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	461a      	mov	r2, r3
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	4313      	orrs	r3, r2
 800df78:	61fb      	str	r3, [r7, #28]
  Generic_DeltaLevelParam.TargetDeltaLevel32 = delta;
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	617b      	str	r3, [r7, #20]
  
  TRACE_M(TF_GENERIC_M,"Generic delta value %.2lx \r\n",
          Generic_DeltaLevelParam.TargetDeltaLevel32);
  
  Generic_DeltaLevelParam.Generic_TID = plevel_param[4];
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	3304      	adds	r3, #4
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	763b      	strb	r3, [r7, #24]
  /* 
     Check for Optional Parameters 
     length > 5  Delata level,TID, Trasition Time(optional),Delay(optional)
     length < 5  Delta level,TID
  */    
  if((length > 5) && (plevel_param[5] !=0))
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	2b05      	cmp	r3, #5
 800df8a:	f240 8082 	bls.w	800e092 <Generic_Delta_Set+0x156>
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	3305      	adds	r3, #5
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d07c      	beq.n	800e092 <Generic_Delta_Set+0x156>
  {
    Generic_DeltaLevelParam.Transition_Time = plevel_param[5];
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	3305      	adds	r3, #5
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	767b      	strb	r3, [r7, #25]
    Generic_DeltaLevelParam.Delay_Time = plevel_param[6];
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	3306      	adds	r3, #6
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	76bb      	strb	r3, [r7, #26]
    /* Copy the data into status message which needs to be update in 
     application message.
    */ 
    Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 + 
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	4619      	mov	r1, r3
 800dfae:	4aae      	ldr	r2, [pc, #696]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	005b      	lsls	r3, r3, #1
 800dfb4:	440b      	add	r3, r1
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	4413      	add	r3, r2
 800dfba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfbe:	b29a      	uxth	r2, r3
                                                Generic_DeltaLevelParam.TargetDeltaLevel32;
 800dfc0:	697b      	ldr	r3, [r7, #20]
    Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 + 
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	4413      	add	r3, r2
 800dfc6:	b29a      	uxth	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	4619      	mov	r1, r3
 800dfce:	b210      	sxth	r0, r2
 800dfd0:	4aa5      	ldr	r2, [pc, #660]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	005b      	lsls	r3, r3, #1
 800dfd6:	440b      	add	r3, r1
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4413      	add	r3, r2
 800dfdc:	3302      	adds	r3, #2
 800dfde:	4602      	mov	r2, r0
 800dfe0:	801a      	strh	r2, [r3, #0]
    Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime = Generic_DeltaLevelParam.Transition_Time;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	7e78      	ldrb	r0, [r7, #25]
 800dfea:	4a9f      	ldr	r2, [pc, #636]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800dfec:	460b      	mov	r3, r1
 800dfee:	005b      	lsls	r3, r3, #1
 800dff0:	440b      	add	r3, r1
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	4413      	add	r3, r2
 800dff6:	3304      	adds	r3, #4
 800dff8:	4602      	mov	r2, r0
 800dffa:	701a      	strb	r2, [r3, #0]
       
    /* copy status parameters in Temporary parameters for transition 
     process.
    */
    Generic_TemporaryStatus[pmsgParam->elementIndex].TargetValue16 = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	4618      	mov	r0, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	4619      	mov	r1, r3
 800e008:	4a97      	ldr	r2, [pc, #604]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e00a:	4603      	mov	r3, r0
 800e00c:	005b      	lsls	r3, r3, #1
 800e00e:	4403      	add	r3, r0
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	4413      	add	r3, r2
 800e014:	3302      	adds	r3, #2
 800e016:	f9b3 0000 	ldrsh.w	r0, [r3]
 800e01a:	4a94      	ldr	r2, [pc, #592]	@ (800e26c <Generic_Delta_Set+0x330>)
 800e01c:	460b      	mov	r3, r1
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	440b      	add	r3, r1
 800e022:	4413      	add	r3, r2
 800e024:	4602      	mov	r2, r0
 800e026:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	4618      	mov	r0, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	4619      	mov	r1, r3
 800e036:	4a8c      	ldr	r2, [pc, #560]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e038:	4603      	mov	r3, r0
 800e03a:	005b      	lsls	r3, r3, #1
 800e03c:	4403      	add	r3, r0
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	4413      	add	r3, r2
 800e042:	3304      	adds	r3, #4
 800e044:	7818      	ldrb	r0, [r3, #0]
 800e046:	4a89      	ldr	r2, [pc, #548]	@ (800e26c <Generic_Delta_Set+0x330>)
 800e048:	460b      	mov	r3, r1
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	440b      	add	r3, r1
 800e04e:	4413      	add	r3, r2
 800e050:	4602      	mov	r2, r0
 800e052:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
    step size for transition state machine.
    */
    Generic_GetStepValue(plevel_param[5], pmsgParam->elementIndex);   
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	3305      	adds	r3, #5
 800e058:	781a      	ldrb	r2, [r3, #0]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	4619      	mov	r1, r3
 800e060:	4610      	mov	r0, r2
 800e062:	f000 fe3f 	bl	800ece4 <Generic_GetStepValue>
       
    /*option parameter flag, enable to sent all required parameter in status.*/ 
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	4619      	mov	r1, r3
 800e06c:	4a80      	ldr	r2, [pc, #512]	@ (800e270 <Generic_Delta_Set+0x334>)
 800e06e:	460b      	mov	r3, r1
 800e070:	005b      	lsls	r3, r3, #1
 800e072:	440b      	add	r3, r1
 800e074:	4413      	add	r3, r2
 800e076:	3301      	adds	r3, #1
 800e078:	2201      	movs	r2, #1
 800e07a:	701a      	strb	r2, [r3, #0]
       
    /*transition process enable flag. */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_LEVEL_TRANSITION_START;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	4619      	mov	r1, r3
 800e082:	4a7b      	ldr	r2, [pc, #492]	@ (800e270 <Generic_Delta_Set+0x334>)
 800e084:	460b      	mov	r3, r1
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	440b      	add	r3, r1
 800e08a:	4413      	add	r3, r2
 800e08c:	2202      	movs	r2, #2
 800e08e:	701a      	strb	r2, [r3, #0]
 800e090:	e097      	b.n	800e1c2 <Generic_Delta_Set+0x286>
  }
  else
  {   
		
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	4618      	mov	r0, r3
 800e098:	f001 f910 	bl	800f2bc <Generic_TransitionParameterReset>
    
    if(Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID == Generic_DeltaLevelParam.Generic_TID)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	4a71      	ldr	r2, [pc, #452]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	005b      	lsls	r3, r3, #1
 800e0a8:	440b      	add	r3, r1
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	4413      	add	r3, r2
 800e0ae:	3305      	adds	r3, #5
 800e0b0:	781a      	ldrb	r2, [r3, #0]
 800e0b2:	7e3b      	ldrb	r3, [r7, #24]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d163      	bne.n	800e180 <Generic_Delta_Set+0x244>
    {
        if(Generic_DeltaLevelParam.TargetDeltaLevel32 > Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level)
 800e0b8:	697a      	ldr	r2, [r7, #20]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	4969      	ldr	r1, [pc, #420]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	005b      	lsls	r3, r3, #1
 800e0c6:	4403      	add	r3, r0
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	440b      	add	r3, r1
 800e0cc:	3308      	adds	r3, #8
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	dd2a      	ble.n	800e12a <Generic_Delta_Set+0x1ee>
      {
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 += (Generic_DeltaLevelParam.TargetDeltaLevel32  
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	4619      	mov	r1, r3
 800e0da:	4a63      	ldr	r2, [pc, #396]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e0dc:	460b      	mov	r3, r1
 800e0de:	005b      	lsls	r3, r3, #1
 800e0e0:	440b      	add	r3, r1
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	4413      	add	r3, r2
 800e0e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0ea:	b29a      	uxth	r2, r3
 800e0ec:	697b      	ldr	r3, [r7, #20]
          - Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level);     
 800e0ee:	b299      	uxth	r1, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	461c      	mov	r4, r3
 800e0f6:	485c      	ldr	r0, [pc, #368]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e0f8:	4623      	mov	r3, r4
 800e0fa:	005b      	lsls	r3, r3, #1
 800e0fc:	4423      	add	r3, r4
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	4403      	add	r3, r0
 800e102:	3308      	adds	r3, #8
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	b29b      	uxth	r3, r3
 800e108:	1acb      	subs	r3, r1, r3
 800e10a:	b29b      	uxth	r3, r3
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 += (Generic_DeltaLevelParam.TargetDeltaLevel32  
 800e10c:	4413      	add	r3, r2
 800e10e:	b29a      	uxth	r2, r3
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	4619      	mov	r1, r3
 800e116:	b210      	sxth	r0, r2
 800e118:	4a53      	ldr	r2, [pc, #332]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e11a:	460b      	mov	r3, r1
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	440b      	add	r3, r1
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	4413      	add	r3, r2
 800e124:	4602      	mov	r2, r0
 800e126:	801a      	strh	r2, [r3, #0]
 800e128:	e046      	b.n	800e1b8 <Generic_Delta_Set+0x27c>
      }
      else
      {
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 -= (Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	4619      	mov	r1, r3
 800e130:	4a4d      	ldr	r2, [pc, #308]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e132:	460b      	mov	r3, r1
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	440b      	add	r3, r1
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	4413      	add	r3, r2
 800e13c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e140:	b29a      	uxth	r2, r3
            -Generic_DeltaLevelParam.TargetDeltaLevel32) ;           
 800e142:	697b      	ldr	r3, [r7, #20]
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 -= (Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level
 800e144:	b299      	uxth	r1, r3
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	461c      	mov	r4, r3
 800e14c:	4846      	ldr	r0, [pc, #280]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e14e:	4623      	mov	r3, r4
 800e150:	005b      	lsls	r3, r3, #1
 800e152:	4423      	add	r3, r4
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	4403      	add	r3, r0
 800e158:	3308      	adds	r3, #8
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	1acb      	subs	r3, r1, r3
 800e160:	b29b      	uxth	r3, r3
 800e162:	4413      	add	r3, r2
 800e164:	b29a      	uxth	r2, r3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	4619      	mov	r1, r3
 800e16c:	b210      	sxth	r0, r2
 800e16e:	4a3e      	ldr	r2, [pc, #248]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e170:	460b      	mov	r3, r1
 800e172:	005b      	lsls	r3, r3, #1
 800e174:	440b      	add	r3, r1
 800e176:	009b      	lsls	r3, r3, #2
 800e178:	4413      	add	r3, r2
 800e17a:	4602      	mov	r2, r0
 800e17c:	801a      	strh	r2, [r3, #0]
 800e17e:	e01b      	b.n	800e1b8 <Generic_Delta_Set+0x27c>
      }       
    }
    else
    {    /*If TID value is different from the last TID, then new transaction has been started*/
        Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 += Generic_DeltaLevelParam.TargetDeltaLevel32;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	4619      	mov	r1, r3
 800e186:	4a38      	ldr	r2, [pc, #224]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e188:	460b      	mov	r3, r1
 800e18a:	005b      	lsls	r3, r3, #1
 800e18c:	440b      	add	r3, r1
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	4413      	add	r3, r2
 800e192:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e196:	b29a      	uxth	r2, r3
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	4413      	add	r3, r2
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	b210      	sxth	r0, r2
 800e1a8:	4a2f      	ldr	r2, [pc, #188]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	005b      	lsls	r3, r3, #1
 800e1ae:	440b      	add	r3, r1
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4413      	add	r3, r2
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	801a      	strh	r2, [r3, #0]
    
#else
    /* When no optional parameter received, target value will
    be set as present value in application.
    */
	Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f001 f87d 	bl	800f2bc <Generic_TransitionParameterReset>
#endif   
  }
  
  TRACE_M(TF_GENERIC_M, "Generic Level value %.2x \r\n" ,Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16);
  
  Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level = Generic_DeltaLevelParam.TargetDeltaLevel32;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	697a      	ldr	r2, [r7, #20]
 800e1ca:	4927      	ldr	r1, [pc, #156]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	005b      	lsls	r3, r3, #1
 800e1d0:	4403      	add	r3, r0
 800e1d2:	009b      	lsls	r3, r3, #2
 800e1d4:	440b      	add	r3, r1
 800e1d6:	3308      	adds	r3, #8
 800e1d8:	601a      	str	r2, [r3, #0]
  Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID = Generic_DeltaLevelParam.Generic_TID; 
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	4619      	mov	r1, r3
 800e1e0:	7e38      	ldrb	r0, [r7, #24]
 800e1e2:	4a21      	ldr	r2, [pc, #132]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	005b      	lsls	r3, r3, #1
 800e1e8:	440b      	add	r3, r1
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	4413      	add	r3, r2
 800e1ee:	3305      	adds	r3, #5
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	701a      	strb	r2, [r3, #0]
      
  /* Application Callback */
  (GenericAppli_cb.Level_Set_cb)(&Generic_LevelStatus[pmsgParam->elementIndex], 0, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800e1f4:	4b1f      	ldr	r3, [pc, #124]	@ (800e274 <Generic_Delta_Set+0x338>)
 800e1f6:	689c      	ldr	r4, [r3, #8]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	4613      	mov	r3, r2
 800e200:	005b      	lsls	r3, r3, #1
 800e202:	4413      	add	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	4a18      	ldr	r2, [pc, #96]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e208:	1898      	adds	r0, r3, r2
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	88da      	ldrh	r2, [r3, #6]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	2100      	movs	r1, #0
 800e214:	47a0      	blx	r4
#ifdef ENABLE_MODEL_BINDING    
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS  
  /* Binding of Generic level with light lightnes actual */
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET,pmsgParam->elementIndex,
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	461a      	mov	r2, r3
 800e21c:	4613      	mov	r3, r2
 800e21e:	005b      	lsls	r3, r3, #1
 800e220:	4413      	add	r3, r2
 800e222:	009b      	lsls	r3, r3, #2
 800e224:	4a10      	ldr	r2, [pc, #64]	@ (800e268 <Generic_Delta_Set+0x32c>)
 800e226:	1898      	adds	r0, r3, r2
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	781a      	ldrb	r2, [r3, #0]
         Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	461c      	mov	r4, r3
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET,pmsgParam->elementIndex,
 800e232:	490f      	ldr	r1, [pc, #60]	@ (800e270 <Generic_Delta_Set+0x334>)
 800e234:	4623      	mov	r3, r4
 800e236:	005b      	lsls	r3, r3, #1
 800e238:	4423      	add	r3, r4
 800e23a:	440b      	add	r3, r1
 800e23c:	7819      	ldrb	r1, [r3, #0]
         Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	461d      	mov	r5, r3
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET,pmsgParam->elementIndex,
 800e244:	4c0a      	ldr	r4, [pc, #40]	@ (800e270 <Generic_Delta_Set+0x334>)
 800e246:	462b      	mov	r3, r5
 800e248:	005b      	lsls	r3, r3, #1
 800e24a:	442b      	add	r3, r5
 800e24c:	4423      	add	r3, r4
 800e24e:	3302      	adds	r3, #2
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	460b      	mov	r3, r1
 800e256:	2101      	movs	r1, #1
 800e258:	f003 f82c 	bl	80112b4 <GenericLevel_LightBinding>
#endif  
#endif  
  return MOBLE_RESULT_SUCCESS;
 800e25c:	2300      	movs	r3, #0
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3720      	adds	r7, #32
 800e262:	46bd      	mov	sp, r7
 800e264:	bdb0      	pop	{r4, r5, r7, pc}
 800e266:	bf00      	nop
 800e268:	20004578 	.word	0x20004578
 800e26c:	20004564 	.word	0x20004564
 800e270:	2000458c 	.word	0x2000458c
 800e274:	080308dc 	.word	0x080308dc

0800e278 <Generic_Move_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Move_Set(const MOBLEUINT8* plevel_param, 
                              MOBLEUINT32 length,
                              MODEL_MessageHeader_t *pmsgParam) 
{
 800e278:	b590      	push	{r4, r7, lr}
 800e27a:	b087      	sub	sp, #28
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	607a      	str	r2, [r7, #4]
  */
  TRACE_M(TF_GENERIC_M, "Generic_Move_Set callback received \r\n");
  
  Generic_LevelMoveParam_t  Generic_LevelMoveParam;
  
  Generic_LevelMoveParam.TargetMoveLevel16  = (plevel_param[1] << 8);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	3301      	adds	r3, #1
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	021b      	lsls	r3, r3, #8
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	823b      	strh	r3, [r7, #16]
  Generic_LevelMoveParam.TargetMoveLevel16 |= (plevel_param[0]);
 800e290:	8a3b      	ldrh	r3, [r7, #16]
 800e292:	68fa      	ldr	r2, [r7, #12]
 800e294:	7812      	ldrb	r2, [r2, #0]
 800e296:	4313      	orrs	r3, r2
 800e298:	b29b      	uxth	r3, r3
 800e29a:	823b      	strh	r3, [r7, #16]
  Generic_LevelMoveParam.Generic_TID = plevel_param[2];
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	3302      	adds	r3, #2
 800e2a0:	781b      	ldrb	r3, [r3, #0]
 800e2a2:	74bb      	strb	r3, [r7, #18]
  /* Check for Optional Parameters 
  
    length > 3 plevel_param has level,TID,Trasition Time,Delay
    length < 3 plevel_param has level,TID
  */     
  if((length > 3) && (plevel_param[3] !=0))
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	2b03      	cmp	r3, #3
 800e2a8:	d977      	bls.n	800e39a <Generic_Move_Set+0x122>
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	3303      	adds	r3, #3
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d072      	beq.n	800e39a <Generic_Move_Set+0x122>
  {
    Generic_LevelMoveParam.Transition_Time = plevel_param[3];
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	3303      	adds	r3, #3
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	74fb      	strb	r3, [r7, #19]
    Generic_LevelMoveParam.Delay_Time = plevel_param[4];
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	3304      	adds	r3, #4
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	753b      	strb	r3, [r7, #20]
    /* Copy the data into status message which needs to be update in 
      application message.
    */ 
    /* The assumption here is that the move command starts transition with each 
       step of size delta, which terminates only at max or min value */
    if (Generic_LevelMoveParam.TargetMoveLevel16 <= 0x7FFF)
 800e2c4:	8a3b      	ldrh	r3, [r7, #16]
 800e2c6:	b21b      	sxth	r3, r3
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	db0d      	blt.n	800e2e8 <Generic_Move_Set+0x70>
    {
        Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = 0x7FFF;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	4a5b      	ldr	r2, [pc, #364]	@ (800e440 <Generic_Move_Set+0x1c8>)
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	005b      	lsls	r3, r3, #1
 800e2d8:	440b      	add	r3, r1
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	4413      	add	r3, r2
 800e2de:	3302      	adds	r3, #2
 800e2e0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e2e4:	801a      	strh	r2, [r3, #0]
 800e2e6:	e00c      	b.n	800e302 <Generic_Move_Set+0x8a>
    }
    else
    {
        Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = 0x8000;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	4a54      	ldr	r2, [pc, #336]	@ (800e440 <Generic_Move_Set+0x1c8>)
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	005b      	lsls	r3, r3, #1
 800e2f4:	440b      	add	r3, r1
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	4413      	add	r3, r2
 800e2fa:	3302      	adds	r3, #2
 800e2fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800e300:	801a      	strh	r2, [r3, #0]
    }
    Generic_TemporaryStatus[pmsgParam->elementIndex].TargetValue16 = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	4618      	mov	r0, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	4619      	mov	r1, r3
 800e30e:	4a4c      	ldr	r2, [pc, #304]	@ (800e440 <Generic_Move_Set+0x1c8>)
 800e310:	4603      	mov	r3, r0
 800e312:	005b      	lsls	r3, r3, #1
 800e314:	4403      	add	r3, r0
 800e316:	009b      	lsls	r3, r3, #2
 800e318:	4413      	add	r3, r2
 800e31a:	3302      	adds	r3, #2
 800e31c:	f9b3 0000 	ldrsh.w	r0, [r3]
 800e320:	4a48      	ldr	r2, [pc, #288]	@ (800e444 <Generic_Move_Set+0x1cc>)
 800e322:	460b      	mov	r3, r1
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	440b      	add	r3, r1
 800e328:	4413      	add	r3, r2
 800e32a:	4602      	mov	r2, r0
 800e32c:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = UNDEFSTEPVAL;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	4619      	mov	r1, r3
 800e336:	4a43      	ldr	r2, [pc, #268]	@ (800e444 <Generic_Move_Set+0x1cc>)
 800e338:	460b      	mov	r3, r1
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	440b      	add	r3, r1
 800e33e:	4413      	add	r3, r2
 800e340:	223f      	movs	r2, #63	@ 0x3f
 800e342:	701a      	strb	r2, [r3, #0]
    Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime = UNDEFSTEPVAL;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	4619      	mov	r1, r3
 800e34a:	4a3d      	ldr	r2, [pc, #244]	@ (800e440 <Generic_Move_Set+0x1c8>)
 800e34c:	460b      	mov	r3, r1
 800e34e:	005b      	lsls	r3, r3, #1
 800e350:	440b      	add	r3, r1
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	4413      	add	r3, r2
 800e356:	3304      	adds	r3, #4
 800e358:	223f      	movs	r2, #63	@ 0x3f
 800e35a:	701a      	strb	r2, [r3, #0]
    
    /* Function to calculate time parameters, step resolution
      step size for transition state machine.
    */
    Generic_GetStepValue(plevel_param[3], pmsgParam->elementIndex);   
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	3303      	adds	r3, #3
 800e360:	781a      	ldrb	r2, [r3, #0]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	4619      	mov	r1, r3
 800e368:	4610      	mov	r0, r2
 800e36a:	f000 fcbb 	bl	800ece4 <Generic_GetStepValue>
    /* option parameter flag, enable to sent all required parameter in status.*/
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;  
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	4619      	mov	r1, r3
 800e374:	4a34      	ldr	r2, [pc, #208]	@ (800e448 <Generic_Move_Set+0x1d0>)
 800e376:	460b      	mov	r3, r1
 800e378:	005b      	lsls	r3, r3, #1
 800e37a:	440b      	add	r3, r1
 800e37c:	4413      	add	r3, r2
 800e37e:	3301      	adds	r3, #1
 800e380:	2201      	movs	r2, #1
 800e382:	701a      	strb	r2, [r3, #0]
    /* transition process enable flag. */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_LEVEL_TRANSITION_START;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	4619      	mov	r1, r3
 800e38a:	4a2f      	ldr	r2, [pc, #188]	@ (800e448 <Generic_Move_Set+0x1d0>)
 800e38c:	460b      	mov	r3, r1
 800e38e:	005b      	lsls	r3, r3, #1
 800e390:	440b      	add	r3, r1
 800e392:	4413      	add	r3, r2
 800e394:	2202      	movs	r2, #2
 800e396:	701a      	strb	r2, [r3, #0]
 800e398:	e02e      	b.n	800e3f8 <Generic_Move_Set+0x180>
  }
  else
  {   
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f000 ff8c 	bl	800f2bc <Generic_TransitionParameterReset>
    
    if(Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID == Generic_LevelMoveParam.Generic_TID)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	4a25      	ldr	r2, [pc, #148]	@ (800e440 <Generic_Move_Set+0x1c8>)
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	005b      	lsls	r3, r3, #1
 800e3b0:	440b      	add	r3, r1
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	4413      	add	r3, r2
 800e3b6:	3305      	adds	r3, #5
 800e3b8:	781a      	ldrb	r2, [r3, #0]
 800e3ba:	7cbb      	ldrb	r3, [r7, #18]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d11b      	bne.n	800e3f8 <Generic_Move_Set+0x180>
    {
      Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 =  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	4a1e      	ldr	r2, [pc, #120]	@ (800e440 <Generic_Move_Set+0x1c8>)
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	005b      	lsls	r3, r3, #1
 800e3cc:	440b      	add	r3, r1
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	4413      	add	r3, r2
 800e3d2:	3306      	adds	r3, #6
 800e3d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3d8:	b29a      	uxth	r2, r3
        + Generic_LevelMoveParam.TargetMoveLevel16;
 800e3da:	8a3b      	ldrh	r3, [r7, #16]
 800e3dc:	4413      	add	r3, r2
 800e3de:	b29a      	uxth	r2, r3
      Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 =  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	4619      	mov	r1, r3
        + Generic_LevelMoveParam.TargetMoveLevel16;
 800e3e6:	b210      	sxth	r0, r2
      Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 =  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 
 800e3e8:	4a15      	ldr	r2, [pc, #84]	@ (800e440 <Generic_Move_Set+0x1c8>)
 800e3ea:	460b      	mov	r3, r1
 800e3ec:	005b      	lsls	r3, r3, #1
 800e3ee:	440b      	add	r3, r1
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	4413      	add	r3, r2
 800e3f4:	4602      	mov	r2, r0
 800e3f6:	801a      	strh	r2, [r3, #0]
    {
      
    }
    }
    
  Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID = Generic_LevelMoveParam.Generic_TID; 
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	7cb8      	ldrb	r0, [r7, #18]
 800e400:	4a0f      	ldr	r2, [pc, #60]	@ (800e440 <Generic_Move_Set+0x1c8>)
 800e402:	460b      	mov	r3, r1
 800e404:	005b      	lsls	r3, r3, #1
 800e406:	440b      	add	r3, r1
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4413      	add	r3, r2
 800e40c:	3305      	adds	r3, #5
 800e40e:	4602      	mov	r2, r0
 800e410:	701a      	strb	r2, [r3, #0]
 
  /* Application Callback */
  (GenericAppli_cb.LevelDeltaMove_Set_cb)(&Generic_LevelStatus[pmsgParam->elementIndex], 0, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800e412:	4b0e      	ldr	r3, [pc, #56]	@ (800e44c <Generic_Move_Set+0x1d4>)
 800e414:	691c      	ldr	r4, [r3, #16]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	461a      	mov	r2, r3
 800e41c:	4613      	mov	r3, r2
 800e41e:	005b      	lsls	r3, r3, #1
 800e420:	4413      	add	r3, r2
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	4a06      	ldr	r2, [pc, #24]	@ (800e440 <Generic_Move_Set+0x1c8>)
 800e426:	1898      	adds	r0, r3, r2
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	88da      	ldrh	r2, [r3, #6]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	2100      	movs	r1, #0
 800e432:	47a0      	blx	r4
     
  return MOBLE_RESULT_SUCCESS;
 800e434:	2300      	movs	r3, #0
}
 800e436:	4618      	mov	r0, r3
 800e438:	371c      	adds	r7, #28
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd90      	pop	{r4, r7, pc}
 800e43e:	bf00      	nop
 800e440:	20004578 	.word	0x20004578
 800e444:	20004564 	.word	0x20004564
 800e448:	2000458c 	.word	0x2000458c
 800e44c:	080308dc 	.word	0x080308dc

0800e450 <Generic_Level_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Level_Status(MOBLEUINT8* plevel_status, 
                                  MOBLEUINT32 *plength,
                                  MODEL_MessageHeader_t *pmsgParam) 
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
  Remaining Time: 1B Format as defined in Section 3.1.3 (C.1).
  
  */
  
  TRACE_M(TF_GENERIC_M, "Generic_Level_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#8205! \n\r");
 800e45c:	2100      	movs	r1, #0
 800e45e:	4842      	ldr	r0, [pc, #264]	@ (800e568 <Generic_Level_Status+0x118>)
 800e460:	f7ff f85c 	bl	800d51c <TraceHeader>
 800e464:	4841      	ldr	r0, [pc, #260]	@ (800e56c <Generic_Level_Status+0x11c>)
 800e466:	f01a fd03 	bl	8028e70 <iprintf>
  
  /* checking the transition is in process.
  checking for remaining time is not equal to zero.
  */
  
  if((Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam ==1) || (Generic_TimeParam[pmsgParam->elementIndex].StepValue != 0))
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	4619      	mov	r1, r3
 800e470:	4a3f      	ldr	r2, [pc, #252]	@ (800e570 <Generic_Level_Status+0x120>)
 800e472:	460b      	mov	r3, r1
 800e474:	005b      	lsls	r3, r3, #1
 800e476:	440b      	add	r3, r1
 800e478:	4413      	add	r3, r2
 800e47a:	3301      	adds	r3, #1
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d00c      	beq.n	800e49c <Generic_Level_Status+0x4c>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	781b      	ldrb	r3, [r3, #0]
 800e486:	4619      	mov	r1, r3
 800e488:	4a3a      	ldr	r2, [pc, #232]	@ (800e574 <Generic_Level_Status+0x124>)
 800e48a:	460b      	mov	r3, r1
 800e48c:	009b      	lsls	r3, r3, #2
 800e48e:	440b      	add	r3, r1
 800e490:	005b      	lsls	r3, r3, #1
 800e492:	4413      	add	r3, r2
 800e494:	f993 3000 	ldrsb.w	r3, [r3]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d03e      	beq.n	800e51a <Generic_Level_Status+0xca>
  {
    TRACE_M(TF_GENERIC_M, "Generic_Level_Status sent with Transition \r\n"); 

    *(plevel_status+2) = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	4a35      	ldr	r2, [pc, #212]	@ (800e578 <Generic_Level_Status+0x128>)
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	005b      	lsls	r3, r3, #1
 800e4a8:	440b      	add	r3, r1
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	4413      	add	r3, r2
 800e4ae:	3302      	adds	r3, #2
 800e4b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	3302      	adds	r3, #2
 800e4b8:	b2d2      	uxtb	r2, r2
 800e4ba:	701a      	strb	r2, [r3, #0]
    *(plevel_status+3) = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 >> 8;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	4a2d      	ldr	r2, [pc, #180]	@ (800e578 <Generic_Level_Status+0x128>)
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	005b      	lsls	r3, r3, #1
 800e4c8:	440b      	add	r3, r1
 800e4ca:	009b      	lsls	r3, r3, #2
 800e4cc:	4413      	add	r3, r2
 800e4ce:	3302      	adds	r3, #2
 800e4d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4d4:	121b      	asrs	r3, r3, #8
 800e4d6:	b21a      	sxth	r2, r3
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	3303      	adds	r3, #3
 800e4dc:	b2d2      	uxtb	r2, r2
 800e4de:	701a      	strb	r2, [r3, #0]
    *(plevel_status+4) = Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	1d1a      	adds	r2, r3, #4
 800e4ea:	4923      	ldr	r1, [pc, #140]	@ (800e578 <Generic_Level_Status+0x128>)
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	005b      	lsls	r3, r3, #1
 800e4f0:	4403      	add	r3, r0
 800e4f2:	009b      	lsls	r3, r3, #2
 800e4f4:	440b      	add	r3, r1
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	7013      	strb	r3, [r2, #0]
    *plength = 5;
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	2205      	movs	r2, #5
 800e500:	601a      	str	r2, [r3, #0]
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 0;    
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	4619      	mov	r1, r3
 800e508:	4a19      	ldr	r2, [pc, #100]	@ (800e570 <Generic_Level_Status+0x120>)
 800e50a:	460b      	mov	r3, r1
 800e50c:	005b      	lsls	r3, r3, #1
 800e50e:	440b      	add	r3, r1
 800e510:	4413      	add	r3, r2
 800e512:	3301      	adds	r3, #1
 800e514:	2200      	movs	r2, #0
 800e516:	701a      	strb	r2, [r3, #0]
 800e518:	e002      	b.n	800e520 <Generic_Level_Status+0xd0>
  }
  else
  {
    TRACE_M(TF_GENERIC_M, "Generic_Level_Status sent without Transition \r\n"); 
    *plength = 2;             
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	2202      	movs	r2, #2
 800e51e:	601a      	str	r2, [r3, #0]
  }
     
  *(plevel_status) = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	4619      	mov	r1, r3
 800e526:	4a14      	ldr	r2, [pc, #80]	@ (800e578 <Generic_Level_Status+0x128>)
 800e528:	460b      	mov	r3, r1
 800e52a:	005b      	lsls	r3, r3, #1
 800e52c:	440b      	add	r3, r1
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	4413      	add	r3, r2
 800e532:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e536:	b2da      	uxtb	r2, r3
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	701a      	strb	r2, [r3, #0]
  *(plevel_status+1) = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 >> 8;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	4619      	mov	r1, r3
 800e542:	4a0d      	ldr	r2, [pc, #52]	@ (800e578 <Generic_Level_Status+0x128>)
 800e544:	460b      	mov	r3, r1
 800e546:	005b      	lsls	r3, r3, #1
 800e548:	440b      	add	r3, r1
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	4413      	add	r3, r2
 800e54e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e552:	121b      	asrs	r3, r3, #8
 800e554:	b21a      	sxth	r2, r3
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	3301      	adds	r3, #1
 800e55a:	b2d2      	uxtb	r2, r2
 800e55c:	701a      	strb	r2, [r3, #0]
  TRACE_M(TF_GENERIC_M, "%d \r\n", Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16); 
  return MOBLE_RESULT_SUCCESS;   
 800e55e:	2300      	movs	r3, #0
}
 800e560:	4618      	mov	r0, r3
 800e562:	3710      	adds	r7, #16
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}
 800e568:	08030be0 	.word	0x08030be0
 800e56c:	0802e6fc 	.word	0x0802e6fc
 800e570:	2000458c 	.word	0x2000458c
 800e574:	2000456c 	.word	0x2000456c
 800e578:	20004578 	.word	0x20004578

0800e57c <Generic_PowerOnOff_Set>:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & AppKey Offset
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_PowerOnOff_Set(const MOBLEUINT8 *powerOnOff_param , MOBLEUINT32 length,\
                                   MODEL_MessageHeader_t *pmsgParam) 
{
 800e57c:	b590      	push	{r4, r7, lr}
 800e57e:	b087      	sub	sp, #28
 800e580:	af00      	add	r7, sp, #0
 800e582:	60f8      	str	r0, [r7, #12]
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	607a      	str	r2, [r7, #4]
  TRACE_M(TF_GENERIC_M, "Generic_PowerOnOff_Set callback received \r\n");
  TRACE_M(TF_GENERIC_M,"Generic_PowerOnOff_Set is %d\r\n", powerOnOff_param[0]);
  
  Generic_PowerOnOffParam_t Generic_PowerOnOffParam[APPLICATION_NUMBER_OF_ELEMENTS];
  
  Generic_PowerOnOffParam[pmsgParam->elementIndex].PowerOnOffState = powerOnOff_param[0];
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	4619      	mov	r1, r3
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	781a      	ldrb	r2, [r3, #0]
 800e592:	f101 0318 	add.w	r3, r1, #24
 800e596:	443b      	add	r3, r7
 800e598:	f803 2c04 	strb.w	r2, [r3, #-4]
  
  /* Application Callback */
  (GenericAppli_cb.GenericPowerOnOff_cb)(&Generic_PowerOnOffParam[pmsgParam->elementIndex], length, pmsgParam->dst_peer,\
 800e59c:	4b09      	ldr	r3, [pc, #36]	@ (800e5c4 <Generic_PowerOnOff_Set+0x48>)
 800e59e:	699c      	ldr	r4, [r3, #24]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	f107 0314 	add.w	r3, r7, #20
 800e5aa:	1898      	adds	r0, r3, r2
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	b2d9      	uxtb	r1, r3
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	88da      	ldrh	r2, [r3, #6]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	47a0      	blx	r4
                                                     pmsgParam->elementIndex);
  return MOBLE_RESULT_SUCCESS;
 800e5ba:	2300      	movs	r3, #0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	371c      	adds	r7, #28
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd90      	pop	{r4, r7, pc}
 800e5c4:	080308dc 	.word	0x080308dc

0800e5c8 <Generic_PowerOnOff_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_PowerOnOff_Status(MOBLEUINT8 *powerOnOff_status , 
                                       MOBLEUINT32 *plength,
                                       MODEL_MessageHeader_t *pmsgParam) 
{  
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	60f8      	str	r0, [r7, #12]
 800e5d0:	60b9      	str	r1, [r7, #8]
 800e5d2:	607a      	str	r2, [r7, #4]
  Following is the status message:
  powerOnOff_status: 1B is the status parameter of the Power on off model. 
  */  
  MOBLEUINT8 Generic_GetBuff[2] ;
  TRACE_M(TF_GENERIC_M, "Generic_PowerOnOff_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#8211! \n\r");
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	480d      	ldr	r0, [pc, #52]	@ (800e60c <Generic_PowerOnOff_Status+0x44>)
 800e5d8:	f7fe ffa0 	bl	800d51c <TraceHeader>
 800e5dc:	480c      	ldr	r0, [pc, #48]	@ (800e610 <Generic_PowerOnOff_Status+0x48>)
 800e5de:	f01a fc47 	bl	8028e70 <iprintf>
  
  /* Function call back to get the values from application*/
  (Appli_GenericState_cb.GetPowerOnOffStatus_cb)(Generic_GetBuff, pmsgParam->dst_peer,\
 800e5e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e614 <Generic_PowerOnOff_Status+0x4c>)
 800e5e4:	68db      	ldr	r3, [r3, #12]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	88d1      	ldrh	r1, [r2, #6]
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	7812      	ldrb	r2, [r2, #0]
 800e5ee:	f107 0014 	add.w	r0, r7, #20
 800e5f2:	4798      	blx	r3
                                                        pmsgParam->elementIndex);
   
  *(powerOnOff_status) = Generic_GetBuff[0];
 800e5f4:	7d3a      	ldrb	r2, [r7, #20]
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	701a      	strb	r2, [r3, #0]
  *plength = 1;
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	601a      	str	r2, [r3, #0]
 
  return MOBLE_RESULT_SUCCESS;
 800e600:	2300      	movs	r3, #0
}
 800e602:	4618      	mov	r0, r3
 800e604:	3718      	adds	r7, #24
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	08030bf8 	.word	0x08030bf8
 800e610:	0802e708 	.word	0x0802e708
 800e614:	08030904 	.word	0x08030904

0800e618 <GenericModelServer_GetOpcodeTableCb>:
* @param  length: Pointer to the Length of Generic Model opcode array
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT GenericModelServer_GetOpcodeTableCb(const MODEL_OpcodeTableParam_t **data, 
                                                 MOBLEUINT16 *length)
{
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
  *data = Generic_Opcodes_Table;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	4a05      	ldr	r2, [pc, #20]	@ (800e63c <GenericModelServer_GetOpcodeTableCb+0x24>)
 800e626:	601a      	str	r2, [r3, #0]
  *length = sizeof(Generic_Opcodes_Table)/sizeof(Generic_Opcodes_Table[0]);
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	220e      	movs	r2, #14
 800e62c:	801a      	strh	r2, [r3, #0]

  return MOBLE_RESULT_SUCCESS;
 800e62e:	2300      	movs	r3, #0
}
 800e630:	4618      	mov	r0, r3
 800e632:	370c      	adds	r7, #12
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr
 800e63c:	08030b20 	.word	0x08030b20

0800e640 <GenericModelServer_GetStatusRequestCb>:
                                                   MOBLEUINT32 *plength, 
                                                   MOBLEUINT8 const *pRxData,
                                                   MOBLEUINT32 dataLength,
                                                   MOBLEBOOL response)

{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	607a      	str	r2, [r7, #4]
 800e64a:	603b      	str	r3, [r7, #0]
 800e64c:	460b      	mov	r3, r1
 800e64e:	817b      	strh	r3, [r7, #10]
  TRACE_M(TF_GENERIC_M, "response status enable \n\r");
  switch(opcode)
 800e650:	897b      	ldrh	r3, [r7, #10]
 800e652:	f248 2212 	movw	r2, #33298	@ 0x8212
 800e656:	4293      	cmp	r3, r2
 800e658:	d018      	beq.n	800e68c <GenericModelServer_GetStatusRequestCb+0x4c>
 800e65a:	f248 2212 	movw	r2, #33298	@ 0x8212
 800e65e:	4293      	cmp	r3, r2
 800e660:	dc1a      	bgt.n	800e698 <GenericModelServer_GetStatusRequestCb+0x58>
 800e662:	f248 2204 	movw	r2, #33284	@ 0x8204
 800e666:	4293      	cmp	r3, r2
 800e668:	d004      	beq.n	800e674 <GenericModelServer_GetStatusRequestCb+0x34>
 800e66a:	f248 2208 	movw	r2, #33288	@ 0x8208
 800e66e:	4293      	cmp	r3, r2
 800e670:	d006      	beq.n	800e680 <GenericModelServer_GetStatusRequestCb+0x40>
      Generic_DefaultTransitionTime_Status(pResponsedata, plength, pmsgParam);
    }
#endif    
    default:
    {
      break;
 800e672:	e011      	b.n	800e698 <GenericModelServer_GetStatusRequestCb+0x58>
      Generic_OnOff_Status(pResponsedata, plength, pmsgParam);       
 800e674:	68fa      	ldr	r2, [r7, #12]
 800e676:	6839      	ldr	r1, [r7, #0]
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7ff faf1 	bl	800dc60 <Generic_OnOff_Status>
      break;
 800e67e:	e00c      	b.n	800e69a <GenericModelServer_GetStatusRequestCb+0x5a>
      Generic_Level_Status(pResponsedata, plength, pmsgParam);     
 800e680:	68fa      	ldr	r2, [r7, #12]
 800e682:	6839      	ldr	r1, [r7, #0]
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7ff fee3 	bl	800e450 <Generic_Level_Status>
      break;
 800e68a:	e006      	b.n	800e69a <GenericModelServer_GetStatusRequestCb+0x5a>
      Generic_PowerOnOff_Status(pResponsedata, plength, pmsgParam);
 800e68c:	68fa      	ldr	r2, [r7, #12]
 800e68e:	6839      	ldr	r1, [r7, #0]
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f7ff ff99 	bl	800e5c8 <Generic_PowerOnOff_Status>
      break;
 800e696:	e000      	b.n	800e69a <GenericModelServer_GetStatusRequestCb+0x5a>
      break;
 800e698:	bf00      	nop
    }
  }
  return MOBLE_RESULT_SUCCESS;    
 800e69a:	2300      	movs	r3, #0
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3710      	adds	r7, #16
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <GenericModelServer_ProcessMessageCb>:
MOBLE_RESULT GenericModelServer_ProcessMessageCb(MODEL_MessageHeader_t *pmsgParam,
                                                 MOBLEUINT16 opcode, 
                                                 MOBLEUINT8 const *pRxData, 
                                                 MOBLEUINT32 dataLength, 
                                                 MOBLEBOOL response)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b086      	sub	sp, #24
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	60f8      	str	r0, [r7, #12]
 800e6ac:	607a      	str	r2, [r7, #4]
 800e6ae:	603b      	str	r3, [r7, #0]
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	817b      	strh	r3, [r7, #10]
  Model_Binding_Var.Dst_Peer = pmsgParam->dst_peer;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	88da      	ldrh	r2, [r3, #6]
 800e6b8:	4ba1      	ldr	r3, [pc, #644]	@ (800e940 <GenericModelServer_ProcessMessageCb+0x29c>)
 800e6ba:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	75fb      	strb	r3, [r7, #23]
  MOBLE_ADDRESS publishAddress;
  MOBLEUINT8 modelStateChangeFlag = MOBLE_FALSE; 
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	75bb      	strb	r3, [r7, #22]
  
  TRACE_M(TF_GENERIC_M, "elementIndex %.2x dst_peer %.2X peer_add %.2X opcode %.2X response %.2X\r\n",
          pmsgParam->elementIndex, pmsgParam->dst_peer, pmsgParam->peer_addr, opcode, response);   
                                                      
  switch(opcode)
 800e6c4:	897b      	ldrh	r3, [r7, #10]
 800e6c6:	f5a3 4302 	sub.w	r3, r3, #33280	@ 0x8200
 800e6ca:	3b02      	subs	r3, #2
 800e6cc:	2b12      	cmp	r3, #18
 800e6ce:	f200 80e3 	bhi.w	800e898 <GenericModelServer_ProcessMessageCb+0x1f4>
 800e6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800e6d8 <GenericModelServer_ProcessMessageCb+0x34>)
 800e6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6d8:	0800e725 	.word	0x0800e725
 800e6dc:	0800e725 	.word	0x0800e725
 800e6e0:	0800e899 	.word	0x0800e899
 800e6e4:	0800e899 	.word	0x0800e899
 800e6e8:	0800e7a3 	.word	0x0800e7a3
 800e6ec:	0800e7a3 	.word	0x0800e7a3
 800e6f0:	0800e899 	.word	0x0800e899
 800e6f4:	0800e7fb 	.word	0x0800e7fb
 800e6f8:	0800e7fb 	.word	0x0800e7fb
 800e6fc:	0800e81f 	.word	0x0800e81f
 800e700:	0800e81f 	.word	0x0800e81f
 800e704:	0800e899 	.word	0x0800e899
 800e708:	0800e899 	.word	0x0800e899
 800e70c:	0800e899 	.word	0x0800e899
 800e710:	0800e899 	.word	0x0800e899
 800e714:	0800e899 	.word	0x0800e899
 800e718:	0800e899 	.word	0x0800e899
 800e71c:	0800e85f 	.word	0x0800e85f
 800e720:	0800e85f 	.word	0x0800e85f
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF
    
    case GENERIC_ON_OFF_SET_ACK:
    case GENERIC_ON_OFF_SET_UNACK:
    {
      result = Chk_ParamValidity(pRxData[0], 1); 
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	2101      	movs	r1, #1
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fe fe14 	bl	800d358 <Chk_ParamValidity>
 800e730:	4603      	mov	r3, r0
 800e732:	75fb      	strb	r3, [r7, #23]
      /* 3.2.1.2 Generic OnOff Set 
      Check if Transition Time field is present or Not,
      If present, Only values of 0x00 through 0x3E shall be used to specify 
      the value of the Transition Number of Steps field. */

      result |= Chk_OptionalParamValidity (dataLength, 2, (pRxData[2]&0x3F), 0x3E );        
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	b2d8      	uxtb	r0, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	3302      	adds	r3, #2
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e742:	b2da      	uxtb	r2, r3
 800e744:	233e      	movs	r3, #62	@ 0x3e
 800e746:	2102      	movs	r1, #2
 800e748:	f7fe fe51 	bl	800d3ee <Chk_OptionalParamValidity>
 800e74c:	4603      	mov	r3, r0
 800e74e:	461a      	mov	r2, r3
 800e750:	7dfb      	ldrb	r3, [r7, #23]
 800e752:	4313      	orrs	r3, r2
 800e754:	75fb      	strb	r3, [r7, #23]
    
      if(result == MOBLE_RESULT_SUCCESS)
 800e756:	7dfb      	ldrb	r3, [r7, #23]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f040 809f 	bne.w	800e89c <GenericModelServer_ProcessMessageCb+0x1f8>
      {
        /* when device is working as proxy and is a part of node
           delay is included in LED toggle */              
        if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr,\
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	8898      	ldrh	r0, [r3, #4]
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	88d9      	ldrh	r1, [r3, #6]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	3301      	adds	r3, #1
 800e76a:	781b      	ldrb	r3, [r3, #0]
 800e76c:	461a      	mov	r2, r3
 800e76e:	f7ff f87f 	bl	800d870 <Chk_TidValidity>
 800e772:	4603      	mov	r3, r0
 800e774:	75fb      	strb	r3, [r7, #23]
 800e776:	7dfb      	ldrb	r3, [r7, #23]
 800e778:	2b01      	cmp	r3, #1
 800e77a:	f200 808f 	bhi.w	800e89c <GenericModelServer_ProcessMessageCb+0x1f8>
                                             pmsgParam->dst_peer, pRxData[1])))
        {
          Generic_OnOff_Set(pRxData, dataLength, pmsgParam);  
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	6839      	ldr	r1, [r7, #0]
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f7ff f98a 	bl	800da9c <Generic_OnOff_Set>
          Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_ONOFF_SERVER_MODEL_ID;
 800e788:	4b6d      	ldr	r3, [pc, #436]	@ (800e940 <GenericModelServer_ProcessMessageCb+0x29c>)
 800e78a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800e78e:	805a      	strh	r2, [r3, #2]
          Model_Binding_Var.Model_Rx_Opcode = opcode;
 800e790:	4a6b      	ldr	r2, [pc, #428]	@ (800e940 <GenericModelServer_ProcessMessageCb+0x29c>)
 800e792:	897b      	ldrh	r3, [r7, #10]
 800e794:	8013      	strh	r3, [r2, #0]
          modelStateChangeFlag = MOBLE_TRUE;
 800e796:	2301      	movs	r3, #1
 800e798:	75bb      	strb	r3, [r7, #22]
          Publication1SecFlag.count = 0;
 800e79a:	4b6a      	ldr	r3, [pc, #424]	@ (800e944 <GenericModelServer_ProcessMessageCb+0x2a0>)
 800e79c:	2200      	movs	r2, #0
 800e79e:	709a      	strb	r2, [r3, #2]
        }
      }
        
      break;
 800e7a0:	e07c      	b.n	800e89c <GenericModelServer_ProcessMessageCb+0x1f8>
  
    case GENERIC_LEVEL_SET_ACK:
    case GENERIC_LEVEL_SET_UNACK: 
    {   
       
      result = Chk_ParamMinMaxIntValidity(INT16_MIN ,pRxData , INT16_MAX );        
 800e7a2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e7a6:	6879      	ldr	r1, [r7, #4]
 800e7a8:	4867      	ldr	r0, [pc, #412]	@ (800e948 <GenericModelServer_ProcessMessageCb+0x2a4>)
 800e7aa:	f7fe fe3f 	bl	800d42c <Chk_ParamMinMaxIntValidity>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	75fb      	strb	r3, [r7, #23]
      if(result == MOBLE_RESULT_SUCCESS)
 800e7b2:	7dfb      	ldrb	r3, [r7, #23]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d173      	bne.n	800e8a0 <GenericModelServer_ProcessMessageCb+0x1fc>
      {
        if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr, 
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	8898      	ldrh	r0, [r3, #4]
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	88d9      	ldrh	r1, [r3, #6]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	3302      	adds	r3, #2
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	f7ff f852 	bl	800d870 <Chk_TidValidity>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	75fb      	strb	r3, [r7, #23]
 800e7d0:	7dfb      	ldrb	r3, [r7, #23]
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d864      	bhi.n	800e8a0 <GenericModelServer_ProcessMessageCb+0x1fc>
                                                  pmsgParam->dst_peer,
                                                  pRxData[2])))
        {
          Generic_Level_Set(pRxData, dataLength, pmsgParam);  
 800e7d6:	68fa      	ldr	r2, [r7, #12]
 800e7d8:	6839      	ldr	r1, [r7, #0]
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7ff fab2 	bl	800dd44 <Generic_Level_Set>
          Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_LEVEL_SERVER_MODEL_ID;
 800e7e0:	4b57      	ldr	r3, [pc, #348]	@ (800e940 <GenericModelServer_ProcessMessageCb+0x29c>)
 800e7e2:	f241 0202 	movw	r2, #4098	@ 0x1002
 800e7e6:	805a      	strh	r2, [r3, #2]
          Model_Binding_Var.Model_Rx_Opcode = opcode;
 800e7e8:	4a55      	ldr	r2, [pc, #340]	@ (800e940 <GenericModelServer_ProcessMessageCb+0x29c>)
 800e7ea:	897b      	ldrh	r3, [r7, #10]
 800e7ec:	8013      	strh	r3, [r2, #0]
          modelStateChangeFlag = MOBLE_TRUE;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	75bb      	strb	r3, [r7, #22]
          Publication1SecFlag.count = 0;
 800e7f2:	4b54      	ldr	r3, [pc, #336]	@ (800e944 <GenericModelServer_ProcessMessageCb+0x2a0>)
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	709a      	strb	r2, [r3, #2]
        }
      }
       
      break;
 800e7f8:	e052      	b.n	800e8a0 <GenericModelServer_ProcessMessageCb+0x1fc>
        Delta Level 4 The Delta change of the Generic Level state 
        TID 1 Transaction Identifier 
        Transition Time 1 Format as defined in Section 3.1.3. (Optional) 
        Delay 1 Message execution delay in 5 milliseconds steps (C.1)
      */
      Generic_Delta_Set(pRxData,dataLength, pmsgParam);   
 800e7fa:	68fa      	ldr	r2, [r7, #12]
 800e7fc:	6839      	ldr	r1, [r7, #0]
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f7ff fb9c 	bl	800df3c <Generic_Delta_Set>
      Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_LEVEL_SERVER_MODEL_ID;
 800e804:	4b4e      	ldr	r3, [pc, #312]	@ (800e940 <GenericModelServer_ProcessMessageCb+0x29c>)
 800e806:	f241 0202 	movw	r2, #4098	@ 0x1002
 800e80a:	805a      	strh	r2, [r3, #2]
      Model_Binding_Var.Model_Rx_Opcode = opcode;
 800e80c:	4a4c      	ldr	r2, [pc, #304]	@ (800e940 <GenericModelServer_ProcessMessageCb+0x29c>)
 800e80e:	897b      	ldrh	r3, [r7, #10]
 800e810:	8013      	strh	r3, [r2, #0]
      modelStateChangeFlag = MOBLE_TRUE;
 800e812:	2301      	movs	r3, #1
 800e814:	75bb      	strb	r3, [r7, #22]
      Publication1SecFlag.count = 0;
 800e816:	4b4b      	ldr	r3, [pc, #300]	@ (800e944 <GenericModelServer_ProcessMessageCb+0x2a0>)
 800e818:	2200      	movs	r2, #0
 800e81a:	709a      	strb	r2, [r3, #2]
      break;
 800e81c:	e045      	b.n	800e8aa <GenericModelServer_ProcessMessageCb+0x206>
      
    case GENERIC_MOVE_SET:
    case GENERIC_MOVE_SET_UNACK:
    {    
       
      result = Chk_ParamMinMaxIntValidity(INT16_MIN ,pRxData , INT16_MAX );       
 800e81e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e822:	6879      	ldr	r1, [r7, #4]
 800e824:	4848      	ldr	r0, [pc, #288]	@ (800e948 <GenericModelServer_ProcessMessageCb+0x2a4>)
 800e826:	f7fe fe01 	bl	800d42c <Chk_ParamMinMaxIntValidity>
 800e82a:	4603      	mov	r3, r0
 800e82c:	75fb      	strb	r3, [r7, #23]
      if(result == MOBLE_RESULT_SUCCESS)
 800e82e:	7dfb      	ldrb	r3, [r7, #23]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d137      	bne.n	800e8a4 <GenericModelServer_ProcessMessageCb+0x200>
      {
        if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr, 
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	8898      	ldrh	r0, [r3, #4]
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	88d9      	ldrh	r1, [r3, #6]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	3302      	adds	r3, #2
 800e840:	781b      	ldrb	r3, [r3, #0]
 800e842:	461a      	mov	r2, r3
 800e844:	f7ff f814 	bl	800d870 <Chk_TidValidity>
 800e848:	4603      	mov	r3, r0
 800e84a:	75fb      	strb	r3, [r7, #23]
 800e84c:	7dfb      	ldrb	r3, [r7, #23]
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d828      	bhi.n	800e8a4 <GenericModelServer_ProcessMessageCb+0x200>
                                                  pmsgParam->dst_peer,
                                                  pRxData[2])))
        {
          Generic_Move_Set(pRxData, dataLength, pmsgParam);  
 800e852:	68fa      	ldr	r2, [r7, #12]
 800e854:	6839      	ldr	r1, [r7, #0]
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f7ff fd0e 	bl	800e278 <Generic_Move_Set>
        }
      }
      break;
 800e85c:	e022      	b.n	800e8a4 <GenericModelServer_ProcessMessageCb+0x200>
#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF
    
    case GENERIC_POWER_ON_OFF_SET: 
    case GENERIC_POWER_ON_OFF_SET_UNACK:
    {
      result = Chk_ParamValidity(pRxData[0], GENERIC_POWER_RESTORE_STATE); 
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	2102      	movs	r1, #2
 800e864:	4618      	mov	r0, r3
 800e866:	f7fe fd77 	bl	800d358 <Chk_ParamValidity>
 800e86a:	4603      	mov	r3, r0
 800e86c:	75fb      	strb	r3, [r7, #23]
      if(result == MOBLE_RESULT_SUCCESS)
 800e86e:	7dfb      	ldrb	r3, [r7, #23]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d119      	bne.n	800e8a8 <GenericModelServer_ProcessMessageCb+0x204>
      {
        Generic_PowerOnOff_Set(pRxData, dataLength, pmsgParam); 
 800e874:	68fa      	ldr	r2, [r7, #12]
 800e876:	6839      	ldr	r1, [r7, #0]
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f7ff fe7f 	bl	800e57c <Generic_PowerOnOff_Set>
        Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_POWER_ONOFF_SERVER_MODEL_ID;
 800e87e:	4b30      	ldr	r3, [pc, #192]	@ (800e940 <GenericModelServer_ProcessMessageCb+0x29c>)
 800e880:	f241 0206 	movw	r2, #4102	@ 0x1006
 800e884:	805a      	strh	r2, [r3, #2]
        Model_Binding_Var.Model_Rx_Opcode = opcode;
 800e886:	4a2e      	ldr	r2, [pc, #184]	@ (800e940 <GenericModelServer_ProcessMessageCb+0x29c>)
 800e888:	897b      	ldrh	r3, [r7, #10]
 800e88a:	8013      	strh	r3, [r2, #0]
        modelStateChangeFlag = MOBLE_TRUE;
 800e88c:	2301      	movs	r3, #1
 800e88e:	75bb      	strb	r3, [r7, #22]
        Publication1SecFlag.count = 0;
 800e890:	4b2c      	ldr	r3, [pc, #176]	@ (800e944 <GenericModelServer_ProcessMessageCb+0x2a0>)
 800e892:	2200      	movs	r2, #0
 800e894:	709a      	strb	r2, [r3, #2]
      }
      break;
 800e896:	e007      	b.n	800e8a8 <GenericModelServer_ProcessMessageCb+0x204>
  
#endif    
    
    default:
    {
      break;
 800e898:	bf00      	nop
 800e89a:	e006      	b.n	800e8aa <GenericModelServer_ProcessMessageCb+0x206>
      break;
 800e89c:	bf00      	nop
 800e89e:	e004      	b.n	800e8aa <GenericModelServer_ProcessMessageCb+0x206>
      break;
 800e8a0:	bf00      	nop
 800e8a2:	e002      	b.n	800e8aa <GenericModelServer_ProcessMessageCb+0x206>
      break;
 800e8a4:	bf00      	nop
 800e8a6:	e000      	b.n	800e8aa <GenericModelServer_ProcessMessageCb+0x206>
      break;
 800e8a8:	bf00      	nop
    }          
  } /* Switch ends */
          
  if((result == MOBLE_RESULT_SUCCESS) && (response == MOBLE_TRUE))
 800e8aa:	7dfb      	ldrb	r3, [r7, #23]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d120      	bne.n	800e8f2 <GenericModelServer_ProcessMessageCb+0x24e>
 800e8b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d11c      	bne.n	800e8f2 <GenericModelServer_ProcessMessageCb+0x24e>
  {
    if(ADDRESS_IS_UNICAST(pmsgParam->dst_peer))
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	88db      	ldrh	r3, [r3, #6]
 800e8bc:	b21b      	sxth	r3, r3
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	dd0b      	ble.n	800e8da <GenericModelServer_ProcessMessageCb+0x236>
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	88db      	ldrh	r3, [r3, #6]
 800e8c6:	b21b      	sxth	r3, r3
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	db06      	blt.n	800e8da <GenericModelServer_ProcessMessageCb+0x236>
    {
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800e8cc:	8979      	ldrh	r1, [r7, #10]
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	687a      	ldr	r2, [r7, #4]
 800e8d2:	68f8      	ldr	r0, [r7, #12]
 800e8d4:	f019 fa86 	bl	8027de4 <Model_SendResponse>
 800e8d8:	e00b      	b.n	800e8f2 <GenericModelServer_ProcessMessageCb+0x24e>
    }
    else
    {

      pmsgParam->dst_peer = BLEMesh_GetAddress();       // Replace group address by the single node address for response
 800e8da:	f00e f8cf 	bl	801ca7c <BLEMesh_GetAddress>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	80da      	strh	r2, [r3, #6]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800e8e6:	8979      	ldrh	r1, [r7, #10]
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	687a      	ldr	r2, [r7, #4]
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	f019 fa79 	bl	8027de4 <Model_SendResponse>
     Publish the status to publish address if the publication is set by client 
     publication is independent of the response of the message.if thek condition 
     for publication is full filled as per specification then the status will be 
     published.
  */
  publishAddress = BLEMesh_GetPublishAddress(pmsgParam->elementIndex, Model_Binding_Var.Model_ID);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	4a12      	ldr	r2, [pc, #72]	@ (800e940 <GenericModelServer_ProcessMessageCb+0x29c>)
 800e8f8:	8852      	ldrh	r2, [r2, #2]
 800e8fa:	4611      	mov	r1, r2
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f00e f8cd 	bl	801ca9c <BLEMesh_GetPublishAddress>
 800e902:	4603      	mov	r3, r0
 800e904:	82bb      	strh	r3, [r7, #20]
    
  if((result == MOBLE_RESULT_SUCCESS) && 
 800e906:	7dfb      	ldrb	r3, [r7, #23]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d130      	bne.n	800e96e <GenericModelServer_ProcessMessageCb+0x2ca>
 800e90c:	8abb      	ldrh	r3, [r7, #20]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d02d      	beq.n	800e96e <GenericModelServer_ProcessMessageCb+0x2ca>
     (publishAddress != 0x0000) && 
 800e912:	7dbb      	ldrb	r3, [r7, #22]
 800e914:	2b01      	cmp	r3, #1
 800e916:	d12a      	bne.n	800e96e <GenericModelServer_ProcessMessageCb+0x2ca>
       (modelStateChangeFlag == MOBLE_TRUE))
  {
    if(ADDRESS_IS_UNICAST(pmsgParam->dst_peer))
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	88db      	ldrh	r3, [r3, #6]
 800e91c:	b21b      	sxth	r3, r3
 800e91e:	2b00      	cmp	r3, #0
 800e920:	dd14      	ble.n	800e94c <GenericModelServer_ProcessMessageCb+0x2a8>
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	88db      	ldrh	r3, [r3, #6]
 800e926:	b21b      	sxth	r3, r3
 800e928:	2b00      	cmp	r3, #0
 800e92a:	db0f      	blt.n	800e94c <GenericModelServer_ProcessMessageCb+0x2a8>
    {
      pmsgParam->peer_addr = publishAddress;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	8aba      	ldrh	r2, [r7, #20]
 800e930:	809a      	strh	r2, [r3, #4]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800e932:	8979      	ldrh	r1, [r7, #10]
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f019 fa53 	bl	8027de4 <Model_SendResponse>
 800e93e:	e014      	b.n	800e96a <GenericModelServer_ProcessMessageCb+0x2c6>
 800e940:	2000454c 	.word	0x2000454c
 800e944:	200045a8 	.word	0x200045a8
 800e948:	ffff8000 	.word	0xffff8000
    }
        else
    {

      pmsgParam->peer_addr = publishAddress;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	8aba      	ldrh	r2, [r7, #20]
 800e950:	809a      	strh	r2, [r3, #4]
      pmsgParam->dst_peer = BLEMesh_GetAddress();       // Replace group address by the single node address for response
 800e952:	f00e f893 	bl	801ca7c <BLEMesh_GetAddress>
 800e956:	4603      	mov	r3, r0
 800e958:	461a      	mov	r2, r3
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	80da      	strh	r2, [r3, #6]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800e95e:	8979      	ldrh	r1, [r7, #10]
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f019 fa3d 	bl	8027de4 <Model_SendResponse>
    }
                
      modelStateChangeFlag = MOBLE_FALSE;   
 800e96a:	2300      	movs	r3, #0
 800e96c:	75bb      	strb	r3, [r7, #22]
      TRACE_I(TF_GENERIC_M,"Publishing state when change to the address %.2X \r\n",publishAddress);
  }
  return MOBLE_RESULT_SUCCESS;
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3718      	adds	r7, #24
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <Generic_TransitionBehaviour>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Generic_TransitionBehaviour(MOBLEUINT8 *GetValue, 
                                         MOBLEUINT8 elementIndex)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	460b      	mov	r3, r1
 800e982:	70fb      	strb	r3, [r7, #3]
  static MOBLEUINT32 Check_time;
  MOBLEUINT16 targetRange;
  MOBLEUINT16 targetSlot;
  
  /* Taking the time stamp for particular time */
  if(Clockflag == 0)
 800e984:	4b5e      	ldr	r3, [pc, #376]	@ (800eb00 <Generic_TransitionBehaviour+0x188>)
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d107      	bne.n	800e99c <Generic_TransitionBehaviour+0x24>
  {
    Check_time = Clock_Time();
 800e98c:	f7f9 fa46 	bl	8007e1c <HAL_GetTick>
 800e990:	4603      	mov	r3, r0
 800e992:	4a5c      	ldr	r2, [pc, #368]	@ (800eb04 <Generic_TransitionBehaviour+0x18c>)
 800e994:	6013      	str	r3, [r2, #0]
    Clockflag = 1;
 800e996:	4b5a      	ldr	r3, [pc, #360]	@ (800eb00 <Generic_TransitionBehaviour+0x188>)
 800e998:	2201      	movs	r2, #1
 800e99a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Publication after 1 second if total transition time is greater than 2 sec.*/
  if(Generic_TimeParam[elementIndex].TotalTime >2000)
 800e99c:	78fa      	ldrb	r2, [r7, #3]
 800e99e:	495a      	ldr	r1, [pc, #360]	@ (800eb08 <Generic_TransitionBehaviour+0x190>)
 800e9a0:	4613      	mov	r3, r2
 800e9a2:	009b      	lsls	r3, r3, #2
 800e9a4:	4413      	add	r3, r2
 800e9a6:	005b      	lsls	r3, r3, #1
 800e9a8:	440b      	add	r3, r1
 800e9aa:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800e9ae:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800e9b2:	d901      	bls.n	800e9b8 <Generic_TransitionBehaviour+0x40>
  {
    Punblication_OneSecTimer();
 800e9b4:	f002 ff7e 	bl	80118b4 <Punblication_OneSecTimer>
  }
  /* Values from application are copied into Temporary variables for processing */
  
  Generic_TemporaryStatus[elementIndex].PresentValue16  = GetValue[1] << 8;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	021b      	lsls	r3, r3, #8
 800e9c0:	78fa      	ldrb	r2, [r7, #3]
 800e9c2:	b218      	sxth	r0, r3
 800e9c4:	4951      	ldr	r1, [pc, #324]	@ (800eb0c <Generic_TransitionBehaviour+0x194>)
 800e9c6:	4613      	mov	r3, r2
 800e9c8:	009b      	lsls	r3, r3, #2
 800e9ca:	4413      	add	r3, r2
 800e9cc:	440b      	add	r3, r1
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	f8a3 2001 	strh.w	r2, [r3, #1]
  Generic_TemporaryStatus[elementIndex].PresentValue16 |= GetValue[0];
 800e9d4:	78fa      	ldrb	r2, [r7, #3]
 800e9d6:	494d      	ldr	r1, [pc, #308]	@ (800eb0c <Generic_TransitionBehaviour+0x194>)
 800e9d8:	4613      	mov	r3, r2
 800e9da:	009b      	lsls	r3, r3, #2
 800e9dc:	4413      	add	r3, r2
 800e9de:	440b      	add	r3, r1
 800e9e0:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800e9e4:	b219      	sxth	r1, r3
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	b21b      	sxth	r3, r3
 800e9ec:	78fa      	ldrb	r2, [r7, #3]
 800e9ee:	430b      	orrs	r3, r1
 800e9f0:	b218      	sxth	r0, r3
 800e9f2:	4946      	ldr	r1, [pc, #280]	@ (800eb0c <Generic_TransitionBehaviour+0x194>)
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	4413      	add	r3, r2
 800e9fa:	440b      	add	r3, r1
 800e9fc:	4602      	mov	r2, r0
 800e9fe:	f8a3 2001 	strh.w	r2, [r3, #1]
  /* if condition to wait until the time is equal to the given resolution time */
  if(((Clock_Time()- Check_time) >= Generic_TimeParam[elementIndex].Res_Value))
 800ea02:	f7f9 fa0b 	bl	8007e1c <HAL_GetTick>
 800ea06:	4602      	mov	r2, r0
 800ea08:	4b3e      	ldr	r3, [pc, #248]	@ (800eb04 <Generic_TransitionBehaviour+0x18c>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	1ad1      	subs	r1, r2, r3
 800ea0e:	78fa      	ldrb	r2, [r7, #3]
 800ea10:	483d      	ldr	r0, [pc, #244]	@ (800eb08 <Generic_TransitionBehaviour+0x190>)
 800ea12:	4613      	mov	r3, r2
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	4413      	add	r3, r2
 800ea18:	005b      	lsls	r3, r3, #1
 800ea1a:	4403      	add	r3, r0
 800ea1c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ea20:	4299      	cmp	r1, r3
 800ea22:	f0c0 8149 	bcc.w	800ecb8 <Generic_TransitionBehaviour+0x340>
  {     
    if(Generic_TimeParam[elementIndex].StepValue == 0)
 800ea26:	78fa      	ldrb	r2, [r7, #3]
 800ea28:	4937      	ldr	r1, [pc, #220]	@ (800eb08 <Generic_TransitionBehaviour+0x190>)
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	4413      	add	r3, r2
 800ea30:	005b      	lsls	r3, r3, #1
 800ea32:	440b      	add	r3, r1
 800ea34:	f993 3000 	ldrsb.w	r3, [r3]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d108      	bne.n	800ea4e <Generic_TransitionBehaviour+0xd6>
    {
      Generic_TimeParam[elementIndex].StepValue = 1;
 800ea3c:	78fa      	ldrb	r2, [r7, #3]
 800ea3e:	4932      	ldr	r1, [pc, #200]	@ (800eb08 <Generic_TransitionBehaviour+0x190>)
 800ea40:	4613      	mov	r3, r2
 800ea42:	009b      	lsls	r3, r3, #2
 800ea44:	4413      	add	r3, r2
 800ea46:	005b      	lsls	r3, r3, #1
 800ea48:	440b      	add	r3, r1
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	701a      	strb	r2, [r3, #0]
    }

    if(Generic_TemporaryStatus[elementIndex].TargetValue16 > Generic_TemporaryStatus[elementIndex].PresentValue16)
 800ea4e:	78fa      	ldrb	r2, [r7, #3]
 800ea50:	492e      	ldr	r1, [pc, #184]	@ (800eb0c <Generic_TransitionBehaviour+0x194>)
 800ea52:	4613      	mov	r3, r2
 800ea54:	009b      	lsls	r3, r3, #2
 800ea56:	4413      	add	r3, r2
 800ea58:	440b      	add	r3, r1
 800ea5a:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ea5e:	b219      	sxth	r1, r3
 800ea60:	78fa      	ldrb	r2, [r7, #3]
 800ea62:	482a      	ldr	r0, [pc, #168]	@ (800eb0c <Generic_TransitionBehaviour+0x194>)
 800ea64:	4613      	mov	r3, r2
 800ea66:	009b      	lsls	r3, r3, #2
 800ea68:	4413      	add	r3, r2
 800ea6a:	4403      	add	r3, r0
 800ea6c:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ea70:	b21b      	sxth	r3, r3
 800ea72:	4299      	cmp	r1, r3
 800ea74:	dd4e      	ble.n	800eb14 <Generic_TransitionBehaviour+0x19c>
    {
      Generic_OnOffStatus[elementIndex].Present_OnOff_State = 1;
 800ea76:	78fa      	ldrb	r2, [r7, #3]
 800ea78:	4925      	ldr	r1, [pc, #148]	@ (800eb10 <Generic_TransitionBehaviour+0x198>)
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	005b      	lsls	r3, r3, #1
 800ea7e:	4413      	add	r3, r2
 800ea80:	005b      	lsls	r3, r3, #1
 800ea82:	440b      	add	r3, r1
 800ea84:	2201      	movs	r2, #1
 800ea86:	701a      	strb	r2, [r3, #0]
      /* target range = total range to be covered */
      targetRange = 
        Generic_TemporaryStatus[elementIndex].TargetValue16 - Generic_TemporaryStatus[elementIndex].PresentValue16;
 800ea88:	78fa      	ldrb	r2, [r7, #3]
 800ea8a:	4920      	ldr	r1, [pc, #128]	@ (800eb0c <Generic_TransitionBehaviour+0x194>)
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	4413      	add	r3, r2
 800ea92:	440b      	add	r3, r1
 800ea94:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ea98:	b21b      	sxth	r3, r3
 800ea9a:	b299      	uxth	r1, r3
 800ea9c:	78fa      	ldrb	r2, [r7, #3]
 800ea9e:	481b      	ldr	r0, [pc, #108]	@ (800eb0c <Generic_TransitionBehaviour+0x194>)
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	009b      	lsls	r3, r3, #2
 800eaa4:	4413      	add	r3, r2
 800eaa6:	4403      	add	r3, r0
 800eaa8:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800eaac:	b21b      	sxth	r3, r3
 800eaae:	b29b      	uxth	r3, r3
      targetRange = 
 800eab0:	1acb      	subs	r3, r1, r3
 800eab2:	81fb      	strh	r3, [r7, #14]
      
      /* target slot = time to cover in single step */
      targetSlot = targetRange / Generic_TimeParam[elementIndex].StepValue;
 800eab4:	89f9      	ldrh	r1, [r7, #14]
 800eab6:	78fa      	ldrb	r2, [r7, #3]
 800eab8:	4813      	ldr	r0, [pc, #76]	@ (800eb08 <Generic_TransitionBehaviour+0x190>)
 800eaba:	4613      	mov	r3, r2
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	4413      	add	r3, r2
 800eac0:	005b      	lsls	r3, r3, #1
 800eac2:	4403      	add	r3, r0
 800eac4:	f993 3000 	ldrsb.w	r3, [r3]
 800eac8:	fb91 f3f3 	sdiv	r3, r1, r3
 800eacc:	81bb      	strh	r3, [r7, #12]
      /* target slot added to present value to achieve target value */
      Generic_TemporaryStatus[elementIndex].PresentValue16 += targetSlot;      
 800eace:	78fa      	ldrb	r2, [r7, #3]
 800ead0:	490e      	ldr	r1, [pc, #56]	@ (800eb0c <Generic_TransitionBehaviour+0x194>)
 800ead2:	4613      	mov	r3, r2
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	4413      	add	r3, r2
 800ead8:	440b      	add	r3, r1
 800eada:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800eade:	b21b      	sxth	r3, r3
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	89bb      	ldrh	r3, [r7, #12]
 800eae4:	4413      	add	r3, r2
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	78fa      	ldrb	r2, [r7, #3]
 800eaea:	b218      	sxth	r0, r3
 800eaec:	4907      	ldr	r1, [pc, #28]	@ (800eb0c <Generic_TransitionBehaviour+0x194>)
 800eaee:	4613      	mov	r3, r2
 800eaf0:	009b      	lsls	r3, r3, #2
 800eaf2:	4413      	add	r3, r2
 800eaf4:	440b      	add	r3, r1
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	f8a3 2001 	strh.w	r2, [r3, #1]
 800eafc:	e061      	b.n	800ebc2 <Generic_TransitionBehaviour+0x24a>
 800eafe:	bf00      	nop
 800eb00:	20004591 	.word	0x20004591
 800eb04:	20004594 	.word	0x20004594
 800eb08:	2000456c 	.word	0x2000456c
 800eb0c:	20004564 	.word	0x20004564
 800eb10:	20004584 	.word	0x20004584
    }              
    else if(Generic_TemporaryStatus[elementIndex].TargetValue16 < Generic_TemporaryStatus[elementIndex].PresentValue16)
 800eb14:	78fa      	ldrb	r2, [r7, #3]
 800eb16:	496b      	ldr	r1, [pc, #428]	@ (800ecc4 <Generic_TransitionBehaviour+0x34c>)
 800eb18:	4613      	mov	r3, r2
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	4413      	add	r3, r2
 800eb1e:	440b      	add	r3, r1
 800eb20:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800eb24:	b219      	sxth	r1, r3
 800eb26:	78fa      	ldrb	r2, [r7, #3]
 800eb28:	4866      	ldr	r0, [pc, #408]	@ (800ecc4 <Generic_TransitionBehaviour+0x34c>)
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	4413      	add	r3, r2
 800eb30:	4403      	add	r3, r0
 800eb32:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800eb36:	b21b      	sxth	r3, r3
 800eb38:	4299      	cmp	r1, r3
 800eb3a:	da42      	bge.n	800ebc2 <Generic_TransitionBehaviour+0x24a>
    {  
      Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0;
 800eb3c:	78fa      	ldrb	r2, [r7, #3]
 800eb3e:	4962      	ldr	r1, [pc, #392]	@ (800ecc8 <Generic_TransitionBehaviour+0x350>)
 800eb40:	4613      	mov	r3, r2
 800eb42:	005b      	lsls	r3, r3, #1
 800eb44:	4413      	add	r3, r2
 800eb46:	005b      	lsls	r3, r3, #1
 800eb48:	440b      	add	r3, r1
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	701a      	strb	r2, [r3, #0]
      /* condition execute when transition is negative */
      /* target range = total range to be covered */ 
      targetRange = Generic_TemporaryStatus[elementIndex].PresentValue16 - Generic_TemporaryStatus[elementIndex].TargetValue16;
 800eb4e:	78fa      	ldrb	r2, [r7, #3]
 800eb50:	495c      	ldr	r1, [pc, #368]	@ (800ecc4 <Generic_TransitionBehaviour+0x34c>)
 800eb52:	4613      	mov	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	4413      	add	r3, r2
 800eb58:	440b      	add	r3, r1
 800eb5a:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800eb5e:	b21b      	sxth	r3, r3
 800eb60:	b299      	uxth	r1, r3
 800eb62:	78fa      	ldrb	r2, [r7, #3]
 800eb64:	4857      	ldr	r0, [pc, #348]	@ (800ecc4 <Generic_TransitionBehaviour+0x34c>)
 800eb66:	4613      	mov	r3, r2
 800eb68:	009b      	lsls	r3, r3, #2
 800eb6a:	4413      	add	r3, r2
 800eb6c:	4403      	add	r3, r0
 800eb6e:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800eb72:	b21b      	sxth	r3, r3
 800eb74:	b29b      	uxth	r3, r3
 800eb76:	1acb      	subs	r3, r1, r3
 800eb78:	81fb      	strh	r3, [r7, #14]
      /* target slot = time to cover in single step */
      targetSlot = targetRange / Generic_TimeParam[elementIndex].StepValue;
 800eb7a:	89f9      	ldrh	r1, [r7, #14]
 800eb7c:	78fa      	ldrb	r2, [r7, #3]
 800eb7e:	4853      	ldr	r0, [pc, #332]	@ (800eccc <Generic_TransitionBehaviour+0x354>)
 800eb80:	4613      	mov	r3, r2
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	4413      	add	r3, r2
 800eb86:	005b      	lsls	r3, r3, #1
 800eb88:	4403      	add	r3, r0
 800eb8a:	f993 3000 	ldrsb.w	r3, [r3]
 800eb8e:	fb91 f3f3 	sdiv	r3, r1, r3
 800eb92:	81bb      	strh	r3, [r7, #12]
      /* target slot = time to cover in single step */
      Generic_TemporaryStatus[elementIndex].PresentValue16 -= targetSlot; 
 800eb94:	78fa      	ldrb	r2, [r7, #3]
 800eb96:	494b      	ldr	r1, [pc, #300]	@ (800ecc4 <Generic_TransitionBehaviour+0x34c>)
 800eb98:	4613      	mov	r3, r2
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	4413      	add	r3, r2
 800eb9e:	440b      	add	r3, r1
 800eba0:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800eba4:	b21b      	sxth	r3, r3
 800eba6:	b29a      	uxth	r2, r3
 800eba8:	89bb      	ldrh	r3, [r7, #12]
 800ebaa:	1ad3      	subs	r3, r2, r3
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	78fa      	ldrb	r2, [r7, #3]
 800ebb0:	b218      	sxth	r0, r3
 800ebb2:	4944      	ldr	r1, [pc, #272]	@ (800ecc4 <Generic_TransitionBehaviour+0x34c>)
 800ebb4:	4613      	mov	r3, r2
 800ebb6:	009b      	lsls	r3, r3, #2
 800ebb8:	4413      	add	r3, r2
 800ebba:	440b      	add	r3, r1
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	f8a3 2001 	strh.w	r2, [r3, #1]
    }     
    else
    {
      
    }
    Generic_TimeParam[elementIndex].StepValue--;
 800ebc2:	78fa      	ldrb	r2, [r7, #3]
 800ebc4:	4941      	ldr	r1, [pc, #260]	@ (800eccc <Generic_TransitionBehaviour+0x354>)
 800ebc6:	4613      	mov	r3, r2
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	4413      	add	r3, r2
 800ebcc:	005b      	lsls	r3, r3, #1
 800ebce:	440b      	add	r3, r1
 800ebd0:	f993 3000 	ldrsb.w	r3, [r3]
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	b258      	sxtb	r0, r3
 800ebdc:	493b      	ldr	r1, [pc, #236]	@ (800eccc <Generic_TransitionBehaviour+0x354>)
 800ebde:	4613      	mov	r3, r2
 800ebe0:	009b      	lsls	r3, r3, #2
 800ebe2:	4413      	add	r3, r2
 800ebe4:	005b      	lsls	r3, r3, #1
 800ebe6:	440b      	add	r3, r1
 800ebe8:	4602      	mov	r2, r0
 800ebea:	701a      	strb	r2, [r3, #0]
    /* updating the remaining time after each step covered*/
    Generic_TemporaryStatus[elementIndex].RemainingTime = Generic_TimeParam[elementIndex].StepValue | (Generic_TimeParam[elementIndex].ResBitValue << 6) ;
 800ebec:	78fa      	ldrb	r2, [r7, #3]
 800ebee:	4937      	ldr	r1, [pc, #220]	@ (800eccc <Generic_TransitionBehaviour+0x354>)
 800ebf0:	4613      	mov	r3, r2
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	4413      	add	r3, r2
 800ebf6:	005b      	lsls	r3, r3, #1
 800ebf8:	440b      	add	r3, r1
 800ebfa:	f993 1000 	ldrsb.w	r1, [r3]
 800ebfe:	78fa      	ldrb	r2, [r7, #3]
 800ec00:	4832      	ldr	r0, [pc, #200]	@ (800eccc <Generic_TransitionBehaviour+0x354>)
 800ec02:	4613      	mov	r3, r2
 800ec04:	009b      	lsls	r3, r3, #2
 800ec06:	4413      	add	r3, r2
 800ec08:	005b      	lsls	r3, r3, #1
 800ec0a:	4403      	add	r3, r0
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	019b      	lsls	r3, r3, #6
 800ec12:	b25b      	sxtb	r3, r3
 800ec14:	430b      	orrs	r3, r1
 800ec16:	b25b      	sxtb	r3, r3
 800ec18:	78fa      	ldrb	r2, [r7, #3]
 800ec1a:	b2d8      	uxtb	r0, r3
 800ec1c:	4929      	ldr	r1, [pc, #164]	@ (800ecc4 <Generic_TransitionBehaviour+0x34c>)
 800ec1e:	4613      	mov	r3, r2
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	4413      	add	r3, r2
 800ec24:	440b      	add	r3, r1
 800ec26:	4602      	mov	r2, r0
 800ec28:	701a      	strb	r2, [r3, #0]
   
    Check_time = 0;
 800ec2a:	4b29      	ldr	r3, [pc, #164]	@ (800ecd0 <Generic_TransitionBehaviour+0x358>)
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	601a      	str	r2, [r3, #0]
    Clockflag = 0;
 800ec30:	4b28      	ldr	r3, [pc, #160]	@ (800ecd4 <Generic_TransitionBehaviour+0x35c>)
 800ec32:	2200      	movs	r2, #0
 800ec34:	701a      	strb	r2, [r3, #0]
    GenericUpdateFlag = VALUE_UPDATE_SET;
 800ec36:	4b28      	ldr	r3, [pc, #160]	@ (800ecd8 <Generic_TransitionBehaviour+0x360>)
 800ec38:	2201      	movs	r2, #1
 800ec3a:	701a      	strb	r2, [r3, #0]
    /* when transition is completed, disable the transition by disabling 
       transition flag
    */
    if(Generic_TimeParam[elementIndex].StepValue <= 0)
 800ec3c:	78fa      	ldrb	r2, [r7, #3]
 800ec3e:	4923      	ldr	r1, [pc, #140]	@ (800eccc <Generic_TransitionBehaviour+0x354>)
 800ec40:	4613      	mov	r3, r2
 800ec42:	009b      	lsls	r3, r3, #2
 800ec44:	4413      	add	r3, r2
 800ec46:	005b      	lsls	r3, r3, #1
 800ec48:	440b      	add	r3, r1
 800ec4a:	f993 3000 	ldrsb.w	r3, [r3]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	dc32      	bgt.n	800ecb8 <Generic_TransitionBehaviour+0x340>
    {
      if((Generic_OnOffStatus[elementIndex].Present_OnOff_State == 1) && (Generic_OnOffStatus[elementIndex].Target_OnOff == 0))
 800ec52:	78fa      	ldrb	r2, [r7, #3]
 800ec54:	491c      	ldr	r1, [pc, #112]	@ (800ecc8 <Generic_TransitionBehaviour+0x350>)
 800ec56:	4613      	mov	r3, r2
 800ec58:	005b      	lsls	r3, r3, #1
 800ec5a:	4413      	add	r3, r2
 800ec5c:	005b      	lsls	r3, r3, #1
 800ec5e:	440b      	add	r3, r1
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d114      	bne.n	800ec90 <Generic_TransitionBehaviour+0x318>
 800ec66:	78fa      	ldrb	r2, [r7, #3]
 800ec68:	4917      	ldr	r1, [pc, #92]	@ (800ecc8 <Generic_TransitionBehaviour+0x350>)
 800ec6a:	4613      	mov	r3, r2
 800ec6c:	005b      	lsls	r3, r3, #1
 800ec6e:	4413      	add	r3, r2
 800ec70:	005b      	lsls	r3, r3, #1
 800ec72:	440b      	add	r3, r1
 800ec74:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ec78:	b29b      	uxth	r3, r3
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d108      	bne.n	800ec90 <Generic_TransitionBehaviour+0x318>
      {
        Generic_OnOffStatus[elementIndex].Present_OnOff_State=0;
 800ec7e:	78fa      	ldrb	r2, [r7, #3]
 800ec80:	4911      	ldr	r1, [pc, #68]	@ (800ecc8 <Generic_TransitionBehaviour+0x350>)
 800ec82:	4613      	mov	r3, r2
 800ec84:	005b      	lsls	r3, r3, #1
 800ec86:	4413      	add	r3, r2
 800ec88:	005b      	lsls	r3, r3, #1
 800ec8a:	440b      	add	r3, r1
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	701a      	strb	r2, [r3, #0]
      }
      Generic_ModelFlag[elementIndex].GenericTransitionFlag = MODEL_TRANSITION_STOP; 
 800ec90:	78fa      	ldrb	r2, [r7, #3]
 800ec92:	4912      	ldr	r1, [pc, #72]	@ (800ecdc <Generic_TransitionBehaviour+0x364>)
 800ec94:	4613      	mov	r3, r2
 800ec96:	005b      	lsls	r3, r3, #1
 800ec98:	4413      	add	r3, r2
 800ec9a:	440b      	add	r3, r1
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	701a      	strb	r2, [r3, #0]
      Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt = MOBLE_TRUE;
 800eca0:	78fa      	ldrb	r2, [r7, #3]
 800eca2:	490e      	ldr	r1, [pc, #56]	@ (800ecdc <Generic_TransitionBehaviour+0x364>)
 800eca4:	4613      	mov	r3, r2
 800eca6:	005b      	lsls	r3, r3, #1
 800eca8:	4413      	add	r3, r2
 800ecaa:	440b      	add	r3, r1
 800ecac:	3302      	adds	r3, #2
 800ecae:	2201      	movs	r2, #1
 800ecb0:	701a      	strb	r2, [r3, #0]
      Publication1SecFlag.TimeStampFlag = MOBLE_FALSE;  
 800ecb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ece0 <Generic_TransitionBehaviour+0x368>)
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	705a      	strb	r2, [r3, #1]
    }
    TRACE_M(TF_GENERIC_M, "Inside virtual application at %ld, Current state 0x%.2x, Target state 0x%.2x, Remaining Time 0x%.2x \n\r",
            Clock_Time(), Generic_TemporaryStatus[elementIndex].PresentValue16,Generic_TemporaryStatus[elementIndex].TargetValue16,Generic_TemporaryStatus[elementIndex].RemainingTime);                     
  }
  return MOBLE_RESULT_SUCCESS;       
 800ecb8:	2300      	movs	r3, #0

} 
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	20004564 	.word	0x20004564
 800ecc8:	20004584 	.word	0x20004584
 800eccc:	2000456c 	.word	0x2000456c
 800ecd0:	20004594 	.word	0x20004594
 800ecd4:	20004591 	.word	0x20004591
 800ecd8:	2000458f 	.word	0x2000458f
 800ecdc:	2000458c 	.word	0x2000458c
 800ece0:	200045a8 	.word	0x200045a8

0800ece4 <Generic_GetStepValue>:
*                     is elementNumber-1
* retval void
*/
void Generic_GetStepValue(MOBLEUINT8 stepParam, 
                          MOBLEUINT8 elementIndex)
{
 800ece4:	b590      	push	{r4, r7, lr}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	4603      	mov	r3, r0
 800ecec:	460a      	mov	r2, r1
 800ecee:	71fb      	strb	r3, [r7, #7]
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	71bb      	strb	r3, [r7, #6]
    10 = resolution is 10000 ms.
    11 = resolution is 600000 ms. 
    Last bits from 0 to 5th index is step number.
  */
  
  Generic_TimeParam[elementIndex].ResBitValue = stepParam >> 6 ;
 800ecf4:	79ba      	ldrb	r2, [r7, #6]
 800ecf6:	79fb      	ldrb	r3, [r7, #7]
 800ecf8:	099b      	lsrs	r3, r3, #6
 800ecfa:	b2d8      	uxtb	r0, r3
 800ecfc:	493e      	ldr	r1, [pc, #248]	@ (800edf8 <Generic_GetStepValue+0x114>)
 800ecfe:	4613      	mov	r3, r2
 800ed00:	009b      	lsls	r3, r3, #2
 800ed02:	4413      	add	r3, r2
 800ed04:	005b      	lsls	r3, r3, #1
 800ed06:	440b      	add	r3, r1
 800ed08:	3301      	adds	r3, #1
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	701a      	strb	r2, [r3, #0]
  Generic_TimeParam[elementIndex].Res_Value = Get_StepResolutionValue(Generic_TimeParam[elementIndex].ResBitValue);
 800ed0e:	79ba      	ldrb	r2, [r7, #6]
 800ed10:	4939      	ldr	r1, [pc, #228]	@ (800edf8 <Generic_GetStepValue+0x114>)
 800ed12:	4613      	mov	r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	4413      	add	r3, r2
 800ed18:	005b      	lsls	r3, r3, #1
 800ed1a:	440b      	add	r3, r1
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	79bc      	ldrb	r4, [r7, #6]
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7fe fbce 	bl	800d4c4 <Get_StepResolutionValue>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	4933      	ldr	r1, [pc, #204]	@ (800edf8 <Generic_GetStepValue+0x114>)
 800ed2c:	4623      	mov	r3, r4
 800ed2e:	009b      	lsls	r3, r3, #2
 800ed30:	4423      	add	r3, r4
 800ed32:	005b      	lsls	r3, r3, #1
 800ed34:	440b      	add	r3, r1
 800ed36:	f8c3 2002 	str.w	r2, [r3, #2]
  Generic_TimeParam[elementIndex].StepValue = stepParam & 0x3F ;
 800ed3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed3e:	79ba      	ldrb	r2, [r7, #6]
 800ed40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ed44:	b258      	sxtb	r0, r3
 800ed46:	492c      	ldr	r1, [pc, #176]	@ (800edf8 <Generic_GetStepValue+0x114>)
 800ed48:	4613      	mov	r3, r2
 800ed4a:	009b      	lsls	r3, r3, #2
 800ed4c:	4413      	add	r3, r2
 800ed4e:	005b      	lsls	r3, r3, #1
 800ed50:	440b      	add	r3, r1
 800ed52:	4602      	mov	r2, r0
 800ed54:	701a      	strb	r2, [r3, #0]
  Generic_TimeParam[elementIndex].TotalTime = (Generic_TimeParam[elementIndex].StepValue * Generic_TimeParam[elementIndex].Res_Value);
 800ed56:	79ba      	ldrb	r2, [r7, #6]
 800ed58:	4927      	ldr	r1, [pc, #156]	@ (800edf8 <Generic_GetStepValue+0x114>)
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	009b      	lsls	r3, r3, #2
 800ed5e:	4413      	add	r3, r2
 800ed60:	005b      	lsls	r3, r3, #1
 800ed62:	440b      	add	r3, r1
 800ed64:	f993 3000 	ldrsb.w	r3, [r3]
 800ed68:	4618      	mov	r0, r3
 800ed6a:	79ba      	ldrb	r2, [r7, #6]
 800ed6c:	4922      	ldr	r1, [pc, #136]	@ (800edf8 <Generic_GetStepValue+0x114>)
 800ed6e:	4613      	mov	r3, r2
 800ed70:	009b      	lsls	r3, r3, #2
 800ed72:	4413      	add	r3, r2
 800ed74:	005b      	lsls	r3, r3, #1
 800ed76:	440b      	add	r3, r1
 800ed78:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ed7c:	79ba      	ldrb	r2, [r7, #6]
 800ed7e:	fb03 f100 	mul.w	r1, r3, r0
 800ed82:	481d      	ldr	r0, [pc, #116]	@ (800edf8 <Generic_GetStepValue+0x114>)
 800ed84:	4613      	mov	r3, r2
 800ed86:	009b      	lsls	r3, r3, #2
 800ed88:	4413      	add	r3, r2
 800ed8a:	005b      	lsls	r3, r3, #1
 800ed8c:	4403      	add	r3, r0
 800ed8e:	f8c3 1006 	str.w	r1, [r3, #6]
  
  if(Generic_TimeParam[elementIndex].Res_Value >= 100)
 800ed92:	79ba      	ldrb	r2, [r7, #6]
 800ed94:	4918      	ldr	r1, [pc, #96]	@ (800edf8 <Generic_GetStepValue+0x114>)
 800ed96:	4613      	mov	r3, r2
 800ed98:	009b      	lsls	r3, r3, #2
 800ed9a:	4413      	add	r3, r2
 800ed9c:	005b      	lsls	r3, r3, #1
 800ed9e:	440b      	add	r3, r1
 800eda0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800eda4:	2b63      	cmp	r3, #99	@ 0x63
 800eda6:	d923      	bls.n	800edf0 <Generic_GetStepValue+0x10c>
  {
    Generic_TimeParam[elementIndex].Res_Value = Generic_TimeParam[elementIndex].Res_Value/TRANSITION_SCALER;
 800eda8:	79b9      	ldrb	r1, [r7, #6]
 800edaa:	79ba      	ldrb	r2, [r7, #6]
 800edac:	4812      	ldr	r0, [pc, #72]	@ (800edf8 <Generic_GetStepValue+0x114>)
 800edae:	460b      	mov	r3, r1
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	440b      	add	r3, r1
 800edb4:	005b      	lsls	r3, r3, #1
 800edb6:	4403      	add	r3, r0
 800edb8:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800edbc:	480e      	ldr	r0, [pc, #56]	@ (800edf8 <Generic_GetStepValue+0x114>)
 800edbe:	4613      	mov	r3, r2
 800edc0:	009b      	lsls	r3, r3, #2
 800edc2:	4413      	add	r3, r2
 800edc4:	005b      	lsls	r3, r3, #1
 800edc6:	4403      	add	r3, r0
 800edc8:	f8c3 1002 	str.w	r1, [r3, #2]
    Generic_TimeParam[elementIndex].StepValue = (Generic_TimeParam[elementIndex].StepValue * TRANSITION_SCALER);
 800edcc:	79b9      	ldrb	r1, [r7, #6]
 800edce:	79ba      	ldrb	r2, [r7, #6]
 800edd0:	4809      	ldr	r0, [pc, #36]	@ (800edf8 <Generic_GetStepValue+0x114>)
 800edd2:	460b      	mov	r3, r1
 800edd4:	009b      	lsls	r3, r3, #2
 800edd6:	440b      	add	r3, r1
 800edd8:	005b      	lsls	r3, r3, #1
 800edda:	4403      	add	r3, r0
 800eddc:	f993 0000 	ldrsb.w	r0, [r3]
 800ede0:	4905      	ldr	r1, [pc, #20]	@ (800edf8 <Generic_GetStepValue+0x114>)
 800ede2:	4613      	mov	r3, r2
 800ede4:	009b      	lsls	r3, r3, #2
 800ede6:	4413      	add	r3, r2
 800ede8:	005b      	lsls	r3, r3, #1
 800edea:	440b      	add	r3, r1
 800edec:	4602      	mov	r2, r0
 800edee:	701a      	strb	r2, [r3, #0]
  }
  
  TRACE_M(TF_GENERIC_M," step resolution 0x%.2lx, number of step 0x%.2x \r\n",
          Generic_TimeParam[elementIndex].Res_Value , Generic_TimeParam[elementIndex].StepValue );   
}
 800edf0:	bf00      	nop
 800edf2:	370c      	adds	r7, #12
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd90      	pop	{r4, r7, pc}
 800edf8:	2000456c 	.word	0x2000456c

0800edfc <Generic_Process>:
*         particular Generic Model
* @param  void
* @retval void
*/ 
void Generic_Process(void)
{       
 800edfc:	b590      	push	{r4, r7, lr}
 800edfe:	b08d      	sub	sp, #52	@ 0x34
 800ee00:	af02      	add	r7, sp, #8
  MOBLE_ADDRESS publishAddress;
  MOBLE_ADDRESS my_Address = BLEMesh_GetAddress();
 800ee02:	f00d fe3b 	bl	801ca7c <BLEMesh_GetAddress>
 800ee06:	4603      	mov	r3, r0
 800ee08:	84fb      	strh	r3, [r7, #38]	@ 0x26
  MOBLEUINT8 elementIndex;
  MOBLEUINT8 const pRxData[8] = {0};
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	617b      	str	r3, [r7, #20]
 800ee0e:	2300      	movs	r3, #0
 800ee10:	61bb      	str	r3, [r7, #24]
  MOBLEUINT32 dataLength = 0;
 800ee12:	2300      	movs	r3, #0
 800ee14:	623b      	str	r3, [r7, #32]
  
#if defined ENABLE_GENERIC_MODEL_SERVER_ONOFF || defined ENABLE_GENERIC_MODEL_SERVER_LEVEL  
  MOBLEUINT8 Generic_GetBuff[8]; 
#endif     
  
  for(elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800ee16:	2300      	movs	r3, #0
 800ee18:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800ee1c:	e10a      	b.n	800f034 <Generic_Process+0x238>
  {
    my_Address = my_Address+elementIndex;
 800ee1e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ee26:	4413      	add	r3, r2
 800ee28:	84fb      	strh	r3, [r7, #38]	@ 0x26
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF   
    if(Generic_ModelFlag[elementIndex].GenericTransitionFlag == GENERIC_ON_OFF_TRANSITION_START)
 800ee2a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ee2e:	4986      	ldr	r1, [pc, #536]	@ (800f048 <Generic_Process+0x24c>)
 800ee30:	4613      	mov	r3, r2
 800ee32:	005b      	lsls	r3, r3, #1
 800ee34:	4413      	add	r3, r2
 800ee36:	440b      	add	r3, r1
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d16e      	bne.n	800ef1c <Generic_Process+0x120>
    {   
      /* Fetching the state value from the application layer to middle layer */
      (Appli_GenericState_cb.GetOnOffValue_cb)(Generic_GetBuff, my_Address, elementIndex); 
 800ee3e:	4b83      	ldr	r3, [pc, #524]	@ (800f04c <Generic_Process+0x250>)
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ee46:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 800ee48:	f107 000c 	add.w	r0, r7, #12
 800ee4c:	4798      	blx	r3
      
      Generic_TemporaryStatus[elementIndex].TargetValue16  = Generic_GetBuff[3] << 8;
 800ee4e:	7bfb      	ldrb	r3, [r7, #15]
 800ee50:	021b      	lsls	r3, r3, #8
 800ee52:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ee56:	b218      	sxth	r0, r3
 800ee58:	497d      	ldr	r1, [pc, #500]	@ (800f050 <Generic_Process+0x254>)
 800ee5a:	4613      	mov	r3, r2
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	4413      	add	r3, r2
 800ee60:	440b      	add	r3, r1
 800ee62:	4602      	mov	r2, r0
 800ee64:	f8a3 2003 	strh.w	r2, [r3, #3]
      Generic_TemporaryStatus[elementIndex].TargetValue16 |= Generic_GetBuff[2];
 800ee68:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ee6c:	4978      	ldr	r1, [pc, #480]	@ (800f050 <Generic_Process+0x254>)
 800ee6e:	4613      	mov	r3, r2
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	4413      	add	r3, r2
 800ee74:	440b      	add	r3, r1
 800ee76:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ee7a:	b219      	sxth	r1, r3
 800ee7c:	7bbb      	ldrb	r3, [r7, #14]
 800ee7e:	b21b      	sxth	r3, r3
 800ee80:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ee84:	430b      	orrs	r3, r1
 800ee86:	b218      	sxth	r0, r3
 800ee88:	4971      	ldr	r1, [pc, #452]	@ (800f050 <Generic_Process+0x254>)
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	4413      	add	r3, r2
 800ee90:	440b      	add	r3, r1
 800ee92:	4602      	mov	r2, r0
 800ee94:	f8a3 2003 	strh.w	r2, [r3, #3]
      
      /* Transition function called to change the state in transition */
      Generic_TransitionBehaviour(Generic_GetBuff, elementIndex); 
 800ee98:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ee9c:	f107 030c 	add.w	r3, r7, #12
 800eea0:	4611      	mov	r1, r2
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7ff fd68 	bl	800e978 <Generic_TransitionBehaviour>
      if(GenericUpdateFlag == VALUE_UPDATE_SET)
 800eea8:	4b6a      	ldr	r3, [pc, #424]	@ (800f054 <Generic_Process+0x258>)
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d135      	bne.n	800ef1c <Generic_Process+0x120>
      {
        /* updating the state value after the each transition step complete */
        Generic_OnOffStateUpdate_Process(elementIndex);
 800eeb0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f000 f8d9 	bl	800f06c <Generic_OnOffStateUpdate_Process>
        /* Application callback */
        (GenericAppli_cb.OnOff_Set_cb)(&Generic_OnOffStatus[elementIndex], OptionalParam, my_Address, elementIndex);  
 800eeba:	4b67      	ldr	r3, [pc, #412]	@ (800f058 <Generic_Process+0x25c>)
 800eebc:	681c      	ldr	r4, [r3, #0]
 800eebe:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eec2:	4613      	mov	r3, r2
 800eec4:	005b      	lsls	r3, r3, #1
 800eec6:	4413      	add	r3, r2
 800eec8:	005b      	lsls	r3, r3, #1
 800eeca:	4a64      	ldr	r2, [pc, #400]	@ (800f05c <Generic_Process+0x260>)
 800eecc:	1898      	adds	r0, r3, r2
 800eece:	4b64      	ldr	r3, [pc, #400]	@ (800f060 <Generic_Process+0x264>)
 800eed0:	7819      	ldrb	r1, [r3, #0]
 800eed2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800eed6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800eed8:	47a0      	blx	r4
        /*binding of the generic on off with light model */
        GenericOnOff_LightActualBinding(&Generic_OnOffStatus[elementIndex],
 800eeda:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eede:	4613      	mov	r3, r2
 800eee0:	005b      	lsls	r3, r3, #1
 800eee2:	4413      	add	r3, r2
 800eee4:	005b      	lsls	r3, r3, #1
 800eee6:	4a5d      	ldr	r2, [pc, #372]	@ (800f05c <Generic_Process+0x260>)
 800eee8:	1898      	adds	r0, r3, r2
 800eeea:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eeee:	4956      	ldr	r1, [pc, #344]	@ (800f048 <Generic_Process+0x24c>)
 800eef0:	4613      	mov	r3, r2
 800eef2:	005b      	lsls	r3, r3, #1
 800eef4:	4413      	add	r3, r2
 800eef6:	440b      	add	r3, r1
 800eef8:	781c      	ldrb	r4, [r3, #0]
 800eefa:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800eefe:	4952      	ldr	r1, [pc, #328]	@ (800f048 <Generic_Process+0x24c>)
 800ef00:	4613      	mov	r3, r2
 800ef02:	005b      	lsls	r3, r3, #1
 800ef04:	4413      	add	r3, r2
 800ef06:	440b      	add	r3, r1
 800ef08:	3302      	adds	r3, #2
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800ef10:	4622      	mov	r2, r4
 800ef12:	f002 f905 	bl	8011120 <GenericOnOff_LightActualBinding>
                                        elementIndex,
                                        Generic_ModelFlag[elementIndex].GenericTransitionFlag,
                                        Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt);
        GenericUpdateFlag = VALUE_UPDATE_RESET;     
 800ef16:	4b4f      	ldr	r3, [pc, #316]	@ (800f054 <Generic_Process+0x258>)
 800ef18:	2200      	movs	r2, #0
 800ef1a:	701a      	strb	r2, [r3, #0]
      }
    }    
#endif 
 
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL       
    if(Generic_ModelFlag[elementIndex].GenericTransitionFlag == GENERIC_LEVEL_TRANSITION_START)
 800ef1c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ef20:	4949      	ldr	r1, [pc, #292]	@ (800f048 <Generic_Process+0x24c>)
 800ef22:	4613      	mov	r3, r2
 800ef24:	005b      	lsls	r3, r3, #1
 800ef26:	4413      	add	r3, r2
 800ef28:	440b      	add	r3, r1
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	2b02      	cmp	r3, #2
 800ef2e:	d14a      	bne.n	800efc6 <Generic_Process+0x1ca>
    {    
      /* Fetching the state value from the application layer to middle layer */
      (Appli_GenericState_cb.GetLevelStatus_cb)(Generic_GetBuff, my_Address, elementIndex); 
 800ef30:	4b46      	ldr	r3, [pc, #280]	@ (800f04c <Generic_Process+0x250>)
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ef38:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 800ef3a:	f107 000c 	add.w	r0, r7, #12
 800ef3e:	4798      	blx	r3
      /* Transition function called to change the state in transition */
      Generic_TransitionBehaviour(Generic_GetBuff, elementIndex); 
 800ef40:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ef44:	f107 030c 	add.w	r3, r7, #12
 800ef48:	4611      	mov	r1, r2
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7ff fd14 	bl	800e978 <Generic_TransitionBehaviour>
      if(GenericUpdateFlag == VALUE_UPDATE_SET)
 800ef50:	4b40      	ldr	r3, [pc, #256]	@ (800f054 <Generic_Process+0x258>)
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d136      	bne.n	800efc6 <Generic_Process+0x1ca>
      {
        /* updating the state value after the each transition step complete */
        Generic_LevelStateUpdate_Process(elementIndex);
 800ef58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f000 f923 	bl	800f1a8 <Generic_LevelStateUpdate_Process>
        /* Application callback */
        (GenericAppli_cb.Level_Set_cb)(&Generic_LevelStatus[elementIndex], 0, my_Address, elementIndex);  
 800ef62:	4b3d      	ldr	r3, [pc, #244]	@ (800f058 <Generic_Process+0x25c>)
 800ef64:	689c      	ldr	r4, [r3, #8]
 800ef66:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ef6a:	4613      	mov	r3, r2
 800ef6c:	005b      	lsls	r3, r3, #1
 800ef6e:	4413      	add	r3, r2
 800ef70:	009b      	lsls	r3, r3, #2
 800ef72:	4a3c      	ldr	r2, [pc, #240]	@ (800f064 <Generic_Process+0x268>)
 800ef74:	1898      	adds	r0, r3, r2
 800ef76:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ef7a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	47a0      	blx	r4
        /*binding of the generic Level with light model */
        GenericLevel_LightBinding(&Generic_LevelStatus[elementIndex],BINDING_GENERIC_LEVEL_SET,
 800ef80:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ef84:	4613      	mov	r3, r2
 800ef86:	005b      	lsls	r3, r3, #1
 800ef88:	4413      	add	r3, r2
 800ef8a:	009b      	lsls	r3, r3, #2
 800ef8c:	4a35      	ldr	r2, [pc, #212]	@ (800f064 <Generic_Process+0x268>)
 800ef8e:	1898      	adds	r0, r3, r2
 800ef90:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800ef94:	492c      	ldr	r1, [pc, #176]	@ (800f048 <Generic_Process+0x24c>)
 800ef96:	4613      	mov	r3, r2
 800ef98:	005b      	lsls	r3, r3, #1
 800ef9a:	4413      	add	r3, r2
 800ef9c:	440b      	add	r3, r1
 800ef9e:	7819      	ldrb	r1, [r3, #0]
 800efa0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800efa4:	4c28      	ldr	r4, [pc, #160]	@ (800f048 <Generic_Process+0x24c>)
 800efa6:	4613      	mov	r3, r2
 800efa8:	005b      	lsls	r3, r3, #1
 800efaa:	4413      	add	r3, r2
 800efac:	4423      	add	r3, r4
 800efae:	3302      	adds	r3, #2
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	460b      	mov	r3, r1
 800efba:	2101      	movs	r1, #1
 800efbc:	f002 f97a 	bl	80112b4 <GenericLevel_LightBinding>
                                  elementIndex,
                                  Generic_ModelFlag[elementIndex].GenericTransitionFlag,
                                  Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt);
        GenericUpdateFlag = VALUE_UPDATE_RESET;
 800efc0:	4b24      	ldr	r3, [pc, #144]	@ (800f054 <Generic_Process+0x258>)
 800efc2:	2200      	movs	r2, #0
 800efc4:	701a      	strb	r2, [r3, #0]
      }
      
    }   
#endif
  
    if(Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt == MOBLE_TRUE)
 800efc6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800efca:	491f      	ldr	r1, [pc, #124]	@ (800f048 <Generic_Process+0x24c>)
 800efcc:	4613      	mov	r3, r2
 800efce:	005b      	lsls	r3, r3, #1
 800efd0:	4413      	add	r3, r2
 800efd2:	440b      	add	r3, r1
 800efd4:	3302      	adds	r3, #2
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d126      	bne.n	800f02a <Generic_Process+0x22e>
    {         
      publishAddress = BLEMesh_GetPublishAddress(elementIndex,Model_Binding_Var.Model_ID);
 800efdc:	4b22      	ldr	r3, [pc, #136]	@ (800f068 <Generic_Process+0x26c>)
 800efde:	885b      	ldrh	r3, [r3, #2]
 800efe0:	461a      	mov	r2, r3
 800efe2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800efe6:	4611      	mov	r1, r2
 800efe8:	4618      	mov	r0, r3
 800efea:	f00d fd57 	bl	801ca9c <BLEMesh_GetPublishAddress>
 800efee:	4603      	mov	r3, r0
 800eff0:	83fb      	strh	r3, [r7, #30]
      if((publishAddress != 0x00))
 800eff2:	8bfb      	ldrh	r3, [r7, #30]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d00e      	beq.n	800f016 <Generic_Process+0x21a>
      {

         MODEL_MessageHeader_t msgHdr;
         msgHdr.dst_peer = my_Address;
 800eff8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800effa:	80fb      	strh	r3, [r7, #6]
         msgHdr.elementIndex = elementIndex;
 800effc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f000:	703b      	strb	r3, [r7, #0]
         msgHdr.peer_addr = publishAddress;
 800f002:	8bfb      	ldrh	r3, [r7, #30]
 800f004:	80bb      	strh	r3, [r7, #4]
         Model_SendResponse(&msgHdr, Model_Binding_Var.Model_Rx_Opcode, pRxData, dataLength);
 800f006:	4b18      	ldr	r3, [pc, #96]	@ (800f068 <Generic_Process+0x26c>)
 800f008:	8819      	ldrh	r1, [r3, #0]
 800f00a:	f107 0214 	add.w	r2, r7, #20
 800f00e:	4638      	mov	r0, r7
 800f010:	6a3b      	ldr	r3, [r7, #32]
 800f012:	f018 fee7 	bl	8027de4 <Model_SendResponse>
         TRACE_M(TF_LIGHT_M, "Publishing the status after transition complete opcode %.2x model id %.2x \r\n",
         Model_Binding_Var.Model_Rx_Opcode,Model_Binding_Var.Model_ID);
      }
      Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt = MOBLE_FALSE;
 800f016:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800f01a:	490b      	ldr	r1, [pc, #44]	@ (800f048 <Generic_Process+0x24c>)
 800f01c:	4613      	mov	r3, r2
 800f01e:	005b      	lsls	r3, r3, #1
 800f020:	4413      	add	r3, r2
 800f022:	440b      	add	r3, r1
 800f024:	3302      	adds	r3, #2
 800f026:	2200      	movs	r2, #0
 800f028:	701a      	strb	r2, [r3, #0]
  for(elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800f02a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f02e:	3301      	adds	r3, #1
 800f030:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800f034:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f038:	2b00      	cmp	r3, #0
 800f03a:	f43f aef0 	beq.w	800ee1e <Generic_Process+0x22>
    }
  }
}
 800f03e:	bf00      	nop
 800f040:	bf00      	nop
 800f042:	372c      	adds	r7, #44	@ 0x2c
 800f044:	46bd      	mov	sp, r7
 800f046:	bd90      	pop	{r4, r7, pc}
 800f048:	2000458c 	.word	0x2000458c
 800f04c:	08030904 	.word	0x08030904
 800f050:	20004564 	.word	0x20004564
 800f054:	2000458f 	.word	0x2000458f
 800f058:	080308dc 	.word	0x080308dc
 800f05c:	20004584 	.word	0x20004584
 800f060:	20004590 	.word	0x20004590
 800f064:	20004578 	.word	0x20004578
 800f068:	2000454c 	.word	0x2000454c

0800f06c <Generic_OnOffStateUpdate_Process>:
*        Generic On Off model in application file from Temporary parameter in model file.
* @param void
* return MOBLE_RESULT.
*/
MOBLE_RESULT Generic_OnOffStateUpdate_Process(MOBLEUINT8 elementIndex)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	4603      	mov	r3, r0
 800f074:	71fb      	strb	r3, [r7, #7]
  Generic_OnOffStatus[elementIndex].Present_OnOff_Value = Generic_TemporaryStatus[elementIndex].PresentValue16;
 800f076:	79fa      	ldrb	r2, [r7, #7]
 800f078:	492a      	ldr	r1, [pc, #168]	@ (800f124 <Generic_OnOffStateUpdate_Process+0xb8>)
 800f07a:	4613      	mov	r3, r2
 800f07c:	009b      	lsls	r3, r3, #2
 800f07e:	4413      	add	r3, r2
 800f080:	440b      	add	r3, r1
 800f082:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800f086:	b21b      	sxth	r3, r3
 800f088:	79fa      	ldrb	r2, [r7, #7]
 800f08a:	b298      	uxth	r0, r3
 800f08c:	4926      	ldr	r1, [pc, #152]	@ (800f128 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f08e:	4613      	mov	r3, r2
 800f090:	005b      	lsls	r3, r3, #1
 800f092:	4413      	add	r3, r2
 800f094:	005b      	lsls	r3, r3, #1
 800f096:	440b      	add	r3, r1
 800f098:	4602      	mov	r2, r0
 800f09a:	f8a3 2001 	strh.w	r2, [r3, #1]
  if(Generic_TemporaryStatus[elementIndex].TargetValue16 == 0x01)
 800f09e:	79fa      	ldrb	r2, [r7, #7]
 800f0a0:	4920      	ldr	r1, [pc, #128]	@ (800f124 <Generic_OnOffStateUpdate_Process+0xb8>)
 800f0a2:	4613      	mov	r3, r2
 800f0a4:	009b      	lsls	r3, r3, #2
 800f0a6:	4413      	add	r3, r2
 800f0a8:	440b      	add	r3, r1
 800f0aa:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800f0ae:	b21b      	sxth	r3, r3
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d109      	bne.n	800f0c8 <Generic_OnOffStateUpdate_Process+0x5c>
  {
    Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x01;
 800f0b4:	79fa      	ldrb	r2, [r7, #7]
 800f0b6:	491c      	ldr	r1, [pc, #112]	@ (800f128 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	005b      	lsls	r3, r3, #1
 800f0bc:	4413      	add	r3, r2
 800f0be:	005b      	lsls	r3, r3, #1
 800f0c0:	440b      	add	r3, r1
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	701a      	strb	r2, [r3, #0]
 800f0c6:	e014      	b.n	800f0f2 <Generic_OnOffStateUpdate_Process+0x86>
  }
  else
  {
    if(Generic_OnOffStatus[elementIndex].Present_OnOff_Value == 0x00)
 800f0c8:	79fa      	ldrb	r2, [r7, #7]
 800f0ca:	4917      	ldr	r1, [pc, #92]	@ (800f128 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	005b      	lsls	r3, r3, #1
 800f0d0:	4413      	add	r3, r2
 800f0d2:	005b      	lsls	r3, r3, #1
 800f0d4:	440b      	add	r3, r1
 800f0d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d108      	bne.n	800f0f2 <Generic_OnOffStateUpdate_Process+0x86>
    {
      Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x00;
 800f0e0:	79fa      	ldrb	r2, [r7, #7]
 800f0e2:	4911      	ldr	r1, [pc, #68]	@ (800f128 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f0e4:	4613      	mov	r3, r2
 800f0e6:	005b      	lsls	r3, r3, #1
 800f0e8:	4413      	add	r3, r2
 800f0ea:	005b      	lsls	r3, r3, #1
 800f0ec:	440b      	add	r3, r1
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	701a      	strb	r2, [r3, #0]
    }
  }
  Generic_OnOffStatus[elementIndex].RemainingTime = Generic_TemporaryStatus[elementIndex].RemainingTime;
 800f0f2:	79f9      	ldrb	r1, [r7, #7]
 800f0f4:	79fa      	ldrb	r2, [r7, #7]
 800f0f6:	480b      	ldr	r0, [pc, #44]	@ (800f124 <Generic_OnOffStateUpdate_Process+0xb8>)
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	440b      	add	r3, r1
 800f0fe:	4403      	add	r3, r0
 800f100:	7818      	ldrb	r0, [r3, #0]
 800f102:	4909      	ldr	r1, [pc, #36]	@ (800f128 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f104:	4613      	mov	r3, r2
 800f106:	005b      	lsls	r3, r3, #1
 800f108:	4413      	add	r3, r2
 800f10a:	005b      	lsls	r3, r3, #1
 800f10c:	440b      	add	r3, r1
 800f10e:	3305      	adds	r3, #5
 800f110:	4602      	mov	r2, r0
 800f112:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	370c      	adds	r7, #12
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop
 800f124:	20004564 	.word	0x20004564
 800f128:	20004584 	.word	0x20004584

0800f12c <Generic_Publish>:
*         button.
* @param  srcAddress: Source Address of the node 
* @retval void
*/ 
void Generic_Publish(MOBLE_ADDRESS srcAddress)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b088      	sub	sp, #32
 800f130:	af04      	add	r7, sp, #16
 800f132:	4603      	mov	r3, r0
 800f134:	80fb      	strh	r3, [r7, #6]
  MOBLEUINT8 generic_Buff[2]; 
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800f136:	2300      	movs	r3, #0
 800f138:	73fb      	strb	r3, [r7, #15]
  
  /* changes the LED status on other nodes in the network */
  if(CommandStatus == (MOBLEUINT16)APPLI_LED_ON)
 800f13a:	4b19      	ldr	r3, [pc, #100]	@ (800f1a0 <Generic_Publish+0x74>)
 800f13c:	881b      	ldrh	r3, [r3, #0]
 800f13e:	2b01      	cmp	r3, #1
 800f140:	d102      	bne.n	800f148 <Generic_Publish+0x1c>
  {
    generic_Buff[0] = APPLI_LED_OFF;
 800f142:	2300      	movs	r3, #0
 800f144:	733b      	strb	r3, [r7, #12]
 800f146:	e001      	b.n	800f14c <Generic_Publish+0x20>
  }
  else
  {
    generic_Buff[0] = APPLI_LED_ON;
 800f148:	2301      	movs	r3, #1
 800f14a:	733b      	strb	r3, [r7, #12]
  }
  generic_Buff[1] = Model_Tid.TidSend;
 800f14c:	4b15      	ldr	r3, [pc, #84]	@ (800f1a4 <Generic_Publish+0x78>)
 800f14e:	785b      	ldrb	r3, [r3, #1]
 800f150:	737b      	strb	r3, [r7, #13]
  
  result = BLEMesh_SetRemotePublication(GENERIC_ONOFF_SERVER_MODEL_ID, 
 800f152:	f107 030c 	add.w	r3, r7, #12
 800f156:	88f9      	ldrh	r1, [r7, #6]
 800f158:	2200      	movs	r2, #0
 800f15a:	9202      	str	r2, [sp, #8]
 800f15c:	2200      	movs	r2, #0
 800f15e:	9201      	str	r2, [sp, #4]
 800f160:	2202      	movs	r2, #2
 800f162:	9200      	str	r2, [sp, #0]
 800f164:	f248 2203 	movw	r2, #33283	@ 0x8203
 800f168:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800f16c:	f018 ff00 	bl	8027f70 <BLEMesh_SetRemotePublication>
 800f170:	4603      	mov	r3, r0
 800f172:	73fb      	strb	r3, [r7, #15]
                                        srcAddress ,
                                        GENERIC_ON_OFF_SET_UNACK, 
                                        generic_Buff, 2,
                                        MOBLE_FALSE, MOBLE_FALSE);
  Model_Tid.TidSend++;
 800f174:	4b0b      	ldr	r3, [pc, #44]	@ (800f1a4 <Generic_Publish+0x78>)
 800f176:	785b      	ldrb	r3, [r3, #1]
 800f178:	3301      	adds	r3, #1
 800f17a:	b2da      	uxtb	r2, r3
 800f17c:	4b09      	ldr	r3, [pc, #36]	@ (800f1a4 <Generic_Publish+0x78>)
 800f17e:	705a      	strb	r2, [r3, #1]
  if(Model_Tid.TidSend >= MAX_TID_VALUE)
 800f180:	4b08      	ldr	r3, [pc, #32]	@ (800f1a4 <Generic_Publish+0x78>)
 800f182:	785b      	ldrb	r3, [r3, #1]
 800f184:	2bff      	cmp	r3, #255	@ 0xff
 800f186:	d102      	bne.n	800f18e <Generic_Publish+0x62>
  {
    Model_Tid.TidSend = 0;
 800f188:	4b06      	ldr	r3, [pc, #24]	@ (800f1a4 <Generic_Publish+0x78>)
 800f18a:	2200      	movs	r2, #0
 800f18c:	705a      	strb	r2, [r3, #1]
  if(result)
  {
    TRACE_M(TF_GENERIC_M, "Publication Error \r\n");
  }
  
  CommandStatus = generic_Buff[0];
 800f18e:	7b3b      	ldrb	r3, [r7, #12]
 800f190:	461a      	mov	r2, r3
 800f192:	4b03      	ldr	r3, [pc, #12]	@ (800f1a0 <Generic_Publish+0x74>)
 800f194:	801a      	strh	r2, [r3, #0]
}
 800f196:	bf00      	nop
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	20006e68 	.word	0x20006e68
 800f1a4:	20004544 	.word	0x20004544

0800f1a8 <Generic_LevelStateUpdate_Process>:
*        Level model in application file from Temporary parameter in model file.
* @param void
* return MOBLE_RESULT.
*/
MOBLE_RESULT Generic_LevelStateUpdate_Process(MOBLEUINT8 elementIndex)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	71fb      	strb	r3, [r7, #7]
  Generic_LevelStatus[elementIndex].Present_Level16 = Generic_TemporaryStatus[elementIndex].PresentValue16;
 800f1b2:	79f9      	ldrb	r1, [r7, #7]
 800f1b4:	79fa      	ldrb	r2, [r7, #7]
 800f1b6:	481d      	ldr	r0, [pc, #116]	@ (800f22c <Generic_LevelStateUpdate_Process+0x84>)
 800f1b8:	460b      	mov	r3, r1
 800f1ba:	009b      	lsls	r3, r3, #2
 800f1bc:	440b      	add	r3, r1
 800f1be:	4403      	add	r3, r0
 800f1c0:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800f1c4:	b218      	sxth	r0, r3
 800f1c6:	491a      	ldr	r1, [pc, #104]	@ (800f230 <Generic_LevelStateUpdate_Process+0x88>)
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	005b      	lsls	r3, r3, #1
 800f1cc:	4413      	add	r3, r2
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	440b      	add	r3, r1
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	801a      	strh	r2, [r3, #0]
  Generic_LevelStatus[elementIndex].Target_Level16  = Generic_TemporaryStatus[elementIndex].TargetValue16;
 800f1d6:	79f9      	ldrb	r1, [r7, #7]
 800f1d8:	79fa      	ldrb	r2, [r7, #7]
 800f1da:	4814      	ldr	r0, [pc, #80]	@ (800f22c <Generic_LevelStateUpdate_Process+0x84>)
 800f1dc:	460b      	mov	r3, r1
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	440b      	add	r3, r1
 800f1e2:	4403      	add	r3, r0
 800f1e4:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800f1e8:	b218      	sxth	r0, r3
 800f1ea:	4911      	ldr	r1, [pc, #68]	@ (800f230 <Generic_LevelStateUpdate_Process+0x88>)
 800f1ec:	4613      	mov	r3, r2
 800f1ee:	005b      	lsls	r3, r3, #1
 800f1f0:	4413      	add	r3, r2
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	440b      	add	r3, r1
 800f1f6:	3302      	adds	r3, #2
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	801a      	strh	r2, [r3, #0]
  Generic_LevelStatus[elementIndex].RemainingTime   = Generic_TemporaryStatus[elementIndex].RemainingTime;
 800f1fc:	79f9      	ldrb	r1, [r7, #7]
 800f1fe:	79fa      	ldrb	r2, [r7, #7]
 800f200:	480a      	ldr	r0, [pc, #40]	@ (800f22c <Generic_LevelStateUpdate_Process+0x84>)
 800f202:	460b      	mov	r3, r1
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	440b      	add	r3, r1
 800f208:	4403      	add	r3, r0
 800f20a:	7818      	ldrb	r0, [r3, #0]
 800f20c:	4908      	ldr	r1, [pc, #32]	@ (800f230 <Generic_LevelStateUpdate_Process+0x88>)
 800f20e:	4613      	mov	r3, r2
 800f210:	005b      	lsls	r3, r3, #1
 800f212:	4413      	add	r3, r2
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	440b      	add	r3, r1
 800f218:	3304      	adds	r3, #4
 800f21a:	4602      	mov	r2, r0
 800f21c:	701a      	strb	r2, [r3, #0]
   
  return MOBLE_RESULT_SUCCESS;
 800f21e:	2300      	movs	r3, #0
}
 800f220:	4618      	mov	r0, r3
 800f222:	370c      	adds	r7, #12
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr
 800f22c:	20004564 	.word	0x20004564
 800f230:	20004578 	.word	0x20004578

0800f234 <LightActual_GenericOnOffBinding>:
* @param lightActual: used to select the binding and reverse binding 
* return void.
*/
void LightActual_GenericOnOffBinding(Light_LightnessStatus_t* lightActual,
                                     MOBLEUINT8 elementIndex)
{
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	460b      	mov	r3, r1
 800f23e:	70fb      	strb	r3, [r7, #3]
  6.1.2.2.3 - Binding of actual light lightness with generic on off,
  As actual lightness will set which changes the on off state in 
  generic model
  */

  if(lightActual->LightnessPresentValue16 == 0x00)
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	881b      	ldrh	r3, [r3, #0]
 800f244:	b29b      	uxth	r3, r3
 800f246:	2b00      	cmp	r3, #0
 800f248:	d109      	bne.n	800f25e <LightActual_GenericOnOffBinding+0x2a>
  {
    Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x00;
 800f24a:	78fa      	ldrb	r2, [r7, #3]
 800f24c:	490b      	ldr	r1, [pc, #44]	@ (800f27c <LightActual_GenericOnOffBinding+0x48>)
 800f24e:	4613      	mov	r3, r2
 800f250:	005b      	lsls	r3, r3, #1
 800f252:	4413      	add	r3, r2
 800f254:	005b      	lsls	r3, r3, #1
 800f256:	440b      	add	r3, r1
 800f258:	2200      	movs	r2, #0
 800f25a:	701a      	strb	r2, [r3, #0]
  
  TRACE_M(TF_LIGHT_M, 
          "Light Actual binding with Generic On Off - Present OnOff value 0x%.2x \r\n", 
          Generic_OnOffStatus[elementIndex].Present_OnOff_State);    
 
}
 800f25c:	e008      	b.n	800f270 <LightActual_GenericOnOffBinding+0x3c>
    Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x01;
 800f25e:	78fa      	ldrb	r2, [r7, #3]
 800f260:	4906      	ldr	r1, [pc, #24]	@ (800f27c <LightActual_GenericOnOffBinding+0x48>)
 800f262:	4613      	mov	r3, r2
 800f264:	005b      	lsls	r3, r3, #1
 800f266:	4413      	add	r3, r2
 800f268:	005b      	lsls	r3, r3, #1
 800f26a:	440b      	add	r3, r1
 800f26c:	2201      	movs	r2, #1
 800f26e:	701a      	strb	r2, [r3, #0]
}
 800f270:	bf00      	nop
 800f272:	370c      	adds	r7, #12
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr
 800f27c:	20004584 	.word	0x20004584

0800f280 <LightActual_GenericLevelBinding>:
* @param lightActual: Pointer to the data which needs to be checked.
* return void.
*/
void LightActual_GenericLevelBinding(Light_LightnessStatus_t* lightActual,
                                     MOBLEUINT8 elementIndex)
{ 
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	460b      	mov	r3, r1
 800f28a:	70fb      	strb	r3, [r7, #3]
  6.1.2.2.2 - Binding of actual light lightness with generic level
  As Actual lightness changes, the generic level value will
  change.
     */

  Generic_LevelStatus[elementIndex].Present_Level16 = lightActual->LightnessPresentValue16 - 32768;  
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	881b      	ldrh	r3, [r3, #0]
 800f290:	b29b      	uxth	r3, r3
 800f292:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800f296:	b29b      	uxth	r3, r3
 800f298:	78fa      	ldrb	r2, [r7, #3]
 800f29a:	b218      	sxth	r0, r3
 800f29c:	4906      	ldr	r1, [pc, #24]	@ (800f2b8 <LightActual_GenericLevelBinding+0x38>)
 800f29e:	4613      	mov	r3, r2
 800f2a0:	005b      	lsls	r3, r3, #1
 800f2a2:	4413      	add	r3, r2
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	440b      	add	r3, r1
 800f2a8:	4602      	mov	r2, r0
 800f2aa:	801a      	strh	r2, [r3, #0]
 
  TRACE_M(TF_LIGHT_M, 
          "Light Actual binding with Generic Level - Present Level value 0x%.2x \r\n", 
          Generic_LevelStatus[elementIndex].Present_Level16); 
      
}
 800f2ac:	bf00      	nop
 800f2ae:	370c      	adds	r7, #12
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b6:	4770      	bx	lr
 800f2b8:	20004578 	.word	0x20004578

0800f2bc <Generic_TransitionParameterReset>:
* @brief Function called when message received without optional parameter, stop the running transition.
* @param void
* @param void
*/
void Generic_TransitionParameterReset(MOBLEUINT8 elementIndex)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	71fb      	strb	r3, [r7, #7]
   Generic_ModelFlag[elementIndex].GenericTransitionFlag = MODEL_TRANSITION_STOP;
 800f2c6:	79fa      	ldrb	r2, [r7, #7]
 800f2c8:	4910      	ldr	r1, [pc, #64]	@ (800f30c <Generic_TransitionParameterReset+0x50>)
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	005b      	lsls	r3, r3, #1
 800f2ce:	4413      	add	r3, r2
 800f2d0:	440b      	add	r3, r1
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	701a      	strb	r2, [r3, #0]
   Generic_TimeParam[elementIndex].Res_Value = 0x00;
 800f2d6:	79fa      	ldrb	r2, [r7, #7]
 800f2d8:	490d      	ldr	r1, [pc, #52]	@ (800f310 <Generic_TransitionParameterReset+0x54>)
 800f2da:	4613      	mov	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	4413      	add	r3, r2
 800f2e0:	005b      	lsls	r3, r3, #1
 800f2e2:	440b      	add	r3, r1
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	805a      	strh	r2, [r3, #2]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	809a      	strh	r2, [r3, #4]
   Generic_TimeParam[elementIndex].StepValue = 0X00;
 800f2ec:	79fa      	ldrb	r2, [r7, #7]
 800f2ee:	4908      	ldr	r1, [pc, #32]	@ (800f310 <Generic_TransitionParameterReset+0x54>)
 800f2f0:	4613      	mov	r3, r2
 800f2f2:	009b      	lsls	r3, r3, #2
 800f2f4:	4413      	add	r3, r2
 800f2f6:	005b      	lsls	r3, r3, #1
 800f2f8:	440b      	add	r3, r1
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	701a      	strb	r2, [r3, #0]
}
 800f2fe:	bf00      	nop
 800f300:	370c      	adds	r7, #12
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr
 800f30a:	bf00      	nop
 800f30c:	2000458c 	.word	0x2000458c
 800f310:	2000456c 	.word	0x2000456c

0800f314 <Generic_RestoreModelStates>:
* @brief function used to restore the states of the generic model.
* @param pointer to the array
* return void.
*/
void Generic_RestoreModelStates(void *model_State , MOBLEUINT8 elementIndex)
{
 800f314:	b590      	push	{r4, r7, lr}
 800f316:	b085      	sub	sp, #20
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	460b      	mov	r3, r1
 800f31e:	70fb      	strb	r3, [r7, #3]
  
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF    
  Generic_OnOffStatus[elementIndex].Present_OnOff_State = ((Models_ParamNvm_t *)model_State)->Generic_OnOff;
 800f320:	78fa      	ldrb	r2, [r7, #3]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	7918      	ldrb	r0, [r3, #4]
 800f326:	4922      	ldr	r1, [pc, #136]	@ (800f3b0 <Generic_RestoreModelStates+0x9c>)
 800f328:	4613      	mov	r3, r2
 800f32a:	005b      	lsls	r3, r3, #1
 800f32c:	4413      	add	r3, r2
 800f32e:	005b      	lsls	r3, r3, #1
 800f330:	440b      	add	r3, r1
 800f332:	4602      	mov	r2, r0
 800f334:	701a      	strb	r2, [r3, #0]
  Generic_OnOffStatus[elementIndex].Target_OnOff = ((Models_ParamNvm_t *)model_State)->GenericTarget;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	795b      	ldrb	r3, [r3, #5]
 800f33a:	78fa      	ldrb	r2, [r7, #3]
 800f33c:	4618      	mov	r0, r3
 800f33e:	491c      	ldr	r1, [pc, #112]	@ (800f3b0 <Generic_RestoreModelStates+0x9c>)
 800f340:	4613      	mov	r3, r2
 800f342:	005b      	lsls	r3, r3, #1
 800f344:	4413      	add	r3, r2
 800f346:	005b      	lsls	r3, r3, #1
 800f348:	440b      	add	r3, r1
 800f34a:	4602      	mov	r2, r0
 800f34c:	f8a3 2003 	strh.w	r2, [r3, #3]
#endif
  
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL 
  if(((Models_ParamNvm_t *)model_State)->Generic_Level == 0x00)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	88db      	ldrh	r3, [r3, #6]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d10a      	bne.n	800f36e <Generic_RestoreModelStates+0x5a>
  {
    Generic_LevelStatus[elementIndex].Present_Level16 = LEVEL_MIN_VALID_RANGE;
 800f358:	78fa      	ldrb	r2, [r7, #3]
 800f35a:	4916      	ldr	r1, [pc, #88]	@ (800f3b4 <Generic_RestoreModelStates+0xa0>)
 800f35c:	4613      	mov	r3, r2
 800f35e:	005b      	lsls	r3, r3, #1
 800f360:	4413      	add	r3, r2
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	440b      	add	r3, r1
 800f366:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800f36a:	801a      	strh	r2, [r3, #0]
 800f36c:	e00b      	b.n	800f386 <Generic_RestoreModelStates+0x72>
  }
  else
  {
    Generic_LevelStatus[elementIndex].Present_Level16 = ((Models_ParamNvm_t *)model_State)->Generic_Level;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	88db      	ldrh	r3, [r3, #6]
 800f372:	78fa      	ldrb	r2, [r7, #3]
 800f374:	b218      	sxth	r0, r3
 800f376:	490f      	ldr	r1, [pc, #60]	@ (800f3b4 <Generic_RestoreModelStates+0xa0>)
 800f378:	4613      	mov	r3, r2
 800f37a:	005b      	lsls	r3, r3, #1
 800f37c:	4413      	add	r3, r2
 800f37e:	009b      	lsls	r3, r3, #2
 800f380:	440b      	add	r3, r1
 800f382:	4602      	mov	r2, r0
 800f384:	801a      	strh	r2, [r3, #0]
  }
#endif 

#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF  
  Generic_PowerOnOffParam_t Generic_PowerOnOffParam[APPLICATION_NUMBER_OF_ELEMENTS];
  Generic_PowerOnOffParam[elementIndex].PowerOnOffState = ((Models_ParamNvm_t *)model_State)->PowerOnOff;
 800f386:	78fb      	ldrb	r3, [r7, #3]
 800f388:	687a      	ldr	r2, [r7, #4]
 800f38a:	78d2      	ldrb	r2, [r2, #3]
 800f38c:	3310      	adds	r3, #16
 800f38e:	443b      	add	r3, r7
 800f390:	f803 2c04 	strb.w	r2, [r3, #-4]
  (GenericAppli_cb.GenericPowerOnOff_cb)(&Generic_PowerOnOffParam[elementIndex], 1, 0,elementIndex);
 800f394:	4b08      	ldr	r3, [pc, #32]	@ (800f3b8 <Generic_RestoreModelStates+0xa4>)
 800f396:	699c      	ldr	r4, [r3, #24]
 800f398:	78fb      	ldrb	r3, [r7, #3]
 800f39a:	f107 020c 	add.w	r2, r7, #12
 800f39e:	18d0      	adds	r0, r2, r3
 800f3a0:	78fb      	ldrb	r3, [r7, #3]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	2101      	movs	r1, #1
 800f3a6:	47a0      	blx	r4
                                                     
#endif  
}
 800f3a8:	bf00      	nop
 800f3aa:	3714      	adds	r7, #20
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd90      	pop	{r4, r7, pc}
 800f3b0:	20004584 	.word	0x20004584
 800f3b4:	20004578 	.word	0x20004578
 800f3b8:	080308dc 	.word	0x080308dc

0800f3bc <Appli_Generic_DefaultTransitionTime_Set>:

WEAK_FUNCTION (MOBLE_RESULT Appli_Generic_DefaultTransitionTime_Set(Generic_DefaultTransitionParam_t* pDefaultTimeParam, 
                                                                    MOBLEUINT8 OptionalValid, 
                                                                    uint16_t dstPeer, 
                                                                    uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS;}
 800f3bc:	b480      	push	{r7}
 800f3be:	b083      	sub	sp, #12
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	4608      	mov	r0, r1
 800f3c6:	4611      	mov	r1, r2
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	70fb      	strb	r3, [r7, #3]
 800f3ce:	460b      	mov	r3, r1
 800f3d0:	803b      	strh	r3, [r7, #0]
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	70bb      	strb	r3, [r7, #2]
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	4618      	mov	r0, r3
 800f3da:	370c      	adds	r7, #12
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e2:	4770      	bx	lr

0800f3e4 <Appli_Generic_Level_Status>:

WEAK_FUNCTION (MOBLE_RESULT Appli_Generic_Level_Status(MOBLEUINT8 const *plevel_status, 
                                                       MOBLEUINT32 plength, 
                                                       uint16_t dstPeer, 
                                                       uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS;}
 800f3e4:	b480      	push	{r7}
 800f3e6:	b085      	sub	sp, #20
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	4611      	mov	r1, r2
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	80fb      	strh	r3, [r7, #6]
 800f3f6:	4613      	mov	r3, r2
 800f3f8:	717b      	strb	r3, [r7, #5]
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3714      	adds	r7, #20
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <Light_Lightness_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_Lightness_Set(const MOBLEUINT8* plightness_param, 
                                 MOBLEUINT32 length,
                                 MODEL_MessageHeader_t *pmsgParam)
{
 800f408:	b590      	push	{r4, r7, lr}
 800f40a:	b087      	sub	sp, #28
 800f40c:	af02      	add	r7, sp, #8
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	607a      	str	r2, [r7, #4]
  Transition Time       1B Format as defined in Section 3.1.3. (Optional)
  Delay                 1B Message execution delay in 5 millisecond steps (C.1)
  */
  TRACE_M(TF_LIGHT_M, "Callback Received \r\n");
  
  Light_LightnessParam.TargetLightnessStatus = (plightness_param[0] | plightness_param[1] << 8);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	b21a      	sxth	r2, r3
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	3301      	adds	r3, #1
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	021b      	lsls	r3, r3, #8
 800f422:	b21b      	sxth	r3, r3
 800f424:	4313      	orrs	r3, r2
 800f426:	b21b      	sxth	r3, r3
 800f428:	b29a      	uxth	r2, r3
 800f42a:	4b7b      	ldr	r3, [pc, #492]	@ (800f618 <Light_Lightness_Set+0x210>)
 800f42c:	801a      	strh	r2, [r3, #0]
  Light_LightnessParam.TID = plightness_param[2];
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	3302      	adds	r3, #2
 800f432:	781a      	ldrb	r2, [r3, #0]
 800f434:	4b78      	ldr	r3, [pc, #480]	@ (800f618 <Light_Lightness_Set+0x210>)
 800f436:	711a      	strb	r2, [r3, #4]
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP  
  /* Binding of actual lightness value with lightness range */
  Light_Actual_RangeBinding(&Light_LightnessParam, pmsgParam->elementIndex);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	4619      	mov	r1, r3
 800f43e:	4876      	ldr	r0, [pc, #472]	@ (800f618 <Light_Lightness_Set+0x210>)
 800f440:	f002 f990 	bl	8011764 <Light_Actual_RangeBinding>
#endif  
  /* Check for Optional Parameters */ 
  if ((length > 3) && (plightness_param[3] !=0))
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	2b03      	cmp	r3, #3
 800f448:	d976      	bls.n	800f538 <Light_Lightness_Set+0x130>
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	3303      	adds	r3, #3
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d071      	beq.n	800f538 <Light_Lightness_Set+0x130>
  {
    /* Transition_Time & Delay_Time Present */
    Light_LightnessParam.TransitionTime = plightness_param[3];
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	3303      	adds	r3, #3
 800f458:	781a      	ldrb	r2, [r3, #0]
 800f45a:	4b6f      	ldr	r3, [pc, #444]	@ (800f618 <Light_Lightness_Set+0x210>)
 800f45c:	715a      	strb	r2, [r3, #5]
    Light_LightnessParam.Delay_Time = plightness_param[4]; 
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	3304      	adds	r3, #4
 800f462:	781a      	ldrb	r2, [r3, #0]
 800f464:	4b6c      	ldr	r3, [pc, #432]	@ (800f618 <Light_Lightness_Set+0x210>)
 800f466:	719a      	strb	r2, [r3, #6]
    
    /* Copy the received data in status message which needs
    to be set in application messages */  
    Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16 = Light_LightnessParam.TargetLightnessStatus;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	4619      	mov	r1, r3
 800f46e:	4b6a      	ldr	r3, [pc, #424]	@ (800f618 <Light_Lightness_Set+0x210>)
 800f470:	8818      	ldrh	r0, [r3, #0]
 800f472:	4a6a      	ldr	r2, [pc, #424]	@ (800f61c <Light_Lightness_Set+0x214>)
 800f474:	460b      	mov	r3, r1
 800f476:	00db      	lsls	r3, r3, #3
 800f478:	440b      	add	r3, r1
 800f47a:	4413      	add	r3, r2
 800f47c:	3304      	adds	r3, #4
 800f47e:	4602      	mov	r2, r0
 800f480:	801a      	strh	r2, [r3, #0]
    Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime = Light_LightnessParam.TransitionTime;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	4619      	mov	r1, r3
 800f488:	4b63      	ldr	r3, [pc, #396]	@ (800f618 <Light_Lightness_Set+0x210>)
 800f48a:	7958      	ldrb	r0, [r3, #5]
 800f48c:	4a63      	ldr	r2, [pc, #396]	@ (800f61c <Light_Lightness_Set+0x214>)
 800f48e:	460b      	mov	r3, r1
 800f490:	00db      	lsls	r3, r3, #3
 800f492:	440b      	add	r3, r1
 800f494:	4413      	add	r3, r2
 800f496:	3306      	adds	r3, #6
 800f498:	4602      	mov	r2, r0
 800f49a:	701a      	strb	r2, [r3, #0]
    
    /* copy status parameters in Temporary parameters for transition 
    process.
    */
    Light_TemporaryStatus[pmsgParam->elementIndex].TargetParam_1 = 
                   Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;    
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	4618      	mov	r0, r3
    Light_TemporaryStatus[pmsgParam->elementIndex].TargetParam_1 = 
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	781b      	ldrb	r3, [r3, #0]
 800f4a6:	461a      	mov	r2, r3
                   Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;    
 800f4a8:	495c      	ldr	r1, [pc, #368]	@ (800f61c <Light_Lightness_Set+0x214>)
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	00db      	lsls	r3, r3, #3
 800f4ae:	4403      	add	r3, r0
 800f4b0:	440b      	add	r3, r1
 800f4b2:	3304      	adds	r3, #4
 800f4b4:	881b      	ldrh	r3, [r3, #0]
 800f4b6:	b298      	uxth	r0, r3
    Light_TemporaryStatus[pmsgParam->elementIndex].TargetParam_1 = 
 800f4b8:	4959      	ldr	r1, [pc, #356]	@ (800f620 <Light_Lightness_Set+0x218>)
 800f4ba:	4613      	mov	r3, r2
 800f4bc:	005b      	lsls	r3, r3, #1
 800f4be:	4413      	add	r3, r2
 800f4c0:	009b      	lsls	r3, r3, #2
 800f4c2:	4413      	add	r3, r2
 800f4c4:	440b      	add	r3, r1
 800f4c6:	3306      	adds	r3, #6
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	801a      	strh	r2, [r3, #0]
    Light_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = 
                   Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	4618      	mov	r0, r3
    Light_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = 
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	461a      	mov	r2, r3
                   Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800f4d8:	4950      	ldr	r1, [pc, #320]	@ (800f61c <Light_Lightness_Set+0x214>)
 800f4da:	4603      	mov	r3, r0
 800f4dc:	00db      	lsls	r3, r3, #3
 800f4de:	4403      	add	r3, r0
 800f4e0:	440b      	add	r3, r1
 800f4e2:	3306      	adds	r3, #6
 800f4e4:	7818      	ldrb	r0, [r3, #0]
    Light_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = 
 800f4e6:	494e      	ldr	r1, [pc, #312]	@ (800f620 <Light_Lightness_Set+0x218>)
 800f4e8:	4613      	mov	r3, r2
 800f4ea:	005b      	lsls	r3, r3, #1
 800f4ec:	4413      	add	r3, r2
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	4413      	add	r3, r2
 800f4f2:	440b      	add	r3, r1
 800f4f4:	330c      	adds	r3, #12
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	701a      	strb	r2, [r3, #0]
    
    /* Function to calculate time parameters, step resolution
    step size for transition state machine.
    */
    Light_GetStepValue(plightness_param[3],pmsgParam->elementIndex);
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	3303      	adds	r3, #3
 800f4fe:	781a      	ldrb	r2, [r3, #0]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	4619      	mov	r1, r3
 800f506:	4610      	mov	r0, r2
 800f508:	f001 f872 	bl	80105f0 <Light_GetStepValue>
    /*option parameter flag, enable to sent all required parameter in status.*/
    Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag = LIGHT_LIGHTNESS_TRANSITION_START;  
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	4619      	mov	r1, r3
 800f512:	4a44      	ldr	r2, [pc, #272]	@ (800f624 <Light_Lightness_Set+0x21c>)
 800f514:	460b      	mov	r3, r1
 800f516:	005b      	lsls	r3, r3, #1
 800f518:	440b      	add	r3, r1
 800f51a:	4413      	add	r3, r2
 800f51c:	2201      	movs	r2, #1
 800f51e:	701a      	strb	r2, [r3, #0]
    Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam = 1;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	4619      	mov	r1, r3
 800f526:	4a3f      	ldr	r2, [pc, #252]	@ (800f624 <Light_Lightness_Set+0x21c>)
 800f528:	460b      	mov	r3, r1
 800f52a:	005b      	lsls	r3, r3, #1
 800f52c:	440b      	add	r3, r1
 800f52e:	4413      	add	r3, r2
 800f530:	3301      	adds	r3, #1
 800f532:	2201      	movs	r2, #1
 800f534:	701a      	strb	r2, [r3, #0]
 800f536:	e03f      	b.n	800f5b8 <Light_Lightness_Set+0x1b0>
                                          pmsgParam->elementIndex);
#else
    /* When no optional parameter received, target value will
    be set as present value in application.
    */
    Light_TransitionParameterReset(pmsgParam->elementIndex);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	4618      	mov	r0, r3
 800f53e:	f002 f95d 	bl	80117fc <Light_TransitionParameterReset>
		
    Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16 = 
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	4619      	mov	r1, r3
                                     Light_LightnessParam.TargetLightnessStatus; 
 800f548:	4b33      	ldr	r3, [pc, #204]	@ (800f618 <Light_Lightness_Set+0x210>)
 800f54a:	8818      	ldrh	r0, [r3, #0]
    Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16 = 
 800f54c:	4a33      	ldr	r2, [pc, #204]	@ (800f61c <Light_Lightness_Set+0x214>)
 800f54e:	460b      	mov	r3, r1
 800f550:	00db      	lsls	r3, r3, #3
 800f552:	440b      	add	r3, r1
 800f554:	4413      	add	r3, r2
 800f556:	4602      	mov	r2, r0
 800f558:	801a      	strh	r2, [r3, #0]
#endif   
     
    if(Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16 > 0x00)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	4619      	mov	r1, r3
 800f560:	4a2e      	ldr	r2, [pc, #184]	@ (800f61c <Light_Lightness_Set+0x214>)
 800f562:	460b      	mov	r3, r1
 800f564:	00db      	lsls	r3, r3, #3
 800f566:	440b      	add	r3, r1
 800f568:	4413      	add	r3, r2
 800f56a:	881b      	ldrh	r3, [r3, #0]
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d022      	beq.n	800f5b8 <Light_Lightness_Set+0x1b0>
    {
      Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus = 
        Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	4618      	mov	r0, r3
      Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus = 
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	4619      	mov	r1, r3
        Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16;
 800f57e:	4a27      	ldr	r2, [pc, #156]	@ (800f61c <Light_Lightness_Set+0x214>)
 800f580:	4603      	mov	r3, r0
 800f582:	00db      	lsls	r3, r3, #3
 800f584:	4403      	add	r3, r0
 800f586:	4413      	add	r3, r2
 800f588:	881b      	ldrh	r3, [r3, #0]
 800f58a:	b298      	uxth	r0, r3
      Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus = 
 800f58c:	4a23      	ldr	r2, [pc, #140]	@ (800f61c <Light_Lightness_Set+0x214>)
 800f58e:	460b      	mov	r3, r1
 800f590:	00db      	lsls	r3, r3, #3
 800f592:	440b      	add	r3, r1
 800f594:	4413      	add	r3, r2
 800f596:	4602      	mov	r2, r0
 800f598:	f8a3 2007 	strh.w	r2, [r3, #7]
      
      (LightAppli_cb.Lightness_Last_Set_cb)(&Light_LightnessStatus[pmsgParam->elementIndex],                                     
 800f59c:	4b22      	ldr	r3, [pc, #136]	@ (800f628 <Light_Lightness_Set+0x220>)
 800f59e:	699a      	ldr	r2, [r3, #24]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	460b      	mov	r3, r1
 800f5a8:	00db      	lsls	r3, r3, #3
 800f5aa:	440b      	add	r3, r1
 800f5ac:	491b      	ldr	r1, [pc, #108]	@ (800f61c <Light_Lightness_Set+0x214>)
 800f5ae:	1858      	adds	r0, r3, r1
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	4790      	blx	r2
                                            pmsgParam->elementIndex);
    }
  }
   
  /* Application Callback */
  (LightAppli_cb.Lightness_Set_cb)(&Light_LightnessStatus[pmsgParam->elementIndex], 
 800f5b8:	4b1b      	ldr	r3, [pc, #108]	@ (800f628 <Light_Lightness_Set+0x220>)
 800f5ba:	681c      	ldr	r4, [r3, #0]
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	00db      	lsls	r3, r3, #3
 800f5c6:	4413      	add	r3, r2
 800f5c8:	4a14      	ldr	r2, [pc, #80]	@ (800f61c <Light_Lightness_Set+0x214>)
 800f5ca:	1898      	adds	r0, r3, r2
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	88da      	ldrh	r2, [r3, #6]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	2100      	movs	r1, #0
 800f5d6:	47a0      	blx	r4
                                   0,pmsgParam->dst_peer, 
                                   pmsgParam->elementIndex);
  
#ifdef ENABLE_MODEL_BINDING    
  /* Binding of actual light lightness with other models */
  Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_ACTUAL_SET , length,pmsgParam->elementIndex,
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	781a      	ldrb	r2, [r3, #0]
              Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag,Light_ModelFlag[pmsgParam->elementIndex].Light_Trnsn_Cmplt);  
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	4618      	mov	r0, r3
  Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_ACTUAL_SET , length,pmsgParam->elementIndex,
 800f5e2:	4910      	ldr	r1, [pc, #64]	@ (800f624 <Light_Lightness_Set+0x21c>)
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	005b      	lsls	r3, r3, #1
 800f5e8:	4403      	add	r3, r0
 800f5ea:	440b      	add	r3, r1
 800f5ec:	7819      	ldrb	r1, [r3, #0]
              Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag,Light_ModelFlag[pmsgParam->elementIndex].Light_Trnsn_Cmplt);  
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	461c      	mov	r4, r3
  Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_ACTUAL_SET , length,pmsgParam->elementIndex,
 800f5f4:	480b      	ldr	r0, [pc, #44]	@ (800f624 <Light_Lightness_Set+0x21c>)
 800f5f6:	4623      	mov	r3, r4
 800f5f8:	005b      	lsls	r3, r3, #1
 800f5fa:	4423      	add	r3, r4
 800f5fc:	4403      	add	r3, r0
 800f5fe:	3302      	adds	r3, #2
 800f600:	781b      	ldrb	r3, [r3, #0]
 800f602:	9300      	str	r3, [sp, #0]
 800f604:	460b      	mov	r3, r1
 800f606:	68b9      	ldr	r1, [r7, #8]
 800f608:	2002      	movs	r0, #2
 800f60a:	f001 fba1 	bl	8010d50 <Light_Lightness_Binding>
#endif  
  
  return MOBLE_RESULT_SUCCESS;
 800f60e:	2300      	movs	r3, #0
}
 800f610:	4618      	mov	r0, r3
 800f612:	3714      	adds	r7, #20
 800f614:	46bd      	mov	sp, r7
 800f616:	bd90      	pop	{r4, r7, pc}
 800f618:	200045bc 	.word	0x200045bc
 800f61c:	200045c4 	.word	0x200045c4
 800f620:	200045ac 	.word	0x200045ac
 800f624:	200045a4 	.word	0x200045a4
 800f628:	0803095c 	.word	0x0803095c

0800f62c <Light_Lightness_Status>:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & ApkmpKey Offset
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_Lightness_Status(MOBLEUINT8* pLightness_status, MOBLEUINT32* pLength,\
                               MODEL_MessageHeader_t *pmsgParam)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b084      	sub	sp, #16
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	607a      	str	r2, [r7, #4]
  Remaining Time        1B Time to complete the transition to the target Light Lightness
  
  */ 
  
  TRACE_M(TF_LIGHT_M, "Light_Lightness_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#824B! \n\r");
 800f638:	2100      	movs	r1, #0
 800f63a:	4840      	ldr	r0, [pc, #256]	@ (800f73c <Light_Lightness_Status+0x110>)
 800f63c:	f7fd ff6e 	bl	800d51c <TraceHeader>
 800f640:	483f      	ldr	r0, [pc, #252]	@ (800f740 <Light_Lightness_Status+0x114>)
 800f642:	f019 fc15 	bl	8028e70 <iprintf>
  
  *(pLightness_status) = Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	4619      	mov	r1, r3
 800f64c:	4a3d      	ldr	r2, [pc, #244]	@ (800f744 <Light_Lightness_Status+0x118>)
 800f64e:	460b      	mov	r3, r1
 800f650:	00db      	lsls	r3, r3, #3
 800f652:	440b      	add	r3, r1
 800f654:	4413      	add	r3, r2
 800f656:	881b      	ldrh	r3, [r3, #0]
 800f658:	b29b      	uxth	r3, r3
 800f65a:	b2da      	uxtb	r2, r3
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	701a      	strb	r2, [r3, #0]
  *(pLightness_status+1) = Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16 >> 8;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	4619      	mov	r1, r3
 800f666:	4a37      	ldr	r2, [pc, #220]	@ (800f744 <Light_Lightness_Status+0x118>)
 800f668:	460b      	mov	r3, r1
 800f66a:	00db      	lsls	r3, r3, #3
 800f66c:	440b      	add	r3, r1
 800f66e:	4413      	add	r3, r2
 800f670:	881b      	ldrh	r3, [r3, #0]
 800f672:	b29b      	uxth	r3, r3
 800f674:	0a1b      	lsrs	r3, r3, #8
 800f676:	b29a      	uxth	r2, r3
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	3301      	adds	r3, #1
 800f67c:	b2d2      	uxtb	r2, r2
 800f67e:	701a      	strb	r2, [r3, #0]
  
  /* This condition will be processed when message received will have
  transition time and delay parameter.
  or the transition will be in process
  */
  if((Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam == 1) || (Light_TimeParam[pmsgParam->elementIndex].StepValue != 0))
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	4619      	mov	r1, r3
 800f686:	4a30      	ldr	r2, [pc, #192]	@ (800f748 <Light_Lightness_Status+0x11c>)
 800f688:	460b      	mov	r3, r1
 800f68a:	005b      	lsls	r3, r3, #1
 800f68c:	440b      	add	r3, r1
 800f68e:	4413      	add	r3, r2
 800f690:	3301      	adds	r3, #1
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	2b01      	cmp	r3, #1
 800f696:	d00c      	beq.n	800f6b2 <Light_Lightness_Status+0x86>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	4619      	mov	r1, r3
 800f69e:	4a2b      	ldr	r2, [pc, #172]	@ (800f74c <Light_Lightness_Status+0x120>)
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	009b      	lsls	r3, r3, #2
 800f6a4:	440b      	add	r3, r1
 800f6a6:	005b      	lsls	r3, r3, #1
 800f6a8:	4413      	add	r3, r2
 800f6aa:	f993 3000 	ldrsb.w	r3, [r3]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d03b      	beq.n	800f72a <Light_Lightness_Status+0xfe>
  {
    *(pLightness_status+2) = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	4a22      	ldr	r2, [pc, #136]	@ (800f744 <Light_Lightness_Status+0x118>)
 800f6ba:	460b      	mov	r3, r1
 800f6bc:	00db      	lsls	r3, r3, #3
 800f6be:	440b      	add	r3, r1
 800f6c0:	4413      	add	r3, r2
 800f6c2:	3304      	adds	r3, #4
 800f6c4:	881b      	ldrh	r3, [r3, #0]
 800f6c6:	b29a      	uxth	r2, r3
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	3302      	adds	r3, #2
 800f6cc:	b2d2      	uxtb	r2, r2
 800f6ce:	701a      	strb	r2, [r3, #0]
    *(pLightness_status+3) = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16 >>8;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	4a1b      	ldr	r2, [pc, #108]	@ (800f744 <Light_Lightness_Status+0x118>)
 800f6d8:	460b      	mov	r3, r1
 800f6da:	00db      	lsls	r3, r3, #3
 800f6dc:	440b      	add	r3, r1
 800f6de:	4413      	add	r3, r2
 800f6e0:	3304      	adds	r3, #4
 800f6e2:	881b      	ldrh	r3, [r3, #0]
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	0a1b      	lsrs	r3, r3, #8
 800f6e8:	b29a      	uxth	r2, r3
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	3303      	adds	r3, #3
 800f6ee:	b2d2      	uxtb	r2, r2
 800f6f0:	701a      	strb	r2, [r3, #0]
    *(pLightness_status+4) = Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	1d1a      	adds	r2, r3, #4
 800f6fc:	4911      	ldr	r1, [pc, #68]	@ (800f744 <Light_Lightness_Status+0x118>)
 800f6fe:	4603      	mov	r3, r0
 800f700:	00db      	lsls	r3, r3, #3
 800f702:	4403      	add	r3, r0
 800f704:	440b      	add	r3, r1
 800f706:	3306      	adds	r3, #6
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	7013      	strb	r3, [r2, #0]
    *pLength = 5;     
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	2205      	movs	r2, #5
 800f710:	601a      	str	r2, [r3, #0]
    Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam = 0;    
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	4619      	mov	r1, r3
 800f718:	4a0b      	ldr	r2, [pc, #44]	@ (800f748 <Light_Lightness_Status+0x11c>)
 800f71a:	460b      	mov	r3, r1
 800f71c:	005b      	lsls	r3, r3, #1
 800f71e:	440b      	add	r3, r1
 800f720:	4413      	add	r3, r2
 800f722:	3301      	adds	r3, #1
 800f724:	2200      	movs	r2, #0
 800f726:	701a      	strb	r2, [r3, #0]
 800f728:	e002      	b.n	800f730 <Light_Lightness_Status+0x104>
  else
  {    
    /* When no optional parameter received then, target value will
    be sent in status message.
    */    
    *pLength = 2;          
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	2202      	movs	r2, #2
 800f72e:	601a      	str	r2, [r3, #0]
     TRACE_M(TF_LIGHT_M, "Light_Lightness_Status sent without transition \r\n");
  }
  
  return MOBLE_RESULT_SUCCESS;
 800f730:	2300      	movs	r3, #0
}
 800f732:	4618      	mov	r0, r3
 800f734:	3710      	adds	r7, #16
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	bf00      	nop
 800f73c:	08030cbc 	.word	0x08030cbc
 800f740:	0802e720 	.word	0x0802e720
 800f744:	200045c4 	.word	0x200045c4
 800f748:	200045a4 	.word	0x200045a4
 800f74c:	20004598 	.word	0x20004598

0800f750 <Light_LightnessLinear_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessLinear_Set(const MOBLEUINT8* plightnessLinear_param,\
                                        MOBLEUINT32 length,\
                               MODEL_MessageHeader_t *pmsgParam)
{
 800f750:	b590      	push	{r4, r7, lr}
 800f752:	b089      	sub	sp, #36	@ 0x24
 800f754:	af02      	add	r7, sp, #8
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	607a      	str	r2, [r7, #4]
  Lightness             2B The target value of the Light Lightness Actual state. 
  TID                   1B Transaction Identifier
  Transition Time       1B Format as defined in Section 3.1.3. (Optional)
  Delay                 1B Message execution delay in 5 millisecond steps (C.1)
  */
  MOBLEUINT8 OptionalValid = 0;
 800f75c:	2300      	movs	r3, #0
 800f75e:	75fb      	strb	r3, [r7, #23]
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessLinear_Set callback received \r\n");
  
  Light_LightnessParam.TargetLightnessLinearStatus = ((plightnessLinear_param[0])
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	b21a      	sxth	r2, r3
                                                      | (plightnessLinear_param[1] << 8));
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	3301      	adds	r3, #1
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	021b      	lsls	r3, r3, #8
 800f76e:	b21b      	sxth	r3, r3
 800f770:	4313      	orrs	r3, r2
 800f772:	b21b      	sxth	r3, r3
 800f774:	b29a      	uxth	r2, r3
  Light_LightnessParam.TargetLightnessLinearStatus = ((plightnessLinear_param[0])
 800f776:	4b61      	ldr	r3, [pc, #388]	@ (800f8fc <Light_LightnessLinear_Set+0x1ac>)
 800f778:	805a      	strh	r2, [r3, #2]
  Light_LightnessParam.TID = plightnessLinear_param[2];
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	3302      	adds	r3, #2
 800f77e:	781a      	ldrb	r2, [r3, #0]
 800f780:	4b5e      	ldr	r3, [pc, #376]	@ (800f8fc <Light_LightnessLinear_Set+0x1ac>)
 800f782:	711a      	strb	r2, [r3, #4]
  
  /* Check for Optional Parameters */ 
  if ((length > 3) && (plightnessLinear_param[3] !=0))
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	2b03      	cmp	r3, #3
 800f788:	d976      	bls.n	800f878 <Light_LightnessLinear_Set+0x128>
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	3303      	adds	r3, #3
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d071      	beq.n	800f878 <Light_LightnessLinear_Set+0x128>
  {
    /* Transition_Time & Delay_Time Present */
    Light_LightnessParam.TransitionTime = plightnessLinear_param[3];
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	3303      	adds	r3, #3
 800f798:	781a      	ldrb	r2, [r3, #0]
 800f79a:	4b58      	ldr	r3, [pc, #352]	@ (800f8fc <Light_LightnessLinear_Set+0x1ac>)
 800f79c:	715a      	strb	r2, [r3, #5]
    Light_LightnessParam.Delay_Time = plightnessLinear_param[4]; 
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	3304      	adds	r3, #4
 800f7a2:	781a      	ldrb	r2, [r3, #0]
 800f7a4:	4b55      	ldr	r3, [pc, #340]	@ (800f8fc <Light_LightnessLinear_Set+0x1ac>)
 800f7a6:	719a      	strb	r2, [r3, #6]
    
    /* Copy the received data in status message which needs
    to be set in application messages */
    Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16 = Light_LightnessParam.TargetLightnessLinearStatus;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	4619      	mov	r1, r3
 800f7ae:	4b53      	ldr	r3, [pc, #332]	@ (800f8fc <Light_LightnessLinear_Set+0x1ac>)
 800f7b0:	8858      	ldrh	r0, [r3, #2]
 800f7b2:	4a53      	ldr	r2, [pc, #332]	@ (800f900 <Light_LightnessLinear_Set+0x1b0>)
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	00db      	lsls	r3, r3, #3
 800f7b8:	440b      	add	r3, r1
 800f7ba:	4413      	add	r3, r2
 800f7bc:	3304      	adds	r3, #4
 800f7be:	4602      	mov	r2, r0
 800f7c0:	801a      	strh	r2, [r3, #0]
    Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime = Light_LightnessParam.TransitionTime;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	4b4c      	ldr	r3, [pc, #304]	@ (800f8fc <Light_LightnessLinear_Set+0x1ac>)
 800f7ca:	7958      	ldrb	r0, [r3, #5]
 800f7cc:	4a4c      	ldr	r2, [pc, #304]	@ (800f900 <Light_LightnessLinear_Set+0x1b0>)
 800f7ce:	460b      	mov	r3, r1
 800f7d0:	00db      	lsls	r3, r3, #3
 800f7d2:	440b      	add	r3, r1
 800f7d4:	4413      	add	r3, r2
 800f7d6:	3306      	adds	r3, #6
 800f7d8:	4602      	mov	r2, r0
 800f7da:	701a      	strb	r2, [r3, #0]
    /* copy status parameters in Temporary parameters for transition 
    process.
    */
    Light_TemporaryStatus[pmsgParam->elementIndex].TargetParam_1 = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;    
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	781b      	ldrb	r3, [r3, #0]
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	461a      	mov	r2, r3
 800f7e8:	4945      	ldr	r1, [pc, #276]	@ (800f900 <Light_LightnessLinear_Set+0x1b0>)
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	00db      	lsls	r3, r3, #3
 800f7ee:	4403      	add	r3, r0
 800f7f0:	440b      	add	r3, r1
 800f7f2:	3304      	adds	r3, #4
 800f7f4:	881b      	ldrh	r3, [r3, #0]
 800f7f6:	b298      	uxth	r0, r3
 800f7f8:	4942      	ldr	r1, [pc, #264]	@ (800f904 <Light_LightnessLinear_Set+0x1b4>)
 800f7fa:	4613      	mov	r3, r2
 800f7fc:	005b      	lsls	r3, r3, #1
 800f7fe:	4413      	add	r3, r2
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	4413      	add	r3, r2
 800f804:	440b      	add	r3, r1
 800f806:	3306      	adds	r3, #6
 800f808:	4602      	mov	r2, r0
 800f80a:	801a      	strh	r2, [r3, #0]
    Light_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	4618      	mov	r0, r3
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	461a      	mov	r2, r3
 800f818:	4939      	ldr	r1, [pc, #228]	@ (800f900 <Light_LightnessLinear_Set+0x1b0>)
 800f81a:	4603      	mov	r3, r0
 800f81c:	00db      	lsls	r3, r3, #3
 800f81e:	4403      	add	r3, r0
 800f820:	440b      	add	r3, r1
 800f822:	3306      	adds	r3, #6
 800f824:	7818      	ldrb	r0, [r3, #0]
 800f826:	4937      	ldr	r1, [pc, #220]	@ (800f904 <Light_LightnessLinear_Set+0x1b4>)
 800f828:	4613      	mov	r3, r2
 800f82a:	005b      	lsls	r3, r3, #1
 800f82c:	4413      	add	r3, r2
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	4413      	add	r3, r2
 800f832:	440b      	add	r3, r1
 800f834:	330c      	adds	r3, #12
 800f836:	4602      	mov	r2, r0
 800f838:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
    step size for transition state machine.
    */
    
    Light_GetStepValue(plightnessLinear_param[3],pmsgParam->elementIndex);
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	3303      	adds	r3, #3
 800f83e:	781a      	ldrb	r2, [r3, #0]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	4619      	mov	r1, r3
 800f846:	4610      	mov	r0, r2
 800f848:	f000 fed2 	bl	80105f0 <Light_GetStepValue>
    /*transition process enable flag. */
    Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag = LIGHT_LINEAR_TRANSITION_START; 
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	4619      	mov	r1, r3
 800f852:	4a2d      	ldr	r2, [pc, #180]	@ (800f908 <Light_LightnessLinear_Set+0x1b8>)
 800f854:	460b      	mov	r3, r1
 800f856:	005b      	lsls	r3, r3, #1
 800f858:	440b      	add	r3, r1
 800f85a:	4413      	add	r3, r2
 800f85c:	2202      	movs	r2, #2
 800f85e:	701a      	strb	r2, [r3, #0]
    /*option parameter flag, enable to sent all required parameter in status.*/
    Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam = 1;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	4619      	mov	r1, r3
 800f866:	4a28      	ldr	r2, [pc, #160]	@ (800f908 <Light_LightnessLinear_Set+0x1b8>)
 800f868:	460b      	mov	r3, r1
 800f86a:	005b      	lsls	r3, r3, #1
 800f86c:	440b      	add	r3, r1
 800f86e:	4413      	add	r3, r2
 800f870:	3301      	adds	r3, #1
 800f872:	2201      	movs	r2, #1
 800f874:	701a      	strb	r2, [r3, #0]
 800f876:	e011      	b.n	800f89c <Light_LightnessLinear_Set+0x14c>
                                          pmsgParam->elementIndex);
#else
    /* When no optional parameter received, target value will
    be set as present value in application.
    */
    Light_TransitionParameterReset(pmsgParam->elementIndex);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f001 ffbd 	bl	80117fc <Light_TransitionParameterReset>
		
    Light_LightnessStatus[pmsgParam->elementIndex].LinearPresentValue16 = 
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	4619      	mov	r1, r3
      Light_LightnessParam.TargetLightnessLinearStatus; 
 800f888:	4b1c      	ldr	r3, [pc, #112]	@ (800f8fc <Light_LightnessLinear_Set+0x1ac>)
 800f88a:	8858      	ldrh	r0, [r3, #2]
    Light_LightnessStatus[pmsgParam->elementIndex].LinearPresentValue16 = 
 800f88c:	4a1c      	ldr	r2, [pc, #112]	@ (800f900 <Light_LightnessLinear_Set+0x1b0>)
 800f88e:	460b      	mov	r3, r1
 800f890:	00db      	lsls	r3, r3, #3
 800f892:	440b      	add	r3, r1
 800f894:	4413      	add	r3, r2
 800f896:	3302      	adds	r3, #2
 800f898:	4602      	mov	r2, r0
 800f89a:	801a      	strh	r2, [r3, #0]
#endif  
  }
  
  /* Application Callback */
  (LightAppli_cb.Lightness_Linear_Set_cb)(&Light_LightnessStatus[pmsgParam->elementIndex], OptionalValid, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800f89c:	4b1b      	ldr	r3, [pc, #108]	@ (800f90c <Light_LightnessLinear_Set+0x1bc>)
 800f89e:	689c      	ldr	r4, [r3, #8]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	4613      	mov	r3, r2
 800f8a8:	00db      	lsls	r3, r3, #3
 800f8aa:	4413      	add	r3, r2
 800f8ac:	4a14      	ldr	r2, [pc, #80]	@ (800f900 <Light_LightnessLinear_Set+0x1b0>)
 800f8ae:	1898      	adds	r0, r3, r2
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	88da      	ldrh	r2, [r3, #6]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	7df9      	ldrb	r1, [r7, #23]
 800f8ba:	47a0      	blx	r4
  
#ifdef ENABLE_MODEL_BINDING   
  /* Binding of data of light lightness with light linear */
  Light_Lightness_Linear_Binding(BINDING_LIGHT_LIGHTNESS_LINEAR_SET ,length, pmsgParam->elementIndex,
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	781a      	ldrb	r2, [r3, #0]
                  Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag,Light_ModelFlag[pmsgParam->elementIndex].Light_Trnsn_Cmplt);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	4618      	mov	r0, r3
  Light_Lightness_Linear_Binding(BINDING_LIGHT_LIGHTNESS_LINEAR_SET ,length, pmsgParam->elementIndex,
 800f8c6:	4910      	ldr	r1, [pc, #64]	@ (800f908 <Light_LightnessLinear_Set+0x1b8>)
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	005b      	lsls	r3, r3, #1
 800f8cc:	4403      	add	r3, r0
 800f8ce:	440b      	add	r3, r1
 800f8d0:	7819      	ldrb	r1, [r3, #0]
                  Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag,Light_ModelFlag[pmsgParam->elementIndex].Light_Trnsn_Cmplt);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	461c      	mov	r4, r3
  Light_Lightness_Linear_Binding(BINDING_LIGHT_LIGHTNESS_LINEAR_SET ,length, pmsgParam->elementIndex,
 800f8d8:	480b      	ldr	r0, [pc, #44]	@ (800f908 <Light_LightnessLinear_Set+0x1b8>)
 800f8da:	4623      	mov	r3, r4
 800f8dc:	005b      	lsls	r3, r3, #1
 800f8de:	4423      	add	r3, r4
 800f8e0:	4403      	add	r3, r0
 800f8e2:	3302      	adds	r3, #2
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	9300      	str	r3, [sp, #0]
 800f8e8:	460b      	mov	r3, r1
 800f8ea:	68b9      	ldr	r1, [r7, #8]
 800f8ec:	2003      	movs	r0, #3
 800f8ee:	f001 f995 	bl	8010c1c <Light_Lightness_Linear_Binding>
#endif   

#ifdef ENABLE_LIGHT_MODEL_SERVER_LC  
  Light_Linear_ActualBinding(length, pmsgParam->elementIndex);
#endif    
  return MOBLE_RESULT_SUCCESS;
 800f8f2:	2300      	movs	r3, #0
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	371c      	adds	r7, #28
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd90      	pop	{r4, r7, pc}
 800f8fc:	200045bc 	.word	0x200045bc
 800f900:	200045c4 	.word	0x200045c4
 800f904:	200045ac 	.word	0x200045ac
 800f908:	200045a4 	.word	0x200045a4
 800f90c:	0803095c 	.word	0x0803095c

0800f910 <Light_LightnessLinear_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessLinear_Status(MOBLEUINT8* pLightnessLinear_status,
                                           MOBLEUINT32 *pLength,\
                               MODEL_MessageHeader_t *pmsgParam)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	607a      	str	r2, [r7, #4]
  Target Lightness      2B The target value of the Light Lightness Linear state (Optional).
  Remaining Time        1B Time to complete the transition to the target Light Lightness Li
  */
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessLinear_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#824F! \n\r");
 800f91c:	2100      	movs	r1, #0
 800f91e:	4841      	ldr	r0, [pc, #260]	@ (800fa24 <Light_LightnessLinear_Status+0x114>)
 800f920:	f7fd fdfc 	bl	800d51c <TraceHeader>
 800f924:	4840      	ldr	r0, [pc, #256]	@ (800fa28 <Light_LightnessLinear_Status+0x118>)
 800f926:	f019 faa3 	bl	8028e70 <iprintf>
  
  *(pLightnessLinear_status) = Light_LightnessStatus[pmsgParam->elementIndex].LinearPresentValue16;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	4619      	mov	r1, r3
 800f930:	4a3e      	ldr	r2, [pc, #248]	@ (800fa2c <Light_LightnessLinear_Status+0x11c>)
 800f932:	460b      	mov	r3, r1
 800f934:	00db      	lsls	r3, r3, #3
 800f936:	440b      	add	r3, r1
 800f938:	4413      	add	r3, r2
 800f93a:	3302      	adds	r3, #2
 800f93c:	881b      	ldrh	r3, [r3, #0]
 800f93e:	b29b      	uxth	r3, r3
 800f940:	b2da      	uxtb	r2, r3
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	701a      	strb	r2, [r3, #0]
  *(pLightnessLinear_status+1) = Light_LightnessStatus[pmsgParam->elementIndex].LinearPresentValue16 >> 8;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	4619      	mov	r1, r3
 800f94c:	4a37      	ldr	r2, [pc, #220]	@ (800fa2c <Light_LightnessLinear_Status+0x11c>)
 800f94e:	460b      	mov	r3, r1
 800f950:	00db      	lsls	r3, r3, #3
 800f952:	440b      	add	r3, r1
 800f954:	4413      	add	r3, r2
 800f956:	3302      	adds	r3, #2
 800f958:	881b      	ldrh	r3, [r3, #0]
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	0a1b      	lsrs	r3, r3, #8
 800f95e:	b29a      	uxth	r2, r3
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	3301      	adds	r3, #1
 800f964:	b2d2      	uxtb	r2, r2
 800f966:	701a      	strb	r2, [r3, #0]
    
  /* This condition will be processed when message received will have
  transition time and delay parameter.
  or the transition will be in process
  */
  if((Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam == 1) || (Light_TimeParam[pmsgParam->elementIndex].StepValue != 0))
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	4619      	mov	r1, r3
 800f96e:	4a30      	ldr	r2, [pc, #192]	@ (800fa30 <Light_LightnessLinear_Status+0x120>)
 800f970:	460b      	mov	r3, r1
 800f972:	005b      	lsls	r3, r3, #1
 800f974:	440b      	add	r3, r1
 800f976:	4413      	add	r3, r2
 800f978:	3301      	adds	r3, #1
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d00c      	beq.n	800f99a <Light_LightnessLinear_Status+0x8a>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	4619      	mov	r1, r3
 800f986:	4a2b      	ldr	r2, [pc, #172]	@ (800fa34 <Light_LightnessLinear_Status+0x124>)
 800f988:	460b      	mov	r3, r1
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	440b      	add	r3, r1
 800f98e:	005b      	lsls	r3, r3, #1
 800f990:	4413      	add	r3, r2
 800f992:	f993 3000 	ldrsb.w	r3, [r3]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d03b      	beq.n	800fa12 <Light_LightnessLinear_Status+0x102>
  {
    *(pLightnessLinear_status+2) = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	4619      	mov	r1, r3
 800f9a0:	4a22      	ldr	r2, [pc, #136]	@ (800fa2c <Light_LightnessLinear_Status+0x11c>)
 800f9a2:	460b      	mov	r3, r1
 800f9a4:	00db      	lsls	r3, r3, #3
 800f9a6:	440b      	add	r3, r1
 800f9a8:	4413      	add	r3, r2
 800f9aa:	3304      	adds	r3, #4
 800f9ac:	881b      	ldrh	r3, [r3, #0]
 800f9ae:	b29a      	uxth	r2, r3
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	3302      	adds	r3, #2
 800f9b4:	b2d2      	uxtb	r2, r2
 800f9b6:	701a      	strb	r2, [r3, #0]
    *(pLightnessLinear_status+3) = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16 >>8;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	4619      	mov	r1, r3
 800f9be:	4a1b      	ldr	r2, [pc, #108]	@ (800fa2c <Light_LightnessLinear_Status+0x11c>)
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	00db      	lsls	r3, r3, #3
 800f9c4:	440b      	add	r3, r1
 800f9c6:	4413      	add	r3, r2
 800f9c8:	3304      	adds	r3, #4
 800f9ca:	881b      	ldrh	r3, [r3, #0]
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	0a1b      	lsrs	r3, r3, #8
 800f9d0:	b29a      	uxth	r2, r3
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	3303      	adds	r3, #3
 800f9d6:	b2d2      	uxtb	r2, r2
 800f9d8:	701a      	strb	r2, [r3, #0]
    *(pLightnessLinear_status+4) = Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	4618      	mov	r0, r3
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	1d1a      	adds	r2, r3, #4
 800f9e4:	4911      	ldr	r1, [pc, #68]	@ (800fa2c <Light_LightnessLinear_Status+0x11c>)
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	00db      	lsls	r3, r3, #3
 800f9ea:	4403      	add	r3, r0
 800f9ec:	440b      	add	r3, r1
 800f9ee:	3306      	adds	r3, #6
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	7013      	strb	r3, [r2, #0]
    *pLength = 5;
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	2205      	movs	r2, #5
 800f9f8:	601a      	str	r2, [r3, #0]
    
    Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam = 0U;          
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	4619      	mov	r1, r3
 800fa00:	4a0b      	ldr	r2, [pc, #44]	@ (800fa30 <Light_LightnessLinear_Status+0x120>)
 800fa02:	460b      	mov	r3, r1
 800fa04:	005b      	lsls	r3, r3, #1
 800fa06:	440b      	add	r3, r1
 800fa08:	4413      	add	r3, r2
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	701a      	strb	r2, [r3, #0]
 800fa10:	e002      	b.n	800fa18 <Light_LightnessLinear_Status+0x108>
  else
  { 
    /* When no optional parameter received then, target value will
    be sent in status message.
    */
    *pLength = 2;
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	2202      	movs	r2, #2
 800fa16:	601a      	str	r2, [r3, #0]
  }
  
  return MOBLE_RESULT_SUCCESS;
 800fa18:	2300      	movs	r3, #0
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3710      	adds	r7, #16
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	08030cd4 	.word	0x08030cd4
 800fa28:	0802e72c 	.word	0x0802e72c
 800fa2c:	200045c4 	.word	0x200045c4
 800fa30:	200045a4 	.word	0x200045a4
 800fa34:	20004598 	.word	0x20004598

0800fa38 <Light_LightnessLast_Set>:

*/ 
MOBLE_RESULT Light_LightnessLast_Set(const MOBLEUINT8* plightnessLast_param, 
                                      MOBLEUINT32 length,\
                                      MODEL_MessageHeader_t *pmsgParam)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b085      	sub	sp, #20
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	607a      	str	r2, [r7, #4]
  Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus = plightnessLast_param[1] << 8;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	3301      	adds	r3, #1
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	4619      	mov	r1, r3
 800fa52:	0213      	lsls	r3, r2, #8
 800fa54:	b298      	uxth	r0, r3
 800fa56:	4a15      	ldr	r2, [pc, #84]	@ (800faac <Light_LightnessLast_Set+0x74>)
 800fa58:	460b      	mov	r3, r1
 800fa5a:	00db      	lsls	r3, r3, #3
 800fa5c:	440b      	add	r3, r1
 800fa5e:	4413      	add	r3, r2
 800fa60:	4602      	mov	r2, r0
 800fa62:	f8a3 2007 	strh.w	r2, [r3, #7]
  Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus |= plightnessLast_param[0];
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	4a0f      	ldr	r2, [pc, #60]	@ (800faac <Light_LightnessLast_Set+0x74>)
 800fa6e:	460b      	mov	r3, r1
 800fa70:	00db      	lsls	r3, r3, #3
 800fa72:	440b      	add	r3, r1
 800fa74:	4413      	add	r3, r2
 800fa76:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fa7a:	b29b      	uxth	r3, r3
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	7812      	ldrb	r2, [r2, #0]
 800fa80:	4610      	mov	r0, r2
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	7812      	ldrb	r2, [r2, #0]
 800fa86:	4611      	mov	r1, r2
 800fa88:	4303      	orrs	r3, r0
 800fa8a:	b298      	uxth	r0, r3
 800fa8c:	4a07      	ldr	r2, [pc, #28]	@ (800faac <Light_LightnessLast_Set+0x74>)
 800fa8e:	460b      	mov	r3, r1
 800fa90:	00db      	lsls	r3, r3, #3
 800fa92:	440b      	add	r3, r1
 800fa94:	4413      	add	r3, r2
 800fa96:	4602      	mov	r2, r0
 800fa98:	f8a3 2007 	strh.w	r2, [r3, #7]
  
  return MOBLE_RESULT_SUCCESS;
 800fa9c:	2300      	movs	r3, #0
}  
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3714      	adds	r7, #20
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop
 800faac:	200045c4 	.word	0x200045c4

0800fab0 <Light_LightnessLast_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessLast_Status(MOBLEUINT8* pLightnessLast_status, 
                                         MOBLEUINT32 *pLength,\
                                         MODEL_MessageHeader_t *pmsgParam)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b084      	sub	sp, #16
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	60f8      	str	r0, [r7, #12]
 800fab8:	60b9      	str	r1, [r7, #8]
 800faba:	607a      	str	r2, [r7, #4]
  Following is the status message:
  Lightness     2B The value of the Light Lightness Last. 
  */
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessLast_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#8253! \n\r");
 800fabc:	2100      	movs	r1, #0
 800fabe:	4816      	ldr	r0, [pc, #88]	@ (800fb18 <Light_LightnessLast_Status+0x68>)
 800fac0:	f7fd fd2c 	bl	800d51c <TraceHeader>
 800fac4:	4815      	ldr	r0, [pc, #84]	@ (800fb1c <Light_LightnessLast_Status+0x6c>)
 800fac6:	f019 f9d3 	bl	8028e70 <iprintf>
  
  *pLightnessLast_status = Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus ;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	4619      	mov	r1, r3
 800fad0:	4a13      	ldr	r2, [pc, #76]	@ (800fb20 <Light_LightnessLast_Status+0x70>)
 800fad2:	460b      	mov	r3, r1
 800fad4:	00db      	lsls	r3, r3, #3
 800fad6:	440b      	add	r3, r1
 800fad8:	4413      	add	r3, r2
 800fada:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fade:	b29b      	uxth	r3, r3
 800fae0:	b2da      	uxtb	r2, r3
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	701a      	strb	r2, [r3, #0]
  *(pLightnessLast_status+1) = Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus >> 8;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	4619      	mov	r1, r3
 800faec:	4a0c      	ldr	r2, [pc, #48]	@ (800fb20 <Light_LightnessLast_Status+0x70>)
 800faee:	460b      	mov	r3, r1
 800faf0:	00db      	lsls	r3, r3, #3
 800faf2:	440b      	add	r3, r1
 800faf4:	4413      	add	r3, r2
 800faf6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	0a1b      	lsrs	r3, r3, #8
 800fafe:	b29a      	uxth	r2, r3
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	3301      	adds	r3, #1
 800fb04:	b2d2      	uxtb	r2, r2
 800fb06:	701a      	strb	r2, [r3, #0]
  *pLength = 2;
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	2202      	movs	r2, #2
 800fb0c:	601a      	str	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 800fb0e:	2300      	movs	r3, #0
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3710      	adds	r7, #16
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	08030cf4 	.word	0x08030cf4
 800fb1c:	0802e738 	.word	0x0802e738
 800fb20:	200045c4 	.word	0x200045c4

0800fb24 <Light_LightnessDefault_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessDefault_Set(const MOBLEUINT8* plightnessDefault_param, 
                                         MOBLEUINT32 length,\
                                         MODEL_MessageHeader_t *pmsgParam)
{
 800fb24:	b590      	push	{r4, r7, lr}
 800fb26:	b087      	sub	sp, #28
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	60b9      	str	r1, [r7, #8]
 800fb2e:	607a      	str	r2, [r7, #4]
  /* 6.3.1.12 Light Default Lightness Set
  Lightness   2B The target value of the Light Lightness Actual state. 
  */
  MOBLEUINT8 OptionalValid = 0;
 800fb30:	2300      	movs	r3, #0
 800fb32:	75fb      	strb	r3, [r7, #23]
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessDefault_Set callback received \r\n");  
  
  Light_LightnessDefaultParam[pmsgParam->elementIndex].LightnessDefaultStatus = plightnessDefault_param[1] << 8;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	3301      	adds	r3, #1
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	4619      	mov	r1, r3
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	461a      	mov	r2, r3
 800fb42:	020b      	lsls	r3, r1, #8
 800fb44:	b299      	uxth	r1, r3
 800fb46:	4b12      	ldr	r3, [pc, #72]	@ (800fb90 <Light_LightnessDefault_Set+0x6c>)
 800fb48:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  Light_LightnessDefaultParam[pmsgParam->elementIndex].LightnessDefaultStatus |= plightnessDefault_param[0];
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	461a      	mov	r2, r3
 800fb52:	4b0f      	ldr	r3, [pc, #60]	@ (800fb90 <Light_LightnessDefault_Set+0x6c>)
 800fb54:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fb58:	68fa      	ldr	r2, [r7, #12]
 800fb5a:	7812      	ldrb	r2, [r2, #0]
 800fb5c:	4611      	mov	r1, r2
 800fb5e:	687a      	ldr	r2, [r7, #4]
 800fb60:	7812      	ldrb	r2, [r2, #0]
 800fb62:	430b      	orrs	r3, r1
 800fb64:	b299      	uxth	r1, r3
 800fb66:	4b0a      	ldr	r3, [pc, #40]	@ (800fb90 <Light_LightnessDefault_Set+0x6c>)
 800fb68:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  
  /* Application Callback */
  (LightAppli_cb.Lightness_Default_Set_cb)(&Light_LightnessDefaultParam[pmsgParam->elementIndex], 
 800fb6c:	4b09      	ldr	r3, [pc, #36]	@ (800fb94 <Light_LightnessDefault_Set+0x70>)
 800fb6e:	691c      	ldr	r4, [r3, #16]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	005b      	lsls	r3, r3, #1
 800fb76:	4a06      	ldr	r2, [pc, #24]	@ (800fb90 <Light_LightnessDefault_Set+0x6c>)
 800fb78:	1898      	adds	r0, r3, r2
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	88da      	ldrh	r2, [r3, #6]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	7df9      	ldrb	r1, [r7, #23]
 800fb84:	47a0      	blx	r4
                                   OptionalValid, pmsgParam->dst_peer, pmsgParam->elementIndex);
  
  return MOBLE_RESULT_SUCCESS;
 800fb86:	2300      	movs	r3, #0
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	371c      	adds	r7, #28
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd90      	pop	{r4, r7, pc}
 800fb90:	200045d0 	.word	0x200045d0
 800fb94:	0803095c 	.word	0x0803095c

0800fb98 <Light_LightnessDefault_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessDefault_Status(MOBLEUINT8* pLightnessDefault_status,
                                            MOBLEUINT32 *pLength,\
                                            MODEL_MessageHeader_t *pmsgParam)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	607a      	str	r2, [r7, #4]
  Following is the status message:
  Lightness     2B The value of the Light Lightness Default state. 
  */
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessDefault_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#8255! \n\r");
 800fba4:	2100      	movs	r1, #0
 800fba6:	4811      	ldr	r0, [pc, #68]	@ (800fbec <Light_LightnessDefault_Status+0x54>)
 800fba8:	f7fd fcb8 	bl	800d51c <TraceHeader>
 800fbac:	4810      	ldr	r0, [pc, #64]	@ (800fbf0 <Light_LightnessDefault_Status+0x58>)
 800fbae:	f019 f95f 	bl	8028e70 <iprintf>
  
  /* Function call back to get the values from application*/
  *pLightnessDefault_status = Light_LightnessDefaultParam[pmsgParam->elementIndex].LightnessDefaultStatus ;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	461a      	mov	r2, r3
 800fbb8:	4b0e      	ldr	r3, [pc, #56]	@ (800fbf4 <Light_LightnessDefault_Status+0x5c>)
 800fbba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fbbe:	b2da      	uxtb	r2, r3
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	701a      	strb	r2, [r3, #0]
  *(pLightnessDefault_status+1) = Light_LightnessDefaultParam[pmsgParam->elementIndex].LightnessDefaultStatus >>8;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	461a      	mov	r2, r3
 800fbca:	4b0a      	ldr	r3, [pc, #40]	@ (800fbf4 <Light_LightnessDefault_Status+0x5c>)
 800fbcc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fbd0:	0a1b      	lsrs	r3, r3, #8
 800fbd2:	b29a      	uxth	r2, r3
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	b2d2      	uxtb	r2, r2
 800fbda:	701a      	strb	r2, [r3, #0]
  *pLength = 2;
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	2202      	movs	r2, #2
 800fbe0:	601a      	str	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 800fbe2:	2300      	movs	r3, #0
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	08030d10 	.word	0x08030d10
 800fbf0:	0802e744 	.word	0x0802e744
 800fbf4:	200045d0 	.word	0x200045d0

0800fbf8 <Light_LightnessRange_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessRange_Set(const MOBLEUINT8* plightnessRange_param, 
                                       MOBLEUINT32 length,\
                                       MODEL_MessageHeader_t *pmsgParam)
{
 800fbf8:	b590      	push	{r4, r7, lr}
 800fbfa:	b087      	sub	sp, #28
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	607a      	str	r2, [r7, #4]
  /* 6.3.1.16 Light Lightness Range Set 
  Min Range    2B The Minimum range value of the Light Lightness state. 
  Max Range    2B The Maximum range value of the Light Lightness state         
  */
  MOBLEUINT8 OptionalValid = 0;
 800fc04:	2300      	movs	r3, #0
 800fc06:	75fb      	strb	r3, [r7, #23]
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessRange_Set callback received \r\n");
  
  Light_LightnessRangeParam[pmsgParam->elementIndex].MinRangeStatus = plightnessRange_param[1] << 8;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	3301      	adds	r3, #1
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	461a      	mov	r2, r3
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	4619      	mov	r1, r3
 800fc16:	0213      	lsls	r3, r2, #8
 800fc18:	b298      	uxth	r0, r3
 800fc1a:	4a37      	ldr	r2, [pc, #220]	@ (800fcf8 <Light_LightnessRange_Set+0x100>)
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	009b      	lsls	r3, r3, #2
 800fc20:	440b      	add	r3, r1
 800fc22:	4413      	add	r3, r2
 800fc24:	4602      	mov	r2, r0
 800fc26:	f8a3 2001 	strh.w	r2, [r3, #1]
  Light_LightnessRangeParam[pmsgParam->elementIndex].MinRangeStatus |= plightnessRange_param[0];
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	4619      	mov	r1, r3
 800fc30:	4a31      	ldr	r2, [pc, #196]	@ (800fcf8 <Light_LightnessRange_Set+0x100>)
 800fc32:	460b      	mov	r3, r1
 800fc34:	009b      	lsls	r3, r3, #2
 800fc36:	440b      	add	r3, r1
 800fc38:	4413      	add	r3, r2
 800fc3a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	68fa      	ldr	r2, [r7, #12]
 800fc42:	7812      	ldrb	r2, [r2, #0]
 800fc44:	4610      	mov	r0, r2
 800fc46:	687a      	ldr	r2, [r7, #4]
 800fc48:	7812      	ldrb	r2, [r2, #0]
 800fc4a:	4611      	mov	r1, r2
 800fc4c:	4303      	orrs	r3, r0
 800fc4e:	b298      	uxth	r0, r3
 800fc50:	4a29      	ldr	r2, [pc, #164]	@ (800fcf8 <Light_LightnessRange_Set+0x100>)
 800fc52:	460b      	mov	r3, r1
 800fc54:	009b      	lsls	r3, r3, #2
 800fc56:	440b      	add	r3, r1
 800fc58:	4413      	add	r3, r2
 800fc5a:	4602      	mov	r2, r0
 800fc5c:	f8a3 2001 	strh.w	r2, [r3, #1]
  
  Light_LightnessRangeParam[pmsgParam->elementIndex].MaxRangeStatus = plightnessRange_param[3] << 8;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	3303      	adds	r3, #3
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	461a      	mov	r2, r3
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	0213      	lsls	r3, r2, #8
 800fc70:	b298      	uxth	r0, r3
 800fc72:	4a21      	ldr	r2, [pc, #132]	@ (800fcf8 <Light_LightnessRange_Set+0x100>)
 800fc74:	460b      	mov	r3, r1
 800fc76:	009b      	lsls	r3, r3, #2
 800fc78:	440b      	add	r3, r1
 800fc7a:	4413      	add	r3, r2
 800fc7c:	4602      	mov	r2, r0
 800fc7e:	f8a3 2003 	strh.w	r2, [r3, #3]
  Light_LightnessRangeParam[pmsgParam->elementIndex].MaxRangeStatus |= plightnessRange_param[2];
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	4619      	mov	r1, r3
 800fc88:	4a1b      	ldr	r2, [pc, #108]	@ (800fcf8 <Light_LightnessRange_Set+0x100>)
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	009b      	lsls	r3, r3, #2
 800fc8e:	440b      	add	r3, r1
 800fc90:	4413      	add	r3, r2
 800fc92:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	68fa      	ldr	r2, [r7, #12]
 800fc9a:	3202      	adds	r2, #2
 800fc9c:	7812      	ldrb	r2, [r2, #0]
 800fc9e:	4610      	mov	r0, r2
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	7812      	ldrb	r2, [r2, #0]
 800fca4:	4611      	mov	r1, r2
 800fca6:	4303      	orrs	r3, r0
 800fca8:	b298      	uxth	r0, r3
 800fcaa:	4a13      	ldr	r2, [pc, #76]	@ (800fcf8 <Light_LightnessRange_Set+0x100>)
 800fcac:	460b      	mov	r3, r1
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	440b      	add	r3, r1
 800fcb2:	4413      	add	r3, r2
 800fcb4:	4602      	mov	r2, r0
 800fcb6:	f8a3 2003 	strh.w	r2, [r3, #3]
  Light_LightnessRangeParam[pmsgParam->elementIndex].StatusCode = SUCCESS_STATUS_CODE;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	4619      	mov	r1, r3
 800fcc0:	4a0d      	ldr	r2, [pc, #52]	@ (800fcf8 <Light_LightnessRange_Set+0x100>)
 800fcc2:	460b      	mov	r3, r1
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	440b      	add	r3, r1
 800fcc8:	4413      	add	r3, r2
 800fcca:	2200      	movs	r2, #0
 800fccc:	701a      	strb	r2, [r3, #0]
  
  /* condition to check the minimum range value according to the specification*/
  /* set the status code for status message according to value of range*/  
  
  /* Application Callback */
  (LightAppli_cb.Lightness_Range_Set_cb)(&Light_LightnessRangeParam[pmsgParam->elementIndex], OptionalValid,pmsgParam->dst_peer,pmsgParam->elementIndex);
 800fcce:	4b0b      	ldr	r3, [pc, #44]	@ (800fcfc <Light_LightnessRange_Set+0x104>)
 800fcd0:	6a1c      	ldr	r4, [r3, #32]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	781b      	ldrb	r3, [r3, #0]
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	4613      	mov	r3, r2
 800fcda:	009b      	lsls	r3, r3, #2
 800fcdc:	4413      	add	r3, r2
 800fcde:	4a06      	ldr	r2, [pc, #24]	@ (800fcf8 <Light_LightnessRange_Set+0x100>)
 800fce0:	1898      	adds	r0, r3, r2
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	88da      	ldrh	r2, [r3, #6]
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	7df9      	ldrb	r1, [r7, #23]
 800fcec:	47a0      	blx	r4
  
  return MOBLE_RESULT_SUCCESS;
 800fcee:	2300      	movs	r3, #0
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	371c      	adds	r7, #28
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd90      	pop	{r4, r7, pc}
 800fcf8:	200045d4 	.word	0x200045d4
 800fcfc:	0803095c 	.word	0x0803095c

0800fd00 <Light_LightnessRange_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessRange_Status(MOBLEUINT8* pLightnessRange_status,
                                          MOBLEUINT32 *pLength,\
                                          MODEL_MessageHeader_t *pmsgParam)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b084      	sub	sp, #16
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	60f8      	str	r0, [r7, #12]
 800fd08:	60b9      	str	r1, [r7, #8]
 800fd0a:	607a      	str	r2, [r7, #4]
  Min Range      2B The Minimum range value of the Light Lightness state. 
  Max Range      2B The Maximum range value of the Light Lightness state         
  */
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessRange_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#8257! \n\r");
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	482c      	ldr	r0, [pc, #176]	@ (800fdc0 <Light_LightnessRange_Status+0xc0>)
 800fd10:	f7fd fc04 	bl	800d51c <TraceHeader>
 800fd14:	482b      	ldr	r0, [pc, #172]	@ (800fdc4 <Light_LightnessRange_Status+0xc4>)
 800fd16:	f019 f8ab 	bl	8028e70 <iprintf>
  
  *(pLightnessRange_status) = Light_LightnessRangeParam[pmsgParam->elementIndex].StatusCode;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	4619      	mov	r1, r3
 800fd20:	4a29      	ldr	r2, [pc, #164]	@ (800fdc8 <Light_LightnessRange_Status+0xc8>)
 800fd22:	460b      	mov	r3, r1
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	440b      	add	r3, r1
 800fd28:	4413      	add	r3, r2
 800fd2a:	781a      	ldrb	r2, [r3, #0]
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	701a      	strb	r2, [r3, #0]
  *(pLightnessRange_status+1) = Light_LightnessRangeParam[pmsgParam->elementIndex].MinRangeStatus;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	781b      	ldrb	r3, [r3, #0]
 800fd34:	4619      	mov	r1, r3
 800fd36:	4a24      	ldr	r2, [pc, #144]	@ (800fdc8 <Light_LightnessRange_Status+0xc8>)
 800fd38:	460b      	mov	r3, r1
 800fd3a:	009b      	lsls	r3, r3, #2
 800fd3c:	440b      	add	r3, r1
 800fd3e:	4413      	add	r3, r2
 800fd40:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fd44:	b29a      	uxth	r2, r3
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	b2d2      	uxtb	r2, r2
 800fd4c:	701a      	strb	r2, [r3, #0]
  *(pLightnessRange_status+2) = Light_LightnessRangeParam[pmsgParam->elementIndex].MinRangeStatus >> 8;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	4619      	mov	r1, r3
 800fd54:	4a1c      	ldr	r2, [pc, #112]	@ (800fdc8 <Light_LightnessRange_Status+0xc8>)
 800fd56:	460b      	mov	r3, r1
 800fd58:	009b      	lsls	r3, r3, #2
 800fd5a:	440b      	add	r3, r1
 800fd5c:	4413      	add	r3, r2
 800fd5e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	0a1b      	lsrs	r3, r3, #8
 800fd66:	b29a      	uxth	r2, r3
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	3302      	adds	r3, #2
 800fd6c:	b2d2      	uxtb	r2, r2
 800fd6e:	701a      	strb	r2, [r3, #0]
  *(pLightnessRange_status+3) = Light_LightnessRangeParam[pmsgParam->elementIndex].MaxRangeStatus;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	4619      	mov	r1, r3
 800fd76:	4a14      	ldr	r2, [pc, #80]	@ (800fdc8 <Light_LightnessRange_Status+0xc8>)
 800fd78:	460b      	mov	r3, r1
 800fd7a:	009b      	lsls	r3, r3, #2
 800fd7c:	440b      	add	r3, r1
 800fd7e:	4413      	add	r3, r2
 800fd80:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fd84:	b29a      	uxth	r2, r3
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	3303      	adds	r3, #3
 800fd8a:	b2d2      	uxtb	r2, r2
 800fd8c:	701a      	strb	r2, [r3, #0]
  *(pLightnessRange_status+4) = Light_LightnessRangeParam[pmsgParam->elementIndex].MaxRangeStatus >> 8;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	4619      	mov	r1, r3
 800fd94:	4a0c      	ldr	r2, [pc, #48]	@ (800fdc8 <Light_LightnessRange_Status+0xc8>)
 800fd96:	460b      	mov	r3, r1
 800fd98:	009b      	lsls	r3, r3, #2
 800fd9a:	440b      	add	r3, r1
 800fd9c:	4413      	add	r3, r2
 800fd9e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	0a1b      	lsrs	r3, r3, #8
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	3304      	adds	r3, #4
 800fdac:	b2d2      	uxtb	r2, r2
 800fdae:	701a      	strb	r2, [r3, #0]
  *pLength = 5;
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	2205      	movs	r2, #5
 800fdb4:	601a      	str	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 800fdb6:	2300      	movs	r3, #0
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3710      	adds	r7, #16
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	08030d30 	.word	0x08030d30
 800fdc4:	0802e750 	.word	0x0802e750
 800fdc8:	200045d4 	.word	0x200045d4

0800fdcc <LightModelServer_GetOpcodeTableCb>:
* @param  length: Pointer to the Length of Light Model opcode array
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT LightModelServer_GetOpcodeTableCb(const MODEL_OpcodeTableParam_t **data, 
                                               MOBLEUINT16 *length)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b083      	sub	sp, #12
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
  *data = Light_Opcodes_Table;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	4a05      	ldr	r2, [pc, #20]	@ (800fdf0 <LightModelServer_GetOpcodeTableCb+0x24>)
 800fdda:	601a      	str	r2, [r3, #0]
  *length = sizeof(Light_Opcodes_Table)/sizeof(Light_Opcodes_Table[0]);
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	220e      	movs	r2, #14
 800fde0:	801a      	strh	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 800fde2:	2300      	movs	r3, #0
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	370c      	adds	r7, #12
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr
 800fdf0:	08030c14 	.word	0x08030c14

0800fdf4 <LightModelServer_GetStatusRequestCb>:
                                    MOBLEUINT8 *pResponsedata, 
                                    MOBLEUINT32 *plength, 
                                    MOBLEUINT8 const *pRxData,
                                    MOBLEUINT32 dataLength,
                                    MOBLEBOOL response)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b084      	sub	sp, #16
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	60f8      	str	r0, [r7, #12]
 800fdfc:	607a      	str	r2, [r7, #4]
 800fdfe:	603b      	str	r3, [r7, #0]
 800fe00:	460b      	mov	r3, r1
 800fe02:	817b      	strh	r3, [r7, #10]
  TRACE_M(TF_LIGHT_M,"response status enable \n\r");
  switch(opcode)
 800fe04:	897b      	ldrh	r3, [r7, #10]
 800fe06:	f5a3 4302 	sub.w	r3, r3, #33280	@ 0x8200
 800fe0a:	3b4e      	subs	r3, #78	@ 0x4e
 800fe0c:	2b0a      	cmp	r3, #10
 800fe0e:	d837      	bhi.n	800fe80 <LightModelServer_GetStatusRequestCb+0x8c>
 800fe10:	a201      	add	r2, pc, #4	@ (adr r2, 800fe18 <LightModelServer_GetStatusRequestCb+0x24>)
 800fe12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe16:	bf00      	nop
 800fe18:	0800fe45 	.word	0x0800fe45
 800fe1c:	0800fe81 	.word	0x0800fe81
 800fe20:	0800fe81 	.word	0x0800fe81
 800fe24:	0800fe81 	.word	0x0800fe81
 800fe28:	0800fe51 	.word	0x0800fe51
 800fe2c:	0800fe81 	.word	0x0800fe81
 800fe30:	0800fe5d 	.word	0x0800fe5d
 800fe34:	0800fe81 	.word	0x0800fe81
 800fe38:	0800fe69 	.word	0x0800fe69
 800fe3c:	0800fe81 	.word	0x0800fe81
 800fe40:	0800fe75 	.word	0x0800fe75
  {
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    
  case LIGHT_LIGHTNESS_STATUS:
    {
      Light_Lightness_Status(pResponsedata, plength , pmsgParam);
 800fe44:	68fa      	ldr	r2, [r7, #12]
 800fe46:	6839      	ldr	r1, [r7, #0]
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7ff fbef 	bl	800f62c <Light_Lightness_Status>
      break;
 800fe4e:	e018      	b.n	800fe82 <LightModelServer_GetStatusRequestCb+0x8e>
    }    
  case LIGHT_LIGHTNESS_LINEAR_STATUS:
    {
      Light_LightnessLinear_Status(pResponsedata,plength, pmsgParam);
 800fe50:	68fa      	ldr	r2, [r7, #12]
 800fe52:	6839      	ldr	r1, [r7, #0]
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f7ff fd5b 	bl	800f910 <Light_LightnessLinear_Status>
      break;
 800fe5a:	e012      	b.n	800fe82 <LightModelServer_GetStatusRequestCb+0x8e>
    }     
  case LIGHT_LIGHTNESS_LAST_STATUS:
    {
      Light_LightnessLast_Status(pResponsedata,plength, pmsgParam);
 800fe5c:	68fa      	ldr	r2, [r7, #12]
 800fe5e:	6839      	ldr	r1, [r7, #0]
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f7ff fe25 	bl	800fab0 <Light_LightnessLast_Status>
      break;
 800fe66:	e00c      	b.n	800fe82 <LightModelServer_GetStatusRequestCb+0x8e>
    }   
  case LIGHT_LIGHTNESS_DEFAULT_STATUS:
    {
      Light_LightnessDefault_Status(pResponsedata,plength, pmsgParam);
 800fe68:	68fa      	ldr	r2, [r7, #12]
 800fe6a:	6839      	ldr	r1, [r7, #0]
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7ff fe93 	bl	800fb98 <Light_LightnessDefault_Status>
      break;
 800fe72:	e006      	b.n	800fe82 <LightModelServer_GetStatusRequestCb+0x8e>
    }  
  case LIGHT_LIGHTNESS_RANGE_STATUS:
    {
      Light_LightnessRange_Status(pResponsedata,plength, pmsgParam);
 800fe74:	68fa      	ldr	r2, [r7, #12]
 800fe76:	6839      	ldr	r1, [r7, #0]
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f7ff ff41 	bl	800fd00 <Light_LightnessRange_Status>
      break;
 800fe7e:	e000      	b.n	800fe82 <LightModelServer_GetStatusRequestCb+0x8e>
      break;
    } 
#endif
  default:
    {
      break;
 800fe80:	bf00      	nop
    }
  }
  return MOBLE_RESULT_SUCCESS;    
 800fe82:	2300      	movs	r3, #0
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3710      	adds	r7, #16
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}

0800fe8c <LightModelServer_ProcessMessageCb>:
                                               MOBLEUINT16 opcode, 
                                               MOBLEUINT8 const *pRxData, 
                                               MOBLEUINT32 dataLength, 
                                               MOBLEBOOL response
                                                 )
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b086      	sub	sp, #24
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	60f8      	str	r0, [r7, #12]
 800fe94:	607a      	str	r2, [r7, #4]
 800fe96:	603b      	str	r3, [r7, #0]
 800fe98:	460b      	mov	r3, r1
 800fe9a:	817b      	strh	r3, [r7, #10]
  Model_Binding_Var.Dst_Peer = pmsgParam->dst_peer;	
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	88da      	ldrh	r2, [r3, #6]
 800fea0:	4b8a      	ldr	r3, [pc, #552]	@ (80100cc <LightModelServer_ProcessMessageCb+0x240>)
 800fea2:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800fea4:	2300      	movs	r3, #0
 800fea6:	75fb      	strb	r3, [r7, #23]
  MOBLE_ADDRESS publishAddress;
  MOBLEUINT8 modelStateChangeFlag = MOBLE_FALSE;
 800fea8:	2300      	movs	r3, #0
 800feaa:	75bb      	strb	r3, [r7, #22]
  
  TRACE_M(TF_LIGHT_M, "elementIndex %.2x dst_peer %.2X peer_add %.2X opcode %.2X response %.2X\r\n",
          pmsgParam->elementIndex, pmsgParam->dst_peer, pmsgParam->peer_addr, opcode, response);
  
  switch(opcode)
 800feac:	897b      	ldrh	r3, [r7, #10]
 800feae:	f5a3 4302 	sub.w	r3, r3, #33280	@ 0x8200
 800feb2:	3b4c      	subs	r3, #76	@ 0x4c
 800feb4:	2b10      	cmp	r3, #16
 800feb6:	f200 809f 	bhi.w	800fff8 <LightModelServer_ProcessMessageCb+0x16c>
 800feba:	a201      	add	r2, pc, #4	@ (adr r2, 800fec0 <LightModelServer_ProcessMessageCb+0x34>)
 800febc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fec0:	0800ff05 	.word	0x0800ff05
 800fec4:	0800ff05 	.word	0x0800ff05
 800fec8:	0800fff9 	.word	0x0800fff9
 800fecc:	0800fff9 	.word	0x0800fff9
 800fed0:	0800ff5d 	.word	0x0800ff5d
 800fed4:	0800ff5d 	.word	0x0800ff5d
 800fed8:	0800fff9 	.word	0x0800fff9
 800fedc:	0800fff9 	.word	0x0800fff9
 800fee0:	0800fff9 	.word	0x0800fff9
 800fee4:	0800fff9 	.word	0x0800fff9
 800fee8:	0800fff9 	.word	0x0800fff9
 800feec:	0800fff9 	.word	0x0800fff9
 800fef0:	0800fff9 	.word	0x0800fff9
 800fef4:	0800ffb5 	.word	0x0800ffb5
 800fef8:	0800ffb5 	.word	0x0800ffb5
 800fefc:	0800ffd7 	.word	0x0800ffd7
 800ff00:	0800ffd7 	.word	0x0800ffd7
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS  
    
  case LIGHT_LIGHTNESS_SET:
  case LIGHT_LIGHTNESS_SET_UNACK:
    {       
      result = Chk_ParamMinMaxValidity(MIN_VALID_RANGE ,pRxData , MAX_VALID_RANGE );
 800ff04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ff08:	6879      	ldr	r1, [r7, #4]
 800ff0a:	2000      	movs	r0, #0
 800ff0c:	f7fd fab6 	bl	800d47c <Chk_ParamMinMaxValidity>
 800ff10:	4603      	mov	r3, r0
 800ff12:	75fb      	strb	r3, [r7, #23]
      
      if(result == MOBLE_RESULT_SUCCESS)
 800ff14:	7dfb      	ldrb	r3, [r7, #23]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d170      	bne.n	800fffc <LightModelServer_ProcessMessageCb+0x170>
      {
          if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr, pmsgParam->dst_peer,pRxData[2])))
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	8898      	ldrh	r0, [r3, #4]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	88d9      	ldrh	r1, [r3, #6]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	3302      	adds	r3, #2
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	461a      	mov	r2, r3
 800ff2a:	f7fd fca1 	bl	800d870 <Chk_TidValidity>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	75fb      	strb	r3, [r7, #23]
 800ff32:	7dfb      	ldrb	r3, [r7, #23]
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d861      	bhi.n	800fffc <LightModelServer_ProcessMessageCb+0x170>
        {
            Light_Lightness_Set(pRxData, dataLength,pmsgParam);
 800ff38:	68fa      	ldr	r2, [r7, #12]
 800ff3a:	6839      	ldr	r1, [r7, #0]
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f7ff fa63 	bl	800f408 <Light_Lightness_Set>
            Model_Binding_Var.Model_ID = (MOBLEUINT16)LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 800ff42:	4b62      	ldr	r3, [pc, #392]	@ (80100cc <LightModelServer_ProcessMessageCb+0x240>)
 800ff44:	f44f 5298 	mov.w	r2, #4864	@ 0x1300
 800ff48:	805a      	strh	r2, [r3, #2]
            Model_Binding_Var.Model_Rx_Opcode = opcode;
 800ff4a:	4a60      	ldr	r2, [pc, #384]	@ (80100cc <LightModelServer_ProcessMessageCb+0x240>)
 800ff4c:	897b      	ldrh	r3, [r7, #10]
 800ff4e:	8013      	strh	r3, [r2, #0]
            modelStateChangeFlag = MOBLE_TRUE; 
 800ff50:	2301      	movs	r3, #1
 800ff52:	75bb      	strb	r3, [r7, #22]
            Publication1SecFlag.count = 0;
 800ff54:	4b5e      	ldr	r3, [pc, #376]	@ (80100d0 <LightModelServer_ProcessMessageCb+0x244>)
 800ff56:	2200      	movs	r2, #0
 800ff58:	709a      	strb	r2, [r3, #2]
        }
      }
      break;
 800ff5a:	e04f      	b.n	800fffc <LightModelServer_ProcessMessageCb+0x170>
    }
  case LIGHT_LIGHTNESS_LINEAR_SET:
  case LIGHT_LIGHTNESS_LINEAR_SET_UNACK: 
    {
      result = Chk_ParamMinMaxValidity(MIN_VALID_RANGE , pRxData , MAX_VALID_RANGE);
 800ff5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ff60:	6879      	ldr	r1, [r7, #4]
 800ff62:	2000      	movs	r0, #0
 800ff64:	f7fd fa8a 	bl	800d47c <Chk_ParamMinMaxValidity>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	75fb      	strb	r3, [r7, #23]
      
      if(result == MOBLE_RESULT_SUCCESS)
 800ff6c:	7dfb      	ldrb	r3, [r7, #23]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d146      	bne.n	8010000 <LightModelServer_ProcessMessageCb+0x174>
      {
          if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr, 
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	8898      	ldrh	r0, [r3, #4]
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	88d9      	ldrh	r1, [r3, #6]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	3302      	adds	r3, #2
 800ff7e:	781b      	ldrb	r3, [r3, #0]
 800ff80:	461a      	mov	r2, r3
 800ff82:	f7fd fc75 	bl	800d870 <Chk_TidValidity>
 800ff86:	4603      	mov	r3, r0
 800ff88:	75fb      	strb	r3, [r7, #23]
 800ff8a:	7dfb      	ldrb	r3, [r7, #23]
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d837      	bhi.n	8010000 <LightModelServer_ProcessMessageCb+0x174>
                                                  pmsgParam->dst_peer,pRxData[2])))
        {
            Light_LightnessLinear_Set(pRxData, dataLength,pmsgParam);
 800ff90:	68fa      	ldr	r2, [r7, #12]
 800ff92:	6839      	ldr	r1, [r7, #0]
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f7ff fbdb 	bl	800f750 <Light_LightnessLinear_Set>
            Model_Binding_Var.Model_ID = (MOBLEUINT16)LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 800ff9a:	4b4c      	ldr	r3, [pc, #304]	@ (80100cc <LightModelServer_ProcessMessageCb+0x240>)
 800ff9c:	f44f 5298 	mov.w	r2, #4864	@ 0x1300
 800ffa0:	805a      	strh	r2, [r3, #2]
            Model_Binding_Var.Model_Rx_Opcode = opcode;
 800ffa2:	4a4a      	ldr	r2, [pc, #296]	@ (80100cc <LightModelServer_ProcessMessageCb+0x240>)
 800ffa4:	897b      	ldrh	r3, [r7, #10]
 800ffa6:	8013      	strh	r3, [r2, #0]
            modelStateChangeFlag = MOBLE_TRUE;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	75bb      	strb	r3, [r7, #22]
            Publication1SecFlag.count = 0;
 800ffac:	4b48      	ldr	r3, [pc, #288]	@ (80100d0 <LightModelServer_ProcessMessageCb+0x244>)
 800ffae:	2200      	movs	r2, #0
 800ffb0:	709a      	strb	r2, [r3, #2]
        }
      }
      break;
 800ffb2:	e025      	b.n	8010000 <LightModelServer_ProcessMessageCb+0x174>
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP
    
  case LIGHT_LIGHTNESS_DEFAULT_SET:
  case LIGHT_LIGHTNESS_DEFAULT_SET_UNACK:
    {      
      result = Chk_ParamMinMaxValidity(MIN_VALID_RANGE , pRxData , MAX_VALID_RANGE);
 800ffb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ffb8:	6879      	ldr	r1, [r7, #4]
 800ffba:	2000      	movs	r0, #0
 800ffbc:	f7fd fa5e 	bl	800d47c <Chk_ParamMinMaxValidity>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	75fb      	strb	r3, [r7, #23]
      
      if(result == MOBLE_RESULT_SUCCESS)
 800ffc4:	7dfb      	ldrb	r3, [r7, #23]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d11c      	bne.n	8010004 <LightModelServer_ProcessMessageCb+0x178>
      {
          Light_LightnessDefault_Set(pRxData, dataLength, pmsgParam);       
 800ffca:	68fa      	ldr	r2, [r7, #12]
 800ffcc:	6839      	ldr	r1, [r7, #0]
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f7ff fda8 	bl	800fb24 <Light_LightnessDefault_Set>
      }
      break;
 800ffd4:	e016      	b.n	8010004 <LightModelServer_ProcessMessageCb+0x178>
    }
  case LIGHT_LIGHTNESS_RANGE_SET:
  case LIGHT_LIGHTNESS_RANGE_SET_UNACK:
    {
      result = Chk_RangeValidity(MIN_VALID_RANGE , pRxData , MAX_VALID_RANGE);
 800ffd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ffda:	6879      	ldr	r1, [r7, #4]
 800ffdc:	2000      	movs	r0, #0
 800ffde:	f7fd f9d0 	bl	800d382 <Chk_RangeValidity>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	75fb      	strb	r3, [r7, #23]
      
      if(result == MOBLE_RESULT_SUCCESS)
 800ffe6:	7dfb      	ldrb	r3, [r7, #23]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d10d      	bne.n	8010008 <LightModelServer_ProcessMessageCb+0x17c>
      {
          Light_LightnessRange_Set(pRxData, dataLength,pmsgParam);     
 800ffec:	68fa      	ldr	r2, [r7, #12]
 800ffee:	6839      	ldr	r1, [r7, #0]
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f7ff fe01 	bl	800fbf8 <Light_LightnessRange_Set>
      }
      break;
 800fff6:	e007      	b.n	8010008 <LightModelServer_ProcessMessageCb+0x17c>
    }

#endif  
  default:
    {
      break;
 800fff8:	bf00      	nop
 800fffa:	e006      	b.n	801000a <LightModelServer_ProcessMessageCb+0x17e>
      break;
 800fffc:	bf00      	nop
 800fffe:	e004      	b.n	801000a <LightModelServer_ProcessMessageCb+0x17e>
      break;
 8010000:	bf00      	nop
 8010002:	e002      	b.n	801000a <LightModelServer_ProcessMessageCb+0x17e>
      break;
 8010004:	bf00      	nop
 8010006:	e000      	b.n	801000a <LightModelServer_ProcessMessageCb+0x17e>
      break;
 8010008:	bf00      	nop
    }    
  } /* Switch ends */
  
  if((result == MOBLE_RESULT_SUCCESS) && (response == MOBLE_TRUE))
 801000a:	7dfb      	ldrb	r3, [r7, #23]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d120      	bne.n	8010052 <LightModelServer_ProcessMessageCb+0x1c6>
 8010010:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010014:	2b01      	cmp	r3, #1
 8010016:	d11c      	bne.n	8010052 <LightModelServer_ProcessMessageCb+0x1c6>
  {
    if(ADDRESS_IS_UNICAST(pmsgParam->dst_peer))
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	88db      	ldrh	r3, [r3, #6]
 801001c:	b21b      	sxth	r3, r3
 801001e:	2b00      	cmp	r3, #0
 8010020:	dd0b      	ble.n	801003a <LightModelServer_ProcessMessageCb+0x1ae>
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	88db      	ldrh	r3, [r3, #6]
 8010026:	b21b      	sxth	r3, r3
 8010028:	2b00      	cmp	r3, #0
 801002a:	db06      	blt.n	801003a <LightModelServer_ProcessMessageCb+0x1ae>
    {
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);                                           
 801002c:	8979      	ldrh	r1, [r7, #10]
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	687a      	ldr	r2, [r7, #4]
 8010032:	68f8      	ldr	r0, [r7, #12]
 8010034:	f017 fed6 	bl	8027de4 <Model_SendResponse>
 8010038:	e00b      	b.n	8010052 <LightModelServer_ProcessMessageCb+0x1c6>
    }
    else{

      pmsgParam->dst_peer = BLEMesh_GetAddress();       // Replace group address by the single node address for response
 801003a:	f00c fd1f 	bl	801ca7c <BLEMesh_GetAddress>
 801003e:	4603      	mov	r3, r0
 8010040:	461a      	mov	r2, r3
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	80da      	strh	r2, [r3, #6]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);   
 8010046:	8979      	ldrh	r1, [r7, #10]
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	687a      	ldr	r2, [r7, #4]
 801004c:	68f8      	ldr	r0, [r7, #12]
 801004e:	f017 fec9 	bl	8027de4 <Model_SendResponse>
     Publish the status to publish address if the publication is set by client 
     publication is independent of the response of the message.if the condition 
     for publication is full filled as per specification then the status will be 
     published.
  */
  publishAddress = BLEMesh_GetPublishAddress(pmsgParam->elementIndex, Model_Binding_Var.Model_ID);
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	4a1d      	ldr	r2, [pc, #116]	@ (80100cc <LightModelServer_ProcessMessageCb+0x240>)
 8010058:	8852      	ldrh	r2, [r2, #2]
 801005a:	4611      	mov	r1, r2
 801005c:	4618      	mov	r0, r3
 801005e:	f00c fd1d 	bl	801ca9c <BLEMesh_GetPublishAddress>
 8010062:	4603      	mov	r3, r0
 8010064:	82bb      	strh	r3, [r7, #20]
  
  if((result == MOBLE_RESULT_SUCCESS) && (publishAddress != 0x0000) && (modelStateChangeFlag == MOBLE_TRUE))
 8010066:	7dfb      	ldrb	r3, [r7, #23]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d12a      	bne.n	80100c2 <LightModelServer_ProcessMessageCb+0x236>
 801006c:	8abb      	ldrh	r3, [r7, #20]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d027      	beq.n	80100c2 <LightModelServer_ProcessMessageCb+0x236>
 8010072:	7dbb      	ldrb	r3, [r7, #22]
 8010074:	2b01      	cmp	r3, #1
 8010076:	d124      	bne.n	80100c2 <LightModelServer_ProcessMessageCb+0x236>
  {
    if(ADDRESS_IS_UNICAST(pmsgParam->dst_peer))
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	88db      	ldrh	r3, [r3, #6]
 801007c:	b21b      	sxth	r3, r3
 801007e:	2b00      	cmp	r3, #0
 8010080:	dd0e      	ble.n	80100a0 <LightModelServer_ProcessMessageCb+0x214>
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	88db      	ldrh	r3, [r3, #6]
 8010086:	b21b      	sxth	r3, r3
 8010088:	2b00      	cmp	r3, #0
 801008a:	db09      	blt.n	80100a0 <LightModelServer_ProcessMessageCb+0x214>
    {
      pmsgParam->peer_addr = publishAddress;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	8aba      	ldrh	r2, [r7, #20]
 8010090:	809a      	strh	r2, [r3, #4]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 8010092:	8979      	ldrh	r1, [r7, #10]
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	68f8      	ldr	r0, [r7, #12]
 801009a:	f017 fea3 	bl	8027de4 <Model_SendResponse>
 801009e:	e00e      	b.n	80100be <LightModelServer_ProcessMessageCb+0x232>
    }
    else{

      pmsgParam->peer_addr = publishAddress;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	8aba      	ldrh	r2, [r7, #20]
 80100a4:	809a      	strh	r2, [r3, #4]
      pmsgParam->dst_peer = BLEMesh_GetAddress(); // Replace group address by the single node address for response
 80100a6:	f00c fce9 	bl	801ca7c <BLEMesh_GetAddress>
 80100aa:	4603      	mov	r3, r0
 80100ac:	461a      	mov	r2, r3
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	80da      	strh	r2, [r3, #6]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 80100b2:	8979      	ldrh	r1, [r7, #10]
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	68f8      	ldr	r0, [r7, #12]
 80100ba:	f017 fe93 	bl	8027de4 <Model_SendResponse>
    }
    
    modelStateChangeFlag = MOBLE_FALSE;  
 80100be:	2300      	movs	r3, #0
 80100c0:	75bb      	strb	r3, [r7, #22]
    TRACE_I(TF_LIGHT_M,"Publishing state to the address  %.2X \r\n",publishAddress);
  }

  return MOBLE_RESULT_SUCCESS;
 80100c2:	2300      	movs	r3, #0
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3718      	adds	r7, #24
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	2000454c 	.word	0x2000454c
 80100d0:	200045a8 	.word	0x200045a8

080100d4 <Light_TransitionBehaviourSingle_Param>:
* @param GetValue: Pointer of the array
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Light_TransitionBehaviourSingle_Param(MOBLEUINT8 *GetValue,
                                                   MOBLEUINT8 elementIndex)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	460b      	mov	r3, r1
 80100de:	70fb      	strb	r3, [r7, #3]
  static MOBLEUINT8 Clockflag = 0;
  static MOBLEUINT32 Check_time;
  MOBLEUINT16 targetRange;
  MOBLEUINT16 targetSlot;
  
  if(Clockflag == 0)
 80100e0:	4bab      	ldr	r3, [pc, #684]	@ (8010390 <Light_TransitionBehaviourSingle_Param+0x2bc>)
 80100e2:	781b      	ldrb	r3, [r3, #0]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d107      	bne.n	80100f8 <Light_TransitionBehaviourSingle_Param+0x24>
  {
    Check_time = Clock_Time();
 80100e8:	f7f7 fe98 	bl	8007e1c <HAL_GetTick>
 80100ec:	4603      	mov	r3, r0
 80100ee:	4aa9      	ldr	r2, [pc, #676]	@ (8010394 <Light_TransitionBehaviourSingle_Param+0x2c0>)
 80100f0:	6013      	str	r3, [r2, #0]
    Clockflag = 1;
 80100f2:	4ba7      	ldr	r3, [pc, #668]	@ (8010390 <Light_TransitionBehaviourSingle_Param+0x2bc>)
 80100f4:	2201      	movs	r2, #1
 80100f6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Publication after 1 second if total transition time is greater than 2 sec.*/
  if(Light_TimeParam[elementIndex].TotalTime >2000)
 80100f8:	78fa      	ldrb	r2, [r7, #3]
 80100fa:	49a7      	ldr	r1, [pc, #668]	@ (8010398 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 80100fc:	4613      	mov	r3, r2
 80100fe:	009b      	lsls	r3, r3, #2
 8010100:	4413      	add	r3, r2
 8010102:	005b      	lsls	r3, r3, #1
 8010104:	440b      	add	r3, r1
 8010106:	f8d3 3006 	ldr.w	r3, [r3, #6]
 801010a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 801010e:	d901      	bls.n	8010114 <Light_TransitionBehaviourSingle_Param+0x40>
  {
    Punblication_OneSecTimer();
 8010110:	f001 fbd0 	bl	80118b4 <Punblication_OneSecTimer>
  }
  
  /* Values from application are copied into temporary variables for processing */    
  Light_TemporaryStatus[elementIndex].PresentParam_1 = GetValue[1] << 8;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	3301      	adds	r3, #1
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	78fa      	ldrb	r2, [r7, #3]
 801011c:	021b      	lsls	r3, r3, #8
 801011e:	b298      	uxth	r0, r3
 8010120:	499e      	ldr	r1, [pc, #632]	@ (801039c <Light_TransitionBehaviourSingle_Param+0x2c8>)
 8010122:	4613      	mov	r3, r2
 8010124:	005b      	lsls	r3, r3, #1
 8010126:	4413      	add	r3, r2
 8010128:	009b      	lsls	r3, r3, #2
 801012a:	4413      	add	r3, r2
 801012c:	440b      	add	r3, r1
 801012e:	4602      	mov	r2, r0
 8010130:	801a      	strh	r2, [r3, #0]
  Light_TemporaryStatus[elementIndex].PresentParam_1 |= GetValue[0];   
 8010132:	78fa      	ldrb	r2, [r7, #3]
 8010134:	4999      	ldr	r1, [pc, #612]	@ (801039c <Light_TransitionBehaviourSingle_Param+0x2c8>)
 8010136:	4613      	mov	r3, r2
 8010138:	005b      	lsls	r3, r3, #1
 801013a:	4413      	add	r3, r2
 801013c:	009b      	lsls	r3, r3, #2
 801013e:	4413      	add	r3, r2
 8010140:	440b      	add	r3, r1
 8010142:	881b      	ldrh	r3, [r3, #0]
 8010144:	b29b      	uxth	r3, r3
 8010146:	687a      	ldr	r2, [r7, #4]
 8010148:	7812      	ldrb	r2, [r2, #0]
 801014a:	4611      	mov	r1, r2
 801014c:	78fa      	ldrb	r2, [r7, #3]
 801014e:	430b      	orrs	r3, r1
 8010150:	b298      	uxth	r0, r3
 8010152:	4992      	ldr	r1, [pc, #584]	@ (801039c <Light_TransitionBehaviourSingle_Param+0x2c8>)
 8010154:	4613      	mov	r3, r2
 8010156:	005b      	lsls	r3, r3, #1
 8010158:	4413      	add	r3, r2
 801015a:	009b      	lsls	r3, r3, #2
 801015c:	4413      	add	r3, r2
 801015e:	440b      	add	r3, r1
 8010160:	4602      	mov	r2, r0
 8010162:	801a      	strh	r2, [r3, #0]
  /*if condition to wait until the time is equal to the given resolution time */  
  if(((Clock_Time()- Check_time) >= Light_TimeParam[elementIndex].Res_Value))
 8010164:	f7f7 fe5a 	bl	8007e1c <HAL_GetTick>
 8010168:	4602      	mov	r2, r0
 801016a:	4b8a      	ldr	r3, [pc, #552]	@ (8010394 <Light_TransitionBehaviourSingle_Param+0x2c0>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	1ad1      	subs	r1, r2, r3
 8010170:	78fa      	ldrb	r2, [r7, #3]
 8010172:	4889      	ldr	r0, [pc, #548]	@ (8010398 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 8010174:	4613      	mov	r3, r2
 8010176:	009b      	lsls	r3, r3, #2
 8010178:	4413      	add	r3, r2
 801017a:	005b      	lsls	r3, r3, #1
 801017c:	4403      	add	r3, r0
 801017e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8010182:	4299      	cmp	r1, r3
 8010184:	f0c0 80ff 	bcc.w	8010386 <Light_TransitionBehaviourSingle_Param+0x2b2>
  {
    if(Light_TimeParam[elementIndex].StepValue == 0)
 8010188:	78fa      	ldrb	r2, [r7, #3]
 801018a:	4983      	ldr	r1, [pc, #524]	@ (8010398 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 801018c:	4613      	mov	r3, r2
 801018e:	009b      	lsls	r3, r3, #2
 8010190:	4413      	add	r3, r2
 8010192:	005b      	lsls	r3, r3, #1
 8010194:	440b      	add	r3, r1
 8010196:	f993 3000 	ldrsb.w	r3, [r3]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d108      	bne.n	80101b0 <Light_TransitionBehaviourSingle_Param+0xdc>
    {
      Light_TimeParam[elementIndex].StepValue = 1;
 801019e:	78fa      	ldrb	r2, [r7, #3]
 80101a0:	497d      	ldr	r1, [pc, #500]	@ (8010398 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 80101a2:	4613      	mov	r3, r2
 80101a4:	009b      	lsls	r3, r3, #2
 80101a6:	4413      	add	r3, r2
 80101a8:	005b      	lsls	r3, r3, #1
 80101aa:	440b      	add	r3, r1
 80101ac:	2201      	movs	r2, #1
 80101ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(Light_TemporaryStatus[elementIndex].TargetParam_1 > Light_TemporaryStatus[elementIndex].PresentParam_1)
 80101b0:	78fa      	ldrb	r2, [r7, #3]
 80101b2:	497a      	ldr	r1, [pc, #488]	@ (801039c <Light_TransitionBehaviourSingle_Param+0x2c8>)
 80101b4:	4613      	mov	r3, r2
 80101b6:	005b      	lsls	r3, r3, #1
 80101b8:	4413      	add	r3, r2
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	4413      	add	r3, r2
 80101be:	440b      	add	r3, r1
 80101c0:	3306      	adds	r3, #6
 80101c2:	881b      	ldrh	r3, [r3, #0]
 80101c4:	b299      	uxth	r1, r3
 80101c6:	78fa      	ldrb	r2, [r7, #3]
 80101c8:	4874      	ldr	r0, [pc, #464]	@ (801039c <Light_TransitionBehaviourSingle_Param+0x2c8>)
 80101ca:	4613      	mov	r3, r2
 80101cc:	005b      	lsls	r3, r3, #1
 80101ce:	4413      	add	r3, r2
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	4413      	add	r3, r2
 80101d4:	4403      	add	r3, r0
 80101d6:	881b      	ldrh	r3, [r3, #0]
 80101d8:	b29b      	uxth	r3, r3
 80101da:	4299      	cmp	r1, r3
 80101dc:	d93b      	bls.n	8010256 <Light_TransitionBehaviourSingle_Param+0x182>
    {
      /* calculating the target range to be achieved which is target value
      which is target value minus present value if target value is greater 
      than present value.   
      */
      targetRange = Light_TemporaryStatus[elementIndex].TargetParam_1 - Light_TemporaryStatus[elementIndex].PresentParam_1;  
 80101de:	78fa      	ldrb	r2, [r7, #3]
 80101e0:	496e      	ldr	r1, [pc, #440]	@ (801039c <Light_TransitionBehaviourSingle_Param+0x2c8>)
 80101e2:	4613      	mov	r3, r2
 80101e4:	005b      	lsls	r3, r3, #1
 80101e6:	4413      	add	r3, r2
 80101e8:	009b      	lsls	r3, r3, #2
 80101ea:	4413      	add	r3, r2
 80101ec:	440b      	add	r3, r1
 80101ee:	3306      	adds	r3, #6
 80101f0:	881b      	ldrh	r3, [r3, #0]
 80101f2:	b299      	uxth	r1, r3
 80101f4:	78fa      	ldrb	r2, [r7, #3]
 80101f6:	4869      	ldr	r0, [pc, #420]	@ (801039c <Light_TransitionBehaviourSingle_Param+0x2c8>)
 80101f8:	4613      	mov	r3, r2
 80101fa:	005b      	lsls	r3, r3, #1
 80101fc:	4413      	add	r3, r2
 80101fe:	009b      	lsls	r3, r3, #2
 8010200:	4413      	add	r3, r2
 8010202:	4403      	add	r3, r0
 8010204:	881b      	ldrh	r3, [r3, #0]
 8010206:	b29b      	uxth	r3, r3
 8010208:	1acb      	subs	r3, r1, r3
 801020a:	81fb      	strh	r3, [r7, #14]
      /*target slot = time to cover in single step */
      targetSlot = targetRange/Light_TimeParam[elementIndex].StepValue;
 801020c:	89f9      	ldrh	r1, [r7, #14]
 801020e:	78fa      	ldrb	r2, [r7, #3]
 8010210:	4861      	ldr	r0, [pc, #388]	@ (8010398 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 8010212:	4613      	mov	r3, r2
 8010214:	009b      	lsls	r3, r3, #2
 8010216:	4413      	add	r3, r2
 8010218:	005b      	lsls	r3, r3, #1
 801021a:	4403      	add	r3, r0
 801021c:	f993 3000 	ldrsb.w	r3, [r3]
 8010220:	fb91 f3f3 	sdiv	r3, r1, r3
 8010224:	81bb      	strh	r3, [r7, #12]
      /* target slot added to present value to achieve target value */
      Light_TemporaryStatus[elementIndex].PresentParam_1 += targetSlot;             
 8010226:	78fa      	ldrb	r2, [r7, #3]
 8010228:	495c      	ldr	r1, [pc, #368]	@ (801039c <Light_TransitionBehaviourSingle_Param+0x2c8>)
 801022a:	4613      	mov	r3, r2
 801022c:	005b      	lsls	r3, r3, #1
 801022e:	4413      	add	r3, r2
 8010230:	009b      	lsls	r3, r3, #2
 8010232:	4413      	add	r3, r2
 8010234:	440b      	add	r3, r1
 8010236:	881b      	ldrh	r3, [r3, #0]
 8010238:	b299      	uxth	r1, r3
 801023a:	78fa      	ldrb	r2, [r7, #3]
 801023c:	89bb      	ldrh	r3, [r7, #12]
 801023e:	440b      	add	r3, r1
 8010240:	b298      	uxth	r0, r3
 8010242:	4956      	ldr	r1, [pc, #344]	@ (801039c <Light_TransitionBehaviourSingle_Param+0x2c8>)
 8010244:	4613      	mov	r3, r2
 8010246:	005b      	lsls	r3, r3, #1
 8010248:	4413      	add	r3, r2
 801024a:	009b      	lsls	r3, r3, #2
 801024c:	4413      	add	r3, r2
 801024e:	440b      	add	r3, r1
 8010250:	4602      	mov	r2, r0
 8010252:	801a      	strh	r2, [r3, #0]
 8010254:	e03a      	b.n	80102cc <Light_TransitionBehaviourSingle_Param+0x1f8>
    }              
    else
    { 
      /* if present value is greater than target value, this condition executes */
      targetRange = Light_TemporaryStatus[elementIndex].PresentParam_1 - Light_TemporaryStatus[elementIndex].TargetParam_1;
 8010256:	78fa      	ldrb	r2, [r7, #3]
 8010258:	4950      	ldr	r1, [pc, #320]	@ (801039c <Light_TransitionBehaviourSingle_Param+0x2c8>)
 801025a:	4613      	mov	r3, r2
 801025c:	005b      	lsls	r3, r3, #1
 801025e:	4413      	add	r3, r2
 8010260:	009b      	lsls	r3, r3, #2
 8010262:	4413      	add	r3, r2
 8010264:	440b      	add	r3, r1
 8010266:	881b      	ldrh	r3, [r3, #0]
 8010268:	b299      	uxth	r1, r3
 801026a:	78fa      	ldrb	r2, [r7, #3]
 801026c:	484b      	ldr	r0, [pc, #300]	@ (801039c <Light_TransitionBehaviourSingle_Param+0x2c8>)
 801026e:	4613      	mov	r3, r2
 8010270:	005b      	lsls	r3, r3, #1
 8010272:	4413      	add	r3, r2
 8010274:	009b      	lsls	r3, r3, #2
 8010276:	4413      	add	r3, r2
 8010278:	4403      	add	r3, r0
 801027a:	3306      	adds	r3, #6
 801027c:	881b      	ldrh	r3, [r3, #0]
 801027e:	b29b      	uxth	r3, r3
 8010280:	1acb      	subs	r3, r1, r3
 8010282:	81fb      	strh	r3, [r7, #14]
      targetSlot = targetRange/Light_TimeParam[elementIndex].StepValue;          
 8010284:	89f9      	ldrh	r1, [r7, #14]
 8010286:	78fa      	ldrb	r2, [r7, #3]
 8010288:	4843      	ldr	r0, [pc, #268]	@ (8010398 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 801028a:	4613      	mov	r3, r2
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	4413      	add	r3, r2
 8010290:	005b      	lsls	r3, r3, #1
 8010292:	4403      	add	r3, r0
 8010294:	f993 3000 	ldrsb.w	r3, [r3]
 8010298:	fb91 f3f3 	sdiv	r3, r1, r3
 801029c:	81bb      	strh	r3, [r7, #12]
      Light_TemporaryStatus[elementIndex].PresentParam_1 -= targetSlot;
 801029e:	78fa      	ldrb	r2, [r7, #3]
 80102a0:	493e      	ldr	r1, [pc, #248]	@ (801039c <Light_TransitionBehaviourSingle_Param+0x2c8>)
 80102a2:	4613      	mov	r3, r2
 80102a4:	005b      	lsls	r3, r3, #1
 80102a6:	4413      	add	r3, r2
 80102a8:	009b      	lsls	r3, r3, #2
 80102aa:	4413      	add	r3, r2
 80102ac:	440b      	add	r3, r1
 80102ae:	881b      	ldrh	r3, [r3, #0]
 80102b0:	b299      	uxth	r1, r3
 80102b2:	78fa      	ldrb	r2, [r7, #3]
 80102b4:	89bb      	ldrh	r3, [r7, #12]
 80102b6:	1acb      	subs	r3, r1, r3
 80102b8:	b298      	uxth	r0, r3
 80102ba:	4938      	ldr	r1, [pc, #224]	@ (801039c <Light_TransitionBehaviourSingle_Param+0x2c8>)
 80102bc:	4613      	mov	r3, r2
 80102be:	005b      	lsls	r3, r3, #1
 80102c0:	4413      	add	r3, r2
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	4413      	add	r3, r2
 80102c6:	440b      	add	r3, r1
 80102c8:	4602      	mov	r2, r0
 80102ca:	801a      	strh	r2, [r3, #0]
    } 
    
    Light_TimeParam[elementIndex].StepValue=Light_TimeParam[elementIndex].StepValue-1;         
 80102cc:	78fa      	ldrb	r2, [r7, #3]
 80102ce:	4932      	ldr	r1, [pc, #200]	@ (8010398 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 80102d0:	4613      	mov	r3, r2
 80102d2:	009b      	lsls	r3, r3, #2
 80102d4:	4413      	add	r3, r2
 80102d6:	005b      	lsls	r3, r3, #1
 80102d8:	440b      	add	r3, r1
 80102da:	f993 3000 	ldrsb.w	r3, [r3]
 80102de:	b2db      	uxtb	r3, r3
 80102e0:	3b01      	subs	r3, #1
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	78fa      	ldrb	r2, [r7, #3]
 80102e6:	b258      	sxtb	r0, r3
 80102e8:	492b      	ldr	r1, [pc, #172]	@ (8010398 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 80102ea:	4613      	mov	r3, r2
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	4413      	add	r3, r2
 80102f0:	005b      	lsls	r3, r3, #1
 80102f2:	440b      	add	r3, r1
 80102f4:	4602      	mov	r2, r0
 80102f6:	701a      	strb	r2, [r3, #0]
    /* updating the remaining time after each step covered*/
    Light_TemporaryStatus[elementIndex].RemainingTime =  Light_TimeParam[elementIndex].StepValue  | (Light_TimeParam[elementIndex].ResBitValue << 6) ;
 80102f8:	78fa      	ldrb	r2, [r7, #3]
 80102fa:	4927      	ldr	r1, [pc, #156]	@ (8010398 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 80102fc:	4613      	mov	r3, r2
 80102fe:	009b      	lsls	r3, r3, #2
 8010300:	4413      	add	r3, r2
 8010302:	005b      	lsls	r3, r3, #1
 8010304:	440b      	add	r3, r1
 8010306:	f993 1000 	ldrsb.w	r1, [r3]
 801030a:	78fa      	ldrb	r2, [r7, #3]
 801030c:	4822      	ldr	r0, [pc, #136]	@ (8010398 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 801030e:	4613      	mov	r3, r2
 8010310:	009b      	lsls	r3, r3, #2
 8010312:	4413      	add	r3, r2
 8010314:	005b      	lsls	r3, r3, #1
 8010316:	4403      	add	r3, r0
 8010318:	3305      	adds	r3, #5
 801031a:	781b      	ldrb	r3, [r3, #0]
 801031c:	019b      	lsls	r3, r3, #6
 801031e:	b25b      	sxtb	r3, r3
 8010320:	430b      	orrs	r3, r1
 8010322:	b25b      	sxtb	r3, r3
 8010324:	78fa      	ldrb	r2, [r7, #3]
 8010326:	b2d8      	uxtb	r0, r3
 8010328:	491c      	ldr	r1, [pc, #112]	@ (801039c <Light_TransitionBehaviourSingle_Param+0x2c8>)
 801032a:	4613      	mov	r3, r2
 801032c:	005b      	lsls	r3, r3, #1
 801032e:	4413      	add	r3, r2
 8010330:	009b      	lsls	r3, r3, #2
 8010332:	4413      	add	r3, r2
 8010334:	440b      	add	r3, r1
 8010336:	330c      	adds	r3, #12
 8010338:	4602      	mov	r2, r0
 801033a:	701a      	strb	r2, [r3, #0]
    LightUpdateFlag = VALUE_UPDATE_SET;
 801033c:	4b18      	ldr	r3, [pc, #96]	@ (80103a0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 801033e:	2201      	movs	r2, #1
 8010340:	701a      	strb	r2, [r3, #0]
    Check_time = 0;
 8010342:	4b14      	ldr	r3, [pc, #80]	@ (8010394 <Light_TransitionBehaviourSingle_Param+0x2c0>)
 8010344:	2200      	movs	r2, #0
 8010346:	601a      	str	r2, [r3, #0]
    Clockflag = 0;
 8010348:	4b11      	ldr	r3, [pc, #68]	@ (8010390 <Light_TransitionBehaviourSingle_Param+0x2bc>)
 801034a:	2200      	movs	r2, #0
 801034c:	701a      	strb	r2, [r3, #0]
    
    /* when transition is completed, disable the transition by disabling 
    transition flag
    */
    if(Light_TimeParam[elementIndex].StepValue == 0)
 801034e:	78fa      	ldrb	r2, [r7, #3]
 8010350:	4911      	ldr	r1, [pc, #68]	@ (8010398 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 8010352:	4613      	mov	r3, r2
 8010354:	009b      	lsls	r3, r3, #2
 8010356:	4413      	add	r3, r2
 8010358:	005b      	lsls	r3, r3, #1
 801035a:	440b      	add	r3, r1
 801035c:	f993 3000 	ldrsb.w	r3, [r3]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d110      	bne.n	8010386 <Light_TransitionBehaviourSingle_Param+0x2b2>
    {              
      Light_ModelFlag[elementIndex].LightTransitionFlag = MODEL_TRANSITION_STOP;
 8010364:	78fa      	ldrb	r2, [r7, #3]
 8010366:	490f      	ldr	r1, [pc, #60]	@ (80103a4 <Light_TransitionBehaviourSingle_Param+0x2d0>)
 8010368:	4613      	mov	r3, r2
 801036a:	005b      	lsls	r3, r3, #1
 801036c:	4413      	add	r3, r2
 801036e:	440b      	add	r3, r1
 8010370:	2200      	movs	r2, #0
 8010372:	701a      	strb	r2, [r3, #0]
      Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt = 1;
 8010374:	78fa      	ldrb	r2, [r7, #3]
 8010376:	490b      	ldr	r1, [pc, #44]	@ (80103a4 <Light_TransitionBehaviourSingle_Param+0x2d0>)
 8010378:	4613      	mov	r3, r2
 801037a:	005b      	lsls	r3, r3, #1
 801037c:	4413      	add	r3, r2
 801037e:	440b      	add	r3, r1
 8010380:	3302      	adds	r3, #2
 8010382:	2201      	movs	r2, #1
 8010384:	701a      	strb	r2, [r3, #0]
                                                                Light_TemporaryStatus[elementIndex].RemainingTime);
    
    
  }
  
  return MOBLE_RESULT_SUCCESS;         
 8010386:	2300      	movs	r3, #0
} 
 8010388:	4618      	mov	r0, r3
 801038a:	3710      	adds	r7, #16
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}
 8010390:	20004642 	.word	0x20004642
 8010394:	20004644 	.word	0x20004644
 8010398:	20004598 	.word	0x20004598
 801039c:	200045ac 	.word	0x200045ac
 80103a0:	20004641 	.word	0x20004641
 80103a4:	200045a4 	.word	0x200045a4

080103a8 <Model_BindingPublishStatus>:
          and supporting binding with other models.
* @param  void
* @param  void
*/ 
void Model_BindingPublishStatus(void)
{
 80103a8:	b590      	push	{r4, r7, lr}
 80103aa:	b08b      	sub	sp, #44	@ 0x2c
 80103ac:	af00      	add	r7, sp, #0
  MOBLE_ADDRESS publishAddress;
  static MOBLEUINT8 elementIndex;
  MODEL_MessageHeader_t msgParam;
  MOBLEUINT16 opcode;
  MOBLEUINT8 const pRxData[12] = {0};
 80103ae:	2300      	movs	r3, #0
 80103b0:	603b      	str	r3, [r7, #0]
 80103b2:	1d3b      	adds	r3, r7, #4
 80103b4:	2200      	movs	r2, #0
 80103b6:	601a      	str	r2, [r3, #0]
 80103b8:	605a      	str	r2, [r3, #4]
  MOBLEUINT32 dataLength = 0;
 80103ba:	2300      	movs	r3, #0
 80103bc:	623b      	str	r3, [r7, #32]
  MOBLE_ADDRESS my_Address;

  if((Light_PublishOpcodeList[elementIndex].BindedStateCount > 0) &&(ADDRESS_IS_UNICAST(Model_Binding_Var.Dst_Peer))) 
 80103be:	4b86      	ldr	r3, [pc, #536]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	461a      	mov	r2, r3
 80103c4:	4985      	ldr	r1, [pc, #532]	@ (80105dc <Model_BindingPublishStatus+0x234>)
 80103c6:	4613      	mov	r3, r2
 80103c8:	00db      	lsls	r3, r3, #3
 80103ca:	4413      	add	r3, r2
 80103cc:	00da      	lsls	r2, r3, #3
 80103ce:	4413      	add	r3, r2
 80103d0:	440b      	add	r3, r1
 80103d2:	3350      	adds	r3, #80	@ 0x50
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	f000 8092 	beq.w	8010500 <Model_BindingPublishStatus+0x158>
 80103dc:	4b80      	ldr	r3, [pc, #512]	@ (80105e0 <Model_BindingPublishStatus+0x238>)
 80103de:	889b      	ldrh	r3, [r3, #4]
 80103e0:	b21b      	sxth	r3, r3
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	f340 808c 	ble.w	8010500 <Model_BindingPublishStatus+0x158>
 80103e8:	4b7d      	ldr	r3, [pc, #500]	@ (80105e0 <Model_BindingPublishStatus+0x238>)
 80103ea:	889b      	ldrh	r3, [r3, #4]
 80103ec:	b21b      	sxth	r3, r3
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	f2c0 8086 	blt.w	8010500 <Model_BindingPublishStatus+0x158>
  { 
    if((Wait_RandomTime() == MOBLE_TRUE)) 
 80103f4:	f7fd fb0e 	bl	800da14 <Wait_RandomTime>
 80103f8:	4603      	mov	r3, r0
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	f040 80e6 	bne.w	80105cc <Model_BindingPublishStatus+0x224>
    {   
      my_Address = BLEMesh_GetAddress(); 
 8010400:	f00c fb3c 	bl	801ca7c <BLEMesh_GetAddress>
 8010404:	4603      	mov	r3, r0
 8010406:	83fb      	strh	r3, [r7, #30]
      publishAddress = BLEMesh_GetPublishAddress(elementIndex, Light_PublishOpcodeList[elementIndex].Model_ID[Publication1SecFlag.count]);
 8010408:	4b73      	ldr	r3, [pc, #460]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 801040a:	7818      	ldrb	r0, [r3, #0]
 801040c:	4b72      	ldr	r3, [pc, #456]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	4619      	mov	r1, r3
 8010412:	4b74      	ldr	r3, [pc, #464]	@ (80105e4 <Model_BindingPublishStatus+0x23c>)
 8010414:	789b      	ldrb	r3, [r3, #2]
 8010416:	4c71      	ldr	r4, [pc, #452]	@ (80105dc <Model_BindingPublishStatus+0x234>)
 8010418:	3314      	adds	r3, #20
 801041a:	005a      	lsls	r2, r3, #1
 801041c:	460b      	mov	r3, r1
 801041e:	00db      	lsls	r3, r3, #3
 8010420:	440b      	add	r3, r1
 8010422:	00d9      	lsls	r1, r3, #3
 8010424:	440b      	add	r3, r1
 8010426:	4413      	add	r3, r2
 8010428:	4423      	add	r3, r4
 801042a:	881b      	ldrh	r3, [r3, #0]
 801042c:	b29b      	uxth	r3, r3
 801042e:	4619      	mov	r1, r3
 8010430:	f00c fb34 	bl	801ca9c <BLEMesh_GetPublishAddress>
 8010434:	4603      	mov	r3, r0
 8010436:	83bb      	strh	r3, [r7, #28]
      opcode = (MOBLEUINT16)Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Publication1SecFlag.count];
 8010438:	4b67      	ldr	r3, [pc, #412]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 801043a:	781b      	ldrb	r3, [r3, #0]
 801043c:	4619      	mov	r1, r3
 801043e:	4b69      	ldr	r3, [pc, #420]	@ (80105e4 <Model_BindingPublishStatus+0x23c>)
 8010440:	789b      	ldrb	r3, [r3, #2]
 8010442:	4866      	ldr	r0, [pc, #408]	@ (80105dc <Model_BindingPublishStatus+0x234>)
 8010444:	005a      	lsls	r2, r3, #1
 8010446:	460b      	mov	r3, r1
 8010448:	00db      	lsls	r3, r3, #3
 801044a:	440b      	add	r3, r1
 801044c:	00d9      	lsls	r1, r3, #3
 801044e:	440b      	add	r3, r1
 8010450:	4413      	add	r3, r2
 8010452:	4403      	add	r3, r0
 8010454:	781a      	ldrb	r2, [r3, #0]
 8010456:	785b      	ldrb	r3, [r3, #1]
 8010458:	021b      	lsls	r3, r3, #8
 801045a:	4313      	orrs	r3, r2
 801045c:	837b      	strh	r3, [r7, #26]

      /*Initialize the Parameters*/
      msgParam.dst_peer = my_Address;
 801045e:	8bfb      	ldrh	r3, [r7, #30]
 8010460:	827b      	strh	r3, [r7, #18]
      msgParam.peer_addr = publishAddress;
 8010462:	8bbb      	ldrh	r3, [r7, #28]
 8010464:	823b      	strh	r3, [r7, #16]
      msgParam.elementIndex = elementIndex;
 8010466:	4b5c      	ldr	r3, [pc, #368]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	733b      	strb	r3, [r7, #12]
      msgParam.rcvdAppKeyOffset = 0;
 801046c:	2300      	movs	r3, #0
 801046e:	75bb      	strb	r3, [r7, #22]
      msgParam.rcvdNetKeyOffset = 0;
 8010470:	2300      	movs	r3, #0
 8010472:	75fb      	strb	r3, [r7, #23]
      msgParam.rssi = 0;
 8010474:	2300      	movs	r3, #0
 8010476:	757b      	strb	r3, [r7, #21]
      msgParam.ttl = 0;
 8010478:	2300      	movs	r3, #0
 801047a:	753b      	strb	r3, [r7, #20]
        
      if(publishAddress != 0x0000) 
 801047c:	8bbb      	ldrh	r3, [r7, #28]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d006      	beq.n	8010490 <Model_BindingPublishStatus+0xe8>
      {
        /*Using the same API used for Acknowledgement, where src & dst getting interchanged.
        Therefore PublishAddress is copied in peer_addr & vice-versa*/  
        Model_SendResponse(&msgParam, opcode, pRxData, dataLength);
 8010482:	463a      	mov	r2, r7
 8010484:	8b79      	ldrh	r1, [r7, #26]
 8010486:	f107 000c 	add.w	r0, r7, #12
 801048a:	6a3b      	ldr	r3, [r7, #32]
 801048c:	f017 fcaa 	bl	8027de4 <Model_SendResponse>
        TRACE_M(TF_LIGHT_M, "Binded publishing address %.2x opcode %.2x model id %.2x \r\n",
                publishAddress,Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Publication1SecFlag.count],
                Light_PublishOpcodeList[elementIndex].Model_ID[Publication1SecFlag.count]);
      }     
       
      Publication1SecFlag.count++;
 8010490:	4b54      	ldr	r3, [pc, #336]	@ (80105e4 <Model_BindingPublishStatus+0x23c>)
 8010492:	789b      	ldrb	r3, [r3, #2]
 8010494:	3301      	adds	r3, #1
 8010496:	b2da      	uxtb	r2, r3
 8010498:	4b52      	ldr	r3, [pc, #328]	@ (80105e4 <Model_BindingPublishStatus+0x23c>)
 801049a:	709a      	strb	r2, [r3, #2]
      if(Publication1SecFlag.count > Light_PublishOpcodeList[elementIndex].BindedStateCount)
 801049c:	4b51      	ldr	r3, [pc, #324]	@ (80105e4 <Model_BindingPublishStatus+0x23c>)
 801049e:	789a      	ldrb	r2, [r3, #2]
 80104a0:	4b4d      	ldr	r3, [pc, #308]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	4619      	mov	r1, r3
 80104a6:	484d      	ldr	r0, [pc, #308]	@ (80105dc <Model_BindingPublishStatus+0x234>)
 80104a8:	460b      	mov	r3, r1
 80104aa:	00db      	lsls	r3, r3, #3
 80104ac:	440b      	add	r3, r1
 80104ae:	00d9      	lsls	r1, r3, #3
 80104b0:	440b      	add	r3, r1
 80104b2:	4403      	add	r3, r0
 80104b4:	3350      	adds	r3, #80	@ 0x50
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	f240 8087 	bls.w	80105cc <Model_BindingPublishStatus+0x224>
      {
        Publication1SecFlag.count = 0;
 80104be:	4b49      	ldr	r3, [pc, #292]	@ (80105e4 <Model_BindingPublishStatus+0x23c>)
 80104c0:	2200      	movs	r2, #0
 80104c2:	709a      	strb	r2, [r3, #2]
        Light_PublishOpcodeList[elementIndex].BindedStateCount = 0;
 80104c4:	4b44      	ldr	r3, [pc, #272]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 80104c6:	781b      	ldrb	r3, [r3, #0]
 80104c8:	461a      	mov	r2, r3
 80104ca:	4944      	ldr	r1, [pc, #272]	@ (80105dc <Model_BindingPublishStatus+0x234>)
 80104cc:	4613      	mov	r3, r2
 80104ce:	00db      	lsls	r3, r3, #3
 80104d0:	4413      	add	r3, r2
 80104d2:	00da      	lsls	r2, r3, #3
 80104d4:	4413      	add	r3, r2
 80104d6:	440b      	add	r3, r1
 80104d8:	3350      	adds	r3, #80	@ 0x50
 80104da:	2200      	movs	r2, #0
 80104dc:	701a      	strb	r2, [r3, #0]
        Publication1SecFlag.Transition1SecFlag = MOBLE_FALSE;
 80104de:	4b41      	ldr	r3, [pc, #260]	@ (80105e4 <Model_BindingPublishStatus+0x23c>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	701a      	strb	r2, [r3, #0]
        elementIndex++;
 80104e4:	4b3c      	ldr	r3, [pc, #240]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	3301      	adds	r3, #1
 80104ea:	b2da      	uxtb	r2, r3
 80104ec:	4b3a      	ldr	r3, [pc, #232]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 80104ee:	701a      	strb	r2, [r3, #0]
        if(elementIndex == APPLICATION_NUMBER_OF_ELEMENTS)
 80104f0:	4b39      	ldr	r3, [pc, #228]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	2b01      	cmp	r3, #1
 80104f6:	d169      	bne.n	80105cc <Model_BindingPublishStatus+0x224>
        {
          elementIndex = 0;
 80104f8:	4b37      	ldr	r3, [pc, #220]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 80104fa:	2200      	movs	r2, #0
 80104fc:	701a      	strb	r2, [r3, #0]
    if((Wait_RandomTime() == MOBLE_TRUE)) 
 80104fe:	e065      	b.n	80105cc <Model_BindingPublishStatus+0x224>
      }
    }
  }
  else
  {
    Publication1SecFlag.count = 0;
 8010500:	4b38      	ldr	r3, [pc, #224]	@ (80105e4 <Model_BindingPublishStatus+0x23c>)
 8010502:	2200      	movs	r2, #0
 8010504:	709a      	strb	r2, [r3, #2]
    Light_PublishOpcodeList[elementIndex].BindedStateCount = 0;
 8010506:	4b34      	ldr	r3, [pc, #208]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	461a      	mov	r2, r3
 801050c:	4933      	ldr	r1, [pc, #204]	@ (80105dc <Model_BindingPublishStatus+0x234>)
 801050e:	4613      	mov	r3, r2
 8010510:	00db      	lsls	r3, r3, #3
 8010512:	4413      	add	r3, r2
 8010514:	00da      	lsls	r2, r3, #3
 8010516:	4413      	add	r3, r2
 8010518:	440b      	add	r3, r1
 801051a:	3350      	adds	r3, #80	@ 0x50
 801051c:	2200      	movs	r2, #0
 801051e:	701a      	strb	r2, [r3, #0]
    if((Generic_ModelFlag[elementIndex].GenericTransitionFlag == MODEL_TRANSITION_STOP) &&
 8010520:	4b2d      	ldr	r3, [pc, #180]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	4619      	mov	r1, r3
 8010526:	4a30      	ldr	r2, [pc, #192]	@ (80105e8 <Model_BindingPublishStatus+0x240>)
 8010528:	460b      	mov	r3, r1
 801052a:	005b      	lsls	r3, r3, #1
 801052c:	440b      	add	r3, r1
 801052e:	4413      	add	r3, r2
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d13c      	bne.n	80105b0 <Model_BindingPublishStatus+0x208>
       (Light_ModelFlag[elementIndex].LightTransitionFlag == MODEL_TRANSITION_STOP))
 8010536:	4b28      	ldr	r3, [pc, #160]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	4619      	mov	r1, r3
 801053c:	4a2b      	ldr	r2, [pc, #172]	@ (80105ec <Model_BindingPublishStatus+0x244>)
 801053e:	460b      	mov	r3, r1
 8010540:	005b      	lsls	r3, r3, #1
 8010542:	440b      	add	r3, r1
 8010544:	4413      	add	r3, r2
 8010546:	781b      	ldrb	r3, [r3, #0]
    if((Generic_ModelFlag[elementIndex].GenericTransitionFlag == MODEL_TRANSITION_STOP) &&
 8010548:	2b00      	cmp	r3, #0
 801054a:	d131      	bne.n	80105b0 <Model_BindingPublishStatus+0x208>
    {
      for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 801054c:	2300      	movs	r3, #0
 801054e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010552:	e029      	b.n	80105a8 <Model_BindingPublishStatus+0x200>
      {
        Light_PublishOpcodeList[elementIndex].Model_ID[idx] = 0;
 8010554:	4b20      	ldr	r3, [pc, #128]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	4619      	mov	r1, r3
 801055a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801055e:	481f      	ldr	r0, [pc, #124]	@ (80105dc <Model_BindingPublishStatus+0x234>)
 8010560:	3314      	adds	r3, #20
 8010562:	005a      	lsls	r2, r3, #1
 8010564:	460b      	mov	r3, r1
 8010566:	00db      	lsls	r3, r3, #3
 8010568:	440b      	add	r3, r1
 801056a:	00d9      	lsls	r1, r3, #3
 801056c:	440b      	add	r3, r1
 801056e:	4413      	add	r3, r2
 8010570:	4403      	add	r3, r0
 8010572:	2200      	movs	r2, #0
 8010574:	701a      	strb	r2, [r3, #0]
 8010576:	2200      	movs	r2, #0
 8010578:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[idx] = 0;
 801057a:	4b17      	ldr	r3, [pc, #92]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 801057c:	781b      	ldrb	r3, [r3, #0]
 801057e:	4619      	mov	r1, r3
 8010580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010584:	4815      	ldr	r0, [pc, #84]	@ (80105dc <Model_BindingPublishStatus+0x234>)
 8010586:	005a      	lsls	r2, r3, #1
 8010588:	460b      	mov	r3, r1
 801058a:	00db      	lsls	r3, r3, #3
 801058c:	440b      	add	r3, r1
 801058e:	00d9      	lsls	r1, r3, #3
 8010590:	440b      	add	r3, r1
 8010592:	4413      	add	r3, r2
 8010594:	4403      	add	r3, r0
 8010596:	2200      	movs	r2, #0
 8010598:	701a      	strb	r2, [r3, #0]
 801059a:	2200      	movs	r2, #0
 801059c:	705a      	strb	r2, [r3, #1]
      for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 801059e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105a2:	3301      	adds	r3, #1
 80105a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80105a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105ac:	2b13      	cmp	r3, #19
 80105ae:	d9d1      	bls.n	8010554 <Model_BindingPublishStatus+0x1ac>
      }		
    }  
    elementIndex++;
 80105b0:	4b09      	ldr	r3, [pc, #36]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	3301      	adds	r3, #1
 80105b6:	b2da      	uxtb	r2, r3
 80105b8:	4b07      	ldr	r3, [pc, #28]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 80105ba:	701a      	strb	r2, [r3, #0]
    if(elementIndex == APPLICATION_NUMBER_OF_ELEMENTS)
 80105bc:	4b06      	ldr	r3, [pc, #24]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	d104      	bne.n	80105ce <Model_BindingPublishStatus+0x226>
    {
      elementIndex = 0;
 80105c4:	4b04      	ldr	r3, [pc, #16]	@ (80105d8 <Model_BindingPublishStatus+0x230>)
 80105c6:	2200      	movs	r2, #0
 80105c8:	701a      	strb	r2, [r3, #0]
    }
  }		
}
 80105ca:	e000      	b.n	80105ce <Model_BindingPublishStatus+0x226>
    if((Wait_RandomTime() == MOBLE_TRUE)) 
 80105cc:	bf00      	nop
}
 80105ce:	bf00      	nop
 80105d0:	372c      	adds	r7, #44	@ 0x2c
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd90      	pop	{r4, r7, pc}
 80105d6:	bf00      	nop
 80105d8:	20004648 	.word	0x20004648
 80105dc:	200045f0 	.word	0x200045f0
 80105e0:	2000454c 	.word	0x2000454c
 80105e4:	200045a8 	.word	0x200045a8
 80105e8:	2000458c 	.word	0x2000458c
 80105ec:	200045a4 	.word	0x200045a4

080105f0 <Light_GetStepValue>:
*         for light model.
* @param stepParam is transition time set value.
* retval void.
*/
void Light_GetStepValue(MOBLEUINT8 stepParam,MOBLEUINT8 elementIndex)
{
 80105f0:	b590      	push	{r4, r7, lr}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	4603      	mov	r3, r0
 80105f8:	460a      	mov	r2, r1
 80105fa:	71fb      	strb	r3, [r7, #7]
 80105fc:	4613      	mov	r3, r2
 80105fe:	71bb      	strb	r3, [r7, #6]
  10 = resolution is 10000 ms.
  11 = resolution is 600000 ms. 
  Last bits from 0 to 5th index is step number.
  */
  
  Light_TimeParam[elementIndex].ResBitValue = stepParam >> 6 ;
 8010600:	79ba      	ldrb	r2, [r7, #6]
 8010602:	79fb      	ldrb	r3, [r7, #7]
 8010604:	099b      	lsrs	r3, r3, #6
 8010606:	b2d8      	uxtb	r0, r3
 8010608:	493e      	ldr	r1, [pc, #248]	@ (8010704 <Light_GetStepValue+0x114>)
 801060a:	4613      	mov	r3, r2
 801060c:	009b      	lsls	r3, r3, #2
 801060e:	4413      	add	r3, r2
 8010610:	005b      	lsls	r3, r3, #1
 8010612:	440b      	add	r3, r1
 8010614:	3305      	adds	r3, #5
 8010616:	4602      	mov	r2, r0
 8010618:	701a      	strb	r2, [r3, #0]
  Light_TimeParam[elementIndex].Res_Value = Get_StepResolutionValue(Light_TimeParam[elementIndex].ResBitValue);
 801061a:	79ba      	ldrb	r2, [r7, #6]
 801061c:	4939      	ldr	r1, [pc, #228]	@ (8010704 <Light_GetStepValue+0x114>)
 801061e:	4613      	mov	r3, r2
 8010620:	009b      	lsls	r3, r3, #2
 8010622:	4413      	add	r3, r2
 8010624:	005b      	lsls	r3, r3, #1
 8010626:	440b      	add	r3, r1
 8010628:	3305      	adds	r3, #5
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	79bc      	ldrb	r4, [r7, #6]
 801062e:	4618      	mov	r0, r3
 8010630:	f7fc ff48 	bl	800d4c4 <Get_StepResolutionValue>
 8010634:	4602      	mov	r2, r0
 8010636:	4933      	ldr	r1, [pc, #204]	@ (8010704 <Light_GetStepValue+0x114>)
 8010638:	4623      	mov	r3, r4
 801063a:	009b      	lsls	r3, r3, #2
 801063c:	4423      	add	r3, r4
 801063e:	005b      	lsls	r3, r3, #1
 8010640:	440b      	add	r3, r1
 8010642:	f8c3 2001 	str.w	r2, [r3, #1]
  Light_TimeParam[elementIndex].StepValue = stepParam & 0x3F ;
 8010646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801064a:	79ba      	ldrb	r2, [r7, #6]
 801064c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010650:	b258      	sxtb	r0, r3
 8010652:	492c      	ldr	r1, [pc, #176]	@ (8010704 <Light_GetStepValue+0x114>)
 8010654:	4613      	mov	r3, r2
 8010656:	009b      	lsls	r3, r3, #2
 8010658:	4413      	add	r3, r2
 801065a:	005b      	lsls	r3, r3, #1
 801065c:	440b      	add	r3, r1
 801065e:	4602      	mov	r2, r0
 8010660:	701a      	strb	r2, [r3, #0]
  
  Light_TimeParam[elementIndex].TotalTime = (Light_TimeParam[elementIndex].StepValue * Light_TimeParam[elementIndex].Res_Value);
 8010662:	79ba      	ldrb	r2, [r7, #6]
 8010664:	4927      	ldr	r1, [pc, #156]	@ (8010704 <Light_GetStepValue+0x114>)
 8010666:	4613      	mov	r3, r2
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	4413      	add	r3, r2
 801066c:	005b      	lsls	r3, r3, #1
 801066e:	440b      	add	r3, r1
 8010670:	f993 3000 	ldrsb.w	r3, [r3]
 8010674:	4618      	mov	r0, r3
 8010676:	79ba      	ldrb	r2, [r7, #6]
 8010678:	4922      	ldr	r1, [pc, #136]	@ (8010704 <Light_GetStepValue+0x114>)
 801067a:	4613      	mov	r3, r2
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	4413      	add	r3, r2
 8010680:	005b      	lsls	r3, r3, #1
 8010682:	440b      	add	r3, r1
 8010684:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8010688:	79ba      	ldrb	r2, [r7, #6]
 801068a:	fb03 f100 	mul.w	r1, r3, r0
 801068e:	481d      	ldr	r0, [pc, #116]	@ (8010704 <Light_GetStepValue+0x114>)
 8010690:	4613      	mov	r3, r2
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	4413      	add	r3, r2
 8010696:	005b      	lsls	r3, r3, #1
 8010698:	4403      	add	r3, r0
 801069a:	f8c3 1006 	str.w	r1, [r3, #6]
  
  if(Light_TimeParam[elementIndex].Res_Value >= 100)
 801069e:	79ba      	ldrb	r2, [r7, #6]
 80106a0:	4918      	ldr	r1, [pc, #96]	@ (8010704 <Light_GetStepValue+0x114>)
 80106a2:	4613      	mov	r3, r2
 80106a4:	009b      	lsls	r3, r3, #2
 80106a6:	4413      	add	r3, r2
 80106a8:	005b      	lsls	r3, r3, #1
 80106aa:	440b      	add	r3, r1
 80106ac:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80106b0:	2b63      	cmp	r3, #99	@ 0x63
 80106b2:	d923      	bls.n	80106fc <Light_GetStepValue+0x10c>
  {
    Light_TimeParam[elementIndex].Res_Value = Light_TimeParam[elementIndex].Res_Value/TRANSITION_SCALER;
 80106b4:	79b9      	ldrb	r1, [r7, #6]
 80106b6:	79ba      	ldrb	r2, [r7, #6]
 80106b8:	4812      	ldr	r0, [pc, #72]	@ (8010704 <Light_GetStepValue+0x114>)
 80106ba:	460b      	mov	r3, r1
 80106bc:	009b      	lsls	r3, r3, #2
 80106be:	440b      	add	r3, r1
 80106c0:	005b      	lsls	r3, r3, #1
 80106c2:	4403      	add	r3, r0
 80106c4:	f8d3 1001 	ldr.w	r1, [r3, #1]
 80106c8:	480e      	ldr	r0, [pc, #56]	@ (8010704 <Light_GetStepValue+0x114>)
 80106ca:	4613      	mov	r3, r2
 80106cc:	009b      	lsls	r3, r3, #2
 80106ce:	4413      	add	r3, r2
 80106d0:	005b      	lsls	r3, r3, #1
 80106d2:	4403      	add	r3, r0
 80106d4:	f8c3 1001 	str.w	r1, [r3, #1]
    Light_TimeParam[elementIndex].StepValue = (Light_TimeParam[elementIndex].StepValue * TRANSITION_SCALER);
 80106d8:	79b9      	ldrb	r1, [r7, #6]
 80106da:	79ba      	ldrb	r2, [r7, #6]
 80106dc:	4809      	ldr	r0, [pc, #36]	@ (8010704 <Light_GetStepValue+0x114>)
 80106de:	460b      	mov	r3, r1
 80106e0:	009b      	lsls	r3, r3, #2
 80106e2:	440b      	add	r3, r1
 80106e4:	005b      	lsls	r3, r3, #1
 80106e6:	4403      	add	r3, r0
 80106e8:	f993 0000 	ldrsb.w	r0, [r3]
 80106ec:	4905      	ldr	r1, [pc, #20]	@ (8010704 <Light_GetStepValue+0x114>)
 80106ee:	4613      	mov	r3, r2
 80106f0:	009b      	lsls	r3, r3, #2
 80106f2:	4413      	add	r3, r2
 80106f4:	005b      	lsls	r3, r3, #1
 80106f6:	440b      	add	r3, r1
 80106f8:	4602      	mov	r2, r0
 80106fa:	701a      	strb	r2, [r3, #0]
  }
  
  TRACE_M(TF_LIGHT_M, "step resolution 0x%.2lx, number of step 0x%.2x \r\n",Light_TimeParam[elementIndex].Res_Value ,
          Light_TimeParam[elementIndex].StepValue  );   
}
 80106fc:	bf00      	nop
 80106fe:	370c      	adds	r7, #12
 8010700:	46bd      	mov	sp, r7
 8010702:	bd90      	pop	{r4, r7, pc}
 8010704:	20004598 	.word	0x20004598

08010708 <Lighting_Process>:
* @brief  Function to execute the transition state machine for particular Light Model
* @param  void
* @retval void
*/ 
void Lighting_Process(void)
{ 
 8010708:	b590      	push	{r4, r7, lr}
 801070a:	b08f      	sub	sp, #60	@ 0x3c
 801070c:	af02      	add	r7, sp, #8
  MOBLE_ADDRESS publishAddress;
  MOBLE_ADDRESS my_Address = BLEMesh_GetAddress();
 801070e:	f00c f9b5 	bl	801ca7c <BLEMesh_GetAddress>
 8010712:	4603      	mov	r3, r0
 8010714:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  MODEL_MessageHeader_t msgParam;
  MOBLEUINT8 elementIndex;
  MOBLEUINT8 const pRxData[12] = {0};
 8010716:	2300      	movs	r3, #0
 8010718:	60fb      	str	r3, [r7, #12]
 801071a:	f107 0310 	add.w	r3, r7, #16
 801071e:	2200      	movs	r2, #0
 8010720:	601a      	str	r2, [r3, #0]
 8010722:	605a      	str	r2, [r3, #4]
  MOBLEUINT32 dataLength = 0;
 8010724:	2300      	movs	r3, #0
 8010726:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  for(elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 8010728:	2300      	movs	r3, #0
 801072a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 801072e:	e0e5      	b.n	80108fc <Lighting_Process+0x1f4>
  {
    my_Address = my_Address+elementIndex;
 8010730:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010734:	b29a      	uxth	r2, r3
 8010736:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010738:	4413      	add	r3, r2
 801073a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    
    MOBLEUINT8 Light_GetBuff[8];
#endif
  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
  if(Light_ModelFlag[elementIndex].LightTransitionFlag == LIGHT_LIGHTNESS_TRANSITION_START)
 801073c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8010740:	4973      	ldr	r1, [pc, #460]	@ (8010910 <Lighting_Process+0x208>)
 8010742:	4613      	mov	r3, r2
 8010744:	005b      	lsls	r3, r3, #1
 8010746:	4413      	add	r3, r2
 8010748:	440b      	add	r3, r1
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	2b01      	cmp	r3, #1
 801074e:	d140      	bne.n	80107d2 <Lighting_Process+0xca>
  {  
     /* Fetching the state value from the application layer to middle layer */
    (Appli_Light_GetStatus_cb.GetLightLightness_cb)(Light_GetBuff, my_Address, elementIndex);
 8010750:	4b70      	ldr	r3, [pc, #448]	@ (8010914 <Lighting_Process+0x20c>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8010758:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 801075a:	1d38      	adds	r0, r7, #4
 801075c:	4798      	blx	r3
    /* Transition function called to change the state in transition */
    Light_TransitionBehaviourSingle_Param(Light_GetBuff, elementIndex);
 801075e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8010762:	1d3b      	adds	r3, r7, #4
 8010764:	4611      	mov	r1, r2
 8010766:	4618      	mov	r0, r3
 8010768:	f7ff fcb4 	bl	80100d4 <Light_TransitionBehaviourSingle_Param>
    if(LightUpdateFlag == VALUE_UPDATE_SET)
 801076c:	4b6a      	ldr	r3, [pc, #424]	@ (8010918 <Lighting_Process+0x210>)
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	2b01      	cmp	r3, #1
 8010772:	d12e      	bne.n	80107d2 <Lighting_Process+0xca>
    {
      /* updating the state value after the each transition step complete */
      Light_LightnessStateUpdate_Process(elementIndex);
 8010774:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010778:	4618      	mov	r0, r3
 801077a:	f000 f8d5 	bl	8010928 <Light_LightnessStateUpdate_Process>
      /*Application Callback */
      (LightAppli_cb.Lightness_Set_cb)(&Light_LightnessStatus[elementIndex],0, my_Address, elementIndex); 
 801077e:	4b67      	ldr	r3, [pc, #412]	@ (801091c <Lighting_Process+0x214>)
 8010780:	681c      	ldr	r4, [r3, #0]
 8010782:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8010786:	4613      	mov	r3, r2
 8010788:	00db      	lsls	r3, r3, #3
 801078a:	4413      	add	r3, r2
 801078c:	4a64      	ldr	r2, [pc, #400]	@ (8010920 <Lighting_Process+0x218>)
 801078e:	1898      	adds	r0, r3, r2
 8010790:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010794:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010796:	2100      	movs	r1, #0
 8010798:	47a0      	blx	r4
      /* Binding of actual light lightness with other models */
      Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_ACTUAL_SET , 0,elementIndex,
 801079a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 801079e:	495c      	ldr	r1, [pc, #368]	@ (8010910 <Lighting_Process+0x208>)
 80107a0:	4613      	mov	r3, r2
 80107a2:	005b      	lsls	r3, r3, #1
 80107a4:	4413      	add	r3, r2
 80107a6:	440b      	add	r3, r1
 80107a8:	7819      	ldrb	r1, [r3, #0]
 80107aa:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80107ae:	4858      	ldr	r0, [pc, #352]	@ (8010910 <Lighting_Process+0x208>)
 80107b0:	4613      	mov	r3, r2
 80107b2:	005b      	lsls	r3, r3, #1
 80107b4:	4413      	add	r3, r2
 80107b6:	4403      	add	r3, r0
 80107b8:	3302      	adds	r3, #2
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80107c0:	9300      	str	r3, [sp, #0]
 80107c2:	460b      	mov	r3, r1
 80107c4:	2100      	movs	r1, #0
 80107c6:	2002      	movs	r0, #2
 80107c8:	f000 fac2 	bl	8010d50 <Light_Lightness_Binding>
                              Light_ModelFlag[elementIndex].LightTransitionFlag,Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt);
      LightUpdateFlag = VALUE_UPDATE_RESET;
 80107cc:	4b52      	ldr	r3, [pc, #328]	@ (8010918 <Lighting_Process+0x210>)
 80107ce:	2200      	movs	r2, #0
 80107d0:	701a      	strb	r2, [r3, #0]
    }
  }  
  if(Light_ModelFlag[elementIndex].LightTransitionFlag == LIGHT_LINEAR_TRANSITION_START)
 80107d2:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80107d6:	494e      	ldr	r1, [pc, #312]	@ (8010910 <Lighting_Process+0x208>)
 80107d8:	4613      	mov	r3, r2
 80107da:	005b      	lsls	r3, r3, #1
 80107dc:	4413      	add	r3, r2
 80107de:	440b      	add	r3, r1
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	2b02      	cmp	r3, #2
 80107e4:	d140      	bne.n	8010868 <Lighting_Process+0x160>
  {
    /* Fetching the state value from the application layer to middle layer */
    (Appli_Light_GetStatus_cb.GetLightLightnessLinear_cb)(Light_GetBuff,my_Address, elementIndex);
 80107e6:	4b4b      	ldr	r3, [pc, #300]	@ (8010914 <Lighting_Process+0x20c>)
 80107e8:	685b      	ldr	r3, [r3, #4]
 80107ea:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80107ee:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80107f0:	1d38      	adds	r0, r7, #4
 80107f2:	4798      	blx	r3
    /* Transition function called to change the state in transition */
    Light_TransitionBehaviourSingle_Param(Light_GetBuff,elementIndex);
 80107f4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80107f8:	1d3b      	adds	r3, r7, #4
 80107fa:	4611      	mov	r1, r2
 80107fc:	4618      	mov	r0, r3
 80107fe:	f7ff fc69 	bl	80100d4 <Light_TransitionBehaviourSingle_Param>
    if(LightUpdateFlag == VALUE_UPDATE_SET)
 8010802:	4b45      	ldr	r3, [pc, #276]	@ (8010918 <Lighting_Process+0x210>)
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	2b01      	cmp	r3, #1
 8010808:	d12e      	bne.n	8010868 <Lighting_Process+0x160>
    {
      /* updating the state value after the each transition step complete */
      Light_LinearStateUpdate_Process(elementIndex);
 801080a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801080e:	4618      	mov	r0, r3
 8010810:	f000 f9ba 	bl	8010b88 <Light_LinearStateUpdate_Process>
      /*Application Callback */
      (LightAppli_cb.Lightness_Linear_Set_cb)(&Light_LightnessStatus[elementIndex], 0, my_Address, elementIndex);
 8010814:	4b41      	ldr	r3, [pc, #260]	@ (801091c <Lighting_Process+0x214>)
 8010816:	689c      	ldr	r4, [r3, #8]
 8010818:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 801081c:	4613      	mov	r3, r2
 801081e:	00db      	lsls	r3, r3, #3
 8010820:	4413      	add	r3, r2
 8010822:	4a3f      	ldr	r2, [pc, #252]	@ (8010920 <Lighting_Process+0x218>)
 8010824:	1898      	adds	r0, r3, r2
 8010826:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801082a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801082c:	2100      	movs	r1, #0
 801082e:	47a0      	blx	r4
      /* Binding of data of light lightness with light linear */
      Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_LINEAR_SET , 0,elementIndex,
 8010830:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8010834:	4936      	ldr	r1, [pc, #216]	@ (8010910 <Lighting_Process+0x208>)
 8010836:	4613      	mov	r3, r2
 8010838:	005b      	lsls	r3, r3, #1
 801083a:	4413      	add	r3, r2
 801083c:	440b      	add	r3, r1
 801083e:	7819      	ldrb	r1, [r3, #0]
 8010840:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8010844:	4832      	ldr	r0, [pc, #200]	@ (8010910 <Lighting_Process+0x208>)
 8010846:	4613      	mov	r3, r2
 8010848:	005b      	lsls	r3, r3, #1
 801084a:	4413      	add	r3, r2
 801084c:	4403      	add	r3, r0
 801084e:	3302      	adds	r3, #2
 8010850:	781b      	ldrb	r3, [r3, #0]
 8010852:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8010856:	9300      	str	r3, [sp, #0]
 8010858:	460b      	mov	r3, r1
 801085a:	2100      	movs	r1, #0
 801085c:	2003      	movs	r0, #3
 801085e:	f000 fa77 	bl	8010d50 <Light_Lightness_Binding>
                              Light_ModelFlag[elementIndex].LightTransitionFlag,Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt);
      LightUpdateFlag = VALUE_UPDATE_RESET;
 8010862:	4b2d      	ldr	r3, [pc, #180]	@ (8010918 <Lighting_Process+0x210>)
 8010864:	2200      	movs	r2, #0
 8010866:	701a      	strb	r2, [r3, #0]
      LightUpdateFlag = VALUE_UPDATE_RESET;
    }
  }
#endif  
  /* Check if Transition is completed */
  if(Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt == MOBLE_TRUE)
 8010868:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 801086c:	4928      	ldr	r1, [pc, #160]	@ (8010910 <Lighting_Process+0x208>)
 801086e:	4613      	mov	r3, r2
 8010870:	005b      	lsls	r3, r3, #1
 8010872:	4413      	add	r3, r2
 8010874:	440b      	add	r3, r1
 8010876:	3302      	adds	r3, #2
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	2b01      	cmp	r3, #1
 801087c:	d137      	bne.n	80108ee <Lighting_Process+0x1e6>
  {         
    my_Address = BLEMesh_GetAddress();
 801087e:	f00c f8fd 	bl	801ca7c <BLEMesh_GetAddress>
 8010882:	4603      	mov	r3, r0
 8010884:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    publishAddress = BLEMesh_GetPublishAddress(elementIndex, Model_Binding_Var.Model_ID);
 8010886:	4b27      	ldr	r3, [pc, #156]	@ (8010924 <Lighting_Process+0x21c>)
 8010888:	885b      	ldrh	r3, [r3, #2]
 801088a:	461a      	mov	r2, r3
 801088c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010890:	4611      	mov	r1, r2
 8010892:	4618      	mov	r0, r3
 8010894:	f00c f902 	bl	801ca9c <BLEMesh_GetPublishAddress>
 8010898:	4603      	mov	r3, r0
 801089a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    
    /* Initialize the messageParam*/
    msgParam.dst_peer = my_Address;
 801089c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801089e:	83fb      	strh	r3, [r7, #30]
    msgParam.peer_addr = publishAddress;
 80108a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80108a2:	83bb      	strh	r3, [r7, #28]
    msgParam.elementIndex = elementIndex;
 80108a4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80108a8:	763b      	strb	r3, [r7, #24]
    msgParam.rcvdAppKeyOffset = 0;
 80108aa:	2300      	movs	r3, #0
 80108ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    msgParam.rcvdNetKeyOffset = 0;
 80108b0:	2300      	movs	r3, #0
 80108b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    msgParam.rssi = 0;
 80108b6:	2300      	movs	r3, #0
 80108b8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    msgParam.ttl = 0;
 80108bc:	2300      	movs	r3, #0
 80108be:	f887 3020 	strb.w	r3, [r7, #32]
  
    if(publishAddress != 0x00)
 80108c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d008      	beq.n	80108da <Lighting_Process+0x1d2>
    {
      /*Using the same API used for Acknowledgement, where src & dst getting interchanged.
        Therefore PublishAddress is copied in peer_addr & vice-versa*/ 
      Model_SendResponse(&msgParam, Model_Binding_Var.Model_Rx_Opcode, pRxData, dataLength);
 80108c8:	4b16      	ldr	r3, [pc, #88]	@ (8010924 <Lighting_Process+0x21c>)
 80108ca:	8819      	ldrh	r1, [r3, #0]
 80108cc:	f107 020c 	add.w	r2, r7, #12
 80108d0:	f107 0018 	add.w	r0, r7, #24
 80108d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108d6:	f017 fa85 	bl	8027de4 <Model_SendResponse>
      TRACE_M(TF_LIGHT_M, "Publishing the status after transition complete opcode %.2x model id %.2x \r\n",
       Model_Binding_Var.Model_Rx_Opcode,Model_Binding_Var.Model_ID);
    }
    Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt = MOBLE_FALSE;
 80108da:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80108de:	490c      	ldr	r1, [pc, #48]	@ (8010910 <Lighting_Process+0x208>)
 80108e0:	4613      	mov	r3, r2
 80108e2:	005b      	lsls	r3, r3, #1
 80108e4:	4413      	add	r3, r2
 80108e6:	440b      	add	r3, r1
 80108e8:	3302      	adds	r3, #2
 80108ea:	2200      	movs	r2, #0
 80108ec:	701a      	strb	r2, [r3, #0]
  }
#ifdef  ENABLE_MODEL_BINDING 
    /* publish the status of the node to the publish address */
  Model_BindingPublishStatus();
 80108ee:	f7ff fd5b 	bl	80103a8 <Model_BindingPublishStatus>
  for(elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 80108f2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80108f6:	3301      	adds	r3, #1
 80108f8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80108fc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010900:	2b00      	cmp	r3, #0
 8010902:	f43f af15 	beq.w	8010730 <Lighting_Process+0x28>
#endif  
}
}
 8010906:	bf00      	nop
 8010908:	bf00      	nop
 801090a:	3734      	adds	r7, #52	@ 0x34
 801090c:	46bd      	mov	sp, r7
 801090e:	bd90      	pop	{r4, r7, pc}
 8010910:	200045a4 	.word	0x200045a4
 8010914:	08030918 	.word	0x08030918
 8010918:	20004641 	.word	0x20004641
 801091c:	0803095c 	.word	0x0803095c
 8010920:	200045c4 	.word	0x200045c4
 8010924:	2000454c 	.word	0x2000454c

08010928 <Light_LightnessStateUpdate_Process>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return MOBLE_RESULT.
*/
MOBLE_RESULT Light_LightnessStateUpdate_Process(MOBLEUINT8 elementIndex)
{
 8010928:	b590      	push	{r4, r7, lr}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
 801092e:	4603      	mov	r3, r0
 8010930:	71fb      	strb	r3, [r7, #7]
  Light_LightnessStatus[elementIndex].LightnessPresentValue16 = Light_TemporaryStatus[elementIndex].PresentParam_1;
 8010932:	79fa      	ldrb	r2, [r7, #7]
 8010934:	79f9      	ldrb	r1, [r7, #7]
 8010936:	483b      	ldr	r0, [pc, #236]	@ (8010a24 <Light_LightnessStateUpdate_Process+0xfc>)
 8010938:	4613      	mov	r3, r2
 801093a:	005b      	lsls	r3, r3, #1
 801093c:	4413      	add	r3, r2
 801093e:	009b      	lsls	r3, r3, #2
 8010940:	4413      	add	r3, r2
 8010942:	4403      	add	r3, r0
 8010944:	881b      	ldrh	r3, [r3, #0]
 8010946:	b298      	uxth	r0, r3
 8010948:	4a37      	ldr	r2, [pc, #220]	@ (8010a28 <Light_LightnessStateUpdate_Process+0x100>)
 801094a:	460b      	mov	r3, r1
 801094c:	00db      	lsls	r3, r3, #3
 801094e:	440b      	add	r3, r1
 8010950:	4413      	add	r3, r2
 8010952:	4602      	mov	r2, r0
 8010954:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].TargetValue16 = Light_TemporaryStatus[elementIndex].TargetParam_1;
 8010956:	79fa      	ldrb	r2, [r7, #7]
 8010958:	79f9      	ldrb	r1, [r7, #7]
 801095a:	4832      	ldr	r0, [pc, #200]	@ (8010a24 <Light_LightnessStateUpdate_Process+0xfc>)
 801095c:	4613      	mov	r3, r2
 801095e:	005b      	lsls	r3, r3, #1
 8010960:	4413      	add	r3, r2
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	4413      	add	r3, r2
 8010966:	4403      	add	r3, r0
 8010968:	3306      	adds	r3, #6
 801096a:	881b      	ldrh	r3, [r3, #0]
 801096c:	b298      	uxth	r0, r3
 801096e:	4a2e      	ldr	r2, [pc, #184]	@ (8010a28 <Light_LightnessStateUpdate_Process+0x100>)
 8010970:	460b      	mov	r3, r1
 8010972:	00db      	lsls	r3, r3, #3
 8010974:	440b      	add	r3, r1
 8010976:	4413      	add	r3, r2
 8010978:	3304      	adds	r3, #4
 801097a:	4602      	mov	r2, r0
 801097c:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].RemainingTime = Light_TemporaryStatus[elementIndex].RemainingTime ;
 801097e:	79fa      	ldrb	r2, [r7, #7]
 8010980:	79f9      	ldrb	r1, [r7, #7]
 8010982:	4828      	ldr	r0, [pc, #160]	@ (8010a24 <Light_LightnessStateUpdate_Process+0xfc>)
 8010984:	4613      	mov	r3, r2
 8010986:	005b      	lsls	r3, r3, #1
 8010988:	4413      	add	r3, r2
 801098a:	009b      	lsls	r3, r3, #2
 801098c:	4413      	add	r3, r2
 801098e:	4403      	add	r3, r0
 8010990:	330c      	adds	r3, #12
 8010992:	7818      	ldrb	r0, [r3, #0]
 8010994:	4a24      	ldr	r2, [pc, #144]	@ (8010a28 <Light_LightnessStateUpdate_Process+0x100>)
 8010996:	460b      	mov	r3, r1
 8010998:	00db      	lsls	r3, r3, #3
 801099a:	440b      	add	r3, r1
 801099c:	4413      	add	r3, r2
 801099e:	3306      	adds	r3, #6
 80109a0:	4602      	mov	r2, r0
 80109a2:	701a      	strb	r2, [r3, #0]
	
  if((Light_LightnessStatus[elementIndex].LightnessPresentValue16 == Light_LightnessStatus[elementIndex].TargetValue16) && 
 80109a4:	79fa      	ldrb	r2, [r7, #7]
 80109a6:	4920      	ldr	r1, [pc, #128]	@ (8010a28 <Light_LightnessStateUpdate_Process+0x100>)
 80109a8:	4613      	mov	r3, r2
 80109aa:	00db      	lsls	r3, r3, #3
 80109ac:	4413      	add	r3, r2
 80109ae:	440b      	add	r3, r1
 80109b0:	881b      	ldrh	r3, [r3, #0]
 80109b2:	b299      	uxth	r1, r3
 80109b4:	79fa      	ldrb	r2, [r7, #7]
 80109b6:	481c      	ldr	r0, [pc, #112]	@ (8010a28 <Light_LightnessStateUpdate_Process+0x100>)
 80109b8:	4613      	mov	r3, r2
 80109ba:	00db      	lsls	r3, r3, #3
 80109bc:	4413      	add	r3, r2
 80109be:	4403      	add	r3, r0
 80109c0:	3304      	adds	r3, #4
 80109c2:	881b      	ldrh	r3, [r3, #0]
 80109c4:	b29b      	uxth	r3, r3
 80109c6:	4299      	cmp	r1, r3
 80109c8:	d126      	bne.n	8010a18 <Light_LightnessStateUpdate_Process+0xf0>
     (Light_LightnessStatus[elementIndex].LightnessPresentValue16 > 0))
 80109ca:	79fa      	ldrb	r2, [r7, #7]
 80109cc:	4916      	ldr	r1, [pc, #88]	@ (8010a28 <Light_LightnessStateUpdate_Process+0x100>)
 80109ce:	4613      	mov	r3, r2
 80109d0:	00db      	lsls	r3, r3, #3
 80109d2:	4413      	add	r3, r2
 80109d4:	440b      	add	r3, r1
 80109d6:	881b      	ldrh	r3, [r3, #0]
 80109d8:	b29b      	uxth	r3, r3
  if((Light_LightnessStatus[elementIndex].LightnessPresentValue16 == Light_LightnessStatus[elementIndex].TargetValue16) && 
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d01c      	beq.n	8010a18 <Light_LightnessStateUpdate_Process+0xf0>
  {
    Light_LightnessStatus[elementIndex].LightnessLastStatus = Light_LightnessStatus[elementIndex].LightnessPresentValue16;
 80109de:	79f9      	ldrb	r1, [r7, #7]
 80109e0:	79fa      	ldrb	r2, [r7, #7]
 80109e2:	4811      	ldr	r0, [pc, #68]	@ (8010a28 <Light_LightnessStateUpdate_Process+0x100>)
 80109e4:	460b      	mov	r3, r1
 80109e6:	00db      	lsls	r3, r3, #3
 80109e8:	440b      	add	r3, r1
 80109ea:	4403      	add	r3, r0
 80109ec:	881b      	ldrh	r3, [r3, #0]
 80109ee:	b298      	uxth	r0, r3
 80109f0:	490d      	ldr	r1, [pc, #52]	@ (8010a28 <Light_LightnessStateUpdate_Process+0x100>)
 80109f2:	4613      	mov	r3, r2
 80109f4:	00db      	lsls	r3, r3, #3
 80109f6:	4413      	add	r3, r2
 80109f8:	440b      	add	r3, r1
 80109fa:	4602      	mov	r2, r0
 80109fc:	f8a3 2007 	strh.w	r2, [r3, #7]
		  
    (LightAppli_cb.Lightness_Last_Set_cb)(&Light_LightnessStatus[elementIndex],elementIndex);                                       
 8010a00:	4b0a      	ldr	r3, [pc, #40]	@ (8010a2c <Light_LightnessStateUpdate_Process+0x104>)
 8010a02:	699c      	ldr	r4, [r3, #24]
 8010a04:	79fa      	ldrb	r2, [r7, #7]
 8010a06:	4613      	mov	r3, r2
 8010a08:	00db      	lsls	r3, r3, #3
 8010a0a:	4413      	add	r3, r2
 8010a0c:	4a06      	ldr	r2, [pc, #24]	@ (8010a28 <Light_LightnessStateUpdate_Process+0x100>)
 8010a0e:	4413      	add	r3, r2
 8010a10:	79fa      	ldrb	r2, [r7, #7]
 8010a12:	4611      	mov	r1, r2
 8010a14:	4618      	mov	r0, r3
 8010a16:	47a0      	blx	r4
  }
  return MOBLE_RESULT_SUCCESS;
 8010a18:	2300      	movs	r3, #0
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	370c      	adds	r7, #12
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd90      	pop	{r4, r7, pc}
 8010a22:	bf00      	nop
 8010a24:	200045ac 	.word	0x200045ac
 8010a28:	200045c4 	.word	0x200045c4
 8010a2c:	0803095c 	.word	0x0803095c

08010a30 <Light_ModelRangeInit>:
* @brief Light_ModelRangeInit: Function called to initialise the minimum and maximum range of model state.
* @param void
* return void.
*/
void Light_ModelRangeInit(void)
{
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
	
  for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 8010a36:	2300      	movs	r3, #0
 8010a38:	71fb      	strb	r3, [r7, #7]
 8010a3a:	e092      	b.n	8010b62 <Light_ModelRangeInit+0x132>
  {
    Light_LightnessRangeParam[elementIndex].StatusCode = 0x00;
 8010a3c:	79fa      	ldrb	r2, [r7, #7]
 8010a3e:	494e      	ldr	r1, [pc, #312]	@ (8010b78 <Light_ModelRangeInit+0x148>)
 8010a40:	4613      	mov	r3, r2
 8010a42:	009b      	lsls	r3, r3, #2
 8010a44:	4413      	add	r3, r2
 8010a46:	440b      	add	r3, r1
 8010a48:	2200      	movs	r2, #0
 8010a4a:	701a      	strb	r2, [r3, #0]
    Light_LightnessRangeParam[elementIndex].MinRangeStatus = MIN_VALID_RANGE;
 8010a4c:	79fa      	ldrb	r2, [r7, #7]
 8010a4e:	494a      	ldr	r1, [pc, #296]	@ (8010b78 <Light_ModelRangeInit+0x148>)
 8010a50:	4613      	mov	r3, r2
 8010a52:	009b      	lsls	r3, r3, #2
 8010a54:	4413      	add	r3, r2
 8010a56:	440b      	add	r3, r1
 8010a58:	2200      	movs	r2, #0
 8010a5a:	705a      	strb	r2, [r3, #1]
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	709a      	strb	r2, [r3, #2]
    Light_LightnessRangeParam[elementIndex].MaxRangeStatus = MAX_VALID_RANGE;
 8010a60:	79fa      	ldrb	r2, [r7, #7]
 8010a62:	4945      	ldr	r1, [pc, #276]	@ (8010b78 <Light_ModelRangeInit+0x148>)
 8010a64:	4613      	mov	r3, r2
 8010a66:	009b      	lsls	r3, r3, #2
 8010a68:	4413      	add	r3, r2
 8010a6a:	440b      	add	r3, r1
 8010a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a70:	70da      	strb	r2, [r3, #3]
 8010a72:	f04f 32ff 	mov.w	r2, #4294967295
 8010a76:	711a      	strb	r2, [r3, #4]
			
    CtlTemperatureRangeParam[elementIndex].StatusCode = 0x00;
 8010a78:	79fa      	ldrb	r2, [r7, #7]
 8010a7a:	4940      	ldr	r1, [pc, #256]	@ (8010b7c <Light_ModelRangeInit+0x14c>)
 8010a7c:	4613      	mov	r3, r2
 8010a7e:	009b      	lsls	r3, r3, #2
 8010a80:	4413      	add	r3, r2
 8010a82:	440b      	add	r3, r1
 8010a84:	2200      	movs	r2, #0
 8010a86:	701a      	strb	r2, [r3, #0]
    CtlTemperatureRangeParam[elementIndex].MinRangeStatus = MIN_CTL_TEMP_RANGE;
 8010a88:	79fa      	ldrb	r2, [r7, #7]
 8010a8a:	493c      	ldr	r1, [pc, #240]	@ (8010b7c <Light_ModelRangeInit+0x14c>)
 8010a8c:	4613      	mov	r3, r2
 8010a8e:	009b      	lsls	r3, r3, #2
 8010a90:	4413      	add	r3, r2
 8010a92:	440b      	add	r3, r1
 8010a94:	2200      	movs	r2, #0
 8010a96:	f042 0220 	orr.w	r2, r2, #32
 8010a9a:	705a      	strb	r2, [r3, #1]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	f042 0203 	orr.w	r2, r2, #3
 8010aa2:	709a      	strb	r2, [r3, #2]
    CtlTemperatureRangeParam[elementIndex].MaxRangeStatus = MAX_CTL_TEMP_RANGE;
 8010aa4:	79fa      	ldrb	r2, [r7, #7]
 8010aa6:	4935      	ldr	r1, [pc, #212]	@ (8010b7c <Light_ModelRangeInit+0x14c>)
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	009b      	lsls	r3, r3, #2
 8010aac:	4413      	add	r3, r2
 8010aae:	440b      	add	r3, r1
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	f042 0220 	orr.w	r2, r2, #32
 8010ab6:	70da      	strb	r2, [r3, #3]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	f042 024e 	orr.w	r2, r2, #78	@ 0x4e
 8010abe:	711a      	strb	r2, [r3, #4]
			
    Light_HslRangeParam[elementIndex].Status_Code = 0x00;
 8010ac0:	79fa      	ldrb	r2, [r7, #7]
 8010ac2:	492f      	ldr	r1, [pc, #188]	@ (8010b80 <Light_ModelRangeInit+0x150>)
 8010ac4:	4613      	mov	r3, r2
 8010ac6:	00db      	lsls	r3, r3, #3
 8010ac8:	4413      	add	r3, r2
 8010aca:	440b      	add	r3, r1
 8010acc:	2200      	movs	r2, #0
 8010ace:	701a      	strb	r2, [r3, #0]
    Light_HslRangeParam[elementIndex].HslHueMinRange16 = MIN_HUE_RANGE;
 8010ad0:	79fa      	ldrb	r2, [r7, #7]
 8010ad2:	492b      	ldr	r1, [pc, #172]	@ (8010b80 <Light_ModelRangeInit+0x150>)
 8010ad4:	4613      	mov	r3, r2
 8010ad6:	00db      	lsls	r3, r3, #3
 8010ad8:	4413      	add	r3, r2
 8010ada:	440b      	add	r3, r1
 8010adc:	2200      	movs	r2, #0
 8010ade:	705a      	strb	r2, [r3, #1]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	709a      	strb	r2, [r3, #2]
    Light_HslRangeParam[elementIndex].HslHueMaxRange16 = MAX_HUE_RANGE;
 8010ae4:	79fa      	ldrb	r2, [r7, #7]
 8010ae6:	4926      	ldr	r1, [pc, #152]	@ (8010b80 <Light_ModelRangeInit+0x150>)
 8010ae8:	4613      	mov	r3, r2
 8010aea:	00db      	lsls	r3, r3, #3
 8010aec:	4413      	add	r3, r2
 8010aee:	440b      	add	r3, r1
 8010af0:	f04f 32ff 	mov.w	r2, #4294967295
 8010af4:	70da      	strb	r2, [r3, #3]
 8010af6:	f04f 32ff 	mov.w	r2, #4294967295
 8010afa:	711a      	strb	r2, [r3, #4]
    Light_HslRangeParam[elementIndex].HslMinSaturation16 = MIN_SATURATION_RANGE;
 8010afc:	79fa      	ldrb	r2, [r7, #7]
 8010afe:	4920      	ldr	r1, [pc, #128]	@ (8010b80 <Light_ModelRangeInit+0x150>)
 8010b00:	4613      	mov	r3, r2
 8010b02:	00db      	lsls	r3, r3, #3
 8010b04:	4413      	add	r3, r2
 8010b06:	440b      	add	r3, r1
 8010b08:	2200      	movs	r2, #0
 8010b0a:	715a      	strb	r2, [r3, #5]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	719a      	strb	r2, [r3, #6]
    Light_HslRangeParam[elementIndex].HslMaxSaturation16 = MAX_SATURATION_RANGE;
 8010b10:	79fa      	ldrb	r2, [r7, #7]
 8010b12:	491b      	ldr	r1, [pc, #108]	@ (8010b80 <Light_ModelRangeInit+0x150>)
 8010b14:	4613      	mov	r3, r2
 8010b16:	00db      	lsls	r3, r3, #3
 8010b18:	4413      	add	r3, r2
 8010b1a:	440b      	add	r3, r1
 8010b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8010b20:	71da      	strb	r2, [r3, #7]
 8010b22:	f04f 32ff 	mov.w	r2, #4294967295
 8010b26:	721a      	strb	r2, [r3, #8]
			
    Light_ModelFlag[elementIndex].LightOptionalParam = 0x00;
 8010b28:	79fa      	ldrb	r2, [r7, #7]
 8010b2a:	4916      	ldr	r1, [pc, #88]	@ (8010b84 <Light_ModelRangeInit+0x154>)
 8010b2c:	4613      	mov	r3, r2
 8010b2e:	005b      	lsls	r3, r3, #1
 8010b30:	4413      	add	r3, r2
 8010b32:	440b      	add	r3, r1
 8010b34:	3301      	adds	r3, #1
 8010b36:	2200      	movs	r2, #0
 8010b38:	701a      	strb	r2, [r3, #0]
    Light_ModelFlag[elementIndex].LightTransitionFlag = 0x0;
 8010b3a:	79fa      	ldrb	r2, [r7, #7]
 8010b3c:	4911      	ldr	r1, [pc, #68]	@ (8010b84 <Light_ModelRangeInit+0x154>)
 8010b3e:	4613      	mov	r3, r2
 8010b40:	005b      	lsls	r3, r3, #1
 8010b42:	4413      	add	r3, r2
 8010b44:	440b      	add	r3, r1
 8010b46:	2200      	movs	r2, #0
 8010b48:	701a      	strb	r2, [r3, #0]
    Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt = 0x00;  
 8010b4a:	79fa      	ldrb	r2, [r7, #7]
 8010b4c:	490d      	ldr	r1, [pc, #52]	@ (8010b84 <Light_ModelRangeInit+0x154>)
 8010b4e:	4613      	mov	r3, r2
 8010b50:	005b      	lsls	r3, r3, #1
 8010b52:	4413      	add	r3, r2
 8010b54:	440b      	add	r3, r1
 8010b56:	3302      	adds	r3, #2
 8010b58:	2200      	movs	r2, #0
 8010b5a:	701a      	strb	r2, [r3, #0]
  for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 8010b5c:	79fb      	ldrb	r3, [r7, #7]
 8010b5e:	3301      	adds	r3, #1
 8010b60:	71fb      	strb	r3, [r7, #7]
 8010b62:	79fb      	ldrb	r3, [r7, #7]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	f43f af69 	beq.w	8010a3c <Light_ModelRangeInit+0xc>
  }
}
 8010b6a:	bf00      	nop
 8010b6c:	bf00      	nop
 8010b6e:	370c      	adds	r7, #12
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr
 8010b78:	200045d4 	.word	0x200045d4
 8010b7c:	200045dc 	.word	0x200045dc
 8010b80:	200045e4 	.word	0x200045e4
 8010b84:	200045a4 	.word	0x200045a4

08010b88 <Light_LinearStateUpdate_Process>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return MOBLE_RESULT.
*/
MOBLE_RESULT Light_LinearStateUpdate_Process(MOBLEUINT8 elementIndex)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b083      	sub	sp, #12
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	4603      	mov	r3, r0
 8010b90:	71fb      	strb	r3, [r7, #7]
  Light_LightnessStatus[elementIndex].LinearPresentValue16 = Light_TemporaryStatus[elementIndex].PresentParam_1;
 8010b92:	79fa      	ldrb	r2, [r7, #7]
 8010b94:	79f9      	ldrb	r1, [r7, #7]
 8010b96:	481f      	ldr	r0, [pc, #124]	@ (8010c14 <Light_LinearStateUpdate_Process+0x8c>)
 8010b98:	4613      	mov	r3, r2
 8010b9a:	005b      	lsls	r3, r3, #1
 8010b9c:	4413      	add	r3, r2
 8010b9e:	009b      	lsls	r3, r3, #2
 8010ba0:	4413      	add	r3, r2
 8010ba2:	4403      	add	r3, r0
 8010ba4:	881b      	ldrh	r3, [r3, #0]
 8010ba6:	b298      	uxth	r0, r3
 8010ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8010c18 <Light_LinearStateUpdate_Process+0x90>)
 8010baa:	460b      	mov	r3, r1
 8010bac:	00db      	lsls	r3, r3, #3
 8010bae:	440b      	add	r3, r1
 8010bb0:	4413      	add	r3, r2
 8010bb2:	3302      	adds	r3, #2
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].TargetValue16 =  Light_TemporaryStatus[elementIndex].TargetParam_1;
 8010bb8:	79fa      	ldrb	r2, [r7, #7]
 8010bba:	79f9      	ldrb	r1, [r7, #7]
 8010bbc:	4815      	ldr	r0, [pc, #84]	@ (8010c14 <Light_LinearStateUpdate_Process+0x8c>)
 8010bbe:	4613      	mov	r3, r2
 8010bc0:	005b      	lsls	r3, r3, #1
 8010bc2:	4413      	add	r3, r2
 8010bc4:	009b      	lsls	r3, r3, #2
 8010bc6:	4413      	add	r3, r2
 8010bc8:	4403      	add	r3, r0
 8010bca:	3306      	adds	r3, #6
 8010bcc:	881b      	ldrh	r3, [r3, #0]
 8010bce:	b298      	uxth	r0, r3
 8010bd0:	4a11      	ldr	r2, [pc, #68]	@ (8010c18 <Light_LinearStateUpdate_Process+0x90>)
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	00db      	lsls	r3, r3, #3
 8010bd6:	440b      	add	r3, r1
 8010bd8:	4413      	add	r3, r2
 8010bda:	3304      	adds	r3, #4
 8010bdc:	4602      	mov	r2, r0
 8010bde:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].RemainingTime = Light_TemporaryStatus[elementIndex].RemainingTime ;
 8010be0:	79fa      	ldrb	r2, [r7, #7]
 8010be2:	79f9      	ldrb	r1, [r7, #7]
 8010be4:	480b      	ldr	r0, [pc, #44]	@ (8010c14 <Light_LinearStateUpdate_Process+0x8c>)
 8010be6:	4613      	mov	r3, r2
 8010be8:	005b      	lsls	r3, r3, #1
 8010bea:	4413      	add	r3, r2
 8010bec:	009b      	lsls	r3, r3, #2
 8010bee:	4413      	add	r3, r2
 8010bf0:	4403      	add	r3, r0
 8010bf2:	330c      	adds	r3, #12
 8010bf4:	7818      	ldrb	r0, [r3, #0]
 8010bf6:	4a08      	ldr	r2, [pc, #32]	@ (8010c18 <Light_LinearStateUpdate_Process+0x90>)
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	00db      	lsls	r3, r3, #3
 8010bfc:	440b      	add	r3, r1
 8010bfe:	4413      	add	r3, r2
 8010c00:	3306      	adds	r3, #6
 8010c02:	4602      	mov	r2, r0
 8010c04:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS;
 8010c06:	2300      	movs	r3, #0
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	370c      	adds	r7, #12
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c12:	4770      	bx	lr
 8010c14:	200045ac 	.word	0x200045ac
 8010c18:	200045c4 	.word	0x200045c4

08010c1c <Light_Lightness_Linear_Binding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void
*/
void Light_Lightness_Linear_Binding(MOBLEUINT8 bindingFlag ,MOBLEUINT32 length, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b086      	sub	sp, #24
 8010c20:	af02      	add	r7, sp, #8
 8010c22:	6039      	str	r1, [r7, #0]
 8010c24:	4611      	mov	r1, r2
 8010c26:	461a      	mov	r2, r3
 8010c28:	4603      	mov	r3, r0
 8010c2a:	71fb      	strb	r3, [r7, #7]
 8010c2c:	460b      	mov	r3, r1
 8010c2e:	71bb      	strb	r3, [r7, #6]
 8010c30:	4613      	mov	r3, r2
 8010c32:	717b      	strb	r3, [r7, #5]
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS 
  MOBLE_RESULT result;
  
  if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementIndex)) == (1 << elementIndex))
 8010c34:	79bb      	ldrb	r3, [r7, #6]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	bf0c      	ite	eq
 8010c3a:	2301      	moveq	r3, #1
 8010c3c:	2300      	movne	r3, #0
 8010c3e:	b2db      	uxtb	r3, r3
 8010c40:	4619      	mov	r1, r3
 8010c42:	79bb      	ldrb	r3, [r7, #6]
 8010c44:	2201      	movs	r2, #1
 8010c46:	fa02 f303 	lsl.w	r3, r2, r3
 8010c4a:	4299      	cmp	r1, r3
 8010c4c:	d162      	bne.n	8010d14 <Light_Lightness_Linear_Binding+0xf8>
  {
    if(bindingFlag == BINDING_LIGHT_LIGHTNESS_LINEAR_SET)
 8010c4e:	79fb      	ldrb	r3, [r7, #7]
 8010c50:	2b03      	cmp	r3, #3
 8010c52:	d15f      	bne.n	8010d14 <Light_Lightness_Linear_Binding+0xf8>
    {
      Light_Linear_ActualBinding(length, elementIndex);
 8010c54:	79bb      	ldrb	r3, [r7, #6]
 8010c56:	4619      	mov	r1, r3
 8010c58:	6838      	ldr	r0, [r7, #0]
 8010c5a:	f000 fcdd 	bl	8011618 <Light_Linear_ActualBinding>
      
      result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_SET_UNACK ,elementIndex); 
 8010c5e:	79bb      	ldrb	r3, [r7, #6]
 8010c60:	4619      	mov	r1, r3
 8010c62:	f248 204d 	movw	r0, #33357	@ 0x824d
 8010c66:	f000 fdf9 	bl	801185c <Chk_OpcodePresent>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	73fb      	strb	r3, [r7, #15]
    
      if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 8010c6e:	7bfb      	ldrb	r3, [r7, #15]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d002      	beq.n	8010c7a <Light_Lightness_Linear_Binding+0x5e>
 8010c74:	7e3b      	ldrb	r3, [r7, #24]
 8010c76:	2b01      	cmp	r3, #1
 8010c78:	d14c      	bne.n	8010d14 <Light_Lightness_Linear_Binding+0xf8>
      {     
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_SET_UNACK;
 8010c7a:	79ba      	ldrb	r2, [r7, #6]
 8010c7c:	79b9      	ldrb	r1, [r7, #6]
 8010c7e:	4832      	ldr	r0, [pc, #200]	@ (8010d48 <Light_Lightness_Linear_Binding+0x12c>)
 8010c80:	460b      	mov	r3, r1
 8010c82:	00db      	lsls	r3, r3, #3
 8010c84:	440b      	add	r3, r1
 8010c86:	00d9      	lsls	r1, r3, #3
 8010c88:	440b      	add	r3, r1
 8010c8a:	4403      	add	r3, r0
 8010c8c:	3350      	adds	r3, #80	@ 0x50
 8010c8e:	781b      	ldrb	r3, [r3, #0]
 8010c90:	482d      	ldr	r0, [pc, #180]	@ (8010d48 <Light_Lightness_Linear_Binding+0x12c>)
 8010c92:	0059      	lsls	r1, r3, #1
 8010c94:	4613      	mov	r3, r2
 8010c96:	00db      	lsls	r3, r3, #3
 8010c98:	4413      	add	r3, r2
 8010c9a:	00da      	lsls	r2, r3, #3
 8010c9c:	4413      	add	r3, r2
 8010c9e:	440b      	add	r3, r1
 8010ca0:	4403      	add	r3, r0
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	f042 024d 	orr.w	r2, r2, #77	@ 0x4d
 8010ca8:	701a      	strb	r2, [r3, #0]
 8010caa:	2200      	movs	r2, #0
 8010cac:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8010cb0:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;    
 8010cb2:	79ba      	ldrb	r2, [r7, #6]
 8010cb4:	79b9      	ldrb	r1, [r7, #6]
 8010cb6:	4824      	ldr	r0, [pc, #144]	@ (8010d48 <Light_Lightness_Linear_Binding+0x12c>)
 8010cb8:	460b      	mov	r3, r1
 8010cba:	00db      	lsls	r3, r3, #3
 8010cbc:	440b      	add	r3, r1
 8010cbe:	00d9      	lsls	r1, r3, #3
 8010cc0:	440b      	add	r3, r1
 8010cc2:	4403      	add	r3, r0
 8010cc4:	3350      	adds	r3, #80	@ 0x50
 8010cc6:	781b      	ldrb	r3, [r3, #0]
 8010cc8:	481f      	ldr	r0, [pc, #124]	@ (8010d48 <Light_Lightness_Linear_Binding+0x12c>)
 8010cca:	3314      	adds	r3, #20
 8010ccc:	0059      	lsls	r1, r3, #1
 8010cce:	4613      	mov	r3, r2
 8010cd0:	00db      	lsls	r3, r3, #3
 8010cd2:	4413      	add	r3, r2
 8010cd4:	00da      	lsls	r2, r3, #3
 8010cd6:	4413      	add	r3, r2
 8010cd8:	440b      	add	r3, r1
 8010cda:	4403      	add	r3, r0
 8010cdc:	2200      	movs	r2, #0
 8010cde:	701a      	strb	r2, [r3, #0]
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	f042 0213 	orr.w	r2, r2, #19
 8010ce6:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 8010ce8:	79ba      	ldrb	r2, [r7, #6]
 8010cea:	4817      	ldr	r0, [pc, #92]	@ (8010d48 <Light_Lightness_Linear_Binding+0x12c>)
 8010cec:	4613      	mov	r3, r2
 8010cee:	00db      	lsls	r3, r3, #3
 8010cf0:	4413      	add	r3, r2
 8010cf2:	00d9      	lsls	r1, r3, #3
 8010cf4:	440b      	add	r3, r1
 8010cf6:	4403      	add	r3, r0
 8010cf8:	3350      	adds	r3, #80	@ 0x50
 8010cfa:	781b      	ldrb	r3, [r3, #0]
 8010cfc:	3301      	adds	r3, #1
 8010cfe:	b2d8      	uxtb	r0, r3
 8010d00:	4911      	ldr	r1, [pc, #68]	@ (8010d48 <Light_Lightness_Linear_Binding+0x12c>)
 8010d02:	4613      	mov	r3, r2
 8010d04:	00db      	lsls	r3, r3, #3
 8010d06:	4413      	add	r3, r2
 8010d08:	00da      	lsls	r2, r3, #3
 8010d0a:	4413      	add	r3, r2
 8010d0c:	440b      	add	r3, r1
 8010d0e:	3350      	adds	r3, #80	@ 0x50
 8010d10:	4602      	mov	r2, r0
 8010d12:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  Light_Lightness_Binding(bindingFlag , 0,elementIndex,
 8010d14:	79ba      	ldrb	r2, [r7, #6]
 8010d16:	490d      	ldr	r1, [pc, #52]	@ (8010d4c <Light_Lightness_Linear_Binding+0x130>)
 8010d18:	4613      	mov	r3, r2
 8010d1a:	005b      	lsls	r3, r3, #1
 8010d1c:	4413      	add	r3, r2
 8010d1e:	440b      	add	r3, r1
 8010d20:	7819      	ldrb	r1, [r3, #0]
 8010d22:	79ba      	ldrb	r2, [r7, #6]
 8010d24:	4809      	ldr	r0, [pc, #36]	@ (8010d4c <Light_Lightness_Linear_Binding+0x130>)
 8010d26:	4613      	mov	r3, r2
 8010d28:	005b      	lsls	r3, r3, #1
 8010d2a:	4413      	add	r3, r2
 8010d2c:	4403      	add	r3, r0
 8010d2e:	3302      	adds	r3, #2
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	79ba      	ldrb	r2, [r7, #6]
 8010d34:	79f8      	ldrb	r0, [r7, #7]
 8010d36:	9300      	str	r3, [sp, #0]
 8010d38:	460b      	mov	r3, r1
 8010d3a:	2100      	movs	r1, #0
 8010d3c:	f000 f808 	bl	8010d50 <Light_Lightness_Binding>
                          Light_ModelFlag[elementIndex].LightTransitionFlag,Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt);
#endif  
}
 8010d40:	bf00      	nop
 8010d42:	3710      	adds	r7, #16
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	200045f0 	.word	0x200045f0
 8010d4c:	200045a4 	.word	0x200045a4

08010d50 <Light_Lightness_Binding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void
*/
void Light_Lightness_Binding(MOBLEUINT8 bindingFlag , MOBLEUINT32 length, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{ 
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6039      	str	r1, [r7, #0]
 8010d58:	4611      	mov	r1, r2
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	71fb      	strb	r3, [r7, #7]
 8010d60:	460b      	mov	r3, r1
 8010d62:	71bb      	strb	r3, [r7, #6]
 8010d64:	4613      	mov	r3, r2
 8010d66:	717b      	strb	r3, [r7, #5]
	   || defined (ENABLE_LIGHT_MODEL_SERVER_HSL)
  MOBLE_RESULT result;
#endif 	
 
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS 
  if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementIndex)) == (1 << elementIndex))
 8010d68:	79bb      	ldrb	r3, [r7, #6]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	bf0c      	ite	eq
 8010d6e:	2301      	moveq	r3, #1
 8010d70:	2300      	movne	r3, #0
 8010d72:	b2db      	uxtb	r3, r3
 8010d74:	4619      	mov	r1, r3
 8010d76:	79bb      	ldrb	r3, [r7, #6]
 8010d78:	2201      	movs	r2, #1
 8010d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8010d7e:	4299      	cmp	r1, r3
 8010d80:	d161      	bne.n	8010e46 <Light_Lightness_Binding+0xf6>
  {
    if(bindingFlag != BINDING_LIGHT_LIGHTNESS_LINEAR_SET)
 8010d82:	79fb      	ldrb	r3, [r7, #7]
 8010d84:	2b03      	cmp	r3, #3
 8010d86:	d05e      	beq.n	8010e46 <Light_Lightness_Binding+0xf6>
    {
      Light_Actual_LinearBinding(elementIndex); 
 8010d88:	79bb      	ldrb	r3, [r7, #6]
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f000 fbf0 	bl	8011570 <Light_Actual_LinearBinding>
      TRACE_M(TF_LIGHT_M, "Light Lightness binding with Light Linear \r\n"); 
                  
      result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_LINEAR_SET_UNACK ,elementIndex); 
 8010d90:	79bb      	ldrb	r3, [r7, #6]
 8010d92:	4619      	mov	r1, r3
 8010d94:	f248 2051 	movw	r0, #33361	@ 0x8251
 8010d98:	f000 fd60 	bl	801185c <Chk_OpcodePresent>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	73bb      	strb	r3, [r7, #14]
    
      if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 8010da0:	7bbb      	ldrb	r3, [r7, #14]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d002      	beq.n	8010dac <Light_Lightness_Binding+0x5c>
 8010da6:	7e3b      	ldrb	r3, [r7, #24]
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	d14c      	bne.n	8010e46 <Light_Lightness_Binding+0xf6>
      {            
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_LINEAR_SET_UNACK;
 8010dac:	79ba      	ldrb	r2, [r7, #6]
 8010dae:	79b9      	ldrb	r1, [r7, #6]
 8010db0:	48c2      	ldr	r0, [pc, #776]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010db2:	460b      	mov	r3, r1
 8010db4:	00db      	lsls	r3, r3, #3
 8010db6:	440b      	add	r3, r1
 8010db8:	00d9      	lsls	r1, r3, #3
 8010dba:	440b      	add	r3, r1
 8010dbc:	4403      	add	r3, r0
 8010dbe:	3350      	adds	r3, #80	@ 0x50
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	48be      	ldr	r0, [pc, #760]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010dc4:	0059      	lsls	r1, r3, #1
 8010dc6:	4613      	mov	r3, r2
 8010dc8:	00db      	lsls	r3, r3, #3
 8010dca:	4413      	add	r3, r2
 8010dcc:	00da      	lsls	r2, r3, #3
 8010dce:	4413      	add	r3, r2
 8010dd0:	440b      	add	r3, r1
 8010dd2:	4403      	add	r3, r0
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	f042 0251 	orr.w	r2, r2, #81	@ 0x51
 8010dda:	701a      	strb	r2, [r3, #0]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8010de2:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;    
 8010de4:	79ba      	ldrb	r2, [r7, #6]
 8010de6:	79b9      	ldrb	r1, [r7, #6]
 8010de8:	48b4      	ldr	r0, [pc, #720]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010dea:	460b      	mov	r3, r1
 8010dec:	00db      	lsls	r3, r3, #3
 8010dee:	440b      	add	r3, r1
 8010df0:	00d9      	lsls	r1, r3, #3
 8010df2:	440b      	add	r3, r1
 8010df4:	4403      	add	r3, r0
 8010df6:	3350      	adds	r3, #80	@ 0x50
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	48b0      	ldr	r0, [pc, #704]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010dfc:	3314      	adds	r3, #20
 8010dfe:	0059      	lsls	r1, r3, #1
 8010e00:	4613      	mov	r3, r2
 8010e02:	00db      	lsls	r3, r3, #3
 8010e04:	4413      	add	r3, r2
 8010e06:	00da      	lsls	r2, r3, #3
 8010e08:	4413      	add	r3, r2
 8010e0a:	440b      	add	r3, r1
 8010e0c:	4403      	add	r3, r0
 8010e0e:	2200      	movs	r2, #0
 8010e10:	701a      	strb	r2, [r3, #0]
 8010e12:	2200      	movs	r2, #0
 8010e14:	f042 0213 	orr.w	r2, r2, #19
 8010e18:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 8010e1a:	79ba      	ldrb	r2, [r7, #6]
 8010e1c:	48a7      	ldr	r0, [pc, #668]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010e1e:	4613      	mov	r3, r2
 8010e20:	00db      	lsls	r3, r3, #3
 8010e22:	4413      	add	r3, r2
 8010e24:	00d9      	lsls	r1, r3, #3
 8010e26:	440b      	add	r3, r1
 8010e28:	4403      	add	r3, r0
 8010e2a:	3350      	adds	r3, #80	@ 0x50
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	3301      	adds	r3, #1
 8010e30:	b2d8      	uxtb	r0, r3
 8010e32:	49a2      	ldr	r1, [pc, #648]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010e34:	4613      	mov	r3, r2
 8010e36:	00db      	lsls	r3, r3, #3
 8010e38:	4413      	add	r3, r2
 8010e3a:	00da      	lsls	r2, r3, #3
 8010e3c:	4413      	add	r3, r2
 8010e3e:	440b      	add	r3, r1
 8010e40:	3350      	adds	r3, #80	@ 0x50
 8010e42:	4602      	mov	r2, r0
 8010e44:	701a      	strb	r2, [r3, #0]
    As linear lightness changes, it changes the value of actual lightness
    which in turn changes the state of generic on off state.
    */
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF  
    /* Binding of data b/w light lightness actual and Generic on off */
  if((ENABLE_GENERIC_MODEL_SERVER_ONOFF & (1 << elementIndex)) == (1 << elementIndex))
 8010e46:	79bb      	ldrb	r3, [r7, #6]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	bf0c      	ite	eq
 8010e4c:	2301      	moveq	r3, #1
 8010e4e:	2300      	movne	r3, #0
 8010e50:	b2db      	uxtb	r3, r3
 8010e52:	4619      	mov	r1, r3
 8010e54:	79bb      	ldrb	r3, [r7, #6]
 8010e56:	2201      	movs	r2, #1
 8010e58:	fa02 f303 	lsl.w	r3, r2, r3
 8010e5c:	4299      	cmp	r1, r3
 8010e5e:	d168      	bne.n	8010f32 <Light_Lightness_Binding+0x1e2>
  {
    if(bindingFlag != BINDING_GENERIC_ON_OFF_SET)
 8010e60:	79fb      	ldrb	r3, [r7, #7]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d065      	beq.n	8010f32 <Light_Lightness_Binding+0x1e2>
    {
      LightActual_GenericOnOffBinding(&Light_LightnessStatus[elementIndex],elementIndex);
 8010e66:	79ba      	ldrb	r2, [r7, #6]
 8010e68:	4613      	mov	r3, r2
 8010e6a:	00db      	lsls	r3, r3, #3
 8010e6c:	4413      	add	r3, r2
 8010e6e:	4a94      	ldr	r2, [pc, #592]	@ (80110c0 <Light_Lightness_Binding+0x370>)
 8010e70:	4413      	add	r3, r2
 8010e72:	79ba      	ldrb	r2, [r7, #6]
 8010e74:	4611      	mov	r1, r2
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7fe f9dc 	bl	800f234 <LightActual_GenericOnOffBinding>
       
      result = Chk_OpcodePresent((MOBLEUINT16)GENERIC_ON_OFF_SET_UNACK ,elementIndex); 
 8010e7c:	79bb      	ldrb	r3, [r7, #6]
 8010e7e:	4619      	mov	r1, r3
 8010e80:	f248 2003 	movw	r0, #33283	@ 0x8203
 8010e84:	f000 fcea 	bl	801185c <Chk_OpcodePresent>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	73bb      	strb	r3, [r7, #14]
    
      if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 8010e8c:	7bbb      	ldrb	r3, [r7, #14]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d002      	beq.n	8010e98 <Light_Lightness_Binding+0x148>
 8010e92:	7e3b      	ldrb	r3, [r7, #24]
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d14c      	bne.n	8010f32 <Light_Lightness_Binding+0x1e2>
      { 
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= GENERIC_ON_OFF_SET_UNACK;
 8010e98:	79ba      	ldrb	r2, [r7, #6]
 8010e9a:	79b9      	ldrb	r1, [r7, #6]
 8010e9c:	4887      	ldr	r0, [pc, #540]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010e9e:	460b      	mov	r3, r1
 8010ea0:	00db      	lsls	r3, r3, #3
 8010ea2:	440b      	add	r3, r1
 8010ea4:	00d9      	lsls	r1, r3, #3
 8010ea6:	440b      	add	r3, r1
 8010ea8:	4403      	add	r3, r0
 8010eaa:	3350      	adds	r3, #80	@ 0x50
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	4883      	ldr	r0, [pc, #524]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010eb0:	0059      	lsls	r1, r3, #1
 8010eb2:	4613      	mov	r3, r2
 8010eb4:	00db      	lsls	r3, r3, #3
 8010eb6:	4413      	add	r3, r2
 8010eb8:	00da      	lsls	r2, r3, #3
 8010eba:	4413      	add	r3, r2
 8010ebc:	440b      	add	r3, r1
 8010ebe:	4403      	add	r3, r0
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	f042 0203 	orr.w	r2, r2, #3
 8010ec6:	701a      	strb	r2, [r3, #0]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8010ece:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = GENERIC_ONOFF_SERVER_MODEL_ID;
 8010ed0:	79ba      	ldrb	r2, [r7, #6]
 8010ed2:	79b9      	ldrb	r1, [r7, #6]
 8010ed4:	4879      	ldr	r0, [pc, #484]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010ed6:	460b      	mov	r3, r1
 8010ed8:	00db      	lsls	r3, r3, #3
 8010eda:	440b      	add	r3, r1
 8010edc:	00d9      	lsls	r1, r3, #3
 8010ede:	440b      	add	r3, r1
 8010ee0:	4403      	add	r3, r0
 8010ee2:	3350      	adds	r3, #80	@ 0x50
 8010ee4:	781b      	ldrb	r3, [r3, #0]
 8010ee6:	4875      	ldr	r0, [pc, #468]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010ee8:	3314      	adds	r3, #20
 8010eea:	0059      	lsls	r1, r3, #1
 8010eec:	4613      	mov	r3, r2
 8010eee:	00db      	lsls	r3, r3, #3
 8010ef0:	4413      	add	r3, r2
 8010ef2:	00da      	lsls	r2, r3, #3
 8010ef4:	4413      	add	r3, r2
 8010ef6:	440b      	add	r3, r1
 8010ef8:	4403      	add	r3, r0
 8010efa:	2200      	movs	r2, #0
 8010efc:	701a      	strb	r2, [r3, #0]
 8010efe:	2200      	movs	r2, #0
 8010f00:	f042 0210 	orr.w	r2, r2, #16
 8010f04:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 8010f06:	79ba      	ldrb	r2, [r7, #6]
 8010f08:	486c      	ldr	r0, [pc, #432]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	00db      	lsls	r3, r3, #3
 8010f0e:	4413      	add	r3, r2
 8010f10:	00d9      	lsls	r1, r3, #3
 8010f12:	440b      	add	r3, r1
 8010f14:	4403      	add	r3, r0
 8010f16:	3350      	adds	r3, #80	@ 0x50
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	3301      	adds	r3, #1
 8010f1c:	b2d8      	uxtb	r0, r3
 8010f1e:	4967      	ldr	r1, [pc, #412]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010f20:	4613      	mov	r3, r2
 8010f22:	00db      	lsls	r3, r3, #3
 8010f24:	4413      	add	r3, r2
 8010f26:	00da      	lsls	r2, r3, #3
 8010f28:	4413      	add	r3, r2
 8010f2a:	440b      	add	r3, r1
 8010f2c:	3350      	adds	r3, #80	@ 0x50
 8010f2e:	4602      	mov	r2, r0
 8010f30:	701a      	strb	r2, [r3, #0]
    As linear lightness changes, it changes the value of actual lightness
    which in turn changes the state of generic level state.
    */
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL  
    /* Binding of data b/w light lightness actual and Generic Level */
  if((ENABLE_GENERIC_MODEL_SERVER_LEVEL & (1 << elementIndex)) == (1 << elementIndex))
 8010f32:	79bb      	ldrb	r3, [r7, #6]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	bf0c      	ite	eq
 8010f38:	2301      	moveq	r3, #1
 8010f3a:	2300      	movne	r3, #0
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	4619      	mov	r1, r3
 8010f40:	79bb      	ldrb	r3, [r7, #6]
 8010f42:	2201      	movs	r2, #1
 8010f44:	fa02 f303 	lsl.w	r3, r2, r3
 8010f48:	4299      	cmp	r1, r3
 8010f4a:	d16a      	bne.n	8011022 <Light_Lightness_Binding+0x2d2>
  {
    if(bindingFlag != BINDING_GENERIC_LEVEL_SET)
 8010f4c:	79fb      	ldrb	r3, [r7, #7]
 8010f4e:	2b01      	cmp	r3, #1
 8010f50:	d067      	beq.n	8011022 <Light_Lightness_Binding+0x2d2>
    {
      LightActual_GenericLevelBinding(&Light_LightnessStatus[elementIndex],elementIndex);
 8010f52:	79ba      	ldrb	r2, [r7, #6]
 8010f54:	4613      	mov	r3, r2
 8010f56:	00db      	lsls	r3, r3, #3
 8010f58:	4413      	add	r3, r2
 8010f5a:	4a59      	ldr	r2, [pc, #356]	@ (80110c0 <Light_Lightness_Binding+0x370>)
 8010f5c:	4413      	add	r3, r2
 8010f5e:	79ba      	ldrb	r2, [r7, #6]
 8010f60:	4611      	mov	r1, r2
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7fe f98c 	bl	800f280 <LightActual_GenericLevelBinding>
      
      result = Chk_OpcodePresent((MOBLEUINT16)GENERIC_LEVEL_SET_UNACK ,elementIndex); 
 8010f68:	79bb      	ldrb	r3, [r7, #6]
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	f248 2007 	movw	r0, #33287	@ 0x8207
 8010f70:	f000 fc74 	bl	801185c <Chk_OpcodePresent>
 8010f74:	4603      	mov	r3, r0
 8010f76:	73bb      	strb	r3, [r7, #14]
    
      if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 8010f78:	7bbb      	ldrb	r3, [r7, #14]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d002      	beq.n	8010f84 <Light_Lightness_Binding+0x234>
 8010f7e:	7e3b      	ldrb	r3, [r7, #24]
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d14e      	bne.n	8011022 <Light_Lightness_Binding+0x2d2>
      {
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= GENERIC_LEVEL_SET_UNACK;
 8010f84:	79ba      	ldrb	r2, [r7, #6]
 8010f86:	79b9      	ldrb	r1, [r7, #6]
 8010f88:	484c      	ldr	r0, [pc, #304]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010f8a:	460b      	mov	r3, r1
 8010f8c:	00db      	lsls	r3, r3, #3
 8010f8e:	440b      	add	r3, r1
 8010f90:	00d9      	lsls	r1, r3, #3
 8010f92:	440b      	add	r3, r1
 8010f94:	4403      	add	r3, r0
 8010f96:	3350      	adds	r3, #80	@ 0x50
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	4848      	ldr	r0, [pc, #288]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010f9c:	0059      	lsls	r1, r3, #1
 8010f9e:	4613      	mov	r3, r2
 8010fa0:	00db      	lsls	r3, r3, #3
 8010fa2:	4413      	add	r3, r2
 8010fa4:	00da      	lsls	r2, r3, #3
 8010fa6:	4413      	add	r3, r2
 8010fa8:	440b      	add	r3, r1
 8010faa:	4403      	add	r3, r0
 8010fac:	2200      	movs	r2, #0
 8010fae:	f042 0207 	orr.w	r2, r2, #7
 8010fb2:	701a      	strb	r2, [r3, #0]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8010fba:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = GENERIC_LEVEL_SERVER_MODEL_ID;
 8010fbc:	79ba      	ldrb	r2, [r7, #6]
 8010fbe:	79b9      	ldrb	r1, [r7, #6]
 8010fc0:	483e      	ldr	r0, [pc, #248]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010fc2:	460b      	mov	r3, r1
 8010fc4:	00db      	lsls	r3, r3, #3
 8010fc6:	440b      	add	r3, r1
 8010fc8:	00d9      	lsls	r1, r3, #3
 8010fca:	440b      	add	r3, r1
 8010fcc:	4403      	add	r3, r0
 8010fce:	3350      	adds	r3, #80	@ 0x50
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	483a      	ldr	r0, [pc, #232]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010fd4:	3314      	adds	r3, #20
 8010fd6:	0059      	lsls	r1, r3, #1
 8010fd8:	4613      	mov	r3, r2
 8010fda:	00db      	lsls	r3, r3, #3
 8010fdc:	4413      	add	r3, r2
 8010fde:	00da      	lsls	r2, r3, #3
 8010fe0:	4413      	add	r3, r2
 8010fe2:	440b      	add	r3, r1
 8010fe4:	4403      	add	r3, r0
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	f042 0202 	orr.w	r2, r2, #2
 8010fec:	701a      	strb	r2, [r3, #0]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f042 0210 	orr.w	r2, r2, #16
 8010ff4:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 8010ff6:	79ba      	ldrb	r2, [r7, #6]
 8010ff8:	4830      	ldr	r0, [pc, #192]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8010ffa:	4613      	mov	r3, r2
 8010ffc:	00db      	lsls	r3, r3, #3
 8010ffe:	4413      	add	r3, r2
 8011000:	00d9      	lsls	r1, r3, #3
 8011002:	440b      	add	r3, r1
 8011004:	4403      	add	r3, r0
 8011006:	3350      	adds	r3, #80	@ 0x50
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	3301      	adds	r3, #1
 801100c:	b2d8      	uxtb	r0, r3
 801100e:	492b      	ldr	r1, [pc, #172]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8011010:	4613      	mov	r3, r2
 8011012:	00db      	lsls	r3, r3, #3
 8011014:	4413      	add	r3, r2
 8011016:	00da      	lsls	r2, r3, #3
 8011018:	4413      	add	r3, r2
 801101a:	440b      	add	r3, r1
 801101c:	3350      	adds	r3, #80	@ 0x50
 801101e:	4602      	mov	r2, r0
 8011020:	701a      	strb	r2, [r3, #0]
    }
  }
#endif     
   
  /* Ligtness Linear updated on its own (unsolicited change) */
  BindingDisable_LcLinearOut_LightLightnessLinear(elementIndex);
 8011022:	79bb      	ldrb	r3, [r7, #6]
 8011024:	4618      	mov	r0, r3
 8011026:	f7fc fcd8 	bl	800d9da <BindingDisable_LcLinearOut_LightLightnessLinear>
  
  if((trnsnFlag != MODEL_TRANSITION_STOP) && (trnsnCmplt != MOBLE_TRUE) && (Publication1SecFlag.Transition1SecFlag == MOBLE_FALSE))
 801102a:	797b      	ldrb	r3, [r7, #5]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d070      	beq.n	8011112 <Light_Lightness_Binding+0x3c2>
 8011030:	7e3b      	ldrb	r3, [r7, #24]
 8011032:	2b01      	cmp	r3, #1
 8011034:	d06d      	beq.n	8011112 <Light_Lightness_Binding+0x3c2>
 8011036:	4b23      	ldr	r3, [pc, #140]	@ (80110c4 <Light_Lightness_Binding+0x374>)
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d169      	bne.n	8011112 <Light_Lightness_Binding+0x3c2>
  {
    Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= 0;
 801103e:	79ba      	ldrb	r2, [r7, #6]
 8011040:	79b9      	ldrb	r1, [r7, #6]
 8011042:	481e      	ldr	r0, [pc, #120]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8011044:	460b      	mov	r3, r1
 8011046:	00db      	lsls	r3, r3, #3
 8011048:	440b      	add	r3, r1
 801104a:	00d9      	lsls	r1, r3, #3
 801104c:	440b      	add	r3, r1
 801104e:	4403      	add	r3, r0
 8011050:	3350      	adds	r3, #80	@ 0x50
 8011052:	781b      	ldrb	r3, [r3, #0]
 8011054:	4819      	ldr	r0, [pc, #100]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8011056:	0059      	lsls	r1, r3, #1
 8011058:	4613      	mov	r3, r2
 801105a:	00db      	lsls	r3, r3, #3
 801105c:	4413      	add	r3, r2
 801105e:	00da      	lsls	r2, r3, #3
 8011060:	4413      	add	r3, r2
 8011062:	440b      	add	r3, r1
 8011064:	4403      	add	r3, r0
 8011066:	2200      	movs	r2, #0
 8011068:	701a      	strb	r2, [r3, #0]
 801106a:	2200      	movs	r2, #0
 801106c:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = 0;
 801106e:	79ba      	ldrb	r2, [r7, #6]
 8011070:	79b9      	ldrb	r1, [r7, #6]
 8011072:	4812      	ldr	r0, [pc, #72]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8011074:	460b      	mov	r3, r1
 8011076:	00db      	lsls	r3, r3, #3
 8011078:	440b      	add	r3, r1
 801107a:	00d9      	lsls	r1, r3, #3
 801107c:	440b      	add	r3, r1
 801107e:	4403      	add	r3, r0
 8011080:	3350      	adds	r3, #80	@ 0x50
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	480d      	ldr	r0, [pc, #52]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 8011086:	3314      	adds	r3, #20
 8011088:	0059      	lsls	r1, r3, #1
 801108a:	4613      	mov	r3, r2
 801108c:	00db      	lsls	r3, r3, #3
 801108e:	4413      	add	r3, r2
 8011090:	00da      	lsls	r2, r3, #3
 8011092:	4413      	add	r3, r2
 8011094:	440b      	add	r3, r1
 8011096:	4403      	add	r3, r0
 8011098:	2200      	movs	r2, #0
 801109a:	701a      	strb	r2, [r3, #0]
 801109c:	2200      	movs	r2, #0
 801109e:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].BindedStateCount = 0;
 80110a0:	79ba      	ldrb	r2, [r7, #6]
 80110a2:	4906      	ldr	r1, [pc, #24]	@ (80110bc <Light_Lightness_Binding+0x36c>)
 80110a4:	4613      	mov	r3, r2
 80110a6:	00db      	lsls	r3, r3, #3
 80110a8:	4413      	add	r3, r2
 80110aa:	00da      	lsls	r2, r3, #3
 80110ac:	4413      	add	r3, r2
 80110ae:	440b      	add	r3, r1
 80110b0:	3350      	adds	r3, #80	@ 0x50
 80110b2:	2200      	movs	r2, #0
 80110b4:	701a      	strb	r2, [r3, #0]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 80110b6:	2300      	movs	r3, #0
 80110b8:	73fb      	strb	r3, [r7, #15]
 80110ba:	e027      	b.n	801110c <Light_Lightness_Binding+0x3bc>
 80110bc:	200045f0 	.word	0x200045f0
 80110c0:	200045c4 	.word	0x200045c4
 80110c4:	200045a8 	.word	0x200045a8
    {
      Light_PublishOpcodeList[elementIndex].Model_ID[idx] = 0;
 80110c8:	79ba      	ldrb	r2, [r7, #6]
 80110ca:	7bfb      	ldrb	r3, [r7, #15]
 80110cc:	4813      	ldr	r0, [pc, #76]	@ (801111c <Light_Lightness_Binding+0x3cc>)
 80110ce:	3314      	adds	r3, #20
 80110d0:	0059      	lsls	r1, r3, #1
 80110d2:	4613      	mov	r3, r2
 80110d4:	00db      	lsls	r3, r3, #3
 80110d6:	4413      	add	r3, r2
 80110d8:	00da      	lsls	r2, r3, #3
 80110da:	4413      	add	r3, r2
 80110dc:	440b      	add	r3, r1
 80110de:	4403      	add	r3, r0
 80110e0:	2200      	movs	r2, #0
 80110e2:	701a      	strb	r2, [r3, #0]
 80110e4:	2200      	movs	r2, #0
 80110e6:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[idx] = 0;
 80110e8:	79ba      	ldrb	r2, [r7, #6]
 80110ea:	7bfb      	ldrb	r3, [r7, #15]
 80110ec:	480b      	ldr	r0, [pc, #44]	@ (801111c <Light_Lightness_Binding+0x3cc>)
 80110ee:	0059      	lsls	r1, r3, #1
 80110f0:	4613      	mov	r3, r2
 80110f2:	00db      	lsls	r3, r3, #3
 80110f4:	4413      	add	r3, r2
 80110f6:	00da      	lsls	r2, r3, #3
 80110f8:	4413      	add	r3, r2
 80110fa:	440b      	add	r3, r1
 80110fc:	4403      	add	r3, r0
 80110fe:	2200      	movs	r2, #0
 8011100:	701a      	strb	r2, [r3, #0]
 8011102:	2200      	movs	r2, #0
 8011104:	705a      	strb	r2, [r3, #1]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 8011106:	7bfb      	ldrb	r3, [r7, #15]
 8011108:	3301      	adds	r3, #1
 801110a:	73fb      	strb	r3, [r7, #15]
 801110c:	7bfb      	ldrb	r3, [r7, #15]
 801110e:	2b13      	cmp	r3, #19
 8011110:	d9da      	bls.n	80110c8 <Light_Lightness_Binding+0x378>
    }
  }
}
 8011112:	bf00      	nop
 8011114:	3710      	adds	r7, #16
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}
 801111a:	bf00      	nop
 801111c:	200045f0 	.word	0x200045f0

08011120 <GenericOnOff_LightActualBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void.
*/
void GenericOnOff_LightActualBinding(Generic_OnOffStatus_t* onOff_param, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b086      	sub	sp, #24
 8011124:	af02      	add	r7, sp, #8
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	4608      	mov	r0, r1
 801112a:	4611      	mov	r1, r2
 801112c:	461a      	mov	r2, r3
 801112e:	4603      	mov	r3, r0
 8011130:	70fb      	strb	r3, [r7, #3]
 8011132:	460b      	mov	r3, r1
 8011134:	70bb      	strb	r3, [r7, #2]
 8011136:	4613      	mov	r3, r2
 8011138:	707b      	strb	r3, [r7, #1]
  change.
  */
  /* condition is depends on the generic on off state */  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS 	
  MOBLE_RESULT result;
  if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementIndex)) == (1 << elementIndex))
 801113a:	78fb      	ldrb	r3, [r7, #3]
 801113c:	2b00      	cmp	r3, #0
 801113e:	bf0c      	ite	eq
 8011140:	2301      	moveq	r3, #1
 8011142:	2300      	movne	r3, #0
 8011144:	b2db      	uxtb	r3, r3
 8011146:	4619      	mov	r1, r3
 8011148:	78fb      	ldrb	r3, [r7, #3]
 801114a:	2201      	movs	r2, #1
 801114c:	fa02 f303 	lsl.w	r3, r2, r3
 8011150:	4299      	cmp	r1, r3
 8011152:	f040 809c 	bne.w	801128e <GenericOnOff_LightActualBinding+0x16e>
  {       
    if(onOff_param->Present_OnOff_State == 0x00)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d10a      	bne.n	8011174 <GenericOnOff_LightActualBinding+0x54>
    {
      Light_LightnessStatus[elementIndex].LightnessPresentValue16 = 0x00;    
 801115e:	78fa      	ldrb	r2, [r7, #3]
 8011160:	4951      	ldr	r1, [pc, #324]	@ (80112a8 <GenericOnOff_LightActualBinding+0x188>)
 8011162:	4613      	mov	r3, r2
 8011164:	00db      	lsls	r3, r3, #3
 8011166:	4413      	add	r3, r2
 8011168:	440b      	add	r3, r1
 801116a:	2200      	movs	r2, #0
 801116c:	701a      	strb	r2, [r3, #0]
 801116e:	2200      	movs	r2, #0
 8011170:	705a      	strb	r2, [r3, #1]
 8011172:	e031      	b.n	80111d8 <GenericOnOff_LightActualBinding+0xb8>
    }
    else if((onOff_param->Present_OnOff_State == 0x01) && 
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	2b01      	cmp	r3, #1
 801117a:	d117      	bne.n	80111ac <GenericOnOff_LightActualBinding+0x8c>
            (Light_LightnessDefaultParam[elementIndex].LightnessDefaultStatus == 0x00))
 801117c:	78fb      	ldrb	r3, [r7, #3]
 801117e:	4a4b      	ldr	r2, [pc, #300]	@ (80112ac <GenericOnOff_LightActualBinding+0x18c>)
 8011180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    else if((onOff_param->Present_OnOff_State == 0x01) && 
 8011184:	2b00      	cmp	r3, #0
 8011186:	d111      	bne.n	80111ac <GenericOnOff_LightActualBinding+0x8c>
    {
      Light_LightnessStatus[elementIndex].LightnessPresentValue16 = Light_LightnessStatus[elementIndex].LightnessLastStatus;
 8011188:	78f9      	ldrb	r1, [r7, #3]
 801118a:	78fa      	ldrb	r2, [r7, #3]
 801118c:	4846      	ldr	r0, [pc, #280]	@ (80112a8 <GenericOnOff_LightActualBinding+0x188>)
 801118e:	460b      	mov	r3, r1
 8011190:	00db      	lsls	r3, r3, #3
 8011192:	440b      	add	r3, r1
 8011194:	4403      	add	r3, r0
 8011196:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 801119a:	b298      	uxth	r0, r3
 801119c:	4942      	ldr	r1, [pc, #264]	@ (80112a8 <GenericOnOff_LightActualBinding+0x188>)
 801119e:	4613      	mov	r3, r2
 80111a0:	00db      	lsls	r3, r3, #3
 80111a2:	4413      	add	r3, r2
 80111a4:	440b      	add	r3, r1
 80111a6:	4602      	mov	r2, r0
 80111a8:	801a      	strh	r2, [r3, #0]
 80111aa:	e015      	b.n	80111d8 <GenericOnOff_LightActualBinding+0xb8>
    }
    else if((onOff_param->Present_OnOff_State == 0x01) && 
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	781b      	ldrb	r3, [r3, #0]
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d111      	bne.n	80111d8 <GenericOnOff_LightActualBinding+0xb8>
            (Light_LightnessDefaultParam[elementIndex].LightnessDefaultStatus != 0x000))
 80111b4:	78fb      	ldrb	r3, [r7, #3]
 80111b6:	4a3d      	ldr	r2, [pc, #244]	@ (80112ac <GenericOnOff_LightActualBinding+0x18c>)
 80111b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    else if((onOff_param->Present_OnOff_State == 0x01) && 
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d00b      	beq.n	80111d8 <GenericOnOff_LightActualBinding+0xb8>
    {
      Light_LightnessStatus[elementIndex].LightnessPresentValue16 = Light_LightnessDefaultParam[elementIndex].LightnessDefaultStatus;
 80111c0:	78fb      	ldrb	r3, [r7, #3]
 80111c2:	78fa      	ldrb	r2, [r7, #3]
 80111c4:	4939      	ldr	r1, [pc, #228]	@ (80112ac <GenericOnOff_LightActualBinding+0x18c>)
 80111c6:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80111ca:	4937      	ldr	r1, [pc, #220]	@ (80112a8 <GenericOnOff_LightActualBinding+0x188>)
 80111cc:	4613      	mov	r3, r2
 80111ce:	00db      	lsls	r3, r3, #3
 80111d0:	4413      	add	r3, r2
 80111d2:	440b      	add	r3, r1
 80111d4:	4602      	mov	r2, r0
 80111d6:	801a      	strh	r2, [r3, #0]
    {
      /* no condition to Execute */
    }
    TRACE_M(TF_LIGHT_M, "Generic On Off binding with Light Actual \r\n"); 

    result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_SET_UNACK ,elementIndex); 
 80111d8:	78fb      	ldrb	r3, [r7, #3]
 80111da:	4619      	mov	r1, r3
 80111dc:	f248 204d 	movw	r0, #33357	@ 0x824d
 80111e0:	f000 fb3c 	bl	801185c <Chk_OpcodePresent>
 80111e4:	4603      	mov	r3, r0
 80111e6:	73fb      	strb	r3, [r7, #15]
  
    if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 80111e8:	7bfb      	ldrb	r3, [r7, #15]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d002      	beq.n	80111f4 <GenericOnOff_LightActualBinding+0xd4>
 80111ee:	787b      	ldrb	r3, [r7, #1]
 80111f0:	2b01      	cmp	r3, #1
 80111f2:	d14c      	bne.n	801128e <GenericOnOff_LightActualBinding+0x16e>
    {
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_SET_UNACK;
 80111f4:	78fa      	ldrb	r2, [r7, #3]
 80111f6:	78f9      	ldrb	r1, [r7, #3]
 80111f8:	482d      	ldr	r0, [pc, #180]	@ (80112b0 <GenericOnOff_LightActualBinding+0x190>)
 80111fa:	460b      	mov	r3, r1
 80111fc:	00db      	lsls	r3, r3, #3
 80111fe:	440b      	add	r3, r1
 8011200:	00d9      	lsls	r1, r3, #3
 8011202:	440b      	add	r3, r1
 8011204:	4403      	add	r3, r0
 8011206:	3350      	adds	r3, #80	@ 0x50
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	4829      	ldr	r0, [pc, #164]	@ (80112b0 <GenericOnOff_LightActualBinding+0x190>)
 801120c:	0059      	lsls	r1, r3, #1
 801120e:	4613      	mov	r3, r2
 8011210:	00db      	lsls	r3, r3, #3
 8011212:	4413      	add	r3, r2
 8011214:	00da      	lsls	r2, r3, #3
 8011216:	4413      	add	r3, r2
 8011218:	440b      	add	r3, r1
 801121a:	4403      	add	r3, r0
 801121c:	2200      	movs	r2, #0
 801121e:	f042 024d 	orr.w	r2, r2, #77	@ 0x4d
 8011222:	701a      	strb	r2, [r3, #0]
 8011224:	2200      	movs	r2, #0
 8011226:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801122a:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 801122c:	78fa      	ldrb	r2, [r7, #3]
 801122e:	78f9      	ldrb	r1, [r7, #3]
 8011230:	481f      	ldr	r0, [pc, #124]	@ (80112b0 <GenericOnOff_LightActualBinding+0x190>)
 8011232:	460b      	mov	r3, r1
 8011234:	00db      	lsls	r3, r3, #3
 8011236:	440b      	add	r3, r1
 8011238:	00d9      	lsls	r1, r3, #3
 801123a:	440b      	add	r3, r1
 801123c:	4403      	add	r3, r0
 801123e:	3350      	adds	r3, #80	@ 0x50
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	481b      	ldr	r0, [pc, #108]	@ (80112b0 <GenericOnOff_LightActualBinding+0x190>)
 8011244:	3314      	adds	r3, #20
 8011246:	0059      	lsls	r1, r3, #1
 8011248:	4613      	mov	r3, r2
 801124a:	00db      	lsls	r3, r3, #3
 801124c:	4413      	add	r3, r2
 801124e:	00da      	lsls	r2, r3, #3
 8011250:	4413      	add	r3, r2
 8011252:	440b      	add	r3, r1
 8011254:	4403      	add	r3, r0
 8011256:	2200      	movs	r2, #0
 8011258:	701a      	strb	r2, [r3, #0]
 801125a:	2200      	movs	r2, #0
 801125c:	f042 0213 	orr.w	r2, r2, #19
 8011260:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 8011262:	78fa      	ldrb	r2, [r7, #3]
 8011264:	4812      	ldr	r0, [pc, #72]	@ (80112b0 <GenericOnOff_LightActualBinding+0x190>)
 8011266:	4613      	mov	r3, r2
 8011268:	00db      	lsls	r3, r3, #3
 801126a:	4413      	add	r3, r2
 801126c:	00d9      	lsls	r1, r3, #3
 801126e:	440b      	add	r3, r1
 8011270:	4403      	add	r3, r0
 8011272:	3350      	adds	r3, #80	@ 0x50
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	3301      	adds	r3, #1
 8011278:	b2d8      	uxtb	r0, r3
 801127a:	490d      	ldr	r1, [pc, #52]	@ (80112b0 <GenericOnOff_LightActualBinding+0x190>)
 801127c:	4613      	mov	r3, r2
 801127e:	00db      	lsls	r3, r3, #3
 8011280:	4413      	add	r3, r2
 8011282:	00da      	lsls	r2, r3, #3
 8011284:	4413      	add	r3, r2
 8011286:	440b      	add	r3, r1
 8011288:	3350      	adds	r3, #80	@ 0x50
 801128a:	4602      	mov	r2, r0
 801128c:	701a      	strb	r2, [r3, #0]
  
  /*As Generic on off changes, it will change the value of the light linear due to change in the light lightness 
    value due to binding of the states.
 */
   
  Light_Lightness_Binding(BINDING_GENERIC_ON_OFF_SET, 0, elementIndex,trnsnFlag,trnsnCmplt);
 801128e:	78b9      	ldrb	r1, [r7, #2]
 8011290:	78fa      	ldrb	r2, [r7, #3]
 8011292:	787b      	ldrb	r3, [r7, #1]
 8011294:	9300      	str	r3, [sp, #0]
 8011296:	460b      	mov	r3, r1
 8011298:	2100      	movs	r1, #0
 801129a:	2000      	movs	r0, #0
 801129c:	f7ff fd58 	bl	8010d50 <Light_Lightness_Binding>
}
 80112a0:	bf00      	nop
 80112a2:	3710      	adds	r7, #16
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}
 80112a8:	200045c4 	.word	0x200045c4
 80112ac:	200045d0 	.word	0x200045d0
 80112b0:	200045f0 	.word	0x200045f0

080112b4 <GenericLevel_LightBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void.
*/
void GenericLevel_LightBinding(Generic_LevelStatus_t* gLevel_param , MOBLEUINT8 flag, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{ 
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	4608      	mov	r0, r1
 80112be:	4611      	mov	r1, r2
 80112c0:	461a      	mov	r2, r3
 80112c2:	4603      	mov	r3, r0
 80112c4:	70fb      	strb	r3, [r7, #3]
 80112c6:	460b      	mov	r3, r1
 80112c8:	70bb      	strb	r3, [r7, #2]
 80112ca:	4613      	mov	r3, r2
 80112cc:	707b      	strb	r3, [r7, #1]
  As generic Level changes, the actual lightness value will
  change.
  */
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS    

  if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementIndex)) == (1 << elementIndex))
 80112ce:	78bb      	ldrb	r3, [r7, #2]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	bf0c      	ite	eq
 80112d4:	2301      	moveq	r3, #1
 80112d6:	2300      	movne	r3, #0
 80112d8:	b2db      	uxtb	r3, r3
 80112da:	4619      	mov	r1, r3
 80112dc:	78bb      	ldrb	r3, [r7, #2]
 80112de:	2201      	movs	r2, #1
 80112e0:	fa02 f303 	lsl.w	r3, r2, r3
 80112e4:	4299      	cmp	r1, r3
 80112e6:	f040 80ca 	bne.w	801147e <GenericLevel_LightBinding+0x1ca>
  {
    Light_LightnessStatus[elementIndex].LightnessPresentValue16 = gLevel_param->Present_Level16 + 32768;   
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80112f0:	b21b      	sxth	r3, r3
 80112f2:	b29b      	uxth	r3, r3
 80112f4:	78ba      	ldrb	r2, [r7, #2]
 80112f6:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80112fa:	b298      	uxth	r0, r3
 80112fc:	4999      	ldr	r1, [pc, #612]	@ (8011564 <GenericLevel_LightBinding+0x2b0>)
 80112fe:	4613      	mov	r3, r2
 8011300:	00db      	lsls	r3, r3, #3
 8011302:	4413      	add	r3, r2
 8011304:	440b      	add	r3, r1
 8011306:	4602      	mov	r2, r0
 8011308:	801a      	strh	r2, [r3, #0]
  
    result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_SET_UNACK ,elementIndex); 
 801130a:	78bb      	ldrb	r3, [r7, #2]
 801130c:	4619      	mov	r1, r3
 801130e:	f248 204d 	movw	r0, #33357	@ 0x824d
 8011312:	f000 faa3 	bl	801185c <Chk_OpcodePresent>
 8011316:	4603      	mov	r3, r0
 8011318:	73bb      	strb	r3, [r7, #14]
    
    if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 801131a:	7bbb      	ldrb	r3, [r7, #14]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d002      	beq.n	8011326 <GenericLevel_LightBinding+0x72>
 8011320:	7e3b      	ldrb	r3, [r7, #24]
 8011322:	2b01      	cmp	r3, #1
 8011324:	d14c      	bne.n	80113c0 <GenericLevel_LightBinding+0x10c>
    {
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_SET_UNACK;
 8011326:	78ba      	ldrb	r2, [r7, #2]
 8011328:	78b9      	ldrb	r1, [r7, #2]
 801132a:	488f      	ldr	r0, [pc, #572]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 801132c:	460b      	mov	r3, r1
 801132e:	00db      	lsls	r3, r3, #3
 8011330:	440b      	add	r3, r1
 8011332:	00d9      	lsls	r1, r3, #3
 8011334:	440b      	add	r3, r1
 8011336:	4403      	add	r3, r0
 8011338:	3350      	adds	r3, #80	@ 0x50
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	488a      	ldr	r0, [pc, #552]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 801133e:	0059      	lsls	r1, r3, #1
 8011340:	4613      	mov	r3, r2
 8011342:	00db      	lsls	r3, r3, #3
 8011344:	4413      	add	r3, r2
 8011346:	00da      	lsls	r2, r3, #3
 8011348:	4413      	add	r3, r2
 801134a:	440b      	add	r3, r1
 801134c:	4403      	add	r3, r0
 801134e:	2200      	movs	r2, #0
 8011350:	f042 024d 	orr.w	r2, r2, #77	@ 0x4d
 8011354:	701a      	strb	r2, [r3, #0]
 8011356:	2200      	movs	r2, #0
 8011358:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801135c:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 801135e:	78ba      	ldrb	r2, [r7, #2]
 8011360:	78b9      	ldrb	r1, [r7, #2]
 8011362:	4881      	ldr	r0, [pc, #516]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 8011364:	460b      	mov	r3, r1
 8011366:	00db      	lsls	r3, r3, #3
 8011368:	440b      	add	r3, r1
 801136a:	00d9      	lsls	r1, r3, #3
 801136c:	440b      	add	r3, r1
 801136e:	4403      	add	r3, r0
 8011370:	3350      	adds	r3, #80	@ 0x50
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	487c      	ldr	r0, [pc, #496]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 8011376:	3314      	adds	r3, #20
 8011378:	0059      	lsls	r1, r3, #1
 801137a:	4613      	mov	r3, r2
 801137c:	00db      	lsls	r3, r3, #3
 801137e:	4413      	add	r3, r2
 8011380:	00da      	lsls	r2, r3, #3
 8011382:	4413      	add	r3, r2
 8011384:	440b      	add	r3, r1
 8011386:	4403      	add	r3, r0
 8011388:	2200      	movs	r2, #0
 801138a:	701a      	strb	r2, [r3, #0]
 801138c:	2200      	movs	r2, #0
 801138e:	f042 0213 	orr.w	r2, r2, #19
 8011392:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 8011394:	78ba      	ldrb	r2, [r7, #2]
 8011396:	4874      	ldr	r0, [pc, #464]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 8011398:	4613      	mov	r3, r2
 801139a:	00db      	lsls	r3, r3, #3
 801139c:	4413      	add	r3, r2
 801139e:	00d9      	lsls	r1, r3, #3
 80113a0:	440b      	add	r3, r1
 80113a2:	4403      	add	r3, r0
 80113a4:	3350      	adds	r3, #80	@ 0x50
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	3301      	adds	r3, #1
 80113aa:	b2d8      	uxtb	r0, r3
 80113ac:	496e      	ldr	r1, [pc, #440]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 80113ae:	4613      	mov	r3, r2
 80113b0:	00db      	lsls	r3, r3, #3
 80113b2:	4413      	add	r3, r2
 80113b4:	00da      	lsls	r2, r3, #3
 80113b6:	4413      	add	r3, r2
 80113b8:	440b      	add	r3, r1
 80113ba:	3350      	adds	r3, #80	@ 0x50
 80113bc:	4602      	mov	r2, r0
 80113be:	701a      	strb	r2, [r3, #0]
    }
  
    /*As Generic Level changes, it will change the value of the light linear due to change in the light lightness 
      value due to binding of the states.
    */
    Light_Actual_LinearBinding(elementIndex);
 80113c0:	78bb      	ldrb	r3, [r7, #2]
 80113c2:	4618      	mov	r0, r3
 80113c4:	f000 f8d4 	bl	8011570 <Light_Actual_LinearBinding>
  
    result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_LINEAR_SET_UNACK ,elementIndex); 
 80113c8:	78bb      	ldrb	r3, [r7, #2]
 80113ca:	4619      	mov	r1, r3
 80113cc:	f248 2051 	movw	r0, #33361	@ 0x8251
 80113d0:	f000 fa44 	bl	801185c <Chk_OpcodePresent>
 80113d4:	4603      	mov	r3, r0
 80113d6:	73bb      	strb	r3, [r7, #14]
    
    if(result == MOBLE_RESULT_SUCCESS || (trnsnCmplt == MOBLE_TRUE))
 80113d8:	7bbb      	ldrb	r3, [r7, #14]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d002      	beq.n	80113e4 <GenericLevel_LightBinding+0x130>
 80113de:	7e3b      	ldrb	r3, [r7, #24]
 80113e0:	2b01      	cmp	r3, #1
 80113e2:	d14c      	bne.n	801147e <GenericLevel_LightBinding+0x1ca>
    {
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_LINEAR_SET_UNACK;
 80113e4:	78ba      	ldrb	r2, [r7, #2]
 80113e6:	78b9      	ldrb	r1, [r7, #2]
 80113e8:	485f      	ldr	r0, [pc, #380]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 80113ea:	460b      	mov	r3, r1
 80113ec:	00db      	lsls	r3, r3, #3
 80113ee:	440b      	add	r3, r1
 80113f0:	00d9      	lsls	r1, r3, #3
 80113f2:	440b      	add	r3, r1
 80113f4:	4403      	add	r3, r0
 80113f6:	3350      	adds	r3, #80	@ 0x50
 80113f8:	781b      	ldrb	r3, [r3, #0]
 80113fa:	485b      	ldr	r0, [pc, #364]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 80113fc:	0059      	lsls	r1, r3, #1
 80113fe:	4613      	mov	r3, r2
 8011400:	00db      	lsls	r3, r3, #3
 8011402:	4413      	add	r3, r2
 8011404:	00da      	lsls	r2, r3, #3
 8011406:	4413      	add	r3, r2
 8011408:	440b      	add	r3, r1
 801140a:	4403      	add	r3, r0
 801140c:	2200      	movs	r2, #0
 801140e:	f042 0251 	orr.w	r2, r2, #81	@ 0x51
 8011412:	701a      	strb	r2, [r3, #0]
 8011414:	2200      	movs	r2, #0
 8011416:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801141a:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 801141c:	78ba      	ldrb	r2, [r7, #2]
 801141e:	78b9      	ldrb	r1, [r7, #2]
 8011420:	4851      	ldr	r0, [pc, #324]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 8011422:	460b      	mov	r3, r1
 8011424:	00db      	lsls	r3, r3, #3
 8011426:	440b      	add	r3, r1
 8011428:	00d9      	lsls	r1, r3, #3
 801142a:	440b      	add	r3, r1
 801142c:	4403      	add	r3, r0
 801142e:	3350      	adds	r3, #80	@ 0x50
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	484d      	ldr	r0, [pc, #308]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 8011434:	3314      	adds	r3, #20
 8011436:	0059      	lsls	r1, r3, #1
 8011438:	4613      	mov	r3, r2
 801143a:	00db      	lsls	r3, r3, #3
 801143c:	4413      	add	r3, r2
 801143e:	00da      	lsls	r2, r3, #3
 8011440:	4413      	add	r3, r2
 8011442:	440b      	add	r3, r1
 8011444:	4403      	add	r3, r0
 8011446:	2200      	movs	r2, #0
 8011448:	701a      	strb	r2, [r3, #0]
 801144a:	2200      	movs	r2, #0
 801144c:	f042 0213 	orr.w	r2, r2, #19
 8011450:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 8011452:	78ba      	ldrb	r2, [r7, #2]
 8011454:	4844      	ldr	r0, [pc, #272]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 8011456:	4613      	mov	r3, r2
 8011458:	00db      	lsls	r3, r3, #3
 801145a:	4413      	add	r3, r2
 801145c:	00d9      	lsls	r1, r3, #3
 801145e:	440b      	add	r3, r1
 8011460:	4403      	add	r3, r0
 8011462:	3350      	adds	r3, #80	@ 0x50
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	3301      	adds	r3, #1
 8011468:	b2d8      	uxtb	r0, r3
 801146a:	493f      	ldr	r1, [pc, #252]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 801146c:	4613      	mov	r3, r2
 801146e:	00db      	lsls	r3, r3, #3
 8011470:	4413      	add	r3, r2
 8011472:	00da      	lsls	r2, r3, #3
 8011474:	4413      	add	r3, r2
 8011476:	440b      	add	r3, r1
 8011478:	3350      	adds	r3, #80	@ 0x50
 801147a:	4602      	mov	r2, r0
 801147c:	701a      	strb	r2, [r3, #0]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
      }
    }
  }
#endif    
  if((trnsnFlag != MODEL_TRANSITION_STOP) && (trnsnCmplt != MOBLE_TRUE) && (Publication1SecFlag.Transition1SecFlag == MOBLE_FALSE))
 801147e:	787b      	ldrb	r3, [r7, #1]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d06a      	beq.n	801155a <GenericLevel_LightBinding+0x2a6>
 8011484:	7e3b      	ldrb	r3, [r7, #24]
 8011486:	2b01      	cmp	r3, #1
 8011488:	d067      	beq.n	801155a <GenericLevel_LightBinding+0x2a6>
 801148a:	4b38      	ldr	r3, [pc, #224]	@ (801156c <GenericLevel_LightBinding+0x2b8>)
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d163      	bne.n	801155a <GenericLevel_LightBinding+0x2a6>
  {
    Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= 0;
 8011492:	78ba      	ldrb	r2, [r7, #2]
 8011494:	78b9      	ldrb	r1, [r7, #2]
 8011496:	4834      	ldr	r0, [pc, #208]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 8011498:	460b      	mov	r3, r1
 801149a:	00db      	lsls	r3, r3, #3
 801149c:	440b      	add	r3, r1
 801149e:	00d9      	lsls	r1, r3, #3
 80114a0:	440b      	add	r3, r1
 80114a2:	4403      	add	r3, r0
 80114a4:	3350      	adds	r3, #80	@ 0x50
 80114a6:	781b      	ldrb	r3, [r3, #0]
 80114a8:	482f      	ldr	r0, [pc, #188]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 80114aa:	0059      	lsls	r1, r3, #1
 80114ac:	4613      	mov	r3, r2
 80114ae:	00db      	lsls	r3, r3, #3
 80114b0:	4413      	add	r3, r2
 80114b2:	00da      	lsls	r2, r3, #3
 80114b4:	4413      	add	r3, r2
 80114b6:	440b      	add	r3, r1
 80114b8:	4403      	add	r3, r0
 80114ba:	2200      	movs	r2, #0
 80114bc:	701a      	strb	r2, [r3, #0]
 80114be:	2200      	movs	r2, #0
 80114c0:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = 0;
 80114c2:	78ba      	ldrb	r2, [r7, #2]
 80114c4:	78b9      	ldrb	r1, [r7, #2]
 80114c6:	4828      	ldr	r0, [pc, #160]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 80114c8:	460b      	mov	r3, r1
 80114ca:	00db      	lsls	r3, r3, #3
 80114cc:	440b      	add	r3, r1
 80114ce:	00d9      	lsls	r1, r3, #3
 80114d0:	440b      	add	r3, r1
 80114d2:	4403      	add	r3, r0
 80114d4:	3350      	adds	r3, #80	@ 0x50
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	4823      	ldr	r0, [pc, #140]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 80114da:	3314      	adds	r3, #20
 80114dc:	0059      	lsls	r1, r3, #1
 80114de:	4613      	mov	r3, r2
 80114e0:	00db      	lsls	r3, r3, #3
 80114e2:	4413      	add	r3, r2
 80114e4:	00da      	lsls	r2, r3, #3
 80114e6:	4413      	add	r3, r2
 80114e8:	440b      	add	r3, r1
 80114ea:	4403      	add	r3, r0
 80114ec:	2200      	movs	r2, #0
 80114ee:	701a      	strb	r2, [r3, #0]
 80114f0:	2200      	movs	r2, #0
 80114f2:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].BindedStateCount = 0;
 80114f4:	78ba      	ldrb	r2, [r7, #2]
 80114f6:	491c      	ldr	r1, [pc, #112]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 80114f8:	4613      	mov	r3, r2
 80114fa:	00db      	lsls	r3, r3, #3
 80114fc:	4413      	add	r3, r2
 80114fe:	00da      	lsls	r2, r3, #3
 8011500:	4413      	add	r3, r2
 8011502:	440b      	add	r3, r1
 8011504:	3350      	adds	r3, #80	@ 0x50
 8011506:	2200      	movs	r2, #0
 8011508:	701a      	strb	r2, [r3, #0]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 801150a:	2300      	movs	r3, #0
 801150c:	73fb      	strb	r3, [r7, #15]
 801150e:	e021      	b.n	8011554 <GenericLevel_LightBinding+0x2a0>
    {
      Light_PublishOpcodeList[elementIndex].Model_ID[idx] = 0;
 8011510:	78ba      	ldrb	r2, [r7, #2]
 8011512:	7bfb      	ldrb	r3, [r7, #15]
 8011514:	4814      	ldr	r0, [pc, #80]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 8011516:	3314      	adds	r3, #20
 8011518:	0059      	lsls	r1, r3, #1
 801151a:	4613      	mov	r3, r2
 801151c:	00db      	lsls	r3, r3, #3
 801151e:	4413      	add	r3, r2
 8011520:	00da      	lsls	r2, r3, #3
 8011522:	4413      	add	r3, r2
 8011524:	440b      	add	r3, r1
 8011526:	4403      	add	r3, r0
 8011528:	2200      	movs	r2, #0
 801152a:	701a      	strb	r2, [r3, #0]
 801152c:	2200      	movs	r2, #0
 801152e:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[idx] = 0;
 8011530:	78ba      	ldrb	r2, [r7, #2]
 8011532:	7bfb      	ldrb	r3, [r7, #15]
 8011534:	480c      	ldr	r0, [pc, #48]	@ (8011568 <GenericLevel_LightBinding+0x2b4>)
 8011536:	0059      	lsls	r1, r3, #1
 8011538:	4613      	mov	r3, r2
 801153a:	00db      	lsls	r3, r3, #3
 801153c:	4413      	add	r3, r2
 801153e:	00da      	lsls	r2, r3, #3
 8011540:	4413      	add	r3, r2
 8011542:	440b      	add	r3, r1
 8011544:	4403      	add	r3, r0
 8011546:	2200      	movs	r2, #0
 8011548:	701a      	strb	r2, [r3, #0]
 801154a:	2200      	movs	r2, #0
 801154c:	705a      	strb	r2, [r3, #1]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 801154e:	7bfb      	ldrb	r3, [r7, #15]
 8011550:	3301      	adds	r3, #1
 8011552:	73fb      	strb	r3, [r7, #15]
 8011554:	7bfb      	ldrb	r3, [r7, #15]
 8011556:	2b13      	cmp	r3, #19
 8011558:	d9da      	bls.n	8011510 <GenericLevel_LightBinding+0x25c>
    }
  } 
}
 801155a:	bf00      	nop
 801155c:	3710      	adds	r7, #16
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	200045c4 	.word	0x200045c4
 8011568:	200045f0 	.word	0x200045f0
 801156c:	200045a8 	.word	0x200045a8

08011570 <Light_Actual_LinearBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return MOBLEUINT16
*/
MOBLEUINT16 Light_Actual_LinearBinding(MOBLEUINT8 elementIndex)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	4603      	mov	r3, r0
 8011578:	71fb      	strb	r3, [r7, #7]
  float productValue;
  
  productValue = pow((((float)Light_LightnessStatus[elementIndex].LightnessPresentValue16)/65535) , 2);
 801157a:	79fa      	ldrb	r2, [r7, #7]
 801157c:	4924      	ldr	r1, [pc, #144]	@ (8011610 <Light_Actual_LinearBinding+0xa0>)
 801157e:	4613      	mov	r3, r2
 8011580:	00db      	lsls	r3, r3, #3
 8011582:	4413      	add	r3, r2
 8011584:	440b      	add	r3, r1
 8011586:	881b      	ldrh	r3, [r3, #0]
 8011588:	b29b      	uxth	r3, r3
 801158a:	ee07 3a90 	vmov	s15, r3
 801158e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011592:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011614 <Light_Actual_LinearBinding+0xa4>
 8011596:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801159a:	ee16 0a90 	vmov	r0, s13
 801159e:	f7ee ffbb 	bl	8000518 <__aeabi_f2d>
 80115a2:	4602      	mov	r2, r0
 80115a4:	460b      	mov	r3, r1
 80115a6:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8011608 <Light_Actual_LinearBinding+0x98>
 80115aa:	ec43 2b10 	vmov	d0, r2, r3
 80115ae:	f01a f91b 	bl	802b7e8 <pow>
 80115b2:	ec53 2b10 	vmov	r2, r3, d0
 80115b6:	4610      	mov	r0, r2
 80115b8:	4619      	mov	r1, r3
 80115ba:	f7ef fadd 	bl	8000b78 <__aeabi_d2f>
 80115be:	4603      	mov	r3, r0
 80115c0:	60fb      	str	r3, [r7, #12]
  Light_LightnessStatus[elementIndex].LinearPresentValue16 = (MOBLEUINT16)(65535 * productValue);
 80115c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80115c6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8011614 <Light_Actual_LinearBinding+0xa4>
 80115ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80115ce:	79fa      	ldrb	r2, [r7, #7]
 80115d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80115d4:	ee17 3a90 	vmov	r3, s15
 80115d8:	b298      	uxth	r0, r3
 80115da:	490d      	ldr	r1, [pc, #52]	@ (8011610 <Light_Actual_LinearBinding+0xa0>)
 80115dc:	4613      	mov	r3, r2
 80115de:	00db      	lsls	r3, r3, #3
 80115e0:	4413      	add	r3, r2
 80115e2:	440b      	add	r3, r1
 80115e4:	3302      	adds	r3, #2
 80115e6:	4602      	mov	r2, r0
 80115e8:	801a      	strh	r2, [r3, #0]
 
  return Light_LightnessStatus[elementIndex].LinearPresentValue16; 
 80115ea:	79fa      	ldrb	r2, [r7, #7]
 80115ec:	4908      	ldr	r1, [pc, #32]	@ (8011610 <Light_Actual_LinearBinding+0xa0>)
 80115ee:	4613      	mov	r3, r2
 80115f0:	00db      	lsls	r3, r3, #3
 80115f2:	4413      	add	r3, r2
 80115f4:	440b      	add	r3, r1
 80115f6:	3302      	adds	r3, #2
 80115f8:	881b      	ldrh	r3, [r3, #0]
 80115fa:	b29b      	uxth	r3, r3
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3710      	adds	r7, #16
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	f3af 8000 	nop.w
 8011608:	00000000 	.word	0x00000000
 801160c:	40000000 	.word	0x40000000
 8011610:	200045c4 	.word	0x200045c4
 8011614:	477fff00 	.word	0x477fff00

08011618 <Light_Linear_ActualBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return MOBLEUINT16
*/
MOBLEUINT16 Light_Linear_ActualBinding(MOBLEUINT32 length, MOBLEUINT8 elementIndex)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b084      	sub	sp, #16
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	460b      	mov	r3, r1
 8011622:	70fb      	strb	r3, [r7, #3]
  /*
  6.1.2.1.1 - actual lightness = 655354 * squareroot(linear lightness/ 655354).
  */
  float productValue;
  
  if(length <= 3)
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2b03      	cmp	r3, #3
 8011628:	d83e      	bhi.n	80116a8 <Light_Linear_ActualBinding+0x90>
  {
    productValue = sqrt((((float)Light_LightnessStatus[elementIndex].LinearPresentValue16) / 65535));
 801162a:	78fa      	ldrb	r2, [r7, #3]
 801162c:	494a      	ldr	r1, [pc, #296]	@ (8011758 <Light_Linear_ActualBinding+0x140>)
 801162e:	4613      	mov	r3, r2
 8011630:	00db      	lsls	r3, r3, #3
 8011632:	4413      	add	r3, r2
 8011634:	440b      	add	r3, r1
 8011636:	3302      	adds	r3, #2
 8011638:	881b      	ldrh	r3, [r3, #0]
 801163a:	b29b      	uxth	r3, r3
 801163c:	ee07 3a90 	vmov	s15, r3
 8011640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011644:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801175c <Light_Linear_ActualBinding+0x144>
 8011648:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801164c:	ee16 0a90 	vmov	r0, s13
 8011650:	f7ee ff62 	bl	8000518 <__aeabi_f2d>
 8011654:	4602      	mov	r2, r0
 8011656:	460b      	mov	r3, r1
 8011658:	ec43 2b10 	vmov	d0, r2, r3
 801165c:	f01a f934 	bl	802b8c8 <sqrt>
 8011660:	ec53 2b10 	vmov	r2, r3, d0
 8011664:	4610      	mov	r0, r2
 8011666:	4619      	mov	r1, r3
 8011668:	f7ef fa86 	bl	8000b78 <__aeabi_d2f>
 801166c:	4603      	mov	r3, r0
 801166e:	60fb      	str	r3, [r7, #12]
    Light_LightnessStatus[elementIndex].LightnessPresentValue16 = (MOBLEUINT16)(65535 * productValue);      
 8011670:	edd7 7a03 	vldr	s15, [r7, #12]
 8011674:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 801175c <Light_Linear_ActualBinding+0x144>
 8011678:	ee67 7a87 	vmul.f32	s15, s15, s14
 801167c:	78fa      	ldrb	r2, [r7, #3]
 801167e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011682:	ee17 3a90 	vmov	r3, s15
 8011686:	b298      	uxth	r0, r3
 8011688:	4933      	ldr	r1, [pc, #204]	@ (8011758 <Light_Linear_ActualBinding+0x140>)
 801168a:	4613      	mov	r3, r2
 801168c:	00db      	lsls	r3, r3, #3
 801168e:	4413      	add	r3, r2
 8011690:	440b      	add	r3, r1
 8011692:	4602      	mov	r2, r0
 8011694:	801a      	strh	r2, [r3, #0]
    
    return Light_LightnessStatus[elementIndex].LightnessPresentValue16;  
 8011696:	78fa      	ldrb	r2, [r7, #3]
 8011698:	492f      	ldr	r1, [pc, #188]	@ (8011758 <Light_Linear_ActualBinding+0x140>)
 801169a:	4613      	mov	r3, r2
 801169c:	00db      	lsls	r3, r3, #3
 801169e:	4413      	add	r3, r2
 80116a0:	440b      	add	r3, r1
 80116a2:	881b      	ldrh	r3, [r3, #0]
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	e053      	b.n	8011750 <Light_Linear_ActualBinding+0x138>
  }
  else
  {
    productValue = sqrt((((float)Light_LightnessStatus[elementIndex].TargetValue16) / 65535));
 80116a8:	78fa      	ldrb	r2, [r7, #3]
 80116aa:	492b      	ldr	r1, [pc, #172]	@ (8011758 <Light_Linear_ActualBinding+0x140>)
 80116ac:	4613      	mov	r3, r2
 80116ae:	00db      	lsls	r3, r3, #3
 80116b0:	4413      	add	r3, r2
 80116b2:	440b      	add	r3, r1
 80116b4:	3304      	adds	r3, #4
 80116b6:	881b      	ldrh	r3, [r3, #0]
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	ee07 3a90 	vmov	s15, r3
 80116be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116c2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801175c <Light_Linear_ActualBinding+0x144>
 80116c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80116ca:	ee16 0a90 	vmov	r0, s13
 80116ce:	f7ee ff23 	bl	8000518 <__aeabi_f2d>
 80116d2:	4602      	mov	r2, r0
 80116d4:	460b      	mov	r3, r1
 80116d6:	ec43 2b10 	vmov	d0, r2, r3
 80116da:	f01a f8f5 	bl	802b8c8 <sqrt>
 80116de:	ec53 2b10 	vmov	r2, r3, d0
 80116e2:	4610      	mov	r0, r2
 80116e4:	4619      	mov	r1, r3
 80116e6:	f7ef fa47 	bl	8000b78 <__aeabi_d2f>
 80116ea:	4603      	mov	r3, r0
 80116ec:	60fb      	str	r3, [r7, #12]
    Light_LightnessStatus[elementIndex].TargetValue16 = (MOBLEUINT16)(65535 * productValue);
 80116ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80116f2:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 801175c <Light_Linear_ActualBinding+0x144>
 80116f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80116fa:	78fa      	ldrb	r2, [r7, #3]
 80116fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011700:	ee17 3a90 	vmov	r3, s15
 8011704:	b298      	uxth	r0, r3
 8011706:	4914      	ldr	r1, [pc, #80]	@ (8011758 <Light_Linear_ActualBinding+0x140>)
 8011708:	4613      	mov	r3, r2
 801170a:	00db      	lsls	r3, r3, #3
 801170c:	4413      	add	r3, r2
 801170e:	440b      	add	r3, r1
 8011710:	3304      	adds	r3, #4
 8011712:	4602      	mov	r2, r0
 8011714:	801a      	strh	r2, [r3, #0]
    Light_TemporaryStatus[elementIndex].TargetParam_1 = Light_LightnessStatus[elementIndex].TargetValue16;   
 8011716:	78f9      	ldrb	r1, [r7, #3]
 8011718:	78fa      	ldrb	r2, [r7, #3]
 801171a:	480f      	ldr	r0, [pc, #60]	@ (8011758 <Light_Linear_ActualBinding+0x140>)
 801171c:	460b      	mov	r3, r1
 801171e:	00db      	lsls	r3, r3, #3
 8011720:	440b      	add	r3, r1
 8011722:	4403      	add	r3, r0
 8011724:	3304      	adds	r3, #4
 8011726:	881b      	ldrh	r3, [r3, #0]
 8011728:	b298      	uxth	r0, r3
 801172a:	490d      	ldr	r1, [pc, #52]	@ (8011760 <Light_Linear_ActualBinding+0x148>)
 801172c:	4613      	mov	r3, r2
 801172e:	005b      	lsls	r3, r3, #1
 8011730:	4413      	add	r3, r2
 8011732:	009b      	lsls	r3, r3, #2
 8011734:	4413      	add	r3, r2
 8011736:	440b      	add	r3, r1
 8011738:	3306      	adds	r3, #6
 801173a:	4602      	mov	r2, r0
 801173c:	801a      	strh	r2, [r3, #0]
    
    return Light_LightnessStatus[elementIndex].TargetValue16;  
 801173e:	78fa      	ldrb	r2, [r7, #3]
 8011740:	4905      	ldr	r1, [pc, #20]	@ (8011758 <Light_Linear_ActualBinding+0x140>)
 8011742:	4613      	mov	r3, r2
 8011744:	00db      	lsls	r3, r3, #3
 8011746:	4413      	add	r3, r2
 8011748:	440b      	add	r3, r1
 801174a:	3304      	adds	r3, #4
 801174c:	881b      	ldrh	r3, [r3, #0]
 801174e:	b29b      	uxth	r3, r3
  }
}
 8011750:	4618      	mov	r0, r3
 8011752:	3710      	adds	r7, #16
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}
 8011758:	200045c4 	.word	0x200045c4
 801175c:	477fff00 	.word	0x477fff00
 8011760:	200045ac 	.word	0x200045ac

08011764 <Light_Actual_RangeBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void
*/
void Light_Actual_RangeBinding(Light_LightnessParam_t* lightActual, MOBLEUINT8 elementIndex)
{
 8011764:	b480      	push	{r7}
 8011766:	b083      	sub	sp, #12
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	460b      	mov	r3, r1
 801176e:	70fb      	strb	r3, [r7, #3]
  6.1.2.2.5 - actual lightness = range minimum if actual lighteness is less than range min
  value.
  actual lightness = range maximum if actual lighteness is greater than range max
  value.
  */
  if((lightActual->TargetLightnessStatus < Light_LightnessRangeParam[elementIndex].MinRangeStatus)
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	881b      	ldrh	r3, [r3, #0]
 8011774:	b299      	uxth	r1, r3
 8011776:	78fa      	ldrb	r2, [r7, #3]
 8011778:	481f      	ldr	r0, [pc, #124]	@ (80117f8 <Light_Actual_RangeBinding+0x94>)
 801177a:	4613      	mov	r3, r2
 801177c:	009b      	lsls	r3, r3, #2
 801177e:	4413      	add	r3, r2
 8011780:	4403      	add	r3, r0
 8011782:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011786:	b29b      	uxth	r3, r3
 8011788:	4299      	cmp	r1, r3
 801178a:	d210      	bcs.n	80117ae <Light_Actual_RangeBinding+0x4a>
     && (lightActual->TargetLightnessStatus != 0))
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	881b      	ldrh	r3, [r3, #0]
 8011790:	b29b      	uxth	r3, r3
 8011792:	2b00      	cmp	r3, #0
 8011794:	d00b      	beq.n	80117ae <Light_Actual_RangeBinding+0x4a>
  {
    lightActual->TargetLightnessStatus = Light_LightnessRangeParam[elementIndex].MinRangeStatus;
 8011796:	78fa      	ldrb	r2, [r7, #3]
 8011798:	4917      	ldr	r1, [pc, #92]	@ (80117f8 <Light_Actual_RangeBinding+0x94>)
 801179a:	4613      	mov	r3, r2
 801179c:	009b      	lsls	r3, r3, #2
 801179e:	4413      	add	r3, r2
 80117a0:	440b      	add	r3, r1
 80117a2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80117a6:	b29a      	uxth	r2, r3
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    /* no condition to execute */
  }
}
 80117ac:	e01d      	b.n	80117ea <Light_Actual_RangeBinding+0x86>
  else if((lightActual->TargetLightnessStatus > Light_LightnessRangeParam[elementIndex].MaxRangeStatus)
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	881b      	ldrh	r3, [r3, #0]
 80117b2:	b299      	uxth	r1, r3
 80117b4:	78fa      	ldrb	r2, [r7, #3]
 80117b6:	4810      	ldr	r0, [pc, #64]	@ (80117f8 <Light_Actual_RangeBinding+0x94>)
 80117b8:	4613      	mov	r3, r2
 80117ba:	009b      	lsls	r3, r3, #2
 80117bc:	4413      	add	r3, r2
 80117be:	4403      	add	r3, r0
 80117c0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	4299      	cmp	r1, r3
 80117c8:	d90f      	bls.n	80117ea <Light_Actual_RangeBinding+0x86>
          && (lightActual->TargetLightnessStatus != 0))
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	881b      	ldrh	r3, [r3, #0]
 80117ce:	b29b      	uxth	r3, r3
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d00a      	beq.n	80117ea <Light_Actual_RangeBinding+0x86>
    lightActual->TargetLightnessStatus = Light_LightnessRangeParam[elementIndex].MaxRangeStatus;
 80117d4:	78fa      	ldrb	r2, [r7, #3]
 80117d6:	4908      	ldr	r1, [pc, #32]	@ (80117f8 <Light_Actual_RangeBinding+0x94>)
 80117d8:	4613      	mov	r3, r2
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	4413      	add	r3, r2
 80117de:	440b      	add	r3, r1
 80117e0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80117e4:	b29a      	uxth	r2, r3
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	801a      	strh	r2, [r3, #0]
}
 80117ea:	bf00      	nop
 80117ec:	370c      	adds	r7, #12
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr
 80117f6:	bf00      	nop
 80117f8:	200045d4 	.word	0x200045d4

080117fc <Light_TransitionParameterReset>:
* @brief Function called when message received without optional parameter, stop the running transition.
* @param void
* @param void
*/
void Light_TransitionParameterReset(MOBLEUINT8 elementIndex)
{
 80117fc:	b480      	push	{r7}
 80117fe:	b083      	sub	sp, #12
 8011800:	af00      	add	r7, sp, #0
 8011802:	4603      	mov	r3, r0
 8011804:	71fb      	strb	r3, [r7, #7]
  Light_ModelFlag[elementIndex].LightTransitionFlag = MODEL_TRANSITION_STOP;
 8011806:	79fa      	ldrb	r2, [r7, #7]
 8011808:	4912      	ldr	r1, [pc, #72]	@ (8011854 <Light_TransitionParameterReset+0x58>)
 801180a:	4613      	mov	r3, r2
 801180c:	005b      	lsls	r3, r3, #1
 801180e:	4413      	add	r3, r2
 8011810:	440b      	add	r3, r1
 8011812:	2200      	movs	r2, #0
 8011814:	701a      	strb	r2, [r3, #0]
  Light_TimeParam[elementIndex].Res_Value = 0x00;
 8011816:	79fa      	ldrb	r2, [r7, #7]
 8011818:	490f      	ldr	r1, [pc, #60]	@ (8011858 <Light_TransitionParameterReset+0x5c>)
 801181a:	4613      	mov	r3, r2
 801181c:	009b      	lsls	r3, r3, #2
 801181e:	4413      	add	r3, r2
 8011820:	005b      	lsls	r3, r3, #1
 8011822:	440b      	add	r3, r1
 8011824:	2200      	movs	r2, #0
 8011826:	705a      	strb	r2, [r3, #1]
 8011828:	2200      	movs	r2, #0
 801182a:	709a      	strb	r2, [r3, #2]
 801182c:	2200      	movs	r2, #0
 801182e:	70da      	strb	r2, [r3, #3]
 8011830:	2200      	movs	r2, #0
 8011832:	711a      	strb	r2, [r3, #4]
  Light_TimeParam[elementIndex].StepValue = 0x00;
 8011834:	79fa      	ldrb	r2, [r7, #7]
 8011836:	4908      	ldr	r1, [pc, #32]	@ (8011858 <Light_TransitionParameterReset+0x5c>)
 8011838:	4613      	mov	r3, r2
 801183a:	009b      	lsls	r3, r3, #2
 801183c:	4413      	add	r3, r2
 801183e:	005b      	lsls	r3, r3, #1
 8011840:	440b      	add	r3, r1
 8011842:	2200      	movs	r2, #0
 8011844:	701a      	strb	r2, [r3, #0]
}
 8011846:	bf00      	nop
 8011848:	370c      	adds	r7, #12
 801184a:	46bd      	mov	sp, r7
 801184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011850:	4770      	bx	lr
 8011852:	bf00      	nop
 8011854:	200045a4 	.word	0x200045a4
 8011858:	20004598 	.word	0x20004598

0801185c <Chk_OpcodePresent>:
* @param opcode: opcode of the model
* @param elementIndex:element index of the model
* @return : MOBLE_RESULT
*/
MOBLE_RESULT Chk_OpcodePresent(MOBLEUINT16 opcode ,MOBLEUINT8 elementIndex)
{
 801185c:	b480      	push	{r7}
 801185e:	b085      	sub	sp, #20
 8011860:	af00      	add	r7, sp, #0
 8011862:	4603      	mov	r3, r0
 8011864:	460a      	mov	r2, r1
 8011866:	80fb      	strh	r3, [r7, #6]
 8011868:	4613      	mov	r3, r2
 801186a:	717b      	strb	r3, [r7, #5]
 
  for(MOBLEUINT8 index=0; index < MAX_NUM_BINDED_STATE; index++)
 801186c:	2300      	movs	r3, #0
 801186e:	73fb      	strb	r3, [r7, #15]
 8011870:	e014      	b.n	801189c <Chk_OpcodePresent+0x40>
  {
    if((Light_PublishOpcodeList[elementIndex].PublishStateOpcode[index]) == opcode)
 8011872:	797a      	ldrb	r2, [r7, #5]
 8011874:	7bfb      	ldrb	r3, [r7, #15]
 8011876:	480e      	ldr	r0, [pc, #56]	@ (80118b0 <Chk_OpcodePresent+0x54>)
 8011878:	0059      	lsls	r1, r3, #1
 801187a:	4613      	mov	r3, r2
 801187c:	00db      	lsls	r3, r3, #3
 801187e:	4413      	add	r3, r2
 8011880:	00da      	lsls	r2, r3, #3
 8011882:	4413      	add	r3, r2
 8011884:	440b      	add	r3, r1
 8011886:	4403      	add	r3, r0
 8011888:	881b      	ldrh	r3, [r3, #0]
 801188a:	b29b      	uxth	r3, r3
 801188c:	88fa      	ldrh	r2, [r7, #6]
 801188e:	429a      	cmp	r2, r3
 8011890:	d101      	bne.n	8011896 <Chk_OpcodePresent+0x3a>
    {
      return  MOBLE_RESULT_FALSE;
 8011892:	2301      	movs	r3, #1
 8011894:	e006      	b.n	80118a4 <Chk_OpcodePresent+0x48>
  for(MOBLEUINT8 index=0; index < MAX_NUM_BINDED_STATE; index++)
 8011896:	7bfb      	ldrb	r3, [r7, #15]
 8011898:	3301      	adds	r3, #1
 801189a:	73fb      	strb	r3, [r7, #15]
 801189c:	7bfb      	ldrb	r3, [r7, #15]
 801189e:	2b13      	cmp	r3, #19
 80118a0:	d9e7      	bls.n	8011872 <Chk_OpcodePresent+0x16>
    }
  }
   return MOBLE_RESULT_SUCCESS;     
 80118a2:	2300      	movs	r3, #0
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3714      	adds	r7, #20
 80118a8:	46bd      	mov	sp, r7
 80118aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ae:	4770      	bx	lr
 80118b0:	200045f0 	.word	0x200045f0

080118b4 <Punblication_OneSecTimer>:
* @brief  Function used to calculate the particular time delay only once.
* @param  MOBLEUINT16
* @retval MOBLEUINT8
*/
void Punblication_OneSecTimer(void)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	af00      	add	r7, sp, #0
  static MOBLEUINT32 Check_time;
  
  /* Taking the time stamp for particular time */
  if(Publication1SecFlag.TimeStampFlag == MOBLE_FALSE)
 80118b8:	4b0e      	ldr	r3, [pc, #56]	@ (80118f4 <Punblication_OneSecTimer+0x40>)
 80118ba:	785b      	ldrb	r3, [r3, #1]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d107      	bne.n	80118d0 <Punblication_OneSecTimer+0x1c>
  {
    Check_time = Clock_Time();
 80118c0:	f7f6 faac 	bl	8007e1c <HAL_GetTick>
 80118c4:	4603      	mov	r3, r0
 80118c6:	4a0c      	ldr	r2, [pc, #48]	@ (80118f8 <Punblication_OneSecTimer+0x44>)
 80118c8:	6013      	str	r3, [r2, #0]
    Publication1SecFlag.TimeStampFlag = MOBLE_TRUE;
 80118ca:	4b0a      	ldr	r3, [pc, #40]	@ (80118f4 <Punblication_OneSecTimer+0x40>)
 80118cc:	2201      	movs	r2, #1
 80118ce:	705a      	strb	r2, [r3, #1]
  }
  
  if(((Clock_Time()- Check_time) >= PUBLISH_1SEC_TIME) &&
 80118d0:	f7f6 faa4 	bl	8007e1c <HAL_GetTick>
 80118d4:	4602      	mov	r2, r0
 80118d6:	4b08      	ldr	r3, [pc, #32]	@ (80118f8 <Punblication_OneSecTimer+0x44>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	1ad3      	subs	r3, r2, r3
 80118dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80118e0:	d306      	bcc.n	80118f0 <Punblication_OneSecTimer+0x3c>
                  (Publication1SecFlag.Transition1SecFlag == MOBLE_FALSE))
 80118e2:	4b04      	ldr	r3, [pc, #16]	@ (80118f4 <Punblication_OneSecTimer+0x40>)
 80118e4:	781b      	ldrb	r3, [r3, #0]
  if(((Clock_Time()- Check_time) >= PUBLISH_1SEC_TIME) &&
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d102      	bne.n	80118f0 <Punblication_OneSecTimer+0x3c>
  {
      Publication1SecFlag.Transition1SecFlag = MOBLE_TRUE;
 80118ea:	4b02      	ldr	r3, [pc, #8]	@ (80118f4 <Punblication_OneSecTimer+0x40>)
 80118ec:	2201      	movs	r2, #1
 80118ee:	701a      	strb	r2, [r3, #0]
  }
}
 80118f0:	bf00      	nop
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	200045a8 	.word	0x200045a8
 80118f8:	2000464c 	.word	0x2000464c

080118fc <Light_RestoreModelStates>:
* @brief function used to restore the states of the generic model.
* @param pointer to the array
* return void.
*/
void Light_RestoreModelStates(void *model_State , MOBLEUINT8 elementIndex)
{
 80118fc:	b480      	push	{r7}
 80118fe:	b083      	sub	sp, #12
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	460b      	mov	r3, r1
 8011906:	70fb      	strb	r3, [r7, #3]
  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS  
  Light_LightnessStatus[elementIndex].LightnessPresentValue16 = ((Models_ParamNvm_t *)model_State)->LightLightness; 
 8011908:	78fa      	ldrb	r2, [r7, #3]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	8918      	ldrh	r0, [r3, #8]
 801190e:	4914      	ldr	r1, [pc, #80]	@ (8011960 <Light_RestoreModelStates+0x64>)
 8011910:	4613      	mov	r3, r2
 8011912:	00db      	lsls	r3, r3, #3
 8011914:	4413      	add	r3, r2
 8011916:	440b      	add	r3, r1
 8011918:	4602      	mov	r2, r0
 801191a:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].TargetValue16 = ((Models_ParamNvm_t *)model_State)->LightTarget;
 801191c:	78fa      	ldrb	r2, [r7, #3]
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	8958      	ldrh	r0, [r3, #10]
 8011922:	490f      	ldr	r1, [pc, #60]	@ (8011960 <Light_RestoreModelStates+0x64>)
 8011924:	4613      	mov	r3, r2
 8011926:	00db      	lsls	r3, r3, #3
 8011928:	4413      	add	r3, r2
 801192a:	440b      	add	r3, r1
 801192c:	3304      	adds	r3, #4
 801192e:	4602      	mov	r2, r0
 8011930:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].LightnessLastStatus = ((Models_ParamNvm_t *)model_State)->LightLast;
 8011932:	78fa      	ldrb	r2, [r7, #3]
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	89d8      	ldrh	r0, [r3, #14]
 8011938:	4909      	ldr	r1, [pc, #36]	@ (8011960 <Light_RestoreModelStates+0x64>)
 801193a:	4613      	mov	r3, r2
 801193c:	00db      	lsls	r3, r3, #3
 801193e:	4413      	add	r3, r2
 8011940:	440b      	add	r3, r1
 8011942:	4602      	mov	r2, r0
 8011944:	f8a3 2007 	strh.w	r2, [r3, #7]
  Light_LightnessDefaultParam[elementIndex].LightnessDefaultStatus = ((Models_ParamNvm_t *)model_State)->LightDefault;
 8011948:	78fb      	ldrb	r3, [r7, #3]
 801194a:	687a      	ldr	r2, [r7, #4]
 801194c:	8991      	ldrh	r1, [r2, #12]
 801194e:	4a05      	ldr	r2, [pc, #20]	@ (8011964 <Light_RestoreModelStates+0x68>)
 8011950:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  Light_HslStatus[elementIndex].PresentHslSaturation16 = ((Models_ParamNvm_t *)model_State)->HslSaturation;
  Light_HslDefaultParam[elementIndex].HslLightnessDefault16 = ((Models_ParamNvm_t *)model_State)->HslLightnessDefault;
  Light_HslDefaultParam[elementIndex].HslHueDefault16 = ((Models_ParamNvm_t *)model_State)->HslHueDefault;
  Light_HslDefaultParam[elementIndex].HslSaturationDefault16 = ((Models_ParamNvm_t *)model_State)->HslSaturationDefault;  
#endif   
}
 8011954:	bf00      	nop
 8011956:	370c      	adds	r7, #12
 8011958:	46bd      	mov	sp, r7
 801195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195e:	4770      	bx	lr
 8011960:	200045c4 	.word	0x200045c4
 8011964:	200045d0 	.word	0x200045d0

08011968 <Appli_Light_Ctl_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_Ctl_Set(Light_CtlStatus_t* pLight_CtlParam,
                                               MOBLEUINT8 OptionalValid, 
                                               uint16_t dstPeer, 
                                               uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	4608      	mov	r0, r1
 8011972:	4611      	mov	r1, r2
 8011974:	461a      	mov	r2, r3
 8011976:	4603      	mov	r3, r0
 8011978:	70fb      	strb	r3, [r7, #3]
 801197a:	460b      	mov	r3, r1
 801197c:	803b      	strh	r3, [r7, #0]
 801197e:	4613      	mov	r3, r2
 8011980:	70bb      	strb	r3, [r7, #2]
 8011982:	2300      	movs	r3, #0
 8011984:	4618      	mov	r0, r3
 8011986:	370c      	adds	r7, #12
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr

08011990 <Appli_Light_CtlTemperature_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_CtlTemperature_Set(Light_CtlStatus_t* pLight_CtltempParam,
                                                          MOBLEUINT8 OptionalValid, 
                                                          uint16_t dstPeer, 
                                                          uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011990:	b480      	push	{r7}
 8011992:	b083      	sub	sp, #12
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	4608      	mov	r0, r1
 801199a:	4611      	mov	r1, r2
 801199c:	461a      	mov	r2, r3
 801199e:	4603      	mov	r3, r0
 80119a0:	70fb      	strb	r3, [r7, #3]
 80119a2:	460b      	mov	r3, r1
 80119a4:	803b      	strh	r3, [r7, #0]
 80119a6:	4613      	mov	r3, r2
 80119a8:	70bb      	strb	r3, [r7, #2]
 80119aa:	2300      	movs	r3, #0
 80119ac:	4618      	mov	r0, r3
 80119ae:	370c      	adds	r7, #12
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr

080119b8 <Appli_Light_CtlTemperature_Range_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_CtlTemperature_Range_Set(Light_CtlTemperatureRangeParam_t* pLight_CtlTempRangeParam,
                                                                MOBLEUINT8 OptionalValid, 
                                                                uint16_t dstPeer, 
                                                                uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 80119b8:	b480      	push	{r7}
 80119ba:	b083      	sub	sp, #12
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	4608      	mov	r0, r1
 80119c2:	4611      	mov	r1, r2
 80119c4:	461a      	mov	r2, r3
 80119c6:	4603      	mov	r3, r0
 80119c8:	70fb      	strb	r3, [r7, #3]
 80119ca:	460b      	mov	r3, r1
 80119cc:	803b      	strh	r3, [r7, #0]
 80119ce:	4613      	mov	r3, r2
 80119d0:	70bb      	strb	r3, [r7, #2]
 80119d2:	2300      	movs	r3, #0
 80119d4:	4618      	mov	r0, r3
 80119d6:	370c      	adds	r7, #12
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr

080119e0 <Appli_Light_CtlDefault_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_CtlDefault_Set(Light_CtlDefaultParam_t* pLight_CtlDefaultParam,
                                                      MOBLEUINT8 OptionalValid, 
                                                      uint16_t dstPeer, 
                                                      uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 80119e0:	b480      	push	{r7}
 80119e2:	b083      	sub	sp, #12
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	4608      	mov	r0, r1
 80119ea:	4611      	mov	r1, r2
 80119ec:	461a      	mov	r2, r3
 80119ee:	4603      	mov	r3, r0
 80119f0:	70fb      	strb	r3, [r7, #3]
 80119f2:	460b      	mov	r3, r1
 80119f4:	803b      	strh	r3, [r7, #0]
 80119f6:	4613      	mov	r3, r2
 80119f8:	70bb      	strb	r3, [r7, #2]
 80119fa:	2300      	movs	r3, #0
 80119fc:	4618      	mov	r0, r3
 80119fe:	370c      	adds	r7, #12
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <Appli_Light_Hsl_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_Hsl_Set(Light_HslStatus_t* pLight_HslParam,
                                               MOBLEUINT8 OptionalValid, 
                                               uint16_t dstPeer, 
                                               uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011a08:	b480      	push	{r7}
 8011a0a:	b083      	sub	sp, #12
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	4608      	mov	r0, r1
 8011a12:	4611      	mov	r1, r2
 8011a14:	461a      	mov	r2, r3
 8011a16:	4603      	mov	r3, r0
 8011a18:	70fb      	strb	r3, [r7, #3]
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	803b      	strh	r3, [r7, #0]
 8011a1e:	4613      	mov	r3, r2
 8011a20:	70bb      	strb	r3, [r7, #2]
 8011a22:	2300      	movs	r3, #0
 8011a24:	4618      	mov	r0, r3
 8011a26:	370c      	adds	r7, #12
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr

08011a30 <Appli_Light_HslHue_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_HslHue_Set(Light_HslStatus_t* pLight_HslHueParam,
                                                  MOBLEUINT8 OptionalValid, 
                                                  uint16_t dstPeer, 
                                                  uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011a30:	b480      	push	{r7}
 8011a32:	b083      	sub	sp, #12
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	4608      	mov	r0, r1
 8011a3a:	4611      	mov	r1, r2
 8011a3c:	461a      	mov	r2, r3
 8011a3e:	4603      	mov	r3, r0
 8011a40:	70fb      	strb	r3, [r7, #3]
 8011a42:	460b      	mov	r3, r1
 8011a44:	803b      	strh	r3, [r7, #0]
 8011a46:	4613      	mov	r3, r2
 8011a48:	70bb      	strb	r3, [r7, #2]
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	370c      	adds	r7, #12
 8011a50:	46bd      	mov	sp, r7
 8011a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a56:	4770      	bx	lr

08011a58 <Appli_Light_HslSaturation_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_HslSaturation_Set(Light_HslStatus_t* pLight_HslSaturationParam,
                                                         MOBLEUINT8 OptionalValid, 
                                                         uint16_t dstPeer, 
                                                         uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011a58:	b480      	push	{r7}
 8011a5a:	b083      	sub	sp, #12
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	4608      	mov	r0, r1
 8011a62:	4611      	mov	r1, r2
 8011a64:	461a      	mov	r2, r3
 8011a66:	4603      	mov	r3, r0
 8011a68:	70fb      	strb	r3, [r7, #3]
 8011a6a:	460b      	mov	r3, r1
 8011a6c:	803b      	strh	r3, [r7, #0]
 8011a6e:	4613      	mov	r3, r2
 8011a70:	70bb      	strb	r3, [r7, #2]
 8011a72:	2300      	movs	r3, #0
 8011a74:	4618      	mov	r0, r3
 8011a76:	370c      	adds	r7, #12
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7e:	4770      	bx	lr

08011a80 <Appli_Light_HslDefault_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_HslDefault_Set(Light_HslDefaultParam_t* pLight_HslDefaultParam,
                                                      MOBLEUINT8 OptionalValid, 
                                                      uint16_t dstPeer, 
                                                      uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011a80:	b480      	push	{r7}
 8011a82:	b083      	sub	sp, #12
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	4608      	mov	r0, r1
 8011a8a:	4611      	mov	r1, r2
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	4603      	mov	r3, r0
 8011a90:	70fb      	strb	r3, [r7, #3]
 8011a92:	460b      	mov	r3, r1
 8011a94:	803b      	strh	r3, [r7, #0]
 8011a96:	4613      	mov	r3, r2
 8011a98:	70bb      	strb	r3, [r7, #2]
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	370c      	adds	r7, #12
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa6:	4770      	bx	lr

08011aa8 <Appli_Light_HslRange_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_HslRange_Set(Light_HslRangeParam_t* pLight_HslRangeParam,
                                                    MOBLEUINT8 OptionalValid, 
                                                    uint16_t dstPeer, 
                                                    uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011aa8:	b480      	push	{r7}
 8011aaa:	b083      	sub	sp, #12
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	4608      	mov	r0, r1
 8011ab2:	4611      	mov	r1, r2
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	70fb      	strb	r3, [r7, #3]
 8011aba:	460b      	mov	r3, r1
 8011abc:	803b      	strh	r3, [r7, #0]
 8011abe:	4613      	mov	r3, r2
 8011ac0:	70bb      	strb	r3, [r7, #2]
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	370c      	adds	r7, #12
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ace:	4770      	bx	lr

08011ad0 <Appli_Light_GetCtlLightStatus>:
                                                               uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlLightStatus(MOBLEUINT8* lCtlLightState, 
                                                         uint16_t dstPeer, 
                                                         uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011ad0:	b480      	push	{r7}
 8011ad2:	b083      	sub	sp, #12
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
 8011ad8:	460b      	mov	r3, r1
 8011ada:	807b      	strh	r3, [r7, #2]
 8011adc:	4613      	mov	r3, r2
 8011ade:	707b      	strb	r3, [r7, #1]
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	370c      	adds	r7, #12
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aec:	4770      	bx	lr

08011aee <Appli_Light_GetCtlTargetStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlTargetStatus(MOBLEUINT8* lCtlLightState, 
                                                          MOBLEUINT16 dstPeer, 
                                                          MOBLEUINT8 elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011aee:	b480      	push	{r7}
 8011af0:	b083      	sub	sp, #12
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
 8011af6:	460b      	mov	r3, r1
 8011af8:	807b      	strh	r3, [r7, #2]
 8011afa:	4613      	mov	r3, r2
 8011afc:	707b      	strb	r3, [r7, #1]
 8011afe:	2300      	movs	r3, #0
 8011b00:	4618      	mov	r0, r3
 8011b02:	370c      	adds	r7, #12
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr

08011b0c <Appli_Light_GetCtlTemperatureStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlTemperatureStatus(MOBLEUINT8* lCtlTempState, 
                                                               uint16_t dstPeer, 
                                                               uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011b0c:	b480      	push	{r7}
 8011b0e:	b083      	sub	sp, #12
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	460b      	mov	r3, r1
 8011b16:	807b      	strh	r3, [r7, #2]
 8011b18:	4613      	mov	r3, r2
 8011b1a:	707b      	strb	r3, [r7, #1]
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	4618      	mov	r0, r3
 8011b20:	370c      	adds	r7, #12
 8011b22:	46bd      	mov	sp, r7
 8011b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b28:	4770      	bx	lr

08011b2a <Appli_Light_GetCtlTemperatureRange>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlTemperatureRange(MOBLEUINT8* lCtlTempRange, 
                                                              uint16_t dstPeer, 
                                                              uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011b2a:	b480      	push	{r7}
 8011b2c:	b083      	sub	sp, #12
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	6078      	str	r0, [r7, #4]
 8011b32:	460b      	mov	r3, r1
 8011b34:	807b      	strh	r3, [r7, #2]
 8011b36:	4613      	mov	r3, r2
 8011b38:	707b      	strb	r3, [r7, #1]
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	370c      	adds	r7, #12
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr

08011b48 <Appli_Light_GetCtlDefaultStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlDefaultStatus(MOBLEUINT8* lCtlDefaultState, 
                                                           uint16_t dstPeer, 
                                                           uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011b48:	b480      	push	{r7}
 8011b4a:	b083      	sub	sp, #12
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
 8011b50:	460b      	mov	r3, r1
 8011b52:	807b      	strh	r3, [r7, #2]
 8011b54:	4613      	mov	r3, r2
 8011b56:	707b      	strb	r3, [r7, #1]
 8011b58:	2300      	movs	r3, #0
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	370c      	adds	r7, #12
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b64:	4770      	bx	lr

08011b66 <Appli_Light_GetHslStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslStatus(MOBLEUINT8* lHslState, 
                                                    uint16_t dstPeer, 
                                                    uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011b66:	b480      	push	{r7}
 8011b68:	b083      	sub	sp, #12
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
 8011b6e:	460b      	mov	r3, r1
 8011b70:	807b      	strh	r3, [r7, #2]
 8011b72:	4613      	mov	r3, r2
 8011b74:	707b      	strb	r3, [r7, #1]
 8011b76:	2300      	movs	r3, #0
 8011b78:	4618      	mov	r0, r3
 8011b7a:	370c      	adds	r7, #12
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr

08011b84 <Appli_Light_GetHslTargetStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslTargetStatus(MOBLEUINT8* lHslState, 
                                                          MOBLEUINT16 dstPeer, 
                                                          MOBLEUINT8 elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011b84:	b480      	push	{r7}
 8011b86:	b083      	sub	sp, #12
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
 8011b8c:	460b      	mov	r3, r1
 8011b8e:	807b      	strh	r3, [r7, #2]
 8011b90:	4613      	mov	r3, r2
 8011b92:	707b      	strb	r3, [r7, #1]
 8011b94:	2300      	movs	r3, #0
 8011b96:	4618      	mov	r0, r3
 8011b98:	370c      	adds	r7, #12
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba0:	4770      	bx	lr

08011ba2 <Appli_Light_GetHslHueStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslHueStatus(MOBLEUINT8* lHslHueState, 
                                                       uint16_t dstPeer, 
                                                       uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011ba2:	b480      	push	{r7}
 8011ba4:	b083      	sub	sp, #12
 8011ba6:	af00      	add	r7, sp, #0
 8011ba8:	6078      	str	r0, [r7, #4]
 8011baa:	460b      	mov	r3, r1
 8011bac:	807b      	strh	r3, [r7, #2]
 8011bae:	4613      	mov	r3, r2
 8011bb0:	707b      	strb	r3, [r7, #1]
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	370c      	adds	r7, #12
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bbe:	4770      	bx	lr

08011bc0 <Appli_Light_GetHslSaturationStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslSaturationStatus(MOBLEUINT8* lHslSaturationState, 
                                                              uint16_t dstPeer, 
                                                              uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011bc0:	b480      	push	{r7}
 8011bc2:	b083      	sub	sp, #12
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	460b      	mov	r3, r1
 8011bca:	807b      	strh	r3, [r7, #2]
 8011bcc:	4613      	mov	r3, r2
 8011bce:	707b      	strb	r3, [r7, #1]
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	370c      	adds	r7, #12
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bdc:	4770      	bx	lr

08011bde <Appli_Light_GetHslHueRange>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslHueRange(MOBLEUINT8* lHslHueRange, 
                                                      uint16_t dstPeer, 
                                                      uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011bde:	b480      	push	{r7}
 8011be0:	b083      	sub	sp, #12
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	6078      	str	r0, [r7, #4]
 8011be6:	460b      	mov	r3, r1
 8011be8:	807b      	strh	r3, [r7, #2]
 8011bea:	4613      	mov	r3, r2
 8011bec:	707b      	strb	r3, [r7, #1]
 8011bee:	2300      	movs	r3, #0
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	370c      	adds	r7, #12
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfa:	4770      	bx	lr

08011bfc <Appli_Light_GetHslSatRange>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslSatRange(MOBLEUINT8* lHslSatRange, 
                                                      uint16_t dstPeer, 
                                                      uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011bfc:	b480      	push	{r7}
 8011bfe:	b083      	sub	sp, #12
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	460b      	mov	r3, r1
 8011c06:	807b      	strh	r3, [r7, #2]
 8011c08:	4613      	mov	r3, r2
 8011c0a:	707b      	strb	r3, [r7, #1]
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	4618      	mov	r0, r3
 8011c10:	370c      	adds	r7, #12
 8011c12:	46bd      	mov	sp, r7
 8011c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c18:	4770      	bx	lr

08011c1a <Appli_Light_GetHslDefaultStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslDefaultStatus(MOBLEUINT8* lHslDefaultState, 
                                                           uint16_t dstPeer, 
                                                           uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011c1a:	b480      	push	{r7}
 8011c1c:	b083      	sub	sp, #12
 8011c1e:	af00      	add	r7, sp, #0
 8011c20:	6078      	str	r0, [r7, #4]
 8011c22:	460b      	mov	r3, r1
 8011c24:	807b      	strh	r3, [r7, #2]
 8011c26:	4613      	mov	r3, r2
 8011c28:	707b      	strb	r3, [r7, #1]
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	370c      	adds	r7, #12
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr

08011c38 <MESH_Init>:
 * @brief  Mesh initialization
 * @param  None
 * @retval None
 */
void MESH_Init(void)
{
 8011c38:	b5b0      	push	{r4, r5, r7, lr}
 8011c3a:	b090      	sub	sp, #64	@ 0x40
 8011c3c:	af04      	add	r7, sp, #16
  MOBLEUINT8 uuid[16];
  MOBLEUINT8 PrvnDevKeyFlag = 0;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	75fb      	strb	r3, [r7, #23]
//#if PROVISIONER_FEATURE
//   MOBLEUINT8 prvsnrDevKey[16];
//#endif
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;  
 8011c42:	1d3b      	adds	r3, r7, #4
 8011c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  /* Check for valid Board Address */
  if (!Appli_CheckBdMacAddr())
 8011c46:	f7f4 fb71 	bl	800632c <Appli_CheckBdMacAddr>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d105      	bne.n	8011c5c <MESH_Init+0x24>
  {
    TRACE_I(TF_INIT,"Bad BD_MAC ADDR!\r\n");
 8011c50:	485c      	ldr	r0, [pc, #368]	@ (8011dc4 <MESH_Init+0x18c>)
 8011c52:	f017 f975 	bl	8028f40 <puts>
    /* LED Blinks if BDAddr is not appropriate */
    while (1)
    {
      Appli_LedBlink();
 8011c56:	f7f4 f9bf 	bl	8005fd8 <Appli_LedBlink>
 8011c5a:	e7fc      	b.n	8011c56 <MESH_Init+0x1e>
    }
  }
  
  /* Set BLE configuration function callbacks */
  BLEMesh_BleHardwareInitCallBack(&user_ble_cb);  
 8011c5c:	485a      	ldr	r0, [pc, #360]	@ (8011dc8 <MESH_Init+0x190>)
 8011c5e:	f00b f96d 	bl	801cf3c <BLEMesh_BleHardwareInitCallBack>
  
  /*Set BLE Config Model APIs callback*/
  BLEMesh_BleConfigModelInitCallBack(&config_model_cb);
 8011c62:	485a      	ldr	r0, [pc, #360]	@ (8011dcc <MESH_Init+0x194>)
 8011c64:	f00b f974 	bl	801cf50 <BLEMesh_BleConfigModelInitCallBack>

  /* Initializes BLE-Mesh Library */
  if (MOBLE_FAILED(BLEMesh_Init(&BLEMeshlib_Init_params)))
 8011c68:	4859      	ldr	r0, [pc, #356]	@ (8011dd0 <MESH_Init+0x198>)
 8011c6a:	f014 fec3 	bl	80269f4 <BLEMesh_Init>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d905      	bls.n	8011c80 <MESH_Init+0x48>
  {
    TRACE_I(TF_INIT,"Could not initialize BLE-Mesh library!\r\n");   
 8011c74:	4857      	ldr	r0, [pc, #348]	@ (8011dd4 <MESH_Init+0x19c>)
 8011c76:	f017 f963 	bl	8028f40 <puts>
    /* LED continuously blinks if library fails to initialize */
    while (1)
    {
      Appli_LedBlink();
 8011c7a:	f7f4 f9ad 	bl	8005fd8 <Appli_LedBlink>
 8011c7e:	e7fc      	b.n	8011c7a <MESH_Init+0x42>
    }
  }
  
  /*Check SIG & VENDOR models limit*/
  if(MOBLE_FAILED(AppliCheck_EnabledModelsList()))
 8011c80:	f001 f846 	bl	8012d10 <AppliCheck_EnabledModelsList>
 8011c84:	4603      	mov	r3, r0
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d902      	bls.n	8011c90 <MESH_Init+0x58>
  {
    /* LED continuously blinks if library fails to initialize */
    while (1)
    {
      Appli_LedBlink();
 8011c8a:	f7f4 f9a5 	bl	8005fd8 <Appli_LedBlink>
 8011c8e:	e7fc      	b.n	8011c8a <MESH_Init+0x52>
  /* This function also checks for Power OnOff Cycles     
     Define the following Macro "ENABLE_UNPROVISIONING_BY_POWER_ONOFF_CYCLE" 
     to check the Power-OnOff Cycles
    5 Continuous cycles of OnOff with Ontime <2 sec will cause unprovisioning
  */
  Appli_Init(&PrvnDevKeyFlag);
 8011c90:	f107 0317 	add.w	r3, r7, #23
 8011c94:	4618      	mov	r0, r3
 8011c96:	f7f4 fd4f 	bl	8006738 <Appli_Init>
  
  Appli_StartProvisionerMode(1);
  
#else
  /* Checks if the node is already provisioned or not */
  if (BLEMesh_IsUnprovisioned() == MOBLE_TRUE)
 8011c9a:	f00c fe51 	bl	801e940 <BLEMesh_IsUnprovisioned>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d108      	bne.n	8011cb6 <MESH_Init+0x7e>
  {
    BLEMesh_InitUnprovisionedNode(); /* Initializes  Unprovisioned node */
 8011ca4:	f00c fdc0 	bl	801e828 <BLEMesh_InitUnprovisionedNode>

    TRACE_I(TF_PROVISION,"Unprovisioned device \r\n");
 8011ca8:	484b      	ldr	r0, [pc, #300]	@ (8011dd8 <MESH_Init+0x1a0>)
 8011caa:	f017 f949 	bl	8028f40 <puts>
    
#if PB_ADV_SUPPORTED
    BLEMesh_SetUnprovisionedDevBeaconInterval(100);
 8011cae:	2064      	movs	r0, #100	@ 0x64
 8011cb0:	f00a ff56 	bl	801cb60 <BLEMesh_SetUnprovisionedDevBeaconInterval>
 8011cb4:	e00b      	b.n	8011cce <MESH_Init+0x96>
#endif    
  }
  else
  {
    BLEMesh_InitProvisionedNode();  /* Initializes  Provisioned node */
 8011cb6:	f00c fcfb 	bl	801e6b0 <BLEMesh_InitProvisionedNode>
    TRACE_I(TF_PROVISION,"Provisioned node \r\n");
 8011cba:	4848      	ldr	r0, [pc, #288]	@ (8011ddc <MESH_Init+0x1a4>)
 8011cbc:	f017 f940 	bl	8028f40 <puts>
    TRACE_I(TF_INIT,"Provisioned Node Address: [%04x] \n\r", BLEMesh_GetAddress());       
 8011cc0:	f00a fedc 	bl	801ca7c <BLEMesh_GetAddress>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	4619      	mov	r1, r3
 8011cc8:	4845      	ldr	r0, [pc, #276]	@ (8011de0 <MESH_Init+0x1a8>)
 8011cca:	f017 f8d1 	bl	8028e70 <iprintf>
//                                     PROVISIONER_ROOT_ADDR_DEFAULT,
//                                     &PrvnDevKeyFlag, 
//                                     APPLICATION_NUMBER_OF_ELEMENTS);  
//#endif  
/* Check to manually unprovision the board */
  Appli_CheckForUnprovision();
 8011cce:	f7f4 fa91 	bl	80061f4 <Appli_CheckForUnprovision>
  
  /* Set attention timer callback */
  BLEMesh_SetAttentionTimerCallback(Appli_BleAttentionTimerCb);
 8011cd2:	4844      	ldr	r0, [pc, #272]	@ (8011de4 <MESH_Init+0x1ac>)
 8011cd4:	f00a ff38 	bl	801cb48 <BLEMesh_SetAttentionTimerCallback>

#if TF_MISC
  Appli_ConfigurationInfoDump();
 8011cd8:	f000 f89a 	bl	8011e10 <Appli_ConfigurationInfoDump>
#endif  

/* Set uuid for the board*/
  Appli_BleSetUUIDCb(uuid);
 8011cdc:	f107 0318 	add.w	r3, r7, #24
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7f4 f9af 	bl	8006044 <Appli_BleSetUUIDCb>
  
  /* Prints the MAC Address of the board */ 
  TRACE_I(TF_INIT,"BLE-Mesh Lighting Demo v%s\n\r", BLE_MESH_APPLICATION_VERSION); 
 8011ce6:	4940      	ldr	r1, [pc, #256]	@ (8011de8 <MESH_Init+0x1b0>)
 8011ce8:	4840      	ldr	r0, [pc, #256]	@ (8011dec <MESH_Init+0x1b4>)
 8011cea:	f017 f8c1 	bl	8028e70 <iprintf>
  TRACE_I(TF_INIT,"BLE-Mesh Library v%s\n\r", BLEMesh_GetLibraryVersion()); 
 8011cee:	f00b f91d 	bl	801cf2c <BLEMesh_GetLibraryVersion>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	4619      	mov	r1, r3
 8011cf6:	483e      	ldr	r0, [pc, #248]	@ (8011df0 <MESH_Init+0x1b8>)
 8011cf8:	f017 f8ba 	bl	8028e70 <iprintf>
  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8011cfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011cfe:	f003 fc67 	bl	80155d0 <SHCI_GetWirelessFwInfo>
 8011d02:	4603      	mov	r3, r0
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d11f      	bne.n	8011d48 <MESH_Init+0x110>
  {
    // Error
  }
  else
  {
    TRACE_I(TF_INIT,"BLE Stack v%d.%d.%d Branch=%d Type=%d\n\r", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub, p_wireless_info->VersionBranch, p_wireless_info->VersionReleaseType);
 8011d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d0a:	781b      	ldrb	r3, [r3, #0]
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d10:	785b      	ldrb	r3, [r3, #1]
 8011d12:	4618      	mov	r0, r3
 8011d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d16:	789b      	ldrb	r3, [r3, #2]
 8011d18:	461c      	mov	r4, r3
 8011d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d1c:	78db      	ldrb	r3, [r3, #3]
 8011d1e:	461a      	mov	r2, r3
 8011d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d22:	791b      	ldrb	r3, [r3, #4]
 8011d24:	9301      	str	r3, [sp, #4]
 8011d26:	9200      	str	r2, [sp, #0]
 8011d28:	4623      	mov	r3, r4
 8011d2a:	4602      	mov	r2, r0
 8011d2c:	4831      	ldr	r0, [pc, #196]	@ (8011df4 <MESH_Init+0x1bc>)
 8011d2e:	f017 f89f 	bl	8028e70 <iprintf>
    TRACE_I(TF_INIT,"FUS v%d.%d.%d\n\r", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 8011d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d34:	7a9b      	ldrb	r3, [r3, #10]
 8011d36:	4619      	mov	r1, r3
 8011d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d3a:	7adb      	ldrb	r3, [r3, #11]
 8011d3c:	461a      	mov	r2, r3
 8011d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d40:	7b1b      	ldrb	r3, [r3, #12]
 8011d42:	482d      	ldr	r0, [pc, #180]	@ (8011df8 <MESH_Init+0x1c0>)
 8011d44:	f017 f894 	bl	8028e70 <iprintf>
  }
  
  TRACE_I(TF_INIT,"BD_MAC Address = [%02x]:[%02x]:[%02x]:[%02x]:[%02x]:[%02x] \n\r",
 8011d48:	4b2c      	ldr	r3, [pc, #176]	@ (8011dfc <MESH_Init+0x1c4>)
 8011d4a:	795b      	ldrb	r3, [r3, #5]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8011dfc <MESH_Init+0x1c4>)
 8011d50:	791b      	ldrb	r3, [r3, #4]
 8011d52:	461c      	mov	r4, r3
 8011d54:	4b29      	ldr	r3, [pc, #164]	@ (8011dfc <MESH_Init+0x1c4>)
 8011d56:	78db      	ldrb	r3, [r3, #3]
 8011d58:	461d      	mov	r5, r3
 8011d5a:	4b28      	ldr	r3, [pc, #160]	@ (8011dfc <MESH_Init+0x1c4>)
 8011d5c:	789b      	ldrb	r3, [r3, #2]
 8011d5e:	461a      	mov	r2, r3
 8011d60:	4b26      	ldr	r3, [pc, #152]	@ (8011dfc <MESH_Init+0x1c4>)
 8011d62:	785b      	ldrb	r3, [r3, #1]
 8011d64:	4619      	mov	r1, r3
 8011d66:	4b25      	ldr	r3, [pc, #148]	@ (8011dfc <MESH_Init+0x1c4>)
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	9302      	str	r3, [sp, #8]
 8011d6c:	9101      	str	r1, [sp, #4]
 8011d6e:	9200      	str	r2, [sp, #0]
 8011d70:	462b      	mov	r3, r5
 8011d72:	4622      	mov	r2, r4
 8011d74:	4601      	mov	r1, r0
 8011d76:	4822      	ldr	r0, [pc, #136]	@ (8011e00 <MESH_Init+0x1c8>)
 8011d78:	f017 f87a 	bl	8028e70 <iprintf>
          bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
  TRACE_I(TF_INIT,"UUID Address = ");
 8011d7c:	4821      	ldr	r0, [pc, #132]	@ (8011e04 <MESH_Init+0x1cc>)
 8011d7e:	f017 f877 	bl	8028e70 <iprintf>
  
  for(MOBLEUINT8 i=0;i<16;i++)
 8011d82:	2300      	movs	r3, #0
 8011d84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011d88:	e00e      	b.n	8011da8 <MESH_Init+0x170>
  {
    TRACE_I(TF_INIT,"[%02x] ",uuid[i]);
 8011d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011d8e:	3330      	adds	r3, #48	@ 0x30
 8011d90:	443b      	add	r3, r7
 8011d92:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8011d96:	4619      	mov	r1, r3
 8011d98:	481b      	ldr	r0, [pc, #108]	@ (8011e08 <MESH_Init+0x1d0>)
 8011d9a:	f017 f869 	bl	8028e70 <iprintf>
  for(MOBLEUINT8 i=0;i<16;i++)
 8011d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011da2:	3301      	adds	r3, #1
 8011da4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011da8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011dac:	2b0f      	cmp	r3, #15
 8011dae:	d9ec      	bls.n	8011d8a <MESH_Init+0x152>
  }
  TRACE_I(TF_INIT,"\r\n");
 8011db0:	4816      	ldr	r0, [pc, #88]	@ (8011e0c <MESH_Init+0x1d4>)
 8011db2:	f017 f8c5 	bl	8028f40 <puts>

  /* Models initialization */  
  BLEMesh_ModelsInit();
 8011db6:	f7f5 f8f5 	bl	8006fa4 <BLEMesh_ModelsInit>
#endif
  
#ifdef CUSTOM_BOARD_PWM_SELECTION  
  Light_UpdatePWMValue((MOBLEUINT8)DEFAULT_STATE);
#endif
}
 8011dba:	bf00      	nop
 8011dbc:	3730      	adds	r7, #48	@ 0x30
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8011dc2:	bf00      	nop
 8011dc4:	0802e7d4 	.word	0x0802e7d4
 8011dc8:	08030d4c 	.word	0x08030d4c
 8011dcc:	08030d70 	.word	0x08030d70
 8011dd0:	08030dac 	.word	0x08030dac
 8011dd4:	0802e7e8 	.word	0x0802e7e8
 8011dd8:	0802e810 	.word	0x0802e810
 8011ddc:	0802e828 	.word	0x0802e828
 8011de0:	0802e83c 	.word	0x0802e83c
 8011de4:	0800619d 	.word	0x0800619d
 8011de8:	0802e860 	.word	0x0802e860
 8011dec:	0802e86c 	.word	0x0802e86c
 8011df0:	0802e88c 	.word	0x0802e88c
 8011df4:	0802e8a4 	.word	0x0802e8a4
 8011df8:	0802e8cc 	.word	0x0802e8cc
 8011dfc:	2000443c 	.word	0x2000443c
 8011e00:	0802e8dc 	.word	0x0802e8dc
 8011e04:	0802e91c 	.word	0x0802e91c
 8011e08:	0802e92c 	.word	0x0802e92c
 8011e0c:	0802e934 	.word	0x0802e934

08011e10 <Appli_ConfigurationInfoDump>:
* @brief This function is the Information dump function
* @param  None
* @retval None
*/
void Appli_ConfigurationInfoDump(void)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
  TRACE_I(TF_MISC,"\r\n********************\r\n");
 8011e16:	4873      	ldr	r0, [pc, #460]	@ (8011fe4 <Appli_ConfigurationInfoDump+0x1d4>)
 8011e18:	f017 f892 	bl	8028f40 <puts>
  TRACE_I(TF_MISC,"[Features Supported] \r\n");
 8011e1c:	4872      	ldr	r0, [pc, #456]	@ (8011fe8 <Appli_ConfigurationInfoDump+0x1d8>)
 8011e1e:	f017 f88f 	bl	8028f40 <puts>

#ifdef ENABLE_RELAY_FEATURE
  TRACE_I(TF_MISC,"Relay = Enabled \r\n");
 8011e22:	4872      	ldr	r0, [pc, #456]	@ (8011fec <Appli_ConfigurationInfoDump+0x1dc>)
 8011e24:	f017 f88c 	bl	8028f40 <puts>
#endif 
  
#ifdef ENABLE_PROXY_FEATURE
  TRACE_I(TF_MISC,"Proxy = Enabled \r\n");
 8011e28:	4871      	ldr	r0, [pc, #452]	@ (8011ff0 <Appli_ConfigurationInfoDump+0x1e0>)
 8011e2a:	f017 f889 	bl	8028f40 <puts>
#endif
  
#ifdef ENABLE_FRIEND_FEATURE
  TRACE_I(TF_MISC,"Friend = Enabled \r\n");
 8011e2e:	4871      	ldr	r0, [pc, #452]	@ (8011ff4 <Appli_ConfigurationInfoDump+0x1e4>)
 8011e30:	f017 f886 	bl	8028f40 <puts>
  
#ifdef DYNAMIC_PROVISIONER
  TRACE_I(TF_MISC,"Dynamic Provisioner = Enabled \r\n");
#endif  
  
  TRACE_I(TF_MISC,"\n[Options] \r\n");
 8011e34:	4870      	ldr	r0, [pc, #448]	@ (8011ff8 <Appli_ConfigurationInfoDump+0x1e8>)
 8011e36:	f017 f883 	bl	8028f40 <puts>
  
#ifdef ENABLE_PB_ADV
  TRACE_I(TF_MISC,"PB-ADV = Enabled \r\n");
 8011e3a:	4870      	ldr	r0, [pc, #448]	@ (8011ffc <Appli_ConfigurationInfoDump+0x1ec>)
 8011e3c:	f017 f880 	bl	8028f40 <puts>
#endif
  
#ifdef ENABLE_PB_GATT  
  TRACE_I(TF_MISC,"PB-GATT = Enabled \r\n");
 8011e40:	486f      	ldr	r0, [pc, #444]	@ (8012000 <Appli_ConfigurationInfoDump+0x1f0>)
 8011e42:	f017 f87d 	bl	8028f40 <puts>
  
#ifdef ENABLE_AUTH_TYPE_INPUT_OOB
  TRACE_I(TF_MISC,"Input OOB = Enabled \r\n");
#endif
  
  TRACE_I(TF_MISC,"\n[Library Capabilities] \r\n");
 8011e46:	486f      	ldr	r0, [pc, #444]	@ (8012004 <Appli_ConfigurationInfoDump+0x1f4>)
 8011e48:	f017 f87a 	bl	8028f40 <puts>
  
  TRACE_I(TF_MISC,"Net Keys = %d \r\n", BLEMesh_GetNetKeysCount());
 8011e4c:	f00a fe50 	bl	801caf0 <BLEMesh_GetNetKeysCount>
 8011e50:	4603      	mov	r3, r0
 8011e52:	4619      	mov	r1, r3
 8011e54:	486c      	ldr	r0, [pc, #432]	@ (8012008 <Appli_ConfigurationInfoDump+0x1f8>)
 8011e56:	f017 f80b 	bl	8028e70 <iprintf>
  TRACE_I(TF_MISC,"App Keys = %d \r\n", BLEMesh_GetAppKeysCount());
 8011e5a:	f00a fe47 	bl	801caec <BLEMesh_GetAppKeysCount>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	4619      	mov	r1, r3
 8011e62:	486a      	ldr	r0, [pc, #424]	@ (801200c <Appli_ConfigurationInfoDump+0x1fc>)
 8011e64:	f017 f804 	bl	8028e70 <iprintf>
  TRACE_I(TF_MISC,"Elements per Node = %d \r\n", BLEMesh_GetNumberOfElements());
 8011e68:	f00a fe3e 	bl	801cae8 <BLEMesh_GetNumberOfElements>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	4619      	mov	r1, r3
 8011e70:	4867      	ldr	r0, [pc, #412]	@ (8012010 <Appli_ConfigurationInfoDump+0x200>)
 8011e72:	f016 fffd 	bl	8028e70 <iprintf>
  TRACE_I(TF_MISC,"Models per Element = %d \r\n", BLEMesh_GetTotalModelsCount());
 8011e76:	f00a fe35 	bl	801cae4 <BLEMesh_GetTotalModelsCount>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	4865      	ldr	r0, [pc, #404]	@ (8012014 <Appli_ConfigurationInfoDump+0x204>)
 8011e80:	f016 fff6 	bl	8028e70 <iprintf>
  TRACE_I(TF_MISC,"Subscription per Model = %d \r\n", BLEMesh_GetSubscriptionCount());
 8011e84:	f00a fe36 	bl	801caf4 <BLEMesh_GetSubscriptionCount>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	4619      	mov	r1, r3
 8011e8c:	4862      	ldr	r0, [pc, #392]	@ (8012018 <Appli_ConfigurationInfoDump+0x208>)
 8011e8e:	f016 ffef 	bl	8028e70 <iprintf>
  TRACE_I(TF_MISC,"Default TTL = %d \r\n", BLEMesh_GetTTL());
 8011e92:	f00a fe31 	bl	801caf8 <BLEMesh_GetTTL>
 8011e96:	4603      	mov	r3, r0
 8011e98:	4619      	mov	r1, r3
 8011e9a:	4860      	ldr	r0, [pc, #384]	@ (801201c <Appli_ConfigurationInfoDump+0x20c>)
 8011e9c:	f016 ffe8 	bl	8028e70 <iprintf>
  TRACE_I(TF_MISC,"Default Network Transmit Count = %d \r\n", BLEMesh_GetNetworkTransmitCount());
 8011ea0:	f00a fe36 	bl	801cb10 <BLEMesh_GetNetworkTransmitCount>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	4619      	mov	r1, r3
 8011ea8:	485d      	ldr	r0, [pc, #372]	@ (8012020 <Appli_ConfigurationInfoDump+0x210>)
 8011eaa:	f016 ffe1 	bl	8028e70 <iprintf>
  TRACE_I(TF_MISC,"Default Relay retransmit Count = %d \r\n", BLEMesh_GetRelayRetransmitCount());
 8011eae:	f00a fe3d 	bl	801cb2c <BLEMesh_GetRelayRetransmitCount>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	485b      	ldr	r0, [pc, #364]	@ (8012024 <Appli_ConfigurationInfoDump+0x214>)
 8011eb8:	f016 ffda 	bl	8028e70 <iprintf>
  
  TRACE_I(TF_MISC,"\n[Enabled Models] \r\n");
 8011ebc:	485a      	ldr	r0, [pc, #360]	@ (8012028 <Appli_ConfigurationInfoDump+0x218>)
 8011ebe:	f017 f83f 	bl	8028f40 <puts>
  
  for(uint8_t elementCount=0; elementCount<APPLICATION_NUMBER_OF_ELEMENTS; elementCount++)  
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	71fb      	strb	r3, [r7, #7]
 8011ec6:	e079      	b.n	8011fbc <Appli_ConfigurationInfoDump+0x1ac>
  {
    TRACE_I(TF_MISC,"For Element Index = %d or Element Number = %d \r\n", elementCount, (elementCount+1));
 8011ec8:	79f9      	ldrb	r1, [r7, #7]
 8011eca:	79fb      	ldrb	r3, [r7, #7]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	461a      	mov	r2, r3
 8011ed0:	4856      	ldr	r0, [pc, #344]	@ (801202c <Appli_ConfigurationInfoDump+0x21c>)
 8011ed2:	f016 ffcd 	bl	8028e70 <iprintf>
#ifdef ENABLE_VENDOR_MODEL_SERVER    
    if ((ENABLE_VENDOR_MODEL_SERVER & (1 << elementCount)) == (1 << elementCount))
 8011ed6:	79fb      	ldrb	r3, [r7, #7]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	bf0c      	ite	eq
 8011edc:	2301      	moveq	r3, #1
 8011ede:	2300      	movne	r3, #0
 8011ee0:	b2db      	uxtb	r3, r3
 8011ee2:	4619      	mov	r1, r3
 8011ee4:	79fb      	ldrb	r3, [r7, #7]
 8011ee6:	2201      	movs	r2, #1
 8011ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8011eec:	4299      	cmp	r1, r3
 8011eee:	d102      	bne.n	8011ef6 <Appli_ConfigurationInfoDump+0xe6>
    {
      TRACE_I(TF_MISC,"Vendor Server \r\n");
 8011ef0:	484f      	ldr	r0, [pc, #316]	@ (8012030 <Appli_ConfigurationInfoDump+0x220>)
 8011ef2:	f017 f825 	bl	8028f40 <puts>
    }
#endif
  
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF
    if ((ENABLE_GENERIC_MODEL_SERVER_ONOFF & (1 << elementCount)) == (1 << elementCount))
 8011ef6:	79fb      	ldrb	r3, [r7, #7]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	bf0c      	ite	eq
 8011efc:	2301      	moveq	r3, #1
 8011efe:	2300      	movne	r3, #0
 8011f00:	b2db      	uxtb	r3, r3
 8011f02:	4619      	mov	r1, r3
 8011f04:	79fb      	ldrb	r3, [r7, #7]
 8011f06:	2201      	movs	r2, #1
 8011f08:	fa02 f303 	lsl.w	r3, r2, r3
 8011f0c:	4299      	cmp	r1, r3
 8011f0e:	d102      	bne.n	8011f16 <Appli_ConfigurationInfoDump+0x106>
    {
      TRACE_I(TF_MISC,"Generic On Off Server \r\n");
 8011f10:	4848      	ldr	r0, [pc, #288]	@ (8012034 <Appli_ConfigurationInfoDump+0x224>)
 8011f12:	f017 f815 	bl	8028f40 <puts>
      TRACE_I(TF_MISC,"Generic On Off Client \r\n");
    }
#endif
 
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL
    if ((ENABLE_GENERIC_MODEL_SERVER_LEVEL & (1 << elementCount)) == (1 << elementCount))
 8011f16:	79fb      	ldrb	r3, [r7, #7]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	bf0c      	ite	eq
 8011f1c:	2301      	moveq	r3, #1
 8011f1e:	2300      	movne	r3, #0
 8011f20:	b2db      	uxtb	r3, r3
 8011f22:	4619      	mov	r1, r3
 8011f24:	79fb      	ldrb	r3, [r7, #7]
 8011f26:	2201      	movs	r2, #1
 8011f28:	fa02 f303 	lsl.w	r3, r2, r3
 8011f2c:	4299      	cmp	r1, r3
 8011f2e:	d102      	bne.n	8011f36 <Appli_ConfigurationInfoDump+0x126>
    {
      TRACE_I(TF_MISC,"Generic Level Server \r\n");
 8011f30:	4841      	ldr	r0, [pc, #260]	@ (8012038 <Appli_ConfigurationInfoDump+0x228>)
 8011f32:	f017 f805 	bl	8028f40 <puts>
      TRACE_I(TF_MISC,"Generic Default Transition Client \r\n");
    }
#endif

#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF
    if ((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF & (1 << elementCount)) == (1 << elementCount))
 8011f36:	79fb      	ldrb	r3, [r7, #7]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	bf0c      	ite	eq
 8011f3c:	2301      	moveq	r3, #1
 8011f3e:	2300      	movne	r3, #0
 8011f40:	b2db      	uxtb	r3, r3
 8011f42:	4619      	mov	r1, r3
 8011f44:	79fb      	ldrb	r3, [r7, #7]
 8011f46:	2201      	movs	r2, #1
 8011f48:	fa02 f303 	lsl.w	r3, r2, r3
 8011f4c:	4299      	cmp	r1, r3
 8011f4e:	d102      	bne.n	8011f56 <Appli_ConfigurationInfoDump+0x146>
    {
      TRACE_I(TF_MISC,"Generic Power On Off Server \r\n");
 8011f50:	483a      	ldr	r0, [pc, #232]	@ (801203c <Appli_ConfigurationInfoDump+0x22c>)
 8011f52:	f016 fff5 	bl	8028f40 <puts>
    }
#endif

#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP
    if ((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP & (1 << elementCount)) == (1 << elementCount))
 8011f56:	79fb      	ldrb	r3, [r7, #7]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	bf0c      	ite	eq
 8011f5c:	2301      	moveq	r3, #1
 8011f5e:	2300      	movne	r3, #0
 8011f60:	b2db      	uxtb	r3, r3
 8011f62:	4619      	mov	r1, r3
 8011f64:	79fb      	ldrb	r3, [r7, #7]
 8011f66:	2201      	movs	r2, #1
 8011f68:	fa02 f303 	lsl.w	r3, r2, r3
 8011f6c:	4299      	cmp	r1, r3
 8011f6e:	d102      	bne.n	8011f76 <Appli_ConfigurationInfoDump+0x166>
    {
      TRACE_I(TF_MISC,"Generic Power On Off Setup Server \r\n");
 8011f70:	4833      	ldr	r0, [pc, #204]	@ (8012040 <Appli_ConfigurationInfoDump+0x230>)
 8011f72:	f016 ffe5 	bl	8028f40 <puts>
      TRACE_I(TF_MISC,"Generic User Property Server \r\n");
    }
#endif

#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementCount)) == (1 << elementCount))
 8011f76:	79fb      	ldrb	r3, [r7, #7]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	bf0c      	ite	eq
 8011f7c:	2301      	moveq	r3, #1
 8011f7e:	2300      	movne	r3, #0
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	4619      	mov	r1, r3
 8011f84:	79fb      	ldrb	r3, [r7, #7]
 8011f86:	2201      	movs	r2, #1
 8011f88:	fa02 f303 	lsl.w	r3, r2, r3
 8011f8c:	4299      	cmp	r1, r3
 8011f8e:	d102      	bne.n	8011f96 <Appli_ConfigurationInfoDump+0x186>
    {
      TRACE_I(TF_MISC,"Light Lightness Server \r\n");       
 8011f90:	482c      	ldr	r0, [pc, #176]	@ (8012044 <Appli_ConfigurationInfoDump+0x234>)
 8011f92:	f016 ffd5 	bl	8028f40 <puts>
    }
#endif 

#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP
    if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP & (1 << elementCount)) == (1 << elementCount))
 8011f96:	79fb      	ldrb	r3, [r7, #7]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	bf0c      	ite	eq
 8011f9c:	2301      	moveq	r3, #1
 8011f9e:	2300      	movne	r3, #0
 8011fa0:	b2db      	uxtb	r3, r3
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	79fb      	ldrb	r3, [r7, #7]
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8011fac:	4299      	cmp	r1, r3
 8011fae:	d102      	bne.n	8011fb6 <Appli_ConfigurationInfoDump+0x1a6>
    {
      TRACE_I(TF_MISC,"Light Lightness Setup Server \r\n");       
 8011fb0:	4825      	ldr	r0, [pc, #148]	@ (8012048 <Appli_ConfigurationInfoDump+0x238>)
 8011fb2:	f016 ffc5 	bl	8028f40 <puts>
  for(uint8_t elementCount=0; elementCount<APPLICATION_NUMBER_OF_ELEMENTS; elementCount++)  
 8011fb6:	79fb      	ldrb	r3, [r7, #7]
 8011fb8:	3301      	adds	r3, #1
 8011fba:	71fb      	strb	r3, [r7, #7]
 8011fbc:	79fb      	ldrb	r3, [r7, #7]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d082      	beq.n	8011ec8 <Appli_ConfigurationInfoDump+0xb8>
      TRACE_I(TF_MISC,"Scene \r\n");           
    }
#endif
  }
  
TRACE_I(TF_MISC,"\n[Important Information] \r\n");
 8011fc2:	4822      	ldr	r0, [pc, #136]	@ (801204c <Appli_ConfigurationInfoDump+0x23c>)
 8011fc4:	f016 ffbc 	bl	8028f40 <puts>
#if SAVE_EMBD_PROVISION_DATA     
  TRACE_I(TF_MISC,"Embedded Provisioner data saving enabled \r\n");
#endif
  
#ifdef APPLICATION_NUMBER_OF_ELEMENTS     
  TRACE_I(TF_MISC,"Number of Elements enabled in Application: %d \r\n", APPLICATION_NUMBER_OF_ELEMENTS);  
 8011fc8:	2101      	movs	r1, #1
 8011fca:	4821      	ldr	r0, [pc, #132]	@ (8012050 <Appli_ConfigurationInfoDump+0x240>)
 8011fcc:	f016 ff50 	bl	8028e70 <iprintf>
#endif
  
#ifdef ENABLE_NEIGHBOR_TABLE
  TRACE_I(TF_MISC,"Neighbour Table is enabled \r\n");
 8011fd0:	4820      	ldr	r0, [pc, #128]	@ (8012054 <Appli_ConfigurationInfoDump+0x244>)
 8011fd2:	f016 ffb5 	bl	8028f40 <puts>
#endif
  
  TRACE_I(TF_MISC,"********************\r\n\r\n");  
 8011fd6:	4820      	ldr	r0, [pc, #128]	@ (8012058 <Appli_ConfigurationInfoDump+0x248>)
 8011fd8:	f016 ffb2 	bl	8028f40 <puts>

}
 8011fdc:	bf00      	nop
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	0802e938 	.word	0x0802e938
 8011fe8:	0802e950 	.word	0x0802e950
 8011fec:	0802e968 	.word	0x0802e968
 8011ff0:	0802e97c 	.word	0x0802e97c
 8011ff4:	0802e990 	.word	0x0802e990
 8011ff8:	0802e9a4 	.word	0x0802e9a4
 8011ffc:	0802e9b4 	.word	0x0802e9b4
 8012000:	0802e9c8 	.word	0x0802e9c8
 8012004:	0802e9dc 	.word	0x0802e9dc
 8012008:	0802e9f8 	.word	0x0802e9f8
 801200c:	0802ea0c 	.word	0x0802ea0c
 8012010:	0802ea20 	.word	0x0802ea20
 8012014:	0802ea3c 	.word	0x0802ea3c
 8012018:	0802ea58 	.word	0x0802ea58
 801201c:	0802ea78 	.word	0x0802ea78
 8012020:	0802ea8c 	.word	0x0802ea8c
 8012024:	0802eab4 	.word	0x0802eab4
 8012028:	0802eadc 	.word	0x0802eadc
 801202c:	0802eaf0 	.word	0x0802eaf0
 8012030:	0802eb24 	.word	0x0802eb24
 8012034:	0802eb34 	.word	0x0802eb34
 8012038:	0802eb4c 	.word	0x0802eb4c
 801203c:	0802eb64 	.word	0x0802eb64
 8012040:	0802eb84 	.word	0x0802eb84
 8012044:	0802eba8 	.word	0x0802eba8
 8012048:	0802ebc4 	.word	0x0802ebc4
 801204c:	0802ebe4 	.word	0x0802ebe4
 8012050:	0802ec00 	.word	0x0802ec00
 8012054:	0802ec34 	.word	0x0802ec34
 8012058:	0802ec54 	.word	0x0802ec54

0801205c <Serial_RxCpltCallback>:
/**
 * @brief  DBG_TRACE USART Rx Transfer completed callback
 * @retval None
 */
static void Serial_RxCpltCallback( void )
{
 801205c:	b580      	push	{r7, lr}
 801205e:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8012060:	4b24      	ldr	r3, [pc, #144]	@ (80120f4 <Serial_RxCpltCallback+0x98>)
 8012062:	881b      	ldrh	r3, [r3, #0]
 8012064:	2bff      	cmp	r3, #255	@ 0xff
 8012066:	d843      	bhi.n	80120f0 <Serial_RxCpltCallback+0x94>
  {
    if (aRxBuffer[0] == '\r')
 8012068:	4b23      	ldr	r3, [pc, #140]	@ (80120f8 <Serial_RxCpltCallback+0x9c>)
 801206a:	781b      	ldrb	r3, [r3, #0]
 801206c:	2b0d      	cmp	r3, #13
 801206e:	d10e      	bne.n	801208e <Serial_RxCpltCallback+0x32>
    {
      CommandString[indexReceiveChar] = 0; /* Make last char NULL for string comp */
 8012070:	4b20      	ldr	r3, [pc, #128]	@ (80120f4 <Serial_RxCpltCallback+0x98>)
 8012072:	881b      	ldrh	r3, [r3, #0]
 8012074:	461a      	mov	r2, r3
 8012076:	4b21      	ldr	r3, [pc, #132]	@ (80120fc <Serial_RxCpltCallback+0xa0>)
 8012078:	2100      	movs	r1, #0
 801207a:	5499      	strb	r1, [r3, r2]
        
      TRACE_I(TF_SERIAL_PRINTS,"received %s\n", CommandString);
 801207c:	491f      	ldr	r1, [pc, #124]	@ (80120fc <Serial_RxCpltCallback+0xa0>)
 801207e:	4820      	ldr	r0, [pc, #128]	@ (8012100 <Serial_RxCpltCallback+0xa4>)
 8012080:	f016 fef6 	bl	8028e70 <iprintf>
      
      UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_SERIAL_REQ_ID, CFG_SCH_PRIO_0);
 8012084:	2100      	movs	r1, #0
 8012086:	2010      	movs	r0, #16
 8012088:	f004 fada 	bl	8016640 <UTIL_SEQ_SetTask>
      CommandString[indexReceiveChar++] = aRxBuffer[0];
      UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
    }
  }

  return;
 801208c:	e030      	b.n	80120f0 <Serial_RxCpltCallback+0x94>
    else if (aRxBuffer[0] == '\b')
 801208e:	4b1a      	ldr	r3, [pc, #104]	@ (80120f8 <Serial_RxCpltCallback+0x9c>)
 8012090:	781b      	ldrb	r3, [r3, #0]
 8012092:	2b08      	cmp	r3, #8
 8012094:	d10e      	bne.n	80120b4 <Serial_RxCpltCallback+0x58>
      if (indexReceiveChar > 1)
 8012096:	4b17      	ldr	r3, [pc, #92]	@ (80120f4 <Serial_RxCpltCallback+0x98>)
 8012098:	881b      	ldrh	r3, [r3, #0]
 801209a:	2b01      	cmp	r3, #1
 801209c:	d905      	bls.n	80120aa <Serial_RxCpltCallback+0x4e>
        indexReceiveChar--;
 801209e:	4b15      	ldr	r3, [pc, #84]	@ (80120f4 <Serial_RxCpltCallback+0x98>)
 80120a0:	881b      	ldrh	r3, [r3, #0]
 80120a2:	3b01      	subs	r3, #1
 80120a4:	b29a      	uxth	r2, r3
 80120a6:	4b13      	ldr	r3, [pc, #76]	@ (80120f4 <Serial_RxCpltCallback+0x98>)
 80120a8:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 80120aa:	2100      	movs	r1, #0
 80120ac:	2008      	movs	r0, #8
 80120ae:	f004 fac7 	bl	8016640 <UTIL_SEQ_SetTask>
  return;
 80120b2:	e01d      	b.n	80120f0 <Serial_RxCpltCallback+0x94>
      if ((aRxBuffer[0] >= 'a') && (aRxBuffer[0] <= 'z'))
 80120b4:	4b10      	ldr	r3, [pc, #64]	@ (80120f8 <Serial_RxCpltCallback+0x9c>)
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	2b60      	cmp	r3, #96	@ 0x60
 80120ba:	d909      	bls.n	80120d0 <Serial_RxCpltCallback+0x74>
 80120bc:	4b0e      	ldr	r3, [pc, #56]	@ (80120f8 <Serial_RxCpltCallback+0x9c>)
 80120be:	781b      	ldrb	r3, [r3, #0]
 80120c0:	2b7a      	cmp	r3, #122	@ 0x7a
 80120c2:	d805      	bhi.n	80120d0 <Serial_RxCpltCallback+0x74>
        aRxBuffer[0] = aRxBuffer[0] + 'A' - 'a';
 80120c4:	4b0c      	ldr	r3, [pc, #48]	@ (80120f8 <Serial_RxCpltCallback+0x9c>)
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	3b20      	subs	r3, #32
 80120ca:	b2da      	uxtb	r2, r3
 80120cc:	4b0a      	ldr	r3, [pc, #40]	@ (80120f8 <Serial_RxCpltCallback+0x9c>)
 80120ce:	701a      	strb	r2, [r3, #0]
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 80120d0:	4b08      	ldr	r3, [pc, #32]	@ (80120f4 <Serial_RxCpltCallback+0x98>)
 80120d2:	881b      	ldrh	r3, [r3, #0]
 80120d4:	1c5a      	adds	r2, r3, #1
 80120d6:	b291      	uxth	r1, r2
 80120d8:	4a06      	ldr	r2, [pc, #24]	@ (80120f4 <Serial_RxCpltCallback+0x98>)
 80120da:	8011      	strh	r1, [r2, #0]
 80120dc:	461a      	mov	r2, r3
 80120de:	4b06      	ldr	r3, [pc, #24]	@ (80120f8 <Serial_RxCpltCallback+0x9c>)
 80120e0:	7819      	ldrb	r1, [r3, #0]
 80120e2:	4b06      	ldr	r3, [pc, #24]	@ (80120fc <Serial_RxCpltCallback+0xa0>)
 80120e4:	5499      	strb	r1, [r3, r2]
      UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 80120e6:	2100      	movs	r1, #0
 80120e8:	2008      	movs	r0, #8
 80120ea:	f004 faa9 	bl	8016640 <UTIL_SEQ_SetTask>
  return;
 80120ee:	bf00      	nop
 80120f0:	bf00      	nop
 }
 80120f2:	bd80      	pop	{r7, pc}
 80120f4:	2000475c 	.word	0x2000475c
 80120f8:	20004654 	.word	0x20004654
 80120fc:	2000465c 	.word	0x2000465c
 8012100:	0802ec6c 	.word	0x0802ec6c

08012104 <Serial_Uart_Rx_Task>:
/**
 * @brief  DBG_TRACE USART Rx Transfer completed callback
 * @retval None
 */
static void Serial_Uart_Rx_Task( void )
{
 8012104:	b580      	push	{r7, lr}
 8012106:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, Serial_RxCpltCallback);
 8012108:	4b03      	ldr	r3, [pc, #12]	@ (8012118 <Serial_Uart_Rx_Task+0x14>)
 801210a:	2201      	movs	r2, #1
 801210c:	4903      	ldr	r1, [pc, #12]	@ (801211c <Serial_Uart_Rx_Task+0x18>)
 801210e:	2000      	movs	r0, #0
 8012110:	f7f0 fcb0 	bl	8002a74 <HW_UART_Receive_IT>
}
 8012114:	bf00      	nop
 8012116:	bd80      	pop	{r7, pc}
 8012118:	0801205d 	.word	0x0801205d
 801211c:	20004654 	.word	0x20004654

08012120 <Serial_InterfaceProcess>:
* @brief  Processes data coming from serial port   
* @param  void  
* @retval void
*/
void Serial_InterfaceProcess(void)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	af00      	add	r7, sp, #0
  /* Reset button emulation state */
  button_emulation = 0;
 8012124:	4b56      	ldr	r3, [pc, #344]	@ (8012280 <Serial_InterfaceProcess+0x160>)
 8012126:	2200      	movs	r2, #0
 8012128:	701a      	strb	r2, [r3, #0]
  LongPressButton = 0;
 801212a:	4b56      	ldr	r3, [pc, #344]	@ (8012284 <Serial_InterfaceProcess+0x164>)
 801212c:	2200      	movs	r2, #0
 801212e:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_SERIAL_CONTROL
  if (!strncmp((char const*)CommandString, "ATCL", 4))
 8012130:	2204      	movs	r2, #4
 8012132:	4955      	ldr	r1, [pc, #340]	@ (8012288 <Serial_InterfaceProcess+0x168>)
 8012134:	4855      	ldr	r0, [pc, #340]	@ (801228c <Serial_InterfaceProcess+0x16c>)
 8012136:	f017 f841 	bl	80291bc <strncmp>
 801213a:	4603      	mov	r3, r0
 801213c:	2b00      	cmp	r3, #0
 801213e:	d106      	bne.n	801214e <Serial_InterfaceProcess+0x2e>
  {            
    SerialCtrl_Process((char *)CommandString, indexReceiveChar);
 8012140:	4b53      	ldr	r3, [pc, #332]	@ (8012290 <Serial_InterfaceProcess+0x170>)
 8012142:	881b      	ldrh	r3, [r3, #0]
 8012144:	4619      	mov	r1, r3
 8012146:	4851      	ldr	r0, [pc, #324]	@ (801228c <Serial_InterfaceProcess+0x16c>)
 8012148:	f000 fab0 	bl	80126ac <SerialCtrl_Process>
 801214c:	e08d      	b.n	801226a <Serial_InterfaceProcess+0x14a>
  }
  else if (!strncmp((char const*)CommandString, "ATVR", 4))
 801214e:	2204      	movs	r2, #4
 8012150:	4950      	ldr	r1, [pc, #320]	@ (8012294 <Serial_InterfaceProcess+0x174>)
 8012152:	484e      	ldr	r0, [pc, #312]	@ (801228c <Serial_InterfaceProcess+0x16c>)
 8012154:	f017 f832 	bl	80291bc <strncmp>
 8012158:	4603      	mov	r3, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	d106      	bne.n	801216c <Serial_InterfaceProcess+0x4c>
  {            
    SerialCtrlVendorRead_Process((char *)CommandString, indexReceiveChar);
 801215e:	4b4c      	ldr	r3, [pc, #304]	@ (8012290 <Serial_InterfaceProcess+0x170>)
 8012160:	881b      	ldrh	r3, [r3, #0]
 8012162:	4619      	mov	r1, r3
 8012164:	4849      	ldr	r0, [pc, #292]	@ (801228c <Serial_InterfaceProcess+0x16c>)
 8012166:	f000 f93d 	bl	80123e4 <SerialCtrlVendorRead_Process>
 801216a:	e07e      	b.n	801226a <Serial_InterfaceProcess+0x14a>
  }
  else if (!strncmp((char const*)CommandString, "ATVW", 4))
 801216c:	2204      	movs	r2, #4
 801216e:	494a      	ldr	r1, [pc, #296]	@ (8012298 <Serial_InterfaceProcess+0x178>)
 8012170:	4846      	ldr	r0, [pc, #280]	@ (801228c <Serial_InterfaceProcess+0x16c>)
 8012172:	f017 f823 	bl	80291bc <strncmp>
 8012176:	4603      	mov	r3, r0
 8012178:	2b00      	cmp	r3, #0
 801217a:	d106      	bne.n	801218a <Serial_InterfaceProcess+0x6a>
  {            
    SerialCtrlVendorWrite_Process((char *)CommandString, indexReceiveChar);
 801217c:	4b44      	ldr	r3, [pc, #272]	@ (8012290 <Serial_InterfaceProcess+0x170>)
 801217e:	881b      	ldrh	r3, [r3, #0]
 8012180:	4619      	mov	r1, r3
 8012182:	4842      	ldr	r0, [pc, #264]	@ (801228c <Serial_InterfaceProcess+0x16c>)
 8012184:	f000 f9aa 	bl	80124dc <SerialCtrlVendorWrite_Process>
 8012188:	e06f      	b.n	801226a <Serial_InterfaceProcess+0x14a>
  }
#endif
#if ENABLE_UT
  else if(!strncmp((char const*)CommandString, "ATUT", 4))
 801218a:	2204      	movs	r2, #4
 801218c:	4943      	ldr	r1, [pc, #268]	@ (801229c <Serial_InterfaceProcess+0x17c>)
 801218e:	483f      	ldr	r0, [pc, #252]	@ (801228c <Serial_InterfaceProcess+0x16c>)
 8012190:	f017 f814 	bl	80291bc <strncmp>
 8012194:	4603      	mov	r3, r0
 8012196:	2b00      	cmp	r3, #0
 8012198:	d106      	bne.n	80121a8 <Serial_InterfaceProcess+0x88>
  {
    SerialUt_Process((char *)CommandString, indexReceiveChar);  
 801219a:	4b3d      	ldr	r3, [pc, #244]	@ (8012290 <Serial_InterfaceProcess+0x170>)
 801219c:	881b      	ldrh	r3, [r3, #0]
 801219e:	4619      	mov	r1, r3
 80121a0:	483a      	ldr	r0, [pc, #232]	@ (801228c <Serial_InterfaceProcess+0x16c>)
 80121a2:	f000 fbdd 	bl	8012960 <SerialUt_Process>
 80121a6:	e060      	b.n	801226a <Serial_InterfaceProcess+0x14a>
  else if(!strncmp((char const*)CommandString, "ATLLC", 5))
  {
    Appli_Light_LC_SerialCmd((char *)CommandString, indexReceiveChar);
  }
#endif
  else if(!strncmp((char const*)CommandString, "SW1", 3))
 80121a8:	2203      	movs	r2, #3
 80121aa:	493d      	ldr	r1, [pc, #244]	@ (80122a0 <Serial_InterfaceProcess+0x180>)
 80121ac:	4837      	ldr	r0, [pc, #220]	@ (801228c <Serial_InterfaceProcess+0x16c>)
 80121ae:	f017 f805 	bl	80291bc <strncmp>
 80121b2:	4603      	mov	r3, r0
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d10c      	bne.n	80121d2 <Serial_InterfaceProcess+0xb2>
  {
    button_emulation = 1; /* Set the button emulation */
 80121b8:	4b31      	ldr	r3, [pc, #196]	@ (8012280 <Serial_InterfaceProcess+0x160>)
 80121ba:	2201      	movs	r2, #1
 80121bc:	701a      	strb	r2, [r3, #0]
    TRACE_I(TF_SERIAL_PRINTS,"SW1 OK\r\n");
 80121be:	4839      	ldr	r0, [pc, #228]	@ (80122a4 <Serial_InterfaceProcess+0x184>)
 80121c0:	f016 febe 	bl	8028f40 <puts>
    exti_handle.Line = EXTI_LINE_4;
 80121c4:	4b38      	ldr	r3, [pc, #224]	@ (80122a8 <Serial_InterfaceProcess+0x188>)
 80121c6:	4a39      	ldr	r2, [pc, #228]	@ (80122ac <Serial_InterfaceProcess+0x18c>)
 80121c8:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80121ca:	4837      	ldr	r0, [pc, #220]	@ (80122a8 <Serial_InterfaceProcess+0x188>)
 80121cc:	f7f6 fb62 	bl	8008894 <HAL_EXTI_GenerateSWI>
 80121d0:	e04b      	b.n	801226a <Serial_InterfaceProcess+0x14a>
  }
  else if(!strncmp((char const*)CommandString, "SW2", 3))
 80121d2:	2203      	movs	r2, #3
 80121d4:	4936      	ldr	r1, [pc, #216]	@ (80122b0 <Serial_InterfaceProcess+0x190>)
 80121d6:	482d      	ldr	r0, [pc, #180]	@ (801228c <Serial_InterfaceProcess+0x16c>)
 80121d8:	f016 fff0 	bl	80291bc <strncmp>
 80121dc:	4603      	mov	r3, r0
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d10d      	bne.n	80121fe <Serial_InterfaceProcess+0xde>
  {
    button_emulation = 1; /* Set the button emulation */
 80121e2:	4b27      	ldr	r3, [pc, #156]	@ (8012280 <Serial_InterfaceProcess+0x160>)
 80121e4:	2201      	movs	r2, #1
 80121e6:	701a      	strb	r2, [r3, #0]
    TRACE_I(TF_SERIAL_PRINTS,"SW2 OK\r\n");
 80121e8:	4832      	ldr	r0, [pc, #200]	@ (80122b4 <Serial_InterfaceProcess+0x194>)
 80121ea:	f016 fea9 	bl	8028f40 <puts>
    exti_handle.Line = EXTI_LINE_0;
 80121ee:	4b2e      	ldr	r3, [pc, #184]	@ (80122a8 <Serial_InterfaceProcess+0x188>)
 80121f0:	f04f 52b0 	mov.w	r2, #369098752	@ 0x16000000
 80121f4:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80121f6:	482c      	ldr	r0, [pc, #176]	@ (80122a8 <Serial_InterfaceProcess+0x188>)
 80121f8:	f7f6 fb4c 	bl	8008894 <HAL_EXTI_GenerateSWI>
 80121fc:	e035      	b.n	801226a <Serial_InterfaceProcess+0x14a>
  }
  else if(!strncmp((char const*)CommandString, "SW3", 3))
 80121fe:	2203      	movs	r2, #3
 8012200:	492d      	ldr	r1, [pc, #180]	@ (80122b8 <Serial_InterfaceProcess+0x198>)
 8012202:	4822      	ldr	r0, [pc, #136]	@ (801228c <Serial_InterfaceProcess+0x16c>)
 8012204:	f016 ffda 	bl	80291bc <strncmp>
 8012208:	4603      	mov	r3, r0
 801220a:	2b00      	cmp	r3, #0
 801220c:	d10c      	bne.n	8012228 <Serial_InterfaceProcess+0x108>
  {
    button_emulation = 1; /* Set the button emulation */
 801220e:	4b1c      	ldr	r3, [pc, #112]	@ (8012280 <Serial_InterfaceProcess+0x160>)
 8012210:	2201      	movs	r2, #1
 8012212:	701a      	strb	r2, [r3, #0]
    TRACE_I(TF_SERIAL_PRINTS,"SW3 OK\r\n");
 8012214:	4829      	ldr	r0, [pc, #164]	@ (80122bc <Serial_InterfaceProcess+0x19c>)
 8012216:	f016 fe93 	bl	8028f40 <puts>
    exti_handle.Line = EXTI_LINE_1;
 801221a:	4b23      	ldr	r3, [pc, #140]	@ (80122a8 <Serial_InterfaceProcess+0x188>)
 801221c:	4a28      	ldr	r2, [pc, #160]	@ (80122c0 <Serial_InterfaceProcess+0x1a0>)
 801221e:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8012220:	4821      	ldr	r0, [pc, #132]	@ (80122a8 <Serial_InterfaceProcess+0x188>)
 8012222:	f7f6 fb37 	bl	8008894 <HAL_EXTI_GenerateSWI>
 8012226:	e020      	b.n	801226a <Serial_InterfaceProcess+0x14a>
  }
  else if (strcmp((char const*)CommandString, "LONG_PRESS") == 0)
 8012228:	4926      	ldr	r1, [pc, #152]	@ (80122c4 <Serial_InterfaceProcess+0x1a4>)
 801222a:	4818      	ldr	r0, [pc, #96]	@ (801228c <Serial_InterfaceProcess+0x16c>)
 801222c:	f7ed ffa8 	bl	8000180 <strcmp>
 8012230:	4603      	mov	r3, r0
 8012232:	2b00      	cmp	r3, #0
 8012234:	d106      	bne.n	8012244 <Serial_InterfaceProcess+0x124>
  {
    TRACE_I(TF_SERIAL_PRINTS,"LONG_PRESS OK\r\n");
 8012236:	4824      	ldr	r0, [pc, #144]	@ (80122c8 <Serial_InterfaceProcess+0x1a8>)
 8012238:	f016 fe82 	bl	8028f40 <puts>
    LongPressButton=1;
 801223c:	4b11      	ldr	r3, [pc, #68]	@ (8012284 <Serial_InterfaceProcess+0x164>)
 801223e:	2201      	movs	r2, #1
 8012240:	701a      	strb	r2, [r3, #0]
 8012242:	e012      	b.n	801226a <Serial_InterfaceProcess+0x14a>
  } 
  else
  {
    TRACE_I(TF_SERIAL_PRINTS,"Not Entered valid test parameters\r\n");  
 8012244:	4821      	ldr	r0, [pc, #132]	@ (80122cc <Serial_InterfaceProcess+0x1ac>)
 8012246:	f016 fe7b 	bl	8028f40 <puts>
    SerialCurrentState = STATE_IDLE;
 801224a:	4b21      	ldr	r3, [pc, #132]	@ (80122d0 <Serial_InterfaceProcess+0x1b0>)
 801224c:	2200      	movs	r2, #0
 801224e:	701a      	strb	r2, [r3, #0]
  }      
  while(indexReceiveChar)
 8012250:	e00b      	b.n	801226a <Serial_InterfaceProcess+0x14a>
  {
    CommandString[--indexReceiveChar] = 0;
 8012252:	4b0f      	ldr	r3, [pc, #60]	@ (8012290 <Serial_InterfaceProcess+0x170>)
 8012254:	881b      	ldrh	r3, [r3, #0]
 8012256:	3b01      	subs	r3, #1
 8012258:	b29a      	uxth	r2, r3
 801225a:	4b0d      	ldr	r3, [pc, #52]	@ (8012290 <Serial_InterfaceProcess+0x170>)
 801225c:	801a      	strh	r2, [r3, #0]
 801225e:	4b0c      	ldr	r3, [pc, #48]	@ (8012290 <Serial_InterfaceProcess+0x170>)
 8012260:	881b      	ldrh	r3, [r3, #0]
 8012262:	461a      	mov	r2, r3
 8012264:	4b09      	ldr	r3, [pc, #36]	@ (801228c <Serial_InterfaceProcess+0x16c>)
 8012266:	2100      	movs	r1, #0
 8012268:	5499      	strb	r1, [r3, r2]
  while(indexReceiveChar)
 801226a:	4b09      	ldr	r3, [pc, #36]	@ (8012290 <Serial_InterfaceProcess+0x170>)
 801226c:	881b      	ldrh	r3, [r3, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d1ef      	bne.n	8012252 <Serial_InterfaceProcess+0x132>
  }
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 8012272:	2100      	movs	r1, #0
 8012274:	2008      	movs	r0, #8
 8012276:	f004 f9e3 	bl	8016640 <UTIL_SEQ_SetTask>
}
 801227a:	bf00      	nop
 801227c:	bd80      	pop	{r7, pc}
 801227e:	bf00      	nop
 8012280:	20004650 	.word	0x20004650
 8012284:	20004651 	.word	0x20004651
 8012288:	0802ec7c 	.word	0x0802ec7c
 801228c:	2000465c 	.word	0x2000465c
 8012290:	2000475c 	.word	0x2000475c
 8012294:	0802ec84 	.word	0x0802ec84
 8012298:	0802ec8c 	.word	0x0802ec8c
 801229c:	0802ec94 	.word	0x0802ec94
 80122a0:	0802ec9c 	.word	0x0802ec9c
 80122a4:	0802eca0 	.word	0x0802eca0
 80122a8:	200040e4 	.word	0x200040e4
 80122ac:	16000004 	.word	0x16000004
 80122b0:	0802eca8 	.word	0x0802eca8
 80122b4:	0802ecac 	.word	0x0802ecac
 80122b8:	0802ecb4 	.word	0x0802ecb4
 80122bc:	0802ecb8 	.word	0x0802ecb8
 80122c0:	16000001 	.word	0x16000001
 80122c4:	0802ecc0 	.word	0x0802ecc0
 80122c8:	0802eccc 	.word	0x0802eccc
 80122cc:	0802ecdc 	.word	0x0802ecdc
 80122d0:	20004652 	.word	0x20004652

080122d4 <Serial_CharToHexConvert>:
* @param  addr: input ASCI character
* @retval MOBLEUINT8
*/ 

MOBLEUINT8 Serial_CharToHexConvert(char addr)
{
 80122d4:	b480      	push	{r7}
 80122d6:	b085      	sub	sp, #20
 80122d8:	af00      	add	r7, sp, #0
 80122da:	4603      	mov	r3, r0
 80122dc:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT8 retVal=0;
 80122de:	2300      	movs	r3, #0
 80122e0:	73fb      	strb	r3, [r7, #15]
  if (addr >= '0' && addr <= '9')
 80122e2:	79fb      	ldrb	r3, [r7, #7]
 80122e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80122e6:	d906      	bls.n	80122f6 <Serial_CharToHexConvert+0x22>
 80122e8:	79fb      	ldrb	r3, [r7, #7]
 80122ea:	2b39      	cmp	r3, #57	@ 0x39
 80122ec:	d803      	bhi.n	80122f6 <Serial_CharToHexConvert+0x22>
        retVal = addr - '0';
 80122ee:	79fb      	ldrb	r3, [r7, #7]
 80122f0:	3b30      	subs	r3, #48	@ 0x30
 80122f2:	73fb      	strb	r3, [r7, #15]
 80122f4:	e01c      	b.n	8012330 <Serial_CharToHexConvert+0x5c>
  else if (addr >= 'a' && addr <= 'f')
 80122f6:	79fb      	ldrb	r3, [r7, #7]
 80122f8:	2b60      	cmp	r3, #96	@ 0x60
 80122fa:	d906      	bls.n	801230a <Serial_CharToHexConvert+0x36>
 80122fc:	79fb      	ldrb	r3, [r7, #7]
 80122fe:	2b66      	cmp	r3, #102	@ 0x66
 8012300:	d803      	bhi.n	801230a <Serial_CharToHexConvert+0x36>
        retVal = addr+10-'a';
 8012302:	79fb      	ldrb	r3, [r7, #7]
 8012304:	3b57      	subs	r3, #87	@ 0x57
 8012306:	73fb      	strb	r3, [r7, #15]
 8012308:	e012      	b.n	8012330 <Serial_CharToHexConvert+0x5c>
  else if (addr >= 'A' && addr <= 'F')
 801230a:	79fb      	ldrb	r3, [r7, #7]
 801230c:	2b40      	cmp	r3, #64	@ 0x40
 801230e:	d906      	bls.n	801231e <Serial_CharToHexConvert+0x4a>
 8012310:	79fb      	ldrb	r3, [r7, #7]
 8012312:	2b46      	cmp	r3, #70	@ 0x46
 8012314:	d803      	bhi.n	801231e <Serial_CharToHexConvert+0x4a>
        retVal = addr+10-'A';
 8012316:	79fb      	ldrb	r3, [r7, #7]
 8012318:	3b37      	subs	r3, #55	@ 0x37
 801231a:	73fb      	strb	r3, [r7, #15]
 801231c:	e008      	b.n	8012330 <Serial_CharToHexConvert+0x5c>
  else if (addr == ' ')
 801231e:	79fb      	ldrb	r3, [r7, #7]
 8012320:	2b20      	cmp	r3, #32
 8012322:	d103      	bne.n	801232c <Serial_CharToHexConvert+0x58>
        retVal = addr+10-' ';
 8012324:	79fb      	ldrb	r3, [r7, #7]
 8012326:	3b16      	subs	r3, #22
 8012328:	73fb      	strb	r3, [r7, #15]
 801232a:	e001      	b.n	8012330 <Serial_CharToHexConvert+0x5c>
  else
       return 0xFF;
 801232c:	23ff      	movs	r3, #255	@ 0xff
 801232e:	e000      	b.n	8012332 <Serial_CharToHexConvert+0x5e>
    
  return retVal;
 8012330:	7bfb      	ldrb	r3, [r7, #15]
}
 8012332:	4618      	mov	r0, r3
 8012334:	3714      	adds	r7, #20
 8012336:	46bd      	mov	sp, r7
 8012338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233c:	4770      	bx	lr
	...

08012340 <Serial_Init>:
  * @brief  This function initialize the Rx from UART
  * @param  None
  * @retval None
  */
void Serial_Init(void)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	af00      	add	r7, sp, #0
  button_emulation = 0; /* Reset the button emulation state */
 8012344:	4b0a      	ldr	r3, [pc, #40]	@ (8012370 <Serial_Init+0x30>)
 8012346:	2200      	movs	r2, #0
 8012348:	701a      	strb	r2, [r3, #0]
  LongPressButton = 0; /* Reset the button press state */
 801234a:	4b0a      	ldr	r3, [pc, #40]	@ (8012374 <Serial_Init+0x34>)
 801234c:	2200      	movs	r2, #0
 801234e:	701a      	strb	r2, [r3, #0]
  
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_SERIAL_REQ_ID, UTIL_SEQ_RFU, Serial_InterfaceProcess);
 8012350:	4a09      	ldr	r2, [pc, #36]	@ (8012378 <Serial_Init+0x38>)
 8012352:	2100      	movs	r1, #0
 8012354:	2010      	movs	r0, #16
 8012356:	f004 f951 	bl	80165fc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, UTIL_SEQ_RFU, Serial_Uart_Rx_Task );
 801235a:	4a08      	ldr	r2, [pc, #32]	@ (801237c <Serial_Init+0x3c>)
 801235c:	2100      	movs	r1, #0
 801235e:	2008      	movs	r0, #8
 8012360:	f004 f94c 	bl	80165fc <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 8012364:	2100      	movs	r1, #0
 8012366:	2008      	movs	r0, #8
 8012368:	f004 f96a 	bl	8016640 <UTIL_SEQ_SetTask>

  return;
 801236c:	bf00      	nop
}
 801236e:	bd80      	pop	{r7, pc}
 8012370:	20004650 	.word	0x20004650
 8012374:	20004651 	.word	0x20004651
 8012378:	08012121 	.word	0x08012121
 801237c:	08012105 	.word	0x08012105

08012380 <BLEMesh_PrintStringCb>:
* @brief  Callback function to print data serially  
* @param  *message: Pointer of data string  
* @retval void
*/
void BLEMesh_PrintStringCb(const char *message)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
    TRACE_I(TF_SERIAL_PRINTS,"%s\n\r", (char*)message);
 8012388:	6879      	ldr	r1, [r7, #4]
 801238a:	4803      	ldr	r0, [pc, #12]	@ (8012398 <BLEMesh_PrintStringCb+0x18>)
 801238c:	f016 fd70 	bl	8028e70 <iprintf>
}
 8012390:	bf00      	nop
 8012392:	3708      	adds	r7, #8
 8012394:	46bd      	mov	sp, r7
 8012396:	bd80      	pop	{r7, pc}
 8012398:	0802ed00 	.word	0x0802ed00

0801239c <BLEMesh_PrintDataCb>:
* @param  *data : Pointer to the data to be printed 
* @param  size : Length of data to be printed
* @retval void
*/
void BLEMesh_PrintDataCb(MOBLEUINT8* data, MOBLEUINT16 size)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	460b      	mov	r3, r1
 80123a6:	807b      	strh	r3, [r7, #2]
    for (int count=0; count<size; ++count)
 80123a8:	2300      	movs	r3, #0
 80123aa:	60fb      	str	r3, [r7, #12]
 80123ac:	e00a      	b.n	80123c4 <BLEMesh_PrintDataCb+0x28>
    {
        TRACE_I(TF_SERIAL_PRINTS,"%02X", data[count]);
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	687a      	ldr	r2, [r7, #4]
 80123b2:	4413      	add	r3, r2
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	4619      	mov	r1, r3
 80123b8:	4808      	ldr	r0, [pc, #32]	@ (80123dc <BLEMesh_PrintDataCb+0x40>)
 80123ba:	f016 fd59 	bl	8028e70 <iprintf>
    for (int count=0; count<size; ++count)
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	3301      	adds	r3, #1
 80123c2:	60fb      	str	r3, [r7, #12]
 80123c4:	887b      	ldrh	r3, [r7, #2]
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	429a      	cmp	r2, r3
 80123ca:	dbf0      	blt.n	80123ae <BLEMesh_PrintDataCb+0x12>
    }
    
    TRACE_I(TF_SERIAL_PRINTS,"\n\r");
 80123cc:	4804      	ldr	r0, [pc, #16]	@ (80123e0 <BLEMesh_PrintDataCb+0x44>)
 80123ce:	f016 fd4f 	bl	8028e70 <iprintf>
}
 80123d2:	bf00      	nop
 80123d4:	3710      	adds	r7, #16
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop
 80123dc:	0802ed08 	.word	0x0802ed08
 80123e0:	0802ed10 	.word	0x0802ed10

080123e4 <SerialCtrlVendorRead_Process>:
* @param  rcvdStringBuff: buffer to store input string 
* @param  rcvdStringSize: length of the input string 
* @retval void
*/ 
void SerialCtrlVendorRead_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b08c      	sub	sp, #48	@ 0x30
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
 80123ec:	460b      	mov	r3, r1
 80123ee:	807b      	strh	r3, [r7, #2]
  MOBLEUINT16 command = 0;                          /*Opcode command to be executed by the destination node*/
 80123f0:	2300      	movs	r3, #0
 80123f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
  MOBLEUINT8 datalength = 0;
 80123f4:	2300      	movs	r3, #0
 80123f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  MOBLEUINT8  data [10] = {0};                  /*buffer to output property variables */
 80123fa:	2300      	movs	r3, #0
 80123fc:	61bb      	str	r3, [r7, #24]
 80123fe:	f107 031c 	add.w	r3, r7, #28
 8012402:	2200      	movs	r2, #0
 8012404:	601a      	str	r2, [r3, #0]
 8012406:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result = MOBLE_RESULT_FAIL;
 8012408:	2302      	movs	r3, #2
 801240a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  MODEL_MessageHeader_t msgHdr;
  
  /*Initializing the parameters*/
  msgHdr.elementIndex = 0;
 801240e:	2300      	movs	r3, #0
 8012410:	733b      	strb	r3, [r7, #12]
  msgHdr.peer_addr = 0;
 8012412:	2300      	movs	r3, #0
 8012414:	823b      	strh	r3, [r7, #16]
  msgHdr.dst_peer = 0;
 8012416:	2300      	movs	r3, #0
 8012418:	827b      	strh	r3, [r7, #18]
  msgHdr.ttl = 0;
 801241a:	2300      	movs	r3, #0
 801241c:	753b      	strb	r3, [r7, #20]
  msgHdr.rssi = 0;
 801241e:	2300      	movs	r3, #0
 8012420:	757b      	strb	r3, [r7, #21]
  msgHdr.rcvdAppKeyOffset = 0;
 8012422:	2300      	movs	r3, #0
 8012424:	75bb      	strb	r3, [r7, #22]
  msgHdr.rcvdNetKeyOffset = 0;
 8012426:	2300      	movs	r3, #0
 8012428:	75fb      	strb	r3, [r7, #23]
  
  sscanf(rcvdStringBuff+5, "%4hx %hx ", &msgHdr.dst_peer, &command); 
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	1d58      	adds	r0, r3, #5
 801242e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8012432:	f107 030c 	add.w	r3, r7, #12
 8012436:	1d9a      	adds	r2, r3, #6
 8012438:	460b      	mov	r3, r1
 801243a:	4923      	ldr	r1, [pc, #140]	@ (80124c8 <SerialCtrlVendorRead_Process+0xe4>)
 801243c:	f016 fd88 	bl	8028f50 <siscanf>
  
  for(int i = 0; i < 6 ; i++)
 8012440:	2300      	movs	r3, #0
 8012442:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012444:	e00d      	b.n	8012462 <SerialCtrlVendorRead_Process+0x7e>
  {
    if(command == Vendor_Opcodes_Table[i])
 8012446:	4a21      	ldr	r2, [pc, #132]	@ (80124cc <SerialCtrlVendorRead_Process+0xe8>)
 8012448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801244a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801244e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012450:	429a      	cmp	r2, r3
 8012452:	d103      	bne.n	801245c <SerialCtrlVendorRead_Process+0x78>
    {                 
      result = MOBLE_RESULT_SUCCESS;
 8012454:	2300      	movs	r3, #0
 8012456:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      break;
 801245a:	e005      	b.n	8012468 <SerialCtrlVendorRead_Process+0x84>
  for(int i = 0; i < 6 ; i++)
 801245c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801245e:	3301      	adds	r3, #1
 8012460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012464:	2b05      	cmp	r3, #5
 8012466:	ddee      	ble.n	8012446 <SerialCtrlVendorRead_Process+0x62>
    }
  
  }
  
  datalength = SerialCtrl_GetData(rcvdStringBuff, rcvdStringSize, SERIAL_MODEL_DATA_OFFSET, data);
 8012468:	f107 0318 	add.w	r3, r7, #24
 801246c:	8879      	ldrh	r1, [r7, #2]
 801246e:	220f      	movs	r2, #15
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f000 f9fa 	bl	801286a <SerialCtrl_GetData>
 8012476:	4603      	mov	r3, r0
 8012478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  
  if(result)
 801247c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012480:	2b00      	cmp	r3, #0
 8012482:	d003      	beq.n	801248c <SerialCtrlVendorRead_Process+0xa8>
  {
    TRACE_I(TF_SERIAL_PRINTS,"Invalid Command\r\n");
 8012484:	4812      	ldr	r0, [pc, #72]	@ (80124d0 <SerialCtrlVendorRead_Process+0xec>)
 8012486:	f016 fd5b 	bl	8028f40 <puts>
 801248a:	e01a      	b.n	80124c2 <SerialCtrlVendorRead_Process+0xde>
    return;
  }
  
 else
  {
    msgHdr.peer_addr = BLEMesh_GetAddress();
 801248c:	f00a faf6 	bl	801ca7c <BLEMesh_GetAddress>
 8012490:	4603      	mov	r3, r0
 8012492:	823b      	strh	r3, [r7, #16]
    result = BLEMesh_ReadRemoteData(&msgHdr,command, data, datalength);   
 8012494:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8012496:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801249a:	f107 0218 	add.w	r2, r7, #24
 801249e:	f107 000c 	add.w	r0, r7, #12
 80124a2:	f012 fde1 	bl	8025068 <BLEMesh_ReadRemoteData>
 80124a6:	4603      	mov	r3, r0
 80124a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if(result == MOBLE_RESULT_SUCCESS)
 80124ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d103      	bne.n	80124bc <SerialCtrlVendorRead_Process+0xd8>
    {
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 80124b4:	4807      	ldr	r0, [pc, #28]	@ (80124d4 <SerialCtrlVendorRead_Process+0xf0>)
 80124b6:	f016 fd43 	bl	8028f40 <puts>
 80124ba:	e002      	b.n	80124c2 <SerialCtrlVendorRead_Process+0xde>
    }
    else
    {
      TRACE_I(TF_SERIAL_PRINTS,"Invalid Opcode Parameter\r\n");
 80124bc:	4806      	ldr	r0, [pc, #24]	@ (80124d8 <SerialCtrlVendorRead_Process+0xf4>)
 80124be:	f016 fd3f 	bl	8028f40 <puts>
    }
  }
   
}
 80124c2:	3730      	adds	r7, #48	@ 0x30
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}
 80124c8:	0802ed14 	.word	0x0802ed14
 80124cc:	200000a4 	.word	0x200000a4
 80124d0:	0802ed20 	.word	0x0802ed20
 80124d4:	0802ed34 	.word	0x0802ed34
 80124d8:	0802ed54 	.word	0x0802ed54

080124dc <SerialCtrlVendorWrite_Process>:


void SerialCtrlVendorWrite_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 80124dc:	b5b0      	push	{r4, r5, r7, lr}
 80124de:	b09c      	sub	sp, #112	@ 0x70
 80124e0:	af04      	add	r7, sp, #16
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	460b      	mov	r3, r1
 80124e6:	807b      	strh	r3, [r7, #2]
  MOBLE_ADDRESS peer = 0;                               /*node adderess of the destination node*/
 80124e8:	2300      	movs	r3, #0
 80124ea:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
  MOBLEUINT16 command = 0;                              /*Opcode command to be executed by the destination node*/
 80124ee:	2300      	movs	r3, #0
 80124f0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MOBLEUINT8 elementIndex = 0;                          /*default element index*/  
 80124f4:	2300      	movs	r3, #0
 80124f6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  MOBLE_RESULT result = MOBLE_RESULT_FAIL;
 80124fa:	2302      	movs	r3, #2
 80124fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  MOBLEBOOL response = MOBLE_FALSE;
 8012500:	2300      	movs	r3, #0
 8012502:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  MOBLEUINT8 data_buff[VENDOR_DATA_BUFFER_SIZE];
  MOBLEUINT16 idx=0;
 8012506:	2300      	movs	r3, #0
 8012508:	81fb      	strh	r3, [r7, #14]
  MOBLEUINT8 length;
  MOBLEUINT8 j = 1;
 801250a:	2301      	movs	r3, #1
 801250c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  
  sscanf(rcvdStringBuff+5, "%4hx %hx %hx", &peer,&command,&idx); 
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	1d58      	adds	r0, r3, #5
 8012514:	f107 014e 	add.w	r1, r7, #78	@ 0x4e
 8012518:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801251c:	f107 030e 	add.w	r3, r7, #14
 8012520:	9300      	str	r3, [sp, #0]
 8012522:	460b      	mov	r3, r1
 8012524:	495c      	ldr	r1, [pc, #368]	@ (8012698 <SerialCtrlVendorWrite_Process+0x1bc>)
 8012526:	f016 fd13 	bl	8028f50 <siscanf>
  
  if(command == 0x000E)
 801252a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801252e:	2b0e      	cmp	r3, #14
 8012530:	d165      	bne.n	80125fe <SerialCtrlVendorWrite_Process+0x122>
  {
    /* Check parameter if data to be send continuously */
    if (idx == 0xFF)
 8012532:	89fb      	ldrh	r3, [r7, #14]
 8012534:	2bff      	cmp	r3, #255	@ 0xff
 8012536:	d12f      	bne.n	8012598 <SerialCtrlVendorWrite_Process+0xbc>
    {
      data_buff[0] = 0x01;     /*  data write sub command; */
 8012538:	2301      	movs	r3, #1
 801253a:	743b      	strb	r3, [r7, #16]
      length = sizeof(data_buff)-1;
 801253c:	233b      	movs	r3, #59	@ 0x3b
 801253e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
      for(MOBLEUINT8 i=1;i <sizeof(data_buff);i++)
 8012542:	2301      	movs	r3, #1
 8012544:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8012548:	e011      	b.n	801256e <SerialCtrlVendorWrite_Process+0x92>
      {
        data_buff[j] = i;
 801254a:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 801254e:	3360      	adds	r3, #96	@ 0x60
 8012550:	443b      	add	r3, r7
 8012552:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8012556:	f803 2c50 	strb.w	r2, [r3, #-80]
        j++;
 801255a:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 801255e:	3301      	adds	r3, #1
 8012560:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
      for(MOBLEUINT8 i=1;i <sizeof(data_buff);i++)
 8012564:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8012568:	3301      	adds	r3, #1
 801256a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 801256e:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8012572:	2b3b      	cmp	r3, #59	@ 0x3b
 8012574:	d9e9      	bls.n	801254a <SerialCtrlVendorWrite_Process+0x6e>
      }
      Appli_Vendor_SetBigDataPacket(data_buff, length, elementIndex , peer);
 8012576:	f897 105e 	ldrb.w	r1, [r7, #94]	@ 0x5e
 801257a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 801257e:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8012582:	f107 0010 	add.w	r0, r7, #16
 8012586:	f7f4 fca1 	bl	8006ecc <Appli_Vendor_SetBigDataPacket>
      Vendor_SendDataFreq(0xFF);
 801258a:	20ff      	movs	r0, #255	@ 0xff
 801258c:	f001 fb5a 	bl	8013c44 <Vendor_SendDataFreq>
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 8012590:	4842      	ldr	r0, [pc, #264]	@ (801269c <SerialCtrlVendorWrite_Process+0x1c0>)
 8012592:	f016 fcd5 	bl	8028f40 <puts>
      return;
 8012596:	e07b      	b.n	8012690 <SerialCtrlVendorWrite_Process+0x1b4>
    }
    /* Check parameter if continuously data send operation need to stop  */
    else if (idx == 0x00)
 8012598:	89fb      	ldrh	r3, [r7, #14]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d109      	bne.n	80125b2 <SerialCtrlVendorWrite_Process+0xd6>
    {
#if USE_STM32WB5M_DK
      LED_Off();
#else
      BSP_LED_Off(LED_BLUE); 
 801259e:	2000      	movs	r0, #0
 80125a0:	f7f5 fab4 	bl	8007b0c <BSP_LED_Off>
#endif
      Vendor_SendDataFreq(0x00);
 80125a4:	2000      	movs	r0, #0
 80125a6:	f001 fb4d 	bl	8013c44 <Vendor_SendDataFreq>
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 80125aa:	483c      	ldr	r0, [pc, #240]	@ (801269c <SerialCtrlVendorWrite_Process+0x1c0>)
 80125ac:	f016 fcc8 	bl	8028f40 <puts>
      return;
 80125b0:	e06e      	b.n	8012690 <SerialCtrlVendorWrite_Process+0x1b4>
    }
    /* Data will be sent only once */
    else
    {
      data_buff[0] = 0x01;     /*  data write sub command; */
 80125b2:	2301      	movs	r3, #1
 80125b4:	743b      	strb	r3, [r7, #16]
      length = sizeof(data_buff)-idx;
 80125b6:	89fb      	ldrh	r3, [r7, #14]
 80125b8:	b2db      	uxtb	r3, r3
 80125ba:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 80125be:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
      Vendor_SendDataFreq(0x00); /* To stop sending packets periodically */
 80125c2:	2000      	movs	r0, #0
 80125c4:	f001 fb3e 	bl	8013c44 <Vendor_SendDataFreq>
      for(MOBLEUINT8 i=idx;i <sizeof(data_buff);i++)
 80125c8:	89fb      	ldrh	r3, [r7, #14]
 80125ca:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80125ce:	e011      	b.n	80125f4 <SerialCtrlVendorWrite_Process+0x118>
      {
        data_buff[j] = i;
 80125d0:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80125d4:	3360      	adds	r3, #96	@ 0x60
 80125d6:	443b      	add	r3, r7
 80125d8:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80125dc:	f803 2c50 	strb.w	r2, [r3, #-80]
        j++;
 80125e0:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80125e4:	3301      	adds	r3, #1
 80125e6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
      for(MOBLEUINT8 i=idx;i <sizeof(data_buff);i++)
 80125ea:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80125ee:	3301      	adds	r3, #1
 80125f0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80125f4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80125f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80125fa:	d9e9      	bls.n	80125d0 <SerialCtrlVendorWrite_Process+0xf4>
 80125fc:	e009      	b.n	8012612 <SerialCtrlVendorWrite_Process+0x136>
      }
    }
  }
  else
  {
    length = SerialCtrl_GetData(rcvdStringBuff, rcvdStringSize, SERIAL_MODEL_DATA_OFFSET, data_buff);
 80125fe:	f107 0310 	add.w	r3, r7, #16
 8012602:	8879      	ldrh	r1, [r7, #2]
 8012604:	220f      	movs	r2, #15
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f000 f92f 	bl	801286a <SerialCtrl_GetData>
 801260c:	4603      	mov	r3, r0
 801260e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  }
  
  for(int i = 0; i < 6 ; i++)
 8012612:	2300      	movs	r3, #0
 8012614:	657b      	str	r3, [r7, #84]	@ 0x54
 8012616:	e00e      	b.n	8012636 <SerialCtrlVendorWrite_Process+0x15a>
  {
    if(command == Vendor_Opcodes_Table[i])
 8012618:	4a21      	ldr	r2, [pc, #132]	@ (80126a0 <SerialCtrlVendorWrite_Process+0x1c4>)
 801261a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801261c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8012620:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012624:	429a      	cmp	r2, r3
 8012626:	d103      	bne.n	8012630 <SerialCtrlVendorWrite_Process+0x154>
    {                 
      result = MOBLE_RESULT_SUCCESS;
 8012628:	2300      	movs	r3, #0
 801262a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      break;
 801262e:	e005      	b.n	801263c <SerialCtrlVendorWrite_Process+0x160>
  for(int i = 0; i < 6 ; i++)
 8012630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012632:	3301      	adds	r3, #1
 8012634:	657b      	str	r3, [r7, #84]	@ 0x54
 8012636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012638:	2b05      	cmp	r3, #5
 801263a:	dded      	ble.n	8012618 <SerialCtrlVendorWrite_Process+0x13c>
    }
  }
  if(result)
 801263c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012640:	2b00      	cmp	r3, #0
 8012642:	d003      	beq.n	801264c <SerialCtrlVendorWrite_Process+0x170>
  {
    TRACE_I(TF_SERIAL_PRINTS,"Invalid Command\r\n");
 8012644:	4817      	ldr	r0, [pc, #92]	@ (80126a4 <SerialCtrlVendorWrite_Process+0x1c8>)
 8012646:	f016 fc7b 	bl	8028f40 <puts>
    return;
 801264a:	e021      	b.n	8012690 <SerialCtrlVendorWrite_Process+0x1b4>
  
  else
  {
      
    /* Publish to the peer address, that can be a group address */
    result = BLEMesh_SetRemoteData(peer,
 801264c:	f8b7 0050 	ldrh.w	r0, [r7, #80]	@ 0x50
 8012650:	f8b7 404e 	ldrh.w	r4, [r7, #78]	@ 0x4e
 8012654:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8012658:	f107 0510 	add.w	r5, r7, #16
 801265c:	f897 1053 	ldrb.w	r1, [r7, #83]	@ 0x53
 8012660:	2201      	movs	r2, #1
 8012662:	9202      	str	r2, [sp, #8]
 8012664:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8012668:	9201      	str	r2, [sp, #4]
 801266a:	9300      	str	r3, [sp, #0]
 801266c:	462b      	mov	r3, r5
 801266e:	4622      	mov	r2, r4
 8012670:	f015 fc08 	bl	8027e84 <BLEMesh_SetRemoteData>
 8012674:	4603      	mov	r3, r0
 8012676:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                   data_buff, 
                                   length,
                                   response, 
                                   MOBLE_TRUE);   

    if(result == MOBLE_RESULT_SUCCESS)
 801267a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801267e:	2b00      	cmp	r3, #0
 8012680:	d103      	bne.n	801268a <SerialCtrlVendorWrite_Process+0x1ae>
    {
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 8012682:	4806      	ldr	r0, [pc, #24]	@ (801269c <SerialCtrlVendorWrite_Process+0x1c0>)
 8012684:	f016 fc5c 	bl	8028f40 <puts>
 8012688:	e002      	b.n	8012690 <SerialCtrlVendorWrite_Process+0x1b4>
    }
    else
    {
      TRACE_I(TF_SERIAL_PRINTS,"Invalid Opcode Parameter\r\n");
 801268a:	4807      	ldr	r0, [pc, #28]	@ (80126a8 <SerialCtrlVendorWrite_Process+0x1cc>)
 801268c:	f016 fc58 	bl	8028f40 <puts>
    }
  }
}
 8012690:	3760      	adds	r7, #96	@ 0x60
 8012692:	46bd      	mov	sp, r7
 8012694:	bdb0      	pop	{r4, r5, r7, pc}
 8012696:	bf00      	nop
 8012698:	0802ed70 	.word	0x0802ed70
 801269c:	0802ed34 	.word	0x0802ed34
 80126a0:	200000a4 	.word	0x200000a4
 80126a4:	0802ed20 	.word	0x0802ed20
 80126a8:	0802ed54 	.word	0x0802ed54

080126ac <SerialCtrl_Process>:
  

void SerialCtrl_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 80126ac:	b5b0      	push	{r4, r5, r7, lr}
 80126ae:	b08c      	sub	sp, #48	@ 0x30
 80126b0:	af04      	add	r7, sp, #16
 80126b2:	6078      	str	r0, [r7, #4]
 80126b4:	460b      	mov	r3, r1
 80126b6:	807b      	strh	r3, [r7, #2]
  MOBLE_ADDRESS peer = 0;                               /*node adderess of the destination node*/
 80126b8:	2300      	movs	r3, #0
 80126ba:	837b      	strh	r3, [r7, #26]
  MOBLEUINT16 command = 0;                              /*Opcode command to be executed by the destination node*/
 80126bc:	2300      	movs	r3, #0
 80126be:	833b      	strh	r3, [r7, #24]
  MOBLEUINT8 minParamLength = 0;                        /*minimum number of properties required by a specific command*/
 80126c0:	2300      	movs	r3, #0
 80126c2:	77fb      	strb	r3, [r7, #31]
  MOBLEUINT8 elementIndex = 0;                          /*default element index*/
 80126c4:	2300      	movs	r3, #0
 80126c6:	77bb      	strb	r3, [r7, #30]
  MOBLEUINT8  data [10] = {0};                          /*buffer to output property variables */
 80126c8:	2300      	movs	r3, #0
 80126ca:	60fb      	str	r3, [r7, #12]
 80126cc:	f107 0310 	add.w	r3, r7, #16
 80126d0:	2200      	movs	r2, #0
 80126d2:	601a      	str	r2, [r3, #0]
 80126d4:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result;
  MOBLEBOOL response = MOBLE_TRUE;
 80126d6:	2301      	movs	r3, #1
 80126d8:	777b      	strb	r3, [r7, #29]
  
  sscanf(rcvdStringBuff+5, "%4hx %hx ", &peer,&command); 
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	1d58      	adds	r0, r3, #5
 80126de:	f107 0318 	add.w	r3, r7, #24
 80126e2:	f107 021a 	add.w	r2, r7, #26
 80126e6:	493c      	ldr	r1, [pc, #240]	@ (80127d8 <SerialCtrl_Process+0x12c>)
 80126e8:	f016 fc32 	bl	8028f50 <siscanf>
  
  /* Callback to store a pointer to Opcode table starting sddress and length of the table*/
#ifdef ENABLE_GENERIC_MODEL_SERVER  
  GenericModelServer_GetOpcodeTableCb(&Generic_OpcodeTable,&Generic_OpcodeTableLength);
 80126ec:	493b      	ldr	r1, [pc, #236]	@ (80127dc <SerialCtrl_Process+0x130>)
 80126ee:	483c      	ldr	r0, [pc, #240]	@ (80127e0 <SerialCtrl_Process+0x134>)
 80126f0:	f7fb ff92 	bl	800e618 <GenericModelServer_GetOpcodeTableCb>
#ifdef ENABLE_GENERIC_MODEL_CLIENT
  GenericModelClient_GetOpcodeTableCb(&Generic_OpcodeTable,&Generic_OpcodeTableLength);
#endif
#endif
#ifdef ENABLE_LIGHT_MODEL_SERVER  
  LightModelServer_GetOpcodeTableCb(&Light_OpcodeTable,&Light_OpcodeTableLength);     
 80126f4:	493b      	ldr	r1, [pc, #236]	@ (80127e4 <SerialCtrl_Process+0x138>)
 80126f6:	483c      	ldr	r0, [pc, #240]	@ (80127e8 <SerialCtrl_Process+0x13c>)
 80126f8:	f7fd fb68 	bl	800fdcc <LightModelServer_GetOpcodeTableCb>
  LightLcServer_GetOpcodeTableCb(&LightLC_OpcodeTable,&LightLC_OpcodeTableLength);
 80126fc:	493b      	ldr	r1, [pc, #236]	@ (80127ec <SerialCtrl_Process+0x140>)
 80126fe:	483c      	ldr	r0, [pc, #240]	@ (80127f0 <SerialCtrl_Process+0x144>)
 8012700:	f000 fe17 	bl	8013332 <LightLcServer_GetOpcodeTableCb>
  SensorsModelClient_GetOpcodeTableCb(&Sensor_OpcodeTable,&Sensor_OpcodeTableLength);
#endif
#endif
  
  /* Minimum parameter length required for a valid opcade in Generic opcode table */
  minParamLength = SerialCtrl_GetMinParamLength(command,
 8012704:	8b3b      	ldrh	r3, [r7, #24]
 8012706:	4618      	mov	r0, r3
 8012708:	4b35      	ldr	r3, [pc, #212]	@ (80127e0 <SerialCtrl_Process+0x134>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	4a33      	ldr	r2, [pc, #204]	@ (80127dc <SerialCtrl_Process+0x130>)
 801270e:	8812      	ldrh	r2, [r2, #0]
 8012710:	4619      	mov	r1, r3
 8012712:	f000 f87b 	bl	801280c <SerialCtrl_GetMinParamLength>
 8012716:	4603      	mov	r3, r0
 8012718:	77fb      	strb	r3, [r7, #31]
                                                Generic_OpcodeTable,
                                                Generic_OpcodeTableLength);
  
  /* Opcode not found in Generic opcode table 
      Start finding for opcode in Light Table*/
  if (minParamLength == 0xff)
 801271a:	7ffb      	ldrb	r3, [r7, #31]
 801271c:	2bff      	cmp	r3, #255	@ 0xff
 801271e:	d10a      	bne.n	8012736 <SerialCtrl_Process+0x8a>
  {
    minParamLength = SerialCtrl_GetMinParamLength(command,
 8012720:	8b3b      	ldrh	r3, [r7, #24]
 8012722:	4618      	mov	r0, r3
 8012724:	4b30      	ldr	r3, [pc, #192]	@ (80127e8 <SerialCtrl_Process+0x13c>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	4a2e      	ldr	r2, [pc, #184]	@ (80127e4 <SerialCtrl_Process+0x138>)
 801272a:	8812      	ldrh	r2, [r2, #0]
 801272c:	4619      	mov	r1, r3
 801272e:	f000 f86d 	bl	801280c <SerialCtrl_GetMinParamLength>
 8012732:	4603      	mov	r3, r0
 8012734:	77fb      	strb	r3, [r7, #31]
                                                  Light_OpcodeTable,
                                                  Light_OpcodeTableLength);
  }
  /* Opcode not found in Light opcode table
      Start finding for opcode in Light LC Table*/
  if (minParamLength == 0xff)
 8012736:	7ffb      	ldrb	r3, [r7, #31]
 8012738:	2bff      	cmp	r3, #255	@ 0xff
 801273a:	d10a      	bne.n	8012752 <SerialCtrl_Process+0xa6>
  {
    minParamLength = SerialCtrl_GetMinParamLength(command,
 801273c:	8b3b      	ldrh	r3, [r7, #24]
 801273e:	4618      	mov	r0, r3
 8012740:	4b2b      	ldr	r3, [pc, #172]	@ (80127f0 <SerialCtrl_Process+0x144>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	4a29      	ldr	r2, [pc, #164]	@ (80127ec <SerialCtrl_Process+0x140>)
 8012746:	8812      	ldrh	r2, [r2, #0]
 8012748:	4619      	mov	r1, r3
 801274a:	f000 f85f 	bl	801280c <SerialCtrl_GetMinParamLength>
 801274e:	4603      	mov	r3, r0
 8012750:	77fb      	strb	r3, [r7, #31]
                                                 LightLC_OpcodeTableLength);

  }
  /* Opcode not found in Light LC opcode table 
      Start finding for opcode in Sensor Table*/
  if (minParamLength == 0xff)
 8012752:	7ffb      	ldrb	r3, [r7, #31]
 8012754:	2bff      	cmp	r3, #255	@ 0xff
 8012756:	d10f      	bne.n	8012778 <SerialCtrl_Process+0xcc>
  {
    minParamLength = SerialCtrl_GetMinParamLength(command,
 8012758:	8b3b      	ldrh	r3, [r7, #24]
 801275a:	4618      	mov	r0, r3
 801275c:	4b25      	ldr	r3, [pc, #148]	@ (80127f4 <SerialCtrl_Process+0x148>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	4a25      	ldr	r2, [pc, #148]	@ (80127f8 <SerialCtrl_Process+0x14c>)
 8012762:	8812      	ldrh	r2, [r2, #0]
 8012764:	4619      	mov	r1, r3
 8012766:	f000 f851 	bl	801280c <SerialCtrl_GetMinParamLength>
 801276a:	4603      	mov	r3, r0
 801276c:	77fb      	strb	r3, [r7, #31]
                                                  Sensor_OpcodeTable,
                                                  Sensor_OpcodeTableLength);
    
    TRACE_I(TF_SERIAL_PRINTS, "Min Parameter Length after sensor model check %d\r\n", 
 801276e:	7ffb      	ldrb	r3, [r7, #31]
 8012770:	4619      	mov	r1, r3
 8012772:	4822      	ldr	r0, [pc, #136]	@ (80127fc <SerialCtrl_Process+0x150>)
 8012774:	f016 fb7c 	bl	8028e70 <iprintf>
                             minParamLength);
  }
  
  if (minParamLength != 0xff) /* Opcode found in one of the models */ 
 8012778:	7ffb      	ldrb	r3, [r7, #31]
 801277a:	2bff      	cmp	r3, #255	@ 0xff
 801277c:	d024      	beq.n	80127c8 <SerialCtrl_Process+0x11c>
  {
    minParamLength = SerialCtrl_GetData(rcvdStringBuff, 
 801277e:	f107 030c 	add.w	r3, r7, #12
 8012782:	8879      	ldrh	r1, [r7, #2]
 8012784:	220f      	movs	r2, #15
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f000 f86f 	bl	801286a <SerialCtrl_GetData>
 801278c:	4603      	mov	r3, r0
 801278e:	77fb      	strb	r3, [r7, #31]
                                        rcvdStringSize, 
                                        SERIAL_MODEL_DATA_OFFSET, 
                                        data);

    result = BLEMesh_SetRemoteData(peer,
 8012790:	8b78      	ldrh	r0, [r7, #26]
 8012792:	8b3c      	ldrh	r4, [r7, #24]
 8012794:	7ffb      	ldrb	r3, [r7, #31]
 8012796:	f107 050c 	add.w	r5, r7, #12
 801279a:	7fb9      	ldrb	r1, [r7, #30]
 801279c:	2200      	movs	r2, #0
 801279e:	9202      	str	r2, [sp, #8]
 80127a0:	7f7a      	ldrb	r2, [r7, #29]
 80127a2:	9201      	str	r2, [sp, #4]
 80127a4:	9300      	str	r3, [sp, #0]
 80127a6:	462b      	mov	r3, r5
 80127a8:	4622      	mov	r2, r4
 80127aa:	f015 fb6b 	bl	8027e84 <BLEMesh_SetRemoteData>
 80127ae:	4603      	mov	r3, r0
 80127b0:	773b      	strb	r3, [r7, #28]
                                   command, 
                                   data, 
                                   minParamLength,
                                   response, 
                                   MOBLE_FALSE);   
    if(result == MOBLE_RESULT_SUCCESS)
 80127b2:	7f3b      	ldrb	r3, [r7, #28]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d103      	bne.n	80127c0 <SerialCtrl_Process+0x114>
    {
      TRACE_I(TF_SERIAL_PRINTS, "Command Executed Successfully\r\n");
 80127b8:	4811      	ldr	r0, [pc, #68]	@ (8012800 <SerialCtrl_Process+0x154>)
 80127ba:	f016 fbc1 	bl	8028f40 <puts>
  }
  else
  {
    TRACE_I(TF_SERIAL_PRINTS, "Unknown Opcode\r\n");
  }
}
 80127be:	e006      	b.n	80127ce <SerialCtrl_Process+0x122>
      TRACE_I(TF_SERIAL_PRINTS, "Invalid Opcode Parameter\r\n");
 80127c0:	4810      	ldr	r0, [pc, #64]	@ (8012804 <SerialCtrl_Process+0x158>)
 80127c2:	f016 fbbd 	bl	8028f40 <puts>
}
 80127c6:	e002      	b.n	80127ce <SerialCtrl_Process+0x122>
    TRACE_I(TF_SERIAL_PRINTS, "Unknown Opcode\r\n");
 80127c8:	480f      	ldr	r0, [pc, #60]	@ (8012808 <SerialCtrl_Process+0x15c>)
 80127ca:	f016 fbb9 	bl	8028f40 <puts>
}
 80127ce:	bf00      	nop
 80127d0:	3720      	adds	r7, #32
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bdb0      	pop	{r4, r5, r7, pc}
 80127d6:	bf00      	nop
 80127d8:	0802ed14 	.word	0x0802ed14
 80127dc:	20004772 	.word	0x20004772
 80127e0:	20004764 	.word	0x20004764
 80127e4:	20004770 	.word	0x20004770
 80127e8:	20004760 	.word	0x20004760
 80127ec:	20004774 	.word	0x20004774
 80127f0:	20004768 	.word	0x20004768
 80127f4:	2000476c 	.word	0x2000476c
 80127f8:	20004776 	.word	0x20004776
 80127fc:	0802ed80 	.word	0x0802ed80
 8012800:	0802ed34 	.word	0x0802ed34
 8012804:	0802ed54 	.word	0x0802ed54
 8012808:	0802edb4 	.word	0x0802edb4

0801280c <SerialCtrl_GetMinParamLength>:
* @param  list: 
* @param  length:  
* @retval MOBLEUINT16
*/ 
MOBLEUINT8 SerialCtrl_GetMinParamLength(MOBLEUINT32 opcode, const MODEL_OpcodeTableParam_t list[], MOBLEUINT16 length)
{
 801280c:	b480      	push	{r7}
 801280e:	b087      	sub	sp, #28
 8012810:	af00      	add	r7, sp, #0
 8012812:	60f8      	str	r0, [r7, #12]
 8012814:	60b9      	str	r1, [r7, #8]
 8012816:	4613      	mov	r3, r2
 8012818:	80fb      	strh	r3, [r7, #6]
  for (int i = 0; i < length; i++)
 801281a:	2300      	movs	r3, #0
 801281c:	617b      	str	r3, [r7, #20]
 801281e:	e019      	b.n	8012854 <SerialCtrl_GetMinParamLength+0x48>
  {
    if (list[i].opcode == opcode)
 8012820:	697a      	ldr	r2, [r7, #20]
 8012822:	4613      	mov	r3, r2
 8012824:	005b      	lsls	r3, r3, #1
 8012826:	4413      	add	r3, r2
 8012828:	009b      	lsls	r3, r3, #2
 801282a:	461a      	mov	r2, r3
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	4413      	add	r3, r2
 8012830:	885b      	ldrh	r3, [r3, #2]
 8012832:	461a      	mov	r2, r3
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	4293      	cmp	r3, r2
 8012838:	d109      	bne.n	801284e <SerialCtrl_GetMinParamLength+0x42>
    {
      return list[i].min_payload_size;
 801283a:	697a      	ldr	r2, [r7, #20]
 801283c:	4613      	mov	r3, r2
 801283e:	005b      	lsls	r3, r3, #1
 8012840:	4413      	add	r3, r2
 8012842:	009b      	lsls	r3, r3, #2
 8012844:	461a      	mov	r2, r3
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	4413      	add	r3, r2
 801284a:	795b      	ldrb	r3, [r3, #5]
 801284c:	e007      	b.n	801285e <SerialCtrl_GetMinParamLength+0x52>
  for (int i = 0; i < length; i++)
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	3301      	adds	r3, #1
 8012852:	617b      	str	r3, [r7, #20]
 8012854:	88fb      	ldrh	r3, [r7, #6]
 8012856:	697a      	ldr	r2, [r7, #20]
 8012858:	429a      	cmp	r2, r3
 801285a:	dbe1      	blt.n	8012820 <SerialCtrl_GetMinParamLength+0x14>
    }
  }
  return 0xff;
 801285c:	23ff      	movs	r3, #255	@ 0xff
}
 801285e:	4618      	mov	r0, r3
 8012860:	371c      	adds	r7, #28
 8012862:	46bd      	mov	sp, r7
 8012864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012868:	4770      	bx	lr

0801286a <SerialCtrl_GetData>:
* @param  data: Output array comprising of Data
* @param  dataIndex:  
* @retval MOBLEUINT8
*/
MOBLEUINT8 SerialCtrl_GetData(char *rcvdStringBuff, uint16_t rcvdStringSize, MOBLEUINT8 dataOffset, MOBLEUINT8  *data)
{
 801286a:	b580      	push	{r7, lr}
 801286c:	b08c      	sub	sp, #48	@ 0x30
 801286e:	af00      	add	r7, sp, #0
 8012870:	60f8      	str	r0, [r7, #12]
 8012872:	607b      	str	r3, [r7, #4]
 8012874:	460b      	mov	r3, r1
 8012876:	817b      	strh	r3, [r7, #10]
 8012878:	4613      	mov	r3, r2
 801287a:	727b      	strb	r3, [r7, #9]
  MOBLEUINT8 byteBuff[10] = {0};
 801287c:	2300      	movs	r3, #0
 801287e:	613b      	str	r3, [r7, #16]
 8012880:	f107 0314 	add.w	r3, r7, #20
 8012884:	2200      	movs	r2, #0
 8012886:	601a      	str	r2, [r3, #0]
 8012888:	809a      	strh	r2, [r3, #4]
  MOBLEUINT8 dataIndex = 0;
 801288a:	2300      	movs	r3, #0
 801288c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  int msb, lsb, byteCounter=0;           
 8012890:	2300      	movs	r3, #0
 8012892:	62bb      	str	r3, [r7, #40]	@ 0x28

  for(int i=dataOffset ; i<=(rcvdStringSize) ; i++)
 8012894:	7a7b      	ldrb	r3, [r7, #9]
 8012896:	627b      	str	r3, [r7, #36]	@ 0x24
 8012898:	e058      	b.n	801294c <SerialCtrl_GetData+0xe2>
  {
    /* check if space or NULL found */
    if(rcvdStringBuff[i] == ' '||rcvdStringBuff[i] == '\0' )
 801289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801289c:	68fa      	ldr	r2, [r7, #12]
 801289e:	4413      	add	r3, r2
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	2b20      	cmp	r3, #32
 80128a4:	d017      	beq.n	80128d6 <SerialCtrl_GetData+0x6c>
 80128a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128a8:	68fa      	ldr	r2, [r7, #12]
 80128aa:	4413      	add	r3, r2
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d115      	bne.n	80128de <SerialCtrl_GetData+0x74>
    {
      /*if number of bytes is one*/
      while(byteCounter > 0)
 80128b2:	e010      	b.n	80128d6 <SerialCtrl_GetData+0x6c>
      {
        data[dataIndex++] = byteBuff[--byteCounter];
 80128b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128b6:	3b01      	subs	r3, #1
 80128b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80128ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80128be:	1c5a      	adds	r2, r3, #1
 80128c0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80128c4:	461a      	mov	r2, r3
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	4413      	add	r3, r2
 80128ca:	f107 0110 	add.w	r1, r7, #16
 80128ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80128d0:	440a      	add	r2, r1
 80128d2:	7812      	ldrb	r2, [r2, #0]
 80128d4:	701a      	strb	r2, [r3, #0]
      while(byteCounter > 0)
 80128d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128d8:	2b00      	cmp	r3, #0
 80128da:	dceb      	bgt.n	80128b4 <SerialCtrl_GetData+0x4a>
    if(rcvdStringBuff[i] == ' '||rcvdStringBuff[i] == '\0' )
 80128dc:	e033      	b.n	8012946 <SerialCtrl_GetData+0xdc>
      }
    }
    else
    {
      /* take two consecutive ascii characters from the rcvdStringBuff and convert to hex values */  
      msb = Serial_CharToHexConvert(rcvdStringBuff[i]);        
 80128de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128e0:	68fa      	ldr	r2, [r7, #12]
 80128e2:	4413      	add	r3, r2
 80128e4:	781b      	ldrb	r3, [r3, #0]
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7ff fcf4 	bl	80122d4 <Serial_CharToHexConvert>
 80128ec:	4603      	mov	r3, r0
 80128ee:	623b      	str	r3, [r7, #32]
      lsb = Serial_CharToHexConvert(rcvdStringBuff[i + 1 ]);
 80128f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128f2:	3301      	adds	r3, #1
 80128f4:	68fa      	ldr	r2, [r7, #12]
 80128f6:	4413      	add	r3, r2
 80128f8:	781b      	ldrb	r3, [r3, #0]
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7ff fcea 	bl	80122d4 <Serial_CharToHexConvert>
 8012900:	4603      	mov	r3, r0
 8012902:	61fb      	str	r3, [r7, #28]
      /*join two hex values to make one hex value*/
      byteBuff[byteCounter]  = msb << 4;
 8012904:	6a3b      	ldr	r3, [r7, #32]
 8012906:	b2db      	uxtb	r3, r3
 8012908:	011b      	lsls	r3, r3, #4
 801290a:	b2d9      	uxtb	r1, r3
 801290c:	f107 0210 	add.w	r2, r7, #16
 8012910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012912:	4413      	add	r3, r2
 8012914:	460a      	mov	r2, r1
 8012916:	701a      	strb	r2, [r3, #0]
      byteBuff[byteCounter] |= lsb;
 8012918:	f107 0210 	add.w	r2, r7, #16
 801291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801291e:	4413      	add	r3, r2
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	b25a      	sxtb	r2, r3
 8012924:	69fb      	ldr	r3, [r7, #28]
 8012926:	b25b      	sxtb	r3, r3
 8012928:	4313      	orrs	r3, r2
 801292a:	b25b      	sxtb	r3, r3
 801292c:	b2d9      	uxtb	r1, r3
 801292e:	f107 0210 	add.w	r2, r7, #16
 8012932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012934:	4413      	add	r3, r2
 8012936:	460a      	mov	r2, r1
 8012938:	701a      	strb	r2, [r3, #0]
      
      i++;      /*increment for loop counter as two values are used */
 801293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801293c:	3301      	adds	r3, #1
 801293e:	627b      	str	r3, [r7, #36]	@ 0x24
      byteCounter++;   /*increment byteCounter counter*/
 8012940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012942:	3301      	adds	r3, #1
 8012944:	62bb      	str	r3, [r7, #40]	@ 0x28
  for(int i=dataOffset ; i<=(rcvdStringSize) ; i++)
 8012946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012948:	3301      	adds	r3, #1
 801294a:	627b      	str	r3, [r7, #36]	@ 0x24
 801294c:	897b      	ldrh	r3, [r7, #10]
 801294e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012950:	429a      	cmp	r2, r3
 8012952:	dda2      	ble.n	801289a <SerialCtrl_GetData+0x30>
    }
  }
        
  return dataIndex;
 8012954:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f

}
 8012958:	4618      	mov	r0, r3
 801295a:	3730      	adds	r7, #48	@ 0x30
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <SerialUt_Process>:
* @param  rcvdStringBuff: Pointer to the received ascii character array from the user
* @param  rcvdStringSize: Size of the received array
* @retval void
*/
void SerialUt_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b088      	sub	sp, #32
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	460b      	mov	r3, r1
 801296a:	807b      	strh	r3, [r7, #2]
  MOBLEUINT16 commandIndex = SerialUt_GetFunctionIndex(rcvdStringBuff+5);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	3305      	adds	r3, #5
 8012970:	4618      	mov	r0, r3
 8012972:	f000 f917 	bl	8012ba4 <SerialUt_GetFunctionIndex>
 8012976:	4603      	mov	r3, r0
 8012978:	83bb      	strh	r3, [r7, #28]
  MOBLEUINT8 testFunctionParm[6]= {'\0'} ;
 801297a:	2300      	movs	r3, #0
 801297c:	617b      	str	r3, [r7, #20]
 801297e:	2300      	movs	r3, #0
 8012980:	833b      	strh	r3, [r7, #24]
  MOBLEUINT8 asciiFunctionParameter[7] = {'\0'} ;
 8012982:	2300      	movs	r3, #0
 8012984:	60fb      	str	r3, [r7, #12]
 8012986:	f107 0310 	add.w	r3, r7, #16
 801298a:	2100      	movs	r1, #0
 801298c:	460a      	mov	r2, r1
 801298e:	801a      	strh	r2, [r3, #0]
 8012990:	460a      	mov	r2, r1
 8012992:	709a      	strb	r2, [r3, #2]
#ifdef ENABLE_SENSOR_MODEL_SERVER
  MOBLEUINT16 value = 0;           
  MOBLEUINT8 sensorOffset = 0;    
#endif
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8012994:	2300      	movs	r3, #0
 8012996:	77fb      	strb	r3, [r7, #31]
  MOBLEBOOL unprovisioned = MOBLE_FALSE;
 8012998:	2300      	movs	r3, #0
 801299a:	77bb      	strb	r3, [r7, #30]
  
  switch (commandIndex)
 801299c:	8bbb      	ldrh	r3, [r7, #28]
 801299e:	3b01      	subs	r3, #1
 80129a0:	2b15      	cmp	r3, #21
 80129a2:	f200 80c1 	bhi.w	8012b28 <SerialUt_Process+0x1c8>
 80129a6:	a201      	add	r2, pc, #4	@ (adr r2, 80129ac <SerialUt_Process+0x4c>)
 80129a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129ac:	08012a05 	.word	0x08012a05
 80129b0:	08012a41 	.word	0x08012a41
 80129b4:	08012a7d 	.word	0x08012a7d
 80129b8:	08012af5 	.word	0x08012af5
 80129bc:	08012a93 	.word	0x08012a93
 80129c0:	08012a7d 	.word	0x08012a7d
 80129c4:	08012a93 	.word	0x08012a93
 80129c8:	08012a7d 	.word	0x08012a7d
 80129cc:	08012a7d 	.word	0x08012a7d
 80129d0:	08012a7d 	.word	0x08012a7d
 80129d4:	08012a7d 	.word	0x08012a7d
 80129d8:	08012ab9 	.word	0x08012ab9
 80129dc:	08012a93 	.word	0x08012a93
 80129e0:	08012a93 	.word	0x08012a93
 80129e4:	08012a7d 	.word	0x08012a7d
 80129e8:	08012a7d 	.word	0x08012a7d
 80129ec:	08012a7d 	.word	0x08012a7d
 80129f0:	08012b29 	.word	0x08012b29
 80129f4:	08012b29 	.word	0x08012b29
 80129f8:	08012b29 	.word	0x08012b29
 80129fc:	08012b29 	.word	0x08012b29
 8012a00:	08012b13 	.word	0x08012b13
  {
  case CMD_INDEX_SEND_01:
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SEND_OFFSET, "%2s %4s", asciiFunctionParameter,asciiFunctionParameter+2);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	f103 000d 	add.w	r0, r3, #13
 8012a0a:	f107 030c 	add.w	r3, r7, #12
 8012a0e:	3302      	adds	r3, #2
 8012a10:	f107 020c 	add.w	r2, r7, #12
 8012a14:	495a      	ldr	r1, [pc, #360]	@ (8012b80 <SerialUt_Process+0x220>)
 8012a16:	f016 fa9b 	bl	8028f50 <siscanf>
    /*SerialUt_doubleHexToHex
    Function will convert the asci string into orinal hex format.
    eg- send-01 12 3456
    return 0x12,0x34,0x56       
    */
    SerialUt_doubleHexToHex(asciiFunctionParameter,testFunctionParm,6);
 8012a1a:	f107 0114 	add.w	r1, r7, #20
 8012a1e:	f107 030c 	add.w	r3, r7, #12
 8012a22:	2206      	movs	r2, #6
 8012a24:	4618      	mov	r0, r3
 8012a26:	f000 f929 	bl	8012c7c <SerialUt_doubleHexToHex>
    /*BLEMesh_UpperTesterDataProcess
    this function will take action and execute some other functions
    */       
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 8012a2a:	8bbb      	ldrh	r3, [r7, #28]
 8012a2c:	b2db      	uxtb	r3, r3
 8012a2e:	f107 0214 	add.w	r2, r7, #20
 8012a32:	4611      	mov	r1, r2
 8012a34:	4618      	mov	r0, r3
 8012a36:	f015 fad1 	bl	8027fdc <BLEMesh_UpperTesterDataProcess>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	77fb      	strb	r3, [r7, #31]
    break;
 8012a3e:	e076      	b.n	8012b2e <SerialUt_Process+0x1ce>
          
  case CMD_INDEX_SEND_02: 
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SEND_OFFSET, "%2s %4s", asciiFunctionParameter,asciiFunctionParameter+2);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f103 000d 	add.w	r0, r3, #13
 8012a46:	f107 030c 	add.w	r3, r7, #12
 8012a4a:	3302      	adds	r3, #2
 8012a4c:	f107 020c 	add.w	r2, r7, #12
 8012a50:	494b      	ldr	r1, [pc, #300]	@ (8012b80 <SerialUt_Process+0x220>)
 8012a52:	f016 fa7d 	bl	8028f50 <siscanf>
    SerialUt_doubleHexToHex(asciiFunctionParameter,testFunctionParm,6);
 8012a56:	f107 0114 	add.w	r1, r7, #20
 8012a5a:	f107 030c 	add.w	r3, r7, #12
 8012a5e:	2206      	movs	r2, #6
 8012a60:	4618      	mov	r0, r3
 8012a62:	f000 f90b 	bl	8012c7c <SerialUt_doubleHexToHex>
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);       
 8012a66:	8bbb      	ldrh	r3, [r7, #28]
 8012a68:	b2db      	uxtb	r3, r3
 8012a6a:	f107 0214 	add.w	r2, r7, #20
 8012a6e:	4611      	mov	r1, r2
 8012a70:	4618      	mov	r0, r3
 8012a72:	f015 fab3 	bl	8027fdc <BLEMesh_UpperTesterDataProcess>
 8012a76:	4603      	mov	r3, r0
 8012a78:	77fb      	strb	r3, [r7, #31]
    break;
 8012a7a:	e058      	b.n	8012b2e <SerialUt_Process+0x1ce>
  case CMD_INDEX_SET_13:  
     /* Order IUT to update the NetKeyIndex */
  case CMD_INDEX_SET_14:
    /* Order IUT to clear Publication & Subscription List*/
  case CMD_INDEX_SET_15:
    result = BLEMesh_UpperTesterDataProcess(commandIndex, testFunctionParm);
 8012a7c:	8bbb      	ldrh	r3, [r7, #28]
 8012a7e:	b2db      	uxtb	r3, r3
 8012a80:	f107 0214 	add.w	r2, r7, #20
 8012a84:	4611      	mov	r1, r2
 8012a86:	4618      	mov	r0, r3
 8012a88:	f015 faa8 	bl	8027fdc <BLEMesh_UpperTesterDataProcess>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	77fb      	strb	r3, [r7, #31]
    break;
 8012a90:	e04d      	b.n	8012b2e <SerialUt_Process+0x1ce>
  case CMD_INDEX_SET_05:     
    /* Sets all node identity for all Networks */
  case CMD_INDEX_SET_11:     
    /* Updates the features supported by the library */
  case CMD_INDEX_SET_12:  
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SET_OFFSET, "%1c", testFunctionParm);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	330c      	adds	r3, #12
 8012a96:	f107 0214 	add.w	r2, r7, #20
 8012a9a:	493a      	ldr	r1, [pc, #232]	@ (8012b84 <SerialUt_Process+0x224>)
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f016 fa57 	bl	8028f50 <siscanf>
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 8012aa2:	8bbb      	ldrh	r3, [r7, #28]
 8012aa4:	b2db      	uxtb	r3, r3
 8012aa6:	f107 0214 	add.w	r2, r7, #20
 8012aaa:	4611      	mov	r1, r2
 8012aac:	4618      	mov	r0, r3
 8012aae:	f015 fa95 	bl	8027fdc <BLEMesh_UpperTesterDataProcess>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	77fb      	strb	r3, [r7, #31]
    break;
 8012ab6:	e03a      	b.n	8012b2e <SerialUt_Process+0x1ce>
    /* Sets system faults for Health Model*/
  case CMD_INDEX_SET_10: 
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SET_OFFSET, "%2s %1c", asciiFunctionParameter, testFunctionParm+1);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f103 000c 	add.w	r0, r3, #12
 8012abe:	f107 0314 	add.w	r3, r7, #20
 8012ac2:	3301      	adds	r3, #1
 8012ac4:	f107 020c 	add.w	r2, r7, #12
 8012ac8:	492f      	ldr	r1, [pc, #188]	@ (8012b88 <SerialUt_Process+0x228>)
 8012aca:	f016 fa41 	bl	8028f50 <siscanf>
    SerialUt_doubleHexToHex(asciiFunctionParameter,testFunctionParm,2);
 8012ace:	f107 0114 	add.w	r1, r7, #20
 8012ad2:	f107 030c 	add.w	r3, r7, #12
 8012ad6:	2202      	movs	r2, #2
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f000 f8cf 	bl	8012c7c <SerialUt_doubleHexToHex>
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 8012ade:	8bbb      	ldrh	r3, [r7, #28]
 8012ae0:	b2db      	uxtb	r3, r3
 8012ae2:	f107 0214 	add.w	r2, r7, #20
 8012ae6:	4611      	mov	r1, r2
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f015 fa77 	bl	8027fdc <BLEMesh_UpperTesterDataProcess>
 8012aee:	4603      	mov	r3, r0
 8012af0:	77fb      	strb	r3, [r7, #31]
    break;
 8012af2:	e01c      	b.n	8012b2e <SerialUt_Process+0x1ce>
    break;
#endif
  /* Unprovisions the Node */
  case CMD_INDEX_SET_02:
    {
      unprovisioned = BLEMesh_IsUnprovisioned();
 8012af4:	f00b ff24 	bl	801e940 <BLEMesh_IsUnprovisioned>
 8012af8:	4603      	mov	r3, r0
 8012afa:	77bb      	strb	r3, [r7, #30]
      result = BLEMesh_UpperTesterDataProcess(commandIndex, testFunctionParm);
 8012afc:	8bbb      	ldrh	r3, [r7, #28]
 8012afe:	b2db      	uxtb	r3, r3
 8012b00:	f107 0214 	add.w	r2, r7, #20
 8012b04:	4611      	mov	r1, r2
 8012b06:	4618      	mov	r0, r3
 8012b08:	f015 fa68 	bl	8027fdc <BLEMesh_UpperTesterDataProcess>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	77fb      	strb	r3, [r7, #31]
    }
    break;
 8012b10:	e00d      	b.n	8012b2e <SerialUt_Process+0x1ce>
    
    /* Print Security Credentials */
  case CMD_INDEX_PRINT_01:  
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 8012b12:	8bbb      	ldrh	r3, [r7, #28]
 8012b14:	b2db      	uxtb	r3, r3
 8012b16:	f107 0214 	add.w	r2, r7, #20
 8012b1a:	4611      	mov	r1, r2
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f015 fa5d 	bl	8027fdc <BLEMesh_UpperTesterDataProcess>
 8012b22:	4603      	mov	r3, r0
 8012b24:	77fb      	strb	r3, [r7, #31]
    break;
 8012b26:	e002      	b.n	8012b2e <SerialUt_Process+0x1ce>
      
  default:
    printf("Invalid Command\r\n");
 8012b28:	4818      	ldr	r0, [pc, #96]	@ (8012b8c <SerialUt_Process+0x22c>)
 8012b2a:	f016 fa09 	bl	8028f40 <puts>
  }
  if (result == MOBLE_RESULT_SUCCESS)
 8012b2e:	7ffb      	ldrb	r3, [r7, #31]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d10f      	bne.n	8012b54 <SerialUt_Process+0x1f4>
  {
    BLEMesh_PrintStringCb("Test command executed successfully\r\n");
 8012b34:	4816      	ldr	r0, [pc, #88]	@ (8012b90 <SerialUt_Process+0x230>)
 8012b36:	f7ff fc23 	bl	8012380 <BLEMesh_PrintStringCb>
    if(commandIndex == CMD_INDEX_SET_02)
 8012b3a:	8bbb      	ldrh	r3, [r7, #28]
 8012b3c:	2b04      	cmp	r3, #4
 8012b3e:	d11a      	bne.n	8012b76 <SerialUt_Process+0x216>
    {
      if(!unprovisioned)
 8012b40:	7fbb      	ldrb	r3, [r7, #30]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d102      	bne.n	8012b4c <SerialUt_Process+0x1ec>
      {
        Appli_Unprovision();
 8012b46:	f7f3 fbcb 	bl	80062e0 <Appli_Unprovision>
  }
  else
  {
    BLEMesh_PrintStringCb("Test command Failed.\r\n");   
  }
}
 8012b4a:	e014      	b.n	8012b76 <SerialUt_Process+0x216>
        BLEMesh_PrintStringCb("Device is already unprovisioned !\r\n");
 8012b4c:	4811      	ldr	r0, [pc, #68]	@ (8012b94 <SerialUt_Process+0x234>)
 8012b4e:	f7ff fc17 	bl	8012380 <BLEMesh_PrintStringCb>
}
 8012b52:	e010      	b.n	8012b76 <SerialUt_Process+0x216>
  else if(result == MOBLE_RESULT_OUTOFMEMORY)
 8012b54:	7ffb      	ldrb	r3, [r7, #31]
 8012b56:	2b04      	cmp	r3, #4
 8012b58:	d103      	bne.n	8012b62 <SerialUt_Process+0x202>
    BLEMesh_PrintStringCb("Test command Failed. Out of memory\r\n");  
 8012b5a:	480f      	ldr	r0, [pc, #60]	@ (8012b98 <SerialUt_Process+0x238>)
 8012b5c:	f7ff fc10 	bl	8012380 <BLEMesh_PrintStringCb>
}
 8012b60:	e009      	b.n	8012b76 <SerialUt_Process+0x216>
  else if(result == MOBLE_RESULT_INVALIDARG)
 8012b62:	7ffb      	ldrb	r3, [r7, #31]
 8012b64:	2b03      	cmp	r3, #3
 8012b66:	d103      	bne.n	8012b70 <SerialUt_Process+0x210>
    BLEMesh_PrintStringCb("Test command Failed. Invalid Argument\r\n");  
 8012b68:	480c      	ldr	r0, [pc, #48]	@ (8012b9c <SerialUt_Process+0x23c>)
 8012b6a:	f7ff fc09 	bl	8012380 <BLEMesh_PrintStringCb>
}
 8012b6e:	e002      	b.n	8012b76 <SerialUt_Process+0x216>
    BLEMesh_PrintStringCb("Test command Failed.\r\n");   
 8012b70:	480b      	ldr	r0, [pc, #44]	@ (8012ba0 <SerialUt_Process+0x240>)
 8012b72:	f7ff fc05 	bl	8012380 <BLEMesh_PrintStringCb>
}
 8012b76:	bf00      	nop
 8012b78:	3720      	adds	r7, #32
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}
 8012b7e:	bf00      	nop
 8012b80:	0802edc4 	.word	0x0802edc4
 8012b84:	0802edcc 	.word	0x0802edcc
 8012b88:	0802edd0 	.word	0x0802edd0
 8012b8c:	0802ed20 	.word	0x0802ed20
 8012b90:	0802edd8 	.word	0x0802edd8
 8012b94:	0802ee00 	.word	0x0802ee00
 8012b98:	0802ee24 	.word	0x0802ee24
 8012b9c:	0802ee4c 	.word	0x0802ee4c
 8012ba0:	0802ee74 	.word	0x0802ee74

08012ba4 <SerialUt_GetFunctionIndex>:
* @param  rcvdStringBuff: Pointer to the received ascii character array from the user
* @param  rcvdStringSize: Size of the received array
* @retval MOBLEUINT16
*/
static MOBLEUINT16 SerialUt_GetFunctionIndex(char *text)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b084      	sub	sp, #16
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
  MOBLEINT16 index = 0;
 8012bac:	2300      	movs	r3, #0
 8012bae:	81fb      	strh	r3, [r7, #14]

  if (!strncmp(text, "SEND-",5))
 8012bb0:	2205      	movs	r2, #5
 8012bb2:	492c      	ldr	r1, [pc, #176]	@ (8012c64 <SerialUt_GetFunctionIndex+0xc0>)
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f016 fb01 	bl	80291bc <strncmp>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d110      	bne.n	8012be2 <SerialUt_GetFunctionIndex+0x3e>
{
    /* sscanf is to extract the integeer value from the string */        
    sscanf(text, "SEND-%hd", &index);
 8012bc0:	f107 030e 	add.w	r3, r7, #14
 8012bc4:	461a      	mov	r2, r3
 8012bc6:	4928      	ldr	r1, [pc, #160]	@ (8012c68 <SerialUt_GetFunctionIndex+0xc4>)
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f016 f9c1 	bl	8028f50 <siscanf>
    index = (index<=CMD_SEND_COUNT) ? index : 0;
 8012bce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012bd2:	2b02      	cmp	r3, #2
 8012bd4:	dc02      	bgt.n	8012bdc <SerialUt_GetFunctionIndex+0x38>
 8012bd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012bda:	e000      	b.n	8012bde <SerialUt_GetFunctionIndex+0x3a>
 8012bdc:	2300      	movs	r3, #0
 8012bde:	81fb      	strh	r3, [r7, #14]
 8012be0:	e038      	b.n	8012c54 <SerialUt_GetFunctionIndex+0xb0>

}
  else if (!strncmp(text, "SET-",4))
 8012be2:	2204      	movs	r2, #4
 8012be4:	4921      	ldr	r1, [pc, #132]	@ (8012c6c <SerialUt_GetFunctionIndex+0xc8>)
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f016 fae8 	bl	80291bc <strncmp>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d114      	bne.n	8012c1c <SerialUt_GetFunctionIndex+0x78>
{
    sscanf(text, "SET-%hd", &index);
 8012bf2:	f107 030e 	add.w	r3, r7, #14
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	491d      	ldr	r1, [pc, #116]	@ (8012c70 <SerialUt_GetFunctionIndex+0xcc>)
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f016 f9a8 	bl	8028f50 <siscanf>
    index = (index<=CMD_SET_COUNT)? index + CMD_SEND_COUNT : 0;
 8012c00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012c04:	2b13      	cmp	r3, #19
 8012c06:	dc06      	bgt.n	8012c16 <SerialUt_GetFunctionIndex+0x72>
 8012c08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012c0c:	b29b      	uxth	r3, r3
 8012c0e:	3302      	adds	r3, #2
 8012c10:	b29b      	uxth	r3, r3
 8012c12:	b21b      	sxth	r3, r3
 8012c14:	e000      	b.n	8012c18 <SerialUt_GetFunctionIndex+0x74>
 8012c16:	2300      	movs	r3, #0
 8012c18:	81fb      	strh	r3, [r7, #14]
 8012c1a:	e01b      	b.n	8012c54 <SerialUt_GetFunctionIndex+0xb0>

    }
  else if (!strncmp(text, "PRINT-",6))
 8012c1c:	2206      	movs	r2, #6
 8012c1e:	4915      	ldr	r1, [pc, #84]	@ (8012c74 <SerialUt_GetFunctionIndex+0xd0>)
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f016 facb 	bl	80291bc <strncmp>
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d113      	bne.n	8012c54 <SerialUt_GetFunctionIndex+0xb0>
    {
    sscanf(text, "PRINT-%hd", &index);
 8012c2c:	f107 030e 	add.w	r3, r7, #14
 8012c30:	461a      	mov	r2, r3
 8012c32:	4911      	ldr	r1, [pc, #68]	@ (8012c78 <SerialUt_GetFunctionIndex+0xd4>)
 8012c34:	6878      	ldr	r0, [r7, #4]
 8012c36:	f016 f98b 	bl	8028f50 <siscanf>
    index = (index<=CMD_PRINT_COUNT)?
 8012c3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012c3e:	2b01      	cmp	r3, #1
 8012c40:	dc06      	bgt.n	8012c50 <SerialUt_GetFunctionIndex+0xac>
      index + CMD_SET_COUNT + CMD_SEND_COUNT : 0;
 8012c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012c46:	b29b      	uxth	r3, r3
 8012c48:	3315      	adds	r3, #21
 8012c4a:	b29b      	uxth	r3, r3
    index = (index<=CMD_PRINT_COUNT)?
 8012c4c:	b21b      	sxth	r3, r3
 8012c4e:	e000      	b.n	8012c52 <SerialUt_GetFunctionIndex+0xae>
 8012c50:	2300      	movs	r3, #0
 8012c52:	81fb      	strh	r3, [r7, #14]
    }
        return index;
 8012c54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012c58:	b29b      	uxth	r3, r3
    }
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3710      	adds	r7, #16
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	0802ee8c 	.word	0x0802ee8c
 8012c68:	0802ee94 	.word	0x0802ee94
 8012c6c:	0802eea0 	.word	0x0802eea0
 8012c70:	0802eea8 	.word	0x0802eea8
 8012c74:	0802eeb0 	.word	0x0802eeb0
 8012c78:	0802eeb8 	.word	0x0802eeb8

08012c7c <SerialUt_doubleHexToHex>:
* @param  outputArray: Pointer to output hex array 
* @param  length: length of the input hex array
* @retval void
*/
static void SerialUt_doubleHexToHex(MOBLEUINT8* hexArray,MOBLEUINT8* outputArray, MOBLEUINT8 length)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b086      	sub	sp, #24
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	60f8      	str	r0, [r7, #12]
 8012c84:	60b9      	str	r1, [r7, #8]
 8012c86:	4613      	mov	r3, r2
 8012c88:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT8 counter =0,position = 0;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	75fb      	strb	r3, [r7, #23]
 8012c8e:	2300      	movs	r3, #0
 8012c90:	75bb      	strb	r3, [r7, #22]
  MOBLEUINT8 msb,lsb;;
  while (counter <length)
 8012c92:	e032      	b.n	8012cfa <SerialUt_doubleHexToHex+0x7e>
    {
    msb = Serial_CharToHexConvert(hexArray[counter]);
 8012c94:	7dfb      	ldrb	r3, [r7, #23]
 8012c96:	68fa      	ldr	r2, [r7, #12]
 8012c98:	4413      	add	r3, r2
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f7ff fb19 	bl	80122d4 <Serial_CharToHexConvert>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	757b      	strb	r3, [r7, #21]
    lsb = Serial_CharToHexConvert(hexArray[counter + 1 ]);
 8012ca6:	7dfb      	ldrb	r3, [r7, #23]
 8012ca8:	3301      	adds	r3, #1
 8012caa:	68fa      	ldr	r2, [r7, #12]
 8012cac:	4413      	add	r3, r2
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7ff fb0f 	bl	80122d4 <Serial_CharToHexConvert>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	753b      	strb	r3, [r7, #20]
    outputArray[position] = msb<<4;
 8012cba:	7dbb      	ldrb	r3, [r7, #22]
 8012cbc:	68ba      	ldr	r2, [r7, #8]
 8012cbe:	4413      	add	r3, r2
 8012cc0:	7d7a      	ldrb	r2, [r7, #21]
 8012cc2:	0112      	lsls	r2, r2, #4
 8012cc4:	b2d2      	uxtb	r2, r2
 8012cc6:	701a      	strb	r2, [r3, #0]
    outputArray[position] |= lsb;
 8012cc8:	7dbb      	ldrb	r3, [r7, #22]
 8012cca:	68ba      	ldr	r2, [r7, #8]
 8012ccc:	4413      	add	r3, r2
 8012cce:	7819      	ldrb	r1, [r3, #0]
 8012cd0:	7dbb      	ldrb	r3, [r7, #22]
 8012cd2:	68ba      	ldr	r2, [r7, #8]
 8012cd4:	4413      	add	r3, r2
 8012cd6:	7d3a      	ldrb	r2, [r7, #20]
 8012cd8:	430a      	orrs	r2, r1
 8012cda:	b2d2      	uxtb	r2, r2
 8012cdc:	701a      	strb	r2, [r3, #0]
    printf("data scanned is  %02hx \n\r",outputArray[position]);
 8012cde:	7dbb      	ldrb	r3, [r7, #22]
 8012ce0:	68ba      	ldr	r2, [r7, #8]
 8012ce2:	4413      	add	r3, r2
 8012ce4:	781b      	ldrb	r3, [r3, #0]
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	4808      	ldr	r0, [pc, #32]	@ (8012d0c <SerialUt_doubleHexToHex+0x90>)
 8012cea:	f016 f8c1 	bl	8028e70 <iprintf>
    counter+=2;
 8012cee:	7dfb      	ldrb	r3, [r7, #23]
 8012cf0:	3302      	adds	r3, #2
 8012cf2:	75fb      	strb	r3, [r7, #23]
    position++;
 8012cf4:	7dbb      	ldrb	r3, [r7, #22]
 8012cf6:	3301      	adds	r3, #1
 8012cf8:	75bb      	strb	r3, [r7, #22]
  while (counter <length)
 8012cfa:	7dfa      	ldrb	r2, [r7, #23]
 8012cfc:	79fb      	ldrb	r3, [r7, #7]
 8012cfe:	429a      	cmp	r2, r3
 8012d00:	d3c8      	bcc.n	8012c94 <SerialUt_doubleHexToHex+0x18>
    }
}
 8012d02:	bf00      	nop
 8012d04:	bf00      	nop
 8012d06:	3718      	adds	r7, #24
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}
 8012d0c:	0802eec4 	.word	0x0802eec4

08012d10 <AppliCheck_EnabledModelsList>:
* @brief AppliCheck_EnabledModelsList: This function checks whether the Enabled  
*                             Models in the defined range or exceeding the limit
* retval MOBLE_RESULT
*/
MOBLE_RESULT AppliCheck_EnabledModelsList(void)
{ 
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af00      	add	r7, sp, #0
   MOBLE_RESULT result = MOBLE_RESULT_FAIL;
 8012d16:	2302      	movs	r3, #2
 8012d18:	71fb      	strb	r3, [r7, #7]
/* Initialization of the  SIG Models list */
   result = ApplicationInitSigModelList();
 8012d1a:	f000 f837 	bl	8012d8c <ApplicationInitSigModelList>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	71fb      	strb	r3, [r7, #7]
  {
    if(result == MOBLE_RESULT_FALSE)
 8012d22:	79fb      	ldrb	r3, [r7, #7]
 8012d24:	2b01      	cmp	r3, #1
 8012d26:	d106      	bne.n	8012d36 <AppliCheck_EnabledModelsList+0x26>
    {
      TRACE_I(TF_INIT,"The number of Models enabled in Application exceed the Library limit");
 8012d28:	4815      	ldr	r0, [pc, #84]	@ (8012d80 <AppliCheck_EnabledModelsList+0x70>)
 8012d2a:	f016 f8a1 	bl	8028e70 <iprintf>
      result = MOBLE_RESULT_FAIL;
 8012d2e:	2302      	movs	r3, #2
 8012d30:	71fb      	strb	r3, [r7, #7]
          return result;
 8012d32:	79fb      	ldrb	r3, [r7, #7]
 8012d34:	e020      	b.n	8012d78 <AppliCheck_EnabledModelsList+0x68>
    }

    else if(result == MOBLE_RESULT_FAIL)
 8012d36:	79fb      	ldrb	r3, [r7, #7]
 8012d38:	2b02      	cmp	r3, #2
 8012d3a:	d105      	bne.n	8012d48 <AppliCheck_EnabledModelsList+0x38>
  {
    TRACE_I(TF_INIT,"The number of Models enabled exceed the limit of %d !\r\n",
 8012d3c:	2106      	movs	r1, #6
 8012d3e:	4811      	ldr	r0, [pc, #68]	@ (8012d84 <AppliCheck_EnabledModelsList+0x74>)
 8012d40:	f016 f896 	bl	8028e70 <iprintf>
              USER_SIG_MODELS_MAX_COUNT);
          return result;
 8012d44:	79fb      	ldrb	r3, [r7, #7]
 8012d46:	e017      	b.n	8012d78 <AppliCheck_EnabledModelsList+0x68>
    }
    
  }
  
    /* Initialization of the  VENDOR Models list, if any */
  result = ApplicationInitVendorModelList();
 8012d48:	f000 f968 	bl	801301c <ApplicationInitVendorModelList>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	71fb      	strb	r3, [r7, #7]
  {
    
    if(result == MOBLE_RESULT_FALSE)
 8012d50:	79fb      	ldrb	r3, [r7, #7]
 8012d52:	2b01      	cmp	r3, #1
 8012d54:	d106      	bne.n	8012d64 <AppliCheck_EnabledModelsList+0x54>
    {
      TRACE_I(TF_INIT,"The number of Models enabled in Application exceed the Library limit");
 8012d56:	480a      	ldr	r0, [pc, #40]	@ (8012d80 <AppliCheck_EnabledModelsList+0x70>)
 8012d58:	f016 f88a 	bl	8028e70 <iprintf>
      result = MOBLE_RESULT_FAIL;
 8012d5c:	2302      	movs	r3, #2
 8012d5e:	71fb      	strb	r3, [r7, #7]
          return result;
 8012d60:	79fb      	ldrb	r3, [r7, #7]
 8012d62:	e009      	b.n	8012d78 <AppliCheck_EnabledModelsList+0x68>
    }

    else if(result == MOBLE_RESULT_FAIL)
 8012d64:	79fb      	ldrb	r3, [r7, #7]
 8012d66:	2b02      	cmp	r3, #2
 8012d68:	d105      	bne.n	8012d76 <AppliCheck_EnabledModelsList+0x66>
  {
    TRACE_I(TF_INIT,"The number of Vendor Models enabled exceed the limit of %d !\r\n",
 8012d6a:	2101      	movs	r1, #1
 8012d6c:	4806      	ldr	r0, [pc, #24]	@ (8012d88 <AppliCheck_EnabledModelsList+0x78>)
 8012d6e:	f016 f87f 	bl	8028e70 <iprintf>
            USER_VENDOR_MODELS_MAX_COUNT); 
        return result;
 8012d72:	79fb      	ldrb	r3, [r7, #7]
 8012d74:	e000      	b.n	8012d78 <AppliCheck_EnabledModelsList+0x68>
    }
    
  }
  
  return result;
 8012d76:	79fb      	ldrb	r3, [r7, #7]
}
 8012d78:	4618      	mov	r0, r3
 8012d7a:	3708      	adds	r7, #8
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}
 8012d80:	0802ef28 	.word	0x0802ef28
 8012d84:	0802ef70 	.word	0x0802ef70
 8012d88:	0802efa8 	.word	0x0802efa8

08012d8c <ApplicationInitSigModelList>:
* @brief ApplicationInitSigModelList: This function initialize the list of the 
*                                     SIG Models.
* retval MOBLE_RESULT
*/
MOBLE_RESULT ApplicationInitSigModelList(void)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b082      	sub	sp, #8
 8012d90:	af00      	add	r7, sp, #0
  /*If Models enabled by user are exceeding the library capability*/
  if(APPLICATION_SIG_MODELS_MAX_COUNT > BLEMesh_GetTotalModelsCount() - 
 8012d92:	f009 fea7 	bl	801cae4 <BLEMesh_GetTotalModelsCount>
 8012d96:	4603      	mov	r3, r0
 8012d98:	2b06      	cmp	r3, #6
 8012d9a:	d80a      	bhi.n	8012db2 <ApplicationInitSigModelList+0x26>
                                            APPLICATION_VENDOR_MODELS_MAX_COUNT)
  {
    TRACE_I(TF_INIT,"APPLICATION_SIG_MODELS_MAX_COUNT %d > BLEMesh_GetTotalModelsCount() %d - APPLICATION_VENDOR_MODELS_MAX_COUNT %d",
 8012d9c:	f009 fea2 	bl	801cae4 <BLEMesh_GetTotalModelsCount>
 8012da0:	4603      	mov	r3, r0
 8012da2:	461a      	mov	r2, r3
 8012da4:	2302      	movs	r3, #2
 8012da6:	2107      	movs	r1, #7
 8012da8:	489a      	ldr	r0, [pc, #616]	@ (8013014 <ApplicationInitSigModelList+0x288>)
 8012daa:	f016 f861 	bl	8028e70 <iprintf>
            APPLICATION_SIG_MODELS_MAX_COUNT,
            BLEMesh_GetTotalModelsCount(),
            APPLICATION_VENDOR_MODELS_MAX_COUNT);
    return(MOBLE_RESULT_FALSE);
 8012dae:	2301      	movs	r3, #1
 8012db0:	e12b      	b.n	801300a <ApplicationInitSigModelList+0x27e>
  }
  
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 8012db2:	2300      	movs	r3, #0
 8012db4:	71fb      	strb	r3, [r7, #7]
 8012db6:	e123      	b.n	8013000 <ApplicationInitSigModelList+0x274>
  {
    uint8_t modelIndex = 0;
 8012db8:	2300      	movs	r3, #0
 8012dba:	71bb      	strb	r3, [r7, #6]
    Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8012dbc:	79fa      	ldrb	r2, [r7, #7]
 8012dbe:	79b9      	ldrb	r1, [r7, #6]
 8012dc0:	4895      	ldr	r0, [pc, #596]	@ (8013018 <ApplicationInitSigModelList+0x28c>)
 8012dc2:	4613      	mov	r3, r2
 8012dc4:	00db      	lsls	r3, r3, #3
 8012dc6:	1a9b      	subs	r3, r3, r2
 8012dc8:	440b      	add	r3, r1
 8012dca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012dce:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    }
#endif
    
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF
    
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 8012dd2:	79bb      	ldrb	r3, [r7, #6]
 8012dd4:	2b06      	cmp	r3, #6
 8012dd6:	d901      	bls.n	8012ddc <ApplicationInitSigModelList+0x50>
    {
      return(MOBLE_RESULT_FAIL);
 8012dd8:	2302      	movs	r3, #2
 8012dda:	e116      	b.n	801300a <ApplicationInitSigModelList+0x27e>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_ONOFF & (1 << index)) == (1 << index)))
 8012ddc:	79fb      	ldrb	r3, [r7, #7]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	bf0c      	ite	eq
 8012de2:	2301      	moveq	r3, #1
 8012de4:	2300      	movne	r3, #0
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	4619      	mov	r1, r3
 8012dea:	79fb      	ldrb	r3, [r7, #7]
 8012dec:	2201      	movs	r2, #1
 8012dee:	fa02 f303 	lsl.w	r3, r2, r3
 8012df2:	4299      	cmp	r1, r3
 8012df4:	d11b      	bne.n	8012e2e <ApplicationInitSigModelList+0xa2>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_ONOFF_SERVER_MODEL_ID;
 8012df6:	79fa      	ldrb	r2, [r7, #7]
 8012df8:	79bb      	ldrb	r3, [r7, #6]
 8012dfa:	1c59      	adds	r1, r3, #1
 8012dfc:	71b9      	strb	r1, [r7, #6]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	4985      	ldr	r1, [pc, #532]	@ (8013018 <ApplicationInitSigModelList+0x28c>)
 8012e02:	4613      	mov	r3, r2
 8012e04:	00db      	lsls	r3, r3, #3
 8012e06:	1a9b      	subs	r3, r3, r2
 8012e08:	4403      	add	r3, r0
 8012e0a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8012e0e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 8012e12:	79bb      	ldrb	r3, [r7, #6]
 8012e14:	2b06      	cmp	r3, #6
 8012e16:	d80a      	bhi.n	8012e2e <ApplicationInitSigModelList+0xa2>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8012e18:	79fa      	ldrb	r2, [r7, #7]
 8012e1a:	79b9      	ldrb	r1, [r7, #6]
 8012e1c:	487e      	ldr	r0, [pc, #504]	@ (8013018 <ApplicationInitSigModelList+0x28c>)
 8012e1e:	4613      	mov	r3, r2
 8012e20:	00db      	lsls	r3, r3, #3
 8012e22:	1a9b      	subs	r3, r3, r2
 8012e24:	440b      	add	r3, r1
 8012e26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012e2a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      }
    }
#endif
    
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 8012e2e:	79bb      	ldrb	r3, [r7, #6]
 8012e30:	2b06      	cmp	r3, #6
 8012e32:	d901      	bls.n	8012e38 <ApplicationInitSigModelList+0xac>
    {
      return(MOBLE_RESULT_FAIL);
 8012e34:	2302      	movs	r3, #2
 8012e36:	e0e8      	b.n	801300a <ApplicationInitSigModelList+0x27e>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_LEVEL & (1 << index)) == (1 << index)))
 8012e38:	79fb      	ldrb	r3, [r7, #7]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	bf0c      	ite	eq
 8012e3e:	2301      	moveq	r3, #1
 8012e40:	2300      	movne	r3, #0
 8012e42:	b2db      	uxtb	r3, r3
 8012e44:	4619      	mov	r1, r3
 8012e46:	79fb      	ldrb	r3, [r7, #7]
 8012e48:	2201      	movs	r2, #1
 8012e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8012e4e:	4299      	cmp	r1, r3
 8012e50:	d11b      	bne.n	8012e8a <ApplicationInitSigModelList+0xfe>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_LEVEL_SERVER_MODEL_ID;
 8012e52:	79fa      	ldrb	r2, [r7, #7]
 8012e54:	79bb      	ldrb	r3, [r7, #6]
 8012e56:	1c59      	adds	r1, r3, #1
 8012e58:	71b9      	strb	r1, [r7, #6]
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	496e      	ldr	r1, [pc, #440]	@ (8013018 <ApplicationInitSigModelList+0x28c>)
 8012e5e:	4613      	mov	r3, r2
 8012e60:	00db      	lsls	r3, r3, #3
 8012e62:	1a9b      	subs	r3, r3, r2
 8012e64:	4403      	add	r3, r0
 8012e66:	f241 0202 	movw	r2, #4098	@ 0x1002
 8012e6a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 8012e6e:	79bb      	ldrb	r3, [r7, #6]
 8012e70:	2b06      	cmp	r3, #6
 8012e72:	d80a      	bhi.n	8012e8a <ApplicationInitSigModelList+0xfe>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8012e74:	79fa      	ldrb	r2, [r7, #7]
 8012e76:	79b9      	ldrb	r1, [r7, #6]
 8012e78:	4867      	ldr	r0, [pc, #412]	@ (8013018 <ApplicationInitSigModelList+0x28c>)
 8012e7a:	4613      	mov	r3, r2
 8012e7c:	00db      	lsls	r3, r3, #3
 8012e7e:	1a9b      	subs	r3, r3, r2
 8012e80:	440b      	add	r3, r1
 8012e82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012e86:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    }
    
#endif
#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF
    
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 8012e8a:	79bb      	ldrb	r3, [r7, #6]
 8012e8c:	2b06      	cmp	r3, #6
 8012e8e:	d901      	bls.n	8012e94 <ApplicationInitSigModelList+0x108>
    {
      return(MOBLE_RESULT_FAIL);
 8012e90:	2302      	movs	r3, #2
 8012e92:	e0ba      	b.n	801300a <ApplicationInitSigModelList+0x27e>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF & (1 << index)) == (1 << index)))
 8012e94:	79fb      	ldrb	r3, [r7, #7]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	bf0c      	ite	eq
 8012e9a:	2301      	moveq	r3, #1
 8012e9c:	2300      	movne	r3, #0
 8012e9e:	b2db      	uxtb	r3, r3
 8012ea0:	4619      	mov	r1, r3
 8012ea2:	79fb      	ldrb	r3, [r7, #7]
 8012ea4:	2201      	movs	r2, #1
 8012ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8012eaa:	4299      	cmp	r1, r3
 8012eac:	d11b      	bne.n	8012ee6 <ApplicationInitSigModelList+0x15a>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_POWER_ONOFF_SERVER_MODEL_ID;
 8012eae:	79fa      	ldrb	r2, [r7, #7]
 8012eb0:	79bb      	ldrb	r3, [r7, #6]
 8012eb2:	1c59      	adds	r1, r3, #1
 8012eb4:	71b9      	strb	r1, [r7, #6]
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	4957      	ldr	r1, [pc, #348]	@ (8013018 <ApplicationInitSigModelList+0x28c>)
 8012eba:	4613      	mov	r3, r2
 8012ebc:	00db      	lsls	r3, r3, #3
 8012ebe:	1a9b      	subs	r3, r3, r2
 8012ec0:	4403      	add	r3, r0
 8012ec2:	f241 0206 	movw	r2, #4102	@ 0x1006
 8012ec6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 8012eca:	79bb      	ldrb	r3, [r7, #6]
 8012ecc:	2b06      	cmp	r3, #6
 8012ece:	d80a      	bhi.n	8012ee6 <ApplicationInitSigModelList+0x15a>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8012ed0:	79fa      	ldrb	r2, [r7, #7]
 8012ed2:	79b9      	ldrb	r1, [r7, #6]
 8012ed4:	4850      	ldr	r0, [pc, #320]	@ (8013018 <ApplicationInitSigModelList+0x28c>)
 8012ed6:	4613      	mov	r3, r2
 8012ed8:	00db      	lsls	r3, r3, #3
 8012eda:	1a9b      	subs	r3, r3, r2
 8012edc:	440b      	add	r3, r1
 8012ede:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012ee2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      }
    }
#endif
    
#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 8012ee6:	79bb      	ldrb	r3, [r7, #6]
 8012ee8:	2b06      	cmp	r3, #6
 8012eea:	d901      	bls.n	8012ef0 <ApplicationInitSigModelList+0x164>
    {
      return(MOBLE_RESULT_FAIL);
 8012eec:	2302      	movs	r3, #2
 8012eee:	e08c      	b.n	801300a <ApplicationInitSigModelList+0x27e>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP & (1 << index)) == (1 << index)))
 8012ef0:	79fb      	ldrb	r3, [r7, #7]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	bf0c      	ite	eq
 8012ef6:	2301      	moveq	r3, #1
 8012ef8:	2300      	movne	r3, #0
 8012efa:	b2db      	uxtb	r3, r3
 8012efc:	4619      	mov	r1, r3
 8012efe:	79fb      	ldrb	r3, [r7, #7]
 8012f00:	2201      	movs	r2, #1
 8012f02:	fa02 f303 	lsl.w	r3, r2, r3
 8012f06:	4299      	cmp	r1, r3
 8012f08:	d11b      	bne.n	8012f42 <ApplicationInitSigModelList+0x1b6>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_POWER_ONOFF_SETUP_SERVER_MODEL_ID;
 8012f0a:	79fa      	ldrb	r2, [r7, #7]
 8012f0c:	79bb      	ldrb	r3, [r7, #6]
 8012f0e:	1c59      	adds	r1, r3, #1
 8012f10:	71b9      	strb	r1, [r7, #6]
 8012f12:	4618      	mov	r0, r3
 8012f14:	4940      	ldr	r1, [pc, #256]	@ (8013018 <ApplicationInitSigModelList+0x28c>)
 8012f16:	4613      	mov	r3, r2
 8012f18:	00db      	lsls	r3, r3, #3
 8012f1a:	1a9b      	subs	r3, r3, r2
 8012f1c:	4403      	add	r3, r0
 8012f1e:	f241 0207 	movw	r2, #4103	@ 0x1007
 8012f22:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 8012f26:	79bb      	ldrb	r3, [r7, #6]
 8012f28:	2b06      	cmp	r3, #6
 8012f2a:	d80a      	bhi.n	8012f42 <ApplicationInitSigModelList+0x1b6>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8012f2c:	79fa      	ldrb	r2, [r7, #7]
 8012f2e:	79b9      	ldrb	r1, [r7, #6]
 8012f30:	4839      	ldr	r0, [pc, #228]	@ (8013018 <ApplicationInitSigModelList+0x28c>)
 8012f32:	4613      	mov	r3, r2
 8012f34:	00db      	lsls	r3, r3, #3
 8012f36:	1a9b      	subs	r3, r3, r2
 8012f38:	440b      	add	r3, r1
 8012f3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012f3e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    /**************************************************************************/
    /** Following Section places LIGHTING MODEL Enabled SERVER IDs    *********/
    /**************************************************************************/

#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 8012f42:	79bb      	ldrb	r3, [r7, #6]
 8012f44:	2b06      	cmp	r3, #6
 8012f46:	d901      	bls.n	8012f4c <ApplicationInitSigModelList+0x1c0>
    {
      return(MOBLE_RESULT_FAIL);
 8012f48:	2302      	movs	r3, #2
 8012f4a:	e05e      	b.n	801300a <ApplicationInitSigModelList+0x27e>
    }
    
    if(((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << index)) == (1 << index)))
 8012f4c:	79fb      	ldrb	r3, [r7, #7]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	bf0c      	ite	eq
 8012f52:	2301      	moveq	r3, #1
 8012f54:	2300      	movne	r3, #0
 8012f56:	b2db      	uxtb	r3, r3
 8012f58:	4619      	mov	r1, r3
 8012f5a:	79fb      	ldrb	r3, [r7, #7]
 8012f5c:	2201      	movs	r2, #1
 8012f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8012f62:	4299      	cmp	r1, r3
 8012f64:	d11b      	bne.n	8012f9e <ApplicationInitSigModelList+0x212>
    {
      Appli_SIG_Models[index][modelIndex++] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;       
 8012f66:	79fa      	ldrb	r2, [r7, #7]
 8012f68:	79bb      	ldrb	r3, [r7, #6]
 8012f6a:	1c59      	adds	r1, r3, #1
 8012f6c:	71b9      	strb	r1, [r7, #6]
 8012f6e:	4618      	mov	r0, r3
 8012f70:	4929      	ldr	r1, [pc, #164]	@ (8013018 <ApplicationInitSigModelList+0x28c>)
 8012f72:	4613      	mov	r3, r2
 8012f74:	00db      	lsls	r3, r3, #3
 8012f76:	1a9b      	subs	r3, r3, r2
 8012f78:	4403      	add	r3, r0
 8012f7a:	f44f 5298 	mov.w	r2, #4864	@ 0x1300
 8012f7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 8012f82:	79bb      	ldrb	r3, [r7, #6]
 8012f84:	2b06      	cmp	r3, #6
 8012f86:	d80a      	bhi.n	8012f9e <ApplicationInitSigModelList+0x212>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8012f88:	79fa      	ldrb	r2, [r7, #7]
 8012f8a:	79b9      	ldrb	r1, [r7, #6]
 8012f8c:	4822      	ldr	r0, [pc, #136]	@ (8013018 <ApplicationInitSigModelList+0x28c>)
 8012f8e:	4613      	mov	r3, r2
 8012f90:	00db      	lsls	r3, r3, #3
 8012f92:	1a9b      	subs	r3, r3, r2
 8012f94:	440b      	add	r3, r1
 8012f96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012f9a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      }
    }
#endif
    
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 8012f9e:	79bb      	ldrb	r3, [r7, #6]
 8012fa0:	2b06      	cmp	r3, #6
 8012fa2:	d901      	bls.n	8012fa8 <ApplicationInitSigModelList+0x21c>
    {
      return(MOBLE_RESULT_FAIL);
 8012fa4:	2302      	movs	r3, #2
 8012fa6:	e030      	b.n	801300a <ApplicationInitSigModelList+0x27e>
    }
    
    if(((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP & (1 << index)) == (1 << index)))
 8012fa8:	79fb      	ldrb	r3, [r7, #7]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	bf0c      	ite	eq
 8012fae:	2301      	moveq	r3, #1
 8012fb0:	2300      	movne	r3, #0
 8012fb2:	b2db      	uxtb	r3, r3
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	79fb      	ldrb	r3, [r7, #7]
 8012fb8:	2201      	movs	r2, #1
 8012fba:	fa02 f303 	lsl.w	r3, r2, r3
 8012fbe:	4299      	cmp	r1, r3
 8012fc0:	d11b      	bne.n	8012ffa <ApplicationInitSigModelList+0x26e>
    {
      Appli_SIG_Models[index][modelIndex++] = LIGHT_LIGHTNESS_SETUP_SERVER_MODEL_ID;
 8012fc2:	79fa      	ldrb	r2, [r7, #7]
 8012fc4:	79bb      	ldrb	r3, [r7, #6]
 8012fc6:	1c59      	adds	r1, r3, #1
 8012fc8:	71b9      	strb	r1, [r7, #6]
 8012fca:	4618      	mov	r0, r3
 8012fcc:	4912      	ldr	r1, [pc, #72]	@ (8013018 <ApplicationInitSigModelList+0x28c>)
 8012fce:	4613      	mov	r3, r2
 8012fd0:	00db      	lsls	r3, r3, #3
 8012fd2:	1a9b      	subs	r3, r3, r2
 8012fd4:	4403      	add	r3, r0
 8012fd6:	f241 3201 	movw	r2, #4865	@ 0x1301
 8012fda:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 8012fde:	79bb      	ldrb	r3, [r7, #6]
 8012fe0:	2b06      	cmp	r3, #6
 8012fe2:	d80a      	bhi.n	8012ffa <ApplicationInitSigModelList+0x26e>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8012fe4:	79fa      	ldrb	r2, [r7, #7]
 8012fe6:	79b9      	ldrb	r1, [r7, #6]
 8012fe8:	480b      	ldr	r0, [pc, #44]	@ (8013018 <ApplicationInitSigModelList+0x28c>)
 8012fea:	4613      	mov	r3, r2
 8012fec:	00db      	lsls	r3, r3, #3
 8012fee:	1a9b      	subs	r3, r3, r2
 8012ff0:	440b      	add	r3, r1
 8012ff2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012ff6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 8012ffa:	79fb      	ldrb	r3, [r7, #7]
 8012ffc:	3301      	adds	r3, #1
 8012ffe:	71fb      	strb	r3, [r7, #7]
 8013000:	79fb      	ldrb	r3, [r7, #7]
 8013002:	2b00      	cmp	r3, #0
 8013004:	f43f aed8 	beq.w	8012db8 <ApplicationInitSigModelList+0x2c>
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
      }
    }
#endif
  }
  return (MOBLE_RESULT_SUCCESS); 
 8013008:	2300      	movs	r3, #0
}
 801300a:	4618      	mov	r0, r3
 801300c:	3708      	adds	r7, #8
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}
 8013012:	bf00      	nop
 8013014:	0802efe8 	.word	0x0802efe8
 8013018:	20006e4c 	.word	0x20006e4c

0801301c <ApplicationInitVendorModelList>:
* @brief ApplicationInitVendorModelList: This function initialize the list of the 
*                                     VENDOR Models.
* retval MOBLE_RESULT
*/
MOBLE_RESULT ApplicationInitVendorModelList(void)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b082      	sub	sp, #8
 8013020:	af00      	add	r7, sp, #0
#ifdef ENABLE_VENDOR_MODEL_SERVER  
  
  /*If Models enabled by user are exceeding the library capability*/
  if( APPLICATION_VENDOR_MODELS_MAX_COUNT > BLEMesh_GetTotalModelsCount() - 
 8013022:	f009 fd5f 	bl	801cae4 <BLEMesh_GetTotalModelsCount>
 8013026:	4603      	mov	r3, r0
 8013028:	2b06      	cmp	r3, #6
 801302a:	d804      	bhi.n	8013036 <ApplicationInitVendorModelList+0x1a>
                                            APPLICATION_SIG_MODELS_MAX_COUNT)
  {
    TRACE_I(TF_INIT,"The number of Models enabled in Application exceeding the limit of Library");
 801302c:	4823      	ldr	r0, [pc, #140]	@ (80130bc <ApplicationInitVendorModelList+0xa0>)
 801302e:	f015 ff1f 	bl	8028e70 <iprintf>
    return(MOBLE_RESULT_FALSE);
 8013032:	2301      	movs	r3, #1
 8013034:	e03d      	b.n	80130b2 <ApplicationInitVendorModelList+0x96>
  }
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 8013036:	2300      	movs	r3, #0
 8013038:	71fb      	strb	r3, [r7, #7]
 801303a:	e036      	b.n	80130aa <ApplicationInitVendorModelList+0x8e>
  {
    uint8_t modelIndex = 0;
 801303c:	2300      	movs	r3, #0
 801303e:	71bb      	strb	r3, [r7, #6]
    Appli_Vendor_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8013040:	79fa      	ldrb	r2, [r7, #7]
 8013042:	79bb      	ldrb	r3, [r7, #6]
 8013044:	491e      	ldr	r1, [pc, #120]	@ (80130c0 <ApplicationInitVendorModelList+0xa4>)
 8013046:	0052      	lsls	r2, r2, #1
 8013048:	4413      	add	r3, r2
 801304a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801304e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    if((ENABLE_VENDOR_MODEL_SERVER & (1 << index)) == (1 << index)) 
 8013052:	79fb      	ldrb	r3, [r7, #7]
 8013054:	2b00      	cmp	r3, #0
 8013056:	bf0c      	ite	eq
 8013058:	2301      	moveq	r3, #1
 801305a:	2300      	movne	r3, #0
 801305c:	b2db      	uxtb	r3, r3
 801305e:	4619      	mov	r1, r3
 8013060:	79fb      	ldrb	r3, [r7, #7]
 8013062:	2201      	movs	r2, #1
 8013064:	fa02 f303 	lsl.w	r3, r2, r3
 8013068:	4299      	cmp	r1, r3
 801306a:	d116      	bne.n	801309a <ApplicationInitVendorModelList+0x7e>
    {
      Appli_Vendor_Models[index][modelIndex++] = VENDORMODEL_STMICRO_ID1;
 801306c:	79fa      	ldrb	r2, [r7, #7]
 801306e:	79bb      	ldrb	r3, [r7, #6]
 8013070:	1c59      	adds	r1, r3, #1
 8013072:	71b9      	strb	r1, [r7, #6]
 8013074:	4618      	mov	r0, r3
 8013076:	4912      	ldr	r1, [pc, #72]	@ (80130c0 <ApplicationInitVendorModelList+0xa4>)
 8013078:	0053      	lsls	r3, r2, #1
 801307a:	4403      	add	r3, r0
 801307c:	4a11      	ldr	r2, [pc, #68]	@ (80130c4 <ApplicationInitVendorModelList+0xa8>)
 801307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      if(modelIndex < APPLICATION_VENDOR_MODELS_MAX_COUNT)
 8013082:	79bb      	ldrb	r3, [r7, #6]
 8013084:	2b01      	cmp	r3, #1
 8013086:	d808      	bhi.n	801309a <ApplicationInitVendorModelList+0x7e>
      {
        Appli_Vendor_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8013088:	79fa      	ldrb	r2, [r7, #7]
 801308a:	79bb      	ldrb	r3, [r7, #6]
 801308c:	490c      	ldr	r1, [pc, #48]	@ (80130c0 <ApplicationInitVendorModelList+0xa4>)
 801308e:	0052      	lsls	r2, r2, #1
 8013090:	4413      	add	r3, r2
 8013092:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    
    if(modelIndex >= APPLICATION_VENDOR_MODELS_MAX_COUNT)
 801309a:	79bb      	ldrb	r3, [r7, #6]
 801309c:	2b01      	cmp	r3, #1
 801309e:	d901      	bls.n	80130a4 <ApplicationInitVendorModelList+0x88>
    {
      return(MOBLE_RESULT_FAIL);
 80130a0:	2302      	movs	r3, #2
 80130a2:	e006      	b.n	80130b2 <ApplicationInitVendorModelList+0x96>
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 80130a4:	79fb      	ldrb	r3, [r7, #7]
 80130a6:	3301      	adds	r3, #1
 80130a8:	71fb      	strb	r3, [r7, #7]
 80130aa:	79fb      	ldrb	r3, [r7, #7]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d0c5      	beq.n	801303c <ApplicationInitVendorModelList+0x20>
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
  {
    Appli_Vendor_Models[index][0] = NO_MODEL_AVLBL;
  }
#endif
  return (MOBLE_RESULT_SUCCESS); 
 80130b0:	2300      	movs	r3, #0
}
 80130b2:	4618      	mov	r0, r3
 80130b4:	3708      	adds	r7, #8
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}
 80130ba:	bf00      	nop
 80130bc:	0802f058 	.word	0x0802f058
 80130c0:	20006e5c 	.word	0x20006e5c
 80130c4:	00010030 	.word	0x00010030

080130c8 <ApplicationGetSigModelList>:
* @param pModels_sig_ID: Pointer of the array to be filled with SIG Models list
* @param elementIndex: Index of the element for Model List
* retval Count of the SIG Model Servers enabled in the Application
*/
MOBLEUINT8 ApplicationGetSigModelList(MOBLEUINT16* pModels_sig_ID, MOBLEUINT8 elementIndex)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b084      	sub	sp, #16
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
 80130d0:	460b      	mov	r3, r1
 80130d2:	70fb      	strb	r3, [r7, #3]
  uint8_t modelCount = 0;
 80130d4:	2300      	movs	r3, #0
 80130d6:	73fb      	strb	r3, [r7, #15]
  
  while((modelCount < APPLICATION_SIG_MODELS_MAX_COUNT) && 
 80130d8:	e002      	b.n	80130e0 <ApplicationGetSigModelList+0x18>
        (Appli_SIG_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
  {
    modelCount++;
 80130da:	7bfb      	ldrb	r3, [r7, #15]
 80130dc:	3301      	adds	r3, #1
 80130de:	73fb      	strb	r3, [r7, #15]
  while((modelCount < APPLICATION_SIG_MODELS_MAX_COUNT) && 
 80130e0:	7bfb      	ldrb	r3, [r7, #15]
 80130e2:	2b06      	cmp	r3, #6
 80130e4:	d80c      	bhi.n	8013100 <ApplicationGetSigModelList+0x38>
        (Appli_SIG_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
 80130e6:	78fa      	ldrb	r2, [r7, #3]
 80130e8:	7bf9      	ldrb	r1, [r7, #15]
 80130ea:	480f      	ldr	r0, [pc, #60]	@ (8013128 <ApplicationGetSigModelList+0x60>)
 80130ec:	4613      	mov	r3, r2
 80130ee:	00db      	lsls	r3, r3, #3
 80130f0:	1a9b      	subs	r3, r3, r2
 80130f2:	440b      	add	r3, r1
 80130f4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  while((modelCount < APPLICATION_SIG_MODELS_MAX_COUNT) && 
 80130f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80130fc:	4293      	cmp	r3, r2
 80130fe:	d1ec      	bne.n	80130da <ApplicationGetSigModelList+0x12>
  } 
  memcpy(pModels_sig_ID, 
         Appli_SIG_Models + elementIndex, 
 8013100:	78fa      	ldrb	r2, [r7, #3]
 8013102:	4613      	mov	r3, r2
 8013104:	00db      	lsls	r3, r3, #3
 8013106:	1a9b      	subs	r3, r3, r2
 8013108:	005b      	lsls	r3, r3, #1
 801310a:	461a      	mov	r2, r3
  memcpy(pModels_sig_ID, 
 801310c:	4b06      	ldr	r3, [pc, #24]	@ (8013128 <ApplicationGetSigModelList+0x60>)
 801310e:	18d1      	adds	r1, r2, r3
         modelCount * 2);
 8013110:	7bfb      	ldrb	r3, [r7, #15]
 8013112:	005b      	lsls	r3, r3, #1
  memcpy(pModels_sig_ID, 
 8013114:	461a      	mov	r2, r3
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f016 f8d9 	bl	80292ce <memcpy>
  
  return modelCount; 
 801311c:	7bfb      	ldrb	r3, [r7, #15]
}
 801311e:	4618      	mov	r0, r3
 8013120:	3710      	adds	r7, #16
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
 8013126:	bf00      	nop
 8013128:	20006e4c 	.word	0x20006e4c

0801312c <ApplicationGetVendorModelList>:
* @param elementIndex: Index of the element for Model List
* retval Count of the Vendor Model Servers enabled in the Application
*/

MOBLEUINT8 ApplicationGetVendorModelList(MOBLEUINT32* pModels_vendor_ID, MOBLEUINT8 elementIndex)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b084      	sub	sp, #16
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
 8013134:	460b      	mov	r3, r1
 8013136:	70fb      	strb	r3, [r7, #3]
    {
      /*do nothing*/
    }
  }
#else
  uint8_t modelCount = 0;
 8013138:	2300      	movs	r3, #0
 801313a:	73fb      	strb	r3, [r7, #15]
  
#ifdef ENABLE_VENDOR_MODEL_SERVER 
  /* Since the SIG Models are 2 bytes, copy 2*size for memcpy */
  while((modelCount < APPLICATION_VENDOR_MODELS_MAX_COUNT) &&
 801313c:	e002      	b.n	8013144 <ApplicationGetVendorModelList+0x18>
        (Appli_Vendor_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
  {
    modelCount++;
 801313e:	7bfb      	ldrb	r3, [r7, #15]
 8013140:	3301      	adds	r3, #1
 8013142:	73fb      	strb	r3, [r7, #15]
  while((modelCount < APPLICATION_VENDOR_MODELS_MAX_COUNT) &&
 8013144:	7bfb      	ldrb	r3, [r7, #15]
 8013146:	2b01      	cmp	r3, #1
 8013148:	d80a      	bhi.n	8013160 <ApplicationGetVendorModelList+0x34>
        (Appli_Vendor_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
 801314a:	78fa      	ldrb	r2, [r7, #3]
 801314c:	7bfb      	ldrb	r3, [r7, #15]
 801314e:	490c      	ldr	r1, [pc, #48]	@ (8013180 <ApplicationGetVendorModelList+0x54>)
 8013150:	0052      	lsls	r2, r2, #1
 8013152:	4413      	add	r3, r2
 8013154:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  while((modelCount < APPLICATION_VENDOR_MODELS_MAX_COUNT) &&
 8013158:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801315c:	4293      	cmp	r3, r2
 801315e:	d1ee      	bne.n	801313e <ApplicationGetVendorModelList+0x12>
  }
  memcpy(pModels_vendor_ID, Appli_Vendor_Models+elementIndex, modelCount*4);
 8013160:	78fb      	ldrb	r3, [r7, #3]
 8013162:	00db      	lsls	r3, r3, #3
 8013164:	4a06      	ldr	r2, [pc, #24]	@ (8013180 <ApplicationGetVendorModelList+0x54>)
 8013166:	1899      	adds	r1, r3, r2
 8013168:	7bfb      	ldrb	r3, [r7, #15]
 801316a:	009b      	lsls	r3, r3, #2
 801316c:	461a      	mov	r2, r3
 801316e:	6878      	ldr	r0, [r7, #4]
 8013170:	f016 f8ad 	bl	80292ce <memcpy>
#endif  
#endif
  return modelCount; 
 8013174:	7bfb      	ldrb	r3, [r7, #15]
}
 8013176:	4618      	mov	r0, r3
 8013178:	3710      	adds	r7, #16
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}
 801317e:	bf00      	nop
 8013180:	20006e5c 	.word	0x20006e5c

08013184 <ApplicationChkSigModelActive>:
* @param modelID: Model Server ID received for the checking function
* @param elementIndex : index of element for which active model checking is needed
* retval Bool: True or False, if the Server ID matches with the list 
*/
MOBLEBOOL ApplicationChkSigModelActive(MOBLEUINT16 modelID, MOBLEUINT8 elementIndex)
{
 8013184:	b480      	push	{r7}
 8013186:	b085      	sub	sp, #20
 8013188:	af00      	add	r7, sp, #0
 801318a:	4603      	mov	r3, r0
 801318c:	460a      	mov	r2, r1
 801318e:	80fb      	strh	r3, [r7, #6]
 8013190:	4613      	mov	r3, r2
 8013192:	717b      	strb	r3, [r7, #5]
  
  MOBLEBOOL result = MOBLE_FALSE;
 8013194:	2300      	movs	r3, #0
 8013196:	73fb      	strb	r3, [r7, #15]
    
  for(uint8_t index = 0; index <= elementIndex; index++)
 8013198:	2300      	movs	r3, #0
 801319a:	73bb      	strb	r3, [r7, #14]
 801319c:	e020      	b.n	80131e0 <ApplicationChkSigModelActive+0x5c>
  {
    if(index == elementIndex)
 801319e:	7bba      	ldrb	r2, [r7, #14]
 80131a0:	797b      	ldrb	r3, [r7, #5]
 80131a2:	429a      	cmp	r2, r3
 80131a4:	d119      	bne.n	80131da <ApplicationChkSigModelActive+0x56>
    {
      for(uint8_t count = 0; count < APPLICATION_SIG_MODELS_MAX_COUNT; count++)
 80131a6:	2300      	movs	r3, #0
 80131a8:	737b      	strb	r3, [r7, #13]
 80131aa:	e012      	b.n	80131d2 <ApplicationChkSigModelActive+0x4e>
      {
        if (modelID == Appli_SIG_Models[index][count])      
 80131ac:	7bba      	ldrb	r2, [r7, #14]
 80131ae:	7b79      	ldrb	r1, [r7, #13]
 80131b0:	4811      	ldr	r0, [pc, #68]	@ (80131f8 <ApplicationChkSigModelActive+0x74>)
 80131b2:	4613      	mov	r3, r2
 80131b4:	00db      	lsls	r3, r3, #3
 80131b6:	1a9b      	subs	r3, r3, r2
 80131b8:	440b      	add	r3, r1
 80131ba:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80131be:	88fa      	ldrh	r2, [r7, #6]
 80131c0:	429a      	cmp	r2, r3
 80131c2:	d103      	bne.n	80131cc <ApplicationChkSigModelActive+0x48>
        {
         result = MOBLE_TRUE;
 80131c4:	2301      	movs	r3, #1
 80131c6:	73fb      	strb	r3, [r7, #15]
           break;
 80131c8:	bf00      	nop
        else
        {
           /*do nothing*/ 
        }
      }
      break;
 80131ca:	e00d      	b.n	80131e8 <ApplicationChkSigModelActive+0x64>
      for(uint8_t count = 0; count < APPLICATION_SIG_MODELS_MAX_COUNT; count++)
 80131cc:	7b7b      	ldrb	r3, [r7, #13]
 80131ce:	3301      	adds	r3, #1
 80131d0:	737b      	strb	r3, [r7, #13]
 80131d2:	7b7b      	ldrb	r3, [r7, #13]
 80131d4:	2b06      	cmp	r3, #6
 80131d6:	d9e9      	bls.n	80131ac <ApplicationChkSigModelActive+0x28>
      break;
 80131d8:	e006      	b.n	80131e8 <ApplicationChkSigModelActive+0x64>
  for(uint8_t index = 0; index <= elementIndex; index++)
 80131da:	7bbb      	ldrb	r3, [r7, #14]
 80131dc:	3301      	adds	r3, #1
 80131de:	73bb      	strb	r3, [r7, #14]
 80131e0:	7bba      	ldrb	r2, [r7, #14]
 80131e2:	797b      	ldrb	r3, [r7, #5]
 80131e4:	429a      	cmp	r2, r3
 80131e6:	d9da      	bls.n	801319e <ApplicationChkSigModelActive+0x1a>
    {
      /*do nothing*/  
    }
  }
  
  return result;
 80131e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	3714      	adds	r7, #20
 80131ee:	46bd      	mov	sp, r7
 80131f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f4:	4770      	bx	lr
 80131f6:	bf00      	nop
 80131f8:	20006e4c 	.word	0x20006e4c

080131fc <ApplicationChkVendorModelActive>:
* @param modelID: Model Server ID received for the checking function
* @param elementIndex : index of element for which active model checking is needed
* retval Bool: True or False, if the Server ID matches with the list 
*/
MOBLEBOOL ApplicationChkVendorModelActive(MOBLEUINT32 modelID, MOBLEUINT8 elementIndex)
{
 80131fc:	b480      	push	{r7}
 80131fe:	b085      	sub	sp, #20
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	460b      	mov	r3, r1
 8013206:	70fb      	strb	r3, [r7, #3]
  MOBLEBOOL result = MOBLE_FALSE;
 8013208:	2300      	movs	r3, #0
 801320a:	73fb      	strb	r3, [r7, #15]
    
  for(uint8_t index = 0; index <= elementIndex; index++)
 801320c:	2300      	movs	r3, #0
 801320e:	73bb      	strb	r3, [r7, #14]
 8013210:	e01e      	b.n	8013250 <ApplicationChkVendorModelActive+0x54>
  {
    if(index == elementIndex)
 8013212:	7bba      	ldrb	r2, [r7, #14]
 8013214:	78fb      	ldrb	r3, [r7, #3]
 8013216:	429a      	cmp	r2, r3
 8013218:	d117      	bne.n	801324a <ApplicationChkVendorModelActive+0x4e>
    {
      for(uint8_t count = 0; count < APPLICATION_VENDOR_MODELS_MAX_COUNT; count++)
 801321a:	2300      	movs	r3, #0
 801321c:	737b      	strb	r3, [r7, #13]
 801321e:	e010      	b.n	8013242 <ApplicationChkVendorModelActive+0x46>
      {
        if (modelID == Appli_Vendor_Models[index][count])      
 8013220:	7bba      	ldrb	r2, [r7, #14]
 8013222:	7b7b      	ldrb	r3, [r7, #13]
 8013224:	4910      	ldr	r1, [pc, #64]	@ (8013268 <ApplicationChkVendorModelActive+0x6c>)
 8013226:	0052      	lsls	r2, r2, #1
 8013228:	4413      	add	r3, r2
 801322a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801322e:	687a      	ldr	r2, [r7, #4]
 8013230:	429a      	cmp	r2, r3
 8013232:	d103      	bne.n	801323c <ApplicationChkVendorModelActive+0x40>
        {
         result = MOBLE_TRUE;
 8013234:	2301      	movs	r3, #1
 8013236:	73fb      	strb	r3, [r7, #15]
         break;
 8013238:	bf00      	nop
        else
        {
           /*do nothing*/ 
        }
      }
      break;
 801323a:	e00d      	b.n	8013258 <ApplicationChkVendorModelActive+0x5c>
      for(uint8_t count = 0; count < APPLICATION_VENDOR_MODELS_MAX_COUNT; count++)
 801323c:	7b7b      	ldrb	r3, [r7, #13]
 801323e:	3301      	adds	r3, #1
 8013240:	737b      	strb	r3, [r7, #13]
 8013242:	7b7b      	ldrb	r3, [r7, #13]
 8013244:	2b01      	cmp	r3, #1
 8013246:	d9eb      	bls.n	8013220 <ApplicationChkVendorModelActive+0x24>
      break;
 8013248:	e006      	b.n	8013258 <ApplicationChkVendorModelActive+0x5c>
  for(uint8_t index = 0; index <= elementIndex; index++)
 801324a:	7bbb      	ldrb	r3, [r7, #14]
 801324c:	3301      	adds	r3, #1
 801324e:	73bb      	strb	r3, [r7, #14]
 8013250:	7bba      	ldrb	r2, [r7, #14]
 8013252:	78fb      	ldrb	r3, [r7, #3]
 8013254:	429a      	cmp	r2, r3
 8013256:	d9dc      	bls.n	8013212 <ApplicationChkVendorModelActive+0x16>
    {
      /*do nothing*/  
    }
  }
  
  return result;  
 8013258:	7bfb      	ldrb	r3, [r7, #15]
    
}
 801325a:	4618      	mov	r0, r3
 801325c:	3714      	adds	r7, #20
 801325e:	46bd      	mov	sp, r7
 8013260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013264:	4770      	bx	lr
 8013266:	bf00      	nop
 8013268:	20006e5c 	.word	0x20006e5c

0801326c <BnrgmFrndLpnProcess>:
}
#endif /* #if (FRIEND_FEATURE == 0) */

#if (LOW_POWER_FEATURE == 0)
MOBLE_RESULT BnrgmFrndLpnProcess(void* param)
{
 801326c:	b480      	push	{r7}
 801326e:	b083      	sub	sp, #12
 8013270:	af00      	add	r7, sp, #0
 8013272:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8013274:	2305      	movs	r3, #5
}
 8013276:	4618      	mov	r0, r3
 8013278:	370c      	adds	r7, #12
 801327a:	46bd      	mov	sp, r7
 801327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013280:	4770      	bx	lr

08013282 <BnrgmFrndLpnProcessFrndOffer>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndOffer(void* param)
{
 8013282:	b480      	push	{r7}
 8013284:	b083      	sub	sp, #12
 8013286:	af00      	add	r7, sp, #0
 8013288:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 801328a:	2305      	movs	r3, #5
}
 801328c:	4618      	mov	r0, r3
 801328e:	370c      	adds	r7, #12
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr

08013298 <BnrgmFrndLpnProcessFrndUpdate>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndUpdate(void* param)
{
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 80132a0:	2305      	movs	r3, #5
}
 80132a2:	4618      	mov	r0, r3
 80132a4:	370c      	adds	r7, #12
 80132a6:	46bd      	mov	sp, r7
 80132a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ac:	4770      	bx	lr

080132ae <BnrgmFrndLpnProcessFrndRfu>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndRfu(void* param)
{
 80132ae:	b480      	push	{r7}
 80132b0:	b083      	sub	sp, #12
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 80132b6:	2305      	movs	r3, #5
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	370c      	adds	r7, #12
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr

080132c4 <BnrgmFrndLpnProcessFrndSubscrListConf>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndSubscrListConf(void* param)
{
 80132c4:	b480      	push	{r7}
 80132c6:	b083      	sub	sp, #12
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 80132cc:	2305      	movs	r3, #5
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	370c      	adds	r7, #12
 80132d2:	46bd      	mov	sp, r7
 80132d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d8:	4770      	bx	lr

080132da <BnrgmFrndLpnSwitchKeys>:

MOBLE_RESULT BnrgmFrndLpnSwitchKeys(void* param)
{
 80132da:	b480      	push	{r7}
 80132dc:	b083      	sub	sp, #12
 80132de:	af00      	add	r7, sp, #0
 80132e0:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 80132e2:	2305      	movs	r3, #5
}
 80132e4:	4618      	mov	r0, r3
 80132e6:	370c      	adds	r7, #12
 80132e8:	46bd      	mov	sp, r7
 80132ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ee:	4770      	bx	lr

080132f0 <BnrgmFrndLpnTranspSegRecvd>:

MOBLE_RESULT BnrgmFrndLpnTranspSegRecvd(void* param)
{
 80132f0:	b480      	push	{r7}
 80132f2:	b083      	sub	sp, #12
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 80132f8:	2305      	movs	r3, #5
}
 80132fa:	4618      	mov	r0, r3
 80132fc:	370c      	adds	r7, #12
 80132fe:	46bd      	mov	sp, r7
 8013300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013304:	4770      	bx	lr

08013306 <BnrgmFrndLpnUpdateKeys>:

MOBLE_RESULT BnrgmFrndLpnUpdateKeys(void* param)
{
 8013306:	b480      	push	{r7}
 8013308:	b083      	sub	sp, #12
 801330a:	af00      	add	r7, sp, #0
 801330c:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 801330e:	2305      	movs	r3, #5
}
 8013310:	4618      	mov	r0, r3
 8013312:	370c      	adds	r7, #12
 8013314:	46bd      	mov	sp, r7
 8013316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331a:	4770      	bx	lr

0801331c <BnrgmFrndMgmtLpnInit>:

MOBLE_RESULT BnrgmFrndMgmtLpnInit(void* param)
{
 801331c:	b480      	push	{r7}
 801331e:	b083      	sub	sp, #12
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8013324:	2305      	movs	r3, #5
}
 8013326:	4618      	mov	r0, r3
 8013328:	370c      	adds	r7, #12
 801332a:	46bd      	mov	sp, r7
 801332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013330:	4770      	bx	lr

08013332 <LightLcServer_GetOpcodeTableCb>:
//__weak void Appli_Sensor_SerialCmd(char *rcvdStringBuff, uint16_t rcvdStringSize){}
         
#ifndef ENABLE_LIGHT_MODEL_SERVER_LC
MOBLE_RESULT LightLcServer_GetOpcodeTableCb(const MODEL_OpcodeTableParam_t **data, 
                                            MOBLEUINT16 *length)
{return MOBLE_RESULT_NOTIMPL;}
 8013332:	b480      	push	{r7}
 8013334:	b083      	sub	sp, #12
 8013336:	af00      	add	r7, sp, #0
 8013338:	6078      	str	r0, [r7, #4]
 801333a:	6039      	str	r1, [r7, #0]
 801333c:	2305      	movs	r3, #5
 801333e:	4618      	mov	r0, r3
 8013340:	370c      	adds	r7, #12
 8013342:	46bd      	mov	sp, r7
 8013344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013348:	4770      	bx	lr

0801334a <Light_LC_LigtnessLinearUnsolicitedChange>:
MOBLE_RESULT Light_LC_SensorPropertyUpdate(MOBLEUINT8 lcsElementIndex,
                                           MOBLEUINT16 sensorPropertyId,
                                           MOBLEUINT32 value)
{return MOBLE_RESULT_NOTIMPL;}
void Light_LC_LigtnessLinearUnsolicitedChange(MOBLEUINT8 elementIndex)
{}
 801334a:	b480      	push	{r7}
 801334c:	b083      	sub	sp, #12
 801334e:	af00      	add	r7, sp, #0
 8013350:	4603      	mov	r3, r0
 8013352:	71fb      	strb	r3, [r7, #7]
 8013354:	bf00      	nop
 8013356:	370c      	adds	r7, #12
 8013358:	46bd      	mov	sp, r7
 801335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335e:	4770      	bx	lr

08013360 <Light_LC_LcOnOffUpdate>:
                                    MOBLEUINT8 onOff,
                                    MOBLEUINT8 optionalParams,
                                    MOBLEUINT32 delayMsOnOffMsg,
                                    MOBLEUINT32 stepResMsOnOffMsg,
                                    MOBLEUINT32 trTimeMsOnOffMsg)
{return MOBLE_RESULT_NOTIMPL;}
 8013360:	b480      	push	{r7}
 8013362:	b083      	sub	sp, #12
 8013364:	af00      	add	r7, sp, #0
 8013366:	603b      	str	r3, [r7, #0]
 8013368:	4603      	mov	r3, r0
 801336a:	71fb      	strb	r3, [r7, #7]
 801336c:	460b      	mov	r3, r1
 801336e:	71bb      	strb	r3, [r7, #6]
 8013370:	4613      	mov	r3, r2
 8013372:	717b      	strb	r3, [r7, #5]
 8013374:	2305      	movs	r3, #5
 8013376:	4618      	mov	r0, r3
 8013378:	370c      	adds	r7, #12
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr
	...

08013384 <Sensor_UpdatePublishParameters>:
  * @param  sensor offset of corresponding sensor whose parameters to be updated
  * @retval Fail if sensor not initialized
  *         else Success
  */
__weak MOBLE_RESULT Sensor_UpdatePublishParameters(MOBLEUINT8 sensorOffset)
{
 8013384:	b590      	push	{r4, r7, lr}
 8013386:	b087      	sub	sp, #28
 8013388:	af00      	add	r7, sp, #0
 801338a:	4603      	mov	r3, r0
 801338c:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT8 fastCadenceStatus = 0;
 801338e:	2300      	movs	r3, #0
 8013390:	75fb      	strb	r3, [r7, #23]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8013392:	2300      	movs	r3, #0
 8013394:	75bb      	strb	r3, [r7, #22]
  MOBLEUINT8 sensorOffsetTemp = sensorOffset;
 8013396:	79fb      	ldrb	r3, [r7, #7]
 8013398:	753b      	strb	r3, [r7, #20]
  sensor_params_t* pParams = SensorServer->pSensorParams + sensorOffsetTemp;
 801339a:	4b62      	ldr	r3, [pc, #392]	@ (8013524 <Sensor_UpdatePublishParameters+0x1a0>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	685a      	ldr	r2, [r3, #4]
 80133a0:	7d3b      	ldrb	r3, [r7, #20]
 80133a2:	2134      	movs	r1, #52	@ 0x34
 80133a4:	fb01 f303 	mul.w	r3, r1, r3
 80133a8:	4413      	add	r3, r2
 80133aa:	613b      	str	r3, [r7, #16]
  MOBLEUINT32 fastCadenceLow;
  MOBLEUINT32 fastCadenceHigh;

  TRACE_M(TF_SENSOR_M, "SENSOR%d\r\n", sensorOffset+1);
  
  if (pParams != NULL)
 80133ac:	693b      	ldr	r3, [r7, #16]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	f000 80b1 	beq.w	8013516 <Sensor_UpdatePublishParameters+0x192>
  {
    if (pParams->cadenceState == 1)
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	f040 80ad 	bne.w	801351a <Sensor_UpdatePublishParameters+0x196>
    {
      if (pParams->modelPublishPeriodMs == 0)
 80133c0:	693b      	ldr	r3, [r7, #16]
 80133c2:	699b      	ldr	r3, [r3, #24]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d03c      	beq.n	8013442 <Sensor_UpdatePublishParameters+0xbe>
      {
        TRACE_M(TF_SENSOR_M, "Publish period set to 0\r\n");
      }
      else
      {
        if (SensorServer->p_cb->Sensor_IsFastCadence_cb != NULL)
 80133c8:	4b56      	ldr	r3, [pc, #344]	@ (8013524 <Sensor_UpdatePublishParameters+0x1a0>)
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d012      	beq.n	80133fa <Sensor_UpdatePublishParameters+0x76>
        {
          fastCadenceLow = pParams->fastCadenceLow;
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	691b      	ldr	r3, [r3, #16]
 80133d8:	60fb      	str	r3, [r7, #12]
          fastCadenceHigh = pParams->fastCadenceHigh;
 80133da:	693b      	ldr	r3, [r7, #16]
 80133dc:	695b      	ldr	r3, [r3, #20]
 80133de:	60bb      	str	r3, [r7, #8]
      
          /* check sensor value for fast cadence */
          fastCadenceStatus = 
            SensorServer->p_cb->Sensor_IsFastCadence_cb(sensorOffset,
 80133e0:	4b50      	ldr	r3, [pc, #320]	@ (8013524 <Sensor_UpdatePublishParameters+0x1a0>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133e8:	f107 0208 	add.w	r2, r7, #8
 80133ec:	f107 010c 	add.w	r1, r7, #12
 80133f0:	79f8      	ldrb	r0, [r7, #7]
 80133f2:	4798      	blx	r3
 80133f4:	4603      	mov	r3, r0
 80133f6:	75fb      	strb	r3, [r7, #23]
 80133f8:	e001      	b.n	80133fe <Sensor_UpdatePublishParameters+0x7a>
                                                        &fastCadenceLow, 
                                                        &fastCadenceHigh);
      }
      else
      {
          fastCadenceStatus = 0;
 80133fa:	2300      	movs	r3, #0
 80133fc:	75fb      	strb	r3, [r7, #23]
      }
      
      /* if fast cadence required, divide publish interval by 2^n, n = fast cadence period divisor */
        if (fastCadenceStatus == 1)
 80133fe:	7dfb      	ldrb	r3, [r7, #23]
 8013400:	2b01      	cmp	r3, #1
 8013402:	d109      	bne.n	8013418 <Sensor_UpdatePublishParameters+0x94>
      {
          pParams->publishPeriodMs = pParams->modelPublishPeriodMs / \
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	699b      	ldr	r3, [r3, #24]
                                     (1<<pParams->fastCadencePeriodDiv);
 8013408:	693a      	ldr	r2, [r7, #16]
 801340a:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
          pParams->publishPeriodMs = pParams->modelPublishPeriodMs / \
 801340e:	fa23 f202 	lsr.w	r2, r3, r2
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	61da      	str	r2, [r3, #28]
 8013416:	e003      	b.n	8013420 <Sensor_UpdatePublishParameters+0x9c>
      }
      else
      {
          pParams->publishPeriodMs = pParams->modelPublishPeriodMs;
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	699a      	ldr	r2, [r3, #24]
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	61da      	str	r2, [r3, #28]
      }
      
      /* if publish period is less than status min interval, adjust to status min value */
      if (pParams->publishPeriodMs < (1 << pParams->statusMinInterval))
 8013420:	693b      	ldr	r3, [r7, #16]
 8013422:	69db      	ldr	r3, [r3, #28]
 8013424:	693a      	ldr	r2, [r7, #16]
 8013426:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 801342a:	40d3      	lsrs	r3, r2
 801342c:	2b00      	cmp	r3, #0
 801342e:	d108      	bne.n	8013442 <Sensor_UpdatePublishParameters+0xbe>
      {
        TRACE_M(TF_SENSOR_M, "publish period %ld less than status minimum interval %d\r\n", pParams->publishPeriodMs, 1 << pParams->statusMinInterval);
        pParams->publishPeriodMs = 1 << pParams->statusMinInterval;
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8013436:	461a      	mov	r2, r3
 8013438:	2301      	movs	r3, #1
 801343a:	4093      	lsls	r3, r2
 801343c:	461a      	mov	r2, r3
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	61da      	str	r2, [r3, #28]
      /* realign timers of all sensors on same element index
         this may result in publishing of sensor status even for sensors whose
         sensor status is not scheduled
         Doing this benefits to publish sensor data of all elements in one message
         by data marshalling */
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 8013442:	2300      	movs	r3, #0
 8013444:	757b      	strb	r3, [r7, #21]
 8013446:	e05d      	b.n	8013504 <Sensor_UpdatePublishParameters+0x180>
      {
        if(((SensorServer->pSensorParams)+count)->elementIdx == pParams->elementIdx &&
 8013448:	4b36      	ldr	r3, [pc, #216]	@ (8013524 <Sensor_UpdatePublishParameters+0x1a0>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	685a      	ldr	r2, [r3, #4]
 801344e:	7d7b      	ldrb	r3, [r7, #21]
 8013450:	2134      	movs	r1, #52	@ 0x34
 8013452:	fb01 f303 	mul.w	r3, r1, r3
 8013456:	4413      	add	r3, r2
 8013458:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801345c:	693b      	ldr	r3, [r7, #16]
 801345e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013462:	429a      	cmp	r2, r3
 8013464:	d14b      	bne.n	80134fe <Sensor_UpdatePublishParameters+0x17a>
             ((SensorServer->pSensorParams)+count)->cadenceState == 1)
 8013466:	4b2f      	ldr	r3, [pc, #188]	@ (8013524 <Sensor_UpdatePublishParameters+0x1a0>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	685a      	ldr	r2, [r3, #4]
 801346c:	7d7b      	ldrb	r3, [r7, #21]
 801346e:	2134      	movs	r1, #52	@ 0x34
 8013470:	fb01 f303 	mul.w	r3, r1, r3
 8013474:	4413      	add	r3, r2
 8013476:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
        if(((SensorServer->pSensorParams)+count)->elementIdx == pParams->elementIdx &&
 801347a:	2b01      	cmp	r3, #1
 801347c:	d13f      	bne.n	80134fe <Sensor_UpdatePublishParameters+0x17a>
        {
          if(((SensorServer->pSensorParams)+count)->modelPublishPeriodMs == 0)
 801347e:	4b29      	ldr	r3, [pc, #164]	@ (8013524 <Sensor_UpdatePublishParameters+0x1a0>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	685a      	ldr	r2, [r3, #4]
 8013484:	7d7b      	ldrb	r3, [r7, #21]
 8013486:	2134      	movs	r1, #52	@ 0x34
 8013488:	fb01 f303 	mul.w	r3, r1, r3
 801348c:	4413      	add	r3, r2
 801348e:	699b      	ldr	r3, [r3, #24]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d10b      	bne.n	80134ac <Sensor_UpdatePublishParameters+0x128>
          {
            ((SensorServer->pSensorParams)+count)->timerStatus = TIMER_STOPPED;
 8013494:	4b23      	ldr	r3, [pc, #140]	@ (8013524 <Sensor_UpdatePublishParameters+0x1a0>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	685a      	ldr	r2, [r3, #4]
 801349a:	7d7b      	ldrb	r3, [r7, #21]
 801349c:	2134      	movs	r1, #52	@ 0x34
 801349e:	fb01 f303 	mul.w	r3, r1, r3
 80134a2:	4413      	add	r3, r2
 80134a4:	2200      	movs	r2, #0
 80134a6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
 80134aa:	e028      	b.n	80134fe <Sensor_UpdatePublishParameters+0x17a>
          }
          else
          {
      /* start timer for now to immediately send status on change parameters
      subsequently status would be sent after every publish period */
            ((SensorServer->pSensorParams)+count)->timerStatus = TIMER_RUNNING;
 80134ac:	4b1d      	ldr	r3, [pc, #116]	@ (8013524 <Sensor_UpdatePublishParameters+0x1a0>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	685a      	ldr	r2, [r3, #4]
 80134b2:	7d7b      	ldrb	r3, [r7, #21]
 80134b4:	2134      	movs	r1, #52	@ 0x34
 80134b6:	fb01 f303 	mul.w	r3, r1, r3
 80134ba:	4413      	add	r3, r2
 80134bc:	2201      	movs	r2, #1
 80134be:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
            ((SensorServer->pSensorParams)+count)->timerBegin = Clock_Time();
 80134c2:	4b18      	ldr	r3, [pc, #96]	@ (8013524 <Sensor_UpdatePublishParameters+0x1a0>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	685a      	ldr	r2, [r3, #4]
 80134c8:	7d7b      	ldrb	r3, [r7, #21]
 80134ca:	2134      	movs	r1, #52	@ 0x34
 80134cc:	fb01 f303 	mul.w	r3, r1, r3
 80134d0:	18d4      	adds	r4, r2, r3
 80134d2:	f7f4 fca3 	bl	8007e1c <HAL_GetTick>
 80134d6:	4603      	mov	r3, r0
 80134d8:	6223      	str	r3, [r4, #32]
            ((SensorServer->pSensorParams)+count)->timerEnd = \
              ((SensorServer->pSensorParams)+count)->timerBegin;            
 80134da:	4b12      	ldr	r3, [pc, #72]	@ (8013524 <Sensor_UpdatePublishParameters+0x1a0>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	685a      	ldr	r2, [r3, #4]
 80134e0:	7d7b      	ldrb	r3, [r7, #21]
 80134e2:	2134      	movs	r1, #52	@ 0x34
 80134e4:	fb01 f303 	mul.w	r3, r1, r3
 80134e8:	441a      	add	r2, r3
            ((SensorServer->pSensorParams)+count)->timerEnd = \
 80134ea:	4b0e      	ldr	r3, [pc, #56]	@ (8013524 <Sensor_UpdatePublishParameters+0x1a0>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	6859      	ldr	r1, [r3, #4]
 80134f0:	7d7b      	ldrb	r3, [r7, #21]
 80134f2:	2034      	movs	r0, #52	@ 0x34
 80134f4:	fb00 f303 	mul.w	r3, r0, r3
 80134f8:	440b      	add	r3, r1
              ((SensorServer->pSensorParams)+count)->timerBegin;            
 80134fa:	6a12      	ldr	r2, [r2, #32]
            ((SensorServer->pSensorParams)+count)->timerEnd = \
 80134fc:	625a      	str	r2, [r3, #36]	@ 0x24
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 80134fe:	7d7b      	ldrb	r3, [r7, #21]
 8013500:	3301      	adds	r3, #1
 8013502:	757b      	strb	r3, [r7, #21]
 8013504:	4b07      	ldr	r3, [pc, #28]	@ (8013524 <Sensor_UpdatePublishParameters+0x1a0>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	7a1b      	ldrb	r3, [r3, #8]
 801350a:	7d7a      	ldrb	r2, [r7, #21]
 801350c:	429a      	cmp	r2, r3
 801350e:	d39b      	bcc.n	8013448 <Sensor_UpdatePublishParameters+0xc4>
        {
          /* */
        }
      }
      
      result = MOBLE_RESULT_SUCCESS;
 8013510:	2300      	movs	r3, #0
 8013512:	75bb      	strb	r3, [r7, #22]
 8013514:	e001      	b.n	801351a <Sensor_UpdatePublishParameters+0x196>
      TRACE_M(TF_SENSOR_M, "Cadence not supported\r\n");
    }
  }
  else
  {
    result = MOBLE_RESULT_FAIL;
 8013516:	2302      	movs	r3, #2
 8013518:	75bb      	strb	r3, [r7, #22]
    TRACE_M(TF_SENSOR_M, "Sensor not initialized\r\n");
  }
  
  return result;
 801351a:	7dbb      	ldrb	r3, [r7, #22]
}
 801351c:	4618      	mov	r0, r3
 801351e:	371c      	adds	r7, #28
 8013520:	46bd      	mov	sp, r7
 8013522:	bd90      	pop	{r4, r7, pc}
 8013524:	20006e64 	.word	0x20006e64

08013528 <Sensor_ModelPublishSet>:
  * @retval Fail if model id is not sensor server
  *         Fail if sensor not initialized
  *         else Success
  */
__weak MOBLE_RESULT Sensor_ModelPublishSet(model_publicationparams_t* pPublishParams)
{
 8013528:	b590      	push	{r4, r7, lr}
 801352a:	b087      	sub	sp, #28
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8013530:	2300      	movs	r3, #0
 8013532:	75fb      	strb	r3, [r7, #23]
  MOBLEUINT8 elementIdx;
  MOBLEUINT32 rcvdPublishPeriod;
  sensor_params_t* pParams = NULL;
 8013534:	2300      	movs	r3, #0
 8013536:	613b      	str	r3, [r7, #16]
  
  if(SensorServer != NULL)
 8013538:	4b29      	ldr	r3, [pc, #164]	@ (80135e0 <Sensor_ModelPublishSet+0xb8>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d049      	beq.n	80135d4 <Sensor_ModelPublishSet+0xac>
  {
    if (pPublishParams != NULL &&
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d044      	beq.n	80135d0 <Sensor_ModelPublishSet+0xa8>
        pPublishParams->modelID == SENSOR_SERVER_MODEL_ID)
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	685b      	ldr	r3, [r3, #4]
    if (pPublishParams != NULL &&
 801354a:	f5b3 5f88 	cmp.w	r3, #4352	@ 0x1100
 801354e:	d13f      	bne.n	80135d0 <Sensor_ModelPublishSet+0xa8>
    {
      /* extract element index */
      elementIdx = pPublishParams->elementAddress - BLEMesh_GetAddress();
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	781c      	ldrb	r4, [r3, #0]
 8013554:	f009 fa92 	bl	801ca7c <BLEMesh_GetAddress>
 8013558:	4603      	mov	r3, r0
 801355a:	b2db      	uxtb	r3, r3
 801355c:	1ae3      	subs	r3, r4, r3
 801355e:	73fb      	strb	r3, [r7, #15]
      rcvdPublishPeriod = pPublishParams->publishPeriod;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	7b9b      	ldrb	r3, [r3, #14]
 8013564:	60bb      	str	r3, [r7, #8]
        
      rcvdPublishPeriod = (rcvdPublishPeriod & 0x3F)*\
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	f003 043f 	and.w	r4, r3, #63	@ 0x3f
                           Get_StepResolutionValue(rcvdPublishPeriod>>6);
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	099b      	lsrs	r3, r3, #6
 8013570:	b2db      	uxtb	r3, r3
 8013572:	4618      	mov	r0, r3
 8013574:	f7f9 ffa6 	bl	800d4c4 <Get_StepResolutionValue>
 8013578:	4603      	mov	r3, r0
      rcvdPublishPeriod = (rcvdPublishPeriod & 0x3F)*\
 801357a:	fb04 f303 	mul.w	r3, r4, r3
 801357e:	60bb      	str	r3, [r7, #8]
    
      TRACE_M(TF_SENSOR_M, "Element index %d publish period %ld ms\r\n",
              elementIdx, rcvdPublishPeriod);

      /* update publish period of all sensors on element given by publish parameters */
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 8013580:	2300      	movs	r3, #0
 8013582:	75bb      	strb	r3, [r7, #22]
 8013584:	e01b      	b.n	80135be <Sensor_ModelPublishSet+0x96>
      {
        pParams = SensorServer->pSensorParams + count;
 8013586:	4b16      	ldr	r3, [pc, #88]	@ (80135e0 <Sensor_ModelPublishSet+0xb8>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	685a      	ldr	r2, [r3, #4]
 801358c:	7dbb      	ldrb	r3, [r7, #22]
 801358e:	2134      	movs	r1, #52	@ 0x34
 8013590:	fb01 f303 	mul.w	r3, r1, r3
 8013594:	4413      	add	r3, r2
 8013596:	613b      	str	r3, [r7, #16]

        if (pParams != NULL)
 8013598:	693b      	ldr	r3, [r7, #16]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d016      	beq.n	80135cc <Sensor_ModelPublishSet+0xa4>
        {
          if (pParams->elementIdx == elementIdx)
 801359e:	693b      	ldr	r3, [r7, #16]
 80135a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80135a4:	7bfa      	ldrb	r2, [r7, #15]
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d106      	bne.n	80135b8 <Sensor_ModelPublishSet+0x90>
          {
            pParams->modelPublishPeriodMs = rcvdPublishPeriod;
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	68ba      	ldr	r2, [r7, #8]
 80135ae:	619a      	str	r2, [r3, #24]
            Sensor_UpdatePublishParameters(count);
 80135b0:	7dbb      	ldrb	r3, [r7, #22]
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7ff fee6 	bl	8013384 <Sensor_UpdatePublishParameters>
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 80135b8:	7dbb      	ldrb	r3, [r7, #22]
 80135ba:	3301      	adds	r3, #1
 80135bc:	75bb      	strb	r3, [r7, #22]
 80135be:	4b08      	ldr	r3, [pc, #32]	@ (80135e0 <Sensor_ModelPublishSet+0xb8>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	7a1b      	ldrb	r3, [r3, #8]
 80135c4:	7dba      	ldrb	r2, [r7, #22]
 80135c6:	429a      	cmp	r2, r3
 80135c8:	d3dd      	bcc.n	8013586 <Sensor_ModelPublishSet+0x5e>
 80135ca:	e003      	b.n	80135d4 <Sensor_ModelPublishSet+0xac>
          }
        }
        else
        {
          TRACE_M(TF_SENSOR_M, "Sensor not initialized\r\n");
          break;
 80135cc:	bf00      	nop
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 80135ce:	e001      	b.n	80135d4 <Sensor_ModelPublishSet+0xac>
      }
    }
    else
    {
      TRACE_M(TF_SENSOR_M, "Not for sensor server model\r\n");
      result = MOBLE_RESULT_FAIL;
 80135d0:	2302      	movs	r3, #2
 80135d2:	75fb      	strb	r3, [r7, #23]
  else
  {
    TRACE_M(TF_SENSOR_M, "Sensor server not initialized\r\n");
  }
  
  return result;
 80135d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80135d6:	4618      	mov	r0, r3
 80135d8:	371c      	adds	r7, #28
 80135da:	46bd      	mov	sp, r7
 80135dc:	bd90      	pop	{r4, r7, pc}
 80135de:	bf00      	nop
 80135e0:	20006e64 	.word	0x20006e64

080135e4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80135e4:	b480      	push	{r7}
 80135e6:	af00      	add	r7, sp, #0
  return;
 80135e8:	bf00      	nop
}
 80135ea:	46bd      	mov	sp, r7
 80135ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f0:	4770      	bx	lr

080135f2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80135f2:	b480      	push	{r7}
 80135f4:	af00      	add	r7, sp, #0
  return;
 80135f6:	bf00      	nop
}
 80135f8:	46bd      	mov	sp, r7
 80135fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fe:	4770      	bx	lr

08013600 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8013600:	b480      	push	{r7}
 8013602:	af00      	add	r7, sp, #0
  return;
 8013604:	bf00      	nop
}
 8013606:	46bd      	mov	sp, r7
 8013608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360c:	4770      	bx	lr

0801360e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 801360e:	b480      	push	{r7}
 8013610:	af00      	add	r7, sp, #0
  return;
 8013612:	bf00      	nop
}
 8013614:	46bd      	mov	sp, r7
 8013616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361a:	4770      	bx	lr

0801361c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 801361c:	b480      	push	{r7}
 801361e:	af00      	add	r7, sp, #0
  return;
 8013620:	bf00      	nop
}
 8013622:	46bd      	mov	sp, r7
 8013624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013628:	4770      	bx	lr

0801362a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 801362a:	b480      	push	{r7}
 801362c:	af00      	add	r7, sp, #0
  return;
 801362e:	bf00      	nop
}
 8013630:	46bd      	mov	sp, r7
 8013632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013636:	4770      	bx	lr

08013638 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8013638:	b480      	push	{r7}
 801363a:	af00      	add	r7, sp, #0
  return;
 801363c:	bf00      	nop
}
 801363e:	46bd      	mov	sp, r7
 8013640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013644:	4770      	bx	lr

08013646 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8013646:	b480      	push	{r7}
 8013648:	af00      	add	r7, sp, #0
  return;
 801364a:	bf00      	nop
}
 801364c:	46bd      	mov	sp, r7
 801364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013652:	4770      	bx	lr

08013654 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8013654:	b480      	push	{r7}
 8013656:	af00      	add	r7, sp, #0
  return;
 8013658:	bf00      	nop
}
 801365a:	46bd      	mov	sp, r7
 801365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013660:	4770      	bx	lr

08013662 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8013662:	b480      	push	{r7}
 8013664:	af00      	add	r7, sp, #0
  return;
 8013666:	bf00      	nop
}
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr

08013670 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8013670:	b480      	push	{r7}
 8013672:	af00      	add	r7, sp, #0
  return;
 8013674:	bf00      	nop
}
 8013676:	46bd      	mov	sp, r7
 8013678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367c:	4770      	bx	lr

0801367e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 801367e:	b480      	push	{r7}
 8013680:	af00      	add	r7, sp, #0
  return;
 8013682:	bf00      	nop
}
 8013684:	46bd      	mov	sp, r7
 8013686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368a:	4770      	bx	lr

0801368c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 801368c:	b480      	push	{r7}
 801368e:	af00      	add	r7, sp, #0
  return;
 8013690:	bf00      	nop
}
 8013692:	46bd      	mov	sp, r7
 8013694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013698:	4770      	bx	lr

0801369a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 801369a:	b480      	push	{r7}
 801369c:	af00      	add	r7, sp, #0
  return;
 801369e:	bf00      	nop
}
 80136a0:	46bd      	mov	sp, r7
 80136a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a6:	4770      	bx	lr

080136a8 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80136a8:	b480      	push	{r7}
 80136aa:	af00      	add	r7, sp, #0
  return;
 80136ac:	bf00      	nop
}
 80136ae:	46bd      	mov	sp, r7
 80136b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b4:	4770      	bx	lr

080136b6 <BVOPUS_STM_Init>:
__WEAK void MESH_Init( void )
{
  return;
}
__WEAK void BVOPUS_STM_Init( void )
{
 80136b6:	b480      	push	{r7}
 80136b8:	af00      	add	r7, sp, #0
  return;
 80136ba:	bf00      	nop
}
 80136bc:	46bd      	mov	sp, r7
 80136be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c2:	4770      	bx	lr

080136c4 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 80136c4:	b480      	push	{r7}
 80136c6:	af00      	add	r7, sp, #0
  return;
 80136c8:	bf00      	nop
}
 80136ca:	46bd      	mov	sp, r7
 80136cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d0:	4770      	bx	lr
	...

080136d4 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80136d8:	4b04      	ldr	r3, [pc, #16]	@ (80136ec <SVCCTL_Init+0x18>)
 80136da:	2200      	movs	r2, #0
 80136dc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80136de:	4b04      	ldr	r3, [pc, #16]	@ (80136f0 <SVCCTL_Init+0x1c>)
 80136e0:	2200      	movs	r2, #0
 80136e2:	751a      	strb	r2, [r3, #20]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80136e4:	f000 f806 	bl	80136f4 <SVCCTL_SvcInit>

  return;
 80136e8:	bf00      	nop
}
 80136ea:	bd80      	pop	{r7, pc}
 80136ec:	20000298 	.word	0x20000298
 80136f0:	200002b8 	.word	0x200002b8

080136f4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	af00      	add	r7, sp, #0
  BAS_Init();
 80136f8:	f7ff ff74 	bl	80135e4 <BAS_Init>

  BLS_Init();
 80136fc:	f7ff ff79 	bl	80135f2 <BLS_Init>

  CRS_STM_Init();
 8013700:	f7ff ff7e 	bl	8013600 <CRS_STM_Init>

  DIS_Init();
 8013704:	f7ff ff83 	bl	801360e <DIS_Init>

  EDS_STM_Init();
 8013708:	f7ff ff88 	bl	801361c <EDS_STM_Init>

  HIDS_Init();
 801370c:	f7ff ff8d 	bl	801362a <HIDS_Init>

  HRS_Init();
 8013710:	f7ff ff92 	bl	8013638 <HRS_Init>

  HTS_Init();
 8013714:	f7ff ff97 	bl	8013646 <HTS_Init>

  IAS_Init();
 8013718:	f7ff ff9c 	bl	8013654 <IAS_Init>

  LLS_Init();
 801371c:	f7ff ffa1 	bl	8013662 <LLS_Init>

  TPS_Init();
 8013720:	f7ff ffa6 	bl	8013670 <TPS_Init>

  MOTENV_STM_Init();
 8013724:	f7ff ffab 	bl	801367e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8013728:	f7ff ffb0 	bl	801368c <P2PS_STM_Init>

  ZDD_STM_Init();
 801372c:	f7ff ffb5 	bl	801369a <ZDD_STM_Init>

  OTAS_STM_Init();
 8013730:	f7ff ffba 	bl	80136a8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8013734:	f7ff ffbf 	bl	80136b6 <BVOPUS_STM_Init>

  MESH_Init();
 8013738:	f7fe fa7e 	bl	8011c38 <MESH_Init>

  SVCCTL_InitCustomSvc();
 801373c:	f7ff ffc2 	bl	80136c4 <SVCCTL_InitCustomSvc>
  
  return;
 8013740:	bf00      	nop
}
 8013742:	bd80      	pop	{r7, pc}

08013744 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b086      	sub	sp, #24
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	3301      	adds	r3, #1
 8013750:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8013752:	2300      	movs	r3, #0
 8013754:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	781b      	ldrb	r3, [r3, #0]
 801375a:	2bff      	cmp	r3, #255	@ 0xff
 801375c:	d13f      	bne.n	80137de <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 801375e:	693b      	ldr	r3, [r7, #16]
 8013760:	3302      	adds	r3, #2
 8013762:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	881b      	ldrh	r3, [r3, #0]
 8013768:	b29b      	uxth	r3, r3
 801376a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801376e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8013772:	d132      	bne.n	80137da <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8013774:	2300      	movs	r3, #0
 8013776:	757b      	strb	r3, [r7, #21]
 8013778:	e00d      	b.n	8013796 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 801377a:	7d7b      	ldrb	r3, [r7, #21]
 801377c:	4a27      	ldr	r2, [pc, #156]	@ (801381c <SVCCTL_UserEvtRx+0xd8>)
 801377e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	4798      	blx	r3
 8013786:	4603      	mov	r3, r0
 8013788:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 801378a:	7dfb      	ldrb	r3, [r7, #23]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d108      	bne.n	80137a2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8013790:	7d7b      	ldrb	r3, [r7, #21]
 8013792:	3301      	adds	r3, #1
 8013794:	757b      	strb	r3, [r7, #21]
 8013796:	4b21      	ldr	r3, [pc, #132]	@ (801381c <SVCCTL_UserEvtRx+0xd8>)
 8013798:	7f1b      	ldrb	r3, [r3, #28]
 801379a:	7d7a      	ldrb	r2, [r7, #21]
 801379c:	429a      	cmp	r2, r3
 801379e:	d3ec      	bcc.n	801377a <SVCCTL_UserEvtRx+0x36>
 80137a0:	e000      	b.n	80137a4 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 80137a2:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 80137a4:	2300      	movs	r3, #0
 80137a6:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 80137a8:	2300      	movs	r3, #0
 80137aa:	757b      	strb	r3, [r7, #21]
 80137ac:	e00d      	b.n	80137ca <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 80137ae:	7d7b      	ldrb	r3, [r7, #21]
 80137b0:	4a1b      	ldr	r2, [pc, #108]	@ (8013820 <SVCCTL_UserEvtRx+0xdc>)
 80137b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137b6:	6878      	ldr	r0, [r7, #4]
 80137b8:	4798      	blx	r3
 80137ba:	4603      	mov	r3, r0
 80137bc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80137be:	7dfb      	ldrb	r3, [r7, #23]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d108      	bne.n	80137d6 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 80137c4:	7d7b      	ldrb	r3, [r7, #21]
 80137c6:	3301      	adds	r3, #1
 80137c8:	757b      	strb	r3, [r7, #21]
 80137ca:	4b15      	ldr	r3, [pc, #84]	@ (8013820 <SVCCTL_UserEvtRx+0xdc>)
 80137cc:	7d1b      	ldrb	r3, [r3, #20]
 80137ce:	7d7a      	ldrb	r2, [r7, #21]
 80137d0:	429a      	cmp	r2, r3
 80137d2:	d3ec      	bcc.n	80137ae <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 80137d4:	e002      	b.n	80137dc <SVCCTL_UserEvtRx+0x98>
              break;
 80137d6:	bf00      	nop
          break;
 80137d8:	e000      	b.n	80137dc <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 80137da:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80137dc:	e000      	b.n	80137e0 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 80137de:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80137e0:	7dfb      	ldrb	r3, [r7, #23]
 80137e2:	2b02      	cmp	r3, #2
 80137e4:	d00f      	beq.n	8013806 <SVCCTL_UserEvtRx+0xc2>
 80137e6:	2b02      	cmp	r3, #2
 80137e8:	dc10      	bgt.n	801380c <SVCCTL_UserEvtRx+0xc8>
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d002      	beq.n	80137f4 <SVCCTL_UserEvtRx+0xb0>
 80137ee:	2b01      	cmp	r3, #1
 80137f0:	d006      	beq.n	8013800 <SVCCTL_UserEvtRx+0xbc>
 80137f2:	e00b      	b.n	801380c <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f7ef ffc9 	bl	800378c <SVCCTL_App_Notification>
 80137fa:	4603      	mov	r3, r0
 80137fc:	75bb      	strb	r3, [r7, #22]
      break;
 80137fe:	e008      	b.n	8013812 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8013800:	2301      	movs	r3, #1
 8013802:	75bb      	strb	r3, [r7, #22]
      break;
 8013804:	e005      	b.n	8013812 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8013806:	2300      	movs	r3, #0
 8013808:	75bb      	strb	r3, [r7, #22]
      break;
 801380a:	e002      	b.n	8013812 <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 801380c:	2301      	movs	r3, #1
 801380e:	75bb      	strb	r3, [r7, #22]
      break;
 8013810:	bf00      	nop
  }

  return (return_status);
 8013812:	7dbb      	ldrb	r3, [r7, #22]
}
 8013814:	4618      	mov	r0, r3
 8013816:	3718      	adds	r7, #24
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}
 801381c:	20000298 	.word	0x20000298
 8013820:	200002b8 	.word	0x200002b8

08013824 <Vendor_WriteLocalDataCb>:
MOBLE_RESULT Vendor_WriteLocalDataCb(MODEL_MessageHeader_t *pmsgParams,  
                                     MOBLEUINT8 command, 
                                     MOBLEUINT8 const *data, 
                                     MOBLEUINT32 length, 
                                     MOBLEBOOL response)
{
 8013824:	b590      	push	{r4, r7, lr}
 8013826:	b089      	sub	sp, #36	@ 0x24
 8013828:	af02      	add	r7, sp, #8
 801382a:	60f8      	str	r0, [r7, #12]
 801382c:	607a      	str	r2, [r7, #4]
 801382e:	603b      	str	r3, [r7, #0]
 8013830:	460b      	mov	r3, r1
 8013832:	72fb      	strb	r3, [r7, #11]
  
  MOBLE_COMMAND_STATUS status = STATUS_SUCCESS;
 8013834:	2300      	movs	r3, #0
 8013836:	75fb      	strb	r3, [r7, #23]
  
  /* Traces for the Data */
  uint16_t idx = 0;
 8013838:	2300      	movs	r3, #0
 801383a:	82bb      	strh	r3, [r7, #20]
          command, 
          response);
  
  TRACE_I(TF_VENDOR_M, "DATA_RECEIVED length = %ld\n\r",length);
  
         for (idx=0; idx<length; idx++)
 801383c:	2300      	movs	r3, #0
 801383e:	82bb      	strh	r3, [r7, #20]
 8013840:	e002      	b.n	8013848 <Vendor_WriteLocalDataCb+0x24>
 8013842:	8abb      	ldrh	r3, [r7, #20]
 8013844:	3301      	adds	r3, #1
 8013846:	82bb      	strh	r3, [r7, #20]
 8013848:	8abb      	ldrh	r3, [r7, #20]
 801384a:	683a      	ldr	r2, [r7, #0]
 801384c:	429a      	cmp	r2, r3
 801384e:	d8f8      	bhi.n	8013842 <Vendor_WriteLocalDataCb+0x1e>
         {
           TRACE_I(TF_VENDOR_M,"data[%d]= %d",idx,data[idx]);  
           TRACE_I(TF_VENDOR_M,"\n\r");
         }
         
           switch (command)
 8013850:	7afb      	ldrb	r3, [r7, #11]
 8013852:	2b0e      	cmp	r3, #14
 8013854:	d016      	beq.n	8013884 <Vendor_WriteLocalDataCb+0x60>
 8013856:	2b0e      	cmp	r3, #14
 8013858:	dc1a      	bgt.n	8013890 <Vendor_WriteLocalDataCb+0x6c>
 801385a:	2b01      	cmp	r3, #1
 801385c:	d002      	beq.n	8013864 <Vendor_WriteLocalDataCb+0x40>
 801385e:	2b03      	cmp	r3, #3
 8013860:	d006      	beq.n	8013870 <Vendor_WriteLocalDataCb+0x4c>
 8013862:	e015      	b.n	8013890 <Vendor_WriteLocalDataCb+0x6c>
           case APPLI_TEST_CMD:
             {
               /*This is callback when ever command is coming for test of response
                 time,command reached count, data byte sent
               */          
               VendorAppli_cb.TestCommand_cb(data, length);
 8013864:	4b2d      	ldr	r3, [pc, #180]	@ (801391c <Vendor_WriteLocalDataCb+0xf8>)
 8013866:	689b      	ldr	r3, [r3, #8]
 8013868:	6839      	ldr	r1, [r7, #0]
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	4798      	blx	r3
               break;
 801386e:	e012      	b.n	8013896 <Vendor_WriteLocalDataCb+0x72>
               /* 
               Message Received     B0     B1    B2      B3    B4    B5    B6     B7 
               B0 - Sub-Cmd LED
               B1-B7 - Data Bytes       
               */          
               VendorAppli_cb.LEDControlCommand_Cb(data, length, pmsgParams->elementIndex,\
 8013870:	4b2a      	ldr	r3, [pc, #168]	@ (801391c <Vendor_WriteLocalDataCb+0xf8>)
 8013872:	681c      	ldr	r4, [r3, #0]
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	781a      	ldrb	r2, [r3, #0]
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	88db      	ldrh	r3, [r3, #6]
 801387c:	6839      	ldr	r1, [r7, #0]
 801387e:	6878      	ldr	r0, [r7, #4]
 8013880:	47a0      	blx	r4
                 pmsgParams->dst_peer);
               break;
 8013882:	e008      	b.n	8013896 <Vendor_WriteLocalDataCb+0x72>
           case APPLI_DATA_CNTRL_CMD:
             {
               /*This is callback when ever command is coming for test of response
                 time,command reached count, data byte sent
               */          
               VendorAppli_cb.DataControlCommand_cb(data,length);    
 8013884:	4b25      	ldr	r3, [pc, #148]	@ (801391c <Vendor_WriteLocalDataCb+0xf8>)
 8013886:	695b      	ldr	r3, [r3, #20]
 8013888:	6839      	ldr	r1, [r7, #0]
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	4798      	blx	r3
               break;       
 801388e:	e002      	b.n	8013896 <Vendor_WriteLocalDataCb+0x72>
             } 
             /* Default case - Not valid command */
           default:
             {
               status = STATUS_INVALID_COMMAND;
 8013890:	2301      	movs	r3, #1
 8013892:	75fb      	strb	r3, [r7, #23]
               break;
 8013894:	bf00      	nop
           }
                   
         /* this expression is used to send the status of data received whether it
         is correct or not , First 3 bits are for status and last 5 bit are for sub commands
         */
         ResponseBuffer[0] = ResponseBuffer[0] | (status << 5);
 8013896:	4b22      	ldr	r3, [pc, #136]	@ (8013920 <Vendor_WriteLocalDataCb+0xfc>)
 8013898:	781b      	ldrb	r3, [r3, #0]
 801389a:	b25a      	sxtb	r2, r3
 801389c:	7dfb      	ldrb	r3, [r7, #23]
 801389e:	015b      	lsls	r3, r3, #5
 80138a0:	b25b      	sxtb	r3, r3
 80138a2:	4313      	orrs	r3, r2
 80138a4:	b25b      	sxtb	r3, r3
 80138a6:	b2da      	uxtb	r2, r3
 80138a8:	4b1d      	ldr	r3, [pc, #116]	@ (8013920 <Vendor_WriteLocalDataCb+0xfc>)
 80138aa:	701a      	strb	r2, [r3, #0]
         If response is true, Message response will be sent      
         Message Response     B0     B1    B2      B3    B4    B5    B6     B7 
         B0 - Sub-Cmd 
         B1-B7 - Response Bytes if any 
         */
         if (response == MOBLE_TRUE)
 80138ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80138b0:	2b01      	cmp	r3, #1
 80138b2:	d128      	bne.n	8013906 <Vendor_WriteLocalDataCb+0xe2>
         {
           if (ADDRESS_IS_UNICAST(pmsgParams->dst_peer))
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	88db      	ldrh	r3, [r3, #6]
 80138b8:	b21b      	sxth	r3, r3
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	dd15      	ble.n	80138ea <Vendor_WriteLocalDataCb+0xc6>
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	88db      	ldrh	r3, [r3, #6]
 80138c2:	b21b      	sxth	r3, r3
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	db10      	blt.n	80138ea <Vendor_WriteLocalDataCb+0xc6>
           {
             VendorModel_SendResponse(VENDOR_STMICRO_CID, pmsgParams, command, ResponseBuffer, BuffLength);
 80138c8:	4b16      	ldr	r3, [pc, #88]	@ (8013924 <Vendor_WriteLocalDataCb+0x100>)
 80138ca:	881b      	ldrh	r3, [r3, #0]
 80138cc:	7afa      	ldrb	r2, [r7, #11]
 80138ce:	9300      	str	r3, [sp, #0]
 80138d0:	4b13      	ldr	r3, [pc, #76]	@ (8013920 <Vendor_WriteLocalDataCb+0xfc>)
 80138d2:	68f9      	ldr	r1, [r7, #12]
 80138d4:	2030      	movs	r0, #48	@ 0x30
 80138d6:	f011 fd49 	bl	802536c <VendorModel_SendResponse>
             TRACE_M(TF_VENDOR,"Sending Response for Unicast \n\r");
 80138da:	2100      	movs	r1, #0
 80138dc:	4812      	ldr	r0, [pc, #72]	@ (8013928 <Vendor_WriteLocalDataCb+0x104>)
 80138de:	f7f9 fe1d 	bl	800d51c <TraceHeader>
 80138e2:	4812      	ldr	r0, [pc, #72]	@ (801392c <Vendor_WriteLocalDataCb+0x108>)
 80138e4:	f015 fac4 	bl	8028e70 <iprintf>
 80138e8:	e00d      	b.n	8013906 <Vendor_WriteLocalDataCb+0xe2>
           }
           else
           {
             /* Randomize responses*/
             BLEMesh_ModelsDelayPacket(pmsgParams, command, ResponseBuffer, BuffLength);
 80138ea:	4b0e      	ldr	r3, [pc, #56]	@ (8013924 <Vendor_WriteLocalDataCb+0x100>)
 80138ec:	881b      	ldrh	r3, [r3, #0]
 80138ee:	7af9      	ldrb	r1, [r7, #11]
 80138f0:	4a0b      	ldr	r2, [pc, #44]	@ (8013920 <Vendor_WriteLocalDataCb+0xfc>)
 80138f2:	68f8      	ldr	r0, [r7, #12]
 80138f4:	f7f3 fb8c 	bl	8007010 <BLEMesh_ModelsDelayPacket>
             TRACE_M(TF_VENDOR,"Sending Response for Multicast \n\r");
 80138f8:	2100      	movs	r1, #0
 80138fa:	480b      	ldr	r0, [pc, #44]	@ (8013928 <Vendor_WriteLocalDataCb+0x104>)
 80138fc:	f7f9 fe0e 	bl	800d51c <TraceHeader>
 8013900:	480b      	ldr	r0, [pc, #44]	@ (8013930 <Vendor_WriteLocalDataCb+0x10c>)
 8013902:	f015 fab5 	bl	8028e70 <iprintf>
           }		
         }
         
         if (status == STATUS_SUCCESS)
 8013906:	7dfb      	ldrb	r3, [r7, #23]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d101      	bne.n	8013910 <Vendor_WriteLocalDataCb+0xec>
         {
           return MOBLE_RESULT_SUCCESS;  
 801390c:	2300      	movs	r3, #0
 801390e:	e000      	b.n	8013912 <Vendor_WriteLocalDataCb+0xee>
         }
         else
         {
           return MOBLE_RESULT_FAIL;
 8013910:	2302      	movs	r3, #2
         }
         
}
 8013912:	4618      	mov	r0, r3
 8013914:	371c      	adds	r7, #28
 8013916:	46bd      	mov	sp, r7
 8013918:	bd90      	pop	{r4, r7, pc}
 801391a:	bf00      	nop
 801391c:	080308c4 	.word	0x080308c4
 8013920:	20004450 	.word	0x20004450
 8013924:	2000448c 	.word	0x2000448c
 8013928:	08030e40 	.word	0x08030e40
 801392c:	0802f0ec 	.word	0x0802f0ec
 8013930:	0802f10c 	.word	0x0802f10c

08013934 <Vendor_ReadLocalDataCb>:
MOBLE_RESULT Vendor_ReadLocalDataCb(MODEL_MessageHeader_t *pmsgParams,  
                                   MOBLEUINT8 command, 
                                   MOBLEUINT8 const *data, 
                                   MOBLEUINT32 length, 
                                   MOBLEBOOL response)
{  
 8013934:	b580      	push	{r7, lr}
 8013936:	b088      	sub	sp, #32
 8013938:	af02      	add	r7, sp, #8
 801393a:	60f8      	str	r0, [r7, #12]
 801393c:	607a      	str	r2, [r7, #4]
 801393e:	603b      	str	r3, [r7, #0]
 8013940:	460b      	mov	r3, r1
 8013942:	72fb      	strb	r3, [r7, #11]
 
 MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8013944:	2300      	movs	r3, #0
 8013946:	75fb      	strb	r3, [r7, #23]
          command, 
          response);
  
  TRACE_I(TF_VENDOR_M,"DATA_RECEIVED length = %ld\n\r",length);
  
        for (MOBLEUINT8 idx=0; idx<length; idx++)
 8013948:	2300      	movs	r3, #0
 801394a:	75bb      	strb	r3, [r7, #22]
 801394c:	e002      	b.n	8013954 <Vendor_ReadLocalDataCb+0x20>
 801394e:	7dbb      	ldrb	r3, [r7, #22]
 8013950:	3301      	adds	r3, #1
 8013952:	75bb      	strb	r3, [r7, #22]
 8013954:	7dbb      	ldrb	r3, [r7, #22]
 8013956:	683a      	ldr	r2, [r7, #0]
 8013958:	429a      	cmp	r2, r3
 801395a:	d8f8      	bhi.n	801394e <Vendor_ReadLocalDataCb+0x1a>
          TRACE_I(TF_VENDOR_M,"data[%d]= %d",idx,data[idx]); 
          TRACE_I(TF_VENDOR_M,"\n\r");
        }
        
          /* Check which command is in packet */
          switch(command)
 801395c:	7afb      	ldrb	r3, [r7, #11]
 801395e:	3b01      	subs	r3, #1
 8013960:	2b0d      	cmp	r3, #13
 8013962:	d867      	bhi.n	8013a34 <Vendor_ReadLocalDataCb+0x100>
 8013964:	a201      	add	r2, pc, #4	@ (adr r2, 801396c <Vendor_ReadLocalDataCb+0x38>)
 8013966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801396a:	bf00      	nop
 801396c:	080139a5 	.word	0x080139a5
 8013970:	080139d7 	.word	0x080139d7
 8013974:	08013a01 	.word	0x08013a01
 8013978:	080139e7 	.word	0x080139e7
 801397c:	08013a3b 	.word	0x08013a3b
 8013980:	08013a35 	.word	0x08013a35
 8013984:	08013a35 	.word	0x08013a35
 8013988:	08013a35 	.word	0x08013a35
 801398c:	08013a35 	.word	0x08013a35
 8013990:	08013a35 	.word	0x08013a35
 8013994:	08013a35 	.word	0x08013a35
 8013998:	08013a35 	.word	0x08013a35
 801399c:	08013a35 	.word	0x08013a35
 80139a0:	08013a25 	.word	0x08013a25
              B0 - Sub-Cmd for APPLI_TEST_CMD
              B1-B7 - Data Bytes if any  
              this function gives back the number count of command received by 
              the receiver.
              */
              VendorAppli_cb.GetTestCount(getBuff);
 80139a4:	4b4c      	ldr	r3, [pc, #304]	@ (8013ad8 <Vendor_ReadLocalDataCb+0x1a4>)
 80139a6:	691b      	ldr	r3, [r3, #16]
 80139a8:	f107 0210 	add.w	r2, r7, #16
 80139ac:	4610      	mov	r0, r2
 80139ae:	4798      	blx	r3
              ResponseBuffer[0] = APPLI_TEST_INC_COUNTER;
 80139b0:	4b4a      	ldr	r3, [pc, #296]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 80139b2:	2205      	movs	r2, #5
 80139b4:	701a      	strb	r2, [r3, #0]
              ResponseBuffer[1] = getBuff[0];
 80139b6:	7c3a      	ldrb	r2, [r7, #16]
 80139b8:	4b48      	ldr	r3, [pc, #288]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 80139ba:	705a      	strb	r2, [r3, #1]
              ResponseBuffer[2] = getBuff[1];
 80139bc:	7c7a      	ldrb	r2, [r7, #17]
 80139be:	4b47      	ldr	r3, [pc, #284]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 80139c0:	709a      	strb	r2, [r3, #2]
              ResponseBuffer[3] = getBuff[2];
 80139c2:	7cba      	ldrb	r2, [r7, #18]
 80139c4:	4b45      	ldr	r3, [pc, #276]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 80139c6:	70da      	strb	r2, [r3, #3]
              ResponseBuffer[4] = getBuff[3];
 80139c8:	7cfa      	ldrb	r2, [r7, #19]
 80139ca:	4b44      	ldr	r3, [pc, #272]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 80139cc:	711a      	strb	r2, [r3, #4]
              BuffLength = 5;
 80139ce:	4b44      	ldr	r3, [pc, #272]	@ (8013ae0 <Vendor_ReadLocalDataCb+0x1ac>)
 80139d0:	2205      	movs	r2, #5
 80139d2:	801a      	strh	r2, [r3, #0]
              break;
 80139d4:	e032      	b.n	8013a3c <Vendor_ReadLocalDataCb+0x108>
              Message Received     B0     B1    B2      B3    B4    B5    B6     B7 
              B0 - Sub-Cmd for APPLI_DEVICE_INFO_CMD
              B1-B7 - Data Bytes if any      
              
              */
              status =  VendorAppli_cb.DeviceInfoCommand_cb(data, length);
 80139d6:	4b40      	ldr	r3, [pc, #256]	@ (8013ad8 <Vendor_ReadLocalDataCb+0x1a4>)
 80139d8:	685b      	ldr	r3, [r3, #4]
 80139da:	6839      	ldr	r1, [r7, #0]
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	4798      	blx	r3
 80139e0:	4603      	mov	r3, r0
 80139e2:	75fb      	strb	r3, [r7, #23]
              break;
 80139e4:	e02a      	b.n	8013a3c <Vendor_ReadLocalDataCb+0x108>
          case APPLI_ELEMENT_TYPE_CMD:
            {
              /*
              Message Received with Command APPLI_ELEMENT_TYPE_CMD
              */
              ResponseBuffer[0] = ELEMENT_TYPE_LED;
 80139e6:	4b3d      	ldr	r3, [pc, #244]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 80139e8:	2201      	movs	r2, #1
 80139ea:	701a      	strb	r2, [r3, #0]
              ResponseBuffer[1] = ELEMENT_TYPE_LED;
 80139ec:	4b3b      	ldr	r3, [pc, #236]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 80139ee:	2201      	movs	r2, #1
 80139f0:	705a      	strb	r2, [r3, #1]
              ResponseBuffer[2] = ELEMENT_TYPE_SWITCH;
 80139f2:	4b3a      	ldr	r3, [pc, #232]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 80139f4:	2202      	movs	r2, #2
 80139f6:	709a      	strb	r2, [r3, #2]
              BuffLength  = 3;      
 80139f8:	4b39      	ldr	r3, [pc, #228]	@ (8013ae0 <Vendor_ReadLocalDataCb+0x1ac>)
 80139fa:	2203      	movs	r2, #3
 80139fc:	801a      	strh	r2, [r3, #0]
              break;
 80139fe:	e01d      	b.n	8013a3c <Vendor_ReadLocalDataCb+0x108>
              /*
              Message Received with Command APPLI_LED_CONTROL_STATUS_CMD
              ResponseBuffer will send the response of selected Element
              */
      
      TRACE_M(TF_VENDOR,"Appli_LED_Control_Status callback received for elementIndex %d \r\n", pmsgParams->elementIndex);     
 8013a00:	2100      	movs	r1, #0
 8013a02:	4838      	ldr	r0, [pc, #224]	@ (8013ae4 <Vendor_ReadLocalDataCb+0x1b0>)
 8013a04:	f7f9 fd8a 	bl	800d51c <TraceHeader>
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	781b      	ldrb	r3, [r3, #0]
 8013a0c:	4619      	mov	r1, r3
 8013a0e:	4836      	ldr	r0, [pc, #216]	@ (8013ae8 <Vendor_ReadLocalDataCb+0x1b4>)
 8013a10:	f015 fa2e 	bl	8028e70 <iprintf>
      /*User Need to send the status as per the element selected*/
                ResponseBuffer[0] = Appli_LedState;
 8013a14:	4b35      	ldr	r3, [pc, #212]	@ (8013aec <Vendor_ReadLocalDataCb+0x1b8>)
 8013a16:	781a      	ldrb	r2, [r3, #0]
 8013a18:	4b30      	ldr	r3, [pc, #192]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 8013a1a:	701a      	strb	r2, [r3, #0]
              BuffLength = 1;  
 8013a1c:	4b30      	ldr	r3, [pc, #192]	@ (8013ae0 <Vendor_ReadLocalDataCb+0x1ac>)
 8013a1e:	2201      	movs	r2, #1
 8013a20:	801a      	strh	r2, [r3, #0]
              
              break;
 8013a22:	e00b      	b.n	8013a3c <Vendor_ReadLocalDataCb+0x108>
            {
              /* 
              Message Received with Command APPLI_DATA_CNTRL_CMD
              Call the Data Read Callback to fill Response Buffer with local data
              */ 
              status =  VendorAppli_cb.DataControlCommand_cb(data, length);
 8013a24:	4b2c      	ldr	r3, [pc, #176]	@ (8013ad8 <Vendor_ReadLocalDataCb+0x1a4>)
 8013a26:	695b      	ldr	r3, [r3, #20]
 8013a28:	6839      	ldr	r1, [r7, #0]
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	4798      	blx	r3
 8013a2e:	4603      	mov	r3, r0
 8013a30:	75fb      	strb	r3, [r7, #23]
              break;       
 8013a32:	e003      	b.n	8013a3c <Vendor_ReadLocalDataCb+0x108>
            }  
            
          default:
            {
              status = MOBLE_RESULT_INVALIDARG;
 8013a34:	2303      	movs	r3, #3
 8013a36:	75fb      	strb	r3, [r7, #23]
              break;
 8013a38:	e000      	b.n	8013a3c <Vendor_ReadLocalDataCb+0x108>
              break;
 8013a3a:	bf00      	nop
          }
  
        /* this expression is used to send the status of data received whether it
        is correct or not , First 3 bits are for status and last 5 bit are for sub commands
        */
        ResponseBuffer[0] = ResponseBuffer[0] | (status << 5);
 8013a3c:	4b27      	ldr	r3, [pc, #156]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 8013a3e:	781b      	ldrb	r3, [r3, #0]
 8013a40:	b25a      	sxtb	r2, r3
 8013a42:	7dfb      	ldrb	r3, [r7, #23]
 8013a44:	015b      	lsls	r3, r3, #5
 8013a46:	b25b      	sxtb	r3, r3
 8013a48:	4313      	orrs	r3, r2
 8013a4a:	b25b      	sxtb	r3, r3
 8013a4c:	b2da      	uxtb	r2, r3
 8013a4e:	4b23      	ldr	r3, [pc, #140]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 8013a50:	701a      	strb	r2, [r3, #0]
        /* Check if the command executed successfully or not */ 
        
        if (MOBLE_RESULT_SUCCESS == status)
 8013a52:	7dfb      	ldrb	r3, [r7, #23]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d11b      	bne.n	8013a90 <Vendor_ReadLocalDataCb+0x15c>
          Read Command will always be reliable      
          Message Response     B0     B1    B2      B3    B4    B5    B6     B7 
          B0 - Sub-Cmd for which response is needed
          B1-B7 - Data Bytes if any 
          */
         if (ADDRESS_IS_UNICAST(pmsgParams->dst_peer))
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	88db      	ldrh	r3, [r3, #6]
 8013a5c:	b21b      	sxth	r3, r3
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	dd0e      	ble.n	8013a80 <Vendor_ReadLocalDataCb+0x14c>
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	88db      	ldrh	r3, [r3, #6]
 8013a66:	b21b      	sxth	r3, r3
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	db09      	blt.n	8013a80 <Vendor_ReadLocalDataCb+0x14c>
          {
            VendorModel_SendResponse(VENDOR_STMICRO_CID, pmsgParams, command, ResponseBuffer, BuffLength);
 8013a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8013ae0 <Vendor_ReadLocalDataCb+0x1ac>)
 8013a6e:	881b      	ldrh	r3, [r3, #0]
 8013a70:	7afa      	ldrb	r2, [r7, #11]
 8013a72:	9300      	str	r3, [sp, #0]
 8013a74:	4b19      	ldr	r3, [pc, #100]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 8013a76:	68f9      	ldr	r1, [r7, #12]
 8013a78:	2030      	movs	r0, #48	@ 0x30
 8013a7a:	f011 fc77 	bl	802536c <VendorModel_SendResponse>
 8013a7e:	e020      	b.n	8013ac2 <Vendor_ReadLocalDataCb+0x18e>
          }
          else
          {
            /* Randomize responses*/
            BLEMesh_ModelsDelayPacket(pmsgParams, command, ResponseBuffer, BuffLength);
 8013a80:	4b17      	ldr	r3, [pc, #92]	@ (8013ae0 <Vendor_ReadLocalDataCb+0x1ac>)
 8013a82:	881b      	ldrh	r3, [r3, #0]
 8013a84:	7af9      	ldrb	r1, [r7, #11]
 8013a86:	4a15      	ldr	r2, [pc, #84]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 8013a88:	68f8      	ldr	r0, [r7, #12]
 8013a8a:	f7f3 fac1 	bl	8007010 <BLEMesh_ModelsDelayPacket>
 8013a8e:	e018      	b.n	8013ac2 <Vendor_ReadLocalDataCb+0x18e>
          }
        }
        /* Command not successfully processed */
        else
        {
          if (ADDRESS_IS_UNICAST(pmsgParams->dst_peer))
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	88db      	ldrh	r3, [r3, #6]
 8013a94:	b21b      	sxth	r3, r3
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	dd0d      	ble.n	8013ab6 <Vendor_ReadLocalDataCb+0x182>
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	88db      	ldrh	r3, [r3, #6]
 8013a9e:	b21b      	sxth	r3, r3
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	db08      	blt.n	8013ab6 <Vendor_ReadLocalDataCb+0x182>
          {
            VendorModel_SendResponse(VENDOR_STMICRO_CID, pmsgParams, command, ResponseBuffer, 1);
 8013aa4:	7afa      	ldrb	r2, [r7, #11]
 8013aa6:	2301      	movs	r3, #1
 8013aa8:	9300      	str	r3, [sp, #0]
 8013aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 8013aac:	68f9      	ldr	r1, [r7, #12]
 8013aae:	2030      	movs	r0, #48	@ 0x30
 8013ab0:	f011 fc5c 	bl	802536c <VendorModel_SendResponse>
 8013ab4:	e005      	b.n	8013ac2 <Vendor_ReadLocalDataCb+0x18e>
          }
          else
          {
            /* Randomize responses*/
            BLEMesh_ModelsDelayPacket(pmsgParams, command, ResponseBuffer, 1);
 8013ab6:	7af9      	ldrb	r1, [r7, #11]
 8013ab8:	2301      	movs	r3, #1
 8013aba:	4a08      	ldr	r2, [pc, #32]	@ (8013adc <Vendor_ReadLocalDataCb+0x1a8>)
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f7f3 faa7 	bl	8007010 <BLEMesh_ModelsDelayPacket>
          }
        }
        
        if (status == MOBLE_RESULT_SUCCESS)
 8013ac2:	7dfb      	ldrb	r3, [r7, #23]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d101      	bne.n	8013acc <Vendor_ReadLocalDataCb+0x198>
        {
          return MOBLE_RESULT_SUCCESS;  
 8013ac8:	2300      	movs	r3, #0
 8013aca:	e000      	b.n	8013ace <Vendor_ReadLocalDataCb+0x19a>
        }
        else
        {
          return MOBLE_RESULT_FAIL;
 8013acc:	2302      	movs	r3, #2
        }
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	3718      	adds	r7, #24
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd80      	pop	{r7, pc}
 8013ad6:	bf00      	nop
 8013ad8:	080308c4 	.word	0x080308c4
 8013adc:	20004450 	.word	0x20004450
 8013ae0:	2000448c 	.word	0x2000448c
 8013ae4:	08030e58 	.word	0x08030e58
 8013ae8:	0802f130 	.word	0x0802f130
 8013aec:	2000442a 	.word	0x2000442a

08013af0 <Vendor_OnResponseDataCb>:
MOBLE_RESULT Vendor_OnResponseDataCb(MODEL_MessageHeader_t *pmsgParam,  
                                     MOBLEUINT8 command, 
                                     MOBLEUINT8 const *pRxData, 
                                     MOBLEUINT32 dataLength, 
                                     MOBLEBOOL response)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b088      	sub	sp, #32
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	60f8      	str	r0, [r7, #12]
 8013af8:	607a      	str	r2, [r7, #4]
 8013afa:	603b      	str	r3, [r7, #0]
 8013afc:	460b      	mov	r3, r1
 8013afe:	72fb      	strb	r3, [r7, #11]
   MOBLEUINT32 timeStampRcv;
   MOBLEUINT8 subCmd = pRxData[0];
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	781b      	ldrb	r3, [r3, #0]
 8013b04:	773b      	strb	r3, [r7, #28]
   MOBLEUINT16 hitcmdcount = 0;
 8013b06:	2300      	movs	r3, #0
 8013b08:	837b      	strh	r3, [r7, #26]
   MOBLEUINT8 increment = 1;
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	77fb      	strb	r3, [r7, #31]
          command, 
          response);
  TRACE_I(TF_VENDOR_M,"DATA_RECEIVED length = %ld\n\r", dataLength);
  TRACE_M(TF_VENDOR_M,"#%02hx-%02hx! \n\r",command,pRxData[0]);
  
  switch(command)
 8013b0e:	7afb      	ldrb	r3, [r7, #11]
 8013b10:	3b01      	subs	r3, #1
 8013b12:	2b0d      	cmp	r3, #13
 8013b14:	d87f      	bhi.n	8013c16 <Vendor_OnResponseDataCb+0x126>
 8013b16:	a201      	add	r2, pc, #4	@ (adr r2, 8013b1c <Vendor_OnResponseDataCb+0x2c>)
 8013b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b1c:	08013b55 	.word	0x08013b55
 8013b20:	08013bc5 	.word	0x08013bc5
 8013b24:	08013c17 	.word	0x08013c17
 8013b28:	08013c17 	.word	0x08013c17
 8013b2c:	08013c17 	.word	0x08013c17
 8013b30:	08013c17 	.word	0x08013c17
 8013b34:	08013c17 	.word	0x08013c17
 8013b38:	08013c17 	.word	0x08013c17
 8013b3c:	08013c17 	.word	0x08013c17
 8013b40:	08013c17 	.word	0x08013c17
 8013b44:	08013c17 	.word	0x08013c17
 8013b48:	08013c17 	.word	0x08013c17
 8013b4c:	08013c17 	.word	0x08013c17
 8013b50:	08013c01 	.word	0x08013c01
  {
    case APPLI_TEST_CMD:
      {
         switch(subCmd)
 8013b54:	7f3b      	ldrb	r3, [r7, #28]
 8013b56:	3b02      	subs	r3, #2
 8013b58:	2b04      	cmp	r3, #4
 8013b5a:	d831      	bhi.n	8013bc0 <Vendor_OnResponseDataCb+0xd0>
 8013b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8013b64 <Vendor_OnResponseDataCb+0x74>)
 8013b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b62:	bf00      	nop
 8013b64:	08013b79 	.word	0x08013b79
 8013b68:	08013bc1 	.word	0x08013bc1
 8013b6c:	08013b8f 	.word	0x08013b8f
 8013b70:	08013b9d 	.word	0x08013b9d
 8013b74:	08013bc1 	.word	0x08013bc1
             case APPLI_TEST_ECHO: 
               { 
                 /* this case is responsible for printing of the received back data byte from 
                    receiver node.
                 */       
                 for(idx =1;idx<dataLength;idx++)
 8013b78:	2301      	movs	r3, #1
 8013b7a:	77bb      	strb	r3, [r7, #30]
 8013b7c:	e002      	b.n	8013b84 <Vendor_OnResponseDataCb+0x94>
 8013b7e:	7fbb      	ldrb	r3, [r7, #30]
 8013b80:	3301      	adds	r3, #1
 8013b82:	77bb      	strb	r3, [r7, #30]
 8013b84:	7fbb      	ldrb	r3, [r7, #30]
 8013b86:	683a      	ldr	r2, [r7, #0]
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d8f8      	bhi.n	8013b7e <Vendor_OnResponseDataCb+0x8e>
                 {
                   TRACE_I(TF_VENDOR_M,"Response data %d\n\r", pRxData[idx]);
                 }
                 break;
 8013b8c:	e019      	b.n	8013bc2 <Vendor_OnResponseDataCb+0xd2>
             case APPLI_TEST_COUNTER:
               { 
         /* this case is responsible for the printing the time stamp when the response 
            is received by the sender node.
         */
                 timeStampRcv = Clock_Time();
 8013b8e:	f7f4 f945 	bl	8007e1c <HAL_GetTick>
 8013b92:	6178      	str	r0, [r7, #20]

                 Packet_ResponseTimeStamp(timeStampRcv);
 8013b94:	6978      	ldr	r0, [r7, #20]
 8013b96:	f000 f8d2 	bl	8013d3e <Packet_ResponseTimeStamp>
                  
                 /*Insert Test related Commands here*/
                 break;
 8013b9a:	e012      	b.n	8013bc2 <Vendor_OnResponseDataCb+0xd2>
             case APPLI_TEST_INC_COUNTER: 
               { 
           /* This case is responsible for the printing of the number count of command 
              received by receiver.
           */     
                 hitcmdcount = (MOBLEUINT32)(pRxData[4] << 24);
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	837b      	strh	r3, [r7, #26]
                 hitcmdcount |=(MOBLEUINT32)( pRxData[3] << 16);
                 hitcmdcount |=(MOBLEUINT32)( pRxData[2] << 8);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	3302      	adds	r3, #2
 8013ba4:	781b      	ldrb	r3, [r3, #0]
 8013ba6:	021b      	lsls	r3, r3, #8
 8013ba8:	b29a      	uxth	r2, r3
 8013baa:	8b7b      	ldrh	r3, [r7, #26]
 8013bac:	4313      	orrs	r3, r2
 8013bae:	837b      	strh	r3, [r7, #26]
                 hitcmdcount |=(MOBLEUINT32)( pRxData[1]);                
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	3301      	adds	r3, #1
 8013bb4:	781b      	ldrb	r3, [r3, #0]
 8013bb6:	461a      	mov	r2, r3
 8013bb8:	8b7b      	ldrh	r3, [r7, #26]
 8013bba:	4313      	orrs	r3, r2
 8013bbc:	837b      	strh	r3, [r7, #26]
                 TRACE_I(TF_VENDOR_M,"NUMBER OF COMMANDS RECEIVED %d \r\n",hitcmdcount);
                 /*Insert Test related Commands here*/
                 break;
 8013bbe:	e000      	b.n	8013bc2 <Vendor_OnResponseDataCb+0xd2>
                  
                 break;
               }
             default:
               {              
                  break;
 8013bc0:	bf00      	nop
               }
         }
         break;
 8013bc2:	e02b      	b.n	8013c1c <Vendor_OnResponseDataCb+0x12c>
      TRACE_I(TF_VENDOR_M,"Led State %d \r\n",pRxData[0]);
      break;
    }
   case APPLI_DEVICE_INFO_CMD:
     {
      switch(subCmd)
 8013bc4:	7f3b      	ldrb	r3, [r7, #28]
 8013bc6:	2b03      	cmp	r3, #3
 8013bc8:	d012      	beq.n	8013bf0 <Vendor_OnResponseDataCb+0x100>
 8013bca:	2b03      	cmp	r3, #3
 8013bcc:	dc25      	bgt.n	8013c1a <Vendor_OnResponseDataCb+0x12a>
 8013bce:	2b01      	cmp	r3, #1
 8013bd0:	d014      	beq.n	8013bfc <Vendor_OnResponseDataCb+0x10c>
 8013bd2:	2b02      	cmp	r3, #2
 8013bd4:	d121      	bne.n	8013c1a <Vendor_OnResponseDataCb+0x12a>
                 TRACE_I(TF_VENDOR_M,"IC type is %s \r\n" ,Board_Type[pRxData[1]-1]); 
                 break;
               }
         case LIB_VER:
           {
             while(increment!=8)
 8013bd6:	e002      	b.n	8013bde <Vendor_OnResponseDataCb+0xee>
             {
               TRACE_I(TF_VENDOR_M,"Lib Version is %d \r\n",pRxData[increment]);
               increment++;
 8013bd8:	7ffb      	ldrb	r3, [r7, #31]
 8013bda:	3301      	adds	r3, #1
 8013bdc:	77fb      	strb	r3, [r7, #31]
             while(increment!=8)
 8013bde:	7ffb      	ldrb	r3, [r7, #31]
 8013be0:	2b08      	cmp	r3, #8
 8013be2:	d1f9      	bne.n	8013bd8 <Vendor_OnResponseDataCb+0xe8>
             }
             increment=1;
 8013be4:	2301      	movs	r3, #1
 8013be6:	77fb      	strb	r3, [r7, #31]
             break;
 8013be8:	e009      	b.n	8013bfe <Vendor_OnResponseDataCb+0x10e>
                 }
                 else
                 {
                   TRACE_I(TF_VENDOR_M,"Lib Sub Version is %c \r\n",pRxData[increment]);
                 }
                  increment++;
 8013bea:	7ffb      	ldrb	r3, [r7, #31]
 8013bec:	3301      	adds	r3, #1
 8013bee:	77fb      	strb	r3, [r7, #31]
               while(increment!=7)
 8013bf0:	7ffb      	ldrb	r3, [r7, #31]
 8013bf2:	2b07      	cmp	r3, #7
 8013bf4:	d1f9      	bne.n	8013bea <Vendor_OnResponseDataCb+0xfa>
               }
             increment=1;
 8013bf6:	2301      	movs	r3, #1
 8013bf8:	77fb      	strb	r3, [r7, #31]
             break;   
 8013bfa:	e000      	b.n	8013bfe <Vendor_OnResponseDataCb+0x10e>
                 break;
 8013bfc:	bf00      	nop
             }
         }
      break;
 8013bfe:	e00c      	b.n	8013c1a <Vendor_OnResponseDataCb+0x12a>
     }
    case APPLI_DATA_CNTRL_CMD:  
      {
        /** Displays data received **/
        for (MOBLEUINT8 idx=0; idx<dataLength; idx++)
 8013c00:	2300      	movs	r3, #0
 8013c02:	777b      	strb	r3, [r7, #29]
 8013c04:	e002      	b.n	8013c0c <Vendor_OnResponseDataCb+0x11c>
 8013c06:	7f7b      	ldrb	r3, [r7, #29]
 8013c08:	3301      	adds	r3, #1
 8013c0a:	777b      	strb	r3, [r7, #29]
 8013c0c:	7f7b      	ldrb	r3, [r7, #29]
 8013c0e:	683a      	ldr	r2, [r7, #0]
 8013c10:	429a      	cmp	r2, r3
 8013c12:	d8f8      	bhi.n	8013c06 <Vendor_OnResponseDataCb+0x116>
        {
          TRACE_I(TF_VENDOR_M,"data[%d]= 0x%x",idx,pRxData[idx]); 
          TRACE_I(TF_VENDOR_M,"\n\r");
        }
        break;
 8013c14:	e002      	b.n	8013c1c <Vendor_OnResponseDataCb+0x12c>
      }
       default:
    {              
        break;
 8013c16:	bf00      	nop
 8013c18:	e000      	b.n	8013c1c <Vendor_OnResponseDataCb+0x12c>
      break;
 8013c1a:	bf00      	nop
    }
      
  }   
      
         return MOBLE_RESULT_SUCCESS;
 8013c1c:	2300      	movs	r3, #0
} 
 8013c1e:	4618      	mov	r0, r3
 8013c20:	3720      	adds	r7, #32
 8013c22:	46bd      	mov	sp, r7
 8013c24:	bd80      	pop	{r7, pc}
 8013c26:	bf00      	nop

08013c28 <Vendor_Process>:
* @brief  State machine for Vendor Model
* @param  void
* @retval void
*/ 
void Vendor_Process(void)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	af00      	add	r7, sp, #0
  BLEMesh_ModelsSendDelayedPacket();
 8013c2c:	f7f3 fab2 	bl	8007194 <BLEMesh_ModelsSendDelayedPacket>
  
  if (Vendor_SendDataFreqState == 0xFF)
 8013c30:	4b03      	ldr	r3, [pc, #12]	@ (8013c40 <Vendor_Process+0x18>)
 8013c32:	781b      	ldrb	r3, [r3, #0]
 8013c34:	2bff      	cmp	r3, #255	@ 0xff
 8013c36:	d101      	bne.n	8013c3c <Vendor_Process+0x14>
  {
    Appli_Vendor_SendBigDataPacket();
 8013c38:	f7f3 f972 	bl	8006f20 <Appli_Vendor_SendBigDataPacket>
  }
}
 8013c3c:	bf00      	nop
 8013c3e:	bd80      	pop	{r7, pc}
 8013c40:	20006e6a 	.word	0x20006e6a

08013c44 <Vendor_SendDataFreq>:
* @brief  Set the state of the Vendor Data frequency
* @param  State: New state of sending vendor packet frequency 
* @retval void
*/          
void Vendor_SendDataFreq(MOBLEUINT8 freq)
{
 8013c44:	b480      	push	{r7}
 8013c46:	b083      	sub	sp, #12
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	71fb      	strb	r3, [r7, #7]
    /* Data to be sent continuously with out any time gap */ 
    if ((freq == 0xFF) || (freq == 0x00))
 8013c4e:	79fb      	ldrb	r3, [r7, #7]
 8013c50:	2bff      	cmp	r3, #255	@ 0xff
 8013c52:	d002      	beq.n	8013c5a <Vendor_SendDataFreq+0x16>
 8013c54:	79fb      	ldrb	r3, [r7, #7]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d102      	bne.n	8013c60 <Vendor_SendDataFreq+0x1c>
    {
        Vendor_SendDataFreqState = freq;
 8013c5a:	4a04      	ldr	r2, [pc, #16]	@ (8013c6c <Vendor_SendDataFreq+0x28>)
 8013c5c:	79fb      	ldrb	r3, [r7, #7]
 8013c5e:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        TRACE_I(TF_VENDOR_M, "Invalid Data send Freq parameter \r\n");
    }
}
 8013c60:	bf00      	nop
 8013c62:	370c      	adds	r7, #12
 8013c64:	46bd      	mov	sp, r7
 8013c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6a:	4770      	bx	lr
 8013c6c:	20006e6a 	.word	0x20006e6a

08013c70 <VendorModel_PID1_GetOpcodeTableCb>:
* @param  length: Pointer to the Length of Generic Model opcode array
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT VendorModel_PID1_GetOpcodeTableCb(const MODEL_OpcodeTableParam_t **data, 
                                                 MOBLEUINT16 *length)
{ 
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
  return MOBLE_RESULT_SUCCESS;
 8013c7a:	2300      	movs	r3, #0
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	370c      	adds	r7, #12
 8013c80:	46bd      	mov	sp, r7
 8013c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c86:	4770      	bx	lr

08013c88 <VendorModel_PID1_GetStatusRequestCb>:
                                    MOBLEUINT32 *plength, 
                                    MOBLEUINT8 const *pRxData,
                                    MOBLEUINT32 dataLength,
                                    MOBLEBOOL response)

{
 8013c88:	b480      	push	{r7}
 8013c8a:	b085      	sub	sp, #20
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	607a      	str	r2, [r7, #4]
 8013c92:	603b      	str	r3, [r7, #0]
 8013c94:	460b      	mov	r3, r1
 8013c96:	817b      	strh	r3, [r7, #10]
  return MOBLE_RESULT_SUCCESS;    
 8013c98:	2300      	movs	r3, #0
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	3714      	adds	r7, #20
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca4:	4770      	bx	lr

08013ca6 <VendorModel_PID1_ProcessMessageCb>:
                                                 MOBLEUINT16 opcode, 
                                                 MOBLEUINT8 const *pRxData, 
                                                 MOBLEUINT32 dataLength, 
                                                 MOBLEBOOL response
                                                   )
{
 8013ca6:	b580      	push	{r7, lr}
 8013ca8:	b088      	sub	sp, #32
 8013caa:	af02      	add	r7, sp, #8
 8013cac:	60f8      	str	r0, [r7, #12]
 8013cae:	607a      	str	r2, [r7, #4]
 8013cb0:	603b      	str	r3, [r7, #0]
 8013cb2:	460b      	mov	r3, r1
 8013cb4:	817b      	strh	r3, [r7, #10]
  
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	75fb      	strb	r3, [r7, #23]

            #define VENDOR_CMD_RESPONSE                          0x20
            #define VENDOR_CMD_READ_nWRITE                       0x10
  */
  
  command = (MOBLEUINT8) (opcode & 0x0F);
 8013cba:	897b      	ldrh	r3, [r7, #10]
 8013cbc:	b2db      	uxtb	r3, r3
 8013cbe:	f003 030f 	and.w	r3, r3, #15
 8013cc2:	757b      	strb	r3, [r7, #21]
  if (opcode & VENDOR_CMD_RESPONSE)
 8013cc4:	897b      	ldrh	r3, [r7, #10]
 8013cc6:	f003 0320 	and.w	r3, r3, #32
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d002      	beq.n	8013cd4 <VendorModel_PID1_ProcessMessageCb+0x2e>
  {
    cmd_response = MOBLE_TRUE;
 8013cce:	2301      	movs	r3, #1
 8013cd0:	75bb      	strb	r3, [r7, #22]
 8013cd2:	e001      	b.n	8013cd8 <VendorModel_PID1_ProcessMessageCb+0x32>
  }
  else
  {
    cmd_response = MOBLE_FALSE;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	75bb      	strb	r3, [r7, #22]
  }
  
    /* Parse the command */
    if( (cmd_response == MOBLE_FALSE) && (opcode & VENDOR_CMD_READ_nWRITE))
 8013cd8:	7dbb      	ldrb	r3, [r7, #22]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d10d      	bne.n	8013cfa <VendorModel_PID1_ProcessMessageCb+0x54>
 8013cde:	897b      	ldrh	r3, [r7, #10]
 8013ce0:	f003 0310 	and.w	r3, r3, #16
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d008      	beq.n	8013cfa <VendorModel_PID1_ProcessMessageCb+0x54>
    { /* Response Packet is received */
       TRACE_I(TF_VENDOR_M,"Response received from remote node \n\r");

       Vendor_OnResponseDataCb(pmsgParams, command, pRxData, dataLength, MOBLE_FALSE);
 8013ce8:	7d79      	ldrb	r1, [r7, #21]
 8013cea:	2300      	movs	r3, #0
 8013cec:	9300      	str	r3, [sp, #0]
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	687a      	ldr	r2, [r7, #4]
 8013cf2:	68f8      	ldr	r0, [r7, #12]
 8013cf4:	f7ff fefc 	bl	8013af0 <Vendor_OnResponseDataCb>
 8013cf8:	e01c      	b.n	8013d34 <VendorModel_PID1_ProcessMessageCb+0x8e>
    }
    else if ( (cmd_response == MOBLE_TRUE) && (opcode & VENDOR_CMD_READ_nWRITE))
 8013cfa:	7dbb      	ldrb	r3, [r7, #22]
 8013cfc:	2b01      	cmp	r3, #1
 8013cfe:	d10f      	bne.n	8013d20 <VendorModel_PID1_ProcessMessageCb+0x7a>
 8013d00:	897b      	ldrh	r3, [r7, #10]
 8013d02:	f003 0310 	and.w	r3, r3, #16
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d00a      	beq.n	8013d20 <VendorModel_PID1_ProcessMessageCb+0x7a>
    { /* Read Packet is received */
       TRACE_M(TF_VENDOR_M,"Read Command received   \n\r");
       result = Vendor_ReadLocalDataCb(pmsgParams, command, pRxData, dataLength, MOBLE_TRUE);
 8013d0a:	7d79      	ldrb	r1, [r7, #21]
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	9300      	str	r3, [sp, #0]
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	687a      	ldr	r2, [r7, #4]
 8013d14:	68f8      	ldr	r0, [r7, #12]
 8013d16:	f7ff fe0d 	bl	8013934 <Vendor_ReadLocalDataCb>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	75fb      	strb	r3, [r7, #23]
 8013d1e:	e009      	b.n	8013d34 <VendorModel_PID1_ProcessMessageCb+0x8e>
    }
    else 
    {  /* Write Commands with or without response received */
       TRACE_M(TF_VENDOR_M,"Command Write received, process the command\n\r");
       result = Vendor_WriteLocalDataCb(pmsgParams, command, pRxData, dataLength, cmd_response );
 8013d20:	7d79      	ldrb	r1, [r7, #21]
 8013d22:	7dbb      	ldrb	r3, [r7, #22]
 8013d24:	9300      	str	r3, [sp, #0]
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	687a      	ldr	r2, [r7, #4]
 8013d2a:	68f8      	ldr	r0, [r7, #12]
 8013d2c:	f7ff fd7a 	bl	8013824 <Vendor_WriteLocalDataCb>
 8013d30:	4603      	mov	r3, r0
 8013d32:	75fb      	strb	r3, [r7, #23]
    }

return result;
 8013d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d36:	4618      	mov	r0, r3
 8013d38:	3718      	adds	r7, #24
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}

08013d3e <Packet_ResponseTimeStamp>:
    
__weak MOBLE_RESULT Packet_ResponseTimeStamp(MOBLEUINT32 rcvTimeStamp)
{
 8013d3e:	b480      	push	{r7}
 8013d40:	b083      	sub	sp, #12
 8013d42:	af00      	add	r7, sp, #0
 8013d44:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_SUCCESS;
 8013d46:	2300      	movs	r3, #0
}
 8013d48:	4618      	mov	r0, r3
 8013d4a:	370c      	adds	r7, #12
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d52:	4770      	bx	lr

08013d54 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b088      	sub	sp, #32
 8013d58:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013d5e:	f107 0308 	add.w	r3, r7, #8
 8013d62:	2218      	movs	r2, #24
 8013d64:	2100      	movs	r1, #0
 8013d66:	4618      	mov	r0, r3
 8013d68:	f001 fbc6 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8013d6c:	233f      	movs	r3, #63	@ 0x3f
 8013d6e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8013d70:	2381      	movs	r3, #129	@ 0x81
 8013d72:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8013d74:	1dfb      	adds	r3, r7, #7
 8013d76:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8013d78:	2301      	movs	r3, #1
 8013d7a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013d7c:	f107 0308 	add.w	r3, r7, #8
 8013d80:	2100      	movs	r1, #0
 8013d82:	4618      	mov	r0, r3
 8013d84:	f001 fd3c 	bl	8015800 <hci_send_req>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	da01      	bge.n	8013d92 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8013d8e:	23ff      	movs	r3, #255	@ 0xff
 8013d90:	e000      	b.n	8013d94 <aci_gap_set_non_discoverable+0x40>
  return status;
 8013d92:	79fb      	ldrb	r3, [r7, #7]
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	3720      	adds	r7, #32
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}

08013d9c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8013d9c:	b5b0      	push	{r4, r5, r7, lr}
 8013d9e:	b0ce      	sub	sp, #312	@ 0x138
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	4605      	mov	r5, r0
 8013da4:	460c      	mov	r4, r1
 8013da6:	4610      	mov	r0, r2
 8013da8:	4619      	mov	r1, r3
 8013daa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dae:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8013db2:	462a      	mov	r2, r5
 8013db4:	701a      	strb	r2, [r3, #0]
 8013db6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013dbe:	4622      	mov	r2, r4
 8013dc0:	801a      	strh	r2, [r3, #0]
 8013dc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dc6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8013dca:	4602      	mov	r2, r0
 8013dcc:	801a      	strh	r2, [r3, #0]
 8013dce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dd2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8013dd6:	460a      	mov	r2, r1
 8013dd8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8013dda:	f107 0310 	add.w	r3, r7, #16
 8013dde:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8013de2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8013de6:	3308      	adds	r3, #8
 8013de8:	f107 0210 	add.w	r2, r7, #16
 8013dec:	4413      	add	r3, r2
 8013dee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8013df2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8013df6:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8013dfa:	4413      	add	r3, r2
 8013dfc:	3309      	adds	r3, #9
 8013dfe:	f107 0210 	add.w	r2, r7, #16
 8013e02:	4413      	add	r3, r2
 8013e04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8013e08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e0c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013e10:	2200      	movs	r2, #0
 8013e12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8013e14:	2300      	movs	r3, #0
 8013e16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8013e1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013e1e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8013e22:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8013e26:	7812      	ldrb	r2, [r2, #0]
 8013e28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8013e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e2e:	3301      	adds	r3, #1
 8013e30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8013e34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013e38:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8013e3c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8013e40:	8812      	ldrh	r2, [r2, #0]
 8013e42:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8013e46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e4a:	3302      	adds	r3, #2
 8013e4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8013e50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013e54:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8013e58:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8013e5c:	8812      	ldrh	r2, [r2, #0]
 8013e5e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8013e62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e66:	3302      	adds	r3, #2
 8013e68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8013e6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013e70:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8013e74:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8013e78:	7812      	ldrb	r2, [r2, #0]
 8013e7a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8013e7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e80:	3301      	adds	r3, #1
 8013e82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8013e86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013e8a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8013e8e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8013e90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013e94:	3301      	adds	r3, #1
 8013e96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8013e9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013e9e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8013ea2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8013ea4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013ea8:	3301      	adds	r3, #1
 8013eaa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8013eae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013eb2:	3308      	adds	r3, #8
 8013eb4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8013eb8:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f001 fb0b 	bl	80154d8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8013ec2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8013ec6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8013eca:	4413      	add	r3, r2
 8013ecc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8013ed0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013ed4:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8013ed8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8013eda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013ede:	3301      	adds	r3, #1
 8013ee0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8013ee4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013ee8:	3301      	adds	r3, #1
 8013eea:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8013eee:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f001 faf0 	bl	80154d8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8013ef8:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8013efc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8013f00:	4413      	add	r3, r2
 8013f02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8013f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013f0a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8013f0e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8013f10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f14:	3302      	adds	r3, #2
 8013f16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8013f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013f1e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8013f22:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8013f24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f28:	3302      	adds	r3, #2
 8013f2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013f2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013f32:	2218      	movs	r2, #24
 8013f34:	2100      	movs	r1, #0
 8013f36:	4618      	mov	r0, r3
 8013f38:	f001 fade 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8013f3c:	233f      	movs	r3, #63	@ 0x3f
 8013f3e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8013f42:	2383      	movs	r3, #131	@ 0x83
 8013f44:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8013f48:	f107 0310 	add.w	r3, r7, #16
 8013f4c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8013f50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f54:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8013f58:	f107 030f 	add.w	r3, r7, #15
 8013f5c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8013f60:	2301      	movs	r3, #1
 8013f62:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013f66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8013f6a:	2100      	movs	r1, #0
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f001 fc47 	bl	8015800 <hci_send_req>
 8013f72:	4603      	mov	r3, r0
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	da01      	bge.n	8013f7c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8013f78:	23ff      	movs	r3, #255	@ 0xff
 8013f7a:	e004      	b.n	8013f86 <aci_gap_set_discoverable+0x1ea>
  return status;
 8013f7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f80:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013f84:	781b      	ldrb	r3, [r3, #0]
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bdb0      	pop	{r4, r5, r7, pc}

08013f90 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8013f90:	b590      	push	{r4, r7, lr}
 8013f92:	b0cd      	sub	sp, #308	@ 0x134
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	4604      	mov	r4, r0
 8013f98:	4608      	mov	r0, r1
 8013f9a:	4611      	mov	r1, r2
 8013f9c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013fa0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8013fa4:	6013      	str	r3, [r2, #0]
 8013fa6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013faa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013fae:	4622      	mov	r2, r4
 8013fb0:	701a      	strb	r2, [r3, #0]
 8013fb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013fb6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8013fba:	4602      	mov	r2, r0
 8013fbc:	701a      	strb	r2, [r3, #0]
 8013fbe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013fc2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8013fc6:	460a      	mov	r2, r1
 8013fc8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8013fca:	f107 0310 	add.w	r3, r7, #16
 8013fce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8013fd2:	f107 0308 	add.w	r3, r7, #8
 8013fd6:	2207      	movs	r2, #7
 8013fd8:	2100      	movs	r1, #0
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f001 fa8c 	bl	80154f8 <Osal_MemSet>
  int index_input = 0;
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8013fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013fea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013fee:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8013ff2:	7812      	ldrb	r2, [r2, #0]
 8013ff4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8013ff6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8014000:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014004:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014008:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801400c:	7812      	ldrb	r2, [r2, #0]
 801400e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014010:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014014:	3301      	adds	r3, #1
 8014016:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 801401a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801401e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014022:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8014026:	7812      	ldrb	r2, [r2, #0]
 8014028:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801402a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801402e:	3301      	adds	r3, #1
 8014030:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014034:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014038:	2218      	movs	r2, #24
 801403a:	2100      	movs	r1, #0
 801403c:	4618      	mov	r0, r3
 801403e:	f001 fa5b 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014042:	233f      	movs	r3, #63	@ 0x3f
 8014044:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8014048:	238a      	movs	r3, #138	@ 0x8a
 801404a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801404e:	f107 0310 	add.w	r3, r7, #16
 8014052:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014056:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801405a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 801405e:	f107 0308 	add.w	r3, r7, #8
 8014062:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8014066:	2307      	movs	r3, #7
 8014068:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801406c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014070:	2100      	movs	r1, #0
 8014072:	4618      	mov	r0, r3
 8014074:	f001 fbc4 	bl	8015800 <hci_send_req>
 8014078:	4603      	mov	r3, r0
 801407a:	2b00      	cmp	r3, #0
 801407c:	da01      	bge.n	8014082 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 801407e:	23ff      	movs	r3, #255	@ 0xff
 8014080:	e02e      	b.n	80140e0 <aci_gap_init+0x150>
  if ( resp.Status )
 8014082:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014086:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d005      	beq.n	801409c <aci_gap_init+0x10c>
    return resp.Status;
 8014090:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014094:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014098:	781b      	ldrb	r3, [r3, #0]
 801409a:	e021      	b.n	80140e0 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 801409c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80140a0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80140a4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80140a8:	b29a      	uxth	r2, r3
 80140aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80140ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80140b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80140ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80140be:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80140c2:	b29a      	uxth	r2, r3
 80140c4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80140c8:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80140ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80140ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80140d2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80140dc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80140de:	2300      	movs	r3, #0
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd90      	pop	{r4, r7, pc}

080140ea <aci_gap_terminate>:
  return status;
}

tBleStatus aci_gap_terminate( uint16_t Connection_Handle,
                              uint8_t Reason )
{
 80140ea:	b580      	push	{r7, lr}
 80140ec:	b0cc      	sub	sp, #304	@ 0x130
 80140ee:	af00      	add	r7, sp, #0
 80140f0:	4602      	mov	r2, r0
 80140f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80140f6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80140fa:	801a      	strh	r2, [r3, #0]
 80140fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014100:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8014104:	460a      	mov	r2, r1
 8014106:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_cp0 *cp0 = (aci_gap_terminate_cp0*)(cmd_buffer);
 8014108:	f107 0310 	add.w	r3, r7, #16
 801410c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014110:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014114:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014118:	2200      	movs	r2, #0
 801411a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801411c:	2300      	movs	r3, #0
 801411e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8014122:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014126:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801412a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801412e:	8812      	ldrh	r2, [r2, #0]
 8014130:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014132:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014136:	3302      	adds	r3, #2
 8014138:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Reason = Reason;
 801413c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014140:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014144:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8014148:	7812      	ldrb	r2, [r2, #0]
 801414a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801414c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014150:	3301      	adds	r3, #1
 8014152:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014156:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801415a:	2218      	movs	r2, #24
 801415c:	2100      	movs	r1, #0
 801415e:	4618      	mov	r0, r3
 8014160:	f001 f9ca 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014164:	233f      	movs	r3, #63	@ 0x3f
 8014166:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x093;
 801416a:	2393      	movs	r3, #147	@ 0x93
 801416c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8014170:	230f      	movs	r3, #15
 8014172:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8014176:	f107 0310 	add.w	r3, r7, #16
 801417a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801417e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014182:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014186:	f107 030f 	add.w	r3, r7, #15
 801418a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801418e:	2301      	movs	r3, #1
 8014190:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014194:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014198:	2100      	movs	r1, #0
 801419a:	4618      	mov	r0, r3
 801419c:	f001 fb30 	bl	8015800 <hci_send_req>
 80141a0:	4603      	mov	r3, r0
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	da01      	bge.n	80141aa <aci_gap_terminate+0xc0>
    return BLE_STATUS_TIMEOUT;
 80141a6:	23ff      	movs	r3, #255	@ 0xff
 80141a8:	e004      	b.n	80141b4 <aci_gap_terminate+0xca>
  return status;
 80141aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80141ae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80141b2:	781b      	ldrb	r3, [r3, #0]
}
 80141b4:	4618      	mov	r0, r3
 80141b6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bd80      	pop	{r7, pc}

080141be <aci_gap_terminate_gap_proc>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_terminate_gap_proc( uint8_t Procedure_Code )
{
 80141be:	b580      	push	{r7, lr}
 80141c0:	b0cc      	sub	sp, #304	@ 0x130
 80141c2:	af00      	add	r7, sp, #0
 80141c4:	4602      	mov	r2, r0
 80141c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80141ca:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80141ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 80141d0:	f107 0310 	add.w	r3, r7, #16
 80141d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80141d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80141dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80141e0:	2200      	movs	r2, #0
 80141e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80141e4:	2300      	movs	r3, #0
 80141e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Procedure_Code = Procedure_Code;
 80141ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80141ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80141f2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80141f6:	7812      	ldrb	r2, [r2, #0]
 80141f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80141fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80141fe:	3301      	adds	r3, #1
 8014200:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014204:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014208:	2218      	movs	r2, #24
 801420a:	2100      	movs	r1, #0
 801420c:	4618      	mov	r0, r3
 801420e:	f001 f973 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014212:	233f      	movs	r3, #63	@ 0x3f
 8014214:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x09d;
 8014218:	239d      	movs	r3, #157	@ 0x9d
 801421a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801421e:	f107 0310 	add.w	r3, r7, #16
 8014222:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014226:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801422a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801422e:	f107 030f 	add.w	r3, r7, #15
 8014232:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014236:	2301      	movs	r3, #1
 8014238:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801423c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014240:	2100      	movs	r1, #0
 8014242:	4618      	mov	r0, r3
 8014244:	f001 fadc 	bl	8015800 <hci_send_req>
 8014248:	4603      	mov	r3, r0
 801424a:	2b00      	cmp	r3, #0
 801424c:	da01      	bge.n	8014252 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 801424e:	23ff      	movs	r3, #255	@ 0xff
 8014250:	e004      	b.n	801425c <aci_gap_terminate_gap_proc+0x9e>
  return status;
 8014252:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014256:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801425a:	781b      	ldrb	r3, [r3, #0]
}
 801425c:	4618      	mov	r0, r3
 801425e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}

08014266 <aci_gap_start_observation_proc>:
                                           uint16_t LE_Scan_Window,
                                           uint8_t LE_Scan_Type,
                                           uint8_t Own_Address_Type,
                                           uint8_t Filter_Duplicates,
                                           uint8_t Scanning_Filter_Policy )
{
 8014266:	b5b0      	push	{r4, r5, r7, lr}
 8014268:	b0cc      	sub	sp, #304	@ 0x130
 801426a:	af00      	add	r7, sp, #0
 801426c:	4605      	mov	r5, r0
 801426e:	460c      	mov	r4, r1
 8014270:	4610      	mov	r0, r2
 8014272:	4619      	mov	r1, r3
 8014274:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014278:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801427c:	462a      	mov	r2, r5
 801427e:	801a      	strh	r2, [r3, #0]
 8014280:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014284:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014288:	4622      	mov	r2, r4
 801428a:	801a      	strh	r2, [r3, #0]
 801428c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014290:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8014294:	4602      	mov	r2, r0
 8014296:	701a      	strb	r2, [r3, #0]
 8014298:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801429c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80142a0:	460a      	mov	r2, r1
 80142a2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_observation_proc_cp0 *cp0 = (aci_gap_start_observation_proc_cp0*)(cmd_buffer);
 80142a4:	f107 0310 	add.w	r3, r7, #16
 80142a8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80142ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80142b0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80142b4:	2200      	movs	r2, #0
 80142b6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80142b8:	2300      	movs	r3, #0
 80142ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 80142be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80142c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80142c6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80142ca:	8812      	ldrh	r2, [r2, #0]
 80142cc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80142ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80142d2:	3302      	adds	r3, #2
 80142d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 80142d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80142dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80142e0:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80142e4:	8812      	ldrh	r2, [r2, #0]
 80142e6:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80142e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80142ec:	3302      	adds	r3, #2
 80142ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->LE_Scan_Type = LE_Scan_Type;
 80142f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80142f6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80142fa:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80142fe:	7812      	ldrb	r2, [r2, #0]
 8014300:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8014302:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014306:	3301      	adds	r3, #1
 8014308:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 801430c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014310:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014314:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8014318:	7812      	ldrb	r2, [r2, #0]
 801431a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801431c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014320:	3301      	adds	r3, #1
 8014322:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 8014326:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801432a:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 801432e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014330:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014334:	3301      	adds	r3, #1
 8014336:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Scanning_Filter_Policy = Scanning_Filter_Policy;
 801433a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801433e:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8014342:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8014344:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014348:	3301      	adds	r3, #1
 801434a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801434e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014352:	2218      	movs	r2, #24
 8014354:	2100      	movs	r1, #0
 8014356:	4618      	mov	r0, r3
 8014358:	f001 f8ce 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 801435c:	233f      	movs	r3, #63	@ 0x3f
 801435e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a2;
 8014362:	23a2      	movs	r3, #162	@ 0xa2
 8014364:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8014368:	230f      	movs	r3, #15
 801436a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 801436e:	f107 0310 	add.w	r3, r7, #16
 8014372:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014376:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801437a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801437e:	f107 030f 	add.w	r3, r7, #15
 8014382:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014386:	2301      	movs	r3, #1
 8014388:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801438c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014390:	2100      	movs	r1, #0
 8014392:	4618      	mov	r0, r3
 8014394:	f001 fa34 	bl	8015800 <hci_send_req>
 8014398:	4603      	mov	r3, r0
 801439a:	2b00      	cmp	r3, #0
 801439c:	da01      	bge.n	80143a2 <aci_gap_start_observation_proc+0x13c>
    return BLE_STATUS_TIMEOUT;
 801439e:	23ff      	movs	r3, #255	@ 0xff
 80143a0:	e004      	b.n	80143ac <aci_gap_start_observation_proc+0x146>
  return status;
 80143a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80143a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80143aa:	781b      	ldrb	r3, [r3, #0]
}
 80143ac:	4618      	mov	r0, r3
 80143ae:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80143b2:	46bd      	mov	sp, r7
 80143b4:	bdb0      	pop	{r4, r5, r7, pc}

080143b6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80143b6:	b580      	push	{r7, lr}
 80143b8:	b088      	sub	sp, #32
 80143ba:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80143bc:	2300      	movs	r3, #0
 80143be:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80143c0:	f107 0308 	add.w	r3, r7, #8
 80143c4:	2218      	movs	r2, #24
 80143c6:	2100      	movs	r1, #0
 80143c8:	4618      	mov	r0, r3
 80143ca:	f001 f895 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80143ce:	233f      	movs	r3, #63	@ 0x3f
 80143d0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80143d2:	f240 1301 	movw	r3, #257	@ 0x101
 80143d6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80143d8:	1dfb      	adds	r3, r7, #7
 80143da:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80143dc:	2301      	movs	r3, #1
 80143de:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80143e0:	f107 0308 	add.w	r3, r7, #8
 80143e4:	2100      	movs	r1, #0
 80143e6:	4618      	mov	r0, r3
 80143e8:	f001 fa0a 	bl	8015800 <hci_send_req>
 80143ec:	4603      	mov	r3, r0
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	da01      	bge.n	80143f6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80143f2:	23ff      	movs	r3, #255	@ 0xff
 80143f4:	e000      	b.n	80143f8 <aci_gatt_init+0x42>
  return status;
 80143f6:	79fb      	ldrb	r3, [r7, #7]
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	3720      	adds	r7, #32
 80143fc:	46bd      	mov	sp, r7
 80143fe:	bd80      	pop	{r7, pc}

08014400 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8014400:	b590      	push	{r4, r7, lr}
 8014402:	b0cf      	sub	sp, #316	@ 0x13c
 8014404:	af00      	add	r7, sp, #0
 8014406:	4604      	mov	r4, r0
 8014408:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 801440c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8014410:	6001      	str	r1, [r0, #0]
 8014412:	4610      	mov	r0, r2
 8014414:	4619      	mov	r1, r3
 8014416:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801441a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801441e:	4622      	mov	r2, r4
 8014420:	701a      	strb	r2, [r3, #0]
 8014422:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014426:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801442a:	4602      	mov	r2, r0
 801442c:	701a      	strb	r2, [r3, #0]
 801442e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014432:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8014436:	460a      	mov	r2, r1
 8014438:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 801443a:	f107 0310 	add.w	r3, r7, #16
 801443e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8014442:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014446:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	2b01      	cmp	r3, #1
 801444e:	d00a      	beq.n	8014466 <aci_gatt_add_service+0x66>
 8014450:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014454:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8014458:	781b      	ldrb	r3, [r3, #0]
 801445a:	2b02      	cmp	r3, #2
 801445c:	d101      	bne.n	8014462 <aci_gatt_add_service+0x62>
 801445e:	2311      	movs	r3, #17
 8014460:	e002      	b.n	8014468 <aci_gatt_add_service+0x68>
 8014462:	2301      	movs	r3, #1
 8014464:	e000      	b.n	8014468 <aci_gatt_add_service+0x68>
 8014466:	2303      	movs	r3, #3
 8014468:	f107 0210 	add.w	r2, r7, #16
 801446c:	4413      	add	r3, r2
 801446e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8014472:	f107 030c 	add.w	r3, r7, #12
 8014476:	2203      	movs	r2, #3
 8014478:	2100      	movs	r1, #0
 801447a:	4618      	mov	r0, r3
 801447c:	f001 f83c 	bl	80154f8 <Osal_MemSet>
  int index_input = 0;
 8014480:	2300      	movs	r3, #0
 8014482:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8014486:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801448a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801448e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8014492:	7812      	ldrb	r2, [r2, #0]
 8014494:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014496:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801449a:	3301      	adds	r3, #1
 801449c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80144a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144a4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80144a8:	781b      	ldrb	r3, [r3, #0]
 80144aa:	2b01      	cmp	r3, #1
 80144ac:	d002      	beq.n	80144b4 <aci_gatt_add_service+0xb4>
 80144ae:	2b02      	cmp	r3, #2
 80144b0:	d004      	beq.n	80144bc <aci_gatt_add_service+0xbc>
 80144b2:	e007      	b.n	80144c4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80144b4:	2302      	movs	r3, #2
 80144b6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80144ba:	e005      	b.n	80144c8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80144bc:	2310      	movs	r3, #16
 80144be:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80144c2:	e001      	b.n	80144c8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80144c4:	2397      	movs	r3, #151	@ 0x97
 80144c6:	e06c      	b.n	80145a2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80144c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80144cc:	1c58      	adds	r0, r3, #1
 80144ce:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80144d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144d6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80144da:	6819      	ldr	r1, [r3, #0]
 80144dc:	f000 fffc 	bl	80154d8 <Osal_MemCpy>
    index_input += size;
 80144e0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80144e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80144e8:	4413      	add	r3, r2
 80144ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 80144ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80144f2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80144f6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80144fa:	7812      	ldrb	r2, [r2, #0]
 80144fc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80144fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014502:	3301      	adds	r3, #1
 8014504:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8014508:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801450c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014510:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8014514:	7812      	ldrb	r2, [r2, #0]
 8014516:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8014518:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801451c:	3301      	adds	r3, #1
 801451e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014522:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014526:	2218      	movs	r2, #24
 8014528:	2100      	movs	r1, #0
 801452a:	4618      	mov	r0, r3
 801452c:	f000 ffe4 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014530:	233f      	movs	r3, #63	@ 0x3f
 8014532:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8014536:	f44f 7381 	mov.w	r3, #258	@ 0x102
 801453a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801453e:	f107 0310 	add.w	r3, r7, #16
 8014542:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014546:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801454a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 801454e:	f107 030c 	add.w	r3, r7, #12
 8014552:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8014556:	2303      	movs	r3, #3
 8014558:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801455c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014560:	2100      	movs	r1, #0
 8014562:	4618      	mov	r0, r3
 8014564:	f001 f94c 	bl	8015800 <hci_send_req>
 8014568:	4603      	mov	r3, r0
 801456a:	2b00      	cmp	r3, #0
 801456c:	da01      	bge.n	8014572 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 801456e:	23ff      	movs	r3, #255	@ 0xff
 8014570:	e017      	b.n	80145a2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8014572:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014576:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d005      	beq.n	801458c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8014580:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014584:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014588:	781b      	ldrb	r3, [r3, #0]
 801458a:	e00a      	b.n	80145a2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 801458c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014590:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014594:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014598:	b29a      	uxth	r2, r3
 801459a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801459e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80145a0:	2300      	movs	r3, #0
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd90      	pop	{r4, r7, pc}

080145ac <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80145ac:	b590      	push	{r4, r7, lr}
 80145ae:	b0d1      	sub	sp, #324	@ 0x144
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	4604      	mov	r4, r0
 80145b4:	4608      	mov	r0, r1
 80145b6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80145ba:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80145be:	600a      	str	r2, [r1, #0]
 80145c0:	4619      	mov	r1, r3
 80145c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80145c6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80145ca:	4622      	mov	r2, r4
 80145cc:	801a      	strh	r2, [r3, #0]
 80145ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80145d2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80145d6:	4602      	mov	r2, r0
 80145d8:	701a      	strb	r2, [r3, #0]
 80145da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80145de:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 80145e2:	460a      	mov	r2, r1
 80145e4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80145e6:	f107 0318 	add.w	r3, r7, #24
 80145ea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80145ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80145f2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80145f6:	781b      	ldrb	r3, [r3, #0]
 80145f8:	2b01      	cmp	r3, #1
 80145fa:	d00a      	beq.n	8014612 <aci_gatt_add_char+0x66>
 80145fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014600:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8014604:	781b      	ldrb	r3, [r3, #0]
 8014606:	2b02      	cmp	r3, #2
 8014608:	d101      	bne.n	801460e <aci_gatt_add_char+0x62>
 801460a:	2313      	movs	r3, #19
 801460c:	e002      	b.n	8014614 <aci_gatt_add_char+0x68>
 801460e:	2303      	movs	r3, #3
 8014610:	e000      	b.n	8014614 <aci_gatt_add_char+0x68>
 8014612:	2305      	movs	r3, #5
 8014614:	f107 0218 	add.w	r2, r7, #24
 8014618:	4413      	add	r3, r2
 801461a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801461e:	f107 0314 	add.w	r3, r7, #20
 8014622:	2203      	movs	r2, #3
 8014624:	2100      	movs	r1, #0
 8014626:	4618      	mov	r0, r3
 8014628:	f000 ff66 	bl	80154f8 <Osal_MemSet>
  int index_input = 0;
 801462c:	2300      	movs	r3, #0
 801462e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8014632:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014636:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801463a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801463e:	8812      	ldrh	r2, [r2, #0]
 8014640:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014642:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014646:	3302      	adds	r3, #2
 8014648:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 801464c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014650:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8014654:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8014658:	7812      	ldrb	r2, [r2, #0]
 801465a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801465c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014660:	3301      	adds	r3, #1
 8014662:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8014666:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801466a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801466e:	781b      	ldrb	r3, [r3, #0]
 8014670:	2b01      	cmp	r3, #1
 8014672:	d002      	beq.n	801467a <aci_gatt_add_char+0xce>
 8014674:	2b02      	cmp	r3, #2
 8014676:	d004      	beq.n	8014682 <aci_gatt_add_char+0xd6>
 8014678:	e007      	b.n	801468a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 801467a:	2302      	movs	r3, #2
 801467c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8014680:	e005      	b.n	801468e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8014682:	2310      	movs	r3, #16
 8014684:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8014688:	e001      	b.n	801468e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 801468a:	2397      	movs	r3, #151	@ 0x97
 801468c:	e091      	b.n	80147b2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 801468e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014692:	1cd8      	adds	r0, r3, #3
 8014694:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8014698:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801469c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80146a0:	6819      	ldr	r1, [r3, #0]
 80146a2:	f000 ff19 	bl	80154d8 <Osal_MemCpy>
    index_input += size;
 80146a6:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80146aa:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80146ae:	4413      	add	r3, r2
 80146b0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80146b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80146b8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80146bc:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80146c0:	8812      	ldrh	r2, [r2, #0]
 80146c2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80146c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80146c8:	3302      	adds	r3, #2
 80146ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80146ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80146d2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80146d6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80146d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80146dc:	3301      	adds	r3, #1
 80146de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80146e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80146e6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80146ea:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80146ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80146f0:	3301      	adds	r3, #1
 80146f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80146f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80146fa:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 80146fe:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8014700:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014704:	3301      	adds	r3, #1
 8014706:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 801470a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801470e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8014712:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8014714:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014718:	3301      	adds	r3, #1
 801471a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 801471e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014722:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8014726:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8014728:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801472c:	3301      	adds	r3, #1
 801472e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014732:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014736:	2218      	movs	r2, #24
 8014738:	2100      	movs	r1, #0
 801473a:	4618      	mov	r0, r3
 801473c:	f000 fedc 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014740:	233f      	movs	r3, #63	@ 0x3f
 8014742:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8014746:	f44f 7382 	mov.w	r3, #260	@ 0x104
 801474a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 801474e:	f107 0318 	add.w	r3, r7, #24
 8014752:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8014756:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801475a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 801475e:	f107 0314 	add.w	r3, r7, #20
 8014762:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8014766:	2303      	movs	r3, #3
 8014768:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 801476c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014770:	2100      	movs	r1, #0
 8014772:	4618      	mov	r0, r3
 8014774:	f001 f844 	bl	8015800 <hci_send_req>
 8014778:	4603      	mov	r3, r0
 801477a:	2b00      	cmp	r3, #0
 801477c:	da01      	bge.n	8014782 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 801477e:	23ff      	movs	r3, #255	@ 0xff
 8014780:	e017      	b.n	80147b2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8014782:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014786:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801478a:	781b      	ldrb	r3, [r3, #0]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d005      	beq.n	801479c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8014790:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014794:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014798:	781b      	ldrb	r3, [r3, #0]
 801479a:	e00a      	b.n	80147b2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 801479c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80147a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80147a4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80147a8:	b29a      	uxth	r2, r3
 80147aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80147ae:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80147b0:	2300      	movs	r3, #0
}
 80147b2:	4618      	mov	r0, r3
 80147b4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80147b8:	46bd      	mov	sp, r7
 80147ba:	bd90      	pop	{r4, r7, pc}

080147bc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80147bc:	b5b0      	push	{r4, r5, r7, lr}
 80147be:	b0cc      	sub	sp, #304	@ 0x130
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	4605      	mov	r5, r0
 80147c4:	460c      	mov	r4, r1
 80147c6:	4610      	mov	r0, r2
 80147c8:	4619      	mov	r1, r3
 80147ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80147ce:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80147d2:	462a      	mov	r2, r5
 80147d4:	801a      	strh	r2, [r3, #0]
 80147d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80147da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80147de:	4622      	mov	r2, r4
 80147e0:	801a      	strh	r2, [r3, #0]
 80147e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80147e6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80147ea:	4602      	mov	r2, r0
 80147ec:	701a      	strb	r2, [r3, #0]
 80147ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80147f2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80147f6:	460a      	mov	r2, r1
 80147f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80147fa:	f107 0310 	add.w	r3, r7, #16
 80147fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014802:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014806:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801480a:	2200      	movs	r2, #0
 801480c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801480e:	2300      	movs	r3, #0
 8014810:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8014814:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014818:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801481c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014820:	8812      	ldrh	r2, [r2, #0]
 8014822:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014824:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014828:	3302      	adds	r3, #2
 801482a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 801482e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014832:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014836:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 801483a:	8812      	ldrh	r2, [r2, #0]
 801483c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 801483e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014842:	3302      	adds	r3, #2
 8014844:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8014848:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801484c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014850:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8014854:	7812      	ldrb	r2, [r2, #0]
 8014856:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8014858:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801485c:	3301      	adds	r3, #1
 801485e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8014862:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014866:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801486a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 801486e:	7812      	ldrb	r2, [r2, #0]
 8014870:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014872:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014876:	3301      	adds	r3, #1
 8014878:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 801487c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014880:	1d98      	adds	r0, r3, #6
 8014882:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014886:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801488a:	781b      	ldrb	r3, [r3, #0]
 801488c:	461a      	mov	r2, r3
 801488e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8014892:	f000 fe21 	bl	80154d8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8014896:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801489a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801489e:	781b      	ldrb	r3, [r3, #0]
 80148a0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80148a4:	4413      	add	r3, r2
 80148a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80148aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80148ae:	2218      	movs	r2, #24
 80148b0:	2100      	movs	r1, #0
 80148b2:	4618      	mov	r0, r3
 80148b4:	f000 fe20 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80148b8:	233f      	movs	r3, #63	@ 0x3f
 80148ba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80148be:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80148c2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80148c6:	f107 0310 	add.w	r3, r7, #16
 80148ca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80148ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80148d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80148d6:	f107 030f 	add.w	r3, r7, #15
 80148da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80148de:	2301      	movs	r3, #1
 80148e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80148e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80148e8:	2100      	movs	r1, #0
 80148ea:	4618      	mov	r0, r3
 80148ec:	f000 ff88 	bl	8015800 <hci_send_req>
 80148f0:	4603      	mov	r3, r0
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	da01      	bge.n	80148fa <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80148f6:	23ff      	movs	r3, #255	@ 0xff
 80148f8:	e004      	b.n	8014904 <aci_gatt_update_char_value+0x148>
  return status;
 80148fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80148fe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014902:	781b      	ldrb	r3, [r3, #0]
}
 8014904:	4618      	mov	r0, r3
 8014906:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801490a:	46bd      	mov	sp, r7
 801490c:	bdb0      	pop	{r4, r5, r7, pc}

0801490e <aci_gatt_del_char>:

tBleStatus aci_gatt_del_char( uint16_t Serv_Handle,
                              uint16_t Char_Handle )
{
 801490e:	b580      	push	{r7, lr}
 8014910:	b0cc      	sub	sp, #304	@ 0x130
 8014912:	af00      	add	r7, sp, #0
 8014914:	4602      	mov	r2, r0
 8014916:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801491a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801491e:	801a      	strh	r2, [r3, #0]
 8014920:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014924:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014928:	460a      	mov	r2, r1
 801492a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_del_char_cp0 *cp0 = (aci_gatt_del_char_cp0*)(cmd_buffer);
 801492c:	f107 0310 	add.w	r3, r7, #16
 8014930:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014934:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014938:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801493c:	2200      	movs	r2, #0
 801493e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014940:	2300      	movs	r3, #0
 8014942:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Serv_Handle = Serv_Handle;
 8014946:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801494a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801494e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014952:	8812      	ldrh	r2, [r2, #0]
 8014954:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014956:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801495a:	3302      	adds	r3, #2
 801495c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8014960:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014964:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014968:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 801496c:	8812      	ldrh	r2, [r2, #0]
 801496e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8014970:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014974:	3302      	adds	r3, #2
 8014976:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801497a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801497e:	2218      	movs	r2, #24
 8014980:	2100      	movs	r1, #0
 8014982:	4618      	mov	r0, r3
 8014984:	f000 fdb8 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014988:	233f      	movs	r3, #63	@ 0x3f
 801498a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x107;
 801498e:	f240 1307 	movw	r3, #263	@ 0x107
 8014992:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014996:	f107 0310 	add.w	r3, r7, #16
 801499a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801499e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80149a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80149a6:	f107 030f 	add.w	r3, r7, #15
 80149aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80149ae:	2301      	movs	r3, #1
 80149b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80149b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80149b8:	2100      	movs	r1, #0
 80149ba:	4618      	mov	r0, r3
 80149bc:	f000 ff20 	bl	8015800 <hci_send_req>
 80149c0:	4603      	mov	r3, r0
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	da01      	bge.n	80149ca <aci_gatt_del_char+0xbc>
    return BLE_STATUS_TIMEOUT;
 80149c6:	23ff      	movs	r3, #255	@ 0xff
 80149c8:	e004      	b.n	80149d4 <aci_gatt_del_char+0xc6>
  return status;
 80149ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80149ce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80149d2:	781b      	ldrb	r3, [r3, #0]
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}

080149de <aci_gatt_del_service>:

tBleStatus aci_gatt_del_service( uint16_t Serv_Handle )
{
 80149de:	b580      	push	{r7, lr}
 80149e0:	b0cc      	sub	sp, #304	@ 0x130
 80149e2:	af00      	add	r7, sp, #0
 80149e4:	4602      	mov	r2, r0
 80149e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80149ea:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80149ee:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_del_service_cp0 *cp0 = (aci_gatt_del_service_cp0*)(cmd_buffer);
 80149f0:	f107 0310 	add.w	r3, r7, #16
 80149f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80149f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80149fc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014a00:	2200      	movs	r2, #0
 8014a02:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014a04:	2300      	movs	r3, #0
 8014a06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Serv_Handle = Serv_Handle;
 8014a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014a0e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014a12:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014a16:	8812      	ldrh	r2, [r2, #0]
 8014a18:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014a1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a1e:	3302      	adds	r3, #2
 8014a20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014a24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014a28:	2218      	movs	r2, #24
 8014a2a:	2100      	movs	r1, #0
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f000 fd63 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014a32:	233f      	movs	r3, #63	@ 0x3f
 8014a34:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x108;
 8014a38:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8014a3c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014a40:	f107 0310 	add.w	r3, r7, #16
 8014a44:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014a48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a4c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014a50:	f107 030f 	add.w	r3, r7, #15
 8014a54:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014a58:	2301      	movs	r3, #1
 8014a5a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014a5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014a62:	2100      	movs	r1, #0
 8014a64:	4618      	mov	r0, r3
 8014a66:	f000 fecb 	bl	8015800 <hci_send_req>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	da01      	bge.n	8014a74 <aci_gatt_del_service+0x96>
    return BLE_STATUS_TIMEOUT;
 8014a70:	23ff      	movs	r3, #255	@ 0xff
 8014a72:	e004      	b.n	8014a7e <aci_gatt_del_service+0xa0>
  return status;
 8014a74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014a78:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014a7c:	781b      	ldrb	r3, [r3, #0]
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}

08014a88 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b0cc      	sub	sp, #304	@ 0x130
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	4602      	mov	r2, r0
 8014a90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014a94:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014a98:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8014a9a:	f107 0310 	add.w	r3, r7, #16
 8014a9e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014aa2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014aa6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014aaa:	2200      	movs	r2, #0
 8014aac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014aae:	2300      	movs	r3, #0
 8014ab0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8014ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014ab8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014abc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014ac0:	8812      	ldrh	r2, [r2, #0]
 8014ac2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014ac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ac8:	3302      	adds	r3, #2
 8014aca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014ace:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014ad2:	2218      	movs	r2, #24
 8014ad4:	2100      	movs	r1, #0
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f000 fd0e 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014adc:	233f      	movs	r3, #63	@ 0x3f
 8014ade:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 8014ae2:	f240 1327 	movw	r3, #295	@ 0x127
 8014ae6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014aea:	f107 0310 	add.w	r3, r7, #16
 8014aee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014af2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014af6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014afa:	f107 030f 	add.w	r3, r7, #15
 8014afe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014b02:	2301      	movs	r3, #1
 8014b04:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014b08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014b0c:	2100      	movs	r1, #0
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f000 fe76 	bl	8015800 <hci_send_req>
 8014b14:	4603      	mov	r3, r0
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	da01      	bge.n	8014b1e <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8014b1a:	23ff      	movs	r3, #255	@ 0xff
 8014b1c:	e004      	b.n	8014b28 <aci_gatt_allow_read+0xa0>
  return status;
 8014b1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b22:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014b26:	781b      	ldrb	r3, [r3, #0]
}
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}

08014b32 <aci_gatt_update_char_value_ext>:
                                           uint8_t Update_Type,
                                           uint16_t Char_Length,
                                           uint16_t Value_Offset,
                                           uint8_t Value_Length,
                                           const uint8_t* Value )
{
 8014b32:	b5b0      	push	{r4, r5, r7, lr}
 8014b34:	b0cc      	sub	sp, #304	@ 0x130
 8014b36:	af00      	add	r7, sp, #0
 8014b38:	4605      	mov	r5, r0
 8014b3a:	460c      	mov	r4, r1
 8014b3c:	4610      	mov	r0, r2
 8014b3e:	4619      	mov	r1, r3
 8014b40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b44:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014b48:	462a      	mov	r2, r5
 8014b4a:	801a      	strh	r2, [r3, #0]
 8014b4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b54:	4622      	mov	r2, r4
 8014b56:	801a      	strh	r2, [r3, #0]
 8014b58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b5c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8014b60:	4602      	mov	r2, r0
 8014b62:	801a      	strh	r2, [r3, #0]
 8014b64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b68:	f2a3 132f 	subw	r3, r3, #303	@ 0x12f
 8014b6c:	460a      	mov	r2, r1
 8014b6e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_ext_cp0 *cp0 = (aci_gatt_update_char_value_ext_cp0*)(cmd_buffer);
 8014b70:	f107 0310 	add.w	r3, r7, #16
 8014b74:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014b78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b7c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014b80:	2200      	movs	r2, #0
 8014b82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014b84:	2300      	movs	r3, #0
 8014b86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Handle_To_Notify = Conn_Handle_To_Notify;
 8014b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014b8e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014b92:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014b96:	8812      	ldrh	r2, [r2, #0]
 8014b98:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014b9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b9e:	3302      	adds	r3, #2
 8014ba0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8014ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014ba8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014bac:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8014bb0:	8812      	ldrh	r2, [r2, #0]
 8014bb2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8014bb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bb8:	3302      	adds	r3, #2
 8014bba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8014bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014bc2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014bc6:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8014bca:	8812      	ldrh	r2, [r2, #0]
 8014bcc:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8014bce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bd2:	3302      	adds	r3, #2
 8014bd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Update_Type = Update_Type;
 8014bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014bdc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014be0:	f2a2 122f 	subw	r2, r2, #303	@ 0x12f
 8014be4:	7812      	ldrb	r2, [r2, #0]
 8014be6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014be8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bec:	3301      	adds	r3, #1
 8014bee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Length = Char_Length;
 8014bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014bf6:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8014bfa:	f8a3 2007 	strh.w	r2, [r3, #7]
  index_input += 2;
 8014bfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c02:	3302      	adds	r3, #2
 8014c04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Value_Offset = Value_Offset;
 8014c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014c0c:	f8b7 2144 	ldrh.w	r2, [r7, #324]	@ 0x144
 8014c10:	f8a3 2009 	strh.w	r2, [r3, #9]
  index_input += 2;
 8014c14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c18:	3302      	adds	r3, #2
 8014c1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Value_Length = Value_Length;
 8014c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014c22:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014c26:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8014c28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c2c:	3301      	adds	r3, #1
 8014c2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Value_Length );
 8014c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014c36:	330c      	adds	r3, #12
 8014c38:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014c3c:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8014c40:	4618      	mov	r0, r3
 8014c42:	f000 fc49 	bl	80154d8 <Osal_MemCpy>
  index_input += Value_Length;
 8014c46:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 8014c4a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014c4e:	4413      	add	r3, r2
 8014c50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014c54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014c58:	2218      	movs	r2, #24
 8014c5a:	2100      	movs	r1, #0
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f000 fc4b 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014c62:	233f      	movs	r3, #63	@ 0x3f
 8014c64:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x12c;
 8014c68:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8014c6c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014c70:	f107 0310 	add.w	r3, r7, #16
 8014c74:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014c78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c7c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014c80:	f107 030f 	add.w	r3, r7, #15
 8014c84:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014c88:	2301      	movs	r3, #1
 8014c8a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014c8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014c92:	2100      	movs	r1, #0
 8014c94:	4618      	mov	r0, r3
 8014c96:	f000 fdb3 	bl	8015800 <hci_send_req>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	da01      	bge.n	8014ca4 <aci_gatt_update_char_value_ext+0x172>
    return BLE_STATUS_TIMEOUT;
 8014ca0:	23ff      	movs	r3, #255	@ 0xff
 8014ca2:	e004      	b.n	8014cae <aci_gatt_update_char_value_ext+0x17c>
  return status;
 8014ca4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ca8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014cac:	781b      	ldrb	r3, [r3, #0]
}
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bdb0      	pop	{r4, r5, r7, pc}

08014cb8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b0cc      	sub	sp, #304	@ 0x130
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cc2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014cc6:	601a      	str	r2, [r3, #0]
 8014cc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ccc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014cd0:	4602      	mov	r2, r0
 8014cd2:	701a      	strb	r2, [r3, #0]
 8014cd4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cd8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014cdc:	460a      	mov	r2, r1
 8014cde:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8014ce0:	f107 0310 	add.w	r3, r7, #16
 8014ce4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014ce8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014cf0:	2200      	movs	r2, #0
 8014cf2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8014cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014cfe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014d02:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014d06:	7812      	ldrb	r2, [r2, #0]
 8014d08:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014d0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d0e:	3301      	adds	r3, #1
 8014d10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8014d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014d1c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014d20:	7812      	ldrb	r2, [r2, #0]
 8014d22:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014d24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d28:	3301      	adds	r3, #1
 8014d2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8014d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d32:	1c98      	adds	r0, r3, #2
 8014d34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d38:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014d3c:	781a      	ldrb	r2, [r3, #0]
 8014d3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d42:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014d46:	6819      	ldr	r1, [r3, #0]
 8014d48:	f000 fbc6 	bl	80154d8 <Osal_MemCpy>
  index_input += Length;
 8014d4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d50:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014d54:	781b      	ldrb	r3, [r3, #0]
 8014d56:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014d5a:	4413      	add	r3, r2
 8014d5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014d60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014d64:	2218      	movs	r2, #24
 8014d66:	2100      	movs	r1, #0
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f000 fbc5 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014d6e:	233f      	movs	r3, #63	@ 0x3f
 8014d70:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8014d74:	230c      	movs	r3, #12
 8014d76:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014d7a:	f107 0310 	add.w	r3, r7, #16
 8014d7e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014d82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014d8a:	f107 030f 	add.w	r3, r7, #15
 8014d8e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014d92:	2301      	movs	r3, #1
 8014d94:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014d98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014d9c:	2100      	movs	r1, #0
 8014d9e:	4618      	mov	r0, r3
 8014da0:	f000 fd2e 	bl	8015800 <hci_send_req>
 8014da4:	4603      	mov	r3, r0
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	da01      	bge.n	8014dae <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8014daa:	23ff      	movs	r3, #255	@ 0xff
 8014dac:	e004      	b.n	8014db8 <aci_hal_write_config_data+0x100>
  return status;
 8014dae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014db2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014db6:	781b      	ldrb	r3, [r3, #0]
}
 8014db8:	4618      	mov	r0, r3
 8014dba:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}

08014dc2 <aci_hal_read_config_data>:

tBleStatus aci_hal_read_config_data( uint8_t Offset,
                                     uint8_t* Data_Length,
                                     uint8_t* Data )
{
 8014dc2:	b580      	push	{r7, lr}
 8014dc4:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8014dce:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8014dd2:	6019      	str	r1, [r3, #0]
 8014dd4:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8014dd8:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8014ddc:	601a      	str	r2, [r3, #0]
 8014dde:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8014de2:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 8014de6:	4602      	mov	r2, r0
 8014de8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 8014dea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014dee:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
  aci_hal_read_config_data_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8014df2:	f107 0314 	add.w	r3, r7, #20
 8014df6:	22fc      	movs	r2, #252	@ 0xfc
 8014df8:	2100      	movs	r1, #0
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f000 fb7c 	bl	80154f8 <Osal_MemSet>
  int index_input = 0;
 8014e00:	2300      	movs	r3, #0
 8014e02:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
  cp0->Offset = Offset;
 8014e06:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8014e0a:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8014e0e:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 8014e12:	7812      	ldrb	r2, [r2, #0]
 8014e14:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014e16:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8014e1a:	3301      	adds	r3, #1
 8014e1c:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014e20:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014e24:	2218      	movs	r2, #24
 8014e26:	2100      	movs	r1, #0
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f000 fb65 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014e2e:	233f      	movs	r3, #63	@ 0x3f
 8014e30:	f8a7 3210 	strh.w	r3, [r7, #528]	@ 0x210
  rq.ocf = 0x00d;
 8014e34:	230d      	movs	r3, #13
 8014e36:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212
  rq.cparam = cmd_buffer;
 8014e3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014e3e:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
  rq.clen = index_input;
 8014e42:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8014e46:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
  rq.rparam = &resp;
 8014e4a:	f107 0314 	add.w	r3, r7, #20
 8014e4e:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
  rq.rlen = sizeof(resp);
 8014e52:	23fc      	movs	r3, #252	@ 0xfc
 8014e54:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014e58:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8014e5c:	2100      	movs	r1, #0
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f000 fcce 	bl	8015800 <hci_send_req>
 8014e64:	4603      	mov	r3, r0
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	da01      	bge.n	8014e6e <aci_hal_read_config_data+0xac>
    return BLE_STATUS_TIMEOUT;
 8014e6a:	23ff      	movs	r3, #255	@ 0xff
 8014e6c:	e029      	b.n	8014ec2 <aci_hal_read_config_data+0x100>
  if ( resp.Status )
 8014e6e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8014e72:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d005      	beq.n	8014e88 <aci_hal_read_config_data+0xc6>
    return resp.Status;
 8014e7c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8014e80:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	e01c      	b.n	8014ec2 <aci_hal_read_config_data+0x100>
  *Data_Length = resp.Data_Length;
 8014e88:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8014e8c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8014e90:	785a      	ldrb	r2, [r3, #1]
 8014e92:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8014e96:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	701a      	strb	r2, [r3, #0]
  Osal_MemCpy( (void*)Data, (const void*)resp.Data, *Data_Length);
 8014e9e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8014ea2:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	781b      	ldrb	r3, [r3, #0]
 8014eaa:	461a      	mov	r2, r3
 8014eac:	f107 0314 	add.w	r3, r7, #20
 8014eb0:	1c99      	adds	r1, r3, #2
 8014eb2:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8014eb6:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8014eba:	6818      	ldr	r0, [r3, #0]
 8014ebc:	f000 fb0c 	bl	80154d8 <Osal_MemCpy>
  return BLE_STATUS_SUCCESS;
 8014ec0:	2300      	movs	r3, #0
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}

08014ecc <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b0cc      	sub	sp, #304	@ 0x130
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	4602      	mov	r2, r0
 8014ed4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ed8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014edc:	701a      	strb	r2, [r3, #0]
 8014ede:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ee2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014ee6:	460a      	mov	r2, r1
 8014ee8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8014eea:	f107 0310 	add.w	r3, r7, #16
 8014eee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014ef2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ef6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014efa:	2200      	movs	r2, #0
 8014efc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014efe:	2300      	movs	r3, #0
 8014f00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8014f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014f0c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014f10:	7812      	ldrb	r2, [r2, #0]
 8014f12:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014f14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f18:	3301      	adds	r3, #1
 8014f1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8014f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f22:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014f26:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014f2a:	7812      	ldrb	r2, [r2, #0]
 8014f2c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014f2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f32:	3301      	adds	r3, #1
 8014f34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014f38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014f3c:	2218      	movs	r2, #24
 8014f3e:	2100      	movs	r1, #0
 8014f40:	4618      	mov	r0, r3
 8014f42:	f000 fad9 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014f46:	233f      	movs	r3, #63	@ 0x3f
 8014f48:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8014f4c:	230f      	movs	r3, #15
 8014f4e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014f52:	f107 0310 	add.w	r3, r7, #16
 8014f56:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014f5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014f62:	f107 030f 	add.w	r3, r7, #15
 8014f66:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014f70:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014f74:	2100      	movs	r1, #0
 8014f76:	4618      	mov	r0, r3
 8014f78:	f000 fc42 	bl	8015800 <hci_send_req>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	da01      	bge.n	8014f86 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8014f82:	23ff      	movs	r3, #255	@ 0xff
 8014f84:	e004      	b.n	8014f90 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8014f86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f8a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014f8e:	781b      	ldrb	r3, [r3, #0]
}
 8014f90:	4618      	mov	r0, r3
 8014f92:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}

08014f9a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8014f9a:	b580      	push	{r7, lr}
 8014f9c:	b0cc      	sub	sp, #304	@ 0x130
 8014f9e:	af00      	add	r7, sp, #0
 8014fa0:	4602      	mov	r2, r0
 8014fa2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014fa6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014faa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8014fac:	f107 0310 	add.w	r3, r7, #16
 8014fb0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014fb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014fb8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8014fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014fca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014fce:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014fd2:	8812      	ldrh	r2, [r2, #0]
 8014fd4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014fd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fda:	3302      	adds	r3, #2
 8014fdc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014fe0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014fe4:	2218      	movs	r2, #24
 8014fe6:	2100      	movs	r1, #0
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f000 fa85 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014fee:	233f      	movs	r3, #63	@ 0x3f
 8014ff0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8014ff4:	2318      	movs	r3, #24
 8014ff6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014ffa:	f107 0310 	add.w	r3, r7, #16
 8014ffe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015002:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015006:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801500a:	f107 030f 	add.w	r3, r7, #15
 801500e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015012:	2301      	movs	r3, #1
 8015014:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015018:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801501c:	2100      	movs	r1, #0
 801501e:	4618      	mov	r0, r3
 8015020:	f000 fbee 	bl	8015800 <hci_send_req>
 8015024:	4603      	mov	r3, r0
 8015026:	2b00      	cmp	r3, #0
 8015028:	da01      	bge.n	801502e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 801502a:	23ff      	movs	r3, #255	@ 0xff
 801502c:	e004      	b.n	8015038 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 801502e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015032:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015036:	781b      	ldrb	r3, [r3, #0]
}
 8015038:	4618      	mov	r0, r3
 801503a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}

08015042 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8015042:	b580      	push	{r7, lr}
 8015044:	b088      	sub	sp, #32
 8015046:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015048:	2300      	movs	r3, #0
 801504a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801504c:	f107 0308 	add.w	r3, r7, #8
 8015050:	2218      	movs	r2, #24
 8015052:	2100      	movs	r1, #0
 8015054:	4618      	mov	r0, r3
 8015056:	f000 fa4f 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x03;
 801505a:	2303      	movs	r3, #3
 801505c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 801505e:	2303      	movs	r3, #3
 8015060:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015062:	1dfb      	adds	r3, r7, #7
 8015064:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015066:	2301      	movs	r3, #1
 8015068:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801506a:	f107 0308 	add.w	r3, r7, #8
 801506e:	2100      	movs	r1, #0
 8015070:	4618      	mov	r0, r3
 8015072:	f000 fbc5 	bl	8015800 <hci_send_req>
 8015076:	4603      	mov	r3, r0
 8015078:	2b00      	cmp	r3, #0
 801507a:	da01      	bge.n	8015080 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 801507c:	23ff      	movs	r3, #255	@ 0xff
 801507e:	e000      	b.n	8015082 <hci_reset+0x40>
  return status;
 8015080:	79fb      	ldrb	r3, [r7, #7]
}
 8015082:	4618      	mov	r0, r3
 8015084:	3720      	adds	r7, #32
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}

0801508a <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information( uint8_t* HCI_Version,
                                               uint16_t* HCI_Subversion,
                                               uint8_t* LMP_Version,
                                               uint16_t* Company_Identifier,
                                               uint16_t* LMP_Subversion )
{
 801508a:	b580      	push	{r7, lr}
 801508c:	b08e      	sub	sp, #56	@ 0x38
 801508e:	af00      	add	r7, sp, #0
 8015090:	60f8      	str	r0, [r7, #12]
 8015092:	60b9      	str	r1, [r7, #8]
 8015094:	607a      	str	r2, [r7, #4]
 8015096:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015098:	f107 0314 	add.w	r3, r7, #20
 801509c:	2209      	movs	r2, #9
 801509e:	2100      	movs	r1, #0
 80150a0:	4618      	mov	r0, r3
 80150a2:	f000 fa29 	bl	80154f8 <Osal_MemSet>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80150a6:	f107 0320 	add.w	r3, r7, #32
 80150aa:	2218      	movs	r2, #24
 80150ac:	2100      	movs	r1, #0
 80150ae:	4618      	mov	r0, r3
 80150b0:	f000 fa22 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x04;
 80150b4:	2304      	movs	r3, #4
 80150b6:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 80150b8:	2301      	movs	r3, #1
 80150ba:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.rparam = &resp;
 80150bc:	f107 0314 	add.w	r3, r7, #20
 80150c0:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = sizeof(resp);
 80150c2:	2309      	movs	r3, #9
 80150c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if ( hci_send_req(&rq, FALSE) < 0 )
 80150c6:	f107 0320 	add.w	r3, r7, #32
 80150ca:	2100      	movs	r1, #0
 80150cc:	4618      	mov	r0, r3
 80150ce:	f000 fb97 	bl	8015800 <hci_send_req>
 80150d2:	4603      	mov	r3, r0
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	da01      	bge.n	80150dc <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 80150d8:	23ff      	movs	r3, #255	@ 0xff
 80150da:	e018      	b.n	801510e <hci_read_local_version_information+0x84>
  if ( resp.Status )
 80150dc:	7d3b      	ldrb	r3, [r7, #20]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d001      	beq.n	80150e6 <hci_read_local_version_information+0x5c>
    return resp.Status;
 80150e2:	7d3b      	ldrb	r3, [r7, #20]
 80150e4:	e013      	b.n	801510e <hci_read_local_version_information+0x84>
  *HCI_Version = resp.HCI_Version;
 80150e6:	7d7a      	ldrb	r2, [r7, #21]
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	701a      	strb	r2, [r3, #0]
  *HCI_Subversion = resp.HCI_Subversion;
 80150ec:	8afa      	ldrh	r2, [r7, #22]
 80150ee:	68bb      	ldr	r3, [r7, #8]
 80150f0:	801a      	strh	r2, [r3, #0]
  *LMP_Version = resp.LMP_Version;
 80150f2:	7e3a      	ldrb	r2, [r7, #24]
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	701a      	strb	r2, [r3, #0]
  *Company_Identifier = resp.Company_Identifier;
 80150f8:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80150fc:	b29a      	uxth	r2, r3
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	801a      	strh	r2, [r3, #0]
  *LMP_Subversion = resp.LMP_Subversion;
 8015102:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8015106:	b29a      	uxth	r2, r3
 8015108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801510a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 801510c:	2300      	movs	r3, #0
}
 801510e:	4618      	mov	r0, r3
 8015110:	3738      	adds	r7, #56	@ 0x38
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}

08015116 <hci_read_bd_addr>:
  Osal_MemCpy( (void*)LMP_Features, (const void*)resp.LMP_Features, 8 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_read_bd_addr( uint8_t* BD_ADDR )
{
 8015116:	b580      	push	{r7, lr}
 8015118:	b08a      	sub	sp, #40	@ 0x28
 801511a:	af00      	add	r7, sp, #0
 801511c:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_read_bd_addr_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801511e:	f107 0308 	add.w	r3, r7, #8
 8015122:	2207      	movs	r2, #7
 8015124:	2100      	movs	r1, #0
 8015126:	4618      	mov	r0, r3
 8015128:	f000 f9e6 	bl	80154f8 <Osal_MemSet>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801512c:	f107 0310 	add.w	r3, r7, #16
 8015130:	2218      	movs	r2, #24
 8015132:	2100      	movs	r1, #0
 8015134:	4618      	mov	r0, r3
 8015136:	f000 f9df 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x04;
 801513a:	2304      	movs	r3, #4
 801513c:	823b      	strh	r3, [r7, #16]
  rq.ocf = 0x009;
 801513e:	2309      	movs	r3, #9
 8015140:	827b      	strh	r3, [r7, #18]
  rq.rparam = &resp;
 8015142:	f107 0308 	add.w	r3, r7, #8
 8015146:	623b      	str	r3, [r7, #32]
  rq.rlen = sizeof(resp);
 8015148:	2307      	movs	r3, #7
 801514a:	627b      	str	r3, [r7, #36]	@ 0x24
  if ( hci_send_req(&rq, FALSE) < 0 )
 801514c:	f107 0310 	add.w	r3, r7, #16
 8015150:	2100      	movs	r1, #0
 8015152:	4618      	mov	r0, r3
 8015154:	f000 fb54 	bl	8015800 <hci_send_req>
 8015158:	4603      	mov	r3, r0
 801515a:	2b00      	cmp	r3, #0
 801515c:	da01      	bge.n	8015162 <hci_read_bd_addr+0x4c>
    return BLE_STATUS_TIMEOUT;
 801515e:	23ff      	movs	r3, #255	@ 0xff
 8015160:	e00d      	b.n	801517e <hci_read_bd_addr+0x68>
  if ( resp.Status )
 8015162:	7a3b      	ldrb	r3, [r7, #8]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d001      	beq.n	801516c <hci_read_bd_addr+0x56>
    return resp.Status;
 8015168:	7a3b      	ldrb	r3, [r7, #8]
 801516a:	e008      	b.n	801517e <hci_read_bd_addr+0x68>
  Osal_MemCpy( (void*)BD_ADDR, (const void*)resp.BD_ADDR, 6 );
 801516c:	f107 0308 	add.w	r3, r7, #8
 8015170:	3301      	adds	r3, #1
 8015172:	2206      	movs	r2, #6
 8015174:	4619      	mov	r1, r3
 8015176:	6878      	ldr	r0, [r7, #4]
 8015178:	f000 f9ae 	bl	80154d8 <Osal_MemCpy>
  return BLE_STATUS_SUCCESS;
 801517c:	2300      	movs	r3, #0
}
 801517e:	4618      	mov	r0, r3
 8015180:	3728      	adds	r7, #40	@ 0x28
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}

08015186 <hci_le_set_advertising_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_le_set_advertising_data( uint8_t Advertising_Data_Length,
                                        const uint8_t* Advertising_Data )
{
 8015186:	b580      	push	{r7, lr}
 8015188:	b0cc      	sub	sp, #304	@ 0x130
 801518a:	af00      	add	r7, sp, #0
 801518c:	4602      	mov	r2, r0
 801518e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015192:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015196:	6019      	str	r1, [r3, #0]
 8015198:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801519c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80151a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_advertising_data_cp0 *cp0 = (hci_le_set_advertising_data_cp0*)(cmd_buffer);
 80151a2:	f107 0310 	add.w	r3, r7, #16
 80151a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80151aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151ae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80151b2:	2200      	movs	r2, #0
 80151b4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80151b6:	2300      	movs	r3, #0
 80151b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Data_Length = Advertising_Data_Length;
 80151bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80151c0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80151c4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80151c8:	7812      	ldrb	r2, [r2, #0]
 80151ca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80151cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151d0:	3301      	adds	r3, #1
 80151d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Advertising_Data, (const void*)Advertising_Data, 31 );
 80151d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80151da:	1c58      	adds	r0, r3, #1
 80151dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151e0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80151e4:	221f      	movs	r2, #31
 80151e6:	6819      	ldr	r1, [r3, #0]
 80151e8:	f000 f976 	bl	80154d8 <Osal_MemCpy>
  index_input += 31;
 80151ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151f0:	331f      	adds	r3, #31
 80151f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80151f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80151fa:	2218      	movs	r2, #24
 80151fc:	2100      	movs	r1, #0
 80151fe:	4618      	mov	r0, r3
 8015200:	f000 f97a 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x08;
 8015204:	2308      	movs	r3, #8
 8015206:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x008;
 801520a:	2308      	movs	r3, #8
 801520c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015210:	f107 0310 	add.w	r3, r7, #16
 8015214:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015218:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801521c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015220:	f107 030f 	add.w	r3, r7, #15
 8015224:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015228:	2301      	movs	r3, #1
 801522a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801522e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015232:	2100      	movs	r1, #0
 8015234:	4618      	mov	r0, r3
 8015236:	f000 fae3 	bl	8015800 <hci_send_req>
 801523a:	4603      	mov	r3, r0
 801523c:	2b00      	cmp	r3, #0
 801523e:	da01      	bge.n	8015244 <hci_le_set_advertising_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8015240:	23ff      	movs	r3, #255	@ 0xff
 8015242:	e004      	b.n	801524e <hci_le_set_advertising_data+0xc8>
  return status;
 8015244:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015248:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801524c:	781b      	ldrb	r3, [r3, #0]
}
 801524e:	4618      	mov	r0, r3
 8015250:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015254:	46bd      	mov	sp, r7
 8015256:	bd80      	pop	{r7, pc}

08015258 <hci_le_set_scan_response_data>:

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b0cc      	sub	sp, #304	@ 0x130
 801525c:	af00      	add	r7, sp, #0
 801525e:	4602      	mov	r2, r0
 8015260:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015264:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015268:	6019      	str	r1, [r3, #0]
 801526a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801526e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015272:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8015274:	f107 0310 	add.w	r3, r7, #16
 8015278:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801527c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015280:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015284:	2200      	movs	r2, #0
 8015286:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015288:	2300      	movs	r3, #0
 801528a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 801528e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015292:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015296:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801529a:	7812      	ldrb	r2, [r2, #0]
 801529c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801529e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152a2:	3301      	adds	r3, #1
 80152a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 80152a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152ac:	1c58      	adds	r0, r3, #1
 80152ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80152b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80152b6:	221f      	movs	r2, #31
 80152b8:	6819      	ldr	r1, [r3, #0]
 80152ba:	f000 f90d 	bl	80154d8 <Osal_MemCpy>
  index_input += 31;
 80152be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152c2:	331f      	adds	r3, #31
 80152c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80152c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80152cc:	2218      	movs	r2, #24
 80152ce:	2100      	movs	r1, #0
 80152d0:	4618      	mov	r0, r3
 80152d2:	f000 f911 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x08;
 80152d6:	2308      	movs	r3, #8
 80152d8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x009;
 80152dc:	2309      	movs	r3, #9
 80152de:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80152e2:	f107 0310 	add.w	r3, r7, #16
 80152e6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80152ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80152f2:	f107 030f 	add.w	r3, r7, #15
 80152f6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80152fa:	2301      	movs	r3, #1
 80152fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015300:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015304:	2100      	movs	r1, #0
 8015306:	4618      	mov	r0, r3
 8015308:	f000 fa7a 	bl	8015800 <hci_send_req>
 801530c:	4603      	mov	r3, r0
 801530e:	2b00      	cmp	r3, #0
 8015310:	da01      	bge.n	8015316 <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8015312:	23ff      	movs	r3, #255	@ 0xff
 8015314:	e004      	b.n	8015320 <hci_le_set_scan_response_data+0xc8>
  return status;
 8015316:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801531a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801531e:	781b      	ldrb	r3, [r3, #0]
}
 8015320:	4618      	mov	r0, r3
 8015322:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015326:	46bd      	mov	sp, r7
 8015328:	bd80      	pop	{r7, pc}

0801532a <hci_le_rand>:
  Osal_MemCpy( (void*)Encrypted_Data, (const void*)resp.Encrypted_Data, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_le_rand( uint8_t* Random_Number )
{
 801532a:	b580      	push	{r7, lr}
 801532c:	b08c      	sub	sp, #48	@ 0x30
 801532e:	af00      	add	r7, sp, #0
 8015330:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015332:	f107 030c 	add.w	r3, r7, #12
 8015336:	2209      	movs	r2, #9
 8015338:	2100      	movs	r1, #0
 801533a:	4618      	mov	r0, r3
 801533c:	f000 f8dc 	bl	80154f8 <Osal_MemSet>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015340:	f107 0318 	add.w	r3, r7, #24
 8015344:	2218      	movs	r2, #24
 8015346:	2100      	movs	r1, #0
 8015348:	4618      	mov	r0, r3
 801534a:	f000 f8d5 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x08;
 801534e:	2308      	movs	r3, #8
 8015350:	833b      	strh	r3, [r7, #24]
  rq.ocf = 0x018;
 8015352:	2318      	movs	r3, #24
 8015354:	837b      	strh	r3, [r7, #26]
  rq.rparam = &resp;
 8015356:	f107 030c 	add.w	r3, r7, #12
 801535a:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = sizeof(resp);
 801535c:	2309      	movs	r3, #9
 801535e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015360:	f107 0318 	add.w	r3, r7, #24
 8015364:	2100      	movs	r1, #0
 8015366:	4618      	mov	r0, r3
 8015368:	f000 fa4a 	bl	8015800 <hci_send_req>
 801536c:	4603      	mov	r3, r0
 801536e:	2b00      	cmp	r3, #0
 8015370:	da01      	bge.n	8015376 <hci_le_rand+0x4c>
    return BLE_STATUS_TIMEOUT;
 8015372:	23ff      	movs	r3, #255	@ 0xff
 8015374:	e00d      	b.n	8015392 <hci_le_rand+0x68>
  if ( resp.Status )
 8015376:	7b3b      	ldrb	r3, [r7, #12]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d001      	beq.n	8015380 <hci_le_rand+0x56>
    return resp.Status;
 801537c:	7b3b      	ldrb	r3, [r7, #12]
 801537e:	e008      	b.n	8015392 <hci_le_rand+0x68>
  Osal_MemCpy( (void*)Random_Number, (const void*)resp.Random_Number, 8 );
 8015380:	f107 030c 	add.w	r3, r7, #12
 8015384:	3301      	adds	r3, #1
 8015386:	2208      	movs	r2, #8
 8015388:	4619      	mov	r1, r3
 801538a:	6878      	ldr	r0, [r7, #4]
 801538c:	f000 f8a4 	bl	80154d8 <Osal_MemCpy>
  return BLE_STATUS_SUCCESS;
 8015390:	2300      	movs	r3, #0
}
 8015392:	4618      	mov	r0, r3
 8015394:	3730      	adds	r7, #48	@ 0x30
 8015396:	46bd      	mov	sp, r7
 8015398:	bd80      	pop	{r7, pc}

0801539a <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 801539a:	b5b0      	push	{r4, r5, r7, lr}
 801539c:	b0cc      	sub	sp, #304	@ 0x130
 801539e:	af00      	add	r7, sp, #0
 80153a0:	4605      	mov	r5, r0
 80153a2:	460c      	mov	r4, r1
 80153a4:	4610      	mov	r0, r2
 80153a6:	4619      	mov	r1, r3
 80153a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153ac:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80153b0:	462a      	mov	r2, r5
 80153b2:	801a      	strh	r2, [r3, #0]
 80153b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80153bc:	4622      	mov	r2, r4
 80153be:	801a      	strh	r2, [r3, #0]
 80153c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153c4:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80153c8:	4602      	mov	r2, r0
 80153ca:	801a      	strh	r2, [r3, #0]
 80153cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153d0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80153d4:	460a      	mov	r2, r1
 80153d6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 80153d8:	f107 0310 	add.w	r3, r7, #16
 80153dc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80153e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153e4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80153e8:	2200      	movs	r2, #0
 80153ea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80153ec:	2300      	movs	r3, #0
 80153ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80153f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80153f6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80153fa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80153fe:	8812      	ldrh	r2, [r2, #0]
 8015400:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015402:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015406:	3302      	adds	r3, #2
 8015408:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 801540c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015410:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015414:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8015418:	8812      	ldrh	r2, [r2, #0]
 801541a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 801541c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015420:	3302      	adds	r3, #2
 8015422:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8015426:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801542a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801542e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8015432:	8812      	ldrh	r2, [r2, #0]
 8015434:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8015436:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801543a:	3302      	adds	r3, #2
 801543c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 8015440:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015444:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015448:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 801544c:	8812      	ldrh	r2, [r2, #0]
 801544e:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8015450:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015454:	3302      	adds	r3, #2
 8015456:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 801545a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801545e:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8015462:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8015464:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015468:	3302      	adds	r3, #2
 801546a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801546e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015472:	2218      	movs	r2, #24
 8015474:	2100      	movs	r1, #0
 8015476:	4618      	mov	r0, r3
 8015478:	f000 f83e 	bl	80154f8 <Osal_MemSet>
  rq.ogf = 0x3f;
 801547c:	233f      	movs	r3, #63	@ 0x3f
 801547e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 8015482:	f240 1381 	movw	r3, #385	@ 0x181
 8015486:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 801548a:	230f      	movs	r3, #15
 801548c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8015490:	f107 0310 	add.w	r3, r7, #16
 8015494:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015498:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801549c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80154a0:	f107 030f 	add.w	r3, r7, #15
 80154a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80154a8:	2301      	movs	r3, #1
 80154aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80154ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80154b2:	2100      	movs	r1, #0
 80154b4:	4618      	mov	r0, r3
 80154b6:	f000 f9a3 	bl	8015800 <hci_send_req>
 80154ba:	4603      	mov	r3, r0
 80154bc:	2b00      	cmp	r3, #0
 80154be:	da01      	bge.n	80154c4 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 80154c0:	23ff      	movs	r3, #255	@ 0xff
 80154c2:	e004      	b.n	80154ce <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 80154c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80154cc:	781b      	ldrb	r3, [r3, #0]
}
 80154ce:	4618      	mov	r0, r3
 80154d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bdb0      	pop	{r4, r5, r7, pc}

080154d8 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b084      	sub	sp, #16
 80154dc:	af00      	add	r7, sp, #0
 80154de:	60f8      	str	r0, [r7, #12]
 80154e0:	60b9      	str	r1, [r7, #8]
 80154e2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 80154e4:	687a      	ldr	r2, [r7, #4]
 80154e6:	68b9      	ldr	r1, [r7, #8]
 80154e8:	68f8      	ldr	r0, [r7, #12]
 80154ea:	f013 fef0 	bl	80292ce <memcpy>
 80154ee:	4603      	mov	r3, r0
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	3710      	adds	r7, #16
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}

080154f8 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b084      	sub	sp, #16
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	60b9      	str	r1, [r7, #8]
 8015502:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8015504:	687a      	ldr	r2, [r7, #4]
 8015506:	68b9      	ldr	r1, [r7, #8]
 8015508:	68f8      	ldr	r0, [r7, #12]
 801550a:	f013 fe4f 	bl	80291ac <memset>
 801550e:	4603      	mov	r3, r0
}
 8015510:	4618      	mov	r0, r3
 8015512:	3710      	adds	r7, #16
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}

08015518 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b088      	sub	sp, #32
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015520:	f107 030c 	add.w	r3, r7, #12
 8015524:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 801552c:	69fb      	ldr	r3, [r7, #28]
 801552e:	212e      	movs	r1, #46	@ 0x2e
 8015530:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8015534:	f000 fb00 	bl	8015b38 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015538:	69fb      	ldr	r3, [r7, #28]
 801553a:	330b      	adds	r3, #11
 801553c:	78db      	ldrb	r3, [r3, #3]
}
 801553e:	4618      	mov	r0, r3
 8015540:	3720      	adds	r7, #32
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}

08015546 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8015546:	b580      	push	{r7, lr}
 8015548:	b088      	sub	sp, #32
 801554a:	af00      	add	r7, sp, #0
 801554c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801554e:	f107 030c 	add.w	r3, r7, #12
 8015552:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 801555a:	69fb      	ldr	r3, [r7, #28]
 801555c:	210f      	movs	r1, #15
 801555e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8015562:	f000 fae9 	bl	8015b38 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015566:	69fb      	ldr	r3, [r7, #28]
 8015568:	330b      	adds	r3, #11
 801556a:	78db      	ldrb	r3, [r3, #3]
}
 801556c:	4618      	mov	r0, r3
 801556e:	3720      	adds	r7, #32
 8015570:	46bd      	mov	sp, r7
 8015572:	bd80      	pop	{r7, pc}

08015574 <SHCI_C2_FLASH_EraseActivity>:

SHCI_CmdStatus_t SHCI_C2_FLASH_EraseActivity( SHCI_EraseActivity_t erase_activity )
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b088      	sub	sp, #32
 8015578:	af00      	add	r7, sp, #0
 801557a:	4603      	mov	r3, r0
 801557c:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801557e:	f107 030c 	add.w	r3, r7, #12
 8015582:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = erase_activity;
 8015584:	79fb      	ldrb	r3, [r7, #7]
 8015586:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_ERASE_ACTIVITY,
 8015588:	f107 020c 	add.w	r2, r7, #12
 801558c:	69fb      	ldr	r3, [r7, #28]
 801558e:	2101      	movs	r1, #1
 8015590:	f64f 4069 	movw	r0, #64617	@ 0xfc69
 8015594:	f000 fad0 	bl	8015b38 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015598:	69fb      	ldr	r3, [r7, #28]
 801559a:	330b      	adds	r3, #11
 801559c:	78db      	ldrb	r3, [r3, #3]
}
 801559e:	4618      	mov	r0, r3
 80155a0:	3720      	adds	r7, #32
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd80      	pop	{r7, pc}

080155a6 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80155a6:	b580      	push	{r7, lr}
 80155a8:	b088      	sub	sp, #32
 80155aa:	af00      	add	r7, sp, #0
 80155ac:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80155ae:	f107 030c 	add.w	r3, r7, #12
 80155b2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80155b4:	69fb      	ldr	r3, [r7, #28]
 80155b6:	687a      	ldr	r2, [r7, #4]
 80155b8:	2110      	movs	r1, #16
 80155ba:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 80155be:	f000 fabb 	bl	8015b38 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80155c2:	69fb      	ldr	r3, [r7, #28]
 80155c4:	330b      	adds	r3, #11
 80155c6:	78db      	ldrb	r3, [r3, #3]
}
 80155c8:	4618      	mov	r0, r3
 80155ca:	3720      	adds	r7, #32
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bd80      	pop	{r7, pc}

080155d0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80155d0:	b480      	push	{r7}
 80155d2:	b08b      	sub	sp, #44	@ 0x2c
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80155d8:	2300      	movs	r3, #0
 80155da:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80155dc:	2300      	movs	r3, #0
 80155de:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80155e0:	2300      	movs	r3, #0
 80155e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80155e4:	2300      	movs	r3, #0
 80155e6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80155e8:	2300      	movs	r3, #0
 80155ea:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80155ec:	2300      	movs	r3, #0
 80155ee:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80155f0:	2300      	movs	r3, #0
 80155f2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80155f4:	2300      	movs	r3, #0
 80155f6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80155f8:	4b4a      	ldr	r3, [pc, #296]	@ (8015724 <SHCI_GetWirelessFwInfo+0x154>)
 80155fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015600:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8015602:	693b      	ldr	r3, [r7, #16]
 8015604:	009b      	lsls	r3, r3, #2
 8015606:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 801560a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8015612:	68bb      	ldr	r3, [r7, #8]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	4a44      	ldr	r2, [pc, #272]	@ (8015728 <SHCI_GetWirelessFwInfo+0x158>)
 8015618:	4293      	cmp	r3, r2
 801561a:	d10f      	bne.n	801563c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	695b      	ldr	r3, [r3, #20]
 8015620:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8015622:	68bb      	ldr	r3, [r7, #8]
 8015624:	699b      	ldr	r3, [r3, #24]
 8015626:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8015628:	68bb      	ldr	r3, [r7, #8]
 801562a:	69db      	ldr	r3, [r3, #28]
 801562c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 801562e:	68bb      	ldr	r3, [r7, #8]
 8015630:	68db      	ldr	r3, [r3, #12]
 8015632:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8015634:	68bb      	ldr	r3, [r7, #8]
 8015636:	691b      	ldr	r3, [r3, #16]
 8015638:	617b      	str	r3, [r7, #20]
 801563a:	e01a      	b.n	8015672 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	009b      	lsls	r3, r3, #2
 8015640:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8015644:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8015648:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	691b      	ldr	r3, [r3, #16]
 8015650:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	695b      	ldr	r3, [r3, #20]
 8015658:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	699b      	ldr	r3, [r3, #24]
 8015660:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	685b      	ldr	r3, [r3, #4]
 8015668:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	689b      	ldr	r3, [r3, #8]
 8015670:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015674:	0e1b      	lsrs	r3, r3, #24
 8015676:	b2da      	uxtb	r2, r3
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801567e:	0c1b      	lsrs	r3, r3, #16
 8015680:	b2da      	uxtb	r2, r3
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015688:	0a1b      	lsrs	r3, r3, #8
 801568a:	b2da      	uxtb	r2, r3
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8015690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015692:	091b      	lsrs	r3, r3, #4
 8015694:	b2db      	uxtb	r3, r3
 8015696:	f003 030f 	and.w	r3, r3, #15
 801569a:	b2da      	uxtb	r2, r3
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80156a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80156a2:	b2db      	uxtb	r3, r3
 80156a4:	f003 030f 	and.w	r3, r3, #15
 80156a8:	b2da      	uxtb	r2, r3
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80156ae:	6a3b      	ldr	r3, [r7, #32]
 80156b0:	0e1b      	lsrs	r3, r3, #24
 80156b2:	b2da      	uxtb	r2, r3
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80156b8:	6a3b      	ldr	r3, [r7, #32]
 80156ba:	0c1b      	lsrs	r3, r3, #16
 80156bc:	b2da      	uxtb	r2, r3
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80156c2:	6a3b      	ldr	r3, [r7, #32]
 80156c4:	0a1b      	lsrs	r3, r3, #8
 80156c6:	b2da      	uxtb	r2, r3
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80156cc:	6a3b      	ldr	r3, [r7, #32]
 80156ce:	b2da      	uxtb	r2, r3
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80156d4:	69fb      	ldr	r3, [r7, #28]
 80156d6:	b2da      	uxtb	r2, r3
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80156dc:	69bb      	ldr	r3, [r7, #24]
 80156de:	0e1b      	lsrs	r3, r3, #24
 80156e0:	b2da      	uxtb	r2, r3
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80156e6:	69bb      	ldr	r3, [r7, #24]
 80156e8:	0c1b      	lsrs	r3, r3, #16
 80156ea:	b2da      	uxtb	r2, r3
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80156f0:	69bb      	ldr	r3, [r7, #24]
 80156f2:	0a1b      	lsrs	r3, r3, #8
 80156f4:	b2da      	uxtb	r2, r3
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80156fa:	697b      	ldr	r3, [r7, #20]
 80156fc:	0e1b      	lsrs	r3, r3, #24
 80156fe:	b2da      	uxtb	r2, r3
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	0c1b      	lsrs	r3, r3, #16
 8015708:	b2da      	uxtb	r2, r3
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	b2da      	uxtb	r2, r3
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8015716:	2300      	movs	r3, #0
}
 8015718:	4618      	mov	r0, r3
 801571a:	372c      	adds	r7, #44	@ 0x2c
 801571c:	46bd      	mov	sp, r7
 801571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015722:	4770      	bx	lr
 8015724:	58004000 	.word	0x58004000
 8015728:	a94656b9 	.word	0xa94656b9

0801572c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b082      	sub	sp, #8
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
 8015734:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	685b      	ldr	r3, [r3, #4]
 801573a:	4a08      	ldr	r2, [pc, #32]	@ (801575c <hci_init+0x30>)
 801573c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 801573e:	4a08      	ldr	r2, [pc, #32]	@ (8015760 <hci_init+0x34>)
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8015744:	4806      	ldr	r0, [pc, #24]	@ (8015760 <hci_init+0x34>)
 8015746:	f000 f979 	bl	8015a3c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	4618      	mov	r0, r3
 8015750:	f000 f8da 	bl	8015908 <TlInit>

  return;
 8015754:	bf00      	nop
}
 8015756:	3708      	adds	r7, #8
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}
 801575c:	20006e94 	.word	0x20006e94
 8015760:	20006e6c 	.word	0x20006e6c

08015764 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b084      	sub	sp, #16
 8015768:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801576a:	4822      	ldr	r0, [pc, #136]	@ (80157f4 <hci_user_evt_proc+0x90>)
 801576c:	f001 f894 	bl	8016898 <LST_is_empty>
 8015770:	4603      	mov	r3, r0
 8015772:	2b00      	cmp	r3, #0
 8015774:	d12b      	bne.n	80157ce <hci_user_evt_proc+0x6a>
 8015776:	4b20      	ldr	r3, [pc, #128]	@ (80157f8 <hci_user_evt_proc+0x94>)
 8015778:	781b      	ldrb	r3, [r3, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d027      	beq.n	80157ce <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801577e:	f107 030c 	add.w	r3, r7, #12
 8015782:	4619      	mov	r1, r3
 8015784:	481b      	ldr	r0, [pc, #108]	@ (80157f4 <hci_user_evt_proc+0x90>)
 8015786:	f001 f916 	bl	80169b6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801578a:	4b1c      	ldr	r3, [pc, #112]	@ (80157fc <hci_user_evt_proc+0x98>)
 801578c:	69db      	ldr	r3, [r3, #28]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d00c      	beq.n	80157ac <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8015796:	2301      	movs	r3, #1
 8015798:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 801579a:	4b18      	ldr	r3, [pc, #96]	@ (80157fc <hci_user_evt_proc+0x98>)
 801579c:	69db      	ldr	r3, [r3, #28]
 801579e:	1d3a      	adds	r2, r7, #4
 80157a0:	4610      	mov	r0, r2
 80157a2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80157a4:	793a      	ldrb	r2, [r7, #4]
 80157a6:	4b14      	ldr	r3, [pc, #80]	@ (80157f8 <hci_user_evt_proc+0x94>)
 80157a8:	701a      	strb	r2, [r3, #0]
 80157aa:	e002      	b.n	80157b2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80157ac:	4b12      	ldr	r3, [pc, #72]	@ (80157f8 <hci_user_evt_proc+0x94>)
 80157ae:	2201      	movs	r2, #1
 80157b0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80157b2:	4b11      	ldr	r3, [pc, #68]	@ (80157f8 <hci_user_evt_proc+0x94>)
 80157b4:	781b      	ldrb	r3, [r3, #0]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d004      	beq.n	80157c4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	4618      	mov	r0, r3
 80157be:	f000 fc0d 	bl	8015fdc <TL_MM_EvtDone>
 80157c2:	e004      	b.n	80157ce <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	4619      	mov	r1, r3
 80157c8:	480a      	ldr	r0, [pc, #40]	@ (80157f4 <hci_user_evt_proc+0x90>)
 80157ca:	f001 f887 	bl	80168dc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80157ce:	4809      	ldr	r0, [pc, #36]	@ (80157f4 <hci_user_evt_proc+0x90>)
 80157d0:	f001 f862 	bl	8016898 <LST_is_empty>
 80157d4:	4603      	mov	r3, r0
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d107      	bne.n	80157ea <hci_user_evt_proc+0x86>
 80157da:	4b07      	ldr	r3, [pc, #28]	@ (80157f8 <hci_user_evt_proc+0x94>)
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d003      	beq.n	80157ea <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80157e2:	4804      	ldr	r0, [pc, #16]	@ (80157f4 <hci_user_evt_proc+0x90>)
 80157e4:	f7ee f838 	bl	8003858 <hci_notify_asynch_evt>
  }


  return;
 80157e8:	bf00      	nop
 80157ea:	bf00      	nop
}
 80157ec:	3710      	adds	r7, #16
 80157ee:	46bd      	mov	sp, r7
 80157f0:	bd80      	pop	{r7, pc}
 80157f2:	bf00      	nop
 80157f4:	200002d4 	.word	0x200002d4
 80157f8:	200002e0 	.word	0x200002e0
 80157fc:	20006e6c 	.word	0x20006e6c

08015800 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b088      	sub	sp, #32
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	460b      	mov	r3, r1
 801580a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 801580c:	2000      	movs	r0, #0
 801580e:	f000 f8d1 	bl	80159b4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8015812:	2300      	movs	r3, #0
 8015814:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	885b      	ldrh	r3, [r3, #2]
 801581a:	b21b      	sxth	r3, r3
 801581c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015820:	b21a      	sxth	r2, r3
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	881b      	ldrh	r3, [r3, #0]
 8015826:	029b      	lsls	r3, r3, #10
 8015828:	b21b      	sxth	r3, r3
 801582a:	4313      	orrs	r3, r2
 801582c:	b21b      	sxth	r3, r3
 801582e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8015830:	4b33      	ldr	r3, [pc, #204]	@ (8015900 <hci_send_req+0x100>)
 8015832:	2201      	movs	r2, #1
 8015834:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	68db      	ldr	r3, [r3, #12]
 801583a:	b2d9      	uxtb	r1, r3
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	689a      	ldr	r2, [r3, #8]
 8015840:	8bbb      	ldrh	r3, [r7, #28]
 8015842:	4618      	mov	r0, r3
 8015844:	f000 f890 	bl	8015968 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8015848:	e04e      	b.n	80158e8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 801584a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 801584e:	f7ee f81b 	bl	8003888 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8015852:	e043      	b.n	80158dc <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8015854:	f107 030c 	add.w	r3, r7, #12
 8015858:	4619      	mov	r1, r3
 801585a:	482a      	ldr	r0, [pc, #168]	@ (8015904 <hci_send_req+0x104>)
 801585c:	f001 f8ab 	bl	80169b6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	7a5b      	ldrb	r3, [r3, #9]
 8015864:	2b0f      	cmp	r3, #15
 8015866:	d114      	bne.n	8015892 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	330b      	adds	r3, #11
 801586c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801586e:	693b      	ldr	r3, [r7, #16]
 8015870:	885b      	ldrh	r3, [r3, #2]
 8015872:	b29b      	uxth	r3, r3
 8015874:	8bba      	ldrh	r2, [r7, #28]
 8015876:	429a      	cmp	r2, r3
 8015878:	d104      	bne.n	8015884 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	691b      	ldr	r3, [r3, #16]
 801587e:	693a      	ldr	r2, [r7, #16]
 8015880:	7812      	ldrb	r2, [r2, #0]
 8015882:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8015884:	693b      	ldr	r3, [r7, #16]
 8015886:	785b      	ldrb	r3, [r3, #1]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d027      	beq.n	80158dc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801588c:	2301      	movs	r3, #1
 801588e:	77fb      	strb	r3, [r7, #31]
 8015890:	e024      	b.n	80158dc <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	330b      	adds	r3, #11
 8015896:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8015898:	69bb      	ldr	r3, [r7, #24]
 801589a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801589e:	b29b      	uxth	r3, r3
 80158a0:	8bba      	ldrh	r2, [r7, #28]
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d114      	bne.n	80158d0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	7a9b      	ldrb	r3, [r3, #10]
 80158aa:	3b03      	subs	r3, #3
 80158ac:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	695a      	ldr	r2, [r3, #20]
 80158b2:	7dfb      	ldrb	r3, [r7, #23]
 80158b4:	429a      	cmp	r2, r3
 80158b6:	bfa8      	it	ge
 80158b8:	461a      	movge	r2, r3
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	6918      	ldr	r0, [r3, #16]
 80158c2:	69bb      	ldr	r3, [r7, #24]
 80158c4:	1cd9      	adds	r1, r3, #3
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	695b      	ldr	r3, [r3, #20]
 80158ca:	461a      	mov	r2, r3
 80158cc:	f013 fcff 	bl	80292ce <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80158d0:	69bb      	ldr	r3, [r7, #24]
 80158d2:	781b      	ldrb	r3, [r3, #0]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d001      	beq.n	80158dc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80158d8:	2301      	movs	r3, #1
 80158da:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80158dc:	4809      	ldr	r0, [pc, #36]	@ (8015904 <hci_send_req+0x104>)
 80158de:	f000 ffdb 	bl	8016898 <LST_is_empty>
 80158e2:	4603      	mov	r3, r0
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d0b5      	beq.n	8015854 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80158e8:	7ffb      	ldrb	r3, [r7, #31]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d0ad      	beq.n	801584a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80158ee:	2001      	movs	r0, #1
 80158f0:	f000 f860 	bl	80159b4 <NotifyCmdStatus>

  return 0;
 80158f4:	2300      	movs	r3, #0
}
 80158f6:	4618      	mov	r0, r3
 80158f8:	3720      	adds	r7, #32
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bd80      	pop	{r7, pc}
 80158fe:	bf00      	nop
 8015900:	20006e98 	.word	0x20006e98
 8015904:	20006e8c 	.word	0x20006e8c

08015908 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b086      	sub	sp, #24
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8015910:	480f      	ldr	r0, [pc, #60]	@ (8015950 <TlInit+0x48>)
 8015912:	f000 ffb1 	bl	8016878 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8015916:	4a0f      	ldr	r2, [pc, #60]	@ (8015954 <TlInit+0x4c>)
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 801591c:	480e      	ldr	r0, [pc, #56]	@ (8015958 <TlInit+0x50>)
 801591e:	f000 ffab 	bl	8016878 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8015922:	4b0e      	ldr	r3, [pc, #56]	@ (801595c <TlInit+0x54>)
 8015924:	2201      	movs	r2, #1
 8015926:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8015928:	4b0d      	ldr	r3, [pc, #52]	@ (8015960 <TlInit+0x58>)
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d00a      	beq.n	8015946 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8015934:	4b0b      	ldr	r3, [pc, #44]	@ (8015964 <TlInit+0x5c>)
 8015936:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8015938:	4b09      	ldr	r3, [pc, #36]	@ (8015960 <TlInit+0x58>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	f107 0208 	add.w	r2, r7, #8
 8015940:	4610      	mov	r0, r2
 8015942:	4798      	blx	r3
  }

  return;
 8015944:	bf00      	nop
 8015946:	bf00      	nop
}
 8015948:	3718      	adds	r7, #24
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}
 801594e:	bf00      	nop
 8015950:	20006e8c 	.word	0x20006e8c
 8015954:	200002dc 	.word	0x200002dc
 8015958:	200002d4 	.word	0x200002d4
 801595c:	200002e0 	.word	0x200002e0
 8015960:	20006e6c 	.word	0x20006e6c
 8015964:	080159f5 	.word	0x080159f5

08015968 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	4603      	mov	r3, r0
 8015970:	603a      	str	r2, [r7, #0]
 8015972:	80fb      	strh	r3, [r7, #6]
 8015974:	460b      	mov	r3, r1
 8015976:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8015978:	4b0c      	ldr	r3, [pc, #48]	@ (80159ac <SendCmd+0x44>)
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	88fa      	ldrh	r2, [r7, #6]
 801597e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8015982:	4b0a      	ldr	r3, [pc, #40]	@ (80159ac <SendCmd+0x44>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	797a      	ldrb	r2, [r7, #5]
 8015988:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801598a:	4b08      	ldr	r3, [pc, #32]	@ (80159ac <SendCmd+0x44>)
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	330c      	adds	r3, #12
 8015990:	797a      	ldrb	r2, [r7, #5]
 8015992:	6839      	ldr	r1, [r7, #0]
 8015994:	4618      	mov	r0, r3
 8015996:	f013 fc9a 	bl	80292ce <memcpy>

  hciContext.io.Send(0,0);
 801599a:	4b05      	ldr	r3, [pc, #20]	@ (80159b0 <SendCmd+0x48>)
 801599c:	691b      	ldr	r3, [r3, #16]
 801599e:	2100      	movs	r1, #0
 80159a0:	2000      	movs	r0, #0
 80159a2:	4798      	blx	r3

  return;
 80159a4:	bf00      	nop
}
 80159a6:	3708      	adds	r7, #8
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}
 80159ac:	200002dc 	.word	0x200002dc
 80159b0:	20006e6c 	.word	0x20006e6c

080159b4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b082      	sub	sp, #8
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	4603      	mov	r3, r0
 80159bc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80159be:	79fb      	ldrb	r3, [r7, #7]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d108      	bne.n	80159d6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80159c4:	4b0a      	ldr	r3, [pc, #40]	@ (80159f0 <NotifyCmdStatus+0x3c>)
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d00d      	beq.n	80159e8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80159cc:	4b08      	ldr	r3, [pc, #32]	@ (80159f0 <NotifyCmdStatus+0x3c>)
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	2000      	movs	r0, #0
 80159d2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80159d4:	e008      	b.n	80159e8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80159d6:	4b06      	ldr	r3, [pc, #24]	@ (80159f0 <NotifyCmdStatus+0x3c>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d004      	beq.n	80159e8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80159de:	4b04      	ldr	r3, [pc, #16]	@ (80159f0 <NotifyCmdStatus+0x3c>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	2001      	movs	r0, #1
 80159e4:	4798      	blx	r3
  return;
 80159e6:	bf00      	nop
 80159e8:	bf00      	nop
}
 80159ea:	3708      	adds	r7, #8
 80159ec:	46bd      	mov	sp, r7
 80159ee:	bd80      	pop	{r7, pc}
 80159f0:	20006e94 	.word	0x20006e94

080159f4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b082      	sub	sp, #8
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	7a5b      	ldrb	r3, [r3, #9]
 8015a00:	2b0f      	cmp	r3, #15
 8015a02:	d003      	beq.n	8015a0c <TlEvtReceived+0x18>
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	7a5b      	ldrb	r3, [r3, #9]
 8015a08:	2b0e      	cmp	r3, #14
 8015a0a:	d107      	bne.n	8015a1c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8015a0c:	6879      	ldr	r1, [r7, #4]
 8015a0e:	4809      	ldr	r0, [pc, #36]	@ (8015a34 <TlEvtReceived+0x40>)
 8015a10:	f000 ff8a 	bl	8016928 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8015a14:	2000      	movs	r0, #0
 8015a16:	f7ed ff2c 	bl	8003872 <hci_cmd_resp_release>
 8015a1a:	e006      	b.n	8015a2a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8015a1c:	6879      	ldr	r1, [r7, #4]
 8015a1e:	4806      	ldr	r0, [pc, #24]	@ (8015a38 <TlEvtReceived+0x44>)
 8015a20:	f000 ff82 	bl	8016928 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8015a24:	4804      	ldr	r0, [pc, #16]	@ (8015a38 <TlEvtReceived+0x44>)
 8015a26:	f7ed ff17 	bl	8003858 <hci_notify_asynch_evt>
  }

  return;
 8015a2a:	bf00      	nop
}
 8015a2c:	3708      	adds	r7, #8
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}
 8015a32:	bf00      	nop
 8015a34:	20006e8c 	.word	0x20006e8c
 8015a38:	200002d4 	.word	0x200002d4

08015a3c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	b083      	sub	sp, #12
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	4a05      	ldr	r2, [pc, #20]	@ (8015a5c <hci_register_io_bus+0x20>)
 8015a48:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	4a04      	ldr	r2, [pc, #16]	@ (8015a60 <hci_register_io_bus+0x24>)
 8015a4e:	611a      	str	r2, [r3, #16]

  return;
 8015a50:	bf00      	nop
}
 8015a52:	370c      	adds	r7, #12
 8015a54:	46bd      	mov	sp, r7
 8015a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5a:	4770      	bx	lr
 8015a5c:	08015d55 	.word	0x08015d55
 8015a60:	08015dbd 	.word	0x08015dbd

08015a64 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b082      	sub	sp, #8
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
 8015a6c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	685b      	ldr	r3, [r3, #4]
 8015a72:	4a08      	ldr	r2, [pc, #32]	@ (8015a94 <shci_init+0x30>)
 8015a74:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8015a76:	4a08      	ldr	r2, [pc, #32]	@ (8015a98 <shci_init+0x34>)
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8015a7c:	4806      	ldr	r0, [pc, #24]	@ (8015a98 <shci_init+0x34>)
 8015a7e:	f000 f915 	bl	8015cac <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8015a82:	683b      	ldr	r3, [r7, #0]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	4618      	mov	r0, r3
 8015a88:	f000 f898 	bl	8015bbc <TlInit>

  return;
 8015a8c:	bf00      	nop
}
 8015a8e:	3708      	adds	r7, #8
 8015a90:	46bd      	mov	sp, r7
 8015a92:	bd80      	pop	{r7, pc}
 8015a94:	20006ebc 	.word	0x20006ebc
 8015a98:	20006e9c 	.word	0x20006e9c

08015a9c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b084      	sub	sp, #16
 8015aa0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8015aa2:	4822      	ldr	r0, [pc, #136]	@ (8015b2c <shci_user_evt_proc+0x90>)
 8015aa4:	f000 fef8 	bl	8016898 <LST_is_empty>
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d12b      	bne.n	8015b06 <shci_user_evt_proc+0x6a>
 8015aae:	4b20      	ldr	r3, [pc, #128]	@ (8015b30 <shci_user_evt_proc+0x94>)
 8015ab0:	781b      	ldrb	r3, [r3, #0]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d027      	beq.n	8015b06 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8015ab6:	f107 030c 	add.w	r3, r7, #12
 8015aba:	4619      	mov	r1, r3
 8015abc:	481b      	ldr	r0, [pc, #108]	@ (8015b2c <shci_user_evt_proc+0x90>)
 8015abe:	f000 ff7a 	bl	80169b6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8015ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8015b34 <shci_user_evt_proc+0x98>)
 8015ac4:	69db      	ldr	r3, [r3, #28]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d00c      	beq.n	8015ae4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8015ace:	2301      	movs	r3, #1
 8015ad0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8015ad2:	4b18      	ldr	r3, [pc, #96]	@ (8015b34 <shci_user_evt_proc+0x98>)
 8015ad4:	69db      	ldr	r3, [r3, #28]
 8015ad6:	1d3a      	adds	r2, r7, #4
 8015ad8:	4610      	mov	r0, r2
 8015ada:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8015adc:	793a      	ldrb	r2, [r7, #4]
 8015ade:	4b14      	ldr	r3, [pc, #80]	@ (8015b30 <shci_user_evt_proc+0x94>)
 8015ae0:	701a      	strb	r2, [r3, #0]
 8015ae2:	e002      	b.n	8015aea <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8015ae4:	4b12      	ldr	r3, [pc, #72]	@ (8015b30 <shci_user_evt_proc+0x94>)
 8015ae6:	2201      	movs	r2, #1
 8015ae8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8015aea:	4b11      	ldr	r3, [pc, #68]	@ (8015b30 <shci_user_evt_proc+0x94>)
 8015aec:	781b      	ldrb	r3, [r3, #0]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d004      	beq.n	8015afc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	4618      	mov	r0, r3
 8015af6:	f000 fa71 	bl	8015fdc <TL_MM_EvtDone>
 8015afa:	e004      	b.n	8015b06 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	4619      	mov	r1, r3
 8015b00:	480a      	ldr	r0, [pc, #40]	@ (8015b2c <shci_user_evt_proc+0x90>)
 8015b02:	f000 feeb 	bl	80168dc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8015b06:	4809      	ldr	r0, [pc, #36]	@ (8015b2c <shci_user_evt_proc+0x90>)
 8015b08:	f000 fec6 	bl	8016898 <LST_is_empty>
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d107      	bne.n	8015b22 <shci_user_evt_proc+0x86>
 8015b12:	4b07      	ldr	r3, [pc, #28]	@ (8015b30 <shci_user_evt_proc+0x94>)
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d003      	beq.n	8015b22 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8015b1a:	4804      	ldr	r0, [pc, #16]	@ (8015b2c <shci_user_evt_proc+0x90>)
 8015b1c:	f7eb ff36 	bl	800198c <shci_notify_asynch_evt>
  }


  return;
 8015b20:	bf00      	nop
 8015b22:	bf00      	nop
}
 8015b24:	3710      	adds	r7, #16
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}
 8015b2a:	bf00      	nop
 8015b2c:	200002e4 	.word	0x200002e4
 8015b30:	200002f4 	.word	0x200002f4
 8015b34:	20006e9c 	.word	0x20006e9c

08015b38 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b084      	sub	sp, #16
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	60ba      	str	r2, [r7, #8]
 8015b40:	607b      	str	r3, [r7, #4]
 8015b42:	4603      	mov	r3, r0
 8015b44:	81fb      	strh	r3, [r7, #14]
 8015b46:	460b      	mov	r3, r1
 8015b48:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8015b4a:	2000      	movs	r0, #0
 8015b4c:	f000 f868 	bl	8015c20 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8015b50:	4b17      	ldr	r3, [pc, #92]	@ (8015bb0 <shci_send+0x78>)
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	89fa      	ldrh	r2, [r7, #14]
 8015b56:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8015b5a:	4b15      	ldr	r3, [pc, #84]	@ (8015bb0 <shci_send+0x78>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	7b7a      	ldrb	r2, [r7, #13]
 8015b60:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8015b62:	4b13      	ldr	r3, [pc, #76]	@ (8015bb0 <shci_send+0x78>)
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	330c      	adds	r3, #12
 8015b68:	7b7a      	ldrb	r2, [r7, #13]
 8015b6a:	68b9      	ldr	r1, [r7, #8]
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	f013 fbae 	bl	80292ce <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8015b72:	4b10      	ldr	r3, [pc, #64]	@ (8015bb4 <shci_send+0x7c>)
 8015b74:	2201      	movs	r2, #1
 8015b76:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8015b78:	4b0f      	ldr	r3, [pc, #60]	@ (8015bb8 <shci_send+0x80>)
 8015b7a:	691b      	ldr	r3, [r3, #16]
 8015b7c:	2100      	movs	r1, #0
 8015b7e:	2000      	movs	r0, #0
 8015b80:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8015b82:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8015b86:	f7eb ff19 	bl	80019bc <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f103 0008 	add.w	r0, r3, #8
 8015b90:	4b07      	ldr	r3, [pc, #28]	@ (8015bb0 <shci_send+0x78>)
 8015b92:	6819      	ldr	r1, [r3, #0]
 8015b94:	4b06      	ldr	r3, [pc, #24]	@ (8015bb0 <shci_send+0x78>)
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	789b      	ldrb	r3, [r3, #2]
 8015b9a:	3303      	adds	r3, #3
 8015b9c:	461a      	mov	r2, r3
 8015b9e:	f013 fb96 	bl	80292ce <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8015ba2:	2001      	movs	r0, #1
 8015ba4:	f000 f83c 	bl	8015c20 <Cmd_SetStatus>

  return;
 8015ba8:	bf00      	nop
}
 8015baa:	3710      	adds	r7, #16
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd80      	pop	{r7, pc}
 8015bb0:	200002f0 	.word	0x200002f0
 8015bb4:	20006ec0 	.word	0x20006ec0
 8015bb8:	20006e9c 	.word	0x20006e9c

08015bbc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b086      	sub	sp, #24
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8015bc4:	4a10      	ldr	r2, [pc, #64]	@ (8015c08 <TlInit+0x4c>)
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8015bca:	4810      	ldr	r0, [pc, #64]	@ (8015c0c <TlInit+0x50>)
 8015bcc:	f000 fe54 	bl	8016878 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8015bd0:	2001      	movs	r0, #1
 8015bd2:	f000 f825 	bl	8015c20 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8015bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8015c10 <TlInit+0x54>)
 8015bd8:	2201      	movs	r2, #1
 8015bda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8015bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8015c14 <TlInit+0x58>)
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d00c      	beq.n	8015bfe <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8015be8:	4b0b      	ldr	r3, [pc, #44]	@ (8015c18 <TlInit+0x5c>)
 8015bea:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8015bec:	4b0b      	ldr	r3, [pc, #44]	@ (8015c1c <TlInit+0x60>)
 8015bee:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8015bf0:	4b08      	ldr	r3, [pc, #32]	@ (8015c14 <TlInit+0x58>)
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	f107 020c 	add.w	r2, r7, #12
 8015bf8:	4610      	mov	r0, r2
 8015bfa:	4798      	blx	r3
  }

  return;
 8015bfc:	bf00      	nop
 8015bfe:	bf00      	nop
}
 8015c00:	3718      	adds	r7, #24
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop
 8015c08:	200002f0 	.word	0x200002f0
 8015c0c:	200002e4 	.word	0x200002e4
 8015c10:	200002f4 	.word	0x200002f4
 8015c14:	20006e9c 	.word	0x20006e9c
 8015c18:	08015c71 	.word	0x08015c71
 8015c1c:	08015c89 	.word	0x08015c89

08015c20 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b082      	sub	sp, #8
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	4603      	mov	r3, r0
 8015c28:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8015c2a:	79fb      	ldrb	r3, [r7, #7]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d10b      	bne.n	8015c48 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8015c30:	4b0d      	ldr	r3, [pc, #52]	@ (8015c68 <Cmd_SetStatus+0x48>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d003      	beq.n	8015c40 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8015c38:	4b0b      	ldr	r3, [pc, #44]	@ (8015c68 <Cmd_SetStatus+0x48>)
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	2000      	movs	r0, #0
 8015c3e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8015c40:	4b0a      	ldr	r3, [pc, #40]	@ (8015c6c <Cmd_SetStatus+0x4c>)
 8015c42:	2200      	movs	r2, #0
 8015c44:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8015c46:	e00b      	b.n	8015c60 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8015c48:	4b08      	ldr	r3, [pc, #32]	@ (8015c6c <Cmd_SetStatus+0x4c>)
 8015c4a:	2201      	movs	r2, #1
 8015c4c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8015c4e:	4b06      	ldr	r3, [pc, #24]	@ (8015c68 <Cmd_SetStatus+0x48>)
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d004      	beq.n	8015c60 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8015c56:	4b04      	ldr	r3, [pc, #16]	@ (8015c68 <Cmd_SetStatus+0x48>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	2001      	movs	r0, #1
 8015c5c:	4798      	blx	r3
  return;
 8015c5e:	bf00      	nop
 8015c60:	bf00      	nop
}
 8015c62:	3708      	adds	r7, #8
 8015c64:	46bd      	mov	sp, r7
 8015c66:	bd80      	pop	{r7, pc}
 8015c68:	20006ebc 	.word	0x20006ebc
 8015c6c:	200002ec 	.word	0x200002ec

08015c70 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b082      	sub	sp, #8
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8015c78:	2000      	movs	r0, #0
 8015c7a:	f7eb fe94 	bl	80019a6 <shci_cmd_resp_release>

  return;
 8015c7e:	bf00      	nop
}
 8015c80:	3708      	adds	r7, #8
 8015c82:	46bd      	mov	sp, r7
 8015c84:	bd80      	pop	{r7, pc}
	...

08015c88 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b082      	sub	sp, #8
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8015c90:	6879      	ldr	r1, [r7, #4]
 8015c92:	4805      	ldr	r0, [pc, #20]	@ (8015ca8 <TlUserEvtReceived+0x20>)
 8015c94:	f000 fe48 	bl	8016928 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8015c98:	4803      	ldr	r0, [pc, #12]	@ (8015ca8 <TlUserEvtReceived+0x20>)
 8015c9a:	f7eb fe77 	bl	800198c <shci_notify_asynch_evt>

  return;
 8015c9e:	bf00      	nop
}
 8015ca0:	3708      	adds	r7, #8
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd80      	pop	{r7, pc}
 8015ca6:	bf00      	nop
 8015ca8:	200002e4 	.word	0x200002e4

08015cac <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8015cac:	b480      	push	{r7}
 8015cae:	b083      	sub	sp, #12
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	4a05      	ldr	r2, [pc, #20]	@ (8015ccc <shci_register_io_bus+0x20>)
 8015cb8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	4a04      	ldr	r2, [pc, #16]	@ (8015cd0 <shci_register_io_bus+0x24>)
 8015cbe:	611a      	str	r2, [r3, #16]

  return;
 8015cc0:	bf00      	nop
}
 8015cc2:	370c      	adds	r7, #12
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cca:	4770      	bx	lr
 8015ccc:	08015e69 	.word	0x08015e69
 8015cd0:	08015ebd 	.word	0x08015ebd

08015cd4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8015cd8:	f7f1 fda2 	bl	8007820 <HW_IPCC_Enable>

  return;
 8015cdc:	bf00      	nop
}
 8015cde:	bd80      	pop	{r7, pc}

08015ce0 <TL_Init>:


void TL_Init( void )
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8015ce4:	4b10      	ldr	r3, [pc, #64]	@ (8015d28 <TL_Init+0x48>)
 8015ce6:	4a11      	ldr	r2, [pc, #68]	@ (8015d2c <TL_Init+0x4c>)
 8015ce8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8015cea:	4b0f      	ldr	r3, [pc, #60]	@ (8015d28 <TL_Init+0x48>)
 8015cec:	4a10      	ldr	r2, [pc, #64]	@ (8015d30 <TL_Init+0x50>)
 8015cee:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8015cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8015d28 <TL_Init+0x48>)
 8015cf2:	4a10      	ldr	r2, [pc, #64]	@ (8015d34 <TL_Init+0x54>)
 8015cf4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8015cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8015d28 <TL_Init+0x48>)
 8015cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8015d38 <TL_Init+0x58>)
 8015cfa:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8015cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8015d28 <TL_Init+0x48>)
 8015cfe:	4a0f      	ldr	r2, [pc, #60]	@ (8015d3c <TL_Init+0x5c>)
 8015d00:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8015d02:	4b09      	ldr	r3, [pc, #36]	@ (8015d28 <TL_Init+0x48>)
 8015d04:	4a0e      	ldr	r2, [pc, #56]	@ (8015d40 <TL_Init+0x60>)
 8015d06:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8015d08:	4b07      	ldr	r3, [pc, #28]	@ (8015d28 <TL_Init+0x48>)
 8015d0a:	4a0e      	ldr	r2, [pc, #56]	@ (8015d44 <TL_Init+0x64>)
 8015d0c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8015d0e:	4b06      	ldr	r3, [pc, #24]	@ (8015d28 <TL_Init+0x48>)
 8015d10:	4a0d      	ldr	r2, [pc, #52]	@ (8015d48 <TL_Init+0x68>)
 8015d12:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8015d14:	4b04      	ldr	r3, [pc, #16]	@ (8015d28 <TL_Init+0x48>)
 8015d16:	4a0d      	ldr	r2, [pc, #52]	@ (8015d4c <TL_Init+0x6c>)
 8015d18:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8015d1a:	4b03      	ldr	r3, [pc, #12]	@ (8015d28 <TL_Init+0x48>)
 8015d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8015d50 <TL_Init+0x70>)
 8015d1e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8015d20:	f7f1 fd92 	bl	8007848 <HW_IPCC_Init>

  return;
 8015d24:	bf00      	nop
}
 8015d26:	bd80      	pop	{r7, pc}
 8015d28:	20030000 	.word	0x20030000
 8015d2c:	20030134 	.word	0x20030134
 8015d30:	20030154 	.word	0x20030154
 8015d34:	20030164 	.word	0x20030164
 8015d38:	20030174 	.word	0x20030174
 8015d3c:	2003017c 	.word	0x2003017c
 8015d40:	20030184 	.word	0x20030184
 8015d44:	2003018c 	.word	0x2003018c
 8015d48:	200301a8 	.word	0x200301a8
 8015d4c:	200301ac 	.word	0x200301ac
 8015d50:	200301b8 	.word	0x200301b8

08015d54 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b084      	sub	sp, #16
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8015d60:	4811      	ldr	r0, [pc, #68]	@ (8015da8 <TL_BLE_Init+0x54>)
 8015d62:	f000 fd89 	bl	8016878 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8015d66:	4b11      	ldr	r3, [pc, #68]	@ (8015dac <TL_BLE_Init+0x58>)
 8015d68:	685b      	ldr	r3, [r3, #4]
 8015d6a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	689a      	ldr	r2, [r3, #8]
 8015d70:	68bb      	ldr	r3, [r7, #8]
 8015d72:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	68da      	ldr	r2, [r3, #12]
 8015d78:	68bb      	ldr	r3, [r7, #8]
 8015d7a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8015d7c:	68bb      	ldr	r3, [r7, #8]
 8015d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8015db0 <TL_BLE_Init+0x5c>)
 8015d80:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8015d82:	68bb      	ldr	r3, [r7, #8]
 8015d84:	4a08      	ldr	r2, [pc, #32]	@ (8015da8 <TL_BLE_Init+0x54>)
 8015d86:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8015d88:	f7f1 fd74 	bl	8007874 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	4a08      	ldr	r2, [pc, #32]	@ (8015db4 <TL_BLE_Init+0x60>)
 8015d92:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	685b      	ldr	r3, [r3, #4]
 8015d98:	4a07      	ldr	r2, [pc, #28]	@ (8015db8 <TL_BLE_Init+0x64>)
 8015d9a:	6013      	str	r3, [r2, #0]

  return 0;
 8015d9c:	2300      	movs	r3, #0
}
 8015d9e:	4618      	mov	r0, r3
 8015da0:	3710      	adds	r7, #16
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bd80      	pop	{r7, pc}
 8015da6:	bf00      	nop
 8015da8:	200301d4 	.word	0x200301d4
 8015dac:	20030000 	.word	0x20030000
 8015db0:	20030a58 	.word	0x20030a58
 8015db4:	20006ecc 	.word	0x20006ecc
 8015db8:	20006ed0 	.word	0x20006ed0

08015dbc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b082      	sub	sp, #8
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
 8015dc4:	460b      	mov	r3, r1
 8015dc6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8015dc8:	4b09      	ldr	r3, [pc, #36]	@ (8015df0 <TL_BLE_SendCmd+0x34>)
 8015dca:	685b      	ldr	r3, [r3, #4]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	2201      	movs	r2, #1
 8015dd0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8015dd2:	4b07      	ldr	r3, [pc, #28]	@ (8015df0 <TL_BLE_SendCmd+0x34>)
 8015dd4:	685b      	ldr	r3, [r3, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	4619      	mov	r1, r3
 8015dda:	2001      	movs	r0, #1
 8015ddc:	f000 f96c 	bl	80160b8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8015de0:	f7f1 fd52 	bl	8007888 <HW_IPCC_BLE_SendCmd>

  return 0;
 8015de4:	2300      	movs	r3, #0
}
 8015de6:	4618      	mov	r0, r3
 8015de8:	3708      	adds	r7, #8
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}
 8015dee:	bf00      	nop
 8015df0:	20030000 	.word	0x20030000

08015df4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b082      	sub	sp, #8
 8015df8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8015dfa:	e01c      	b.n	8015e36 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8015dfc:	1d3b      	adds	r3, r7, #4
 8015dfe:	4619      	mov	r1, r3
 8015e00:	4812      	ldr	r0, [pc, #72]	@ (8015e4c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8015e02:	f000 fdd8 	bl	80169b6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	7a5b      	ldrb	r3, [r3, #9]
 8015e0a:	2b0f      	cmp	r3, #15
 8015e0c:	d003      	beq.n	8015e16 <HW_IPCC_BLE_RxEvtNot+0x22>
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	7a5b      	ldrb	r3, [r3, #9]
 8015e12:	2b0e      	cmp	r3, #14
 8015e14:	d105      	bne.n	8015e22 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	4619      	mov	r1, r3
 8015e1a:	2002      	movs	r0, #2
 8015e1c:	f000 f94c 	bl	80160b8 <OutputDbgTrace>
 8015e20:	e004      	b.n	8015e2c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	4619      	mov	r1, r3
 8015e26:	2003      	movs	r0, #3
 8015e28:	f000 f946 	bl	80160b8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8015e2c:	4b08      	ldr	r3, [pc, #32]	@ (8015e50 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	687a      	ldr	r2, [r7, #4]
 8015e32:	4610      	mov	r0, r2
 8015e34:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8015e36:	4805      	ldr	r0, [pc, #20]	@ (8015e4c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8015e38:	f000 fd2e 	bl	8016898 <LST_is_empty>
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d0dc      	beq.n	8015dfc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8015e42:	bf00      	nop
}
 8015e44:	3708      	adds	r7, #8
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}
 8015e4a:	bf00      	nop
 8015e4c:	200301d4 	.word	0x200301d4
 8015e50:	20006ecc 	.word	0x20006ecc

08015e54 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8015e58:	4b02      	ldr	r3, [pc, #8]	@ (8015e64 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	4798      	blx	r3

  return;
 8015e5e:	bf00      	nop
}
 8015e60:	bd80      	pop	{r7, pc}
 8015e62:	bf00      	nop
 8015e64:	20006ed0 	.word	0x20006ed0

08015e68 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b084      	sub	sp, #16
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8015e74:	480d      	ldr	r0, [pc, #52]	@ (8015eac <TL_SYS_Init+0x44>)
 8015e76:	f000 fcff 	bl	8016878 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8015e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8015eb0 <TL_SYS_Init+0x48>)
 8015e7c:	68db      	ldr	r3, [r3, #12]
 8015e7e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	689a      	ldr	r2, [r3, #8]
 8015e84:	68bb      	ldr	r3, [r7, #8]
 8015e86:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8015e88:	68bb      	ldr	r3, [r7, #8]
 8015e8a:	4a08      	ldr	r2, [pc, #32]	@ (8015eac <TL_SYS_Init+0x44>)
 8015e8c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8015e8e:	f7f1 fd1d 	bl	80078cc <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	4a07      	ldr	r2, [pc, #28]	@ (8015eb4 <TL_SYS_Init+0x4c>)
 8015e98:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	685b      	ldr	r3, [r3, #4]
 8015e9e:	4a06      	ldr	r2, [pc, #24]	@ (8015eb8 <TL_SYS_Init+0x50>)
 8015ea0:	6013      	str	r3, [r2, #0]

  return 0;
 8015ea2:	2300      	movs	r3, #0
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	3710      	adds	r7, #16
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}
 8015eac:	200301dc 	.word	0x200301dc
 8015eb0:	20030000 	.word	0x20030000
 8015eb4:	20006ed4 	.word	0x20006ed4
 8015eb8:	20006ed8 	.word	0x20006ed8

08015ebc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b082      	sub	sp, #8
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
 8015ec4:	460b      	mov	r3, r1
 8015ec6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8015ec8:	4b09      	ldr	r3, [pc, #36]	@ (8015ef0 <TL_SYS_SendCmd+0x34>)
 8015eca:	68db      	ldr	r3, [r3, #12]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	2210      	movs	r2, #16
 8015ed0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8015ed2:	4b07      	ldr	r3, [pc, #28]	@ (8015ef0 <TL_SYS_SendCmd+0x34>)
 8015ed4:	68db      	ldr	r3, [r3, #12]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	4619      	mov	r1, r3
 8015eda:	2004      	movs	r0, #4
 8015edc:	f000 f8ec 	bl	80160b8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8015ee0:	f7f1 fcfe 	bl	80078e0 <HW_IPCC_SYS_SendCmd>

  return 0;
 8015ee4:	2300      	movs	r3, #0
}
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	3708      	adds	r7, #8
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}
 8015eee:	bf00      	nop
 8015ef0:	20030000 	.word	0x20030000

08015ef4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8015ef8:	4b07      	ldr	r3, [pc, #28]	@ (8015f18 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8015efa:	68db      	ldr	r3, [r3, #12]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	4619      	mov	r1, r3
 8015f00:	2005      	movs	r0, #5
 8015f02:	f000 f8d9 	bl	80160b8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8015f06:	4b05      	ldr	r3, [pc, #20]	@ (8015f1c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	4a03      	ldr	r2, [pc, #12]	@ (8015f18 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8015f0c:	68d2      	ldr	r2, [r2, #12]
 8015f0e:	6812      	ldr	r2, [r2, #0]
 8015f10:	4610      	mov	r0, r2
 8015f12:	4798      	blx	r3

  return;
 8015f14:	bf00      	nop
}
 8015f16:	bd80      	pop	{r7, pc}
 8015f18:	20030000 	.word	0x20030000
 8015f1c:	20006ed4 	.word	0x20006ed4

08015f20 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b082      	sub	sp, #8
 8015f24:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8015f26:	e00e      	b.n	8015f46 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8015f28:	1d3b      	adds	r3, r7, #4
 8015f2a:	4619      	mov	r1, r3
 8015f2c:	480b      	ldr	r0, [pc, #44]	@ (8015f5c <HW_IPCC_SYS_EvtNot+0x3c>)
 8015f2e:	f000 fd42 	bl	80169b6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	4619      	mov	r1, r3
 8015f36:	2006      	movs	r0, #6
 8015f38:	f000 f8be 	bl	80160b8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8015f3c:	4b08      	ldr	r3, [pc, #32]	@ (8015f60 <HW_IPCC_SYS_EvtNot+0x40>)
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	687a      	ldr	r2, [r7, #4]
 8015f42:	4610      	mov	r0, r2
 8015f44:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8015f46:	4805      	ldr	r0, [pc, #20]	@ (8015f5c <HW_IPCC_SYS_EvtNot+0x3c>)
 8015f48:	f000 fca6 	bl	8016898 <LST_is_empty>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d0ea      	beq.n	8015f28 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8015f52:	bf00      	nop
}
 8015f54:	3708      	adds	r7, #8
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
 8015f5a:	bf00      	nop
 8015f5c:	200301dc 	.word	0x200301dc
 8015f60:	20006ed8 	.word	0x20006ed8

08015f64 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b082      	sub	sp, #8
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8015f6c:	4817      	ldr	r0, [pc, #92]	@ (8015fcc <TL_MM_Init+0x68>)
 8015f6e:	f000 fc83 	bl	8016878 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8015f72:	4817      	ldr	r0, [pc, #92]	@ (8015fd0 <TL_MM_Init+0x6c>)
 8015f74:	f000 fc80 	bl	8016878 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8015f78:	4b16      	ldr	r3, [pc, #88]	@ (8015fd4 <TL_MM_Init+0x70>)
 8015f7a:	691b      	ldr	r3, [r3, #16]
 8015f7c:	4a16      	ldr	r2, [pc, #88]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015f7e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8015f80:	4b15      	ldr	r3, [pc, #84]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	687a      	ldr	r2, [r7, #4]
 8015f86:	6892      	ldr	r2, [r2, #8]
 8015f88:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8015f8a:	4b13      	ldr	r3, [pc, #76]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	687a      	ldr	r2, [r7, #4]
 8015f90:	68d2      	ldr	r2, [r2, #12]
 8015f92:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8015f94:	4b10      	ldr	r3, [pc, #64]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	4a0c      	ldr	r2, [pc, #48]	@ (8015fcc <TL_MM_Init+0x68>)
 8015f9a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8015f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	687a      	ldr	r2, [r7, #4]
 8015fa2:	6812      	ldr	r2, [r2, #0]
 8015fa4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8015fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	687a      	ldr	r2, [r7, #4]
 8015fac:	6852      	ldr	r2, [r2, #4]
 8015fae:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8015fb0:	4b09      	ldr	r3, [pc, #36]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	687a      	ldr	r2, [r7, #4]
 8015fb6:	6912      	ldr	r2, [r2, #16]
 8015fb8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8015fba:	4b07      	ldr	r3, [pc, #28]	@ (8015fd8 <TL_MM_Init+0x74>)
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	687a      	ldr	r2, [r7, #4]
 8015fc0:	6952      	ldr	r2, [r2, #20]
 8015fc2:	619a      	str	r2, [r3, #24]

  return;
 8015fc4:	bf00      	nop
}
 8015fc6:	3708      	adds	r7, #8
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}
 8015fcc:	200301c4 	.word	0x200301c4
 8015fd0:	20006ec4 	.word	0x20006ec4
 8015fd4:	20030000 	.word	0x20030000
 8015fd8:	20006edc 	.word	0x20006edc

08015fdc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b082      	sub	sp, #8
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8015fe4:	6879      	ldr	r1, [r7, #4]
 8015fe6:	4807      	ldr	r0, [pc, #28]	@ (8016004 <TL_MM_EvtDone+0x28>)
 8015fe8:	f000 fc9e 	bl	8016928 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8015fec:	6879      	ldr	r1, [r7, #4]
 8015fee:	2000      	movs	r0, #0
 8015ff0:	f000 f862 	bl	80160b8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8015ff4:	4804      	ldr	r0, [pc, #16]	@ (8016008 <TL_MM_EvtDone+0x2c>)
 8015ff6:	f7f1 fc99 	bl	800792c <HW_IPCC_MM_SendFreeBuf>

  return;
 8015ffa:	bf00      	nop
}
 8015ffc:	3708      	adds	r7, #8
 8015ffe:	46bd      	mov	sp, r7
 8016000:	bd80      	pop	{r7, pc}
 8016002:	bf00      	nop
 8016004:	20006ec4 	.word	0x20006ec4
 8016008:	0801600d 	.word	0x0801600d

0801600c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b082      	sub	sp, #8
 8016010:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016012:	e00c      	b.n	801602e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8016014:	1d3b      	adds	r3, r7, #4
 8016016:	4619      	mov	r1, r3
 8016018:	480a      	ldr	r0, [pc, #40]	@ (8016044 <SendFreeBuf+0x38>)
 801601a:	f000 fccc 	bl	80169b6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 801601e:	4b0a      	ldr	r3, [pc, #40]	@ (8016048 <SendFreeBuf+0x3c>)
 8016020:	691b      	ldr	r3, [r3, #16]
 8016022:	691b      	ldr	r3, [r3, #16]
 8016024:	687a      	ldr	r2, [r7, #4]
 8016026:	4611      	mov	r1, r2
 8016028:	4618      	mov	r0, r3
 801602a:	f000 fc7d 	bl	8016928 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801602e:	4805      	ldr	r0, [pc, #20]	@ (8016044 <SendFreeBuf+0x38>)
 8016030:	f000 fc32 	bl	8016898 <LST_is_empty>
 8016034:	4603      	mov	r3, r0
 8016036:	2b00      	cmp	r3, #0
 8016038:	d0ec      	beq.n	8016014 <SendFreeBuf+0x8>
  }

  return;
 801603a:	bf00      	nop
}
 801603c:	3708      	adds	r7, #8
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
 8016042:	bf00      	nop
 8016044:	20006ec4 	.word	0x20006ec4
 8016048:	20030000 	.word	0x20030000

0801604c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 801604c:	b580      	push	{r7, lr}
 801604e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8016050:	4805      	ldr	r0, [pc, #20]	@ (8016068 <TL_TRACES_Init+0x1c>)
 8016052:	f000 fc11 	bl	8016878 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8016056:	4b05      	ldr	r3, [pc, #20]	@ (801606c <TL_TRACES_Init+0x20>)
 8016058:	695b      	ldr	r3, [r3, #20]
 801605a:	4a03      	ldr	r2, [pc, #12]	@ (8016068 <TL_TRACES_Init+0x1c>)
 801605c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801605e:	f7f1 fc9b 	bl	8007998 <HW_IPCC_TRACES_Init>

  return;
 8016062:	bf00      	nop
}
 8016064:	bd80      	pop	{r7, pc}
 8016066:	bf00      	nop
 8016068:	200301cc 	.word	0x200301cc
 801606c:	20030000 	.word	0x20030000

08016070 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b082      	sub	sp, #8
 8016074:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016076:	e008      	b.n	801608a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8016078:	1d3b      	adds	r3, r7, #4
 801607a:	4619      	mov	r1, r3
 801607c:	4808      	ldr	r0, [pc, #32]	@ (80160a0 <HW_IPCC_TRACES_EvtNot+0x30>)
 801607e:	f000 fc9a 	bl	80169b6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	4618      	mov	r0, r3
 8016086:	f000 f80d 	bl	80160a4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801608a:	4805      	ldr	r0, [pc, #20]	@ (80160a0 <HW_IPCC_TRACES_EvtNot+0x30>)
 801608c:	f000 fc04 	bl	8016898 <LST_is_empty>
 8016090:	4603      	mov	r3, r0
 8016092:	2b00      	cmp	r3, #0
 8016094:	d0f0      	beq.n	8016078 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8016096:	bf00      	nop
}
 8016098:	3708      	adds	r7, #8
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}
 801609e:	bf00      	nop
 80160a0:	200301cc 	.word	0x200301cc

080160a4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80160a4:	b480      	push	{r7}
 80160a6:	b083      	sub	sp, #12
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80160ac:	bf00      	nop
 80160ae:	370c      	adds	r7, #12
 80160b0:	46bd      	mov	sp, r7
 80160b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b6:	4770      	bx	lr

080160b8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80160b8:	b480      	push	{r7}
 80160ba:	b085      	sub	sp, #20
 80160bc:	af00      	add	r7, sp, #0
 80160be:	4603      	mov	r3, r0
 80160c0:	6039      	str	r1, [r7, #0]
 80160c2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80160c4:	79fb      	ldrb	r3, [r7, #7]
 80160c6:	2b06      	cmp	r3, #6
 80160c8:	d845      	bhi.n	8016156 <OutputDbgTrace+0x9e>
 80160ca:	a201      	add	r2, pc, #4	@ (adr r2, 80160d0 <OutputDbgTrace+0x18>)
 80160cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160d0:	080160ed 	.word	0x080160ed
 80160d4:	08016111 	.word	0x08016111
 80160d8:	08016117 	.word	0x08016117
 80160dc:	0801612b 	.word	0x0801612b
 80160e0:	08016137 	.word	0x08016137
 80160e4:	0801613d 	.word	0x0801613d
 80160e8:	0801614b 	.word	0x0801614b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	7a5b      	ldrb	r3, [r3, #9]
 80160f4:	2bff      	cmp	r3, #255	@ 0xff
 80160f6:	d005      	beq.n	8016104 <OutputDbgTrace+0x4c>
 80160f8:	2bff      	cmp	r3, #255	@ 0xff
 80160fa:	dc05      	bgt.n	8016108 <OutputDbgTrace+0x50>
 80160fc:	2b0e      	cmp	r3, #14
 80160fe:	d005      	beq.n	801610c <OutputDbgTrace+0x54>
 8016100:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8016102:	e001      	b.n	8016108 <OutputDbgTrace+0x50>
          break;
 8016104:	bf00      	nop
 8016106:	e027      	b.n	8016158 <OutputDbgTrace+0xa0>
          break;
 8016108:	bf00      	nop
 801610a:	e025      	b.n	8016158 <OutputDbgTrace+0xa0>
          break;
 801610c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 801610e:	e023      	b.n	8016158 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016114:	e020      	b.n	8016158 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	7a5b      	ldrb	r3, [r3, #9]
 801611e:	2b0e      	cmp	r3, #14
 8016120:	d001      	beq.n	8016126 <OutputDbgTrace+0x6e>
 8016122:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8016124:	e000      	b.n	8016128 <OutputDbgTrace+0x70>
          break;
 8016126:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016128:	e016      	b.n	8016158 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801612a:	683b      	ldr	r3, [r7, #0]
 801612c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	7a5b      	ldrb	r3, [r3, #9]
 8016132:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016134:	e010      	b.n	8016158 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801613a:	e00d      	b.n	8016158 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	7a5b      	ldrb	r3, [r3, #9]
 8016144:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8016146:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016148:	e006      	b.n	8016158 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801614a:	683b      	ldr	r3, [r7, #0]
 801614c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	7a5b      	ldrb	r3, [r3, #9]
 8016152:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016154:	e000      	b.n	8016158 <OutputDbgTrace+0xa0>

    default:
      break;
 8016156:	bf00      	nop
  }

  return;
 8016158:	bf00      	nop
}
 801615a:	3714      	adds	r7, #20
 801615c:	46bd      	mov	sp, r7
 801615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016162:	4770      	bx	lr

08016164 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b086      	sub	sp, #24
 8016168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801616a:	f3ef 8310 	mrs	r3, PRIMASK
 801616e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016170:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8016172:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016174:	b672      	cpsid	i
}
 8016176:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8016178:	1cbb      	adds	r3, r7, #2
 801617a:	4619      	mov	r1, r3
 801617c:	4812      	ldr	r0, [pc, #72]	@ (80161c8 <DbgTrace_TxCpltCallback+0x64>)
 801617e:	f000 fe91 	bl	8016ea4 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8016182:	1cbb      	adds	r3, r7, #2
 8016184:	4619      	mov	r1, r3
 8016186:	4810      	ldr	r0, [pc, #64]	@ (80161c8 <DbgTrace_TxCpltCallback+0x64>)
 8016188:	f000 ff7b 	bl	8017082 <CircularQueue_Sense>
 801618c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d00c      	beq.n	80161ae <DbgTrace_TxCpltCallback+0x4a>
 8016194:	697b      	ldr	r3, [r7, #20]
 8016196:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016198:	68bb      	ldr	r3, [r7, #8]
 801619a:	f383 8810 	msr	PRIMASK, r3
}
 801619e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 80161a0:	887b      	ldrh	r3, [r7, #2]
 80161a2:	4a0a      	ldr	r2, [pc, #40]	@ (80161cc <DbgTrace_TxCpltCallback+0x68>)
 80161a4:	4619      	mov	r1, r3
 80161a6:	6938      	ldr	r0, [r7, #16]
 80161a8:	f7ea ffd6 	bl	8001158 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 80161ac:	e008      	b.n	80161c0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 80161ae:	4b08      	ldr	r3, [pc, #32]	@ (80161d0 <DbgTrace_TxCpltCallback+0x6c>)
 80161b0:	2201      	movs	r2, #1
 80161b2:	701a      	strb	r2, [r3, #0]
 80161b4:	697b      	ldr	r3, [r7, #20]
 80161b6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	f383 8810 	msr	PRIMASK, r3
}
 80161be:	bf00      	nop
}
 80161c0:	bf00      	nop
 80161c2:	3718      	adds	r7, #24
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}
 80161c8:	20006ee0 	.word	0x20006ee0
 80161cc:	08016165 	.word	0x08016165
 80161d0:	200000b0 	.word	0x200000b0

080161d4 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b082      	sub	sp, #8
 80161d8:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 80161da:	f7ea ffb6 	bl	800114a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80161de:	2302      	movs	r3, #2
 80161e0:	9300      	str	r3, [sp, #0]
 80161e2:	2300      	movs	r3, #0
 80161e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80161e8:	4903      	ldr	r1, [pc, #12]	@ (80161f8 <DbgTraceInit+0x24>)
 80161ea:	4804      	ldr	r0, [pc, #16]	@ (80161fc <DbgTraceInit+0x28>)
 80161ec:	f000 fc02 	bl	80169f4 <CircularQueue_Init>
#endif 
#endif
  return;
 80161f0:	bf00      	nop
}
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}
 80161f6:	bf00      	nop
 80161f8:	20006f00 	.word	0x20006f00
 80161fc:	20006ee0 	.word	0x20006ee0

08016200 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b084      	sub	sp, #16
 8016204:	af00      	add	r7, sp, #0
 8016206:	60f8      	str	r0, [r7, #12]
 8016208:	60b9      	str	r1, [r7, #8]
 801620a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 801620c:	687a      	ldr	r2, [r7, #4]
 801620e:	68b9      	ldr	r1, [r7, #8]
 8016210:	68f8      	ldr	r0, [r7, #12]
 8016212:	f000 f805 	bl	8016220 <DbgTraceWrite>
 8016216:	4603      	mov	r3, r0
}
 8016218:	4618      	mov	r0, r3
 801621a:	3710      	adds	r7, #16
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}

08016220 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b08a      	sub	sp, #40	@ 0x28
 8016224:	af00      	add	r7, sp, #0
 8016226:	60f8      	str	r0, [r7, #12]
 8016228:	60b9      	str	r1, [r7, #8]
 801622a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 801622c:	2300      	movs	r3, #0
 801622e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016230:	f3ef 8310 	mrs	r3, PRIMASK
 8016234:	61bb      	str	r3, [r7, #24]
  return(result);
 8016236:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8016238:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016240:	d102      	bne.n	8016248 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8016242:	2300      	movs	r3, #0
 8016244:	627b      	str	r3, [r7, #36]	@ 0x24
 8016246:	e037      	b.n	80162b8 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	2b01      	cmp	r3, #1
 801624c:	d006      	beq.n	801625c <DbgTraceWrite+0x3c>
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	2b02      	cmp	r3, #2
 8016252:	d003      	beq.n	801625c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8016254:	f04f 33ff 	mov.w	r3, #4294967295
 8016258:	627b      	str	r3, [r7, #36]	@ 0x24
 801625a:	e02d      	b.n	80162b8 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d02a      	beq.n	80162b8 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8016266:	b672      	cpsid	i
}
 8016268:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	b29a      	uxth	r2, r3
 801626e:	2301      	movs	r3, #1
 8016270:	68b9      	ldr	r1, [r7, #8]
 8016272:	4814      	ldr	r0, [pc, #80]	@ (80162c4 <DbgTraceWrite+0xa4>)
 8016274:	f000 fbf0 	bl	8016a58 <CircularQueue_Add>
 8016278:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 801627a:	69fb      	ldr	r3, [r7, #28]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d015      	beq.n	80162ac <DbgTraceWrite+0x8c>
 8016280:	4b11      	ldr	r3, [pc, #68]	@ (80162c8 <DbgTraceWrite+0xa8>)
 8016282:	781b      	ldrb	r3, [r3, #0]
 8016284:	b2db      	uxtb	r3, r3
 8016286:	2b00      	cmp	r3, #0
 8016288:	d010      	beq.n	80162ac <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 801628a:	4b0f      	ldr	r3, [pc, #60]	@ (80162c8 <DbgTraceWrite+0xa8>)
 801628c:	2200      	movs	r2, #0
 801628e:	701a      	strb	r2, [r3, #0]
 8016290:	6a3b      	ldr	r3, [r7, #32]
 8016292:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016294:	697b      	ldr	r3, [r7, #20]
 8016296:	f383 8810 	msr	PRIMASK, r3
}
 801629a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	b29b      	uxth	r3, r3
 80162a0:	4a0a      	ldr	r2, [pc, #40]	@ (80162cc <DbgTraceWrite+0xac>)
 80162a2:	4619      	mov	r1, r3
 80162a4:	69f8      	ldr	r0, [r7, #28]
 80162a6:	f7ea ff57 	bl	8001158 <DbgOutputTraces>
 80162aa:	e005      	b.n	80162b8 <DbgTraceWrite+0x98>
 80162ac:	6a3b      	ldr	r3, [r7, #32]
 80162ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80162b0:	693b      	ldr	r3, [r7, #16]
 80162b2:	f383 8810 	msr	PRIMASK, r3
}
 80162b6:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 80162b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80162ba:	4618      	mov	r0, r3
 80162bc:	3728      	adds	r7, #40	@ 0x28
 80162be:	46bd      	mov	sp, r7
 80162c0:	bd80      	pop	{r7, pc}
 80162c2:	bf00      	nop
 80162c4:	20006ee0 	.word	0x20006ee0
 80162c8:	200000b0 	.word	0x200000b0
 80162cc:	08016165 	.word	0x08016165

080162d0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80162d0:	b480      	push	{r7}
 80162d2:	b085      	sub	sp, #20
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	4603      	mov	r3, r0
 80162d8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80162da:	4b0f      	ldr	r3, [pc, #60]	@ (8016318 <OTP_Read+0x48>)
 80162dc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80162de:	e002      	b.n	80162e6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	3b08      	subs	r3, #8
 80162e4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	3307      	adds	r3, #7
 80162ea:	781b      	ldrb	r3, [r3, #0]
 80162ec:	79fa      	ldrb	r2, [r7, #7]
 80162ee:	429a      	cmp	r2, r3
 80162f0:	d003      	beq.n	80162fa <OTP_Read+0x2a>
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	4a09      	ldr	r2, [pc, #36]	@ (801631c <OTP_Read+0x4c>)
 80162f6:	4293      	cmp	r3, r2
 80162f8:	d1f2      	bne.n	80162e0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	3307      	adds	r3, #7
 80162fe:	781b      	ldrb	r3, [r3, #0]
 8016300:	79fa      	ldrb	r2, [r7, #7]
 8016302:	429a      	cmp	r2, r3
 8016304:	d001      	beq.n	801630a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8016306:	2300      	movs	r3, #0
 8016308:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 801630a:	68fb      	ldr	r3, [r7, #12]
}
 801630c:	4618      	mov	r0, r3
 801630e:	3714      	adds	r7, #20
 8016310:	46bd      	mov	sp, r7
 8016312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016316:	4770      	bx	lr
 8016318:	1fff73f8 	.word	0x1fff73f8
 801631c:	1fff7000 	.word	0x1fff7000

08016320 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8016320:	b480      	push	{r7}
 8016322:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8016324:	4b05      	ldr	r3, [pc, #20]	@ (801633c <UTIL_LPM_Init+0x1c>)
 8016326:	2200      	movs	r2, #0
 8016328:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801632a:	4b05      	ldr	r3, [pc, #20]	@ (8016340 <UTIL_LPM_Init+0x20>)
 801632c:	2200      	movs	r2, #0
 801632e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8016330:	bf00      	nop
 8016332:	46bd      	mov	sp, r7
 8016334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016338:	4770      	bx	lr
 801633a:	bf00      	nop
 801633c:	20007f00 	.word	0x20007f00
 8016340:	20007f04 	.word	0x20007f04

08016344 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8016344:	b480      	push	{r7}
 8016346:	b087      	sub	sp, #28
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
 801634c:	460b      	mov	r3, r1
 801634e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016350:	f3ef 8310 	mrs	r3, PRIMASK
 8016354:	613b      	str	r3, [r7, #16]
  return(result);
 8016356:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8016358:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801635a:	b672      	cpsid	i
}
 801635c:	bf00      	nop
  
  switch( state )
 801635e:	78fb      	ldrb	r3, [r7, #3]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d008      	beq.n	8016376 <UTIL_LPM_SetStopMode+0x32>
 8016364:	2b01      	cmp	r3, #1
 8016366:	d10e      	bne.n	8016386 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8016368:	4b0d      	ldr	r3, [pc, #52]	@ (80163a0 <UTIL_LPM_SetStopMode+0x5c>)
 801636a:	681a      	ldr	r2, [r3, #0]
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	4313      	orrs	r3, r2
 8016370:	4a0b      	ldr	r2, [pc, #44]	@ (80163a0 <UTIL_LPM_SetStopMode+0x5c>)
 8016372:	6013      	str	r3, [r2, #0]
      break;
 8016374:	e008      	b.n	8016388 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	43da      	mvns	r2, r3
 801637a:	4b09      	ldr	r3, [pc, #36]	@ (80163a0 <UTIL_LPM_SetStopMode+0x5c>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	4013      	ands	r3, r2
 8016380:	4a07      	ldr	r2, [pc, #28]	@ (80163a0 <UTIL_LPM_SetStopMode+0x5c>)
 8016382:	6013      	str	r3, [r2, #0]
      break;
 8016384:	e000      	b.n	8016388 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8016386:	bf00      	nop
 8016388:	697b      	ldr	r3, [r7, #20]
 801638a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	f383 8810 	msr	PRIMASK, r3
}
 8016392:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8016394:	bf00      	nop
 8016396:	371c      	adds	r7, #28
 8016398:	46bd      	mov	sp, r7
 801639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639e:	4770      	bx	lr
 80163a0:	20007f00 	.word	0x20007f00

080163a4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80163a4:	b480      	push	{r7}
 80163a6:	b087      	sub	sp, #28
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	6078      	str	r0, [r7, #4]
 80163ac:	460b      	mov	r3, r1
 80163ae:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80163b0:	f3ef 8310 	mrs	r3, PRIMASK
 80163b4:	613b      	str	r3, [r7, #16]
  return(result);
 80163b6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80163b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80163ba:	b672      	cpsid	i
}
 80163bc:	bf00      	nop
  
  switch(state)
 80163be:	78fb      	ldrb	r3, [r7, #3]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d008      	beq.n	80163d6 <UTIL_LPM_SetOffMode+0x32>
 80163c4:	2b01      	cmp	r3, #1
 80163c6:	d10e      	bne.n	80163e6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80163c8:	4b0d      	ldr	r3, [pc, #52]	@ (8016400 <UTIL_LPM_SetOffMode+0x5c>)
 80163ca:	681a      	ldr	r2, [r3, #0]
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	4313      	orrs	r3, r2
 80163d0:	4a0b      	ldr	r2, [pc, #44]	@ (8016400 <UTIL_LPM_SetOffMode+0x5c>)
 80163d2:	6013      	str	r3, [r2, #0]
      break;
 80163d4:	e008      	b.n	80163e8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	43da      	mvns	r2, r3
 80163da:	4b09      	ldr	r3, [pc, #36]	@ (8016400 <UTIL_LPM_SetOffMode+0x5c>)
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	4013      	ands	r3, r2
 80163e0:	4a07      	ldr	r2, [pc, #28]	@ (8016400 <UTIL_LPM_SetOffMode+0x5c>)
 80163e2:	6013      	str	r3, [r2, #0]
      break;
 80163e4:	e000      	b.n	80163e8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80163e6:	bf00      	nop
 80163e8:	697b      	ldr	r3, [r7, #20]
 80163ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	f383 8810 	msr	PRIMASK, r3
}
 80163f2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80163f4:	bf00      	nop
 80163f6:	371c      	adds	r7, #28
 80163f8:	46bd      	mov	sp, r7
 80163fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fe:	4770      	bx	lr
 8016400:	20007f04 	.word	0x20007f04

08016404 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b090      	sub	sp, #64	@ 0x40
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801640c:	4b73      	ldr	r3, [pc, #460]	@ (80165dc <UTIL_SEQ_Run+0x1d8>)
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8016412:	4b72      	ldr	r3, [pc, #456]	@ (80165dc <UTIL_SEQ_Run+0x1d8>)
 8016414:	681a      	ldr	r2, [r3, #0]
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	4013      	ands	r3, r2
 801641a:	4a70      	ldr	r2, [pc, #448]	@ (80165dc <UTIL_SEQ_Run+0x1d8>)
 801641c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801641e:	4b70      	ldr	r3, [pc, #448]	@ (80165e0 <UTIL_SEQ_Run+0x1dc>)
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8016424:	4b6f      	ldr	r3, [pc, #444]	@ (80165e4 <UTIL_SEQ_Run+0x1e0>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801642a:	4b6f      	ldr	r3, [pc, #444]	@ (80165e8 <UTIL_SEQ_Run+0x1e4>)
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8016430:	4b6e      	ldr	r3, [pc, #440]	@ (80165ec <UTIL_SEQ_Run+0x1e8>)
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8016436:	e08d      	b.n	8016554 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8016438:	2300      	movs	r3, #0
 801643a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801643c:	e002      	b.n	8016444 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801643e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016440:	3301      	adds	r3, #1
 8016442:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8016444:	4a6a      	ldr	r2, [pc, #424]	@ (80165f0 <UTIL_SEQ_Run+0x1ec>)
 8016446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016448:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801644c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801644e:	401a      	ands	r2, r3
 8016450:	4b62      	ldr	r3, [pc, #392]	@ (80165dc <UTIL_SEQ_Run+0x1d8>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	4013      	ands	r3, r2
 8016456:	2b00      	cmp	r3, #0
 8016458:	d0f1      	beq.n	801643e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801645a:	4a65      	ldr	r2, [pc, #404]	@ (80165f0 <UTIL_SEQ_Run+0x1ec>)
 801645c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801645e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016464:	401a      	ands	r2, r3
 8016466:	4b5d      	ldr	r3, [pc, #372]	@ (80165dc <UTIL_SEQ_Run+0x1d8>)
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	4013      	ands	r3, r2
 801646c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801646e:	4a60      	ldr	r2, [pc, #384]	@ (80165f0 <UTIL_SEQ_Run+0x1ec>)
 8016470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016472:	00db      	lsls	r3, r3, #3
 8016474:	4413      	add	r3, r2
 8016476:	685a      	ldr	r2, [r3, #4]
 8016478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801647a:	4013      	ands	r3, r2
 801647c:	2b00      	cmp	r3, #0
 801647e:	d106      	bne.n	801648e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8016480:	4a5b      	ldr	r2, [pc, #364]	@ (80165f0 <UTIL_SEQ_Run+0x1ec>)
 8016482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016484:	00db      	lsls	r3, r3, #3
 8016486:	4413      	add	r3, r2
 8016488:	f04f 32ff 	mov.w	r2, #4294967295
 801648c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801648e:	4a58      	ldr	r2, [pc, #352]	@ (80165f0 <UTIL_SEQ_Run+0x1ec>)
 8016490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016492:	00db      	lsls	r3, r3, #3
 8016494:	4413      	add	r3, r2
 8016496:	685a      	ldr	r2, [r3, #4]
 8016498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801649a:	4013      	ands	r3, r2
 801649c:	4618      	mov	r0, r3
 801649e:	f000 f9b3 	bl	8016808 <SEQ_BitPosition>
 80164a2:	4603      	mov	r3, r0
 80164a4:	461a      	mov	r2, r3
 80164a6:	4b53      	ldr	r3, [pc, #332]	@ (80165f4 <UTIL_SEQ_Run+0x1f0>)
 80164a8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80164aa:	4a51      	ldr	r2, [pc, #324]	@ (80165f0 <UTIL_SEQ_Run+0x1ec>)
 80164ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80164ae:	00db      	lsls	r3, r3, #3
 80164b0:	4413      	add	r3, r2
 80164b2:	685a      	ldr	r2, [r3, #4]
 80164b4:	4b4f      	ldr	r3, [pc, #316]	@ (80165f4 <UTIL_SEQ_Run+0x1f0>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	2101      	movs	r1, #1
 80164ba:	fa01 f303 	lsl.w	r3, r1, r3
 80164be:	43db      	mvns	r3, r3
 80164c0:	401a      	ands	r2, r3
 80164c2:	494b      	ldr	r1, [pc, #300]	@ (80165f0 <UTIL_SEQ_Run+0x1ec>)
 80164c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80164c6:	00db      	lsls	r3, r3, #3
 80164c8:	440b      	add	r3, r1
 80164ca:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80164cc:	f3ef 8310 	mrs	r3, PRIMASK
 80164d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80164d2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80164d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80164d6:	b672      	cpsid	i
}
 80164d8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80164da:	4b46      	ldr	r3, [pc, #280]	@ (80165f4 <UTIL_SEQ_Run+0x1f0>)
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	2201      	movs	r2, #1
 80164e0:	fa02 f303 	lsl.w	r3, r2, r3
 80164e4:	43da      	mvns	r2, r3
 80164e6:	4b3e      	ldr	r3, [pc, #248]	@ (80165e0 <UTIL_SEQ_Run+0x1dc>)
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	4013      	ands	r3, r2
 80164ec:	4a3c      	ldr	r2, [pc, #240]	@ (80165e0 <UTIL_SEQ_Run+0x1dc>)
 80164ee:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80164f0:	2302      	movs	r3, #2
 80164f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80164f4:	e013      	b.n	801651e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80164f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80164f8:	3b01      	subs	r3, #1
 80164fa:	4a3d      	ldr	r2, [pc, #244]	@ (80165f0 <UTIL_SEQ_Run+0x1ec>)
 80164fc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8016500:	4b3c      	ldr	r3, [pc, #240]	@ (80165f4 <UTIL_SEQ_Run+0x1f0>)
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	2201      	movs	r2, #1
 8016506:	fa02 f303 	lsl.w	r3, r2, r3
 801650a:	43da      	mvns	r2, r3
 801650c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801650e:	3b01      	subs	r3, #1
 8016510:	400a      	ands	r2, r1
 8016512:	4937      	ldr	r1, [pc, #220]	@ (80165f0 <UTIL_SEQ_Run+0x1ec>)
 8016514:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801651a:	3b01      	subs	r3, #1
 801651c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801651e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016520:	2b00      	cmp	r3, #0
 8016522:	d1e8      	bne.n	80164f6 <UTIL_SEQ_Run+0xf2>
 8016524:	6a3b      	ldr	r3, [r7, #32]
 8016526:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016528:	697b      	ldr	r3, [r7, #20]
 801652a:	f383 8810 	msr	PRIMASK, r3
}
 801652e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8016530:	4b30      	ldr	r3, [pc, #192]	@ (80165f4 <UTIL_SEQ_Run+0x1f0>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	4a30      	ldr	r2, [pc, #192]	@ (80165f8 <UTIL_SEQ_Run+0x1f4>)
 8016536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801653a:	4798      	blx	r3

    local_taskset = TaskSet;
 801653c:	4b28      	ldr	r3, [pc, #160]	@ (80165e0 <UTIL_SEQ_Run+0x1dc>)
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8016542:	4b28      	ldr	r3, [pc, #160]	@ (80165e4 <UTIL_SEQ_Run+0x1e0>)
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8016548:	4b27      	ldr	r3, [pc, #156]	@ (80165e8 <UTIL_SEQ_Run+0x1e4>)
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801654e:	4b27      	ldr	r3, [pc, #156]	@ (80165ec <UTIL_SEQ_Run+0x1e8>)
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8016554:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016558:	401a      	ands	r2, r3
 801655a:	4b20      	ldr	r3, [pc, #128]	@ (80165dc <UTIL_SEQ_Run+0x1d8>)
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	4013      	ands	r3, r2
 8016560:	2b00      	cmp	r3, #0
 8016562:	d005      	beq.n	8016570 <UTIL_SEQ_Run+0x16c>
 8016564:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016568:	4013      	ands	r3, r2
 801656a:	2b00      	cmp	r3, #0
 801656c:	f43f af64 	beq.w	8016438 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8016570:	4b20      	ldr	r3, [pc, #128]	@ (80165f4 <UTIL_SEQ_Run+0x1f0>)
 8016572:	f04f 32ff 	mov.w	r2, #4294967295
 8016576:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8016578:	f000 f938 	bl	80167ec <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801657c:	f3ef 8310 	mrs	r3, PRIMASK
 8016580:	613b      	str	r3, [r7, #16]
  return(result);
 8016582:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8016584:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8016586:	b672      	cpsid	i
}
 8016588:	bf00      	nop
  local_taskset = TaskSet;
 801658a:	4b15      	ldr	r3, [pc, #84]	@ (80165e0 <UTIL_SEQ_Run+0x1dc>)
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8016590:	4b14      	ldr	r3, [pc, #80]	@ (80165e4 <UTIL_SEQ_Run+0x1e0>)
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8016596:	4b14      	ldr	r3, [pc, #80]	@ (80165e8 <UTIL_SEQ_Run+0x1e4>)
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801659c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801659e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165a0:	401a      	ands	r2, r3
 80165a2:	4b0e      	ldr	r3, [pc, #56]	@ (80165dc <UTIL_SEQ_Run+0x1d8>)
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	4013      	ands	r3, r2
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d107      	bne.n	80165bc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80165ac:	4b0f      	ldr	r3, [pc, #60]	@ (80165ec <UTIL_SEQ_Run+0x1e8>)
 80165ae:	681a      	ldr	r2, [r3, #0]
 80165b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165b2:	4013      	ands	r3, r2
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d101      	bne.n	80165bc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80165b8:	f7eb f9d4 	bl	8001964 <UTIL_SEQ_Idle>
 80165bc:	69fb      	ldr	r3, [r7, #28]
 80165be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	f383 8810 	msr	PRIMASK, r3
}
 80165c6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80165c8:	f000 f917 	bl	80167fa <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80165cc:	4a03      	ldr	r2, [pc, #12]	@ (80165dc <UTIL_SEQ_Run+0x1d8>)
 80165ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165d0:	6013      	str	r3, [r2, #0]

  return;
 80165d2:	bf00      	nop
}
 80165d4:	3740      	adds	r7, #64	@ 0x40
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}
 80165da:	bf00      	nop
 80165dc:	200000b8 	.word	0x200000b8
 80165e0:	20007f08 	.word	0x20007f08
 80165e4:	20007f0c 	.word	0x20007f0c
 80165e8:	200000b4 	.word	0x200000b4
 80165ec:	20007f10 	.word	0x20007f10
 80165f0:	20007f98 	.word	0x20007f98
 80165f4:	20007f14 	.word	0x20007f14
 80165f8:	20007f18 	.word	0x20007f18

080165fc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b088      	sub	sp, #32
 8016600:	af00      	add	r7, sp, #0
 8016602:	60f8      	str	r0, [r7, #12]
 8016604:	60b9      	str	r1, [r7, #8]
 8016606:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016608:	f3ef 8310 	mrs	r3, PRIMASK
 801660c:	617b      	str	r3, [r7, #20]
  return(result);
 801660e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8016610:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8016612:	b672      	cpsid	i
}
 8016614:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8016616:	68f8      	ldr	r0, [r7, #12]
 8016618:	f000 f8f6 	bl	8016808 <SEQ_BitPosition>
 801661c:	4603      	mov	r3, r0
 801661e:	4619      	mov	r1, r3
 8016620:	4a06      	ldr	r2, [pc, #24]	@ (801663c <UTIL_SEQ_RegTask+0x40>)
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8016628:	69fb      	ldr	r3, [r7, #28]
 801662a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801662c:	69bb      	ldr	r3, [r7, #24]
 801662e:	f383 8810 	msr	PRIMASK, r3
}
 8016632:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8016634:	bf00      	nop
}
 8016636:	3720      	adds	r7, #32
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}
 801663c:	20007f18 	.word	0x20007f18

08016640 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8016640:	b480      	push	{r7}
 8016642:	b087      	sub	sp, #28
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
 8016648:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801664a:	f3ef 8310 	mrs	r3, PRIMASK
 801664e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016650:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016652:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016654:	b672      	cpsid	i
}
 8016656:	bf00      	nop

  TaskSet |= TaskId_bm;
 8016658:	4b0d      	ldr	r3, [pc, #52]	@ (8016690 <UTIL_SEQ_SetTask+0x50>)
 801665a:	681a      	ldr	r2, [r3, #0]
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	4313      	orrs	r3, r2
 8016660:	4a0b      	ldr	r2, [pc, #44]	@ (8016690 <UTIL_SEQ_SetTask+0x50>)
 8016662:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8016664:	4a0b      	ldr	r2, [pc, #44]	@ (8016694 <UTIL_SEQ_SetTask+0x54>)
 8016666:	683b      	ldr	r3, [r7, #0]
 8016668:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	431a      	orrs	r2, r3
 8016670:	4908      	ldr	r1, [pc, #32]	@ (8016694 <UTIL_SEQ_SetTask+0x54>)
 8016672:	683b      	ldr	r3, [r7, #0]
 8016674:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8016678:	697b      	ldr	r3, [r7, #20]
 801667a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801667c:	693b      	ldr	r3, [r7, #16]
 801667e:	f383 8810 	msr	PRIMASK, r3
}
 8016682:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016684:	bf00      	nop
}
 8016686:	371c      	adds	r7, #28
 8016688:	46bd      	mov	sp, r7
 801668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668e:	4770      	bx	lr
 8016690:	20007f08 	.word	0x20007f08
 8016694:	20007f98 	.word	0x20007f98

08016698 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8016698:	b480      	push	{r7}
 801669a:	b087      	sub	sp, #28
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80166a0:	f3ef 8310 	mrs	r3, PRIMASK
 80166a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80166a6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80166a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80166aa:	b672      	cpsid	i
}
 80166ac:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	43da      	mvns	r2, r3
 80166b2:	4b08      	ldr	r3, [pc, #32]	@ (80166d4 <UTIL_SEQ_PauseTask+0x3c>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	4013      	ands	r3, r2
 80166b8:	4a06      	ldr	r2, [pc, #24]	@ (80166d4 <UTIL_SEQ_PauseTask+0x3c>)
 80166ba:	6013      	str	r3, [r2, #0]
 80166bc:	697b      	ldr	r3, [r7, #20]
 80166be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166c0:	693b      	ldr	r3, [r7, #16]
 80166c2:	f383 8810 	msr	PRIMASK, r3
}
 80166c6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80166c8:	bf00      	nop
}
 80166ca:	371c      	adds	r7, #28
 80166cc:	46bd      	mov	sp, r7
 80166ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d2:	4770      	bx	lr
 80166d4:	200000b4 	.word	0x200000b4

080166d8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80166d8:	b480      	push	{r7}
 80166da:	b087      	sub	sp, #28
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80166e0:	f3ef 8310 	mrs	r3, PRIMASK
 80166e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80166e6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80166e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80166ea:	b672      	cpsid	i
}
 80166ec:	bf00      	nop

  TaskMask |= TaskId_bm;
 80166ee:	4b09      	ldr	r3, [pc, #36]	@ (8016714 <UTIL_SEQ_ResumeTask+0x3c>)
 80166f0:	681a      	ldr	r2, [r3, #0]
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	4313      	orrs	r3, r2
 80166f6:	4a07      	ldr	r2, [pc, #28]	@ (8016714 <UTIL_SEQ_ResumeTask+0x3c>)
 80166f8:	6013      	str	r3, [r2, #0]
 80166fa:	697b      	ldr	r3, [r7, #20]
 80166fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166fe:	693b      	ldr	r3, [r7, #16]
 8016700:	f383 8810 	msr	PRIMASK, r3
}
 8016704:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016706:	bf00      	nop
}
 8016708:	371c      	adds	r7, #28
 801670a:	46bd      	mov	sp, r7
 801670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016710:	4770      	bx	lr
 8016712:	bf00      	nop
 8016714:	200000b4 	.word	0x200000b4

08016718 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8016718:	b480      	push	{r7}
 801671a:	b087      	sub	sp, #28
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016720:	f3ef 8310 	mrs	r3, PRIMASK
 8016724:	60fb      	str	r3, [r7, #12]
  return(result);
 8016726:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801672a:	b672      	cpsid	i
}
 801672c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801672e:	4b09      	ldr	r3, [pc, #36]	@ (8016754 <UTIL_SEQ_SetEvt+0x3c>)
 8016730:	681a      	ldr	r2, [r3, #0]
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	4313      	orrs	r3, r2
 8016736:	4a07      	ldr	r2, [pc, #28]	@ (8016754 <UTIL_SEQ_SetEvt+0x3c>)
 8016738:	6013      	str	r3, [r2, #0]
 801673a:	697b      	ldr	r3, [r7, #20]
 801673c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801673e:	693b      	ldr	r3, [r7, #16]
 8016740:	f383 8810 	msr	PRIMASK, r3
}
 8016744:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016746:	bf00      	nop
}
 8016748:	371c      	adds	r7, #28
 801674a:	46bd      	mov	sp, r7
 801674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016750:	4770      	bx	lr
 8016752:	bf00      	nop
 8016754:	20007f0c 	.word	0x20007f0c

08016758 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b088      	sub	sp, #32
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8016760:	4b1f      	ldr	r3, [pc, #124]	@ (80167e0 <UTIL_SEQ_WaitEvt+0x88>)
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8016766:	4b1e      	ldr	r3, [pc, #120]	@ (80167e0 <UTIL_SEQ_WaitEvt+0x88>)
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801676e:	d102      	bne.n	8016776 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8016770:	2300      	movs	r3, #0
 8016772:	61fb      	str	r3, [r7, #28]
 8016774:	e005      	b.n	8016782 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8016776:	4b1a      	ldr	r3, [pc, #104]	@ (80167e0 <UTIL_SEQ_WaitEvt+0x88>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	2201      	movs	r2, #1
 801677c:	fa02 f303 	lsl.w	r3, r2, r3
 8016780:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8016782:	4b18      	ldr	r3, [pc, #96]	@ (80167e4 <UTIL_SEQ_WaitEvt+0x8c>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8016788:	4a16      	ldr	r2, [pc, #88]	@ (80167e4 <UTIL_SEQ_WaitEvt+0x8c>)
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801678e:	e003      	b.n	8016798 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8016790:	6879      	ldr	r1, [r7, #4]
 8016792:	69f8      	ldr	r0, [r7, #28]
 8016794:	f7eb f8ed 	bl	8001972 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8016798:	4b13      	ldr	r3, [pc, #76]	@ (80167e8 <UTIL_SEQ_WaitEvt+0x90>)
 801679a:	681a      	ldr	r2, [r3, #0]
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	4013      	ands	r3, r2
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d0f5      	beq.n	8016790 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80167a4:	4a0e      	ldr	r2, [pc, #56]	@ (80167e0 <UTIL_SEQ_WaitEvt+0x88>)
 80167a6:	69bb      	ldr	r3, [r7, #24]
 80167a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167aa:	f3ef 8310 	mrs	r3, PRIMASK
 80167ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80167b0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80167b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80167b4:	b672      	cpsid	i
}
 80167b6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	43da      	mvns	r2, r3
 80167bc:	4b0a      	ldr	r3, [pc, #40]	@ (80167e8 <UTIL_SEQ_WaitEvt+0x90>)
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	4013      	ands	r3, r2
 80167c2:	4a09      	ldr	r2, [pc, #36]	@ (80167e8 <UTIL_SEQ_WaitEvt+0x90>)
 80167c4:	6013      	str	r3, [r2, #0]
 80167c6:	693b      	ldr	r3, [r7, #16]
 80167c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	f383 8810 	msr	PRIMASK, r3
}
 80167d0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80167d2:	4a04      	ldr	r2, [pc, #16]	@ (80167e4 <UTIL_SEQ_WaitEvt+0x8c>)
 80167d4:	697b      	ldr	r3, [r7, #20]
 80167d6:	6013      	str	r3, [r2, #0]
  return;
 80167d8:	bf00      	nop
}
 80167da:	3720      	adds	r7, #32
 80167dc:	46bd      	mov	sp, r7
 80167de:	bd80      	pop	{r7, pc}
 80167e0:	20007f14 	.word	0x20007f14
 80167e4:	20007f10 	.word	0x20007f10
 80167e8:	20007f0c 	.word	0x20007f0c

080167ec <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80167ec:	b480      	push	{r7}
 80167ee:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80167f0:	bf00      	nop
}
 80167f2:	46bd      	mov	sp, r7
 80167f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f8:	4770      	bx	lr

080167fa <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80167fa:	b480      	push	{r7}
 80167fc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80167fe:	bf00      	nop
}
 8016800:	46bd      	mov	sp, r7
 8016802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016806:	4770      	bx	lr

08016808 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8016808:	b480      	push	{r7}
 801680a:	b085      	sub	sp, #20
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8016810:	2300      	movs	r3, #0
 8016812:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8016818:	68bb      	ldr	r3, [r7, #8]
 801681a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801681e:	d204      	bcs.n	801682a <SEQ_BitPosition+0x22>
 8016820:	2310      	movs	r3, #16
 8016822:	73fb      	strb	r3, [r7, #15]
 8016824:	68bb      	ldr	r3, [r7, #8]
 8016826:	041b      	lsls	r3, r3, #16
 8016828:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801682a:	68bb      	ldr	r3, [r7, #8]
 801682c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016830:	d205      	bcs.n	801683e <SEQ_BitPosition+0x36>
 8016832:	7bfb      	ldrb	r3, [r7, #15]
 8016834:	3308      	adds	r3, #8
 8016836:	73fb      	strb	r3, [r7, #15]
 8016838:	68bb      	ldr	r3, [r7, #8]
 801683a:	021b      	lsls	r3, r3, #8
 801683c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801683e:	68bb      	ldr	r3, [r7, #8]
 8016840:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016844:	d205      	bcs.n	8016852 <SEQ_BitPosition+0x4a>
 8016846:	7bfb      	ldrb	r3, [r7, #15]
 8016848:	3304      	adds	r3, #4
 801684a:	73fb      	strb	r3, [r7, #15]
 801684c:	68bb      	ldr	r3, [r7, #8]
 801684e:	011b      	lsls	r3, r3, #4
 8016850:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8016852:	68bb      	ldr	r3, [r7, #8]
 8016854:	0f1b      	lsrs	r3, r3, #28
 8016856:	4a07      	ldr	r2, [pc, #28]	@ (8016874 <SEQ_BitPosition+0x6c>)
 8016858:	5cd2      	ldrb	r2, [r2, r3]
 801685a:	7bfb      	ldrb	r3, [r7, #15]
 801685c:	4413      	add	r3, r2
 801685e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8016860:	7bfb      	ldrb	r3, [r7, #15]
 8016862:	f1c3 031f 	rsb	r3, r3, #31
 8016866:	b2db      	uxtb	r3, r3
}
 8016868:	4618      	mov	r0, r3
 801686a:	3714      	adds	r7, #20
 801686c:	46bd      	mov	sp, r7
 801686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016872:	4770      	bx	lr
 8016874:	08030e70 	.word	0x08030e70

08016878 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8016878:	b480      	push	{r7}
 801687a:	b083      	sub	sp, #12
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	687a      	ldr	r2, [r7, #4]
 8016884:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	687a      	ldr	r2, [r7, #4]
 801688a:	605a      	str	r2, [r3, #4]
}
 801688c:	bf00      	nop
 801688e:	370c      	adds	r7, #12
 8016890:	46bd      	mov	sp, r7
 8016892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016896:	4770      	bx	lr

08016898 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8016898:	b480      	push	{r7}
 801689a:	b087      	sub	sp, #28
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168a0:	f3ef 8310 	mrs	r3, PRIMASK
 80168a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80168a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80168a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80168aa:	b672      	cpsid	i
}
 80168ac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	687a      	ldr	r2, [r7, #4]
 80168b4:	429a      	cmp	r2, r3
 80168b6:	d102      	bne.n	80168be <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80168b8:	2301      	movs	r3, #1
 80168ba:	75fb      	strb	r3, [r7, #23]
 80168bc:	e001      	b.n	80168c2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80168be:	2300      	movs	r3, #0
 80168c0:	75fb      	strb	r3, [r7, #23]
 80168c2:	693b      	ldr	r3, [r7, #16]
 80168c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168c6:	68bb      	ldr	r3, [r7, #8]
 80168c8:	f383 8810 	msr	PRIMASK, r3
}
 80168cc:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80168ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80168d0:	4618      	mov	r0, r3
 80168d2:	371c      	adds	r7, #28
 80168d4:	46bd      	mov	sp, r7
 80168d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168da:	4770      	bx	lr

080168dc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80168dc:	b480      	push	{r7}
 80168de:	b087      	sub	sp, #28
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
 80168e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168e6:	f3ef 8310 	mrs	r3, PRIMASK
 80168ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80168ec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80168ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80168f0:	b672      	cpsid	i
}
 80168f2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	681a      	ldr	r2, [r3, #0]
 80168f8:	683b      	ldr	r3, [r7, #0]
 80168fa:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80168fc:	683b      	ldr	r3, [r7, #0]
 80168fe:	687a      	ldr	r2, [r7, #4]
 8016900:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	683a      	ldr	r2, [r7, #0]
 8016906:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016908:	683b      	ldr	r3, [r7, #0]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	683a      	ldr	r2, [r7, #0]
 801690e:	605a      	str	r2, [r3, #4]
 8016910:	697b      	ldr	r3, [r7, #20]
 8016912:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016914:	693b      	ldr	r3, [r7, #16]
 8016916:	f383 8810 	msr	PRIMASK, r3
}
 801691a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801691c:	bf00      	nop
 801691e:	371c      	adds	r7, #28
 8016920:	46bd      	mov	sp, r7
 8016922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016926:	4770      	bx	lr

08016928 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8016928:	b480      	push	{r7}
 801692a:	b087      	sub	sp, #28
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
 8016930:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016932:	f3ef 8310 	mrs	r3, PRIMASK
 8016936:	60fb      	str	r3, [r7, #12]
  return(result);
 8016938:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801693a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801693c:	b672      	cpsid	i
}
 801693e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8016940:	683b      	ldr	r3, [r7, #0]
 8016942:	687a      	ldr	r2, [r7, #4]
 8016944:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	685a      	ldr	r2, [r3, #4]
 801694a:	683b      	ldr	r3, [r7, #0]
 801694c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	683a      	ldr	r2, [r7, #0]
 8016952:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016954:	683b      	ldr	r3, [r7, #0]
 8016956:	685b      	ldr	r3, [r3, #4]
 8016958:	683a      	ldr	r2, [r7, #0]
 801695a:	601a      	str	r2, [r3, #0]
 801695c:	697b      	ldr	r3, [r7, #20]
 801695e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016960:	693b      	ldr	r3, [r7, #16]
 8016962:	f383 8810 	msr	PRIMASK, r3
}
 8016966:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016968:	bf00      	nop
 801696a:	371c      	adds	r7, #28
 801696c:	46bd      	mov	sp, r7
 801696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016972:	4770      	bx	lr

08016974 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8016974:	b480      	push	{r7}
 8016976:	b087      	sub	sp, #28
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801697c:	f3ef 8310 	mrs	r3, PRIMASK
 8016980:	60fb      	str	r3, [r7, #12]
  return(result);
 8016982:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016984:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016986:	b672      	cpsid	i
}
 8016988:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	685b      	ldr	r3, [r3, #4]
 801698e:	687a      	ldr	r2, [r7, #4]
 8016990:	6812      	ldr	r2, [r2, #0]
 8016992:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	687a      	ldr	r2, [r7, #4]
 801699a:	6852      	ldr	r2, [r2, #4]
 801699c:	605a      	str	r2, [r3, #4]
 801699e:	697b      	ldr	r3, [r7, #20]
 80169a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80169a2:	693b      	ldr	r3, [r7, #16]
 80169a4:	f383 8810 	msr	PRIMASK, r3
}
 80169a8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80169aa:	bf00      	nop
 80169ac:	371c      	adds	r7, #28
 80169ae:	46bd      	mov	sp, r7
 80169b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b4:	4770      	bx	lr

080169b6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80169b6:	b580      	push	{r7, lr}
 80169b8:	b086      	sub	sp, #24
 80169ba:	af00      	add	r7, sp, #0
 80169bc:	6078      	str	r0, [r7, #4]
 80169be:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80169c0:	f3ef 8310 	mrs	r3, PRIMASK
 80169c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80169c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80169c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80169ca:	b672      	cpsid	i
}
 80169cc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	681a      	ldr	r2, [r3, #0]
 80169d2:	683b      	ldr	r3, [r7, #0]
 80169d4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	4618      	mov	r0, r3
 80169dc:	f7ff ffca 	bl	8016974 <LST_remove_node>
 80169e0:	697b      	ldr	r3, [r7, #20]
 80169e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80169e4:	693b      	ldr	r3, [r7, #16]
 80169e6:	f383 8810 	msr	PRIMASK, r3
}
 80169ea:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80169ec:	bf00      	nop
 80169ee:	3718      	adds	r7, #24
 80169f0:	46bd      	mov	sp, r7
 80169f2:	bd80      	pop	{r7, pc}

080169f4 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 80169f4:	b480      	push	{r7}
 80169f6:	b085      	sub	sp, #20
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	60f8      	str	r0, [r7, #12]
 80169fc:	60b9      	str	r1, [r7, #8]
 80169fe:	607a      	str	r2, [r7, #4]
 8016a00:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	68ba      	ldr	r2, [r7, #8]
 8016a06:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	2200      	movs	r2, #0
 8016a12:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	2200      	movs	r2, #0
 8016a18:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	687a      	ldr	r2, [r7, #4]
 8016a24:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	887a      	ldrh	r2, [r7, #2]
 8016a2a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	7e3a      	ldrb	r2, [r7, #24]
 8016a30:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8016a32:	7e3b      	ldrb	r3, [r7, #24]
 8016a34:	f003 0302 	and.w	r3, r3, #2
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d006      	beq.n	8016a4a <CircularQueue_Init+0x56>
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	891b      	ldrh	r3, [r3, #8]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d002      	beq.n	8016a4a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8016a44:	f04f 33ff 	mov.w	r3, #4294967295
 8016a48:	e000      	b.n	8016a4c <CircularQueue_Init+0x58>
  }
  return 0;
 8016a4a:	2300      	movs	r3, #0
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	3714      	adds	r7, #20
 8016a50:	46bd      	mov	sp, r7
 8016a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a56:	4770      	bx	lr

08016a58 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b08e      	sub	sp, #56	@ 0x38
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	60f8      	str	r0, [r7, #12]
 8016a60:	60b9      	str	r1, [r7, #8]
 8016a62:	603b      	str	r3, [r7, #0]
 8016a64:	4613      	mov	r3, r2
 8016a66:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8016a68:	2300      	movs	r3, #0
 8016a6a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8016a70:	2300      	movs	r3, #0
 8016a72:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8016a74:	2300      	movs	r3, #0
 8016a76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016a78:	2300      	movs	r3, #0
 8016a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8016a80:	2300      	movs	r3, #0
 8016a82:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	891b      	ldrh	r3, [r3, #8]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d101      	bne.n	8016a90 <CircularQueue_Add+0x38>
 8016a8c:	2302      	movs	r3, #2
 8016a8e:	e000      	b.n	8016a92 <CircularQueue_Add+0x3a>
 8016a90:	2300      	movs	r3, #0
 8016a92:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	695b      	ldr	r3, [r3, #20]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d029      	beq.n	8016af0 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	891b      	ldrh	r3, [r3, #8]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d122      	bne.n	8016aea <CircularQueue_Add+0x92>
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	681a      	ldr	r2, [r3, #0]
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	691b      	ldr	r3, [r3, #16]
 8016aac:	4413      	add	r3, r2
 8016aae:	781b      	ldrb	r3, [r3, #0]
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	681a      	ldr	r2, [r3, #0]
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	691b      	ldr	r3, [r3, #16]
 8016aba:	1c59      	adds	r1, r3, #1
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	685b      	ldr	r3, [r3, #4]
 8016ac0:	4299      	cmp	r1, r3
 8016ac2:	d306      	bcc.n	8016ad2 <CircularQueue_Add+0x7a>
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	6919      	ldr	r1, [r3, #16]
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	685b      	ldr	r3, [r3, #4]
 8016acc:	1acb      	subs	r3, r1, r3
 8016ace:	3301      	adds	r3, #1
 8016ad0:	e002      	b.n	8016ad8 <CircularQueue_Add+0x80>
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	691b      	ldr	r3, [r3, #16]
 8016ad6:	3301      	adds	r3, #1
 8016ad8:	4413      	add	r3, r2
 8016ada:	781b      	ldrb	r3, [r3, #0]
 8016adc:	021b      	lsls	r3, r3, #8
 8016ade:	b29b      	uxth	r3, r3
 8016ae0:	4403      	add	r3, r0
 8016ae2:	b29b      	uxth	r3, r3
 8016ae4:	3302      	adds	r3, #2
 8016ae6:	b29b      	uxth	r3, r3
 8016ae8:	e001      	b.n	8016aee <CircularQueue_Add+0x96>
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	891b      	ldrh	r3, [r3, #8]
 8016aee:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	891b      	ldrh	r3, [r3, #8]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d002      	beq.n	8016afe <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	891b      	ldrh	r3, [r3, #8]
 8016afc:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	691a      	ldr	r2, [r3, #16]
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	68db      	ldr	r3, [r3, #12]
 8016b06:	429a      	cmp	r2, r3
 8016b08:	d307      	bcc.n	8016b1a <CircularQueue_Add+0xc2>
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	685a      	ldr	r2, [r3, #4]
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	6919      	ldr	r1, [r3, #16]
 8016b12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016b14:	440b      	add	r3, r1
 8016b16:	1ad3      	subs	r3, r2, r3
 8016b18:	e000      	b.n	8016b1c <CircularQueue_Add+0xc4>
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8016b1e:	88fa      	ldrh	r2, [r7, #6]
 8016b20:	7ffb      	ldrb	r3, [r7, #31]
 8016b22:	4413      	add	r3, r2
 8016b24:	461a      	mov	r2, r3
 8016b26:	683b      	ldr	r3, [r7, #0]
 8016b28:	fb02 f303 	mul.w	r3, r2, r3
 8016b2c:	69ba      	ldr	r2, [r7, #24]
 8016b2e:	429a      	cmp	r2, r3
 8016b30:	d80b      	bhi.n	8016b4a <CircularQueue_Add+0xf2>
 8016b32:	88fa      	ldrh	r2, [r7, #6]
 8016b34:	7ffb      	ldrb	r3, [r7, #31]
 8016b36:	4413      	add	r3, r2
 8016b38:	461a      	mov	r2, r3
 8016b3a:	69bb      	ldr	r3, [r7, #24]
 8016b3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016b40:	fb01 f202 	mul.w	r2, r1, r2
 8016b44:	1a9b      	subs	r3, r3, r2
 8016b46:	b2db      	uxtb	r3, r3
 8016b48:	e000      	b.n	8016b4c <CircularQueue_Add+0xf4>
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8016b4e:	7dfa      	ldrb	r2, [r7, #23]
 8016b50:	7ffb      	ldrb	r3, [r7, #31]
 8016b52:	429a      	cmp	r2, r3
 8016b54:	bf8c      	ite	hi
 8016b56:	2301      	movhi	r3, #1
 8016b58:	2300      	movls	r3, #0
 8016b5a:	b2db      	uxtb	r3, r3
 8016b5c:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8016b5e:	7fbb      	ldrb	r3, [r7, #30]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d008      	beq.n	8016b76 <CircularQueue_Add+0x11e>
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	7f1b      	ldrb	r3, [r3, #28]
 8016b68:	f003 0301 	and.w	r3, r3, #1
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d002      	beq.n	8016b76 <CircularQueue_Add+0x11e>
 8016b70:	7dfb      	ldrb	r3, [r7, #23]
 8016b72:	b29b      	uxth	r3, r3
 8016b74:	e000      	b.n	8016b78 <CircularQueue_Add+0x120>
 8016b76:	8bbb      	ldrh	r3, [r7, #28]
 8016b78:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8016b7a:	7fbb      	ldrb	r3, [r7, #30]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d008      	beq.n	8016b92 <CircularQueue_Add+0x13a>
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	7f1b      	ldrb	r3, [r3, #28]
 8016b84:	f003 0302 	and.w	r3, r3, #2
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d002      	beq.n	8016b92 <CircularQueue_Add+0x13a>
 8016b8c:	7ffb      	ldrb	r3, [r7, #31]
 8016b8e:	b29b      	uxth	r3, r3
 8016b90:	e000      	b.n	8016b94 <CircularQueue_Add+0x13c>
 8016b92:	8bbb      	ldrh	r3, [r7, #28]
 8016b94:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8016b96:	88fb      	ldrh	r3, [r7, #6]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	f000 817e 	beq.w	8016e9a <CircularQueue_Add+0x442>
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	695a      	ldr	r2, [r3, #20]
 8016ba2:	88f9      	ldrh	r1, [r7, #6]
 8016ba4:	7ffb      	ldrb	r3, [r7, #31]
 8016ba6:	440b      	add	r3, r1
 8016ba8:	4619      	mov	r1, r3
 8016baa:	683b      	ldr	r3, [r7, #0]
 8016bac:	fb01 f303 	mul.w	r3, r1, r3
 8016bb0:	441a      	add	r2, r3
 8016bb2:	8bbb      	ldrh	r3, [r7, #28]
 8016bb4:	441a      	add	r2, r3
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	685b      	ldr	r3, [r3, #4]
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	f200 816d 	bhi.w	8016e9a <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016bc4:	e14a      	b.n	8016e5c <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	691a      	ldr	r2, [r3, #16]
 8016bca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016bcc:	441a      	add	r2, r3
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	685b      	ldr	r3, [r3, #4]
 8016bd2:	429a      	cmp	r2, r3
 8016bd4:	d307      	bcc.n	8016be6 <CircularQueue_Add+0x18e>
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	691a      	ldr	r2, [r3, #16]
 8016bda:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016bdc:	441a      	add	r2, r3
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	685b      	ldr	r3, [r3, #4]
 8016be2:	1ad3      	subs	r3, r2, r3
 8016be4:	e003      	b.n	8016bee <CircularQueue_Add+0x196>
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	691a      	ldr	r2, [r3, #16]
 8016bea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8016bec:	4413      	add	r3, r2
 8016bee:	68fa      	ldr	r2, [r7, #12]
 8016bf0:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	691b      	ldr	r3, [r3, #16]
 8016bf6:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	891b      	ldrh	r3, [r3, #8]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d130      	bne.n	8016c62 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	681a      	ldr	r2, [r3, #0]
 8016c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c06:	1c59      	adds	r1, r3, #1
 8016c08:	6339      	str	r1, [r7, #48]	@ 0x30
 8016c0a:	4413      	add	r3, r2
 8016c0c:	88fa      	ldrh	r2, [r7, #6]
 8016c0e:	b2d2      	uxtb	r2, r2
 8016c10:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	685b      	ldr	r3, [r3, #4]
 8016c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	d304      	bcc.n	8016c26 <CircularQueue_Add+0x1ce>
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	685b      	ldr	r3, [r3, #4]
 8016c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016c22:	1ad3      	subs	r3, r2, r3
 8016c24:	e000      	b.n	8016c28 <CircularQueue_Add+0x1d0>
 8016c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c28:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8016c2a:	88fb      	ldrh	r3, [r7, #6]
 8016c2c:	0a1b      	lsrs	r3, r3, #8
 8016c2e:	b298      	uxth	r0, r3
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	681a      	ldr	r2, [r3, #0]
 8016c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c36:	1c59      	adds	r1, r3, #1
 8016c38:	6339      	str	r1, [r7, #48]	@ 0x30
 8016c3a:	4413      	add	r3, r2
 8016c3c:	b2c2      	uxtb	r2, r0
 8016c3e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	685b      	ldr	r3, [r3, #4]
 8016c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016c46:	429a      	cmp	r2, r3
 8016c48:	d304      	bcc.n	8016c54 <CircularQueue_Add+0x1fc>
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	685b      	ldr	r3, [r3, #4]
 8016c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016c50:	1ad3      	subs	r3, r2, r3
 8016c52:	e000      	b.n	8016c56 <CircularQueue_Add+0x1fe>
 8016c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c56:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	695b      	ldr	r3, [r3, #20]
 8016c5c:	1c9a      	adds	r2, r3, #2
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8016c62:	88fa      	ldrh	r2, [r7, #6]
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	6859      	ldr	r1, [r3, #4]
 8016c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c6a:	1acb      	subs	r3, r1, r3
 8016c6c:	4293      	cmp	r3, r2
 8016c6e:	bf28      	it	cs
 8016c70:	4613      	movcs	r3, r2
 8016c72:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8016c74:	88fb      	ldrh	r3, [r7, #6]
 8016c76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016c78:	429a      	cmp	r2, r3
 8016c7a:	d007      	beq.n	8016c8c <CircularQueue_Add+0x234>
 8016c7c:	88fb      	ldrh	r3, [r7, #6]
 8016c7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016c80:	429a      	cmp	r2, r3
 8016c82:	d225      	bcs.n	8016cd0 <CircularQueue_Add+0x278>
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	7f1b      	ldrb	r3, [r3, #28]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d121      	bne.n	8016cd0 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	681a      	ldr	r2, [r3, #0]
 8016c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c92:	18d0      	adds	r0, r2, r3
 8016c94:	88fb      	ldrh	r3, [r7, #6]
 8016c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016c98:	fb02 f303 	mul.w	r3, r2, r3
 8016c9c:	68ba      	ldr	r2, [r7, #8]
 8016c9e:	4413      	add	r3, r2
 8016ca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016ca2:	4619      	mov	r1, r3
 8016ca4:	f012 fb13 	bl	80292ce <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	695a      	ldr	r2, [r3, #20]
 8016cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cae:	441a      	add	r2, r3
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8016cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cba:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8016cbc:	88fa      	ldrh	r2, [r7, #6]
 8016cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cc0:	1ad3      	subs	r3, r2, r3
 8016cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8016cc4:	7ffb      	ldrb	r3, [r7, #31]
 8016cc6:	b29a      	uxth	r2, r3
 8016cc8:	88fb      	ldrh	r3, [r7, #6]
 8016cca:	4413      	add	r3, r2
 8016ccc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8016cce:	e0a4      	b.n	8016e1a <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8016cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	f000 80a1 	beq.w	8016e1a <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	7f1b      	ldrb	r3, [r3, #28]
 8016cdc:	f003 0301 	and.w	r3, r3, #1
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d03a      	beq.n	8016d5a <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	891b      	ldrh	r3, [r3, #8]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d10d      	bne.n	8016d08 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	681a      	ldr	r2, [r3, #0]
 8016cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cf2:	3b02      	subs	r3, #2
 8016cf4:	4413      	add	r3, r2
 8016cf6:	22ff      	movs	r2, #255	@ 0xff
 8016cf8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	681a      	ldr	r2, [r3, #0]
 8016cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d00:	3b01      	subs	r3, #1
 8016d02:	4413      	add	r3, r2
 8016d04:	22ff      	movs	r2, #255	@ 0xff
 8016d06:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	695a      	ldr	r2, [r3, #20]
 8016d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d0e:	441a      	add	r2, r3
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8016d14:	2300      	movs	r3, #0
 8016d16:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8016d18:	88fb      	ldrh	r3, [r7, #6]
 8016d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	891b      	ldrh	r3, [r3, #8]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d16f      	bne.n	8016e08 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	681a      	ldr	r2, [r3, #0]
 8016d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d2e:	1c59      	adds	r1, r3, #1
 8016d30:	6339      	str	r1, [r7, #48]	@ 0x30
 8016d32:	4413      	add	r3, r2
 8016d34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016d36:	b2d2      	uxtb	r2, r2
 8016d38:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8016d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d3c:	0a18      	lsrs	r0, r3, #8
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	681a      	ldr	r2, [r3, #0]
 8016d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d44:	1c59      	adds	r1, r3, #1
 8016d46:	6339      	str	r1, [r7, #48]	@ 0x30
 8016d48:	4413      	add	r3, r2
 8016d4a:	b2c2      	uxtb	r2, r0
 8016d4c:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	695b      	ldr	r3, [r3, #20]
 8016d52:	1c9a      	adds	r2, r3, #2
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	615a      	str	r2, [r3, #20]
 8016d58:	e056      	b.n	8016e08 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	7f1b      	ldrb	r3, [r3, #28]
 8016d5e:	f003 0302 	and.w	r3, r3, #2
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d050      	beq.n	8016e08 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	891b      	ldrh	r3, [r3, #8]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d14a      	bne.n	8016e04 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	681a      	ldr	r2, [r3, #0]
 8016d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d74:	3b02      	subs	r3, #2
 8016d76:	4413      	add	r3, r2
 8016d78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016d7a:	b2d2      	uxtb	r2, r2
 8016d7c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8016d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d80:	0a19      	lsrs	r1, r3, #8
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	681a      	ldr	r2, [r3, #0]
 8016d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d88:	3b01      	subs	r3, #1
 8016d8a:	4413      	add	r3, r2
 8016d8c:	b2ca      	uxtb	r2, r1
 8016d8e:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	681a      	ldr	r2, [r3, #0]
 8016d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d96:	18d0      	adds	r0, r2, r3
 8016d98:	88fb      	ldrh	r3, [r7, #6]
 8016d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016d9c:	fb02 f303 	mul.w	r3, r2, r3
 8016da0:	68ba      	ldr	r2, [r7, #8]
 8016da2:	4413      	add	r3, r2
 8016da4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016da6:	4619      	mov	r1, r3
 8016da8:	f012 fa91 	bl	80292ce <memcpy>
             q->byteCount += NbBytesToCopy; 
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	695a      	ldr	r2, [r3, #20]
 8016db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016db2:	441a      	add	r2, r3
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8016db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dba:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8016dbc:	88fa      	ldrh	r2, [r7, #6]
 8016dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dc0:	1ad3      	subs	r3, r2, r3
 8016dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	699b      	ldr	r3, [r3, #24]
 8016dc8:	1c5a      	adds	r2, r3, #1
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8016dce:	2300      	movs	r3, #0
 8016dd0:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	681a      	ldr	r2, [r3, #0]
 8016dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dd8:	1c59      	adds	r1, r3, #1
 8016dda:	6339      	str	r1, [r7, #48]	@ 0x30
 8016ddc:	4413      	add	r3, r2
 8016dde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016de0:	b2d2      	uxtb	r2, r2
 8016de2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8016de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016de6:	0a18      	lsrs	r0, r3, #8
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	681a      	ldr	r2, [r3, #0]
 8016dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dee:	1c59      	adds	r1, r3, #1
 8016df0:	6339      	str	r1, [r7, #48]	@ 0x30
 8016df2:	4413      	add	r3, r2
 8016df4:	b2c2      	uxtb	r2, r0
 8016df6:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	695b      	ldr	r3, [r3, #20]
 8016dfc:	1c9a      	adds	r2, r3, #2
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	615a      	str	r2, [r3, #20]
 8016e02:	e001      	b.n	8016e08 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8016e04:	2300      	movs	r3, #0
 8016e06:	e049      	b.n	8016e9c <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8016e08:	7ffb      	ldrb	r3, [r7, #31]
 8016e0a:	b29a      	uxth	r2, r3
 8016e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e0e:	b29b      	uxth	r3, r3
 8016e10:	4413      	add	r3, r2
 8016e12:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	2200      	movs	r2, #0
 8016e18:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8016e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d015      	beq.n	8016e4c <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	681a      	ldr	r2, [r3, #0]
 8016e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e26:	18d0      	adds	r0, r2, r3
 8016e28:	88fb      	ldrh	r3, [r7, #6]
 8016e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016e2c:	fb03 f202 	mul.w	r2, r3, r2
 8016e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e32:	4413      	add	r3, r2
 8016e34:	68ba      	ldr	r2, [r7, #8]
 8016e36:	4413      	add	r3, r2
 8016e38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016e3a:	4619      	mov	r1, r3
 8016e3c:	f012 fa47 	bl	80292ce <memcpy>
        q->byteCount += NbBytesToCopy;
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	695a      	ldr	r2, [r3, #20]
 8016e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e46:	441a      	add	r2, r3
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	699b      	ldr	r3, [r3, #24]
 8016e50:	1c5a      	adds	r2, r3, #1
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8016e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e58:	3301      	adds	r3, #1
 8016e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016e5e:	683b      	ldr	r3, [r7, #0]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	f4ff aeb0 	bcc.w	8016bc6 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	681a      	ldr	r2, [r3, #0]
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	6919      	ldr	r1, [r3, #16]
 8016e6e:	7ffb      	ldrb	r3, [r7, #31]
 8016e70:	4419      	add	r1, r3
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	685b      	ldr	r3, [r3, #4]
 8016e76:	4299      	cmp	r1, r3
 8016e78:	d307      	bcc.n	8016e8a <CircularQueue_Add+0x432>
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	6919      	ldr	r1, [r3, #16]
 8016e7e:	7ffb      	ldrb	r3, [r7, #31]
 8016e80:	4419      	add	r1, r3
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	685b      	ldr	r3, [r3, #4]
 8016e86:	1acb      	subs	r3, r1, r3
 8016e88:	e003      	b.n	8016e92 <CircularQueue_Add+0x43a>
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	6919      	ldr	r1, [r3, #16]
 8016e8e:	7ffb      	ldrb	r3, [r7, #31]
 8016e90:	440b      	add	r3, r1
 8016e92:	4413      	add	r3, r2
 8016e94:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8016e96:	6a3b      	ldr	r3, [r7, #32]
 8016e98:	e000      	b.n	8016e9c <CircularQueue_Add+0x444>
    return NULL;
 8016e9a:	2300      	movs	r3, #0
}
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	3738      	adds	r7, #56	@ 0x38
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	bd80      	pop	{r7, pc}

08016ea4 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8016ea4:	b480      	push	{r7}
 8016ea6:	b085      	sub	sp, #20
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	6078      	str	r0, [r7, #4]
 8016eac:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8016eae:	2300      	movs	r3, #0
 8016eb0:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	891b      	ldrh	r3, [r3, #8]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d101      	bne.n	8016ec2 <CircularQueue_Remove+0x1e>
 8016ebe:	2302      	movs	r3, #2
 8016ec0:	e000      	b.n	8016ec4 <CircularQueue_Remove+0x20>
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	695b      	ldr	r3, [r3, #20]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	f000 80ca 	beq.w	8017068 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	891b      	ldrh	r3, [r3, #8]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d120      	bne.n	8016f1e <CircularQueue_Remove+0x7a>
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681a      	ldr	r2, [r3, #0]
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	68db      	ldr	r3, [r3, #12]
 8016ee4:	4413      	add	r3, r2
 8016ee6:	781b      	ldrb	r3, [r3, #0]
 8016ee8:	4618      	mov	r0, r3
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	681a      	ldr	r2, [r3, #0]
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	68db      	ldr	r3, [r3, #12]
 8016ef2:	1c59      	adds	r1, r3, #1
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	685b      	ldr	r3, [r3, #4]
 8016ef8:	4299      	cmp	r1, r3
 8016efa:	d306      	bcc.n	8016f0a <CircularQueue_Remove+0x66>
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	68d9      	ldr	r1, [r3, #12]
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	685b      	ldr	r3, [r3, #4]
 8016f04:	1acb      	subs	r3, r1, r3
 8016f06:	3301      	adds	r3, #1
 8016f08:	e002      	b.n	8016f10 <CircularQueue_Remove+0x6c>
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	68db      	ldr	r3, [r3, #12]
 8016f0e:	3301      	adds	r3, #1
 8016f10:	4413      	add	r3, r2
 8016f12:	781b      	ldrb	r3, [r3, #0]
 8016f14:	021b      	lsls	r3, r3, #8
 8016f16:	b29b      	uxth	r3, r3
 8016f18:	4403      	add	r3, r0
 8016f1a:	b29b      	uxth	r3, r3
 8016f1c:	e001      	b.n	8016f22 <CircularQueue_Remove+0x7e>
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	891b      	ldrh	r3, [r3, #8]
 8016f22:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	7f1b      	ldrb	r3, [r3, #28]
 8016f28:	f003 0301 	and.w	r3, r3, #1
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d056      	beq.n	8016fde <CircularQueue_Remove+0x13a>
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	7f1b      	ldrb	r3, [r3, #28]
 8016f34:	f003 0302 	and.w	r3, r3, #2
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d150      	bne.n	8016fde <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8016f3c:	897b      	ldrh	r3, [r7, #10]
 8016f3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016f42:	4293      	cmp	r3, r2
 8016f44:	d103      	bne.n	8016f4e <CircularQueue_Remove+0xaa>
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	891b      	ldrh	r3, [r3, #8]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d012      	beq.n	8016f74 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	68da      	ldr	r2, [r3, #12]
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8016f56:	429a      	cmp	r2, r3
 8016f58:	d941      	bls.n	8016fde <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	891b      	ldrh	r3, [r3, #8]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d03d      	beq.n	8016fde <CircularQueue_Remove+0x13a>
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	685a      	ldr	r2, [r3, #4]
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	68db      	ldr	r3, [r3, #12]
 8016f6a:	1ad3      	subs	r3, r2, r3
 8016f6c:	687a      	ldr	r2, [r7, #4]
 8016f6e:	8912      	ldrh	r2, [r2, #8]
 8016f70:	4293      	cmp	r3, r2
 8016f72:	d234      	bcs.n	8016fde <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	695a      	ldr	r2, [r3, #20]
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	68d9      	ldr	r1, [r3, #12]
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	685b      	ldr	r3, [r3, #4]
 8016f80:	1acb      	subs	r3, r1, r3
 8016f82:	441a      	add	r2, r3
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	891b      	ldrh	r3, [r3, #8]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d120      	bne.n	8016fd8 <CircularQueue_Remove+0x134>
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	681a      	ldr	r2, [r3, #0]
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	68db      	ldr	r3, [r3, #12]
 8016f9e:	4413      	add	r3, r2
 8016fa0:	781b      	ldrb	r3, [r3, #0]
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	681a      	ldr	r2, [r3, #0]
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	68db      	ldr	r3, [r3, #12]
 8016fac:	1c59      	adds	r1, r3, #1
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	685b      	ldr	r3, [r3, #4]
 8016fb2:	4299      	cmp	r1, r3
 8016fb4:	d306      	bcc.n	8016fc4 <CircularQueue_Remove+0x120>
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	68d9      	ldr	r1, [r3, #12]
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	685b      	ldr	r3, [r3, #4]
 8016fbe:	1acb      	subs	r3, r1, r3
 8016fc0:	3301      	adds	r3, #1
 8016fc2:	e002      	b.n	8016fca <CircularQueue_Remove+0x126>
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	68db      	ldr	r3, [r3, #12]
 8016fc8:	3301      	adds	r3, #1
 8016fca:	4413      	add	r3, r2
 8016fcc:	781b      	ldrb	r3, [r3, #0]
 8016fce:	021b      	lsls	r3, r3, #8
 8016fd0:	b29b      	uxth	r3, r3
 8016fd2:	4403      	add	r3, r0
 8016fd4:	b29b      	uxth	r3, r3
 8016fd6:	e001      	b.n	8016fdc <CircularQueue_Remove+0x138>
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	891b      	ldrh	r3, [r3, #8]
 8016fdc:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	681a      	ldr	r2, [r3, #0]
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	68d9      	ldr	r1, [r3, #12]
 8016fe6:	7a7b      	ldrb	r3, [r7, #9]
 8016fe8:	4419      	add	r1, r3
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	685b      	ldr	r3, [r3, #4]
 8016fee:	4299      	cmp	r1, r3
 8016ff0:	d307      	bcc.n	8017002 <CircularQueue_Remove+0x15e>
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	68d9      	ldr	r1, [r3, #12]
 8016ff6:	7a7b      	ldrb	r3, [r7, #9]
 8016ff8:	4419      	add	r1, r3
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	685b      	ldr	r3, [r3, #4]
 8016ffe:	1acb      	subs	r3, r1, r3
 8017000:	e003      	b.n	801700a <CircularQueue_Remove+0x166>
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	68d9      	ldr	r1, [r3, #12]
 8017006:	7a7b      	ldrb	r3, [r7, #9]
 8017008:	440b      	add	r3, r1
 801700a:	4413      	add	r3, r2
 801700c:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	695b      	ldr	r3, [r3, #20]
 8017012:	8979      	ldrh	r1, [r7, #10]
 8017014:	7a7a      	ldrb	r2, [r7, #9]
 8017016:	440a      	add	r2, r1
 8017018:	1a9a      	subs	r2, r3, r2
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	695b      	ldr	r3, [r3, #20]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d01b      	beq.n	801705e <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	68da      	ldr	r2, [r3, #12]
 801702a:	897b      	ldrh	r3, [r7, #10]
 801702c:	441a      	add	r2, r3
 801702e:	7a7b      	ldrb	r3, [r7, #9]
 8017030:	441a      	add	r2, r3
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	685b      	ldr	r3, [r3, #4]
 8017036:	429a      	cmp	r2, r3
 8017038:	d309      	bcc.n	801704e <CircularQueue_Remove+0x1aa>
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	68da      	ldr	r2, [r3, #12]
 801703e:	897b      	ldrh	r3, [r7, #10]
 8017040:	441a      	add	r2, r3
 8017042:	7a7b      	ldrb	r3, [r7, #9]
 8017044:	441a      	add	r2, r3
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	685b      	ldr	r3, [r3, #4]
 801704a:	1ad3      	subs	r3, r2, r3
 801704c:	e005      	b.n	801705a <CircularQueue_Remove+0x1b6>
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	68da      	ldr	r2, [r3, #12]
 8017052:	897b      	ldrh	r3, [r7, #10]
 8017054:	441a      	add	r2, r3
 8017056:	7a7b      	ldrb	r3, [r7, #9]
 8017058:	4413      	add	r3, r2
 801705a:	687a      	ldr	r2, [r7, #4]
 801705c:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	699b      	ldr	r3, [r3, #24]
 8017062:	1e5a      	subs	r2, r3, #1
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8017068:	683b      	ldr	r3, [r7, #0]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d002      	beq.n	8017074 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 801706e:	683b      	ldr	r3, [r7, #0]
 8017070:	897a      	ldrh	r2, [r7, #10]
 8017072:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8017074:	68fb      	ldr	r3, [r7, #12]
}
 8017076:	4618      	mov	r0, r3
 8017078:	3714      	adds	r7, #20
 801707a:	46bd      	mov	sp, r7
 801707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017080:	4770      	bx	lr

08017082 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8017082:	b480      	push	{r7}
 8017084:	b087      	sub	sp, #28
 8017086:	af00      	add	r7, sp, #0
 8017088:	6078      	str	r0, [r7, #4]
 801708a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 801708c:	2300      	movs	r3, #0
 801708e:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8017090:	2300      	movs	r3, #0
 8017092:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	891b      	ldrh	r3, [r3, #8]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d101      	bne.n	80170a0 <CircularQueue_Sense+0x1e>
 801709c:	2302      	movs	r3, #2
 801709e:	e000      	b.n	80170a2 <CircularQueue_Sense+0x20>
 80170a0:	2300      	movs	r3, #0
 80170a2:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 80170a4:	2300      	movs	r3, #0
 80170a6:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 80170a8:	2300      	movs	r3, #0
 80170aa:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	695b      	ldr	r3, [r3, #20]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	f000 808e 	beq.w	80171d2 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	68db      	ldr	r3, [r3, #12]
 80170ba:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	891b      	ldrh	r3, [r3, #8]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d120      	bne.n	8017106 <CircularQueue_Sense+0x84>
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	681a      	ldr	r2, [r3, #0]
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	68db      	ldr	r3, [r3, #12]
 80170cc:	4413      	add	r3, r2
 80170ce:	781b      	ldrb	r3, [r3, #0]
 80170d0:	4618      	mov	r0, r3
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	681a      	ldr	r2, [r3, #0]
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	68db      	ldr	r3, [r3, #12]
 80170da:	1c59      	adds	r1, r3, #1
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	685b      	ldr	r3, [r3, #4]
 80170e0:	4299      	cmp	r1, r3
 80170e2:	d306      	bcc.n	80170f2 <CircularQueue_Sense+0x70>
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	68d9      	ldr	r1, [r3, #12]
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	685b      	ldr	r3, [r3, #4]
 80170ec:	1acb      	subs	r3, r1, r3
 80170ee:	3301      	adds	r3, #1
 80170f0:	e002      	b.n	80170f8 <CircularQueue_Sense+0x76>
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	68db      	ldr	r3, [r3, #12]
 80170f6:	3301      	adds	r3, #1
 80170f8:	4413      	add	r3, r2
 80170fa:	781b      	ldrb	r3, [r3, #0]
 80170fc:	021b      	lsls	r3, r3, #8
 80170fe:	b29b      	uxth	r3, r3
 8017100:	4403      	add	r3, r0
 8017102:	b29b      	uxth	r3, r3
 8017104:	e001      	b.n	801710a <CircularQueue_Sense+0x88>
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	891b      	ldrh	r3, [r3, #8]
 801710a:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	7f1b      	ldrb	r3, [r3, #28]
 8017110:	f003 0301 	and.w	r3, r3, #1
 8017114:	2b00      	cmp	r3, #0
 8017116:	d047      	beq.n	80171a8 <CircularQueue_Sense+0x126>
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	7f1b      	ldrb	r3, [r3, #28]
 801711c:	f003 0302 	and.w	r3, r3, #2
 8017120:	2b00      	cmp	r3, #0
 8017122:	d141      	bne.n	80171a8 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8017124:	8a7b      	ldrh	r3, [r7, #18]
 8017126:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801712a:	4293      	cmp	r3, r2
 801712c:	d103      	bne.n	8017136 <CircularQueue_Sense+0xb4>
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	891b      	ldrh	r3, [r3, #8]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d012      	beq.n	801715c <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	68da      	ldr	r2, [r3, #12]
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801713e:	429a      	cmp	r2, r3
 8017140:	d932      	bls.n	80171a8 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	891b      	ldrh	r3, [r3, #8]
 8017146:	2b00      	cmp	r3, #0
 8017148:	d02e      	beq.n	80171a8 <CircularQueue_Sense+0x126>
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	685a      	ldr	r2, [r3, #4]
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	68db      	ldr	r3, [r3, #12]
 8017152:	1ad3      	subs	r3, r2, r3
 8017154:	687a      	ldr	r2, [r7, #4]
 8017156:	8912      	ldrh	r2, [r2, #8]
 8017158:	4293      	cmp	r3, r2
 801715a:	d225      	bcs.n	80171a8 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 801715c:	2300      	movs	r3, #0
 801715e:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	891b      	ldrh	r3, [r3, #8]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d11c      	bne.n	80171a2 <CircularQueue_Sense+0x120>
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	681a      	ldr	r2, [r3, #0]
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	4413      	add	r3, r2
 8017170:	781b      	ldrb	r3, [r3, #0]
 8017172:	4618      	mov	r0, r3
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	681a      	ldr	r2, [r3, #0]
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	1c59      	adds	r1, r3, #1
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	685b      	ldr	r3, [r3, #4]
 8017180:	4299      	cmp	r1, r3
 8017182:	d305      	bcc.n	8017190 <CircularQueue_Sense+0x10e>
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	685b      	ldr	r3, [r3, #4]
 8017188:	68f9      	ldr	r1, [r7, #12]
 801718a:	1acb      	subs	r3, r1, r3
 801718c:	3301      	adds	r3, #1
 801718e:	e001      	b.n	8017194 <CircularQueue_Sense+0x112>
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	3301      	adds	r3, #1
 8017194:	4413      	add	r3, r2
 8017196:	781b      	ldrb	r3, [r3, #0]
 8017198:	021b      	lsls	r3, r3, #8
 801719a:	b29b      	uxth	r3, r3
 801719c:	4403      	add	r3, r0
 801719e:	b29b      	uxth	r3, r3
 80171a0:	e001      	b.n	80171a6 <CircularQueue_Sense+0x124>
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	891b      	ldrh	r3, [r3, #8]
 80171a6:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	681a      	ldr	r2, [r3, #0]
 80171ac:	7af9      	ldrb	r1, [r7, #11]
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	4419      	add	r1, r3
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	685b      	ldr	r3, [r3, #4]
 80171b6:	4299      	cmp	r1, r3
 80171b8:	d306      	bcc.n	80171c8 <CircularQueue_Sense+0x146>
 80171ba:	7af9      	ldrb	r1, [r7, #11]
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	4419      	add	r1, r3
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	685b      	ldr	r3, [r3, #4]
 80171c4:	1acb      	subs	r3, r1, r3
 80171c6:	e002      	b.n	80171ce <CircularQueue_Sense+0x14c>
 80171c8:	7af9      	ldrb	r1, [r7, #11]
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	440b      	add	r3, r1
 80171ce:	4413      	add	r3, r2
 80171d0:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 80171d2:	683b      	ldr	r3, [r7, #0]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d002      	beq.n	80171de <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 80171d8:	683b      	ldr	r3, [r7, #0]
 80171da:	8a7a      	ldrh	r2, [r7, #18]
 80171dc:	801a      	strh	r2, [r3, #0]
  }
  return x;
 80171de:	697b      	ldr	r3, [r7, #20]
}
 80171e0:	4618      	mov	r0, r3
 80171e2:	371c      	adds	r7, #28
 80171e4:	46bd      	mov	sp, r7
 80171e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ea:	4770      	bx	lr

080171ec <htobe32>:
 80171ec:	ba00      	rev	r0, r0
 80171ee:	4770      	bx	lr

080171f0 <BAES_CmacKeyRoll>:
 80171f0:	e9d0 3100 	ldrd	r3, r1, [r0]
 80171f4:	b510      	push	{r4, lr}
 80171f6:	0fca      	lsrs	r2, r1, #31
 80171f8:	6884      	ldr	r4, [r0, #8]
 80171fa:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 80171fe:	6002      	str	r2, [r0, #0]
 8017200:	0fe2      	lsrs	r2, r4, #31
 8017202:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8017206:	68c1      	ldr	r1, [r0, #12]
 8017208:	6042      	str	r2, [r0, #4]
 801720a:	0fca      	lsrs	r2, r1, #31
 801720c:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8017210:	6082      	str	r2, [r0, #8]
 8017212:	0fdb      	lsrs	r3, r3, #31
 8017214:	2287      	movs	r2, #135	@ 0x87
 8017216:	4353      	muls	r3, r2
 8017218:	ea83 0341 	eor.w	r3, r3, r1, lsl #1
 801721c:	60c3      	str	r3, [r0, #12]
 801721e:	bd10      	pop	{r4, pc}

08017220 <HW_AES_WaitComplete>:
 8017220:	4b04      	ldr	r3, [pc, #16]	@ (8017234 <HW_AES_WaitComplete+0x14>)
 8017222:	685a      	ldr	r2, [r3, #4]
 8017224:	07d2      	lsls	r2, r2, #31
 8017226:	d5fc      	bpl.n	8017222 <HW_AES_WaitComplete+0x2>
 8017228:	681a      	ldr	r2, [r3, #0]
 801722a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801722e:	601a      	str	r2, [r3, #0]
 8017230:	4770      	bx	lr
 8017232:	bf00      	nop
 8017234:	50060000 	.word	0x50060000

08017238 <HW_AES_Input>:
 8017238:	4b04      	ldr	r3, [pc, #16]	@ (801724c <HW_AES_Input+0x14>)
 801723a:	6802      	ldr	r2, [r0, #0]
 801723c:	609a      	str	r2, [r3, #8]
 801723e:	6842      	ldr	r2, [r0, #4]
 8017240:	609a      	str	r2, [r3, #8]
 8017242:	6882      	ldr	r2, [r0, #8]
 8017244:	609a      	str	r2, [r3, #8]
 8017246:	68c2      	ldr	r2, [r0, #12]
 8017248:	609a      	str	r2, [r3, #8]
 801724a:	4770      	bx	lr
 801724c:	50060000 	.word	0x50060000

08017250 <HW_AES_CcmGenerateTag>:
 8017250:	4909      	ldr	r1, [pc, #36]	@ (8017278 <HW_AES_CcmGenerateTag+0x28>)
 8017252:	b508      	push	{r3, lr}
 8017254:	680b      	ldr	r3, [r1, #0]
 8017256:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 801725a:	f043 0301 	orr.w	r3, r3, #1
 801725e:	600b      	str	r3, [r1, #0]
 8017260:	f7ff ffde 	bl	8017220 <HW_AES_WaitComplete>
 8017264:	68cb      	ldr	r3, [r1, #12]
 8017266:	6003      	str	r3, [r0, #0]
 8017268:	68cb      	ldr	r3, [r1, #12]
 801726a:	6043      	str	r3, [r0, #4]
 801726c:	68cb      	ldr	r3, [r1, #12]
 801726e:	6083      	str	r3, [r0, #8]
 8017270:	68cb      	ldr	r3, [r1, #12]
 8017272:	60c3      	str	r3, [r0, #12]
 8017274:	bd08      	pop	{r3, pc}
 8017276:	bf00      	nop
 8017278:	50060000 	.word	0x50060000

0801727c <Appli_StartProvisioningCb>:
 801727c:	2301      	movs	r3, #1
 801727e:	7003      	strb	r3, [r0, #0]
 8017280:	2300      	movs	r3, #0
 8017282:	7043      	strb	r3, [r0, #1]
 8017284:	7083      	strb	r3, [r0, #2]
 8017286:	70c3      	strb	r3, [r0, #3]
 8017288:	7103      	strb	r3, [r0, #4]
 801728a:	4770      	bx	lr

0801728c <Appli_PubKeyCb>:
 801728c:	4b01      	ldr	r3, [pc, #4]	@ (8017294 <Appli_PubKeyCb+0x8>)
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	6858      	ldr	r0, [r3, #4]
 8017292:	4770      	bx	lr
 8017294:	20000314 	.word	0x20000314

08017298 <Appli_StaticOobCb>:
 8017298:	4b01      	ldr	r3, [pc, #4]	@ (80172a0 <Appli_StaticOobCb+0x8>)
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	6918      	ldr	r0, [r3, #16]
 801729e:	4770      	bx	lr
 80172a0:	20000314 	.word	0x20000314

080172a4 <Appli_UnprovisionedIdentifyCb>:
 80172a4:	4b01      	ldr	r3, [pc, #4]	@ (80172ac <Appli_UnprovisionedIdentifyCb+0x8>)
 80172a6:	685b      	ldr	r3, [r3, #4]
 80172a8:	691b      	ldr	r3, [r3, #16]
 80172aa:	4718      	bx	r3
 80172ac:	20000314 	.word	0x20000314

080172b0 <BnrgmProxyProtocol_SetDataInCharacteristic>:
 80172b0:	4b01      	ldr	r3, [pc, #4]	@ (80172b8 <BnrgmProxyProtocol_SetDataInCharacteristic+0x8>)
 80172b2:	f8a3 008a 	strh.w	r0, [r3, #138]	@ 0x8a
 80172b6:	4770      	bx	lr
 80172b8:	20000314 	.word	0x20000314

080172bc <BnrgmProxyProtocol_SetDataOutCharacteristic>:
 80172bc:	4b01      	ldr	r3, [pc, #4]	@ (80172c4 <BnrgmProxyProtocol_SetDataOutCharacteristic+0x8>)
 80172be:	f8a3 008c 	strh.w	r0, [r3, #140]	@ 0x8c
 80172c2:	4770      	bx	lr
 80172c4:	20000314 	.word	0x20000314

080172c8 <MobleProvisionBearerGatt_RepeatTimerCallback>:
 80172c8:	4770      	bx	lr

080172ca <MobleConfigModelGetNetIdx>:
 80172ca:	7843      	ldrb	r3, [r0, #1]
 80172cc:	7800      	ldrb	r0, [r0, #0]
 80172ce:	021b      	lsls	r3, r3, #8
 80172d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80172d4:	4418      	add	r0, r3
 80172d6:	4770      	bx	lr

080172d8 <MobleConfigModelPutKeyIdxs>:
 80172d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172dc:	2500      	movs	r5, #0
 80172de:	4607      	mov	r7, r0
 80172e0:	4628      	mov	r0, r5
 80172e2:	b2ee      	uxtb	r6, r5
 80172e4:	428e      	cmp	r6, r1
 80172e6:	d301      	bcc.n	80172ec <MobleConfigModelPutKeyIdxs+0x14>
 80172e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172ec:	eb06 0c07 	add.w	ip, r6, r7
 80172f0:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80172f4:	1064      	asrs	r4, r4, #1
 80172f6:	f01c 0f01 	tst.w	ip, #1
 80172fa:	f833 8016 	ldrh.w	r8, [r3, r6, lsl #1]
 80172fe:	f104 0e01 	add.w	lr, r4, #1
 8017302:	d10b      	bne.n	801731c <MobleConfigModelPutKeyIdxs+0x44>
 8017304:	f802 8004 	strb.w	r8, [r2, r4]
 8017308:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 801730c:	3002      	adds	r0, #2
 801730e:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8017312:	f802 400e 	strb.w	r4, [r2, lr]
 8017316:	b280      	uxth	r0, r0
 8017318:	3501      	adds	r5, #1
 801731a:	e7e2      	b.n	80172e2 <MobleConfigModelPutKeyIdxs+0xa>
 801731c:	f812 c004 	ldrb.w	ip, [r2, r4]
 8017320:	ea4c 1c08 	orr.w	ip, ip, r8, lsl #4
 8017324:	f802 c004 	strb.w	ip, [r2, r4]
 8017328:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 801732c:	3001      	adds	r0, #1
 801732e:	f3c4 1407 	ubfx	r4, r4, #4, #8
 8017332:	e7ee      	b.n	8017312 <MobleConfigModelPutKeyIdxs+0x3a>

08017334 <BnrgmHealthModelAttention_TimerCallback>:
 8017334:	680b      	ldr	r3, [r1, #0]
 8017336:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017338:	f892 306e 	ldrb.w	r3, [r2, #110]	@ 0x6e
 801733c:	b133      	cbz	r3, 801734c <BnrgmHealthModelAttention_TimerCallback+0x18>
 801733e:	3b01      	subs	r3, #1
 8017340:	f882 306e 	strb.w	r3, [r2, #110]	@ 0x6e
 8017344:	f8d1 31f4 	ldr.w	r3, [r1, #500]	@ 0x1f4
 8017348:	b113      	cbz	r3, 8017350 <BnrgmHealthModelAttention_TimerCallback+0x1c>
 801734a:	4718      	bx	r3
 801734c:	b100      	cbz	r0, 8017350 <BnrgmHealthModelAttention_TimerCallback+0x1c>
 801734e:	7003      	strb	r3, [r0, #0]
 8017350:	4770      	bx	lr
	...

08017354 <Test_UpperTester_Set08>:
 8017354:	4b02      	ldr	r3, [pc, #8]	@ (8017360 <Test_UpperTester_Set08+0xc>)
 8017356:	2201      	movs	r2, #1
 8017358:	801a      	strh	r2, [r3, #0]
 801735a:	2000      	movs	r0, #0
 801735c:	4770      	bx	lr
 801735e:	bf00      	nop
 8017360:	20000008 	.word	0x20000008

08017364 <Test_UpperTester_Set09>:
 8017364:	4b02      	ldr	r3, [pc, #8]	@ (8017370 <Test_UpperTester_Set09+0xc>)
 8017366:	2000      	movs	r0, #0
 8017368:	f8a3 00e4 	strh.w	r0, [r3, #228]	@ 0xe4
 801736c:	4770      	bx	lr
 801736e:	bf00      	nop
 8017370:	20000314 	.word	0x20000314

08017374 <Test_UpperTester_Set14>:
 8017374:	4b02      	ldr	r3, [pc, #8]	@ (8017380 <Test_UpperTester_Set14+0xc>)
 8017376:	2203      	movs	r2, #3
 8017378:	801a      	strh	r2, [r3, #0]
 801737a:	2000      	movs	r0, #0
 801737c:	4770      	bx	lr
 801737e:	bf00      	nop
 8017380:	20000008 	.word	0x20000008

08017384 <MobleGattReadCallback>:
 8017384:	b538      	push	{r3, r4, r5, lr}
 8017386:	b928      	cbnz	r0, 8017394 <MobleGattReadCallback+0x10>
 8017388:	4b16      	ldr	r3, [pc, #88]	@ (80173e4 <MobleGattReadCallback+0x60>)
 801738a:	4a17      	ldr	r2, [pc, #92]	@ (80173e8 <MobleGattReadCallback+0x64>)
 801738c:	215d      	movs	r1, #93	@ 0x5d
 801738e:	4817      	ldr	r0, [pc, #92]	@ (80173ec <MobleGattReadCallback+0x68>)
 8017390:	f011 f824 	bl	80283dc <__assert_func>
 8017394:	b91a      	cbnz	r2, 801739e <MobleGattReadCallback+0x1a>
 8017396:	4b16      	ldr	r3, [pc, #88]	@ (80173f0 <MobleGattReadCallback+0x6c>)
 8017398:	4a13      	ldr	r2, [pc, #76]	@ (80173e8 <MobleGattReadCallback+0x64>)
 801739a:	215e      	movs	r1, #94	@ 0x5e
 801739c:	e7f7      	b.n	801738e <MobleGattReadCallback+0xa>
 801739e:	b91b      	cbnz	r3, 80173a8 <MobleGattReadCallback+0x24>
 80173a0:	4b14      	ldr	r3, [pc, #80]	@ (80173f4 <MobleGattReadCallback+0x70>)
 80173a2:	4a11      	ldr	r2, [pc, #68]	@ (80173e8 <MobleGattReadCallback+0x64>)
 80173a4:	215f      	movs	r1, #95	@ 0x5f
 80173a6:	e7f2      	b.n	801738e <MobleGattReadCallback+0xa>
 80173a8:	f8d0 0164 	ldr.w	r0, [r0, #356]	@ 0x164
 80173ac:	b1c0      	cbz	r0, 80173e0 <MobleGattReadCallback+0x5c>
 80173ae:	6842      	ldr	r2, [r0, #4]
 80173b0:	b1b2      	cbz	r2, 80173e0 <MobleGattReadCallback+0x5c>
 80173b2:	7885      	ldrb	r5, [r0, #2]
 80173b4:	b1a5      	cbz	r5, 80173e0 <MobleGattReadCallback+0x5c>
 80173b6:	2400      	movs	r4, #0
 80173b8:	68d0      	ldr	r0, [r2, #12]
 80173ba:	3001      	adds	r0, #1
 80173bc:	b280      	uxth	r0, r0
 80173be:	4281      	cmp	r1, r0
 80173c0:	d106      	bne.n	80173d0 <MobleGattReadCallback+0x4c>
 80173c2:	7910      	ldrb	r0, [r2, #4]
 80173c4:	781b      	ldrb	r3, [r3, #0]
 80173c6:	4298      	cmp	r0, r3
 80173c8:	bf94      	ite	ls
 80173ca:	2002      	movls	r0, #2
 80173cc:	2003      	movhi	r0, #3
 80173ce:	bd38      	pop	{r3, r4, r5, pc}
 80173d0:	3401      	adds	r4, #1
 80173d2:	b2e0      	uxtb	r0, r4
 80173d4:	4285      	cmp	r5, r0
 80173d6:	f102 0210 	add.w	r2, r2, #16
 80173da:	d8ed      	bhi.n	80173b8 <MobleGattReadCallback+0x34>
 80173dc:	2001      	movs	r0, #1
 80173de:	e7f6      	b.n	80173ce <MobleGattReadCallback+0x4a>
 80173e0:	2002      	movs	r0, #2
 80173e2:	e7f4      	b.n	80173ce <MobleGattReadCallback+0x4a>
 80173e4:	08030e80 	.word	0x08030e80
 80173e8:	0802f174 	.word	0x0802f174
 80173ec:	08030e86 	.word	0x08030e86
 80173f0:	08030ec2 	.word	0x08030ec2
 80173f4:	08031638 	.word	0x08031638

080173f8 <BPKA_Reverse>:
 80173f8:	6803      	ldr	r3, [r0, #0]
 80173fa:	69c2      	ldr	r2, [r0, #28]
 80173fc:	ba1b      	rev	r3, r3
 80173fe:	ba12      	rev	r2, r2
 8017400:	6002      	str	r2, [r0, #0]
 8017402:	61c3      	str	r3, [r0, #28]
 8017404:	6982      	ldr	r2, [r0, #24]
 8017406:	6843      	ldr	r3, [r0, #4]
 8017408:	ba12      	rev	r2, r2
 801740a:	ba1b      	rev	r3, r3
 801740c:	6042      	str	r2, [r0, #4]
 801740e:	6183      	str	r3, [r0, #24]
 8017410:	6942      	ldr	r2, [r0, #20]
 8017412:	6883      	ldr	r3, [r0, #8]
 8017414:	ba12      	rev	r2, r2
 8017416:	ba1b      	rev	r3, r3
 8017418:	6082      	str	r2, [r0, #8]
 801741a:	6143      	str	r3, [r0, #20]
 801741c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8017420:	ba12      	rev	r2, r2
 8017422:	ba1b      	rev	r3, r3
 8017424:	60c2      	str	r2, [r0, #12]
 8017426:	6103      	str	r3, [r0, #16]
 8017428:	4770      	bx	lr

0801742a <MoblePBADVEraseTransaction>:
 801742a:	2100      	movs	r1, #0
 801742c:	6041      	str	r1, [r0, #4]
 801742e:	228a      	movs	r2, #138	@ 0x8a
 8017430:	3008      	adds	r0, #8
 8017432:	f011 bebb 	b.w	80291ac <memset>
	...

08017438 <BnrgmConfigModelProcessHeartbeat>:
 8017438:	b530      	push	{r4, r5, lr}
 801743a:	4c16      	ldr	r4, [pc, #88]	@ (8017494 <BnrgmConfigModelProcessHeartbeat+0x5c>)
 801743c:	f8d4 50e8 	ldr.w	r5, [r4, #232]	@ 0xe8
 8017440:	3d01      	subs	r5, #1
 8017442:	f1b5 7f7a 	cmp.w	r5, #65536000	@ 0x3e80000
 8017446:	d223      	bcs.n	8017490 <BnrgmConfigModelProcessHeartbeat+0x58>
 8017448:	4293      	cmp	r3, r2
 801744a:	d821      	bhi.n	8017490 <BnrgmConfigModelProcessHeartbeat+0x58>
 801744c:	f8b4 50e0 	ldrh.w	r5, [r4, #224]	@ 0xe0
 8017450:	4285      	cmp	r5, r0
 8017452:	d11d      	bne.n	8017490 <BnrgmConfigModelProcessHeartbeat+0x58>
 8017454:	f8a4 10e2 	strh.w	r1, [r4, #226]	@ 0xe2
 8017458:	f8b4 10e4 	ldrh.w	r1, [r4, #228]	@ 0xe4
 801745c:	3201      	adds	r2, #1
 801745e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017462:	4281      	cmp	r1, r0
 8017464:	eba2 0303 	sub.w	r3, r2, r3
 8017468:	f894 20e6 	ldrb.w	r2, [r4, #230]	@ 0xe6
 801746c:	bf1c      	itt	ne
 801746e:	3101      	addne	r1, #1
 8017470:	f8a4 10e4 	strhne.w	r1, [r4, #228]	@ 0xe4
 8017474:	b2db      	uxtb	r3, r3
 8017476:	b10a      	cbz	r2, 801747c <BnrgmConfigModelProcessHeartbeat+0x44>
 8017478:	4293      	cmp	r3, r2
 801747a:	d201      	bcs.n	8017480 <BnrgmConfigModelProcessHeartbeat+0x48>
 801747c:	f884 30e6 	strb.w	r3, [r4, #230]	@ 0xe6
 8017480:	f894 20e7 	ldrb.w	r2, [r4, #231]	@ 0xe7
 8017484:	429a      	cmp	r2, r3
 8017486:	d201      	bcs.n	801748c <BnrgmConfigModelProcessHeartbeat+0x54>
 8017488:	f884 30e7 	strb.w	r3, [r4, #231]	@ 0xe7
 801748c:	2000      	movs	r0, #0
 801748e:	e000      	b.n	8017492 <BnrgmConfigModelProcessHeartbeat+0x5a>
 8017490:	2002      	movs	r0, #2
 8017492:	bd30      	pop	{r4, r5, pc}
 8017494:	20000314 	.word	0x20000314

08017498 <BnrgmHealthModel_ProcessFaultClearUnack>:
 8017498:	4a09      	ldr	r2, [pc, #36]	@ (80174c0 <BnrgmHealthModel_ProcessFaultClearUnack+0x28>)
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	8852      	ldrh	r2, [r2, #2]
 801749e:	b29b      	uxth	r3, r3
 80174a0:	429a      	cmp	r2, r3
 80174a2:	d10a      	bne.n	80174ba <BnrgmHealthModel_ProcessFaultClearUnack+0x22>
 80174a4:	6803      	ldr	r3, [r0, #0]
 80174a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80174a8:	2300      	movs	r3, #0
 80174aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80174ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80174ae:	6802      	ldr	r2, [r0, #0]
 80174b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80174b2:	4618      	mov	r0, r3
 80174b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80174b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80174b8:	4770      	bx	lr
 80174ba:	2003      	movs	r0, #3
 80174bc:	4770      	bx	lr
 80174be:	bf00      	nop
 80174c0:	20000008 	.word	0x20000008

080174c4 <BnrgmHealthModel_ProcessFaultTestUnack>:
 80174c4:	4a0a      	ldr	r2, [pc, #40]	@ (80174f0 <BnrgmHealthModel_ProcessFaultTestUnack+0x2c>)
 80174c6:	7819      	ldrb	r1, [r3, #0]
 80174c8:	f892 2f20 	ldrb.w	r2, [r2, #3872]	@ 0xf20
 80174cc:	428a      	cmp	r2, r1
 80174ce:	d001      	beq.n	80174d4 <BnrgmHealthModel_ProcessFaultTestUnack+0x10>
 80174d0:	2003      	movs	r0, #3
 80174d2:	4770      	bx	lr
 80174d4:	4907      	ldr	r1, [pc, #28]	@ (80174f4 <BnrgmHealthModel_ProcessFaultTestUnack+0x30>)
 80174d6:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80174da:	8849      	ldrh	r1, [r1, #2]
 80174dc:	b29b      	uxth	r3, r3
 80174de:	4299      	cmp	r1, r3
 80174e0:	d1f6      	bne.n	80174d0 <BnrgmHealthModel_ProcessFaultTestUnack+0xc>
 80174e2:	6803      	ldr	r3, [r0, #0]
 80174e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174e6:	2000      	movs	r0, #0
 80174e8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
 80174ec:	4770      	bx	lr
 80174ee:	bf00      	nop
 80174f0:	20000314 	.word	0x20000314
 80174f4:	20000008 	.word	0x20000008

080174f8 <MoblePalTimerFindFreeSlot>:
 80174f8:	4b06      	ldr	r3, [pc, #24]	@ (8017514 <MoblePalTimerFindFreeSlot+0x1c>)
 80174fa:	2000      	movs	r0, #0
 80174fc:	2218      	movs	r2, #24
 80174fe:	fb02 f100 	mul.w	r1, r2, r0
 8017502:	5cc9      	ldrb	r1, [r1, r3]
 8017504:	b121      	cbz	r1, 8017510 <MoblePalTimerFindFreeSlot+0x18>
 8017506:	3001      	adds	r0, #1
 8017508:	2832      	cmp	r0, #50	@ 0x32
 801750a:	d1f8      	bne.n	80174fe <MoblePalTimerFindFreeSlot+0x6>
 801750c:	f04f 30ff 	mov.w	r0, #4294967295
 8017510:	4770      	bx	lr
 8017512:	bf00      	nop
 8017514:	20001238 	.word	0x20001238

08017518 <MoblePalTimerInit>:
 8017518:	2300      	movs	r3, #0
 801751a:	4a06      	ldr	r2, [pc, #24]	@ (8017534 <MoblePalTimerInit+0x1c>)
 801751c:	b510      	push	{r4, lr}
 801751e:	4618      	mov	r0, r3
 8017520:	2418      	movs	r4, #24
 8017522:	fb04 f103 	mul.w	r1, r4, r3
 8017526:	3301      	adds	r3, #1
 8017528:	2b32      	cmp	r3, #50	@ 0x32
 801752a:	5488      	strb	r0, [r1, r2]
 801752c:	d1f9      	bne.n	8017522 <MoblePalTimerInit+0xa>
 801752e:	2000      	movs	r0, #0
 8017530:	bd10      	pop	{r4, pc}
 8017532:	bf00      	nop
 8017534:	20001238 	.word	0x20001238

08017538 <MoblePalTimerCreate>:
 8017538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801753a:	460e      	mov	r6, r1
 801753c:	4617      	mov	r7, r2
 801753e:	4605      	mov	r5, r0
 8017540:	b1a8      	cbz	r0, 801756e <MoblePalTimerCreate+0x36>
 8017542:	b1a1      	cbz	r1, 801756e <MoblePalTimerCreate+0x36>
 8017544:	f7ff ffd8 	bl	80174f8 <MoblePalTimerFindFreeSlot>
 8017548:	1e03      	subs	r3, r0, #0
 801754a:	db12      	blt.n	8017572 <MoblePalTimerCreate+0x3a>
 801754c:	4c0a      	ldr	r4, [pc, #40]	@ (8017578 <MoblePalTimerCreate+0x40>)
 801754e:	2218      	movs	r2, #24
 8017550:	4353      	muls	r3, r2
 8017552:	18e1      	adds	r1, r4, r3
 8017554:	f604 7424 	addw	r4, r4, #3876	@ 0xf24
 8017558:	2201      	movs	r2, #1
 801755a:	441c      	add	r4, r3
 801755c:	f881 2f24 	strb.w	r2, [r1, #3876]	@ 0xf24
 8017560:	f8c1 6f34 	str.w	r6, [r1, #3892]	@ 0xf34
 8017564:	f8c1 7f38 	str.w	r7, [r1, #3896]	@ 0xf38
 8017568:	2000      	movs	r0, #0
 801756a:	602c      	str	r4, [r5, #0]
 801756c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801756e:	2003      	movs	r0, #3
 8017570:	e7fc      	b.n	801756c <MoblePalTimerCreate+0x34>
 8017572:	2004      	movs	r0, #4
 8017574:	e7fa      	b.n	801756c <MoblePalTimerCreate+0x34>
 8017576:	bf00      	nop
 8017578:	20000314 	.word	0x20000314

0801757c <MoblePalTimerSetup>:
 801757c:	b570      	push	{r4, r5, r6, lr}
 801757e:	460d      	mov	r5, r1
 8017580:	4616      	mov	r6, r2
 8017582:	4604      	mov	r4, r0
 8017584:	b168      	cbz	r0, 80175a2 <MoblePalTimerSetup+0x26>
 8017586:	b161      	cbz	r1, 80175a2 <MoblePalTimerSetup+0x26>
 8017588:	7803      	ldrb	r3, [r0, #0]
 801758a:	2b01      	cmp	r3, #1
 801758c:	d10b      	bne.n	80175a6 <MoblePalTimerSetup+0x2a>
 801758e:	f7f0 fc45 	bl	8007e1c <HAL_GetTick>
 8017592:	2302      	movs	r3, #2
 8017594:	6060      	str	r0, [r4, #4]
 8017596:	4428      	add	r0, r5
 8017598:	60a0      	str	r0, [r4, #8]
 801759a:	7326      	strb	r6, [r4, #12]
 801759c:	7023      	strb	r3, [r4, #0]
 801759e:	2000      	movs	r0, #0
 80175a0:	bd70      	pop	{r4, r5, r6, pc}
 80175a2:	2003      	movs	r0, #3
 80175a4:	e7fc      	b.n	80175a0 <MoblePalTimerSetup+0x24>
 80175a6:	2002      	movs	r0, #2
 80175a8:	e7fa      	b.n	80175a0 <MoblePalTimerSetup+0x24>

080175aa <MoblePalTimerStart>:
 80175aa:	2200      	movs	r2, #0
 80175ac:	f7ff bfe6 	b.w	801757c <MoblePalTimerSetup>

080175b0 <BnrgmHealthModelSetAttentionTimer>:
 80175b0:	b538      	push	{r3, r4, r5, lr}
 80175b2:	6803      	ldr	r3, [r0, #0]
 80175b4:	4604      	mov	r4, r0
 80175b6:	f8d0 01f4 	ldr.w	r0, [r0, #500]	@ 0x1f4
 80175ba:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80175bc:	b910      	cbnz	r0, 80175c4 <BnrgmHealthModelSetAttentionTimer+0x14>
 80175be:	f885 006e 	strb.w	r0, [r5, #110]	@ 0x6e
 80175c2:	bd38      	pop	{r3, r4, r5, pc}
 80175c4:	f895 006e 	ldrb.w	r0, [r5, #110]	@ 0x6e
 80175c8:	2800      	cmp	r0, #0
 80175ca:	d0fa      	beq.n	80175c2 <BnrgmHealthModelSetAttentionTimer+0x12>
 80175cc:	4909      	ldr	r1, [pc, #36]	@ (80175f4 <BnrgmHealthModelSetAttentionTimer+0x44>)
 80175ce:	4622      	mov	r2, r4
 80175d0:	f105 0070 	add.w	r0, r5, #112	@ 0x70
 80175d4:	f7ff ffb0 	bl	8017538 <MoblePalTimerCreate>
 80175d8:	2801      	cmp	r0, #1
 80175da:	d808      	bhi.n	80175ee <BnrgmHealthModelSetAttentionTimer+0x3e>
 80175dc:	6823      	ldr	r3, [r4, #0]
 80175de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80175e4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80175e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80175ea:	f7ff bfde 	b.w	80175aa <MoblePalTimerStart>
 80175ee:	2004      	movs	r0, #4
 80175f0:	e7e7      	b.n	80175c2 <BnrgmHealthModelSetAttentionTimer+0x12>
 80175f2:	bf00      	nop
 80175f4:	08017335 	.word	0x08017335

080175f8 <BnrgmHealthModel_ProcessAttentionSetUnack>:
 80175f8:	b508      	push	{r3, lr}
 80175fa:	781a      	ldrb	r2, [r3, #0]
 80175fc:	6803      	ldr	r3, [r0, #0]
 80175fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017600:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
 8017604:	f7ff ffd4 	bl	80175b0 <BnrgmHealthModelSetAttentionTimer>
 8017608:	2000      	movs	r0, #0
 801760a:	bd08      	pop	{r3, pc}

0801760c <MoblePalTimerStartOnce>:
 801760c:	2201      	movs	r2, #1
 801760e:	f7ff bfb5 	b.w	801757c <MoblePalTimerSetup>
	...

08017614 <MoblePBADVRaiseTransTimeoutTimer>:
 8017614:	b510      	push	{r4, lr}
 8017616:	4604      	mov	r4, r0
 8017618:	4906      	ldr	r1, [pc, #24]	@ (8017634 <MoblePBADVRaiseTransTimeoutTimer+0x20>)
 801761a:	4602      	mov	r2, r0
 801761c:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
 8017620:	f7ff ff8a 	bl	8017538 <MoblePalTimerCreate>
 8017624:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
 8017628:	f64e 2160 	movw	r1, #60000	@ 0xea60
 801762c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017630:	f7ff bfec 	b.w	801760c <MoblePalTimerStartOnce>
 8017634:	08026b05 	.word	0x08026b05

08017638 <MoblePBADVRaiseLinkIdleTimer>:
 8017638:	b510      	push	{r4, lr}
 801763a:	4604      	mov	r4, r0
 801763c:	4906      	ldr	r1, [pc, #24]	@ (8017658 <MoblePBADVRaiseLinkIdleTimer+0x20>)
 801763e:	4602      	mov	r2, r0
 8017640:	f500 70a6 	add.w	r0, r0, #332	@ 0x14c
 8017644:	f7ff ff78 	bl	8017538 <MoblePalTimerCreate>
 8017648:	f8d4 014c 	ldr.w	r0, [r4, #332]	@ 0x14c
 801764c:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8017650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017654:	f7ff bfda 	b.w	801760c <MoblePalTimerStartOnce>
 8017658:	08026b0d 	.word	0x08026b0d

0801765c <MoblePalTimerStop>:
 801765c:	b130      	cbz	r0, 801766c <MoblePalTimerStop+0x10>
 801765e:	7803      	ldrb	r3, [r0, #0]
 8017660:	2b02      	cmp	r3, #2
 8017662:	d105      	bne.n	8017670 <MoblePalTimerStop+0x14>
 8017664:	2301      	movs	r3, #1
 8017666:	7003      	strb	r3, [r0, #0]
 8017668:	2000      	movs	r0, #0
 801766a:	4770      	bx	lr
 801766c:	2003      	movs	r0, #3
 801766e:	4770      	bx	lr
 8017670:	2002      	movs	r0, #2
 8017672:	4770      	bx	lr

08017674 <BnrgmConfigModelHeartbeatSubscription_TimerCallback>:
 8017674:	4a08      	ldr	r2, [pc, #32]	@ (8017698 <BnrgmConfigModelHeartbeatSubscription_TimerCallback+0x24>)
 8017676:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 801767a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801767e:	d204      	bcs.n	801768a <BnrgmConfigModelHeartbeatSubscription_TimerCallback+0x16>
 8017680:	2300      	movs	r3, #0
 8017682:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8017686:	f7ff bfe9 	b.w	801765c <MoblePalTimerStop>
 801768a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801768e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8017692:	2b00      	cmp	r3, #0
 8017694:	d0f7      	beq.n	8017686 <BnrgmConfigModelHeartbeatSubscription_TimerCallback+0x12>
 8017696:	4770      	bx	lr
 8017698:	20000314 	.word	0x20000314

0801769c <MoblePalTimerDestroy>:
 801769c:	b118      	cbz	r0, 80176a6 <MoblePalTimerDestroy+0xa>
 801769e:	2300      	movs	r3, #0
 80176a0:	7003      	strb	r3, [r0, #0]
 80176a2:	4618      	mov	r0, r3
 80176a4:	4770      	bx	lr
 80176a6:	2003      	movs	r0, #3
 80176a8:	4770      	bx	lr
	...

080176ac <MobleTransEraseTimer>:
 80176ac:	4602      	mov	r2, r0
 80176ae:	6800      	ldr	r0, [r0, #0]
 80176b0:	b570      	push	{r4, r5, r6, lr}
 80176b2:	b170      	cbz	r0, 80176d2 <MobleTransEraseTimer+0x26>
 80176b4:	4b0a      	ldr	r3, [pc, #40]	@ (80176e0 <MobleTransEraseTimer+0x34>)
 80176b6:	f893 52dc 	ldrb.w	r5, [r3, #732]	@ 0x2dc
 80176ba:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 80176be:	2100      	movs	r1, #0
 80176c0:	3314      	adds	r3, #20
 80176c2:	460e      	mov	r6, r1
 80176c4:	b2cc      	uxtb	r4, r1
 80176c6:	42a5      	cmp	r5, r4
 80176c8:	d804      	bhi.n	80176d4 <MobleTransEraseTimer+0x28>
 80176ca:	f7ff ffe7 	bl	801769c <MoblePalTimerDestroy>
 80176ce:	2300      	movs	r3, #0
 80176d0:	6013      	str	r3, [r2, #0]
 80176d2:	bd70      	pop	{r4, r5, r6, pc}
 80176d4:	429a      	cmp	r2, r3
 80176d6:	bf08      	it	eq
 80176d8:	7416      	strbeq	r6, [r2, #16]
 80176da:	3101      	adds	r1, #1
 80176dc:	332c      	adds	r3, #44	@ 0x2c
 80176de:	e7f1      	b.n	80176c4 <MobleTransEraseTimer+0x18>
 80176e0:	2000140c 	.word	0x2000140c

080176e4 <MobleTransSarOnTimeout>:
 80176e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176e6:	f101 0014 	add.w	r0, r1, #20
 80176ea:	460c      	mov	r4, r1
 80176ec:	f7ff ffde 	bl	80176ac <MobleTransEraseTimer>
 80176f0:	f104 0020 	add.w	r0, r4, #32
 80176f4:	f7ff ffda 	bl	80176ac <MobleTransEraseTimer>
 80176f8:	490f      	ldr	r1, [pc, #60]	@ (8017738 <MobleTransSarOnTimeout+0x54>)
 80176fa:	e9d1 36b8 	ldrd	r3, r6, [r1, #736]	@ 0x2e0
 80176fe:	2200      	movs	r2, #0
 8017700:	4610      	mov	r0, r2
 8017702:	f04f 0c2c 	mov.w	ip, #44	@ 0x2c
 8017706:	f891 52dc 	ldrb.w	r5, [r1, #732]	@ 0x2dc
 801770a:	4295      	cmp	r5, r2
 801770c:	dc02      	bgt.n	8017714 <MobleTransSarOnTimeout+0x30>
 801770e:	2300      	movs	r3, #0
 8017710:	7023      	strb	r3, [r4, #0]
 8017712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017714:	781d      	ldrb	r5, [r3, #0]
 8017716:	b15d      	cbz	r5, 8017730 <MobleTransSarOnTimeout+0x4c>
 8017718:	885f      	ldrh	r7, [r3, #2]
 801771a:	88a5      	ldrh	r5, [r4, #4]
 801771c:	42af      	cmp	r7, r5
 801771e:	d107      	bne.n	8017730 <MobleTransSarOnTimeout+0x4c>
 8017720:	68e5      	ldr	r5, [r4, #12]
 8017722:	685f      	ldr	r7, [r3, #4]
 8017724:	42af      	cmp	r7, r5
 8017726:	bf02      	ittt	eq
 8017728:	fb0c f502 	muleq.w	r5, ip, r2
 801772c:	7018      	strbeq	r0, [r3, #0]
 801772e:	5570      	strbeq	r0, [r6, r5]
 8017730:	3201      	adds	r2, #1
 8017732:	332c      	adds	r3, #44	@ 0x2c
 8017734:	e7e7      	b.n	8017706 <MobleTransSarOnTimeout+0x22>
 8017736:	bf00      	nop
 8017738:	2000140c 	.word	0x2000140c

0801773c <MoblePBADVEraseTimer>:
 801773c:	4602      	mov	r2, r0
 801773e:	6800      	ldr	r0, [r0, #0]
 8017740:	b508      	push	{r3, lr}
 8017742:	b118      	cbz	r0, 801774c <MoblePBADVEraseTimer+0x10>
 8017744:	f7ff ffaa 	bl	801769c <MoblePalTimerDestroy>
 8017748:	2300      	movs	r3, #0
 801774a:	6013      	str	r3, [r2, #0]
 801774c:	bd08      	pop	{r3, pc}

0801774e <MoblePBADVClearTimers>:
 801774e:	b508      	push	{r3, lr}
 8017750:	4601      	mov	r1, r0
 8017752:	f500 70aa 	add.w	r0, r0, #340	@ 0x154
 8017756:	f7ff fff1 	bl	801773c <MoblePBADVEraseTimer>
 801775a:	f501 70a8 	add.w	r0, r1, #336	@ 0x150
 801775e:	f7ff ffed 	bl	801773c <MoblePBADVEraseTimer>
 8017762:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017766:	f501 70a6 	add.w	r0, r1, #332	@ 0x14c
 801776a:	f7ff bfe7 	b.w	801773c <MoblePBADVEraseTimer>
	...

08017770 <BnrgmHealthModelSetPublishTimer>:
 8017770:	b570      	push	{r4, r5, r6, lr}
 8017772:	6803      	ldr	r3, [r0, #0]
 8017774:	4a1e      	ldr	r2, [pc, #120]	@ (80177f0 <BnrgmHealthModelSetPublishTimer+0x80>)
 8017776:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8017778:	f8b2 110a 	ldrh.w	r1, [r2, #266]	@ 0x10a
 801777c:	f8a5 105e 	strh.w	r1, [r5, #94]	@ 0x5e
 8017780:	f892 110f 	ldrb.w	r1, [r2, #271]	@ 0x10f
 8017784:	f8b2 2108 	ldrh.w	r2, [r2, #264]	@ 0x108
 8017788:	f885 1063 	strb.w	r1, [r5, #99]	@ 0x63
 801778c:	f012 0fc0 	tst.w	r2, #192	@ 0xc0
 8017790:	4606      	mov	r6, r0
 8017792:	f002 043f 	and.w	r4, r2, #63	@ 0x3f
 8017796:	f3c2 1181 	ubfx	r1, r2, #6, #2
 801779a:	d11b      	bne.n	80177d4 <BnrgmHealthModelSetPublishTimer+0x64>
 801779c:	2264      	movs	r2, #100	@ 0x64
 801779e:	fb14 f402 	smulbb	r4, r4, r2
 80177a2:	f895 2049 	ldrb.w	r2, [r5, #73]	@ 0x49
 80177a6:	b112      	cbz	r2, 80177ae <BnrgmHealthModelSetPublishTimer+0x3e>
 80177a8:	f895 206d 	ldrb.w	r2, [r5, #109]	@ 0x6d
 80177ac:	40d4      	lsrs	r4, r2
 80177ae:	f855 0f74 	ldr.w	r0, [r5, #116]!
 80177b2:	4910      	ldr	r1, [pc, #64]	@ (80177f4 <BnrgmHealthModelSetPublishTimer+0x84>)
 80177b4:	f7ff ff72 	bl	801769c <MoblePalTimerDestroy>
 80177b8:	4632      	mov	r2, r6
 80177ba:	4628      	mov	r0, r5
 80177bc:	f7ff febc 	bl	8017538 <MoblePalTimerCreate>
 80177c0:	2801      	cmp	r0, #1
 80177c2:	d813      	bhi.n	80177ec <BnrgmHealthModelSetPublishTimer+0x7c>
 80177c4:	6833      	ldr	r3, [r6, #0]
 80177c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177c8:	b2a1      	uxth	r1, r4
 80177ca:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80177cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177d0:	f7ff beeb 	b.w	80175aa <MoblePalTimerStart>
 80177d4:	2901      	cmp	r1, #1
 80177d6:	d103      	bne.n	80177e0 <BnrgmHealthModelSetPublishTimer+0x70>
 80177d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80177dc:	4354      	muls	r4, r2
 80177de:	e7e0      	b.n	80177a2 <BnrgmHealthModelSetPublishTimer+0x32>
 80177e0:	2902      	cmp	r1, #2
 80177e2:	bf14      	ite	ne
 80177e4:	4a04      	ldrne	r2, [pc, #16]	@ (80177f8 <BnrgmHealthModelSetPublishTimer+0x88>)
 80177e6:	f242 7210 	movweq	r2, #10000	@ 0x2710
 80177ea:	e7f7      	b.n	80177dc <BnrgmHealthModelSetPublishTimer+0x6c>
 80177ec:	bd70      	pop	{r4, r5, r6, pc}
 80177ee:	bf00      	nop
 80177f0:	20000314 	.word	0x20000314
 80177f4:	08024c59 	.word	0x08024c59
 80177f8:	000927c0 	.word	0x000927c0

080177fc <BnrgmHealthModel_ProcessPeriodSetUnack>:
 80177fc:	b508      	push	{r3, lr}
 80177fe:	781b      	ldrb	r3, [r3, #0]
 8017800:	2b0f      	cmp	r3, #15
 8017802:	d807      	bhi.n	8017814 <BnrgmHealthModel_ProcessPeriodSetUnack+0x18>
 8017804:	6802      	ldr	r2, [r0, #0]
 8017806:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8017808:	f882 306d 	strb.w	r3, [r2, #109]	@ 0x6d
 801780c:	f7ff ffb0 	bl	8017770 <BnrgmHealthModelSetPublishTimer>
 8017810:	2000      	movs	r0, #0
 8017812:	bd08      	pop	{r3, pc}
 8017814:	2003      	movs	r0, #3
 8017816:	e7fc      	b.n	8017812 <BnrgmHealthModel_ProcessPeriodSetUnack+0x16>

08017818 <BnrgmStackNodeIdentityTimerCallback>:
 8017818:	4b03      	ldr	r3, [pc, #12]	@ (8017828 <BnrgmStackNodeIdentityTimerCallback+0x10>)
 801781a:	f8d1 017c 	ldr.w	r0, [r1, #380]	@ 0x17c
 801781e:	2200      	movs	r2, #0
 8017820:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
 8017824:	f7ff bf3a 	b.w	801769c <MoblePalTimerDestroy>
 8017828:	20000314 	.word	0x20000314

0801782c <MoblePalTimerProcess>:
 801782c:	b570      	push	{r4, r5, r6, lr}
 801782e:	4c13      	ldr	r4, [pc, #76]	@ (801787c <MoblePalTimerProcess+0x50>)
 8017830:	2600      	movs	r6, #0
 8017832:	2501      	movs	r5, #1
 8017834:	7823      	ldrb	r3, [r4, #0]
 8017836:	2b02      	cmp	r3, #2
 8017838:	d117      	bne.n	801786a <MoblePalTimerProcess+0x3e>
 801783a:	f7f0 faef 	bl	8007e1c <HAL_GetTick>
 801783e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8017842:	429a      	cmp	r2, r3
 8017844:	d20f      	bcs.n	8017866 <MoblePalTimerProcess+0x3a>
 8017846:	4298      	cmp	r0, r3
 8017848:	d201      	bcs.n	801784e <MoblePalTimerProcess+0x22>
 801784a:	4290      	cmp	r0, r2
 801784c:	d20d      	bcs.n	801786a <MoblePalTimerProcess+0x3e>
 801784e:	7b21      	ldrb	r1, [r4, #12]
 8017850:	b991      	cbnz	r1, 8017878 <MoblePalTimerProcess+0x4c>
 8017852:	1a9b      	subs	r3, r3, r2
 8017854:	6060      	str	r0, [r4, #4]
 8017856:	4418      	add	r0, r3
 8017858:	60a0      	str	r0, [r4, #8]
 801785a:	6923      	ldr	r3, [r4, #16]
 801785c:	b12b      	cbz	r3, 801786a <MoblePalTimerProcess+0x3e>
 801785e:	6961      	ldr	r1, [r4, #20]
 8017860:	4620      	mov	r0, r4
 8017862:	4798      	blx	r3
 8017864:	e001      	b.n	801786a <MoblePalTimerProcess+0x3e>
 8017866:	4298      	cmp	r0, r3
 8017868:	d2ef      	bcs.n	801784a <MoblePalTimerProcess+0x1e>
 801786a:	3601      	adds	r6, #1
 801786c:	2e32      	cmp	r6, #50	@ 0x32
 801786e:	f104 0418 	add.w	r4, r4, #24
 8017872:	d1df      	bne.n	8017834 <MoblePalTimerProcess+0x8>
 8017874:	2000      	movs	r0, #0
 8017876:	bd70      	pop	{r4, r5, r6, pc}
 8017878:	7025      	strb	r5, [r4, #0]
 801787a:	e7ee      	b.n	801785a <MoblePalTimerProcess+0x2e>
 801787c:	20001238 	.word	0x20001238

08017880 <MoblePalBluetoothCheckManufacturerID>:
 8017880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017882:	f10d 030e 	add.w	r3, sp, #14
 8017886:	9300      	str	r3, [sp, #0]
 8017888:	f10d 0209 	add.w	r2, sp, #9
 801788c:	ab03      	add	r3, sp, #12
 801788e:	f10d 010a 	add.w	r1, sp, #10
 8017892:	a802      	add	r0, sp, #8
 8017894:	f7fd fbf9 	bl	801508a <hci_read_local_version_information>
 8017898:	3800      	subs	r0, #0
 801789a:	bf18      	it	ne
 801789c:	2001      	movne	r0, #1
 801789e:	0040      	lsls	r0, r0, #1
 80178a0:	b005      	add	sp, #20
 80178a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080178a8 <MoblePalBluetoothSetConnectionInterval>:
 80178a8:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 80178ac:	4358      	muls	r0, r3
 80178ae:	4b04      	ldr	r3, [pc, #16]	@ (80178c0 <MoblePalBluetoothSetConnectionInterval+0x18>)
 80178b0:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 80178b4:	4282      	cmp	r2, r0
 80178b6:	bf18      	it	ne
 80178b8:	f8c3 0350 	strne.w	r0, [r3, #848]	@ 0x350
 80178bc:	4770      	bx	lr
 80178be:	bf00      	nop
 80178c0:	2000140c 	.word	0x2000140c

080178c4 <MoblePalBluetoothGattAddService>:
 80178c4:	b510      	push	{r4, lr}
 80178c6:	b086      	sub	sp, #24
 80178c8:	461c      	mov	r4, r3
 80178ca:	f8ad 100e 	strh.w	r1, [sp, #14]
 80178ce:	b1ab      	cbz	r3, 80178fc <MoblePalBluetoothGattAddService+0x38>
 80178d0:	2801      	cmp	r0, #1
 80178d2:	f10d 0316 	add.w	r3, sp, #22
 80178d6:	9300      	str	r3, [sp, #0]
 80178d8:	f10d 010e 	add.w	r1, sp, #14
 80178dc:	4613      	mov	r3, r2
 80178de:	bf0c      	ite	eq
 80178e0:	4602      	moveq	r2, r0
 80178e2:	2202      	movne	r2, #2
 80178e4:	2001      	movs	r0, #1
 80178e6:	f7fc fd8b 	bl	8014400 <aci_gatt_add_service>
 80178ea:	b948      	cbnz	r0, 8017900 <MoblePalBluetoothGattAddService+0x3c>
 80178ec:	4a05      	ldr	r2, [pc, #20]	@ (8017904 <MoblePalBluetoothGattAddService+0x40>)
 80178ee:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80178f2:	6023      	str	r3, [r4, #0]
 80178f4:	f8a2 3340 	strh.w	r3, [r2, #832]	@ 0x340
 80178f8:	b006      	add	sp, #24
 80178fa:	bd10      	pop	{r4, pc}
 80178fc:	2003      	movs	r0, #3
 80178fe:	e7fb      	b.n	80178f8 <MoblePalBluetoothGattAddService+0x34>
 8017900:	2002      	movs	r0, #2
 8017902:	e7f9      	b.n	80178f8 <MoblePalBluetoothGattAddService+0x34>
 8017904:	2000140c 	.word	0x2000140c

08017908 <MoblePalBluetoothGattDelService>:
 8017908:	b508      	push	{r3, lr}
 801790a:	b280      	uxth	r0, r0
 801790c:	f7fd f867 	bl	80149de <aci_gatt_del_service>
 8017910:	3800      	subs	r0, #0
 8017912:	bf18      	it	ne
 8017914:	2001      	movne	r0, #1
 8017916:	0040      	lsls	r0, r0, #1
 8017918:	bd08      	pop	{r3, pc}

0801791a <MoblePalBluetoothGattAddCharacteristic>:
 801791a:	b570      	push	{r4, r5, r6, lr}
 801791c:	b08a      	sub	sp, #40	@ 0x28
 801791e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8017920:	f89d 4038 	ldrb.w	r4, [sp, #56]	@ 0x38
 8017924:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8017928:	f8ad 101e 	strh.w	r1, [sp, #30]
 801792c:	2e00      	cmp	r6, #0
 801792e:	d037      	beq.n	80179a0 <MoblePalBluetoothGattAddCharacteristic+0x86>
 8017930:	f014 0101 	ands.w	r1, r4, #1
 8017934:	bf1c      	itt	ne
 8017936:	f084 0401 	eorne.w	r4, r4, #1
 801793a:	2102      	movne	r1, #2
 801793c:	f014 0f02 	tst.w	r4, #2
 8017940:	bf1c      	itt	ne
 8017942:	f084 0402 	eorne.w	r4, r4, #2
 8017946:	f041 0104 	orrne.w	r1, r1, #4
 801794a:	f014 0f04 	tst.w	r4, #4
 801794e:	bf1c      	itt	ne
 8017950:	f084 0404 	eorne.w	r4, r4, #4
 8017954:	f041 0108 	orrne.w	r1, r1, #8
 8017958:	f014 0f08 	tst.w	r4, #8
 801795c:	bf1c      	itt	ne
 801795e:	f084 0408 	eorne.w	r4, r4, #8
 8017962:	f041 0110 	orrne.w	r1, r1, #16
 8017966:	432c      	orrs	r4, r5
 8017968:	d11a      	bne.n	80179a0 <MoblePalBluetoothGattAddCharacteristic+0x86>
 801796a:	f10d 0526 	add.w	r5, sp, #38	@ 0x26
 801796e:	9505      	str	r5, [sp, #20]
 8017970:	1e5d      	subs	r5, r3, #1
 8017972:	426b      	negs	r3, r5
 8017974:	416b      	adcs	r3, r5
 8017976:	9304      	str	r3, [sp, #16]
 8017978:	2310      	movs	r3, #16
 801797a:	9303      	str	r3, [sp, #12]
 801797c:	f3c1 0380 	ubfx	r3, r1, #2, #1
 8017980:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8017984:	9100      	str	r1, [sp, #0]
 8017986:	4613      	mov	r3, r2
 8017988:	2101      	movs	r1, #1
 801798a:	f10d 021e 	add.w	r2, sp, #30
 801798e:	b280      	uxth	r0, r0
 8017990:	f7fc fe0c 	bl	80145ac <aci_gatt_add_char>
 8017994:	b930      	cbnz	r0, 80179a4 <MoblePalBluetoothGattAddCharacteristic+0x8a>
 8017996:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 801799a:	6033      	str	r3, [r6, #0]
 801799c:	b00a      	add	sp, #40	@ 0x28
 801799e:	bd70      	pop	{r4, r5, r6, pc}
 80179a0:	2003      	movs	r0, #3
 80179a2:	e7fb      	b.n	801799c <MoblePalBluetoothGattAddCharacteristic+0x82>
 80179a4:	2002      	movs	r0, #2
 80179a6:	e7f9      	b.n	801799c <MoblePalBluetoothGattAddCharacteristic+0x82>

080179a8 <MoblePalBluetoothGattDelCharacteristic>:
 80179a8:	b508      	push	{r3, lr}
 80179aa:	b289      	uxth	r1, r1
 80179ac:	b280      	uxth	r0, r0
 80179ae:	f7fc ffae 	bl	801490e <aci_gatt_del_char>
 80179b2:	3800      	subs	r0, #0
 80179b4:	bf18      	it	ne
 80179b6:	2001      	movne	r0, #1
 80179b8:	0040      	lsls	r0, r0, #1
 80179ba:	bd08      	pop	{r3, pc}

080179bc <MoblePalBluetoothGetConnectionState>:
 80179bc:	4b06      	ldr	r3, [pc, #24]	@ (80179d8 <MoblePalBluetoothGetConnectionState+0x1c>)
 80179be:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80179c2:	f013 0f34 	tst.w	r3, #52	@ 0x34
 80179c6:	d105      	bne.n	80179d4 <MoblePalBluetoothGetConnectionState+0x18>
 80179c8:	f013 0f08 	tst.w	r3, #8
 80179cc:	bf14      	ite	ne
 80179ce:	2001      	movne	r0, #1
 80179d0:	2002      	moveq	r0, #2
 80179d2:	4770      	bx	lr
 80179d4:	2000      	movs	r0, #0
 80179d6:	4770      	bx	lr
 80179d8:	2000140c 	.word	0x2000140c

080179dc <MoblePalBluetoothSetBluetoothAddress>:
 80179dc:	4b06      	ldr	r3, [pc, #24]	@ (80179f8 <MoblePalBluetoothSetBluetoothAddress+0x1c>)
 80179de:	6802      	ldr	r2, [r0, #0]
 80179e0:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
 80179e4:	8882      	ldrh	r2, [r0, #4]
 80179e6:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
 80179ea:	2201      	movs	r2, #1
 80179ec:	f883 2362 	strb.w	r2, [r3, #866]	@ 0x362
 80179f0:	f883 1363 	strb.w	r1, [r3, #867]	@ 0x363
 80179f4:	2000      	movs	r0, #0
 80179f6:	4770      	bx	lr
 80179f8:	2000140c 	.word	0x2000140c

080179fc <MoblePalBluetoothGetBluetoothAddress>:
 80179fc:	b508      	push	{r3, lr}
 80179fe:	b190      	cbz	r0, 8017a26 <MoblePalBluetoothGetBluetoothAddress+0x2a>
 8017a00:	490a      	ldr	r1, [pc, #40]	@ (8017a2c <MoblePalBluetoothGetBluetoothAddress+0x30>)
 8017a02:	f891 3362 	ldrb.w	r3, [r1, #866]	@ 0x362
 8017a06:	2b01      	cmp	r3, #1
 8017a08:	d106      	bne.n	8017a18 <MoblePalBluetoothGetBluetoothAddress+0x1c>
 8017a0a:	2206      	movs	r2, #6
 8017a0c:	f501 7157 	add.w	r1, r1, #860	@ 0x35c
 8017a10:	f011 fbb2 	bl	8029178 <memmove>
 8017a14:	2000      	movs	r0, #0
 8017a16:	bd08      	pop	{r3, pc}
 8017a18:	f7fd fb7d 	bl	8015116 <hci_read_bd_addr>
 8017a1c:	3800      	subs	r0, #0
 8017a1e:	bf18      	it	ne
 8017a20:	2001      	movne	r0, #1
 8017a22:	0040      	lsls	r0, r0, #1
 8017a24:	e7f7      	b.n	8017a16 <MoblePalBluetoothGetBluetoothAddress+0x1a>
 8017a26:	2003      	movs	r0, #3
 8017a28:	e7f5      	b.n	8017a16 <MoblePalBluetoothGetBluetoothAddress+0x1a>
 8017a2a:	bf00      	nop
 8017a2c:	2000140c 	.word	0x2000140c

08017a30 <MoblePalBluetoothInit>:
 8017a30:	b570      	push	{r4, r5, r6, lr}
 8017a32:	4c12      	ldr	r4, [pc, #72]	@ (8017a7c <MoblePalBluetoothInit+0x4c>)
 8017a34:	4606      	mov	r6, r0
 8017a36:	461d      	mov	r5, r3
 8017a38:	f884 1364 	strb.w	r1, [r4, #868]	@ 0x364
 8017a3c:	f8c4 2368 	str.w	r2, [r4, #872]	@ 0x368
 8017a40:	f7ff ff1e 	bl	8017880 <MoblePalBluetoothCheckManufacturerID>
 8017a44:	2801      	cmp	r0, #1
 8017a46:	d818      	bhi.n	8017a7a <MoblePalBluetoothInit+0x4a>
 8017a48:	79e9      	ldrb	r1, [r5, #7]
 8017a4a:	4628      	mov	r0, r5
 8017a4c:	f7ff ffc6 	bl	80179dc <MoblePalBluetoothSetBluetoothAddress>
 8017a50:	2801      	cmp	r0, #1
 8017a52:	d812      	bhi.n	8017a7a <MoblePalBluetoothInit+0x4a>
 8017a54:	9b05      	ldr	r3, [sp, #20]
 8017a56:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
 8017a5a:	9b04      	ldr	r3, [sp, #16]
 8017a5c:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 8017a60:	f894 3363 	ldrb.w	r3, [r4, #867]	@ 0x363
 8017a64:	f8c4 636c 	str.w	r6, [r4, #876]	@ 0x36c
 8017a68:	2b01      	cmp	r3, #1
 8017a6a:	bf01      	itttt	eq
 8017a6c:	f8d4 335c 	ldreq.w	r3, [r4, #860]	@ 0x35c
 8017a70:	602b      	streq	r3, [r5, #0]
 8017a72:	f8b4 3360 	ldrheq.w	r3, [r4, #864]	@ 0x360
 8017a76:	80ab      	strheq	r3, [r5, #4]
 8017a78:	2000      	movs	r0, #0
 8017a7a:	bd70      	pop	{r4, r5, r6, pc}
 8017a7c:	2000140c 	.word	0x2000140c

08017a80 <MoblePalBluetoothRandom>:
 8017a80:	b507      	push	{r0, r1, r2, lr}
 8017a82:	4668      	mov	r0, sp
 8017a84:	f7fd fc51 	bl	801532a <hci_le_rand>
 8017a88:	466a      	mov	r2, sp
 8017a8a:	2308      	movs	r3, #8
 8017a8c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8017a90:	b920      	cbnz	r0, 8017a9c <MoblePalBluetoothRandom+0x1c>
 8017a92:	3b01      	subs	r3, #1
 8017a94:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8017a98:	d1f8      	bne.n	8017a8c <MoblePalBluetoothRandom+0xc>
 8017a9a:	e7f2      	b.n	8017a82 <MoblePalBluetoothRandom+0x2>
 8017a9c:	b003      	add	sp, #12
 8017a9e:	f85d fb04 	ldr.w	pc, [sp], #4

08017aa2 <MoblePBADVRandom>:
 8017aa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017aa4:	2400      	movs	r4, #0
 8017aa6:	ad01      	add	r5, sp, #4
 8017aa8:	f7ff ffea 	bl	8017a80 <MoblePalBluetoothRandom>
 8017aac:	3401      	adds	r4, #1
 8017aae:	2c04      	cmp	r4, #4
 8017ab0:	f805 0b01 	strb.w	r0, [r5], #1
 8017ab4:	d1f8      	bne.n	8017aa8 <MoblePBADVRandom+0x6>
 8017ab6:	9801      	ldr	r0, [sp, #4]
 8017ab8:	b003      	add	sp, #12
 8017aba:	bd30      	pop	{r4, r5, pc}

08017abc <MoblePBADVGetNewLink>:
 8017abc:	b570      	push	{r4, r5, r6, lr}
 8017abe:	7a04      	ldrb	r4, [r0, #8]
 8017ac0:	4605      	mov	r5, r0
 8017ac2:	b11c      	cbz	r4, 8017acc <MoblePBADVGetNewLink+0x10>
 8017ac4:	f890 317c 	ldrb.w	r3, [r0, #380]	@ 0x17c
 8017ac8:	bbc3      	cbnz	r3, 8017b3c <MoblePBADVGetNewLink+0x80>
 8017aca:	2401      	movs	r4, #1
 8017acc:	f44f 76ba 	mov.w	r6, #372	@ 0x174
 8017ad0:	fb06 5304 	mla	r3, r6, r4, r5
 8017ad4:	60dd      	str	r5, [r3, #12]
 8017ad6:	f7ff ffe4 	bl	8017aa2 <MoblePBADVRandom>
 8017ada:	2300      	movs	r3, #0
 8017adc:	fb06 5203 	mla	r2, r6, r3, r5
 8017ae0:	7a11      	ldrb	r1, [r2, #8]
 8017ae2:	b131      	cbz	r1, 8017af2 <MoblePBADVGetNewLink+0x36>
 8017ae4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8017ae6:	4282      	cmp	r2, r0
 8017ae8:	d103      	bne.n	8017af2 <MoblePBADVGetNewLink+0x36>
 8017aea:	f7ff ffda 	bl	8017aa2 <MoblePBADVRandom>
 8017aee:	f04f 33ff 	mov.w	r3, #4294967295
 8017af2:	3301      	adds	r3, #1
 8017af4:	2b02      	cmp	r3, #2
 8017af6:	d1f1      	bne.n	8017adc <MoblePBADVGetNewLink+0x20>
 8017af8:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 8017afc:	435c      	muls	r4, r3
 8017afe:	192b      	adds	r3, r5, r4
 8017b00:	f104 0608 	add.w	r6, r4, #8
 8017b04:	2100      	movs	r1, #0
 8017b06:	2201      	movs	r2, #1
 8017b08:	442e      	add	r6, r5
 8017b0a:	f504 74b4 	add.w	r4, r4, #360	@ 0x168
 8017b0e:	6258      	str	r0, [r3, #36]	@ 0x24
 8017b10:	721a      	strb	r2, [r3, #8]
 8017b12:	e9c3 1155 	strd	r1, r1, [r3, #340]	@ 0x154
 8017b16:	e9c3 1157 	strd	r1, r1, [r3, #348]	@ 0x15c
 8017b1a:	f883 1029 	strb.w	r1, [r3, #41]	@ 0x29
 8017b1e:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
 8017b22:	631e      	str	r6, [r3, #48]	@ 0x30
 8017b24:	f883 10c0 	strb.w	r1, [r3, #192]	@ 0xc0
 8017b28:	f8c3 10c4 	str.w	r1, [r3, #196]	@ 0xc4
 8017b2c:	f883 1164 	strb.w	r1, [r3, #356]	@ 0x164
 8017b30:	2210      	movs	r2, #16
 8017b32:	1928      	adds	r0, r5, r4
 8017b34:	f011 fb3a 	bl	80291ac <memset>
 8017b38:	4630      	mov	r0, r6
 8017b3a:	bd70      	pop	{r4, r5, r6, pc}
 8017b3c:	2600      	movs	r6, #0
 8017b3e:	e7fb      	b.n	8017b38 <MoblePBADVGetNewLink+0x7c>

08017b40 <MoblePalBluetoothPrvnCmpltReset>:
 8017b40:	b538      	push	{r3, r4, r5, lr}
 8017b42:	4c13      	ldr	r4, [pc, #76]	@ (8017b90 <MoblePalBluetoothPrvnCmpltReset+0x50>)
 8017b44:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 8017b48:	f013 0f3c 	tst.w	r3, #60	@ 0x3c
 8017b4c:	d014      	beq.n	8017b78 <MoblePalBluetoothPrvnCmpltReset+0x38>
 8017b4e:	f8d4 2350 	ldr.w	r2, [r4, #848]	@ 0x350
 8017b52:	4b10      	ldr	r3, [pc, #64]	@ (8017b94 <MoblePalBluetoothPrvnCmpltReset+0x54>)
 8017b54:	2501      	movs	r5, #1
 8017b56:	429a      	cmp	r2, r3
 8017b58:	f884 5378 	strb.w	r5, [r4, #888]	@ 0x378
 8017b5c:	d80d      	bhi.n	8017b7a <MoblePalBluetoothPrvnCmpltReset+0x3a>
 8017b5e:	f7f0 f95d 	bl	8007e1c <HAL_GetTick>
 8017b62:	f8d4 3350 	ldr.w	r3, [r4, #848]	@ 0x350
 8017b66:	220a      	movs	r2, #10
 8017b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8017b6c:	4403      	add	r3, r0
 8017b6e:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
 8017b72:	4b09      	ldr	r3, [pc, #36]	@ (8017b98 <MoblePalBluetoothPrvnCmpltReset+0x58>)
 8017b74:	2201      	movs	r2, #1
 8017b76:	701a      	strb	r2, [r3, #0]
 8017b78:	bd38      	pop	{r3, r4, r5, pc}
 8017b7a:	f7f0 f94f 	bl	8007e1c <HAL_GetTick>
 8017b7e:	f500 509c 	add.w	r0, r0, #4992	@ 0x1380
 8017b82:	3008      	adds	r0, #8
 8017b84:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8017b88:	f884 5380 	strb.w	r5, [r4, #896]	@ 0x380
 8017b8c:	e7f1      	b.n	8017b72 <MoblePalBluetoothPrvnCmpltReset+0x32>
 8017b8e:	bf00      	nop
 8017b90:	2000140c 	.word	0x2000140c
 8017b94:	0001869f 	.word	0x0001869f
 8017b98:	20004435 	.word	0x20004435

08017b9c <MoblePalBluetoothProcessDisconnection>:
 8017b9c:	b510      	push	{r4, lr}
 8017b9e:	4c0a      	ldr	r4, [pc, #40]	@ (8017bc8 <MoblePalBluetoothProcessDisconnection+0x2c>)
 8017ba0:	f894 3380 	ldrb.w	r3, [r4, #896]	@ 0x380
 8017ba4:	2b01      	cmp	r3, #1
 8017ba6:	d10d      	bne.n	8017bc4 <MoblePalBluetoothProcessDisconnection+0x28>
 8017ba8:	f7f0 f938 	bl	8007e1c <HAL_GetTick>
 8017bac:	f8d4 337c 	ldr.w	r3, [r4, #892]	@ 0x37c
 8017bb0:	4283      	cmp	r3, r0
 8017bb2:	d207      	bcs.n	8017bc4 <MoblePalBluetoothProcessDisconnection+0x28>
 8017bb4:	f8b4 0382 	ldrh.w	r0, [r4, #898]	@ 0x382
 8017bb8:	2116      	movs	r1, #22
 8017bba:	f7fc fa96 	bl	80140ea <aci_gap_terminate>
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	f884 3380 	strb.w	r3, [r4, #896]	@ 0x380
 8017bc4:	bd10      	pop	{r4, pc}
 8017bc6:	bf00      	nop
 8017bc8:	2000140c 	.word	0x2000140c

08017bcc <MoblePalBluetoothNvmSave>:
 8017bcc:	4b44      	ldr	r3, [pc, #272]	@ (8017ce0 <MoblePalBluetoothNvmSave+0x114>)
 8017bce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017bd2:	f8d3 4354 	ldr.w	r4, [r3, #852]	@ 0x354
 8017bd6:	f8c3 0384 	str.w	r0, [r3, #900]	@ 0x384
 8017bda:	f014 0403 	ands.w	r4, r4, #3
 8017bde:	4606      	mov	r6, r0
 8017be0:	460f      	mov	r7, r1
 8017be2:	f8a3 1388 	strh.w	r1, [r3, #904]	@ 0x388
 8017be6:	d178      	bne.n	8017cda <MoblePalBluetoothNvmSave+0x10e>
 8017be8:	4b3e      	ldr	r3, [pc, #248]	@ (8017ce4 <MoblePalBluetoothNvmSave+0x118>)
 8017bea:	691b      	ldr	r3, [r3, #16]
 8017bec:	f413 2980 	ands.w	r9, r3, #262144	@ 0x40000
 8017bf0:	d14e      	bne.n	8017c90 <MoblePalBluetoothNvmSave+0xc4>
 8017bf2:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8017cec <MoblePalBluetoothNvmSave+0x120>
 8017bf6:	f898 4000 	ldrb.w	r4, [r8]
 8017bfa:	2c00      	cmp	r4, #0
 8017bfc:	d048      	beq.n	8017c90 <MoblePalBluetoothNvmSave+0xc4>
 8017bfe:	4d3a      	ldr	r5, [pc, #232]	@ (8017ce8 <MoblePalBluetoothNvmSave+0x11c>)
 8017c00:	464b      	mov	r3, r9
 8017c02:	6828      	ldr	r0, [r5, #0]
 8017c04:	2208      	movs	r2, #8
 8017c06:	4669      	mov	r1, sp
 8017c08:	f7ef fb72 	bl	80072f0 <PalNvmRead>
 8017c0c:	2801      	cmp	r0, #1
 8017c0e:	4604      	mov	r4, r0
 8017c10:	d83e      	bhi.n	8017c90 <MoblePalBluetoothNvmSave+0xc4>
 8017c12:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017c16:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017c1a:	bf08      	it	eq
 8017c1c:	f1b1 3fff 	cmpeq.w	r1, #4294967295
 8017c20:	d019      	beq.n	8017c56 <MoblePalBluetoothNvmSave+0x8a>
 8017c22:	6828      	ldr	r0, [r5, #0]
 8017c24:	464b      	mov	r3, r9
 8017c26:	2208      	movs	r2, #8
 8017c28:	4669      	mov	r1, sp
 8017c2a:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8017c2e:	f7ef fb5f 	bl	80072f0 <PalNvmRead>
 8017c32:	2801      	cmp	r0, #1
 8017c34:	4604      	mov	r4, r0
 8017c36:	d82b      	bhi.n	8017c90 <MoblePalBluetoothNvmSave+0xc4>
 8017c38:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017c3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017c40:	bf08      	it	eq
 8017c42:	f1b1 3fff 	cmpeq.w	r1, #4294967295
 8017c46:	d027      	beq.n	8017c98 <MoblePalBluetoothNvmSave+0xcc>
 8017c48:	6828      	ldr	r0, [r5, #0]
 8017c4a:	2102      	movs	r1, #2
 8017c4c:	f7ef fbf4 	bl	8007438 <PalNvmErase>
 8017c50:	2801      	cmp	r0, #1
 8017c52:	4604      	mov	r4, r0
 8017c54:	d81c      	bhi.n	8017c90 <MoblePalBluetoothNvmSave+0xc4>
 8017c56:	2301      	movs	r3, #1
 8017c58:	f898 2000 	ldrb.w	r2, [r8]
 8017c5c:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8017cf0 <MoblePalBluetoothNvmSave+0x124>
 8017c60:	0791      	lsls	r1, r2, #30
 8017c62:	f889 3000 	strb.w	r3, [r9]
 8017c66:	d526      	bpl.n	8017cb6 <MoblePalBluetoothNvmSave+0xea>
 8017c68:	6828      	ldr	r0, [r5, #0]
 8017c6a:	463a      	mov	r2, r7
 8017c6c:	4631      	mov	r1, r6
 8017c6e:	b9ab      	cbnz	r3, 8017c9c <MoblePalBluetoothNvmSave+0xd0>
 8017c70:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8017c74:	f7ef fbfa 	bl	800746c <PalNvmWrite>
 8017c78:	2801      	cmp	r0, #1
 8017c7a:	4604      	mov	r4, r0
 8017c7c:	d808      	bhi.n	8017c90 <MoblePalBluetoothNvmSave+0xc4>
 8017c7e:	2101      	movs	r1, #1
 8017c80:	6828      	ldr	r0, [r5, #0]
 8017c82:	f889 1000 	strb.w	r1, [r9]
 8017c86:	f7ef fbd7 	bl	8007438 <PalNvmErase>
 8017c8a:	2801      	cmp	r0, #1
 8017c8c:	4604      	mov	r4, r0
 8017c8e:	d91b      	bls.n	8017cc8 <MoblePalBluetoothNvmSave+0xfc>
 8017c90:	4620      	mov	r0, r4
 8017c92:	b003      	add	sp, #12
 8017c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c98:	464b      	mov	r3, r9
 8017c9a:	e7dd      	b.n	8017c58 <MoblePalBluetoothNvmSave+0x8c>
 8017c9c:	f7ef fbe6 	bl	800746c <PalNvmWrite>
 8017ca0:	2801      	cmp	r0, #1
 8017ca2:	4604      	mov	r4, r0
 8017ca4:	d8f4      	bhi.n	8017c90 <MoblePalBluetoothNvmSave+0xc4>
 8017ca6:	6828      	ldr	r0, [r5, #0]
 8017ca8:	2300      	movs	r3, #0
 8017caa:	f889 3000 	strb.w	r3, [r9]
 8017cae:	2101      	movs	r1, #1
 8017cb0:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8017cb4:	e7e7      	b.n	8017c86 <MoblePalBluetoothNvmSave+0xba>
 8017cb6:	07d2      	lsls	r2, r2, #31
 8017cb8:	d506      	bpl.n	8017cc8 <MoblePalBluetoothNvmSave+0xfc>
 8017cba:	6828      	ldr	r0, [r5, #0]
 8017cbc:	2101      	movs	r1, #1
 8017cbe:	b93b      	cbnz	r3, 8017cd0 <MoblePalBluetoothNvmSave+0x104>
 8017cc0:	f7ef fbba 	bl	8007438 <PalNvmErase>
 8017cc4:	2801      	cmp	r0, #1
 8017cc6:	d806      	bhi.n	8017cd6 <MoblePalBluetoothNvmSave+0x10a>
 8017cc8:	2300      	movs	r3, #0
 8017cca:	f888 3000 	strb.w	r3, [r8]
 8017cce:	e7df      	b.n	8017c90 <MoblePalBluetoothNvmSave+0xc4>
 8017cd0:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8017cd4:	e7f4      	b.n	8017cc0 <MoblePalBluetoothNvmSave+0xf4>
 8017cd6:	4604      	mov	r4, r0
 8017cd8:	e7da      	b.n	8017c90 <MoblePalBluetoothNvmSave+0xc4>
 8017cda:	2400      	movs	r4, #0
 8017cdc:	e7d8      	b.n	8017c90 <MoblePalBluetoothNvmSave+0xc4>
 8017cde:	bf00      	nop
 8017ce0:	2000140c 	.word	0x2000140c
 8017ce4:	58004000 	.word	0x58004000
 8017ce8:	20004444 	.word	0x20004444
 8017cec:	20004433 	.word	0x20004433
 8017cf0:	20004434 	.word	0x20004434

08017cf4 <MoblePalBluetoothModeStopAdv>:
 8017cf4:	b510      	push	{r4, lr}
 8017cf6:	4c09      	ldr	r4, [pc, #36]	@ (8017d1c <MoblePalBluetoothModeStopAdv+0x28>)
 8017cf8:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 8017cfc:	07db      	lsls	r3, r3, #31
 8017cfe:	d509      	bpl.n	8017d14 <MoblePalBluetoothModeStopAdv+0x20>
 8017d00:	f7fc f828 	bl	8013d54 <aci_gap_set_non_discoverable>
 8017d04:	b940      	cbnz	r0, 8017d18 <MoblePalBluetoothModeStopAdv+0x24>
 8017d06:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 8017d0a:	f083 0301 	eor.w	r3, r3, #1
 8017d0e:	f8c4 3354 	str.w	r3, [r4, #852]	@ 0x354
 8017d12:	bd10      	pop	{r4, pc}
 8017d14:	2001      	movs	r0, #1
 8017d16:	e7fc      	b.n	8017d12 <MoblePalBluetoothModeStopAdv+0x1e>
 8017d18:	2002      	movs	r0, #2
 8017d1a:	e7fa      	b.n	8017d12 <MoblePalBluetoothModeStopAdv+0x1e>
 8017d1c:	2000140c 	.word	0x2000140c

08017d20 <MoblePalBluetoothModeStartAdv>:
 8017d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d24:	4680      	mov	r8, r0
 8017d26:	b088      	sub	sp, #32
 8017d28:	4616      	mov	r6, r2
 8017d2a:	461c      	mov	r4, r3
 8017d2c:	460f      	mov	r7, r1
 8017d2e:	b931      	cbnz	r1, 8017d3e <MoblePalBluetoothModeStartAdv+0x1e>
 8017d30:	4b31      	ldr	r3, [pc, #196]	@ (8017df8 <MoblePalBluetoothModeStartAdv+0xd8>)
 8017d32:	4a32      	ldr	r2, [pc, #200]	@ (8017dfc <MoblePalBluetoothModeStartAdv+0xdc>)
 8017d34:	f240 61df 	movw	r1, #1759	@ 0x6df
 8017d38:	4831      	ldr	r0, [pc, #196]	@ (8017e00 <MoblePalBluetoothModeStartAdv+0xe0>)
 8017d3a:	f010 fb4f 	bl	80283dc <__assert_func>
 8017d3e:	b922      	cbnz	r2, 8017d4a <MoblePalBluetoothModeStartAdv+0x2a>
 8017d40:	4b30      	ldr	r3, [pc, #192]	@ (8017e04 <MoblePalBluetoothModeStartAdv+0xe4>)
 8017d42:	4a2e      	ldr	r2, [pc, #184]	@ (8017dfc <MoblePalBluetoothModeStartAdv+0xdc>)
 8017d44:	f44f 61dc 	mov.w	r1, #1760	@ 0x6e0
 8017d48:	e7f6      	b.n	8017d38 <MoblePalBluetoothModeStartAdv+0x18>
 8017d4a:	4d2f      	ldr	r5, [pc, #188]	@ (8017e08 <MoblePalBluetoothModeStartAdv+0xe8>)
 8017d4c:	f8d5 3354 	ldr.w	r3, [r5, #852]	@ 0x354
 8017d50:	079a      	lsls	r2, r3, #30
 8017d52:	d504      	bpl.n	8017d5e <MoblePalBluetoothModeStartAdv+0x3e>
 8017d54:	2402      	movs	r4, #2
 8017d56:	4620      	mov	r0, r4
 8017d58:	b008      	add	sp, #32
 8017d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d5e:	07db      	lsls	r3, r3, #31
 8017d60:	d509      	bpl.n	8017d76 <MoblePalBluetoothModeStartAdv+0x56>
 8017d62:	f7fb fff7 	bl	8013d54 <aci_gap_set_non_discoverable>
 8017d66:	2800      	cmp	r0, #0
 8017d68:	d1f4      	bne.n	8017d54 <MoblePalBluetoothModeStartAdv+0x34>
 8017d6a:	f8d5 3354 	ldr.w	r3, [r5, #852]	@ 0x354
 8017d6e:	f083 0301 	eor.w	r3, r3, #1
 8017d72:	f8c5 3354 	str.w	r3, [r5, #852]	@ 0x354
 8017d76:	2e1f      	cmp	r6, #31
 8017d78:	d83c      	bhi.n	8017df4 <MoblePalBluetoothModeStartAdv+0xd4>
 8017d7a:	f1a4 020a 	sub.w	r2, r4, #10
 8017d7e:	f242 73f6 	movw	r3, #10230	@ 0x27f6
 8017d82:	429a      	cmp	r2, r3
 8017d84:	d836      	bhi.n	8017df4 <MoblePalBluetoothModeStartAdv+0xd4>
 8017d86:	f895 3363 	ldrb.w	r3, [r5, #867]	@ 0x363
 8017d8a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017d8e:	f1b8 0f01 	cmp.w	r8, #1
 8017d92:	e9cd 1105 	strd	r1, r1, [sp, #20]
 8017d96:	f103 31ff 	add.w	r1, r3, #4294967295
 8017d9a:	bf0c      	ite	eq
 8017d9c:	2000      	moveq	r0, #0
 8017d9e:	2003      	movne	r0, #3
 8017da0:	2205      	movs	r2, #5
 8017da2:	424b      	negs	r3, r1
 8017da4:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8017da8:	fbb4 f4f2 	udiv	r4, r4, r2
 8017dac:	b2a2      	uxth	r2, r4
 8017dae:	f04f 0400 	mov.w	r4, #0
 8017db2:	414b      	adcs	r3, r1
 8017db4:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8017db8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8017dbc:	9400      	str	r4, [sp, #0]
 8017dbe:	4611      	mov	r1, r2
 8017dc0:	f7fb ffec 	bl	8013d9c <aci_gap_set_discoverable>
 8017dc4:	2800      	cmp	r0, #0
 8017dc6:	d1c5      	bne.n	8017d54 <MoblePalBluetoothModeStartAdv+0x34>
 8017dc8:	4639      	mov	r1, r7
 8017dca:	4630      	mov	r0, r6
 8017dcc:	f7fd f9db 	bl	8015186 <hci_le_set_advertising_data>
 8017dd0:	4604      	mov	r4, r0
 8017dd2:	2800      	cmp	r0, #0
 8017dd4:	d1be      	bne.n	8017d54 <MoblePalBluetoothModeStartAdv+0x34>
 8017dd6:	f895 0364 	ldrb.w	r0, [r5, #868]	@ 0x364
 8017dda:	f8d5 1368 	ldr.w	r1, [r5, #872]	@ 0x368
 8017dde:	3002      	adds	r0, #2
 8017de0:	b2c0      	uxtb	r0, r0
 8017de2:	f7fd fa39 	bl	8015258 <hci_le_set_scan_response_data>
 8017de6:	f8d5 3354 	ldr.w	r3, [r5, #852]	@ 0x354
 8017dea:	f043 0301 	orr.w	r3, r3, #1
 8017dee:	f8c5 3354 	str.w	r3, [r5, #852]	@ 0x354
 8017df2:	e7b0      	b.n	8017d56 <MoblePalBluetoothModeStartAdv+0x36>
 8017df4:	2403      	movs	r4, #3
 8017df6:	e7ae      	b.n	8017d56 <MoblePalBluetoothModeStartAdv+0x36>
 8017df8:	08030f20 	.word	0x08030f20
 8017dfc:	0802f1ab 	.word	0x0802f1ab
 8017e00:	08030f25 	.word	0x08030f25
 8017e04:	08030f6c 	.word	0x08030f6c
 8017e08:	2000140c 	.word	0x2000140c

08017e0c <MoblePalBluetoothModeStopScan>:
 8017e0c:	b510      	push	{r4, lr}
 8017e0e:	4c0e      	ldr	r4, [pc, #56]	@ (8017e48 <MoblePalBluetoothModeStopScan+0x3c>)
 8017e10:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 8017e14:	079b      	lsls	r3, r3, #30
 8017e16:	d401      	bmi.n	8017e1c <MoblePalBluetoothModeStopScan+0x10>
 8017e18:	2001      	movs	r0, #1
 8017e1a:	bd10      	pop	{r4, pc}
 8017e1c:	2080      	movs	r0, #128	@ 0x80
 8017e1e:	f7fc f9ce 	bl	80141be <aci_gap_terminate_gap_proc>
 8017e22:	2800      	cmp	r0, #0
 8017e24:	d1f8      	bne.n	8017e18 <MoblePalBluetoothModeStopScan+0xc>
 8017e26:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 8017e2a:	f8b4 1388 	ldrh.w	r1, [r4, #904]	@ 0x388
 8017e2e:	f8d4 0384 	ldr.w	r0, [r4, #900]	@ 0x384
 8017e32:	f083 0302 	eor.w	r3, r3, #2
 8017e36:	f8c4 3354 	str.w	r3, [r4, #852]	@ 0x354
 8017e3a:	f7ff fec7 	bl	8017bcc <MoblePalBluetoothNvmSave>
 8017e3e:	2801      	cmp	r0, #1
 8017e40:	bf98      	it	ls
 8017e42:	2000      	movls	r0, #0
 8017e44:	e7e9      	b.n	8017e1a <MoblePalBluetoothModeStopScan+0xe>
 8017e46:	bf00      	nop
 8017e48:	2000140c 	.word	0x2000140c

08017e4c <MoblePalBluetoothModeStartScan>:
 8017e4c:	f1a1 020a 	sub.w	r2, r1, #10
 8017e50:	f242 73f6 	movw	r3, #10230	@ 0x27f6
 8017e54:	429a      	cmp	r2, r3
 8017e56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017e58:	d822      	bhi.n	8017ea0 <MoblePalBluetoothModeStartScan+0x54>
 8017e5a:	4281      	cmp	r1, r0
 8017e5c:	d320      	bcc.n	8017ea0 <MoblePalBluetoothModeStartScan+0x54>
 8017e5e:	4d13      	ldr	r5, [pc, #76]	@ (8017eac <MoblePalBluetoothModeStartScan+0x60>)
 8017e60:	f8d5 2354 	ldr.w	r2, [r5, #852]	@ 0x354
 8017e64:	f012 0202 	ands.w	r2, r2, #2
 8017e68:	d11c      	bne.n	8017ea4 <MoblePalBluetoothModeStartScan+0x58>
 8017e6a:	f895 3363 	ldrb.w	r3, [r5, #867]	@ 0x363
 8017e6e:	00c0      	lsls	r0, r0, #3
 8017e70:	2605      	movs	r6, #5
 8017e72:	fbb0 f4f6 	udiv	r4, r0, r6
 8017e76:	00c8      	lsls	r0, r1, #3
 8017e78:	1e59      	subs	r1, r3, #1
 8017e7a:	424b      	negs	r3, r1
 8017e7c:	414b      	adcs	r3, r1
 8017e7e:	fbb0 f0f6 	udiv	r0, r0, r6
 8017e82:	e9cd 2200 	strd	r2, r2, [sp]
 8017e86:	b2a1      	uxth	r1, r4
 8017e88:	b280      	uxth	r0, r0
 8017e8a:	f7fc f9ec 	bl	8014266 <aci_gap_start_observation_proc>
 8017e8e:	b958      	cbnz	r0, 8017ea8 <MoblePalBluetoothModeStartScan+0x5c>
 8017e90:	f8d5 3354 	ldr.w	r3, [r5, #852]	@ 0x354
 8017e94:	f043 0302 	orr.w	r3, r3, #2
 8017e98:	f8c5 3354 	str.w	r3, [r5, #852]	@ 0x354
 8017e9c:	b002      	add	sp, #8
 8017e9e:	bd70      	pop	{r4, r5, r6, pc}
 8017ea0:	2003      	movs	r0, #3
 8017ea2:	e7fb      	b.n	8017e9c <MoblePalBluetoothModeStartScan+0x50>
 8017ea4:	2001      	movs	r0, #1
 8017ea6:	e7f9      	b.n	8017e9c <MoblePalBluetoothModeStartScan+0x50>
 8017ea8:	2002      	movs	r0, #2
 8017eaa:	e7f7      	b.n	8017e9c <MoblePalBluetoothModeStartScan+0x50>
 8017eac:	2000140c 	.word	0x2000140c

08017eb0 <BPKA_ReadP256Key>:
 8017eb0:	4601      	mov	r1, r0
 8017eb2:	480b      	ldr	r0, [pc, #44]	@ (8017ee0 <BPKA_ReadP256Key+0x30>)
 8017eb4:	b538      	push	{r3, r4, r5, lr}
 8017eb6:	f7ff fa9f 	bl	80173f8 <BPKA_Reverse>
 8017eba:	3020      	adds	r0, #32
 8017ebc:	f7ff fa9c 	bl	80173f8 <BPKA_Reverse>
 8017ec0:	f1a0 0420 	sub.w	r4, r0, #32
 8017ec4:	460b      	mov	r3, r1
 8017ec6:	f100 0520 	add.w	r5, r0, #32
 8017eca:	4622      	mov	r2, r4
 8017ecc:	ca03      	ldmia	r2!, {r0, r1}
 8017ece:	42aa      	cmp	r2, r5
 8017ed0:	6018      	str	r0, [r3, #0]
 8017ed2:	6059      	str	r1, [r3, #4]
 8017ed4:	4614      	mov	r4, r2
 8017ed6:	f103 0308 	add.w	r3, r3, #8
 8017eda:	d1f6      	bne.n	8017eca <BPKA_ReadP256Key+0x1a>
 8017edc:	bd38      	pop	{r3, r4, r5, pc}
 8017ede:	bf00      	nop
 8017ee0:	20001798 	.word	0x20001798

08017ee4 <BPKA_ReadDhKey>:
 8017ee4:	b538      	push	{r3, r4, r5, lr}
 8017ee6:	4c0f      	ldr	r4, [pc, #60]	@ (8017f24 <BPKA_ReadDhKey+0x40>)
 8017ee8:	f894 33ec 	ldrb.w	r3, [r4, #1004]	@ 0x3ec
 8017eec:	4601      	mov	r1, r0
 8017eee:	b133      	cbz	r3, 8017efe <BPKA_ReadDhKey+0x1a>
 8017ef0:	2220      	movs	r2, #32
 8017ef2:	21ff      	movs	r1, #255	@ 0xff
 8017ef4:	f011 f95a 	bl	80291ac <memset>
 8017ef8:	f06f 0002 	mvn.w	r0, #2
 8017efc:	bd38      	pop	{r3, r4, r5, pc}
 8017efe:	f504 7063 	add.w	r0, r4, #908	@ 0x38c
 8017f02:	f7ff fa79 	bl	80173f8 <BPKA_Reverse>
 8017f06:	4605      	mov	r5, r0
 8017f08:	460b      	mov	r3, r1
 8017f0a:	f504 746b 	add.w	r4, r4, #940	@ 0x3ac
 8017f0e:	462a      	mov	r2, r5
 8017f10:	ca03      	ldmia	r2!, {r0, r1}
 8017f12:	42a2      	cmp	r2, r4
 8017f14:	6018      	str	r0, [r3, #0]
 8017f16:	6059      	str	r1, [r3, #4]
 8017f18:	4615      	mov	r5, r2
 8017f1a:	f103 0308 	add.w	r3, r3, #8
 8017f1e:	d1f6      	bne.n	8017f0e <BPKA_ReadDhKey+0x2a>
 8017f20:	2000      	movs	r0, #0
 8017f22:	e7eb      	b.n	8017efc <BPKA_ReadDhKey+0x18>
 8017f24:	2000140c 	.word	0x2000140c

08017f28 <HW_AES_Enable>:
 8017f28:	4b0d      	ldr	r3, [pc, #52]	@ (8017f60 <HW_AES_Enable+0x38>)
 8017f2a:	f893 23ed 	ldrb.w	r2, [r3, #1005]	@ 0x3ed
 8017f2e:	b082      	sub	sp, #8
 8017f30:	b9a2      	cbnz	r2, 8017f5c <HW_AES_Enable+0x34>
 8017f32:	2001      	movs	r0, #1
 8017f34:	f883 03ed 	strb.w	r0, [r3, #1005]	@ 0x3ed
 8017f38:	f3ef 8110 	mrs	r1, PRIMASK
 8017f3c:	b672      	cpsid	i
 8017f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017f42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017f44:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8017f48:	64da      	str	r2, [r3, #76]	@ 0x4c
 8017f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8017f50:	9301      	str	r3, [sp, #4]
 8017f52:	9b01      	ldr	r3, [sp, #4]
 8017f54:	f381 8810 	msr	PRIMASK, r1
 8017f58:	b002      	add	sp, #8
 8017f5a:	4770      	bx	lr
 8017f5c:	2000      	movs	r0, #0
 8017f5e:	e7fb      	b.n	8017f58 <HW_AES_Enable+0x30>
 8017f60:	2000140c 	.word	0x2000140c

08017f64 <HW_AES_Disable>:
 8017f64:	b510      	push	{r4, lr}
 8017f66:	4a0a      	ldr	r2, [pc, #40]	@ (8017f90 <HW_AES_Disable+0x2c>)
 8017f68:	f892 33ed 	ldrb.w	r3, [r2, #1005]	@ 0x3ed
 8017f6c:	b17b      	cbz	r3, 8017f8e <HW_AES_Disable+0x2a>
 8017f6e:	4b09      	ldr	r3, [pc, #36]	@ (8017f94 <HW_AES_Disable+0x30>)
 8017f70:	2100      	movs	r1, #0
 8017f72:	6019      	str	r1, [r3, #0]
 8017f74:	f3ef 8410 	mrs	r4, PRIMASK
 8017f78:	b672      	cpsid	i
 8017f7a:	f04f 40b0 	mov.w	r0, #1476395008	@ 0x58000000
 8017f7e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8017f80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8017f84:	64c3      	str	r3, [r0, #76]	@ 0x4c
 8017f86:	f384 8810 	msr	PRIMASK, r4
 8017f8a:	f882 13ed 	strb.w	r1, [r2, #1005]	@ 0x3ed
 8017f8e:	bd10      	pop	{r4, pc}
 8017f90:	2000140c 	.word	0x2000140c
 8017f94:	50060000 	.word	0x50060000

08017f98 <HW_AES_SetKey>:
 8017f98:	b530      	push	{r4, r5, lr}
 8017f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8017fd8 <HW_AES_SetKey+0x40>)
 8017f9c:	b085      	sub	sp, #20
 8017f9e:	2200      	movs	r2, #0
 8017fa0:	601a      	str	r2, [r3, #0]
 8017fa2:	466c      	mov	r4, sp
 8017fa4:	4603      	mov	r3, r0
 8017fa6:	f100 0510 	add.w	r5, r0, #16
 8017faa:	6818      	ldr	r0, [r3, #0]
 8017fac:	6859      	ldr	r1, [r3, #4]
 8017fae:	4622      	mov	r2, r4
 8017fb0:	c203      	stmia	r2!, {r0, r1}
 8017fb2:	3308      	adds	r3, #8
 8017fb4:	42ab      	cmp	r3, r5
 8017fb6:	4614      	mov	r4, r2
 8017fb8:	d1f7      	bne.n	8017faa <HW_AES_SetKey+0x12>
 8017fba:	9b00      	ldr	r3, [sp, #0]
 8017fbc:	ba1a      	rev	r2, r3
 8017fbe:	4b06      	ldr	r3, [pc, #24]	@ (8017fd8 <HW_AES_SetKey+0x40>)
 8017fc0:	61da      	str	r2, [r3, #28]
 8017fc2:	9a01      	ldr	r2, [sp, #4]
 8017fc4:	ba12      	rev	r2, r2
 8017fc6:	619a      	str	r2, [r3, #24]
 8017fc8:	9a02      	ldr	r2, [sp, #8]
 8017fca:	ba12      	rev	r2, r2
 8017fcc:	615a      	str	r2, [r3, #20]
 8017fce:	9a03      	ldr	r2, [sp, #12]
 8017fd0:	ba12      	rev	r2, r2
 8017fd2:	611a      	str	r2, [r3, #16]
 8017fd4:	b005      	add	sp, #20
 8017fd6:	bd30      	pop	{r4, r5, pc}
 8017fd8:	50060000 	.word	0x50060000

08017fdc <HW_AES_Crypt>:
 8017fdc:	b508      	push	{r3, lr}
 8017fde:	f7ff f92b 	bl	8017238 <HW_AES_Input>
 8017fe2:	f7ff f91d 	bl	8017220 <HW_AES_WaitComplete>
 8017fe6:	4b05      	ldr	r3, [pc, #20]	@ (8017ffc <HW_AES_Crypt+0x20>)
 8017fe8:	68da      	ldr	r2, [r3, #12]
 8017fea:	600a      	str	r2, [r1, #0]
 8017fec:	68da      	ldr	r2, [r3, #12]
 8017fee:	604a      	str	r2, [r1, #4]
 8017ff0:	68da      	ldr	r2, [r3, #12]
 8017ff2:	608a      	str	r2, [r1, #8]
 8017ff4:	68db      	ldr	r3, [r3, #12]
 8017ff6:	60cb      	str	r3, [r1, #12]
 8017ff8:	bd08      	pop	{r3, pc}
 8017ffa:	bf00      	nop
 8017ffc:	50060000 	.word	0x50060000

08018000 <BAES_CmacCompute>:
 8018000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018004:	460d      	mov	r5, r1
 8018006:	b089      	sub	sp, #36	@ 0x24
 8018008:	4614      	mov	r4, r2
 801800a:	461e      	mov	r6, r3
 801800c:	4607      	mov	r7, r0
 801800e:	b168      	cbz	r0, 801802c <BAES_CmacCompute+0x2c>
 8018010:	f7ff ff8a 	bl	8017f28 <HW_AES_Enable>
 8018014:	4638      	mov	r0, r7
 8018016:	f7ff ffbf 	bl	8017f98 <HW_AES_SetKey>
 801801a:	4b5d      	ldr	r3, [pc, #372]	@ (8018190 <BAES_CmacCompute+0x190>)
 801801c:	2201      	movs	r2, #1
 801801e:	601a      	str	r2, [r3, #0]
 8018020:	4b5c      	ldr	r3, [pc, #368]	@ (8018194 <BAES_CmacCompute+0x194>)
 8018022:	2200      	movs	r2, #0
 8018024:	e9c3 22fe 	strd	r2, r2, [r3, #1016]	@ 0x3f8
 8018028:	e9c3 22fc 	strd	r2, r2, [r3, #1008]	@ 0x3f0
 801802c:	2e00      	cmp	r6, #0
 801802e:	f000 8099 	beq.w	8018164 <BAES_CmacCompute+0x164>
 8018032:	f004 070f 	and.w	r7, r4, #15
 8018036:	b114      	cbz	r4, 801803e <BAES_CmacCompute+0x3e>
 8018038:	2f00      	cmp	r7, #0
 801803a:	bf08      	it	eq
 801803c:	2710      	moveq	r7, #16
 801803e:	1be4      	subs	r4, r4, r7
 8018040:	f8df 8150 	ldr.w	r8, [pc, #336]	@ 8018194 <BAES_CmacCompute+0x194>
 8018044:	442c      	add	r4, r5
 8018046:	f508 797c 	add.w	r9, r8, #1008	@ 0x3f0
 801804a:	e026      	b.n	801809a <BAES_CmacCompute+0x9a>
 801804c:	466a      	mov	r2, sp
 801804e:	f105 0c10 	add.w	ip, r5, #16
 8018052:	6828      	ldr	r0, [r5, #0]
 8018054:	6869      	ldr	r1, [r5, #4]
 8018056:	4613      	mov	r3, r2
 8018058:	c303      	stmia	r3!, {r0, r1}
 801805a:	3508      	adds	r5, #8
 801805c:	4565      	cmp	r5, ip
 801805e:	461a      	mov	r2, r3
 8018060:	d1f7      	bne.n	8018052 <BAES_CmacCompute+0x52>
 8018062:	9b00      	ldr	r3, [sp, #0]
 8018064:	ba1a      	rev	r2, r3
 8018066:	f8d8 33f0 	ldr.w	r3, [r8, #1008]	@ 0x3f0
 801806a:	4053      	eors	r3, r2
 801806c:	9300      	str	r3, [sp, #0]
 801806e:	9b01      	ldr	r3, [sp, #4]
 8018070:	ba1a      	rev	r2, r3
 8018072:	f8d8 33f4 	ldr.w	r3, [r8, #1012]	@ 0x3f4
 8018076:	4053      	eors	r3, r2
 8018078:	9301      	str	r3, [sp, #4]
 801807a:	9b02      	ldr	r3, [sp, #8]
 801807c:	ba1a      	rev	r2, r3
 801807e:	f8d8 33f8 	ldr.w	r3, [r8, #1016]	@ 0x3f8
 8018082:	4053      	eors	r3, r2
 8018084:	9302      	str	r3, [sp, #8]
 8018086:	9b03      	ldr	r3, [sp, #12]
 8018088:	ba1a      	rev	r2, r3
 801808a:	f8d8 33fc 	ldr.w	r3, [r8, #1020]	@ 0x3fc
 801808e:	4649      	mov	r1, r9
 8018090:	4053      	eors	r3, r2
 8018092:	4668      	mov	r0, sp
 8018094:	9303      	str	r3, [sp, #12]
 8018096:	f7ff ffa1 	bl	8017fdc <HW_AES_Crypt>
 801809a:	42a5      	cmp	r5, r4
 801809c:	d1d6      	bne.n	801804c <BAES_CmacCompute+0x4c>
 801809e:	2e00      	cmp	r6, #0
 80180a0:	d05d      	beq.n	801815e <BAES_CmacCompute+0x15e>
 80180a2:	2400      	movs	r4, #0
 80180a4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80180a8:	e9cd 4400 	strd	r4, r4, [sp]
 80180ac:	42bc      	cmp	r4, r7
 80180ae:	d15b      	bne.n	8018168 <BAES_CmacCompute+0x168>
 80180b0:	ad04      	add	r5, sp, #16
 80180b2:	2300      	movs	r3, #0
 80180b4:	4629      	mov	r1, r5
 80180b6:	4628      	mov	r0, r5
 80180b8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80180bc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80180c0:	f7ff ff8c 	bl	8017fdc <HW_AES_Crypt>
 80180c4:	f7ff f894 	bl	80171f0 <BAES_CmacKeyRoll>
 80180c8:	2c10      	cmp	r4, #16
 80180ca:	d012      	beq.n	80180f2 <BAES_CmacCompute+0xf2>
 80180cc:	f024 0203 	bic.w	r2, r4, #3
 80180d0:	f102 0320 	add.w	r3, r2, #32
 80180d4:	eb0d 0203 	add.w	r2, sp, r3
 80180d8:	43e4      	mvns	r4, r4
 80180da:	f004 0403 	and.w	r4, r4, #3
 80180de:	f852 1c20 	ldr.w	r1, [r2, #-32]
 80180e2:	00e4      	lsls	r4, r4, #3
 80180e4:	2380      	movs	r3, #128	@ 0x80
 80180e6:	40a3      	lsls	r3, r4
 80180e8:	430b      	orrs	r3, r1
 80180ea:	f842 3c20 	str.w	r3, [r2, #-32]
 80180ee:	f7ff f87f 	bl	80171f0 <BAES_CmacKeyRoll>
 80180f2:	466a      	mov	r2, sp
 80180f4:	4f28      	ldr	r7, [pc, #160]	@ (8018198 <BAES_CmacCompute+0x198>)
 80180f6:	4628      	mov	r0, r5
 80180f8:	f04f 0e04 	mov.w	lr, #4
 80180fc:	4614      	mov	r4, r2
 80180fe:	6811      	ldr	r1, [r2, #0]
 8018100:	f857 3b04 	ldr.w	r3, [r7], #4
 8018104:	f850 cb04 	ldr.w	ip, [r0], #4
 8018108:	404b      	eors	r3, r1
 801810a:	ea83 030c 	eor.w	r3, r3, ip
 801810e:	f1be 0e01 	subs.w	lr, lr, #1
 8018112:	f842 3b04 	str.w	r3, [r2], #4
 8018116:	d1f2      	bne.n	80180fe <BAES_CmacCompute+0xfe>
 8018118:	4f1e      	ldr	r7, [pc, #120]	@ (8018194 <BAES_CmacCompute+0x194>)
 801811a:	4620      	mov	r0, r4
 801811c:	f507 717c 	add.w	r1, r7, #1008	@ 0x3f0
 8018120:	f7ff ff5c 	bl	8017fdc <HW_AES_Crypt>
 8018124:	f7ff ff1e 	bl	8017f64 <HW_AES_Disable>
 8018128:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 801812c:	ba1b      	rev	r3, r3
 801812e:	9300      	str	r3, [sp, #0]
 8018130:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	@ 0x3f4
 8018134:	ba1b      	rev	r3, r3
 8018136:	9301      	str	r3, [sp, #4]
 8018138:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 801813c:	ba1b      	rev	r3, r3
 801813e:	9302      	str	r3, [sp, #8]
 8018140:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	@ 0x3fc
 8018144:	ba1b      	rev	r3, r3
 8018146:	9303      	str	r3, [sp, #12]
 8018148:	4622      	mov	r2, r4
 801814a:	4633      	mov	r3, r6
 801814c:	4614      	mov	r4, r2
 801814e:	cc03      	ldmia	r4!, {r0, r1}
 8018150:	42ac      	cmp	r4, r5
 8018152:	6018      	str	r0, [r3, #0]
 8018154:	6059      	str	r1, [r3, #4]
 8018156:	4622      	mov	r2, r4
 8018158:	f103 0308 	add.w	r3, r3, #8
 801815c:	d1f6      	bne.n	801814c <BAES_CmacCompute+0x14c>
 801815e:	b009      	add	sp, #36	@ 0x24
 8018160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018164:	4637      	mov	r7, r6
 8018166:	e76b      	b.n	8018040 <BAES_CmacCompute+0x40>
 8018168:	f024 0103 	bic.w	r1, r4, #3
 801816c:	f101 0320 	add.w	r3, r1, #32
 8018170:	43e2      	mvns	r2, r4
 8018172:	eb0d 0103 	add.w	r1, sp, r3
 8018176:	f002 0203 	and.w	r2, r2, #3
 801817a:	5d2b      	ldrb	r3, [r5, r4]
 801817c:	00d2      	lsls	r2, r2, #3
 801817e:	4093      	lsls	r3, r2
 8018180:	f851 2c20 	ldr.w	r2, [r1, #-32]
 8018184:	4313      	orrs	r3, r2
 8018186:	f841 3c20 	str.w	r3, [r1, #-32]
 801818a:	3401      	adds	r4, #1
 801818c:	e78e      	b.n	80180ac <BAES_CmacCompute+0xac>
 801818e:	bf00      	nop
 8018190:	50060000 	.word	0x50060000
 8018194:	2000140c 	.word	0x2000140c
 8018198:	200017fc 	.word	0x200017fc

0801819c <MoblePalCryptoK1.part.0>:
 801819c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801819e:	4616      	mov	r6, r2
 80181a0:	b089      	sub	sp, #36	@ 0x24
 80181a2:	2210      	movs	r2, #16
 80181a4:	461f      	mov	r7, r3
 80181a6:	4604      	mov	r4, r0
 80181a8:	460d      	mov	r5, r1
 80181aa:	eb0d 0002 	add.w	r0, sp, r2
 80181ae:	2100      	movs	r1, #0
 80181b0:	f010 fffc 	bl	80291ac <memset>
 80181b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80181b6:	4639      	mov	r1, r7
 80181b8:	a804      	add	r0, sp, #16
 80181ba:	f011 f888 	bl	80292ce <memcpy>
 80181be:	466b      	mov	r3, sp
 80181c0:	4632      	mov	r2, r6
 80181c2:	4629      	mov	r1, r5
 80181c4:	a804      	add	r0, sp, #16
 80181c6:	f7ff ff1b 	bl	8018000 <BAES_CmacCompute>
 80181ca:	4668      	mov	r0, sp
 80181cc:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	@ 0x3c
 80181d0:	4623      	mov	r3, r4
 80181d2:	f7ff ff15 	bl	8018000 <BAES_CmacCompute>
 80181d6:	2000      	movs	r0, #0
 80181d8:	b009      	add	sp, #36	@ 0x24
 80181da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080181dc <BAES_EcbEncrypt>:
 80181dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80181de:	4606      	mov	r6, r0
 80181e0:	460c      	mov	r4, r1
 80181e2:	4615      	mov	r5, r2
 80181e4:	f7ff fea0 	bl	8017f28 <HW_AES_Enable>
 80181e8:	4630      	mov	r0, r6
 80181ea:	f7ff fed5 	bl	8017f98 <HW_AES_SetKey>
 80181ee:	4b11      	ldr	r3, [pc, #68]	@ (8018234 <BAES_EcbEncrypt+0x58>)
 80181f0:	2205      	movs	r2, #5
 80181f2:	601a      	str	r2, [r3, #0]
 80181f4:	4623      	mov	r3, r4
 80181f6:	f103 0610 	add.w	r6, r3, #16
 80181fa:	466c      	mov	r4, sp
 80181fc:	6818      	ldr	r0, [r3, #0]
 80181fe:	6859      	ldr	r1, [r3, #4]
 8018200:	4622      	mov	r2, r4
 8018202:	c203      	stmia	r2!, {r0, r1}
 8018204:	3308      	adds	r3, #8
 8018206:	42b3      	cmp	r3, r6
 8018208:	4614      	mov	r4, r2
 801820a:	d1f7      	bne.n	80181fc <BAES_EcbEncrypt+0x20>
 801820c:	4669      	mov	r1, sp
 801820e:	4668      	mov	r0, sp
 8018210:	f7ff fee4 	bl	8017fdc <HW_AES_Crypt>
 8018214:	f7ff fea6 	bl	8017f64 <HW_AES_Disable>
 8018218:	462a      	mov	r2, r5
 801821a:	466b      	mov	r3, sp
 801821c:	ad04      	add	r5, sp, #16
 801821e:	461c      	mov	r4, r3
 8018220:	cc03      	ldmia	r4!, {r0, r1}
 8018222:	42ac      	cmp	r4, r5
 8018224:	6010      	str	r0, [r2, #0]
 8018226:	6051      	str	r1, [r2, #4]
 8018228:	4623      	mov	r3, r4
 801822a:	f102 0208 	add.w	r2, r2, #8
 801822e:	d1f6      	bne.n	801821e <BAES_EcbEncrypt+0x42>
 8018230:	b004      	add	sp, #16
 8018232:	bd70      	pop	{r4, r5, r6, pc}
 8018234:	50060000 	.word	0x50060000

08018238 <HW_AES_CcmStart>:
 8018238:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801823c:	4615      	mov	r5, r2
 801823e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018240:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8018242:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8018244:	3a02      	subs	r2, #2
 8018246:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 801824a:	461e      	mov	r6, r3
 801824c:	f1c1 020e 	rsb	r2, r1, #14
 8018250:	3b00      	subs	r3, #0
 8018252:	bf18      	it	ne
 8018254:	2301      	movne	r3, #1
 8018256:	ea42 02cc 	orr.w	r2, r2, ip, lsl #3
 801825a:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 801825e:	f88d 2000 	strb.w	r2, [sp]
 8018262:	f1c1 080f 	rsb	r8, r1, #15
 8018266:	460a      	mov	r2, r1
 8018268:	4601      	mov	r1, r0
 801826a:	f10d 0001 	add.w	r0, sp, #1
 801826e:	f011 f82e 	bl	80292ce <memcpy>
 8018272:	aa04      	add	r2, sp, #16
 8018274:	2300      	movs	r3, #0
 8018276:	4543      	cmp	r3, r8
 8018278:	d150      	bne.n	801831c <HW_AES_CcmStart+0xe4>
 801827a:	9b00      	ldr	r3, [sp, #0]
 801827c:	4834      	ldr	r0, [pc, #208]	@ (8018350 <HW_AES_CcmStart+0x118>)
 801827e:	4935      	ldr	r1, [pc, #212]	@ (8018354 <HW_AES_CcmStart+0x11c>)
 8018280:	ba1b      	rev	r3, r3
 8018282:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8018284:	9b01      	ldr	r3, [sp, #4]
 8018286:	ba1b      	rev	r3, r3
 8018288:	6283      	str	r3, [r0, #40]	@ 0x28
 801828a:	9b02      	ldr	r3, [sp, #8]
 801828c:	ba1b      	rev	r3, r3
 801828e:	6243      	str	r3, [r0, #36]	@ 0x24
 8018290:	9b03      	ldr	r3, [sp, #12]
 8018292:	ba1b      	rev	r3, r3
 8018294:	6203      	str	r3, [r0, #32]
 8018296:	4b30      	ldr	r3, [pc, #192]	@ (8018358 <HW_AES_CcmStart+0x120>)
 8018298:	2c00      	cmp	r4, #0
 801829a:	bf08      	it	eq
 801829c:	4619      	moveq	r1, r3
 801829e:	6001      	str	r1, [r0, #0]
 80182a0:	f7fe ffbe 	bl	8017220 <HW_AES_WaitComplete>
 80182a4:	2e00      	cmp	r6, #0
 80182a6:	d050      	beq.n	801834a <HW_AES_CcmStart+0x112>
 80182a8:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 80182ac:	6001      	str	r1, [r0, #0]
 80182ae:	2210      	movs	r2, #16
 80182b0:	2100      	movs	r1, #0
 80182b2:	4668      	mov	r0, sp
 80182b4:	f010 ff7a 	bl	80291ac <memset>
 80182b8:	2e0e      	cmp	r6, #14
 80182ba:	4634      	mov	r4, r6
 80182bc:	bf28      	it	cs
 80182be:	240e      	movcs	r4, #14
 80182c0:	ba73      	rev16	r3, r6
 80182c2:	4622      	mov	r2, r4
 80182c4:	4629      	mov	r1, r5
 80182c6:	f10d 0002 	add.w	r0, sp, #2
 80182ca:	f8ad 3000 	strh.w	r3, [sp]
 80182ce:	f010 fffe 	bl	80292ce <memcpy>
 80182d2:	4668      	mov	r0, sp
 80182d4:	f7fe ffb0 	bl	8017238 <HW_AES_Input>
 80182d8:	f7fe ffa2 	bl	8017220 <HW_AES_WaitComplete>
 80182dc:	4425      	add	r5, r4
 80182de:	1b34      	subs	r4, r6, r4
 80182e0:	4626      	mov	r6, r4
 80182e2:	eb05 0804 	add.w	r8, r5, r4
 80182e6:	2e0f      	cmp	r6, #15
 80182e8:	eba8 0306 	sub.w	r3, r8, r6
 80182ec:	d81b      	bhi.n	8018326 <HW_AES_CcmStart+0xee>
 80182ee:	f024 030f 	bic.w	r3, r4, #15
 80182f2:	1ae4      	subs	r4, r4, r3
 80182f4:	441d      	add	r5, r3
 80182f6:	d028      	beq.n	801834a <HW_AES_CcmStart+0x112>
 80182f8:	2210      	movs	r2, #16
 80182fa:	2100      	movs	r1, #0
 80182fc:	4668      	mov	r0, sp
 80182fe:	f010 ff55 	bl	80291ac <memset>
 8018302:	4622      	mov	r2, r4
 8018304:	4629      	mov	r1, r5
 8018306:	4668      	mov	r0, sp
 8018308:	f010 ffe1 	bl	80292ce <memcpy>
 801830c:	4668      	mov	r0, sp
 801830e:	f7fe ff93 	bl	8017238 <HW_AES_Input>
 8018312:	b004      	add	sp, #16
 8018314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018318:	f7fe bf82 	b.w	8017220 <HW_AES_WaitComplete>
 801831c:	f802 7d01 	strb.w	r7, [r2, #-1]!
 8018320:	3301      	adds	r3, #1
 8018322:	0a3f      	lsrs	r7, r7, #8
 8018324:	e7a7      	b.n	8018276 <HW_AES_CcmStart+0x3e>
 8018326:	466f      	mov	r7, sp
 8018328:	f103 0c10 	add.w	ip, r3, #16
 801832c:	6818      	ldr	r0, [r3, #0]
 801832e:	6859      	ldr	r1, [r3, #4]
 8018330:	463a      	mov	r2, r7
 8018332:	c203      	stmia	r2!, {r0, r1}
 8018334:	3308      	adds	r3, #8
 8018336:	4563      	cmp	r3, ip
 8018338:	4617      	mov	r7, r2
 801833a:	d1f7      	bne.n	801832c <HW_AES_CcmStart+0xf4>
 801833c:	4668      	mov	r0, sp
 801833e:	f7fe ff7b 	bl	8017238 <HW_AES_Input>
 8018342:	3e10      	subs	r6, #16
 8018344:	f7fe ff6c 	bl	8017220 <HW_AES_WaitComplete>
 8018348:	e7cd      	b.n	80182e6 <HW_AES_CcmStart+0xae>
 801834a:	b004      	add	sp, #16
 801834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018350:	50060000 	.word	0x50060000
 8018354:	00010005 	.word	0x00010005
 8018358:	00010015 	.word	0x00010015

0801835c <HW_AES_CcmCrypt>:
 801835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018360:	4607      	mov	r7, r0
 8018362:	b085      	sub	sp, #20
 8018364:	4616      	mov	r6, r2
 8018366:	460d      	mov	r5, r1
 8018368:	b3c9      	cbz	r1, 80183de <HW_AES_CcmCrypt+0x82>
 801836a:	4b2d      	ldr	r3, [pc, #180]	@ (8018420 <HW_AES_CcmCrypt+0xc4>)
 801836c:	f8d3 9000 	ldr.w	r9, [r3]
 8018370:	f429 44c0 	bic.w	r4, r9, #24576	@ 0x6000
 8018374:	f024 0401 	bic.w	r4, r4, #1
 8018378:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 801837c:	f044 0401 	orr.w	r4, r4, #1
 8018380:	601c      	str	r4, [r3, #0]
 8018382:	f04f 0800 	mov.w	r8, #0
 8018386:	f10d 0a10 	add.w	sl, sp, #16
 801838a:	eba5 0208 	sub.w	r2, r5, r8
 801838e:	2a0f      	cmp	r2, #15
 8018390:	eb06 0b08 	add.w	fp, r6, r8
 8018394:	eb07 0308 	add.w	r3, r7, r8
 8018398:	d824      	bhi.n	80183e4 <HW_AES_CcmCrypt+0x88>
 801839a:	f025 030f 	bic.w	r3, r5, #15
 801839e:	ebb5 0803 	subs.w	r8, r5, r3
 80183a2:	441f      	add	r7, r3
 80183a4:	441e      	add	r6, r3
 80183a6:	d01a      	beq.n	80183de <HW_AES_CcmCrypt+0x82>
 80183a8:	f019 0f10 	tst.w	r9, #16
 80183ac:	d005      	beq.n	80183ba <HW_AES_CcmCrypt+0x5e>
 80183ae:	1b59      	subs	r1, r3, r5
 80183b0:	3110      	adds	r1, #16
 80183b2:	4b1b      	ldr	r3, [pc, #108]	@ (8018420 <HW_AES_CcmCrypt+0xc4>)
 80183b4:	ea44 5401 	orr.w	r4, r4, r1, lsl #20
 80183b8:	601c      	str	r4, [r3, #0]
 80183ba:	2210      	movs	r2, #16
 80183bc:	2100      	movs	r1, #0
 80183be:	4668      	mov	r0, sp
 80183c0:	f010 fef4 	bl	80291ac <memset>
 80183c4:	4642      	mov	r2, r8
 80183c6:	4639      	mov	r1, r7
 80183c8:	4668      	mov	r0, sp
 80183ca:	f010 ff80 	bl	80292ce <memcpy>
 80183ce:	4669      	mov	r1, sp
 80183d0:	4608      	mov	r0, r1
 80183d2:	f7ff fe03 	bl	8017fdc <HW_AES_Crypt>
 80183d6:	4642      	mov	r2, r8
 80183d8:	4630      	mov	r0, r6
 80183da:	f010 ff78 	bl	80292ce <memcpy>
 80183de:	b005      	add	sp, #20
 80183e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183e4:	46ec      	mov	ip, sp
 80183e6:	f103 0e10 	add.w	lr, r3, #16
 80183ea:	6818      	ldr	r0, [r3, #0]
 80183ec:	6859      	ldr	r1, [r3, #4]
 80183ee:	4662      	mov	r2, ip
 80183f0:	c203      	stmia	r2!, {r0, r1}
 80183f2:	3308      	adds	r3, #8
 80183f4:	4573      	cmp	r3, lr
 80183f6:	4694      	mov	ip, r2
 80183f8:	d1f7      	bne.n	80183ea <HW_AES_CcmCrypt+0x8e>
 80183fa:	4669      	mov	r1, sp
 80183fc:	4668      	mov	r0, sp
 80183fe:	f7ff fded 	bl	8017fdc <HW_AES_Crypt>
 8018402:	46ec      	mov	ip, sp
 8018404:	465a      	mov	r2, fp
 8018406:	4663      	mov	r3, ip
 8018408:	cb03      	ldmia	r3!, {r0, r1}
 801840a:	4553      	cmp	r3, sl
 801840c:	6010      	str	r0, [r2, #0]
 801840e:	6051      	str	r1, [r2, #4]
 8018410:	469c      	mov	ip, r3
 8018412:	f102 0208 	add.w	r2, r2, #8
 8018416:	d1f6      	bne.n	8018406 <HW_AES_CcmCrypt+0xaa>
 8018418:	f108 0810 	add.w	r8, r8, #16
 801841c:	e7b5      	b.n	801838a <HW_AES_CcmCrypt+0x2e>
 801841e:	bf00      	nop
 8018420:	50060000 	.word	0x50060000

08018424 <HW_AES_CcmGetTag>:
 8018424:	b510      	push	{r4, lr}
 8018426:	b086      	sub	sp, #24
 8018428:	4604      	mov	r4, r0
 801842a:	a802      	add	r0, sp, #8
 801842c:	9101      	str	r1, [sp, #4]
 801842e:	f7fe ff0f 	bl	8017250 <HW_AES_CcmGenerateTag>
 8018432:	4601      	mov	r1, r0
 8018434:	9a01      	ldr	r2, [sp, #4]
 8018436:	4620      	mov	r0, r4
 8018438:	f010 ff49 	bl	80292ce <memcpy>
 801843c:	b006      	add	sp, #24
 801843e:	bd10      	pop	{r4, pc}

08018440 <BAES_CcmEncrypt>:
 8018440:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018444:	461f      	mov	r7, r3
 8018446:	4614      	mov	r4, r2
 8018448:	460d      	mov	r5, r1
 801844a:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
 801844e:	4606      	mov	r6, r0
 8018450:	f7ff fd6a 	bl	8017f28 <HW_AES_Enable>
 8018454:	4638      	mov	r0, r7
 8018456:	f7ff fd9f 	bl	8017f98 <HW_AES_SetKey>
 801845a:	2301      	movs	r3, #1
 801845c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8018460:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8018464:	f8cd 8000 	str.w	r8, [sp]
 8018468:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801846c:	f7ff fee4 	bl	8018238 <HW_AES_CcmStart>
 8018470:	4632      	mov	r2, r6
 8018472:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8018474:	4641      	mov	r1, r8
 8018476:	f7ff ff71 	bl	801835c <HW_AES_CcmCrypt>
 801847a:	4628      	mov	r0, r5
 801847c:	4621      	mov	r1, r4
 801847e:	f7ff ffd1 	bl	8018424 <HW_AES_CcmGetTag>
 8018482:	f7ff fd6f 	bl	8017f64 <HW_AES_Disable>
 8018486:	2000      	movs	r0, #0
 8018488:	b004      	add	sp, #16
 801848a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801848e <HW_AES_CcmCheckTag>:
 801848e:	b530      	push	{r4, r5, lr}
 8018490:	b085      	sub	sp, #20
 8018492:	4604      	mov	r4, r0
 8018494:	460d      	mov	r5, r1
 8018496:	4668      	mov	r0, sp
 8018498:	f7fe feda 	bl	8017250 <HW_AES_CcmGenerateTag>
 801849c:	4425      	add	r5, r4
 801849e:	4623      	mov	r3, r4
 80184a0:	2200      	movs	r2, #0
 80184a2:	42ab      	cmp	r3, r5
 80184a4:	d104      	bne.n	80184b0 <HW_AES_CcmCheckTag+0x22>
 80184a6:	1e10      	subs	r0, r2, #0
 80184a8:	bf18      	it	ne
 80184aa:	2001      	movne	r0, #1
 80184ac:	b005      	add	sp, #20
 80184ae:	bd30      	pop	{r4, r5, pc}
 80184b0:	f813 1b01 	ldrb.w	r1, [r3], #1
 80184b4:	f810 4b01 	ldrb.w	r4, [r0], #1
 80184b8:	4061      	eors	r1, r4
 80184ba:	430a      	orrs	r2, r1
 80184bc:	e7f1      	b.n	80184a2 <HW_AES_CcmCheckTag+0x14>

080184be <BAES_CcmDecrypt>:
 80184be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184c2:	b086      	sub	sp, #24
 80184c4:	460e      	mov	r6, r1
 80184c6:	4615      	mov	r5, r2
 80184c8:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80184ca:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
 80184ce:	9305      	str	r3, [sp, #20]
 80184d0:	4604      	mov	r4, r0
 80184d2:	f7ff fd29 	bl	8017f28 <HW_AES_Enable>
 80184d6:	4630      	mov	r0, r6
 80184d8:	f7ff fd5e 	bl	8017f98 <HW_AES_SetKey>
 80184dc:	2300      	movs	r3, #0
 80184de:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80184e2:	9905      	ldr	r1, [sp, #20]
 80184e4:	f8cd 8000 	str.w	r8, [sp]
 80184e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80184ec:	4628      	mov	r0, r5
 80184ee:	f7ff fea3 	bl	8018238 <HW_AES_CcmStart>
 80184f2:	4622      	mov	r2, r4
 80184f4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80184f6:	4641      	mov	r1, r8
 80184f8:	f7ff ff30 	bl	801835c <HW_AES_CcmCrypt>
 80184fc:	4639      	mov	r1, r7
 80184fe:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8018500:	f7ff ffc5 	bl	801848e <HW_AES_CcmCheckTag>
 8018504:	9005      	str	r0, [sp, #20]
 8018506:	f7ff fd2d 	bl	8017f64 <HW_AES_Disable>
 801850a:	9805      	ldr	r0, [sp, #20]
 801850c:	b006      	add	sp, #24
 801850e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08018514 <HW_PKA_Enable>:
 8018514:	4b12      	ldr	r3, [pc, #72]	@ (8018560 <HW_PKA_Enable+0x4c>)
 8018516:	f893 0400 	ldrb.w	r0, [r3, #1024]	@ 0x400
 801851a:	b082      	sub	sp, #8
 801851c:	b9f0      	cbnz	r0, 801855c <HW_PKA_Enable+0x48>
 801851e:	4a11      	ldr	r2, [pc, #68]	@ (8018564 <HW_PKA_Enable+0x50>)
 8018520:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
 8018524:	4a10      	ldr	r2, [pc, #64]	@ (8018568 <HW_PKA_Enable+0x54>)
 8018526:	4291      	cmp	r1, r2
 8018528:	d116      	bne.n	8018558 <HW_PKA_Enable+0x44>
 801852a:	2001      	movs	r0, #1
 801852c:	f883 0400 	strb.w	r0, [r3, #1024]	@ 0x400
 8018530:	f3ef 8110 	mrs	r1, PRIMASK
 8018534:	b672      	cpsid	i
 8018536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801853a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801853c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8018540:	651a      	str	r2, [r3, #80]	@ 0x50
 8018542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018548:	9301      	str	r3, [sp, #4]
 801854a:	9b01      	ldr	r3, [sp, #4]
 801854c:	f381 8810 	msr	PRIMASK, r1
 8018550:	4a06      	ldr	r2, [pc, #24]	@ (801856c <HW_PKA_Enable+0x58>)
 8018552:	6813      	ldr	r3, [r2, #0]
 8018554:	4303      	orrs	r3, r0
 8018556:	6013      	str	r3, [r2, #0]
 8018558:	b002      	add	sp, #8
 801855a:	4770      	bx	lr
 801855c:	2000      	movs	r0, #0
 801855e:	e7fb      	b.n	8018558 <HW_PKA_Enable+0x44>
 8018560:	2000140c 	.word	0x2000140c
 8018564:	58001400 	.word	0x58001400
 8018568:	80000400 	.word	0x80000400
 801856c:	58002000 	.word	0x58002000

08018570 <HW_PKA_WriteOperand>:
 8018570:	0080      	lsls	r0, r0, #2
 8018572:	f100 40b0 	add.w	r0, r0, #1476395008	@ 0x58000000
 8018576:	f500 5010 	add.w	r0, r0, #9216	@ 0x2400
 801857a:	b530      	push	{r4, r5, lr}
 801857c:	460b      	mov	r3, r1
 801857e:	1f04      	subs	r4, r0, #4
 8018580:	2b00      	cmp	r3, #0
 8018582:	dc05      	bgt.n	8018590 <HW_PKA_WriteOperand+0x20>
 8018584:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8018588:	2300      	movs	r3, #0
 801858a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 801858e:	bd30      	pop	{r4, r5, pc}
 8018590:	f852 5b04 	ldr.w	r5, [r2], #4
 8018594:	f844 5f04 	str.w	r5, [r4, #4]!
 8018598:	3b01      	subs	r3, #1
 801859a:	e7f1      	b.n	8018580 <HW_PKA_WriteOperand+0x10>

0801859c <HW_PKA_Start>:
 801859c:	4b07      	ldr	r3, [pc, #28]	@ (80185bc <HW_PKA_Start+0x20>)
 801859e:	681a      	ldr	r2, [r3, #0]
 80185a0:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80185a4:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80185a8:	6018      	str	r0, [r3, #0]
 80185aa:	689a      	ldr	r2, [r3, #8]
 80185ac:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80185b0:	609a      	str	r2, [r3, #8]
 80185b2:	681a      	ldr	r2, [r3, #0]
 80185b4:	f042 0202 	orr.w	r2, r2, #2
 80185b8:	601a      	str	r2, [r3, #0]
 80185ba:	4770      	bx	lr
 80185bc:	58002000 	.word	0x58002000

080185c0 <HW_PKA_EndOfOperation>:
 80185c0:	4b02      	ldr	r3, [pc, #8]	@ (80185cc <HW_PKA_EndOfOperation+0xc>)
 80185c2:	6858      	ldr	r0, [r3, #4]
 80185c4:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80185c8:	4770      	bx	lr
 80185ca:	bf00      	nop
 80185cc:	58002000 	.word	0x58002000

080185d0 <HW_PKA_ReadResult>:
 80185d0:	0080      	lsls	r0, r0, #2
 80185d2:	f100 40b0 	add.w	r0, r0, #1476395008	@ 0x58000000
 80185d6:	f500 5010 	add.w	r0, r0, #9216	@ 0x2400
 80185da:	3a04      	subs	r2, #4
 80185dc:	2900      	cmp	r1, #0
 80185de:	dc00      	bgt.n	80185e2 <HW_PKA_ReadResult+0x12>
 80185e0:	4770      	bx	lr
 80185e2:	f850 3b04 	ldr.w	r3, [r0], #4
 80185e6:	f842 3f04 	str.w	r3, [r2, #4]!
 80185ea:	3901      	subs	r1, #1
 80185ec:	e7f6      	b.n	80185dc <HW_PKA_ReadResult+0xc>
	...

080185f0 <HW_PKA_Disable>:
 80185f0:	4a0d      	ldr	r2, [pc, #52]	@ (8018628 <HW_PKA_Disable+0x38>)
 80185f2:	f892 3400 	ldrb.w	r3, [r2, #1024]	@ 0x400
 80185f6:	b1b3      	cbz	r3, 8018626 <HW_PKA_Disable+0x36>
 80185f8:	490c      	ldr	r1, [pc, #48]	@ (801862c <HW_PKA_Disable+0x3c>)
 80185fa:	680b      	ldr	r3, [r1, #0]
 80185fc:	f023 0301 	bic.w	r3, r3, #1
 8018600:	600b      	str	r3, [r1, #0]
 8018602:	f3ef 8010 	mrs	r0, PRIMASK
 8018606:	b672      	cpsid	i
 8018608:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801860c:	6d0b      	ldr	r3, [r1, #80]	@ 0x50
 801860e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8018612:	650b      	str	r3, [r1, #80]	@ 0x50
 8018614:	f380 8810 	msr	PRIMASK, r0
 8018618:	4b05      	ldr	r3, [pc, #20]	@ (8018630 <HW_PKA_Disable+0x40>)
 801861a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801861e:	6059      	str	r1, [r3, #4]
 8018620:	2300      	movs	r3, #0
 8018622:	f882 3400 	strb.w	r3, [r2, #1024]	@ 0x400
 8018626:	4770      	bx	lr
 8018628:	2000140c 	.word	0x2000140c
 801862c:	58002000 	.word	0x58002000
 8018630:	58001400 	.word	0x58001400

08018634 <HW_PKA_P256_StartRangeCheck>:
 8018634:	b508      	push	{r3, lr}
 8018636:	4b0b      	ldr	r3, [pc, #44]	@ (8018664 <HW_PKA_P256_StartRangeCheck+0x30>)
 8018638:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801863c:	f8c3 1404 	str.w	r1, [r3, #1028]	@ 0x404
 8018640:	4602      	mov	r2, r0
 8018642:	2108      	movs	r1, #8
 8018644:	f240 102d 	movw	r0, #301	@ 0x12d
 8018648:	f7ff ff92 	bl	8018570 <HW_PKA_WriteOperand>
 801864c:	f240 1091 	movw	r0, #401	@ 0x191
 8018650:	4a05      	ldr	r2, [pc, #20]	@ (8018668 <HW_PKA_P256_StartRangeCheck+0x34>)
 8018652:	2108      	movs	r1, #8
 8018654:	f7ff ff8c 	bl	8018570 <HW_PKA_WriteOperand>
 8018658:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801865c:	200c      	movs	r0, #12
 801865e:	f7ff bf9d 	b.w	801859c <HW_PKA_Start>
 8018662:	bf00      	nop
 8018664:	58002000 	.word	0x58002000
 8018668:	0802f1cc 	.word	0x0802f1cc

0801866c <BPKA_StartDhKey>:
 801866c:	b570      	push	{r4, r5, r6, lr}
 801866e:	4605      	mov	r5, r0
 8018670:	460c      	mov	r4, r1
 8018672:	f7ff ff4f 	bl	8018514 <HW_PKA_Enable>
 8018676:	b378      	cbz	r0, 80186d8 <BPKA_StartDhKey+0x6c>
 8018678:	462b      	mov	r3, r5
 801867a:	4d19      	ldr	r5, [pc, #100]	@ (80186e0 <BPKA_StartDhKey+0x74>)
 801867c:	f103 0620 	add.w	r6, r3, #32
 8018680:	6818      	ldr	r0, [r3, #0]
 8018682:	6859      	ldr	r1, [r3, #4]
 8018684:	462a      	mov	r2, r5
 8018686:	c203      	stmia	r2!, {r0, r1}
 8018688:	3308      	adds	r3, #8
 801868a:	42b3      	cmp	r3, r6
 801868c:	4615      	mov	r5, r2
 801868e:	d1f7      	bne.n	8018680 <BPKA_StartDhKey+0x14>
 8018690:	4a14      	ldr	r2, [pc, #80]	@ (80186e4 <BPKA_StartDhKey+0x78>)
 8018692:	4623      	mov	r3, r4
 8018694:	f104 0640 	add.w	r6, r4, #64	@ 0x40
 8018698:	4615      	mov	r5, r2
 801869a:	6818      	ldr	r0, [r3, #0]
 801869c:	6859      	ldr	r1, [r3, #4]
 801869e:	4614      	mov	r4, r2
 80186a0:	c403      	stmia	r4!, {r0, r1}
 80186a2:	3308      	adds	r3, #8
 80186a4:	42b3      	cmp	r3, r6
 80186a6:	4622      	mov	r2, r4
 80186a8:	d1f7      	bne.n	801869a <BPKA_StartDhKey+0x2e>
 80186aa:	4c0f      	ldr	r4, [pc, #60]	@ (80186e8 <BPKA_StartDhKey+0x7c>)
 80186ac:	f504 7063 	add.w	r0, r4, #908	@ 0x38c
 80186b0:	f7fe fea2 	bl	80173f8 <BPKA_Reverse>
 80186b4:	4628      	mov	r0, r5
 80186b6:	f7fe fe9f 	bl	80173f8 <BPKA_Reverse>
 80186ba:	f504 7073 	add.w	r0, r4, #972	@ 0x3cc
 80186be:	f7fe fe9b 	bl	80173f8 <BPKA_Reverse>
 80186c2:	4628      	mov	r0, r5
 80186c4:	f7ff ffb6 	bl	8018634 <HW_PKA_P256_StartRangeCheck>
 80186c8:	2302      	movs	r3, #2
 80186ca:	f884 3401 	strb.w	r3, [r4, #1025]	@ 0x401
 80186ce:	2301      	movs	r3, #1
 80186d0:	f884 33ec 	strb.w	r3, [r4, #1004]	@ 0x3ec
 80186d4:	2000      	movs	r0, #0
 80186d6:	bd70      	pop	{r4, r5, r6, pc}
 80186d8:	f06f 0001 	mvn.w	r0, #1
 80186dc:	e7fb      	b.n	80186d6 <BPKA_StartDhKey+0x6a>
 80186de:	bf00      	nop
 80186e0:	20001798 	.word	0x20001798
 80186e4:	200017b8 	.word	0x200017b8
 80186e8:	2000140c 	.word	0x2000140c

080186ec <HW_PKA_P256_StartPointCheck>:
 80186ec:	4b16      	ldr	r3, [pc, #88]	@ (8018748 <HW_PKA_P256_StartPointCheck+0x5c>)
 80186ee:	b570      	push	{r4, r5, r6, lr}
 80186f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80186f4:	4c15      	ldr	r4, [pc, #84]	@ (801874c <HW_PKA_P256_StartPointCheck+0x60>)
 80186f6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80186fa:	2201      	movs	r2, #1
 80186fc:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8018700:	4606      	mov	r6, r0
 8018702:	460d      	mov	r5, r1
 8018704:	f104 0278 	add.w	r2, r4, #120	@ 0x78
 8018708:	2108      	movs	r1, #8
 801870a:	2003      	movs	r0, #3
 801870c:	f7ff ff30 	bl	8018570 <HW_PKA_WriteOperand>
 8018710:	f104 0258 	add.w	r2, r4, #88	@ 0x58
 8018714:	2108      	movs	r1, #8
 8018716:	2018      	movs	r0, #24
 8018718:	f7ff ff2a 	bl	8018570 <HW_PKA_WriteOperand>
 801871c:	4632      	mov	r2, r6
 801871e:	2108      	movs	r1, #8
 8018720:	2057      	movs	r0, #87	@ 0x57
 8018722:	f7ff ff25 	bl	8018570 <HW_PKA_WriteOperand>
 8018726:	462a      	mov	r2, r5
 8018728:	2108      	movs	r1, #8
 801872a:	206c      	movs	r0, #108	@ 0x6c
 801872c:	f7ff ff20 	bl	8018570 <HW_PKA_WriteOperand>
 8018730:	f104 0298 	add.w	r2, r4, #152	@ 0x98
 8018734:	20ff      	movs	r0, #255	@ 0xff
 8018736:	2108      	movs	r1, #8
 8018738:	f7ff ff1a 	bl	8018570 <HW_PKA_WriteOperand>
 801873c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018740:	2028      	movs	r0, #40	@ 0x28
 8018742:	f7ff bf2b 	b.w	801859c <HW_PKA_Start>
 8018746:	bf00      	nop
 8018748:	58002000 	.word	0x58002000
 801874c:	0802f174 	.word	0x0802f174

08018750 <HW_PKA_P256_StartEccScalarMul>:
 8018750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018752:	4b1e      	ldr	r3, [pc, #120]	@ (80187cc <HW_PKA_P256_StartEccScalarMul+0x7c>)
 8018754:	4c1e      	ldr	r4, [pc, #120]	@ (80187d0 <HW_PKA_P256_StartEccScalarMul+0x80>)
 8018756:	4615      	mov	r5, r2
 8018758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801875c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
 8018760:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8018764:	2201      	movs	r2, #1
 8018766:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 801876a:	4607      	mov	r7, r0
 801876c:	460e      	mov	r6, r1
 801876e:	f104 0278 	add.w	r2, r4, #120	@ 0x78
 8018772:	2108      	movs	r1, #8
 8018774:	2003      	movs	r0, #3
 8018776:	f7ff fefb 	bl	8018570 <HW_PKA_WriteOperand>
 801877a:	f104 0258 	add.w	r2, r4, #88	@ 0x58
 801877e:	2108      	movs	r1, #8
 8018780:	2018      	movs	r0, #24
 8018782:	f7ff fef5 	bl	8018570 <HW_PKA_WriteOperand>
 8018786:	f104 02f8 	add.w	r2, r4, #248	@ 0xf8
 801878a:	2108      	movs	r1, #8
 801878c:	202d      	movs	r0, #45	@ 0x2d
 801878e:	f7ff feef 	bl	8018570 <HW_PKA_WriteOperand>
 8018792:	463a      	mov	r2, r7
 8018794:	2108      	movs	r1, #8
 8018796:	2042      	movs	r0, #66	@ 0x42
 8018798:	f7ff feea 	bl	8018570 <HW_PKA_WriteOperand>
 801879c:	f104 02b8 	add.w	r2, r4, #184	@ 0xb8
 80187a0:	2e00      	cmp	r6, #0
 80187a2:	bf18      	it	ne
 80187a4:	4632      	movne	r2, r6
 80187a6:	2108      	movs	r1, #8
 80187a8:	2057      	movs	r0, #87	@ 0x57
 80187aa:	34d8      	adds	r4, #216	@ 0xd8
 80187ac:	f7ff fee0 	bl	8018570 <HW_PKA_WriteOperand>
 80187b0:	2d00      	cmp	r5, #0
 80187b2:	bf14      	ite	ne
 80187b4:	462a      	movne	r2, r5
 80187b6:	4622      	moveq	r2, r4
 80187b8:	206c      	movs	r0, #108	@ 0x6c
 80187ba:	2108      	movs	r1, #8
 80187bc:	f7ff fed8 	bl	8018570 <HW_PKA_WriteOperand>
 80187c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80187c4:	2022      	movs	r0, #34	@ 0x22
 80187c6:	f7ff bee9 	b.w	801859c <HW_PKA_Start>
 80187ca:	bf00      	nop
 80187cc:	58002000 	.word	0x58002000
 80187d0:	0802f174 	.word	0x0802f174

080187d4 <BPKA_StartP256Key>:
 80187d4:	b530      	push	{r4, r5, lr}
 80187d6:	b089      	sub	sp, #36	@ 0x24
 80187d8:	4604      	mov	r4, r0
 80187da:	f7ff fe9b 	bl	8018514 <HW_PKA_Enable>
 80187de:	b1c8      	cbz	r0, 8018814 <BPKA_StartP256Key+0x40>
 80187e0:	4623      	mov	r3, r4
 80187e2:	f103 0520 	add.w	r5, r3, #32
 80187e6:	466c      	mov	r4, sp
 80187e8:	6818      	ldr	r0, [r3, #0]
 80187ea:	6859      	ldr	r1, [r3, #4]
 80187ec:	4622      	mov	r2, r4
 80187ee:	c203      	stmia	r2!, {r0, r1}
 80187f0:	3308      	adds	r3, #8
 80187f2:	42ab      	cmp	r3, r5
 80187f4:	4614      	mov	r4, r2
 80187f6:	d1f7      	bne.n	80187e8 <BPKA_StartP256Key+0x14>
 80187f8:	4668      	mov	r0, sp
 80187fa:	f7fe fdfd 	bl	80173f8 <BPKA_Reverse>
 80187fe:	2200      	movs	r2, #0
 8018800:	4611      	mov	r1, r2
 8018802:	f7ff ffa5 	bl	8018750 <HW_PKA_P256_StartEccScalarMul>
 8018806:	4b05      	ldr	r3, [pc, #20]	@ (801881c <BPKA_StartP256Key+0x48>)
 8018808:	2201      	movs	r2, #1
 801880a:	f883 2401 	strb.w	r2, [r3, #1025]	@ 0x401
 801880e:	2000      	movs	r0, #0
 8018810:	b009      	add	sp, #36	@ 0x24
 8018812:	bd30      	pop	{r4, r5, pc}
 8018814:	f06f 0001 	mvn.w	r0, #1
 8018818:	e7fa      	b.n	8018810 <BPKA_StartP256Key+0x3c>
 801881a:	bf00      	nop
 801881c:	2000140c 	.word	0x2000140c

08018820 <HW_PKA_P256_ReadEccScalarMul>:
 8018820:	b510      	push	{r4, lr}
 8018822:	4602      	mov	r2, r0
 8018824:	460c      	mov	r4, r1
 8018826:	b118      	cbz	r0, 8018830 <HW_PKA_P256_ReadEccScalarMul+0x10>
 8018828:	2108      	movs	r1, #8
 801882a:	2057      	movs	r0, #87	@ 0x57
 801882c:	f7ff fed0 	bl	80185d0 <HW_PKA_ReadResult>
 8018830:	b134      	cbz	r4, 8018840 <HW_PKA_P256_ReadEccScalarMul+0x20>
 8018832:	4622      	mov	r2, r4
 8018834:	2108      	movs	r1, #8
 8018836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801883a:	206c      	movs	r0, #108	@ 0x6c
 801883c:	f7ff bec8 	b.w	80185d0 <HW_PKA_ReadResult>
 8018840:	bd10      	pop	{r4, pc}
	...

08018844 <BPKA_Status>:
 8018844:	b510      	push	{r4, lr}
 8018846:	f7ff febb 	bl	80185c0 <HW_PKA_EndOfOperation>
 801884a:	b300      	cbz	r0, 801888e <BPKA_Status+0x4a>
 801884c:	4c23      	ldr	r4, [pc, #140]	@ (80188dc <BPKA_Status+0x98>)
 801884e:	f894 3401 	ldrb.w	r3, [r4, #1025]	@ 0x401
 8018852:	3b01      	subs	r3, #1
 8018854:	2b04      	cmp	r3, #4
 8018856:	d83f      	bhi.n	80188d8 <BPKA_Status+0x94>
 8018858:	e8df f003 	tbb	[pc, r3]
 801885c:	281c0e03 	.word	0x281c0e03
 8018860:	36          	.byte	0x36
 8018861:	00          	.byte	0x00
 8018862:	491f      	ldr	r1, [pc, #124]	@ (80188e0 <BPKA_Status+0x9c>)
 8018864:	f1a1 0020 	sub.w	r0, r1, #32
 8018868:	f7ff ffda 	bl	8018820 <HW_PKA_P256_ReadEccScalarMul>
 801886c:	f7ff fec0 	bl	80185f0 <HW_PKA_Disable>
 8018870:	2000      	movs	r0, #0
 8018872:	f884 0401 	strb.w	r0, [r4, #1025]	@ 0x401
 8018876:	e00c      	b.n	8018892 <BPKA_Status+0x4e>
 8018878:	4b1a      	ldr	r3, [pc, #104]	@ (80188e4 <BPKA_Status+0xa0>)
 801887a:	f8d3 3bd0 	ldr.w	r3, [r3, #3024]	@ 0xbd0
 801887e:	2b02      	cmp	r3, #2
 8018880:	d1f4      	bne.n	801886c <BPKA_Status+0x28>
 8018882:	4819      	ldr	r0, [pc, #100]	@ (80188e8 <BPKA_Status+0xa4>)
 8018884:	f7ff fed6 	bl	8018634 <HW_PKA_P256_StartRangeCheck>
 8018888:	2303      	movs	r3, #3
 801888a:	f884 3401 	strb.w	r3, [r4, #1025]	@ 0x401
 801888e:	f06f 0001 	mvn.w	r0, #1
 8018892:	bd10      	pop	{r4, pc}
 8018894:	4b13      	ldr	r3, [pc, #76]	@ (80188e4 <BPKA_Status+0xa0>)
 8018896:	f8d3 3bd0 	ldr.w	r3, [r3, #3024]	@ 0xbd0
 801889a:	2b02      	cmp	r3, #2
 801889c:	d1e6      	bne.n	801886c <BPKA_Status+0x28>
 801889e:	4912      	ldr	r1, [pc, #72]	@ (80188e8 <BPKA_Status+0xa4>)
 80188a0:	f1a1 0020 	sub.w	r0, r1, #32
 80188a4:	f7ff ff22 	bl	80186ec <HW_PKA_P256_StartPointCheck>
 80188a8:	2304      	movs	r3, #4
 80188aa:	e7ee      	b.n	801888a <BPKA_Status+0x46>
 80188ac:	4b0d      	ldr	r3, [pc, #52]	@ (80188e4 <BPKA_Status+0xa0>)
 80188ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d1da      	bne.n	801886c <BPKA_Status+0x28>
 80188b6:	4a0c      	ldr	r2, [pc, #48]	@ (80188e8 <BPKA_Status+0xa4>)
 80188b8:	f1a2 0120 	sub.w	r1, r2, #32
 80188bc:	f1a2 0040 	sub.w	r0, r2, #64	@ 0x40
 80188c0:	f7ff ff46 	bl	8018750 <HW_PKA_P256_StartEccScalarMul>
 80188c4:	2305      	movs	r3, #5
 80188c6:	e7e0      	b.n	801888a <BPKA_Status+0x46>
 80188c8:	4808      	ldr	r0, [pc, #32]	@ (80188ec <BPKA_Status+0xa8>)
 80188ca:	2100      	movs	r1, #0
 80188cc:	f7ff ffa8 	bl	8018820 <HW_PKA_P256_ReadEccScalarMul>
 80188d0:	2300      	movs	r3, #0
 80188d2:	f884 33ec 	strb.w	r3, [r4, #1004]	@ 0x3ec
 80188d6:	e7c9      	b.n	801886c <BPKA_Status+0x28>
 80188d8:	2000      	movs	r0, #0
 80188da:	e7da      	b.n	8018892 <BPKA_Status+0x4e>
 80188dc:	2000140c 	.word	0x2000140c
 80188e0:	200017b8 	.word	0x200017b8
 80188e4:	58002000 	.word	0x58002000
 80188e8:	200017d8 	.word	0x200017d8
 80188ec:	20001798 	.word	0x20001798

080188f0 <MoblePalCryptoGetEccPublicKey.part.0>:
 80188f0:	b538      	push	{r3, r4, r5, lr}
 80188f2:	4605      	mov	r5, r0
 80188f4:	4807      	ldr	r0, [pc, #28]	@ (8018914 <MoblePalCryptoGetEccPublicKey.part.0+0x24>)
 80188f6:	f7ff ff6d 	bl	80187d4 <BPKA_StartP256Key>
 80188fa:	2800      	cmp	r0, #0
 80188fc:	d1fa      	bne.n	80188f4 <MoblePalCryptoGetEccPublicKey.part.0+0x4>
 80188fe:	f7ff ffa1 	bl	8018844 <BPKA_Status>
 8018902:	4604      	mov	r4, r0
 8018904:	2800      	cmp	r0, #0
 8018906:	d1fa      	bne.n	80188fe <MoblePalCryptoGetEccPublicKey.part.0+0xe>
 8018908:	4628      	mov	r0, r5
 801890a:	f7ff fad1 	bl	8017eb0 <BPKA_ReadP256Key>
 801890e:	4620      	mov	r0, r4
 8018910:	bd38      	pop	{r3, r4, r5, pc}
 8018912:	bf00      	nop
 8018914:	2000180f 	.word	0x2000180f

08018918 <MoblePalCryptoInit>:
 8018918:	4919      	ldr	r1, [pc, #100]	@ (8018980 <MoblePalCryptoInit+0x68>)
 801891a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801891c:	2300      	movs	r3, #0
 801891e:	880c      	ldrh	r4, [r1, #0]
 8018920:	4d18      	ldr	r5, [pc, #96]	@ (8018984 <MoblePalCryptoInit+0x6c>)
 8018922:	277c      	movs	r7, #124	@ 0x7c
 8018924:	4618      	mov	r0, r3
 8018926:	b2da      	uxtb	r2, r3
 8018928:	42a2      	cmp	r2, r4
 801892a:	f103 0601 	add.w	r6, r3, #1
 801892e:	d318      	bcc.n	8018962 <MoblePalCryptoInit+0x4a>
 8018930:	2300      	movs	r3, #0
 8018932:	8909      	ldrh	r1, [r1, #8]
 8018934:	242c      	movs	r4, #44	@ 0x2c
 8018936:	461e      	mov	r6, r3
 8018938:	b2da      	uxtb	r2, r3
 801893a:	428a      	cmp	r2, r1
 801893c:	f103 0001 	add.w	r0, r3, #1
 8018940:	d317      	bcc.n	8018972 <MoblePalCryptoInit+0x5a>
 8018942:	2400      	movs	r4, #0
 8018944:	2228      	movs	r2, #40	@ 0x28
 8018946:	4621      	mov	r1, r4
 8018948:	480f      	ldr	r0, [pc, #60]	@ (8018988 <MoblePalCryptoInit+0x70>)
 801894a:	f8c5 4658 	str.w	r4, [r5, #1624]	@ 0x658
 801894e:	f885 465c 	strb.w	r4, [r5, #1628]	@ 0x65c
 8018952:	f010 fc2b 	bl	80291ac <memset>
 8018956:	f8a5 461c 	strh.w	r4, [r5, #1564]	@ 0x61c
 801895a:	f885 461e 	strb.w	r4, [r5, #1566]	@ 0x61e
 801895e:	4620      	mov	r0, r4
 8018960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018962:	fb07 5302 	mla	r3, r7, r2, r5
 8018966:	f883 0445 	strb.w	r0, [r3, #1093]	@ 0x445
 801896a:	f883 0446 	strb.w	r0, [r3, #1094]	@ 0x446
 801896e:	4633      	mov	r3, r6
 8018970:	e7d9      	b.n	8018926 <MoblePalCryptoInit+0xe>
 8018972:	fb04 5202 	mla	r2, r4, r2, r5
 8018976:	4603      	mov	r3, r0
 8018978:	f8a2 65b8 	strh.w	r6, [r2, #1464]	@ 0x5b8
 801897c:	e7dc      	b.n	8018938 <MoblePalCryptoInit+0x20>
 801897e:	bf00      	nop
 8018980:	20000008 	.word	0x20000008
 8018984:	2000140c 	.word	0x2000140c
 8018988:	20001a3c 	.word	0x20001a3c

0801898c <MoblePalCryptoHasNewNetworkKey>:
 801898c:	4b0a      	ldr	r3, [pc, #40]	@ (80189b8 <MoblePalCryptoHasNewNetworkKey+0x2c>)
 801898e:	b570      	push	{r4, r5, r6, lr}
 8018990:	4d0a      	ldr	r5, [pc, #40]	@ (80189bc <MoblePalCryptoHasNewNetworkKey+0x30>)
 8018992:	8819      	ldrh	r1, [r3, #0]
 8018994:	267c      	movs	r6, #124	@ 0x7c
 8018996:	2300      	movs	r3, #0
 8018998:	b2da      	uxtb	r2, r3
 801899a:	428a      	cmp	r2, r1
 801899c:	d301      	bcc.n	80189a2 <MoblePalCryptoHasNewNetworkKey+0x16>
 801899e:	2000      	movs	r0, #0
 80189a0:	e008      	b.n	80189b4 <MoblePalCryptoHasNewNetworkKey+0x28>
 80189a2:	fb06 5202 	mla	r2, r6, r2, r5
 80189a6:	3301      	adds	r3, #1
 80189a8:	f8b2 4448 	ldrh.w	r4, [r2, #1096]	@ 0x448
 80189ac:	4284      	cmp	r4, r0
 80189ae:	d1f3      	bne.n	8018998 <MoblePalCryptoHasNewNetworkKey+0xc>
 80189b0:	f892 0446 	ldrb.w	r0, [r2, #1094]	@ 0x446
 80189b4:	bd70      	pop	{r4, r5, r6, pc}
 80189b6:	bf00      	nop
 80189b8:	20000008 	.word	0x20000008
 80189bc:	2000140c 	.word	0x2000140c

080189c0 <MoblePalCryptoHasNetworkKey>:
 80189c0:	4b0a      	ldr	r3, [pc, #40]	@ (80189ec <MoblePalCryptoHasNetworkKey+0x2c>)
 80189c2:	b570      	push	{r4, r5, r6, lr}
 80189c4:	4d0a      	ldr	r5, [pc, #40]	@ (80189f0 <MoblePalCryptoHasNetworkKey+0x30>)
 80189c6:	8819      	ldrh	r1, [r3, #0]
 80189c8:	267c      	movs	r6, #124	@ 0x7c
 80189ca:	2300      	movs	r3, #0
 80189cc:	b2da      	uxtb	r2, r3
 80189ce:	428a      	cmp	r2, r1
 80189d0:	d301      	bcc.n	80189d6 <MoblePalCryptoHasNetworkKey+0x16>
 80189d2:	2000      	movs	r0, #0
 80189d4:	e008      	b.n	80189e8 <MoblePalCryptoHasNetworkKey+0x28>
 80189d6:	fb06 5202 	mla	r2, r6, r2, r5
 80189da:	3301      	adds	r3, #1
 80189dc:	f8b2 4448 	ldrh.w	r4, [r2, #1096]	@ 0x448
 80189e0:	4284      	cmp	r4, r0
 80189e2:	d1f3      	bne.n	80189cc <MoblePalCryptoHasNetworkKey+0xc>
 80189e4:	f892 0445 	ldrb.w	r0, [r2, #1093]	@ 0x445
 80189e8:	bd70      	pop	{r4, r5, r6, pc}
 80189ea:	bf00      	nop
 80189ec:	20000008 	.word	0x20000008
 80189f0:	2000140c 	.word	0x2000140c

080189f4 <MoblePalCryptoHasAppKey>:
 80189f4:	4b0a      	ldr	r3, [pc, #40]	@ (8018a20 <MoblePalCryptoHasAppKey+0x2c>)
 80189f6:	b570      	push	{r4, r5, r6, lr}
 80189f8:	4d0a      	ldr	r5, [pc, #40]	@ (8018a24 <MoblePalCryptoHasAppKey+0x30>)
 80189fa:	8919      	ldrh	r1, [r3, #8]
 80189fc:	262c      	movs	r6, #44	@ 0x2c
 80189fe:	2300      	movs	r3, #0
 8018a00:	b2da      	uxtb	r2, r3
 8018a02:	428a      	cmp	r2, r1
 8018a04:	d301      	bcc.n	8018a0a <MoblePalCryptoHasAppKey+0x16>
 8018a06:	2000      	movs	r0, #0
 8018a08:	e008      	b.n	8018a1c <MoblePalCryptoHasAppKey+0x28>
 8018a0a:	fb06 5202 	mla	r2, r6, r2, r5
 8018a0e:	3301      	adds	r3, #1
 8018a10:	f8b2 45ba 	ldrh.w	r4, [r2, #1466]	@ 0x5ba
 8018a14:	4284      	cmp	r4, r0
 8018a16:	d1f3      	bne.n	8018a00 <MoblePalCryptoHasAppKey+0xc>
 8018a18:	f892 05b8 	ldrb.w	r0, [r2, #1464]	@ 0x5b8
 8018a1c:	bd70      	pop	{r4, r5, r6, pc}
 8018a1e:	bf00      	nop
 8018a20:	20000008 	.word	0x20000008
 8018a24:	2000140c 	.word	0x2000140c

08018a28 <MoblePalCryptoSetNodeIdntyState>:
 8018a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a2a:	4605      	mov	r5, r0
 8018a2c:	460c      	mov	r4, r1
 8018a2e:	f7ff ffc7 	bl	80189c0 <MoblePalCryptoHasNetworkKey>
 8018a32:	b1c8      	cbz	r0, 8018a68 <MoblePalCryptoSetNodeIdntyState+0x40>
 8018a34:	2c01      	cmp	r4, #1
 8018a36:	d817      	bhi.n	8018a68 <MoblePalCryptoSetNodeIdntyState+0x40>
 8018a38:	4b0c      	ldr	r3, [pc, #48]	@ (8018a6c <MoblePalCryptoSetNodeIdntyState+0x44>)
 8018a3a:	4e0d      	ldr	r6, [pc, #52]	@ (8018a70 <MoblePalCryptoSetNodeIdntyState+0x48>)
 8018a3c:	8819      	ldrh	r1, [r3, #0]
 8018a3e:	2200      	movs	r2, #0
 8018a40:	277c      	movs	r7, #124	@ 0x7c
 8018a42:	b2d3      	uxtb	r3, r2
 8018a44:	428b      	cmp	r3, r1
 8018a46:	d301      	bcc.n	8018a4c <MoblePalCryptoSetNodeIdntyState+0x24>
 8018a48:	2000      	movs	r0, #0
 8018a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a4c:	fb07 6303 	mla	r3, r7, r3, r6
 8018a50:	f893 0445 	ldrb.w	r0, [r3, #1093]	@ 0x445
 8018a54:	2801      	cmp	r0, #1
 8018a56:	d105      	bne.n	8018a64 <MoblePalCryptoSetNodeIdntyState+0x3c>
 8018a58:	f8b3 0448 	ldrh.w	r0, [r3, #1096]	@ 0x448
 8018a5c:	42a8      	cmp	r0, r5
 8018a5e:	bf08      	it	eq
 8018a60:	f883 4444 	strbeq.w	r4, [r3, #1092]	@ 0x444
 8018a64:	3201      	adds	r2, #1
 8018a66:	e7ec      	b.n	8018a42 <MoblePalCryptoSetNodeIdntyState+0x1a>
 8018a68:	2003      	movs	r0, #3
 8018a6a:	e7ee      	b.n	8018a4a <MoblePalCryptoSetNodeIdntyState+0x22>
 8018a6c:	20000008 	.word	0x20000008
 8018a70:	2000140c 	.word	0x2000140c

08018a74 <MoblePalCryptoGetNodeIdntyState>:
 8018a74:	4b0c      	ldr	r3, [pc, #48]	@ (8018aa8 <MoblePalCryptoGetNodeIdntyState+0x34>)
 8018a76:	b570      	push	{r4, r5, r6, lr}
 8018a78:	8819      	ldrh	r1, [r3, #0]
 8018a7a:	4d0c      	ldr	r5, [pc, #48]	@ (8018aac <MoblePalCryptoGetNodeIdntyState+0x38>)
 8018a7c:	2200      	movs	r2, #0
 8018a7e:	267c      	movs	r6, #124	@ 0x7c
 8018a80:	b2d3      	uxtb	r3, r2
 8018a82:	428b      	cmp	r3, r1
 8018a84:	d301      	bcc.n	8018a8a <MoblePalCryptoGetNodeIdntyState+0x16>
 8018a86:	2000      	movs	r0, #0
 8018a88:	e00b      	b.n	8018aa2 <MoblePalCryptoGetNodeIdntyState+0x2e>
 8018a8a:	fb06 5303 	mla	r3, r6, r3, r5
 8018a8e:	f893 4445 	ldrb.w	r4, [r3, #1093]	@ 0x445
 8018a92:	2c01      	cmp	r4, #1
 8018a94:	d106      	bne.n	8018aa4 <MoblePalCryptoGetNodeIdntyState+0x30>
 8018a96:	f8b3 4448 	ldrh.w	r4, [r3, #1096]	@ 0x448
 8018a9a:	4284      	cmp	r4, r0
 8018a9c:	d102      	bne.n	8018aa4 <MoblePalCryptoGetNodeIdntyState+0x30>
 8018a9e:	f893 0444 	ldrb.w	r0, [r3, #1092]	@ 0x444
 8018aa2:	bd70      	pop	{r4, r5, r6, pc}
 8018aa4:	3201      	adds	r2, #1
 8018aa6:	e7eb      	b.n	8018a80 <MoblePalCryptoGetNodeIdntyState+0xc>
 8018aa8:	20000008 	.word	0x20000008
 8018aac:	2000140c 	.word	0x2000140c

08018ab0 <MoblePalCryptoGetNodeIdntyToBeAdvt>:
 8018ab0:	b530      	push	{r4, r5, lr}
 8018ab2:	4b11      	ldr	r3, [pc, #68]	@ (8018af8 <MoblePalCryptoGetNodeIdntyToBeAdvt+0x48>)
 8018ab4:	8819      	ldrh	r1, [r3, #0]
 8018ab6:	4b11      	ldr	r3, [pc, #68]	@ (8018afc <MoblePalCryptoGetNodeIdntyToBeAdvt+0x4c>)
 8018ab8:	f893 265d 	ldrb.w	r2, [r3, #1629]	@ 0x65d
 8018abc:	428a      	cmp	r2, r1
 8018abe:	bf24      	itt	cs
 8018ac0:	2200      	movcs	r2, #0
 8018ac2:	f883 265d 	strbcs.w	r2, [r3, #1629]	@ 0x65d
 8018ac6:	f893 065d 	ldrb.w	r0, [r3, #1629]	@ 0x65d
 8018aca:	257c      	movs	r5, #124	@ 0x7c
 8018acc:	b284      	uxth	r4, r0
 8018ace:	4602      	mov	r2, r0
 8018ad0:	42a1      	cmp	r1, r4
 8018ad2:	f100 0001 	add.w	r0, r0, #1
 8018ad6:	b2c0      	uxtb	r0, r0
 8018ad8:	d905      	bls.n	8018ae6 <MoblePalCryptoGetNodeIdntyToBeAdvt+0x36>
 8018ada:	fb05 3202 	mla	r2, r5, r2, r3
 8018ade:	f892 2444 	ldrb.w	r2, [r2, #1092]	@ 0x444
 8018ae2:	2a01      	cmp	r2, #1
 8018ae4:	d1f2      	bne.n	8018acc <MoblePalCryptoGetNodeIdntyToBeAdvt+0x1c>
 8018ae6:	f883 065d 	strb.w	r0, [r3, #1629]	@ 0x65d
 8018aea:	4b05      	ldr	r3, [pc, #20]	@ (8018b00 <MoblePalCryptoGetNodeIdntyToBeAdvt+0x50>)
 8018aec:	227c      	movs	r2, #124	@ 0x7c
 8018aee:	3801      	subs	r0, #1
 8018af0:	fb02 3000 	mla	r0, r2, r0, r3
 8018af4:	bd30      	pop	{r4, r5, pc}
 8018af6:	bf00      	nop
 8018af8:	20000008 	.word	0x20000008
 8018afc:	2000140c 	.word	0x2000140c
 8018b00:	20001830 	.word	0x20001830

08018b04 <MoblePalCryptoGetNetworkIdToBeAdvt>:
 8018b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b06:	491c      	ldr	r1, [pc, #112]	@ (8018b78 <MoblePalCryptoGetNetworkIdToBeAdvt+0x74>)
 8018b08:	481c      	ldr	r0, [pc, #112]	@ (8018b7c <MoblePalCryptoGetNetworkIdToBeAdvt+0x78>)
 8018b0a:	f891 365e 	ldrb.w	r3, [r1, #1630]	@ 0x65e
 8018b0e:	f891 661c 	ldrb.w	r6, [r1, #1564]	@ 0x61c
 8018b12:	4c1b      	ldr	r4, [pc, #108]	@ (8018b80 <MoblePalCryptoGetNetworkIdToBeAdvt+0x7c>)
 8018b14:	42b3      	cmp	r3, r6
 8018b16:	bf24      	itt	cs
 8018b18:	2300      	movcs	r3, #0
 8018b1a:	f881 365e 	strbcs.w	r3, [r1, #1630]	@ 0x65e
 8018b1e:	f891 565e 	ldrb.w	r5, [r1, #1630]	@ 0x65e
 8018b22:	ebc5 1245 	rsb	r2, r5, r5, lsl #5
 8018b26:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8018b2a:	442c      	add	r4, r5
 8018b2c:	b2eb      	uxtb	r3, r5
 8018b2e:	429e      	cmp	r6, r3
 8018b30:	d810      	bhi.n	8018b54 <MoblePalCryptoGetNetworkIdToBeAdvt+0x50>
 8018b32:	3301      	adds	r3, #1
 8018b34:	b2db      	uxtb	r3, r3
 8018b36:	f881 365e 	strb.w	r3, [r1, #1630]	@ 0x65e
 8018b3a:	227c      	movs	r2, #124	@ 0x7c
 8018b3c:	3b01      	subs	r3, #1
 8018b3e:	4353      	muls	r3, r2
 8018b40:	4a10      	ldr	r2, [pc, #64]	@ (8018b84 <MoblePalCryptoGetNetworkIdToBeAdvt+0x80>)
 8018b42:	442a      	add	r2, r5
 8018b44:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 8018b48:	2a02      	cmp	r2, #2
 8018b4a:	bf0c      	ite	eq
 8018b4c:	3330      	addeq	r3, #48	@ 0x30
 8018b4e:	3328      	addne	r3, #40	@ 0x28
 8018b50:	4418      	add	r0, r3
 8018b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b54:	f892 7021 	ldrb.w	r7, [r2, #33]	@ 0x21
 8018b58:	2f01      	cmp	r7, #1
 8018b5a:	d102      	bne.n	8018b62 <MoblePalCryptoGetNetworkIdToBeAdvt+0x5e>
 8018b5c:	7827      	ldrb	r7, [r4, #0]
 8018b5e:	2f02      	cmp	r7, #2
 8018b60:	d1e7      	bne.n	8018b32 <MoblePalCryptoGetNetworkIdToBeAdvt+0x2e>
 8018b62:	f892 7022 	ldrb.w	r7, [r2, #34]	@ 0x22
 8018b66:	2f01      	cmp	r7, #1
 8018b68:	d102      	bne.n	8018b70 <MoblePalCryptoGetNetworkIdToBeAdvt+0x6c>
 8018b6a:	7827      	ldrb	r7, [r4, #0]
 8018b6c:	2f02      	cmp	r7, #2
 8018b6e:	d0e0      	beq.n	8018b32 <MoblePalCryptoGetNetworkIdToBeAdvt+0x2e>
 8018b70:	3501      	adds	r5, #1
 8018b72:	327c      	adds	r2, #124	@ 0x7c
 8018b74:	3401      	adds	r4, #1
 8018b76:	e7d9      	b.n	8018b2c <MoblePalCryptoGetNetworkIdToBeAdvt+0x28>
 8018b78:	2000140c 	.word	0x2000140c
 8018b7c:	20001830 	.word	0x20001830
 8018b80:	200003d4 	.word	0x200003d4
 8018b84:	20000314 	.word	0x20000314

08018b88 <MoblePalCrypto_GetNetKeyIndexes>:
 8018b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b8a:	2300      	movs	r3, #0
 8018b8c:	f8df c038 	ldr.w	ip, [pc, #56]	@ 8018bc8 <MoblePalCrypto_GetNetKeyIndexes+0x40>
 8018b90:	4e0c      	ldr	r6, [pc, #48]	@ (8018bc4 <MoblePalCrypto_GetNetKeyIndexes+0x3c>)
 8018b92:	461a      	mov	r2, r3
 8018b94:	f04f 0e7c 	mov.w	lr, #124	@ 0x7c
 8018b98:	f8bc 7000 	ldrh.w	r7, [ip]
 8018b9c:	b2dc      	uxtb	r4, r3
 8018b9e:	42bc      	cmp	r4, r7
 8018ba0:	d303      	bcc.n	8018baa <MoblePalCrypto_GetNetKeyIndexes+0x22>
 8018ba2:	f896 361c 	ldrb.w	r3, [r6, #1564]	@ 0x61c
 8018ba6:	800b      	strh	r3, [r1, #0]
 8018ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018baa:	fb0e 6404 	mla	r4, lr, r4, r6
 8018bae:	f894 5445 	ldrb.w	r5, [r4, #1093]	@ 0x445
 8018bb2:	b12d      	cbz	r5, 8018bc0 <MoblePalCrypto_GetNetKeyIndexes+0x38>
 8018bb4:	f8b4 4448 	ldrh.w	r4, [r4, #1096]	@ 0x448
 8018bb8:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
 8018bbc:	3201      	adds	r2, #1
 8018bbe:	b2d2      	uxtb	r2, r2
 8018bc0:	3301      	adds	r3, #1
 8018bc2:	e7e9      	b.n	8018b98 <MoblePalCrypto_GetNetKeyIndexes+0x10>
 8018bc4:	2000140c 	.word	0x2000140c
 8018bc8:	20000008 	.word	0x20000008

08018bcc <MoblePalCrypto_isPrimarySubnet>:
 8018bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8018bfc <MoblePalCrypto_isPrimarySubnet+0x30>)
 8018bce:	b530      	push	{r4, r5, lr}
 8018bd0:	4c0b      	ldr	r4, [pc, #44]	@ (8018c00 <MoblePalCrypto_isPrimarySubnet+0x34>)
 8018bd2:	8819      	ldrh	r1, [r3, #0]
 8018bd4:	257c      	movs	r5, #124	@ 0x7c
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	b2da      	uxtb	r2, r3
 8018bda:	428a      	cmp	r2, r1
 8018bdc:	d301      	bcc.n	8018be2 <MoblePalCrypto_isPrimarySubnet+0x16>
 8018bde:	2000      	movs	r0, #0
 8018be0:	bd30      	pop	{r4, r5, pc}
 8018be2:	fb05 4202 	mla	r2, r5, r2, r4
 8018be6:	f892 0445 	ldrb.w	r0, [r2, #1093]	@ 0x445
 8018bea:	b110      	cbz	r0, 8018bf2 <MoblePalCrypto_isPrimarySubnet+0x26>
 8018bec:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	@ 0x448
 8018bf0:	b10a      	cbz	r2, 8018bf6 <MoblePalCrypto_isPrimarySubnet+0x2a>
 8018bf2:	3301      	adds	r3, #1
 8018bf4:	e7f0      	b.n	8018bd8 <MoblePalCrypto_isPrimarySubnet+0xc>
 8018bf6:	2001      	movs	r0, #1
 8018bf8:	e7f2      	b.n	8018be0 <MoblePalCrypto_isPrimarySubnet+0x14>
 8018bfa:	bf00      	nop
 8018bfc:	20000008 	.word	0x20000008
 8018c00:	2000140c 	.word	0x2000140c

08018c04 <MoblePalCryptoSetDevKey>:
 8018c04:	b510      	push	{r4, lr}
 8018c06:	4c05      	ldr	r4, [pc, #20]	@ (8018c1c <MoblePalCryptoSetDevKey+0x18>)
 8018c08:	4601      	mov	r1, r0
 8018c0a:	2210      	movs	r2, #16
 8018c0c:	f504 60c4 	add.w	r0, r4, #1568	@ 0x620
 8018c10:	f010 fab2 	bl	8029178 <memmove>
 8018c14:	2301      	movs	r3, #1
 8018c16:	f884 361e 	strb.w	r3, [r4, #1566]	@ 0x61e
 8018c1a:	bd10      	pop	{r4, pc}
 8018c1c:	2000140c 	.word	0x2000140c

08018c20 <MoblePalCryptoForgetAllKeys>:
 8018c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c24:	4e36      	ldr	r6, [pc, #216]	@ (8018d00 <MoblePalCryptoForgetAllKeys+0xe0>)
 8018c26:	4c37      	ldr	r4, [pc, #220]	@ (8018d04 <MoblePalCryptoForgetAllKeys+0xe4>)
 8018c28:	2500      	movs	r5, #0
 8018c2a:	8832      	ldrh	r2, [r6, #0]
 8018c2c:	b2ef      	uxtb	r7, r5
 8018c2e:	4297      	cmp	r7, r2
 8018c30:	d314      	bcc.n	8018c5c <MoblePalCryptoForgetAllKeys+0x3c>
 8018c32:	f04f 0a00 	mov.w	sl, #0
 8018c36:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 8018d0c <MoblePalCryptoForgetAllKeys+0xec>
 8018c3a:	272c      	movs	r7, #44	@ 0x2c
 8018c3c:	46d0      	mov	r8, sl
 8018c3e:	8932      	ldrh	r2, [r6, #8]
 8018c40:	fa5f f58a 	uxtb.w	r5, sl
 8018c44:	4295      	cmp	r5, r2
 8018c46:	d32e      	bcc.n	8018ca6 <MoblePalCryptoForgetAllKeys+0x86>
 8018c48:	2210      	movs	r2, #16
 8018c4a:	2100      	movs	r1, #0
 8018c4c:	482e      	ldr	r0, [pc, #184]	@ (8018d08 <MoblePalCryptoForgetAllKeys+0xe8>)
 8018c4e:	f010 faad 	bl	80291ac <memset>
 8018c52:	2000      	movs	r0, #0
 8018c54:	f884 061e 	strb.w	r0, [r4, #1566]	@ 0x61e
 8018c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c5c:	237c      	movs	r3, #124	@ 0x7c
 8018c5e:	437b      	muls	r3, r7
 8018c60:	18e2      	adds	r2, r4, r3
 8018c62:	f892 1445 	ldrb.w	r1, [r2, #1093]	@ 0x445
 8018c66:	2901      	cmp	r1, #1
 8018c68:	d10c      	bne.n	8018c84 <MoblePalCryptoForgetAllKeys+0x64>
 8018c6a:	4828      	ldr	r0, [pc, #160]	@ (8018d0c <MoblePalCryptoForgetAllKeys+0xec>)
 8018c6c:	2100      	movs	r1, #0
 8018c6e:	f882 1445 	strb.w	r1, [r2, #1093]	@ 0x445
 8018c72:	4418      	add	r0, r3
 8018c74:	2210      	movs	r2, #16
 8018c76:	f010 fa99 	bl	80291ac <memset>
 8018c7a:	f894 361c 	ldrb.w	r3, [r4, #1564]	@ 0x61c
 8018c7e:	3b01      	subs	r3, #1
 8018c80:	f884 361c 	strb.w	r3, [r4, #1564]	@ 0x61c
 8018c84:	237c      	movs	r3, #124	@ 0x7c
 8018c86:	437b      	muls	r3, r7
 8018c88:	18e2      	adds	r2, r4, r3
 8018c8a:	f892 1446 	ldrb.w	r1, [r2, #1094]	@ 0x446
 8018c8e:	2901      	cmp	r1, #1
 8018c90:	d107      	bne.n	8018ca2 <MoblePalCryptoForgetAllKeys+0x82>
 8018c92:	481f      	ldr	r0, [pc, #124]	@ (8018d10 <MoblePalCryptoForgetAllKeys+0xf0>)
 8018c94:	2100      	movs	r1, #0
 8018c96:	f882 1446 	strb.w	r1, [r2, #1094]	@ 0x446
 8018c9a:	4418      	add	r0, r3
 8018c9c:	2210      	movs	r2, #16
 8018c9e:	f010 fa85 	bl	80291ac <memset>
 8018ca2:	3501      	adds	r5, #1
 8018ca4:	e7c1      	b.n	8018c2a <MoblePalCryptoForgetAllKeys+0xa>
 8018ca6:	fb07 f005 	mul.w	r0, r7, r5
 8018caa:	1823      	adds	r3, r4, r0
 8018cac:	f893 25b8 	ldrb.w	r2, [r3, #1464]	@ 0x5b8
 8018cb0:	2a01      	cmp	r2, #1
 8018cb2:	d10d      	bne.n	8018cd0 <MoblePalCryptoForgetAllKeys+0xb0>
 8018cb4:	f500 70ba 	add.w	r0, r0, #372	@ 0x174
 8018cb8:	f883 85b8 	strb.w	r8, [r3, #1464]	@ 0x5b8
 8018cbc:	2210      	movs	r2, #16
 8018cbe:	2100      	movs	r1, #0
 8018cc0:	4448      	add	r0, r9
 8018cc2:	f010 fa73 	bl	80291ac <memset>
 8018cc6:	f894 361d 	ldrb.w	r3, [r4, #1565]	@ 0x61d
 8018cca:	3b01      	subs	r3, #1
 8018ccc:	f884 361d 	strb.w	r3, [r4, #1565]	@ 0x61d
 8018cd0:	437d      	muls	r5, r7
 8018cd2:	1963      	adds	r3, r4, r5
 8018cd4:	f893 25b9 	ldrb.w	r2, [r3, #1465]	@ 0x5b9
 8018cd8:	2a01      	cmp	r2, #1
 8018cda:	d10e      	bne.n	8018cfa <MoblePalCryptoForgetAllKeys+0xda>
 8018cdc:	f505 75c2 	add.w	r5, r5, #388	@ 0x184
 8018ce0:	f883 85b9 	strb.w	r8, [r3, #1465]	@ 0x5b9
 8018ce4:	2210      	movs	r2, #16
 8018ce6:	2100      	movs	r1, #0
 8018ce8:	eb09 0005 	add.w	r0, r9, r5
 8018cec:	f010 fa5e 	bl	80291ac <memset>
 8018cf0:	f894 361d 	ldrb.w	r3, [r4, #1565]	@ 0x61d
 8018cf4:	3b01      	subs	r3, #1
 8018cf6:	f884 361d 	strb.w	r3, [r4, #1565]	@ 0x61d
 8018cfa:	f10a 0a01 	add.w	sl, sl, #1
 8018cfe:	e79e      	b.n	8018c3e <MoblePalCryptoForgetAllKeys+0x1e>
 8018d00:	20000008 	.word	0x20000008
 8018d04:	2000140c 	.word	0x2000140c
 8018d08:	20001a2c 	.word	0x20001a2c
 8018d0c:	20001830 	.word	0x20001830
 8018d10:	20001840 	.word	0x20001840

08018d14 <MoblePalCryptoModelsDeInit>:
 8018d14:	b570      	push	{r4, r5, r6, lr}
 8018d16:	4c1e      	ldr	r4, [pc, #120]	@ (8018d90 <MoblePalCryptoModelsDeInit+0x7c>)
 8018d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d1a:	b09e      	sub	sp, #120	@ 0x78
 8018d1c:	ad0e      	add	r5, sp, #56	@ 0x38
 8018d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018d28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8018d2c:	f104 0610 	add.w	r6, r4, #16
 8018d30:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8018d34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8018d36:	ad01      	add	r5, sp, #4
 8018d38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018d3a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8018d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018d3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8018d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018d42:	6833      	ldr	r3, [r6, #0]
 8018d44:	602b      	str	r3, [r5, #0]
 8018d46:	3c34      	subs	r4, #52	@ 0x34
 8018d48:	2500      	movs	r5, #0
 8018d4a:	4620      	mov	r0, r4
 8018d4c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8018d50:	2100      	movs	r1, #0
 8018d52:	3501      	adds	r5, #1
 8018d54:	f010 fa2a 	bl	80291ac <memset>
 8018d58:	2d05      	cmp	r5, #5
 8018d5a:	f504 7439 	add.w	r4, r4, #740	@ 0x2e4
 8018d5e:	d1f4      	bne.n	8018d4a <MoblePalCryptoModelsDeInit+0x36>
 8018d60:	ad0e      	add	r5, sp, #56	@ 0x38
 8018d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d64:	4c0a      	ldr	r4, [pc, #40]	@ (8018d90 <MoblePalCryptoModelsDeInit+0x7c>)
 8018d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8018d74:	ad01      	add	r5, sp, #4
 8018d76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d7c:	3410      	adds	r4, #16
 8018d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d88:	682b      	ldr	r3, [r5, #0]
 8018d8a:	6023      	str	r3, [r4, #0]
 8018d8c:	b01e      	add	sp, #120	@ 0x78
 8018d8e:	bd70      	pop	{r4, r5, r6, pc}
 8018d90:	200003c4 	.word	0x200003c4

08018d94 <MoblePalCryptoGetNetworkSecurityKeys>:
 8018d94:	4b09      	ldr	r3, [pc, #36]	@ (8018dbc <MoblePalCryptoGetNetworkSecurityKeys+0x28>)
 8018d96:	227c      	movs	r2, #124	@ 0x7c
 8018d98:	fb02 3301 	mla	r3, r2, r1, r3
 8018d9c:	b958      	cbnz	r0, 8018db6 <MoblePalCryptoGetNetworkSecurityKeys+0x22>
 8018d9e:	f893 3445 	ldrb.w	r3, [r3, #1093]	@ 0x445
 8018da2:	4807      	ldr	r0, [pc, #28]	@ (8018dc0 <MoblePalCryptoGetNetworkSecurityKeys+0x2c>)
 8018da4:	2b01      	cmp	r3, #1
 8018da6:	bf18      	it	ne
 8018da8:	2100      	movne	r1, #0
 8018daa:	b209      	sxth	r1, r1
 8018dac:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8018db0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8018db4:	4770      	bx	lr
 8018db6:	f893 3446 	ldrb.w	r3, [r3, #1094]	@ 0x446
 8018dba:	e7f2      	b.n	8018da2 <MoblePalCryptoGetNetworkSecurityKeys+0xe>
 8018dbc:	2000140c 	.word	0x2000140c
 8018dc0:	20001830 	.word	0x20001830

08018dc4 <MoblePalCryptoGetApplicationSecurityKeys>:
 8018dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8018df0 <MoblePalCryptoGetApplicationSecurityKeys+0x2c>)
 8018dc6:	222c      	movs	r2, #44	@ 0x2c
 8018dc8:	fb02 3301 	mla	r3, r2, r1, r3
 8018dcc:	b960      	cbnz	r0, 8018de8 <MoblePalCryptoGetApplicationSecurityKeys+0x24>
 8018dce:	f893 35b8 	ldrb.w	r3, [r3, #1464]	@ 0x5b8
 8018dd2:	4808      	ldr	r0, [pc, #32]	@ (8018df4 <MoblePalCryptoGetApplicationSecurityKeys+0x30>)
 8018dd4:	2b01      	cmp	r3, #1
 8018dd6:	bf18      	it	ne
 8018dd8:	2100      	movne	r1, #0
 8018dda:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8018dde:	232c      	movs	r3, #44	@ 0x2c
 8018de0:	fb13 2301 	smlabb	r3, r3, r1, r2
 8018de4:	4418      	add	r0, r3
 8018de6:	4770      	bx	lr
 8018de8:	f893 35b9 	ldrb.w	r3, [r3, #1465]	@ 0x5b9
 8018dec:	e7f1      	b.n	8018dd2 <MoblePalCryptoGetApplicationSecurityKeys+0xe>
 8018dee:	bf00      	nop
 8018df0:	2000140c 	.word	0x2000140c
 8018df4:	20001830 	.word	0x20001830

08018df8 <MoblePalCryptoGetSecurityKeys_Beacon>:
 8018df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018dfc:	4c18      	ldr	r4, [pc, #96]	@ (8018e60 <MoblePalCryptoGetSecurityKeys_Beacon+0x68>)
 8018dfe:	f8df 9068 	ldr.w	r9, [pc, #104]	@ 8018e68 <MoblePalCryptoGetSecurityKeys_Beacon+0x70>
 8018e02:	f894 861c 	ldrb.w	r8, [r4, #1564]	@ 0x61c
 8018e06:	4607      	mov	r7, r0
 8018e08:	f204 4454 	addw	r4, r4, #1108	@ 0x454
 8018e0c:	2600      	movs	r6, #0
 8018e0e:	b2f5      	uxtb	r5, r6
 8018e10:	45a8      	cmp	r8, r5
 8018e12:	d807      	bhi.n	8018e24 <MoblePalCryptoGetSecurityKeys_Beacon+0x2c>
 8018e14:	2500      	movs	r5, #0
 8018e16:	4813      	ldr	r0, [pc, #76]	@ (8018e64 <MoblePalCryptoGetSecurityKeys_Beacon+0x6c>)
 8018e18:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 8018e1c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8018e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e24:	f814 3c0f 	ldrb.w	r3, [r4, #-15]
 8018e28:	b163      	cbz	r3, 8018e44 <MoblePalCryptoGetSecurityKeys_Beacon+0x4c>
 8018e2a:	eb06 0309 	add.w	r3, r6, r9
 8018e2e:	7d1b      	ldrb	r3, [r3, #20]
 8018e30:	2b02      	cmp	r3, #2
 8018e32:	d007      	beq.n	8018e44 <MoblePalCryptoGetSecurityKeys_Beacon+0x4c>
 8018e34:	2208      	movs	r2, #8
 8018e36:	f1a4 0108 	sub.w	r1, r4, #8
 8018e3a:	4638      	mov	r0, r7
 8018e3c:	f010 f98c 	bl	8029158 <memcmp>
 8018e40:	2800      	cmp	r0, #0
 8018e42:	d0e8      	beq.n	8018e16 <MoblePalCryptoGetSecurityKeys_Beacon+0x1e>
 8018e44:	f814 3c0e 	ldrb.w	r3, [r4, #-14]
 8018e48:	b133      	cbz	r3, 8018e58 <MoblePalCryptoGetSecurityKeys_Beacon+0x60>
 8018e4a:	2208      	movs	r2, #8
 8018e4c:	4621      	mov	r1, r4
 8018e4e:	4638      	mov	r0, r7
 8018e50:	f010 f982 	bl	8029158 <memcmp>
 8018e54:	2800      	cmp	r0, #0
 8018e56:	d0de      	beq.n	8018e16 <MoblePalCryptoGetSecurityKeys_Beacon+0x1e>
 8018e58:	3601      	adds	r6, #1
 8018e5a:	347c      	adds	r4, #124	@ 0x7c
 8018e5c:	e7d7      	b.n	8018e0e <MoblePalCryptoGetSecurityKeys_Beacon+0x16>
 8018e5e:	bf00      	nop
 8018e60:	2000140c 	.word	0x2000140c
 8018e64:	20001830 	.word	0x20001830
 8018e68:	200003c0 	.word	0x200003c0

08018e6c <MoblePalCryptoS1>:
 8018e6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018e6e:	2400      	movs	r4, #0
 8018e70:	4603      	mov	r3, r0
 8018e72:	4668      	mov	r0, sp
 8018e74:	e9cd 4400 	strd	r4, r4, [sp]
 8018e78:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8018e7c:	f7ff f8c0 	bl	8018000 <BAES_CmacCompute>
 8018e80:	4620      	mov	r0, r4
 8018e82:	b004      	add	sp, #16
 8018e84:	bd10      	pop	{r4, pc}
	...

08018e88 <MobleConfigModelGetAddressFromVirtual>:
 8018e88:	b510      	push	{r4, lr}
 8018e8a:	b088      	sub	sp, #32
 8018e8c:	4604      	mov	r4, r0
 8018e8e:	490b      	ldr	r1, [pc, #44]	@ (8018ebc <MobleConfigModelGetAddressFromVirtual+0x34>)
 8018e90:	2204      	movs	r2, #4
 8018e92:	4668      	mov	r0, sp
 8018e94:	f7ff ffea 	bl	8018e6c <MoblePalCryptoS1>
 8018e98:	ab04      	add	r3, sp, #16
 8018e9a:	4668      	mov	r0, sp
 8018e9c:	2210      	movs	r2, #16
 8018e9e:	4621      	mov	r1, r4
 8018ea0:	f7ff f8ae 	bl	8018000 <BAES_CmacCompute>
 8018ea4:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8018ea8:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8018eac:	021b      	lsls	r3, r3, #8
 8018eae:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8018eb2:	4318      	orrs	r0, r3
 8018eb4:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8018eb8:	b008      	add	sp, #32
 8018eba:	bd10      	pop	{r4, pc}
 8018ebc:	08030f73 	.word	0x08030f73

08018ec0 <MoblePalCryptoK2>:
 8018ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ec4:	b098      	sub	sp, #96	@ 0x60
 8018ec6:	ae0f      	add	r6, sp, #60	@ 0x3c
 8018ec8:	460d      	mov	r5, r1
 8018eca:	4680      	mov	r8, r0
 8018ecc:	2100      	movs	r1, #0
 8018ece:	4691      	mov	r9, r2
 8018ed0:	4630      	mov	r0, r6
 8018ed2:	2221      	movs	r2, #33	@ 0x21
 8018ed4:	e9dd a421 	ldrd	sl, r4, [sp, #132]	@ 0x84
 8018ed8:	461f      	mov	r7, r3
 8018eda:	f010 f967 	bl	80291ac <memset>
 8018ede:	2210      	movs	r2, #16
 8018ee0:	2100      	movs	r1, #0
 8018ee2:	a803      	add	r0, sp, #12
 8018ee4:	f010 f962 	bl	80291ac <memset>
 8018ee8:	4929      	ldr	r1, [pc, #164]	@ (8018f90 <MoblePalCryptoK2+0xd0>)
 8018eea:	2204      	movs	r2, #4
 8018eec:	a80b      	add	r0, sp, #44	@ 0x2c
 8018eee:	f7ff ffbd 	bl	8018e6c <MoblePalCryptoS1>
 8018ef2:	ab03      	add	r3, sp, #12
 8018ef4:	4639      	mov	r1, r7
 8018ef6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018ef8:	a80b      	add	r0, sp, #44	@ 0x2c
 8018efa:	f7ff f881 	bl	8018000 <BAES_CmacCompute>
 8018efe:	4622      	mov	r2, r4
 8018f00:	4651      	mov	r1, sl
 8018f02:	4630      	mov	r0, r6
 8018f04:	f010 f9e3 	bl	80292ce <memcpy>
 8018f08:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 8018f0c:	446b      	add	r3, sp
 8018f0e:	af07      	add	r7, sp, #28
 8018f10:	2201      	movs	r2, #1
 8018f12:	f803 2c24 	strb.w	r2, [r3, #-36]
 8018f16:	4631      	mov	r1, r6
 8018f18:	463b      	mov	r3, r7
 8018f1a:	18a2      	adds	r2, r4, r2
 8018f1c:	a803      	add	r0, sp, #12
 8018f1e:	f7ff f86f 	bl	8018000 <BAES_CmacCompute>
 8018f22:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8018f26:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8018f2a:	4622      	mov	r2, r4
 8018f2c:	4651      	mov	r1, sl
 8018f2e:	a813      	add	r0, sp, #76	@ 0x4c
 8018f30:	f010 f9cd 	bl	80292ce <memcpy>
 8018f34:	f104 0370 	add.w	r3, r4, #112	@ 0x70
 8018f38:	eb0d 0703 	add.w	r7, sp, r3
 8018f3c:	2302      	movs	r3, #2
 8018f3e:	f104 0211 	add.w	r2, r4, #17
 8018f42:	f807 3c24 	strb.w	r3, [r7, #-36]
 8018f46:	4631      	mov	r1, r6
 8018f48:	462b      	mov	r3, r5
 8018f4a:	a803      	add	r0, sp, #12
 8018f4c:	9201      	str	r2, [sp, #4]
 8018f4e:	f7ff f857 	bl	8018000 <BAES_CmacCompute>
 8018f52:	9a01      	ldr	r2, [sp, #4]
 8018f54:	46b4      	mov	ip, r6
 8018f56:	f105 0410 	add.w	r4, r5, #16
 8018f5a:	6828      	ldr	r0, [r5, #0]
 8018f5c:	6869      	ldr	r1, [r5, #4]
 8018f5e:	4663      	mov	r3, ip
 8018f60:	c303      	stmia	r3!, {r0, r1}
 8018f62:	3508      	adds	r5, #8
 8018f64:	42a5      	cmp	r5, r4
 8018f66:	469c      	mov	ip, r3
 8018f68:	d1f7      	bne.n	8018f5a <MoblePalCryptoK2+0x9a>
 8018f6a:	2303      	movs	r3, #3
 8018f6c:	f807 3c24 	strb.w	r3, [r7, #-36]
 8018f70:	a803      	add	r0, sp, #12
 8018f72:	464b      	mov	r3, r9
 8018f74:	4631      	mov	r1, r6
 8018f76:	f7ff f843 	bl	8018000 <BAES_CmacCompute>
 8018f7a:	f89d 302b 	ldrb.w	r3, [sp, #43]	@ 0x2b
 8018f7e:	2000      	movs	r0, #0
 8018f80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018f84:	f888 3000 	strb.w	r3, [r8]
 8018f88:	b018      	add	sp, #96	@ 0x60
 8018f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f8e:	bf00      	nop
 8018f90:	08030f78 	.word	0x08030f78

08018f94 <MoblePalCryptoK3>:
 8018f94:	b530      	push	{r4, r5, lr}
 8018f96:	4b12      	ldr	r3, [pc, #72]	@ (8018fe0 <MoblePalCryptoK3+0x4c>)
 8018f98:	b08f      	sub	sp, #60	@ 0x3c
 8018f9a:	4604      	mov	r4, r0
 8018f9c:	6818      	ldr	r0, [r3, #0]
 8018f9e:	9000      	str	r0, [sp, #0]
 8018fa0:	791b      	ldrb	r3, [r3, #4]
 8018fa2:	f88d 3004 	strb.w	r3, [sp, #4]
 8018fa6:	460d      	mov	r5, r1
 8018fa8:	2204      	movs	r2, #4
 8018faa:	490e      	ldr	r1, [pc, #56]	@ (8018fe4 <MoblePalCryptoK3+0x50>)
 8018fac:	a802      	add	r0, sp, #8
 8018fae:	f7ff ff5d 	bl	8018e6c <MoblePalCryptoS1>
 8018fb2:	2801      	cmp	r0, #1
 8018fb4:	d812      	bhi.n	8018fdc <MoblePalCryptoK3+0x48>
 8018fb6:	ab06      	add	r3, sp, #24
 8018fb8:	2210      	movs	r2, #16
 8018fba:	4629      	mov	r1, r5
 8018fbc:	a802      	add	r0, sp, #8
 8018fbe:	f7ff f81f 	bl	8018000 <BAES_CmacCompute>
 8018fc2:	ab0a      	add	r3, sp, #40	@ 0x28
 8018fc4:	4669      	mov	r1, sp
 8018fc6:	a806      	add	r0, sp, #24
 8018fc8:	2205      	movs	r2, #5
 8018fca:	f7ff f819 	bl	8018000 <BAES_CmacCompute>
 8018fce:	ab0c      	add	r3, sp, #48	@ 0x30
 8018fd0:	cb03      	ldmia	r3!, {r0, r1}
 8018fd2:	6020      	str	r0, [r4, #0]
 8018fd4:	6061      	str	r1, [r4, #4]
 8018fd6:	2000      	movs	r0, #0
 8018fd8:	b00f      	add	sp, #60	@ 0x3c
 8018fda:	bd30      	pop	{r4, r5, pc}
 8018fdc:	2002      	movs	r0, #2
 8018fde:	e7fb      	b.n	8018fd8 <MoblePalCryptoK3+0x44>
 8018fe0:	08030f82 	.word	0x08030f82
 8018fe4:	08030f7d 	.word	0x08030f7d

08018fe8 <MoblePalCryptoK4>:
 8018fe8:	b530      	push	{r4, r5, lr}
 8018fea:	b08f      	sub	sp, #60	@ 0x3c
 8018fec:	4b10      	ldr	r3, [pc, #64]	@ (8019030 <MoblePalCryptoK4+0x48>)
 8018fee:	9301      	str	r3, [sp, #4]
 8018ff0:	4604      	mov	r4, r0
 8018ff2:	460d      	mov	r5, r1
 8018ff4:	2204      	movs	r2, #4
 8018ff6:	490f      	ldr	r1, [pc, #60]	@ (8019034 <MoblePalCryptoK4+0x4c>)
 8018ff8:	a802      	add	r0, sp, #8
 8018ffa:	f7ff ff37 	bl	8018e6c <MoblePalCryptoS1>
 8018ffe:	2801      	cmp	r0, #1
 8019000:	d814      	bhi.n	801902c <MoblePalCryptoK4+0x44>
 8019002:	ab06      	add	r3, sp, #24
 8019004:	2210      	movs	r2, #16
 8019006:	4629      	mov	r1, r5
 8019008:	a802      	add	r0, sp, #8
 801900a:	f7fe fff9 	bl	8018000 <BAES_CmacCompute>
 801900e:	2204      	movs	r2, #4
 8019010:	ab0a      	add	r3, sp, #40	@ 0x28
 8019012:	a806      	add	r0, sp, #24
 8019014:	eb0d 0102 	add.w	r1, sp, r2
 8019018:	f7fe fff2 	bl	8018000 <BAES_CmacCompute>
 801901c:	f89d 3037 	ldrb.w	r3, [sp, #55]	@ 0x37
 8019020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019024:	7023      	strb	r3, [r4, #0]
 8019026:	2000      	movs	r0, #0
 8019028:	b00f      	add	sp, #60	@ 0x3c
 801902a:	bd30      	pop	{r4, r5, pc}
 801902c:	2002      	movs	r0, #2
 801902e:	e7fb      	b.n	8019028 <MoblePalCryptoK4+0x40>
 8019030:	01366469 	.word	0x01366469
 8019034:	08030f88 	.word	0x08030f88

08019038 <MoblePalCryptoSetNewAppKey>:
 8019038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801903c:	4f40      	ldr	r7, [pc, #256]	@ (8019140 <MoblePalCryptoSetNewAppKey+0x108>)
 801903e:	4c41      	ldr	r4, [pc, #260]	@ (8019144 <MoblePalCryptoSetNewAppKey+0x10c>)
 8019040:	883e      	ldrh	r6, [r7, #0]
 8019042:	4603      	mov	r3, r0
 8019044:	f04f 0e7c 	mov.w	lr, #124	@ 0x7c
 8019048:	2000      	movs	r0, #0
 801904a:	b2c5      	uxtb	r5, r0
 801904c:	42b5      	cmp	r5, r6
 801904e:	d301      	bcc.n	8019054 <MoblePalCryptoSetNewAppKey+0x1c>
 8019050:	2500      	movs	r5, #0
 8019052:	e029      	b.n	80190a8 <MoblePalCryptoSetNewAppKey+0x70>
 8019054:	fb0e 4505 	mla	r5, lr, r5, r4
 8019058:	3001      	adds	r0, #1
 801905a:	f8b5 5448 	ldrh.w	r5, [r5, #1096]	@ 0x448
 801905e:	4295      	cmp	r5, r2
 8019060:	d1f3      	bne.n	801904a <MoblePalCryptoSetNewAppKey+0x12>
 8019062:	2600      	movs	r6, #0
 8019064:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8019068:	4630      	mov	r0, r6
 801906a:	f04f 092c 	mov.w	r9, #44	@ 0x2c
 801906e:	b2f5      	uxtb	r5, r6
 8019070:	4545      	cmp	r5, r8
 8019072:	d302      	bcc.n	801907a <MoblePalCryptoSetNewAppKey+0x42>
 8019074:	b1c0      	cbz	r0, 80190a8 <MoblePalCryptoSetNewAppKey+0x70>
 8019076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801907a:	fb09 f005 	mul.w	r0, r9, r5
 801907e:	eb04 0c00 	add.w	ip, r4, r0
 8019082:	f89c e5b9 	ldrb.w	lr, [ip, #1465]	@ 0x5b9
 8019086:	f1be 0f00 	cmp.w	lr, #0
 801908a:	d11b      	bne.n	80190c4 <MoblePalCryptoSetNewAppKey+0x8c>
 801908c:	f8bc e5be 	ldrh.w	lr, [ip, #1470]	@ 0x5be
 8019090:	4596      	cmp	lr, r2
 8019092:	d12f      	bne.n	80190f4 <MoblePalCryptoSetNewAppKey+0xbc>
 8019094:	f8bc c5ba 	ldrh.w	ip, [ip, #1466]	@ 0x5ba
 8019098:	458c      	cmp	ip, r1
 801909a:	d12b      	bne.n	80190f4 <MoblePalCryptoSetNewAppKey+0xbc>
 801909c:	4619      	mov	r1, r3
 801909e:	4b2a      	ldr	r3, [pc, #168]	@ (8019148 <MoblePalCryptoSetNewAppKey+0x110>)
 80190a0:	2210      	movs	r2, #16
 80190a2:	4418      	add	r0, r3
 80190a4:	f010 f868 	bl	8029178 <memmove>
 80190a8:	262c      	movs	r6, #44	@ 0x2c
 80190aa:	4828      	ldr	r0, [pc, #160]	@ (801914c <MoblePalCryptoSetNewAppKey+0x114>)
 80190ac:	f894 c61d 	ldrb.w	ip, [r4, #1565]	@ 0x61d
 80190b0:	893f      	ldrh	r7, [r7, #8]
 80190b2:	fb15 f206 	smulbb	r2, r5, r6
 80190b6:	f202 1183 	addw	r1, r2, #387	@ 0x183
 80190ba:	4401      	add	r1, r0
 80190bc:	2310      	movs	r3, #16
 80190be:	fb06 4405 	mla	r4, r6, r5, r4
 80190c2:	e021      	b.n	8019108 <MoblePalCryptoSetNewAppKey+0xd0>
 80190c4:	f1be 0f01 	cmp.w	lr, #1
 80190c8:	d114      	bne.n	80190f4 <MoblePalCryptoSetNewAppKey+0xbc>
 80190ca:	f8bc e5be 	ldrh.w	lr, [ip, #1470]	@ 0x5be
 80190ce:	4596      	cmp	lr, r2
 80190d0:	d110      	bne.n	80190f4 <MoblePalCryptoSetNewAppKey+0xbc>
 80190d2:	f8bc c5ba 	ldrh.w	ip, [ip, #1466]	@ 0x5ba
 80190d6:	458c      	cmp	ip, r1
 80190d8:	d10c      	bne.n	80190f4 <MoblePalCryptoSetNewAppKey+0xbc>
 80190da:	4a1d      	ldr	r2, [pc, #116]	@ (8019150 <MoblePalCryptoSetNewAppKey+0x118>)
 80190dc:	4410      	add	r0, r2
 80190de:	1e5a      	subs	r2, r3, #1
 80190e0:	330f      	adds	r3, #15
 80190e2:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 80190e6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80190ea:	428e      	cmp	r6, r1
 80190ec:	d126      	bne.n	801913c <MoblePalCryptoSetNewAppKey+0x104>
 80190ee:	429a      	cmp	r2, r3
 80190f0:	d1f7      	bne.n	80190e2 <MoblePalCryptoSetNewAppKey+0xaa>
 80190f2:	e7d9      	b.n	80190a8 <MoblePalCryptoSetNewAppKey+0x70>
 80190f4:	3601      	adds	r6, #1
 80190f6:	2001      	movs	r0, #1
 80190f8:	e7b9      	b.n	801906e <MoblePalCryptoSetNewAppKey+0x36>
 80190fa:	702e      	strb	r6, [r5, #0]
 80190fc:	2002      	movs	r0, #2
 80190fe:	e7ba      	b.n	8019076 <MoblePalCryptoSetNewAppKey+0x3e>
 8019100:	3b01      	subs	r3, #1
 8019102:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8019106:	d017      	beq.n	8019138 <MoblePalCryptoSetNewAppKey+0x100>
 8019108:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801910c:	2d00      	cmp	r5, #0
 801910e:	d0f7      	beq.n	8019100 <MoblePalCryptoSetNewAppKey+0xc8>
 8019110:	45bc      	cmp	ip, r7
 8019112:	d8f5      	bhi.n	8019100 <MoblePalCryptoSetNewAppKey+0xc8>
 8019114:	f894 65b9 	ldrb.w	r6, [r4, #1465]	@ 0x5b9
 8019118:	f204 55b9 	addw	r5, r4, #1465	@ 0x5b9
 801911c:	2e00      	cmp	r6, #0
 801911e:	d1ef      	bne.n	8019100 <MoblePalCryptoSetNewAppKey+0xc8>
 8019120:	2301      	movs	r3, #1
 8019122:	f502 71c2 	add.w	r1, r2, #388	@ 0x184
 8019126:	f202 1299 	addw	r2, r2, #409	@ 0x199
 801912a:	4401      	add	r1, r0
 801912c:	702b      	strb	r3, [r5, #0]
 801912e:	4410      	add	r0, r2
 8019130:	f7ff ff5a 	bl	8018fe8 <MoblePalCryptoK4>
 8019134:	2801      	cmp	r0, #1
 8019136:	d8e0      	bhi.n	80190fa <MoblePalCryptoSetNewAppKey+0xc2>
 8019138:	2000      	movs	r0, #0
 801913a:	e79c      	b.n	8019076 <MoblePalCryptoSetNewAppKey+0x3e>
 801913c:	2003      	movs	r0, #3
 801913e:	e79a      	b.n	8019076 <MoblePalCryptoSetNewAppKey+0x3e>
 8019140:	20000008 	.word	0x20000008
 8019144:	2000140c 	.word	0x2000140c
 8019148:	200019b4 	.word	0x200019b4
 801914c:	20001830 	.word	0x20001830
 8019150:	200019b3 	.word	0x200019b3

08019154 <MoblePalCryptoSetAppKey>:
 8019154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019158:	4c44      	ldr	r4, [pc, #272]	@ (801926c <MoblePalCryptoSetAppKey+0x118>)
 801915a:	4d45      	ldr	r5, [pc, #276]	@ (8019270 <MoblePalCryptoSetAppKey+0x11c>)
 801915c:	8826      	ldrh	r6, [r4, #0]
 801915e:	4617      	mov	r7, r2
 8019160:	4603      	mov	r3, r0
 8019162:	2200      	movs	r2, #0
 8019164:	f04f 0e7c 	mov.w	lr, #124	@ 0x7c
 8019168:	b2d0      	uxtb	r0, r2
 801916a:	42b0      	cmp	r0, r6
 801916c:	d301      	bcc.n	8019172 <MoblePalCryptoSetAppKey+0x1e>
 801916e:	2600      	movs	r6, #0
 8019170:	e026      	b.n	80191c0 <MoblePalCryptoSetAppKey+0x6c>
 8019172:	fb0e 5000 	mla	r0, lr, r0, r5
 8019176:	3201      	adds	r2, #1
 8019178:	f8b0 0448 	ldrh.w	r0, [r0, #1096]	@ 0x448
 801917c:	42b8      	cmp	r0, r7
 801917e:	d1f3      	bne.n	8019168 <MoblePalCryptoSetAppKey+0x14>
 8019180:	2200      	movs	r2, #0
 8019182:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 8019186:	4610      	mov	r0, r2
 8019188:	f04f 092c 	mov.w	r9, #44	@ 0x2c
 801918c:	b2d6      	uxtb	r6, r2
 801918e:	4546      	cmp	r6, r8
 8019190:	d302      	bcc.n	8019198 <MoblePalCryptoSetAppKey+0x44>
 8019192:	b1a8      	cbz	r0, 80191c0 <MoblePalCryptoSetAppKey+0x6c>
 8019194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019198:	fb09 f006 	mul.w	r0, r9, r6
 801919c:	eb05 0c00 	add.w	ip, r5, r0
 80191a0:	f89c e5b8 	ldrb.w	lr, [ip, #1464]	@ 0x5b8
 80191a4:	f1be 0f00 	cmp.w	lr, #0
 80191a8:	d119      	bne.n	80191de <MoblePalCryptoSetAppKey+0x8a>
 80191aa:	f8ac 15ba 	strh.w	r1, [ip, #1466]	@ 0x5ba
 80191ae:	4619      	mov	r1, r3
 80191b0:	4b30      	ldr	r3, [pc, #192]	@ (8019274 <MoblePalCryptoSetAppKey+0x120>)
 80191b2:	2210      	movs	r2, #16
 80191b4:	4418      	add	r0, r3
 80191b6:	f00f ffdf 	bl	8029178 <memmove>
 80191ba:	1c73      	adds	r3, r6, #1
 80191bc:	f885 361d 	strb.w	r3, [r5, #1565]	@ 0x61d
 80191c0:	f8b4 e008 	ldrh.w	lr, [r4, #8]
 80191c4:	482c      	ldr	r0, [pc, #176]	@ (8019278 <MoblePalCryptoSetAppKey+0x124>)
 80191c6:	f895 c61d 	ldrb.w	ip, [r5, #1565]	@ 0x61d
 80191ca:	242c      	movs	r4, #44	@ 0x2c
 80191cc:	fb16 f204 	smulbb	r2, r6, r4
 80191d0:	f202 1173 	addw	r1, r2, #371	@ 0x173
 80191d4:	4401      	add	r1, r0
 80191d6:	2310      	movs	r3, #16
 80191d8:	fb04 5406 	mla	r4, r4, r6, r5
 80191dc:	e025      	b.n	801922a <MoblePalCryptoSetAppKey+0xd6>
 80191de:	f1be 0f01 	cmp.w	lr, #1
 80191e2:	d114      	bne.n	801920e <MoblePalCryptoSetAppKey+0xba>
 80191e4:	f8bc e5be 	ldrh.w	lr, [ip, #1470]	@ 0x5be
 80191e8:	45be      	cmp	lr, r7
 80191ea:	d110      	bne.n	801920e <MoblePalCryptoSetAppKey+0xba>
 80191ec:	f8bc c5ba 	ldrh.w	ip, [ip, #1466]	@ 0x5ba
 80191f0:	458c      	cmp	ip, r1
 80191f2:	d10c      	bne.n	801920e <MoblePalCryptoSetAppKey+0xba>
 80191f4:	4a21      	ldr	r2, [pc, #132]	@ (801927c <MoblePalCryptoSetAppKey+0x128>)
 80191f6:	4410      	add	r0, r2
 80191f8:	1e5a      	subs	r2, r3, #1
 80191fa:	330f      	adds	r3, #15
 80191fc:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8019200:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8019204:	458c      	cmp	ip, r1
 8019206:	d12e      	bne.n	8019266 <MoblePalCryptoSetAppKey+0x112>
 8019208:	429a      	cmp	r2, r3
 801920a:	d1f7      	bne.n	80191fc <MoblePalCryptoSetAppKey+0xa8>
 801920c:	e7d8      	b.n	80191c0 <MoblePalCryptoSetAppKey+0x6c>
 801920e:	3201      	adds	r2, #1
 8019210:	2001      	movs	r0, #1
 8019212:	e7bb      	b.n	801918c <MoblePalCryptoSetAppKey+0x38>
 8019214:	7035      	strb	r5, [r6, #0]
 8019216:	f8a4 55be 	strh.w	r5, [r4, #1470]	@ 0x5be
 801921a:	f884 55c0 	strb.w	r5, [r4, #1472]	@ 0x5c0
 801921e:	2002      	movs	r0, #2
 8019220:	e7b8      	b.n	8019194 <MoblePalCryptoSetAppKey+0x40>
 8019222:	3b01      	subs	r3, #1
 8019224:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8019228:	d01b      	beq.n	8019262 <MoblePalCryptoSetAppKey+0x10e>
 801922a:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801922e:	2d00      	cmp	r5, #0
 8019230:	d0f7      	beq.n	8019222 <MoblePalCryptoSetAppKey+0xce>
 8019232:	45f4      	cmp	ip, lr
 8019234:	d8f5      	bhi.n	8019222 <MoblePalCryptoSetAppKey+0xce>
 8019236:	f894 55b8 	ldrb.w	r5, [r4, #1464]	@ 0x5b8
 801923a:	f504 66b7 	add.w	r6, r4, #1464	@ 0x5b8
 801923e:	2d00      	cmp	r5, #0
 8019240:	d1ef      	bne.n	8019222 <MoblePalCryptoSetAppKey+0xce>
 8019242:	2301      	movs	r3, #1
 8019244:	f502 71ba 	add.w	r1, r2, #372	@ 0x174
 8019248:	f502 72cc 	add.w	r2, r2, #408	@ 0x198
 801924c:	4401      	add	r1, r0
 801924e:	7033      	strb	r3, [r6, #0]
 8019250:	f8a4 75be 	strh.w	r7, [r4, #1470]	@ 0x5be
 8019254:	f884 35c0 	strb.w	r3, [r4, #1472]	@ 0x5c0
 8019258:	4410      	add	r0, r2
 801925a:	f7ff fec5 	bl	8018fe8 <MoblePalCryptoK4>
 801925e:	2801      	cmp	r0, #1
 8019260:	d8d8      	bhi.n	8019214 <MoblePalCryptoSetAppKey+0xc0>
 8019262:	2000      	movs	r0, #0
 8019264:	e796      	b.n	8019194 <MoblePalCryptoSetAppKey+0x40>
 8019266:	2003      	movs	r0, #3
 8019268:	e794      	b.n	8019194 <MoblePalCryptoSetAppKey+0x40>
 801926a:	bf00      	nop
 801926c:	20000008 	.word	0x20000008
 8019270:	2000140c 	.word	0x2000140c
 8019274:	200019a4 	.word	0x200019a4
 8019278:	20001830 	.word	0x20001830
 801927c:	200019a3 	.word	0x200019a3

08019280 <MoblePalCryptoBeaconKey>:
 8019280:	b530      	push	{r4, r5, lr}
 8019282:	4b12      	ldr	r3, [pc, #72]	@ (80192cc <MoblePalCryptoBeaconKey+0x4c>)
 8019284:	b08b      	sub	sp, #44	@ 0x2c
 8019286:	4604      	mov	r4, r0
 8019288:	6818      	ldr	r0, [r3, #0]
 801928a:	9004      	str	r0, [sp, #16]
 801928c:	889b      	ldrh	r3, [r3, #4]
 801928e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019292:	460d      	mov	r5, r1
 8019294:	2204      	movs	r2, #4
 8019296:	490e      	ldr	r1, [pc, #56]	@ (80192d0 <MoblePalCryptoBeaconKey+0x50>)
 8019298:	a806      	add	r0, sp, #24
 801929a:	f7ff fde7 	bl	8018e6c <MoblePalCryptoS1>
 801929e:	2801      	cmp	r0, #1
 80192a0:	d811      	bhi.n	80192c6 <MoblePalCryptoBeaconKey+0x46>
 80192a2:	2306      	movs	r3, #6
 80192a4:	9302      	str	r3, [sp, #8]
 80192a6:	2210      	movs	r2, #16
 80192a8:	ab04      	add	r3, sp, #16
 80192aa:	9301      	str	r3, [sp, #4]
 80192ac:	9200      	str	r2, [sp, #0]
 80192ae:	ab06      	add	r3, sp, #24
 80192b0:	4629      	mov	r1, r5
 80192b2:	4620      	mov	r0, r4
 80192b4:	f7fe ff72 	bl	801819c <MoblePalCryptoK1.part.0>
 80192b8:	2801      	cmp	r0, #1
 80192ba:	bf94      	ite	ls
 80192bc:	2000      	movls	r0, #0
 80192be:	2001      	movhi	r0, #1
 80192c0:	0040      	lsls	r0, r0, #1
 80192c2:	b00b      	add	sp, #44	@ 0x2c
 80192c4:	bd30      	pop	{r4, r5, pc}
 80192c6:	2002      	movs	r0, #2
 80192c8:	e7fb      	b.n	80192c2 <MoblePalCryptoBeaconKey+0x42>
 80192ca:	bf00      	nop
 80192cc:	08030f92 	.word	0x08030f92
 80192d0:	08030f8d 	.word	0x08030f8d

080192d4 <MoblePalCryptoIdentityKey>:
 80192d4:	b530      	push	{r4, r5, lr}
 80192d6:	4b12      	ldr	r3, [pc, #72]	@ (8019320 <MoblePalCryptoIdentityKey+0x4c>)
 80192d8:	b08b      	sub	sp, #44	@ 0x2c
 80192da:	4604      	mov	r4, r0
 80192dc:	6818      	ldr	r0, [r3, #0]
 80192de:	9004      	str	r0, [sp, #16]
 80192e0:	889b      	ldrh	r3, [r3, #4]
 80192e2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80192e6:	460d      	mov	r5, r1
 80192e8:	2204      	movs	r2, #4
 80192ea:	490e      	ldr	r1, [pc, #56]	@ (8019324 <MoblePalCryptoIdentityKey+0x50>)
 80192ec:	a806      	add	r0, sp, #24
 80192ee:	f7ff fdbd 	bl	8018e6c <MoblePalCryptoS1>
 80192f2:	2801      	cmp	r0, #1
 80192f4:	d811      	bhi.n	801931a <MoblePalCryptoIdentityKey+0x46>
 80192f6:	2306      	movs	r3, #6
 80192f8:	9302      	str	r3, [sp, #8]
 80192fa:	2210      	movs	r2, #16
 80192fc:	ab04      	add	r3, sp, #16
 80192fe:	9301      	str	r3, [sp, #4]
 8019300:	9200      	str	r2, [sp, #0]
 8019302:	ab06      	add	r3, sp, #24
 8019304:	4629      	mov	r1, r5
 8019306:	4620      	mov	r0, r4
 8019308:	f7fe ff48 	bl	801819c <MoblePalCryptoK1.part.0>
 801930c:	2801      	cmp	r0, #1
 801930e:	bf94      	ite	ls
 8019310:	2000      	movls	r0, #0
 8019312:	2001      	movhi	r0, #1
 8019314:	0040      	lsls	r0, r0, #1
 8019316:	b00b      	add	sp, #44	@ 0x2c
 8019318:	bd30      	pop	{r4, r5, pc}
 801931a:	2002      	movs	r0, #2
 801931c:	e7fb      	b.n	8019316 <MoblePalCryptoIdentityKey+0x42>
 801931e:	bf00      	nop
 8019320:	08030f92 	.word	0x08030f92
 8019324:	08030f99 	.word	0x08030f99

08019328 <MoblePalCryptoAesCcmEncrypt>:
 8019328:	b510      	push	{r4, lr}
 801932a:	b086      	sub	sp, #24
 801932c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801932e:	9405      	str	r4, [sp, #20]
 8019330:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8019332:	9404      	str	r4, [sp, #16]
 8019334:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019336:	9403      	str	r4, [sp, #12]
 8019338:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801933a:	9402      	str	r4, [sp, #8]
 801933c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801933e:	9401      	str	r4, [sp, #4]
 8019340:	9c08      	ldr	r4, [sp, #32]
 8019342:	9400      	str	r4, [sp, #0]
 8019344:	f7ff f87c 	bl	8018440 <BAES_CcmEncrypt>
 8019348:	2800      	cmp	r0, #0
 801934a:	bf14      	ite	ne
 801934c:	2003      	movne	r0, #3
 801934e:	2000      	moveq	r0, #0
 8019350:	b006      	add	sp, #24
 8019352:	bd10      	pop	{r4, pc}

08019354 <MoblePalCryptoAesCcmDecrypt>:
 8019354:	b510      	push	{r4, lr}
 8019356:	b086      	sub	sp, #24
 8019358:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801935a:	9405      	str	r4, [sp, #20]
 801935c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801935e:	9404      	str	r4, [sp, #16]
 8019360:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8019362:	9403      	str	r4, [sp, #12]
 8019364:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8019366:	9402      	str	r4, [sp, #8]
 8019368:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801936a:	9401      	str	r4, [sp, #4]
 801936c:	9c08      	ldr	r4, [sp, #32]
 801936e:	9400      	str	r4, [sp, #0]
 8019370:	f7ff f8a5 	bl	80184be <BAES_CcmDecrypt>
 8019374:	2800      	cmp	r0, #0
 8019376:	bf14      	ite	ne
 8019378:	2003      	movne	r0, #3
 801937a:	2000      	moveq	r0, #0
 801937c:	b006      	add	sp, #24
 801937e:	bd10      	pop	{r4, pc}

08019380 <MoblePalCryptoAesEcb>:
 8019380:	b538      	push	{r3, r4, r5, lr}
 8019382:	460d      	mov	r5, r1
 8019384:	4611      	mov	r1, r2
 8019386:	4602      	mov	r2, r0
 8019388:	b148      	cbz	r0, 801939e <MoblePalCryptoAesEcb+0x1e>
 801938a:	b145      	cbz	r5, 801939e <MoblePalCryptoAesEcb+0x1e>
 801938c:	b139      	cbz	r1, 801939e <MoblePalCryptoAesEcb+0x1e>
 801938e:	f013 040f 	ands.w	r4, r3, #15
 8019392:	d104      	bne.n	801939e <MoblePalCryptoAesEcb+0x1e>
 8019394:	4628      	mov	r0, r5
 8019396:	f7fe ff21 	bl	80181dc <BAES_EcbEncrypt>
 801939a:	4620      	mov	r0, r4
 801939c:	bd38      	pop	{r3, r4, r5, pc}
 801939e:	2003      	movs	r0, #3
 80193a0:	e7fc      	b.n	801939c <MoblePalCryptoAesEcb+0x1c>

080193a2 <MoblePalCryptoXor>:
 80193a2:	b510      	push	{r4, lr}
 80193a4:	3901      	subs	r1, #1
 80193a6:	4402      	add	r2, r0
 80193a8:	4290      	cmp	r0, r2
 80193aa:	d100      	bne.n	80193ae <MoblePalCryptoXor+0xc>
 80193ac:	bd10      	pop	{r4, pc}
 80193ae:	7803      	ldrb	r3, [r0, #0]
 80193b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80193b4:	4063      	eors	r3, r4
 80193b6:	f800 3b01 	strb.w	r3, [r0], #1
 80193ba:	e7f5      	b.n	80193a8 <MoblePalCryptoXor+0x6>

080193bc <MoblePalCryptoUpdateNetKeyVectors>:
 80193bc:	b510      	push	{r4, lr}
 80193be:	b088      	sub	sp, #32
 80193c0:	2300      	movs	r3, #0
 80193c2:	f88d 301f 	strb.w	r3, [sp, #31]
 80193c6:	4604      	mov	r4, r0
 80193c8:	b930      	cbnz	r0, 80193d8 <MoblePalCryptoUpdateNetKeyVectors+0x1c>
 80193ca:	4b23      	ldr	r3, [pc, #140]	@ (8019458 <MoblePalCryptoUpdateNetKeyVectors+0x9c>)
 80193cc:	4a23      	ldr	r2, [pc, #140]	@ (801945c <MoblePalCryptoUpdateNetKeyVectors+0xa0>)
 80193ce:	4824      	ldr	r0, [pc, #144]	@ (8019460 <MoblePalCryptoUpdateNetKeyVectors+0xa4>)
 80193d0:	f240 5185 	movw	r1, #1413	@ 0x585
 80193d4:	f00f f802 	bl	80283dc <__assert_func>
 80193d8:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80193dc:	b92b      	cbnz	r3, 80193ea <MoblePalCryptoUpdateNetKeyVectors+0x2e>
 80193de:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80193e2:	b913      	cbnz	r3, 80193ea <MoblePalCryptoUpdateNetKeyVectors+0x2e>
 80193e4:	2002      	movs	r0, #2
 80193e6:	b008      	add	sp, #32
 80193e8:	bd10      	pop	{r4, pc}
 80193ea:	b1e1      	cbz	r1, 8019426 <MoblePalCryptoUpdateNetKeyVectors+0x6a>
 80193ec:	4621      	mov	r1, r4
 80193ee:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80193f2:	f7ff fdcf 	bl	8018f94 <MoblePalCryptoK3>
 80193f6:	2801      	cmp	r0, #1
 80193f8:	d8f4      	bhi.n	80193e4 <MoblePalCryptoUpdateNetKeyVectors+0x28>
 80193fa:	2301      	movs	r3, #1
 80193fc:	9302      	str	r3, [sp, #8]
 80193fe:	f10d 031f 	add.w	r3, sp, #31
 8019402:	9301      	str	r3, [sp, #4]
 8019404:	2310      	movs	r3, #16
 8019406:	9300      	str	r3, [sp, #0]
 8019408:	f104 025c 	add.w	r2, r4, #92	@ 0x5c
 801940c:	4623      	mov	r3, r4
 801940e:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8019412:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8019416:	f7ff fd53 	bl	8018ec0 <MoblePalCryptoK2>
 801941a:	2801      	cmp	r0, #1
 801941c:	bf94      	ite	ls
 801941e:	2000      	movls	r0, #0
 8019420:	2001      	movhi	r0, #1
 8019422:	0040      	lsls	r0, r0, #1
 8019424:	e7df      	b.n	80193e6 <MoblePalCryptoUpdateNetKeyVectors+0x2a>
 8019426:	f104 0310 	add.w	r3, r4, #16
 801942a:	4619      	mov	r1, r3
 801942c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8019430:	9305      	str	r3, [sp, #20]
 8019432:	f7ff fdaf 	bl	8018f94 <MoblePalCryptoK3>
 8019436:	2801      	cmp	r0, #1
 8019438:	d8d4      	bhi.n	80193e4 <MoblePalCryptoUpdateNetKeyVectors+0x28>
 801943a:	2201      	movs	r2, #1
 801943c:	9202      	str	r2, [sp, #8]
 801943e:	f10d 021f 	add.w	r2, sp, #31
 8019442:	9201      	str	r2, [sp, #4]
 8019444:	2210      	movs	r2, #16
 8019446:	9200      	str	r2, [sp, #0]
 8019448:	9b05      	ldr	r3, [sp, #20]
 801944a:	f104 026c 	add.w	r2, r4, #108	@ 0x6c
 801944e:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 8019452:	f104 0039 	add.w	r0, r4, #57	@ 0x39
 8019456:	e7de      	b.n	8019416 <MoblePalCryptoUpdateNetKeyVectors+0x5a>
 8019458:	08030f9e 	.word	0x08030f9e
 801945c:	0802f28c 	.word	0x0802f28c
 8019460:	08030fa3 	.word	0x08030fa3

08019464 <MoblePalCryptoSetNewNetworkKey>:
 8019464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019468:	4b2f      	ldr	r3, [pc, #188]	@ (8019528 <MoblePalCryptoSetNewNetworkKey+0xc4>)
 801946a:	4c30      	ldr	r4, [pc, #192]	@ (801952c <MoblePalCryptoSetNewNetworkKey+0xc8>)
 801946c:	f8b3 e000 	ldrh.w	lr, [r3]
 8019470:	2700      	movs	r7, #0
 8019472:	463b      	mov	r3, r7
 8019474:	f04f 087c 	mov.w	r8, #124	@ 0x7c
 8019478:	b2fd      	uxtb	r5, r7
 801947a:	fb08 fc05 	mul.w	ip, r8, r5
 801947e:	eb04 020c 	add.w	r2, r4, ip
 8019482:	4575      	cmp	r5, lr
 8019484:	f892 6446 	ldrb.w	r6, [r2, #1094]	@ 0x446
 8019488:	d210      	bcs.n	80194ac <MoblePalCryptoSetNewNetworkKey+0x48>
 801948a:	bb4e      	cbnz	r6, 80194e0 <MoblePalCryptoSetNewNetworkKey+0x7c>
 801948c:	f892 9445 	ldrb.w	r9, [r2, #1093]	@ 0x445
 8019490:	f1b9 0f01 	cmp.w	r9, #1
 8019494:	d138      	bne.n	8019508 <MoblePalCryptoSetNewNetworkKey+0xa4>
 8019496:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	@ 0x448
 801949a:	428a      	cmp	r2, r1
 801949c:	d134      	bne.n	8019508 <MoblePalCryptoSetNewNetworkKey+0xa4>
 801949e:	4601      	mov	r1, r0
 80194a0:	4823      	ldr	r0, [pc, #140]	@ (8019530 <MoblePalCryptoSetNewNetworkKey+0xcc>)
 80194a2:	2210      	movs	r2, #16
 80194a4:	4460      	add	r0, ip
 80194a6:	f00f fe67 	bl	8029178 <memmove>
 80194aa:	2300      	movs	r3, #0
 80194ac:	267c      	movs	r6, #124	@ 0x7c
 80194ae:	436e      	muls	r6, r5
 80194b0:	19a2      	adds	r2, r4, r6
 80194b2:	f892 2446 	ldrb.w	r2, [r2, #1094]	@ 0x446
 80194b6:	431a      	orrs	r2, r3
 80194b8:	d10f      	bne.n	80194da <MoblePalCryptoSetNewNetworkKey+0x76>
 80194ba:	481e      	ldr	r0, [pc, #120]	@ (8019534 <MoblePalCryptoSetNewNetworkKey+0xd0>)
 80194bc:	f894 161c 	ldrb.w	r1, [r4, #1564]	@ 0x61c
 80194c0:	f106 020f 	add.w	r2, r6, #15
 80194c4:	4402      	add	r2, r0
 80194c6:	2310      	movs	r3, #16
 80194c8:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 80194cc:	b10f      	cbz	r7, 80194d2 <MoblePalCryptoSetNewNetworkKey+0x6e>
 80194ce:	2903      	cmp	r1, #3
 80194d0:	d91e      	bls.n	8019510 <MoblePalCryptoSetNewNetworkKey+0xac>
 80194d2:	3b01      	subs	r3, #1
 80194d4:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 80194d8:	d1f6      	bne.n	80194c8 <MoblePalCryptoSetNewNetworkKey+0x64>
 80194da:	4618      	mov	r0, r3
 80194dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80194e0:	2e01      	cmp	r6, #1
 80194e2:	d111      	bne.n	8019508 <MoblePalCryptoSetNewNetworkKey+0xa4>
 80194e4:	f8b2 3448 	ldrh.w	r3, [r2, #1096]	@ 0x448
 80194e8:	428b      	cmp	r3, r1
 80194ea:	d10c      	bne.n	8019506 <MoblePalCryptoSetNewNetworkKey+0xa2>
 80194ec:	4b12      	ldr	r3, [pc, #72]	@ (8019538 <MoblePalCryptoSetNewNetworkKey+0xd4>)
 80194ee:	1e42      	subs	r2, r0, #1
 80194f0:	4463      	add	r3, ip
 80194f2:	300f      	adds	r0, #15
 80194f4:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 80194f8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80194fc:	428e      	cmp	r6, r1
 80194fe:	d105      	bne.n	801950c <MoblePalCryptoSetNewNetworkKey+0xa8>
 8019500:	4282      	cmp	r2, r0
 8019502:	d1f7      	bne.n	80194f4 <MoblePalCryptoSetNewNetworkKey+0x90>
 8019504:	e7d1      	b.n	80194aa <MoblePalCryptoSetNewNetworkKey+0x46>
 8019506:	4633      	mov	r3, r6
 8019508:	3701      	adds	r7, #1
 801950a:	e7b5      	b.n	8019478 <MoblePalCryptoSetNewNetworkKey+0x14>
 801950c:	2303      	movs	r3, #3
 801950e:	e7cd      	b.n	80194ac <MoblePalCryptoSetNewNetworkKey+0x48>
 8019510:	237c      	movs	r3, #124	@ 0x7c
 8019512:	fb03 4405 	mla	r4, r3, r5, r4
 8019516:	2301      	movs	r3, #1
 8019518:	f884 3446 	strb.w	r3, [r4, #1094]	@ 0x446
 801951c:	4430      	add	r0, r6
 801951e:	2100      	movs	r1, #0
 8019520:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019524:	f7ff bf4a 	b.w	80193bc <MoblePalCryptoUpdateNetKeyVectors>
 8019528:	20000008 	.word	0x20000008
 801952c:	2000140c 	.word	0x2000140c
 8019530:	20001840 	.word	0x20001840
 8019534:	20001830 	.word	0x20001830
 8019538:	2000183f 	.word	0x2000183f

0801953c <MoblePalCryptoSetNetworkKey>:
 801953c:	4b2d      	ldr	r3, [pc, #180]	@ (80195f4 <MoblePalCryptoSetNetworkKey+0xb8>)
 801953e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019542:	2200      	movs	r2, #0
 8019544:	4c2c      	ldr	r4, [pc, #176]	@ (80195f8 <MoblePalCryptoSetNetworkKey+0xbc>)
 8019546:	881e      	ldrh	r6, [r3, #0]
 8019548:	f04f 087c 	mov.w	r8, #124	@ 0x7c
 801954c:	4613      	mov	r3, r2
 801954e:	b2d5      	uxtb	r5, r2
 8019550:	fb08 fe05 	mul.w	lr, r8, r5
 8019554:	eb04 0c0e 	add.w	ip, r4, lr
 8019558:	42b5      	cmp	r5, r6
 801955a:	f89c 7445 	ldrb.w	r7, [ip, #1093]	@ 0x445
 801955e:	d20c      	bcs.n	801957a <MoblePalCryptoSetNetworkKey+0x3e>
 8019560:	bb27      	cbnz	r7, 80195ac <MoblePalCryptoSetNetworkKey+0x70>
 8019562:	f8ac 1448 	strh.w	r1, [ip, #1096]	@ 0x448
 8019566:	4601      	mov	r1, r0
 8019568:	4824      	ldr	r0, [pc, #144]	@ (80195fc <MoblePalCryptoSetNetworkKey+0xc0>)
 801956a:	2210      	movs	r2, #16
 801956c:	4470      	add	r0, lr
 801956e:	f00f fe03 	bl	8029178 <memmove>
 8019572:	1c6b      	adds	r3, r5, #1
 8019574:	f884 361c 	strb.w	r3, [r4, #1564]	@ 0x61c
 8019578:	2300      	movs	r3, #0
 801957a:	217c      	movs	r1, #124	@ 0x7c
 801957c:	4369      	muls	r1, r5
 801957e:	1862      	adds	r2, r4, r1
 8019580:	f892 2445 	ldrb.w	r2, [r2, #1093]	@ 0x445
 8019584:	431a      	orrs	r2, r3
 8019586:	d10e      	bne.n	80195a6 <MoblePalCryptoSetNetworkKey+0x6a>
 8019588:	f894 361c 	ldrb.w	r3, [r4, #1564]	@ 0x61c
 801958c:	42b3      	cmp	r3, r6
 801958e:	d825      	bhi.n	80195dc <MoblePalCryptoSetNetworkKey+0xa0>
 8019590:	481a      	ldr	r0, [pc, #104]	@ (80195fc <MoblePalCryptoSetNetworkKey+0xc0>)
 8019592:	4408      	add	r0, r1
 8019594:	4602      	mov	r2, r0
 8019596:	2310      	movs	r3, #16
 8019598:	f812 1b01 	ldrb.w	r1, [r2], #1
 801959c:	bb01      	cbnz	r1, 80195e0 <MoblePalCryptoSetNetworkKey+0xa4>
 801959e:	3b01      	subs	r3, #1
 80195a0:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 80195a4:	d1f8      	bne.n	8019598 <MoblePalCryptoSetNetworkKey+0x5c>
 80195a6:	4618      	mov	r0, r3
 80195a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195ac:	2f01      	cmp	r7, #1
 80195ae:	d111      	bne.n	80195d4 <MoblePalCryptoSetNetworkKey+0x98>
 80195b0:	f8bc 3448 	ldrh.w	r3, [ip, #1096]	@ 0x448
 80195b4:	428b      	cmp	r3, r1
 80195b6:	d10c      	bne.n	80195d2 <MoblePalCryptoSetNetworkKey+0x96>
 80195b8:	4b10      	ldr	r3, [pc, #64]	@ (80195fc <MoblePalCryptoSetNetworkKey+0xc0>)
 80195ba:	1e42      	subs	r2, r0, #1
 80195bc:	4473      	add	r3, lr
 80195be:	300f      	adds	r0, #15
 80195c0:	f813 1b01 	ldrb.w	r1, [r3], #1
 80195c4:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 80195c8:	428f      	cmp	r7, r1
 80195ca:	d105      	bne.n	80195d8 <MoblePalCryptoSetNetworkKey+0x9c>
 80195cc:	4282      	cmp	r2, r0
 80195ce:	d1f7      	bne.n	80195c0 <MoblePalCryptoSetNetworkKey+0x84>
 80195d0:	e7d2      	b.n	8019578 <MoblePalCryptoSetNetworkKey+0x3c>
 80195d2:	463b      	mov	r3, r7
 80195d4:	3201      	adds	r2, #1
 80195d6:	e7ba      	b.n	801954e <MoblePalCryptoSetNetworkKey+0x12>
 80195d8:	2303      	movs	r3, #3
 80195da:	e7ce      	b.n	801957a <MoblePalCryptoSetNetworkKey+0x3e>
 80195dc:	4613      	mov	r3, r2
 80195de:	e7e2      	b.n	80195a6 <MoblePalCryptoSetNetworkKey+0x6a>
 80195e0:	237c      	movs	r3, #124	@ 0x7c
 80195e2:	fb03 4405 	mla	r4, r3, r5, r4
 80195e6:	2101      	movs	r1, #1
 80195e8:	f884 1445 	strb.w	r1, [r4, #1093]	@ 0x445
 80195ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80195f0:	f7ff bee4 	b.w	80193bc <MoblePalCryptoUpdateNetKeyVectors>
 80195f4:	20000008 	.word	0x20000008
 80195f8:	2000140c 	.word	0x2000140c
 80195fc:	20001830 	.word	0x20001830

08019600 <MoblePalCryptoSetIvIndex>:
 8019600:	b508      	push	{r3, lr}
 8019602:	4b05      	ldr	r3, [pc, #20]	@ (8019618 <MoblePalCryptoSetIvIndex+0x18>)
 8019604:	2101      	movs	r1, #1
 8019606:	f8c3 0658 	str.w	r0, [r3, #1624]	@ 0x658
 801960a:	f203 4024 	addw	r0, r3, #1060	@ 0x424
 801960e:	f7ff fed5 	bl	80193bc <MoblePalCryptoUpdateNetKeyVectors>
 8019612:	2000      	movs	r0, #0
 8019614:	bd08      	pop	{r3, pc}
 8019616:	bf00      	nop
 8019618:	2000140c 	.word	0x2000140c

0801961c <MoblePalCryptoParseNetHdr>:
 801961c:	7803      	ldrb	r3, [r0, #0]
 801961e:	09db      	lsrs	r3, r3, #7
 8019620:	700b      	strb	r3, [r1, #0]
 8019622:	7803      	ldrb	r3, [r0, #0]
 8019624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019628:	704b      	strb	r3, [r1, #1]
 801962a:	7843      	ldrb	r3, [r0, #1]
 801962c:	09db      	lsrs	r3, r3, #7
 801962e:	708b      	strb	r3, [r1, #2]
 8019630:	7843      	ldrb	r3, [r0, #1]
 8019632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019636:	70cb      	strb	r3, [r1, #3]
 8019638:	78c3      	ldrb	r3, [r0, #3]
 801963a:	7882      	ldrb	r2, [r0, #2]
 801963c:	021b      	lsls	r3, r3, #8
 801963e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8019642:	7902      	ldrb	r2, [r0, #4]
 8019644:	4413      	add	r3, r2
 8019646:	604b      	str	r3, [r1, #4]
 8019648:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 801964c:	810b      	strh	r3, [r1, #8]
 801964e:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 8019652:	ba5b      	rev16	r3, r3
 8019654:	ba52      	rev16	r2, r2
 8019656:	810b      	strh	r3, [r1, #8]
 8019658:	814a      	strh	r2, [r1, #10]
 801965a:	4770      	bx	lr

0801965c <MoblePalCryptoAuthenticateSecureNetworkBeacon>:
 801965c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019660:	460c      	mov	r4, r1
 8019662:	b08a      	sub	sp, #40	@ 0x28
 8019664:	4617      	mov	r7, r2
 8019666:	4698      	mov	r8, r3
 8019668:	4605      	mov	r5, r0
 801966a:	2800      	cmp	r0, #0
 801966c:	d035      	beq.n	80196da <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x7e>
 801966e:	2900      	cmp	r1, #0
 8019670:	d033      	beq.n	80196da <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x7e>
 8019672:	f8d1 0001 	ldr.w	r0, [r1, #1]
 8019676:	f8d1 1005 	ldr.w	r1, [r1, #5]
 801967a:	466e      	mov	r6, sp
 801967c:	c603      	stmia	r6!, {r0, r1}
 801967e:	2108      	movs	r1, #8
 8019680:	4668      	mov	r0, sp
 8019682:	f7ff fbb9 	bl	8018df8 <MoblePalCryptoGetSecurityKeys_Beacon>
 8019686:	4601      	mov	r1, r0
 8019688:	b930      	cbnz	r0, 8019698 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x3c>
 801968a:	4b15      	ldr	r3, [pc, #84]	@ (80196e0 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x84>)
 801968c:	4a15      	ldr	r2, [pc, #84]	@ (80196e4 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x88>)
 801968e:	4816      	ldr	r0, [pc, #88]	@ (80196e8 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x8c>)
 8019690:	f640 111a 	movw	r1, #2330	@ 0x91a
 8019694:	f00e fea2 	bl	80283dc <__assert_func>
 8019698:	f1b8 0f00 	cmp.w	r8, #0
 801969c:	d018      	beq.n	80196d0 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x74>
 801969e:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80196a2:	b91b      	cbnz	r3, 80196ac <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x50>
 80196a4:	2002      	movs	r0, #2
 80196a6:	b00a      	add	sp, #40	@ 0x28
 80196a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196ac:	3110      	adds	r1, #16
 80196ae:	a802      	add	r0, sp, #8
 80196b0:	f7ff fde6 	bl	8019280 <MoblePalCryptoBeaconKey>
 80196b4:	2801      	cmp	r0, #1
 80196b6:	d8f5      	bhi.n	80196a4 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x48>
 80196b8:	ab06      	add	r3, sp, #24
 80196ba:	4621      	mov	r1, r4
 80196bc:	a802      	add	r0, sp, #8
 80196be:	463a      	mov	r2, r7
 80196c0:	f7fe fc9e 	bl	8018000 <BAES_CmacCompute>
 80196c4:	ab06      	add	r3, sp, #24
 80196c6:	cb03      	ldmia	r3!, {r0, r1}
 80196c8:	6028      	str	r0, [r5, #0]
 80196ca:	6069      	str	r1, [r5, #4]
 80196cc:	2000      	movs	r0, #0
 80196ce:	e7ea      	b.n	80196a6 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x4a>
 80196d0:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d1ea      	bne.n	80196ae <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x52>
 80196d8:	e7e4      	b.n	80196a4 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x48>
 80196da:	2003      	movs	r0, #3
 80196dc:	e7e3      	b.n	80196a6 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x4a>
 80196de:	bf00      	nop
 80196e0:	08030f9e 	.word	0x08030f9e
 80196e4:	0802f2ae 	.word	0x0802f2ae
 80196e8:	08030fa3 	.word	0x08030fa3

080196ec <MoblePalCryptoInitEcc>:
 80196ec:	4b07      	ldr	r3, [pc, #28]	@ (801970c <MoblePalCryptoInitEcc+0x20>)
 80196ee:	f100 0220 	add.w	r2, r0, #32
 80196f2:	f850 1b04 	ldr.w	r1, [r0], #4
 80196f6:	f843 1b04 	str.w	r1, [r3], #4
 80196fa:	4290      	cmp	r0, r2
 80196fc:	d1f9      	bne.n	80196f2 <MoblePalCryptoInitEcc+0x6>
 80196fe:	4b04      	ldr	r3, [pc, #16]	@ (8019710 <MoblePalCryptoInitEcc+0x24>)
 8019700:	2201      	movs	r2, #1
 8019702:	f883 2402 	strb.w	r2, [r3, #1026]	@ 0x402
 8019706:	2000      	movs	r0, #0
 8019708:	4770      	bx	lr
 801970a:	bf00      	nop
 801970c:	2000180f 	.word	0x2000180f
 8019710:	2000140c 	.word	0x2000140c

08019714 <MoblePalCryptoGetEccGenSecret>:
 8019714:	b510      	push	{r4, lr}
 8019716:	4604      	mov	r4, r0
 8019718:	4807      	ldr	r0, [pc, #28]	@ (8019738 <MoblePalCryptoGetEccGenSecret+0x24>)
 801971a:	4621      	mov	r1, r4
 801971c:	f7fe ffa6 	bl	801866c <BPKA_StartDhKey>
 8019720:	2800      	cmp	r0, #0
 8019722:	d1f9      	bne.n	8019718 <MoblePalCryptoGetEccGenSecret+0x4>
 8019724:	f7ff f88e 	bl	8018844 <BPKA_Status>
 8019728:	2800      	cmp	r0, #0
 801972a:	d1fb      	bne.n	8019724 <MoblePalCryptoGetEccGenSecret+0x10>
 801972c:	4803      	ldr	r0, [pc, #12]	@ (801973c <MoblePalCryptoGetEccGenSecret+0x28>)
 801972e:	f7fe fbd9 	bl	8017ee4 <BPKA_ReadDhKey>
 8019732:	4802      	ldr	r0, [pc, #8]	@ (801973c <MoblePalCryptoGetEccGenSecret+0x28>)
 8019734:	bd10      	pop	{r4, pc}
 8019736:	bf00      	nop
 8019738:	2000180f 	.word	0x2000180f
 801973c:	20001a6b 	.word	0x20001a6b

08019740 <MoblePalCryptoFreeEcc>:
 8019740:	4b04      	ldr	r3, [pc, #16]	@ (8019754 <MoblePalCryptoFreeEcc+0x14>)
 8019742:	f893 2402 	ldrb.w	r2, [r3, #1026]	@ 0x402
 8019746:	b11a      	cbz	r2, 8019750 <MoblePalCryptoFreeEcc+0x10>
 8019748:	2000      	movs	r0, #0
 801974a:	f883 0402 	strb.w	r0, [r3, #1026]	@ 0x402
 801974e:	4770      	bx	lr
 8019750:	2002      	movs	r0, #2
 8019752:	4770      	bx	lr
 8019754:	2000140c 	.word	0x2000140c

08019758 <MoblePalCrypto_PK_convert_le>:
 8019758:	b510      	push	{r4, lr}
 801975a:	f100 0320 	add.w	r3, r0, #32
 801975e:	1e4a      	subs	r2, r1, #1
 8019760:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019764:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019768:	4283      	cmp	r3, r0
 801976a:	d1f9      	bne.n	8019760 <MoblePalCrypto_PK_convert_le+0x8>
 801976c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8019770:	311f      	adds	r1, #31
 8019772:	3320      	adds	r3, #32
 8019774:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 8019778:	f801 0f01 	strb.w	r0, [r1, #1]!
 801977c:	429a      	cmp	r2, r3
 801977e:	d1f9      	bne.n	8019774 <MoblePalCrypto_PK_convert_le+0x1c>
 8019780:	bd10      	pop	{r4, pc}
	...

08019784 <MoblePalCryptoGetAppKeyIndexes>:
 8019784:	f8df c074 	ldr.w	ip, [pc, #116]	@ 80197fc <MoblePalCryptoGetAppKeyIndexes+0x78>
 8019788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801978c:	4606      	mov	r6, r0
 801978e:	f8df e070 	ldr.w	lr, [pc, #112]	@ 8019800 <MoblePalCryptoGetAppKeyIndexes+0x7c>
 8019792:	f8bc 0000 	ldrh.w	r0, [ip]
 8019796:	2300      	movs	r3, #0
 8019798:	277c      	movs	r7, #124	@ 0x7c
 801979a:	b2dc      	uxtb	r4, r3
 801979c:	4284      	cmp	r4, r0
 801979e:	d302      	bcc.n	80197a6 <MoblePalCryptoGetAppKeyIndexes+0x22>
 80197a0:	2300      	movs	r3, #0
 80197a2:	2002      	movs	r0, #2
 80197a4:	e025      	b.n	80197f2 <MoblePalCryptoGetAppKeyIndexes+0x6e>
 80197a6:	fb07 e404 	mla	r4, r7, r4, lr
 80197aa:	f8b4 5448 	ldrh.w	r5, [r4, #1096]	@ 0x448
 80197ae:	4295      	cmp	r5, r2
 80197b0:	d122      	bne.n	80197f8 <MoblePalCryptoGetAppKeyIndexes+0x74>
 80197b2:	f894 4445 	ldrb.w	r4, [r4, #1093]	@ 0x445
 80197b6:	2c01      	cmp	r4, #1
 80197b8:	d11e      	bne.n	80197f8 <MoblePalCryptoGetAppKeyIndexes+0x74>
 80197ba:	2400      	movs	r4, #0
 80197bc:	4623      	mov	r3, r4
 80197be:	2002      	movs	r0, #2
 80197c0:	f04f 092c 	mov.w	r9, #44	@ 0x2c
 80197c4:	e010      	b.n	80197e8 <MoblePalCryptoGetAppKeyIndexes+0x64>
 80197c6:	fb09 e505 	mla	r5, r9, r5, lr
 80197ca:	f8b5 75be 	ldrh.w	r7, [r5, #1470]	@ 0x5be
 80197ce:	4297      	cmp	r7, r2
 80197d0:	d109      	bne.n	80197e6 <MoblePalCryptoGetAppKeyIndexes+0x62>
 80197d2:	f895 75c0 	ldrb.w	r7, [r5, #1472]	@ 0x5c0
 80197d6:	b137      	cbz	r7, 80197e6 <MoblePalCryptoGetAppKeyIndexes+0x62>
 80197d8:	f8b5 05ba 	ldrh.w	r0, [r5, #1466]	@ 0x5ba
 80197dc:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
 80197e0:	3301      	adds	r3, #1
 80197e2:	b29b      	uxth	r3, r3
 80197e4:	2000      	movs	r0, #0
 80197e6:	3401      	adds	r4, #1
 80197e8:	f8bc 8008 	ldrh.w	r8, [ip, #8]
 80197ec:	b2e5      	uxtb	r5, r4
 80197ee:	4545      	cmp	r5, r8
 80197f0:	d3e9      	bcc.n	80197c6 <MoblePalCryptoGetAppKeyIndexes+0x42>
 80197f2:	800b      	strh	r3, [r1, #0]
 80197f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80197f8:	3301      	adds	r3, #1
 80197fa:	e7ce      	b.n	801979a <MoblePalCryptoGetAppKeyIndexes+0x16>
 80197fc:	20000008 	.word	0x20000008
 8019800:	2000140c 	.word	0x2000140c

08019804 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>:
 8019804:	4b0c      	ldr	r3, [pc, #48]	@ (8019838 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x34>)
 8019806:	b570      	push	{r4, r5, r6, lr}
 8019808:	8919      	ldrh	r1, [r3, #8]
 801980a:	4d0c      	ldr	r5, [pc, #48]	@ (801983c <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x38>)
 801980c:	2200      	movs	r2, #0
 801980e:	262c      	movs	r6, #44	@ 0x2c
 8019810:	b2d3      	uxtb	r3, r2
 8019812:	428b      	cmp	r3, r1
 8019814:	d301      	bcc.n	801981a <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x16>
 8019816:	2000      	movs	r0, #0
 8019818:	e00a      	b.n	8019830 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x2c>
 801981a:	fb06 5303 	mla	r3, r6, r3, r5
 801981e:	f8b3 45ba 	ldrh.w	r4, [r3, #1466]	@ 0x5ba
 8019822:	4284      	cmp	r4, r0
 8019824:	d105      	bne.n	8019832 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x2e>
 8019826:	f893 45c0 	ldrb.w	r4, [r3, #1472]	@ 0x5c0
 801982a:	b114      	cbz	r4, 8019832 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x2e>
 801982c:	f8b3 05be 	ldrh.w	r0, [r3, #1470]	@ 0x5be
 8019830:	bd70      	pop	{r4, r5, r6, pc}
 8019832:	3201      	adds	r2, #1
 8019834:	e7ec      	b.n	8019810 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0xc>
 8019836:	bf00      	nop
 8019838:	20000008 	.word	0x20000008
 801983c:	2000140c 	.word	0x2000140c

08019840 <MoblePalCryptoModelAppBindDelete>:
 8019840:	4b2b      	ldr	r3, [pc, #172]	@ (80198f0 <MoblePalCryptoModelAppBindDelete+0xb0>)
 8019842:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 80198f8 <MoblePalCryptoModelAppBindDelete+0xb8>
 8019846:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801984a:	4d2a      	ldr	r5, [pc, #168]	@ (80198f4 <MoblePalCryptoModelAppBindDelete+0xb4>)
 801984c:	891f      	ldrh	r7, [r3, #8]
 801984e:	2100      	movs	r1, #0
 8019850:	4604      	mov	r4, r0
 8019852:	f04f 0e2c 	mov.w	lr, #44	@ 0x2c
 8019856:	4608      	mov	r0, r1
 8019858:	f1a5 06ac 	sub.w	r6, r5, #172	@ 0xac
 801985c:	2300      	movs	r3, #0
 801985e:	e014      	b.n	801988a <MoblePalCryptoModelAppBindDelete+0x4a>
 8019860:	b97a      	cbnz	r2, 8019882 <MoblePalCryptoModelAppBindDelete+0x42>
 8019862:	f833 b00a 	ldrh.w	fp, [r3, sl]
 8019866:	45a3      	cmp	fp, r4
 8019868:	d040      	beq.n	80198ec <MoblePalCryptoModelAppBindDelete+0xac>
 801986a:	f109 0901 	add.w	r9, r9, #1
 801986e:	f1b9 0f0b 	cmp.w	r9, #11
 8019872:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8019876:	d11e      	bne.n	80198b6 <MoblePalCryptoModelAppBindDelete+0x76>
 8019878:	3101      	adds	r1, #1
 801987a:	2905      	cmp	r1, #5
 801987c:	d1ee      	bne.n	801985c <MoblePalCryptoModelAppBindDelete+0x1c>
 801987e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019882:	2002      	movs	r0, #2
 8019884:	e7f1      	b.n	801986a <MoblePalCryptoModelAppBindDelete+0x2a>
 8019886:	3301      	adds	r3, #1
 8019888:	2003      	movs	r0, #3
 801988a:	fa5f f883 	uxtb.w	r8, r3
 801988e:	45b8      	cmp	r8, r7
 8019890:	d2f2      	bcs.n	8019878 <MoblePalCryptoModelAppBindDelete+0x38>
 8019892:	fb0e c908 	mla	r9, lr, r8, ip
 8019896:	f899 25b8 	ldrb.w	r2, [r9, #1464]	@ 0x5b8
 801989a:	2a00      	cmp	r2, #0
 801989c:	d1f3      	bne.n	8019886 <MoblePalCryptoModelAppBindDelete+0x46>
 801989e:	f8b9 95ba 	ldrh.w	r9, [r9, #1466]	@ 0x5ba
 80198a2:	45a1      	cmp	r9, r4
 80198a4:	d1ef      	bne.n	8019886 <MoblePalCryptoModelAppBindDelete+0x46>
 80198a6:	f44f 7339 	mov.w	r3, #740	@ 0x2e4
 80198aa:	fb03 8301 	mla	r3, r3, r1, r8
 80198ae:	442b      	add	r3, r5
 80198b0:	4691      	mov	r9, r2
 80198b2:	f108 0aa0 	add.w	sl, r8, #160	@ 0xa0
 80198b6:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 80198ba:	2a01      	cmp	r2, #1
 80198bc:	d1d0      	bne.n	8019860 <MoblePalCryptoModelAppBindDelete+0x20>
 80198be:	f44f 7339 	mov.w	r3, #740	@ 0x2e4
 80198c2:	2238      	movs	r2, #56	@ 0x38
 80198c4:	434b      	muls	r3, r1
 80198c6:	fb02 3309 	mla	r3, r2, r9, r3
 80198ca:	4433      	add	r3, r6
 80198cc:	4443      	add	r3, r8
 80198ce:	2200      	movs	r2, #0
 80198d0:	f883 2152 	strb.w	r2, [r3, #338]	@ 0x152
 80198d4:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 80198d8:	434b      	muls	r3, r1
 80198da:	201c      	movs	r0, #28
 80198dc:	fb00 3309 	mla	r3, r0, r9, r3
 80198e0:	4443      	add	r3, r8
 80198e2:	3350      	adds	r3, #80	@ 0x50
 80198e4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80198e8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80198ec:	4610      	mov	r0, r2
 80198ee:	e7c3      	b.n	8019878 <MoblePalCryptoModelAppBindDelete+0x38>
 80198f0:	20000008 	.word	0x20000008
 80198f4:	200003c0 	.word	0x200003c0
 80198f8:	2000140c 	.word	0x2000140c

080198fc <MoblePalCryptoDeleteAppKey>:
 80198fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198fe:	4604      	mov	r4, r0
 8019900:	481b      	ldr	r0, [pc, #108]	@ (8019970 <MoblePalCryptoDeleteAppKey+0x74>)
 8019902:	4d1c      	ldr	r5, [pc, #112]	@ (8019974 <MoblePalCryptoDeleteAppKey+0x78>)
 8019904:	8806      	ldrh	r6, [r0, #0]
 8019906:	2300      	movs	r3, #0
 8019908:	f04f 0c7c 	mov.w	ip, #124	@ 0x7c
 801990c:	b2da      	uxtb	r2, r3
 801990e:	42b2      	cmp	r2, r6
 8019910:	d20c      	bcs.n	801992c <MoblePalCryptoDeleteAppKey+0x30>
 8019912:	fb0c 5202 	mla	r2, ip, r2, r5
 8019916:	3301      	adds	r3, #1
 8019918:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	@ 0x448
 801991c:	428a      	cmp	r2, r1
 801991e:	d1f5      	bne.n	801990c <MoblePalCryptoDeleteAppKey+0x10>
 8019920:	8901      	ldrh	r1, [r0, #8]
 8019922:	2300      	movs	r3, #0
 8019924:	262c      	movs	r6, #44	@ 0x2c
 8019926:	b2d8      	uxtb	r0, r3
 8019928:	4288      	cmp	r0, r1
 801992a:	d301      	bcc.n	8019930 <MoblePalCryptoDeleteAppKey+0x34>
 801992c:	2001      	movs	r0, #1
 801992e:	e01d      	b.n	801996c <MoblePalCryptoDeleteAppKey+0x70>
 8019930:	4370      	muls	r0, r6
 8019932:	182a      	adds	r2, r5, r0
 8019934:	3301      	adds	r3, #1
 8019936:	f8b2 75ba 	ldrh.w	r7, [r2, #1466]	@ 0x5ba
 801993a:	42a7      	cmp	r7, r4
 801993c:	d1f3      	bne.n	8019926 <MoblePalCryptoDeleteAppKey+0x2a>
 801993e:	f892 35b8 	ldrb.w	r3, [r2, #1464]	@ 0x5b8
 8019942:	2b01      	cmp	r3, #1
 8019944:	d10e      	bne.n	8019964 <MoblePalCryptoDeleteAppKey+0x68>
 8019946:	4b0c      	ldr	r3, [pc, #48]	@ (8019978 <MoblePalCryptoDeleteAppKey+0x7c>)
 8019948:	2100      	movs	r1, #0
 801994a:	f882 15b8 	strb.w	r1, [r2, #1464]	@ 0x5b8
 801994e:	f882 15c0 	strb.w	r1, [r2, #1472]	@ 0x5c0
 8019952:	4418      	add	r0, r3
 8019954:	2210      	movs	r2, #16
 8019956:	f00f fc29 	bl	80291ac <memset>
 801995a:	f895 361d 	ldrb.w	r3, [r5, #1565]	@ 0x61d
 801995e:	3b01      	subs	r3, #1
 8019960:	f885 361d 	strb.w	r3, [r5, #1565]	@ 0x61d
 8019964:	4620      	mov	r0, r4
 8019966:	f7ff ff6b 	bl	8019840 <MoblePalCryptoModelAppBindDelete>
 801996a:	2000      	movs	r0, #0
 801996c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801996e:	bf00      	nop
 8019970:	20000008 	.word	0x20000008
 8019974:	2000140c 	.word	0x2000140c
 8019978:	200019a4 	.word	0x200019a4

0801997c <MoblePalCryptoDeleteNetworkKey>:
 801997c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019980:	4f2a      	ldr	r7, [pc, #168]	@ (8019a2c <MoblePalCryptoDeleteNetworkKey+0xb0>)
 8019982:	4d2b      	ldr	r5, [pc, #172]	@ (8019a30 <MoblePalCryptoDeleteNetworkKey+0xb4>)
 8019984:	8839      	ldrh	r1, [r7, #0]
 8019986:	f895 c61c 	ldrb.w	ip, [r5, #1564]	@ 0x61c
 801998a:	2200      	movs	r2, #0
 801998c:	4604      	mov	r4, r0
 801998e:	4613      	mov	r3, r2
 8019990:	f04f 0e7c 	mov.w	lr, #124	@ 0x7c
 8019994:	b2d0      	uxtb	r0, r2
 8019996:	4288      	cmp	r0, r1
 8019998:	d303      	bcc.n	80199a2 <MoblePalCryptoDeleteNetworkKey+0x26>
 801999a:	b313      	cbz	r3, 80199e2 <MoblePalCryptoDeleteNetworkKey+0x66>
 801999c:	4618      	mov	r0, r3
 801999e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80199a2:	fb0e f000 	mul.w	r0, lr, r0
 80199a6:	182e      	adds	r6, r5, r0
 80199a8:	f8b6 8448 	ldrh.w	r8, [r6, #1096]	@ 0x448
 80199ac:	45a0      	cmp	r8, r4
 80199ae:	d124      	bne.n	80199fa <MoblePalCryptoDeleteNetworkKey+0x7e>
 80199b0:	f896 8445 	ldrb.w	r8, [r6, #1093]	@ 0x445
 80199b4:	f1b8 0f01 	cmp.w	r8, #1
 80199b8:	d120      	bne.n	80199fc <MoblePalCryptoDeleteNetworkKey+0x80>
 80199ba:	f1bc 0f01 	cmp.w	ip, #1
 80199be:	d919      	bls.n	80199f4 <MoblePalCryptoDeleteNetworkKey+0x78>
 80199c0:	4b1c      	ldr	r3, [pc, #112]	@ (8019a34 <MoblePalCryptoDeleteNetworkKey+0xb8>)
 80199c2:	f04f 0800 	mov.w	r8, #0
 80199c6:	4418      	add	r0, r3
 80199c8:	f886 8445 	strb.w	r8, [r6, #1093]	@ 0x445
 80199cc:	2210      	movs	r2, #16
 80199ce:	4641      	mov	r1, r8
 80199d0:	f00f fbec 	bl	80291ac <memset>
 80199d4:	f895 361c 	ldrb.w	r3, [r5, #1564]	@ 0x61c
 80199d8:	f886 8444 	strb.w	r8, [r6, #1092]	@ 0x444
 80199dc:	3b01      	subs	r3, #1
 80199de:	f885 361c 	strb.w	r3, [r5, #1564]	@ 0x61c
 80199e2:	2600      	movs	r6, #0
 80199e4:	f04f 082c 	mov.w	r8, #44	@ 0x2c
 80199e8:	8939      	ldrh	r1, [r7, #8]
 80199ea:	b2f3      	uxtb	r3, r6
 80199ec:	428b      	cmp	r3, r1
 80199ee:	d307      	bcc.n	8019a00 <MoblePalCryptoDeleteNetworkKey+0x84>
 80199f0:	2300      	movs	r3, #0
 80199f2:	e7d3      	b.n	801999c <MoblePalCryptoDeleteNetworkKey+0x20>
 80199f4:	d102      	bne.n	80199fc <MoblePalCryptoDeleteNetworkKey+0x80>
 80199f6:	2303      	movs	r3, #3
 80199f8:	e7d0      	b.n	801999c <MoblePalCryptoDeleteNetworkKey+0x20>
 80199fa:	2301      	movs	r3, #1
 80199fc:	3201      	adds	r2, #1
 80199fe:	e7c9      	b.n	8019994 <MoblePalCryptoDeleteNetworkKey+0x18>
 8019a00:	fb08 5303 	mla	r3, r8, r3, r5
 8019a04:	f893 25b8 	ldrb.w	r2, [r3, #1464]	@ 0x5b8
 8019a08:	2a01      	cmp	r2, #1
 8019a0a:	d10c      	bne.n	8019a26 <MoblePalCryptoDeleteNetworkKey+0xaa>
 8019a0c:	f893 25c0 	ldrb.w	r2, [r3, #1472]	@ 0x5c0
 8019a10:	2a01      	cmp	r2, #1
 8019a12:	d108      	bne.n	8019a26 <MoblePalCryptoDeleteNetworkKey+0xaa>
 8019a14:	f8b3 25be 	ldrh.w	r2, [r3, #1470]	@ 0x5be
 8019a18:	42a2      	cmp	r2, r4
 8019a1a:	d104      	bne.n	8019a26 <MoblePalCryptoDeleteNetworkKey+0xaa>
 8019a1c:	f8b3 05ba 	ldrh.w	r0, [r3, #1466]	@ 0x5ba
 8019a20:	4621      	mov	r1, r4
 8019a22:	f7ff ff6b 	bl	80198fc <MoblePalCryptoDeleteAppKey>
 8019a26:	3601      	adds	r6, #1
 8019a28:	e7de      	b.n	80199e8 <MoblePalCryptoDeleteNetworkKey+0x6c>
 8019a2a:	bf00      	nop
 8019a2c:	20000008 	.word	0x20000008
 8019a30:	2000140c 	.word	0x2000140c
 8019a34:	20001830 	.word	0x20001830

08019a38 <MoblePalCrypto_GetAppBind_VendorModel>:
 8019a38:	4b1f      	ldr	r3, [pc, #124]	@ (8019ab8 <MoblePalCrypto_GetAppBind_VendorModel+0x80>)
 8019a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a3c:	2400      	movs	r4, #0
 8019a3e:	f44f 7639 	mov.w	r6, #740	@ 0x2e4
 8019a42:	fb06 f504 	mul.w	r5, r6, r4
 8019a46:	5aef      	ldrh	r7, [r5, r3]
 8019a48:	4287      	cmp	r7, r0
 8019a4a:	d131      	bne.n	8019ab0 <MoblePalCrypto_GetAppBind_VendorModel+0x78>
 8019a4c:	442b      	add	r3, r5
 8019a4e:	2000      	movs	r0, #0
 8019a50:	f893 5099 	ldrb.w	r5, [r3, #153]	@ 0x99
 8019a54:	2d01      	cmp	r5, #1
 8019a56:	d125      	bne.n	8019aa4 <MoblePalCrypto_GetAppBind_VendorModel+0x6c>
 8019a58:	4b18      	ldr	r3, [pc, #96]	@ (8019abc <MoblePalCrypto_GetAppBind_VendorModel+0x84>)
 8019a5a:	4e19      	ldr	r6, [pc, #100]	@ (8019ac0 <MoblePalCrypto_GetAppBind_VendorModel+0x88>)
 8019a5c:	f8b3 e008 	ldrh.w	lr, [r3, #8]
 8019a60:	f44f 7339 	mov.w	r3, #740	@ 0x2e4
 8019a64:	4363      	muls	r3, r4
 8019a66:	2738      	movs	r7, #56	@ 0x38
 8019a68:	fb07 3300 	mla	r3, r7, r0, r3
 8019a6c:	2500      	movs	r5, #0
 8019a6e:	4433      	add	r3, r6
 8019a70:	b2ef      	uxtb	r7, r5
 8019a72:	4577      	cmp	r7, lr
 8019a74:	d215      	bcs.n	8019aa2 <MoblePalCrypto_GetAppBind_VendorModel+0x6a>
 8019a76:	eb03 0c07 	add.w	ip, r3, r7
 8019a7a:	3501      	adds	r5, #1
 8019a7c:	f89c c152 	ldrb.w	ip, [ip, #338]	@ 0x152
 8019a80:	f1bc 0f01 	cmp.w	ip, #1
 8019a84:	d1f4      	bne.n	8019a70 <MoblePalCrypto_GetAppBind_VendorModel+0x38>
 8019a86:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 8019a8a:	4363      	muls	r3, r4
 8019a8c:	241c      	movs	r4, #28
 8019a8e:	fb04 3300 	mla	r3, r4, r0, r3
 8019a92:	443b      	add	r3, r7
 8019a94:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8019a98:	f8b3 314c 	ldrh.w	r3, [r3, #332]	@ 0x14c
 8019a9c:	800b      	strh	r3, [r1, #0]
 8019a9e:	f8a2 c000 	strh.w	ip, [r2]
 8019aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019aa4:	3001      	adds	r0, #1
 8019aa6:	280b      	cmp	r0, #11
 8019aa8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8019aac:	d1d0      	bne.n	8019a50 <MoblePalCrypto_GetAppBind_VendorModel+0x18>
 8019aae:	e7f8      	b.n	8019aa2 <MoblePalCrypto_GetAppBind_VendorModel+0x6a>
 8019ab0:	3401      	adds	r4, #1
 8019ab2:	2c05      	cmp	r4, #5
 8019ab4:	d1c5      	bne.n	8019a42 <MoblePalCrypto_GetAppBind_VendorModel+0xa>
 8019ab6:	e7f4      	b.n	8019aa2 <MoblePalCrypto_GetAppBind_VendorModel+0x6a>
 8019ab8:	200003c0 	.word	0x200003c0
 8019abc:	20000008 	.word	0x20000008
 8019ac0:	20000314 	.word	0x20000314

08019ac4 <MoblePalCrypto_GetAppBind_SIGModel>:
 8019ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8019b40 <MoblePalCrypto_GetAppBind_SIGModel+0x7c>)
 8019ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ac8:	2400      	movs	r4, #0
 8019aca:	f44f 7639 	mov.w	r6, #740	@ 0x2e4
 8019ace:	fb06 f504 	mul.w	r5, r6, r4
 8019ad2:	5aef      	ldrh	r7, [r5, r3]
 8019ad4:	4287      	cmp	r7, r0
 8019ad6:	d12f      	bne.n	8019b38 <MoblePalCrypto_GetAppBind_SIGModel+0x74>
 8019ad8:	1958      	adds	r0, r3, r5
 8019ada:	2500      	movs	r5, #0
 8019adc:	f890 3099 	ldrb.w	r3, [r0, #153]	@ 0x99
 8019ae0:	bb23      	cbnz	r3, 8019b2c <MoblePalCrypto_GetAppBind_SIGModel+0x68>
 8019ae2:	4818      	ldr	r0, [pc, #96]	@ (8019b44 <MoblePalCrypto_GetAppBind_SIGModel+0x80>)
 8019ae4:	4e18      	ldr	r6, [pc, #96]	@ (8019b48 <MoblePalCrypto_GetAppBind_SIGModel+0x84>)
 8019ae6:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 8019aea:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8019aee:	4360      	muls	r0, r4
 8019af0:	2738      	movs	r7, #56	@ 0x38
 8019af2:	fb07 0005 	mla	r0, r7, r5, r0
 8019af6:	4430      	add	r0, r6
 8019af8:	b2df      	uxtb	r7, r3
 8019afa:	4577      	cmp	r7, lr
 8019afc:	d215      	bcs.n	8019b2a <MoblePalCrypto_GetAppBind_SIGModel+0x66>
 8019afe:	eb00 0c07 	add.w	ip, r0, r7
 8019b02:	3301      	adds	r3, #1
 8019b04:	f89c c152 	ldrb.w	ip, [ip, #338]	@ 0x152
 8019b08:	f1bc 0f01 	cmp.w	ip, #1
 8019b0c:	d1f4      	bne.n	8019af8 <MoblePalCrypto_GetAppBind_SIGModel+0x34>
 8019b0e:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 8019b12:	4363      	muls	r3, r4
 8019b14:	201c      	movs	r0, #28
 8019b16:	fb00 3305 	mla	r3, r0, r5, r3
 8019b1a:	443b      	add	r3, r7
 8019b1c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8019b20:	f8b3 314c 	ldrh.w	r3, [r3, #332]	@ 0x14c
 8019b24:	800b      	strh	r3, [r1, #0]
 8019b26:	f8a2 c000 	strh.w	ip, [r2]
 8019b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b2c:	3501      	adds	r5, #1
 8019b2e:	2d0b      	cmp	r5, #11
 8019b30:	f100 0038 	add.w	r0, r0, #56	@ 0x38
 8019b34:	d1d2      	bne.n	8019adc <MoblePalCrypto_GetAppBind_SIGModel+0x18>
 8019b36:	e7f8      	b.n	8019b2a <MoblePalCrypto_GetAppBind_SIGModel+0x66>
 8019b38:	3401      	adds	r4, #1
 8019b3a:	2c05      	cmp	r4, #5
 8019b3c:	d1c7      	bne.n	8019ace <MoblePalCrypto_GetAppBind_SIGModel+0xa>
 8019b3e:	e7f4      	b.n	8019b2a <MoblePalCrypto_GetAppBind_SIGModel+0x66>
 8019b40:	200003c0 	.word	0x200003c0
 8019b44:	20000008 	.word	0x20000008
 8019b48:	20000314 	.word	0x20000314

08019b4c <MoblePalCryptoHasAppKeyBind>:
 8019b4c:	4b22      	ldr	r3, [pc, #136]	@ (8019bd8 <MoblePalCryptoHasAppKeyBind+0x8c>)
 8019b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b50:	4604      	mov	r4, r0
 8019b52:	2500      	movs	r5, #0
 8019b54:	f44f 7639 	mov.w	r6, #740	@ 0x2e4
 8019b58:	fb06 f005 	mul.w	r0, r6, r5
 8019b5c:	5ac7      	ldrh	r7, [r0, r3]
 8019b5e:	428f      	cmp	r7, r1
 8019b60:	d134      	bne.n	8019bcc <MoblePalCryptoHasAppKeyBind+0x80>
 8019b62:	4403      	add	r3, r0
 8019b64:	2100      	movs	r1, #0
 8019b66:	2001      	movs	r0, #1
 8019b68:	6f9e      	ldr	r6, [r3, #120]	@ 0x78
 8019b6a:	42a6      	cmp	r6, r4
 8019b6c:	d126      	bne.n	8019bbc <MoblePalCryptoHasAppKeyBind+0x70>
 8019b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8019bdc <MoblePalCryptoHasAppKeyBind+0x90>)
 8019b70:	4f1b      	ldr	r7, [pc, #108]	@ (8019be0 <MoblePalCryptoHasAppKeyBind+0x94>)
 8019b72:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8019b76:	f44f 7439 	mov.w	r4, #740	@ 0x2e4
 8019b7a:	2338      	movs	r3, #56	@ 0x38
 8019b7c:	436c      	muls	r4, r5
 8019b7e:	fb03 4401 	mla	r4, r3, r1, r4
 8019b82:	231c      	movs	r3, #28
 8019b84:	2600      	movs	r6, #0
 8019b86:	443c      	add	r4, r7
 8019b88:	4359      	muls	r1, r3
 8019b8a:	fa5f fe86 	uxtb.w	lr, r6
 8019b8e:	45e6      	cmp	lr, ip
 8019b90:	d300      	bcc.n	8019b94 <MoblePalCryptoHasAppKeyBind+0x48>
 8019b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b94:	eb04 030e 	add.w	r3, r4, lr
 8019b98:	f893 0152 	ldrb.w	r0, [r3, #338]	@ 0x152
 8019b9c:	2801      	cmp	r0, #1
 8019b9e:	d10a      	bne.n	8019bb6 <MoblePalCryptoHasAppKeyBind+0x6a>
 8019ba0:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 8019ba4:	fb03 1305 	mla	r3, r3, r5, r1
 8019ba8:	4473      	add	r3, lr
 8019baa:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019bae:	f8b3 314c 	ldrh.w	r3, [r3, #332]	@ 0x14c
 8019bb2:	4293      	cmp	r3, r2
 8019bb4:	d0ed      	beq.n	8019b92 <MoblePalCryptoHasAppKeyBind+0x46>
 8019bb6:	3601      	adds	r6, #1
 8019bb8:	2000      	movs	r0, #0
 8019bba:	e7e6      	b.n	8019b8a <MoblePalCryptoHasAppKeyBind+0x3e>
 8019bbc:	3101      	adds	r1, #1
 8019bbe:	290b      	cmp	r1, #11
 8019bc0:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8019bc4:	f04f 0000 	mov.w	r0, #0
 8019bc8:	d1ce      	bne.n	8019b68 <MoblePalCryptoHasAppKeyBind+0x1c>
 8019bca:	e7e2      	b.n	8019b92 <MoblePalCryptoHasAppKeyBind+0x46>
 8019bcc:	3501      	adds	r5, #1
 8019bce:	2d05      	cmp	r5, #5
 8019bd0:	d1c2      	bne.n	8019b58 <MoblePalCryptoHasAppKeyBind+0xc>
 8019bd2:	2001      	movs	r0, #1
 8019bd4:	e7dd      	b.n	8019b92 <MoblePalCryptoHasAppKeyBind+0x46>
 8019bd6:	bf00      	nop
 8019bd8:	200003c0 	.word	0x200003c0
 8019bdc:	20000008 	.word	0x20000008
 8019be0:	20000314 	.word	0x20000314

08019be4 <MoblePalCryptoHasAppKeyIndex>:
 8019be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019be6:	4c17      	ldr	r4, [pc, #92]	@ (8019c44 <MoblePalCryptoHasAppKeyIndex+0x60>)
 8019be8:	4d17      	ldr	r5, [pc, #92]	@ (8019c48 <MoblePalCryptoHasAppKeyIndex+0x64>)
 8019bea:	8826      	ldrh	r6, [r4, #0]
 8019bec:	2300      	movs	r3, #0
 8019bee:	f04f 0c7c 	mov.w	ip, #124	@ 0x7c
 8019bf2:	b2da      	uxtb	r2, r3
 8019bf4:	42b2      	cmp	r2, r6
 8019bf6:	d20c      	bcs.n	8019c12 <MoblePalCryptoHasAppKeyIndex+0x2e>
 8019bf8:	fb0c 5202 	mla	r2, ip, r2, r5
 8019bfc:	3301      	adds	r3, #1
 8019bfe:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	@ 0x448
 8019c02:	4282      	cmp	r2, r0
 8019c04:	d1f5      	bne.n	8019bf2 <MoblePalCryptoHasAppKeyIndex+0xe>
 8019c06:	8926      	ldrh	r6, [r4, #8]
 8019c08:	2200      	movs	r2, #0
 8019c0a:	272c      	movs	r7, #44	@ 0x2c
 8019c0c:	b2d3      	uxtb	r3, r2
 8019c0e:	42b3      	cmp	r3, r6
 8019c10:	d301      	bcc.n	8019c16 <MoblePalCryptoHasAppKeyIndex+0x32>
 8019c12:	2001      	movs	r0, #1
 8019c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c16:	fb07 5303 	mla	r3, r7, r3, r5
 8019c1a:	f8b3 c5ba 	ldrh.w	ip, [r3, #1466]	@ 0x5ba
 8019c1e:	f893 45b8 	ldrb.w	r4, [r3, #1464]	@ 0x5b8
 8019c22:	458c      	cmp	ip, r1
 8019c24:	d107      	bne.n	8019c36 <MoblePalCryptoHasAppKeyIndex+0x52>
 8019c26:	2c01      	cmp	r4, #1
 8019c28:	d107      	bne.n	8019c3a <MoblePalCryptoHasAppKeyIndex+0x56>
 8019c2a:	f8b3 35be 	ldrh.w	r3, [r3, #1470]	@ 0x5be
 8019c2e:	4283      	cmp	r3, r0
 8019c30:	d103      	bne.n	8019c3a <MoblePalCryptoHasAppKeyIndex+0x56>
 8019c32:	2000      	movs	r0, #0
 8019c34:	e7ee      	b.n	8019c14 <MoblePalCryptoHasAppKeyIndex+0x30>
 8019c36:	2c01      	cmp	r4, #1
 8019c38:	d001      	beq.n	8019c3e <MoblePalCryptoHasAppKeyIndex+0x5a>
 8019c3a:	3201      	adds	r2, #1
 8019c3c:	e7e6      	b.n	8019c0c <MoblePalCryptoHasAppKeyIndex+0x28>
 8019c3e:	2003      	movs	r0, #3
 8019c40:	e7e8      	b.n	8019c14 <MoblePalCryptoHasAppKeyIndex+0x30>
 8019c42:	bf00      	nop
 8019c44:	20000008 	.word	0x20000008
 8019c48:	2000140c 	.word	0x2000140c

08019c4c <BnrgmPalCryptoMatchAid>:
 8019c4c:	4b18      	ldr	r3, [pc, #96]	@ (8019cb0 <BnrgmPalCryptoMatchAid+0x64>)
 8019c4e:	b570      	push	{r4, r5, r6, lr}
 8019c50:	891e      	ldrh	r6, [r3, #8]
 8019c52:	4b18      	ldr	r3, [pc, #96]	@ (8019cb4 <BnrgmPalCryptoMatchAid+0x68>)
 8019c54:	2400      	movs	r4, #0
 8019c56:	b2a5      	uxth	r5, r4
 8019c58:	42ae      	cmp	r6, r5
 8019c5a:	7802      	ldrb	r2, [r0, #0]
 8019c5c:	d805      	bhi.n	8019c6a <BnrgmPalCryptoMatchAid+0x1e>
 8019c5e:	bb22      	cbnz	r2, 8019caa <BnrgmPalCryptoMatchAid+0x5e>
 8019c60:	7900      	ldrb	r0, [r0, #4]
 8019c62:	fab0 f080 	clz	r0, r0
 8019c66:	0940      	lsrs	r0, r0, #5
 8019c68:	bd70      	pop	{r4, r5, r6, pc}
 8019c6a:	f893 5194 	ldrb.w	r5, [r3, #404]	@ 0x194
 8019c6e:	b155      	cbz	r5, 8019c86 <BnrgmPalCryptoMatchAid+0x3a>
 8019c70:	f893 5198 	ldrb.w	r5, [r3, #408]	@ 0x198
 8019c74:	428d      	cmp	r5, r1
 8019c76:	d106      	bne.n	8019c86 <BnrgmPalCryptoMatchAid+0x3a>
 8019c78:	f893 519c 	ldrb.w	r5, [r3, #412]	@ 0x19c
 8019c7c:	b11d      	cbz	r5, 8019c86 <BnrgmPalCryptoMatchAid+0x3a>
 8019c7e:	1885      	adds	r5, r0, r2
 8019c80:	3201      	adds	r2, #1
 8019c82:	706c      	strb	r4, [r5, #1]
 8019c84:	7002      	strb	r2, [r0, #0]
 8019c86:	f893 2195 	ldrb.w	r2, [r3, #405]	@ 0x195
 8019c8a:	b15a      	cbz	r2, 8019ca4 <BnrgmPalCryptoMatchAid+0x58>
 8019c8c:	f893 2199 	ldrb.w	r2, [r3, #409]	@ 0x199
 8019c90:	428a      	cmp	r2, r1
 8019c92:	d107      	bne.n	8019ca4 <BnrgmPalCryptoMatchAid+0x58>
 8019c94:	f893 219c 	ldrb.w	r2, [r3, #412]	@ 0x19c
 8019c98:	b122      	cbz	r2, 8019ca4 <BnrgmPalCryptoMatchAid+0x58>
 8019c9a:	7902      	ldrb	r2, [r0, #4]
 8019c9c:	1885      	adds	r5, r0, r2
 8019c9e:	3201      	adds	r2, #1
 8019ca0:	716c      	strb	r4, [r5, #5]
 8019ca2:	7102      	strb	r2, [r0, #4]
 8019ca4:	3401      	adds	r4, #1
 8019ca6:	332c      	adds	r3, #44	@ 0x2c
 8019ca8:	e7d5      	b.n	8019c56 <BnrgmPalCryptoMatchAid+0xa>
 8019caa:	2000      	movs	r0, #0
 8019cac:	e7dc      	b.n	8019c68 <BnrgmPalCryptoMatchAid+0x1c>
 8019cae:	bf00      	nop
 8019cb0:	20000008 	.word	0x20000008
 8019cb4:	20001830 	.word	0x20001830

08019cb8 <BnrgmPalCryptoMatchNid>:
 8019cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8019d64 <BnrgmPalCryptoMatchNid+0xac>)
 8019cba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cbc:	8815      	ldrh	r5, [r2, #0]
 8019cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8019d68 <BnrgmPalCryptoMatchNid+0xb0>)
 8019cc0:	4603      	mov	r3, r0
 8019cc2:	2000      	movs	r0, #0
 8019cc4:	b284      	uxth	r4, r0
 8019cc6:	42a5      	cmp	r5, r4
 8019cc8:	d82e      	bhi.n	8019d28 <BnrgmPalCryptoMatchNid+0x70>
 8019cca:	4c28      	ldr	r4, [pc, #160]	@ (8019d6c <BnrgmPalCryptoMatchNid+0xb4>)
 8019ccc:	2200      	movs	r2, #0
 8019cce:	f2a4 662c 	subw	r6, r4, #1580	@ 0x62c
 8019cd2:	277c      	movs	r7, #124	@ 0x7c
 8019cd4:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8019cd8:	b1dd      	cbz	r5, 8019d12 <BnrgmPalCryptoMatchNid+0x5a>
 8019cda:	f895 0040 	ldrb.w	r0, [r5, #64]	@ 0x40
 8019cde:	b1a0      	cbz	r0, 8019d0a <BnrgmPalCryptoMatchNid+0x52>
 8019ce0:	4288      	cmp	r0, r1
 8019ce2:	d106      	bne.n	8019cf2 <BnrgmPalCryptoMatchNid+0x3a>
 8019ce4:	7a18      	ldrb	r0, [r3, #8]
 8019ce6:	eb03 0c00 	add.w	ip, r3, r0
 8019cea:	3001      	adds	r0, #1
 8019cec:	f88c 2009 	strb.w	r2, [ip, #9]
 8019cf0:	7218      	strb	r0, [r3, #8]
 8019cf2:	f895 0042 	ldrb.w	r0, [r5, #66]	@ 0x42
 8019cf6:	fb07 6000 	mla	r0, r7, r0, r6
 8019cfa:	f890 0446 	ldrb.w	r0, [r0, #1094]	@ 0x446
 8019cfe:	b120      	cbz	r0, 8019d0a <BnrgmPalCryptoMatchNid+0x52>
 8019d00:	7cd8      	ldrb	r0, [r3, #19]
 8019d02:	181d      	adds	r5, r3, r0
 8019d04:	3001      	adds	r0, #1
 8019d06:	752a      	strb	r2, [r5, #20]
 8019d08:	74d8      	strb	r0, [r3, #19]
 8019d0a:	3201      	adds	r2, #1
 8019d0c:	b2d2      	uxtb	r2, r2
 8019d0e:	2a0a      	cmp	r2, #10
 8019d10:	d1e0      	bne.n	8019cd4 <BnrgmPalCryptoMatchNid+0x1c>
 8019d12:	7818      	ldrb	r0, [r3, #0]
 8019d14:	bb18      	cbnz	r0, 8019d5e <BnrgmPalCryptoMatchNid+0xa6>
 8019d16:	791a      	ldrb	r2, [r3, #4]
 8019d18:	b92a      	cbnz	r2, 8019d26 <BnrgmPalCryptoMatchNid+0x6e>
 8019d1a:	7a1a      	ldrb	r2, [r3, #8]
 8019d1c:	b91a      	cbnz	r2, 8019d26 <BnrgmPalCryptoMatchNid+0x6e>
 8019d1e:	7cd8      	ldrb	r0, [r3, #19]
 8019d20:	fab0 f080 	clz	r0, r0
 8019d24:	0940      	lsrs	r0, r0, #5
 8019d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d28:	f892 4021 	ldrb.w	r4, [r2, #33]	@ 0x21
 8019d2c:	b1a4      	cbz	r4, 8019d58 <BnrgmPalCryptoMatchNid+0xa0>
 8019d2e:	f892 4038 	ldrb.w	r4, [r2, #56]	@ 0x38
 8019d32:	428c      	cmp	r4, r1
 8019d34:	d104      	bne.n	8019d40 <BnrgmPalCryptoMatchNid+0x88>
 8019d36:	781c      	ldrb	r4, [r3, #0]
 8019d38:	191e      	adds	r6, r3, r4
 8019d3a:	3401      	adds	r4, #1
 8019d3c:	7070      	strb	r0, [r6, #1]
 8019d3e:	701c      	strb	r4, [r3, #0]
 8019d40:	f892 4022 	ldrb.w	r4, [r2, #34]	@ 0x22
 8019d44:	b144      	cbz	r4, 8019d58 <BnrgmPalCryptoMatchNid+0xa0>
 8019d46:	f892 4039 	ldrb.w	r4, [r2, #57]	@ 0x39
 8019d4a:	428c      	cmp	r4, r1
 8019d4c:	d104      	bne.n	8019d58 <BnrgmPalCryptoMatchNid+0xa0>
 8019d4e:	791c      	ldrb	r4, [r3, #4]
 8019d50:	191e      	adds	r6, r3, r4
 8019d52:	3401      	adds	r4, #1
 8019d54:	7170      	strb	r0, [r6, #5]
 8019d56:	711c      	strb	r4, [r3, #4]
 8019d58:	3001      	adds	r0, #1
 8019d5a:	327c      	adds	r2, #124	@ 0x7c
 8019d5c:	e7b2      	b.n	8019cc4 <BnrgmPalCryptoMatchNid+0xc>
 8019d5e:	2000      	movs	r0, #0
 8019d60:	e7e1      	b.n	8019d26 <BnrgmPalCryptoMatchNid+0x6e>
 8019d62:	bf00      	nop
 8019d64:	20000008 	.word	0x20000008
 8019d68:	20001830 	.word	0x20001830
 8019d6c:	20001a38 	.word	0x20001a38

08019d70 <BnrgmPalCryptoInitFriendshipKeysP>:
 8019d70:	280a      	cmp	r0, #10
 8019d72:	d80b      	bhi.n	8019d8c <BnrgmPalCryptoInitFriendshipKeysP+0x1c>
 8019d74:	4b06      	ldr	r3, [pc, #24]	@ (8019d90 <BnrgmPalCryptoInitFriendshipKeysP+0x20>)
 8019d76:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8019d7a:	4281      	cmp	r1, r0
 8019d7c:	d101      	bne.n	8019d82 <BnrgmPalCryptoInitFriendshipKeysP+0x12>
 8019d7e:	2000      	movs	r0, #0
 8019d80:	4770      	bx	lr
 8019d82:	f851 2b04 	ldr.w	r2, [r1], #4
 8019d86:	f843 2f04 	str.w	r2, [r3, #4]!
 8019d8a:	e7f6      	b.n	8019d7a <BnrgmPalCryptoInitFriendshipKeysP+0xa>
 8019d8c:	2002      	movs	r0, #2
 8019d8e:	4770      	bx	lr
 8019d90:	20001a38 	.word	0x20001a38

08019d94 <BnrgmPalCryptoSetFriendshipNetKeyOffset>:
 8019d94:	280a      	cmp	r0, #10
 8019d96:	d80d      	bhi.n	8019db4 <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x20>
 8019d98:	4b07      	ldr	r3, [pc, #28]	@ (8019db8 <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x24>)
 8019d9a:	881b      	ldrh	r3, [r3, #0]
 8019d9c:	428b      	cmp	r3, r1
 8019d9e:	d309      	bcc.n	8019db4 <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x20>
 8019da0:	4b06      	ldr	r3, [pc, #24]	@ (8019dbc <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x28>)
 8019da2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8019da6:	f8d3 0630 	ldr.w	r0, [r3, #1584]	@ 0x630
 8019daa:	b120      	cbz	r0, 8019db6 <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x22>
 8019dac:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
 8019db0:	2000      	movs	r0, #0
 8019db2:	4770      	bx	lr
 8019db4:	2003      	movs	r0, #3
 8019db6:	4770      	bx	lr
 8019db8:	20000008 	.word	0x20000008
 8019dbc:	2000140c 	.word	0x2000140c

08019dc0 <BnrgmPalCryptoSetFriendshipKeys>:
 8019dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019dc4:	b089      	sub	sp, #36	@ 0x24
 8019dc6:	2501      	movs	r5, #1
 8019dc8:	f8bd 4040 	ldrh.w	r4, [sp, #64]	@ 0x40
 8019dcc:	f88d 5014 	strb.w	r5, [sp, #20]
 8019dd0:	f88d 1016 	strb.w	r1, [sp, #22]
 8019dd4:	0a0d      	lsrs	r5, r1, #8
 8019dd6:	f88d 2018 	strb.w	r2, [sp, #24]
 8019dda:	0a11      	lsrs	r1, r2, #8
 8019ddc:	f88d 301a 	strb.w	r3, [sp, #26]
 8019de0:	0a1a      	lsrs	r2, r3, #8
 8019de2:	280a      	cmp	r0, #10
 8019de4:	ea4f 2314 	mov.w	r3, r4, lsr #8
 8019de8:	f88d 5015 	strb.w	r5, [sp, #21]
 8019dec:	f88d 1017 	strb.w	r1, [sp, #23]
 8019df0:	f88d 2019 	strb.w	r2, [sp, #25]
 8019df4:	f88d 301b 	strb.w	r3, [sp, #27]
 8019df8:	f88d 401c 	strb.w	r4, [sp, #28]
 8019dfc:	d839      	bhi.n	8019e72 <BnrgmPalCryptoSetFriendshipKeys+0xb2>
 8019dfe:	4e1e      	ldr	r6, [pc, #120]	@ (8019e78 <BnrgmPalCryptoSetFriendshipKeys+0xb8>)
 8019e00:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8019e04:	f206 4824 	addw	r8, r6, #1060	@ 0x424
 8019e08:	f8d0 4630 	ldr.w	r4, [r0, #1584]	@ 0x630
 8019e0c:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8019e10:	f04f 0909 	mov.w	r9, #9
 8019e14:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8019e18:	ad05      	add	r5, sp, #20
 8019e1a:	2710      	movs	r7, #16
 8019e1c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8019e20:	f104 0220 	add.w	r2, r4, #32
 8019e24:	4621      	mov	r1, r4
 8019e26:	f8cd 9008 	str.w	r9, [sp, #8]
 8019e2a:	9501      	str	r5, [sp, #4]
 8019e2c:	9700      	str	r7, [sp, #0]
 8019e2e:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 8019e32:	f7ff f845 	bl	8018ec0 <MoblePalCryptoK2>
 8019e36:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8019e3a:	237c      	movs	r3, #124	@ 0x7c
 8019e3c:	fb03 6602 	mla	r6, r3, r2, r6
 8019e40:	f896 1446 	ldrb.w	r1, [r6, #1094]	@ 0x446
 8019e44:	2901      	cmp	r1, #1
 8019e46:	d10c      	bne.n	8019e62 <BnrgmPalCryptoSetFriendshipKeys+0xa2>
 8019e48:	fb13 7302 	smlabb	r3, r3, r2, r7
 8019e4c:	e9cd 5901 	strd	r5, r9, [sp, #4]
 8019e50:	9700      	str	r7, [sp, #0]
 8019e52:	4443      	add	r3, r8
 8019e54:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 8019e58:	19e1      	adds	r1, r4, r7
 8019e5a:	f104 0041 	add.w	r0, r4, #65	@ 0x41
 8019e5e:	f7ff f82f 	bl	8018ec0 <MoblePalCryptoK2>
 8019e62:	2801      	cmp	r0, #1
 8019e64:	bf94      	ite	ls
 8019e66:	2000      	movls	r0, #0
 8019e68:	2001      	movhi	r0, #1
 8019e6a:	0040      	lsls	r0, r0, #1
 8019e6c:	b009      	add	sp, #36	@ 0x24
 8019e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e72:	2003      	movs	r0, #3
 8019e74:	e7fa      	b.n	8019e6c <BnrgmPalCryptoSetFriendshipKeys+0xac>
 8019e76:	bf00      	nop
 8019e78:	2000140c 	.word	0x2000140c

08019e7c <BnrgmPalCryptoSwitchFriendshipKeys>:
 8019e7c:	280a      	cmp	r0, #10
 8019e7e:	b570      	push	{r4, r5, r6, lr}
 8019e80:	d830      	bhi.n	8019ee4 <BnrgmPalCryptoSwitchFriendshipKeys+0x68>
 8019e82:	4b19      	ldr	r3, [pc, #100]	@ (8019ee8 <BnrgmPalCryptoSwitchFriendshipKeys+0x6c>)
 8019e84:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8019e88:	f8d3 3630 	ldr.w	r3, [r3, #1584]	@ 0x630
 8019e8c:	b353      	cbz	r3, 8019ee4 <BnrgmPalCryptoSwitchFriendshipKeys+0x68>
 8019e8e:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8019e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8019e96:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8019e9a:	4602      	mov	r2, r0
 8019e9c:	f103 0120 	add.w	r1, r3, #32
 8019ea0:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8019ea4:	f852 5b04 	ldr.w	r5, [r2], #4
 8019ea8:	f841 5b04 	str.w	r5, [r1], #4
 8019eac:	42a2      	cmp	r2, r4
 8019eae:	d1f9      	bne.n	8019ea4 <BnrgmPalCryptoSwitchFriendshipKeys+0x28>
 8019eb0:	f103 0510 	add.w	r5, r3, #16
 8019eb4:	462a      	mov	r2, r5
 8019eb6:	4619      	mov	r1, r3
 8019eb8:	f105 0410 	add.w	r4, r5, #16
 8019ebc:	f852 6b04 	ldr.w	r6, [r2], #4
 8019ec0:	f841 6b04 	str.w	r6, [r1], #4
 8019ec4:	42a2      	cmp	r2, r4
 8019ec6:	d1f9      	bne.n	8019ebc <BnrgmPalCryptoSwitchFriendshipKeys+0x40>
 8019ec8:	2400      	movs	r4, #0
 8019eca:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
 8019ece:	2210      	movs	r2, #16
 8019ed0:	4621      	mov	r1, r4
 8019ed2:	f00f f96b 	bl	80291ac <memset>
 8019ed6:	2210      	movs	r2, #16
 8019ed8:	4621      	mov	r1, r4
 8019eda:	4628      	mov	r0, r5
 8019edc:	f00f f966 	bl	80291ac <memset>
 8019ee0:	4620      	mov	r0, r4
 8019ee2:	bd70      	pop	{r4, r5, r6, pc}
 8019ee4:	2003      	movs	r0, #3
 8019ee6:	e7fc      	b.n	8019ee2 <BnrgmPalCryptoSwitchFriendshipKeys+0x66>
 8019ee8:	2000140c 	.word	0x2000140c

08019eec <BnrgmPalCryptoDeleteFriendshipKeys>:
 8019eec:	280a      	cmp	r0, #10
 8019eee:	b508      	push	{r3, lr}
 8019ef0:	d80b      	bhi.n	8019f0a <BnrgmPalCryptoDeleteFriendshipKeys+0x1e>
 8019ef2:	4b07      	ldr	r3, [pc, #28]	@ (8019f10 <BnrgmPalCryptoDeleteFriendshipKeys+0x24>)
 8019ef4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8019ef8:	f8d3 0630 	ldr.w	r0, [r3, #1584]	@ 0x630
 8019efc:	b128      	cbz	r0, 8019f0a <BnrgmPalCryptoDeleteFriendshipKeys+0x1e>
 8019efe:	2244      	movs	r2, #68	@ 0x44
 8019f00:	2100      	movs	r1, #0
 8019f02:	f00f f953 	bl	80291ac <memset>
 8019f06:	2000      	movs	r0, #0
 8019f08:	bd08      	pop	{r3, pc}
 8019f0a:	2003      	movs	r0, #3
 8019f0c:	e7fc      	b.n	8019f08 <BnrgmPalCryptoDeleteFriendshipKeys+0x1c>
 8019f0e:	bf00      	nop
 8019f10:	2000140c 	.word	0x2000140c

08019f14 <MoblePalCrypto_UpdateModelPublicationParameters>:
 8019f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f16:	b931      	cbnz	r1, 8019f26 <MoblePalCrypto_UpdateModelPublicationParameters+0x12>
 8019f18:	4b25      	ldr	r3, [pc, #148]	@ (8019fb0 <MoblePalCrypto_UpdateModelPublicationParameters+0x9c>)
 8019f1a:	4a26      	ldr	r2, [pc, #152]	@ (8019fb4 <MoblePalCrypto_UpdateModelPublicationParameters+0xa0>)
 8019f1c:	f640 31ca 	movw	r1, #3018	@ 0xbca
 8019f20:	4825      	ldr	r0, [pc, #148]	@ (8019fb8 <MoblePalCrypto_UpdateModelPublicationParameters+0xa4>)
 8019f22:	f00e fa5b 	bl	80283dc <__assert_func>
 8019f26:	b952      	cbnz	r2, 8019f3e <MoblePalCrypto_UpdateModelPublicationParameters+0x2a>
 8019f28:	4b24      	ldr	r3, [pc, #144]	@ (8019fbc <MoblePalCrypto_UpdateModelPublicationParameters+0xa8>)
 8019f2a:	4a22      	ldr	r2, [pc, #136]	@ (8019fb4 <MoblePalCrypto_UpdateModelPublicationParameters+0xa0>)
 8019f2c:	f640 31cb 	movw	r1, #3019	@ 0xbcb
 8019f30:	e7f6      	b.n	8019f20 <MoblePalCrypto_UpdateModelPublicationParameters+0xc>
 8019f32:	3001      	adds	r0, #1
 8019f34:	280b      	cmp	r0, #11
 8019f36:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 8019f3a:	d114      	bne.n	8019f66 <MoblePalCrypto_UpdateModelPublicationParameters+0x52>
 8019f3c:	e034      	b.n	8019fa8 <MoblePalCrypto_UpdateModelPublicationParameters+0x94>
 8019f3e:	4c20      	ldr	r4, [pc, #128]	@ (8019fc0 <MoblePalCrypto_UpdateModelPublicationParameters+0xac>)
 8019f40:	2300      	movs	r3, #0
 8019f42:	f44f 7539 	mov.w	r5, #740	@ 0x2e4
 8019f46:	f5a4 7739 	sub.w	r7, r4, #740	@ 0x2e4
 8019f4a:	b2de      	uxtb	r6, r3
 8019f4c:	42b0      	cmp	r0, r6
 8019f4e:	d92b      	bls.n	8019fa8 <MoblePalCrypto_UpdateModelPublicationParameters+0x94>
 8019f50:	fb03 5c05 	mla	ip, r3, r5, r5
 8019f54:	1c5e      	adds	r6, r3, #1
 8019f56:	f837 c00c 	ldrh.w	ip, [r7, ip]
 8019f5a:	458c      	cmp	ip, r1
 8019f5c:	d125      	bne.n	8019faa <MoblePalCrypto_UpdateModelPublicationParameters+0x96>
 8019f5e:	6816      	ldr	r6, [r2, #0]
 8019f60:	fb05 4103 	mla	r1, r5, r3, r4
 8019f64:	2000      	movs	r0, #0
 8019f66:	6f8c      	ldr	r4, [r1, #120]	@ 0x78
 8019f68:	42b4      	cmp	r4, r6
 8019f6a:	d1e2      	bne.n	8019f32 <MoblePalCrypto_UpdateModelPublicationParameters+0x1e>
 8019f6c:	f44f 7139 	mov.w	r1, #740	@ 0x2e4
 8019f70:	4359      	muls	r1, r3
 8019f72:	2338      	movs	r3, #56	@ 0x38
 8019f74:	fb03 1100 	mla	r1, r3, r0, r1
 8019f78:	4b12      	ldr	r3, [pc, #72]	@ (8019fc4 <MoblePalCrypto_UpdateModelPublicationParameters+0xb0>)
 8019f7a:	8894      	ldrh	r4, [r2, #4]
 8019f7c:	440b      	add	r3, r1
 8019f7e:	88d1      	ldrh	r1, [r2, #6]
 8019f80:	f8a3 4128 	strh.w	r4, [r3, #296]	@ 0x128
 8019f84:	f8a3 112a 	strh.w	r1, [r3, #298]	@ 0x12a
 8019f88:	7f11      	ldrb	r1, [r2, #28]
 8019f8a:	f883 1140 	strb.w	r1, [r3, #320]	@ 0x140
 8019f8e:	7f51      	ldrb	r1, [r2, #29]
 8019f90:	f883 1141 	strb.w	r1, [r3, #321]	@ 0x141
 8019f94:	7f91      	ldrb	r1, [r2, #30]
 8019f96:	f883 1142 	strb.w	r1, [r3, #322]	@ 0x142
 8019f9a:	7fd1      	ldrb	r1, [r2, #31]
 8019f9c:	f883 1143 	strb.w	r1, [r3, #323]	@ 0x143
 8019fa0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8019fa4:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8019fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019faa:	4633      	mov	r3, r6
 8019fac:	e7cd      	b.n	8019f4a <MoblePalCrypto_UpdateModelPublicationParameters+0x36>
 8019fae:	bf00      	nop
 8019fb0:	08030fe7 	.word	0x08030fe7
 8019fb4:	0802f2dc 	.word	0x0802f2dc
 8019fb8:	08030fa3 	.word	0x08030fa3
 8019fbc:	08030ff6 	.word	0x08030ff6
 8019fc0:	200003c0 	.word	0x200003c0
 8019fc4:	20000314 	.word	0x20000314

08019fc8 <MoblePalCrypto_UpdateHealthModelPublicationParameters>:
 8019fc8:	b508      	push	{r3, lr}
 8019fca:	b930      	cbnz	r0, 8019fda <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x12>
 8019fcc:	4b12      	ldr	r3, [pc, #72]	@ (801a018 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x50>)
 8019fce:	4a13      	ldr	r2, [pc, #76]	@ (801a01c <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x54>)
 8019fd0:	f640 31f1 	movw	r1, #3057	@ 0xbf1
 8019fd4:	4812      	ldr	r0, [pc, #72]	@ (801a020 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x58>)
 8019fd6:	f00e fa01 	bl	80283dc <__assert_func>
 8019fda:	b921      	cbnz	r1, 8019fe6 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x1e>
 8019fdc:	4b11      	ldr	r3, [pc, #68]	@ (801a024 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x5c>)
 8019fde:	4a0f      	ldr	r2, [pc, #60]	@ (801a01c <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x54>)
 8019fe0:	f640 31f2 	movw	r1, #3058	@ 0xbf2
 8019fe4:	e7f6      	b.n	8019fd4 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0xc>
 8019fe6:	4b10      	ldr	r3, [pc, #64]	@ (801a028 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x60>)
 8019fe8:	888a      	ldrh	r2, [r1, #4]
 8019fea:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a
 8019fee:	88ca      	ldrh	r2, [r1, #6]
 8019ff0:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
 8019ff4:	7f0a      	ldrb	r2, [r1, #28]
 8019ff6:	f883 210f 	strb.w	r2, [r3, #271]	@ 0x10f
 8019ffa:	7f4a      	ldrb	r2, [r1, #29]
 8019ffc:	f883 210e 	strb.w	r2, [r3, #270]	@ 0x10e
 801a000:	7f8a      	ldrb	r2, [r1, #30]
 801a002:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
 801a006:	7fca      	ldrb	r2, [r1, #31]
 801a008:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
 801a00c:	f891 2020 	ldrb.w	r2, [r1, #32]
 801a010:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111
 801a014:	bd08      	pop	{r3, pc}
 801a016:	bf00      	nop
 801a018:	08030fe7 	.word	0x08030fe7
 801a01c:	0802f30c 	.word	0x0802f30c
 801a020:	08030fa3 	.word	0x08030fa3
 801a024:	08030ff6 	.word	0x08030ff6
 801a028:	20000314 	.word	0x20000314

0801a02c <MoblePalCrypto_GetModelPublicationParameters>:
 801a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a02e:	b931      	cbnz	r1, 801a03e <MoblePalCrypto_GetModelPublicationParameters+0x12>
 801a030:	4b1b      	ldr	r3, [pc, #108]	@ (801a0a0 <MoblePalCrypto_GetModelPublicationParameters+0x74>)
 801a032:	4a1c      	ldr	r2, [pc, #112]	@ (801a0a4 <MoblePalCrypto_GetModelPublicationParameters+0x78>)
 801a034:	f640 4166 	movw	r1, #3174	@ 0xc66
 801a038:	481b      	ldr	r0, [pc, #108]	@ (801a0a8 <MoblePalCrypto_GetModelPublicationParameters+0x7c>)
 801a03a:	f00e f9cf 	bl	80283dc <__assert_func>
 801a03e:	b922      	cbnz	r2, 801a04a <MoblePalCrypto_GetModelPublicationParameters+0x1e>
 801a040:	4b1a      	ldr	r3, [pc, #104]	@ (801a0ac <MoblePalCrypto_GetModelPublicationParameters+0x80>)
 801a042:	4a18      	ldr	r2, [pc, #96]	@ (801a0a4 <MoblePalCrypto_GetModelPublicationParameters+0x78>)
 801a044:	f640 4167 	movw	r1, #3175	@ 0xc67
 801a048:	e7f6      	b.n	801a038 <MoblePalCrypto_GetModelPublicationParameters+0xc>
 801a04a:	4d19      	ldr	r5, [pc, #100]	@ (801a0b0 <MoblePalCrypto_GetModelPublicationParameters+0x84>)
 801a04c:	2300      	movs	r3, #0
 801a04e:	f44f 7639 	mov.w	r6, #740	@ 0x2e4
 801a052:	f5a5 7739 	sub.w	r7, r5, #740	@ 0x2e4
 801a056:	b2dc      	uxtb	r4, r3
 801a058:	42a0      	cmp	r0, r4
 801a05a:	d913      	bls.n	801a084 <MoblePalCrypto_GetModelPublicationParameters+0x58>
 801a05c:	fb03 6e06 	mla	lr, r3, r6, r6
 801a060:	f103 0c01 	add.w	ip, r3, #1
 801a064:	f837 e00e 	ldrh.w	lr, [r7, lr]
 801a068:	458e      	cmp	lr, r1
 801a06a:	d116      	bne.n	801a09a <MoblePalCrypto_GetModelPublicationParameters+0x6e>
 801a06c:	fb06 5303 	mla	r3, r6, r3, r5
 801a070:	2100      	movs	r1, #0
 801a072:	6f9e      	ldr	r6, [r3, #120]	@ 0x78
 801a074:	4296      	cmp	r6, r2
 801a076:	b2c8      	uxtb	r0, r1
 801a078:	d006      	beq.n	801a088 <MoblePalCrypto_GetModelPublicationParameters+0x5c>
 801a07a:	3101      	adds	r1, #1
 801a07c:	290b      	cmp	r1, #11
 801a07e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 801a082:	d1f6      	bne.n	801a072 <MoblePalCrypto_GetModelPublicationParameters+0x46>
 801a084:	2400      	movs	r4, #0
 801a086:	4620      	mov	r0, r4
 801a088:	f44f 7339 	mov.w	r3, #740	@ 0x2e4
 801a08c:	435c      	muls	r4, r3
 801a08e:	2338      	movs	r3, #56	@ 0x38
 801a090:	fb13 4300 	smlabb	r3, r3, r0, r4
 801a094:	3378      	adds	r3, #120	@ 0x78
 801a096:	18e8      	adds	r0, r5, r3
 801a098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a09a:	4663      	mov	r3, ip
 801a09c:	e7db      	b.n	801a056 <MoblePalCrypto_GetModelPublicationParameters+0x2a>
 801a09e:	bf00      	nop
 801a0a0:	08030fe7 	.word	0x08030fe7
 801a0a4:	0802f342 	.word	0x0802f342
 801a0a8:	08030fa3 	.word	0x08030fa3
 801a0ac:	08031006 	.word	0x08031006
 801a0b0:	200003c0 	.word	0x200003c0

0801a0b4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>:
 801a0b4:	4b0b      	ldr	r3, [pc, #44]	@ (801a0e4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x30>)
 801a0b6:	f8b3 2448 	ldrh.w	r2, [r3, #1096]	@ 0x448
 801a0ba:	4282      	cmp	r2, r0
 801a0bc:	d00a      	beq.n	801a0d4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x20>
 801a0be:	f8b3 24c4 	ldrh.w	r2, [r3, #1220]	@ 0x4c4
 801a0c2:	4282      	cmp	r2, r0
 801a0c4:	d008      	beq.n	801a0d8 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x24>
 801a0c6:	f8b3 3540 	ldrh.w	r3, [r3, #1344]	@ 0x540
 801a0ca:	4283      	cmp	r3, r0
 801a0cc:	d106      	bne.n	801a0dc <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x28>
 801a0ce:	2002      	movs	r0, #2
 801a0d0:	b240      	sxtb	r0, r0
 801a0d2:	4770      	bx	lr
 801a0d4:	2000      	movs	r0, #0
 801a0d6:	e7fb      	b.n	801a0d0 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x1c>
 801a0d8:	2001      	movs	r0, #1
 801a0da:	e7f9      	b.n	801a0d0 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x1c>
 801a0dc:	f04f 30ff 	mov.w	r0, #4294967295
 801a0e0:	4770      	bx	lr
 801a0e2:	bf00      	nop
 801a0e4:	2000140c 	.word	0x2000140c

0801a0e8 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>:
 801a0e8:	4b0b      	ldr	r3, [pc, #44]	@ (801a118 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x30>)
 801a0ea:	f8b3 25ba 	ldrh.w	r2, [r3, #1466]	@ 0x5ba
 801a0ee:	4282      	cmp	r2, r0
 801a0f0:	d00a      	beq.n	801a108 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x20>
 801a0f2:	f8b3 25e6 	ldrh.w	r2, [r3, #1510]	@ 0x5e6
 801a0f6:	4282      	cmp	r2, r0
 801a0f8:	d008      	beq.n	801a10c <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x24>
 801a0fa:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	@ 0x612
 801a0fe:	4283      	cmp	r3, r0
 801a100:	d106      	bne.n	801a110 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x28>
 801a102:	2002      	movs	r0, #2
 801a104:	b240      	sxtb	r0, r0
 801a106:	4770      	bx	lr
 801a108:	2000      	movs	r0, #0
 801a10a:	e7fb      	b.n	801a104 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x1c>
 801a10c:	2001      	movs	r0, #1
 801a10e:	e7f9      	b.n	801a104 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x1c>
 801a110:	f04f 30ff 	mov.w	r0, #4294967295
 801a114:	4770      	bx	lr
 801a116:	bf00      	nop
 801a118:	2000140c 	.word	0x2000140c

0801a11c <MoblePalCryptoSwitchKeys>:
 801a11c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a120:	b085      	sub	sp, #20
 801a122:	4602      	mov	r2, r0
 801a124:	4607      	mov	r7, r0
 801a126:	460d      	mov	r5, r1
 801a128:	2400      	movs	r4, #0
 801a12a:	f10d 0102 	add.w	r1, sp, #2
 801a12e:	a802      	add	r0, sp, #8
 801a130:	f10d 0804 	add.w	r8, sp, #4
 801a134:	f8ad 4002 	strh.w	r4, [sp, #2]
 801a138:	ae02      	add	r6, sp, #8
 801a13a:	f7ff fb23 	bl	8019784 <MoblePalCryptoGetAppKeyIndexes>
 801a13e:	4641      	mov	r1, r8
 801a140:	f836 0b02 	ldrh.w	r0, [r6], #2
 801a144:	f7ff ffd0 	bl	801a0e8 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 801a148:	3401      	adds	r4, #1
 801a14a:	b2e4      	uxtb	r4, r4
 801a14c:	2c03      	cmp	r4, #3
 801a14e:	f801 0b01 	strb.w	r0, [r1], #1
 801a152:	d1f5      	bne.n	801a140 <MoblePalCryptoSwitchKeys+0x24>
 801a154:	4e1d      	ldr	r6, [pc, #116]	@ (801a1cc <MoblePalCryptoSwitchKeys+0xb0>)
 801a156:	237c      	movs	r3, #124	@ 0x7c
 801a158:	fb03 6405 	mla	r4, r3, r5, r6
 801a15c:	f894 2445 	ldrb.w	r2, [r4, #1093]	@ 0x445
 801a160:	2a01      	cmp	r2, #1
 801a162:	d10a      	bne.n	801a17a <MoblePalCryptoSwitchKeys+0x5e>
 801a164:	f04f 0900 	mov.w	r9, #0
 801a168:	f884 9445 	strb.w	r9, [r4, #1093]	@ 0x445
 801a16c:	4639      	mov	r1, r7
 801a16e:	f204 4034 	addw	r0, r4, #1076	@ 0x434
 801a172:	f7ff f9e3 	bl	801953c <MoblePalCryptoSetNetworkKey>
 801a176:	f884 9446 	strb.w	r9, [r4, #1094]	@ 0x446
 801a17a:	2300      	movs	r3, #0
 801a17c:	222c      	movs	r2, #44	@ 0x2c
 801a17e:	f918 1b01 	ldrsb.w	r1, [r8], #1
 801a182:	fb02 6401 	mla	r4, r2, r1, r6
 801a186:	f504 60b7 	add.w	r0, r4, #1464	@ 0x5b8
 801a18a:	f894 55b8 	ldrb.w	r5, [r4, #1464]	@ 0x5b8
 801a18e:	2d01      	cmp	r5, #1
 801a190:	d118      	bne.n	801a1c4 <MoblePalCryptoSwitchKeys+0xa8>
 801a192:	f204 55b9 	addw	r5, r4, #1465	@ 0x5b9
 801a196:	f894 45b9 	ldrb.w	r4, [r4, #1465]	@ 0x5b9
 801a19a:	2c01      	cmp	r4, #1
 801a19c:	d112      	bne.n	801a1c4 <MoblePalCryptoSwitchKeys+0xa8>
 801a19e:	2400      	movs	r4, #0
 801a1a0:	7004      	strb	r4, [r0, #0]
 801a1a2:	a804      	add	r0, sp, #16
 801a1a4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a1a8:	4809      	ldr	r0, [pc, #36]	@ (801a1d0 <MoblePalCryptoSwitchKeys+0xb4>)
 801a1aa:	fb02 0001 	mla	r0, r2, r1, r0
 801a1ae:	f500 70c2 	add.w	r0, r0, #388	@ 0x184
 801a1b2:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 801a1b6:	463a      	mov	r2, r7
 801a1b8:	f7fe ffcc 	bl	8019154 <MoblePalCryptoSetAppKey>
 801a1bc:	702c      	strb	r4, [r5, #0]
 801a1be:	b005      	add	sp, #20
 801a1c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a1c4:	3301      	adds	r3, #1
 801a1c6:	2b03      	cmp	r3, #3
 801a1c8:	d1d9      	bne.n	801a17e <MoblePalCryptoSwitchKeys+0x62>
 801a1ca:	e7f8      	b.n	801a1be <MoblePalCryptoSwitchKeys+0xa2>
 801a1cc:	2000140c 	.word	0x2000140c
 801a1d0:	20001830 	.word	0x20001830

0801a1d4 <MoblePalCryptoIsSubscriptionExists>:
 801a1d4:	4915      	ldr	r1, [pc, #84]	@ (801a22c <MoblePalCryptoIsSubscriptionExists+0x58>)
 801a1d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1d8:	2302      	movs	r3, #2
 801a1da:	2500      	movs	r5, #0
 801a1dc:	880a      	ldrh	r2, [r1, #0]
 801a1de:	b30a      	cbz	r2, 801a224 <MoblePalCryptoIsSubscriptionExists+0x50>
 801a1e0:	460c      	mov	r4, r1
 801a1e2:	2600      	movs	r6, #0
 801a1e4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801a1e6:	b1ba      	cbz	r2, 801a218 <MoblePalCryptoIsSubscriptionExists+0x44>
 801a1e8:	b17b      	cbz	r3, 801a20a <MoblePalCryptoIsSubscriptionExists+0x36>
 801a1ea:	f104 077e 	add.w	r7, r4, #126	@ 0x7e
 801a1ee:	220a      	movs	r2, #10
 801a1f0:	f837 cf02 	ldrh.w	ip, [r7, #2]!
 801a1f4:	4584      	cmp	ip, r0
 801a1f6:	d013      	beq.n	801a220 <MoblePalCryptoIsSubscriptionExists+0x4c>
 801a1f8:	3a01      	subs	r2, #1
 801a1fa:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 801a1fe:	d1f7      	bne.n	801a1f0 <MoblePalCryptoIsSubscriptionExists+0x1c>
 801a200:	360e      	adds	r6, #14
 801a202:	2e9a      	cmp	r6, #154	@ 0x9a
 801a204:	f104 0438 	add.w	r4, r4, #56	@ 0x38
 801a208:	d1ec      	bne.n	801a1e4 <MoblePalCryptoIsSubscriptionExists+0x10>
 801a20a:	3501      	adds	r5, #1
 801a20c:	2d05      	cmp	r5, #5
 801a20e:	f501 7139 	add.w	r1, r1, #740	@ 0x2e4
 801a212:	d1e3      	bne.n	801a1dc <MoblePalCryptoIsSubscriptionExists+0x8>
 801a214:	4618      	mov	r0, r3
 801a216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a218:	2b00      	cmp	r3, #0
 801a21a:	d0f6      	beq.n	801a20a <MoblePalCryptoIsSubscriptionExists+0x36>
 801a21c:	2302      	movs	r3, #2
 801a21e:	e7ef      	b.n	801a200 <MoblePalCryptoIsSubscriptionExists+0x2c>
 801a220:	2300      	movs	r3, #0
 801a222:	e7ed      	b.n	801a200 <MoblePalCryptoIsSubscriptionExists+0x2c>
 801a224:	2b00      	cmp	r3, #0
 801a226:	d0f5      	beq.n	801a214 <MoblePalCryptoIsSubscriptionExists+0x40>
 801a228:	2302      	movs	r3, #2
 801a22a:	e7ee      	b.n	801a20a <MoblePalCryptoIsSubscriptionExists+0x36>
 801a22c:	200003c0 	.word	0x200003c0

0801a230 <BnrgmTransmitQueueInit>:
 801a230:	4a08      	ldr	r2, [pc, #32]	@ (801a254 <BnrgmTransmitQueueInit+0x24>)
 801a232:	2300      	movs	r3, #0
 801a234:	7013      	strb	r3, [r2, #0]
 801a236:	7413      	strb	r3, [r2, #16]
 801a238:	f882 3020 	strb.w	r3, [r2, #32]
 801a23c:	4619      	mov	r1, r3
 801a23e:	3301      	adds	r3, #1
 801a240:	2b64      	cmp	r3, #100	@ 0x64
 801a242:	f882 1055 	strb.w	r1, [r2, #85]	@ 0x55
 801a246:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 801a24a:	d1f8      	bne.n	801a23e <BnrgmTransmitQueueInit+0xe>
 801a24c:	4b02      	ldr	r3, [pc, #8]	@ (801a258 <BnrgmTransmitQueueInit+0x28>)
 801a24e:	f8c3 1164 	str.w	r1, [r3, #356]	@ 0x164
 801a252:	4770      	bx	lr
 801a254:	20002f54 	.word	0x20002f54
 801a258:	20003f54 	.word	0x20003f54

0801a25c <BnrgmTransmitQueuePush>:
 801a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a25e:	4d1f      	ldr	r5, [pc, #124]	@ (801a2dc <BnrgmTransmitQueuePush+0x80>)
 801a260:	460e      	mov	r6, r1
 801a262:	4619      	mov	r1, r3
 801a264:	f895 3166 	ldrb.w	r3, [r5, #358]	@ 0x166
 801a268:	2b63      	cmp	r3, #99	@ 0x63
 801a26a:	4617      	mov	r7, r2
 801a26c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801a270:	d831      	bhi.n	801a2d6 <BnrgmTransmitQueuePush+0x7a>
 801a272:	f895 c165 	ldrb.w	ip, [r5, #357]	@ 0x165
 801a276:	232c      	movs	r3, #44	@ 0x2c
 801a278:	f5a5 647d 	sub.w	r4, r5, #4048	@ 0xfd0
 801a27c:	fb0c 4403 	mla	r4, ip, r3, r4
 801a280:	2301      	movs	r3, #1
 801a282:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
 801a286:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801a28a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801a28e:	f884 0020 	strb.w	r0, [r4, #32]
 801a292:	2600      	movs	r6, #0
 801a294:	8463      	strh	r3, [r4, #34]	@ 0x22
 801a296:	77e2      	strb	r2, [r4, #31]
 801a298:	f884 7024 	strb.w	r7, [r4, #36]	@ 0x24
 801a29c:	62a6      	str	r6, [r4, #40]	@ 0x28
 801a29e:	4620      	mov	r0, r4
 801a2a0:	f00f f815 	bl	80292ce <memcpy>
 801a2a4:	f895 3165 	ldrb.w	r3, [r5, #357]	@ 0x165
 801a2a8:	2264      	movs	r2, #100	@ 0x64
 801a2aa:	3301      	adds	r3, #1
 801a2ac:	fbb3 f1f2 	udiv	r1, r3, r2
 801a2b0:	fb02 3311 	mls	r3, r2, r1, r3
 801a2b4:	f885 3165 	strb.w	r3, [r5, #357]	@ 0x165
 801a2b8:	f895 3166 	ldrb.w	r3, [r5, #358]	@ 0x166
 801a2bc:	2f01      	cmp	r7, #1
 801a2be:	f103 0301 	add.w	r3, r3, #1
 801a2c2:	f885 3166 	strb.w	r3, [r5, #358]	@ 0x166
 801a2c6:	d104      	bne.n	801a2d2 <BnrgmTransmitQueuePush+0x76>
 801a2c8:	f895 3167 	ldrb.w	r3, [r5, #359]	@ 0x167
 801a2cc:	3301      	adds	r3, #1
 801a2ce:	f885 3167 	strb.w	r3, [r5, #359]	@ 0x167
 801a2d2:	4630      	mov	r0, r6
 801a2d4:	e000      	b.n	801a2d8 <BnrgmTransmitQueuePush+0x7c>
 801a2d6:	2004      	movs	r0, #4
 801a2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2da:	bf00      	nop
 801a2dc:	20003f54 	.word	0x20003f54

0801a2e0 <BnrgmTransmitQueDecreasePktCount>:
 801a2e0:	b510      	push	{r4, lr}
 801a2e2:	4604      	mov	r4, r0
 801a2e4:	b188      	cbz	r0, 801a30a <BnrgmTransmitQueDecreasePktCount+0x2a>
 801a2e6:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801a2ea:	2b01      	cmp	r3, #1
 801a2ec:	d10d      	bne.n	801a30a <BnrgmTransmitQueDecreasePktCount+0x2a>
 801a2ee:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
 801a2f2:	b910      	cbnz	r0, 801a2fa <BnrgmTransmitQueDecreasePktCount+0x1a>
 801a2f4:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
 801a2f8:	bd10      	pop	{r4, pc}
 801a2fa:	1e43      	subs	r3, r0, #1
 801a2fc:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 801a300:	f7ed fd8c 	bl	8007e1c <HAL_GetTick>
 801a304:	62a0      	str	r0, [r4, #40]	@ 0x28
 801a306:	2000      	movs	r0, #0
 801a308:	e7f6      	b.n	801a2f8 <BnrgmTransmitQueDecreasePktCount+0x18>
 801a30a:	2002      	movs	r0, #2
 801a30c:	e7f4      	b.n	801a2f8 <BnrgmTransmitQueDecreasePktCount+0x18>
	...

0801a310 <BnrgmTransmitQueuePrepNextItem>:
 801a310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a314:	4d25      	ldr	r5, [pc, #148]	@ (801a3ac <BnrgmTransmitQueuePrepNextItem+0x9c>)
 801a316:	f895 2167 	ldrb.w	r2, [r5, #359]	@ 0x167
 801a31a:	2300      	movs	r3, #0
 801a31c:	f8c5 3160 	str.w	r3, [r5, #352]	@ 0x160
 801a320:	b1e2      	cbz	r2, 801a35c <BnrgmTransmitQueuePrepNextItem+0x4c>
 801a322:	f895 4164 	ldrb.w	r4, [r5, #356]	@ 0x164
 801a326:	2064      	movs	r0, #100	@ 0x64
 801a328:	262c      	movs	r6, #44	@ 0x2c
 801a32a:	f5a5 617d 	sub.w	r1, r5, #4048	@ 0xfd0
 801a32e:	f240 1701 	movw	r7, #257	@ 0x101
 801a332:	18e2      	adds	r2, r4, r3
 801a334:	fbb2 fcf0 	udiv	ip, r2, r0
 801a338:	fb00 221c 	mls	r2, r0, ip, r2
 801a33c:	fb06 1202 	mla	r2, r6, r2, r1
 801a340:	f8b2 c024 	ldrh.w	ip, [r2, #36]	@ 0x24
 801a344:	45bc      	cmp	ip, r7
 801a346:	d106      	bne.n	801a356 <BnrgmTransmitQueuePrepNextItem+0x46>
 801a348:	f501 617d 	add.w	r1, r1, #4048	@ 0xfd0
 801a34c:	f8c1 2160 	str.w	r2, [r1, #352]	@ 0x160
 801a350:	2000      	movs	r0, #0
 801a352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a356:	3301      	adds	r3, #1
 801a358:	2b64      	cmp	r3, #100	@ 0x64
 801a35a:	d1ea      	bne.n	801a332 <BnrgmTransmitQueuePrepNextItem+0x22>
 801a35c:	f895 3166 	ldrb.w	r3, [r5, #358]	@ 0x166
 801a360:	b30b      	cbz	r3, 801a3a6 <BnrgmTransmitQueuePrepNextItem+0x96>
 801a362:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 801a3b0 <BnrgmTransmitQueuePrepNextItem+0xa0>
 801a366:	2600      	movs	r6, #0
 801a368:	2764      	movs	r7, #100	@ 0x64
 801a36a:	f04f 082c 	mov.w	r8, #44	@ 0x2c
 801a36e:	f895 4164 	ldrb.w	r4, [r5, #356]	@ 0x164
 801a372:	4434      	add	r4, r6
 801a374:	fbb4 f3f7 	udiv	r3, r4, r7
 801a378:	fb07 4413 	mls	r4, r7, r3, r4
 801a37c:	fb08 9404 	mla	r4, r8, r4, r9
 801a380:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801a384:	2b01      	cmp	r3, #1
 801a386:	d10b      	bne.n	801a3a0 <BnrgmTransmitQueuePrepNextItem+0x90>
 801a388:	f8b4 a022 	ldrh.w	sl, [r4, #34]	@ 0x22
 801a38c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801a38e:	449a      	add	sl, r3
 801a390:	f7ed fd44 	bl	8007e1c <HAL_GetTick>
 801a394:	3014      	adds	r0, #20
 801a396:	4582      	cmp	sl, r0
 801a398:	d802      	bhi.n	801a3a0 <BnrgmTransmitQueuePrepNextItem+0x90>
 801a39a:	f8c5 4160 	str.w	r4, [r5, #352]	@ 0x160
 801a39e:	e7d7      	b.n	801a350 <BnrgmTransmitQueuePrepNextItem+0x40>
 801a3a0:	3601      	adds	r6, #1
 801a3a2:	2e64      	cmp	r6, #100	@ 0x64
 801a3a4:	d1e3      	bne.n	801a36e <BnrgmTransmitQueuePrepNextItem+0x5e>
 801a3a6:	2001      	movs	r0, #1
 801a3a8:	e7d3      	b.n	801a352 <BnrgmTransmitQueuePrepNextItem+0x42>
 801a3aa:	bf00      	nop
 801a3ac:	20003f54 	.word	0x20003f54
 801a3b0:	20002f84 	.word	0x20002f84

0801a3b4 <BnrgmTransmitQueueAlign>:
 801a3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3b8:	4f2f      	ldr	r7, [pc, #188]	@ (801a478 <BnrgmTransmitQueueAlign+0xc4>)
 801a3ba:	f897 4165 	ldrb.w	r4, [r7, #357]	@ 0x165
 801a3be:	2c00      	cmp	r4, #0
 801a3c0:	d044      	beq.n	801a44c <BnrgmTransmitQueueAlign+0x98>
 801a3c2:	3c01      	subs	r4, #1
 801a3c4:	b2e4      	uxtb	r4, r4
 801a3c6:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 801a47c <BnrgmTransmitQueueAlign+0xc8>
 801a3ca:	46a4      	mov	ip, r4
 801a3cc:	f04f 0864 	mov.w	r8, #100	@ 0x64
 801a3d0:	f04f 092c 	mov.w	r9, #44	@ 0x2c
 801a3d4:	f04f 0b00 	mov.w	fp, #0
 801a3d8:	f897 3166 	ldrb.w	r3, [r7, #358]	@ 0x166
 801a3dc:	b343      	cbz	r3, 801a430 <BnrgmTransmitQueueAlign+0x7c>
 801a3de:	fb1c fe09 	smulbb	lr, ip, r9
 801a3e2:	44d6      	add	lr, sl
 801a3e4:	f89e 2025 	ldrb.w	r2, [lr, #37]	@ 0x25
 801a3e8:	2a01      	cmp	r2, #1
 801a3ea:	d131      	bne.n	801a450 <BnrgmTransmitQueueAlign+0x9c>
 801a3ec:	4564      	cmp	r4, ip
 801a3ee:	d00c      	beq.n	801a40a <BnrgmTransmitQueueAlign+0x56>
 801a3f0:	4676      	mov	r6, lr
 801a3f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a3f4:	fb04 a509 	mla	r5, r4, r9, sl
 801a3f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a3fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a3fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a3fe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801a402:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801a406:	f88e b025 	strb.w	fp, [lr, #37]	@ 0x25
 801a40a:	b384      	cbz	r4, 801a46e <BnrgmTransmitQueueAlign+0xba>
 801a40c:	3c01      	subs	r4, #1
 801a40e:	b2e4      	uxtb	r4, r4
 801a410:	f897 3164 	ldrb.w	r3, [r7, #356]	@ 0x164
 801a414:	4563      	cmp	r3, ip
 801a416:	d00b      	beq.n	801a430 <BnrgmTransmitQueueAlign+0x7c>
 801a418:	f1bc 0f00 	cmp.w	ip, #0
 801a41c:	d029      	beq.n	801a472 <BnrgmTransmitQueueAlign+0xbe>
 801a41e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a422:	fa5f fc8c 	uxtb.w	ip, ip
 801a426:	f108 38ff 	add.w	r8, r8, #4294967295
 801a42a:	f018 08ff 	ands.w	r8, r8, #255	@ 0xff
 801a42e:	d1d3      	bne.n	801a3d8 <BnrgmTransmitQueueAlign+0x24>
 801a430:	f897 3165 	ldrb.w	r3, [r7, #357]	@ 0x165
 801a434:	f897 2166 	ldrb.w	r2, [r7, #358]	@ 0x166
 801a438:	429a      	cmp	r2, r3
 801a43a:	bf88      	it	hi
 801a43c:	3364      	addhi	r3, #100	@ 0x64
 801a43e:	1a9b      	subs	r3, r3, r2
 801a440:	b2db      	uxtb	r3, r3
 801a442:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164
 801a446:	2000      	movs	r0, #0
 801a448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a44c:	2463      	movs	r4, #99	@ 0x63
 801a44e:	e7ba      	b.n	801a3c6 <BnrgmTransmitQueueAlign+0x12>
 801a450:	3b01      	subs	r3, #1
 801a452:	f887 3166 	strb.w	r3, [r7, #358]	@ 0x166
 801a456:	f89e 3024 	ldrb.w	r3, [lr, #36]	@ 0x24
 801a45a:	2b01      	cmp	r3, #1
 801a45c:	d1d8      	bne.n	801a410 <BnrgmTransmitQueueAlign+0x5c>
 801a45e:	f897 3167 	ldrb.w	r3, [r7, #359]	@ 0x167
 801a462:	2b00      	cmp	r3, #0
 801a464:	d0d4      	beq.n	801a410 <BnrgmTransmitQueueAlign+0x5c>
 801a466:	3b01      	subs	r3, #1
 801a468:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
 801a46c:	e7d0      	b.n	801a410 <BnrgmTransmitQueueAlign+0x5c>
 801a46e:	2463      	movs	r4, #99	@ 0x63
 801a470:	e7ce      	b.n	801a410 <BnrgmTransmitQueueAlign+0x5c>
 801a472:	f04f 0c63 	mov.w	ip, #99	@ 0x63
 801a476:	e7d6      	b.n	801a426 <BnrgmTransmitQueueAlign+0x72>
 801a478:	20003f54 	.word	0x20003f54
 801a47c:	20002f84 	.word	0x20002f84

0801a480 <MobleTransmitNow>:
 801a480:	b470      	push	{r4, r5, r6}
 801a482:	4604      	mov	r4, r0
 801a484:	f89d 600c 	ldrb.w	r6, [sp, #12]
 801a488:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801a48c:	4618      	mov	r0, r3
 801a48e:	460b      	mov	r3, r1
 801a490:	b159      	cbz	r1, 801a4aa <MobleTransmitNow+0x2a>
 801a492:	2a1f      	cmp	r2, #31
 801a494:	d809      	bhi.n	801a4aa <MobleTransmitNow+0x2a>
 801a496:	2d13      	cmp	r5, #19
 801a498:	d907      	bls.n	801a4aa <MobleTransmitNow+0x2a>
 801a49a:	e9cd 2503 	strd	r2, r5, [sp, #12]
 801a49e:	4631      	mov	r1, r6
 801a4a0:	f3c4 1200 	ubfx	r2, r4, #4, #1
 801a4a4:	bc70      	pop	{r4, r5, r6}
 801a4a6:	f7ff bed9 	b.w	801a25c <BnrgmTransmitQueuePush>
 801a4aa:	2003      	movs	r0, #3
 801a4ac:	bc70      	pop	{r4, r5, r6}
 801a4ae:	4770      	bx	lr

0801a4b0 <MobleTransmitTimerCallback>:
 801a4b0:	b570      	push	{r4, r5, r6, lr}
 801a4b2:	684b      	ldr	r3, [r1, #4]
 801a4b4:	b092      	sub	sp, #72	@ 0x48
 801a4b6:	881e      	ldrh	r6, [r3, #0]
 801a4b8:	4605      	mov	r5, r0
 801a4ba:	460c      	mov	r4, r1
 801a4bc:	f7fd fae0 	bl	8017a80 <MoblePalBluetoothRandom>
 801a4c0:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 801a4c4:	1831      	adds	r1, r6, r0
 801a4c6:	b289      	uxth	r1, r1
 801a4c8:	4628      	mov	r0, r5
 801a4ca:	f7fd f89f 	bl	801760c <MoblePalTimerStartOnce>
 801a4ce:	4b0f      	ldr	r3, [pc, #60]	@ (801a50c <MobleTransmitTimerCallback+0x5c>)
 801a4d0:	f893 2168 	ldrb.w	r2, [r3, #360]	@ 0x168
 801a4d4:	2a01      	cmp	r2, #1
 801a4d6:	d016      	beq.n	801a506 <MobleTransmitTimerCallback+0x56>
 801a4d8:	78a2      	ldrb	r2, [r4, #2]
 801a4da:	2a01      	cmp	r2, #1
 801a4dc:	d102      	bne.n	801a4e4 <MobleTransmitTimerCallback+0x34>
 801a4de:	f893 3166 	ldrb.w	r3, [r3, #358]	@ 0x166
 801a4e2:	b983      	cbnz	r3, 801a506 <MobleTransmitTimerCallback+0x56>
 801a4e4:	68a3      	ldr	r3, [r4, #8]
 801a4e6:	211f      	movs	r1, #31
 801a4e8:	a802      	add	r0, sp, #8
 801a4ea:	4798      	blx	r3
 801a4ec:	1e02      	subs	r2, r0, #0
 801a4ee:	dd0a      	ble.n	801a506 <MobleTransmitTimerCallback+0x56>
 801a4f0:	6863      	ldr	r3, [r4, #4]
 801a4f2:	881b      	ldrh	r3, [r3, #0]
 801a4f4:	9301      	str	r3, [sp, #4]
 801a4f6:	78e3      	ldrb	r3, [r4, #3]
 801a4f8:	9300      	str	r3, [sp, #0]
 801a4fa:	b2d2      	uxtb	r2, r2
 801a4fc:	7863      	ldrb	r3, [r4, #1]
 801a4fe:	a902      	add	r1, sp, #8
 801a500:	2000      	movs	r0, #0
 801a502:	f7ff ffbd 	bl	801a480 <MobleTransmitNow>
 801a506:	b012      	add	sp, #72	@ 0x48
 801a508:	bd70      	pop	{r4, r5, r6, pc}
 801a50a:	bf00      	nop
 801a50c:	20003f54 	.word	0x20003f54

0801a510 <MobleTransmitOutOfTurn>:
 801a510:	2802      	cmp	r0, #2
 801a512:	b508      	push	{r3, lr}
 801a514:	d80a      	bhi.n	801a52c <MobleTransmitOutOfTurn+0x1c>
 801a516:	4b07      	ldr	r3, [pc, #28]	@ (801a534 <MobleTransmitOutOfTurn+0x24>)
 801a518:	0102      	lsls	r2, r0, #4
 801a51a:	eb03 1100 	add.w	r1, r3, r0, lsl #4
 801a51e:	5c9b      	ldrb	r3, [r3, r2]
 801a520:	b133      	cbz	r3, 801a530 <MobleTransmitOutOfTurn+0x20>
 801a522:	2000      	movs	r0, #0
 801a524:	f7ff ffc4 	bl	801a4b0 <MobleTransmitTimerCallback>
 801a528:	2000      	movs	r0, #0
 801a52a:	bd08      	pop	{r3, pc}
 801a52c:	2003      	movs	r0, #3
 801a52e:	e7fc      	b.n	801a52a <MobleTransmitOutOfTurn+0x1a>
 801a530:	2002      	movs	r0, #2
 801a532:	e7fa      	b.n	801a52a <MobleTransmitOutOfTurn+0x1a>
 801a534:	20002f54 	.word	0x20002f54

0801a538 <MobleTransmitFindFreeSlot>:
 801a538:	4b07      	ldr	r3, [pc, #28]	@ (801a558 <MobleTransmitFindFreeSlot+0x20>)
 801a53a:	7818      	ldrb	r0, [r3, #0]
 801a53c:	b150      	cbz	r0, 801a554 <MobleTransmitFindFreeSlot+0x1c>
 801a53e:	7c1a      	ldrb	r2, [r3, #16]
 801a540:	b13a      	cbz	r2, 801a552 <MobleTransmitFindFreeSlot+0x1a>
 801a542:	f893 3020 	ldrb.w	r3, [r3, #32]
 801a546:	2b00      	cmp	r3, #0
 801a548:	bf0c      	ite	eq
 801a54a:	2002      	moveq	r0, #2
 801a54c:	f04f 30ff 	movne.w	r0, #4294967295
 801a550:	4770      	bx	lr
 801a552:	2001      	movs	r0, #1
 801a554:	4770      	bx	lr
 801a556:	bf00      	nop
 801a558:	20002f54 	.word	0x20002f54

0801a55c <MobleTransmitSetup>:
 801a55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a560:	4682      	mov	sl, r0
 801a562:	4615      	mov	r5, r2
 801a564:	461f      	mov	r7, r3
 801a566:	b1f3      	cbz	r3, 801a5a6 <MobleTransmitSetup+0x4a>
 801a568:	b1ea      	cbz	r2, 801a5a6 <MobleTransmitSetup+0x4a>
 801a56a:	f7ff ffe5 	bl	801a538 <MobleTransmitFindFreeSlot>
 801a56e:	1e06      	subs	r6, r0, #0
 801a570:	db1b      	blt.n	801a5aa <MobleTransmitSetup+0x4e>
 801a572:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 801a5b4 <MobleTransmitSetup+0x58>
 801a576:	b234      	sxth	r4, r6
 801a578:	eb08 1204 	add.w	r2, r8, r4, lsl #4
 801a57c:	3d01      	subs	r5, #1
 801a57e:	7091      	strb	r1, [r2, #2]
 801a580:	f882 a001 	strb.w	sl, [r2, #1]
 801a584:	490a      	ldr	r1, [pc, #40]	@ (801a5b0 <MobleTransmitSetup+0x54>)
 801a586:	70d5      	strb	r5, [r2, #3]
 801a588:	f102 000c 	add.w	r0, r2, #12
 801a58c:	f7fc ffd4 	bl	8017538 <MoblePalTimerCreate>
 801a590:	2801      	cmp	r0, #1
 801a592:	ea4f 1904 	mov.w	r9, r4, lsl #4
 801a596:	d804      	bhi.n	801a5a2 <MobleTransmitSetup+0x46>
 801a598:	2301      	movs	r3, #1
 801a59a:	f808 3009 	strb.w	r3, [r8, r9]
 801a59e:	2000      	movs	r0, #0
 801a5a0:	603e      	str	r6, [r7, #0]
 801a5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5a6:	2003      	movs	r0, #3
 801a5a8:	e7fb      	b.n	801a5a2 <MobleTransmitSetup+0x46>
 801a5aa:	2004      	movs	r0, #4
 801a5ac:	e7f9      	b.n	801a5a2 <MobleTransmitSetup+0x46>
 801a5ae:	bf00      	nop
 801a5b0:	0801a4b1 	.word	0x0801a4b1
 801a5b4:	20002f54 	.word	0x20002f54

0801a5b8 <BnrgmTransmitDisableRegularlyGeneratedBeacon>:
 801a5b8:	b508      	push	{r3, lr}
 801a5ba:	0102      	lsls	r2, r0, #4
 801a5bc:	4b06      	ldr	r3, [pc, #24]	@ (801a5d8 <BnrgmTransmitDisableRegularlyGeneratedBeacon+0x20>)
 801a5be:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 801a5c2:	5c9b      	ldrb	r3, [r3, r2]
 801a5c4:	2b01      	cmp	r3, #1
 801a5c6:	d104      	bne.n	801a5d2 <BnrgmTransmitDisableRegularlyGeneratedBeacon+0x1a>
 801a5c8:	68c0      	ldr	r0, [r0, #12]
 801a5ca:	f7fd f847 	bl	801765c <MoblePalTimerStop>
 801a5ce:	2000      	movs	r0, #0
 801a5d0:	bd08      	pop	{r3, pc}
 801a5d2:	2002      	movs	r0, #2
 801a5d4:	e7fc      	b.n	801a5d0 <BnrgmTransmitDisableRegularlyGeneratedBeacon+0x18>
 801a5d6:	bf00      	nop
 801a5d8:	20002f54 	.word	0x20002f54

0801a5dc <BnrgmTransmitChangeRegularlyGeneratedInterval>:
 801a5dc:	b538      	push	{r3, r4, r5, lr}
 801a5de:	0101      	lsls	r1, r0, #4
 801a5e0:	4b0c      	ldr	r3, [pc, #48]	@ (801a614 <BnrgmTransmitChangeRegularlyGeneratedInterval+0x38>)
 801a5e2:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 801a5e6:	5c5b      	ldrb	r3, [r3, r1]
 801a5e8:	2b01      	cmp	r3, #1
 801a5ea:	d110      	bne.n	801a60e <BnrgmTransmitChangeRegularlyGeneratedInterval+0x32>
 801a5ec:	68d5      	ldr	r5, [r2, #12]
 801a5ee:	4628      	mov	r0, r5
 801a5f0:	f7fd f834 	bl	801765c <MoblePalTimerStop>
 801a5f4:	6853      	ldr	r3, [r2, #4]
 801a5f6:	881c      	ldrh	r4, [r3, #0]
 801a5f8:	f7fd fa42 	bl	8017a80 <MoblePalBluetoothRandom>
 801a5fc:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 801a600:	1821      	adds	r1, r4, r0
 801a602:	b289      	uxth	r1, r1
 801a604:	4628      	mov	r0, r5
 801a606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a60a:	f7fc bfff 	b.w	801760c <MoblePalTimerStartOnce>
 801a60e:	2002      	movs	r0, #2
 801a610:	bd38      	pop	{r3, r4, r5, pc}
 801a612:	bf00      	nop
 801a614:	20002f54 	.word	0x20002f54

0801a618 <MobleStackFastAdvTimeoutTimerCallback>:
 801a618:	4a09      	ldr	r2, [pc, #36]	@ (801a640 <MobleStackFastAdvTimeoutTimerCallback+0x28>)
 801a61a:	f8d2 07f8 	ldr.w	r0, [r2, #2040]	@ 0x7f8
 801a61e:	b508      	push	{r3, lr}
 801a620:	b108      	cbz	r0, 801a626 <MobleStackFastAdvTimeoutTimerCallback+0xe>
 801a622:	f7fd f83b 	bl	801769c <MoblePalTimerDestroy>
 801a626:	2300      	movs	r3, #0
 801a628:	f8c2 37f8 	str.w	r3, [r2, #2040]	@ 0x7f8
 801a62c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801a630:	f8a2 3864 	strh.w	r3, [r2, #2148]	@ 0x864
 801a634:	f8d2 0860 	ldr.w	r0, [r2, #2144]	@ 0x860
 801a638:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a63c:	f7ff bfce 	b.w	801a5dc <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801a640:	2000140c 	.word	0x2000140c

0801a644 <MobleTransmitRegularlyGenerated>:
 801a644:	b570      	push	{r4, r5, r6, lr}
 801a646:	4604      	mov	r4, r0
 801a648:	9e04      	ldr	r6, [sp, #16]
 801a64a:	4608      	mov	r0, r1
 801a64c:	461d      	mov	r5, r3
 801a64e:	4611      	mov	r1, r2
 801a650:	b174      	cbz	r4, 801a670 <MobleTransmitRegularlyGenerated+0x2c>
 801a652:	b16b      	cbz	r3, 801a670 <MobleTransmitRegularlyGenerated+0x2c>
 801a654:	4633      	mov	r3, r6
 801a656:	2201      	movs	r2, #1
 801a658:	f7ff ff80 	bl	801a55c <MobleTransmitSetup>
 801a65c:	2801      	cmp	r0, #1
 801a65e:	d806      	bhi.n	801a66e <MobleTransmitRegularlyGenerated+0x2a>
 801a660:	6833      	ldr	r3, [r6, #0]
 801a662:	4a04      	ldr	r2, [pc, #16]	@ (801a674 <MobleTransmitRegularlyGenerated+0x30>)
 801a664:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 801a668:	e9c2 5401 	strd	r5, r4, [r2, #4]
 801a66c:	2000      	movs	r0, #0
 801a66e:	bd70      	pop	{r4, r5, r6, pc}
 801a670:	2003      	movs	r0, #3
 801a672:	e7fc      	b.n	801a66e <MobleTransmitRegularlyGenerated+0x2a>
 801a674:	20002f54 	.word	0x20002f54

0801a678 <BnrgmTransmitSend>:
 801a678:	b470      	push	{r4, r5, r6}
 801a67a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801a67e:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 801a682:	b159      	cbz	r1, 801a69c <BnrgmTransmitSend+0x24>
 801a684:	2a1f      	cmp	r2, #31
 801a686:	d809      	bhi.n	801a69c <BnrgmTransmitSend+0x24>
 801a688:	2e13      	cmp	r6, #19
 801a68a:	d907      	bls.n	801a69c <BnrgmTransmitSend+0x24>
 801a68c:	b134      	cbz	r4, 801a69c <BnrgmTransmitSend+0x24>
 801a68e:	3c01      	subs	r4, #1
 801a690:	b2e4      	uxtb	r4, r4
 801a692:	9604      	str	r6, [sp, #16]
 801a694:	9403      	str	r4, [sp, #12]
 801a696:	bc70      	pop	{r4, r5, r6}
 801a698:	f7ff bef2 	b.w	801a480 <MobleTransmitNow>
 801a69c:	2003      	movs	r0, #3
 801a69e:	bc70      	pop	{r4, r5, r6}
 801a6a0:	4770      	bx	lr
	...

0801a6a4 <MoblePBADVSendControl>:
 801a6a4:	b570      	push	{r4, r5, r6, lr}
 801a6a6:	460d      	mov	r5, r1
 801a6a8:	f015 0ffd 	tst.w	r5, #253	@ 0xfd
 801a6ac:	4611      	mov	r1, r2
 801a6ae:	bf06      	itte	eq
 801a6b0:	f8c0 00bc 	streq.w	r0, [r0, #188]	@ 0xbc
 801a6b4:	f890 20b8 	ldrbeq.w	r2, [r0, #184]	@ 0xb8
 801a6b8:	f890 2024 	ldrbne.w	r2, [r0, #36]	@ 0x24
 801a6bc:	2d03      	cmp	r5, #3
 801a6be:	4604      	mov	r4, r0
 801a6c0:	b088      	sub	sp, #32
 801a6c2:	69c0      	ldr	r0, [r0, #28]
 801a6c4:	461e      	mov	r6, r3
 801a6c6:	d042      	beq.n	801a74e <MoblePBADVSendControl+0xaa>
 801a6c8:	2d01      	cmp	r5, #1
 801a6ca:	d042      	beq.n	801a752 <MoblePBADVSendControl+0xae>
 801a6cc:	00ab      	lsls	r3, r5, #2
 801a6ce:	f043 0303 	orr.w	r3, r3, #3
 801a6d2:	b2db      	uxtb	r3, r3
 801a6d4:	f88d 300f 	strb.w	r3, [sp, #15]
 801a6d8:	1df3      	adds	r3, r6, #7
 801a6da:	f88d 3008 	strb.w	r3, [sp, #8]
 801a6de:	2329      	movs	r3, #41	@ 0x29
 801a6e0:	f8cd 000a 	str.w	r0, [sp, #10]
 801a6e4:	f88d 200e 	strb.w	r2, [sp, #14]
 801a6e8:	f88d 3009 	strb.w	r3, [sp, #9]
 801a6ec:	b11e      	cbz	r6, 801a6f6 <MoblePBADVSendControl+0x52>
 801a6ee:	4632      	mov	r2, r6
 801a6f0:	a804      	add	r0, sp, #16
 801a6f2:	f00e fdec 	bl	80292ce <memcpy>
 801a6f6:	2303      	movs	r3, #3
 801a6f8:	2114      	movs	r1, #20
 801a6fa:	e9cd 3100 	strd	r3, r1, [sp]
 801a6fe:	f106 0208 	add.w	r2, r6, #8
 801a702:	2300      	movs	r3, #0
 801a704:	b2d2      	uxtb	r2, r2
 801a706:	a902      	add	r1, sp, #8
 801a708:	4618      	mov	r0, r3
 801a70a:	f7ff ffb5 	bl	801a678 <BnrgmTransmitSend>
 801a70e:	bb15      	cbnz	r5, 801a756 <MoblePBADVSendControl+0xb2>
 801a710:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 801a714:	b913      	cbnz	r3, 801a71c <MoblePBADVSendControl+0x78>
 801a716:	4620      	mov	r0, r4
 801a718:	f7fc ff7c 	bl	8017614 <MoblePBADVRaiseTransTimeoutTimer>
 801a71c:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
 801a720:	490f      	ldr	r1, [pc, #60]	@ (801a760 <MoblePBADVSendControl+0xbc>)
 801a722:	3301      	adds	r3, #1
 801a724:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
 801a728:	4622      	mov	r2, r4
 801a72a:	f504 70aa 	add.w	r0, r4, #340	@ 0x154
 801a72e:	f7fc ff03 	bl	8017538 <MoblePalTimerCreate>
 801a732:	f8d4 0154 	ldr.w	r0, [r4, #340]	@ 0x154
 801a736:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 801a73a:	f7fc ff67 	bl	801760c <MoblePalTimerStartOnce>
 801a73e:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 801a742:	f7fc fffb 	bl	801773c <MoblePBADVEraseTimer>
 801a746:	4620      	mov	r0, r4
 801a748:	f7fc ff76 	bl	8017638 <MoblePBADVRaiseLinkIdleTimer>
 801a74c:	e005      	b.n	801a75a <MoblePBADVSendControl+0xb6>
 801a74e:	2301      	movs	r3, #1
 801a750:	e7c0      	b.n	801a6d4 <MoblePBADVSendControl+0x30>
 801a752:	2307      	movs	r3, #7
 801a754:	e7be      	b.n	801a6d4 <MoblePBADVSendControl+0x30>
 801a756:	2d01      	cmp	r5, #1
 801a758:	d0f1      	beq.n	801a73e <MoblePBADVSendControl+0x9a>
 801a75a:	2000      	movs	r0, #0
 801a75c:	b008      	add	sp, #32
 801a75e:	bd70      	pop	{r4, r5, r6, pc}
 801a760:	08026ad5 	.word	0x08026ad5

0801a764 <BnrgmTransmitStartAdv>:
 801a764:	4b07      	ldr	r3, [pc, #28]	@ (801a784 <BnrgmTransmitStartAdv+0x20>)
 801a766:	f8d3 1160 	ldr.w	r1, [r3, #352]	@ 0x160
 801a76a:	b149      	cbz	r1, 801a780 <BnrgmTransmitStartAdv+0x1c>
 801a76c:	f891 0020 	ldrb.w	r0, [r1, #32]
 801a770:	7fca      	ldrb	r2, [r1, #31]
 801a772:	3800      	subs	r0, #0
 801a774:	f04f 0314 	mov.w	r3, #20
 801a778:	bf18      	it	ne
 801a77a:	2001      	movne	r0, #1
 801a77c:	f7fd bad0 	b.w	8017d20 <MoblePalBluetoothModeStartAdv>
 801a780:	2002      	movs	r0, #2
 801a782:	4770      	bx	lr
 801a784:	20003f54 	.word	0x20003f54

0801a788 <BnrgmTransmitStartScan>:
 801a788:	2802      	cmp	r0, #2
 801a78a:	d903      	bls.n	801a794 <BnrgmTransmitStartScan+0xc>
 801a78c:	2902      	cmp	r1, #2
 801a78e:	d901      	bls.n	801a794 <BnrgmTransmitStartScan+0xc>
 801a790:	f7fd bb5c 	b.w	8017e4c <MoblePalBluetoothModeStartScan>
 801a794:	2002      	movs	r0, #2
 801a796:	4770      	bx	lr

0801a798 <MobleQIInit>:
 801a798:	b120      	cbz	r0, 801a7a4 <MobleQIInit+0xc>
 801a79a:	2300      	movs	r3, #0
 801a79c:	e9c0 3300 	strd	r3, r3, [r0]
 801a7a0:	4618      	mov	r0, r3
 801a7a2:	4770      	bx	lr
 801a7a4:	2003      	movs	r0, #3
 801a7a6:	4770      	bx	lr

0801a7a8 <MobleQIInsertAfter>:
 801a7a8:	b140      	cbz	r0, 801a7bc <MobleQIInsertAfter+0x14>
 801a7aa:	b139      	cbz	r1, 801a7bc <MobleQIInsertAfter+0x14>
 801a7ac:	6803      	ldr	r3, [r0, #0]
 801a7ae:	b103      	cbz	r3, 801a7b2 <MobleQIInsertAfter+0xa>
 801a7b0:	6059      	str	r1, [r3, #4]
 801a7b2:	6001      	str	r1, [r0, #0]
 801a7b4:	e9c1 3000 	strd	r3, r0, [r1]
 801a7b8:	2000      	movs	r0, #0
 801a7ba:	4770      	bx	lr
 801a7bc:	2003      	movs	r0, #3
 801a7be:	4770      	bx	lr

0801a7c0 <MoblePalBluetoothPushNotification>:
 801a7c0:	4a06      	ldr	r2, [pc, #24]	@ (801a7dc <MoblePalBluetoothPushNotification+0x1c>)
 801a7c2:	f8d2 3938 	ldr.w	r3, [r2, #2360]	@ 0x938
 801a7c6:	4601      	mov	r1, r0
 801a7c8:	b12b      	cbz	r3, 801a7d6 <MoblePalBluetoothPushNotification+0x16>
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d1fb      	bne.n	801a7ca <MoblePalBluetoothPushNotification+0xa>
 801a7d2:	f7ff bfe9 	b.w	801a7a8 <MobleQIInsertAfter>
 801a7d6:	f8c2 0938 	str.w	r0, [r2, #2360]	@ 0x938
 801a7da:	4770      	bx	lr
 801a7dc:	2000140c 	.word	0x2000140c

0801a7e0 <MobleQIRemove>:
 801a7e0:	b150      	cbz	r0, 801a7f8 <MobleQIRemove+0x18>
 801a7e2:	e9d0 3200 	ldrd	r3, r2, [r0]
 801a7e6:	b102      	cbz	r2, 801a7ea <MobleQIRemove+0xa>
 801a7e8:	6013      	str	r3, [r2, #0]
 801a7ea:	b103      	cbz	r3, 801a7ee <MobleQIRemove+0xe>
 801a7ec:	605a      	str	r2, [r3, #4]
 801a7ee:	2300      	movs	r3, #0
 801a7f0:	e9c0 3300 	strd	r3, r3, [r0]
 801a7f4:	4618      	mov	r0, r3
 801a7f6:	4770      	bx	lr
 801a7f8:	2003      	movs	r0, #3
 801a7fa:	4770      	bx	lr

0801a7fc <MoblePalBluetoothPopNotification>:
 801a7fc:	b508      	push	{r3, lr}
 801a7fe:	4b06      	ldr	r3, [pc, #24]	@ (801a818 <MoblePalBluetoothPopNotification+0x1c>)
 801a800:	f8d3 1938 	ldr.w	r1, [r3, #2360]	@ 0x938
 801a804:	b129      	cbz	r1, 801a812 <MoblePalBluetoothPopNotification+0x16>
 801a806:	680a      	ldr	r2, [r1, #0]
 801a808:	f8c3 2938 	str.w	r2, [r3, #2360]	@ 0x938
 801a80c:	4608      	mov	r0, r1
 801a80e:	f7ff ffe7 	bl	801a7e0 <MobleQIRemove>
 801a812:	4608      	mov	r0, r1
 801a814:	bd08      	pop	{r3, pc}
 801a816:	bf00      	nop
 801a818:	2000140c 	.word	0x2000140c

0801a81c <MobleInitRGN>:
 801a81c:	b138      	cbz	r0, 801a82e <MobleInitRGN+0x12>
 801a81e:	290b      	cmp	r1, #11
 801a820:	d905      	bls.n	801a82e <MobleInitRGN+0x12>
 801a822:	2300      	movs	r3, #0
 801a824:	e9c0 3300 	strd	r3, r3, [r0]
 801a828:	6081      	str	r1, [r0, #8]
 801a82a:	4618      	mov	r0, r3
 801a82c:	4770      	bx	lr
 801a82e:	2003      	movs	r0, #3
 801a830:	4770      	bx	lr

0801a832 <MobleSplitRGN>:
 801a832:	b538      	push	{r3, r4, r5, lr}
 801a834:	460a      	mov	r2, r1
 801a836:	4604      	mov	r4, r0
 801a838:	b910      	cbnz	r0, 801a840 <MobleSplitRGN+0xe>
 801a83a:	2500      	movs	r5, #0
 801a83c:	4628      	mov	r0, r5
 801a83e:	bd38      	pop	{r3, r4, r5, pc}
 801a840:	290b      	cmp	r1, #11
 801a842:	d9fa      	bls.n	801a83a <MobleSplitRGN+0x8>
 801a844:	078b      	lsls	r3, r1, #30
 801a846:	d1f8      	bne.n	801a83a <MobleSplitRGN+0x8>
 801a848:	6881      	ldr	r1, [r0, #8]
 801a84a:	f102 0310 	add.w	r3, r2, #16
 801a84e:	f021 0003 	bic.w	r0, r1, #3
 801a852:	4298      	cmp	r0, r3
 801a854:	d9f1      	bls.n	801a83a <MobleSplitRGN+0x8>
 801a856:	18a5      	adds	r5, r4, r2
 801a858:	1a89      	subs	r1, r1, r2
 801a85a:	4628      	mov	r0, r5
 801a85c:	f7ff ffde 	bl	801a81c <MobleInitRGN>
 801a860:	2801      	cmp	r0, #1
 801a862:	d8ea      	bhi.n	801a83a <MobleSplitRGN+0x8>
 801a864:	60a2      	str	r2, [r4, #8]
 801a866:	4629      	mov	r1, r5
 801a868:	4620      	mov	r0, r4
 801a86a:	f7ff ff9d 	bl	801a7a8 <MobleQIInsertAfter>
 801a86e:	e7e5      	b.n	801a83c <MobleSplitRGN+0xa>

0801a870 <MobleMemAlloc>:
 801a870:	b538      	push	{r3, r4, r5, lr}
 801a872:	b908      	cbnz	r0, 801a878 <MobleMemAlloc+0x8>
 801a874:	2000      	movs	r0, #0
 801a876:	bd38      	pop	{r3, r4, r5, pc}
 801a878:	4c1e      	ldr	r4, [pc, #120]	@ (801a8f4 <MobleMemAlloc+0x84>)
 801a87a:	f8d4 393c 	ldr.w	r3, [r4, #2364]	@ 0x93c
 801a87e:	3003      	adds	r0, #3
 801a880:	f020 0503 	bic.w	r5, r0, #3
 801a884:	b973      	cbnz	r3, 801a8a4 <MobleMemAlloc+0x34>
 801a886:	f8d4 2940 	ldr.w	r2, [r4, #2368]	@ 0x940
 801a88a:	f8b4 1944 	ldrh.w	r1, [r4, #2372]	@ 0x944
 801a88e:	f8c4 293c 	str.w	r2, [r4, #2364]	@ 0x93c
 801a892:	4610      	mov	r0, r2
 801a894:	f7ff ffc2 	bl	801a81c <MobleInitRGN>
 801a898:	2801      	cmp	r0, #1
 801a89a:	d8eb      	bhi.n	801a874 <MobleMemAlloc+0x4>
 801a89c:	210c      	movs	r1, #12
 801a89e:	4610      	mov	r0, r2
 801a8a0:	f7ff ffc7 	bl	801a832 <MobleSplitRGN>
 801a8a4:	f8d4 393c 	ldr.w	r3, [r4, #2364]	@ 0x93c
 801a8a8:	f105 010c 	add.w	r1, r5, #12
 801a8ac:	2400      	movs	r4, #0
 801a8ae:	b993      	cbnz	r3, 801a8d6 <MobleMemAlloc+0x66>
 801a8b0:	2c00      	cmp	r4, #0
 801a8b2:	d0df      	beq.n	801a874 <MobleMemAlloc+0x4>
 801a8b4:	68a3      	ldr	r3, [r4, #8]
 801a8b6:	351c      	adds	r5, #28
 801a8b8:	42ab      	cmp	r3, r5
 801a8ba:	d302      	bcc.n	801a8c2 <MobleMemAlloc+0x52>
 801a8bc:	4620      	mov	r0, r4
 801a8be:	f7ff ffb8 	bl	801a832 <MobleSplitRGN>
 801a8c2:	68a3      	ldr	r3, [r4, #8]
 801a8c4:	f043 0301 	orr.w	r3, r3, #1
 801a8c8:	60a3      	str	r3, [r4, #8]
 801a8ca:	4620      	mov	r0, r4
 801a8cc:	f7ff ff88 	bl	801a7e0 <MobleQIRemove>
 801a8d0:	f104 000c 	add.w	r0, r4, #12
 801a8d4:	e7cf      	b.n	801a876 <MobleMemAlloc+0x6>
 801a8d6:	689a      	ldr	r2, [r3, #8]
 801a8d8:	428a      	cmp	r2, r1
 801a8da:	d009      	beq.n	801a8f0 <MobleMemAlloc+0x80>
 801a8dc:	d304      	bcc.n	801a8e8 <MobleMemAlloc+0x78>
 801a8de:	b12c      	cbz	r4, 801a8ec <MobleMemAlloc+0x7c>
 801a8e0:	68a0      	ldr	r0, [r4, #8]
 801a8e2:	4282      	cmp	r2, r0
 801a8e4:	bf38      	it	cc
 801a8e6:	461c      	movcc	r4, r3
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	e7e0      	b.n	801a8ae <MobleMemAlloc+0x3e>
 801a8ec:	461c      	mov	r4, r3
 801a8ee:	e7fb      	b.n	801a8e8 <MobleMemAlloc+0x78>
 801a8f0:	461c      	mov	r4, r3
 801a8f2:	e7df      	b.n	801a8b4 <MobleMemAlloc+0x44>
 801a8f4:	2000140c 	.word	0x2000140c

0801a8f8 <MoblePalBluetoothGattSendNotification>:
 801a8f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a8fc:	461d      	mov	r5, r3
 801a8fe:	4b1f      	ldr	r3, [pc, #124]	@ (801a97c <MoblePalBluetoothGattSendNotification+0x84>)
 801a900:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 801a904:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 801a908:	f013 0f3c 	tst.w	r3, #60	@ 0x3c
 801a90c:	4680      	mov	r8, r0
 801a90e:	460f      	mov	r7, r1
 801a910:	4616      	mov	r6, r2
 801a912:	d103      	bne.n	801a91c <MoblePalBluetoothGattSendNotification+0x24>
 801a914:	2002      	movs	r0, #2
 801a916:	b003      	add	sp, #12
 801a918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a91c:	4c18      	ldr	r4, [pc, #96]	@ (801a980 <MoblePalBluetoothGattSendNotification+0x88>)
 801a91e:	7aa3      	ldrb	r3, [r4, #10]
 801a920:	2b01      	cmp	r3, #1
 801a922:	d10e      	bne.n	801a942 <MoblePalBluetoothGattSendNotification+0x4a>
 801a924:	9600      	str	r6, [sp, #0]
 801a926:	462b      	mov	r3, r5
 801a928:	2200      	movs	r2, #0
 801a92a:	4639      	mov	r1, r7
 801a92c:	4640      	mov	r0, r8
 801a92e:	f7f9 ff45 	bl	80147bc <aci_gatt_update_char_value>
 801a932:	2893      	cmp	r0, #147	@ 0x93
 801a934:	d0f6      	beq.n	801a924 <MoblePalBluetoothGattSendNotification+0x2c>
 801a936:	2800      	cmp	r0, #0
 801a938:	d0ed      	beq.n	801a916 <MoblePalBluetoothGattSendNotification+0x1e>
 801a93a:	2864      	cmp	r0, #100	@ 0x64
 801a93c:	d1ea      	bne.n	801a914 <MoblePalBluetoothGattSendNotification+0x1c>
 801a93e:	2300      	movs	r3, #0
 801a940:	72a3      	strb	r3, [r4, #10]
 801a942:	f1b9 0f00 	cmp.w	r9, #0
 801a946:	d014      	beq.n	801a972 <MoblePalBluetoothGattSendNotification+0x7a>
 801a948:	f105 0010 	add.w	r0, r5, #16
 801a94c:	f7ff ff90 	bl	801a870 <MobleMemAlloc>
 801a950:	4604      	mov	r4, r0
 801a952:	b180      	cbz	r0, 801a976 <MoblePalBluetoothGattSendNotification+0x7e>
 801a954:	f7ff ff20 	bl	801a798 <MobleQIInit>
 801a958:	462a      	mov	r2, r5
 801a95a:	f8a4 8008 	strh.w	r8, [r4, #8]
 801a95e:	8167      	strh	r7, [r4, #10]
 801a960:	4631      	mov	r1, r6
 801a962:	f104 000d 	add.w	r0, r4, #13
 801a966:	f00e fc07 	bl	8029178 <memmove>
 801a96a:	7325      	strb	r5, [r4, #12]
 801a96c:	4620      	mov	r0, r4
 801a96e:	f7ff ff27 	bl	801a7c0 <MoblePalBluetoothPushNotification>
 801a972:	2001      	movs	r0, #1
 801a974:	e7cf      	b.n	801a916 <MoblePalBluetoothGattSendNotification+0x1e>
 801a976:	2004      	movs	r0, #4
 801a978:	e7cd      	b.n	801a916 <MoblePalBluetoothGattSendNotification+0x1e>
 801a97a:	bf00      	nop
 801a97c:	2000140c 	.word	0x2000140c
 801a980:	20000008 	.word	0x20000008

0801a984 <MobleMemFree>:
 801a984:	b570      	push	{r4, r5, r6, lr}
 801a986:	b380      	cbz	r0, 801a9ea <MobleMemFree+0x66>
 801a988:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a98c:	07da      	lsls	r2, r3, #31
 801a98e:	d52c      	bpl.n	801a9ea <MobleMemFree+0x66>
 801a990:	f023 0301 	bic.w	r3, r3, #1
 801a994:	f840 3c04 	str.w	r3, [r0, #-4]
 801a998:	4b15      	ldr	r3, [pc, #84]	@ (801a9f0 <MobleMemFree+0x6c>)
 801a99a:	f8d3 593c 	ldr.w	r5, [r3, #2364]	@ 0x93c
 801a99e:	f1a0 010c 	sub.w	r1, r0, #12
 801a9a2:	4628      	mov	r0, r5
 801a9a4:	f7ff ff00 	bl	801a7a8 <MobleQIInsertAfter>
 801a9a8:	6829      	ldr	r1, [r5, #0]
 801a9aa:	2000      	movs	r0, #0
 801a9ac:	b1d1      	cbz	r1, 801a9e4 <MobleMemFree+0x60>
 801a9ae:	2800      	cmp	r0, #0
 801a9b0:	d1fa      	bne.n	801a9a8 <MobleMemFree+0x24>
 801a9b2:	680c      	ldr	r4, [r1, #0]
 801a9b4:	b104      	cbz	r4, 801a9b8 <MobleMemFree+0x34>
 801a9b6:	b108      	cbz	r0, 801a9bc <MobleMemFree+0x38>
 801a9b8:	6809      	ldr	r1, [r1, #0]
 801a9ba:	e7f7      	b.n	801a9ac <MobleMemFree+0x28>
 801a9bc:	688a      	ldr	r2, [r1, #8]
 801a9be:	68a3      	ldr	r3, [r4, #8]
 801a9c0:	188e      	adds	r6, r1, r2
 801a9c2:	42b4      	cmp	r4, r6
 801a9c4:	d107      	bne.n	801a9d6 <MobleMemFree+0x52>
 801a9c6:	4413      	add	r3, r2
 801a9c8:	608b      	str	r3, [r1, #8]
 801a9ca:	4620      	mov	r0, r4
 801a9cc:	f7ff ff08 	bl	801a7e0 <MobleQIRemove>
 801a9d0:	2001      	movs	r0, #1
 801a9d2:	6824      	ldr	r4, [r4, #0]
 801a9d4:	e7ee      	b.n	801a9b4 <MobleMemFree+0x30>
 801a9d6:	18e6      	adds	r6, r4, r3
 801a9d8:	42b1      	cmp	r1, r6
 801a9da:	d1fa      	bne.n	801a9d2 <MobleMemFree+0x4e>
 801a9dc:	4413      	add	r3, r2
 801a9de:	60a3      	str	r3, [r4, #8]
 801a9e0:	4608      	mov	r0, r1
 801a9e2:	e7f3      	b.n	801a9cc <MobleMemFree+0x48>
 801a9e4:	2801      	cmp	r0, #1
 801a9e6:	d0df      	beq.n	801a9a8 <MobleMemFree+0x24>
 801a9e8:	bd70      	pop	{r4, r5, r6, pc}
 801a9ea:	2003      	movs	r0, #3
 801a9ec:	e7fc      	b.n	801a9e8 <MobleMemFree+0x64>
 801a9ee:	bf00      	nop
 801a9f0:	2000140c 	.word	0x2000140c

0801a9f4 <MoblePalBluetoothFreeAllNotifications>:
 801a9f4:	b508      	push	{r3, lr}
 801a9f6:	f7ff ff01 	bl	801a7fc <MoblePalBluetoothPopNotification>
 801a9fa:	b900      	cbnz	r0, 801a9fe <MoblePalBluetoothFreeAllNotifications+0xa>
 801a9fc:	bd08      	pop	{r3, pc}
 801a9fe:	f7ff ffc1 	bl	801a984 <MobleMemFree>
 801aa02:	e7f8      	b.n	801a9f6 <MoblePalBluetoothFreeAllNotifications+0x2>

0801aa04 <MoblePalBluetoothProcessNotifications>:
 801aa04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aa06:	4c0a      	ldr	r4, [pc, #40]	@ (801aa30 <MoblePalBluetoothProcessNotifications+0x2c>)
 801aa08:	2500      	movs	r5, #0
 801aa0a:	f8d4 2938 	ldr.w	r2, [r4, #2360]	@ 0x938
 801aa0e:	b90a      	cbnz	r2, 801aa14 <MoblePalBluetoothProcessNotifications+0x10>
 801aa10:	b003      	add	sp, #12
 801aa12:	bd30      	pop	{r4, r5, pc}
 801aa14:	7b13      	ldrb	r3, [r2, #12]
 801aa16:	8951      	ldrh	r1, [r2, #10]
 801aa18:	8910      	ldrh	r0, [r2, #8]
 801aa1a:	9500      	str	r5, [sp, #0]
 801aa1c:	320d      	adds	r2, #13
 801aa1e:	f7ff ff6b 	bl	801a8f8 <MoblePalBluetoothGattSendNotification>
 801aa22:	2800      	cmp	r0, #0
 801aa24:	d1f4      	bne.n	801aa10 <MoblePalBluetoothProcessNotifications+0xc>
 801aa26:	f7ff fee9 	bl	801a7fc <MoblePalBluetoothPopNotification>
 801aa2a:	f7ff ffab 	bl	801a984 <MobleMemFree>
 801aa2e:	e7ec      	b.n	801aa0a <MoblePalBluetoothProcessNotifications+0x6>
 801aa30:	2000140c 	.word	0x2000140c

0801aa34 <MoblePalBluetoothProcess>:
 801aa34:	b513      	push	{r0, r1, r4, lr}
 801aa36:	4c19      	ldr	r4, [pc, #100]	@ (801aa9c <MoblePalBluetoothProcess+0x68>)
 801aa38:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 801aa3c:	075b      	lsls	r3, r3, #29
 801aa3e:	d525      	bpl.n	801aa8c <MoblePalBluetoothProcess+0x58>
 801aa40:	f7ed f9ec 	bl	8007e1c <HAL_GetTick>
 801aa44:	f8d4 3948 	ldr.w	r3, [r4, #2376]	@ 0x948
 801aa48:	f603 33b8 	addw	r3, r3, #3000	@ 0xbb8
 801aa4c:	4283      	cmp	r3, r0
 801aa4e:	d20a      	bcs.n	801aa66 <MoblePalBluetoothProcess+0x32>
 801aa50:	f8c4 3948 	str.w	r3, [r4, #2376]	@ 0x948
 801aa54:	23c8      	movs	r3, #200	@ 0xc8
 801aa56:	9300      	str	r3, [sp, #0]
 801aa58:	f8b4 0382 	ldrh.w	r0, [r4, #898]	@ 0x382
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	2278      	movs	r2, #120	@ 0x78
 801aa60:	2150      	movs	r1, #80	@ 0x50
 801aa62:	f7fa fc9a 	bl	801539a <aci_l2cap_connection_parameter_update_req>
 801aa66:	f8d4 2350 	ldr.w	r2, [r4, #848]	@ 0x350
 801aa6a:	4b0d      	ldr	r3, [pc, #52]	@ (801aaa0 <MoblePalBluetoothProcess+0x6c>)
 801aa6c:	429a      	cmp	r2, r3
 801aa6e:	d90d      	bls.n	801aa8c <MoblePalBluetoothProcess+0x58>
 801aa70:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 801aa74:	f023 0304 	bic.w	r3, r3, #4
 801aa78:	f043 0308 	orr.w	r3, r3, #8
 801aa7c:	f8c4 3354 	str.w	r3, [r4, #852]	@ 0x354
 801aa80:	f8d4 3358 	ldr.w	r3, [r4, #856]	@ 0x358
 801aa84:	b113      	cbz	r3, 801aa8c <MoblePalBluetoothProcess+0x58>
 801aa86:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 801aa8a:	4798      	blx	r3
 801aa8c:	f7ff ffba 	bl	801aa04 <MoblePalBluetoothProcessNotifications>
 801aa90:	b002      	add	sp, #8
 801aa92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa96:	f7fd b881 	b.w	8017b9c <MoblePalBluetoothProcessDisconnection>
 801aa9a:	bf00      	nop
 801aa9c:	2000140c 	.word	0x2000140c
 801aaa0:	00017317 	.word	0x00017317

0801aaa4 <MoblePalProcess>:
 801aaa4:	b508      	push	{r3, lr}
 801aaa6:	f7fc fec1 	bl	801782c <MoblePalTimerProcess>
 801aaaa:	f7ff ffc3 	bl	801aa34 <MoblePalBluetoothProcess>
 801aaae:	f7ec fd39 	bl	8007524 <PalNvmProcess>
 801aab2:	2000      	movs	r0, #0
 801aab4:	bd08      	pop	{r3, pc}

0801aab6 <MobleModelBluemeshNewPacket_ExtCall>:
 801aab6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801aaba:	4606      	mov	r6, r0
 801aabc:	200c      	movs	r0, #12
 801aabe:	460c      	mov	r4, r1
 801aac0:	461f      	mov	r7, r3
 801aac2:	f7ff fed5 	bl	801a870 <MobleMemAlloc>
 801aac6:	7007      	strb	r7, [r0, #0]
 801aac8:	8923      	ldrh	r3, [r4, #8]
 801aaca:	8083      	strh	r3, [r0, #4]
 801aacc:	8963      	ldrh	r3, [r4, #10]
 801aace:	80c3      	strh	r3, [r0, #6]
 801aad0:	78e3      	ldrb	r3, [r4, #3]
 801aad2:	7203      	strb	r3, [r0, #8]
 801aad4:	7da3      	ldrb	r3, [r4, #22]
 801aad6:	7243      	strb	r3, [r0, #9]
 801aad8:	7c23      	ldrb	r3, [r4, #16]
 801aada:	72c3      	strb	r3, [r0, #11]
 801aadc:	7b23      	ldrb	r3, [r4, #12]
 801aade:	7283      	strb	r3, [r0, #10]
 801aae0:	69e7      	ldr	r7, [r4, #28]
 801aae2:	4605      	mov	r5, r0
 801aae4:	b3ae      	cbz	r6, 801ab52 <MobleModelBluemeshNewPacket_ExtCall+0x9c>
 801aae6:	2f02      	cmp	r7, #2
 801aae8:	d933      	bls.n	801ab52 <MobleModelBluemeshNewPacket_ExtCall+0x9c>
 801aaea:	a802      	add	r0, sp, #8
 801aaec:	a903      	add	r1, sp, #12
 801aaee:	f7ec fa45 	bl	8006f7c <GetApplicationVendorModels>
 801aaf2:	e9dd c302 	ldrd	ip, r3, [sp, #8]
 801aaf6:	2000      	movs	r0, #0
 801aaf8:	4602      	mov	r2, r0
 801aafa:	f04f 0e0c 	mov.w	lr, #12
 801aafe:	4293      	cmp	r3, r2
 801ab00:	fb0e c602 	mla	r6, lr, r2, ip
 801ab04:	d101      	bne.n	801ab0a <MobleModelBluemeshNewPacket_ExtCall+0x54>
 801ab06:	2402      	movs	r4, #2
 801ab08:	e019      	b.n	801ab3e <MobleModelBluemeshNewPacket_ExtCall+0x88>
 801ab0a:	f894 1020 	ldrb.w	r1, [r4, #32]
 801ab0e:	f001 08c0 	and.w	r8, r1, #192	@ 0xc0
 801ab12:	f1b8 0fc0 	cmp.w	r8, #192	@ 0xc0
 801ab16:	d119      	bne.n	801ab4c <MobleModelBluemeshNewPacket_ExtCall+0x96>
 801ab18:	f8b4 8021 	ldrh.w	r8, [r4, #33]	@ 0x21
 801ab1c:	f1b8 0f30 	cmp.w	r8, #48	@ 0x30
 801ab20:	d114      	bne.n	801ab4c <MobleModelBluemeshNewPacket_ExtCall+0x96>
 801ab22:	b100      	cbz	r0, 801ab26 <MobleModelBluemeshNewPacket_ExtCall+0x70>
 801ab24:	9602      	str	r6, [sp, #8]
 801ab26:	2300      	movs	r3, #0
 801ab28:	9300      	str	r3, [sp, #0]
 801ab2a:	9b02      	ldr	r3, [sp, #8]
 801ab2c:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 801ab30:	689e      	ldr	r6, [r3, #8]
 801ab32:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801ab36:	1efb      	subs	r3, r7, #3
 801ab38:	4628      	mov	r0, r5
 801ab3a:	47b0      	blx	r6
 801ab3c:	4604      	mov	r4, r0
 801ab3e:	4628      	mov	r0, r5
 801ab40:	f7ff ff20 	bl	801a984 <MobleMemFree>
 801ab44:	4620      	mov	r0, r4
 801ab46:	b004      	add	sp, #16
 801ab48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab4c:	3201      	adds	r2, #1
 801ab4e:	2001      	movs	r0, #1
 801ab50:	e7d5      	b.n	801aafe <MobleModelBluemeshNewPacket_ExtCall+0x48>
 801ab52:	2403      	movs	r4, #3
 801ab54:	e7f6      	b.n	801ab44 <MobleModelBluemeshNewPacket_ExtCall+0x8e>
	...

0801ab58 <mem_alloc_init>:
 801ab58:	6a03      	ldr	r3, [r0, #32]
 801ab5a:	4a0e      	ldr	r2, [pc, #56]	@ (801ab94 <mem_alloc_init+0x3c>)
 801ab5c:	6819      	ldr	r1, [r3, #0]
 801ab5e:	f8c2 1940 	str.w	r1, [r2, #2368]	@ 0x940
 801ab62:	8899      	ldrh	r1, [r3, #4]
 801ab64:	f8a2 1944 	strh.w	r1, [r2, #2372]	@ 0x944
 801ab68:	8919      	ldrh	r1, [r3, #8]
 801ab6a:	230c      	movs	r3, #12
 801ab6c:	fbb1 f1f3 	udiv	r1, r1, r3
 801ab70:	1c4b      	adds	r3, r1, #1
 801ab72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ab76:	009b      	lsls	r3, r3, #2
 801ab78:	b29b      	uxth	r3, r3
 801ab7a:	1f18      	subs	r0, r3, #4
 801ab7c:	f8a2 394c 	strh.w	r3, [r2, #2380]	@ 0x94c
 801ab80:	3102      	adds	r1, #2
 801ab82:	3b05      	subs	r3, #5
 801ab84:	f8a2 094e 	strh.w	r0, [r2, #2382]	@ 0x94e
 801ab88:	f8a2 3950 	strh.w	r3, [r2, #2384]	@ 0x950
 801ab8c:	f882 12dc 	strb.w	r1, [r2, #732]	@ 0x2dc
 801ab90:	4770      	bx	lr
 801ab92:	bf00      	nop
 801ab94:	2000140c 	.word	0x2000140c

0801ab98 <MobleInputStreamGetBigEndian>:
 801ab98:	4603      	mov	r3, r0
 801ab9a:	b530      	push	{r4, r5, lr}
 801ab9c:	4608      	mov	r0, r1
 801ab9e:	2400      	movs	r4, #0
 801aba0:	1859      	adds	r1, r3, r1
 801aba2:	428b      	cmp	r3, r1
 801aba4:	6014      	str	r4, [r2, #0]
 801aba6:	d100      	bne.n	801abaa <MobleInputStreamGetBigEndian+0x12>
 801aba8:	bd30      	pop	{r4, r5, pc}
 801abaa:	0224      	lsls	r4, r4, #8
 801abac:	6014      	str	r4, [r2, #0]
 801abae:	f813 5b01 	ldrb.w	r5, [r3], #1
 801abb2:	432c      	orrs	r4, r5
 801abb4:	e7f5      	b.n	801aba2 <MobleInputStreamGetBigEndian+0xa>

0801abb6 <MobleInputStreamGetLittleEndian>:
 801abb6:	b510      	push	{r4, lr}
 801abb8:	00cb      	lsls	r3, r1, #3
 801abba:	f04f 34ff 	mov.w	r4, #4294967295
 801abbe:	409c      	lsls	r4, r3
 801abc0:	6803      	ldr	r3, [r0, #0]
 801abc2:	ea23 0304 	bic.w	r3, r3, r4
 801abc6:	6013      	str	r3, [r2, #0]
 801abc8:	4608      	mov	r0, r1
 801abca:	bd10      	pop	{r4, pc}

0801abcc <MobleOutputStreamPutArray>:
 801abcc:	b538      	push	{r3, r4, r5, lr}
 801abce:	4614      	mov	r4, r2
 801abd0:	b128      	cbz	r0, 801abde <MobleOutputStreamPutArray+0x12>
 801abd2:	b131      	cbz	r1, 801abe2 <MobleOutputStreamPutArray+0x16>
 801abd4:	b10a      	cbz	r2, 801abda <MobleOutputStreamPutArray+0xe>
 801abd6:	f00e facf 	bl	8029178 <memmove>
 801abda:	4620      	mov	r0, r4
 801abdc:	bd38      	pop	{r3, r4, r5, pc}
 801abde:	4604      	mov	r4, r0
 801abe0:	e7fb      	b.n	801abda <MobleOutputStreamPutArray+0xe>
 801abe2:	460c      	mov	r4, r1
 801abe4:	e7f9      	b.n	801abda <MobleOutputStreamPutArray+0xe>

0801abe6 <MobleOutputStreamPutBigEndian>:
 801abe6:	4402      	add	r2, r0
 801abe8:	4282      	cmp	r2, r0
 801abea:	d101      	bne.n	801abf0 <MobleOutputStreamPutBigEndian+0xa>
 801abec:	2000      	movs	r0, #0
 801abee:	4770      	bx	lr
 801abf0:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801abf4:	0a09      	lsrs	r1, r1, #8
 801abf6:	e7f7      	b.n	801abe8 <MobleOutputStreamPutBigEndian+0x2>

0801abf8 <MoblePalCryptoEncryptNetwork>:
 801abf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abfc:	b0a3      	sub	sp, #140	@ 0x8c
 801abfe:	4605      	mov	r5, r0
 801ac00:	f89d 60b0 	ldrb.w	r6, [sp, #176]	@ 0xb0
 801ac04:	4692      	mov	sl, r2
 801ac06:	461f      	mov	r7, r3
 801ac08:	4689      	mov	r9, r1
 801ac0a:	b931      	cbnz	r1, 801ac1a <MoblePalCryptoEncryptNetwork+0x22>
 801ac0c:	4ba3      	ldr	r3, [pc, #652]	@ (801ae9c <MoblePalCryptoEncryptNetwork+0x2a4>)
 801ac0e:	4aa4      	ldr	r2, [pc, #656]	@ (801aea0 <MoblePalCryptoEncryptNetwork+0x2a8>)
 801ac10:	f44f 61b8 	mov.w	r1, #1472	@ 0x5c0
 801ac14:	48a3      	ldr	r0, [pc, #652]	@ (801aea4 <MoblePalCryptoEncryptNetwork+0x2ac>)
 801ac16:	f00d fbe1 	bl	80283dc <__assert_func>
 801ac1a:	b920      	cbnz	r0, 801ac26 <MoblePalCryptoEncryptNetwork+0x2e>
 801ac1c:	4ba2      	ldr	r3, [pc, #648]	@ (801aea8 <MoblePalCryptoEncryptNetwork+0x2b0>)
 801ac1e:	4aa0      	ldr	r2, [pc, #640]	@ (801aea0 <MoblePalCryptoEncryptNetwork+0x2a8>)
 801ac20:	f240 51c1 	movw	r1, #1473	@ 0x5c1
 801ac24:	e7f6      	b.n	801ac14 <MoblePalCryptoEncryptNetwork+0x1c>
 801ac26:	2b10      	cmp	r3, #16
 801ac28:	d904      	bls.n	801ac34 <MoblePalCryptoEncryptNetwork+0x3c>
 801ac2a:	4ba0      	ldr	r3, [pc, #640]	@ (801aeac <MoblePalCryptoEncryptNetwork+0x2b4>)
 801ac2c:	4a9c      	ldr	r2, [pc, #624]	@ (801aea0 <MoblePalCryptoEncryptNetwork+0x2a8>)
 801ac2e:	f240 51c2 	movw	r1, #1474	@ 0x5c2
 801ac32:	e7ef      	b.n	801ac14 <MoblePalCryptoEncryptNetwork+0x1c>
 801ac34:	4a9e      	ldr	r2, [pc, #632]	@ (801aeb0 <MoblePalCryptoEncryptNetwork+0x2b8>)
 801ac36:	2300      	movs	r3, #0
 801ac38:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 801ac3c:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 801ac40:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 801ac44:	930c      	str	r3, [sp, #48]	@ 0x30
 801ac46:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801ac4a:	f892 365c 	ldrb.w	r3, [r2, #1628]	@ 0x65c
 801ac4e:	f8d2 8658 	ldr.w	r8, [r2, #1624]	@ 0x658
 801ac52:	2b01      	cmp	r3, #1
 801ac54:	d108      	bne.n	801ac68 <MoblePalCryptoEncryptNetwork+0x70>
 801ac56:	f1b8 0f00 	cmp.w	r8, #0
 801ac5a:	d103      	bne.n	801ac64 <MoblePalCryptoEncryptNetwork+0x6c>
 801ac5c:	2002      	movs	r0, #2
 801ac5e:	b023      	add	sp, #140	@ 0x8c
 801ac60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac64:	f108 38ff 	add.w	r8, r8, #4294967295
 801ac68:	8b6c      	ldrh	r4, [r5, #26]
 801ac6a:	f014 0420 	ands.w	r4, r4, #32
 801ac6e:	f000 80b9 	beq.w	801ade4 <MoblePalCryptoEncryptNetwork+0x1ec>
 801ac72:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 801ac76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ac7a:	f8d3 1630 	ldr.w	r1, [r3, #1584]	@ 0x630
 801ac7e:	2900      	cmp	r1, #0
 801ac80:	d0ec      	beq.n	801ac5c <MoblePalCryptoEncryptNetwork+0x64>
 801ac82:	f891 3042 	ldrb.w	r3, [r1, #66]	@ 0x42
 801ac86:	207c      	movs	r0, #124	@ 0x7c
 801ac88:	fb00 2303 	mla	r3, r0, r3, r2
 801ac8c:	f893 2445 	ldrb.w	r2, [r3, #1093]	@ 0x445
 801ac90:	2a01      	cmp	r2, #1
 801ac92:	d003      	beq.n	801ac9c <MoblePalCryptoEncryptNetwork+0xa4>
 801ac94:	f893 3446 	ldrb.w	r3, [r3, #1094]	@ 0x446
 801ac98:	2b01      	cmp	r3, #1
 801ac9a:	d1df      	bne.n	801ac5c <MoblePalCryptoEncryptNetwork+0x64>
 801ac9c:	2e00      	cmp	r6, #0
 801ac9e:	f040 809a 	bne.w	801add6 <MoblePalCryptoEncryptNetwork+0x1de>
 801aca2:	f891 4040 	ldrb.w	r4, [r1, #64]	@ 0x40
 801aca6:	f101 0620 	add.w	r6, r1, #32
 801acaa:	468b      	mov	fp, r1
 801acac:	8ae9      	ldrh	r1, [r5, #22]
 801acae:	2202      	movs	r2, #2
 801acb0:	a816      	add	r0, sp, #88	@ 0x58
 801acb2:	f7ff ff98 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801acb6:	463a      	mov	r2, r7
 801acb8:	4651      	mov	r1, sl
 801acba:	f10d 005a 	add.w	r0, sp, #90	@ 0x5a
 801acbe:	f7ff ff85 	bl	801abcc <MobleOutputStreamPutArray>
 801acc2:	7ba9      	ldrb	r1, [r5, #14]
 801acc4:	7bea      	ldrb	r2, [r5, #15]
 801acc6:	3900      	subs	r1, #0
 801acc8:	bf18      	it	ne
 801acca:	2101      	movne	r1, #1
 801accc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 801acd0:	f88d 2029 	strb.w	r2, [sp, #41]	@ 0x29
 801acd4:	8b6a      	ldrh	r2, [r5, #26]
 801acd6:	6929      	ldr	r1, [r5, #16]
 801acd8:	0613      	lsls	r3, r2, #24
 801acda:	bf44      	itt	mi
 801acdc:	2203      	movmi	r2, #3
 801acde:	f8ad 2028 	strhmi.w	r2, [sp, #40]	@ 0x28
 801ace2:	f10d 002a 	add.w	r0, sp, #42	@ 0x2a
 801ace6:	2203      	movs	r2, #3
 801ace8:	f7ff ff7d 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801acec:	8aa9      	ldrh	r1, [r5, #20]
 801acee:	2202      	movs	r2, #2
 801acf0:	f10d 002d 	add.w	r0, sp, #45	@ 0x2d
 801acf4:	f7ff ff77 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801acf8:	2204      	movs	r2, #4
 801acfa:	4641      	mov	r1, r8
 801acfc:	f10d 0031 	add.w	r0, sp, #49	@ 0x31
 801ad00:	f7ff ff71 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801ad04:	7baa      	ldrb	r2, [r5, #14]
 801ad06:	2a00      	cmp	r2, #0
 801ad08:	f04f 020d 	mov.w	r2, #13
 801ad0c:	f107 0a02 	add.w	sl, r7, #2
 801ad10:	ab16      	add	r3, sp, #88	@ 0x58
 801ad12:	9201      	str	r2, [sp, #4]
 801ad14:	f04f 0700 	mov.w	r7, #0
 801ad18:	aa0a      	add	r2, sp, #40	@ 0x28
 801ad1a:	9200      	str	r2, [sp, #0]
 801ad1c:	9302      	str	r3, [sp, #8]
 801ad1e:	bf14      	ite	ne
 801ad20:	2208      	movne	r2, #8
 801ad22:	2204      	moveq	r2, #4
 801ad24:	e9cd 7704 	strd	r7, r7, [sp, #16]
 801ad28:	f8cd a00c 	str.w	sl, [sp, #12]
 801ad2c:	465b      	mov	r3, fp
 801ad2e:	a908      	add	r1, sp, #32
 801ad30:	a81b      	add	r0, sp, #108	@ 0x6c
 801ad32:	f7fe faf9 	bl	8019328 <MoblePalCryptoAesCcmEncrypt>
 801ad36:	2801      	cmp	r0, #1
 801ad38:	d890      	bhi.n	801ac5c <MoblePalCryptoEncryptNetwork+0x64>
 801ad3a:	7bab      	ldrb	r3, [r5, #14]
 801ad3c:	42bb      	cmp	r3, r7
 801ad3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 801ad40:	bf14      	ite	ne
 801ad42:	2208      	movne	r2, #8
 801ad44:	2204      	moveq	r2, #4
 801ad46:	a908      	add	r1, sp, #32
 801ad48:	eb03 000a 	add.w	r0, r3, sl
 801ad4c:	f00e fabf 	bl	80292ce <memcpy>
 801ad50:	2204      	movs	r2, #4
 801ad52:	4641      	mov	r1, r8
 801ad54:	f10d 003d 	add.w	r0, sp, #61	@ 0x3d
 801ad58:	f7ff ff45 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801ad5c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801ad5e:	f8bd 2070 	ldrh.w	r2, [sp, #112]	@ 0x70
 801ad62:	f89d 3072 	ldrb.w	r3, [sp, #114]	@ 0x72
 801ad66:	f8cd 0041 	str.w	r0, [sp, #65]	@ 0x41
 801ad6a:	f8ad 2045 	strh.w	r2, [sp, #69]	@ 0x45
 801ad6e:	f88d 3047 	strb.w	r3, [sp, #71]	@ 0x47
 801ad72:	aa0e      	add	r2, sp, #56	@ 0x38
 801ad74:	2310      	movs	r3, #16
 801ad76:	4631      	mov	r1, r6
 801ad78:	a812      	add	r0, sp, #72	@ 0x48
 801ad7a:	f7fe fb01 	bl	8019380 <MoblePalCryptoAesEcb>
 801ad7e:	7baa      	ldrb	r2, [r5, #14]
 801ad80:	7beb      	ldrb	r3, [r5, #15]
 801ad82:	6929      	ldr	r1, [r5, #16]
 801ad84:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801ad88:	f10d 0019 	add.w	r0, sp, #25
 801ad8c:	2203      	movs	r2, #3
 801ad8e:	f88d 3018 	strb.w	r3, [sp, #24]
 801ad92:	f7ff ff28 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801ad96:	8aa9      	ldrh	r1, [r5, #20]
 801ad98:	2202      	movs	r2, #2
 801ad9a:	a807      	add	r0, sp, #28
 801ad9c:	f7ff ff23 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801ada0:	2206      	movs	r2, #6
 801ada2:	a912      	add	r1, sp, #72	@ 0x48
 801ada4:	a806      	add	r0, sp, #24
 801ada6:	f7fe fafc 	bl	80193a2 <MoblePalCryptoXor>
 801adaa:	4648      	mov	r0, r9
 801adac:	ea44 14c8 	orr.w	r4, r4, r8, lsl #7
 801adb0:	2206      	movs	r2, #6
 801adb2:	a906      	add	r1, sp, #24
 801adb4:	f800 4b01 	strb.w	r4, [r0], #1
 801adb8:	f7ff ff08 	bl	801abcc <MobleOutputStreamPutArray>
 801adbc:	7bab      	ldrb	r3, [r5, #14]
 801adbe:	42bb      	cmp	r3, r7
 801adc0:	bf14      	ite	ne
 801adc2:	2208      	movne	r2, #8
 801adc4:	2204      	moveq	r2, #4
 801adc6:	4452      	add	r2, sl
 801adc8:	a91b      	add	r1, sp, #108	@ 0x6c
 801adca:	f109 0007 	add.w	r0, r9, #7
 801adce:	f7ff fefd 	bl	801abcc <MobleOutputStreamPutArray>
 801add2:	4638      	mov	r0, r7
 801add4:	e743      	b.n	801ac5e <MoblePalCryptoEncryptNetwork+0x66>
 801add6:	f891 4041 	ldrb.w	r4, [r1, #65]	@ 0x41
 801adda:	f101 0630 	add.w	r6, r1, #48	@ 0x30
 801adde:	f101 0b10 	add.w	fp, r1, #16
 801ade2:	e763      	b.n	801acac <MoblePalCryptoEncryptNetwork+0xb4>
 801ade4:	7f28      	ldrb	r0, [r5, #28]
 801ade6:	237c      	movs	r3, #124	@ 0x7c
 801ade8:	fb03 2300 	mla	r3, r3, r0, r2
 801adec:	f893 1445 	ldrb.w	r1, [r3, #1093]	@ 0x445
 801adf0:	2901      	cmp	r1, #1
 801adf2:	d003      	beq.n	801adfc <MoblePalCryptoEncryptNetwork+0x204>
 801adf4:	f893 3446 	ldrb.w	r3, [r3, #1094]	@ 0x446
 801adf8:	2b01      	cmp	r3, #1
 801adfa:	d11c      	bne.n	801ae36 <MoblePalCryptoEncryptNetwork+0x23e>
 801adfc:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 801ae00:	4b2c      	ldr	r3, [pc, #176]	@ (801aeb4 <MoblePalCryptoEncryptNetwork+0x2bc>)
 801ae02:	0089      	lsls	r1, r1, #2
 801ae04:	b95e      	cbnz	r6, 801ae1e <MoblePalCryptoEncryptNetwork+0x226>
 801ae06:	f101 065c 	add.w	r6, r1, #92	@ 0x5c
 801ae0a:	313c      	adds	r1, #60	@ 0x3c
 801ae0c:	eb03 0b01 	add.w	fp, r3, r1
 801ae10:	217c      	movs	r1, #124	@ 0x7c
 801ae12:	fb01 2200 	mla	r2, r1, r0, r2
 801ae16:	441e      	add	r6, r3
 801ae18:	f892 445c 	ldrb.w	r4, [r2, #1116]	@ 0x45c
 801ae1c:	e746      	b.n	801acac <MoblePalCryptoEncryptNetwork+0xb4>
 801ae1e:	f101 066c 	add.w	r6, r1, #108	@ 0x6c
 801ae22:	314c      	adds	r1, #76	@ 0x4c
 801ae24:	eb03 0b01 	add.w	fp, r3, r1
 801ae28:	217c      	movs	r1, #124	@ 0x7c
 801ae2a:	fb01 2000 	mla	r0, r1, r0, r2
 801ae2e:	441e      	add	r6, r3
 801ae30:	f890 445d 	ldrb.w	r4, [r0, #1117]	@ 0x45d
 801ae34:	e73a      	b.n	801acac <MoblePalCryptoEncryptNetwork+0xb4>
 801ae36:	f892 361c 	ldrb.w	r3, [r2, #1564]	@ 0x61c
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	f43f af0e 	beq.w	801ac5c <MoblePalCryptoEncryptNetwork+0x64>
 801ae40:	491c      	ldr	r1, [pc, #112]	@ (801aeb4 <MoblePalCryptoEncryptNetwork+0x2bc>)
 801ae42:	460b      	mov	r3, r1
 801ae44:	f891 0021 	ldrb.w	r0, [r1, #33]	@ 0x21
 801ae48:	2801      	cmp	r0, #1
 801ae4a:	d10c      	bne.n	801ae66 <MoblePalCryptoEncryptNetwork+0x26e>
 801ae4c:	217c      	movs	r1, #124	@ 0x7c
 801ae4e:	434c      	muls	r4, r1
 801ae50:	f104 065c 	add.w	r6, r4, #92	@ 0x5c
 801ae54:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 801ae58:	4414      	add	r4, r2
 801ae5a:	441e      	add	r6, r3
 801ae5c:	f894 445c 	ldrb.w	r4, [r4, #1116]	@ 0x45c
 801ae60:	eb03 0b01 	add.w	fp, r3, r1
 801ae64:	e722      	b.n	801acac <MoblePalCryptoEncryptNetwork+0xb4>
 801ae66:	f891 0022 	ldrb.w	r0, [r1, #34]	@ 0x22
 801ae6a:	2801      	cmp	r0, #1
 801ae6c:	d10c      	bne.n	801ae88 <MoblePalCryptoEncryptNetwork+0x290>
 801ae6e:	217c      	movs	r1, #124	@ 0x7c
 801ae70:	434c      	muls	r4, r1
 801ae72:	f104 066c 	add.w	r6, r4, #108	@ 0x6c
 801ae76:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 801ae7a:	4414      	add	r4, r2
 801ae7c:	441e      	add	r6, r3
 801ae7e:	f894 445d 	ldrb.w	r4, [r4, #1117]	@ 0x45d
 801ae82:	eb03 0b01 	add.w	fp, r3, r1
 801ae86:	e711      	b.n	801acac <MoblePalCryptoEncryptNetwork+0xb4>
 801ae88:	3401      	adds	r4, #1
 801ae8a:	2c03      	cmp	r4, #3
 801ae8c:	f101 017c 	add.w	r1, r1, #124	@ 0x7c
 801ae90:	d1d8      	bne.n	801ae44 <MoblePalCryptoEncryptNetwork+0x24c>
 801ae92:	2400      	movs	r4, #0
 801ae94:	46a3      	mov	fp, r4
 801ae96:	4626      	mov	r6, r4
 801ae98:	e708      	b.n	801acac <MoblePalCryptoEncryptNetwork+0xb4>
 801ae9a:	bf00      	nop
 801ae9c:	0803100e 	.word	0x0803100e
 801aea0:	0802f36f 	.word	0x0802f36f
 801aea4:	08030fa3 	.word	0x08030fa3
 801aea8:	08031015 	.word	0x08031015
 801aeac:	0803101f 	.word	0x0803101f
 801aeb0:	2000140c 	.word	0x2000140c
 801aeb4:	20001830 	.word	0x20001830

0801aeb8 <MoblePalCryptoPrepHeaderAndNonceNetwork>:
 801aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aebc:	4689      	mov	r9, r1
 801aebe:	b08d      	sub	sp, #52	@ 0x34
 801aec0:	4615      	mov	r5, r2
 801aec2:	461f      	mov	r7, r3
 801aec4:	4604      	mov	r4, r0
 801aec6:	b930      	cbnz	r0, 801aed6 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x1e>
 801aec8:	4b52      	ldr	r3, [pc, #328]	@ (801b014 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x15c>)
 801aeca:	4a53      	ldr	r2, [pc, #332]	@ (801b018 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801aecc:	f240 61a4 	movw	r1, #1700	@ 0x6a4
 801aed0:	4852      	ldr	r0, [pc, #328]	@ (801b01c <MoblePalCryptoPrepHeaderAndNonceNetwork+0x164>)
 801aed2:	f00d fa83 	bl	80283dc <__assert_func>
 801aed6:	b922      	cbnz	r2, 801aee2 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x2a>
 801aed8:	4b51      	ldr	r3, [pc, #324]	@ (801b020 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x168>)
 801aeda:	4a4f      	ldr	r2, [pc, #316]	@ (801b018 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801aedc:	f240 61a5 	movw	r1, #1701	@ 0x6a5
 801aee0:	e7f6      	b.n	801aed0 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 801aee2:	b923      	cbnz	r3, 801aeee <MoblePalCryptoPrepHeaderAndNonceNetwork+0x36>
 801aee4:	4b4f      	ldr	r3, [pc, #316]	@ (801b024 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x16c>)
 801aee6:	4a4c      	ldr	r2, [pc, #304]	@ (801b018 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801aee8:	f240 61a6 	movw	r1, #1702	@ 0x6a6
 801aeec:	e7f0      	b.n	801aed0 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 801aeee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801aef0:	b923      	cbnz	r3, 801aefc <MoblePalCryptoPrepHeaderAndNonceNetwork+0x44>
 801aef2:	4b4d      	ldr	r3, [pc, #308]	@ (801b028 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x170>)
 801aef4:	4a48      	ldr	r2, [pc, #288]	@ (801b018 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801aef6:	f240 61a7 	movw	r1, #1703	@ 0x6a7
 801aefa:	e7e9      	b.n	801aed0 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 801aefc:	b921      	cbnz	r1, 801af08 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x50>
 801aefe:	4b4b      	ldr	r3, [pc, #300]	@ (801b02c <MoblePalCryptoPrepHeaderAndNonceNetwork+0x174>)
 801af00:	4a45      	ldr	r2, [pc, #276]	@ (801b018 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801af02:	f44f 61d5 	mov.w	r1, #1704	@ 0x6a8
 801af06:	e7e3      	b.n	801aed0 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 801af08:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801af0c:	4b48      	ldr	r3, [pc, #288]	@ (801b030 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x178>)
 801af0e:	f100 0a0c 	add.w	sl, r0, #12
 801af12:	f8d3 6658 	ldr.w	r6, [r3, #1624]	@ 0x658
 801af16:	4651      	mov	r1, sl
 801af18:	4640      	mov	r0, r8
 801af1a:	f7fe fb7f 	bl	801961c <MoblePalCryptoParseNetHdr>
 801af1e:	7b22      	ldrb	r2, [r4, #12]
 801af20:	f006 0301 	and.w	r3, r6, #1
 801af24:	429a      	cmp	r2, r3
 801af26:	f108 0b07 	add.w	fp, r8, #7
 801af2a:	d002      	beq.n	801af32 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x7a>
 801af2c:	2e00      	cmp	r6, #0
 801af2e:	d06e      	beq.n	801b00e <MoblePalCryptoPrepHeaderAndNonceNetwork+0x156>
 801af30:	3e01      	subs	r6, #1
 801af32:	2300      	movs	r3, #0
 801af34:	2204      	movs	r2, #4
 801af36:	4631      	mov	r1, r6
 801af38:	f10d 0015 	add.w	r0, sp, #21
 801af3c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801af40:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801af44:	f7ff fe4f 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801af48:	2207      	movs	r2, #7
 801af4a:	4659      	mov	r1, fp
 801af4c:	f10d 0019 	add.w	r0, sp, #25
 801af50:	f7ff fe3c 	bl	801abcc <MobleOutputStreamPutArray>
 801af54:	2310      	movs	r3, #16
 801af56:	eb0d 0203 	add.w	r2, sp, r3
 801af5a:	4649      	mov	r1, r9
 801af5c:	a808      	add	r0, sp, #32
 801af5e:	f7fe fa0f 	bl	8019380 <MoblePalCryptoAesEcb>
 801af62:	f8d8 0000 	ldr.w	r0, [r8]
 801af66:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801af6a:	ab01      	add	r3, sp, #4
 801af6c:	c303      	stmia	r3!, {r0, r1}
 801af6e:	f898 2008 	ldrb.w	r2, [r8, #8]
 801af72:	701a      	strb	r2, [r3, #0]
 801af74:	a908      	add	r1, sp, #32
 801af76:	2206      	movs	r2, #6
 801af78:	f10d 0005 	add.w	r0, sp, #5
 801af7c:	f7fe fa11 	bl	80193a2 <MoblePalCryptoXor>
 801af80:	4651      	mov	r1, sl
 801af82:	a801      	add	r0, sp, #4
 801af84:	f7fe fb4a 	bl	801961c <MoblePalCryptoParseNetHdr>
 801af88:	7ba3      	ldrb	r3, [r4, #14]
 801af8a:	2b01      	cmp	r3, #1
 801af8c:	d138      	bne.n	801b000 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x148>
 801af8e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 801af92:	f043 0308 	orr.w	r3, r3, #8
 801af96:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 801af9a:	f04f 0a08 	mov.w	sl, #8
 801af9e:	f04f 0900 	mov.w	r9, #0
 801afa2:	f8c7 9000 	str.w	r9, [r7]
 801afa6:	f8c7 9004 	str.w	r9, [r7, #4]
 801afaa:	7a21      	ldrb	r1, [r4, #8]
 801afac:	eba1 010a 	sub.w	r1, r1, sl
 801afb0:	4652      	mov	r2, sl
 801afb2:	4441      	add	r1, r8
 801afb4:	4638      	mov	r0, r7
 801afb6:	f00e f8df 	bl	8029178 <memmove>
 801afba:	7a23      	ldrb	r3, [r4, #8]
 801afbc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801afbe:	3b07      	subs	r3, #7
 801afc0:	eba3 030a 	sub.w	r3, r3, sl
 801afc4:	6013      	str	r3, [r2, #0]
 801afc6:	4649      	mov	r1, r9
 801afc8:	220d      	movs	r2, #13
 801afca:	4628      	mov	r0, r5
 801afcc:	f00e f8ee 	bl	80291ac <memset>
 801afd0:	2206      	movs	r2, #6
 801afd2:	f10d 0105 	add.w	r1, sp, #5
 801afd6:	1c68      	adds	r0, r5, #1
 801afd8:	f7ff fdf8 	bl	801abcc <MobleOutputStreamPutArray>
 801afdc:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 801afe0:	061b      	lsls	r3, r3, #24
 801afe2:	bf42      	ittt	mi
 801afe4:	2303      	movmi	r3, #3
 801afe6:	702b      	strbmi	r3, [r5, #0]
 801afe8:	f885 9001 	strbmi.w	r9, [r5, #1]
 801afec:	2204      	movs	r2, #4
 801afee:	4631      	mov	r1, r6
 801aff0:	f105 0009 	add.w	r0, r5, #9
 801aff4:	f7ff fdf7 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801aff8:	2000      	movs	r0, #0
 801affa:	b00d      	add	sp, #52	@ 0x34
 801affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b000:	2b00      	cmp	r3, #0
 801b002:	bf14      	ite	ne
 801b004:	f04f 0a08 	movne.w	sl, #8
 801b008:	f04f 0a04 	moveq.w	sl, #4
 801b00c:	e7c7      	b.n	801af9e <MoblePalCryptoPrepHeaderAndNonceNetwork+0xe6>
 801b00e:	2002      	movs	r0, #2
 801b010:	e7f3      	b.n	801affa <MoblePalCryptoPrepHeaderAndNonceNetwork+0x142>
 801b012:	bf00      	nop
 801b014:	08031015 	.word	0x08031015
 801b018:	0802f38c 	.word	0x0802f38c
 801b01c:	08030fa3 	.word	0x08030fa3
 801b020:	0803104d 	.word	0x0803104d
 801b024:	08031053 	.word	0x08031053
 801b028:	08031057 	.word	0x08031057
 801b02c:	0803106a 	.word	0x0803106a
 801b030:	2000140c 	.word	0x2000140c

0801b034 <MoblePalCryptoDecryptNetworkEx>:
 801b034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b038:	460e      	mov	r6, r1
 801b03a:	b092      	sub	sp, #72	@ 0x48
 801b03c:	4611      	mov	r1, r2
 801b03e:	461f      	mov	r7, r3
 801b040:	4605      	mov	r5, r0
 801b042:	b930      	cbnz	r0, 801b052 <MoblePalCryptoDecryptNetworkEx+0x1e>
 801b044:	4b2d      	ldr	r3, [pc, #180]	@ (801b0fc <MoblePalCryptoDecryptNetworkEx+0xc8>)
 801b046:	4a2e      	ldr	r2, [pc, #184]	@ (801b100 <MoblePalCryptoDecryptNetworkEx+0xcc>)
 801b048:	f240 7102 	movw	r1, #1794	@ 0x702
 801b04c:	482d      	ldr	r0, [pc, #180]	@ (801b104 <MoblePalCryptoDecryptNetworkEx+0xd0>)
 801b04e:	f00d f9c5 	bl	80283dc <__assert_func>
 801b052:	b926      	cbnz	r6, 801b05e <MoblePalCryptoDecryptNetworkEx+0x2a>
 801b054:	4b2c      	ldr	r3, [pc, #176]	@ (801b108 <MoblePalCryptoDecryptNetworkEx+0xd4>)
 801b056:	4a2a      	ldr	r2, [pc, #168]	@ (801b100 <MoblePalCryptoDecryptNetworkEx+0xcc>)
 801b058:	f240 7103 	movw	r1, #1795	@ 0x703
 801b05c:	e7f6      	b.n	801b04c <MoblePalCryptoDecryptNetworkEx+0x18>
 801b05e:	b922      	cbnz	r2, 801b06a <MoblePalCryptoDecryptNetworkEx+0x36>
 801b060:	4b2a      	ldr	r3, [pc, #168]	@ (801b10c <MoblePalCryptoDecryptNetworkEx+0xd8>)
 801b062:	4a27      	ldr	r2, [pc, #156]	@ (801b100 <MoblePalCryptoDecryptNetworkEx+0xcc>)
 801b064:	f240 7104 	movw	r1, #1796	@ 0x704
 801b068:	e7f0      	b.n	801b04c <MoblePalCryptoDecryptNetworkEx+0x18>
 801b06a:	b923      	cbnz	r3, 801b076 <MoblePalCryptoDecryptNetworkEx+0x42>
 801b06c:	4b28      	ldr	r3, [pc, #160]	@ (801b110 <MoblePalCryptoDecryptNetworkEx+0xdc>)
 801b06e:	4a24      	ldr	r2, [pc, #144]	@ (801b100 <MoblePalCryptoDecryptNetworkEx+0xcc>)
 801b070:	f240 7105 	movw	r1, #1797	@ 0x705
 801b074:	e7ea      	b.n	801b04c <MoblePalCryptoDecryptNetworkEx+0x18>
 801b076:	7a03      	ldrb	r3, [r0, #8]
 801b078:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b07c:	3b0e      	subs	r3, #14
 801b07e:	2400      	movs	r4, #0
 801b080:	2b0f      	cmp	r3, #15
 801b082:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 801b086:	e9cd 4407 	strd	r4, r4, [sp, #28]
 801b08a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b08c:	f88d 4030 	strb.w	r4, [sp, #48]	@ 0x30
 801b090:	9406      	str	r4, [sp, #24]
 801b092:	d82f      	bhi.n	801b0f4 <MoblePalCryptoDecryptNetworkEx+0xc0>
 801b094:	f10d 0a1c 	add.w	sl, sp, #28
 801b098:	ab06      	add	r3, sp, #24
 801b09a:	9300      	str	r3, [sp, #0]
 801b09c:	aa09      	add	r2, sp, #36	@ 0x24
 801b09e:	4653      	mov	r3, sl
 801b0a0:	f7ff ff0a 	bl	801aeb8 <MoblePalCryptoPrepHeaderAndNonceNetwork>
 801b0a4:	7bab      	ldrb	r3, [r5, #14]
 801b0a6:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801b0aa:	f8cd 900c 	str.w	r9, [sp, #12]
 801b0ae:	42a3      	cmp	r3, r4
 801b0b0:	bf14      	ite	ne
 801b0b2:	2308      	movne	r3, #8
 801b0b4:	2304      	moveq	r3, #4
 801b0b6:	f108 0207 	add.w	r2, r8, #7
 801b0ba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801b0be:	e9cd 4404 	strd	r4, r4, [sp, #16]
 801b0c2:	f8cd a000 	str.w	sl, [sp]
 801b0c6:	230d      	movs	r3, #13
 801b0c8:	aa09      	add	r2, sp, #36	@ 0x24
 801b0ca:	4639      	mov	r1, r7
 801b0cc:	a80d      	add	r0, sp, #52	@ 0x34
 801b0ce:	f7fe f941 	bl	8019354 <MoblePalCryptoAesCcmDecrypt>
 801b0d2:	2801      	cmp	r0, #1
 801b0d4:	d810      	bhi.n	801b0f8 <MoblePalCryptoDecryptNetworkEx+0xc4>
 801b0d6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 801b0da:	ba5b      	rev16	r3, r3
 801b0dc:	82eb      	strh	r3, [r5, #22]
 801b0de:	f1a9 0202 	sub.w	r2, r9, #2
 801b0e2:	f10d 0136 	add.w	r1, sp, #54	@ 0x36
 801b0e6:	4630      	mov	r0, r6
 801b0e8:	f00e f8f1 	bl	80292ce <memcpy>
 801b0ec:	4620      	mov	r0, r4
 801b0ee:	b012      	add	sp, #72	@ 0x48
 801b0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0f4:	2003      	movs	r0, #3
 801b0f6:	e7fa      	b.n	801b0ee <MoblePalCryptoDecryptNetworkEx+0xba>
 801b0f8:	2002      	movs	r0, #2
 801b0fa:	e7f8      	b.n	801b0ee <MoblePalCryptoDecryptNetworkEx+0xba>
 801b0fc:	08031015 	.word	0x08031015
 801b100:	0802f3b4 	.word	0x0802f3b4
 801b104:	08030fa3 	.word	0x08030fa3
 801b108:	08031076 	.word	0x08031076
 801b10c:	0803106a 	.word	0x0803106a
 801b110:	08031081 	.word	0x08031081

0801b114 <BnrgmPalCryptoDecryptNetwork>:
 801b114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b118:	4f4c      	ldr	r7, [pc, #304]	@ (801b24c <BnrgmPalCryptoDecryptNetwork+0x138>)
 801b11a:	4604      	mov	r4, r0
 801b11c:	4689      	mov	r9, r1
 801b11e:	2600      	movs	r6, #0
 801b120:	2002      	movs	r0, #2
 801b122:	f207 4824 	addw	r8, r7, #1060	@ 0x424
 801b126:	7ea3      	ldrb	r3, [r4, #26]
 801b128:	b2f5      	uxtb	r5, r6
 801b12a:	42ab      	cmp	r3, r5
 801b12c:	d837      	bhi.n	801b19e <BnrgmPalCryptoDecryptNetwork+0x8a>
 801b12e:	2801      	cmp	r0, #1
 801b130:	d050      	beq.n	801b1d4 <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b132:	4f46      	ldr	r7, [pc, #280]	@ (801b24c <BnrgmPalCryptoDecryptNetwork+0x138>)
 801b134:	2600      	movs	r6, #0
 801b136:	f207 4824 	addw	r8, r7, #1060	@ 0x424
 801b13a:	7fa3      	ldrb	r3, [r4, #30]
 801b13c:	b2f5      	uxtb	r5, r6
 801b13e:	42ab      	cmp	r3, r5
 801b140:	d84a      	bhi.n	801b1d8 <BnrgmPalCryptoDecryptNetwork+0xc4>
 801b142:	2801      	cmp	r0, #1
 801b144:	d046      	beq.n	801b1d4 <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b146:	4f41      	ldr	r7, [pc, #260]	@ (801b24c <BnrgmPalCryptoDecryptNetwork+0x138>)
 801b148:	2600      	movs	r6, #0
 801b14a:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 801b14e:	b2f5      	uxtb	r5, r6
 801b150:	42ab      	cmp	r3, r5
 801b152:	d860      	bhi.n	801b216 <BnrgmPalCryptoDecryptNetwork+0x102>
 801b154:	2801      	cmp	r0, #1
 801b156:	d03d      	beq.n	801b1d4 <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b158:	4f3c      	ldr	r7, [pc, #240]	@ (801b24c <BnrgmPalCryptoDecryptNetwork+0x138>)
 801b15a:	2600      	movs	r6, #0
 801b15c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801b160:	b2f5      	uxtb	r5, r6
 801b162:	42ab      	cmp	r3, r5
 801b164:	d936      	bls.n	801b1d4 <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b166:	4425      	add	r5, r4
 801b168:	4649      	mov	r1, r9
 801b16a:	f895 302e 	ldrb.w	r3, [r5, #46]	@ 0x2e
 801b16e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801b172:	4620      	mov	r0, r4
 801b174:	f8d3 2630 	ldr.w	r2, [r3, #1584]	@ 0x630
 801b178:	f102 0310 	add.w	r3, r2, #16
 801b17c:	3230      	adds	r2, #48	@ 0x30
 801b17e:	f7ff ff59 	bl	801b034 <MoblePalCryptoDecryptNetworkEx>
 801b182:	3601      	adds	r6, #1
 801b184:	2800      	cmp	r0, #0
 801b186:	d1e9      	bne.n	801b15c <BnrgmPalCryptoDecryptNetwork+0x48>
 801b188:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 801b18c:	f043 0320 	orr.w	r3, r3, #32
 801b190:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 801b194:	f895 302e 	ldrb.w	r3, [r5, #46]	@ 0x2e
 801b198:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
 801b19c:	e037      	b.n	801b20e <BnrgmPalCryptoDecryptNetwork+0xfa>
 801b19e:	4425      	add	r5, r4
 801b1a0:	4649      	mov	r1, r9
 801b1a2:	7eea      	ldrb	r2, [r5, #27]
 801b1a4:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 801b1a8:	0092      	lsls	r2, r2, #2
 801b1aa:	f102 033c 	add.w	r3, r2, #60	@ 0x3c
 801b1ae:	325c      	adds	r2, #92	@ 0x5c
 801b1b0:	4443      	add	r3, r8
 801b1b2:	4442      	add	r2, r8
 801b1b4:	4620      	mov	r0, r4
 801b1b6:	f7ff ff3d 	bl	801b034 <MoblePalCryptoDecryptNetworkEx>
 801b1ba:	3601      	adds	r6, #1
 801b1bc:	2800      	cmp	r0, #0
 801b1be:	d1b2      	bne.n	801b126 <BnrgmPalCryptoDecryptNetwork+0x12>
 801b1c0:	7eeb      	ldrb	r3, [r5, #27]
 801b1c2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b1c6:	227c      	movs	r2, #124	@ 0x7c
 801b1c8:	fb02 7303 	mla	r3, r2, r3, r7
 801b1cc:	f8b3 3448 	ldrh.w	r3, [r3, #1096]	@ 0x448
 801b1d0:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 801b1d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1d8:	4425      	add	r5, r4
 801b1da:	4649      	mov	r1, r9
 801b1dc:	7fea      	ldrb	r2, [r5, #31]
 801b1de:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 801b1e2:	0092      	lsls	r2, r2, #2
 801b1e4:	f102 034c 	add.w	r3, r2, #76	@ 0x4c
 801b1e8:	326c      	adds	r2, #108	@ 0x6c
 801b1ea:	4443      	add	r3, r8
 801b1ec:	4442      	add	r2, r8
 801b1ee:	4620      	mov	r0, r4
 801b1f0:	f7ff ff20 	bl	801b034 <MoblePalCryptoDecryptNetworkEx>
 801b1f4:	3601      	adds	r6, #1
 801b1f6:	2800      	cmp	r0, #0
 801b1f8:	d19f      	bne.n	801b13a <BnrgmPalCryptoDecryptNetwork+0x26>
 801b1fa:	7feb      	ldrb	r3, [r5, #31]
 801b1fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b200:	227c      	movs	r2, #124	@ 0x7c
 801b202:	fb02 7303 	mla	r3, r2, r3, r7
 801b206:	f8b3 3448 	ldrh.w	r3, [r3, #1096]	@ 0x448
 801b20a:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
 801b20e:	2301      	movs	r3, #1
 801b210:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49
 801b214:	e7de      	b.n	801b1d4 <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b216:	4425      	add	r5, r4
 801b218:	4649      	mov	r1, r9
 801b21a:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 801b21e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801b222:	4620      	mov	r0, r4
 801b224:	f8d3 3630 	ldr.w	r3, [r3, #1584]	@ 0x630
 801b228:	f103 0220 	add.w	r2, r3, #32
 801b22c:	f7ff ff02 	bl	801b034 <MoblePalCryptoDecryptNetworkEx>
 801b230:	3601      	adds	r6, #1
 801b232:	2800      	cmp	r0, #0
 801b234:	d189      	bne.n	801b14a <BnrgmPalCryptoDecryptNetwork+0x36>
 801b236:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 801b23a:	f043 0320 	orr.w	r3, r3, #32
 801b23e:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 801b242:	f895 3023 	ldrb.w	r3, [r5, #35]	@ 0x23
 801b246:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
 801b24a:	e7c3      	b.n	801b1d4 <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b24c:	2000140c 	.word	0x2000140c

0801b250 <MoblePalCryptoEncryptApp>:
 801b250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b254:	b08f      	sub	sp, #60	@ 0x3c
 801b256:	460d      	mov	r5, r1
 801b258:	f8dd 8064 	ldr.w	r8, [sp, #100]	@ 0x64
 801b25c:	f89d 4068 	ldrb.w	r4, [sp, #104]	@ 0x68
 801b260:	4691      	mov	r9, r2
 801b262:	469a      	mov	sl, r3
 801b264:	4606      	mov	r6, r0
 801b266:	b930      	cbnz	r0, 801b276 <MoblePalCryptoEncryptApp+0x26>
 801b268:	4b5d      	ldr	r3, [pc, #372]	@ (801b3e0 <MoblePalCryptoEncryptApp+0x190>)
 801b26a:	4a5e      	ldr	r2, [pc, #376]	@ (801b3e4 <MoblePalCryptoEncryptApp+0x194>)
 801b26c:	f240 719b 	movw	r1, #1947	@ 0x79b
 801b270:	485d      	ldr	r0, [pc, #372]	@ (801b3e8 <MoblePalCryptoEncryptApp+0x198>)
 801b272:	f00d f8b3 	bl	80283dc <__assert_func>
 801b276:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b278:	b923      	cbnz	r3, 801b284 <MoblePalCryptoEncryptApp+0x34>
 801b27a:	4b5c      	ldr	r3, [pc, #368]	@ (801b3ec <MoblePalCryptoEncryptApp+0x19c>)
 801b27c:	4a59      	ldr	r2, [pc, #356]	@ (801b3e4 <MoblePalCryptoEncryptApp+0x194>)
 801b27e:	f240 719c 	movw	r1, #1948	@ 0x79c
 801b282:	e7f5      	b.n	801b270 <MoblePalCryptoEncryptApp+0x20>
 801b284:	4f5a      	ldr	r7, [pc, #360]	@ (801b3f0 <MoblePalCryptoEncryptApp+0x1a0>)
 801b286:	f8b7 394c 	ldrh.w	r3, [r7, #2380]	@ 0x94c
 801b28a:	4543      	cmp	r3, r8
 801b28c:	d204      	bcs.n	801b298 <MoblePalCryptoEncryptApp+0x48>
 801b28e:	4b59      	ldr	r3, [pc, #356]	@ (801b3f4 <MoblePalCryptoEncryptApp+0x1a4>)
 801b290:	4a54      	ldr	r2, [pc, #336]	@ (801b3e4 <MoblePalCryptoEncryptApp+0x194>)
 801b292:	f240 719d 	movw	r1, #1949	@ 0x79d
 801b296:	e7eb      	b.n	801b270 <MoblePalCryptoEncryptApp+0x20>
 801b298:	8b4a      	ldrh	r2, [r1, #26]
 801b29a:	f241 0101 	movw	r1, #4097	@ 0x1001
 801b29e:	f04f 0b00 	mov.w	fp, #0
 801b2a2:	420a      	tst	r2, r1
 801b2a4:	e9cd bb06 	strd	fp, fp, [sp, #24]
 801b2a8:	f8cd b020 	str.w	fp, [sp, #32]
 801b2ac:	f88d b024 	strb.w	fp, [sp, #36]	@ 0x24
 801b2b0:	d176      	bne.n	801b3a0 <MoblePalCryptoEncryptApp+0x150>
 801b2b2:	f895 1020 	ldrb.w	r1, [r5, #32]
 801b2b6:	4620      	mov	r0, r4
 801b2b8:	f7fd fd84 	bl	8018dc4 <MoblePalCryptoGetApplicationSecurityKeys>
 801b2bc:	4601      	mov	r1, r0
 801b2be:	b920      	cbnz	r0, 801b2ca <MoblePalCryptoEncryptApp+0x7a>
 801b2c0:	4b4d      	ldr	r3, [pc, #308]	@ (801b3f8 <MoblePalCryptoEncryptApp+0x1a8>)
 801b2c2:	4a48      	ldr	r2, [pc, #288]	@ (801b3e4 <MoblePalCryptoEncryptApp+0x194>)
 801b2c4:	f44f 61f6 	mov.w	r1, #1968	@ 0x7b0
 801b2c8:	e7d2      	b.n	801b270 <MoblePalCryptoEncryptApp+0x20>
 801b2ca:	2c00      	cmp	r4, #0
 801b2cc:	d05e      	beq.n	801b38c <MoblePalCryptoEncryptApp+0x13c>
 801b2ce:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d062      	beq.n	801b39c <MoblePalCryptoEncryptApp+0x14c>
 801b2d6:	f100 0210 	add.w	r2, r0, #16
 801b2da:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 801b2de:	f100 0320 	add.w	r3, r0, #32
 801b2e2:	6810      	ldr	r0, [r2, #0]
 801b2e4:	6851      	ldr	r1, [r2, #4]
 801b2e6:	4664      	mov	r4, ip
 801b2e8:	c403      	stmia	r4!, {r0, r1}
 801b2ea:	3208      	adds	r2, #8
 801b2ec:	429a      	cmp	r2, r3
 801b2ee:	46a4      	mov	ip, r4
 801b2f0:	d1f7      	bne.n	801b2e2 <MoblePalCryptoEncryptApp+0x92>
 801b2f2:	2400      	movs	r4, #0
 801b2f4:	2301      	movs	r3, #1
 801b2f6:	f88d 3018 	strb.w	r3, [sp, #24]
 801b2fa:	8aeb      	ldrh	r3, [r5, #22]
 801b2fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801b300:	f5a3 4200 	sub.w	r2, r3, #32768	@ 0x8000
 801b304:	4253      	negs	r3, r2
 801b306:	4153      	adcs	r3, r2
 801b308:	011b      	lsls	r3, r3, #4
 801b30a:	2c00      	cmp	r4, #0
 801b30c:	d166      	bne.n	801b3dc <MoblePalCryptoEncryptApp+0x18c>
 801b30e:	f897 265c 	ldrb.w	r2, [r7, #1628]	@ 0x65c
 801b312:	f8d7 4658 	ldr.w	r4, [r7, #1624]	@ 0x658
 801b316:	2a01      	cmp	r2, #1
 801b318:	d102      	bne.n	801b320 <MoblePalCryptoEncryptApp+0xd0>
 801b31a:	2c00      	cmp	r4, #0
 801b31c:	d05e      	beq.n	801b3dc <MoblePalCryptoEncryptApp+0x18c>
 801b31e:	3c01      	subs	r4, #1
 801b320:	2203      	movs	r2, #3
 801b322:	f02a 417f 	bic.w	r1, sl, #4278190080	@ 0xff000000
 801b326:	f10d 001a 	add.w	r0, sp, #26
 801b32a:	f7ff fc5c 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801b32e:	8aa9      	ldrh	r1, [r5, #20]
 801b330:	2202      	movs	r2, #2
 801b332:	f10d 001d 	add.w	r0, sp, #29
 801b336:	f7ff fc56 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801b33a:	8ae9      	ldrh	r1, [r5, #22]
 801b33c:	2202      	movs	r2, #2
 801b33e:	f10d 001f 	add.w	r0, sp, #31
 801b342:	f7ff fc50 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801b346:	2204      	movs	r2, #4
 801b348:	4621      	mov	r1, r4
 801b34a:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 801b34e:	f7ff fc4a 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801b352:	9305      	str	r3, [sp, #20]
 801b354:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b356:	e9cd 8303 	strd	r8, r3, [sp, #12]
 801b35a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b35c:	9302      	str	r3, [sp, #8]
 801b35e:	230d      	movs	r3, #13
 801b360:	f1b9 0f00 	cmp.w	r9, #0
 801b364:	9301      	str	r3, [sp, #4]
 801b366:	ab06      	add	r3, sp, #24
 801b368:	9300      	str	r3, [sp, #0]
 801b36a:	bf14      	ite	ne
 801b36c:	2208      	movne	r2, #8
 801b36e:	2204      	moveq	r2, #4
 801b370:	ab0a      	add	r3, sp, #40	@ 0x28
 801b372:	eb06 0108 	add.w	r1, r6, r8
 801b376:	4630      	mov	r0, r6
 801b378:	f7fd ffd6 	bl	8019328 <MoblePalCryptoAesCcmEncrypt>
 801b37c:	2801      	cmp	r0, #1
 801b37e:	bf94      	ite	ls
 801b380:	2000      	movls	r0, #0
 801b382:	2001      	movhi	r0, #1
 801b384:	0040      	lsls	r0, r0, #1
 801b386:	b00f      	add	sp, #60	@ 0x3c
 801b388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b38c:	f890 3020 	ldrb.w	r3, [r0, #32]
 801b390:	b123      	cbz	r3, 801b39c <MoblePalCryptoEncryptApp+0x14c>
 801b392:	2210      	movs	r2, #16
 801b394:	a80a      	add	r0, sp, #40	@ 0x28
 801b396:	f00d feef 	bl	8029178 <memmove>
 801b39a:	e7ab      	b.n	801b2f4 <MoblePalCryptoEncryptApp+0xa4>
 801b39c:	2402      	movs	r4, #2
 801b39e:	e7a9      	b.n	801b2f4 <MoblePalCryptoEncryptApp+0xa4>
 801b3a0:	04d3      	lsls	r3, r2, #19
 801b3a2:	f3c2 3400 	ubfx	r4, r2, #12, #1
 801b3a6:	d50b      	bpl.n	801b3c0 <MoblePalCryptoEncryptApp+0x170>
 801b3a8:	6829      	ldr	r1, [r5, #0]
 801b3aa:	b1a9      	cbz	r1, 801b3d8 <MoblePalCryptoEncryptApp+0x188>
 801b3ac:	2210      	movs	r2, #16
 801b3ae:	a80a      	add	r0, sp, #40	@ 0x28
 801b3b0:	f00d fee2 	bl	8029178 <memmove>
 801b3b4:	465c      	mov	r4, fp
 801b3b6:	2302      	movs	r3, #2
 801b3b8:	f88d 3018 	strb.w	r3, [sp, #24]
 801b3bc:	2300      	movs	r3, #0
 801b3be:	e7a4      	b.n	801b30a <MoblePalCryptoEncryptApp+0xba>
 801b3c0:	f897 361e 	ldrb.w	r3, [r7, #1566]	@ 0x61e
 801b3c4:	2b01      	cmp	r3, #1
 801b3c6:	d107      	bne.n	801b3d8 <MoblePalCryptoEncryptApp+0x188>
 801b3c8:	f507 63c4 	add.w	r3, r7, #1568	@ 0x620
 801b3cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b3ce:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 801b3d2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 801b3d6:	e7ee      	b.n	801b3b6 <MoblePalCryptoEncryptApp+0x166>
 801b3d8:	2402      	movs	r4, #2
 801b3da:	e7ec      	b.n	801b3b6 <MoblePalCryptoEncryptApp+0x166>
 801b3dc:	2002      	movs	r0, #2
 801b3de:	e7d2      	b.n	801b386 <MoblePalCryptoEncryptApp+0x136>
 801b3e0:	0803100e 	.word	0x0803100e
 801b3e4:	0802f3d3 	.word	0x0802f3d3
 801b3e8:	08030fa3 	.word	0x08030fa3
 801b3ec:	08031090 	.word	0x08031090
 801b3f0:	2000140c 	.word	0x2000140c
 801b3f4:	08031098 	.word	0x08031098
 801b3f8:	080310c7 	.word	0x080310c7

0801b3fc <MoblePalCryptoDecryptApp>:
 801b3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b400:	b097      	sub	sp, #92	@ 0x5c
 801b402:	e9dd 5726 	ldrd	r5, r7, [sp, #152]	@ 0x98
 801b406:	9309      	str	r3, [sp, #36]	@ 0x24
 801b408:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801b40c:	9306      	str	r3, [sp, #24]
 801b40e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b410:	f8bd b080 	ldrh.w	fp, [sp, #128]	@ 0x80
 801b414:	f8bd 8084 	ldrh.w	r8, [sp, #132]	@ 0x84
 801b418:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 801b41a:	b933      	cbnz	r3, 801b42a <MoblePalCryptoDecryptApp+0x2e>
 801b41c:	4ba1      	ldr	r3, [pc, #644]	@ (801b6a4 <MoblePalCryptoDecryptApp+0x2a8>)
 801b41e:	4aa2      	ldr	r2, [pc, #648]	@ (801b6a8 <MoblePalCryptoDecryptApp+0x2ac>)
 801b420:	f640 0131 	movw	r1, #2097	@ 0x831
 801b424:	48a1      	ldr	r0, [pc, #644]	@ (801b6ac <MoblePalCryptoDecryptApp+0x2b0>)
 801b426:	f00c ffd9 	bl	80283dc <__assert_func>
 801b42a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b42c:	b923      	cbnz	r3, 801b438 <MoblePalCryptoDecryptApp+0x3c>
 801b42e:	4ba0      	ldr	r3, [pc, #640]	@ (801b6b0 <MoblePalCryptoDecryptApp+0x2b4>)
 801b430:	4a9d      	ldr	r2, [pc, #628]	@ (801b6a8 <MoblePalCryptoDecryptApp+0x2ac>)
 801b432:	f640 0132 	movw	r1, #2098	@ 0x832
 801b436:	e7f5      	b.n	801b424 <MoblePalCryptoDecryptApp+0x28>
 801b438:	1f73      	subs	r3, r6, #5
 801b43a:	2b9b      	cmp	r3, #155	@ 0x9b
 801b43c:	d904      	bls.n	801b448 <MoblePalCryptoDecryptApp+0x4c>
 801b43e:	4b9d      	ldr	r3, [pc, #628]	@ (801b6b4 <MoblePalCryptoDecryptApp+0x2b8>)
 801b440:	4a99      	ldr	r2, [pc, #612]	@ (801b6a8 <MoblePalCryptoDecryptApp+0x2ac>)
 801b442:	f640 0133 	movw	r1, #2099	@ 0x833
 801b446:	e7ed      	b.n	801b424 <MoblePalCryptoDecryptApp+0x28>
 801b448:	2a00      	cmp	r2, #0
 801b44a:	f04f 0300 	mov.w	r3, #0
 801b44e:	bf14      	ite	ne
 801b450:	f04f 0908 	movne.w	r9, #8
 801b454:	f04f 0904 	moveq.w	r9, #4
 801b458:	2801      	cmp	r0, #1
 801b45a:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 801b45e:	9310      	str	r3, [sp, #64]	@ 0x40
 801b460:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
 801b464:	f040 80b9 	bne.w	801b5da <MoblePalCryptoDecryptApp+0x1de>
 801b468:	b2c9      	uxtb	r1, r1
 801b46a:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 801b46e:	9207      	str	r2, [sp, #28]
 801b470:	f7fe fbec 	bl	8019c4c <BnrgmPalCryptoMatchAid>
 801b474:	9a07      	ldr	r2, [sp, #28]
 801b476:	4604      	mov	r4, r0
 801b478:	b120      	cbz	r0, 801b484 <MoblePalCryptoDecryptApp+0x88>
 801b47a:	2402      	movs	r4, #2
 801b47c:	4620      	mov	r0, r4
 801b47e:	b017      	add	sp, #92	@ 0x5c
 801b480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b484:	9b06      	ldr	r3, [sp, #24]
 801b486:	2b00      	cmp	r3, #0
 801b488:	f000 8086 	beq.w	801b598 <MoblePalCryptoDecryptApp+0x19c>
 801b48c:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
 801b490:	9308      	str	r3, [sp, #32]
 801b492:	01d2      	lsls	r2, r2, #7
 801b494:	b2d3      	uxtb	r3, r2
 801b496:	9307      	str	r3, [sp, #28]
 801b498:	f408 4340 	and.w	r3, r8, #49152	@ 0xc000
 801b49c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801b4a0:	bf0c      	ite	eq
 801b4a2:	2310      	moveq	r3, #16
 801b4a4:	2300      	movne	r3, #0
 801b4a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b4a8:	bf0c      	ite	eq
 801b4aa:	463b      	moveq	r3, r7
 801b4ac:	2300      	movne	r3, #0
 801b4ae:	930c      	str	r3, [sp, #48]	@ 0x30
 801b4b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b4b2:	eba6 0609 	sub.w	r6, r6, r9
 801b4b6:	4433      	add	r3, r6
 801b4b8:	f105 0739 	add.w	r7, r5, #57	@ 0x39
 801b4bc:	f04f 0a00 	mov.w	sl, #0
 801b4c0:	930d      	str	r3, [sp, #52]	@ 0x34
 801b4c2:	9a08      	ldr	r2, [sp, #32]
 801b4c4:	fa5f f38a 	uxtb.w	r3, sl
 801b4c8:	429a      	cmp	r2, r3
 801b4ca:	d9d6      	bls.n	801b47a <MoblePalCryptoDecryptApp+0x7e>
 801b4cc:	9b06      	ldr	r3, [sp, #24]
 801b4ce:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
 801b4d2:	222c      	movs	r2, #44	@ 0x2c
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d062      	beq.n	801b59e <MoblePalCryptoDecryptApp+0x1a2>
 801b4d8:	793b      	ldrb	r3, [r7, #4]
 801b4da:	4977      	ldr	r1, [pc, #476]	@ (801b6b8 <MoblePalCryptoDecryptApp+0x2bc>)
 801b4dc:	fb02 1303 	mla	r3, r2, r3, r1
 801b4e0:	f893 25b9 	ldrb.w	r2, [r3, #1465]	@ 0x5b9
 801b4e4:	b162      	cbz	r2, 801b500 <MoblePalCryptoDecryptApp+0x104>
 801b4e6:	2201      	movs	r2, #1
 801b4e8:	f88d 2038 	strb.w	r2, [sp, #56]	@ 0x38
 801b4ec:	9a07      	ldr	r2, [sp, #28]
 801b4ee:	f88d 2039 	strb.w	r2, [sp, #57]	@ 0x39
 801b4f2:	f503 63b5 	add.w	r3, r3, #1448	@ 0x5a8
 801b4f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b4f8:	f10d 0c58 	add.w	ip, sp, #88	@ 0x58
 801b4fc:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 801b500:	4b6d      	ldr	r3, [pc, #436]	@ (801b6b8 <MoblePalCryptoDecryptApp+0x2bc>)
 801b502:	7b29      	ldrb	r1, [r5, #12]
 801b504:	f8d3 3658 	ldr.w	r3, [r3, #1624]	@ 0x658
 801b508:	f003 0201 	and.w	r2, r3, #1
 801b50c:	4291      	cmp	r1, r2
 801b50e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b510:	f04f 0203 	mov.w	r2, #3
 801b514:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 801b518:	f10d 003a 	add.w	r0, sp, #58	@ 0x3a
 801b51c:	bf18      	it	ne
 801b51e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801b522:	f7ff fb60 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801b526:	2202      	movs	r2, #2
 801b528:	4659      	mov	r1, fp
 801b52a:	f10d 003d 	add.w	r0, sp, #61	@ 0x3d
 801b52e:	f7ff fb5a 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801b532:	2202      	movs	r2, #2
 801b534:	4641      	mov	r1, r8
 801b536:	f10d 003f 	add.w	r0, sp, #63	@ 0x3f
 801b53a:	f7ff fb54 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801b53e:	4619      	mov	r1, r3
 801b540:	2204      	movs	r2, #4
 801b542:	f10d 0041 	add.w	r0, sp, #65	@ 0x41
 801b546:	f7ff fb4e 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801b54a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b54c:	9305      	str	r3, [sp, #20]
 801b54e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b550:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801b552:	e9cd 6303 	strd	r6, r3, [sp, #12]
 801b556:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b558:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b55c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b55e:	9300      	str	r3, [sp, #0]
 801b560:	aa0e      	add	r2, sp, #56	@ 0x38
 801b562:	230d      	movs	r3, #13
 801b564:	a912      	add	r1, sp, #72	@ 0x48
 801b566:	f7fd fef5 	bl	8019354 <MoblePalCryptoAesCcmDecrypt>
 801b56a:	2801      	cmp	r0, #1
 801b56c:	f10a 0a01 	add.w	sl, sl, #1
 801b570:	f107 0701 	add.w	r7, r7, #1
 801b574:	d8a5      	bhi.n	801b4c2 <MoblePalCryptoDecryptApp+0xc6>
 801b576:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b578:	9906      	ldr	r1, [sp, #24]
 801b57a:	4b4f      	ldr	r3, [pc, #316]	@ (801b6b8 <MoblePalCryptoDecryptApp+0x2bc>)
 801b57c:	442a      	add	r2, r5
 801b57e:	b1f9      	cbz	r1, 801b5c0 <MoblePalCryptoDecryptApp+0x1c4>
 801b580:	f892 203d 	ldrb.w	r2, [r2, #61]	@ 0x3d
 801b584:	f885 2043 	strb.w	r2, [r5, #67]	@ 0x43
 801b588:	212c      	movs	r1, #44	@ 0x2c
 801b58a:	fb01 3302 	mla	r3, r1, r2, r3
 801b58e:	f8b3 35ba 	ldrh.w	r3, [r3, #1466]	@ 0x5ba
 801b592:	f8a5 3046 	strh.w	r3, [r5, #70]	@ 0x46
 801b596:	e771      	b.n	801b47c <MoblePalCryptoDecryptApp+0x80>
 801b598:	f895 3038 	ldrb.w	r3, [r5, #56]	@ 0x38
 801b59c:	e778      	b.n	801b490 <MoblePalCryptoDecryptApp+0x94>
 801b59e:	783b      	ldrb	r3, [r7, #0]
 801b5a0:	4945      	ldr	r1, [pc, #276]	@ (801b6b8 <MoblePalCryptoDecryptApp+0x2bc>)
 801b5a2:	fb02 1303 	mla	r3, r2, r3, r1
 801b5a6:	f893 25b8 	ldrb.w	r2, [r3, #1464]	@ 0x5b8
 801b5aa:	2a00      	cmp	r2, #0
 801b5ac:	d0a8      	beq.n	801b500 <MoblePalCryptoDecryptApp+0x104>
 801b5ae:	2201      	movs	r2, #1
 801b5b0:	f88d 2038 	strb.w	r2, [sp, #56]	@ 0x38
 801b5b4:	9a07      	ldr	r2, [sp, #28]
 801b5b6:	f88d 2039 	strb.w	r2, [sp, #57]	@ 0x39
 801b5ba:	f503 63b3 	add.w	r3, r3, #1432	@ 0x598
 801b5be:	e79a      	b.n	801b4f6 <MoblePalCryptoDecryptApp+0xfa>
 801b5c0:	f892 2039 	ldrb.w	r2, [r2, #57]	@ 0x39
 801b5c4:	f885 2043 	strb.w	r2, [r5, #67]	@ 0x43
 801b5c8:	212c      	movs	r1, #44	@ 0x2c
 801b5ca:	fb01 3302 	mla	r3, r1, r2, r3
 801b5ce:	f8b3 35ba 	ldrh.w	r3, [r3, #1466]	@ 0x5ba
 801b5d2:	f8a5 3046 	strh.w	r3, [r5, #70]	@ 0x46
 801b5d6:	2400      	movs	r4, #0
 801b5d8:	e750      	b.n	801b47c <MoblePalCryptoDecryptApp+0x80>
 801b5da:	4b37      	ldr	r3, [pc, #220]	@ (801b6b8 <MoblePalCryptoDecryptApp+0x2bc>)
 801b5dc:	f893 161e 	ldrb.w	r1, [r3, #1566]	@ 0x61e
 801b5e0:	b129      	cbz	r1, 801b5ee <MoblePalCryptoDecryptApp+0x1f2>
 801b5e2:	2102      	movs	r1, #2
 801b5e4:	01d2      	lsls	r2, r2, #7
 801b5e6:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
 801b5ea:	f88d 2039 	strb.w	r2, [sp, #57]	@ 0x39
 801b5ee:	f8d3 3658 	ldr.w	r3, [r3, #1624]	@ 0x658
 801b5f2:	7b29      	ldrb	r1, [r5, #12]
 801b5f4:	f003 0201 	and.w	r2, r3, #1
 801b5f8:	4291      	cmp	r1, r2
 801b5fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b5fc:	f04f 0203 	mov.w	r2, #3
 801b600:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 801b604:	f10d 003a 	add.w	r0, sp, #58	@ 0x3a
 801b608:	bf18      	it	ne
 801b60a:	f103 33ff 	addne.w	r3, r3, #4294967295
 801b60e:	f7ff faea 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801b612:	2202      	movs	r2, #2
 801b614:	4659      	mov	r1, fp
 801b616:	f10d 003d 	add.w	r0, sp, #61	@ 0x3d
 801b61a:	f7ff fae4 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801b61e:	4641      	mov	r1, r8
 801b620:	2202      	movs	r2, #2
 801b622:	f10d 003f 	add.w	r0, sp, #63	@ 0x3f
 801b626:	f7ff fade 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801b62a:	4619      	mov	r1, r3
 801b62c:	2204      	movs	r2, #4
 801b62e:	4b23      	ldr	r3, [pc, #140]	@ (801b6bc <MoblePalCryptoDecryptApp+0x2c0>)
 801b630:	f10d 0041 	add.w	r0, sp, #65	@ 0x41
 801b634:	f7ff fad7 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801b638:	f408 4840 	and.w	r8, r8, #49152	@ 0xc000
 801b63c:	9312      	str	r3, [sp, #72]	@ 0x48
 801b63e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b640:	491e      	ldr	r1, [pc, #120]	@ (801b6bc <MoblePalCryptoDecryptApp+0x2c0>)
 801b642:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801b644:	f5b8 4f00 	cmp.w	r8, #32768	@ 0x8000
 801b648:	eba6 0609 	sub.w	r6, r6, r9
 801b64c:	bf18      	it	ne
 801b64e:	2700      	movne	r7, #0
 801b650:	eb03 0406 	add.w	r4, r3, r6
 801b654:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b656:	9603      	str	r6, [sp, #12]
 801b658:	bf0c      	ite	eq
 801b65a:	2510      	moveq	r5, #16
 801b65c:	463d      	movne	r5, r7
 801b65e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b662:	e9cd 7504 	strd	r7, r5, [sp, #16]
 801b666:	9400      	str	r4, [sp, #0]
 801b668:	230d      	movs	r3, #13
 801b66a:	aa0e      	add	r2, sp, #56	@ 0x38
 801b66c:	f7fd fe72 	bl	8019354 <MoblePalCryptoAesCcmDecrypt>
 801b670:	2801      	cmp	r0, #1
 801b672:	d9b0      	bls.n	801b5d6 <MoblePalCryptoDecryptApp+0x1da>
 801b674:	a912      	add	r1, sp, #72	@ 0x48
 801b676:	4658      	mov	r0, fp
 801b678:	f7f2 f9bf 	bl	800d9fa <ApplicationGetConfigServerDeviceKey>
 801b67c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801b67e:	9400      	str	r4, [sp, #0]
 801b680:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b684:	e9cd 7504 	strd	r7, r5, [sp, #16]
 801b688:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b68a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801b68c:	9603      	str	r6, [sp, #12]
 801b68e:	230d      	movs	r3, #13
 801b690:	aa0e      	add	r2, sp, #56	@ 0x38
 801b692:	f7fd fe5f 	bl	8019354 <MoblePalCryptoAesCcmDecrypt>
 801b696:	2801      	cmp	r0, #1
 801b698:	bf94      	ite	ls
 801b69a:	2000      	movls	r0, #0
 801b69c:	2001      	movhi	r0, #1
 801b69e:	0044      	lsls	r4, r0, #1
 801b6a0:	e6ec      	b.n	801b47c <MoblePalCryptoDecryptApp+0x80>
 801b6a2:	bf00      	nop
 801b6a4:	080310cf 	.word	0x080310cf
 801b6a8:	0802f3ec 	.word	0x0802f3ec
 801b6ac:	08030fa3 	.word	0x08030fa3
 801b6b0:	080310e0 	.word	0x080310e0
 801b6b4:	080310ee 	.word	0x080310ee
 801b6b8:	2000140c 	.word	0x2000140c
 801b6bc:	20001a2c 	.word	0x20001a2c

0801b6c0 <MobleOutputStreamPutLittleEndian>:
 801b6c0:	4603      	mov	r3, r0
 801b6c2:	4410      	add	r0, r2
 801b6c4:	4283      	cmp	r3, r0
 801b6c6:	d101      	bne.n	801b6cc <MobleOutputStreamPutLittleEndian+0xc>
 801b6c8:	4610      	mov	r0, r2
 801b6ca:	4770      	bx	lr
 801b6cc:	f803 1b01 	strb.w	r1, [r3], #1
 801b6d0:	0a09      	lsrs	r1, r1, #8
 801b6d2:	e7f7      	b.n	801b6c4 <MobleOutputStreamPutLittleEndian+0x4>

0801b6d4 <MobleApplicationProcessPacket>:
 801b6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b6d8:	9f08      	ldr	r7, [sp, #32]
 801b6da:	460c      	mov	r4, r1
 801b6dc:	4698      	mov	r8, r3
 801b6de:	4691      	mov	r9, r2
 801b6e0:	b932      	cbnz	r2, 801b6f0 <MobleApplicationProcessPacket+0x1c>
 801b6e2:	4b26      	ldr	r3, [pc, #152]	@ (801b77c <MobleApplicationProcessPacket+0xa8>)
 801b6e4:	4a26      	ldr	r2, [pc, #152]	@ (801b780 <MobleApplicationProcessPacket+0xac>)
 801b6e6:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 801b6ea:	4826      	ldr	r0, [pc, #152]	@ (801b784 <MobleApplicationProcessPacket+0xb0>)
 801b6ec:	f00c fe76 	bl	80283dc <__assert_func>
 801b6f0:	b923      	cbnz	r3, 801b6fc <MobleApplicationProcessPacket+0x28>
 801b6f2:	4b25      	ldr	r3, [pc, #148]	@ (801b788 <MobleApplicationProcessPacket+0xb4>)
 801b6f4:	4a22      	ldr	r2, [pc, #136]	@ (801b780 <MobleApplicationProcessPacket+0xac>)
 801b6f6:	f240 11c7 	movw	r1, #455	@ 0x1c7
 801b6fa:	e7f6      	b.n	801b6ea <MobleApplicationProcessPacket+0x16>
 801b6fc:	b921      	cbnz	r1, 801b708 <MobleApplicationProcessPacket+0x34>
 801b6fe:	4b23      	ldr	r3, [pc, #140]	@ (801b78c <MobleApplicationProcessPacket+0xb8>)
 801b700:	4a1f      	ldr	r2, [pc, #124]	@ (801b780 <MobleApplicationProcessPacket+0xac>)
 801b702:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 801b706:	e7f0      	b.n	801b6ea <MobleApplicationProcessPacket+0x16>
 801b708:	1e7b      	subs	r3, r7, #1
 801b70a:	2b9b      	cmp	r3, #155	@ 0x9b
 801b70c:	d834      	bhi.n	801b778 <MobleApplicationProcessPacket+0xa4>
 801b70e:	4d20      	ldr	r5, [pc, #128]	@ (801b790 <MobleApplicationProcessPacket+0xbc>)
 801b710:	f8d5 6954 	ldr.w	r6, [r5, #2388]	@ 0x954
 801b714:	b116      	cbz	r6, 801b71c <MobleApplicationProcessPacket+0x48>
 801b716:	2002      	movs	r0, #2
 801b718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b71c:	f107 0020 	add.w	r0, r7, #32
 801b720:	f7ff f8a6 	bl	801a870 <MobleMemAlloc>
 801b724:	f8c5 0954 	str.w	r0, [r5, #2388]	@ 0x954
 801b728:	2800      	cmp	r0, #0
 801b72a:	d0f4      	beq.n	801b716 <MobleApplicationProcessPacket+0x42>
 801b72c:	220c      	movs	r2, #12
 801b72e:	18a1      	adds	r1, r4, r2
 801b730:	f00d fd22 	bl	8029178 <memmove>
 801b734:	f8d5 5954 	ldr.w	r5, [r5, #2388]	@ 0x954
 801b738:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801b73c:	732b      	strb	r3, [r5, #12]
 801b73e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 801b742:	81eb      	strh	r3, [r5, #14]
 801b744:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 801b748:	742b      	strb	r3, [r5, #16]
 801b74a:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 801b74e:	826b      	strh	r3, [r5, #18]
 801b750:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801b754:	752b      	strb	r3, [r5, #20]
 801b756:	f899 3001 	ldrb.w	r3, [r9, #1]
 801b75a:	3b00      	subs	r3, #0
 801b75c:	bf18      	it	ne
 801b75e:	2301      	movne	r3, #1
 801b760:	756b      	strb	r3, [r5, #21]
 801b762:	463a      	mov	r2, r7
 801b764:	4641      	mov	r1, r8
 801b766:	f105 0020 	add.w	r0, r5, #32
 801b76a:	f00d fd05 	bl	8029178 <memmove>
 801b76e:	61ef      	str	r7, [r5, #28]
 801b770:	7e23      	ldrb	r3, [r4, #24]
 801b772:	75ab      	strb	r3, [r5, #22]
 801b774:	4630      	mov	r0, r6
 801b776:	e7cf      	b.n	801b718 <MobleApplicationProcessPacket+0x44>
 801b778:	2003      	movs	r0, #3
 801b77a:	e7cd      	b.n	801b718 <MobleApplicationProcessPacket+0x44>
 801b77c:	0803115f 	.word	0x0803115f
 801b780:	0802f405 	.word	0x0802f405
 801b784:	08031170 	.word	0x08031170
 801b788:	080311b5 	.word	0x080311b5
 801b78c:	08031015 	.word	0x08031015
 801b790:	2000140c 	.word	0x2000140c

0801b794 <MobleApplicationPassPacketsToSIGModels>:
 801b794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b798:	6803      	ldr	r3, [r0, #0]
 801b79a:	7d4c      	ldrb	r4, [r1, #21]
 801b79c:	7f1b      	ldrb	r3, [r3, #28]
 801b79e:	b089      	sub	sp, #36	@ 0x24
 801b7a0:	4605      	mov	r5, r0
 801b7a2:	9302      	str	r3, [sp, #8]
 801b7a4:	89cb      	ldrh	r3, [r1, #14]
 801b7a6:	9303      	str	r3, [sp, #12]
 801b7a8:	7b0b      	ldrb	r3, [r1, #12]
 801b7aa:	9301      	str	r3, [sp, #4]
 801b7ac:	468b      	mov	fp, r1
 801b7ae:	2c00      	cmp	r4, #0
 801b7b0:	f000 80ca 	beq.w	801b948 <MobleApplicationPassPacketsToSIGModels+0x1b4>
 801b7b4:	2300      	movs	r3, #0
 801b7b6:	9300      	str	r3, [sp, #0]
 801b7b8:	9b01      	ldr	r3, [sp, #4]
 801b7ba:	4f7a      	ldr	r7, [pc, #488]	@ (801b9a4 <MobleApplicationPassPacketsToSIGModels+0x210>)
 801b7bc:	33a6      	adds	r3, #166	@ 0xa6
 801b7be:	9304      	str	r3, [sp, #16]
 801b7c0:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 801b7c4:	8838      	ldrh	r0, [r7, #0]
 801b7c6:	f89d 3000 	ldrb.w	r3, [sp]
 801b7ca:	4290      	cmp	r0, r2
 801b7cc:	d149      	bne.n	801b862 <MobleApplicationPassPacketsToSIGModels+0xce>
 801b7ce:	463c      	mov	r4, r7
 801b7d0:	f04f 0900 	mov.w	r9, #0
 801b7d4:	9a04      	ldr	r2, [sp, #16]
 801b7d6:	5ca2      	ldrb	r2, [r4, r2]
 801b7d8:	bb2a      	cbnz	r2, 801b826 <MobleApplicationPassPacketsToSIGModels+0x92>
 801b7da:	f109 090e 	add.w	r9, r9, #14
 801b7de:	f1b9 0f9a 	cmp.w	r9, #154	@ 0x9a
 801b7e2:	f104 0438 	add.w	r4, r4, #56	@ 0x38
 801b7e6:	d1f5      	bne.n	801b7d4 <MobleApplicationPassPacketsToSIGModels+0x40>
 801b7e8:	2002      	movs	r0, #2
 801b7ea:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 801b7ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801b7f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801b7f6:	d106      	bne.n	801b806 <MobleApplicationPassPacketsToSIGModels+0x72>
 801b7f8:	9b02      	ldr	r3, [sp, #8]
 801b7fa:	2b01      	cmp	r3, #1
 801b7fc:	d903      	bls.n	801b806 <MobleApplicationPassPacketsToSIGModels+0x72>
 801b7fe:	9a00      	ldr	r2, [sp, #0]
 801b800:	3b01      	subs	r3, #1
 801b802:	4293      	cmp	r3, r2
 801b804:	d101      	bne.n	801b80a <MobleApplicationPassPacketsToSIGModels+0x76>
 801b806:	2802      	cmp	r0, #2
 801b808:	d10a      	bne.n	801b820 <MobleApplicationPassPacketsToSIGModels+0x8c>
 801b80a:	9b00      	ldr	r3, [sp, #0]
 801b80c:	9a02      	ldr	r2, [sp, #8]
 801b80e:	3301      	adds	r3, #1
 801b810:	9300      	str	r3, [sp, #0]
 801b812:	f89d 3000 	ldrb.w	r3, [sp]
 801b816:	429a      	cmp	r2, r3
 801b818:	f507 7739 	add.w	r7, r7, #740	@ 0x2e4
 801b81c:	d8d0      	bhi.n	801b7c0 <MobleApplicationPassPacketsToSIGModels+0x2c>
 801b81e:	2002      	movs	r0, #2
 801b820:	b009      	add	sp, #36	@ 0x24
 801b822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b826:	9901      	ldr	r1, [sp, #4]
 801b828:	f104 02a0 	add.w	r2, r4, #160	@ 0xa0
 801b82c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801b830:	9903      	ldr	r1, [sp, #12]
 801b832:	428a      	cmp	r2, r1
 801b834:	d1d1      	bne.n	801b7da <MobleApplicationPassPacketsToSIGModels+0x46>
 801b836:	f894 209a 	ldrb.w	r2, [r4, #154]	@ 0x9a
 801b83a:	2a01      	cmp	r2, #1
 801b83c:	d1cd      	bne.n	801b7da <MobleApplicationPassPacketsToSIGModels+0x46>
 801b83e:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 801b9b0 <MobleApplicationPassPacketsToSIGModels+0x21c>
 801b842:	f108 0a0c 	add.w	sl, r8, #12
 801b846:	f858 2b04 	ldr.w	r2, [r8], #4
 801b84a:	9305      	str	r3, [sp, #20]
 801b84c:	4616      	mov	r6, r2
 801b84e:	4659      	mov	r1, fp
 801b850:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801b852:	4628      	mov	r0, r5
 801b854:	47b0      	blx	r6
 801b856:	2801      	cmp	r0, #1
 801b858:	d9c7      	bls.n	801b7ea <MobleApplicationPassPacketsToSIGModels+0x56>
 801b85a:	45c2      	cmp	sl, r8
 801b85c:	9b05      	ldr	r3, [sp, #20]
 801b85e:	d1f2      	bne.n	801b846 <MobleApplicationPassPacketsToSIGModels+0xb2>
 801b860:	e7bb      	b.n	801b7da <MobleApplicationPassPacketsToSIGModels+0x46>
 801b862:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 801b866:	f5b2 4f40 	cmp.w	r2, #49152	@ 0xc000
 801b86a:	d1bd      	bne.n	801b7e8 <MobleApplicationPassPacketsToSIGModels+0x54>
 801b86c:	463c      	mov	r4, r7
 801b86e:	f04f 0a00 	mov.w	sl, #0
 801b872:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 801b874:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 801b878:	b938      	cbnz	r0, 801b88a <MobleApplicationPassPacketsToSIGModels+0xf6>
 801b87a:	f10a 0a0e 	add.w	sl, sl, #14
 801b87e:	f1ba 0f9a 	cmp.w	sl, #154	@ 0x9a
 801b882:	f104 0438 	add.w	r4, r4, #56	@ 0x38
 801b886:	d1f4      	bne.n	801b872 <MobleApplicationPassPacketsToSIGModels+0xde>
 801b888:	e7ae      	b.n	801b7e8 <MobleApplicationPassPacketsToSIGModels+0x54>
 801b88a:	f64f 71fb 	movw	r1, #65531	@ 0xfffb
 801b88e:	428a      	cmp	r2, r1
 801b890:	d921      	bls.n	801b8d6 <MobleApplicationPassPacketsToSIGModels+0x142>
 801b892:	9a04      	ldr	r2, [sp, #16]
 801b894:	5ca2      	ldrb	r2, [r4, r2]
 801b896:	2a00      	cmp	r2, #0
 801b898:	d0ef      	beq.n	801b87a <MobleApplicationPassPacketsToSIGModels+0xe6>
 801b89a:	9901      	ldr	r1, [sp, #4]
 801b89c:	f104 02a0 	add.w	r2, r4, #160	@ 0xa0
 801b8a0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801b8a4:	9903      	ldr	r1, [sp, #12]
 801b8a6:	428a      	cmp	r2, r1
 801b8a8:	d1e7      	bne.n	801b87a <MobleApplicationPassPacketsToSIGModels+0xe6>
 801b8aa:	f894 209a 	ldrb.w	r2, [r4, #154]	@ 0x9a
 801b8ae:	2a01      	cmp	r2, #1
 801b8b0:	d1e3      	bne.n	801b87a <MobleApplicationPassPacketsToSIGModels+0xe6>
 801b8b2:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 801b9b0 <MobleApplicationPassPacketsToSIGModels+0x21c>
 801b8b6:	f108 090c 	add.w	r9, r8, #12
 801b8ba:	f858 2b04 	ldr.w	r2, [r8], #4
 801b8be:	9305      	str	r3, [sp, #20]
 801b8c0:	4616      	mov	r6, r2
 801b8c2:	4659      	mov	r1, fp
 801b8c4:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801b8c6:	4628      	mov	r0, r5
 801b8c8:	47b0      	blx	r6
 801b8ca:	2801      	cmp	r0, #1
 801b8cc:	d98d      	bls.n	801b7ea <MobleApplicationPassPacketsToSIGModels+0x56>
 801b8ce:	45c1      	cmp	r9, r8
 801b8d0:	9b05      	ldr	r3, [sp, #20]
 801b8d2:	d1f2      	bne.n	801b8ba <MobleApplicationPassPacketsToSIGModels+0x126>
 801b8d4:	e7d1      	b.n	801b87a <MobleApplicationPassPacketsToSIGModels+0xe6>
 801b8d6:	f104 027e 	add.w	r2, r4, #126	@ 0x7e
 801b8da:	9205      	str	r2, [sp, #20]
 801b8dc:	f104 02a0 	add.w	r2, r4, #160	@ 0xa0
 801b8e0:	f04f 0800 	mov.w	r8, #0
 801b8e4:	9206      	str	r2, [sp, #24]
 801b8e6:	9a05      	ldr	r2, [sp, #20]
 801b8e8:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 801b8ec:	9205      	str	r2, [sp, #20]
 801b8ee:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 801b8f2:	f108 0801 	add.w	r8, r8, #1
 801b8f6:	4290      	cmp	r0, r2
 801b8f8:	fa5f f888 	uxtb.w	r8, r8
 801b8fc:	d003      	beq.n	801b906 <MobleApplicationPassPacketsToSIGModels+0x172>
 801b8fe:	f1b8 0f0a 	cmp.w	r8, #10
 801b902:	d1f0      	bne.n	801b8e6 <MobleApplicationPassPacketsToSIGModels+0x152>
 801b904:	e7b9      	b.n	801b87a <MobleApplicationPassPacketsToSIGModels+0xe6>
 801b906:	9a04      	ldr	r2, [sp, #16]
 801b908:	5ca2      	ldrb	r2, [r4, r2]
 801b90a:	2a00      	cmp	r2, #0
 801b90c:	d0f7      	beq.n	801b8fe <MobleApplicationPassPacketsToSIGModels+0x16a>
 801b90e:	9901      	ldr	r1, [sp, #4]
 801b910:	9a06      	ldr	r2, [sp, #24]
 801b912:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801b916:	9903      	ldr	r1, [sp, #12]
 801b918:	428a      	cmp	r2, r1
 801b91a:	d1f0      	bne.n	801b8fe <MobleApplicationPassPacketsToSIGModels+0x16a>
 801b91c:	f894 209a 	ldrb.w	r2, [r4, #154]	@ 0x9a
 801b920:	2a01      	cmp	r2, #1
 801b922:	d1ec      	bne.n	801b8fe <MobleApplicationPassPacketsToSIGModels+0x16a>
 801b924:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 801b9b0 <MobleApplicationPassPacketsToSIGModels+0x21c>
 801b928:	f859 2b04 	ldr.w	r2, [r9], #4
 801b92c:	9307      	str	r3, [sp, #28]
 801b92e:	4616      	mov	r6, r2
 801b930:	4659      	mov	r1, fp
 801b932:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801b934:	4628      	mov	r0, r5
 801b936:	47b0      	blx	r6
 801b938:	2801      	cmp	r0, #1
 801b93a:	f67f af56 	bls.w	801b7ea <MobleApplicationPassPacketsToSIGModels+0x56>
 801b93e:	4b1a      	ldr	r3, [pc, #104]	@ (801b9a8 <MobleApplicationPassPacketsToSIGModels+0x214>)
 801b940:	4599      	cmp	r9, r3
 801b942:	9b07      	ldr	r3, [sp, #28]
 801b944:	d1f0      	bne.n	801b928 <MobleApplicationPassPacketsToSIGModels+0x194>
 801b946:	e7da      	b.n	801b8fe <MobleApplicationPassPacketsToSIGModels+0x16a>
 801b948:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 801b9b0 <MobleApplicationPassPacketsToSIGModels+0x21c>
 801b94c:	4e17      	ldr	r6, [pc, #92]	@ (801b9ac <MobleApplicationPassPacketsToSIGModels+0x218>)
 801b94e:	f04f 0a38 	mov.w	sl, #56	@ 0x38
 801b952:	f859 8b04 	ldr.w	r8, [r9], #4
 801b956:	b2e3      	uxtb	r3, r4
 801b958:	b944      	cbnz	r4, 801b96c <MobleApplicationPassPacketsToSIGModels+0x1d8>
 801b95a:	f8d6 20b0 	ldr.w	r2, [r6, #176]	@ 0xb0
 801b95e:	4623      	mov	r3, r4
 801b960:	4659      	mov	r1, fp
 801b962:	4628      	mov	r0, r5
 801b964:	47c0      	blx	r8
 801b966:	2801      	cmp	r0, #1
 801b968:	d818      	bhi.n	801b99c <MobleApplicationPassPacketsToSIGModels+0x208>
 801b96a:	e759      	b.n	801b820 <MobleApplicationPassPacketsToSIGModels+0x8c>
 801b96c:	2b01      	cmp	r3, #1
 801b96e:	d103      	bne.n	801b978 <MobleApplicationPassPacketsToSIGModels+0x1e4>
 801b970:	f8d6 20f0 	ldr.w	r2, [r6, #240]	@ 0xf0
 801b974:	2300      	movs	r3, #0
 801b976:	e7f3      	b.n	801b960 <MobleApplicationPassPacketsToSIGModels+0x1cc>
 801b978:	2700      	movs	r7, #0
 801b97a:	b2fa      	uxtb	r2, r7
 801b97c:	fb0a 6202 	mla	r2, sl, r2, r6
 801b980:	2300      	movs	r3, #0
 801b982:	f8d2 2124 	ldr.w	r2, [r2, #292]	@ 0x124
 801b986:	4659      	mov	r1, fp
 801b988:	4628      	mov	r0, r5
 801b98a:	47c0      	blx	r8
 801b98c:	2802      	cmp	r0, #2
 801b98e:	d1ea      	bne.n	801b966 <MobleApplicationPassPacketsToSIGModels+0x1d2>
 801b990:	f896 238c 	ldrb.w	r2, [r6, #908]	@ 0x38c
 801b994:	3701      	adds	r7, #1
 801b996:	b2fb      	uxtb	r3, r7
 801b998:	429a      	cmp	r2, r3
 801b99a:	d8ee      	bhi.n	801b97a <MobleApplicationPassPacketsToSIGModels+0x1e6>
 801b99c:	3401      	adds	r4, #1
 801b99e:	2c03      	cmp	r4, #3
 801b9a0:	d1d7      	bne.n	801b952 <MobleApplicationPassPacketsToSIGModels+0x1be>
 801b9a2:	e73c      	b.n	801b81e <MobleApplicationPassPacketsToSIGModels+0x8a>
 801b9a4:	200003c0 	.word	0x200003c0
 801b9a8:	0802f430 	.word	0x0802f430
 801b9ac:	20000314 	.word	0x20000314
 801b9b0:	0802f424 	.word	0x0802f424

0801b9b4 <MobleApplicationPassPacketsToVENDORModelsNew>:
 801b9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9b8:	6803      	ldr	r3, [r0, #0]
 801b9ba:	f891 900c 	ldrb.w	r9, [r1, #12]
 801b9be:	7f1b      	ldrb	r3, [r3, #28]
 801b9c0:	4f56      	ldr	r7, [pc, #344]	@ (801bb1c <MobleApplicationPassPacketsToVENDORModelsNew+0x168>)
 801b9c2:	b087      	sub	sp, #28
 801b9c4:	4605      	mov	r5, r0
 801b9c6:	9300      	str	r3, [sp, #0]
 801b9c8:	89cb      	ldrh	r3, [r1, #14]
 801b9ca:	9301      	str	r3, [sp, #4]
 801b9cc:	f109 03a6 	add.w	r3, r9, #166	@ 0xa6
 801b9d0:	468a      	mov	sl, r1
 801b9d2:	2600      	movs	r6, #0
 801b9d4:	9302      	str	r3, [sp, #8]
 801b9d6:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 801b9da:	8838      	ldrh	r0, [r7, #0]
 801b9dc:	4290      	cmp	r0, r2
 801b9de:	b2f3      	uxtb	r3, r6
 801b9e0:	d13d      	bne.n	801ba5e <MobleApplicationPassPacketsToVENDORModelsNew+0xaa>
 801b9e2:	463c      	mov	r4, r7
 801b9e4:	f04f 0801 	mov.w	r8, #1
 801b9e8:	9a02      	ldr	r2, [sp, #8]
 801b9ea:	5ca2      	ldrb	r2, [r4, r2]
 801b9ec:	b19a      	cbz	r2, 801ba16 <MobleApplicationPassPacketsToVENDORModelsNew+0x62>
 801b9ee:	f104 02a0 	add.w	r2, r4, #160	@ 0xa0
 801b9f2:	9901      	ldr	r1, [sp, #4]
 801b9f4:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 801b9f8:	428a      	cmp	r2, r1
 801b9fa:	d10c      	bne.n	801ba16 <MobleApplicationPassPacketsToVENDORModelsNew+0x62>
 801b9fc:	f894 2099 	ldrb.w	r2, [r4, #153]	@ 0x99
 801ba00:	2a01      	cmp	r2, #1
 801ba02:	d108      	bne.n	801ba16 <MobleApplicationPassPacketsToVENDORModelsNew+0x62>
 801ba04:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801ba06:	9303      	str	r3, [sp, #12]
 801ba08:	4651      	mov	r1, sl
 801ba0a:	4628      	mov	r0, r5
 801ba0c:	f7ff f853 	bl	801aab6 <MobleModelBluemeshNewPacket_ExtCall>
 801ba10:	2801      	cmp	r0, #1
 801ba12:	9b03      	ldr	r3, [sp, #12]
 801ba14:	d909      	bls.n	801ba2a <MobleApplicationPassPacketsToVENDORModelsNew+0x76>
 801ba16:	f108 0801 	add.w	r8, r8, #1
 801ba1a:	fa5f f888 	uxtb.w	r8, r8
 801ba1e:	f1b8 0f0c 	cmp.w	r8, #12
 801ba22:	f104 0438 	add.w	r4, r4, #56	@ 0x38
 801ba26:	d1df      	bne.n	801b9e8 <MobleApplicationPassPacketsToVENDORModelsNew+0x34>
 801ba28:	2002      	movs	r0, #2
 801ba2a:	f9ba 300a 	ldrsh.w	r3, [sl, #10]
 801ba2e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801ba32:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801ba36:	d105      	bne.n	801ba44 <MobleApplicationPassPacketsToVENDORModelsNew+0x90>
 801ba38:	9b00      	ldr	r3, [sp, #0]
 801ba3a:	2b01      	cmp	r3, #1
 801ba3c:	d902      	bls.n	801ba44 <MobleApplicationPassPacketsToVENDORModelsNew+0x90>
 801ba3e:	3b01      	subs	r3, #1
 801ba40:	42b3      	cmp	r3, r6
 801ba42:	d101      	bne.n	801ba48 <MobleApplicationPassPacketsToVENDORModelsNew+0x94>
 801ba44:	2802      	cmp	r0, #2
 801ba46:	d107      	bne.n	801ba58 <MobleApplicationPassPacketsToVENDORModelsNew+0xa4>
 801ba48:	9a00      	ldr	r2, [sp, #0]
 801ba4a:	3601      	adds	r6, #1
 801ba4c:	b2f3      	uxtb	r3, r6
 801ba4e:	429a      	cmp	r2, r3
 801ba50:	f507 7739 	add.w	r7, r7, #740	@ 0x2e4
 801ba54:	d8bf      	bhi.n	801b9d6 <MobleApplicationPassPacketsToVENDORModelsNew+0x22>
 801ba56:	2002      	movs	r0, #2
 801ba58:	b007      	add	sp, #28
 801ba5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba5e:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 801ba62:	f5b2 4f40 	cmp.w	r2, #49152	@ 0xc000
 801ba66:	d1df      	bne.n	801ba28 <MobleApplicationPassPacketsToVENDORModelsNew+0x74>
 801ba68:	463c      	mov	r4, r7
 801ba6a:	f04f 0b00 	mov.w	fp, #0
 801ba6e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801ba70:	f8ba 000a 	ldrh.w	r0, [sl, #10]
 801ba74:	b93a      	cbnz	r2, 801ba86 <MobleApplicationPassPacketsToVENDORModelsNew+0xd2>
 801ba76:	f10b 0b0e 	add.w	fp, fp, #14
 801ba7a:	f1bb 0f9a 	cmp.w	fp, #154	@ 0x9a
 801ba7e:	f104 0438 	add.w	r4, r4, #56	@ 0x38
 801ba82:	d1f4      	bne.n	801ba6e <MobleApplicationPassPacketsToVENDORModelsNew+0xba>
 801ba84:	e7d0      	b.n	801ba28 <MobleApplicationPassPacketsToVENDORModelsNew+0x74>
 801ba86:	f64f 71fb 	movw	r1, #65531	@ 0xfffb
 801ba8a:	4288      	cmp	r0, r1
 801ba8c:	d917      	bls.n	801babe <MobleApplicationPassPacketsToVENDORModelsNew+0x10a>
 801ba8e:	9902      	ldr	r1, [sp, #8]
 801ba90:	5c60      	ldrb	r0, [r4, r1]
 801ba92:	2800      	cmp	r0, #0
 801ba94:	d0ef      	beq.n	801ba76 <MobleApplicationPassPacketsToVENDORModelsNew+0xc2>
 801ba96:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 801ba9a:	9901      	ldr	r1, [sp, #4]
 801ba9c:	f830 0019 	ldrh.w	r0, [r0, r9, lsl #1]
 801baa0:	4288      	cmp	r0, r1
 801baa2:	d1e8      	bne.n	801ba76 <MobleApplicationPassPacketsToVENDORModelsNew+0xc2>
 801baa4:	f894 0099 	ldrb.w	r0, [r4, #153]	@ 0x99
 801baa8:	2801      	cmp	r0, #1
 801baaa:	d1e4      	bne.n	801ba76 <MobleApplicationPassPacketsToVENDORModelsNew+0xc2>
 801baac:	4651      	mov	r1, sl
 801baae:	4628      	mov	r0, r5
 801bab0:	9303      	str	r3, [sp, #12]
 801bab2:	f7ff f800 	bl	801aab6 <MobleModelBluemeshNewPacket_ExtCall>
 801bab6:	2801      	cmp	r0, #1
 801bab8:	9b03      	ldr	r3, [sp, #12]
 801baba:	d8dc      	bhi.n	801ba76 <MobleApplicationPassPacketsToVENDORModelsNew+0xc2>
 801babc:	e7b5      	b.n	801ba2a <MobleApplicationPassPacketsToVENDORModelsNew+0x76>
 801babe:	f104 027e 	add.w	r2, r4, #126	@ 0x7e
 801bac2:	9203      	str	r2, [sp, #12]
 801bac4:	f104 02a0 	add.w	r2, r4, #160	@ 0xa0
 801bac8:	f04f 0801 	mov.w	r8, #1
 801bacc:	9204      	str	r2, [sp, #16]
 801bace:	9a03      	ldr	r2, [sp, #12]
 801bad0:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 801bad4:	9203      	str	r2, [sp, #12]
 801bad6:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 801bada:	4290      	cmp	r0, r2
 801badc:	d115      	bne.n	801bb0a <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 801bade:	9a02      	ldr	r2, [sp, #8]
 801bae0:	5ca2      	ldrb	r2, [r4, r2]
 801bae2:	b192      	cbz	r2, 801bb0a <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 801bae4:	9a04      	ldr	r2, [sp, #16]
 801bae6:	9901      	ldr	r1, [sp, #4]
 801bae8:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 801baec:	428a      	cmp	r2, r1
 801baee:	d10c      	bne.n	801bb0a <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 801baf0:	f894 2099 	ldrb.w	r2, [r4, #153]	@ 0x99
 801baf4:	2a01      	cmp	r2, #1
 801baf6:	d108      	bne.n	801bb0a <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 801baf8:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 801bafa:	9305      	str	r3, [sp, #20]
 801bafc:	4651      	mov	r1, sl
 801bafe:	4628      	mov	r0, r5
 801bb00:	f7fe ffd9 	bl	801aab6 <MobleModelBluemeshNewPacket_ExtCall>
 801bb04:	2801      	cmp	r0, #1
 801bb06:	9b05      	ldr	r3, [sp, #20]
 801bb08:	d98f      	bls.n	801ba2a <MobleApplicationPassPacketsToVENDORModelsNew+0x76>
 801bb0a:	f108 0801 	add.w	r8, r8, #1
 801bb0e:	fa5f f888 	uxtb.w	r8, r8
 801bb12:	f1b8 0f0b 	cmp.w	r8, #11
 801bb16:	d1da      	bne.n	801bace <MobleApplicationPassPacketsToVENDORModelsNew+0x11a>
 801bb18:	e7ad      	b.n	801ba76 <MobleApplicationPassPacketsToVENDORModelsNew+0xc2>
 801bb1a:	bf00      	nop
 801bb1c:	200003c0 	.word	0x200003c0

0801bb20 <MobleApplicationProcess>:
 801bb20:	b570      	push	{r4, r5, r6, lr}
 801bb22:	4d0d      	ldr	r5, [pc, #52]	@ (801bb58 <MobleApplicationProcess+0x38>)
 801bb24:	f8d5 1954 	ldr.w	r1, [r5, #2388]	@ 0x954
 801bb28:	4606      	mov	r6, r0
 801bb2a:	b199      	cbz	r1, 801bb54 <MobleApplicationProcess+0x34>
 801bb2c:	f7ff fe32 	bl	801b794 <MobleApplicationPassPacketsToSIGModels>
 801bb30:	2801      	cmp	r0, #1
 801bb32:	4604      	mov	r4, r0
 801bb34:	d905      	bls.n	801bb42 <MobleApplicationProcess+0x22>
 801bb36:	f8d5 1954 	ldr.w	r1, [r5, #2388]	@ 0x954
 801bb3a:	4630      	mov	r0, r6
 801bb3c:	f7ff ff3a 	bl	801b9b4 <MobleApplicationPassPacketsToVENDORModelsNew>
 801bb40:	4604      	mov	r4, r0
 801bb42:	f8d5 0954 	ldr.w	r0, [r5, #2388]	@ 0x954
 801bb46:	f7fe ff1d 	bl	801a984 <MobleMemFree>
 801bb4a:	2300      	movs	r3, #0
 801bb4c:	f8c5 3954 	str.w	r3, [r5, #2388]	@ 0x954
 801bb50:	4620      	mov	r0, r4
 801bb52:	bd70      	pop	{r4, r5, r6, pc}
 801bb54:	2401      	movs	r4, #1
 801bb56:	e7fb      	b.n	801bb50 <MobleApplicationProcess+0x30>
 801bb58:	2000140c 	.word	0x2000140c

0801bb5c <MobleApplicationGetSigModelList>:
 801bb5c:	b538      	push	{r3, r4, r5, lr}
 801bb5e:	460c      	mov	r4, r1
 801bb60:	b981      	cbnz	r1, 801bb84 <MobleApplicationGetSigModelList+0x28>
 801bb62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801bb66:	f840 3b04 	str.w	r3, [r0], #4
 801bb6a:	2502      	movs	r5, #2
 801bb6c:	4621      	mov	r1, r4
 801bb6e:	f7f7 faab 	bl	80130c8 <ApplicationGetSigModelList>
 801bb72:	4428      	add	r0, r5
 801bb74:	b240      	sxtb	r0, r0
 801bb76:	1e83      	subs	r3, r0, #2
 801bb78:	2b0a      	cmp	r3, #10
 801bb7a:	d905      	bls.n	801bb88 <MobleApplicationGetSigModelList+0x2c>
 801bb7c:	b95c      	cbnz	r4, 801bb96 <MobleApplicationGetSigModelList+0x3a>
 801bb7e:	f04f 30ff 	mov.w	r0, #4294967295
 801bb82:	e007      	b.n	801bb94 <MobleApplicationGetSigModelList+0x38>
 801bb84:	2500      	movs	r5, #0
 801bb86:	e7f1      	b.n	801bb6c <MobleApplicationGetSigModelList+0x10>
 801bb88:	280a      	cmp	r0, #10
 801bb8a:	dd03      	ble.n	801bb94 <MobleApplicationGetSigModelList+0x38>
 801bb8c:	2c00      	cmp	r4, #0
 801bb8e:	bf18      	it	ne
 801bb90:	f04f 30ff 	movne.w	r0, #4294967295
 801bb94:	bd38      	pop	{r3, r4, r5, pc}
 801bb96:	280b      	cmp	r0, #11
 801bb98:	bfa8      	it	ge
 801bb9a:	f04f 30ff 	movge.w	r0, #4294967295
 801bb9e:	e7f9      	b.n	801bb94 <MobleApplicationGetSigModelList+0x38>

0801bba0 <MobleApplicationGetVendorModelList>:
 801bba0:	b508      	push	{r3, lr}
 801bba2:	f7f7 fac3 	bl	801312c <ApplicationGetVendorModelList>
 801bba6:	b240      	sxtb	r0, r0
 801bba8:	2802      	cmp	r0, #2
 801bbaa:	bfa8      	it	ge
 801bbac:	f04f 30ff 	movge.w	r0, #4294967295
 801bbb0:	bd08      	pop	{r3, pc}

0801bbb2 <MobleApplicationModelSupported>:
 801bbb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bbb4:	f030 0302 	bics.w	r3, r0, #2
 801bbb8:	bf06      	itte	eq
 801bbba:	fab1 f481 	clzeq	r4, r1
 801bbbe:	0964      	lsreq	r4, r4, #5
 801bbc0:	2400      	movne	r4, #0
 801bbc2:	4605      	mov	r5, r0
 801bbc4:	9101      	str	r1, [sp, #4]
 801bbc6:	f7f7 fb19 	bl	80131fc <ApplicationChkVendorModelActive>
 801bbca:	9901      	ldr	r1, [sp, #4]
 801bbcc:	2800      	cmp	r0, #0
 801bbce:	b2a8      	uxth	r0, r5
 801bbd0:	bf18      	it	ne
 801bbd2:	2401      	movne	r4, #1
 801bbd4:	f7f7 fad6 	bl	8013184 <ApplicationChkSigModelActive>
 801bbd8:	2800      	cmp	r0, #0
 801bbda:	bf0c      	ite	eq
 801bbdc:	4620      	moveq	r0, r4
 801bbde:	2001      	movne	r0, #1
 801bbe0:	b003      	add	sp, #12
 801bbe2:	bd30      	pop	{r4, r5, pc}

0801bbe4 <MobleApplicationUpdateSigModelList>:
 801bbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bbe6:	4c1c      	ldr	r4, [pc, #112]	@ (801bc58 <MobleApplicationUpdateSigModelList+0x74>)
 801bbe8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801bbec:	bb03      	cbnz	r3, 801bc30 <MobleApplicationUpdateSigModelList+0x4c>
 801bbee:	f8a4 10ac 	strh.w	r1, [r4, #172]	@ 0xac
 801bbf2:	8801      	ldrh	r1, [r0, #0]
 801bbf4:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0
 801bbf8:	1e95      	subs	r5, r2, #2
 801bbfa:	8841      	ldrh	r1, [r0, #2]
 801bbfc:	f8c4 10f0 	str.w	r1, [r4, #240]	@ 0xf0
 801bc00:	b2ed      	uxtb	r5, r5
 801bc02:	3004      	adds	r0, #4
 801bc04:	4915      	ldr	r1, [pc, #84]	@ (801bc5c <MobleApplicationUpdateSigModelList+0x78>)
 801bc06:	f44f 7639 	mov.w	r6, #740	@ 0x2e4
 801bc0a:	fb06 1103 	mla	r1, r6, r3, r1
 801bc0e:	f04f 0c01 	mov.w	ip, #1
 801bc12:	2600      	movs	r6, #0
 801bc14:	b2f7      	uxtb	r7, r6
 801bc16:	42bd      	cmp	r5, r7
 801bc18:	d90e      	bls.n	801bc38 <MobleApplicationUpdateSigModelList+0x54>
 801bc1a:	f891 7099 	ldrb.w	r7, [r1, #153]	@ 0x99
 801bc1e:	b927      	cbnz	r7, 801bc2a <MobleApplicationUpdateSigModelList+0x46>
 801bc20:	f830 7b02 	ldrh.w	r7, [r0], #2
 801bc24:	678f      	str	r7, [r1, #120]	@ 0x78
 801bc26:	f881 c09a 	strb.w	ip, [r1, #154]	@ 0x9a
 801bc2a:	3601      	adds	r6, #1
 801bc2c:	3138      	adds	r1, #56	@ 0x38
 801bc2e:	e7f1      	b.n	801bc14 <MobleApplicationUpdateSigModelList+0x30>
 801bc30:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801bc34:	42ab      	cmp	r3, r5
 801bc36:	d306      	bcc.n	801bc46 <MobleApplicationUpdateSigModelList+0x62>
 801bc38:	f44f 7139 	mov.w	r1, #740	@ 0x2e4
 801bc3c:	fb01 4303 	mla	r3, r1, r3, r4
 801bc40:	f883 238c 	strb.w	r2, [r3, #908]	@ 0x38c
 801bc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc46:	f44f 7539 	mov.w	r5, #740	@ 0x2e4
 801bc4a:	fb05 4503 	mla	r5, r5, r3, r4
 801bc4e:	4419      	add	r1, r3
 801bc50:	f8a5 10ac 	strh.w	r1, [r5, #172]	@ 0xac
 801bc54:	4615      	mov	r5, r2
 801bc56:	e7d5      	b.n	801bc04 <MobleApplicationUpdateSigModelList+0x20>
 801bc58:	20000314 	.word	0x20000314
 801bc5c:	200003c0 	.word	0x200003c0

0801bc60 <MobleApplicationUpdateVendorModelList>:
 801bc60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc62:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801bc66:	b9b3      	cbnz	r3, 801bc96 <MobleApplicationUpdateVendorModelList+0x36>
 801bc68:	3902      	subs	r1, #2
 801bc6a:	4d16      	ldr	r5, [pc, #88]	@ (801bcc4 <MobleApplicationUpdateVendorModelList+0x64>)
 801bc6c:	b2c9      	uxtb	r1, r1
 801bc6e:	f8a5 40ac 	strh.w	r4, [r5, #172]	@ 0xac
 801bc72:	4c15      	ldr	r4, [pc, #84]	@ (801bcc8 <MobleApplicationUpdateVendorModelList+0x68>)
 801bc74:	f44f 7539 	mov.w	r5, #740	@ 0x2e4
 801bc78:	fb05 4403 	mla	r4, r5, r3, r4
 801bc7c:	2701      	movs	r7, #1
 801bc7e:	2500      	movs	r5, #0
 801bc80:	b2ee      	uxtb	r6, r5
 801bc82:	42b1      	cmp	r1, r6
 801bc84:	d812      	bhi.n	801bcac <MobleApplicationUpdateVendorModelList+0x4c>
 801bc86:	490f      	ldr	r1, [pc, #60]	@ (801bcc4 <MobleApplicationUpdateVendorModelList+0x64>)
 801bc88:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 801bc8c:	fb00 1303 	mla	r3, r0, r3, r1
 801bc90:	f883 238d 	strb.w	r2, [r3, #909]	@ 0x38d
 801bc94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc96:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801bc9a:	42ab      	cmp	r3, r5
 801bc9c:	d2e9      	bcs.n	801bc72 <MobleApplicationUpdateVendorModelList+0x12>
 801bc9e:	4d09      	ldr	r5, [pc, #36]	@ (801bcc4 <MobleApplicationUpdateVendorModelList+0x64>)
 801bca0:	f44f 7639 	mov.w	r6, #740	@ 0x2e4
 801bca4:	fb06 5503 	mla	r5, r6, r3, r5
 801bca8:	441c      	add	r4, r3
 801bcaa:	e7e0      	b.n	801bc6e <MobleApplicationUpdateVendorModelList+0xe>
 801bcac:	f894 609a 	ldrb.w	r6, [r4, #154]	@ 0x9a
 801bcb0:	b926      	cbnz	r6, 801bcbc <MobleApplicationUpdateVendorModelList+0x5c>
 801bcb2:	f850 6b04 	ldr.w	r6, [r0], #4
 801bcb6:	67a6      	str	r6, [r4, #120]	@ 0x78
 801bcb8:	f884 7099 	strb.w	r7, [r4, #153]	@ 0x99
 801bcbc:	3501      	adds	r5, #1
 801bcbe:	3438      	adds	r4, #56	@ 0x38
 801bcc0:	e7de      	b.n	801bc80 <MobleApplicationUpdateVendorModelList+0x20>
 801bcc2:	bf00      	nop
 801bcc4:	20000314 	.word	0x20000314
 801bcc8:	200003c0 	.word	0x200003c0

0801bccc <MobleTransportIsBusy>:
 801bccc:	b508      	push	{r3, lr}
 801bcce:	b930      	cbnz	r0, 801bcde <MobleTransportIsBusy+0x12>
 801bcd0:	4b05      	ldr	r3, [pc, #20]	@ (801bce8 <MobleTransportIsBusy+0x1c>)
 801bcd2:	4a06      	ldr	r2, [pc, #24]	@ (801bcec <MobleTransportIsBusy+0x20>)
 801bcd4:	4806      	ldr	r0, [pc, #24]	@ (801bcf0 <MobleTransportIsBusy+0x24>)
 801bcd6:	f240 4153 	movw	r1, #1107	@ 0x453
 801bcda:	f00c fb7f 	bl	80283dc <__assert_func>
 801bcde:	6880      	ldr	r0, [r0, #8]
 801bce0:	3800      	subs	r0, #0
 801bce2:	bf18      	it	ne
 801bce4:	2001      	movne	r0, #1
 801bce6:	bd08      	pop	{r3, pc}
 801bce8:	08030e80 	.word	0x08030e80
 801bcec:	0802f430 	.word	0x0802f430
 801bcf0:	080311c0 	.word	0x080311c0

0801bcf4 <MobleTransSarInit>:
 801bcf4:	b510      	push	{r4, lr}
 801bcf6:	4c1c      	ldr	r4, [pc, #112]	@ (801bd68 <MobleTransSarInit+0x74>)
 801bcf8:	f8d4 12e0 	ldr.w	r1, [r4, #736]	@ 0x2e0
 801bcfc:	b319      	cbz	r1, 801bd46 <MobleTransSarInit+0x52>
 801bcfe:	f8d4 32e4 	ldr.w	r3, [r4, #740]	@ 0x2e4
 801bd02:	b943      	cbnz	r3, 801bd16 <MobleTransSarInit+0x22>
 801bd04:	f894 02dc 	ldrb.w	r0, [r4, #732]	@ 0x2dc
 801bd08:	232c      	movs	r3, #44	@ 0x2c
 801bd0a:	4358      	muls	r0, r3
 801bd0c:	f7fe fdb0 	bl	801a870 <MobleMemAlloc>
 801bd10:	f8c4 02e4 	str.w	r0, [r4, #740]	@ 0x2e4
 801bd14:	b330      	cbz	r0, 801bd64 <MobleTransSarInit+0x70>
 801bd16:	f8d4 3300 	ldr.w	r3, [r4, #768]	@ 0x300
 801bd1a:	b933      	cbnz	r3, 801bd2a <MobleTransSarInit+0x36>
 801bd1c:	f8b4 094c 	ldrh.w	r0, [r4, #2380]	@ 0x94c
 801bd20:	f7fe fda6 	bl	801a870 <MobleMemAlloc>
 801bd24:	f8c4 0300 	str.w	r0, [r4, #768]	@ 0x300
 801bd28:	b1e0      	cbz	r0, 801bd64 <MobleTransSarInit+0x70>
 801bd2a:	f8d4 332c 	ldr.w	r3, [r4, #812]	@ 0x32c
 801bd2e:	b933      	cbnz	r3, 801bd3e <MobleTransSarInit+0x4a>
 801bd30:	f8b4 094c 	ldrh.w	r0, [r4, #2380]	@ 0x94c
 801bd34:	f7fe fd9c 	bl	801a870 <MobleMemAlloc>
 801bd38:	f8c4 032c 	str.w	r0, [r4, #812]	@ 0x32c
 801bd3c:	b190      	cbz	r0, 801bd64 <MobleTransSarInit+0x70>
 801bd3e:	2000      	movs	r0, #0
 801bd40:	f8c4 0958 	str.w	r0, [r4, #2392]	@ 0x958
 801bd44:	e00f      	b.n	801bd66 <MobleTransSarInit+0x72>
 801bd46:	2260      	movs	r2, #96	@ 0x60
 801bd48:	f504 7038 	add.w	r0, r4, #736	@ 0x2e0
 801bd4c:	f00d fa2e 	bl	80291ac <memset>
 801bd50:	f894 02dc 	ldrb.w	r0, [r4, #732]	@ 0x2dc
 801bd54:	232c      	movs	r3, #44	@ 0x2c
 801bd56:	4358      	muls	r0, r3
 801bd58:	f7fe fd8a 	bl	801a870 <MobleMemAlloc>
 801bd5c:	f8c4 02e0 	str.w	r0, [r4, #736]	@ 0x2e0
 801bd60:	2800      	cmp	r0, #0
 801bd62:	d1cc      	bne.n	801bcfe <MobleTransSarInit+0xa>
 801bd64:	2002      	movs	r0, #2
 801bd66:	bd10      	pop	{r4, pc}
 801bd68:	2000140c 	.word	0x2000140c

0801bd6c <MobleTransportParseHdr>:
 801bd6c:	b570      	push	{r4, r5, r6, lr}
 801bd6e:	6803      	ldr	r3, [r0, #0]
 801bd70:	7889      	ldrb	r1, [r1, #2]
 801bd72:	7804      	ldrb	r4, [r0, #0]
 801bd74:	ba1b      	rev	r3, r3
 801bd76:	0fdd      	lsrs	r5, r3, #31
 801bd78:	bb01      	cbnz	r1, 801bdbc <MobleTransportParseHdr+0x50>
 801bd7a:	0f99      	lsrs	r1, r3, #30
 801bd7c:	b93d      	cbnz	r5, 801bd8e <MobleTransportParseHdr+0x22>
 801bd7e:	7015      	strb	r5, [r2, #0]
 801bd80:	7055      	strb	r5, [r2, #1]
 801bd82:	7091      	strb	r1, [r2, #2]
 801bd84:	7803      	ldrb	r3, [r0, #0]
 801bd86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801bd8a:	70d3      	strb	r3, [r2, #3]
 801bd8c:	bd70      	pop	{r4, r5, r6, pc}
 801bd8e:	2401      	movs	r4, #1
 801bd90:	4021      	ands	r1, r4
 801bd92:	7014      	strb	r4, [r2, #0]
 801bd94:	7054      	strb	r4, [r2, #1]
 801bd96:	7091      	strb	r1, [r2, #2]
 801bd98:	7801      	ldrb	r1, [r0, #0]
 801bd9a:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801bd9e:	70d1      	strb	r1, [r2, #3]
 801bda0:	f3c3 51c0 	ubfx	r1, r3, #23, #1
 801bda4:	7111      	strb	r1, [r2, #4]
 801bda6:	f3c3 218c 	ubfx	r1, r3, #10, #13
 801bdaa:	f8a2 1005 	strh.w	r1, [r2, #5]
 801bdae:	f3c3 1144 	ubfx	r1, r3, #5, #5
 801bdb2:	f003 031f 	and.w	r3, r3, #31
 801bdb6:	71d1      	strb	r1, [r2, #7]
 801bdb8:	7213      	strb	r3, [r2, #8]
 801bdba:	e7e7      	b.n	801bd8c <MobleTransportParseHdr+0x20>
 801bdbc:	f004 067f 	and.w	r6, r4, #127	@ 0x7f
 801bdc0:	b975      	cbnz	r5, 801bde0 <MobleTransportParseHdr+0x74>
 801bdc2:	b94e      	cbnz	r6, 801bdd8 <MobleTransportParseHdr+0x6c>
 801bdc4:	f3c3 51c0 	ubfx	r1, r3, #23, #1
 801bdc8:	2002      	movs	r0, #2
 801bdca:	f3c3 238c 	ubfx	r3, r3, #10, #13
 801bdce:	7010      	strb	r0, [r2, #0]
 801bdd0:	7056      	strb	r6, [r2, #1]
 801bdd2:	70d1      	strb	r1, [r2, #3]
 801bdd4:	8093      	strh	r3, [r2, #4]
 801bdd6:	e7d9      	b.n	801bd8c <MobleTransportParseHdr+0x20>
 801bdd8:	2303      	movs	r3, #3
 801bdda:	7013      	strb	r3, [r2, #0]
 801bddc:	7056      	strb	r6, [r2, #1]
 801bdde:	e7d5      	b.n	801bd8c <MobleTransportParseHdr+0x20>
 801bde0:	2401      	movs	r4, #1
 801bde2:	7014      	strb	r4, [r2, #0]
 801bde4:	7054      	strb	r4, [r2, #1]
 801bde6:	f3c3 7480 	ubfx	r4, r3, #30, #1
 801bdea:	7094      	strb	r4, [r2, #2]
 801bdec:	7800      	ldrb	r0, [r0, #0]
 801bdee:	7256      	strb	r6, [r2, #9]
 801bdf0:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 801bdf4:	70d0      	strb	r0, [r2, #3]
 801bdf6:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 801bdfa:	7110      	strb	r0, [r2, #4]
 801bdfc:	e7d3      	b.n	801bda6 <MobleTransportParseHdr+0x3a>
	...

0801be00 <MobleTransportRenderHdr>:
 801be00:	b538      	push	{r3, r4, r5, lr}
 801be02:	7803      	ldrb	r3, [r0, #0]
 801be04:	2b04      	cmp	r3, #4
 801be06:	d906      	bls.n	801be16 <MobleTransportRenderHdr+0x16>
 801be08:	4b37      	ldr	r3, [pc, #220]	@ (801bee8 <MobleTransportRenderHdr+0xe8>)
 801be0a:	4a38      	ldr	r2, [pc, #224]	@ (801beec <MobleTransportRenderHdr+0xec>)
 801be0c:	4838      	ldr	r0, [pc, #224]	@ (801bef0 <MobleTransportRenderHdr+0xf0>)
 801be0e:	f240 1121 	movw	r1, #289	@ 0x121
 801be12:	f00c fae3 	bl	80283dc <__assert_func>
 801be16:	3b01      	subs	r3, #1
 801be18:	2b03      	cmp	r3, #3
 801be1a:	d803      	bhi.n	801be24 <MobleTransportRenderHdr+0x24>
 801be1c:	e8df f003 	tbb	[pc, r3]
 801be20:	46443411 	.word	0x46443411
 801be24:	7883      	ldrb	r3, [r0, #2]
 801be26:	b153      	cbz	r3, 801be3e <MobleTransportRenderHdr+0x3e>
 801be28:	78c2      	ldrb	r2, [r0, #3]
 801be2a:	7840      	ldrb	r0, [r0, #1]
 801be2c:	079b      	lsls	r3, r3, #30
 801be2e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801be32:	0692      	lsls	r2, r2, #26
 801be34:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
 801be38:	0e1b      	lsrs	r3, r3, #24
 801be3a:	700b      	strb	r3, [r1, #0]
 801be3c:	e021      	b.n	801be82 <MobleTransportRenderHdr+0x82>
 801be3e:	461a      	mov	r2, r3
 801be40:	e7f3      	b.n	801be2a <MobleTransportRenderHdr+0x2a>
 801be42:	7883      	ldrb	r3, [r0, #2]
 801be44:	b1f3      	cbz	r3, 801be84 <MobleTransportRenderHdr+0x84>
 801be46:	78c2      	ldrb	r2, [r0, #3]
 801be48:	f8b0 4005 	ldrh.w	r4, [r0, #5]
 801be4c:	079b      	lsls	r3, r3, #30
 801be4e:	04e4      	lsls	r4, r4, #19
 801be50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801be54:	ea43 2354 	orr.w	r3, r3, r4, lsr #9
 801be58:	7904      	ldrb	r4, [r0, #4]
 801be5a:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 801be5e:	79c4      	ldrb	r4, [r0, #7]
 801be60:	7a00      	ldrb	r0, [r0, #8]
 801be62:	06e4      	lsls	r4, r4, #27
 801be64:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 801be68:	f000 001f 	and.w	r0, r0, #31
 801be6c:	0692      	lsls	r2, r2, #26
 801be6e:	4303      	orrs	r3, r0
 801be70:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
 801be74:	0e1a      	lsrs	r2, r3, #24
 801be76:	700a      	strb	r2, [r1, #0]
 801be78:	0c1a      	lsrs	r2, r3, #16
 801be7a:	704a      	strb	r2, [r1, #1]
 801be7c:	0a1a      	lsrs	r2, r3, #8
 801be7e:	708a      	strb	r2, [r1, #2]
 801be80:	70cb      	strb	r3, [r1, #3]
 801be82:	bd38      	pop	{r3, r4, r5, pc}
 801be84:	461a      	mov	r2, r3
 801be86:	e7df      	b.n	801be48 <MobleTransportRenderHdr+0x48>
 801be88:	78c2      	ldrb	r2, [r0, #3]
 801be8a:	7843      	ldrb	r3, [r0, #1]
 801be8c:	05d2      	lsls	r2, r2, #23
 801be8e:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 801be92:	8883      	ldrh	r3, [r0, #4]
 801be94:	04db      	lsls	r3, r3, #19
 801be96:	ea42 2353 	orr.w	r3, r2, r3, lsr #9
 801be9a:	0e12      	lsrs	r2, r2, #24
 801be9c:	700a      	strb	r2, [r1, #0]
 801be9e:	0c1a      	lsrs	r2, r3, #16
 801bea0:	0a1b      	lsrs	r3, r3, #8
 801bea2:	704a      	strb	r2, [r1, #1]
 801bea4:	708b      	strb	r3, [r1, #2]
 801bea6:	e7ec      	b.n	801be82 <MobleTransportRenderHdr+0x82>
 801bea8:	7843      	ldrb	r3, [r0, #1]
 801beaa:	e7c6      	b.n	801be3a <MobleTransportRenderHdr+0x3a>
 801beac:	78c4      	ldrb	r4, [r0, #3]
 801beae:	7885      	ldrb	r5, [r0, #2]
 801beb0:	7842      	ldrb	r2, [r0, #1]
 801beb2:	7900      	ldrb	r0, [r0, #4]
 801beb4:	f004 033f 	and.w	r3, r4, #63	@ 0x3f
 801beb8:	01db      	lsls	r3, r3, #7
 801beba:	ea43 0355 	orr.w	r3, r3, r5, lsr #1
 801bebe:	029b      	lsls	r3, r3, #10
 801bec0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801bec4:	f000 0207 	and.w	r2, r0, #7
 801bec8:	0092      	lsls	r2, r2, #2
 801beca:	ea42 1294 	orr.w	r2, r2, r4, lsr #6
 801bece:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801bed2:	0e1a      	lsrs	r2, r3, #24
 801bed4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 801bed8:	700a      	strb	r2, [r1, #0]
 801beda:	0c1a      	lsrs	r2, r3, #16
 801bedc:	0a1b      	lsrs	r3, r3, #8
 801bede:	704a      	strb	r2, [r1, #1]
 801bee0:	708b      	strb	r3, [r1, #2]
 801bee2:	70c8      	strb	r0, [r1, #3]
 801bee4:	e7cd      	b.n	801be82 <MobleTransportRenderHdr+0x82>
 801bee6:	bf00      	nop
 801bee8:	0803120e 	.word	0x0803120e
 801beec:	0802f445 	.word	0x0802f445
 801bef0:	08031310 	.word	0x08031310

0801bef4 <MobleNetworkReplayCacheClear>:
 801bef4:	b570      	push	{r4, r5, r6, lr}
 801bef6:	b928      	cbnz	r0, 801bf04 <MobleNetworkReplayCacheClear+0x10>
 801bef8:	4b14      	ldr	r3, [pc, #80]	@ (801bf4c <MobleNetworkReplayCacheClear+0x58>)
 801befa:	4a15      	ldr	r2, [pc, #84]	@ (801bf50 <MobleNetworkReplayCacheClear+0x5c>)
 801befc:	4815      	ldr	r0, [pc, #84]	@ (801bf54 <MobleNetworkReplayCacheClear+0x60>)
 801befe:	2122      	movs	r1, #34	@ 0x22
 801bf00:	f00c fa6c 	bl	80283dc <__assert_func>
 801bf04:	23a0      	movs	r3, #160	@ 0xa0
 801bf06:	f001 0101 	and.w	r1, r1, #1
 801bf0a:	fb03 0101 	mla	r1, r3, r1, r0
 801bf0e:	2300      	movs	r3, #0
 801bf10:	75cb      	strb	r3, [r1, #23]
 801bf12:	77cb      	strb	r3, [r1, #31]
 801bf14:	f881 3027 	strb.w	r3, [r1, #39]	@ 0x27
 801bf18:	f881 302f 	strb.w	r3, [r1, #47]	@ 0x2f
 801bf1c:	f881 3037 	strb.w	r3, [r1, #55]	@ 0x37
 801bf20:	f890 61d0 	ldrb.w	r6, [r0, #464]	@ 0x1d0
 801bf24:	2505      	movs	r5, #5
 801bf26:	461c      	mov	r4, r3
 801bf28:	18f2      	adds	r2, r6, r3
 801bf2a:	fbb2 f1f5 	udiv	r1, r2, r5
 801bf2e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801bf32:	1a52      	subs	r2, r2, r1
 801bf34:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 801bf38:	3301      	adds	r3, #1
 801bf3a:	2b05      	cmp	r3, #5
 801bf3c:	f8a2 4180 	strh.w	r4, [r2, #384]	@ 0x180
 801bf40:	f8c2 4184 	str.w	r4, [r2, #388]	@ 0x184
 801bf44:	f882 418d 	strb.w	r4, [r2, #397]	@ 0x18d
 801bf48:	d1ee      	bne.n	801bf28 <MobleNetworkReplayCacheClear+0x34>
 801bf4a:	bd70      	pop	{r4, r5, r6, pc}
 801bf4c:	08030e80 	.word	0x08030e80
 801bf50:	0802f45d 	.word	0x0802f45d
 801bf54:	0803135e 	.word	0x0803135e

0801bf58 <MobleNetworkReplayCacheClearAll>:
 801bf58:	b510      	push	{r4, lr}
 801bf5a:	2100      	movs	r1, #0
 801bf5c:	4604      	mov	r4, r0
 801bf5e:	f7ff ffc9 	bl	801bef4 <MobleNetworkReplayCacheClear>
 801bf62:	4620      	mov	r0, r4
 801bf64:	2101      	movs	r1, #1
 801bf66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf6a:	f7ff bfc3 	b.w	801bef4 <MobleNetworkReplayCacheClear>

0801bf6e <Test_UpperTester_Set07>:
 801bf6e:	b508      	push	{r3, lr}
 801bf70:	f7ff fff2 	bl	801bf58 <MobleNetworkReplayCacheClearAll>
 801bf74:	f7ff febe 	bl	801bcf4 <MobleTransSarInit>
 801bf78:	2000      	movs	r0, #0
 801bf7a:	bd08      	pop	{r3, pc}

0801bf7c <BnrgmTransControlProcessHeartbeat>:
 801bf7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bf80:	2b03      	cmp	r3, #3
 801bf82:	890e      	ldrh	r6, [r1, #8]
 801bf84:	894f      	ldrh	r7, [r1, #10]
 801bf86:	f891 9003 	ldrb.w	r9, [r1, #3]
 801bf8a:	4605      	mov	r5, r0
 801bf8c:	d004      	beq.n	801bf98 <BnrgmTransControlProcessHeartbeat+0x1c>
 801bf8e:	2402      	movs	r4, #2
 801bf90:	4620      	mov	r0, r4
 801bf92:	b004      	add	sp, #16
 801bf94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf98:	4610      	mov	r0, r2
 801bf9a:	2102      	movs	r1, #2
 801bf9c:	f810 8b01 	ldrb.w	r8, [r0], #1
 801bfa0:	aa03      	add	r2, sp, #12
 801bfa2:	f7fe fdf9 	bl	801ab98 <MobleInputStreamGetBigEndian>
 801bfa6:	4b10      	ldr	r3, [pc, #64]	@ (801bfe8 <BnrgmTransControlProcessHeartbeat+0x6c>)
 801bfa8:	f89d a00c 	ldrb.w	sl, [sp, #12]
 801bfac:	f8d3 495c 	ldr.w	r4, [r3, #2396]	@ 0x95c
 801bfb0:	f008 087f 	and.w	r8, r8, #127	@ 0x7f
 801bfb4:	2c00      	cmp	r4, #0
 801bfb6:	d0ea      	beq.n	801bf8e <BnrgmTransControlProcessHeartbeat+0x12>
 801bfb8:	fa1f fa8a 	uxth.w	sl, sl
 801bfbc:	f8cd a000 	str.w	sl, [sp]
 801bfc0:	464b      	mov	r3, r9
 801bfc2:	4642      	mov	r2, r8
 801bfc4:	4639      	mov	r1, r7
 801bfc6:	4630      	mov	r0, r6
 801bfc8:	47a0      	blx	r4
 801bfca:	4604      	mov	r4, r0
 801bfcc:	2800      	cmp	r0, #0
 801bfce:	d1de      	bne.n	801bf8e <BnrgmTransControlProcessHeartbeat+0x12>
 801bfd0:	f8d5 51f0 	ldr.w	r5, [r5, #496]	@ 0x1f0
 801bfd4:	2d00      	cmp	r5, #0
 801bfd6:	d0db      	beq.n	801bf90 <BnrgmTransControlProcessHeartbeat+0x14>
 801bfd8:	f8cd a000 	str.w	sl, [sp]
 801bfdc:	464b      	mov	r3, r9
 801bfde:	4642      	mov	r2, r8
 801bfe0:	4639      	mov	r1, r7
 801bfe2:	4630      	mov	r0, r6
 801bfe4:	47a8      	blx	r5
 801bfe6:	e7d3      	b.n	801bf90 <BnrgmTransControlProcessHeartbeat+0x14>
 801bfe8:	2000140c 	.word	0x2000140c

0801bfec <MobleAddressAllocatePeerEntry>:
 801bfec:	b510      	push	{r4, lr}
 801bfee:	b140      	cbz	r0, 801c002 <MobleAddressAllocatePeerEntry+0x16>
 801bff0:	b181      	cbz	r1, 801c014 <MobleAddressAllocatePeerEntry+0x28>
 801bff2:	2300      	movs	r3, #0
 801bff4:	79c4      	ldrb	r4, [r0, #7]
 801bff6:	b92c      	cbnz	r4, 801c004 <MobleAddressAllocatePeerEntry+0x18>
 801bff8:	f240 137f 	movw	r3, #383	@ 0x17f
 801bffc:	8082      	strh	r2, [r0, #4]
 801bffe:	6004      	str	r4, [r0, #0]
 801c000:	80c3      	strh	r3, [r0, #6]
 801c002:	bd10      	pop	{r4, pc}
 801c004:	3301      	adds	r3, #1
 801c006:	b2dc      	uxtb	r4, r3
 801c008:	42a1      	cmp	r1, r4
 801c00a:	f100 0008 	add.w	r0, r0, #8
 801c00e:	d8f1      	bhi.n	801bff4 <MobleAddressAllocatePeerEntry+0x8>
 801c010:	2000      	movs	r0, #0
 801c012:	e7f6      	b.n	801c002 <MobleAddressAllocatePeerEntry+0x16>
 801c014:	4608      	mov	r0, r1
 801c016:	e7f4      	b.n	801c002 <MobleAddressAllocatePeerEntry+0x16>

0801c018 <MobleAddressFindPeerEntry>:
 801c018:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c01a:	b908      	cbnz	r0, 801c020 <MobleAddressFindPeerEntry+0x8>
 801c01c:	2000      	movs	r0, #0
 801c01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c020:	2900      	cmp	r1, #0
 801c022:	d0fb      	beq.n	801c01c <MobleAddressFindPeerEntry+0x4>
 801c024:	4604      	mov	r4, r0
 801c026:	460b      	mov	r3, r1
 801c028:	2500      	movs	r5, #0
 801c02a:	79e6      	ldrb	r6, [r4, #7]
 801c02c:	b2ef      	uxtb	r7, r5
 801c02e:	b13e      	cbz	r6, 801c040 <MobleAddressFindPeerEntry+0x28>
 801c030:	79a6      	ldrb	r6, [r4, #6]
 801c032:	b10e      	cbz	r6, 801c038 <MobleAddressFindPeerEntry+0x20>
 801c034:	3e01      	subs	r6, #1
 801c036:	71a6      	strb	r6, [r4, #6]
 801c038:	88a6      	ldrh	r6, [r4, #4]
 801c03a:	4296      	cmp	r6, r2
 801c03c:	bf08      	it	eq
 801c03e:	463b      	moveq	r3, r7
 801c040:	3501      	adds	r5, #1
 801c042:	b2ee      	uxtb	r6, r5
 801c044:	42b1      	cmp	r1, r6
 801c046:	f104 0408 	add.w	r4, r4, #8
 801c04a:	d8ee      	bhi.n	801c02a <MobleAddressFindPeerEntry+0x12>
 801c04c:	4299      	cmp	r1, r3
 801c04e:	d0e5      	beq.n	801c01c <MobleAddressFindPeerEntry+0x4>
 801c050:	b21b      	sxth	r3, r3
 801c052:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 801c056:	e7e2      	b.n	801c01e <MobleAddressFindPeerEntry+0x6>

0801c058 <MobleAddressIsNew>:
 801c058:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c05a:	461d      	mov	r5, r3
 801c05c:	4b0f      	ldr	r3, [pc, #60]	@ (801c09c <MobleAddressIsNew+0x44>)
 801c05e:	685b      	ldr	r3, [r3, #4]
 801c060:	6a1b      	ldr	r3, [r3, #32]
 801c062:	e9cd 2100 	strd	r2, r1, [sp]
 801c066:	4606      	mov	r6, r0
 801c068:	4798      	blx	r3
 801c06a:	4604      	mov	r4, r0
 801c06c:	b9a0      	cbnz	r0, 801c098 <MobleAddressIsNew+0x40>
 801c06e:	e9dd 2100 	ldrd	r2, r1, [sp]
 801c072:	4630      	mov	r0, r6
 801c074:	f7ff ffd0 	bl	801c018 <MobleAddressFindPeerEntry>
 801c078:	b938      	cbnz	r0, 801c08a <MobleAddressIsNew+0x32>
 801c07a:	4630      	mov	r0, r6
 801c07c:	f7ff ffb6 	bl	801bfec <MobleAddressAllocatePeerEntry>
 801c080:	b930      	cbnz	r0, 801c090 <MobleAddressIsNew+0x38>
 801c082:	2401      	movs	r4, #1
 801c084:	4620      	mov	r0, r4
 801c086:	b002      	add	sp, #8
 801c088:	bd70      	pop	{r4, r5, r6, pc}
 801c08a:	6803      	ldr	r3, [r0, #0]
 801c08c:	429d      	cmp	r5, r3
 801c08e:	d9f8      	bls.n	801c082 <MobleAddressIsNew+0x2a>
 801c090:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 801c094:	6005      	str	r5, [r0, #0]
 801c096:	e7f5      	b.n	801c084 <MobleAddressIsNew+0x2c>
 801c098:	2400      	movs	r4, #0
 801c09a:	e7f3      	b.n	801c084 <MobleAddressIsNew+0x2c>
 801c09c:	20000314 	.word	0x20000314

0801c0a0 <MobleConfigCrc32>:
 801c0a0:	b530      	push	{r4, r5, lr}
 801c0a2:	4d0b      	ldr	r5, [pc, #44]	@ (801c0d0 <MobleConfigCrc32+0x30>)
 801c0a4:	4401      	add	r1, r0
 801c0a6:	f04f 33ff 	mov.w	r3, #4294967295
 801c0aa:	4281      	cmp	r1, r0
 801c0ac:	d101      	bne.n	801c0b2 <MobleConfigCrc32+0x12>
 801c0ae:	43d8      	mvns	r0, r3
 801c0b0:	bd30      	pop	{r4, r5, pc}
 801c0b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c0b6:	4053      	eors	r3, r2
 801c0b8:	2210      	movs	r2, #16
 801c0ba:	f343 0400 	sbfx	r4, r3, #0, #1
 801c0be:	3a01      	subs	r2, #1
 801c0c0:	402c      	ands	r4, r5
 801c0c2:	b292      	uxth	r2, r2
 801c0c4:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
 801c0c8:	2a00      	cmp	r2, #0
 801c0ca:	d1f6      	bne.n	801c0ba <MobleConfigCrc32+0x1a>
 801c0cc:	e7ed      	b.n	801c0aa <MobleConfigCrc32+0xa>
 801c0ce:	bf00      	nop
 801c0d0:	edb88320 	.word	0xedb88320

0801c0d4 <MobleConfigSave>:
 801c0d4:	b513      	push	{r0, r1, r4, lr}
 801c0d6:	4c36      	ldr	r4, [pc, #216]	@ (801c1b0 <MobleConfigSave+0xdc>)
 801c0d8:	f8b4 379c 	ldrh.w	r3, [r4, #1948]	@ 0x79c
 801c0dc:	2000      	movs	r0, #0
 801c0de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c0e2:	f88d 0006 	strb.w	r0, [sp, #6]
 801c0e6:	f88d 0007 	strb.w	r0, [sp, #7]
 801c0ea:	d10d      	bne.n	801c108 <MobleConfigSave+0x34>
 801c0ec:	4b31      	ldr	r3, [pc, #196]	@ (801c1b4 <MobleConfigSave+0xe0>)
 801c0ee:	6818      	ldr	r0, [r3, #0]
 801c0f0:	4b31      	ldr	r3, [pc, #196]	@ (801c1b8 <MobleConfigSave+0xe4>)
 801c0f2:	781b      	ldrb	r3, [r3, #0]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d138      	bne.n	801c16a <MobleConfigSave+0x96>
 801c0f8:	f10d 0306 	add.w	r3, sp, #6
 801c0fc:	f640 623c 	movw	r2, #3644	@ 0xe3c
 801c100:	f5a4 61d4 	sub.w	r1, r4, #1696	@ 0x6a0
 801c104:	f7eb f926 	bl	8007354 <PalNvmCompare>
 801c108:	f8b4 379c 	ldrh.w	r3, [r4, #1948]	@ 0x79c
 801c10c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c110:	d10c      	bne.n	801c12c <MobleConfigSave+0x58>
 801c112:	4b28      	ldr	r3, [pc, #160]	@ (801c1b4 <MobleConfigSave+0xe0>)
 801c114:	4929      	ldr	r1, [pc, #164]	@ (801c1bc <MobleConfigSave+0xe8>)
 801c116:	6818      	ldr	r0, [r3, #0]
 801c118:	4b27      	ldr	r3, [pc, #156]	@ (801c1b8 <MobleConfigSave+0xe4>)
 801c11a:	781b      	ldrb	r3, [r3, #0]
 801c11c:	bb73      	cbnz	r3, 801c17c <MobleConfigSave+0xa8>
 801c11e:	f10d 0307 	add.w	r3, sp, #7
 801c122:	2208      	movs	r2, #8
 801c124:	f500 6064 	add.w	r0, r0, #3648	@ 0xe40
 801c128:	f7eb f914 	bl	8007354 <PalNvmCompare>
 801c12c:	2801      	cmp	r0, #1
 801c12e:	d82b      	bhi.n	801c188 <MobleConfigSave+0xb4>
 801c130:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801c134:	2a02      	cmp	r2, #2
 801c136:	d003      	beq.n	801c140 <MobleConfigSave+0x6c>
 801c138:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c13c:	2b02      	cmp	r3, #2
 801c13e:	d129      	bne.n	801c194 <MobleConfigSave+0xc0>
 801c140:	491f      	ldr	r1, [pc, #124]	@ (801c1c0 <MobleConfigSave+0xec>)
 801c142:	780b      	ldrb	r3, [r1, #0]
 801c144:	f043 0301 	orr.w	r3, r3, #1
 801c148:	700b      	strb	r3, [r1, #0]
 801c14a:	f8b4 379c 	ldrh.w	r3, [r4, #1948]	@ 0x79c
 801c14e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c152:	d11f      	bne.n	801c194 <MobleConfigSave+0xc0>
 801c154:	2301      	movs	r3, #1
 801c156:	f88d 3006 	strb.w	r3, [sp, #6]
 801c15a:	f88d 3007 	strb.w	r3, [sp, #7]
 801c15e:	4a18      	ldr	r2, [pc, #96]	@ (801c1c0 <MobleConfigSave+0xec>)
 801c160:	7813      	ldrb	r3, [r2, #0]
 801c162:	f043 0302 	orr.w	r3, r3, #2
 801c166:	7013      	strb	r3, [r2, #0]
 801c168:	e01a      	b.n	801c1a0 <MobleConfigSave+0xcc>
 801c16a:	f10d 0306 	add.w	r3, sp, #6
 801c16e:	f640 623c 	movw	r2, #3644	@ 0xe3c
 801c172:	f5a4 61d4 	sub.w	r1, r4, #1696	@ 0x6a0
 801c176:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 801c17a:	e7c3      	b.n	801c104 <MobleConfigSave+0x30>
 801c17c:	f10d 0307 	add.w	r3, sp, #7
 801c180:	2208      	movs	r2, #8
 801c182:	f500 50f2 	add.w	r0, r0, #7744	@ 0x1e40
 801c186:	e7cf      	b.n	801c128 <MobleConfigSave+0x54>
 801c188:	2300      	movs	r3, #0
 801c18a:	f884 379d 	strb.w	r3, [r4, #1949]	@ 0x79d
 801c18e:	f884 37a8 	strb.w	r3, [r4, #1960]	@ 0x7a8
 801c192:	e005      	b.n	801c1a0 <MobleConfigSave+0xcc>
 801c194:	2a01      	cmp	r2, #1
 801c196:	d0e2      	beq.n	801c15e <MobleConfigSave+0x8a>
 801c198:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c19c:	2b01      	cmp	r3, #1
 801c19e:	d0de      	beq.n	801c15e <MobleConfigSave+0x8a>
 801c1a0:	f640 614c 	movw	r1, #3660	@ 0xe4c
 801c1a4:	4807      	ldr	r0, [pc, #28]	@ (801c1c4 <MobleConfigSave+0xf0>)
 801c1a6:	f7fb fd11 	bl	8017bcc <MoblePalBluetoothNvmSave>
 801c1aa:	b002      	add	sp, #8
 801c1ac:	bd10      	pop	{r4, pc}
 801c1ae:	bf00      	nop
 801c1b0:	2000240c 	.word	0x2000240c
 801c1b4:	20004444 	.word	0x20004444
 801c1b8:	20004434 	.word	0x20004434
 801c1bc:	20002bac 	.word	0x20002bac
 801c1c0:	20004433 	.word	0x20004433
 801c1c4:	20001d6c 	.word	0x20001d6c

0801c1c8 <MobleConfigLoad>:
 801c1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1ca:	4c50      	ldr	r4, [pc, #320]	@ (801c30c <MobleConfigLoad+0x144>)
 801c1cc:	f894 379c 	ldrb.w	r3, [r4, #1948]	@ 0x79c
 801c1d0:	2b01      	cmp	r3, #1
 801c1d2:	b085      	sub	sp, #20
 801c1d4:	d107      	bne.n	801c1e6 <MobleConfigLoad+0x1e>
 801c1d6:	2300      	movs	r3, #0
 801c1d8:	f884 379d 	strb.w	r3, [r4, #1949]	@ 0x79d
 801c1dc:	2300      	movs	r3, #0
 801c1de:	f884 37a8 	strb.w	r3, [r4, #1960]	@ 0x7a8
 801c1e2:	b005      	add	sp, #20
 801c1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1e6:	4d4a      	ldr	r5, [pc, #296]	@ (801c310 <MobleConfigLoad+0x148>)
 801c1e8:	4e4a      	ldr	r6, [pc, #296]	@ (801c314 <MobleConfigLoad+0x14c>)
 801c1ea:	6828      	ldr	r0, [r5, #0]
 801c1ec:	2208      	movs	r2, #8
 801c1ee:	2300      	movs	r3, #0
 801c1f0:	eb0d 0102 	add.w	r1, sp, r2
 801c1f4:	f7eb f87c 	bl	80072f0 <PalNvmRead>
 801c1f8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c1fc:	ea01 0302 	and.w	r3, r1, r2
 801c200:	1c58      	adds	r0, r3, #1
 801c202:	4243      	negs	r3, r0
 801c204:	4143      	adcs	r3, r0
 801c206:	7033      	strb	r3, [r6, #0]
 801c208:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c20c:	bf08      	it	eq
 801c20e:	f1b1 3fff 	cmpeq.w	r1, #4294967295
 801c212:	f04f 0301 	mov.w	r3, #1
 801c216:	f884 379d 	strb.w	r3, [r4, #1949]	@ 0x79d
 801c21a:	d03b      	beq.n	801c294 <MobleConfigLoad+0xcc>
 801c21c:	6828      	ldr	r0, [r5, #0]
 801c21e:	2300      	movs	r3, #0
 801c220:	f640 623c 	movw	r2, #3644	@ 0xe3c
 801c224:	f5a4 61d4 	sub.w	r1, r4, #1696	@ 0x6a0
 801c228:	f7eb f862 	bl	80072f0 <PalNvmRead>
 801c22c:	2801      	cmp	r0, #1
 801c22e:	d93a      	bls.n	801c2a6 <MobleConfigLoad+0xde>
 801c230:	2300      	movs	r3, #0
 801c232:	f884 379d 	strb.w	r3, [r4, #1949]	@ 0x79d
 801c236:	f894 379d 	ldrb.w	r3, [r4, #1949]	@ 0x79d
 801c23a:	2b01      	cmp	r3, #1
 801c23c:	d1ce      	bne.n	801c1dc <MobleConfigLoad+0x14>
 801c23e:	f884 37a8 	strb.w	r3, [r4, #1960]	@ 0x7a8
 801c242:	7833      	ldrb	r3, [r6, #0]
 801c244:	6828      	ldr	r0, [r5, #0]
 801c246:	4f34      	ldr	r7, [pc, #208]	@ (801c318 <MobleConfigLoad+0x150>)
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d153      	bne.n	801c2f4 <MobleConfigLoad+0x12c>
 801c24c:	2208      	movs	r2, #8
 801c24e:	4639      	mov	r1, r7
 801c250:	f500 6064 	add.w	r0, r0, #3648	@ 0xe40
 801c254:	f7eb f84c 	bl	80072f0 <PalNvmRead>
 801c258:	2801      	cmp	r0, #1
 801c25a:	d8bf      	bhi.n	801c1dc <MobleConfigLoad+0x14>
 801c25c:	482e      	ldr	r0, [pc, #184]	@ (801c318 <MobleConfigLoad+0x150>)
 801c25e:	2104      	movs	r1, #4
 801c260:	f7ff ff1e 	bl	801c0a0 <MobleConfigCrc32>
 801c264:	f8d4 37a4 	ldr.w	r3, [r4, #1956]	@ 0x7a4
 801c268:	4298      	cmp	r0, r3
 801c26a:	d0ba      	beq.n	801c1e2 <MobleConfigLoad+0x1a>
 801c26c:	7833      	ldrb	r3, [r6, #0]
 801c26e:	6828      	ldr	r0, [r5, #0]
 801c270:	2b00      	cmp	r3, #0
 801c272:	d145      	bne.n	801c300 <MobleConfigLoad+0x138>
 801c274:	4928      	ldr	r1, [pc, #160]	@ (801c318 <MobleConfigLoad+0x150>)
 801c276:	2301      	movs	r3, #1
 801c278:	2208      	movs	r2, #8
 801c27a:	f500 6064 	add.w	r0, r0, #3648	@ 0xe40
 801c27e:	f7eb f837 	bl	80072f0 <PalNvmRead>
 801c282:	2104      	movs	r1, #4
 801c284:	4638      	mov	r0, r7
 801c286:	f7ff ff0b 	bl	801c0a0 <MobleConfigCrc32>
 801c28a:	f8d4 37a4 	ldr.w	r3, [r4, #1956]	@ 0x7a4
 801c28e:	4298      	cmp	r0, r3
 801c290:	d1a4      	bne.n	801c1dc <MobleConfigLoad+0x14>
 801c292:	e7a6      	b.n	801c1e2 <MobleConfigLoad+0x1a>
 801c294:	6828      	ldr	r0, [r5, #0]
 801c296:	2300      	movs	r3, #0
 801c298:	f640 623c 	movw	r2, #3644	@ 0xe3c
 801c29c:	f5a4 61d4 	sub.w	r1, r4, #1696	@ 0x6a0
 801c2a0:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 801c2a4:	e7c0      	b.n	801c228 <MobleConfigLoad+0x60>
 801c2a6:	f894 379d 	ldrb.w	r3, [r4, #1949]	@ 0x79d
 801c2aa:	9301      	str	r3, [sp, #4]
 801c2ac:	2b01      	cmp	r3, #1
 801c2ae:	d1c2      	bne.n	801c236 <MobleConfigLoad+0x6e>
 801c2b0:	481a      	ldr	r0, [pc, #104]	@ (801c31c <MobleConfigLoad+0x154>)
 801c2b2:	f640 6138 	movw	r1, #3640	@ 0xe38
 801c2b6:	f7ff fef3 	bl	801c0a0 <MobleConfigCrc32>
 801c2ba:	f8d4 2798 	ldr.w	r2, [r4, #1944]	@ 0x798
 801c2be:	4290      	cmp	r0, r2
 801c2c0:	d0b9      	beq.n	801c236 <MobleConfigLoad+0x6e>
 801c2c2:	7832      	ldrb	r2, [r6, #0]
 801c2c4:	6828      	ldr	r0, [r5, #0]
 801c2c6:	9b01      	ldr	r3, [sp, #4]
 801c2c8:	b972      	cbnz	r2, 801c2e8 <MobleConfigLoad+0x120>
 801c2ca:	4914      	ldr	r1, [pc, #80]	@ (801c31c <MobleConfigLoad+0x154>)
 801c2cc:	f640 623c 	movw	r2, #3644	@ 0xe3c
 801c2d0:	f7eb f80e 	bl	80072f0 <PalNvmRead>
 801c2d4:	4811      	ldr	r0, [pc, #68]	@ (801c31c <MobleConfigLoad+0x154>)
 801c2d6:	f640 6138 	movw	r1, #3640	@ 0xe38
 801c2da:	f7ff fee1 	bl	801c0a0 <MobleConfigCrc32>
 801c2de:	f8d4 3798 	ldr.w	r3, [r4, #1944]	@ 0x798
 801c2e2:	4298      	cmp	r0, r3
 801c2e4:	d1a4      	bne.n	801c230 <MobleConfigLoad+0x68>
 801c2e6:	e7a6      	b.n	801c236 <MobleConfigLoad+0x6e>
 801c2e8:	490c      	ldr	r1, [pc, #48]	@ (801c31c <MobleConfigLoad+0x154>)
 801c2ea:	f640 623c 	movw	r2, #3644	@ 0xe3c
 801c2ee:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 801c2f2:	e7ed      	b.n	801c2d0 <MobleConfigLoad+0x108>
 801c2f4:	2300      	movs	r3, #0
 801c2f6:	2208      	movs	r2, #8
 801c2f8:	4639      	mov	r1, r7
 801c2fa:	f500 50f2 	add.w	r0, r0, #7744	@ 0x1e40
 801c2fe:	e7a9      	b.n	801c254 <MobleConfigLoad+0x8c>
 801c300:	2301      	movs	r3, #1
 801c302:	2208      	movs	r2, #8
 801c304:	4639      	mov	r1, r7
 801c306:	f500 50f2 	add.w	r0, r0, #7744	@ 0x1e40
 801c30a:	e7b8      	b.n	801c27e <MobleConfigLoad+0xb6>
 801c30c:	2000240c 	.word	0x2000240c
 801c310:	20004444 	.word	0x20004444
 801c314:	20004434 	.word	0x20004434
 801c318:	20002bac 	.word	0x20002bac
 801c31c:	20001d6c 	.word	0x20001d6c

0801c320 <MobleConfigNetworkEncode>:
 801c320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c322:	4c4c      	ldr	r4, [pc, #304]	@ (801c454 <MobleConfigNetworkEncode+0x134>)
 801c324:	f7fb fbac 	bl	8017a80 <MoblePalBluetoothRandom>
 801c328:	f884 0960 	strb.w	r0, [r4, #2400]	@ 0x960
 801c32c:	2800      	cmp	r0, #0
 801c32e:	d0f9      	beq.n	801c324 <MobleConfigNetworkEncode+0x4>
 801c330:	f894 3961 	ldrb.w	r3, [r4, #2401]	@ 0x961
 801c334:	f8b4 2962 	ldrh.w	r2, [r4, #2402]	@ 0x962
 801c338:	4043      	eors	r3, r0
 801c33a:	f884 3961 	strb.w	r3, [r4, #2401]	@ 0x961
 801c33e:	ea40 2300 	orr.w	r3, r0, r0, lsl #8
 801c342:	4053      	eors	r3, r2
 801c344:	f8a4 3962 	strh.w	r3, [r4, #2402]	@ 0x962
 801c348:	4c43      	ldr	r4, [pc, #268]	@ (801c458 <MobleConfigNetworkEncode+0x138>)
 801c34a:	f894 1772 	ldrb.w	r1, [r4, #1906]	@ 0x772
 801c34e:	f204 5589 	addw	r5, r4, #1417	@ 0x589
 801c352:	2600      	movs	r6, #0
 801c354:	f5a4 62d4 	sub.w	r2, r4, #1696	@ 0x6a0
 801c358:	b2f3      	uxtb	r3, r6
 801c35a:	4299      	cmp	r1, r3
 801c35c:	d82c      	bhi.n	801c3b8 <MobleConfigNetworkEncode+0x98>
 801c35e:	f894 5773 	ldrb.w	r5, [r4, #1907]	@ 0x773
 801c362:	f602 569d 	addw	r6, r2, #3485	@ 0xd9d
 801c366:	2700      	movs	r7, #0
 801c368:	b2fb      	uxtb	r3, r7
 801c36a:	429d      	cmp	r5, r3
 801c36c:	d840      	bhi.n	801c3f0 <MobleConfigNetworkEncode+0xd0>
 801c36e:	f602 6613 	addw	r6, r2, #3603	@ 0xe13
 801c372:	2310      	movs	r3, #16
 801c374:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 801c378:	3b01      	subs	r3, #1
 801c37a:	4047      	eors	r7, r0
 801c37c:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801c380:	7037      	strb	r7, [r6, #0]
 801c382:	d1f7      	bne.n	801c374 <MobleConfigNetworkEncode+0x54>
 801c384:	4045      	eors	r5, r0
 801c386:	4041      	eors	r1, r0
 801c388:	f884 5773 	strb.w	r5, [r4, #1907]	@ 0x773
 801c38c:	f894 c785 	ldrb.w	ip, [r4, #1925]	@ 0x785
 801c390:	4d32      	ldr	r5, [pc, #200]	@ (801c45c <MobleConfigNetworkEncode+0x13c>)
 801c392:	f884 1772 	strb.w	r1, [r4, #1906]	@ 0x772
 801c396:	f602 420f 	addw	r2, r2, #3087	@ 0xc0f
 801c39a:	b2d9      	uxtb	r1, r3
 801c39c:	4561      	cmp	r1, ip
 801c39e:	d343      	bcc.n	801c428 <MobleConfigNetworkEncode+0x108>
 801c3a0:	ea80 000c 	eor.w	r0, r0, ip
 801c3a4:	f884 0785 	strb.w	r0, [r4, #1925]	@ 0x785
 801c3a8:	f640 6138 	movw	r1, #3640	@ 0xe38
 801c3ac:	482b      	ldr	r0, [pc, #172]	@ (801c45c <MobleConfigNetworkEncode+0x13c>)
 801c3ae:	f7ff fe77 	bl	801c0a0 <MobleConfigCrc32>
 801c3b2:	f8c4 0798 	str.w	r0, [r4, #1944]	@ 0x798
 801c3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3b8:	f1a5 0710 	sub.w	r7, r5, #16
 801c3bc:	2310      	movs	r3, #16
 801c3be:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 801c3c2:	3b01      	subs	r3, #1
 801c3c4:	ea80 0c0c 	eor.w	ip, r0, ip
 801c3c8:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801c3cc:	f887 c000 	strb.w	ip, [r7]
 801c3d0:	d1f5      	bne.n	801c3be <MobleConfigNetworkEncode+0x9e>
 801c3d2:	462f      	mov	r7, r5
 801c3d4:	2310      	movs	r3, #16
 801c3d6:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 801c3da:	3b01      	subs	r3, #1
 801c3dc:	ea80 0c0c 	eor.w	ip, r0, ip
 801c3e0:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801c3e4:	f887 c000 	strb.w	ip, [r7]
 801c3e8:	d1f5      	bne.n	801c3d6 <MobleConfigNetworkEncode+0xb6>
 801c3ea:	3601      	adds	r6, #1
 801c3ec:	357c      	adds	r5, #124	@ 0x7c
 801c3ee:	e7b3      	b.n	801c358 <MobleConfigNetworkEncode+0x38>
 801c3f0:	f1a6 0c10 	sub.w	ip, r6, #16
 801c3f4:	2310      	movs	r3, #16
 801c3f6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801c3fa:	3b01      	subs	r3, #1
 801c3fc:	ea80 0e0e 	eor.w	lr, r0, lr
 801c400:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801c404:	f88c e000 	strb.w	lr, [ip]
 801c408:	d1f5      	bne.n	801c3f6 <MobleConfigNetworkEncode+0xd6>
 801c40a:	46b4      	mov	ip, r6
 801c40c:	2310      	movs	r3, #16
 801c40e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801c412:	3b01      	subs	r3, #1
 801c414:	ea80 0e0e 	eor.w	lr, r0, lr
 801c418:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801c41c:	f88c e000 	strb.w	lr, [ip]
 801c420:	d1f5      	bne.n	801c40e <MobleConfigNetworkEncode+0xee>
 801c422:	3701      	adds	r7, #1
 801c424:	362c      	adds	r6, #44	@ 0x2c
 801c426:	e79f      	b.n	801c368 <MobleConfigNetworkEncode+0x48>
 801c428:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801c42c:	4041      	eors	r1, r0
 801c42e:	7011      	strb	r1, [r2, #0]
 801c430:	7951      	ldrb	r1, [r2, #5]
 801c432:	4041      	eors	r1, r0
 801c434:	7151      	strb	r1, [r2, #5]
 801c436:	2600      	movs	r6, #0
 801c438:	4629      	mov	r1, r5
 801c43a:	688f      	ldr	r7, [r1, #8]
 801c43c:	360e      	adds	r6, #14
 801c43e:	4047      	eors	r7, r0
 801c440:	2e9a      	cmp	r6, #154	@ 0x9a
 801c442:	608f      	str	r7, [r1, #8]
 801c444:	f101 0138 	add.w	r1, r1, #56	@ 0x38
 801c448:	d1f7      	bne.n	801c43a <MobleConfigNetworkEncode+0x11a>
 801c44a:	3301      	adds	r3, #1
 801c44c:	f505 751a 	add.w	r5, r5, #616	@ 0x268
 801c450:	e7a3      	b.n	801c39a <MobleConfigNetworkEncode+0x7a>
 801c452:	bf00      	nop
 801c454:	2000140c 	.word	0x2000140c
 801c458:	2000240c 	.word	0x2000240c
 801c45c:	20001d6c 	.word	0x20001d6c

0801c460 <MobleConfigNetworkDecode>:
 801c460:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c462:	4b46      	ldr	r3, [pc, #280]	@ (801c57c <MobleConfigNetworkDecode+0x11c>)
 801c464:	f893 1960 	ldrb.w	r1, [r3, #2400]	@ 0x960
 801c468:	f893 2961 	ldrb.w	r2, [r3, #2401]	@ 0x961
 801c46c:	f8b3 0962 	ldrh.w	r0, [r3, #2402]	@ 0x962
 801c470:	404a      	eors	r2, r1
 801c472:	f883 2961 	strb.w	r2, [r3, #2401]	@ 0x961
 801c476:	ea41 2201 	orr.w	r2, r1, r1, lsl #8
 801c47a:	4042      	eors	r2, r0
 801c47c:	f503 5080 	add.w	r0, r3, #4096	@ 0x1000
 801c480:	f8a3 2962 	strh.w	r2, [r3, #2402]	@ 0x962
 801c484:	f890 5772 	ldrb.w	r5, [r0, #1906]	@ 0x772
 801c488:	f890 4773 	ldrb.w	r4, [r0, #1907]	@ 0x773
 801c48c:	404d      	eors	r5, r1
 801c48e:	404c      	eors	r4, r1
 801c490:	f503 6216 	add.w	r2, r3, #2400	@ 0x960
 801c494:	f880 5772 	strb.w	r5, [r0, #1906]	@ 0x772
 801c498:	f880 4773 	strb.w	r4, [r0, #1907]	@ 0x773
 801c49c:	f602 4629 	addw	r6, r2, #3113	@ 0xc29
 801c4a0:	2700      	movs	r7, #0
 801c4a2:	b2fb      	uxtb	r3, r7
 801c4a4:	429d      	cmp	r5, r3
 801c4a6:	d81c      	bhi.n	801c4e2 <MobleConfigNetworkDecode+0x82>
 801c4a8:	f602 559d 	addw	r5, r2, #3485	@ 0xd9d
 801c4ac:	2600      	movs	r6, #0
 801c4ae:	b2f3      	uxtb	r3, r6
 801c4b0:	429c      	cmp	r4, r3
 801c4b2:	d832      	bhi.n	801c51a <MobleConfigNetworkDecode+0xba>
 801c4b4:	f602 6413 	addw	r4, r2, #3603	@ 0xe13
 801c4b8:	2310      	movs	r3, #16
 801c4ba:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 801c4be:	3b01      	subs	r3, #1
 801c4c0:	404d      	eors	r5, r1
 801c4c2:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801c4c6:	7025      	strb	r5, [r4, #0]
 801c4c8:	d1f7      	bne.n	801c4ba <MobleConfigNetworkDecode+0x5a>
 801c4ca:	f890 4785 	ldrb.w	r4, [r0, #1925]	@ 0x785
 801c4ce:	4d2c      	ldr	r5, [pc, #176]	@ (801c580 <MobleConfigNetworkDecode+0x120>)
 801c4d0:	404c      	eors	r4, r1
 801c4d2:	f880 4785 	strb.w	r4, [r0, #1925]	@ 0x785
 801c4d6:	f602 420f 	addw	r2, r2, #3087	@ 0xc0f
 801c4da:	b2d8      	uxtb	r0, r3
 801c4dc:	4284      	cmp	r4, r0
 801c4de:	d838      	bhi.n	801c552 <MobleConfigNetworkDecode+0xf2>
 801c4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c4e2:	f1a6 0c10 	sub.w	ip, r6, #16
 801c4e6:	2310      	movs	r3, #16
 801c4e8:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801c4ec:	3b01      	subs	r3, #1
 801c4ee:	ea81 0e0e 	eor.w	lr, r1, lr
 801c4f2:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801c4f6:	f88c e000 	strb.w	lr, [ip]
 801c4fa:	d1f5      	bne.n	801c4e8 <MobleConfigNetworkDecode+0x88>
 801c4fc:	46b4      	mov	ip, r6
 801c4fe:	2310      	movs	r3, #16
 801c500:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801c504:	3b01      	subs	r3, #1
 801c506:	ea81 0e0e 	eor.w	lr, r1, lr
 801c50a:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801c50e:	f88c e000 	strb.w	lr, [ip]
 801c512:	d1f5      	bne.n	801c500 <MobleConfigNetworkDecode+0xa0>
 801c514:	3701      	adds	r7, #1
 801c516:	367c      	adds	r6, #124	@ 0x7c
 801c518:	e7c3      	b.n	801c4a2 <MobleConfigNetworkDecode+0x42>
 801c51a:	f1a5 0710 	sub.w	r7, r5, #16
 801c51e:	2310      	movs	r3, #16
 801c520:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 801c524:	3b01      	subs	r3, #1
 801c526:	ea81 0c0c 	eor.w	ip, r1, ip
 801c52a:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801c52e:	f887 c000 	strb.w	ip, [r7]
 801c532:	d1f5      	bne.n	801c520 <MobleConfigNetworkDecode+0xc0>
 801c534:	462f      	mov	r7, r5
 801c536:	2310      	movs	r3, #16
 801c538:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 801c53c:	3b01      	subs	r3, #1
 801c53e:	ea81 0c0c 	eor.w	ip, r1, ip
 801c542:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 801c546:	f887 c000 	strb.w	ip, [r7]
 801c54a:	d1f5      	bne.n	801c538 <MobleConfigNetworkDecode+0xd8>
 801c54c:	3601      	adds	r6, #1
 801c54e:	352c      	adds	r5, #44	@ 0x2c
 801c550:	e7ad      	b.n	801c4ae <MobleConfigNetworkDecode+0x4e>
 801c552:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801c556:	4048      	eors	r0, r1
 801c558:	7010      	strb	r0, [r2, #0]
 801c55a:	7950      	ldrb	r0, [r2, #5]
 801c55c:	4048      	eors	r0, r1
 801c55e:	7150      	strb	r0, [r2, #5]
 801c560:	2600      	movs	r6, #0
 801c562:	4628      	mov	r0, r5
 801c564:	6887      	ldr	r7, [r0, #8]
 801c566:	360e      	adds	r6, #14
 801c568:	404f      	eors	r7, r1
 801c56a:	2e9a      	cmp	r6, #154	@ 0x9a
 801c56c:	6087      	str	r7, [r0, #8]
 801c56e:	f100 0038 	add.w	r0, r0, #56	@ 0x38
 801c572:	d1f7      	bne.n	801c564 <MobleConfigNetworkDecode+0x104>
 801c574:	3301      	adds	r3, #1
 801c576:	f505 751a 	add.w	r5, r5, #616	@ 0x268
 801c57a:	e7ae      	b.n	801c4da <MobleConfigNetworkDecode+0x7a>
 801c57c:	2000140c 	.word	0x2000140c
 801c580:	20001d6c 	.word	0x20001d6c

0801c584 <MobleConfigSavedSeqEncode>:
 801c584:	b510      	push	{r4, lr}
 801c586:	4c05      	ldr	r4, [pc, #20]	@ (801c59c <MobleConfigSavedSeqEncode+0x18>)
 801c588:	2104      	movs	r1, #4
 801c58a:	f504 50bd 	add.w	r0, r4, #6048	@ 0x17a0
 801c58e:	f7ff fd87 	bl	801c0a0 <MobleConfigCrc32>
 801c592:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 801c596:	f8c4 07a4 	str.w	r0, [r4, #1956]	@ 0x7a4
 801c59a:	bd10      	pop	{r4, pc}
 801c59c:	2000140c 	.word	0x2000140c

0801c5a0 <MobleConfigNetworkLoad>:
 801c5a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5a4:	4604      	mov	r4, r0
 801c5a6:	2800      	cmp	r0, #0
 801c5a8:	d07d      	beq.n	801c6a6 <MobleConfigNetworkLoad+0x106>
 801c5aa:	4e41      	ldr	r6, [pc, #260]	@ (801c6b0 <MobleConfigNetworkLoad+0x110>)
 801c5ac:	2500      	movs	r5, #0
 801c5ae:	f506 5780 	add.w	r7, r6, #4096	@ 0x1000
 801c5b2:	7005      	strb	r5, [r0, #0]
 801c5b4:	8045      	strh	r5, [r0, #2]
 801c5b6:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801c5ba:	f44f 720d 	mov.w	r2, #564	@ 0x234
 801c5be:	6a00      	ldr	r0, [r0, #32]
 801c5c0:	4629      	mov	r1, r5
 801c5c2:	f00c fdf3 	bl	80291ac <memset>
 801c5c6:	f8b7 379c 	ldrh.w	r3, [r7, #1948]	@ 0x79c
 801c5ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c5ce:	d16c      	bne.n	801c6aa <MobleConfigNetworkLoad+0x10a>
 801c5d0:	f7ff ff46 	bl	801c460 <MobleConfigNetworkDecode>
 801c5d4:	f8b6 3962 	ldrh.w	r3, [r6, #2402]	@ 0x962
 801c5d8:	8063      	strh	r3, [r4, #2]
 801c5da:	f896 3961 	ldrb.w	r3, [r6, #2401]	@ 0x961
 801c5de:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
 801c5e2:	f8d6 3964 	ldr.w	r3, [r6, #2404]	@ 0x964
 801c5e6:	6063      	str	r3, [r4, #4]
 801c5e8:	f897 3785 	ldrb.w	r3, [r7, #1925]	@ 0x785
 801c5ec:	7723      	strb	r3, [r4, #28]
 801c5ee:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 801c5f2:	f207 517a 	addw	r1, r7, #1402	@ 0x57a
 801c5f6:	6a20      	ldr	r0, [r4, #32]
 801c5f8:	f00c fdbe 	bl	8029178 <memmove>
 801c5fc:	6a20      	ldr	r0, [r4, #32]
 801c5fe:	2284      	movs	r2, #132	@ 0x84
 801c600:	f207 61ee 	addw	r1, r7, #1774	@ 0x6ee
 801c604:	f500 70ba 	add.w	r0, r0, #372	@ 0x174
 801c608:	f00c fdb6 	bl	8029178 <memmove>
 801c60c:	6a20      	ldr	r0, [r4, #32]
 801c60e:	2210      	movs	r2, #16
 801c610:	f207 7174 	addw	r1, r7, #1908	@ 0x774
 801c614:	f500 70fe 	add.w	r0, r0, #508	@ 0x1fc
 801c618:	f00c fdae 	bl	8029178 <memmove>
 801c61c:	6a23      	ldr	r3, [r4, #32]
 801c61e:	f897 2772 	ldrb.w	r2, [r7, #1906]	@ 0x772
 801c622:	f883 21f8 	strb.w	r2, [r3, #504]	@ 0x1f8
 801c626:	f897 2773 	ldrb.w	r2, [r7, #1907]	@ 0x773
 801c62a:	f883 21f9 	strb.w	r2, [r3, #505]	@ 0x1f9
 801c62e:	f897 2784 	ldrb.w	r2, [r7, #1924]	@ 0x784
 801c632:	f883 21fa 	strb.w	r2, [r3, #506]	@ 0x1fa
 801c636:	f506 6816 	add.w	r8, r6, #2400	@ 0x960
 801c63a:	f44f 791a 	mov.w	r9, #616	@ 0x268
 801c63e:	f241 5a70 	movw	sl, #5488	@ 0x1570
 801c642:	f241 5b75 	movw	fp, #5493	@ 0x1575
 801c646:	7f23      	ldrb	r3, [r4, #28]
 801c648:	b2ef      	uxtb	r7, r5
 801c64a:	42bb      	cmp	r3, r7
 801c64c:	d80e      	bhi.n	801c66c <MobleConfigNetworkLoad+0xcc>
 801c64e:	2210      	movs	r2, #16
 801c650:	f608 6126 	addw	r1, r8, #3622	@ 0xe26
 801c654:	f104 000c 	add.w	r0, r4, #12
 801c658:	f00c fd8e 	bl	8029178 <memmove>
 801c65c:	f7ff fe60 	bl	801c320 <MobleConfigNetworkEncode>
 801c660:	2301      	movs	r3, #1
 801c662:	8023      	strh	r3, [r4, #0]
 801c664:	2000      	movs	r0, #0
 801c666:	b003      	add	sp, #12
 801c668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c66c:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801c670:	fb09 8107 	mla	r1, r9, r7, r8
 801c674:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801c676:	9301      	str	r3, [sp, #4]
 801c678:	f44f 721a 	mov.w	r2, #616	@ 0x268
 801c67c:	3108      	adds	r1, #8
 801c67e:	3078      	adds	r0, #120	@ 0x78
 801c680:	f00c fd7a 	bl	8029178 <memmove>
 801c684:	9b01      	ldr	r3, [sp, #4]
 801c686:	19f2      	adds	r2, r6, r7
 801c688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c68a:	f812 100a 	ldrb.w	r1, [r2, sl]
 801c68e:	f883 12e0 	strb.w	r1, [r3, #736]	@ 0x2e0
 801c692:	f812 200b 	ldrb.w	r2, [r2, fp]
 801c696:	f883 22e1 	strb.w	r2, [r3, #737]	@ 0x2e1
 801c69a:	f8b6 2962 	ldrh.w	r2, [r6, #2402]	@ 0x962
 801c69e:	443a      	add	r2, r7
 801c6a0:	801a      	strh	r2, [r3, #0]
 801c6a2:	3501      	adds	r5, #1
 801c6a4:	e7cf      	b.n	801c646 <MobleConfigNetworkLoad+0xa6>
 801c6a6:	2003      	movs	r0, #3
 801c6a8:	e7dd      	b.n	801c666 <MobleConfigNetworkLoad+0xc6>
 801c6aa:	4628      	mov	r0, r5
 801c6ac:	e7db      	b.n	801c666 <MobleConfigNetworkLoad+0xc6>
 801c6ae:	bf00      	nop
 801c6b0:	2000140c 	.word	0x2000140c

0801c6b4 <MobleConfigSaveSeq>:
 801c6b4:	b508      	push	{r3, lr}
 801c6b6:	b170      	cbz	r0, 801c6d6 <MobleConfigSaveSeq+0x22>
 801c6b8:	4b08      	ldr	r3, [pc, #32]	@ (801c6dc <MobleConfigSaveSeq+0x28>)
 801c6ba:	6882      	ldr	r2, [r0, #8]
 801c6bc:	f8c3 27a0 	str.w	r2, [r3, #1952]	@ 0x7a0
 801c6c0:	2201      	movs	r2, #1
 801c6c2:	f883 27a8 	strb.w	r2, [r3, #1960]	@ 0x7a8
 801c6c6:	f7ff ff5d 	bl	801c584 <MobleConfigSavedSeqEncode>
 801c6ca:	f7ff fd03 	bl	801c0d4 <MobleConfigSave>
 801c6ce:	2801      	cmp	r0, #1
 801c6d0:	bf98      	it	ls
 801c6d2:	2000      	movls	r0, #0
 801c6d4:	bd08      	pop	{r3, pc}
 801c6d6:	2003      	movs	r0, #3
 801c6d8:	e7fc      	b.n	801c6d4 <MobleConfigSaveSeq+0x20>
 801c6da:	bf00      	nop
 801c6dc:	2000240c 	.word	0x2000240c

0801c6e0 <MobleNetworkSaveSeqNum>:
 801c6e0:	b508      	push	{r3, lr}
 801c6e2:	b928      	cbnz	r0, 801c6f0 <MobleNetworkSaveSeqNum+0x10>
 801c6e4:	4b0f      	ldr	r3, [pc, #60]	@ (801c724 <MobleNetworkSaveSeqNum+0x44>)
 801c6e6:	4a10      	ldr	r2, [pc, #64]	@ (801c728 <MobleNetworkSaveSeqNum+0x48>)
 801c6e8:	2157      	movs	r1, #87	@ 0x57
 801c6ea:	4810      	ldr	r0, [pc, #64]	@ (801c72c <MobleNetworkSaveSeqNum+0x4c>)
 801c6ec:	f00b fe76 	bl	80283dc <__assert_func>
 801c6f0:	6802      	ldr	r2, [r0, #0]
 801c6f2:	b91a      	cbnz	r2, 801c6fc <MobleNetworkSaveSeqNum+0x1c>
 801c6f4:	4b0e      	ldr	r3, [pc, #56]	@ (801c730 <MobleNetworkSaveSeqNum+0x50>)
 801c6f6:	4a0c      	ldr	r2, [pc, #48]	@ (801c728 <MobleNetworkSaveSeqNum+0x48>)
 801c6f8:	2158      	movs	r1, #88	@ 0x58
 801c6fa:	e7f6      	b.n	801c6ea <MobleNetworkSaveSeqNum+0xa>
 801c6fc:	f8d0 315c 	ldr.w	r3, [r0, #348]	@ 0x15c
 801c700:	6891      	ldr	r1, [r2, #8]
 801c702:	4299      	cmp	r1, r3
 801c704:	d80c      	bhi.n	801c720 <MobleNetworkSaveSeqNum+0x40>
 801c706:	f503 53f6 	add.w	r3, r3, #7872	@ 0x1ec0
 801c70a:	330c      	adds	r3, #12
 801c70c:	6093      	str	r3, [r2, #8]
 801c70e:	4610      	mov	r0, r2
 801c710:	f7ff ffd0 	bl	801c6b4 <MobleConfigSaveSeq>
 801c714:	2801      	cmp	r0, #1
 801c716:	bf94      	ite	ls
 801c718:	2000      	movls	r0, #0
 801c71a:	2001      	movhi	r0, #1
 801c71c:	0040      	lsls	r0, r0, #1
 801c71e:	bd08      	pop	{r3, pc}
 801c720:	2001      	movs	r0, #1
 801c722:	e7fc      	b.n	801c71e <MobleNetworkSaveSeqNum+0x3e>
 801c724:	080314e9 	.word	0x080314e9
 801c728:	0802f47a 	.word	0x0802f47a
 801c72c:	0803135e 	.word	0x0803135e
 801c730:	080313a4 	.word	0x080313a4

0801c734 <MobleConfigLoadSeq>:
 801c734:	b1b8      	cbz	r0, 801c766 <MobleConfigLoadSeq+0x32>
 801c736:	7803      	ldrb	r3, [r0, #0]
 801c738:	b913      	cbnz	r3, 801c740 <MobleConfigLoadSeq+0xc>
 801c73a:	6083      	str	r3, [r0, #8]
 801c73c:	4618      	mov	r0, r3
 801c73e:	4770      	bx	lr
 801c740:	4a0a      	ldr	r2, [pc, #40]	@ (801c76c <MobleConfigLoadSeq+0x38>)
 801c742:	f8b2 379c 	ldrh.w	r3, [r2, #1948]	@ 0x79c
 801c746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c74a:	d10a      	bne.n	801c762 <MobleConfigLoadSeq+0x2e>
 801c74c:	f892 37a8 	ldrb.w	r3, [r2, #1960]	@ 0x7a8
 801c750:	2b01      	cmp	r3, #1
 801c752:	f04f 0300 	mov.w	r3, #0
 801c756:	d103      	bne.n	801c760 <MobleConfigLoadSeq+0x2c>
 801c758:	f8d2 27a0 	ldr.w	r2, [r2, #1952]	@ 0x7a0
 801c75c:	6082      	str	r2, [r0, #8]
 801c75e:	e7ed      	b.n	801c73c <MobleConfigLoadSeq+0x8>
 801c760:	6083      	str	r3, [r0, #8]
 801c762:	2302      	movs	r3, #2
 801c764:	e7ea      	b.n	801c73c <MobleConfigLoadSeq+0x8>
 801c766:	2303      	movs	r3, #3
 801c768:	e7e8      	b.n	801c73c <MobleConfigLoadSeq+0x8>
 801c76a:	bf00      	nop
 801c76c:	2000240c 	.word	0x2000240c

0801c770 <MobleNetworkLayerInit>:
 801c770:	b538      	push	{r3, r4, r5, lr}
 801c772:	4604      	mov	r4, r0
 801c774:	2500      	movs	r5, #0
 801c776:	f880 5160 	strb.w	r5, [r0, #352]	@ 0x160
 801c77a:	f7ff fbed 	bl	801bf58 <MobleNetworkReplayCacheClearAll>
 801c77e:	6821      	ldr	r1, [r4, #0]
 801c780:	4608      	mov	r0, r1
 801c782:	f7ff ffd7 	bl	801c734 <MobleConfigLoadSeq>
 801c786:	2801      	cmp	r0, #1
 801c788:	bf98      	it	ls
 801c78a:	688d      	ldrls	r5, [r1, #8]
 801c78c:	f8c4 515c 	str.w	r5, [r4, #348]	@ 0x15c
 801c790:	2000      	movs	r0, #0
 801c792:	bd38      	pop	{r3, r4, r5, pc}

0801c794 <MobleTransportInit>:
 801c794:	b510      	push	{r4, lr}
 801c796:	4604      	mov	r4, r0
 801c798:	b928      	cbnz	r0, 801c7a6 <MobleTransportInit+0x12>
 801c79a:	4b0a      	ldr	r3, [pc, #40]	@ (801c7c4 <MobleTransportInit+0x30>)
 801c79c:	4a0a      	ldr	r2, [pc, #40]	@ (801c7c8 <MobleTransportInit+0x34>)
 801c79e:	480b      	ldr	r0, [pc, #44]	@ (801c7cc <MobleTransportInit+0x38>)
 801c7a0:	21d4      	movs	r1, #212	@ 0xd4
 801c7a2:	f00b fe1b 	bl	80283dc <__assert_func>
 801c7a6:	f7ff faa5 	bl	801bcf4 <MobleTransSarInit>
 801c7aa:	2300      	movs	r3, #0
 801c7ac:	e9c4 3302 	strd	r3, r3, [r4, #8]
 801c7b0:	7123      	strb	r3, [r4, #4]
 801c7b2:	4620      	mov	r0, r4
 801c7b4:	f7ff ffdc 	bl	801c770 <MobleNetworkLayerInit>
 801c7b8:	2801      	cmp	r0, #1
 801c7ba:	bf8c      	ite	hi
 801c7bc:	2003      	movhi	r0, #3
 801c7be:	2000      	movls	r0, #0
 801c7c0:	bd10      	pop	{r4, pc}
 801c7c2:	bf00      	nop
 801c7c4:	08030e80 	.word	0x08030e80
 801c7c8:	0802f491 	.word	0x0802f491
 801c7cc:	080311c0 	.word	0x080311c0

0801c7d0 <MobleApplicationInit>:
 801c7d0:	b508      	push	{r3, lr}
 801c7d2:	4b05      	ldr	r3, [pc, #20]	@ (801c7e8 <MobleApplicationInit+0x18>)
 801c7d4:	2200      	movs	r2, #0
 801c7d6:	f8c3 2954 	str.w	r2, [r3, #2388]	@ 0x954
 801c7da:	f7ff ffdb 	bl	801c794 <MobleTransportInit>
 801c7de:	2801      	cmp	r0, #1
 801c7e0:	bf8c      	ite	hi
 801c7e2:	2003      	movhi	r0, #3
 801c7e4:	2000      	movls	r0, #0
 801c7e6:	bd08      	pop	{r3, pc}
 801c7e8:	2000140c 	.word	0x2000140c

0801c7ec <MobleConfigInit>:
 801c7ec:	4b13      	ldr	r3, [pc, #76]	@ (801c83c <MobleConfigInit+0x50>)
 801c7ee:	4a14      	ldr	r2, [pc, #80]	@ (801c840 <MobleConfigInit+0x54>)
 801c7f0:	b510      	push	{r4, lr}
 801c7f2:	f503 7139 	add.w	r1, r3, #740	@ 0x2e4
 801c7f6:	4c13      	ldr	r4, [pc, #76]	@ (801c844 <MobleConfigInit+0x58>)
 801c7f8:	f8c2 16dc 	str.w	r1, [r2, #1756]	@ 0x6dc
 801c7fc:	f503 61b9 	add.w	r1, r3, #1480	@ 0x5c8
 801c800:	f8c2 46d4 	str.w	r4, [r2, #1748]	@ 0x6d4
 801c804:	f8c2 36d8 	str.w	r3, [r2, #1752]	@ 0x6d8
 801c808:	f8c2 16e0 	str.w	r1, [r2, #1760]	@ 0x6e0
 801c80c:	f604 34dc 	addw	r4, r4, #3036	@ 0xbdc
 801c810:	f603 01ac 	addw	r1, r3, #2220	@ 0x8ac
 801c814:	f503 6339 	add.w	r3, r3, #2960	@ 0xb90
 801c818:	f8c2 36e8 	str.w	r3, [r2, #1768]	@ 0x6e8
 801c81c:	f8c2 16e4 	str.w	r1, [r2, #1764]	@ 0x6e4
 801c820:	2300      	movs	r3, #0
 801c822:	f884 379c 	strb.w	r3, [r4, #1948]	@ 0x79c
 801c826:	f7ea fd5b 	bl	80072e0 <PalNvmIsWriteProtected>
 801c82a:	2801      	cmp	r0, #1
 801c82c:	d103      	bne.n	801c836 <MobleConfigInit+0x4a>
 801c82e:	f884 079c 	strb.w	r0, [r4, #1948]	@ 0x79c
 801c832:	2000      	movs	r0, #0
 801c834:	bd10      	pop	{r4, pc}
 801c836:	f7ff fcc7 	bl	801c1c8 <MobleConfigLoad>
 801c83a:	e7fa      	b.n	801c832 <MobleConfigInit+0x46>
 801c83c:	200003c0 	.word	0x200003c0
 801c840:	20002504 	.word	0x20002504
 801c844:	20001830 	.word	0x20001830

0801c848 <MobleConfigCheck>:
 801c848:	b128      	cbz	r0, 801c856 <MobleConfigCheck+0xe>
 801c84a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801c84e:	2800      	cmp	r0, #0
 801c850:	bfd4      	ite	le
 801c852:	2000      	movle	r0, #0
 801c854:	2001      	movgt	r0, #1
 801c856:	4770      	bx	lr

0801c858 <MobleConfigNetworkSave>:
 801c858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c85c:	4604      	mov	r4, r0
 801c85e:	b910      	cbnz	r0, 801c866 <MobleConfigNetworkSave+0xe>
 801c860:	2003      	movs	r0, #3
 801c862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c866:	2300      	movs	r3, #0
 801c868:	7043      	strb	r3, [r0, #1]
 801c86a:	f7ff ffed 	bl	801c848 <MobleConfigCheck>
 801c86e:	2800      	cmp	r0, #0
 801c870:	d0f6      	beq.n	801c860 <MobleConfigNetworkSave+0x8>
 801c872:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 801c954 <MobleConfigNetworkSave+0xfc>
 801c876:	f508 5580 	add.w	r5, r8, #4096	@ 0x1000
 801c87a:	f895 779c 	ldrb.w	r7, [r5, #1948]	@ 0x79c
 801c87e:	2f00      	cmp	r7, #0
 801c880:	d14b      	bne.n	801c91a <MobleConfigNetworkSave+0xc2>
 801c882:	8863      	ldrh	r3, [r4, #2]
 801c884:	f8a8 3962 	strh.w	r3, [r8, #2402]	@ 0x962
 801c888:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801c88c:	6a21      	ldr	r1, [r4, #32]
 801c88e:	f888 3961 	strb.w	r3, [r8, #2401]	@ 0x961
 801c892:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 801c896:	6863      	ldr	r3, [r4, #4]
 801c898:	f8c8 3964 	str.w	r3, [r8, #2404]	@ 0x964
 801c89c:	f205 507a 	addw	r0, r5, #1402	@ 0x57a
 801c8a0:	f00c fc6a 	bl	8029178 <memmove>
 801c8a4:	6a21      	ldr	r1, [r4, #32]
 801c8a6:	2284      	movs	r2, #132	@ 0x84
 801c8a8:	f501 71ba 	add.w	r1, r1, #372	@ 0x174
 801c8ac:	f205 60ee 	addw	r0, r5, #1774	@ 0x6ee
 801c8b0:	f00c fc62 	bl	8029178 <memmove>
 801c8b4:	6a21      	ldr	r1, [r4, #32]
 801c8b6:	2210      	movs	r2, #16
 801c8b8:	f501 71fe 	add.w	r1, r1, #508	@ 0x1fc
 801c8bc:	f205 7074 	addw	r0, r5, #1908	@ 0x774
 801c8c0:	f00c fc5a 	bl	8029178 <memmove>
 801c8c4:	6a23      	ldr	r3, [r4, #32]
 801c8c6:	f893 21f8 	ldrb.w	r2, [r3, #504]	@ 0x1f8
 801c8ca:	f885 2772 	strb.w	r2, [r5, #1906]	@ 0x772
 801c8ce:	f893 21f9 	ldrb.w	r2, [r3, #505]	@ 0x1f9
 801c8d2:	f885 2773 	strb.w	r2, [r5, #1907]	@ 0x773
 801c8d6:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 801c8da:	f885 3784 	strb.w	r3, [r5, #1924]	@ 0x784
 801c8de:	7f23      	ldrb	r3, [r4, #28]
 801c8e0:	f885 3785 	strb.w	r3, [r5, #1925]	@ 0x785
 801c8e4:	f508 6916 	add.w	r9, r8, #2400	@ 0x960
 801c8e8:	f241 5b70 	movw	fp, #5488	@ 0x1570
 801c8ec:	f895 2785 	ldrb.w	r2, [r5, #1925]	@ 0x785
 801c8f0:	b2fe      	uxtb	r6, r7
 801c8f2:	42b2      	cmp	r2, r6
 801c8f4:	d813      	bhi.n	801c91e <MobleConfigNetworkSave+0xc6>
 801c8f6:	2210      	movs	r2, #16
 801c8f8:	f104 010c 	add.w	r1, r4, #12
 801c8fc:	f609 6026 	addw	r0, r9, #3622	@ 0xe26
 801c900:	f00c fc3a 	bl	8029178 <memmove>
 801c904:	2301      	movs	r3, #1
 801c906:	f885 379d 	strb.w	r3, [r5, #1949]	@ 0x79d
 801c90a:	f7ff fd09 	bl	801c320 <MobleConfigNetworkEncode>
 801c90e:	f7ff fe39 	bl	801c584 <MobleConfigSavedSeqEncode>
 801c912:	f7ff fbdf 	bl	801c0d4 <MobleConfigSave>
 801c916:	2801      	cmp	r0, #1
 801c918:	d8a3      	bhi.n	801c862 <MobleConfigNetworkSave+0xa>
 801c91a:	2000      	movs	r0, #0
 801c91c:	e7a1      	b.n	801c862 <MobleConfigNetworkSave+0xa>
 801c91e:	eb04 0a86 	add.w	sl, r4, r6, lsl #2
 801c922:	f44f 731a 	mov.w	r3, #616	@ 0x268
 801c926:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 801c92a:	fb03 9006 	mla	r0, r3, r6, r9
 801c92e:	461a      	mov	r2, r3
 801c930:	3178      	adds	r1, #120	@ 0x78
 801c932:	3008      	adds	r0, #8
 801c934:	f00c fc20 	bl	8029178 <memmove>
 801c938:	f8da 2024 	ldr.w	r2, [sl, #36]	@ 0x24
 801c93c:	4446      	add	r6, r8
 801c93e:	f892 12e0 	ldrb.w	r1, [r2, #736]	@ 0x2e0
 801c942:	f806 100b 	strb.w	r1, [r6, fp]
 801c946:	f241 5375 	movw	r3, #5493	@ 0x1575
 801c94a:	f892 22e1 	ldrb.w	r2, [r2, #737]	@ 0x2e1
 801c94e:	54f2      	strb	r2, [r6, r3]
 801c950:	3701      	adds	r7, #1
 801c952:	e7cb      	b.n	801c8ec <MobleConfigNetworkSave+0x94>
 801c954:	2000140c 	.word	0x2000140c

0801c958 <MobleGattGetAttCount>:
 801c958:	b510      	push	{r4, lr}
 801c95a:	7884      	ldrb	r4, [r0, #2]
 801c95c:	2200      	movs	r2, #0
 801c95e:	2301      	movs	r3, #1
 801c960:	b2d1      	uxtb	r1, r2
 801c962:	428c      	cmp	r4, r1
 801c964:	d801      	bhi.n	801c96a <MobleGattGetAttCount+0x12>
 801c966:	4618      	mov	r0, r3
 801c968:	bd10      	pop	{r4, pc}
 801c96a:	6841      	ldr	r1, [r0, #4]
 801c96c:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 801c970:	3201      	adds	r2, #1
 801c972:	7889      	ldrb	r1, [r1, #2]
 801c974:	0709      	lsls	r1, r1, #28
 801c976:	bf54      	ite	pl
 801c978:	3302      	addpl	r3, #2
 801c97a:	3303      	addmi	r3, #3
 801c97c:	e7f0      	b.n	801c960 <MobleGattGetAttCount+0x8>
	...

0801c980 <MobleGattSetup>:
 801c980:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801c982:	4606      	mov	r6, r0
 801c984:	2800      	cmp	r0, #0
 801c986:	d06d      	beq.n	801ca64 <MobleGattSetup+0xe4>
 801c988:	6802      	ldr	r2, [r0, #0]
 801c98a:	f8d0 4164 	ldr.w	r4, [r0, #356]	@ 0x164
 801c98e:	7815      	ldrb	r5, [r2, #0]
 801c990:	8823      	ldrh	r3, [r4, #0]
 801c992:	bb55      	cbnz	r5, 801c9ea <MobleGattSetup+0x6a>
 801c994:	f641 0228 	movw	r2, #6184	@ 0x1828
 801c998:	4293      	cmp	r3, r2
 801c99a:	d01b      	beq.n	801c9d4 <MobleGattSetup+0x54>
 801c99c:	4d32      	ldr	r5, [pc, #200]	@ (801ca68 <MobleGattSetup+0xe8>)
 801c99e:	f8c6 5164 	str.w	r5, [r6, #356]	@ 0x164
 801c9a2:	4628      	mov	r0, r5
 801c9a4:	f7ff ffd8 	bl	801c958 <MobleGattGetAttCount>
 801c9a8:	462b      	mov	r3, r5
 801c9aa:	b2c2      	uxtb	r2, r0
 801c9ac:	f833 1b08 	ldrh.w	r1, [r3], #8
 801c9b0:	2001      	movs	r0, #1
 801c9b2:	f7fa ff87 	bl	80178c4 <MoblePalBluetoothGattAddService>
 801c9b6:	2801      	cmp	r0, #1
 801c9b8:	d815      	bhi.n	801c9e6 <MobleGattSetup+0x66>
 801c9ba:	686b      	ldr	r3, [r5, #4]
 801c9bc:	bb83      	cbnz	r3, 801ca20 <MobleGattSetup+0xa0>
 801c9be:	2000      	movs	r0, #0
 801c9c0:	e011      	b.n	801c9e6 <MobleGattSetup+0x66>
 801c9c2:	6863      	ldr	r3, [r4, #4]
 801c9c4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801c9c8:	3501      	adds	r5, #1
 801c9ca:	68d9      	ldr	r1, [r3, #12]
 801c9cc:	f7fa ffec 	bl	80179a8 <MoblePalBluetoothGattDelCharacteristic>
 801c9d0:	2801      	cmp	r0, #1
 801c9d2:	d808      	bhi.n	801c9e6 <MobleGattSetup+0x66>
 801c9d4:	78a3      	ldrb	r3, [r4, #2]
 801c9d6:	68a0      	ldr	r0, [r4, #8]
 801c9d8:	b2ea      	uxtb	r2, r5
 801c9da:	4293      	cmp	r3, r2
 801c9dc:	d8f1      	bhi.n	801c9c2 <MobleGattSetup+0x42>
 801c9de:	f7fa ff93 	bl	8017908 <MoblePalBluetoothGattDelService>
 801c9e2:	2801      	cmp	r0, #1
 801c9e4:	d9da      	bls.n	801c99c <MobleGattSetup+0x1c>
 801c9e6:	b004      	add	sp, #16
 801c9e8:	bd70      	pop	{r4, r5, r6, pc}
 801c9ea:	f641 0227 	movw	r2, #6183	@ 0x1827
 801c9ee:	4293      	cmp	r3, r2
 801c9f0:	d014      	beq.n	801ca1c <MobleGattSetup+0x9c>
 801c9f2:	4d1e      	ldr	r5, [pc, #120]	@ (801ca6c <MobleGattSetup+0xec>)
 801c9f4:	e7d3      	b.n	801c99e <MobleGattSetup+0x1e>
 801c9f6:	6863      	ldr	r3, [r4, #4]
 801c9f8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801c9fc:	3501      	adds	r5, #1
 801c9fe:	68d9      	ldr	r1, [r3, #12]
 801ca00:	f7fa ffd2 	bl	80179a8 <MoblePalBluetoothGattDelCharacteristic>
 801ca04:	2801      	cmp	r0, #1
 801ca06:	d8ee      	bhi.n	801c9e6 <MobleGattSetup+0x66>
 801ca08:	78a3      	ldrb	r3, [r4, #2]
 801ca0a:	68a0      	ldr	r0, [r4, #8]
 801ca0c:	b2ea      	uxtb	r2, r5
 801ca0e:	4293      	cmp	r3, r2
 801ca10:	d8f1      	bhi.n	801c9f6 <MobleGattSetup+0x76>
 801ca12:	f7fa ff79 	bl	8017908 <MoblePalBluetoothGattDelService>
 801ca16:	2801      	cmp	r0, #1
 801ca18:	d9eb      	bls.n	801c9f2 <MobleGattSetup+0x72>
 801ca1a:	e7e4      	b.n	801c9e6 <MobleGattSetup+0x66>
 801ca1c:	2500      	movs	r5, #0
 801ca1e:	e7f3      	b.n	801ca08 <MobleGattSetup+0x88>
 801ca20:	78ab      	ldrb	r3, [r5, #2]
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d0cb      	beq.n	801c9be <MobleGattSetup+0x3e>
 801ca26:	2600      	movs	r6, #0
 801ca28:	6869      	ldr	r1, [r5, #4]
 801ca2a:	b2f4      	uxtb	r4, r6
 801ca2c:	0120      	lsls	r0, r4, #4
 801ca2e:	eb01 1404 	add.w	r4, r1, r4, lsl #4
 801ca32:	5a09      	ldrh	r1, [r1, r0]
 801ca34:	7963      	ldrb	r3, [r4, #5]
 801ca36:	7922      	ldrb	r2, [r4, #4]
 801ca38:	f104 000c 	add.w	r0, r4, #12
 801ca3c:	9002      	str	r0, [sp, #8]
 801ca3e:	78e0      	ldrb	r0, [r4, #3]
 801ca40:	9001      	str	r0, [sp, #4]
 801ca42:	78a0      	ldrb	r0, [r4, #2]
 801ca44:	9000      	str	r0, [sp, #0]
 801ca46:	68a8      	ldr	r0, [r5, #8]
 801ca48:	f7fa ff67 	bl	801791a <MoblePalBluetoothGattAddCharacteristic>
 801ca4c:	2801      	cmp	r0, #1
 801ca4e:	d8ca      	bhi.n	801c9e6 <MobleGattSetup+0x66>
 801ca50:	68a3      	ldr	r3, [r4, #8]
 801ca52:	b10b      	cbz	r3, 801ca58 <MobleGattSetup+0xd8>
 801ca54:	89a0      	ldrh	r0, [r4, #12]
 801ca56:	4798      	blx	r3
 801ca58:	78aa      	ldrb	r2, [r5, #2]
 801ca5a:	3601      	adds	r6, #1
 801ca5c:	b2f3      	uxtb	r3, r6
 801ca5e:	429a      	cmp	r2, r3
 801ca60:	d8e2      	bhi.n	801ca28 <MobleGattSetup+0xa8>
 801ca62:	e7ac      	b.n	801c9be <MobleGattSetup+0x3e>
 801ca64:	2003      	movs	r0, #3
 801ca66:	e7be      	b.n	801c9e6 <MobleGattSetup+0x66>
 801ca68:	20000014 	.word	0x20000014
 801ca6c:	20000020 	.word	0x20000020

0801ca70 <MobleStackGattSetup>:
 801ca70:	4801      	ldr	r0, [pc, #4]	@ (801ca78 <MobleStackGattSetup+0x8>)
 801ca72:	f7ff bf85 	b.w	801c980 <MobleGattSetup>
 801ca76:	bf00      	nop
 801ca78:	20001a8c 	.word	0x20001a8c

0801ca7c <BLEMesh_GetAddress>:
 801ca7c:	4b06      	ldr	r3, [pc, #24]	@ (801ca98 <BLEMesh_GetAddress+0x1c>)
 801ca7e:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 801ca82:	b138      	cbz	r0, 801ca94 <BLEMesh_GetAddress+0x18>
 801ca84:	f893 26b4 	ldrb.w	r2, [r3, #1716]	@ 0x6b4
 801ca88:	2a01      	cmp	r2, #1
 801ca8a:	d102      	bne.n	801ca92 <BLEMesh_GetAddress+0x16>
 801ca8c:	f8b3 06b6 	ldrh.w	r0, [r3, #1718]	@ 0x6b6
 801ca90:	4770      	bx	lr
 801ca92:	2000      	movs	r0, #0
 801ca94:	4770      	bx	lr
 801ca96:	bf00      	nop
 801ca98:	20002504 	.word	0x20002504

0801ca9c <BLEMesh_GetPublishAddress>:
 801ca9c:	2804      	cmp	r0, #4
 801ca9e:	b570      	push	{r4, r5, r6, lr}
 801caa0:	d81b      	bhi.n	801cada <BLEMesh_GetPublishAddress+0x3e>
 801caa2:	4a0f      	ldr	r2, [pc, #60]	@ (801cae0 <BLEMesh_GetPublishAddress+0x44>)
 801caa4:	f8d2 36f0 	ldr.w	r3, [r2, #1776]	@ 0x6f0
 801caa8:	b1bb      	cbz	r3, 801cada <BLEMesh_GetPublishAddress+0x3e>
 801caaa:	f892 36b4 	ldrb.w	r3, [r2, #1716]	@ 0x6b4
 801caae:	2b01      	cmp	r3, #1
 801cab0:	d113      	bne.n	801cada <BLEMesh_GetPublishAddress+0x3e>
 801cab2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801cab6:	2300      	movs	r3, #0
 801cab8:	f8d0 26d8 	ldr.w	r2, [r0, #1752]	@ 0x6d8
 801cabc:	2538      	movs	r5, #56	@ 0x38
 801cabe:	f102 0478 	add.w	r4, r2, #120	@ 0x78
 801cac2:	fb05 f003 	mul.w	r0, r5, r3
 801cac6:	5826      	ldr	r6, [r4, r0]
 801cac8:	428e      	cmp	r6, r1
 801caca:	d103      	bne.n	801cad4 <BLEMesh_GetPublishAddress+0x38>
 801cacc:	4402      	add	r2, r0
 801cace:	f8b2 007c 	ldrh.w	r0, [r2, #124]	@ 0x7c
 801cad2:	bd70      	pop	{r4, r5, r6, pc}
 801cad4:	3301      	adds	r3, #1
 801cad6:	2b0b      	cmp	r3, #11
 801cad8:	d1f3      	bne.n	801cac2 <BLEMesh_GetPublishAddress+0x26>
 801cada:	2000      	movs	r0, #0
 801cadc:	e7f9      	b.n	801cad2 <BLEMesh_GetPublishAddress+0x36>
 801cade:	bf00      	nop
 801cae0:	20002504 	.word	0x20002504

0801cae4 <BLEMesh_GetTotalModelsCount>:
 801cae4:	200b      	movs	r0, #11
 801cae6:	4770      	bx	lr

0801cae8 <BLEMesh_GetNumberOfElements>:
 801cae8:	2005      	movs	r0, #5
 801caea:	4770      	bx	lr

0801caec <BLEMesh_GetAppKeysCount>:
 801caec:	2003      	movs	r0, #3
 801caee:	4770      	bx	lr

0801caf0 <BLEMesh_GetNetKeysCount>:
 801caf0:	2003      	movs	r0, #3
 801caf2:	4770      	bx	lr

0801caf4 <BLEMesh_GetSubscriptionCount>:
 801caf4:	200a      	movs	r0, #10
 801caf6:	4770      	bx	lr

0801caf8 <BLEMesh_GetTTL>:
 801caf8:	4b03      	ldr	r3, [pc, #12]	@ (801cb08 <BLEMesh_GetTTL+0x10>)
 801cafa:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 801cafe:	b110      	cbz	r0, 801cb06 <BLEMesh_GetTTL+0xe>
 801cb00:	4b02      	ldr	r3, [pc, #8]	@ (801cb0c <BLEMesh_GetTTL+0x14>)
 801cb02:	f893 00b5 	ldrb.w	r0, [r3, #181]	@ 0xb5
 801cb06:	4770      	bx	lr
 801cb08:	20002504 	.word	0x20002504
 801cb0c:	20000314 	.word	0x20000314

0801cb10 <BLEMesh_GetNetworkTransmitCount>:
 801cb10:	4b04      	ldr	r3, [pc, #16]	@ (801cb24 <BLEMesh_GetNetworkTransmitCount+0x14>)
 801cb12:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 801cb16:	b120      	cbz	r0, 801cb22 <BLEMesh_GetNetworkTransmitCount+0x12>
 801cb18:	4b03      	ldr	r3, [pc, #12]	@ (801cb28 <BLEMesh_GetNetworkTransmitCount+0x18>)
 801cb1a:	f893 00b6 	ldrb.w	r0, [r3, #182]	@ 0xb6
 801cb1e:	3001      	adds	r0, #1
 801cb20:	b2c0      	uxtb	r0, r0
 801cb22:	4770      	bx	lr
 801cb24:	20002504 	.word	0x20002504
 801cb28:	20000314 	.word	0x20000314

0801cb2c <BLEMesh_GetRelayRetransmitCount>:
 801cb2c:	4b04      	ldr	r3, [pc, #16]	@ (801cb40 <BLEMesh_GetRelayRetransmitCount+0x14>)
 801cb2e:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 801cb32:	b120      	cbz	r0, 801cb3e <BLEMesh_GetRelayRetransmitCount+0x12>
 801cb34:	4b03      	ldr	r3, [pc, #12]	@ (801cb44 <BLEMesh_GetRelayRetransmitCount+0x18>)
 801cb36:	f893 00b8 	ldrb.w	r0, [r3, #184]	@ 0xb8
 801cb3a:	3001      	adds	r0, #1
 801cb3c:	b2c0      	uxtb	r0, r0
 801cb3e:	4770      	bx	lr
 801cb40:	20002504 	.word	0x20002504
 801cb44:	20000314 	.word	0x20000314

0801cb48 <BLEMesh_SetAttentionTimerCallback>:
 801cb48:	4b04      	ldr	r3, [pc, #16]	@ (801cb5c <BLEMesh_SetAttentionTimerCallback+0x14>)
 801cb4a:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	@ 0x6f0
 801cb4e:	b11b      	cbz	r3, 801cb58 <BLEMesh_SetAttentionTimerCallback+0x10>
 801cb50:	f8c3 01f4 	str.w	r0, [r3, #500]	@ 0x1f4
 801cb54:	2000      	movs	r0, #0
 801cb56:	4770      	bx	lr
 801cb58:	2002      	movs	r0, #2
 801cb5a:	4770      	bx	lr
 801cb5c:	20002504 	.word	0x20002504

0801cb60 <BLEMesh_SetUnprovisionedDevBeaconInterval>:
 801cb60:	1e42      	subs	r2, r0, #1
 801cb62:	2a62      	cmp	r2, #98	@ 0x62
 801cb64:	b508      	push	{r3, lr}
 801cb66:	4603      	mov	r3, r0
 801cb68:	d917      	bls.n	801cb9a <BLEMesh_SetUnprovisionedDevBeaconInterval+0x3a>
 801cb6a:	490d      	ldr	r1, [pc, #52]	@ (801cba0 <BLEMesh_SetUnprovisionedDevBeaconInterval+0x40>)
 801cb6c:	f8d1 26f0 	ldr.w	r2, [r1, #1776]	@ 0x6f0
 801cb70:	b19a      	cbz	r2, 801cb9a <BLEMesh_SetUnprovisionedDevBeaconInterval+0x3a>
 801cb72:	f891 16b4 	ldrb.w	r1, [r1, #1716]	@ 0x6b4
 801cb76:	2901      	cmp	r1, #1
 801cb78:	d00f      	beq.n	801cb9a <BLEMesh_SetUnprovisionedDevBeaconInterval+0x3a>
 801cb7a:	f8d2 01d8 	ldr.w	r0, [r2, #472]	@ 0x1d8
 801cb7e:	b93b      	cbnz	r3, 801cb90 <BLEMesh_SetUnprovisionedDevBeaconInterval+0x30>
 801cb80:	f7fd fd1a 	bl	801a5b8 <BnrgmTransmitDisableRegularlyGeneratedBeacon>
 801cb84:	2801      	cmp	r0, #1
 801cb86:	bf94      	ite	ls
 801cb88:	2000      	movls	r0, #0
 801cb8a:	2001      	movhi	r0, #1
 801cb8c:	0040      	lsls	r0, r0, #1
 801cb8e:	bd08      	pop	{r3, pc}
 801cb90:	f8a2 31dc 	strh.w	r3, [r2, #476]	@ 0x1dc
 801cb94:	f7fd fd22 	bl	801a5dc <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801cb98:	e7f4      	b.n	801cb84 <BLEMesh_SetUnprovisionedDevBeaconInterval+0x24>
 801cb9a:	2002      	movs	r0, #2
 801cb9c:	e7f7      	b.n	801cb8e <BLEMesh_SetUnprovisionedDevBeaconInterval+0x2e>
 801cb9e:	bf00      	nop
 801cba0:	20002504 	.word	0x20002504

0801cba4 <BnrgmCustomBeaconGenerator>:
 801cba4:	b507      	push	{r0, r1, r2, lr}
 801cba6:	2300      	movs	r3, #0
 801cba8:	291e      	cmp	r1, #30
 801cbaa:	9301      	str	r3, [sp, #4]
 801cbac:	dc06      	bgt.n	801cbbc <BnrgmCustomBeaconGenerator+0x18>
 801cbae:	f04f 33ff 	mov.w	r3, #4294967295
 801cbb2:	9301      	str	r3, [sp, #4]
 801cbb4:	9801      	ldr	r0, [sp, #4]
 801cbb6:	b003      	add	sp, #12
 801cbb8:	f85d fb04 	ldr.w	pc, [sp], #4
 801cbbc:	a901      	add	r1, sp, #4
 801cbbe:	f7e9 fd51 	bl	8006664 <BLEMesh_CustomBeaconGeneratorCallback>
 801cbc2:	9b01      	ldr	r3, [sp, #4]
 801cbc4:	2b1f      	cmp	r3, #31
 801cbc6:	d8f2      	bhi.n	801cbae <BnrgmCustomBeaconGenerator+0xa>
 801cbc8:	e7f4      	b.n	801cbb4 <BnrgmCustomBeaconGenerator+0x10>

0801cbca <BLEMesh_CustomBeaconReceivedCallback>:
 801cbca:	4770      	bx	lr

0801cbcc <BLEMesh_TrsptIsBusyState>:
 801cbcc:	4b02      	ldr	r3, [pc, #8]	@ (801cbd8 <BLEMesh_TrsptIsBusyState+0xc>)
 801cbce:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 801cbd2:	f7ff b87b 	b.w	801bccc <MobleTransportIsBusy>
 801cbd6:	bf00      	nop
 801cbd8:	20002504 	.word	0x20002504

0801cbdc <BnrgmLibraryFnOnFriendshipEstablished>:
 801cbdc:	b513      	push	{r0, r1, r4, lr}
 801cbde:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 801cbe2:	9400      	str	r4, [sp, #0]
 801cbe4:	2464      	movs	r4, #100	@ 0x64
 801cbe6:	fbb2 f2f4 	udiv	r2, r2, r4
 801cbea:	f7e9 fc65 	bl	80064b8 <BLEMesh_FnFriendshipEstablishedCallback>
 801cbee:	b002      	add	sp, #8
 801cbf0:	bd10      	pop	{r4, pc}

0801cbf2 <BLEMesh_PvnrDataInputCallback>:
 801cbf2:	2000      	movs	r0, #0
 801cbf4:	4770      	bx	lr
	...

0801cbf8 <MobleStackCreateStartFastAdvTimer>:
 801cbf8:	b510      	push	{r4, lr}
 801cbfa:	4c13      	ldr	r4, [pc, #76]	@ (801cc48 <MobleStackCreateStartFastAdvTimer+0x50>)
 801cbfc:	4913      	ldr	r1, [pc, #76]	@ (801cc4c <MobleStackCreateStartFastAdvTimer+0x54>)
 801cbfe:	f504 62d0 	add.w	r2, r4, #1664	@ 0x680
 801cc02:	f504 60ff 	add.w	r0, r4, #2040	@ 0x7f8
 801cc06:	f7fa fc97 	bl	8017538 <MoblePalTimerCreate>
 801cc0a:	2801      	cmp	r0, #1
 801cc0c:	4602      	mov	r2, r0
 801cc0e:	d909      	bls.n	801cc24 <MobleStackCreateStartFastAdvTimer+0x2c>
 801cc10:	f8d4 07f8 	ldr.w	r0, [r4, #2040]	@ 0x7f8
 801cc14:	b108      	cbz	r0, 801cc1a <MobleStackCreateStartFastAdvTimer+0x22>
 801cc16:	f7fa fd41 	bl	801769c <MoblePalTimerDestroy>
 801cc1a:	2300      	movs	r3, #0
 801cc1c:	f8c4 37f8 	str.w	r3, [r4, #2040]	@ 0x7f8
 801cc20:	4610      	mov	r0, r2
 801cc22:	bd10      	pop	{r4, pc}
 801cc24:	f8d4 07f8 	ldr.w	r0, [r4, #2040]	@ 0x7f8
 801cc28:	f64e 2160 	movw	r1, #60000	@ 0xea60
 801cc2c:	f7fa fcee 	bl	801760c <MoblePalTimerStartOnce>
 801cc30:	2801      	cmp	r0, #1
 801cc32:	4602      	mov	r2, r0
 801cc34:	d8f4      	bhi.n	801cc20 <MobleStackCreateStartFastAdvTimer+0x28>
 801cc36:	23c8      	movs	r3, #200	@ 0xc8
 801cc38:	f8d4 0860 	ldr.w	r0, [r4, #2144]	@ 0x860
 801cc3c:	f8a4 3864 	strh.w	r3, [r4, #2148]	@ 0x864
 801cc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc44:	f7fd bcca 	b.w	801a5dc <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801cc48:	2000140c 	.word	0x2000140c
 801cc4c:	0801a619 	.word	0x0801a619

0801cc50 <MobleStackResetSeq>:
 801cc50:	4a04      	ldr	r2, [pc, #16]	@ (801cc64 <MobleStackResetSeq+0x14>)
 801cc52:	f8d2 0680 	ldr.w	r0, [r2, #1664]	@ 0x680
 801cc56:	2300      	movs	r3, #0
 801cc58:	f8c2 37dc 	str.w	r3, [r2, #2012]	@ 0x7dc
 801cc5c:	6083      	str	r3, [r0, #8]
 801cc5e:	f7ff bd29 	b.w	801c6b4 <MobleConfigSaveSeq>
 801cc62:	bf00      	nop
 801cc64:	2000140c 	.word	0x2000140c

0801cc68 <BnrgmStackSetDummyProxyModeState>:
 801cc68:	b510      	push	{r4, lr}
 801cc6a:	f890 32ad 	ldrb.w	r3, [r0, #685]	@ 0x2ad
 801cc6e:	428b      	cmp	r3, r1
 801cc70:	4604      	mov	r4, r0
 801cc72:	d101      	bne.n	801cc78 <BnrgmStackSetDummyProxyModeState+0x10>
 801cc74:	2002      	movs	r0, #2
 801cc76:	bd10      	pop	{r4, pc}
 801cc78:	2901      	cmp	r1, #1
 801cc7a:	f880 12ad 	strb.w	r1, [r0, #685]	@ 0x2ad
 801cc7e:	d10f      	bne.n	801cca0 <BnrgmStackSetDummyProxyModeState+0x38>
 801cc80:	4a0b      	ldr	r2, [pc, #44]	@ (801ccb0 <BnrgmStackSetDummyProxyModeState+0x48>)
 801cc82:	490c      	ldr	r1, [pc, #48]	@ (801ccb4 <BnrgmStackSetDummyProxyModeState+0x4c>)
 801cc84:	f502 702c 	add.w	r0, r2, #688	@ 0x2b0
 801cc88:	f7fa fc56 	bl	8017538 <MoblePalTimerCreate>
 801cc8c:	2801      	cmp	r0, #1
 801cc8e:	d8f1      	bhi.n	801cc74 <BnrgmStackSetDummyProxyModeState+0xc>
 801cc90:	f8d4 02b0 	ldr.w	r0, [r4, #688]	@ 0x2b0
 801cc94:	f64e 2160 	movw	r1, #60000	@ 0xea60
 801cc98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc9c:	f7fa bcb6 	b.w	801760c <MoblePalTimerStartOnce>
 801cca0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 801cca4:	b113      	cbz	r3, 801ccac <BnrgmStackSetDummyProxyModeState+0x44>
 801cca6:	2000      	movs	r0, #0
 801cca8:	7018      	strb	r0, [r3, #0]
 801ccaa:	e7e4      	b.n	801cc76 <BnrgmStackSetDummyProxyModeState+0xe>
 801ccac:	2003      	movs	r0, #3
 801ccae:	e7e2      	b.n	801cc76 <BnrgmStackSetDummyProxyModeState+0xe>
 801ccb0:	20001a8c 	.word	0x20001a8c
 801ccb4:	0801f219 	.word	0x0801f219

0801ccb8 <BnrgmStackConsumeSeqNo>:
 801ccb8:	4807      	ldr	r0, [pc, #28]	@ (801ccd8 <BnrgmStackConsumeSeqNo+0x20>)
 801ccba:	b510      	push	{r4, lr}
 801ccbc:	f8d0 47dc 	ldr.w	r4, [r0, #2012]	@ 0x7dc
 801ccc0:	1c63      	adds	r3, r4, #1
 801ccc2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801ccc6:	f8c0 37dc 	str.w	r3, [r0, #2012]	@ 0x7dc
 801ccca:	f500 60d0 	add.w	r0, r0, #1664	@ 0x680
 801ccce:	f7ff fd07 	bl	801c6e0 <MobleNetworkSaveSeqNum>
 801ccd2:	4620      	mov	r0, r4
 801ccd4:	bd10      	pop	{r4, pc}
 801ccd6:	bf00      	nop
 801ccd8:	2000140c 	.word	0x2000140c

0801ccdc <BLEMesh_NeighborTableInit>:
 801ccdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ccde:	f103 3cff 	add.w	ip, r3, #4294967295
 801cce2:	f1bc 0f18 	cmp.w	ip, #24
 801cce6:	f89d 4014 	ldrb.w	r4, [sp, #20]
 801ccea:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801ccee:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801ccf2:	f89d 5020 	ldrb.w	r5, [sp, #32]
 801ccf6:	d81a      	bhi.n	801cd2e <BLEMesh_NeighborTableInit+0x52>
 801ccf8:	b1d8      	cbz	r0, 801cd32 <BLEMesh_NeighborTableInit+0x56>
 801ccfa:	b1d2      	cbz	r2, 801cd32 <BLEMesh_NeighborTableInit+0x56>
 801ccfc:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
 801cd00:	d317      	bcc.n	801cd32 <BLEMesh_NeighborTableInit+0x56>
 801cd02:	b1b4      	cbz	r4, 801cd32 <BLEMesh_NeighborTableInit+0x56>
 801cd04:	ea47 0106 	orr.w	r1, r7, r6
 801cd08:	2901      	cmp	r1, #1
 801cd0a:	d812      	bhi.n	801cd32 <BLEMesh_NeighborTableInit+0x56>
 801cd0c:	2d02      	cmp	r5, #2
 801cd0e:	d810      	bhi.n	801cd32 <BLEMesh_NeighborTableInit+0x56>
 801cd10:	f880 3158 	strb.w	r3, [r0, #344]	@ 0x158
 801cd14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801cd18:	435c      	muls	r4, r3
 801cd1a:	f8c0 2150 	str.w	r2, [r0, #336]	@ 0x150
 801cd1e:	f8c0 4154 	str.w	r4, [r0, #340]	@ 0x154
 801cd22:	f880 7159 	strb.w	r7, [r0, #345]	@ 0x159
 801cd26:	f880 615a 	strb.w	r6, [r0, #346]	@ 0x15a
 801cd2a:	f880 515b 	strb.w	r5, [r0, #347]	@ 0x15b
 801cd2e:	2000      	movs	r0, #0
 801cd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd32:	2003      	movs	r0, #3
 801cd34:	e7fc      	b.n	801cd30 <BLEMesh_NeighborTableInit+0x54>

0801cd36 <BLEMesh_UpdateNeighbors>:
 801cd36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd3a:	b08b      	sub	sp, #44	@ 0x2c
 801cd3c:	4699      	mov	r9, r3
 801cd3e:	f99d 3054 	ldrsb.w	r3, [sp, #84]	@ 0x54
 801cd42:	9304      	str	r3, [sp, #16]
 801cd44:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801cd48:	9306      	str	r3, [sp, #24]
 801cd4a:	f890 3158 	ldrb.w	r3, [r0, #344]	@ 0x158
 801cd4e:	f8d0 7150 	ldr.w	r7, [r0, #336]	@ 0x150
 801cd52:	9308      	str	r3, [sp, #32]
 801cd54:	4606      	mov	r6, r0
 801cd56:	460c      	mov	r4, r1
 801cd58:	4692      	mov	sl, r2
 801cd5a:	f7eb f85f 	bl	8007e1c <HAL_GetTick>
 801cd5e:	9005      	str	r0, [sp, #20]
 801cd60:	b177      	cbz	r7, 801cd80 <BLEMesh_UpdateNeighbors+0x4a>
 801cd62:	9b08      	ldr	r3, [sp, #32]
 801cd64:	b163      	cbz	r3, 801cd80 <BLEMesh_UpdateNeighbors+0x4a>
 801cd66:	f1ba 0f00 	cmp.w	sl, #0
 801cd6a:	d009      	beq.n	801cd80 <BLEMesh_UpdateNeighbors+0x4a>
 801cd6c:	2c03      	cmp	r4, #3
 801cd6e:	d807      	bhi.n	801cd80 <BLEMesh_UpdateNeighbors+0x4a>
 801cd70:	e8df f004 	tbb	[pc, r4]
 801cd74:	0f0c0902 	.word	0x0f0c0902
 801cd78:	f896 3159 	ldrb.w	r3, [r6, #345]	@ 0x159
 801cd7c:	2b01      	cmp	r3, #1
 801cd7e:	d023      	beq.n	801cdc8 <BLEMesh_UpdateNeighbors+0x92>
 801cd80:	b00b      	add	sp, #44	@ 0x2c
 801cd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd86:	f896 315a 	ldrb.w	r3, [r6, #346]	@ 0x15a
 801cd8a:	e7f7      	b.n	801cd7c <BLEMesh_UpdateNeighbors+0x46>
 801cd8c:	f896 315b 	ldrb.w	r3, [r6, #347]	@ 0x15b
 801cd90:	e7f4      	b.n	801cd7c <BLEMesh_UpdateNeighbors+0x46>
 801cd92:	f896 315b 	ldrb.w	r3, [r6, #347]	@ 0x15b
 801cd96:	2b02      	cmp	r3, #2
 801cd98:	e7f1      	b.n	801cd7e <BLEMesh_UpdateNeighbors+0x48>
 801cd9a:	9b03      	ldr	r3, [sp, #12]
 801cd9c:	bb23      	cbnz	r3, 801cde8 <BLEMesh_UpdateNeighbors+0xb2>
 801cd9e:	eb07 1345 	add.w	r3, r7, r5, lsl #5
 801cda2:	7f9a      	ldrb	r2, [r3, #30]
 801cda4:	9203      	str	r2, [sp, #12]
 801cda6:	2a01      	cmp	r2, #1
 801cda8:	d11c      	bne.n	801cde4 <BLEMesh_UpdateNeighbors+0xae>
 801cdaa:	9905      	ldr	r1, [sp, #20]
 801cdac:	699a      	ldr	r2, [r3, #24]
 801cdae:	1a8a      	subs	r2, r1, r2
 801cdb0:	f8d6 1154 	ldr.w	r1, [r6, #340]	@ 0x154
 801cdb4:	428a      	cmp	r2, r1
 801cdb6:	f240 8084 	bls.w	801cec2 <BLEMesh_UpdateNeighbors+0x18c>
 801cdba:	f04f 0200 	mov.w	r2, #0
 801cdbe:	2c00      	cmp	r4, #0
 801cdc0:	779a      	strb	r2, [r3, #30]
 801cdc2:	da18      	bge.n	801cdf6 <BLEMesh_UpdateNeighbors+0xc0>
 801cdc4:	b26c      	sxtb	r4, r5
 801cdc6:	e016      	b.n	801cdf6 <BLEMesh_UpdateNeighbors+0xc0>
 801cdc8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801cdcc:	9307      	str	r3, [sp, #28]
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	f04f 0b00 	mov.w	fp, #0
 801cdd4:	9b06      	ldr	r3, [sp, #24]
 801cdd6:	bfd8      	it	le
 801cdd8:	2300      	movle	r3, #0
 801cdda:	9309      	str	r3, [sp, #36]	@ 0x24
 801cddc:	f04f 34ff 	mov.w	r4, #4294967295
 801cde0:	465d      	mov	r5, fp
 801cde2:	e7dc      	b.n	801cd9e <BLEMesh_UpdateNeighbors+0x68>
 801cde4:	2300      	movs	r3, #0
 801cde6:	9303      	str	r3, [sp, #12]
 801cde8:	2c00      	cmp	r4, #0
 801cdea:	da04      	bge.n	801cdf6 <BLEMesh_UpdateNeighbors+0xc0>
 801cdec:	eb07 1345 	add.w	r3, r7, r5, lsl #5
 801cdf0:	7f9b      	ldrb	r3, [r3, #30]
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	d0e6      	beq.n	801cdc4 <BLEMesh_UpdateNeighbors+0x8e>
 801cdf6:	f1bb 0f00 	cmp.w	fp, #0
 801cdfa:	d12e      	bne.n	801ce5a <BLEMesh_UpdateNeighbors+0x124>
 801cdfc:	eb07 1845 	add.w	r8, r7, r5, lsl #5
 801ce00:	f898 301e 	ldrb.w	r3, [r8, #30]
 801ce04:	2b01      	cmp	r3, #1
 801ce06:	d128      	bne.n	801ce5a <BLEMesh_UpdateNeighbors+0x124>
 801ce08:	2206      	movs	r2, #6
 801ce0a:	4641      	mov	r1, r8
 801ce0c:	4650      	mov	r0, sl
 801ce0e:	f00c f9a3 	bl	8029158 <memcmp>
 801ce12:	bb10      	cbnz	r0, 801ce5a <BLEMesh_UpdateNeighbors+0x124>
 801ce14:	9b05      	ldr	r3, [sp, #20]
 801ce16:	f8c8 3018 	str.w	r3, [r8, #24]
 801ce1a:	9b04      	ldr	r3, [sp, #16]
 801ce1c:	f888 301c 	strb.w	r3, [r8, #28]
 801ce20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ce22:	f888 901d 	strb.w	r9, [r8, #29]
 801ce26:	f108 0b06 	add.w	fp, r8, #6
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	d04c      	beq.n	801cec8 <BLEMesh_UpdateNeighbors+0x192>
 801ce2e:	4619      	mov	r1, r3
 801ce30:	465a      	mov	r2, fp
 801ce32:	3110      	adds	r1, #16
 801ce34:	f853 0b04 	ldr.w	r0, [r3], #4
 801ce38:	f842 0b04 	str.w	r0, [r2], #4
 801ce3c:	428b      	cmp	r3, r1
 801ce3e:	d1f9      	bne.n	801ce34 <BLEMesh_UpdateNeighbors+0xfe>
 801ce40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce42:	f8a8 3016 	strh.w	r3, [r8, #22]
 801ce46:	9b04      	ldr	r3, [sp, #16]
 801ce48:	9300      	str	r3, [sp, #0]
 801ce4a:	465a      	mov	r2, fp
 801ce4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce4e:	4649      	mov	r1, r9
 801ce50:	4640      	mov	r0, r8
 801ce52:	f7e9 fbd3 	bl	80065fc <BLEMesh_NeighborRefreshedCallback>
 801ce56:	f04f 0b01 	mov.w	fp, #1
 801ce5a:	9b08      	ldr	r3, [sp, #32]
 801ce5c:	3501      	adds	r5, #1
 801ce5e:	b2ad      	uxth	r5, r5
 801ce60:	42ab      	cmp	r3, r5
 801ce62:	d89a      	bhi.n	801cd9a <BLEMesh_UpdateNeighbors+0x64>
 801ce64:	f1bb 0f00 	cmp.w	fp, #0
 801ce68:	d18a      	bne.n	801cd80 <BLEMesh_UpdateNeighbors+0x4a>
 801ce6a:	2c00      	cmp	r4, #0
 801ce6c:	db88      	blt.n	801cd80 <BLEMesh_UpdateNeighbors+0x4a>
 801ce6e:	eb07 1444 	add.w	r4, r7, r4, lsl #5
 801ce72:	2301      	movs	r3, #1
 801ce74:	77a3      	strb	r3, [r4, #30]
 801ce76:	9b05      	ldr	r3, [sp, #20]
 801ce78:	61a3      	str	r3, [r4, #24]
 801ce7a:	2206      	movs	r2, #6
 801ce7c:	4651      	mov	r1, sl
 801ce7e:	4620      	mov	r0, r4
 801ce80:	f00c f97a 	bl	8029178 <memmove>
 801ce84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ce86:	f884 901d 	strb.w	r9, [r4, #29]
 801ce8a:	1da2      	adds	r2, r4, #6
 801ce8c:	b143      	cbz	r3, 801cea0 <BLEMesh_UpdateNeighbors+0x16a>
 801ce8e:	4611      	mov	r1, r2
 801ce90:	f103 0010 	add.w	r0, r3, #16
 801ce94:	f853 6b04 	ldr.w	r6, [r3], #4
 801ce98:	f841 6b04 	str.w	r6, [r1], #4
 801ce9c:	4283      	cmp	r3, r0
 801ce9e:	d1f9      	bne.n	801ce94 <BLEMesh_UpdateNeighbors+0x15e>
 801cea0:	9b07      	ldr	r3, [sp, #28]
 801cea2:	9904      	ldr	r1, [sp, #16]
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	bfc2      	ittt	gt
 801cea8:	eb07 1745 	addgt.w	r7, r7, r5, lsl #5
 801ceac:	9b06      	ldrgt	r3, [sp, #24]
 801ceae:	82fb      	strhgt	r3, [r7, #22]
 801ceb0:	9b04      	ldr	r3, [sp, #16]
 801ceb2:	7723      	strb	r3, [r4, #28]
 801ceb4:	4620      	mov	r0, r4
 801ceb6:	8ae3      	ldrh	r3, [r4, #22]
 801ceb8:	9100      	str	r1, [sp, #0]
 801ceba:	4649      	mov	r1, r9
 801cebc:	f7e9 fb6a 	bl	8006594 <BLEMesh_NeighborAppearedCallback>
 801cec0:	e75e      	b.n	801cd80 <BLEMesh_UpdateNeighbors+0x4a>
 801cec2:	2300      	movs	r3, #0
 801cec4:	9303      	str	r3, [sp, #12]
 801cec6:	e796      	b.n	801cdf6 <BLEMesh_UpdateNeighbors+0xc0>
 801cec8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801ceca:	2210      	movs	r2, #16
 801cecc:	4658      	mov	r0, fp
 801cece:	f00c f96d 	bl	80291ac <memset>
 801ced2:	e7b5      	b.n	801ce40 <BLEMesh_UpdateNeighbors+0x10a>

0801ced4 <MobleSetGet>:
 801ced4:	b510      	push	{r4, lr}
 801ced6:	b928      	cbnz	r0, 801cee4 <MobleSetGet+0x10>
 801ced8:	4b10      	ldr	r3, [pc, #64]	@ (801cf1c <MobleSetGet+0x48>)
 801ceda:	4a11      	ldr	r2, [pc, #68]	@ (801cf20 <MobleSetGet+0x4c>)
 801cedc:	21be      	movs	r1, #190	@ 0xbe
 801cede:	4811      	ldr	r0, [pc, #68]	@ (801cf24 <MobleSetGet+0x50>)
 801cee0:	f00b fa7c 	bl	80283dc <__assert_func>
 801cee4:	b91a      	cbnz	r2, 801ceee <MobleSetGet+0x1a>
 801cee6:	4b10      	ldr	r3, [pc, #64]	@ (801cf28 <MobleSetGet+0x54>)
 801cee8:	4a0d      	ldr	r2, [pc, #52]	@ (801cf20 <MobleSetGet+0x4c>)
 801ceea:	21bf      	movs	r1, #191	@ 0xbf
 801ceec:	e7f7      	b.n	801cede <MobleSetGet+0xa>
 801ceee:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 801cef2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	da0d      	bge.n	801cf16 <MobleSetGet+0x42>
 801cefa:	f810 3011 	ldrb.w	r3, [r0, r1, lsl #1]
 801cefe:	7861      	ldrb	r1, [r4, #1]
 801cf00:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 801cf04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801cf08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801cf0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801cf10:	8013      	strh	r3, [r2, #0]
 801cf12:	2000      	movs	r0, #0
 801cf14:	bd10      	pop	{r4, pc}
 801cf16:	2002      	movs	r0, #2
 801cf18:	e7fc      	b.n	801cf14 <MobleSetGet+0x40>
 801cf1a:	bf00      	nop
 801cf1c:	080313b3 	.word	0x080313b3
 801cf20:	0802f4a4 	.word	0x0802f4a4
 801cf24:	080313b7 	.word	0x080313b7
 801cf28:	08030f20 	.word	0x08030f20

0801cf2c <BLEMesh_GetLibraryVersion>:
 801cf2c:	4800      	ldr	r0, [pc, #0]	@ (801cf30 <BLEMesh_GetLibraryVersion+0x4>)
 801cf2e:	4770      	bx	lr
 801cf30:	080313f0 	.word	0x080313f0

0801cf34 <BLEMesh_GetLibrarySubVersion>:
 801cf34:	4800      	ldr	r0, [pc, #0]	@ (801cf38 <BLEMesh_GetLibrarySubVersion+0x4>)
 801cf36:	4770      	bx	lr
 801cf38:	080313fa 	.word	0x080313fa

0801cf3c <BLEMesh_BleHardwareInitCallBack>:
 801cf3c:	b118      	cbz	r0, 801cf46 <BLEMesh_BleHardwareInitCallBack+0xa>
 801cf3e:	4b03      	ldr	r3, [pc, #12]	@ (801cf4c <BLEMesh_BleHardwareInitCallBack+0x10>)
 801cf40:	6058      	str	r0, [r3, #4]
 801cf42:	2000      	movs	r0, #0
 801cf44:	4770      	bx	lr
 801cf46:	2003      	movs	r0, #3
 801cf48:	4770      	bx	lr
 801cf4a:	bf00      	nop
 801cf4c:	20000314 	.word	0x20000314

0801cf50 <BLEMesh_BleConfigModelInitCallBack>:
 801cf50:	b120      	cbz	r0, 801cf5c <BLEMesh_BleConfigModelInitCallBack+0xc>
 801cf52:	4b03      	ldr	r3, [pc, #12]	@ (801cf60 <BLEMesh_BleConfigModelInitCallBack+0x10>)
 801cf54:	f8c3 06f8 	str.w	r0, [r3, #1784]	@ 0x6f8
 801cf58:	2000      	movs	r0, #0
 801cf5a:	4770      	bx	lr
 801cf5c:	2003      	movs	r0, #3
 801cf5e:	4770      	bx	lr
 801cf60:	20002504 	.word	0x20002504

0801cf64 <MobleBeaconSetGeneric>:
 801cf64:	b570      	push	{r4, r5, r6, lr}
 801cf66:	460c      	mov	r4, r1
 801cf68:	4619      	mov	r1, r3
 801cf6a:	9b04      	ldr	r3, [sp, #16]
 801cf6c:	b188      	cbz	r0, 801cf92 <MobleBeaconSetGeneric+0x2e>
 801cf6e:	b181      	cbz	r1, 801cf92 <MobleBeaconSetGeneric+0x2e>
 801cf70:	b17c      	cbz	r4, 801cf92 <MobleBeaconSetGeneric+0x2e>
 801cf72:	6826      	ldr	r6, [r4, #0]
 801cf74:	1cdd      	adds	r5, r3, #3
 801cf76:	42b5      	cmp	r5, r6
 801cf78:	d80b      	bhi.n	801cf92 <MobleBeaconSetGeneric+0x2e>
 801cf7a:	6025      	str	r5, [r4, #0]
 801cf7c:	1c9c      	adds	r4, r3, #2
 801cf7e:	7004      	strb	r4, [r0, #0]
 801cf80:	242b      	movs	r4, #43	@ 0x2b
 801cf82:	7082      	strb	r2, [r0, #2]
 801cf84:	7044      	strb	r4, [r0, #1]
 801cf86:	461a      	mov	r2, r3
 801cf88:	3003      	adds	r0, #3
 801cf8a:	f00c f9a0 	bl	80292ce <memcpy>
 801cf8e:	2000      	movs	r0, #0
 801cf90:	bd70      	pop	{r4, r5, r6, pc}
 801cf92:	2003      	movs	r0, #3
 801cf94:	e7fc      	b.n	801cf90 <MobleBeaconSetGeneric+0x2c>

0801cf96 <MobleBeaconSetUnprovisioned>:
 801cf96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cf9a:	b089      	sub	sp, #36	@ 0x24
 801cf9c:	4614      	mov	r4, r2
 801cf9e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801cfa0:	2212      	movs	r2, #18
 801cfa2:	4605      	mov	r5, r0
 801cfa4:	460e      	mov	r6, r1
 801cfa6:	a803      	add	r0, sp, #12
 801cfa8:	2100      	movs	r1, #0
 801cfaa:	4698      	mov	r8, r3
 801cfac:	9102      	str	r1, [sp, #8]
 801cfae:	f00c f8fd 	bl	80291ac <memset>
 801cfb2:	2f00      	cmp	r7, #0
 801cfb4:	bf0c      	ite	eq
 801cfb6:	f04f 0912 	moveq.w	r9, #18
 801cfba:	f04f 0916 	movne.w	r9, #22
 801cfbe:	4622      	mov	r2, r4
 801cfc0:	ab02      	add	r3, sp, #8
 801cfc2:	f104 0c10 	add.w	ip, r4, #16
 801cfc6:	6810      	ldr	r0, [r2, #0]
 801cfc8:	6851      	ldr	r1, [r2, #4]
 801cfca:	461c      	mov	r4, r3
 801cfcc:	c403      	stmia	r4!, {r0, r1}
 801cfce:	3208      	adds	r2, #8
 801cfd0:	4562      	cmp	r2, ip
 801cfd2:	4623      	mov	r3, r4
 801cfd4:	d1f7      	bne.n	801cfc6 <MobleBeaconSetUnprovisioned+0x30>
 801cfd6:	2202      	movs	r2, #2
 801cfd8:	4641      	mov	r1, r8
 801cfda:	a806      	add	r0, sp, #24
 801cfdc:	f7fd fe03 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801cfe0:	b12f      	cbz	r7, 801cfee <MobleBeaconSetUnprovisioned+0x58>
 801cfe2:	6839      	ldr	r1, [r7, #0]
 801cfe4:	2204      	movs	r2, #4
 801cfe6:	f10d 001a 	add.w	r0, sp, #26
 801cfea:	f7fd fdfc 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801cfee:	f8cd 9000 	str.w	r9, [sp]
 801cff2:	ab02      	add	r3, sp, #8
 801cff4:	2200      	movs	r2, #0
 801cff6:	4631      	mov	r1, r6
 801cff8:	4628      	mov	r0, r5
 801cffa:	f7ff ffb3 	bl	801cf64 <MobleBeaconSetGeneric>
 801cffe:	b009      	add	sp, #36	@ 0x24
 801d000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801d004 <MobleBeaconSetSecure>:
 801d004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d008:	b08d      	sub	sp, #52	@ 0x34
 801d00a:	460e      	mov	r6, r1
 801d00c:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
 801d010:	4617      	mov	r7, r2
 801d012:	461c      	mov	r4, r3
 801d014:	4605      	mov	r5, r0
 801d016:	2800      	cmp	r0, #0
 801d018:	d03d      	beq.n	801d096 <MobleBeaconSetSecure+0x92>
 801d01a:	2900      	cmp	r1, #0
 801d01c:	d03b      	beq.n	801d096 <MobleBeaconSetSecure+0x92>
 801d01e:	b3d3      	cbz	r3, 801d096 <MobleBeaconSetSecure+0x92>
 801d020:	f04f 0800 	mov.w	r8, #0
 801d024:	2211      	movs	r2, #17
 801d026:	4641      	mov	r1, r8
 801d028:	a807      	add	r0, sp, #28
 801d02a:	f00c f8bf 	bl	80291ac <memset>
 801d02e:	6823      	ldr	r3, [r4, #0]
 801d030:	6822      	ldr	r2, [r4, #0]
 801d032:	f8cd 3019 	str.w	r3, [sp, #25]
 801d036:	f8cd 2009 	str.w	r2, [sp, #9]
 801d03a:	6863      	ldr	r3, [r4, #4]
 801d03c:	f8cd 8010 	str.w	r8, [sp, #16]
 801d040:	2204      	movs	r2, #4
 801d042:	4649      	mov	r1, r9
 801d044:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 801d048:	f8cd 301d 	str.w	r3, [sp, #29]
 801d04c:	f8cd 300d 	str.w	r3, [sp, #13]
 801d050:	f88d 8014 	strb.w	r8, [sp, #20]
 801d054:	f88d 7018 	strb.w	r7, [sp, #24]
 801d058:	f88d 7008 	strb.w	r7, [sp, #8]
 801d05c:	f7fd fdc3 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801d060:	2204      	movs	r2, #4
 801d062:	4649      	mov	r1, r9
 801d064:	f10d 0011 	add.w	r0, sp, #17
 801d068:	f7fd fdbd 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801d06c:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801d070:	220d      	movs	r2, #13
 801d072:	a902      	add	r1, sp, #8
 801d074:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 801d078:	f7fc faf0 	bl	801965c <MoblePalCryptoAuthenticateSecureNetworkBeacon>
 801d07c:	2801      	cmp	r0, #1
 801d07e:	d807      	bhi.n	801d090 <MobleBeaconSetSecure+0x8c>
 801d080:	2315      	movs	r3, #21
 801d082:	9300      	str	r3, [sp, #0]
 801d084:	2201      	movs	r2, #1
 801d086:	ab06      	add	r3, sp, #24
 801d088:	4631      	mov	r1, r6
 801d08a:	4628      	mov	r0, r5
 801d08c:	f7ff ff6a 	bl	801cf64 <MobleBeaconSetGeneric>
 801d090:	b00d      	add	sp, #52	@ 0x34
 801d092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d096:	2003      	movs	r0, #3
 801d098:	e7fa      	b.n	801d090 <MobleBeaconSetSecure+0x8c>

0801d09a <MobleGattBeaconSetSectionGeneric>:
 801d09a:	b570      	push	{r4, r5, r6, lr}
 801d09c:	4614      	mov	r4, r2
 801d09e:	e9dd 6204 	ldrd	r6, r2, [sp, #16]
 801d0a2:	b180      	cbz	r0, 801d0c6 <MobleGattBeaconSetSectionGeneric+0x2c>
 801d0a4:	b17e      	cbz	r6, 801d0c6 <MobleGattBeaconSetSectionGeneric+0x2c>
 801d0a6:	b174      	cbz	r4, 801d0c6 <MobleGattBeaconSetSectionGeneric+0x2c>
 801d0a8:	1c95      	adds	r5, r2, #2
 801d0aa:	428d      	cmp	r5, r1
 801d0ac:	d80b      	bhi.n	801d0c6 <MobleGattBeaconSetSectionGeneric+0x2c>
 801d0ae:	1c51      	adds	r1, r2, #1
 801d0b0:	7001      	strb	r1, [r0, #0]
 801d0b2:	7043      	strb	r3, [r0, #1]
 801d0b4:	4631      	mov	r1, r6
 801d0b6:	3002      	adds	r0, #2
 801d0b8:	f00c f909 	bl	80292ce <memcpy>
 801d0bc:	6823      	ldr	r3, [r4, #0]
 801d0be:	442b      	add	r3, r5
 801d0c0:	6023      	str	r3, [r4, #0]
 801d0c2:	2000      	movs	r0, #0
 801d0c4:	bd70      	pop	{r4, r5, r6, pc}
 801d0c6:	2003      	movs	r0, #3
 801d0c8:	e7fc      	b.n	801d0c4 <MobleGattBeaconSetSectionGeneric+0x2a>
	...

0801d0cc <MobleStackGattBeaconGenerator>:
 801d0cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d0d0:	2902      	cmp	r1, #2
 801d0d2:	b097      	sub	sp, #92	@ 0x5c
 801d0d4:	4606      	mov	r6, r0
 801d0d6:	460d      	mov	r5, r1
 801d0d8:	f340 80dd 	ble.w	801d296 <MobleStackGattBeaconGenerator+0x1ca>
 801d0dc:	f7fa fc6e 	bl	80179bc <MoblePalBluetoothGetConnectionState>
 801d0e0:	2802      	cmp	r0, #2
 801d0e2:	f040 80db 	bne.w	801d29c <MobleStackGattBeaconGenerator+0x1d0>
 801d0e6:	4f6e      	ldr	r7, [pc, #440]	@ (801d2a0 <MobleStackGattBeaconGenerator+0x1d4>)
 801d0e8:	f8d7 3680 	ldr.w	r3, [r7, #1664]	@ 0x680
 801d0ec:	781b      	ldrb	r3, [r3, #0]
 801d0ee:	b9c3      	cbnz	r3, 801d122 <MobleStackGattBeaconGenerator+0x56>
 801d0f0:	f897 3855 	ldrb.w	r3, [r7, #2133]	@ 0x855
 801d0f4:	b18b      	cbz	r3, 801d11a <MobleStackGattBeaconGenerator+0x4e>
 801d0f6:	2306      	movs	r3, #6
 801d0f8:	f88d 300b 	strb.w	r3, [sp, #11]
 801d0fc:	f10d 020b 	add.w	r2, sp, #11
 801d100:	2301      	movs	r3, #1
 801d102:	9200      	str	r2, [sp, #0]
 801d104:	2400      	movs	r4, #0
 801d106:	9301      	str	r3, [sp, #4]
 801d108:	aa04      	add	r2, sp, #16
 801d10a:	4629      	mov	r1, r5
 801d10c:	4630      	mov	r0, r6
 801d10e:	9404      	str	r4, [sp, #16]
 801d110:	f7ff ffc3 	bl	801d09a <MobleGattBeaconSetSectionGeneric>
 801d114:	2801      	cmp	r0, #1
 801d116:	d90e      	bls.n	801d136 <MobleStackGattBeaconGenerator+0x6a>
 801d118:	9b04      	ldr	r3, [sp, #16]
 801d11a:	4618      	mov	r0, r3
 801d11c:	b017      	add	sp, #92	@ 0x5c
 801d11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d122:	2b01      	cmp	r3, #1
 801d124:	d1e7      	bne.n	801d0f6 <MobleStackGattBeaconGenerator+0x2a>
 801d126:	4b5f      	ldr	r3, [pc, #380]	@ (801d2a4 <MobleStackGattBeaconGenerator+0x1d8>)
 801d128:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 801d12c:	2b01      	cmp	r3, #1
 801d12e:	d0e2      	beq.n	801d0f6 <MobleStackGattBeaconGenerator+0x2a>
 801d130:	f897 392d 	ldrb.w	r3, [r7, #2349]	@ 0x92d
 801d134:	e7de      	b.n	801d0f4 <MobleStackGattBeaconGenerator+0x28>
 801d136:	f8d7 3680 	ldr.w	r3, [r7, #1664]	@ 0x680
 801d13a:	781b      	ldrb	r3, [r3, #0]
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	d073      	beq.n	801d228 <MobleStackGattBeaconGenerator+0x15c>
 801d140:	f641 0328 	movw	r3, #6184	@ 0x1828
 801d144:	9804      	ldr	r0, [sp, #16]
 801d146:	f8ad 300c 	strh.w	r3, [sp, #12]
 801d14a:	2302      	movs	r3, #2
 801d14c:	9301      	str	r3, [sp, #4]
 801d14e:	ab03      	add	r3, sp, #12
 801d150:	9300      	str	r3, [sp, #0]
 801d152:	1a29      	subs	r1, r5, r0
 801d154:	2303      	movs	r3, #3
 801d156:	aa04      	add	r2, sp, #16
 801d158:	4430      	add	r0, r6
 801d15a:	f7ff ff9e 	bl	801d09a <MobleGattBeaconSetSectionGeneric>
 801d15e:	2801      	cmp	r0, #1
 801d160:	d8da      	bhi.n	801d118 <MobleStackGattBeaconGenerator+0x4c>
 801d162:	4b50      	ldr	r3, [pc, #320]	@ (801d2a4 <MobleStackGattBeaconGenerator+0x1d8>)
 801d164:	f893 80bb 	ldrb.w	r8, [r3, #187]	@ 0xbb
 801d168:	9411      	str	r4, [sp, #68]	@ 0x44
 801d16a:	f1b8 0f01 	cmp.w	r8, #1
 801d16e:	d147      	bne.n	801d200 <MobleStackGattBeaconGenerator+0x134>
 801d170:	220f      	movs	r2, #15
 801d172:	4621      	mov	r1, r4
 801d174:	a812      	add	r0, sp, #72	@ 0x48
 801d176:	f00c f819 	bl	80291ac <memset>
 801d17a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801d17e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 801d182:	f7fb fc95 	bl	8018ab0 <MoblePalCryptoGetNodeIdntyToBeAdvt>
 801d186:	4601      	mov	r1, r0
 801d188:	a809      	add	r0, sp, #36	@ 0x24
 801d18a:	f7fc f8a3 	bl	80192d4 <MoblePalCryptoIdentityKey>
 801d18e:	2801      	cmp	r0, #1
 801d190:	f200 8084 	bhi.w	801d29c <MobleStackGattBeaconGenerator+0x1d0>
 801d194:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801d198:	f88d 8046 	strb.w	r8, [sp, #70]	@ 0x46
 801d19c:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 801d1a0:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 801d1a4:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801d1a8:	f10d 0939 	add.w	r9, sp, #57	@ 0x39
 801d1ac:	f10d 084e 	add.w	r8, sp, #78	@ 0x4e
 801d1b0:	2408      	movs	r4, #8
 801d1b2:	f7fa fc65 	bl	8017a80 <MoblePalBluetoothRandom>
 801d1b6:	3c01      	subs	r4, #1
 801d1b8:	f809 0f01 	strb.w	r0, [r9, #1]!
 801d1bc:	f808 0f01 	strb.w	r0, [r8, #1]!
 801d1c0:	d1f7      	bne.n	801d1b2 <MobleStackGattBeaconGenerator+0xe6>
 801d1c2:	f8d7 3680 	ldr.w	r3, [r7, #1664]	@ 0x680
 801d1c6:	2202      	movs	r2, #2
 801d1c8:	8859      	ldrh	r1, [r3, #2]
 801d1ca:	f10d 0042 	add.w	r0, sp, #66	@ 0x42
 801d1ce:	f7fd fd0a 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801d1d2:	a90d      	add	r1, sp, #52	@ 0x34
 801d1d4:	a809      	add	r0, sp, #36	@ 0x24
 801d1d6:	aa05      	add	r2, sp, #20
 801d1d8:	f7fb f800 	bl	80181dc <BAES_EcbEncrypt>
 801d1dc:	ab07      	add	r3, sp, #28
 801d1de:	cb03      	ldmia	r3!, {r0, r1}
 801d1e0:	f8cd 0047 	str.w	r0, [sp, #71]	@ 0x47
 801d1e4:	9804      	ldr	r0, [sp, #16]
 801d1e6:	f8cd 104b 	str.w	r1, [sp, #75]	@ 0x4b
 801d1ea:	2313      	movs	r3, #19
 801d1ec:	9301      	str	r3, [sp, #4]
 801d1ee:	ab11      	add	r3, sp, #68	@ 0x44
 801d1f0:	9300      	str	r3, [sp, #0]
 801d1f2:	1a29      	subs	r1, r5, r0
 801d1f4:	2316      	movs	r3, #22
 801d1f6:	aa04      	add	r2, sp, #16
 801d1f8:	4430      	add	r0, r6
 801d1fa:	f7ff ff4e 	bl	801d09a <MobleGattBeaconSetSectionGeneric>
 801d1fe:	e78b      	b.n	801d118 <MobleStackGattBeaconGenerator+0x4c>
 801d200:	9412      	str	r4, [sp, #72]	@ 0x48
 801d202:	f8cd 404b 	str.w	r4, [sp, #75]	@ 0x4b
 801d206:	f7fb fc7d 	bl	8018b04 <MoblePalCryptoGetNetworkIdToBeAdvt>
 801d20a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801d20e:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801d212:	f88d 4046 	strb.w	r4, [sp, #70]	@ 0x46
 801d216:	6803      	ldr	r3, [r0, #0]
 801d218:	f8cd 3047 	str.w	r3, [sp, #71]	@ 0x47
 801d21c:	6843      	ldr	r3, [r0, #4]
 801d21e:	f8cd 304b 	str.w	r3, [sp, #75]	@ 0x4b
 801d222:	9804      	ldr	r0, [sp, #16]
 801d224:	230b      	movs	r3, #11
 801d226:	e7e1      	b.n	801d1ec <MobleStackGattBeaconGenerator+0x120>
 801d228:	4a1f      	ldr	r2, [pc, #124]	@ (801d2a8 <MobleStackGattBeaconGenerator+0x1dc>)
 801d22a:	f892 4725 	ldrb.w	r4, [r2, #1829]	@ 0x725
 801d22e:	2c00      	cmp	r4, #0
 801d230:	f47f af73 	bne.w	801d11a <MobleStackGattBeaconGenerator+0x4e>
 801d234:	9804      	ldr	r0, [sp, #16]
 801d236:	2302      	movs	r3, #2
 801d238:	9301      	str	r3, [sp, #4]
 801d23a:	ab09      	add	r3, sp, #36	@ 0x24
 801d23c:	9300      	str	r3, [sp, #0]
 801d23e:	1a29      	subs	r1, r5, r0
 801d240:	f641 0727 	movw	r7, #6183	@ 0x1827
 801d244:	2303      	movs	r3, #3
 801d246:	aa04      	add	r2, sp, #16
 801d248:	4430      	add	r0, r6
 801d24a:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 801d24e:	f7ff ff24 	bl	801d09a <MobleGattBeaconSetSectionGeneric>
 801d252:	2801      	cmp	r0, #1
 801d254:	f63f af60 	bhi.w	801d118 <MobleStackGattBeaconGenerator+0x4c>
 801d258:	4621      	mov	r1, r4
 801d25a:	2210      	movs	r2, #16
 801d25c:	a812      	add	r0, sp, #72	@ 0x48
 801d25e:	9411      	str	r4, [sp, #68]	@ 0x44
 801d260:	f00b ffa4 	bl	80291ac <memset>
 801d264:	4b0f      	ldr	r3, [pc, #60]	@ (801d2a4 <MobleStackGattBeaconGenerator+0x1d8>)
 801d266:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 801d26a:	685b      	ldr	r3, [r3, #4]
 801d26c:	a80d      	add	r0, sp, #52	@ 0x34
 801d26e:	695b      	ldr	r3, [r3, #20]
 801d270:	4798      	blx	r3
 801d272:	f10d 0446 	add.w	r4, sp, #70	@ 0x46
 801d276:	ab0d      	add	r3, sp, #52	@ 0x34
 801d278:	af11      	add	r7, sp, #68	@ 0x44
 801d27a:	461a      	mov	r2, r3
 801d27c:	ca03      	ldmia	r2!, {r0, r1}
 801d27e:	42ba      	cmp	r2, r7
 801d280:	6020      	str	r0, [r4, #0]
 801d282:	6061      	str	r1, [r4, #4]
 801d284:	4613      	mov	r3, r2
 801d286:	f104 0408 	add.w	r4, r4, #8
 801d28a:	d1f6      	bne.n	801d27a <MobleStackGattBeaconGenerator+0x1ae>
 801d28c:	2314      	movs	r3, #20
 801d28e:	e9cd 7300 	strd	r7, r3, [sp]
 801d292:	9804      	ldr	r0, [sp, #16]
 801d294:	e7ad      	b.n	801d1f2 <MobleStackGattBeaconGenerator+0x126>
 801d296:	f04f 33ff 	mov.w	r3, #4294967295
 801d29a:	e73e      	b.n	801d11a <MobleStackGattBeaconGenerator+0x4e>
 801d29c:	2300      	movs	r3, #0
 801d29e:	e73c      	b.n	801d11a <MobleStackGattBeaconGenerator+0x4e>
 801d2a0:	2000140c 	.word	0x2000140c
 801d2a4:	20000314 	.word	0x20000314
 801d2a8:	20002504 	.word	0x20002504

0801d2ac <BnrgmProxyProtocol_DeInit>:
 801d2ac:	4a05      	ldr	r2, [pc, #20]	@ (801d2c4 <BnrgmProxyProtocol_DeInit+0x18>)
 801d2ae:	2300      	movs	r3, #0
 801d2b0:	7213      	strb	r3, [r2, #8]
 801d2b2:	f882 308e 	strb.w	r3, [r2, #142]	@ 0x8e
 801d2b6:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 801d2ba:	b102      	cbz	r2, 801d2be <BnrgmProxyProtocol_DeInit+0x12>
 801d2bc:	7013      	strb	r3, [r2, #0]
 801d2be:	2000      	movs	r0, #0
 801d2c0:	4770      	bx	lr
 801d2c2:	bf00      	nop
 801d2c4:	20000314 	.word	0x20000314

0801d2c8 <BnrgmProxyProtocol_Init>:
 801d2c8:	b510      	push	{r4, lr}
 801d2ca:	4908      	ldr	r1, [pc, #32]	@ (801d2ec <BnrgmProxyProtocol_Init+0x24>)
 801d2cc:	7a0b      	ldrb	r3, [r1, #8]
 801d2ce:	b10b      	cbz	r3, 801d2d4 <BnrgmProxyProtocol_Init+0xc>
 801d2d0:	f7ff ffec 	bl	801d2ac <BnrgmProxyProtocol_DeInit>
 801d2d4:	4a06      	ldr	r2, [pc, #24]	@ (801d2f0 <BnrgmProxyProtocol_Init+0x28>)
 801d2d6:	2400      	movs	r4, #0
 801d2d8:	f881 408e 	strb.w	r4, [r1, #142]	@ 0x8e
 801d2dc:	f102 0088 	add.w	r0, r2, #136	@ 0x88
 801d2e0:	4904      	ldr	r1, [pc, #16]	@ (801d2f4 <BnrgmProxyProtocol_Init+0x2c>)
 801d2e2:	f7fa f929 	bl	8017538 <MoblePalTimerCreate>
 801d2e6:	4620      	mov	r0, r4
 801d2e8:	bd10      	pop	{r4, pc}
 801d2ea:	bf00      	nop
 801d2ec:	20000314 	.word	0x20000314
 801d2f0:	2000031c 	.word	0x2000031c
 801d2f4:	0801f215 	.word	0x0801f215

0801d2f8 <BnrgmProxyProtocol_Notify>:
 801d2f8:	b507      	push	{r0, r1, r2, lr}
 801d2fa:	2301      	movs	r3, #1
 801d2fc:	9300      	str	r3, [sp, #0]
 801d2fe:	4602      	mov	r2, r0
 801d300:	b2cb      	uxtb	r3, r1
 801d302:	4805      	ldr	r0, [pc, #20]	@ (801d318 <BnrgmProxyProtocol_Notify+0x20>)
 801d304:	4905      	ldr	r1, [pc, #20]	@ (801d31c <BnrgmProxyProtocol_Notify+0x24>)
 801d306:	f8b0 0340 	ldrh.w	r0, [r0, #832]	@ 0x340
 801d30a:	f8b1 108c 	ldrh.w	r1, [r1, #140]	@ 0x8c
 801d30e:	f7fd faf3 	bl	801a8f8 <MoblePalBluetoothGattSendNotification>
 801d312:	b003      	add	sp, #12
 801d314:	f85d fb04 	ldr.w	pc, [sp], #4
 801d318:	2000140c 	.word	0x2000140c
 801d31c:	20000314 	.word	0x20000314

0801d320 <BnrgmProxyProtocol_ResetSar>:
 801d320:	b508      	push	{r3, lr}
 801d322:	4b05      	ldr	r3, [pc, #20]	@ (801d338 <BnrgmProxyProtocol_ResetSar+0x18>)
 801d324:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 801d328:	2200      	movs	r2, #0
 801d32a:	721a      	strb	r2, [r3, #8]
 801d32c:	b108      	cbz	r0, 801d332 <BnrgmProxyProtocol_ResetSar+0x12>
 801d32e:	f7fa f995 	bl	801765c <MoblePalTimerStop>
 801d332:	2000      	movs	r0, #0
 801d334:	bd08      	pop	{r3, pc}
 801d336:	bf00      	nop
 801d338:	20000314 	.word	0x20000314

0801d33c <BnrgmProxyProtocol_AddFragment>:
 801d33c:	b570      	push	{r4, r5, r6, lr}
 801d33e:	4d0a      	ldr	r5, [pc, #40]	@ (801d368 <BnrgmProxyProtocol_AddFragment+0x2c>)
 801d340:	7a2b      	ldrb	r3, [r5, #8]
 801d342:	185a      	adds	r2, r3, r1
 801d344:	2a80      	cmp	r2, #128	@ 0x80
 801d346:	460c      	mov	r4, r1
 801d348:	dd03      	ble.n	801d352 <BnrgmProxyProtocol_AddFragment+0x16>
 801d34a:	f7ff ffe9 	bl	801d320 <BnrgmProxyProtocol_ResetSar>
 801d34e:	7a28      	ldrb	r0, [r5, #8]
 801d350:	bd70      	pop	{r4, r5, r6, pc}
 801d352:	f105 060a 	add.w	r6, r5, #10
 801d356:	460a      	mov	r2, r1
 801d358:	4601      	mov	r1, r0
 801d35a:	18f0      	adds	r0, r6, r3
 801d35c:	f00b ff0c 	bl	8029178 <memmove>
 801d360:	7a2b      	ldrb	r3, [r5, #8]
 801d362:	441c      	add	r4, r3
 801d364:	722c      	strb	r4, [r5, #8]
 801d366:	e7f2      	b.n	801d34e <BnrgmProxyProtocol_AddFragment+0x12>
 801d368:	20000314 	.word	0x20000314

0801d36c <BnrgmProxyConfig_ResetFilter>:
 801d36c:	4b07      	ldr	r3, [pc, #28]	@ (801d38c <BnrgmProxyConfig_ResetFilter+0x20>)
 801d36e:	2000      	movs	r0, #0
 801d370:	f883 09ec 	strb.w	r0, [r3, #2540]	@ 0x9ec
 801d374:	f883 09ee 	strb.w	r0, [r3, #2542]	@ 0x9ee
 801d378:	f883 09f2 	strb.w	r0, [r3, #2546]	@ 0x9f2
 801d37c:	f883 09f6 	strb.w	r0, [r3, #2550]	@ 0x9f6
 801d380:	f883 09fa 	strb.w	r0, [r3, #2554]	@ 0x9fa
 801d384:	f883 09fe 	strb.w	r0, [r3, #2558]	@ 0x9fe
 801d388:	4770      	bx	lr
 801d38a:	bf00      	nop
 801d38c:	20002504 	.word	0x20002504

0801d390 <BnrgmProxyConfig_AddProxyClient_Filter>:
 801d390:	b570      	push	{r4, r5, r6, lr}
 801d392:	b300      	cbz	r0, 801d3d6 <BnrgmProxyConfig_AddProxyClient_Filter+0x46>
 801d394:	4b12      	ldr	r3, [pc, #72]	@ (801d3e0 <BnrgmProxyConfig_AddProxyClient_Filter+0x50>)
 801d396:	f893 29ec 	ldrb.w	r2, [r3, #2540]	@ 0x9ec
 801d39a:	b9f2      	cbnz	r2, 801d3da <BnrgmProxyConfig_AddProxyClient_Filter+0x4a>
 801d39c:	f603 14ec 	addw	r4, r3, #2540	@ 0x9ec
 801d3a0:	4611      	mov	r1, r2
 801d3a2:	f04f 35ff 	mov.w	r5, #4294967295
 801d3a6:	78a6      	ldrb	r6, [r4, #2]
 801d3a8:	2e01      	cmp	r6, #1
 801d3aa:	d104      	bne.n	801d3b6 <BnrgmProxyConfig_AddProxyClient_Filter+0x26>
 801d3ac:	88a6      	ldrh	r6, [r4, #4]
 801d3ae:	4286      	cmp	r6, r0
 801d3b0:	d102      	bne.n	801d3b8 <BnrgmProxyConfig_AddProxyClient_Filter+0x28>
 801d3b2:	4610      	mov	r0, r2
 801d3b4:	bd70      	pop	{r4, r5, r6, pc}
 801d3b6:	b24d      	sxtb	r5, r1
 801d3b8:	3101      	adds	r1, #1
 801d3ba:	2905      	cmp	r1, #5
 801d3bc:	f104 0404 	add.w	r4, r4, #4
 801d3c0:	d1f1      	bne.n	801d3a6 <BnrgmProxyConfig_AddProxyClient_Filter+0x16>
 801d3c2:	1c69      	adds	r1, r5, #1
 801d3c4:	d0f5      	beq.n	801d3b2 <BnrgmProxyConfig_AddProxyClient_Filter+0x22>
 801d3c6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801d3ca:	2101      	movs	r1, #1
 801d3cc:	f883 19ee 	strb.w	r1, [r3, #2542]	@ 0x9ee
 801d3d0:	f8a3 09f0 	strh.w	r0, [r3, #2544]	@ 0x9f0
 801d3d4:	e7ed      	b.n	801d3b2 <BnrgmProxyConfig_AddProxyClient_Filter+0x22>
 801d3d6:	2202      	movs	r2, #2
 801d3d8:	e7eb      	b.n	801d3b2 <BnrgmProxyConfig_AddProxyClient_Filter+0x22>
 801d3da:	2201      	movs	r2, #1
 801d3dc:	e7e9      	b.n	801d3b2 <BnrgmProxyConfig_AddProxyClient_Filter+0x22>
 801d3de:	bf00      	nop
 801d3e0:	20002504 	.word	0x20002504

0801d3e4 <BnrgmProxyConfig_CheckProxyFilter>:
 801d3e4:	b510      	push	{r4, lr}
 801d3e6:	4a0d      	ldr	r2, [pc, #52]	@ (801d41c <BnrgmProxyConfig_CheckProxyFilter+0x38>)
 801d3e8:	2100      	movs	r1, #0
 801d3ea:	7893      	ldrb	r3, [r2, #2]
 801d3ec:	2b01      	cmp	r3, #1
 801d3ee:	d102      	bne.n	801d3f6 <BnrgmProxyConfig_CheckProxyFilter+0x12>
 801d3f0:	8894      	ldrh	r4, [r2, #4]
 801d3f2:	4284      	cmp	r4, r0
 801d3f4:	d005      	beq.n	801d402 <BnrgmProxyConfig_CheckProxyFilter+0x1e>
 801d3f6:	3101      	adds	r1, #1
 801d3f8:	2905      	cmp	r1, #5
 801d3fa:	f102 0204 	add.w	r2, r2, #4
 801d3fe:	d1f4      	bne.n	801d3ea <BnrgmProxyConfig_CheckProxyFilter+0x6>
 801d400:	2300      	movs	r3, #0
 801d402:	4a07      	ldr	r2, [pc, #28]	@ (801d420 <BnrgmProxyConfig_CheckProxyFilter+0x3c>)
 801d404:	f892 29ec 	ldrb.w	r2, [r2, #2540]	@ 0x9ec
 801d408:	b12a      	cbz	r2, 801d416 <BnrgmProxyConfig_CheckProxyFilter+0x32>
 801d40a:	2a01      	cmp	r2, #1
 801d40c:	bf06      	itte	eq
 801d40e:	f1c3 0301 	rsbeq	r3, r3, #1
 801d412:	b2db      	uxtbeq	r3, r3
 801d414:	2300      	movne	r3, #0
 801d416:	4618      	mov	r0, r3
 801d418:	bd10      	pop	{r4, pc}
 801d41a:	bf00      	nop
 801d41c:	20002ef0 	.word	0x20002ef0
 801d420:	20002504 	.word	0x20002504

0801d424 <BnrgmProxyProtocol_SendData>:
 801d424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d428:	461d      	mov	r5, r3
 801d42a:	4b21      	ldr	r3, [pc, #132]	@ (801d4b0 <BnrgmProxyProtocol_SendData+0x8c>)
 801d42c:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 801d430:	4604      	mov	r4, r0
 801d432:	b086      	sub	sp, #24
 801d434:	4608      	mov	r0, r1
 801d436:	4617      	mov	r7, r2
 801d438:	b3bb      	cbz	r3, 801d4aa <BnrgmProxyProtocol_SendData+0x86>
 801d43a:	f014 043f 	ands.w	r4, r4, #63	@ 0x3f
 801d43e:	d131      	bne.n	801d4a4 <BnrgmProxyProtocol_SendData+0x80>
 801d440:	f7ff ffd0 	bl	801d3e4 <BnrgmProxyConfig_CheckProxyFilter>
 801d444:	b388      	cbz	r0, 801d4aa <BnrgmProxyProtocol_SendData+0x86>
 801d446:	4620      	mov	r0, r4
 801d448:	463e      	mov	r6, r7
 801d44a:	f044 0980 	orr.w	r9, r4, #128	@ 0x80
 801d44e:	f044 0a40 	orr.w	sl, r4, #64	@ 0x40
 801d452:	e01a      	b.n	801d48a <BnrgmProxyProtocol_SendData+0x66>
 801d454:	2d13      	cmp	r5, #19
 801d456:	46a8      	mov	r8, r5
 801d458:	bf28      	it	cs
 801d45a:	f04f 0813 	movcs.w	r8, #19
 801d45e:	2d13      	cmp	r5, #19
 801d460:	d818      	bhi.n	801d494 <BnrgmProxyProtocol_SendData+0x70>
 801d462:	42b7      	cmp	r7, r6
 801d464:	d01c      	beq.n	801d4a0 <BnrgmProxyProtocol_SendData+0x7c>
 801d466:	f044 03c0 	orr.w	r3, r4, #192	@ 0xc0
 801d46a:	4631      	mov	r1, r6
 801d46c:	4642      	mov	r2, r8
 801d46e:	f10d 0005 	add.w	r0, sp, #5
 801d472:	f88d 3004 	strb.w	r3, [sp, #4]
 801d476:	f00b ff2a 	bl	80292ce <memcpy>
 801d47a:	f108 0101 	add.w	r1, r8, #1
 801d47e:	a801      	add	r0, sp, #4
 801d480:	f7ff ff3a 	bl	801d2f8 <BnrgmProxyProtocol_Notify>
 801d484:	4446      	add	r6, r8
 801d486:	eba5 0508 	sub.w	r5, r5, r8
 801d48a:	2d00      	cmp	r5, #0
 801d48c:	d1e2      	bne.n	801d454 <BnrgmProxyProtocol_SendData+0x30>
 801d48e:	b006      	add	sp, #24
 801d490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d494:	42b7      	cmp	r7, r6
 801d496:	bf0c      	ite	eq
 801d498:	fa5f f38a 	uxtbeq.w	r3, sl
 801d49c:	464b      	movne	r3, r9
 801d49e:	e7e4      	b.n	801d46a <BnrgmProxyProtocol_SendData+0x46>
 801d4a0:	4623      	mov	r3, r4
 801d4a2:	e7e2      	b.n	801d46a <BnrgmProxyProtocol_SendData+0x46>
 801d4a4:	4616      	mov	r6, r2
 801d4a6:	2000      	movs	r0, #0
 801d4a8:	e7cf      	b.n	801d44a <BnrgmProxyProtocol_SendData+0x26>
 801d4aa:	2001      	movs	r0, #1
 801d4ac:	e7ef      	b.n	801d48e <BnrgmProxyProtocol_SendData+0x6a>
 801d4ae:	bf00      	nop
 801d4b0:	20000314 	.word	0x20000314

0801d4b4 <BnrgmStackSendBeaconOverGatt>:
 801d4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4b8:	2500      	movs	r5, #0
 801d4ba:	b08e      	sub	sp, #56	@ 0x38
 801d4bc:	221b      	movs	r2, #27
 801d4be:	4629      	mov	r1, r5
 801d4c0:	a807      	add	r0, sp, #28
 801d4c2:	9506      	str	r5, [sp, #24]
 801d4c4:	f00b fe72 	bl	80291ac <memset>
 801d4c8:	231f      	movs	r3, #31
 801d4ca:	9305      	str	r3, [sp, #20]
 801d4cc:	4b27      	ldr	r3, [pc, #156]	@ (801d56c <BnrgmStackSendBeaconOverGatt+0xb8>)
 801d4ce:	4e28      	ldr	r6, [pc, #160]	@ (801d570 <BnrgmStackSendBeaconOverGatt+0xbc>)
 801d4d0:	f8d3 27e4 	ldr.w	r2, [r3, #2020]	@ 0x7e4
 801d4d4:	f893 761c 	ldrb.w	r7, [r3, #1564]	@ 0x61c
 801d4d8:	8811      	ldrh	r1, [r2, #0]
 801d4da:	f896 4a02 	ldrb.w	r4, [r6, #2562]	@ 0xa02
 801d4de:	f641 0228 	movw	r2, #6184	@ 0x1828
 801d4e2:	4291      	cmp	r1, r2
 801d4e4:	d13f      	bne.n	801d566 <BnrgmStackSendBeaconOverGatt+0xb2>
 801d4e6:	4a23      	ldr	r2, [pc, #140]	@ (801d574 <BnrgmStackSendBeaconOverGatt+0xc0>)
 801d4e8:	f893 165c 	ldrb.w	r1, [r3, #1628]	@ 0x65c
 801d4ec:	f8d3 8658 	ldr.w	r8, [r3, #1624]	@ 0x658
 801d4f0:	4422      	add	r2, r4
 801d4f2:	1b49      	subs	r1, r1, r5
 801d4f4:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 801d4f8:	bf18      	it	ne
 801d4fa:	2101      	movne	r1, #1
 801d4fc:	2a02      	cmp	r2, #2
 801d4fe:	bf0c      	ite	eq
 801d500:	2201      	moveq	r2, #1
 801d502:	462a      	movne	r2, r5
 801d504:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801d508:	9203      	str	r2, [sp, #12]
 801d50a:	4621      	mov	r1, r4
 801d50c:	d123      	bne.n	801d556 <BnrgmStackSendBeaconOverGatt+0xa2>
 801d50e:	2001      	movs	r0, #1
 801d510:	f7fb fc40 	bl	8018d94 <MoblePalCryptoGetNetworkSecurityKeys>
 801d514:	2301      	movs	r3, #1
 801d516:	e9cd 8300 	strd	r8, r3, [sp]
 801d51a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801d51e:	9a03      	ldr	r2, [sp, #12]
 801d520:	a905      	add	r1, sp, #20
 801d522:	a806      	add	r0, sp, #24
 801d524:	f7ff fd6e 	bl	801d004 <MobleBeaconSetSecure>
 801d528:	4605      	mov	r5, r0
 801d52a:	42bc      	cmp	r4, r7
 801d52c:	bf3a      	itte	cc
 801d52e:	3401      	addcc	r4, #1
 801d530:	b2e4      	uxtbcc	r4, r4
 801d532:	2400      	movcs	r4, #0
 801d534:	2d01      	cmp	r5, #1
 801d536:	f886 4a02 	strb.w	r4, [r6, #2562]	@ 0xa02
 801d53a:	d808      	bhi.n	801d54e <BnrgmStackSendBeaconOverGatt+0x9a>
 801d53c:	9b05      	ldr	r3, [sp, #20]
 801d53e:	3b02      	subs	r3, #2
 801d540:	b2db      	uxtb	r3, r3
 801d542:	f10d 021a 	add.w	r2, sp, #26
 801d546:	2100      	movs	r1, #0
 801d548:	2001      	movs	r0, #1
 801d54a:	f7ff ff6b 	bl	801d424 <BnrgmProxyProtocol_SendData>
 801d54e:	4628      	mov	r0, r5
 801d550:	b00e      	add	sp, #56	@ 0x38
 801d552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d556:	4628      	mov	r0, r5
 801d558:	f7fb fc1c 	bl	8018d94 <MoblePalCryptoGetNetworkSecurityKeys>
 801d55c:	e9cd 8500 	strd	r8, r5, [sp]
 801d560:	f100 0328 	add.w	r3, r0, #40	@ 0x28
 801d564:	e7db      	b.n	801d51e <BnrgmStackSendBeaconOverGatt+0x6a>
 801d566:	2502      	movs	r5, #2
 801d568:	e7df      	b.n	801d52a <BnrgmStackSendBeaconOverGatt+0x76>
 801d56a:	bf00      	nop
 801d56c:	2000140c 	.word	0x2000140c
 801d570:	20002504 	.word	0x20002504
 801d574:	20000314 	.word	0x20000314

0801d578 <BnrgmProxyConfig_SendFilterStatus>:
 801d578:	b500      	push	{lr}
 801d57a:	2300      	movs	r3, #0
 801d57c:	4a25      	ldr	r2, [pc, #148]	@ (801d614 <BnrgmProxyConfig_SendFilterStatus+0x9c>)
 801d57e:	b097      	sub	sp, #92	@ 0x5c
 801d580:	4619      	mov	r1, r3
 801d582:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 801d586:	3301      	adds	r3, #1
 801d588:	7880      	ldrb	r0, [r0, #2]
 801d58a:	2801      	cmp	r0, #1
 801d58c:	bf04      	itt	eq
 801d58e:	3101      	addeq	r1, #1
 801d590:	b289      	uxtheq	r1, r1
 801d592:	2b05      	cmp	r3, #5
 801d594:	d1f5      	bne.n	801d582 <BnrgmProxyConfig_SendFilterStatus+0xa>
 801d596:	2303      	movs	r3, #3
 801d598:	f88d 300c 	strb.w	r3, [sp, #12]
 801d59c:	4b1e      	ldr	r3, [pc, #120]	@ (801d618 <BnrgmProxyConfig_SendFilterStatus+0xa0>)
 801d59e:	2202      	movs	r2, #2
 801d5a0:	f893 39ec 	ldrb.w	r3, [r3, #2540]	@ 0x9ec
 801d5a4:	f88d 300d 	strb.w	r3, [sp, #13]
 801d5a8:	f10d 000e 	add.w	r0, sp, #14
 801d5ac:	f7fd fb1b 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801d5b0:	2228      	movs	r2, #40	@ 0x28
 801d5b2:	2100      	movs	r1, #0
 801d5b4:	a80c      	add	r0, sp, #48	@ 0x30
 801d5b6:	f00b fdf9 	bl	80291ac <memset>
 801d5ba:	2301      	movs	r3, #1
 801d5bc:	f88d 303e 	strb.w	r3, [sp, #62]	@ 0x3e
 801d5c0:	f7ff fa5c 	bl	801ca7c <BLEMesh_GetAddress>
 801d5c4:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 801d5c8:	f7ff fb76 	bl	801ccb8 <BnrgmStackConsumeSeqNo>
 801d5cc:	2380      	movs	r3, #128	@ 0x80
 801d5ce:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 801d5d2:	4b12      	ldr	r3, [pc, #72]	@ (801d61c <BnrgmProxyConfig_SendFilterStatus+0xa4>)
 801d5d4:	9010      	str	r0, [sp, #64]	@ 0x40
 801d5d6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 801d5da:	1e9a      	subs	r2, r3, #2
 801d5dc:	4253      	negs	r3, r2
 801d5de:	4153      	adcs	r3, r2
 801d5e0:	9300      	str	r3, [sp, #0]
 801d5e2:	aa03      	add	r2, sp, #12
 801d5e4:	2304      	movs	r3, #4
 801d5e6:	a904      	add	r1, sp, #16
 801d5e8:	a80c      	add	r0, sp, #48	@ 0x30
 801d5ea:	f7fd fb05 	bl	801abf8 <MoblePalCryptoEncryptNetwork>
 801d5ee:	2801      	cmp	r0, #1
 801d5f0:	d80b      	bhi.n	801d60a <BnrgmProxyConfig_SendFilterStatus+0x92>
 801d5f2:	f89d 303e 	ldrb.w	r3, [sp, #62]	@ 0x3e
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	bf14      	ite	ne
 801d5fa:	2308      	movne	r3, #8
 801d5fc:	2304      	moveq	r3, #4
 801d5fe:	330d      	adds	r3, #13
 801d600:	aa04      	add	r2, sp, #16
 801d602:	2100      	movs	r1, #0
 801d604:	2002      	movs	r0, #2
 801d606:	f7ff ff0d 	bl	801d424 <BnrgmProxyProtocol_SendData>
 801d60a:	2000      	movs	r0, #0
 801d60c:	b017      	add	sp, #92	@ 0x5c
 801d60e:	f85d fb04 	ldr.w	pc, [sp], #4
 801d612:	bf00      	nop
 801d614:	20002ef0 	.word	0x20002ef0
 801d618:	20002504 	.word	0x20002504
 801d61c:	20000314 	.word	0x20000314

0801d620 <BnrgmProxyConfig_ProcessData>:
 801d620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d624:	b098      	sub	sp, #96	@ 0x60
 801d626:	4604      	mov	r4, r0
 801d628:	460d      	mov	r5, r1
 801d62a:	224c      	movs	r2, #76	@ 0x4c
 801d62c:	2100      	movs	r1, #0
 801d62e:	a805      	add	r0, sp, #20
 801d630:	f00b fdbc 	bl	80291ac <memset>
 801d634:	b934      	cbnz	r4, 801d644 <BnrgmProxyConfig_ProcessData+0x24>
 801d636:	4b62      	ldr	r3, [pc, #392]	@ (801d7c0 <BnrgmProxyConfig_ProcessData+0x1a0>)
 801d638:	4a62      	ldr	r2, [pc, #392]	@ (801d7c4 <BnrgmProxyConfig_ProcessData+0x1a4>)
 801d63a:	4863      	ldr	r0, [pc, #396]	@ (801d7c8 <BnrgmProxyConfig_ProcessData+0x1a8>)
 801d63c:	f240 1147 	movw	r1, #327	@ 0x147
 801d640:	f00a fecc 	bl	80283dc <__assert_func>
 801d644:	f1a5 030e 	sub.w	r3, r5, #14
 801d648:	2b0f      	cmp	r3, #15
 801d64a:	d903      	bls.n	801d654 <BnrgmProxyConfig_ProcessData+0x34>
 801d64c:	2003      	movs	r0, #3
 801d64e:	b018      	add	sp, #96	@ 0x60
 801d650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d654:	2380      	movs	r3, #128	@ 0x80
 801d656:	a908      	add	r1, sp, #32
 801d658:	4620      	mov	r0, r4
 801d65a:	9406      	str	r4, [sp, #24]
 801d65c:	f88d 501c 	strb.w	r5, [sp, #28]
 801d660:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
 801d664:	f7fb ffda 	bl	801961c <MoblePalCryptoParseNetHdr>
 801d668:	f89d 1021 	ldrb.w	r1, [sp, #33]	@ 0x21
 801d66c:	f10d 002e 	add.w	r0, sp, #46	@ 0x2e
 801d670:	f7fc fb22 	bl	8019cb8 <BnrgmPalCryptoMatchNid>
 801d674:	b108      	cbz	r0, 801d67a <BnrgmProxyConfig_ProcessData+0x5a>
 801d676:	2002      	movs	r0, #2
 801d678:	e7e9      	b.n	801d64e <BnrgmProxyConfig_ProcessData+0x2e>
 801d67a:	a901      	add	r1, sp, #4
 801d67c:	a805      	add	r0, sp, #20
 801d67e:	f7fd fd49 	bl	801b114 <BnrgmPalCryptoDecryptNetwork>
 801d682:	2801      	cmp	r0, #1
 801d684:	d8f7      	bhi.n	801d676 <BnrgmProxyConfig_ProcessData+0x56>
 801d686:	f89d 3022 	ldrb.w	r3, [sp, #34]	@ 0x22
 801d68a:	2b00      	cmp	r3, #0
 801d68c:	d0f3      	beq.n	801d676 <BnrgmProxyConfig_ProcessData+0x56>
 801d68e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801d692:	2b00      	cmp	r3, #0
 801d694:	d1ef      	bne.n	801d676 <BnrgmProxyConfig_ProcessData+0x56>
 801d696:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 801d69a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801d69e:	2a00      	cmp	r2, #0
 801d6a0:	dde9      	ble.n	801d676 <BnrgmProxyConfig_ProcessData+0x56>
 801d6a2:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801d6a6:	2a00      	cmp	r2, #0
 801d6a8:	d1e5      	bne.n	801d676 <BnrgmProxyConfig_ProcessData+0x56>
 801d6aa:	4e48      	ldr	r6, [pc, #288]	@ (801d7cc <BnrgmProxyConfig_ProcessData+0x1ac>)
 801d6ac:	f8a6 36f6 	strh.w	r3, [r6, #1782]	@ 0x6f6
 801d6b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801d6b4:	3b12      	subs	r3, #18
 801d6b6:	b2dc      	uxtb	r4, r3
 801d6b8:	2201      	movs	r2, #1
 801d6ba:	2c0f      	cmp	r4, #15
 801d6bc:	f886 26f4 	strb.w	r2, [r6, #1780]	@ 0x6f4
 801d6c0:	d8c4      	bhi.n	801d64c <BnrgmProxyConfig_ProcessData+0x2c>
 801d6c2:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801d6c6:	2802      	cmp	r0, #2
 801d6c8:	d8d5      	bhi.n	801d676 <BnrgmProxyConfig_ProcessData+0x56>
 801d6ca:	2c00      	cmp	r4, #0
 801d6cc:	d0d3      	beq.n	801d676 <BnrgmProxyConfig_ProcessData+0x56>
 801d6ce:	4290      	cmp	r0, r2
 801d6d0:	d00a      	beq.n	801d6e8 <BnrgmProxyConfig_ProcessData+0xc8>
 801d6d2:	2802      	cmp	r0, #2
 801d6d4:	d043      	beq.n	801d75e <BnrgmProxyConfig_ProcessData+0x13e>
 801d6d6:	f7ff fe49 	bl	801d36c <BnrgmProxyConfig_ResetFilter>
 801d6da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801d6de:	f886 39ec 	strb.w	r3, [r6, #2540]	@ 0x9ec
 801d6e2:	f7ff ff49 	bl	801d578 <BnrgmProxyConfig_SendFilterStatus>
 801d6e6:	e7b2      	b.n	801d64e <BnrgmProxyConfig_ProcessData+0x2e>
 801d6e8:	2c01      	cmp	r4, #1
 801d6ea:	d0c4      	beq.n	801d676 <BnrgmProxyConfig_ProcessData+0x56>
 801d6ec:	f014 0501 	ands.w	r5, r4, #1
 801d6f0:	d1c1      	bne.n	801d676 <BnrgmProxyConfig_ProcessData+0x56>
 801d6f2:	0864      	lsrs	r4, r4, #1
 801d6f4:	f10d 0705 	add.w	r7, sp, #5
 801d6f8:	466a      	mov	r2, sp
 801d6fa:	2102      	movs	r1, #2
 801d6fc:	4638      	mov	r0, r7
 801d6fe:	f7fd fa4b 	bl	801ab98 <MobleInputStreamGetBigEndian>
 801d702:	f8bd c000 	ldrh.w	ip, [sp]
 801d706:	f1bc 0f00 	cmp.w	ip, #0
 801d70a:	d0ea      	beq.n	801d6e2 <BnrgmProxyConfig_ProcessData+0xc2>
 801d70c:	2200      	movs	r2, #0
 801d70e:	4830      	ldr	r0, [pc, #192]	@ (801d7d0 <BnrgmProxyConfig_ProcessData+0x1b0>)
 801d710:	4611      	mov	r1, r2
 801d712:	f04f 33ff 	mov.w	r3, #4294967295
 801d716:	f890 8002 	ldrb.w	r8, [r0, #2]
 801d71a:	f1b8 0f01 	cmp.w	r8, #1
 801d71e:	fa4f fe81 	sxtb.w	lr, r1
 801d722:	d11a      	bne.n	801d75a <BnrgmProxyConfig_ProcessData+0x13a>
 801d724:	f8b0 e004 	ldrh.w	lr, [r0, #4]
 801d728:	45e6      	cmp	lr, ip
 801d72a:	bf08      	it	eq
 801d72c:	2201      	moveq	r2, #1
 801d72e:	3101      	adds	r1, #1
 801d730:	2905      	cmp	r1, #5
 801d732:	f100 0004 	add.w	r0, r0, #4
 801d736:	d1ee      	bne.n	801d716 <BnrgmProxyConfig_ProcessData+0xf6>
 801d738:	1c59      	adds	r1, r3, #1
 801d73a:	d0d2      	beq.n	801d6e2 <BnrgmProxyConfig_ProcessData+0xc2>
 801d73c:	b932      	cbnz	r2, 801d74c <BnrgmProxyConfig_ProcessData+0x12c>
 801d73e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801d742:	2201      	movs	r2, #1
 801d744:	f883 29ee 	strb.w	r2, [r3, #2542]	@ 0x9ee
 801d748:	f8a3 c9f0 	strh.w	ip, [r3, #2544]	@ 0x9f0
 801d74c:	3501      	adds	r5, #1
 801d74e:	b2eb      	uxtb	r3, r5
 801d750:	429c      	cmp	r4, r3
 801d752:	f107 0702 	add.w	r7, r7, #2
 801d756:	d8cf      	bhi.n	801d6f8 <BnrgmProxyConfig_ProcessData+0xd8>
 801d758:	e7c3      	b.n	801d6e2 <BnrgmProxyConfig_ProcessData+0xc2>
 801d75a:	4673      	mov	r3, lr
 801d75c:	e7e7      	b.n	801d72e <BnrgmProxyConfig_ProcessData+0x10e>
 801d75e:	2c01      	cmp	r4, #1
 801d760:	f43f af75 	beq.w	801d64e <BnrgmProxyConfig_ProcessData+0x2e>
 801d764:	f014 0501 	ands.w	r5, r4, #1
 801d768:	f47f af71 	bne.w	801d64e <BnrgmProxyConfig_ProcessData+0x2e>
 801d76c:	0864      	lsrs	r4, r4, #1
 801d76e:	f10d 0605 	add.w	r6, sp, #5
 801d772:	462f      	mov	r7, r5
 801d774:	466a      	mov	r2, sp
 801d776:	2102      	movs	r1, #2
 801d778:	4630      	mov	r0, r6
 801d77a:	f7fd fa0d 	bl	801ab98 <MobleInputStreamGetBigEndian>
 801d77e:	2300      	movs	r3, #0
 801d780:	f8bd 0000 	ldrh.w	r0, [sp]
 801d784:	4a12      	ldr	r2, [pc, #72]	@ (801d7d0 <BnrgmProxyConfig_ProcessData+0x1b0>)
 801d786:	4619      	mov	r1, r3
 801d788:	f892 c002 	ldrb.w	ip, [r2, #2]
 801d78c:	f1bc 0f01 	cmp.w	ip, #1
 801d790:	d112      	bne.n	801d7b8 <BnrgmProxyConfig_ProcessData+0x198>
 801d792:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 801d796:	4584      	cmp	ip, r0
 801d798:	d100      	bne.n	801d79c <BnrgmProxyConfig_ProcessData+0x17c>
 801d79a:	7097      	strb	r7, [r2, #2]
 801d79c:	3101      	adds	r1, #1
 801d79e:	2905      	cmp	r1, #5
 801d7a0:	f102 0204 	add.w	r2, r2, #4
 801d7a4:	d1f0      	bne.n	801d788 <BnrgmProxyConfig_ProcessData+0x168>
 801d7a6:	2b05      	cmp	r3, #5
 801d7a8:	d09b      	beq.n	801d6e2 <BnrgmProxyConfig_ProcessData+0xc2>
 801d7aa:	3501      	adds	r5, #1
 801d7ac:	b2eb      	uxtb	r3, r5
 801d7ae:	42a3      	cmp	r3, r4
 801d7b0:	f106 0602 	add.w	r6, r6, #2
 801d7b4:	d3de      	bcc.n	801d774 <BnrgmProxyConfig_ProcessData+0x154>
 801d7b6:	e794      	b.n	801d6e2 <BnrgmProxyConfig_ProcessData+0xc2>
 801d7b8:	3301      	adds	r3, #1
 801d7ba:	b2db      	uxtb	r3, r3
 801d7bc:	e7ee      	b.n	801d79c <BnrgmProxyConfig_ProcessData+0x17c>
 801d7be:	bf00      	nop
 801d7c0:	08030f20 	.word	0x08030f20
 801d7c4:	0802f4b0 	.word	0x0802f4b0
 801d7c8:	08031405 	.word	0x08031405
 801d7cc:	20002504 	.word	0x20002504
 801d7d0:	20002ef0 	.word	0x20002ef0

0801d7d4 <BnrgmFrndMgmtSubscriptionListAdd>:
 801d7d4:	4b07      	ldr	r3, [pc, #28]	@ (801d7f4 <BnrgmFrndMgmtSubscriptionListAdd+0x20>)
 801d7d6:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 801d7da:	2b02      	cmp	r3, #2
 801d7dc:	d007      	beq.n	801d7ee <BnrgmFrndMgmtSubscriptionListAdd+0x1a>
 801d7de:	4b06      	ldr	r3, [pc, #24]	@ (801d7f8 <BnrgmFrndMgmtSubscriptionListAdd+0x24>)
 801d7e0:	f8d3 3a04 	ldr.w	r3, [r3, #2564]	@ 0xa04
 801d7e4:	2201      	movs	r2, #1
 801d7e6:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
 801d7ea:	8318      	strh	r0, [r3, #24]
 801d7ec:	2300      	movs	r3, #0
 801d7ee:	4618      	mov	r0, r3
 801d7f0:	4770      	bx	lr
 801d7f2:	bf00      	nop
 801d7f4:	20000314 	.word	0x20000314
 801d7f8:	20002504 	.word	0x20002504

0801d7fc <MobleConfigModel_SubscriptionOverwrite>:
 801d7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7fe:	b930      	cbnz	r0, 801d80e <MobleConfigModel_SubscriptionOverwrite+0x12>
 801d800:	4b2d      	ldr	r3, [pc, #180]	@ (801d8b8 <MobleConfigModel_SubscriptionOverwrite+0xbc>)
 801d802:	4a2e      	ldr	r2, [pc, #184]	@ (801d8bc <MobleConfigModel_SubscriptionOverwrite+0xc0>)
 801d804:	482e      	ldr	r0, [pc, #184]	@ (801d8c0 <MobleConfigModel_SubscriptionOverwrite+0xc4>)
 801d806:	f240 61be 	movw	r1, #1726	@ 0x6be
 801d80a:	f00a fde7 	bl	80283dc <__assert_func>
 801d80e:	6804      	ldr	r4, [r0, #0]
 801d810:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801d812:	f894 c01c 	ldrb.w	ip, [r4, #28]
 801d816:	8805      	ldrh	r5, [r0, #0]
 801d818:	4295      	cmp	r5, r2
 801d81a:	d101      	bne.n	801d820 <MobleConfigModel_SubscriptionOverwrite+0x24>
 801d81c:	2902      	cmp	r1, #2
 801d81e:	d02a      	beq.n	801d876 <MobleConfigModel_SubscriptionOverwrite+0x7a>
 801d820:	2500      	movs	r5, #0
 801d822:	f104 0720 	add.w	r7, r4, #32
 801d826:	4628      	mov	r0, r5
 801d828:	b2ee      	uxtb	r6, r5
 801d82a:	45b4      	cmp	ip, r6
 801d82c:	d931      	bls.n	801d892 <MobleConfigModel_SubscriptionOverwrite+0x96>
 801d82e:	f857 6f04 	ldr.w	r6, [r7, #4]!
 801d832:	f8b6 e000 	ldrh.w	lr, [r6]
 801d836:	4596      	cmp	lr, r2
 801d838:	f105 0501 	add.w	r5, r5, #1
 801d83c:	f04f 0001 	mov.w	r0, #1
 801d840:	d1f2      	bne.n	801d828 <MobleConfigModel_SubscriptionOverwrite+0x2c>
 801d842:	2000      	movs	r0, #0
 801d844:	f106 0278 	add.w	r2, r6, #120	@ 0x78
 801d848:	2538      	movs	r5, #56	@ 0x38
 801d84a:	fb05 f700 	mul.w	r7, r5, r0
 801d84e:	59d7      	ldr	r7, [r2, r7]
 801d850:	428f      	cmp	r7, r1
 801d852:	d12c      	bne.n	801d8ae <MobleConfigModel_SubscriptionOverwrite+0xb2>
 801d854:	f403 4140 	and.w	r1, r3, #49152	@ 0xc000
 801d858:	2200      	movs	r2, #0
 801d85a:	460d      	mov	r5, r1
 801d85c:	f5b1 4f40 	cmp.w	r1, #49152	@ 0xc000
 801d860:	d002      	beq.n	801d868 <MobleConfigModel_SubscriptionOverwrite+0x6c>
 801d862:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 801d866:	d11d      	bne.n	801d8a4 <MobleConfigModel_SubscriptionOverwrite+0xa8>
 801d868:	211c      	movs	r1, #28
 801d86a:	fb01 2200 	mla	r2, r1, r0, r2
 801d86e:	3240      	adds	r2, #64	@ 0x40
 801d870:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801d874:	e006      	b.n	801d884 <MobleConfigModel_SubscriptionOverwrite+0x88>
 801d876:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 801d87a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 801d87e:	d109      	bne.n	801d894 <MobleConfigModel_SubscriptionOverwrite+0x98>
 801d880:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 801d884:	4618      	mov	r0, r3
 801d886:	f7ff ffa5 	bl	801d7d4 <BnrgmFrndMgmtSubscriptionListAdd>
 801d88a:	4620      	mov	r0, r4
 801d88c:	f7fe ffe4 	bl	801c858 <MobleConfigNetworkSave>
 801d890:	2000      	movs	r0, #0
 801d892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d894:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 801d898:	f5b2 4f40 	cmp.w	r2, #49152	@ 0xc000
 801d89c:	d1f5      	bne.n	801d88a <MobleConfigModel_SubscriptionOverwrite+0x8e>
 801d89e:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
 801d8a2:	e7ef      	b.n	801d884 <MobleConfigModel_SubscriptionOverwrite+0x88>
 801d8a4:	3201      	adds	r2, #1
 801d8a6:	2a0a      	cmp	r2, #10
 801d8a8:	d1d8      	bne.n	801d85c <MobleConfigModel_SubscriptionOverwrite+0x60>
 801d8aa:	2001      	movs	r0, #1
 801d8ac:	e7f1      	b.n	801d892 <MobleConfigModel_SubscriptionOverwrite+0x96>
 801d8ae:	3001      	adds	r0, #1
 801d8b0:	280b      	cmp	r0, #11
 801d8b2:	d1ca      	bne.n	801d84a <MobleConfigModel_SubscriptionOverwrite+0x4e>
 801d8b4:	2002      	movs	r0, #2
 801d8b6:	e7ec      	b.n	801d892 <MobleConfigModel_SubscriptionOverwrite+0x96>
 801d8b8:	08031449 	.word	0x08031449
 801d8bc:	0802f4cd 	.word	0x0802f4cd
 801d8c0:	08030edb 	.word	0x08030edb

0801d8c4 <MobleConfigModel_SubscriptionAdd>:
 801d8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8c6:	b930      	cbnz	r0, 801d8d6 <MobleConfigModel_SubscriptionAdd+0x12>
 801d8c8:	4b41      	ldr	r3, [pc, #260]	@ (801d9d0 <MobleConfigModel_SubscriptionAdd+0x10c>)
 801d8ca:	4a42      	ldr	r2, [pc, #264]	@ (801d9d4 <MobleConfigModel_SubscriptionAdd+0x110>)
 801d8cc:	4842      	ldr	r0, [pc, #264]	@ (801d9d8 <MobleConfigModel_SubscriptionAdd+0x114>)
 801d8ce:	f240 519f 	movw	r1, #1439	@ 0x59f
 801d8d2:	f00a fd83 	bl	80283dc <__assert_func>
 801d8d6:	6805      	ldr	r5, [r0, #0]
 801d8d8:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 801d8da:	f895 c01c 	ldrb.w	ip, [r5, #28]
 801d8de:	8804      	ldrh	r4, [r0, #0]
 801d8e0:	4294      	cmp	r4, r2
 801d8e2:	d101      	bne.n	801d8e8 <MobleConfigModel_SubscriptionAdd+0x24>
 801d8e4:	2902      	cmp	r1, #2
 801d8e6:	d02f      	beq.n	801d948 <MobleConfigModel_SubscriptionAdd+0x84>
 801d8e8:	2000      	movs	r0, #0
 801d8ea:	f105 0720 	add.w	r7, r5, #32
 801d8ee:	4604      	mov	r4, r0
 801d8f0:	b2c6      	uxtb	r6, r0
 801d8f2:	45b4      	cmp	ip, r6
 801d8f4:	d94a      	bls.n	801d98c <MobleConfigModel_SubscriptionAdd+0xc8>
 801d8f6:	f857 6f04 	ldr.w	r6, [r7, #4]!
 801d8fa:	f8b6 e000 	ldrh.w	lr, [r6]
 801d8fe:	4596      	cmp	lr, r2
 801d900:	f100 0001 	add.w	r0, r0, #1
 801d904:	f04f 0401 	mov.w	r4, #1
 801d908:	d1f2      	bne.n	801d8f0 <MobleConfigModel_SubscriptionAdd+0x2c>
 801d90a:	2000      	movs	r0, #0
 801d90c:	2438      	movs	r4, #56	@ 0x38
 801d90e:	f106 0c78 	add.w	ip, r6, #120	@ 0x78
 801d912:	fb04 f200 	mul.w	r2, r4, r0
 801d916:	f85c 7002 	ldr.w	r7, [ip, r2]
 801d91a:	428f      	cmp	r7, r1
 801d91c:	d152      	bne.n	801d9c4 <MobleConfigModel_SubscriptionAdd+0x100>
 801d91e:	f102 017e 	add.w	r1, r2, #126	@ 0x7e
 801d922:	f403 4740 	and.w	r7, r3, #49152	@ 0xc000
 801d926:	4431      	add	r1, r6
 801d928:	2200      	movs	r2, #0
 801d92a:	46bc      	mov	ip, r7
 801d92c:	f831 4f02 	ldrh.w	r4, [r1, #2]!
 801d930:	2c00      	cmp	r4, #0
 801d932:	d140      	bne.n	801d9b6 <MobleConfigModel_SubscriptionAdd+0xf2>
 801d934:	f5b7 4f40 	cmp.w	r7, #49152	@ 0xc000
 801d938:	d13a      	bne.n	801d9b0 <MobleConfigModel_SubscriptionAdd+0xec>
 801d93a:	211c      	movs	r1, #28
 801d93c:	fb01 2200 	mla	r2, r1, r0, r2
 801d940:	3240      	adds	r2, #64	@ 0x40
 801d942:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801d946:	e009      	b.n	801d95c <MobleConfigModel_SubscriptionAdd+0x98>
 801d948:	f8b0 6066 	ldrh.w	r6, [r0, #102]	@ 0x66
 801d94c:	b976      	cbnz	r6, 801d96c <MobleConfigModel_SubscriptionAdd+0xa8>
 801d94e:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 801d952:	f5b2 4f40 	cmp.w	r2, #49152	@ 0xc000
 801d956:	d109      	bne.n	801d96c <MobleConfigModel_SubscriptionAdd+0xa8>
 801d958:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
 801d95c:	4618      	mov	r0, r3
 801d95e:	f7ff ff39 	bl	801d7d4 <BnrgmFrndMgmtSubscriptionListAdd>
 801d962:	4628      	mov	r0, r5
 801d964:	f7fe ff78 	bl	801c858 <MobleConfigNetworkSave>
 801d968:	2400      	movs	r4, #0
 801d96a:	e00f      	b.n	801d98c <MobleConfigModel_SubscriptionAdd+0xc8>
 801d96c:	f8b0 4068 	ldrh.w	r4, [r0, #104]	@ 0x68
 801d970:	b974      	cbnz	r4, 801d990 <MobleConfigModel_SubscriptionAdd+0xcc>
 801d972:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 801d976:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 801d97a:	d109      	bne.n	801d990 <MobleConfigModel_SubscriptionAdd+0xcc>
 801d97c:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 801d980:	4618      	mov	r0, r3
 801d982:	f7ff ff27 	bl	801d7d4 <BnrgmFrndMgmtSubscriptionListAdd>
 801d986:	4628      	mov	r0, r5
 801d988:	f7fe ff66 	bl	801c858 <MobleConfigNetworkSave>
 801d98c:	4620      	mov	r0, r4
 801d98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d990:	429e      	cmp	r6, r3
 801d992:	d104      	bne.n	801d99e <MobleConfigModel_SubscriptionAdd+0xda>
 801d994:	f406 4640 	and.w	r6, r6, #49152	@ 0xc000
 801d998:	f5b6 4f40 	cmp.w	r6, #49152	@ 0xc000
 801d99c:	d0e4      	beq.n	801d968 <MobleConfigModel_SubscriptionAdd+0xa4>
 801d99e:	429c      	cmp	r4, r3
 801d9a0:	d10e      	bne.n	801d9c0 <MobleConfigModel_SubscriptionAdd+0xfc>
 801d9a2:	f404 4440 	and.w	r4, r4, #49152	@ 0xc000
 801d9a6:	f5b4 4400 	subs.w	r4, r4, #32768	@ 0x8000
 801d9aa:	bf18      	it	ne
 801d9ac:	2401      	movne	r4, #1
 801d9ae:	e7ed      	b.n	801d98c <MobleConfigModel_SubscriptionAdd+0xc8>
 801d9b0:	f5bc 4f00 	cmp.w	ip, #32768	@ 0x8000
 801d9b4:	d0c1      	beq.n	801d93a <MobleConfigModel_SubscriptionAdd+0x76>
 801d9b6:	429c      	cmp	r4, r3
 801d9b8:	d0d6      	beq.n	801d968 <MobleConfigModel_SubscriptionAdd+0xa4>
 801d9ba:	3201      	adds	r2, #1
 801d9bc:	2a0a      	cmp	r2, #10
 801d9be:	d1b5      	bne.n	801d92c <MobleConfigModel_SubscriptionAdd+0x68>
 801d9c0:	2401      	movs	r4, #1
 801d9c2:	e7e3      	b.n	801d98c <MobleConfigModel_SubscriptionAdd+0xc8>
 801d9c4:	3001      	adds	r0, #1
 801d9c6:	280b      	cmp	r0, #11
 801d9c8:	d1a3      	bne.n	801d912 <MobleConfigModel_SubscriptionAdd+0x4e>
 801d9ca:	2402      	movs	r4, #2
 801d9cc:	e7de      	b.n	801d98c <MobleConfigModel_SubscriptionAdd+0xc8>
 801d9ce:	bf00      	nop
 801d9d0:	08031449 	.word	0x08031449
 801d9d4:	0802f4f4 	.word	0x0802f4f4
 801d9d8:	08030edb 	.word	0x08030edb

0801d9dc <BnrgmFrndMgmtSubscriptionListRemove>:
 801d9dc:	4b08      	ldr	r3, [pc, #32]	@ (801da00 <BnrgmFrndMgmtSubscriptionListRemove+0x24>)
 801d9de:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 801d9e2:	2b01      	cmp	r3, #1
 801d9e4:	bf04      	itt	eq
 801d9e6:	4a07      	ldreq	r2, [pc, #28]	@ (801da04 <BnrgmFrndMgmtSubscriptionListRemove+0x28>)
 801d9e8:	f8d2 2a04 	ldreq.w	r2, [r2, #2564]	@ 0xa04
 801d9ec:	f04f 0302 	mov.w	r3, #2
 801d9f0:	bf03      	ittte	eq
 801d9f2:	8310      	strheq	r0, [r2, #24]
 801d9f4:	f882 306a 	strbeq.w	r3, [r2, #106]	@ 0x6a
 801d9f8:	2000      	moveq	r0, #0
 801d9fa:	4618      	movne	r0, r3
 801d9fc:	4770      	bx	lr
 801d9fe:	bf00      	nop
 801da00:	20000314 	.word	0x20000314
 801da04:	20002504 	.word	0x20002504

0801da08 <MobleConfigModel_SubscriptionDelete>:
 801da08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da0a:	b930      	cbnz	r0, 801da1a <MobleConfigModel_SubscriptionDelete+0x12>
 801da0c:	4b39      	ldr	r3, [pc, #228]	@ (801daf4 <MobleConfigModel_SubscriptionDelete+0xec>)
 801da0e:	4a3a      	ldr	r2, [pc, #232]	@ (801daf8 <MobleConfigModel_SubscriptionDelete+0xf0>)
 801da10:	483a      	ldr	r0, [pc, #232]	@ (801dafc <MobleConfigModel_SubscriptionDelete+0xf4>)
 801da12:	f44f 61c3 	mov.w	r1, #1560	@ 0x618
 801da16:	f00a fce1 	bl	80283dc <__assert_func>
 801da1a:	6805      	ldr	r5, [r0, #0]
 801da1c:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 801da1e:	f895 c01c 	ldrb.w	ip, [r5, #28]
 801da22:	8804      	ldrh	r4, [r0, #0]
 801da24:	4294      	cmp	r4, r2
 801da26:	d139      	bne.n	801da9c <MobleConfigModel_SubscriptionDelete+0x94>
 801da28:	2902      	cmp	r1, #2
 801da2a:	d137      	bne.n	801da9c <MobleConfigModel_SubscriptionDelete+0x94>
 801da2c:	f8b0 4066 	ldrh.w	r4, [r0, #102]	@ 0x66
 801da30:	429c      	cmp	r4, r3
 801da32:	d110      	bne.n	801da56 <MobleConfigModel_SubscriptionDelete+0x4e>
 801da34:	f404 4240 	and.w	r2, r4, #49152	@ 0xc000
 801da38:	f5b2 4f40 	cmp.w	r2, #49152	@ 0xc000
 801da3c:	d10b      	bne.n	801da56 <MobleConfigModel_SubscriptionDelete+0x4e>
 801da3e:	2600      	movs	r6, #0
 801da40:	f8a0 6066 	strh.w	r6, [r0, #102]	@ 0x66
 801da44:	4620      	mov	r0, r4
 801da46:	f7ff ffc9 	bl	801d9dc <BnrgmFrndMgmtSubscriptionListRemove>
 801da4a:	4628      	mov	r0, r5
 801da4c:	f7fe ff04 	bl	801c858 <MobleConfigNetworkSave>
 801da50:	4634      	mov	r4, r6
 801da52:	4620      	mov	r0, r4
 801da54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da56:	f8b0 2068 	ldrh.w	r2, [r0, #104]	@ 0x68
 801da5a:	429a      	cmp	r2, r3
 801da5c:	d10e      	bne.n	801da7c <MobleConfigModel_SubscriptionDelete+0x74>
 801da5e:	f403 4140 	and.w	r1, r3, #49152	@ 0xc000
 801da62:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801da66:	d109      	bne.n	801da7c <MobleConfigModel_SubscriptionDelete+0x74>
 801da68:	2400      	movs	r4, #0
 801da6a:	f8a0 4068 	strh.w	r4, [r0, #104]	@ 0x68
 801da6e:	4618      	mov	r0, r3
 801da70:	f7ff ffb4 	bl	801d9dc <BnrgmFrndMgmtSubscriptionListRemove>
 801da74:	4628      	mov	r0, r5
 801da76:	f7fe feef 	bl	801c858 <MobleConfigNetworkSave>
 801da7a:	e7ea      	b.n	801da52 <MobleConfigModel_SubscriptionDelete+0x4a>
 801da7c:	2c00      	cmp	r4, #0
 801da7e:	d0e8      	beq.n	801da52 <MobleConfigModel_SubscriptionDelete+0x4a>
 801da80:	1e14      	subs	r4, r2, #0
 801da82:	bf18      	it	ne
 801da84:	2401      	movne	r4, #1
 801da86:	e7e4      	b.n	801da52 <MobleConfigModel_SubscriptionDelete+0x4a>
 801da88:	3201      	adds	r2, #1
 801da8a:	2a0a      	cmp	r2, #10
 801da8c:	d125      	bne.n	801dada <MobleConfigModel_SubscriptionDelete+0xd2>
 801da8e:	3c00      	subs	r4, #0
 801da90:	e7f7      	b.n	801da82 <MobleConfigModel_SubscriptionDelete+0x7a>
 801da92:	3001      	adds	r0, #1
 801da94:	280b      	cmp	r0, #11
 801da96:	d116      	bne.n	801dac6 <MobleConfigModel_SubscriptionDelete+0xbe>
 801da98:	2402      	movs	r4, #2
 801da9a:	e7da      	b.n	801da52 <MobleConfigModel_SubscriptionDelete+0x4a>
 801da9c:	2000      	movs	r0, #0
 801da9e:	f105 0720 	add.w	r7, r5, #32
 801daa2:	4604      	mov	r4, r0
 801daa4:	b2c6      	uxtb	r6, r0
 801daa6:	45b4      	cmp	ip, r6
 801daa8:	d9d3      	bls.n	801da52 <MobleConfigModel_SubscriptionDelete+0x4a>
 801daaa:	f857 6f04 	ldr.w	r6, [r7, #4]!
 801daae:	f8b6 e000 	ldrh.w	lr, [r6]
 801dab2:	4596      	cmp	lr, r2
 801dab4:	f100 0001 	add.w	r0, r0, #1
 801dab8:	f04f 0401 	mov.w	r4, #1
 801dabc:	d1f2      	bne.n	801daa4 <MobleConfigModel_SubscriptionDelete+0x9c>
 801dabe:	2000      	movs	r0, #0
 801dac0:	2438      	movs	r4, #56	@ 0x38
 801dac2:	f106 0c78 	add.w	ip, r6, #120	@ 0x78
 801dac6:	fb04 f200 	mul.w	r2, r4, r0
 801daca:	f85c 7002 	ldr.w	r7, [ip, r2]
 801dace:	428f      	cmp	r7, r1
 801dad0:	d1df      	bne.n	801da92 <MobleConfigModel_SubscriptionDelete+0x8a>
 801dad2:	f102 017e 	add.w	r1, r2, #126	@ 0x7e
 801dad6:	4431      	add	r1, r6
 801dad8:	2200      	movs	r2, #0
 801dada:	f831 4f02 	ldrh.w	r4, [r1, #2]!
 801dade:	429c      	cmp	r4, r3
 801dae0:	d1d2      	bne.n	801da88 <MobleConfigModel_SubscriptionDelete+0x80>
 801dae2:	211c      	movs	r1, #28
 801dae4:	fb01 2200 	mla	r2, r1, r0, r2
 801dae8:	3240      	adds	r2, #64	@ 0x40
 801daea:	2400      	movs	r4, #0
 801daec:	f826 4012 	strh.w	r4, [r6, r2, lsl #1]
 801daf0:	e7bd      	b.n	801da6e <MobleConfigModel_SubscriptionDelete+0x66>
 801daf2:	bf00      	nop
 801daf4:	08031449 	.word	0x08031449
 801daf8:	0802f515 	.word	0x0802f515
 801dafc:	08030edb 	.word	0x08030edb

0801db00 <BnrgmFrndFnBreakFriendship>:
 801db00:	b570      	push	{r4, r5, r6, lr}
 801db02:	460c      	mov	r4, r1
 801db04:	2500      	movs	r5, #0
 801db06:	f44f 764d 	mov.w	r6, #820	@ 0x334
 801db0a:	78a3      	ldrb	r3, [r4, #2]
 801db0c:	b2ea      	uxtb	r2, r5
 801db0e:	4293      	cmp	r3, r2
 801db10:	d801      	bhi.n	801db16 <BnrgmFrndFnBreakFriendship+0x16>
 801db12:	2000      	movs	r0, #0
 801db14:	bd70      	pop	{r4, r5, r6, pc}
 801db16:	fb06 4302 	mla	r3, r6, r2, r4
 801db1a:	6998      	ldr	r0, [r3, #24]
 801db1c:	b108      	cbz	r0, 801db22 <BnrgmFrndFnBreakFriendship+0x22>
 801db1e:	f7f9 fdbd 	bl	801769c <MoblePalTimerDestroy>
 801db22:	fb06 4002 	mla	r0, r6, r2, r4
 801db26:	2100      	movs	r1, #0
 801db28:	f44f 724d 	mov.w	r2, #820	@ 0x334
 801db2c:	3004      	adds	r0, #4
 801db2e:	f00b fb3d 	bl	80291ac <memset>
 801db32:	3501      	adds	r5, #1
 801db34:	e7e9      	b.n	801db0a <BnrgmFrndFnBreakFriendship+0xa>

0801db36 <BnrgmFrndFnGetLpnOffset>:
 801db36:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db38:	4603      	mov	r3, r0
 801db3a:	7886      	ldrb	r6, [r0, #2]
 801db3c:	2200      	movs	r2, #0
 801db3e:	f04f 30ff 	mov.w	r0, #4294967295
 801db42:	b2d4      	uxtb	r4, r2
 801db44:	42a6      	cmp	r6, r4
 801db46:	d800      	bhi.n	801db4a <BnrgmFrndFnGetLpnOffset+0x14>
 801db48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db4a:	891d      	ldrh	r5, [r3, #8]
 801db4c:	b14d      	cbz	r5, 801db62 <BnrgmFrndFnGetLpnOffset+0x2c>
 801db4e:	f893 c333 	ldrb.w	ip, [r3, #819]	@ 0x333
 801db52:	2400      	movs	r4, #0
 801db54:	b2e7      	uxtb	r7, r4
 801db56:	45bc      	cmp	ip, r7
 801db58:	d903      	bls.n	801db62 <BnrgmFrndFnGetLpnOffset+0x2c>
 801db5a:	192f      	adds	r7, r5, r4
 801db5c:	42b9      	cmp	r1, r7
 801db5e:	d104      	bne.n	801db6a <BnrgmFrndFnGetLpnOffset+0x34>
 801db60:	b250      	sxtb	r0, r2
 801db62:	3201      	adds	r2, #1
 801db64:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 801db68:	e7eb      	b.n	801db42 <BnrgmFrndFnGetLpnOffset+0xc>
 801db6a:	3401      	adds	r4, #1
 801db6c:	e7f2      	b.n	801db54 <BnrgmFrndFnGetLpnOffset+0x1e>

0801db6e <BnrgmFrndFnGetLpnPollTimeout>:
 801db6e:	b510      	push	{r4, lr}
 801db70:	4604      	mov	r4, r0
 801db72:	f7ff ffe0 	bl	801db36 <BnrgmFrndFnGetLpnOffset>
 801db76:	1c43      	adds	r3, r0, #1
 801db78:	d00c      	beq.n	801db94 <BnrgmFrndFnGetLpnPollTimeout+0x26>
 801db7a:	f44f 734d 	mov.w	r3, #820	@ 0x334
 801db7e:	fb03 4000 	mla	r0, r3, r0, r4
 801db82:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 801db86:	2b02      	cmp	r3, #2
 801db88:	d904      	bls.n	801db94 <BnrgmFrndFnGetLpnPollTimeout+0x26>
 801db8a:	6900      	ldr	r0, [r0, #16]
 801db8c:	2364      	movs	r3, #100	@ 0x64
 801db8e:	fbb0 f0f3 	udiv	r0, r0, r3
 801db92:	bd10      	pop	{r4, pc}
 801db94:	2000      	movs	r0, #0
 801db96:	e7fc      	b.n	801db92 <BnrgmFrndFnGetLpnPollTimeout+0x24>

0801db98 <BnrgmFrndMgmtGetLpnPollTimeout>:
 801db98:	4b02      	ldr	r3, [pc, #8]	@ (801dba4 <BnrgmFrndMgmtGetLpnPollTimeout+0xc>)
 801db9a:	4601      	mov	r1, r0
 801db9c:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	@ 0xa04
 801dba0:	f7ff bfe5 	b.w	801db6e <BnrgmFrndFnGetLpnPollTimeout>
 801dba4:	20002504 	.word	0x20002504

0801dba8 <BnrgmFrndFnInsertFriendUpdate>:
 801dba8:	b570      	push	{r4, r5, r6, lr}
 801dbaa:	4a1a      	ldr	r2, [pc, #104]	@ (801dc14 <BnrgmFrndFnInsertFriendUpdate+0x6c>)
 801dbac:	f890 1068 	ldrb.w	r1, [r0, #104]	@ 0x68
 801dbb0:	4c19      	ldr	r4, [pc, #100]	@ (801dc18 <BnrgmFrndFnInsertFriendUpdate+0x70>)
 801dbb2:	440a      	add	r2, r1
 801dbb4:	4603      	mov	r3, r0
 801dbb6:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 801dbba:	f890 032c 	ldrb.w	r0, [r0, #812]	@ 0x32c
 801dbbe:	1e91      	subs	r1, r2, #2
 801dbc0:	424a      	negs	r2, r1
 801dbc2:	414a      	adcs	r2, r1
 801dbc4:	f894 165c 	ldrb.w	r1, [r4, #1628]	@ 0x65c
 801dbc8:	2901      	cmp	r1, #1
 801dbca:	bf08      	it	eq
 801dbcc:	f042 0202 	orreq.w	r2, r2, #2
 801dbd0:	2810      	cmp	r0, #16
 801dbd2:	d81d      	bhi.n	801dc10 <BnrgmFrndFnInsertFriendUpdate+0x68>
 801dbd4:	f893 132d 	ldrb.w	r1, [r3, #813]	@ 0x32d
 801dbd8:	4408      	add	r0, r1
 801dbda:	f000 000f 	and.w	r0, r0, #15
 801dbde:	252c      	movs	r5, #44	@ 0x2c
 801dbe0:	fb05 3100 	mla	r1, r5, r0, r3
 801dbe4:	2601      	movs	r6, #1
 801dbe6:	f881 6096 	strb.w	r6, [r1, #150]	@ 0x96
 801dbea:	4608      	mov	r0, r1
 801dbec:	2605      	movs	r6, #5
 801dbee:	f881 2085 	strb.w	r2, [r1, #133]	@ 0x85
 801dbf2:	f881 6095 	strb.w	r6, [r1, #149]	@ 0x95
 801dbf6:	2204      	movs	r2, #4
 801dbf8:	f8d4 1658 	ldr.w	r1, [r4, #1624]	@ 0x658
 801dbfc:	3086      	adds	r0, #134	@ 0x86
 801dbfe:	f7fc fff2 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801dc02:	f893 232c 	ldrb.w	r2, [r3, #812]	@ 0x32c
 801dc06:	3201      	adds	r2, #1
 801dc08:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
 801dc0c:	2000      	movs	r0, #0
 801dc0e:	bd70      	pop	{r4, r5, r6, pc}
 801dc10:	2002      	movs	r0, #2
 801dc12:	e7fc      	b.n	801dc0e <BnrgmFrndFnInsertFriendUpdate+0x66>
 801dc14:	20000314 	.word	0x20000314
 801dc18:	2000140c 	.word	0x2000140c

0801dc1c <BnrgmFrndFnGetLpnStatus>:
 801dc1c:	b510      	push	{r4, lr}
 801dc1e:	4604      	mov	r4, r0
 801dc20:	f7ff ff89 	bl	801db36 <BnrgmFrndFnGetLpnOffset>
 801dc24:	1c43      	adds	r3, r0, #1
 801dc26:	d00b      	beq.n	801dc40 <BnrgmFrndFnGetLpnStatus+0x24>
 801dc28:	f44f 734d 	mov.w	r3, #820	@ 0x334
 801dc2c:	fb03 4000 	mla	r0, r3, r0, r4
 801dc30:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 801dc34:	3801      	subs	r0, #1
 801dc36:	2801      	cmp	r0, #1
 801dc38:	bf8c      	ite	hi
 801dc3a:	2000      	movhi	r0, #0
 801dc3c:	2001      	movls	r0, #1
 801dc3e:	bd10      	pop	{r4, pc}
 801dc40:	2002      	movs	r0, #2
 801dc42:	e7fc      	b.n	801dc3e <BnrgmFrndFnGetLpnStatus+0x22>

0801dc44 <BnrgmFrndMgmtGetFriendshipStatus>:
 801dc44:	4b02      	ldr	r3, [pc, #8]	@ (801dc50 <BnrgmFrndMgmtGetFriendshipStatus+0xc>)
 801dc46:	4601      	mov	r1, r0
 801dc48:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	@ 0xa04
 801dc4c:	f7ff bfe6 	b.w	801dc1c <BnrgmFrndFnGetLpnStatus>
 801dc50:	20002504 	.word	0x20002504

0801dc54 <BnrgmFrndFnGetSubscrStatus>:
 801dc54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc56:	f44f 7c4d 	mov.w	ip, #820	@ 0x334
 801dc5a:	2700      	movs	r7, #0
 801dc5c:	7884      	ldrb	r4, [r0, #2]
 801dc5e:	b2fe      	uxtb	r6, r7
 801dc60:	42b4      	cmp	r4, r6
 801dc62:	d801      	bhi.n	801dc68 <BnrgmFrndFnGetSubscrStatus+0x14>
 801dc64:	2000      	movs	r0, #0
 801dc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc68:	fb0c 0506 	mla	r5, ip, r6, r0
 801dc6c:	351c      	adds	r5, #28
 801dc6e:	2406      	movs	r4, #6
 801dc70:	f835 ef02 	ldrh.w	lr, [r5, #2]!
 801dc74:	458e      	cmp	lr, r1
 801dc76:	d106      	bne.n	801dc86 <BnrgmFrndFnGetSubscrStatus+0x32>
 801dc78:	7814      	ldrb	r4, [r2, #0]
 801dc7a:	551e      	strb	r6, [r3, r4]
 801dc7c:	7814      	ldrb	r4, [r2, #0]
 801dc7e:	3401      	adds	r4, #1
 801dc80:	7014      	strb	r4, [r2, #0]
 801dc82:	3701      	adds	r7, #1
 801dc84:	e7ea      	b.n	801dc5c <BnrgmFrndFnGetSubscrStatus+0x8>
 801dc86:	3c01      	subs	r4, #1
 801dc88:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 801dc8c:	d1f0      	bne.n	801dc70 <BnrgmFrndFnGetSubscrStatus+0x1c>
 801dc8e:	e7f8      	b.n	801dc82 <BnrgmFrndFnGetSubscrStatus+0x2e>

0801dc90 <BnrgmFrndMgmtGetSubscrStatus>:
 801dc90:	4613      	mov	r3, r2
 801dc92:	460a      	mov	r2, r1
 801dc94:	4601      	mov	r1, r0
 801dc96:	4802      	ldr	r0, [pc, #8]	@ (801dca0 <BnrgmFrndMgmtGetSubscrStatus+0x10>)
 801dc98:	f8d0 0a04 	ldr.w	r0, [r0, #2564]	@ 0xa04
 801dc9c:	f7ff bfda 	b.w	801dc54 <BnrgmFrndFnGetSubscrStatus>
 801dca0:	20002504 	.word	0x20002504

0801dca4 <BnrgmFrndFnQueLpnPkt>:
 801dca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dca8:	4617      	mov	r7, r2
 801dcaa:	b087      	sub	sp, #28
 801dcac:	4a97      	ldr	r2, [pc, #604]	@ (801df0c <BnrgmFrndFnQueLpnPkt+0x268>)
 801dcae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801dcb0:	f8b2 294c 	ldrh.w	r2, [r2, #2380]	@ 0x94c
 801dcb4:	9301      	str	r3, [sp, #4]
 801dcb6:	428a      	cmp	r2, r1
 801dcb8:	f04f 0300 	mov.w	r3, #0
 801dcbc:	4605      	mov	r5, r0
 801dcbe:	f88d 300b 	strb.w	r3, [sp, #11]
 801dcc2:	f0c0 8121 	bcc.w	801df08 <BnrgmFrndFnQueLpnPkt+0x264>
 801dcc6:	7bfa      	ldrb	r2, [r7, #15]
 801dcc8:	2a01      	cmp	r2, #1
 801dcca:	f240 811d 	bls.w	801df08 <BnrgmFrndFnQueLpnPkt+0x264>
 801dcce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801dcd2:	8af9      	ldrh	r1, [r7, #22]
 801dcd4:	429a      	cmp	r2, r3
 801dcd6:	dd18      	ble.n	801dd0a <BnrgmFrndFnQueLpnPkt+0x66>
 801dcd8:	f7ff ff2d 	bl	801db36 <BnrgmFrndFnGetLpnOffset>
 801dcdc:	2301      	movs	r3, #1
 801dcde:	f88d 000c 	strb.w	r0, [sp, #12]
 801dce2:	f88d 300b 	strb.w	r3, [sp, #11]
 801dce6:	f04f 0800 	mov.w	r8, #0
 801dcea:	4644      	mov	r4, r8
 801dcec:	46c4      	mov	ip, r8
 801dcee:	4646      	mov	r6, r8
 801dcf0:	2201      	movs	r2, #1
 801dcf2:	f44f 794d 	mov.w	r9, #820	@ 0x334
 801dcf6:	f89d 100b 	ldrb.w	r1, [sp, #11]
 801dcfa:	fa5f f388 	uxtb.w	r3, r8
 801dcfe:	4299      	cmp	r1, r3
 801dd00:	d82d      	bhi.n	801dd5e <BnrgmFrndFnQueLpnPkt+0xba>
 801dd02:	2000      	movs	r0, #0
 801dd04:	b007      	add	sp, #28
 801dd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dd0e:	4291      	cmp	r1, r2
 801dd10:	d11f      	bne.n	801dd52 <BnrgmFrndFnQueLpnPkt+0xae>
 801dd12:	7884      	ldrb	r4, [r0, #2]
 801dd14:	4619      	mov	r1, r3
 801dd16:	461a      	mov	r2, r3
 801dd18:	f100 0608 	add.w	r6, r0, #8
 801dd1c:	f44f 7c4d 	mov.w	ip, #820	@ 0x334
 801dd20:	b2d8      	uxtb	r0, r3
 801dd22:	4284      	cmp	r4, r0
 801dd24:	d804      	bhi.n	801dd30 <BnrgmFrndFnQueLpnPkt+0x8c>
 801dd26:	2900      	cmp	r1, #0
 801dd28:	d0dd      	beq.n	801dce6 <BnrgmFrndFnQueLpnPkt+0x42>
 801dd2a:	f88d 200b 	strb.w	r2, [sp, #11]
 801dd2e:	e7da      	b.n	801dce6 <BnrgmFrndFnQueLpnPkt+0x42>
 801dd30:	fb0c fe03 	mul.w	lr, ip, r3
 801dd34:	f836 e00e 	ldrh.w	lr, [r6, lr]
 801dd38:	f1be 0f00 	cmp.w	lr, #0
 801dd3c:	d007      	beq.n	801dd4e <BnrgmFrndFnQueLpnPkt+0xaa>
 801dd3e:	f102 0118 	add.w	r1, r2, #24
 801dd42:	4469      	add	r1, sp
 801dd44:	3201      	adds	r2, #1
 801dd46:	f801 0c0c 	strb.w	r0, [r1, #-12]
 801dd4a:	b2d2      	uxtb	r2, r2
 801dd4c:	2101      	movs	r1, #1
 801dd4e:	3301      	adds	r3, #1
 801dd50:	e7e6      	b.n	801dd20 <BnrgmFrndFnQueLpnPkt+0x7c>
 801dd52:	ab03      	add	r3, sp, #12
 801dd54:	f10d 020b 	add.w	r2, sp, #11
 801dd58:	f7ff ff7c 	bl	801dc54 <BnrgmFrndFnGetSubscrStatus>
 801dd5c:	e7c3      	b.n	801dce6 <BnrgmFrndFnQueLpnPkt+0x42>
 801dd5e:	3318      	adds	r3, #24
 801dd60:	446b      	add	r3, sp
 801dd62:	8ab8      	ldrh	r0, [r7, #20]
 801dd64:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 801dd68:	fb09 5301 	mla	r3, r9, r1, r5
 801dd6c:	f8b3 e008 	ldrh.w	lr, [r3, #8]
 801dd70:	4570      	cmp	r0, lr
 801dd72:	d304      	bcc.n	801dd7e <BnrgmFrndFnQueLpnPkt+0xda>
 801dd74:	f893 3333 	ldrb.w	r3, [r3, #819]	@ 0x333
 801dd78:	4473      	add	r3, lr
 801dd7a:	4298      	cmp	r0, r3
 801dd7c:	db6a      	blt.n	801de54 <BnrgmFrndFnQueLpnPkt+0x1b0>
 801dd7e:	9b01      	ldr	r3, [sp, #4]
 801dd80:	781b      	ldrb	r3, [r3, #0]
 801dd82:	2b02      	cmp	r3, #2
 801dd84:	d164      	bne.n	801de50 <BnrgmFrndFnQueLpnPkt+0x1ac>
 801dd86:	9b01      	ldr	r3, [sp, #4]
 801dd88:	f8b3 b004 	ldrh.w	fp, [r3, #4]
 801dd8c:	fb09 5e01 	mla	lr, r9, r1, r5
 801dd90:	2000      	movs	r0, #0
 801dd92:	f8be 3080 	ldrh.w	r3, [lr, #128]	@ 0x80
 801dd96:	455b      	cmp	r3, fp
 801dd98:	fa5f fa80 	uxtb.w	sl, r0
 801dd9c:	d105      	bne.n	801ddaa <BnrgmFrndFnQueLpnPkt+0x106>
 801dd9e:	f8de 2074 	ldr.w	r2, [lr, #116]	@ 0x74
 801dda2:	693b      	ldr	r3, [r7, #16]
 801dda4:	429a      	cmp	r2, r3
 801dda6:	f0c0 80ac 	bcc.w	801df02 <BnrgmFrndFnQueLpnPkt+0x25e>
 801ddaa:	3001      	adds	r0, #1
 801ddac:	2810      	cmp	r0, #16
 801ddae:	f10e 0e2c 	add.w	lr, lr, #44	@ 0x2c
 801ddb2:	d1ee      	bne.n	801dd92 <BnrgmFrndFnQueLpnPkt+0xee>
 801ddb4:	fb09 f201 	mul.w	r2, r9, r1
 801ddb8:	eb05 0e02 	add.w	lr, r5, r2
 801ddbc:	f89e 3330 	ldrb.w	r3, [lr, #816]	@ 0x330
 801ddc0:	f89e 0331 	ldrb.w	r0, [lr, #817]	@ 0x331
 801ddc4:	2b0f      	cmp	r3, #15
 801ddc6:	d848      	bhi.n	801de5a <BnrgmFrndFnQueLpnPkt+0x1b6>
 801ddc8:	4418      	add	r0, r3
 801ddca:	3301      	adds	r3, #1
 801ddcc:	f000 060f 	and.w	r6, r0, #15
 801ddd0:	f88e 3330 	strb.w	r3, [lr, #816]	@ 0x330
 801ddd4:	222c      	movs	r2, #44	@ 0x2c
 801ddd6:	fb09 f001 	mul.w	r0, r9, r1
 801ddda:	fb02 0306 	mla	r3, r2, r6, r0
 801ddde:	442b      	add	r3, r5
 801dde0:	fb06 0002 	mla	r0, r6, r2, r0
 801dde4:	f04f 0c00 	mov.w	ip, #0
 801dde8:	f883 c09a 	strb.w	ip, [r3, #154]	@ 0x9a
 801ddec:	f100 0c70 	add.w	ip, r0, #112	@ 0x70
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	f845 300c 	str.w	r3, [r5, ip]
 801ddf6:	eb05 020c 	add.w	r2, r5, ip
 801ddfa:	693b      	ldr	r3, [r7, #16]
 801ddfc:	6053      	str	r3, [r2, #4]
 801ddfe:	697b      	ldr	r3, [r7, #20]
 801de00:	6093      	str	r3, [r2, #8]
 801de02:	9a01      	ldr	r2, [sp, #4]
 801de04:	f100 037c 	add.w	r3, r0, #124	@ 0x7c
 801de08:	eb03 0a05 	add.w	sl, r3, r5
 801de0c:	f102 0c0c 	add.w	ip, r2, #12
 801de10:	f852 eb04 	ldr.w	lr, [r2], #4
 801de14:	f84a eb04 	str.w	lr, [sl], #4
 801de18:	4562      	cmp	r2, ip
 801de1a:	d1f9      	bne.n	801de10 <BnrgmFrndFnQueLpnPkt+0x16c>
 801de1c:	232c      	movs	r3, #44	@ 0x2c
 801de1e:	fb09 f101 	mul.w	r1, r9, r1
 801de22:	fb03 1106 	mla	r1, r3, r6, r1
 801de26:	7812      	ldrb	r2, [r2, #0]
 801de28:	f88a 2000 	strb.w	r2, [sl]
 801de2c:	4429      	add	r1, r5
 801de2e:	3089      	adds	r0, #137	@ 0x89
 801de30:	f891 3073 	ldrb.w	r3, [r1, #115]	@ 0x73
 801de34:	3b01      	subs	r3, #1
 801de36:	f881 3073 	strb.w	r3, [r1, #115]	@ 0x73
 801de3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801de3c:	f881 3099 	strb.w	r3, [r1, #153]	@ 0x99
 801de40:	461a      	mov	r2, r3
 801de42:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801de44:	4428      	add	r0, r5
 801de46:	f00b fa42 	bl	80292ce <memcpy>
 801de4a:	f04f 0c01 	mov.w	ip, #1
 801de4e:	e056      	b.n	801defe <BnrgmFrndFnQueLpnPkt+0x25a>
 801de50:	2a00      	cmp	r2, #0
 801de52:	d1af      	bne.n	801ddb4 <BnrgmFrndFnQueLpnPkt+0x110>
 801de54:	f108 0801 	add.w	r8, r8, #1
 801de58:	e74d      	b.n	801dcf6 <BnrgmFrndFnQueLpnPkt+0x52>
 801de5a:	f104 0e10 	add.w	lr, r4, #16
 801de5e:	fa5f fe8e 	uxtb.w	lr, lr
 801de62:	1b00      	subs	r0, r0, r4
 801de64:	f04f 0b2c 	mov.w	fp, #44	@ 0x2c
 801de68:	1823      	adds	r3, r4, r0
 801de6a:	f003 030f 	and.w	r3, r3, #15
 801de6e:	fb0b 2a03 	mla	sl, fp, r3, r2
 801de72:	44aa      	add	sl, r5
 801de74:	f89a a09a 	ldrb.w	sl, [sl, #154]	@ 0x9a
 801de78:	f1ba 0f00 	cmp.w	sl, #0
 801de7c:	d137      	bne.n	801deee <BnrgmFrndFnQueLpnPkt+0x24a>
 801de7e:	3310      	adds	r3, #16
 801de80:	469b      	mov	fp, r3
 801de82:	3270      	adds	r2, #112	@ 0x70
 801de84:	f04f 0c2c 	mov.w	ip, #44	@ 0x2c
 801de88:	ebab 0003 	sub.w	r0, fp, r3
 801de8c:	b2c0      	uxtb	r0, r0
 801de8e:	4284      	cmp	r4, r0
 801de90:	d80c      	bhi.n	801deac <BnrgmFrndFnQueLpnPkt+0x208>
 801de92:	fb09 5301 	mla	r3, r9, r1, r5
 801de96:	f893 6331 	ldrb.w	r6, [r3, #817]	@ 0x331
 801de9a:	3601      	adds	r6, #1
 801de9c:	f006 060f 	and.w	r6, r6, #15
 801dea0:	f883 6331 	strb.w	r6, [r3, #817]	@ 0x331
 801dea4:	360f      	adds	r6, #15
 801dea6:	f006 060f 	and.w	r6, r6, #15
 801deaa:	e793      	b.n	801ddd4 <BnrgmFrndFnQueLpnPkt+0x130>
 801deac:	4258      	negs	r0, r3
 801deae:	f003 060f 	and.w	r6, r3, #15
 801deb2:	f000 000f 	and.w	r0, r0, #15
 801deb6:	f103 33ff 	add.w	r3, r3, #4294967295
 801deba:	bf58      	it	pl
 801debc:	4246      	negpl	r6, r0
 801debe:	f1d3 0e00 	rsbs	lr, r3, #0
 801dec2:	f00e 0e0f 	and.w	lr, lr, #15
 801dec6:	f003 000f 	and.w	r0, r3, #15
 801deca:	bf58      	it	pl
 801decc:	f1ce 0000 	rsbpl	r0, lr, #0
 801ded0:	fb0c 2000 	mla	r0, ip, r0, r2
 801ded4:	fb0c 2606 	mla	r6, ip, r6, r2
 801ded8:	4428      	add	r0, r5
 801deda:	442e      	add	r6, r5
 801dedc:	f100 0e2c 	add.w	lr, r0, #44	@ 0x2c
 801dee0:	f850 ab04 	ldr.w	sl, [r0], #4
 801dee4:	f846 ab04 	str.w	sl, [r6], #4
 801dee8:	4570      	cmp	r0, lr
 801deea:	d1f9      	bne.n	801dee0 <BnrgmFrndFnQueLpnPkt+0x23c>
 801deec:	e7cc      	b.n	801de88 <BnrgmFrndFnQueLpnPkt+0x1e4>
 801deee:	3401      	adds	r4, #1
 801def0:	b2e4      	uxtb	r4, r4
 801def2:	4574      	cmp	r4, lr
 801def4:	d1b8      	bne.n	801de68 <BnrgmFrndFnQueLpnPkt+0x1c4>
 801def6:	f1bc 0f00 	cmp.w	ip, #0
 801defa:	f47f af6b 	bne.w	801ddd4 <BnrgmFrndFnQueLpnPkt+0x130>
 801defe:	2201      	movs	r2, #1
 801df00:	e7a8      	b.n	801de54 <BnrgmFrndFnQueLpnPkt+0x1b0>
 801df02:	4656      	mov	r6, sl
 801df04:	2200      	movs	r2, #0
 801df06:	e7a5      	b.n	801de54 <BnrgmFrndFnQueLpnPkt+0x1b0>
 801df08:	2002      	movs	r0, #2
 801df0a:	e6fb      	b.n	801dd04 <BnrgmFrndFnQueLpnPkt+0x60>
 801df0c:	2000140c 	.word	0x2000140c

0801df10 <BnrgmFrndMgmtQueLpnPkt>:
 801df10:	b513      	push	{r0, r1, r4, lr}
 801df12:	9c04      	ldr	r4, [sp, #16]
 801df14:	e9cd 3400 	strd	r3, r4, [sp]
 801df18:	4613      	mov	r3, r2
 801df1a:	460a      	mov	r2, r1
 801df1c:	4601      	mov	r1, r0
 801df1e:	4803      	ldr	r0, [pc, #12]	@ (801df2c <BnrgmFrndMgmtQueLpnPkt+0x1c>)
 801df20:	f8d0 0a04 	ldr.w	r0, [r0, #2564]	@ 0xa04
 801df24:	f7ff febe 	bl	801dca4 <BnrgmFrndFnQueLpnPkt>
 801df28:	b002      	add	sp, #8
 801df2a:	bd10      	pop	{r4, pc}
 801df2c:	20002504 	.word	0x20002504

0801df30 <BnrgmFrndFnProcessFrndClearConf>:
 801df30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801df32:	4614      	mov	r4, r2
 801df34:	461d      	mov	r5, r3
 801df36:	b930      	cbnz	r0, 801df46 <BnrgmFrndFnProcessFrndClearConf+0x16>
 801df38:	4b1a      	ldr	r3, [pc, #104]	@ (801dfa4 <BnrgmFrndFnProcessFrndClearConf+0x74>)
 801df3a:	4a1b      	ldr	r2, [pc, #108]	@ (801dfa8 <BnrgmFrndFnProcessFrndClearConf+0x78>)
 801df3c:	481b      	ldr	r0, [pc, #108]	@ (801dfac <BnrgmFrndFnProcessFrndClearConf+0x7c>)
 801df3e:	f240 318d 	movw	r1, #909	@ 0x38d
 801df42:	f00a fa4b 	bl	80283dc <__assert_func>
 801df46:	b353      	cbz	r3, 801df9e <BnrgmFrndFnProcessFrndClearConf+0x6e>
 801df48:	9b06      	ldr	r3, [sp, #24]
 801df4a:	2b03      	cmp	r3, #3
 801df4c:	d927      	bls.n	801df9e <BnrgmFrndFnProcessFrndClearConf+0x6e>
 801df4e:	aa01      	add	r2, sp, #4
 801df50:	2102      	movs	r1, #2
 801df52:	4628      	mov	r0, r5
 801df54:	f7fc fe20 	bl	801ab98 <MobleInputStreamGetBigEndian>
 801df58:	2102      	movs	r1, #2
 801df5a:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801df5e:	1868      	adds	r0, r5, r1
 801df60:	f7fc fe1a 	bl	801ab98 <MobleInputStreamGetBigEndian>
 801df64:	4631      	mov	r1, r6
 801df66:	4620      	mov	r0, r4
 801df68:	f7ff fde5 	bl	801db36 <BnrgmFrndFnGetLpnOffset>
 801df6c:	1c43      	adds	r3, r0, #1
 801df6e:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801df72:	4602      	mov	r2, r0
 801df74:	d013      	beq.n	801df9e <BnrgmFrndFnProcessFrndClearConf+0x6e>
 801df76:	f44f 714d 	mov.w	r1, #820	@ 0x334
 801df7a:	fb01 4300 	mla	r3, r1, r0, r4
 801df7e:	8958      	ldrh	r0, [r3, #10]
 801df80:	42a8      	cmp	r0, r5
 801df82:	d10a      	bne.n	801df9a <BnrgmFrndFnProcessFrndClearConf+0x6a>
 801df84:	6998      	ldr	r0, [r3, #24]
 801df86:	b108      	cbz	r0, 801df8c <BnrgmFrndFnProcessFrndClearConf+0x5c>
 801df88:	f7f9 fb88 	bl	801769c <MoblePalTimerDestroy>
 801df8c:	fb01 4402 	mla	r4, r1, r2, r4
 801df90:	2000      	movs	r0, #0
 801df92:	61a0      	str	r0, [r4, #24]
 801df94:	82a0      	strh	r0, [r4, #20]
 801df96:	b002      	add	sp, #8
 801df98:	bd70      	pop	{r4, r5, r6, pc}
 801df9a:	2000      	movs	r0, #0
 801df9c:	e7fb      	b.n	801df96 <BnrgmFrndFnProcessFrndClearConf+0x66>
 801df9e:	2002      	movs	r0, #2
 801dfa0:	e7f9      	b.n	801df96 <BnrgmFrndFnProcessFrndClearConf+0x66>
 801dfa2:	bf00      	nop
 801dfa4:	08030e80 	.word	0x08030e80
 801dfa8:	0802f539 	.word	0x0802f539
 801dfac:	08031453 	.word	0x08031453

0801dfb0 <BnrgmFrndFnInit>:
 801dfb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfb2:	7813      	ldrb	r3, [r2, #0]
 801dfb4:	4616      	mov	r6, r2
 801dfb6:	1e5a      	subs	r2, r3, #1
 801dfb8:	2a09      	cmp	r2, #9
 801dfba:	b08b      	sub	sp, #44	@ 0x2c
 801dfbc:	4604      	mov	r4, r0
 801dfbe:	d831      	bhi.n	801e024 <BnrgmFrndFnInit+0x74>
 801dfc0:	f1c3 030a 	rsb	r3, r3, #10
 801dfc4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801dfc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dfcc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801dfd0:	f242 050c 	movw	r5, #8204	@ 0x200c
 801dfd4:	eba5 0583 	sub.w	r5, r5, r3, lsl #2
 801dfd8:	b2ad      	uxth	r5, r5
 801dfda:	428d      	cmp	r5, r1
 801dfdc:	d822      	bhi.n	801e024 <BnrgmFrndFnInit+0x74>
 801dfde:	2700      	movs	r7, #0
 801dfe0:	462a      	mov	r2, r5
 801dfe2:	2100      	movs	r1, #0
 801dfe4:	4620      	mov	r0, r4
 801dfe6:	3701      	adds	r7, #1
 801dfe8:	f00b f8e0 	bl	80291ac <memset>
 801dfec:	b2bb      	uxth	r3, r7
 801dfee:	429d      	cmp	r5, r3
 801dff0:	d8f6      	bhi.n	801dfe0 <BnrgmFrndFnInit+0x30>
 801dff2:	7835      	ldrb	r5, [r6, #0]
 801dff4:	b1b5      	cbz	r5, 801e024 <BnrgmFrndFnInit+0x74>
 801dff6:	70a5      	strb	r5, [r4, #2]
 801dff8:	2228      	movs	r2, #40	@ 0x28
 801dffa:	2100      	movs	r1, #0
 801dffc:	4668      	mov	r0, sp
 801dffe:	f00b f8d5 	bl	80291ac <memset>
 801e002:	342a      	adds	r4, #42	@ 0x2a
 801e004:	466a      	mov	r2, sp
 801e006:	2300      	movs	r3, #0
 801e008:	3301      	adds	r3, #1
 801e00a:	b2d9      	uxtb	r1, r3
 801e00c:	428d      	cmp	r5, r1
 801e00e:	f842 4b04 	str.w	r4, [r2], #4
 801e012:	f504 744d 	add.w	r4, r4, #820	@ 0x334
 801e016:	d8f7      	bhi.n	801e008 <BnrgmFrndFnInit+0x58>
 801e018:	4669      	mov	r1, sp
 801e01a:	4628      	mov	r0, r5
 801e01c:	f7fb fea8 	bl	8019d70 <BnrgmPalCryptoInitFriendshipKeysP>
 801e020:	b00b      	add	sp, #44	@ 0x2c
 801e022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e024:	2002      	movs	r0, #2
 801e026:	e7fb      	b.n	801e020 <BnrgmFrndFnInit+0x70>

0801e028 <BnrgmFrndMgmtFnInit>:
 801e028:	4b03      	ldr	r3, [pc, #12]	@ (801e038 <BnrgmFrndMgmtFnInit+0x10>)
 801e02a:	4602      	mov	r2, r0
 801e02c:	f8b3 1a08 	ldrh.w	r1, [r3, #2568]	@ 0xa08
 801e030:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	@ 0xa04
 801e034:	f7ff bfbc 	b.w	801dfb0 <BnrgmFrndFnInit>
 801e038:	20002504 	.word	0x20002504

0801e03c <BnrgmFrndFnUpdateKeys>:
 801e03c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e03e:	788f      	ldrb	r7, [r1, #2]
 801e040:	4605      	mov	r5, r0
 801e042:	460c      	mov	r4, r1
 801e044:	2300      	movs	r3, #0
 801e046:	b2d8      	uxtb	r0, r3
 801e048:	4287      	cmp	r7, r0
 801e04a:	d801      	bhi.n	801e050 <BnrgmFrndFnUpdateKeys+0x14>
 801e04c:	2000      	movs	r0, #0
 801e04e:	e013      	b.n	801e078 <BnrgmFrndFnUpdateKeys+0x3c>
 801e050:	8926      	ldrh	r6, [r4, #8]
 801e052:	b19e      	cbz	r6, 801e07c <BnrgmFrndFnUpdateKeys+0x40>
 801e054:	f894 c06c 	ldrb.w	ip, [r4, #108]	@ 0x6c
 801e058:	4594      	cmp	ip, r2
 801e05a:	d10f      	bne.n	801e07c <BnrgmFrndFnUpdateKeys+0x40>
 801e05c:	f44f 724d 	mov.w	r2, #820	@ 0x334
 801e060:	fb02 1403 	mla	r4, r2, r3, r1
 801e064:	682a      	ldr	r2, [r5, #0]
 801e066:	8963      	ldrh	r3, [r4, #10]
 801e068:	8852      	ldrh	r2, [r2, #2]
 801e06a:	2101      	movs	r1, #1
 801e06c:	9101      	str	r1, [sp, #4]
 801e06e:	89a1      	ldrh	r1, [r4, #12]
 801e070:	9100      	str	r1, [sp, #0]
 801e072:	4631      	mov	r1, r6
 801e074:	f7fb fea4 	bl	8019dc0 <BnrgmPalCryptoSetFriendshipKeys>
 801e078:	b003      	add	sp, #12
 801e07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e07c:	3301      	adds	r3, #1
 801e07e:	f504 744d 	add.w	r4, r4, #820	@ 0x334
 801e082:	e7e0      	b.n	801e046 <BnrgmFrndFnUpdateKeys+0xa>

0801e084 <BnrgmFrndFnSwitchKeys>:
 801e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e086:	4604      	mov	r4, r0
 801e088:	460e      	mov	r6, r1
 801e08a:	2500      	movs	r5, #0
 801e08c:	f44f 774d 	mov.w	r7, #820	@ 0x334
 801e090:	78a3      	ldrb	r3, [r4, #2]
 801e092:	b2e8      	uxtb	r0, r5
 801e094:	4283      	cmp	r3, r0
 801e096:	d801      	bhi.n	801e09c <BnrgmFrndFnSwitchKeys+0x18>
 801e098:	2000      	movs	r0, #0
 801e09a:	e00d      	b.n	801e0b8 <BnrgmFrndFnSwitchKeys+0x34>
 801e09c:	fb07 4300 	mla	r3, r7, r0, r4
 801e0a0:	891a      	ldrh	r2, [r3, #8]
 801e0a2:	b90a      	cbnz	r2, 801e0a8 <BnrgmFrndFnSwitchKeys+0x24>
 801e0a4:	3501      	adds	r5, #1
 801e0a6:	e7f3      	b.n	801e090 <BnrgmFrndFnSwitchKeys+0xc>
 801e0a8:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 801e0ac:	42b3      	cmp	r3, r6
 801e0ae:	d1f9      	bne.n	801e0a4 <BnrgmFrndFnSwitchKeys+0x20>
 801e0b0:	f7fb fee4 	bl	8019e7c <BnrgmPalCryptoSwitchFriendshipKeys>
 801e0b4:	2800      	cmp	r0, #0
 801e0b6:	d0f5      	beq.n	801e0a4 <BnrgmFrndFnSwitchKeys+0x20>
 801e0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e0ba <BnrgmFrndFnSendSecurityUpdate>:
 801e0ba:	b570      	push	{r4, r5, r6, lr}
 801e0bc:	4604      	mov	r4, r0
 801e0be:	2500      	movs	r5, #0
 801e0c0:	f44f 764d 	mov.w	r6, #820	@ 0x334
 801e0c4:	78a2      	ldrb	r2, [r4, #2]
 801e0c6:	b2eb      	uxtb	r3, r5
 801e0c8:	429a      	cmp	r2, r3
 801e0ca:	d800      	bhi.n	801e0ce <BnrgmFrndFnSendSecurityUpdate+0x14>
 801e0cc:	bd70      	pop	{r4, r5, r6, pc}
 801e0ce:	4373      	muls	r3, r6
 801e0d0:	18e2      	adds	r2, r4, r3
 801e0d2:	8912      	ldrh	r2, [r2, #8]
 801e0d4:	b11a      	cbz	r2, 801e0de <BnrgmFrndFnSendSecurityUpdate+0x24>
 801e0d6:	3304      	adds	r3, #4
 801e0d8:	18e0      	adds	r0, r4, r3
 801e0da:	f7ff fd65 	bl	801dba8 <BnrgmFrndFnInsertFriendUpdate>
 801e0de:	3501      	adds	r5, #1
 801e0e0:	e7f0      	b.n	801e0c4 <BnrgmFrndFnSendSecurityUpdate+0xa>
	...

0801e0e4 <BnrgmFrndMgmtSendSecurityUpdate>:
 801e0e4:	4b05      	ldr	r3, [pc, #20]	@ (801e0fc <BnrgmFrndMgmtSendSecurityUpdate+0x18>)
 801e0e6:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 801e0ea:	2b01      	cmp	r3, #1
 801e0ec:	d104      	bne.n	801e0f8 <BnrgmFrndMgmtSendSecurityUpdate+0x14>
 801e0ee:	4b04      	ldr	r3, [pc, #16]	@ (801e100 <BnrgmFrndMgmtSendSecurityUpdate+0x1c>)
 801e0f0:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	@ 0xa04
 801e0f4:	f7ff bfe1 	b.w	801e0ba <BnrgmFrndFnSendSecurityUpdate>
 801e0f8:	4770      	bx	lr
 801e0fa:	bf00      	nop
 801e0fc:	20000314 	.word	0x20000314
 801e100:	20002504 	.word	0x20002504

0801e104 <MobleStackSetIvIndex>:
 801e104:	b538      	push	{r3, r4, r5, lr}
 801e106:	4d0b      	ldr	r5, [pc, #44]	@ (801e134 <MobleStackSetIvIndex+0x30>)
 801e108:	4604      	mov	r4, r0
 801e10a:	f7fb fa79 	bl	8019600 <MoblePalCryptoSetIvIndex>
 801e10e:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 801e112:	605c      	str	r4, [r3, #4]
 801e114:	4b08      	ldr	r3, [pc, #32]	@ (801e138 <MobleStackSetIvIndex+0x34>)
 801e116:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 801e11a:	2b01      	cmp	r3, #1
 801e11c:	d101      	bne.n	801e122 <MobleStackSetIvIndex+0x1e>
 801e11e:	f7ff f9c9 	bl	801d4b4 <BnrgmStackSendBeaconOverGatt>
 801e122:	f7ff ffdf 	bl	801e0e4 <BnrgmFrndMgmtSendSecurityUpdate>
 801e126:	f8d5 0680 	ldr.w	r0, [r5, #1664]	@ 0x680
 801e12a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e12e:	f7fe bb93 	b.w	801c858 <MobleConfigNetworkSave>
 801e132:	bf00      	nop
 801e134:	2000140c 	.word	0x2000140c
 801e138:	20000314 	.word	0x20000314

0801e13c <MobleStackForcedSetIvIndex>:
 801e13c:	b510      	push	{r4, lr}
 801e13e:	4c07      	ldr	r4, [pc, #28]	@ (801e15c <MobleStackForcedSetIvIndex+0x20>)
 801e140:	f7ff ffe0 	bl	801e104 <MobleStackSetIvIndex>
 801e144:	f504 60d0 	add.w	r0, r4, #1664	@ 0x680
 801e148:	f7fd ff06 	bl	801bf58 <MobleNetworkReplayCacheClearAll>
 801e14c:	f7fe fd80 	bl	801cc50 <MobleStackResetSeq>
 801e150:	4b03      	ldr	r3, [pc, #12]	@ (801e160 <MobleStackForcedSetIvIndex+0x24>)
 801e152:	f8c4 3924 	str.w	r3, [r4, #2340]	@ 0x924
 801e156:	2000      	movs	r0, #0
 801e158:	bd10      	pop	{r4, pc}
 801e15a:	bf00      	nop
 801e15c:	2000140c 	.word	0x2000140c
 801e160:	1ee62800 	.word	0x1ee62800

0801e164 <MobleStackIvUpdateSwitchToProgress>:
 801e164:	b513      	push	{r0, r1, r4, lr}
 801e166:	4c0d      	ldr	r4, [pc, #52]	@ (801e19c <MobleStackIvUpdateSwitchToProgress+0x38>)
 801e168:	f894 065c 	ldrb.w	r0, [r4, #1628]	@ 0x65c
 801e16c:	2801      	cmp	r0, #1
 801e16e:	d012      	beq.n	801e196 <MobleStackIvUpdateSwitchToProgress+0x32>
 801e170:	f8d4 1658 	ldr.w	r1, [r4, #1624]	@ 0x658
 801e174:	3101      	adds	r1, #1
 801e176:	2301      	movs	r3, #1
 801e178:	4608      	mov	r0, r1
 801e17a:	f884 365c 	strb.w	r3, [r4, #1628]	@ 0x65c
 801e17e:	9101      	str	r1, [sp, #4]
 801e180:	f7ff ffc0 	bl	801e104 <MobleStackSetIvIndex>
 801e184:	f504 60d0 	add.w	r0, r4, #1664	@ 0x680
 801e188:	9901      	ldr	r1, [sp, #4]
 801e18a:	f7fd feb3 	bl	801bef4 <MobleNetworkReplayCacheClear>
 801e18e:	4b04      	ldr	r3, [pc, #16]	@ (801e1a0 <MobleStackIvUpdateSwitchToProgress+0x3c>)
 801e190:	f8c4 3924 	str.w	r3, [r4, #2340]	@ 0x924
 801e194:	2000      	movs	r0, #0
 801e196:	b002      	add	sp, #8
 801e198:	bd10      	pop	{r4, pc}
 801e19a:	bf00      	nop
 801e19c:	2000140c 	.word	0x2000140c
 801e1a0:	1ee62800 	.word	0x1ee62800

0801e1a4 <MobleStackIvUpdateSwitchToNormal>:
 801e1a4:	b510      	push	{r4, lr}
 801e1a6:	4c0c      	ldr	r4, [pc, #48]	@ (801e1d8 <MobleStackIvUpdateSwitchToNormal+0x34>)
 801e1a8:	f894 365c 	ldrb.w	r3, [r4, #1628]	@ 0x65c
 801e1ac:	b193      	cbz	r3, 801e1d4 <MobleStackIvUpdateSwitchToNormal+0x30>
 801e1ae:	2300      	movs	r3, #0
 801e1b0:	f884 365c 	strb.w	r3, [r4, #1628]	@ 0x65c
 801e1b4:	f7fe fd4c 	bl	801cc50 <MobleStackResetSeq>
 801e1b8:	4b08      	ldr	r3, [pc, #32]	@ (801e1dc <MobleStackIvUpdateSwitchToNormal+0x38>)
 801e1ba:	f8c4 3924 	str.w	r3, [r4, #2340]	@ 0x924
 801e1be:	4b08      	ldr	r3, [pc, #32]	@ (801e1e0 <MobleStackIvUpdateSwitchToNormal+0x3c>)
 801e1c0:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 801e1c4:	2b01      	cmp	r3, #1
 801e1c6:	d101      	bne.n	801e1cc <MobleStackIvUpdateSwitchToNormal+0x28>
 801e1c8:	f7ff f974 	bl	801d4b4 <BnrgmStackSendBeaconOverGatt>
 801e1cc:	f7ff ff8a 	bl	801e0e4 <BnrgmFrndMgmtSendSecurityUpdate>
 801e1d0:	2000      	movs	r0, #0
 801e1d2:	bd10      	pop	{r4, pc}
 801e1d4:	2001      	movs	r0, #1
 801e1d6:	e7fc      	b.n	801e1d2 <MobleStackIvUpdateSwitchToNormal+0x2e>
 801e1d8:	2000140c 	.word	0x2000140c
 801e1dc:	1ee62800 	.word	0x1ee62800
 801e1e0:	20000314 	.word	0x20000314

0801e1e4 <MobleStackIvUpdateTestSignal>:
 801e1e4:	4b03      	ldr	r3, [pc, #12]	@ (801e1f4 <MobleStackIvUpdateTestSignal+0x10>)
 801e1e6:	f893 365c 	ldrb.w	r3, [r3, #1628]	@ 0x65c
 801e1ea:	b90b      	cbnz	r3, 801e1f0 <MobleStackIvUpdateTestSignal+0xc>
 801e1ec:	f7ff bfba 	b.w	801e164 <MobleStackIvUpdateSwitchToProgress>
 801e1f0:	f7ff bfd8 	b.w	801e1a4 <MobleStackIvUpdateSwitchToNormal>
 801e1f4:	2000140c 	.word	0x2000140c

0801e1f8 <Test_UpperTester_Set04>:
 801e1f8:	f7ff bff4 	b.w	801e1e4 <MobleStackIvUpdateTestSignal>

0801e1fc <MobleStackProcessIvFromBeacon>:
 801e1fc:	b570      	push	{r4, r5, r6, lr}
 801e1fe:	4c29      	ldr	r4, [pc, #164]	@ (801e2a4 <MobleStackProcessIvFromBeacon+0xa8>)
 801e200:	4603      	mov	r3, r0
 801e202:	207c      	movs	r0, #124	@ 0x7c
 801e204:	fb00 4202 	mla	r2, r0, r2, r4
 801e208:	f8d4 5658 	ldr.w	r5, [r4, #1624]	@ 0x658
 801e20c:	f8b2 6448 	ldrh.w	r6, [r2, #1096]	@ 0x448
 801e210:	f894 265c 	ldrb.w	r2, [r4, #1628]	@ 0x65c
 801e214:	bb5a      	cbnz	r2, 801e26e <MobleStackProcessIvFromBeacon+0x72>
 801e216:	f105 022a 	add.w	r2, r5, #42	@ 0x2a
 801e21a:	428a      	cmp	r2, r1
 801e21c:	d325      	bcc.n	801e26a <MobleStackProcessIvFromBeacon+0x6e>
 801e21e:	f013 0002 	ands.w	r0, r3, #2
 801e222:	d01d      	beq.n	801e260 <MobleStackProcessIvFromBeacon+0x64>
 801e224:	1c6b      	adds	r3, r5, #1
 801e226:	428b      	cmp	r3, r1
 801e228:	d204      	bcs.n	801e234 <MobleStackProcessIvFromBeacon+0x38>
 801e22a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e22e:	4608      	mov	r0, r1
 801e230:	f7ff bf84 	b.w	801e13c <MobleStackForcedSetIvIndex>
 801e234:	d10f      	bne.n	801e256 <MobleStackProcessIvFromBeacon+0x5a>
 801e236:	f7fa fcc9 	bl	8018bcc <MoblePalCrypto_isPrimarySubnet>
 801e23a:	b140      	cbz	r0, 801e24e <MobleStackProcessIvFromBeacon+0x52>
 801e23c:	f8d4 2924 	ldr.w	r2, [r4, #2340]	@ 0x924
 801e240:	4b19      	ldr	r3, [pc, #100]	@ (801e2a8 <MobleStackProcessIvFromBeacon+0xac>)
 801e242:	429a      	cmp	r2, r3
 801e244:	d302      	bcc.n	801e24c <MobleStackProcessIvFromBeacon+0x50>
 801e246:	f894 392c 	ldrb.w	r3, [r4, #2348]	@ 0x92c
 801e24a:	b173      	cbz	r3, 801e26a <MobleStackProcessIvFromBeacon+0x6e>
 801e24c:	bb3e      	cbnz	r6, 801e29e <MobleStackProcessIvFromBeacon+0xa2>
 801e24e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e252:	f7ff bf87 	b.w	801e164 <MobleStackIvUpdateSwitchToProgress>
 801e256:	428d      	cmp	r5, r1
 801e258:	bf14      	ite	ne
 801e25a:	2002      	movne	r0, #2
 801e25c:	2001      	moveq	r0, #1
 801e25e:	bd70      	pop	{r4, r5, r6, pc}
 801e260:	1e6b      	subs	r3, r5, #1
 801e262:	428b      	cmp	r3, r1
 801e264:	d0fb      	beq.n	801e25e <MobleStackProcessIvFromBeacon+0x62>
 801e266:	428d      	cmp	r5, r1
 801e268:	d3df      	bcc.n	801e22a <MobleStackProcessIvFromBeacon+0x2e>
 801e26a:	2001      	movs	r0, #1
 801e26c:	e7f7      	b.n	801e25e <MobleStackProcessIvFromBeacon+0x62>
 801e26e:	079b      	lsls	r3, r3, #30
 801e270:	d4fb      	bmi.n	801e26a <MobleStackProcessIvFromBeacon+0x6e>
 801e272:	428d      	cmp	r5, r1
 801e274:	d1f9      	bne.n	801e26a <MobleStackProcessIvFromBeacon+0x6e>
 801e276:	f8d4 2924 	ldr.w	r2, [r4, #2340]	@ 0x924
 801e27a:	4b0b      	ldr	r3, [pc, #44]	@ (801e2a8 <MobleStackProcessIvFromBeacon+0xac>)
 801e27c:	429a      	cmp	r2, r3
 801e27e:	d303      	bcc.n	801e288 <MobleStackProcessIvFromBeacon+0x8c>
 801e280:	f894 392c 	ldrb.w	r3, [r4, #2348]	@ 0x92c
 801e284:	2b00      	cmp	r3, #0
 801e286:	d0f0      	beq.n	801e26a <MobleStackProcessIvFromBeacon+0x6e>
 801e288:	f8d4 3688 	ldr.w	r3, [r4, #1672]	@ 0x688
 801e28c:	b11b      	cbz	r3, 801e296 <MobleStackProcessIvFromBeacon+0x9a>
 801e28e:	4b07      	ldr	r3, [pc, #28]	@ (801e2ac <MobleStackProcessIvFromBeacon+0xb0>)
 801e290:	f8c4 3924 	str.w	r3, [r4, #2340]	@ 0x924
 801e294:	e7e9      	b.n	801e26a <MobleStackProcessIvFromBeacon+0x6e>
 801e296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e29a:	f7ff bf83 	b.w	801e1a4 <MobleStackIvUpdateSwitchToNormal>
 801e29e:	2002      	movs	r0, #2
 801e2a0:	e7dd      	b.n	801e25e <MobleStackProcessIvFromBeacon+0x62>
 801e2a2:	bf00      	nop
 801e2a4:	2000140c 	.word	0x2000140c
 801e2a8:	0a4cb800 	.word	0x0a4cb800
 801e2ac:	0a4cb801 	.word	0x0a4cb801

0801e2b0 <MobleStackProcessIvUpdate>:
 801e2b0:	b510      	push	{r4, lr}
 801e2b2:	f7e9 fdb3 	bl	8007e1c <HAL_GetTick>
 801e2b6:	4b19      	ldr	r3, [pc, #100]	@ (801e31c <MobleStackProcessIvUpdate+0x6c>)
 801e2b8:	f8d3 2928 	ldr.w	r2, [r3, #2344]	@ 0x928
 801e2bc:	f241 3187 	movw	r1, #4999	@ 0x1387
 801e2c0:	1a84      	subs	r4, r0, r2
 801e2c2:	428c      	cmp	r4, r1
 801e2c4:	d925      	bls.n	801e312 <MobleStackProcessIvUpdate+0x62>
 801e2c6:	f8d3 1924 	ldr.w	r1, [r3, #2340]	@ 0x924
 801e2ca:	f8c3 0928 	str.w	r0, [r3, #2344]	@ 0x928
 801e2ce:	42a1      	cmp	r1, r4
 801e2d0:	d916      	bls.n	801e300 <MobleStackProcessIvUpdate+0x50>
 801e2d2:	440a      	add	r2, r1
 801e2d4:	1a10      	subs	r0, r2, r0
 801e2d6:	f8c3 0924 	str.w	r0, [r3, #2340]	@ 0x924
 801e2da:	f893 265c 	ldrb.w	r2, [r3, #1628]	@ 0x65c
 801e2de:	f8d3 17dc 	ldr.w	r1, [r3, #2012]	@ 0x7dc
 801e2e2:	2a01      	cmp	r2, #1
 801e2e4:	d112      	bne.n	801e30c <MobleStackProcessIvUpdate+0x5c>
 801e2e6:	f8d3 0924 	ldr.w	r0, [r3, #2340]	@ 0x924
 801e2ea:	490d      	ldr	r1, [pc, #52]	@ (801e320 <MobleStackProcessIvUpdate+0x70>)
 801e2ec:	4288      	cmp	r0, r1
 801e2ee:	d210      	bcs.n	801e312 <MobleStackProcessIvUpdate+0x62>
 801e2f0:	f8d3 3688 	ldr.w	r3, [r3, #1672]	@ 0x688
 801e2f4:	b96b      	cbnz	r3, 801e312 <MobleStackProcessIvUpdate+0x62>
 801e2f6:	b96a      	cbnz	r2, 801e314 <MobleStackProcessIvUpdate+0x64>
 801e2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e2fc:	f7ff bf32 	b.w	801e164 <MobleStackIvUpdateSwitchToProgress>
 801e300:	2900      	cmp	r1, #0
 801e302:	d0ea      	beq.n	801e2da <MobleStackProcessIvUpdate+0x2a>
 801e304:	2200      	movs	r2, #0
 801e306:	f8c3 2924 	str.w	r2, [r3, #2340]	@ 0x924
 801e30a:	e7e6      	b.n	801e2da <MobleStackProcessIvUpdate+0x2a>
 801e30c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 801e310:	d2e9      	bcs.n	801e2e6 <MobleStackProcessIvUpdate+0x36>
 801e312:	bd10      	pop	{r4, pc}
 801e314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e318:	f7ff bf44 	b.w	801e1a4 <MobleStackIvUpdateSwitchToNormal>
 801e31c:	2000140c 	.word	0x2000140c
 801e320:	0a4cb800 	.word	0x0a4cb800

0801e324 <BnrgmFrndMgmtUpdateKeys>:
 801e324:	b508      	push	{r3, lr}
 801e326:	4b0c      	ldr	r3, [pc, #48]	@ (801e358 <BnrgmFrndMgmtUpdateKeys+0x34>)
 801e328:	460a      	mov	r2, r1
 801e32a:	f893 10be 	ldrb.w	r1, [r3, #190]	@ 0xbe
 801e32e:	2901      	cmp	r1, #1
 801e330:	d105      	bne.n	801e33e <BnrgmFrndMgmtUpdateKeys+0x1a>
 801e332:	4b0a      	ldr	r3, [pc, #40]	@ (801e35c <BnrgmFrndMgmtUpdateKeys+0x38>)
 801e334:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	@ 0xa04
 801e338:	f7ff fe80 	bl	801e03c <BnrgmFrndFnUpdateKeys>
 801e33c:	bd08      	pop	{r3, pc}
 801e33e:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 801e342:	2b02      	cmp	r3, #2
 801e344:	d005      	beq.n	801e352 <BnrgmFrndMgmtUpdateKeys+0x2e>
 801e346:	4b05      	ldr	r3, [pc, #20]	@ (801e35c <BnrgmFrndMgmtUpdateKeys+0x38>)
 801e348:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	@ 0xa04
 801e34c:	f7f4 ffdb 	bl	8013306 <BnrgmFrndLpnUpdateKeys>
 801e350:	e7f4      	b.n	801e33c <BnrgmFrndMgmtUpdateKeys+0x18>
 801e352:	2001      	movs	r0, #1
 801e354:	e7f2      	b.n	801e33c <BnrgmFrndMgmtUpdateKeys+0x18>
 801e356:	bf00      	nop
 801e358:	20000314 	.word	0x20000314
 801e35c:	20002504 	.word	0x20002504

0801e360 <BnrgmFrndMgmtSwitchKeys>:
 801e360:	b508      	push	{r3, lr}
 801e362:	4b0c      	ldr	r3, [pc, #48]	@ (801e394 <BnrgmFrndMgmtSwitchKeys+0x34>)
 801e364:	f893 20be 	ldrb.w	r2, [r3, #190]	@ 0xbe
 801e368:	2a01      	cmp	r2, #1
 801e36a:	4601      	mov	r1, r0
 801e36c:	d105      	bne.n	801e37a <BnrgmFrndMgmtSwitchKeys+0x1a>
 801e36e:	4b0a      	ldr	r3, [pc, #40]	@ (801e398 <BnrgmFrndMgmtSwitchKeys+0x38>)
 801e370:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	@ 0xa04
 801e374:	f7ff fe86 	bl	801e084 <BnrgmFrndFnSwitchKeys>
 801e378:	bd08      	pop	{r3, pc}
 801e37a:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 801e37e:	2b02      	cmp	r3, #2
 801e380:	d005      	beq.n	801e38e <BnrgmFrndMgmtSwitchKeys+0x2e>
 801e382:	4b05      	ldr	r3, [pc, #20]	@ (801e398 <BnrgmFrndMgmtSwitchKeys+0x38>)
 801e384:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	@ 0xa04
 801e388:	f7f4 ffa7 	bl	80132da <BnrgmFrndLpnSwitchKeys>
 801e38c:	e7f4      	b.n	801e378 <BnrgmFrndMgmtSwitchKeys+0x18>
 801e38e:	2001      	movs	r0, #1
 801e390:	e7f2      	b.n	801e378 <BnrgmFrndMgmtSwitchKeys+0x18>
 801e392:	bf00      	nop
 801e394:	20000314 	.word	0x20000314
 801e398:	20002504 	.word	0x20002504

0801e39c <MobleProvisionCheckFCS>:
 801e39c:	b530      	push	{r4, r5, lr}
 801e39e:	b1a0      	cbz	r0, 801e3ca <MobleProvisionCheckFCS+0x2e>
 801e3a0:	4c0b      	ldr	r4, [pc, #44]	@ (801e3d0 <MobleProvisionCheckFCS+0x34>)
 801e3a2:	440a      	add	r2, r1
 801e3a4:	23ff      	movs	r3, #255	@ 0xff
 801e3a6:	4291      	cmp	r1, r2
 801e3a8:	d108      	bne.n	801e3bc <MobleProvisionCheckFCS+0x20>
 801e3aa:	4058      	eors	r0, r3
 801e3ac:	4404      	add	r4, r0
 801e3ae:	f894 0403 	ldrb.w	r0, [r4, #1027]	@ 0x403
 801e3b2:	f1a0 03cf 	sub.w	r3, r0, #207	@ 0xcf
 801e3b6:	4258      	negs	r0, r3
 801e3b8:	4158      	adcs	r0, r3
 801e3ba:	bd30      	pop	{r4, r5, pc}
 801e3bc:	f811 5b01 	ldrb.w	r5, [r1], #1
 801e3c0:	406b      	eors	r3, r5
 801e3c2:	4423      	add	r3, r4
 801e3c4:	f893 3403 	ldrb.w	r3, [r3, #1027]	@ 0x403
 801e3c8:	e7ed      	b.n	801e3a6 <MobleProvisionCheckFCS+0xa>
 801e3ca:	2001      	movs	r0, #1
 801e3cc:	e7f5      	b.n	801e3ba <MobleProvisionCheckFCS+0x1e>
 801e3ce:	bf00      	nop
 801e3d0:	0802f174 	.word	0x0802f174

0801e3d4 <MobleSARJoin>:
 801e3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e3d8:	9f06      	ldr	r7, [sp, #24]
 801e3da:	461e      	mov	r6, r3
 801e3dc:	4604      	mov	r4, r0
 801e3de:	2800      	cmp	r0, #0
 801e3e0:	d069      	beq.n	801e4b6 <MobleSARJoin+0xe2>
 801e3e2:	2b00      	cmp	r3, #0
 801e3e4:	d067      	beq.n	801e4b6 <MobleSARJoin+0xe2>
 801e3e6:	2f00      	cmp	r7, #0
 801e3e8:	d065      	beq.n	801e4b6 <MobleSARJoin+0xe2>
 801e3ea:	780b      	ldrb	r3, [r1, #0]
 801e3ec:	f013 0003 	ands.w	r0, r3, #3
 801e3f0:	d139      	bne.n	801e466 <MobleSARJoin+0x92>
 801e3f2:	2a04      	cmp	r2, #4
 801e3f4:	dc02      	bgt.n	801e3fc <MobleSARJoin+0x28>
 801e3f6:	2002      	movs	r0, #2
 801e3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e3fc:	788b      	ldrb	r3, [r1, #2]
 801e3fe:	8123      	strh	r3, [r4, #8]
 801e400:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 801e404:	ba5b      	rev16	r3, r3
 801e406:	b298      	uxth	r0, r3
 801e408:	2880      	cmp	r0, #128	@ 0x80
 801e40a:	8123      	strh	r3, [r4, #8]
 801e40c:	d8f3      	bhi.n	801e3f6 <MobleSARJoin+0x22>
 801e40e:	78cb      	ldrb	r3, [r1, #3]
 801e410:	71a3      	strb	r3, [r4, #6]
 801e412:	f811 3b04 	ldrb.w	r3, [r1], #4
 801e416:	80a2      	strh	r2, [r4, #4]
 801e418:	089b      	lsrs	r3, r3, #2
 801e41a:	3301      	adds	r3, #1
 801e41c:	7023      	strb	r3, [r4, #0]
 801e41e:	2301      	movs	r3, #1
 801e420:	8063      	strh	r3, [r4, #2]
 801e422:	3a04      	subs	r2, #4
 801e424:	f104 000a 	add.w	r0, r4, #10
 801e428:	f00a fea6 	bl	8029178 <memmove>
 801e42c:	7821      	ldrb	r1, [r4, #0]
 801e42e:	8862      	ldrh	r2, [r4, #2]
 801e430:	2301      	movs	r3, #1
 801e432:	408b      	lsls	r3, r1
 801e434:	3b01      	subs	r3, #1
 801e436:	429a      	cmp	r2, r3
 801e438:	d11b      	bne.n	801e472 <MobleSARJoin+0x9e>
 801e43a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801e43e:	79a0      	ldrb	r0, [r4, #6]
 801e440:	2b01      	cmp	r3, #1
 801e442:	d135      	bne.n	801e4b0 <MobleSARJoin+0xdc>
 801e444:	7a22      	ldrb	r2, [r4, #8]
 801e446:	f104 010a 	add.w	r1, r4, #10
 801e44a:	f7ff ffa7 	bl	801e39c <MobleProvisionCheckFCS>
 801e44e:	2800      	cmp	r0, #0
 801e450:	d0d1      	beq.n	801e3f6 <MobleSARJoin+0x22>
 801e452:	8922      	ldrh	r2, [r4, #8]
 801e454:	f104 010a 	add.w	r1, r4, #10
 801e458:	4630      	mov	r0, r6
 801e45a:	f00a fe8d 	bl	8029178 <memmove>
 801e45e:	8923      	ldrh	r3, [r4, #8]
 801e460:	603b      	str	r3, [r7, #0]
 801e462:	2000      	movs	r0, #0
 801e464:	e7c8      	b.n	801e3f8 <MobleSARJoin+0x24>
 801e466:	2802      	cmp	r0, #2
 801e468:	d1c5      	bne.n	801e3f6 <MobleSARJoin+0x22>
 801e46a:	2a01      	cmp	r2, #1
 801e46c:	ddc3      	ble.n	801e3f6 <MobleSARJoin+0x22>
 801e46e:	88a5      	ldrh	r5, [r4, #4]
 801e470:	b90d      	cbnz	r5, 801e476 <MobleSARJoin+0xa2>
 801e472:	2001      	movs	r0, #1
 801e474:	e7c0      	b.n	801e3f8 <MobleSARJoin+0x24>
 801e476:	7820      	ldrb	r0, [r4, #0]
 801e478:	ebb0 0f93 	cmp.w	r0, r3, lsr #2
 801e47c:	ea4f 0893 	mov.w	r8, r3, lsr #2
 801e480:	d3b9      	bcc.n	801e3f6 <MobleSARJoin+0x22>
 801e482:	f1b8 0f00 	cmp.w	r8, #0
 801e486:	d0b6      	beq.n	801e3f6 <MobleSARJoin+0x22>
 801e488:	1e6b      	subs	r3, r5, #1
 801e48a:	f108 3cff 	add.w	ip, r8, #4294967295
 801e48e:	3d04      	subs	r5, #4
 801e490:	fb0c 5503 	mla	r5, ip, r3, r5
 801e494:	f104 000a 	add.w	r0, r4, #10
 801e498:	3a01      	subs	r2, #1
 801e49a:	3101      	adds	r1, #1
 801e49c:	4428      	add	r0, r5
 801e49e:	f00a fe6b 	bl	8029178 <memmove>
 801e4a2:	8862      	ldrh	r2, [r4, #2]
 801e4a4:	2301      	movs	r3, #1
 801e4a6:	fa03 f308 	lsl.w	r3, r3, r8
 801e4aa:	4313      	orrs	r3, r2
 801e4ac:	8063      	strh	r3, [r4, #2]
 801e4ae:	e7bd      	b.n	801e42c <MobleSARJoin+0x58>
 801e4b0:	2800      	cmp	r0, #0
 801e4b2:	d0ce      	beq.n	801e452 <MobleSARJoin+0x7e>
 801e4b4:	e79f      	b.n	801e3f6 <MobleSARJoin+0x22>
 801e4b6:	2003      	movs	r0, #3
 801e4b8:	e79e      	b.n	801e3f8 <MobleSARJoin+0x24>
	...

0801e4bc <MobleProvisionCalculateFCS>:
 801e4bc:	b510      	push	{r4, lr}
 801e4be:	4a07      	ldr	r2, [pc, #28]	@ (801e4dc <MobleProvisionCalculateFCS+0x20>)
 801e4c0:	4401      	add	r1, r0
 801e4c2:	23ff      	movs	r3, #255	@ 0xff
 801e4c4:	4288      	cmp	r0, r1
 801e4c6:	d102      	bne.n	801e4ce <MobleProvisionCalculateFCS+0x12>
 801e4c8:	43d8      	mvns	r0, r3
 801e4ca:	b2c0      	uxtb	r0, r0
 801e4cc:	bd10      	pop	{r4, pc}
 801e4ce:	f810 4b01 	ldrb.w	r4, [r0], #1
 801e4d2:	4063      	eors	r3, r4
 801e4d4:	4413      	add	r3, r2
 801e4d6:	f893 3403 	ldrb.w	r3, [r3, #1027]	@ 0x403
 801e4da:	e7f3      	b.n	801e4c4 <MobleProvisionCalculateFCS+0x8>
 801e4dc:	0802f174 	.word	0x0802f174

0801e4e0 <MobleSARSplit>:
 801e4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4e4:	297f      	cmp	r1, #127	@ 0x7f
 801e4e6:	f89d c030 	ldrb.w	ip, [sp, #48]	@ 0x30
 801e4ea:	4680      	mov	r8, r0
 801e4ec:	460e      	mov	r6, r1
 801e4ee:	4617      	mov	r7, r2
 801e4f0:	461c      	mov	r4, r3
 801e4f2:	dd03      	ble.n	801e4fc <MobleSARSplit+0x1c>
 801e4f4:	2003      	movs	r0, #3
 801e4f6:	b003      	add	sp, #12
 801e4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4fc:	2900      	cmp	r1, #0
 801e4fe:	d0f9      	beq.n	801e4f4 <MobleSARSplit+0x14>
 801e500:	2b00      	cmp	r3, #0
 801e502:	d0f7      	beq.n	801e4f4 <MobleSARSplit+0x14>
 801e504:	fa1f fa82 	uxth.w	sl, r2
 801e508:	1d35      	adds	r5, r6, #4
 801e50a:	f8a3 a004 	strh.w	sl, [r3, #4]
 801e50e:	42aa      	cmp	r2, r5
 801e510:	f04f 0300 	mov.w	r3, #0
 801e514:	f3c1 2e07 	ubfx	lr, r1, #8, #8
 801e518:	8123      	strh	r3, [r4, #8]
 801e51a:	b2c9      	uxtb	r1, r1
 801e51c:	db19      	blt.n	801e552 <MobleSARSplit+0x72>
 801e51e:	2201      	movs	r2, #1
 801e520:	4594      	cmp	ip, r2
 801e522:	7022      	strb	r2, [r4, #0]
 801e524:	72a3      	strb	r3, [r4, #10]
 801e526:	f884 e00b 	strb.w	lr, [r4, #11]
 801e52a:	7321      	strb	r1, [r4, #12]
 801e52c:	d10f      	bne.n	801e54e <MobleSARSplit+0x6e>
 801e52e:	f7ff ffc5 	bl	801e4bc <MobleProvisionCalculateFCS>
 801e532:	2e7c      	cmp	r6, #124	@ 0x7c
 801e534:	7360      	strb	r0, [r4, #13]
 801e536:	dcdd      	bgt.n	801e4f4 <MobleSARSplit+0x14>
 801e538:	4632      	mov	r2, r6
 801e53a:	4641      	mov	r1, r8
 801e53c:	f104 000e 	add.w	r0, r4, #14
 801e540:	f00a fe1a 	bl	8029178 <memmove>
 801e544:	2301      	movs	r3, #1
 801e546:	8125      	strh	r5, [r4, #8]
 801e548:	8063      	strh	r3, [r4, #2]
 801e54a:	2000      	movs	r0, #0
 801e54c:	e7d3      	b.n	801e4f6 <MobleSARSplit+0x16>
 801e54e:	4618      	mov	r0, r3
 801e550:	e7ef      	b.n	801e532 <MobleSARSplit+0x52>
 801e552:	f102 39ff 	add.w	r9, r2, #4294967295
 801e556:	1cb2      	adds	r2, r6, #2
 801e558:	fb92 f2f9 	sdiv	r2, r2, r9
 801e55c:	b2d2      	uxtb	r2, r2
 801e55e:	1c55      	adds	r5, r2, #1
 801e560:	f1bc 0f01 	cmp.w	ip, #1
 801e564:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801e568:	7025      	strb	r5, [r4, #0]
 801e56a:	72a2      	strb	r2, [r4, #10]
 801e56c:	f884 e00b 	strb.w	lr, [r4, #11]
 801e570:	7321      	strb	r1, [r4, #12]
 801e572:	d141      	bne.n	801e5f8 <MobleSARSplit+0x118>
 801e574:	f7ff ffa2 	bl	801e4bc <MobleProvisionCalculateFCS>
 801e578:	2f80      	cmp	r7, #128	@ 0x80
 801e57a:	7360      	strb	r0, [r4, #13]
 801e57c:	dcba      	bgt.n	801e4f4 <MobleSARSplit+0x14>
 801e57e:	f1a7 0b04 	sub.w	fp, r7, #4
 801e582:	465a      	mov	r2, fp
 801e584:	4641      	mov	r1, r8
 801e586:	f104 000e 	add.w	r0, r4, #14
 801e58a:	f00a fdf5 	bl	8029178 <memmove>
 801e58e:	2501      	movs	r5, #1
 801e590:	f104 030a 	add.w	r3, r4, #10
 801e594:	f8a4 a008 	strh.w	sl, [r4, #8]
 801e598:	8065      	strh	r5, [r4, #2]
 801e59a:	9301      	str	r3, [sp, #4]
 801e59c:	7821      	ldrb	r1, [r4, #0]
 801e59e:	428d      	cmp	r5, r1
 801e5a0:	d2d3      	bcs.n	801e54a <MobleSARSplit+0x6a>
 801e5a2:	fb05 f007 	mul.w	r0, r5, r7
 801e5a6:	eb04 0c00 	add.w	ip, r4, r0
 801e5aa:	00aa      	lsls	r2, r5, #2
 801e5ac:	f042 0202 	orr.w	r2, r2, #2
 801e5b0:	f88c 200a 	strb.w	r2, [ip, #10]
 801e5b4:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 801e5b8:	2301      	movs	r3, #1
 801e5ba:	fa03 f205 	lsl.w	r2, r3, r5
 801e5be:	3901      	subs	r1, #1
 801e5c0:	ea42 020c 	orr.w	r2, r2, ip
 801e5c4:	428d      	cmp	r5, r1
 801e5c6:	8062      	strh	r2, [r4, #2]
 801e5c8:	d118      	bne.n	801e5fc <MobleSARSplit+0x11c>
 801e5ca:	eba6 020b 	sub.w	r2, r6, fp
 801e5ce:	18d1      	adds	r1, r2, r3
 801e5d0:	4401      	add	r1, r0
 801e5d2:	2980      	cmp	r1, #128	@ 0x80
 801e5d4:	d88e      	bhi.n	801e4f4 <MobleSARSplit+0x14>
 801e5d6:	4418      	add	r0, r3
 801e5d8:	9b01      	ldr	r3, [sp, #4]
 801e5da:	eb08 010b 	add.w	r1, r8, fp
 801e5de:	4418      	add	r0, r3
 801e5e0:	f00a fdca 	bl	8029178 <memmove>
 801e5e4:	8922      	ldrh	r2, [r4, #8]
 801e5e6:	3201      	adds	r2, #1
 801e5e8:	4432      	add	r2, r6
 801e5ea:	eba2 020b 	sub.w	r2, r2, fp
 801e5ee:	b292      	uxth	r2, r2
 801e5f0:	3501      	adds	r5, #1
 801e5f2:	8122      	strh	r2, [r4, #8]
 801e5f4:	b2ed      	uxtb	r5, r5
 801e5f6:	e7d1      	b.n	801e59c <MobleSARSplit+0xbc>
 801e5f8:	4618      	mov	r0, r3
 801e5fa:	e7bd      	b.n	801e578 <MobleSARSplit+0x98>
 801e5fc:	3001      	adds	r0, #1
 801e5fe:	eb00 0209 	add.w	r2, r0, r9
 801e602:	2a80      	cmp	r2, #128	@ 0x80
 801e604:	f73f af76 	bgt.w	801e4f4 <MobleSARSplit+0x14>
 801e608:	9b01      	ldr	r3, [sp, #4]
 801e60a:	464a      	mov	r2, r9
 801e60c:	eb08 010b 	add.w	r1, r8, fp
 801e610:	4418      	add	r0, r3
 801e612:	f00a fdb1 	bl	8029178 <memmove>
 801e616:	8922      	ldrh	r2, [r4, #8]
 801e618:	44cb      	add	fp, r9
 801e61a:	4452      	add	r2, sl
 801e61c:	e7e7      	b.n	801e5ee <MobleSARSplit+0x10e>

0801e61e <MobleProvisionUpdateRole>:
 801e61e:	6803      	ldr	r3, [r0, #0]
 801e620:	781b      	ldrb	r3, [r3, #0]
 801e622:	2b01      	cmp	r3, #1
 801e624:	d106      	bne.n	801e634 <MobleProvisionUpdateRole+0x16>
 801e626:	f890 31f8 	ldrb.w	r3, [r0, #504]	@ 0x1f8
 801e62a:	b113      	cbz	r3, 801e632 <MobleProvisionUpdateRole+0x14>
 801e62c:	2302      	movs	r3, #2
 801e62e:	f880 31f8 	strb.w	r3, [r0, #504]	@ 0x1f8
 801e632:	4770      	bx	lr
 801e634:	2301      	movs	r3, #1
 801e636:	e7fa      	b.n	801e62e <MobleProvisionUpdateRole+0x10>

0801e638 <MobleProvisionProvisionerInit>:
 801e638:	b510      	push	{r4, lr}
 801e63a:	b928      	cbnz	r0, 801e648 <MobleProvisionProvisionerInit+0x10>
 801e63c:	4b10      	ldr	r3, [pc, #64]	@ (801e680 <MobleProvisionProvisionerInit+0x48>)
 801e63e:	4a11      	ldr	r2, [pc, #68]	@ (801e684 <MobleProvisionProvisionerInit+0x4c>)
 801e640:	4811      	ldr	r0, [pc, #68]	@ (801e688 <MobleProvisionProvisionerInit+0x50>)
 801e642:	212e      	movs	r1, #46	@ 0x2e
 801e644:	f009 feca 	bl	80283dc <__assert_func>
 801e648:	f890 41f8 	ldrb.w	r4, [r0, #504]	@ 0x1f8
 801e64c:	2c01      	cmp	r4, #1
 801e64e:	d014      	beq.n	801e67a <MobleProvisionProvisionerInit+0x42>
 801e650:	e9c0 23a0 	strd	r2, r3, [r0, #640]	@ 0x280
 801e654:	9b02      	ldr	r3, [sp, #8]
 801e656:	f8c0 3288 	str.w	r3, [r0, #648]	@ 0x288
 801e65a:	9b03      	ldr	r3, [sp, #12]
 801e65c:	f8c0 328c 	str.w	r3, [r0, #652]	@ 0x28c
 801e660:	9b04      	ldr	r3, [sp, #16]
 801e662:	f8c0 3290 	str.w	r3, [r0, #656]	@ 0x290
 801e666:	2400      	movs	r4, #0
 801e668:	2301      	movs	r3, #1
 801e66a:	f880 41f8 	strb.w	r4, [r0, #504]	@ 0x1f8
 801e66e:	f880 1294 	strb.w	r1, [r0, #660]	@ 0x294
 801e672:	f8a0 3296 	strh.w	r3, [r0, #662]	@ 0x296
 801e676:	4620      	mov	r0, r4
 801e678:	bd10      	pop	{r4, pc}
 801e67a:	2002      	movs	r0, #2
 801e67c:	e7fc      	b.n	801e678 <MobleProvisionProvisionerInit+0x40>
 801e67e:	bf00      	nop
 801e680:	080314e1 	.word	0x080314e1
 801e684:	0802f677 	.word	0x0802f677
 801e688:	080314f1 	.word	0x080314f1

0801e68c <MobleLibraryInitProvisioner>:
 801e68c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e68e:	9c07      	ldr	r4, [sp, #28]
 801e690:	9402      	str	r4, [sp, #8]
 801e692:	9c06      	ldr	r4, [sp, #24]
 801e694:	e9cd 3400 	strd	r3, r4, [sp]
 801e698:	4613      	mov	r3, r2
 801e69a:	460a      	mov	r2, r1
 801e69c:	4601      	mov	r1, r0
 801e69e:	4803      	ldr	r0, [pc, #12]	@ (801e6ac <MobleLibraryInitProvisioner+0x20>)
 801e6a0:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	@ 0x6f0
 801e6a4:	f7ff ffc8 	bl	801e638 <MobleProvisionProvisionerInit>
 801e6a8:	b004      	add	sp, #16
 801e6aa:	bd10      	pop	{r4, pc}
 801e6ac:	20002504 	.word	0x20002504

0801e6b0 <BLEMesh_InitProvisionedNode>:
 801e6b0:	b507      	push	{r0, r1, r2, lr}
 801e6b2:	4b07      	ldr	r3, [pc, #28]	@ (801e6d0 <BLEMesh_InitProvisionedNode+0x20>)
 801e6b4:	4907      	ldr	r1, [pc, #28]	@ (801e6d4 <BLEMesh_InitProvisionedNode+0x24>)
 801e6b6:	681a      	ldr	r2, [r3, #0]
 801e6b8:	4b07      	ldr	r3, [pc, #28]	@ (801e6d8 <BLEMesh_InitProvisionedNode+0x28>)
 801e6ba:	9301      	str	r3, [sp, #4]
 801e6bc:	4b07      	ldr	r3, [pc, #28]	@ (801e6dc <BLEMesh_InitProvisionedNode+0x2c>)
 801e6be:	9300      	str	r3, [sp, #0]
 801e6c0:	6a13      	ldr	r3, [r2, #32]
 801e6c2:	6992      	ldr	r2, [r2, #24]
 801e6c4:	2005      	movs	r0, #5
 801e6c6:	f7ff ffe1 	bl	801e68c <MobleLibraryInitProvisioner>
 801e6ca:	b003      	add	sp, #12
 801e6cc:	f85d fb04 	ldr.w	pc, [sp], #4
 801e6d0:	20000314 	.word	0x20000314
 801e6d4:	0801728d 	.word	0x0801728d
 801e6d8:	0801727d 	.word	0x0801727d
 801e6dc:	08017299 	.word	0x08017299

0801e6e0 <MobleProvisionUnprovisionedInitEx>:
 801e6e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6e4:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801e6e8:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801e6ec:	f8bd 7038 	ldrh.w	r7, [sp, #56]	@ 0x38
 801e6f0:	f89d 8040 	ldrb.w	r8, [sp, #64]	@ 0x40
 801e6f4:	f8bd 9044 	ldrh.w	r9, [sp, #68]	@ 0x44
 801e6f8:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 801e6fc:	e9dd cb0a 	ldrd	ip, fp, [sp, #40]	@ 0x28
 801e700:	4604      	mov	r4, r0
 801e702:	b928      	cbnz	r0, 801e710 <MobleProvisionUnprovisionedInitEx+0x30>
 801e704:	4b30      	ldr	r3, [pc, #192]	@ (801e7c8 <MobleProvisionUnprovisionedInitEx+0xe8>)
 801e706:	4a31      	ldr	r2, [pc, #196]	@ (801e7cc <MobleProvisionUnprovisionedInitEx+0xec>)
 801e708:	4831      	ldr	r0, [pc, #196]	@ (801e7d0 <MobleProvisionUnprovisionedInitEx+0xf0>)
 801e70a:	215f      	movs	r1, #95	@ 0x5f
 801e70c:	f009 fe66 	bl	80283dc <__assert_func>
 801e710:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
 801e714:	f8c0 1290 	str.w	r1, [r0, #656]	@ 0x290
 801e718:	f880 31fe 	strb.w	r3, [r0, #510]	@ 0x1fe
 801e71c:	f880 2200 	strb.w	r2, [r0, #512]	@ 0x200
 801e720:	b1a3      	cbz	r3, 801e74c <MobleProvisionUnprovisionedInitEx+0x6c>
 801e722:	f1bc 0f00 	cmp.w	ip, #0
 801e726:	d102      	bne.n	801e72e <MobleProvisionUnprovisionedInitEx+0x4e>
 801e728:	2003      	movs	r0, #3
 801e72a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e72e:	f1bb 0f00 	cmp.w	fp, #0
 801e732:	d0f9      	beq.n	801e728 <MobleProvisionUnprovisionedInitEx+0x48>
 801e734:	2240      	movs	r2, #64	@ 0x40
 801e736:	4661      	mov	r1, ip
 801e738:	f500 7002 	add.w	r0, r0, #520	@ 0x208
 801e73c:	f00a fd1c 	bl	8029178 <memmove>
 801e740:	2220      	movs	r2, #32
 801e742:	4659      	mov	r1, fp
 801e744:	f504 7012 	add.w	r0, r4, #584	@ 0x248
 801e748:	f00a fd16 	bl	8029178 <memmove>
 801e74c:	b35d      	cbz	r5, 801e7a6 <MobleProvisionUnprovisionedInitEx+0xc6>
 801e74e:	b36f      	cbz	r7, 801e7ac <MobleProvisionUnprovisionedInitEx+0xcc>
 801e750:	2d08      	cmp	r5, #8
 801e752:	d8e9      	bhi.n	801e728 <MobleProvisionUnprovisionedInitEx+0x48>
 801e754:	f884 5206 	strb.w	r5, [r4, #518]	@ 0x206
 801e758:	f8a4 7202 	strh.w	r7, [r4, #514]	@ 0x202
 801e75c:	f8c4 a294 	str.w	sl, [r4, #660]	@ 0x294
 801e760:	b33e      	cbz	r6, 801e7b2 <MobleProvisionUnprovisionedInitEx+0xd2>
 801e762:	2e10      	cmp	r6, #16
 801e764:	d8e0      	bhi.n	801e728 <MobleProvisionUnprovisionedInitEx+0x48>
 801e766:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d0dd      	beq.n	801e728 <MobleProvisionUnprovisionedInitEx+0x48>
 801e76c:	2301      	movs	r3, #1
 801e76e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801e770:	f884 31ff 	strb.w	r3, [r4, #511]	@ 0x1ff
 801e774:	f884 627e 	strb.w	r6, [r4, #638]	@ 0x27e
 801e778:	4632      	mov	r2, r6
 801e77a:	f204 207f 	addw	r0, r4, #639	@ 0x27f
 801e77e:	f00a fcfb 	bl	8029178 <memmove>
 801e782:	f1b8 0f00 	cmp.w	r8, #0
 801e786:	d017      	beq.n	801e7b8 <MobleProvisionUnprovisionedInitEx+0xd8>
 801e788:	f1b9 0f00 	cmp.w	r9, #0
 801e78c:	d014      	beq.n	801e7b8 <MobleProvisionUnprovisionedInitEx+0xd8>
 801e78e:	f1b8 0f08 	cmp.w	r8, #8
 801e792:	d8c9      	bhi.n	801e728 <MobleProvisionUnprovisionedInitEx+0x48>
 801e794:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e796:	f884 8207 	strb.w	r8, [r4, #519]	@ 0x207
 801e79a:	f8a4 9204 	strh.w	r9, [r4, #516]	@ 0x204
 801e79e:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
 801e7a2:	2000      	movs	r0, #0
 801e7a4:	e7c1      	b.n	801e72a <MobleProvisionUnprovisionedInitEx+0x4a>
 801e7a6:	462f      	mov	r7, r5
 801e7a8:	46aa      	mov	sl, r5
 801e7aa:	e7d3      	b.n	801e754 <MobleProvisionUnprovisionedInitEx+0x74>
 801e7ac:	463d      	mov	r5, r7
 801e7ae:	46ba      	mov	sl, r7
 801e7b0:	e7d0      	b.n	801e754 <MobleProvisionUnprovisionedInitEx+0x74>
 801e7b2:	f884 627e 	strb.w	r6, [r4, #638]	@ 0x27e
 801e7b6:	e7e4      	b.n	801e782 <MobleProvisionUnprovisionedInitEx+0xa2>
 801e7b8:	2000      	movs	r0, #0
 801e7ba:	f884 0207 	strb.w	r0, [r4, #519]	@ 0x207
 801e7be:	f8a4 0204 	strh.w	r0, [r4, #516]	@ 0x204
 801e7c2:	f8c4 0298 	str.w	r0, [r4, #664]	@ 0x298
 801e7c6:	e7b0      	b.n	801e72a <MobleProvisionUnprovisionedInitEx+0x4a>
 801e7c8:	080314e1 	.word	0x080314e1
 801e7cc:	0802f695 	.word	0x0802f695
 801e7d0:	080314f1 	.word	0x080314f1

0801e7d4 <MobleLibraryInitUnprovisioned>:
 801e7d4:	b510      	push	{r4, lr}
 801e7d6:	b08c      	sub	sp, #48	@ 0x30
 801e7d8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801e7da:	940a      	str	r4, [sp, #40]	@ 0x28
 801e7dc:	f89d 4058 	ldrb.w	r4, [sp, #88]	@ 0x58
 801e7e0:	9409      	str	r4, [sp, #36]	@ 0x24
 801e7e2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e7e4:	9408      	str	r4, [sp, #32]
 801e7e6:	f8bd 4050 	ldrh.w	r4, [sp, #80]	@ 0x50
 801e7ea:	9407      	str	r4, [sp, #28]
 801e7ec:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801e7f0:	9406      	str	r4, [sp, #24]
 801e7f2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e7f4:	9405      	str	r4, [sp, #20]
 801e7f6:	f8bd 4044 	ldrh.w	r4, [sp, #68]	@ 0x44
 801e7fa:	9404      	str	r4, [sp, #16]
 801e7fc:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801e800:	9403      	str	r4, [sp, #12]
 801e802:	f89d 403c 	ldrb.w	r4, [sp, #60]	@ 0x3c
 801e806:	9402      	str	r4, [sp, #8]
 801e808:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e80a:	e9cd 3400 	strd	r3, r4, [sp]
 801e80e:	4613      	mov	r3, r2
 801e810:	460a      	mov	r2, r1
 801e812:	4601      	mov	r1, r0
 801e814:	4803      	ldr	r0, [pc, #12]	@ (801e824 <MobleLibraryInitUnprovisioned+0x50>)
 801e816:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	@ 0x6f0
 801e81a:	f7ff ff61 	bl	801e6e0 <MobleProvisionUnprovisionedInitEx>
 801e81e:	b00c      	add	sp, #48	@ 0x30
 801e820:	bd10      	pop	{r4, pc}
 801e822:	bf00      	nop
 801e824:	20002504 	.word	0x20002504

0801e828 <BLEMesh_InitUnprovisionedNode>:
 801e828:	b500      	push	{lr}
 801e82a:	4b10      	ldr	r3, [pc, #64]	@ (801e86c <BLEMesh_InitUnprovisionedNode+0x44>)
 801e82c:	4810      	ldr	r0, [pc, #64]	@ (801e870 <BLEMesh_InitUnprovisionedNode+0x48>)
 801e82e:	681b      	ldr	r3, [r3, #0]
 801e830:	b08b      	sub	sp, #44	@ 0x2c
 801e832:	6919      	ldr	r1, [r3, #16]
 801e834:	781a      	ldrb	r2, [r3, #0]
 801e836:	9109      	str	r1, [sp, #36]	@ 0x24
 801e838:	7b59      	ldrb	r1, [r3, #13]
 801e83a:	9108      	str	r1, [sp, #32]
 801e83c:	6a19      	ldr	r1, [r3, #32]
 801e83e:	9107      	str	r1, [sp, #28]
 801e840:	7f59      	ldrb	r1, [r3, #29]
 801e842:	9106      	str	r1, [sp, #24]
 801e844:	7f19      	ldrb	r1, [r3, #28]
 801e846:	9105      	str	r1, [sp, #20]
 801e848:	6999      	ldr	r1, [r3, #24]
 801e84a:	9104      	str	r1, [sp, #16]
 801e84c:	7d59      	ldrb	r1, [r3, #21]
 801e84e:	9103      	str	r1, [sp, #12]
 801e850:	7d19      	ldrb	r1, [r3, #20]
 801e852:	9102      	str	r1, [sp, #8]
 801e854:	7b19      	ldrb	r1, [r3, #12]
 801e856:	9101      	str	r1, [sp, #4]
 801e858:	6899      	ldr	r1, [r3, #8]
 801e85a:	9100      	str	r1, [sp, #0]
 801e85c:	685b      	ldr	r3, [r3, #4]
 801e85e:	2100      	movs	r1, #0
 801e860:	f7ff ffb8 	bl	801e7d4 <MobleLibraryInitUnprovisioned>
 801e864:	b00b      	add	sp, #44	@ 0x2c
 801e866:	f85d fb04 	ldr.w	pc, [sp], #4
 801e86a:	bf00      	nop
 801e86c:	20000314 	.word	0x20000314
 801e870:	080172a5 	.word	0x080172a5

0801e874 <MobleConfigNetworkInvalidate>:
 801e874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e878:	4606      	mov	r6, r0
 801e87a:	2800      	cmp	r0, #0
 801e87c:	d04a      	beq.n	801e914 <MobleConfigNetworkInvalidate+0xa0>
 801e87e:	4f26      	ldr	r7, [pc, #152]	@ (801e918 <MobleConfigNetworkInvalidate+0xa4>)
 801e880:	f507 5580 	add.w	r5, r7, #4096	@ 0x1000
 801e884:	f895 479c 	ldrb.w	r4, [r5, #1948]	@ 0x79c
 801e888:	bbe4      	cbnz	r4, 801e904 <MobleConfigNetworkInvalidate+0x90>
 801e88a:	2301      	movs	r3, #1
 801e88c:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 801e890:	4621      	mov	r1, r4
 801e892:	f205 507a 	addw	r0, r5, #1402	@ 0x57a
 801e896:	f885 379d 	strb.w	r3, [r5, #1949]	@ 0x79d
 801e89a:	f8a7 4962 	strh.w	r4, [r7, #2402]	@ 0x962
 801e89e:	f00a fc85 	bl	80291ac <memset>
 801e8a2:	2284      	movs	r2, #132	@ 0x84
 801e8a4:	4621      	mov	r1, r4
 801e8a6:	f205 60ee 	addw	r0, r5, #1774	@ 0x6ee
 801e8aa:	f00a fc7f 	bl	80291ac <memset>
 801e8ae:	2210      	movs	r2, #16
 801e8b0:	4621      	mov	r1, r4
 801e8b2:	f205 7074 	addw	r0, r5, #1908	@ 0x774
 801e8b6:	f00a fc79 	bl	80291ac <memset>
 801e8ba:	f205 596f 	addw	r9, r5, #1391	@ 0x56f
 801e8be:	f8a5 4772 	strh.w	r4, [r5, #1906]	@ 0x772
 801e8c2:	f8a5 4784 	strh.w	r4, [r5, #1924]	@ 0x784
 801e8c6:	46a0      	mov	r8, r4
 801e8c8:	f607 1768 	addw	r7, r7, #2408	@ 0x968
 801e8cc:	f809 8f01 	strb.w	r8, [r9, #1]!
 801e8d0:	1938      	adds	r0, r7, r4
 801e8d2:	f889 8005 	strb.w	r8, [r9, #5]
 801e8d6:	f44f 721a 	mov.w	r2, #616	@ 0x268
 801e8da:	2100      	movs	r1, #0
 801e8dc:	f00a fc66 	bl	80291ac <memset>
 801e8e0:	f504 741a 	add.w	r4, r4, #616	@ 0x268
 801e8e4:	f640 4308 	movw	r3, #3080	@ 0xc08
 801e8e8:	429c      	cmp	r4, r3
 801e8ea:	d1ef      	bne.n	801e8cc <MobleConfigNetworkInvalidate+0x58>
 801e8ec:	f885 87a8 	strb.w	r8, [r5, #1960]	@ 0x7a8
 801e8f0:	f7fd fd16 	bl	801c320 <MobleConfigNetworkEncode>
 801e8f4:	f7fd fe46 	bl	801c584 <MobleConfigSavedSeqEncode>
 801e8f8:	f7fd fbec 	bl	801c0d4 <MobleConfigSave>
 801e8fc:	2801      	cmp	r0, #1
 801e8fe:	d807      	bhi.n	801e910 <MobleConfigNetworkInvalidate+0x9c>
 801e900:	f885 879d 	strb.w	r8, [r5, #1949]	@ 0x79d
 801e904:	f7ff ff90 	bl	801e828 <BLEMesh_InitUnprovisionedNode>
 801e908:	2300      	movs	r3, #0
 801e90a:	7033      	strb	r3, [r6, #0]
 801e90c:	8073      	strh	r3, [r6, #2]
 801e90e:	4618      	mov	r0, r3
 801e910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e914:	2003      	movs	r0, #3
 801e916:	e7fb      	b.n	801e910 <MobleConfigNetworkInvalidate+0x9c>
 801e918:	2000140c 	.word	0x2000140c

0801e91c <MobleProvisionGetRole>:
 801e91c:	b508      	push	{r3, lr}
 801e91e:	b928      	cbnz	r0, 801e92c <MobleProvisionGetRole+0x10>
 801e920:	4b04      	ldr	r3, [pc, #16]	@ (801e934 <MobleProvisionGetRole+0x18>)
 801e922:	4a05      	ldr	r2, [pc, #20]	@ (801e938 <MobleProvisionGetRole+0x1c>)
 801e924:	4805      	ldr	r0, [pc, #20]	@ (801e93c <MobleProvisionGetRole+0x20>)
 801e926:	21b2      	movs	r1, #178	@ 0xb2
 801e928:	f009 fd58 	bl	80283dc <__assert_func>
 801e92c:	f890 01f8 	ldrb.w	r0, [r0, #504]	@ 0x1f8
 801e930:	bd08      	pop	{r3, pc}
 801e932:	bf00      	nop
 801e934:	080314e9 	.word	0x080314e9
 801e938:	0802f6b7 	.word	0x0802f6b7
 801e93c:	080314f1 	.word	0x080314f1

0801e940 <BLEMesh_IsUnprovisioned>:
 801e940:	b508      	push	{r3, lr}
 801e942:	4b04      	ldr	r3, [pc, #16]	@ (801e954 <BLEMesh_IsUnprovisioned+0x14>)
 801e944:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 801e948:	f7ff ffe8 	bl	801e91c <MobleProvisionGetRole>
 801e94c:	1e43      	subs	r3, r0, #1
 801e94e:	4258      	negs	r0, r3
 801e950:	4158      	adcs	r0, r3
 801e952:	bd08      	pop	{r3, pc}
 801e954:	20002504 	.word	0x20002504

0801e958 <MoblePalBluetoothReset>:
 801e958:	b570      	push	{r4, r5, r6, lr}
 801e95a:	b088      	sub	sp, #32
 801e95c:	f7f6 fb71 	bl	8015042 <hci_reset>
 801e960:	2515      	movs	r5, #21
 801e962:	4604      	mov	r4, r0
 801e964:	b1bc      	cbz	r4, 801e996 <MoblePalBluetoothReset+0x3e>
 801e966:	3d01      	subs	r5, #1
 801e968:	d103      	bne.n	801e972 <MoblePalBluetoothReset+0x1a>
 801e96a:	462c      	mov	r4, r5
 801e96c:	4620      	mov	r0, r4
 801e96e:	b008      	add	sp, #32
 801e970:	bd70      	pop	{r4, r5, r6, pc}
 801e972:	f7f6 fb66 	bl	8015042 <hci_reset>
 801e976:	4604      	mov	r4, r0
 801e978:	e7f4      	b.n	801e964 <MoblePalBluetoothReset+0xc>
 801e97a:	2b01      	cmp	r3, #1
 801e97c:	d11a      	bne.n	801e9b4 <MoblePalBluetoothReset+0x5c>
 801e97e:	f505 7257 	add.w	r2, r5, #860	@ 0x35c
 801e982:	2106      	movs	r1, #6
 801e984:	202e      	movs	r0, #46	@ 0x2e
 801e986:	e011      	b.n	801e9ac <MoblePalBluetoothReset+0x54>
 801e988:	4798      	blx	r3
 801e98a:	2801      	cmp	r0, #1
 801e98c:	d959      	bls.n	801ea42 <MoblePalBluetoothReset+0xea>
 801e98e:	e7ed      	b.n	801e96c <MoblePalBluetoothReset+0x14>
 801e990:	4b31      	ldr	r3, [pc, #196]	@ (801ea58 <MoblePalBluetoothReset+0x100>)
 801e992:	7018      	strb	r0, [r3, #0]
 801e994:	e7ea      	b.n	801e96c <MoblePalBluetoothReset+0x14>
 801e996:	4d31      	ldr	r5, [pc, #196]	@ (801ea5c <MoblePalBluetoothReset+0x104>)
 801e998:	f7fc f82c 	bl	801a9f4 <MoblePalBluetoothFreeAllNotifications>
 801e99c:	f895 3363 	ldrb.w	r3, [r5, #867]	@ 0x363
 801e9a0:	2b03      	cmp	r3, #3
 801e9a2:	d1ea      	bne.n	801e97a <MoblePalBluetoothReset+0x22>
 801e9a4:	f505 7257 	add.w	r2, r5, #860	@ 0x35c
 801e9a8:	2106      	movs	r1, #6
 801e9aa:	4620      	mov	r0, r4
 801e9ac:	f7f6 f984 	bl	8014cb8 <aci_hal_write_config_data>
 801e9b0:	2800      	cmp	r0, #0
 801e9b2:	d1db      	bne.n	801e96c <MoblePalBluetoothReset+0x14>
 801e9b4:	4b2a      	ldr	r3, [pc, #168]	@ (801ea60 <MoblePalBluetoothReset+0x108>)
 801e9b6:	685b      	ldr	r3, [r3, #4]
 801e9b8:	685b      	ldr	r3, [r3, #4]
 801e9ba:	4798      	blx	r3
 801e9bc:	2800      	cmp	r0, #0
 801e9be:	d1d5      	bne.n	801e96c <MoblePalBluetoothReset+0x14>
 801e9c0:	f7f5 fcf9 	bl	80143b6 <aci_gatt_init>
 801e9c4:	4601      	mov	r1, r0
 801e9c6:	2800      	cmp	r0, #0
 801e9c8:	d1d0      	bne.n	801e96c <MoblePalBluetoothReset+0x14>
 801e9ca:	f10d 0312 	add.w	r3, sp, #18
 801e9ce:	9301      	str	r3, [sp, #4]
 801e9d0:	f10d 0316 	add.w	r3, sp, #22
 801e9d4:	9300      	str	r3, [sp, #0]
 801e9d6:	f8ad 0012 	strh.w	r0, [sp, #18]
 801e9da:	f895 2364 	ldrb.w	r2, [r5, #868]	@ 0x364
 801e9de:	ab05      	add	r3, sp, #20
 801e9e0:	200b      	movs	r0, #11
 801e9e2:	f7f5 fad5 	bl	8013f90 <aci_gap_init>
 801e9e6:	4606      	mov	r6, r0
 801e9e8:	2800      	cmp	r0, #0
 801e9ea:	d1bf      	bne.n	801e96c <MoblePalBluetoothReset+0x14>
 801e9ec:	f895 3364 	ldrb.w	r3, [r5, #868]	@ 0x364
 801e9f0:	b193      	cbz	r3, 801ea18 <MoblePalBluetoothReset+0xc0>
 801e9f2:	f8d5 3368 	ldr.w	r3, [r5, #872]	@ 0x368
 801e9f6:	f895 2364 	ldrb.w	r2, [r5, #868]	@ 0x364
 801e9fa:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801e9fe:	3302      	adds	r3, #2
 801ea00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ea04:	2300      	movs	r3, #0
 801ea06:	e9cd 2600 	strd	r2, r6, [sp]
 801ea0a:	4618      	mov	r0, r3
 801ea0c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ea10:	f7f6 f88f 	bl	8014b32 <aci_gatt_update_char_value_ext>
 801ea14:	2893      	cmp	r0, #147	@ 0x93
 801ea16:	d0ec      	beq.n	801e9f2 <MoblePalBluetoothReset+0x9a>
 801ea18:	f895 3363 	ldrb.w	r3, [r5, #867]	@ 0x363
 801ea1c:	2b01      	cmp	r3, #1
 801ea1e:	d10c      	bne.n	801ea3a <MoblePalBluetoothReset+0xe2>
 801ea20:	aa06      	add	r2, sp, #24
 801ea22:	f10d 011f 	add.w	r1, sp, #31
 801ea26:	202e      	movs	r0, #46	@ 0x2e
 801ea28:	f7f6 f9cb 	bl	8014dc2 <aci_hal_read_config_data>
 801ea2c:	4b0d      	ldr	r3, [pc, #52]	@ (801ea64 <MoblePalBluetoothReset+0x10c>)
 801ea2e:	9806      	ldr	r0, [sp, #24]
 801ea30:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801ea34:	f8c5 035c 	str.w	r0, [r5, #860]	@ 0x35c
 801ea38:	809a      	strh	r2, [r3, #4]
 801ea3a:	f8d5 3374 	ldr.w	r3, [r5, #884]	@ 0x374
 801ea3e:	2b00      	cmp	r3, #0
 801ea40:	d1a2      	bne.n	801e988 <MoblePalBluetoothReset+0x30>
 801ea42:	2300      	movs	r3, #0
 801ea44:	f8c5 3354 	str.w	r3, [r5, #852]	@ 0x354
 801ea48:	f7ff ff7a 	bl	801e940 <BLEMesh_IsUnprovisioned>
 801ea4c:	2801      	cmp	r0, #1
 801ea4e:	4604      	mov	r4, r0
 801ea50:	d09e      	beq.n	801e990 <MoblePalBluetoothReset+0x38>
 801ea52:	2401      	movs	r4, #1
 801ea54:	e78a      	b.n	801e96c <MoblePalBluetoothReset+0x14>
 801ea56:	bf00      	nop
 801ea58:	20004433 	.word	0x20004433
 801ea5c:	2000140c 	.word	0x2000140c
 801ea60:	20000314 	.word	0x20000314
 801ea64:	20001768 	.word	0x20001768

0801ea68 <MobleProvisionGenerateAuthValue>:
 801ea68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ea6a:	4605      	mov	r5, r0
 801ea6c:	b928      	cbnz	r0, 801ea7a <MobleProvisionGenerateAuthValue+0x12>
 801ea6e:	4b1e      	ldr	r3, [pc, #120]	@ (801eae8 <MobleProvisionGenerateAuthValue+0x80>)
 801ea70:	4a1e      	ldr	r2, [pc, #120]	@ (801eaec <MobleProvisionGenerateAuthValue+0x84>)
 801ea72:	481f      	ldr	r0, [pc, #124]	@ (801eaf0 <MobleProvisionGenerateAuthValue+0x88>)
 801ea74:	21ba      	movs	r1, #186	@ 0xba
 801ea76:	f009 fcb1 	bl	80283dc <__assert_func>
 801ea7a:	4b1e      	ldr	r3, [pc, #120]	@ (801eaf4 <MobleProvisionGenerateAuthValue+0x8c>)
 801ea7c:	f8d3 46f0 	ldr.w	r4, [r3, #1776]	@ 0x6f0
 801ea80:	2210      	movs	r2, #16
 801ea82:	2100      	movs	r1, #0
 801ea84:	f00a fb92 	bl	80291ac <memset>
 801ea88:	f894 31fb 	ldrb.w	r3, [r4, #507]	@ 0x1fb
 801ea8c:	2b02      	cmp	r3, #2
 801ea8e:	d008      	beq.n	801eaa2 <MobleProvisionGenerateAuthValue+0x3a>
 801ea90:	2b03      	cmp	r3, #3
 801ea92:	d014      	beq.n	801eabe <MobleProvisionGenerateAuthValue+0x56>
 801ea94:	2b01      	cmp	r3, #1
 801ea96:	d125      	bne.n	801eae4 <MobleProvisionGenerateAuthValue+0x7c>
 801ea98:	f894 2278 	ldrb.w	r2, [r4, #632]	@ 0x278
 801ea9c:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 801eaa0:	e007      	b.n	801eab2 <MobleProvisionGenerateAuthValue+0x4a>
 801eaa2:	f894 31fc 	ldrb.w	r3, [r4, #508]	@ 0x1fc
 801eaa6:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 801eaaa:	2b04      	cmp	r3, #4
 801eaac:	d10d      	bne.n	801eaca <MobleProvisionGenerateAuthValue+0x62>
 801eaae:	f894 2278 	ldrb.w	r2, [r4, #632]	@ 0x278
 801eab2:	4628      	mov	r0, r5
 801eab4:	b003      	add	sp, #12
 801eab6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801eaba:	f00a bb5d 	b.w	8029178 <memmove>
 801eabe:	f894 31fc 	ldrb.w	r3, [r4, #508]	@ 0x1fc
 801eac2:	f504 711a 	add.w	r1, r4, #616	@ 0x268
 801eac6:	2b03      	cmp	r3, #3
 801eac8:	e7f0      	b.n	801eaac <MobleProvisionGenerateAuthValue+0x44>
 801eaca:	f8d4 0268 	ldr.w	r0, [r4, #616]	@ 0x268
 801eace:	6849      	ldr	r1, [r1, #4]
 801ead0:	466b      	mov	r3, sp
 801ead2:	c303      	stmia	r3!, {r0, r1}
 801ead4:	2210      	movs	r2, #16
 801ead6:	4601      	mov	r1, r0
 801ead8:	4628      	mov	r0, r5
 801eada:	b003      	add	sp, #12
 801eadc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801eae0:	f7fc b881 	b.w	801abe6 <MobleOutputStreamPutBigEndian>
 801eae4:	b003      	add	sp, #12
 801eae6:	bd30      	pop	{r4, r5, pc}
 801eae8:	08031539 	.word	0x08031539
 801eaec:	0802f6cd 	.word	0x0802f6cd
 801eaf0:	080314f1 	.word	0x080314f1
 801eaf4:	20002504 	.word	0x20002504

0801eaf8 <MobleProvisionBearerGatt_DeleteTimer>:
 801eaf8:	6802      	ldr	r2, [r0, #0]
 801eafa:	b122      	cbz	r2, 801eb06 <MobleProvisionBearerGatt_DeleteTimer+0xe>
 801eafc:	2300      	movs	r3, #0
 801eafe:	7013      	strb	r3, [r2, #0]
 801eb00:	6003      	str	r3, [r0, #0]
 801eb02:	4618      	mov	r0, r3
 801eb04:	4770      	bx	lr
 801eb06:	2001      	movs	r0, #1
 801eb08:	4770      	bx	lr
	...

0801eb0c <MobleProvision_UnprovisionedNode_Init>:
 801eb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb0e:	4d2d      	ldr	r5, [pc, #180]	@ (801ebc4 <MobleProvision_UnprovisionedNode_Init+0xb8>)
 801eb10:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	@ 0x6f0
 801eb14:	f7ff ff02 	bl	801e91c <MobleProvisionGetRole>
 801eb18:	2801      	cmp	r0, #1
 801eb1a:	4607      	mov	r7, r0
 801eb1c:	d150      	bne.n	801ebc0 <MobleProvision_UnprovisionedNode_Init+0xb4>
 801eb1e:	f44f 70d6 	mov.w	r0, #428	@ 0x1ac
 801eb22:	f7fb fea5 	bl	801a870 <MobleMemAlloc>
 801eb26:	4606      	mov	r6, r0
 801eb28:	f8c5 0a0c 	str.w	r0, [r5, #2572]	@ 0xa0c
 801eb2c:	b908      	cbnz	r0, 801eb32 <MobleProvision_UnprovisionedNode_Init+0x26>
 801eb2e:	2002      	movs	r0, #2
 801eb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eb32:	2400      	movs	r4, #0
 801eb34:	f8a0 4044 	strh.w	r4, [r0, #68]	@ 0x44
 801eb38:	f7e9 f970 	bl	8007e1c <HAL_GetTick>
 801eb3c:	4b22      	ldr	r3, [pc, #136]	@ (801ebc8 <MobleProvision_UnprovisionedNode_Init+0xbc>)
 801eb3e:	f8c6 01a4 	str.w	r0, [r6, #420]	@ 0x1a4
 801eb42:	f8d5 6a0c 	ldr.w	r6, [r5, #2572]	@ 0xa0c
 801eb46:	685b      	ldr	r3, [r3, #4]
 801eb48:	f8c6 404a 	str.w	r4, [r6, #74]	@ 0x4a
 801eb4c:	f8c6 4046 	str.w	r4, [r6, #70]	@ 0x46
 801eb50:	f8c6 404d 	str.w	r4, [r6, #77]	@ 0x4d
 801eb54:	69db      	ldr	r3, [r3, #28]
 801eb56:	4798      	blx	r3
 801eb58:	f886 0046 	strb.w	r0, [r6, #70]	@ 0x46
 801eb5c:	f8d5 0a0c 	ldr.w	r0, [r5, #2572]	@ 0xa0c
 801eb60:	f890 2046 	ldrb.w	r2, [r0, #70]	@ 0x46
 801eb64:	2a05      	cmp	r2, #5
 801eb66:	d8e2      	bhi.n	801eb2e <MobleProvision_UnprovisionedNode_Init+0x22>
 801eb68:	f8d5 16f0 	ldr.w	r1, [r5, #1776]	@ 0x6f0
 801eb6c:	f880 4047 	strb.w	r4, [r0, #71]	@ 0x47
 801eb70:	f880 7048 	strb.w	r7, [r0, #72]	@ 0x48
 801eb74:	f891 21fe 	ldrb.w	r2, [r1, #510]	@ 0x1fe
 801eb78:	f880 2049 	strb.w	r2, [r0, #73]	@ 0x49
 801eb7c:	f891 21ff 	ldrb.w	r2, [r1, #511]	@ 0x1ff
 801eb80:	f880 204a 	strb.w	r2, [r0, #74]	@ 0x4a
 801eb84:	f891 2206 	ldrb.w	r2, [r1, #518]	@ 0x206
 801eb88:	f880 204b 	strb.w	r2, [r0, #75]	@ 0x4b
 801eb8c:	f8b1 1202 	ldrh.w	r1, [r1, #514]	@ 0x202
 801eb90:	2202      	movs	r2, #2
 801eb92:	304c      	adds	r0, #76	@ 0x4c
 801eb94:	f7fc f827 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801eb98:	f8d5 36f0 	ldr.w	r3, [r5, #1776]	@ 0x6f0
 801eb9c:	f8d5 0a0c 	ldr.w	r0, [r5, #2572]	@ 0xa0c
 801eba0:	f893 2207 	ldrb.w	r2, [r3, #519]	@ 0x207
 801eba4:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
 801eba8:	f8b3 1204 	ldrh.w	r1, [r3, #516]	@ 0x204
 801ebac:	2202      	movs	r2, #2
 801ebae:	304f      	adds	r0, #79	@ 0x4f
 801ebb0:	f7fc f819 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801ebb4:	f8d5 3a0c 	ldr.w	r3, [r5, #2572]	@ 0xa0c
 801ebb8:	4620      	mov	r0, r4
 801ebba:	f8a3 41a8 	strh.w	r4, [r3, #424]	@ 0x1a8
 801ebbe:	e7b7      	b.n	801eb30 <MobleProvision_UnprovisionedNode_Init+0x24>
 801ebc0:	2003      	movs	r0, #3
 801ebc2:	e7b5      	b.n	801eb30 <MobleProvision_UnprovisionedNode_Init+0x24>
 801ebc4:	20002504 	.word	0x20002504
 801ebc8:	20000314 	.word	0x20000314

0801ebcc <MobleProvision_UnprovisionedNode_GetNextOperation>:
 801ebcc:	4b10      	ldr	r3, [pc, #64]	@ (801ec10 <MobleProvision_UnprovisionedNode_GetNextOperation+0x44>)
 801ebce:	f8d3 2a0c 	ldr.w	r2, [r3, #2572]	@ 0xa0c
 801ebd2:	f892 0044 	ldrb.w	r0, [r2, #68]	@ 0x44
 801ebd6:	2807      	cmp	r0, #7
 801ebd8:	d809      	bhi.n	801ebee <MobleProvision_UnprovisionedNode_GetNextOperation+0x22>
 801ebda:	2301      	movs	r3, #1
 801ebdc:	4083      	lsls	r3, r0
 801ebde:	f013 0f35 	tst.w	r3, #53	@ 0x35
 801ebe2:	d106      	bne.n	801ebf2 <MobleProvision_UnprovisionedNode_GetNextOperation+0x26>
 801ebe4:	f013 0388 	ands.w	r3, r3, #136	@ 0x88
 801ebe8:	d110      	bne.n	801ec0c <MobleProvision_UnprovisionedNode_GetNextOperation+0x40>
 801ebea:	2801      	cmp	r0, #1
 801ebec:	d008      	beq.n	801ec00 <MobleProvision_UnprovisionedNode_GetNextOperation+0x34>
 801ebee:	2000      	movs	r0, #0
 801ebf0:	4770      	bx	lr
 801ebf2:	f892 3045 	ldrb.w	r3, [r2, #69]	@ 0x45
 801ebf6:	2b00      	cmp	r3, #0
 801ebf8:	bf14      	ite	ne
 801ebfa:	2002      	movne	r0, #2
 801ebfc:	2001      	moveq	r0, #1
 801ebfe:	4770      	bx	lr
 801ec00:	f892 3045 	ldrb.w	r3, [r2, #69]	@ 0x45
 801ec04:	2b02      	cmp	r3, #2
 801ec06:	bf28      	it	cs
 801ec08:	2002      	movcs	r0, #2
 801ec0a:	4770      	bx	lr
 801ec0c:	2002      	movs	r0, #2
 801ec0e:	4770      	bx	lr
 801ec10:	20002504 	.word	0x20002504

0801ec14 <BnrgmProvision_UnprovisionedGetState>:
 801ec14:	4b04      	ldr	r3, [pc, #16]	@ (801ec28 <BnrgmProvision_UnprovisionedGetState+0x14>)
 801ec16:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 801ec1a:	b113      	cbz	r3, 801ec22 <BnrgmProvision_UnprovisionedGetState+0xe>
 801ec1c:	f893 0044 	ldrb.w	r0, [r3, #68]	@ 0x44
 801ec20:	4770      	bx	lr
 801ec22:	2007      	movs	r0, #7
 801ec24:	4770      	bx	lr
 801ec26:	bf00      	nop
 801ec28:	20002504 	.word	0x20002504

0801ec2c <BnrgmTransmitFsm>:
 801ec2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ec2e:	4605      	mov	r5, r0
 801ec30:	f7e9 f8f4 	bl	8007e1c <HAL_GetTick>
 801ec34:	4c90      	ldr	r4, [pc, #576]	@ (801ee78 <BnrgmTransmitFsm+0x24c>)
 801ec36:	4606      	mov	r6, r0
 801ec38:	f7f8 fec0 	bl	80179bc <MoblePalBluetoothGetConnectionState>
 801ec3c:	f894 317a 	ldrb.w	r3, [r4, #378]	@ 0x17a
 801ec40:	2b08      	cmp	r3, #8
 801ec42:	d82e      	bhi.n	801eca2 <BnrgmTransmitFsm+0x76>
 801ec44:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ec48:	00570009 	.word	0x00570009
 801ec4c:	007e0074 	.word	0x007e0074
 801ec50:	00f900ba 	.word	0x00f900ba
 801ec54:	002d0105 	.word	0x002d0105
 801ec58:	007c      	.short	0x007c
 801ec5a:	bb7d      	cbnz	r5, 801ecbc <BnrgmTransmitFsm+0x90>
 801ec5c:	f894 3166 	ldrb.w	r3, [r4, #358]	@ 0x166
 801ec60:	b30b      	cbz	r3, 801eca6 <BnrgmTransmitFsm+0x7a>
 801ec62:	f7e9 f8db 	bl	8007e1c <HAL_GetTick>
 801ec66:	f894 3167 	ldrb.w	r3, [r4, #359]	@ 0x167
 801ec6a:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801ec6e:	b923      	cbnz	r3, 801ec7a <BnrgmTransmitFsm+0x4e>
 801ec70:	f8b4 3178 	ldrh.w	r3, [r4, #376]	@ 0x178
 801ec74:	1a80      	subs	r0, r0, r2
 801ec76:	4283      	cmp	r3, r0
 801ec78:	d815      	bhi.n	801eca6 <BnrgmTransmitFsm+0x7a>
 801ec7a:	f7fb fb49 	bl	801a310 <BnrgmTransmitQueuePrepNextItem>
 801ec7e:	f894 3168 	ldrb.w	r3, [r4, #360]	@ 0x168
 801ec82:	4318      	orrs	r0, r3
 801ec84:	b2c0      	uxtb	r0, r0
 801ec86:	b970      	cbnz	r0, 801eca6 <BnrgmTransmitFsm+0x7a>
 801ec88:	2301      	movs	r3, #1
 801ec8a:	f884 317a 	strb.w	r3, [r4, #378]	@ 0x17a
 801ec8e:	4c7b      	ldr	r4, [pc, #492]	@ (801ee7c <BnrgmTransmitFsm+0x250>)
 801ec90:	f894 3a10 	ldrb.w	r3, [r4, #2576]	@ 0xa10
 801ec94:	b92b      	cbnz	r3, 801eca2 <BnrgmTransmitFsm+0x76>
 801ec96:	200f      	movs	r0, #15
 801ec98:	f7f6 f97f 	bl	8014f9a <aci_hal_set_radio_activity_mask>
 801ec9c:	2301      	movs	r3, #1
 801ec9e:	f884 3a10 	strb.w	r3, [r4, #2576]	@ 0xa10
 801eca2:	b002      	add	sp, #8
 801eca4:	bd70      	pop	{r4, r5, r6, pc}
 801eca6:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
 801ecaa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801ecae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801ecb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ecb6:	d1ea      	bne.n	801ec8e <BnrgmTransmitFsm+0x62>
 801ecb8:	2303      	movs	r3, #3
 801ecba:	e7e6      	b.n	801ec8a <BnrgmTransmitFsm+0x5e>
 801ecbc:	2d05      	cmp	r5, #5
 801ecbe:	d110      	bne.n	801ece2 <BnrgmTransmitFsm+0xb6>
 801ecc0:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 801ecc4:	f8b4 016c 	ldrh.w	r0, [r4, #364]	@ 0x16c
 801ecc8:	f8a4 1186 	strh.w	r1, [r4, #390]	@ 0x186
 801eccc:	f8a4 0184 	strh.w	r0, [r4, #388]	@ 0x184
 801ecd0:	f7fb fd5a 	bl	801a788 <BnrgmTransmitStartScan>
 801ecd4:	f7e9 f8a2 	bl	8007e1c <HAL_GetTick>
 801ecd8:	f884 517a 	strb.w	r5, [r4, #378]	@ 0x17a
 801ecdc:	f8c4 0170 	str.w	r0, [r4, #368]	@ 0x170
 801ece0:	e7d5      	b.n	801ec8e <BnrgmTransmitFsm+0x62>
 801ece2:	2d01      	cmp	r5, #1
 801ece4:	d1d3      	bne.n	801ec8e <BnrgmTransmitFsm+0x62>
 801ece6:	f7fb faa3 	bl	801a230 <BnrgmTransmitQueueInit>
 801ecea:	2300      	movs	r3, #0
 801ecec:	f8a4 3168 	strh.w	r3, [r4, #360]	@ 0x168
 801ecf0:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
 801ecf4:	e7cb      	b.n	801ec8e <BnrgmTransmitFsm+0x62>
 801ecf6:	b9a5      	cbnz	r5, 801ed22 <BnrgmTransmitFsm+0xf6>
 801ecf8:	f7f9 f888 	bl	8017e0c <MoblePalBluetoothModeStopScan>
 801ecfc:	9501      	str	r5, [sp, #4]
 801ecfe:	9b01      	ldr	r3, [sp, #4]
 801ed00:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 801ed04:	d306      	bcc.n	801ed14 <BnrgmTransmitFsm+0xe8>
 801ed06:	f7fb fd2d 	bl	801a764 <BnrgmTransmitStartAdv>
 801ed0a:	b9c8      	cbnz	r0, 801ed40 <BnrgmTransmitFsm+0x114>
 801ed0c:	2302      	movs	r3, #2
 801ed0e:	f884 317a 	strb.w	r3, [r4, #378]	@ 0x17a
 801ed12:	e7c6      	b.n	801eca2 <BnrgmTransmitFsm+0x76>
 801ed14:	9b01      	ldr	r3, [sp, #4]
 801ed16:	3301      	adds	r3, #1
 801ed18:	9301      	str	r3, [sp, #4]
 801ed1a:	9b01      	ldr	r3, [sp, #4]
 801ed1c:	3301      	adds	r3, #1
 801ed1e:	9301      	str	r3, [sp, #4]
 801ed20:	e7ed      	b.n	801ecfe <BnrgmTransmitFsm+0xd2>
 801ed22:	2d03      	cmp	r5, #3
 801ed24:	d1bd      	bne.n	801eca2 <BnrgmTransmitFsm+0x76>
 801ed26:	b002      	add	sp, #8
 801ed28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ed2c:	f7f9 b86e 	b.w	8017e0c <MoblePalBluetoothModeStopScan>
 801ed30:	2d02      	cmp	r5, #2
 801ed32:	d1b6      	bne.n	801eca2 <BnrgmTransmitFsm+0x76>
 801ed34:	f7f8 ffde 	bl	8017cf4 <MoblePalBluetoothModeStopAdv>
 801ed38:	f8c4 6180 	str.w	r6, [r4, #384]	@ 0x180
 801ed3c:	f7fb fb3a 	bl	801a3b4 <BnrgmTransmitQueueAlign>
 801ed40:	2300      	movs	r3, #0
 801ed42:	e7e4      	b.n	801ed0e <BnrgmTransmitFsm+0xe2>
 801ed44:	2d00      	cmp	r5, #0
 801ed46:	d1ac      	bne.n	801eca2 <BnrgmTransmitFsm+0x76>
 801ed48:	2802      	cmp	r0, #2
 801ed4a:	d124      	bne.n	801ed96 <BnrgmTransmitFsm+0x16a>
 801ed4c:	f7ff ff62 	bl	801ec14 <BnrgmProvision_UnprovisionedGetState>
 801ed50:	2807      	cmp	r0, #7
 801ed52:	4b4a      	ldr	r3, [pc, #296]	@ (801ee7c <BnrgmTransmitFsm+0x250>)
 801ed54:	d109      	bne.n	801ed6a <BnrgmTransmitFsm+0x13e>
 801ed56:	f893 2725 	ldrb.w	r2, [r3, #1829]	@ 0x725
 801ed5a:	2a02      	cmp	r2, #2
 801ed5c:	d005      	beq.n	801ed6a <BnrgmTransmitFsm+0x13e>
 801ed5e:	f8d3 26f0 	ldr.w	r2, [r3, #1776]	@ 0x6f0
 801ed62:	f892 21f8 	ldrb.w	r2, [r2, #504]	@ 0x1f8
 801ed66:	2a01      	cmp	r2, #1
 801ed68:	d00f      	beq.n	801ed8a <BnrgmTransmitFsm+0x15e>
 801ed6a:	f04f 1214 	mov.w	r2, #1310740	@ 0x140014
 801ed6e:	f8c4 2184 	str.w	r2, [r4, #388]	@ 0x184
 801ed72:	2201      	movs	r2, #1
 801ed74:	f883 2a11 	strb.w	r2, [r3, #2577]	@ 0xa11
 801ed78:	f8b4 1186 	ldrh.w	r1, [r4, #390]	@ 0x186
 801ed7c:	f8b4 0184 	ldrh.w	r0, [r4, #388]	@ 0x184
 801ed80:	f7fb fd02 	bl	801a788 <BnrgmTransmitStartScan>
 801ed84:	b9c0      	cbnz	r0, 801edb8 <BnrgmTransmitFsm+0x18c>
 801ed86:	2304      	movs	r3, #4
 801ed88:	e7c1      	b.n	801ed0e <BnrgmTransmitFsm+0xe2>
 801ed8a:	4a3d      	ldr	r2, [pc, #244]	@ (801ee80 <BnrgmTransmitFsm+0x254>)
 801ed8c:	f8c4 2184 	str.w	r2, [r4, #388]	@ 0x184
 801ed90:	f883 5a11 	strb.w	r5, [r3, #2577]	@ 0xa11
 801ed94:	e7f0      	b.n	801ed78 <BnrgmTransmitFsm+0x14c>
 801ed96:	b948      	cbnz	r0, 801edac <BnrgmTransmitFsm+0x180>
 801ed98:	4b3a      	ldr	r3, [pc, #232]	@ (801ee84 <BnrgmTransmitFsm+0x258>)
 801ed9a:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 801ed9e:	f24a 0327 	movw	r3, #40999	@ 0xa027
 801eda2:	429a      	cmp	r2, r3
 801eda4:	d904      	bls.n	801edb0 <BnrgmTransmitFsm+0x184>
 801eda6:	f04f 1314 	mov.w	r3, #1310740	@ 0x140014
 801edaa:	e002      	b.n	801edb2 <BnrgmTransmitFsm+0x186>
 801edac:	2801      	cmp	r0, #1
 801edae:	d0fa      	beq.n	801eda6 <BnrgmTransmitFsm+0x17a>
 801edb0:	2300      	movs	r3, #0
 801edb2:	f8c4 3184 	str.w	r3, [r4, #388]	@ 0x184
 801edb6:	e7df      	b.n	801ed78 <BnrgmTransmitFsm+0x14c>
 801edb8:	2308      	movs	r3, #8
 801edba:	e7a8      	b.n	801ed0e <BnrgmTransmitFsm+0xe2>
 801edbc:	b9dd      	cbnz	r5, 801edf6 <BnrgmTransmitFsm+0x1ca>
 801edbe:	f894 3166 	ldrb.w	r3, [r4, #358]	@ 0x166
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	f43f af6d 	beq.w	801eca2 <BnrgmTransmitFsm+0x76>
 801edc8:	f7e9 f828 	bl	8007e1c <HAL_GetTick>
 801edcc:	f894 3167 	ldrb.w	r3, [r4, #359]	@ 0x167
 801edd0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801edd4:	b92b      	cbnz	r3, 801ede2 <BnrgmTransmitFsm+0x1b6>
 801edd6:	f8b4 3178 	ldrh.w	r3, [r4, #376]	@ 0x178
 801edda:	1a80      	subs	r0, r0, r2
 801eddc:	4283      	cmp	r3, r0
 801edde:	f63f af60 	bhi.w	801eca2 <BnrgmTransmitFsm+0x76>
 801ede2:	f7fb fa95 	bl	801a310 <BnrgmTransmitQueuePrepNextItem>
 801ede6:	f894 3168 	ldrb.w	r3, [r4, #360]	@ 0x168
 801edea:	4318      	orrs	r0, r3
 801edec:	b2c0      	uxtb	r0, r0
 801edee:	2800      	cmp	r0, #0
 801edf0:	d1a6      	bne.n	801ed40 <BnrgmTransmitFsm+0x114>
 801edf2:	2301      	movs	r3, #1
 801edf4:	e78b      	b.n	801ed0e <BnrgmTransmitFsm+0xe2>
 801edf6:	2d04      	cmp	r5, #4
 801edf8:	d119      	bne.n	801ee2e <BnrgmTransmitFsm+0x202>
 801edfa:	2801      	cmp	r0, #1
 801edfc:	f47f af51 	bne.w	801eca2 <BnrgmTransmitFsm+0x76>
 801ee00:	4b20      	ldr	r3, [pc, #128]	@ (801ee84 <BnrgmTransmitFsm+0x258>)
 801ee02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801ee06:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 801ee0a:	fbb3 f3f2 	udiv	r3, r3, r2
 801ee0e:	f8b4 2184 	ldrh.w	r2, [r4, #388]	@ 0x184
 801ee12:	f8a4 3186 	strh.w	r3, [r4, #390]	@ 0x186
 801ee16:	320c      	adds	r2, #12
 801ee18:	b29b      	uxth	r3, r3
 801ee1a:	429a      	cmp	r2, r3
 801ee1c:	f4bf af41 	bcs.w	801eca2 <BnrgmTransmitFsm+0x76>
 801ee20:	f7e8 fffc 	bl	8007e1c <HAL_GetTick>
 801ee24:	3003      	adds	r0, #3
 801ee26:	f8c4 0188 	str.w	r0, [r4, #392]	@ 0x188
 801ee2a:	2306      	movs	r3, #6
 801ee2c:	e76f      	b.n	801ed0e <BnrgmTransmitFsm+0xe2>
 801ee2e:	2d03      	cmp	r5, #3
 801ee30:	f47f af37 	bne.w	801eca2 <BnrgmTransmitFsm+0x76>
 801ee34:	f7f8 ffea 	bl	8017e0c <MoblePalBluetoothModeStopScan>
 801ee38:	e782      	b.n	801ed40 <BnrgmTransmitFsm+0x114>
 801ee3a:	2d06      	cmp	r5, #6
 801ee3c:	d0fa      	beq.n	801ee34 <BnrgmTransmitFsm+0x208>
 801ee3e:	f7e8 ffed 	bl	8007e1c <HAL_GetTick>
 801ee42:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
 801ee46:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 801ee4a:	4298      	cmp	r0, r3
 801ee4c:	f4bf af78 	bcs.w	801ed40 <BnrgmTransmitFsm+0x114>
 801ee50:	e727      	b.n	801eca2 <BnrgmTransmitFsm+0x76>
 801ee52:	f7e8 ffe3 	bl	8007e1c <HAL_GetTick>
 801ee56:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 801ee5a:	4298      	cmp	r0, r3
 801ee5c:	f4ff af21 	bcc.w	801eca2 <BnrgmTransmitFsm+0x76>
 801ee60:	2000      	movs	r0, #0
 801ee62:	f7f6 f89a 	bl	8014f9a <aci_hal_set_radio_activity_mask>
 801ee66:	4b05      	ldr	r3, [pc, #20]	@ (801ee7c <BnrgmTransmitFsm+0x250>)
 801ee68:	2500      	movs	r5, #0
 801ee6a:	f883 5a10 	strb.w	r5, [r3, #2576]	@ 0xa10
 801ee6e:	f7f8 ffcd 	bl	8017e0c <MoblePalBluetoothModeStopScan>
 801ee72:	f884 517a 	strb.w	r5, [r4, #378]	@ 0x17a
 801ee76:	e714      	b.n	801eca2 <BnrgmTransmitFsm+0x76>
 801ee78:	20003f54 	.word	0x20003f54
 801ee7c:	20002504 	.word	0x20002504
 801ee80:	28000014 	.word	0x28000014
 801ee84:	2000140c 	.word	0x2000140c

0801ee88 <MobleTransmitInit>:
 801ee88:	b538      	push	{r3, r4, r5, lr}
 801ee8a:	4c0c      	ldr	r4, [pc, #48]	@ (801eebc <MobleTransmitInit+0x34>)
 801ee8c:	4b0c      	ldr	r3, [pc, #48]	@ (801eec0 <MobleTransmitInit+0x38>)
 801ee8e:	f8a4 0a12 	strh.w	r0, [r4, #2578]	@ 0xa12
 801ee92:	2809      	cmp	r0, #9
 801ee94:	bf86      	itte	hi
 801ee96:	380a      	subhi	r0, #10
 801ee98:	b280      	uxthhi	r0, r0
 801ee9a:	2000      	movls	r0, #0
 801ee9c:	f8a3 0178 	strh.w	r0, [r3, #376]	@ 0x178
 801eea0:	2500      	movs	r5, #0
 801eea2:	2001      	movs	r0, #1
 801eea4:	f884 5a10 	strb.w	r5, [r4, #2576]	@ 0xa10
 801eea8:	f7ff fec0 	bl	801ec2c <BnrgmTransmitFsm>
 801eeac:	4b05      	ldr	r3, [pc, #20]	@ (801eec4 <MobleTransmitInit+0x3c>)
 801eeae:	4a06      	ldr	r2, [pc, #24]	@ (801eec8 <MobleTransmitInit+0x40>)
 801eeb0:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
 801eeb4:	f884 5a11 	strb.w	r5, [r4, #2577]	@ 0xa11
 801eeb8:	bd38      	pop	{r3, r4, r5, pc}
 801eeba:	bf00      	nop
 801eebc:	20002504 	.word	0x20002504
 801eec0:	20003f54 	.word	0x20003f54
 801eec4:	2000140c 	.word	0x2000140c
 801eec8:	0801ef1d 	.word	0x0801ef1d

0801eecc <MobleTransmitSuspendAll>:
 801eecc:	b508      	push	{r3, lr}
 801eece:	4b06      	ldr	r3, [pc, #24]	@ (801eee8 <MobleTransmitSuspendAll+0x1c>)
 801eed0:	f240 1201 	movw	r2, #257	@ 0x101
 801eed4:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
 801eed8:	2002      	movs	r0, #2
 801eeda:	f7ff fea7 	bl	801ec2c <BnrgmTransmitFsm>
 801eede:	2003      	movs	r0, #3
 801eee0:	f7ff fea4 	bl	801ec2c <BnrgmTransmitFsm>
 801eee4:	2000      	movs	r0, #0
 801eee6:	bd08      	pop	{r3, pc}
 801eee8:	20003f54 	.word	0x20003f54

0801eeec <MobleTransmitResumeAll>:
 801eeec:	b510      	push	{r4, lr}
 801eeee:	4b04      	ldr	r3, [pc, #16]	@ (801ef00 <MobleTransmitResumeAll+0x14>)
 801eef0:	2400      	movs	r4, #0
 801eef2:	f8a3 4168 	strh.w	r4, [r3, #360]	@ 0x168
 801eef6:	2003      	movs	r0, #3
 801eef8:	f7ff fe98 	bl	801ec2c <BnrgmTransmitFsm>
 801eefc:	4620      	mov	r0, r4
 801eefe:	bd10      	pop	{r4, pc}
 801ef00:	20003f54 	.word	0x20003f54

0801ef04 <BnrgmTransmitSetAutoScanState>:
 801ef04:	4b04      	ldr	r3, [pc, #16]	@ (801ef18 <BnrgmTransmitSetAutoScanState+0x14>)
 801ef06:	2801      	cmp	r0, #1
 801ef08:	f883 016a 	strb.w	r0, [r3, #362]	@ 0x16a
 801ef0c:	d002      	beq.n	801ef14 <BnrgmTransmitSetAutoScanState+0x10>
 801ef0e:	2003      	movs	r0, #3
 801ef10:	f7ff be8c 	b.w	801ec2c <BnrgmTransmitFsm>
 801ef14:	4770      	bx	lr
 801ef16:	bf00      	nop
 801ef18:	20003f54 	.word	0x20003f54

0801ef1c <BnrgmTransmitRadioActivityEndCallback>:
 801ef1c:	b570      	push	{r4, r5, r6, lr}
 801ef1e:	4c13      	ldr	r4, [pc, #76]	@ (801ef6c <BnrgmTransmitRadioActivityEndCallback+0x50>)
 801ef20:	2902      	cmp	r1, #2
 801ef22:	bf08      	it	eq
 801ef24:	f8c4 217c 	streq.w	r2, [r4, #380]	@ 0x17c
 801ef28:	2801      	cmp	r0, #1
 801ef2a:	460d      	mov	r5, r1
 801ef2c:	d004      	beq.n	801ef38 <BnrgmTransmitRadioActivityEndCallback+0x1c>
 801ef2e:	2802      	cmp	r0, #2
 801ef30:	d014      	beq.n	801ef5c <BnrgmTransmitRadioActivityEndCallback+0x40>
 801ef32:	f884 517b 	strb.w	r5, [r4, #379]	@ 0x17b
 801ef36:	bd70      	pop	{r4, r5, r6, pc}
 801ef38:	f894 617a 	ldrb.w	r6, [r4, #378]	@ 0x17a
 801ef3c:	2e02      	cmp	r6, #2
 801ef3e:	d1f8      	bne.n	801ef32 <BnrgmTransmitRadioActivityEndCallback+0x16>
 801ef40:	f8d4 0160 	ldr.w	r0, [r4, #352]	@ 0x160
 801ef44:	f7fb f9cc 	bl	801a2e0 <BnrgmTransmitQueDecreasePktCount>
 801ef48:	4630      	mov	r0, r6
 801ef4a:	f7ff fe6f 	bl	801ec2c <BnrgmTransmitFsm>
 801ef4e:	2000      	movs	r0, #0
 801ef50:	f7ff fe6c 	bl	801ec2c <BnrgmTransmitFsm>
 801ef54:	2000      	movs	r0, #0
 801ef56:	f7ff fe69 	bl	801ec2c <BnrgmTransmitFsm>
 801ef5a:	e7ea      	b.n	801ef32 <BnrgmTransmitRadioActivityEndCallback+0x16>
 801ef5c:	f894 317b 	ldrb.w	r3, [r4, #379]	@ 0x17b
 801ef60:	2b02      	cmp	r3, #2
 801ef62:	d1e6      	bne.n	801ef32 <BnrgmTransmitRadioActivityEndCallback+0x16>
 801ef64:	2901      	cmp	r1, #1
 801ef66:	d0e4      	beq.n	801ef32 <BnrgmTransmitRadioActivityEndCallback+0x16>
 801ef68:	2004      	movs	r0, #4
 801ef6a:	e7f4      	b.n	801ef56 <BnrgmTransmitRadioActivityEndCallback+0x3a>
 801ef6c:	20003f54 	.word	0x20003f54

0801ef70 <BnrgmTransmitProcess>:
 801ef70:	2000      	movs	r0, #0
 801ef72:	f7ff be5b 	b.w	801ec2c <BnrgmTransmitFsm>

0801ef76 <BLEMesh_StopAdvScan>:
 801ef76:	b508      	push	{r3, lr}
 801ef78:	2002      	movs	r0, #2
 801ef7a:	f7ff fe57 	bl	801ec2c <BnrgmTransmitFsm>
 801ef7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ef82:	2003      	movs	r0, #3
 801ef84:	f7ff be52 	b.w	801ec2c <BnrgmTransmitFsm>

0801ef88 <MoblePalBluetoothGracefulReset>:
 801ef88:	b510      	push	{r4, lr}
 801ef8a:	4c16      	ldr	r4, [pc, #88]	@ (801efe4 <MoblePalBluetoothGracefulReset+0x5c>)
 801ef8c:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 801ef90:	f013 0f3c 	tst.w	r3, #60	@ 0x3c
 801ef94:	d010      	beq.n	801efb8 <MoblePalBluetoothGracefulReset+0x30>
 801ef96:	2301      	movs	r3, #1
 801ef98:	f884 3380 	strb.w	r3, [r4, #896]	@ 0x380
 801ef9c:	f884 3378 	strb.w	r3, [r4, #888]	@ 0x378
 801efa0:	f7e8 ff3c 	bl	8007e1c <HAL_GetTick>
 801efa4:	f8d4 3350 	ldr.w	r3, [r4, #848]	@ 0x350
 801efa8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801efac:	fbb3 f3f2 	udiv	r3, r3, r2
 801efb0:	4403      	add	r3, r0
 801efb2:	f8c4 337c 	str.w	r3, [r4, #892]	@ 0x37c
 801efb6:	bd10      	pop	{r4, pc}
 801efb8:	f7fb fd1c 	bl	801a9f4 <MoblePalBluetoothFreeAllNotifications>
 801efbc:	f8d4 3374 	ldr.w	r3, [r4, #884]	@ 0x374
 801efc0:	b103      	cbz	r3, 801efc4 <MoblePalBluetoothGracefulReset+0x3c>
 801efc2:	4798      	blx	r3
 801efc4:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 801efc8:	b10b      	cbz	r3, 801efce <MoblePalBluetoothGracefulReset+0x46>
 801efca:	f7ff ffd4 	bl	801ef76 <BLEMesh_StopAdvScan>
 801efce:	2300      	movs	r3, #0
 801efd0:	f8c4 3354 	str.w	r3, [r4, #852]	@ 0x354
 801efd4:	f7ff fcb4 	bl	801e940 <BLEMesh_IsUnprovisioned>
 801efd8:	2801      	cmp	r0, #1
 801efda:	bf04      	itt	eq
 801efdc:	4b02      	ldreq	r3, [pc, #8]	@ (801efe8 <MoblePalBluetoothGracefulReset+0x60>)
 801efde:	7018      	strbeq	r0, [r3, #0]
 801efe0:	e7e9      	b.n	801efb6 <MoblePalBluetoothGracefulReset+0x2e>
 801efe2:	bf00      	nop
 801efe4:	2000140c 	.word	0x2000140c
 801efe8:	20004433 	.word	0x20004433

0801efec <HCI_Event_CB>:
 801efec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eff0:	7803      	ldrb	r3, [r0, #0]
 801eff2:	2b04      	cmp	r3, #4
 801eff4:	b08b      	sub	sp, #44	@ 0x2c
 801eff6:	4604      	mov	r4, r0
 801eff8:	d161      	bne.n	801f0be <HCI_Event_CB+0xd2>
 801effa:	7843      	ldrb	r3, [r0, #1]
 801effc:	2b3e      	cmp	r3, #62	@ 0x3e
 801effe:	d025      	beq.n	801f04c <HCI_Event_CB+0x60>
 801f000:	2bff      	cmp	r3, #255	@ 0xff
 801f002:	f000 809b 	beq.w	801f13c <HCI_Event_CB+0x150>
 801f006:	2b05      	cmp	r3, #5
 801f008:	d159      	bne.n	801f0be <HCI_Event_CB+0xd2>
 801f00a:	4c7e      	ldr	r4, [pc, #504]	@ (801f204 <HCI_Event_CB+0x218>)
 801f00c:	f8d4 3354 	ldr.w	r3, [r4, #852]	@ 0x354
 801f010:	f023 030c 	bic.w	r3, r3, #12
 801f014:	f8c4 3354 	str.w	r3, [r4, #852]	@ 0x354
 801f018:	f7fb fcec 	bl	801a9f4 <MoblePalBluetoothFreeAllNotifications>
 801f01c:	4b7a      	ldr	r3, [pc, #488]	@ (801f208 <HCI_Event_CB+0x21c>)
 801f01e:	685b      	ldr	r3, [r3, #4]
 801f020:	68db      	ldr	r3, [r3, #12]
 801f022:	4798      	blx	r3
 801f024:	f8d4 3358 	ldr.w	r3, [r4, #856]	@ 0x358
 801f028:	b113      	cbz	r3, 801f030 <HCI_Event_CB+0x44>
 801f02a:	f8d4 036c 	ldr.w	r0, [r4, #876]	@ 0x36c
 801f02e:	4798      	blx	r3
 801f030:	f894 3378 	ldrb.w	r3, [r4, #888]	@ 0x378
 801f034:	2b01      	cmp	r3, #1
 801f036:	d142      	bne.n	801f0be <HCI_Event_CB+0xd2>
 801f038:	2300      	movs	r3, #0
 801f03a:	f884 3378 	strb.w	r3, [r4, #888]	@ 0x378
 801f03e:	f884 3380 	strb.w	r3, [r4, #896]	@ 0x380
 801f042:	b00b      	add	sp, #44	@ 0x2c
 801f044:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f048:	f7ff bf9e 	b.w	801ef88 <MoblePalBluetoothGracefulReset>
 801f04c:	78c3      	ldrb	r3, [r0, #3]
 801f04e:	2b02      	cmp	r3, #2
 801f050:	d02a      	beq.n	801f0a8 <HCI_Event_CB+0xbc>
 801f052:	2b03      	cmp	r3, #3
 801f054:	d061      	beq.n	801f11a <HCI_Event_CB+0x12e>
 801f056:	2b01      	cmp	r3, #1
 801f058:	d131      	bne.n	801f0be <HCI_Event_CB+0xd2>
 801f05a:	f8b0 300f 	ldrh.w	r3, [r0, #15]
 801f05e:	4d69      	ldr	r5, [pc, #420]	@ (801f204 <HCI_Event_CB+0x218>)
 801f060:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 801f064:	4353      	muls	r3, r2
 801f066:	f8c5 3350 	str.w	r3, [r5, #848]	@ 0x350
 801f06a:	4b67      	ldr	r3, [pc, #412]	@ (801f208 <HCI_Event_CB+0x21c>)
 801f06c:	685b      	ldr	r3, [r3, #4]
 801f06e:	689b      	ldr	r3, [r3, #8]
 801f070:	4798      	blx	r3
 801f072:	f8d5 3354 	ldr.w	r3, [r5, #852]	@ 0x354
 801f076:	79a1      	ldrb	r1, [r4, #6]
 801f078:	7962      	ldrb	r2, [r4, #5]
 801f07a:	f023 0301 	bic.w	r3, r3, #1
 801f07e:	f043 0304 	orr.w	r3, r3, #4
 801f082:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801f086:	f8c5 3354 	str.w	r3, [r5, #852]	@ 0x354
 801f08a:	f8a5 2382 	strh.w	r2, [r5, #898]	@ 0x382
 801f08e:	f7e8 fec5 	bl	8007e1c <HAL_GetTick>
 801f092:	f8d5 3358 	ldr.w	r3, [r5, #856]	@ 0x358
 801f096:	f8c5 0948 	str.w	r0, [r5, #2376]	@ 0x948
 801f09a:	b183      	cbz	r3, 801f0be <HCI_Event_CB+0xd2>
 801f09c:	f8d5 036c 	ldr.w	r0, [r5, #876]	@ 0x36c
 801f0a0:	b00b      	add	sp, #44	@ 0x2c
 801f0a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0a6:	4718      	bx	r3
 801f0a8:	f8df 9158 	ldr.w	r9, [pc, #344]	@ 801f204 <HCI_Event_CB+0x218>
 801f0ac:	f8d9 3370 	ldr.w	r3, [r9, #880]	@ 0x370
 801f0b0:	b12b      	cbz	r3, 801f0be <HCI_Event_CB+0xd2>
 801f0b2:	1dc1      	adds	r1, r0, #7
 801f0b4:	f04f 0800 	mov.w	r8, #0
 801f0b8:	7923      	ldrb	r3, [r4, #4]
 801f0ba:	4543      	cmp	r3, r8
 801f0bc:	dc02      	bgt.n	801f0c4 <HCI_Event_CB+0xd8>
 801f0be:	b00b      	add	sp, #44	@ 0x2c
 801f0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0c4:	798b      	ldrb	r3, [r1, #6]
 801f0c6:	1d8e      	adds	r6, r1, #6
 801f0c8:	4433      	add	r3, r6
 801f0ca:	2500      	movs	r5, #0
 801f0cc:	f993 b001 	ldrsb.w	fp, [r3, #1]
 801f0d0:	798b      	ldrb	r3, [r1, #6]
 801f0d2:	42ab      	cmp	r3, r5
 801f0d4:	d803      	bhi.n	801f0de <HCI_Event_CB+0xf2>
 801f0d6:	f108 0801 	add.w	r8, r8, #1
 801f0da:	310e      	adds	r1, #14
 801f0dc:	e7ec      	b.n	801f0b8 <HCI_Event_CB+0xcc>
 801f0de:	f105 0a01 	add.w	sl, r5, #1
 801f0e2:	eb06 020a 	add.w	r2, r6, sl
 801f0e6:	f816 300a 	ldrb.w	r3, [r6, sl]
 801f0ea:	2b00      	cmp	r3, #0
 801f0ec:	d0f3      	beq.n	801f0d6 <HCI_Event_CB+0xea>
 801f0ee:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 801f0f2:	1e87      	subs	r7, r0, #2
 801f0f4:	2f01      	cmp	r7, #1
 801f0f6:	d80a      	bhi.n	801f10e <HCI_Event_CB+0x122>
 801f0f8:	3301      	adds	r3, #1
 801f0fa:	e9cd b000 	strd	fp, r0, [sp]
 801f0fe:	f8d9 7370 	ldr.w	r7, [r9, #880]	@ 0x370
 801f102:	f8d9 036c 	ldr.w	r0, [r9, #876]	@ 0x36c
 801f106:	9103      	str	r1, [sp, #12]
 801f108:	b2db      	uxtb	r3, r3
 801f10a:	47b8      	blx	r7
 801f10c:	9903      	ldr	r1, [sp, #12]
 801f10e:	f816 300a 	ldrb.w	r3, [r6, sl]
 801f112:	3301      	adds	r3, #1
 801f114:	442b      	add	r3, r5
 801f116:	b2dd      	uxtb	r5, r3
 801f118:	e7da      	b.n	801f0d0 <HCI_Event_CB+0xe4>
 801f11a:	4b3a      	ldr	r3, [pc, #232]	@ (801f204 <HCI_Event_CB+0x218>)
 801f11c:	f8b0 2005 	ldrh.w	r2, [r0, #5]
 801f120:	f8b3 3382 	ldrh.w	r3, [r3, #898]	@ 0x382
 801f124:	429a      	cmp	r2, r3
 801f126:	d1ca      	bne.n	801f0be <HCI_Event_CB+0xd2>
 801f128:	7903      	ldrb	r3, [r0, #4]
 801f12a:	2b00      	cmp	r3, #0
 801f12c:	d1c7      	bne.n	801f0be <HCI_Event_CB+0xd2>
 801f12e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 801f132:	b00b      	add	sp, #44	@ 0x2c
 801f134:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f138:	f7f8 bbb6 	b.w	80178a8 <MoblePalBluetoothSetConnectionInterval>
 801f13c:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 801f140:	f640 4214 	movw	r2, #3092	@ 0xc14
 801f144:	4293      	cmp	r3, r2
 801f146:	d021      	beq.n	801f18c <HCI_Event_CB+0x1a0>
 801f148:	d818      	bhi.n	801f17c <HCI_Event_CB+0x190>
 801f14a:	2b04      	cmp	r3, #4
 801f14c:	d048      	beq.n	801f1e0 <HCI_Event_CB+0x1f4>
 801f14e:	f640 4201 	movw	r2, #3073	@ 0xc01
 801f152:	4293      	cmp	r3, r2
 801f154:	d1b3      	bne.n	801f0be <HCI_Event_CB+0xd2>
 801f156:	482b      	ldr	r0, [pc, #172]	@ (801f204 <HCI_Event_CB+0x218>)
 801f158:	f8d0 5348 	ldr.w	r5, [r0, #840]	@ 0x348
 801f15c:	2d00      	cmp	r5, #0
 801f15e:	d0ae      	beq.n	801f0be <HCI_Event_CB+0xd2>
 801f160:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 801f164:	f8b4 1007 	ldrh.w	r1, [r4, #7]
 801f168:	f8d0 036c 	ldr.w	r0, [r0, #876]	@ 0x36c
 801f16c:	b2db      	uxtb	r3, r3
 801f16e:	f104 020d 	add.w	r2, r4, #13
 801f172:	46ac      	mov	ip, r5
 801f174:	b00b      	add	sp, #44	@ 0x2c
 801f176:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f17a:	4760      	bx	ip
 801f17c:	f640 4216 	movw	r2, #3094	@ 0xc16
 801f180:	4293      	cmp	r3, r2
 801f182:	d19c      	bne.n	801f0be <HCI_Event_CB+0xd2>
 801f184:	4b21      	ldr	r3, [pc, #132]	@ (801f20c <HCI_Event_CB+0x220>)
 801f186:	2201      	movs	r2, #1
 801f188:	729a      	strb	r2, [r3, #10]
 801f18a:	e798      	b.n	801f0be <HCI_Event_CB+0xd2>
 801f18c:	4d1d      	ldr	r5, [pc, #116]	@ (801f204 <HCI_Event_CB+0x218>)
 801f18e:	f8d5 7344 	ldr.w	r7, [r5, #836]	@ 0x344
 801f192:	b1f7      	cbz	r7, 801f1d2 <HCI_Event_CB+0x1e6>
 801f194:	2314      	movs	r3, #20
 801f196:	f88d 3013 	strb.w	r3, [sp, #19]
 801f19a:	f8b0 3009 	ldrh.w	r3, [r0, #9]
 801f19e:	b1c3      	cbz	r3, 801f1d2 <HCI_Event_CB+0x1e6>
 801f1a0:	ae05      	add	r6, sp, #20
 801f1a2:	f8b0 1007 	ldrh.w	r1, [r0, #7]
 801f1a6:	f8d5 036c 	ldr.w	r0, [r5, #876]	@ 0x36c
 801f1aa:	f10d 0313 	add.w	r3, sp, #19
 801f1ae:	4632      	mov	r2, r6
 801f1b0:	47b8      	blx	r7
 801f1b2:	2801      	cmp	r0, #1
 801f1b4:	d80d      	bhi.n	801f1d2 <HCI_Event_CB+0x1e6>
 801f1b6:	f8b4 1007 	ldrh.w	r1, [r4, #7]
 801f1ba:	9600      	str	r6, [sp, #0]
 801f1bc:	3901      	subs	r1, #1
 801f1be:	f89d 3013 	ldrb.w	r3, [sp, #19]
 801f1c2:	f8b5 0340 	ldrh.w	r0, [r5, #832]	@ 0x340
 801f1c6:	2200      	movs	r2, #0
 801f1c8:	b289      	uxth	r1, r1
 801f1ca:	f7f5 faf7 	bl	80147bc <aci_gatt_update_char_value>
 801f1ce:	2893      	cmp	r0, #147	@ 0x93
 801f1d0:	d0f1      	beq.n	801f1b6 <HCI_Event_CB+0x1ca>
 801f1d2:	f8b4 0005 	ldrh.w	r0, [r4, #5]
 801f1d6:	b00b      	add	sp, #44	@ 0x2c
 801f1d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1dc:	f7f5 bc54 	b.w	8014a88 <aci_gatt_allow_read>
 801f1e0:	4b0b      	ldr	r3, [pc, #44]	@ (801f210 <HCI_Event_CB+0x224>)
 801f1e2:	f8d0 2007 	ldr.w	r2, [r0, #7]
 801f1e6:	f8c3 2a14 	str.w	r2, [r3, #2580]	@ 0xa14
 801f1ea:	4b06      	ldr	r3, [pc, #24]	@ (801f204 <HCI_Event_CB+0x218>)
 801f1ec:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801f1f0:	2b00      	cmp	r3, #0
 801f1f2:	f43f af64 	beq.w	801f0be <HCI_Event_CB+0xd2>
 801f1f6:	7981      	ldrb	r1, [r0, #6]
 801f1f8:	7940      	ldrb	r0, [r0, #5]
 801f1fa:	b00b      	add	sp, #44	@ 0x2c
 801f1fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f200:	4718      	bx	r3
 801f202:	bf00      	nop
 801f204:	2000140c 	.word	0x2000140c
 801f208:	20000314 	.word	0x20000314
 801f20c:	20000008 	.word	0x20000008
 801f210:	20002504 	.word	0x20002504

0801f214 <BnrgmProxy_SarTimeoutCallback>:
 801f214:	f7ff beb8 	b.w	801ef88 <MoblePalBluetoothGracefulReset>

0801f218 <BnrgmStackDummyProxyModeTimerCallback>:
 801f218:	b508      	push	{r3, lr}
 801f21a:	2300      	movs	r3, #0
 801f21c:	f881 32ad 	strb.w	r3, [r1, #685]	@ 0x2ad
 801f220:	f8d1 02b0 	ldr.w	r0, [r1, #688]	@ 0x2b0
 801f224:	f7f8 fa3a 	bl	801769c <MoblePalTimerDestroy>
 801f228:	4b06      	ldr	r3, [pc, #24]	@ (801f244 <BnrgmStackDummyProxyModeTimerCallback+0x2c>)
 801f22a:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 801f22e:	2b02      	cmp	r3, #2
 801f230:	d107      	bne.n	801f242 <BnrgmStackDummyProxyModeTimerCallback+0x2a>
 801f232:	f7f8 fbc3 	bl	80179bc <MoblePalBluetoothGetConnectionState>
 801f236:	2802      	cmp	r0, #2
 801f238:	d003      	beq.n	801f242 <BnrgmStackDummyProxyModeTimerCallback+0x2a>
 801f23a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f23e:	f7ff bea3 	b.w	801ef88 <MoblePalBluetoothGracefulReset>
 801f242:	bd08      	pop	{r3, pc}
 801f244:	20000314 	.word	0x20000314

0801f248 <MobleProvision_CreateCommand>:
 801f248:	b570      	push	{r4, r5, r6, lr}
 801f24a:	9e04      	ldr	r6, [sp, #16]
 801f24c:	1c54      	adds	r4, r2, #1
 801f24e:	42b4      	cmp	r4, r6
 801f250:	d806      	bhi.n	801f260 <MobleProvision_CreateCommand+0x18>
 801f252:	7018      	strb	r0, [r3, #0]
 801f254:	b112      	cbz	r2, 801f25c <MobleProvision_CreateCommand+0x14>
 801f256:	1c58      	adds	r0, r3, #1
 801f258:	f009 ff8e 	bl	8029178 <memmove>
 801f25c:	b2e0      	uxtb	r0, r4
 801f25e:	bd70      	pop	{r4, r5, r6, pc}
 801f260:	2000      	movs	r0, #0
 801f262:	e7fc      	b.n	801f25e <MobleProvision_CreateCommand+0x16>

0801f264 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0>:
 801f264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f268:	4c91      	ldr	r4, [pc, #580]	@ (801f4b0 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x24c>)
 801f26a:	f8d4 56f0 	ldr.w	r5, [r4, #1776]	@ 0x6f0
 801f26e:	b0c6      	sub	sp, #280	@ 0x118
 801f270:	4606      	mov	r6, r0
 801f272:	4628      	mov	r0, r5
 801f274:	4689      	mov	r9, r1
 801f276:	4690      	mov	r8, r2
 801f278:	f7ff fb50 	bl	801e91c <MobleProvisionGetRole>
 801f27c:	2800      	cmp	r0, #0
 801f27e:	f040 820b 	bne.w	801f698 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x434>
 801f282:	f8d4 7a18 	ldr.w	r7, [r4, #2584]	@ 0xa18
 801f286:	f8c8 0000 	str.w	r0, [r8]
 801f28a:	783b      	ldrb	r3, [r7, #0]
 801f28c:	2b0a      	cmp	r3, #10
 801f28e:	d821      	bhi.n	801f2d4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x70>
 801f290:	e8df f013 	tbh	[pc, r3, lsl #1]
 801f294:	0020000b 	.word	0x0020000b
 801f298:	004b0027 	.word	0x004b0027
 801f29c:	00200020 	.word	0x00200020
 801f2a0:	002000b0 	.word	0x002000b0
 801f2a4:	00200106 	.word	0x00200106
 801f2a8:	0112      	.short	0x0112
 801f2aa:	f895 3294 	ldrb.w	r3, [r5, #660]	@ 0x294
 801f2ae:	f88d 30d8 	strb.w	r3, [sp, #216]	@ 0xd8
 801f2b2:	2201      	movs	r2, #1
 801f2b4:	4633      	mov	r3, r6
 801f2b6:	f8cd 9000 	str.w	r9, [sp]
 801f2ba:	a936      	add	r1, sp, #216	@ 0xd8
 801f2bc:	2000      	movs	r0, #0
 801f2be:	f7ff ffc3 	bl	801f248 <MobleProvision_CreateCommand>
 801f2c2:	f8d4 26f0 	ldr.w	r2, [r4, #1776]	@ 0x6f0
 801f2c6:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	@ 0xa18
 801f2ca:	f892 2294 	ldrb.w	r2, [r2, #660]	@ 0x294
 801f2ce:	f8c8 0000 	str.w	r0, [r8]
 801f2d2:	711a      	strb	r2, [r3, #4]
 801f2d4:	f8d8 0000 	ldr.w	r0, [r8]
 801f2d8:	fab0 f080 	clz	r0, r0
 801f2dc:	0940      	lsrs	r0, r0, #5
 801f2de:	0040      	lsls	r0, r0, #1
 801f2e0:	e15a      	b.n	801f598 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x334>
 801f2e2:	2300      	movs	r3, #0
 801f2e4:	9336      	str	r3, [sp, #216]	@ 0xd8
 801f2e6:	f88d 30dc 	strb.w	r3, [sp, #220]	@ 0xdc
 801f2ea:	f895 31fa 	ldrb.w	r3, [r5, #506]	@ 0x1fa
 801f2ee:	f88d 30d9 	strb.w	r3, [sp, #217]	@ 0xd9
 801f2f2:	f895 31fb 	ldrb.w	r3, [r5, #507]	@ 0x1fb
 801f2f6:	f88d 30da 	strb.w	r3, [sp, #218]	@ 0xda
 801f2fa:	f895 31fc 	ldrb.w	r3, [r5, #508]	@ 0x1fc
 801f2fe:	f88d 30db 	strb.w	r3, [sp, #219]	@ 0xdb
 801f302:	f895 31fd 	ldrb.w	r3, [r5, #509]	@ 0x1fd
 801f306:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 801f308:	f88d 30dc 	strb.w	r3, [sp, #220]	@ 0xdc
 801f30c:	6138      	str	r0, [r7, #16]
 801f30e:	f89d 30dc 	ldrb.w	r3, [sp, #220]	@ 0xdc
 801f312:	753b      	strb	r3, [r7, #20]
 801f314:	2205      	movs	r2, #5
 801f316:	f8cd 9000 	str.w	r9, [sp]
 801f31a:	4633      	mov	r3, r6
 801f31c:	a936      	add	r1, sp, #216	@ 0xd8
 801f31e:	2002      	movs	r0, #2
 801f320:	f7ff ff92 	bl	801f248 <MobleProvision_CreateCommand>
 801f324:	f8c8 0000 	str.w	r0, [r8]
 801f328:	e7d4      	b.n	801f2d4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x70>
 801f32a:	2500      	movs	r5, #0
 801f32c:	f8d4 7a18 	ldr.w	r7, [r4, #2584]	@ 0xa18
 801f330:	f7f8 fba6 	bl	8017a80 <MoblePalBluetoothRandom>
 801f334:	442f      	add	r7, r5
 801f336:	3501      	adds	r5, #1
 801f338:	2d20      	cmp	r5, #32
 801f33a:	f887 0095 	strb.w	r0, [r7, #149]	@ 0x95
 801f33e:	d1f5      	bne.n	801f32c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xc8>
 801f340:	f8d4 0a18 	ldr.w	r0, [r4, #2584]	@ 0xa18
 801f344:	4629      	mov	r1, r5
 801f346:	3095      	adds	r0, #149	@ 0x95
 801f348:	f7fa f9d0 	bl	80196ec <MoblePalCryptoInitEcc>
 801f34c:	2800      	cmp	r0, #0
 801f34e:	f040 819d 	bne.w	801f68c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x428>
 801f352:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	@ 0xa18
 801f356:	2201      	movs	r2, #1
 801f358:	f883 21ac 	strb.w	r2, [r3, #428]	@ 0x1ac
 801f35c:	a826      	add	r0, sp, #152	@ 0x98
 801f35e:	f7f9 fac7 	bl	80188f0 <MoblePalCryptoGetEccPublicKey.part.0>
 801f362:	2800      	cmp	r0, #0
 801f364:	f040 8192 	bne.w	801f68c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x428>
 801f368:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801f36c:	f8d4 0a18 	ldr.w	r0, [r4, #2584]	@ 0xa18
 801f370:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 801f374:	bb43      	cbnz	r3, 801f3c8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x164>
 801f376:	f8d4 7a18 	ldr.w	r7, [r4, #2584]	@ 0xa18
 801f37a:	f107 04b5 	add.w	r4, r7, #181	@ 0xb5
 801f37e:	f10d 0c98 	add.w	ip, sp, #152	@ 0x98
 801f382:	ad36      	add	r5, sp, #216	@ 0xd8
 801f384:	4623      	mov	r3, r4
 801f386:	4662      	mov	r2, ip
 801f388:	ca03      	ldmia	r2!, {r0, r1}
 801f38a:	42aa      	cmp	r2, r5
 801f38c:	6020      	str	r0, [r4, #0]
 801f38e:	6061      	str	r1, [r4, #4]
 801f390:	4694      	mov	ip, r2
 801f392:	f104 0408 	add.w	r4, r4, #8
 801f396:	d1f6      	bne.n	801f386 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x122>
 801f398:	462c      	mov	r4, r5
 801f39a:	f107 0cf5 	add.w	ip, r7, #245	@ 0xf5
 801f39e:	6818      	ldr	r0, [r3, #0]
 801f3a0:	6859      	ldr	r1, [r3, #4]
 801f3a2:	4622      	mov	r2, r4
 801f3a4:	c203      	stmia	r2!, {r0, r1}
 801f3a6:	3308      	adds	r3, #8
 801f3a8:	4563      	cmp	r3, ip
 801f3aa:	4614      	mov	r4, r2
 801f3ac:	d1f7      	bne.n	801f39e <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x13a>
 801f3ae:	2240      	movs	r2, #64	@ 0x40
 801f3b0:	4629      	mov	r1, r5
 801f3b2:	f107 0015 	add.w	r0, r7, #21
 801f3b6:	f009 fedf 	bl	8029178 <memmove>
 801f3ba:	f8cd 9000 	str.w	r9, [sp]
 801f3be:	4633      	mov	r3, r6
 801f3c0:	2240      	movs	r2, #64	@ 0x40
 801f3c2:	4629      	mov	r1, r5
 801f3c4:	2003      	movs	r0, #3
 801f3c6:	e7ab      	b.n	801f320 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xbc>
 801f3c8:	30f5      	adds	r0, #245	@ 0xf5
 801f3ca:	f7fa f9a3 	bl	8019714 <MoblePalCryptoGetEccGenSecret>
 801f3ce:	b920      	cbnz	r0, 801f3da <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x176>
 801f3d0:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	@ 0xa18
 801f3d4:	220d      	movs	r2, #13
 801f3d6:	701a      	strb	r2, [r3, #0]
 801f3d8:	e77c      	b.n	801f2d4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x70>
 801f3da:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	@ 0xa18
 801f3de:	f100 0220 	add.w	r2, r0, #32
 801f3e2:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 801f3e6:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 801f3ea:	f803 1f01 	strb.w	r1, [r3, #1]!
 801f3ee:	4290      	cmp	r0, r2
 801f3f0:	d1f9      	bne.n	801f3e6 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x182>
 801f3f2:	e7c0      	b.n	801f376 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x112>
 801f3f4:	2300      	movs	r3, #0
 801f3f6:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
 801f3fa:	e9cd 331d 	strd	r3, r3, [sp, #116]	@ 0x74
 801f3fe:	2291      	movs	r2, #145	@ 0x91
 801f400:	f207 1365 	addw	r3, r7, #357	@ 0x165
 801f404:	1d39      	adds	r1, r7, #4
 801f406:	a81b      	add	r0, sp, #108	@ 0x6c
 801f408:	f7f8 fdfa 	bl	8018000 <BAES_CmacCompute>
 801f40c:	2304      	movs	r3, #4
 801f40e:	f8d4 0a18 	ldr.w	r0, [r4, #2584]	@ 0xa18
 801f412:	9302      	str	r3, [sp, #8]
 801f414:	4b27      	ldr	r3, [pc, #156]	@ (801f4b4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x250>)
 801f416:	9301      	str	r3, [sp, #4]
 801f418:	2310      	movs	r3, #16
 801f41a:	9300      	str	r3, [sp, #0]
 801f41c:	f200 1135 	addw	r1, r0, #309	@ 0x135
 801f420:	f200 1365 	addw	r3, r0, #357	@ 0x165
 801f424:	2220      	movs	r2, #32
 801f426:	f200 1055 	addw	r0, r0, #341	@ 0x155
 801f42a:	f7f8 feb7 	bl	801819c <MoblePalCryptoK1.part.0>
 801f42e:	2800      	cmp	r0, #0
 801f430:	f040 812c 	bne.w	801f68c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x428>
 801f434:	4605      	mov	r5, r0
 801f436:	f8d4 7a18 	ldr.w	r7, [r4, #2584]	@ 0xa18
 801f43a:	f7f8 fb21 	bl	8017a80 <MoblePalBluetoothRandom>
 801f43e:	442f      	add	r7, r5
 801f440:	3501      	adds	r5, #1
 801f442:	2d10      	cmp	r5, #16
 801f444:	f887 0175 	strb.w	r0, [r7, #373]	@ 0x175
 801f448:	d1f5      	bne.n	801f436 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x1d2>
 801f44a:	ad26      	add	r5, sp, #152	@ 0x98
 801f44c:	2300      	movs	r3, #0
 801f44e:	4628      	mov	r0, r5
 801f450:	e9cd 3326 	strd	r3, r3, [sp, #152]	@ 0x98
 801f454:	e9cd 3328 	strd	r3, r3, [sp, #160]	@ 0xa0
 801f458:	f7ff fb06 	bl	801ea68 <MobleProvisionGenerateAuthValue>
 801f45c:	f8d4 7a18 	ldr.w	r7, [r4, #2584]	@ 0xa18
 801f460:	ac36      	add	r4, sp, #216	@ 0xd8
 801f462:	f207 1375 	addw	r3, r7, #373	@ 0x175
 801f466:	f207 1c85 	addw	ip, r7, #389	@ 0x185
 801f46a:	6818      	ldr	r0, [r3, #0]
 801f46c:	6859      	ldr	r1, [r3, #4]
 801f46e:	4622      	mov	r2, r4
 801f470:	c203      	stmia	r2!, {r0, r1}
 801f472:	3308      	adds	r3, #8
 801f474:	4563      	cmp	r3, ip
 801f476:	4614      	mov	r4, r2
 801f478:	d1f7      	bne.n	801f46a <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x206>
 801f47a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801f47e:	ac3a      	add	r4, sp, #232	@ 0xe8
 801f480:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801f484:	ab1f      	add	r3, sp, #124	@ 0x7c
 801f486:	2220      	movs	r2, #32
 801f488:	a936      	add	r1, sp, #216	@ 0xd8
 801f48a:	f207 1055 	addw	r0, r7, #341	@ 0x155
 801f48e:	f7f8 fdb7 	bl	8018000 <BAES_CmacCompute>
 801f492:	f8cd 9000 	str.w	r9, [sp]
 801f496:	4633      	mov	r3, r6
 801f498:	2210      	movs	r2, #16
 801f49a:	a91f      	add	r1, sp, #124	@ 0x7c
 801f49c:	2005      	movs	r0, #5
 801f49e:	e73f      	b.n	801f320 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xbc>
 801f4a0:	f8cd 9000 	str.w	r9, [sp]
 801f4a4:	4633      	mov	r3, r6
 801f4a6:	2210      	movs	r2, #16
 801f4a8:	f207 1175 	addw	r1, r7, #373	@ 0x175
 801f4ac:	2006      	movs	r0, #6
 801f4ae:	e737      	b.n	801f320 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xbc>
 801f4b0:	20002504 	.word	0x20002504
 801f4b4:	0803154b 	.word	0x0803154b
 801f4b8:	2300      	movs	r3, #0
 801f4ba:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
 801f4be:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
 801f4c2:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 801f4c6:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
 801f4ca:	e9cd 3313 	strd	r3, r3, [sp, #76]	@ 0x4c
 801f4ce:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
 801f4d2:	f207 1565 	addw	r5, r7, #357	@ 0x165
 801f4d6:	aa36      	add	r2, sp, #216	@ 0xd8
 801f4d8:	f207 1c75 	addw	ip, r7, #373	@ 0x175
 801f4dc:	6828      	ldr	r0, [r5, #0]
 801f4de:	6869      	ldr	r1, [r5, #4]
 801f4e0:	4613      	mov	r3, r2
 801f4e2:	c303      	stmia	r3!, {r0, r1}
 801f4e4:	3508      	adds	r5, #8
 801f4e6:	4565      	cmp	r5, ip
 801f4e8:	461a      	mov	r2, r3
 801f4ea:	d1f7      	bne.n	801f4dc <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x278>
 801f4ec:	aa3a      	add	r2, sp, #232	@ 0xe8
 801f4ee:	f207 1c85 	addw	ip, r7, #389	@ 0x185
 801f4f2:	6828      	ldr	r0, [r5, #0]
 801f4f4:	6869      	ldr	r1, [r5, #4]
 801f4f6:	4613      	mov	r3, r2
 801f4f8:	c303      	stmia	r3!, {r0, r1}
 801f4fa:	3508      	adds	r5, #8
 801f4fc:	4565      	cmp	r5, ip
 801f4fe:	461a      	mov	r2, r3
 801f500:	d1f7      	bne.n	801f4f2 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x28e>
 801f502:	aa3e      	add	r2, sp, #248	@ 0xf8
 801f504:	f207 1795 	addw	r7, r7, #405	@ 0x195
 801f508:	6828      	ldr	r0, [r5, #0]
 801f50a:	6869      	ldr	r1, [r5, #4]
 801f50c:	4613      	mov	r3, r2
 801f50e:	c303      	stmia	r3!, {r0, r1}
 801f510:	3508      	adds	r5, #8
 801f512:	42bd      	cmp	r5, r7
 801f514:	461a      	mov	r2, r3
 801f516:	d1f7      	bne.n	801f508 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x2a4>
 801f518:	ab17      	add	r3, sp, #92	@ 0x5c
 801f51a:	2230      	movs	r2, #48	@ 0x30
 801f51c:	a936      	add	r1, sp, #216	@ 0xd8
 801f51e:	a813      	add	r0, sp, #76	@ 0x4c
 801f520:	f7f8 fd6e 	bl	8018000 <BAES_CmacCompute>
 801f524:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	@ 0xa18
 801f528:	4b5c      	ldr	r3, [pc, #368]	@ (801f69c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x438>)
 801f52a:	9301      	str	r3, [sp, #4]
 801f52c:	2704      	movs	r7, #4
 801f52e:	2510      	movs	r5, #16
 801f530:	9702      	str	r7, [sp, #8]
 801f532:	9500      	str	r5, [sp, #0]
 801f534:	ab17      	add	r3, sp, #92	@ 0x5c
 801f536:	2220      	movs	r2, #32
 801f538:	f201 1135 	addw	r1, r1, #309	@ 0x135
 801f53c:	a80b      	add	r0, sp, #44	@ 0x2c
 801f53e:	f7f8 fe2d 	bl	801819c <MoblePalCryptoK1.part.0>
 801f542:	2800      	cmp	r0, #0
 801f544:	f040 80a2 	bne.w	801f68c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x428>
 801f548:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	@ 0xa18
 801f54c:	4b54      	ldr	r3, [pc, #336]	@ (801f6a0 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x43c>)
 801f54e:	9702      	str	r7, [sp, #8]
 801f550:	e9cd 5300 	strd	r5, r3, [sp]
 801f554:	2220      	movs	r2, #32
 801f556:	ab17      	add	r3, sp, #92	@ 0x5c
 801f558:	f201 1135 	addw	r1, r1, #309	@ 0x135
 801f55c:	a80f      	add	r0, sp, #60	@ 0x3c
 801f55e:	f7f8 fe1d 	bl	801819c <MoblePalCryptoK1.part.0>
 801f562:	2800      	cmp	r0, #0
 801f564:	f040 8092 	bne.w	801f68c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x428>
 801f568:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	@ 0xa18
 801f56c:	4b4d      	ldr	r3, [pc, #308]	@ (801f6a4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x440>)
 801f56e:	9702      	str	r7, [sp, #8]
 801f570:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
 801f574:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
 801f578:	e9cd 5300 	strd	r5, r3, [sp]
 801f57c:	2220      	movs	r2, #32
 801f57e:	ab17      	add	r3, sp, #92	@ 0x5c
 801f580:	f201 1135 	addw	r1, r1, #309	@ 0x135
 801f584:	a81b      	add	r0, sp, #108	@ 0x6c
 801f586:	f7f8 fe09 	bl	801819c <MoblePalCryptoK1.part.0>
 801f58a:	2801      	cmp	r0, #1
 801f58c:	d907      	bls.n	801f59e <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x33a>
 801f58e:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	@ 0xa0c
 801f592:	2002      	movs	r0, #2
 801f594:	f883 01a8 	strb.w	r0, [r3, #424]	@ 0x1a8
 801f598:	b046      	add	sp, #280	@ 0x118
 801f59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f59e:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801f5a2:	f8df a108 	ldr.w	sl, [pc, #264]	@ 801f6ac <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x448>
 801f5a6:	f893 227c 	ldrb.w	r2, [r3, #636]	@ 0x27c
 801f5aa:	f50a 61b3 	add.w	r1, sl, #1432	@ 0x598
 801f5ae:	a81b      	add	r0, sp, #108	@ 0x6c
 801f5b0:	f7fd fb1f 	bl	801cbf2 <BLEMesh_PvnrDataInputCallback>
 801f5b4:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801f5b8:	f20a 4724 	addw	r7, sl, #1060	@ 0x424
 801f5bc:	f8a3 0296 	strh.w	r0, [r3, #662]	@ 0x296
 801f5c0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801f5c4:	ad1f      	add	r5, sp, #124	@ 0x7c
 801f5c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801f5ca:	f10d 011a 	add.w	r1, sp, #26
 801f5ce:	a807      	add	r0, sp, #28
 801f5d0:	f7f9 fada 	bl	8018b88 <MoblePalCrypto_GetNetKeyIndexes>
 801f5d4:	f89a 365c 	ldrb.w	r3, [sl, #1628]	@ 0x65c
 801f5d8:	4a33      	ldr	r2, [pc, #204]	@ (801f6a8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x444>)
 801f5da:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801f5de:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 801f5e2:	3b00      	subs	r3, #0
 801f5e4:	bf18      	it	ne
 801f5e6:	2301      	movne	r3, #1
 801f5e8:	005b      	lsls	r3, r3, #1
 801f5ea:	2a02      	cmp	r2, #2
 801f5ec:	bf08      	it	eq
 801f5ee:	f043 0301 	orreq.w	r3, r3, #1
 801f5f2:	2202      	movs	r2, #2
 801f5f4:	a823      	add	r0, sp, #140	@ 0x8c
 801f5f6:	f7fb faf6 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801f5fa:	4619      	mov	r1, r3
 801f5fc:	2201      	movs	r2, #1
 801f5fe:	f10d 008e 	add.w	r0, sp, #142	@ 0x8e
 801f602:	f7fb faf0 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801f606:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801f60a:	681b      	ldr	r3, [r3, #0]
 801f60c:	2204      	movs	r2, #4
 801f60e:	6859      	ldr	r1, [r3, #4]
 801f610:	f10d 008f 	add.w	r0, sp, #143	@ 0x8f
 801f614:	f7fb fae7 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801f618:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801f61c:	2202      	movs	r2, #2
 801f61e:	f8b3 1296 	ldrh.w	r1, [r3, #662]	@ 0x296
 801f622:	f10d 0093 	add.w	r0, sp, #147	@ 0x93
 801f626:	2300      	movs	r3, #0
 801f628:	f7fb fadd 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 801f62c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801f630:	2319      	movs	r3, #25
 801f632:	e9cd 5302 	strd	r5, r3, [sp, #8]
 801f636:	230d      	movs	r3, #13
 801f638:	9301      	str	r3, [sp, #4]
 801f63a:	f10d 033f 	add.w	r3, sp, #63	@ 0x3f
 801f63e:	9300      	str	r3, [sp, #0]
 801f640:	2208      	movs	r2, #8
 801f642:	ab0b      	add	r3, sp, #44	@ 0x2c
 801f644:	a909      	add	r1, sp, #36	@ 0x24
 801f646:	a826      	add	r0, sp, #152	@ 0x98
 801f648:	f7f9 fe6e 	bl	8019328 <MoblePalCryptoAesCcmEncrypt>
 801f64c:	4602      	mov	r2, r0
 801f64e:	b9e8      	cbnz	r0, 801f68c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x428>
 801f650:	ab09      	add	r3, sp, #36	@ 0x24
 801f652:	cb03      	ldmia	r3!, {r0, r1}
 801f654:	f1b9 0f21 	cmp.w	r9, #33	@ 0x21
 801f658:	f8cd 00b1 	str.w	r0, [sp, #177]	@ 0xb1
 801f65c:	f8cd 10b5 	str.w	r1, [sp, #181]	@ 0xb5
 801f660:	d911      	bls.n	801f686 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x422>
 801f662:	4633      	mov	r3, r6
 801f664:	2207      	movs	r2, #7
 801f666:	f803 2b01 	strb.w	r2, [r3], #1
 801f66a:	ad2e      	add	r5, sp, #184	@ 0xb8
 801f66c:	aa26      	add	r2, sp, #152	@ 0x98
 801f66e:	4614      	mov	r4, r2
 801f670:	cc03      	ldmia	r4!, {r0, r1}
 801f672:	42ac      	cmp	r4, r5
 801f674:	6018      	str	r0, [r3, #0]
 801f676:	6059      	str	r1, [r3, #4]
 801f678:	4622      	mov	r2, r4
 801f67a:	f103 0308 	add.w	r3, r3, #8
 801f67e:	d1f6      	bne.n	801f66e <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x40a>
 801f680:	7822      	ldrb	r2, [r4, #0]
 801f682:	701a      	strb	r2, [r3, #0]
 801f684:	2222      	movs	r2, #34	@ 0x22
 801f686:	f8c8 2000 	str.w	r2, [r8]
 801f68a:	e623      	b.n	801f2d4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x70>
 801f68c:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	@ 0xa18
 801f690:	220d      	movs	r2, #13
 801f692:	701a      	strb	r2, [r3, #0]
 801f694:	2002      	movs	r0, #2
 801f696:	e77f      	b.n	801f598 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x334>
 801f698:	2003      	movs	r0, #3
 801f69a:	e77d      	b.n	801f598 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x334>
 801f69c:	08031550 	.word	0x08031550
 801f6a0:	08031555 	.word	0x08031555
 801f6a4:	0803155a 	.word	0x0803155a
 801f6a8:	20000314 	.word	0x20000314
 801f6ac:	2000140c 	.word	0x2000140c

0801f6b0 <MobleProvision_UnprovisionedNode_GetOutputMessage>:
 801f6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f6b2:	b095      	sub	sp, #84	@ 0x54
 801f6b4:	2500      	movs	r5, #0
 801f6b6:	4f33      	ldr	r7, [pc, #204]	@ (801f784 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd4>)
 801f6b8:	9003      	str	r0, [sp, #12]
 801f6ba:	460e      	mov	r6, r1
 801f6bc:	4614      	mov	r4, r2
 801f6be:	4629      	mov	r1, r5
 801f6c0:	223c      	movs	r2, #60	@ 0x3c
 801f6c2:	a805      	add	r0, sp, #20
 801f6c4:	9504      	str	r5, [sp, #16]
 801f6c6:	f009 fd71 	bl	80291ac <memset>
 801f6ca:	f8d7 06f0 	ldr.w	r0, [r7, #1776]	@ 0x6f0
 801f6ce:	f7ff f925 	bl	801e91c <MobleProvisionGetRole>
 801f6d2:	2801      	cmp	r0, #1
 801f6d4:	4602      	mov	r2, r0
 801f6d6:	d153      	bne.n	801f780 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801f6d8:	2e00      	cmp	r6, #0
 801f6da:	d051      	beq.n	801f780 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801f6dc:	2c00      	cmp	r4, #0
 801f6de:	d04f      	beq.n	801f780 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801f6e0:	9b03      	ldr	r3, [sp, #12]
 801f6e2:	2b00      	cmp	r3, #0
 801f6e4:	d04c      	beq.n	801f780 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801f6e6:	6025      	str	r5, [r4, #0]
 801f6e8:	f8d7 5a0c 	ldr.w	r5, [r7, #2572]	@ 0xa0c
 801f6ec:	f895 11a8 	ldrb.w	r1, [r5, #424]	@ 0x1a8
 801f6f0:	b161      	cbz	r1, 801f70c <MobleProvision_UnprovisionedNode_GetOutputMessage+0x5c>
 801f6f2:	9600      	str	r6, [sp, #0]
 801f6f4:	f505 71d4 	add.w	r1, r5, #424	@ 0x1a8
 801f6f8:	2009      	movs	r0, #9
 801f6fa:	f7ff fda5 	bl	801f248 <MobleProvision_CreateCommand>
 801f6fe:	6020      	str	r0, [r4, #0]
 801f700:	fab0 f080 	clz	r0, r0
 801f704:	0940      	lsrs	r0, r0, #5
 801f706:	0040      	lsls	r0, r0, #1
 801f708:	b015      	add	sp, #84	@ 0x54
 801f70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f70c:	f895 2044 	ldrb.w	r2, [r5, #68]	@ 0x44
 801f710:	2a05      	cmp	r2, #5
 801f712:	d80c      	bhi.n	801f72e <MobleProvision_UnprovisionedNode_GetOutputMessage+0x7e>
 801f714:	e8df f002 	tbb	[pc, r2]
 801f718:	21260d03 	.word	0x21260d03
 801f71c:	322c      	.short	0x322c
 801f71e:	9600      	str	r6, [sp, #0]
 801f720:	220b      	movs	r2, #11
 801f722:	f105 0146 	add.w	r1, r5, #70	@ 0x46
 801f726:	2001      	movs	r0, #1
 801f728:	f7ff fd8e 	bl	801f248 <MobleProvision_CreateCommand>
 801f72c:	6020      	str	r0, [r4, #0]
 801f72e:	6820      	ldr	r0, [r4, #0]
 801f730:	e7e6      	b.n	801f700 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x50>
 801f732:	af04      	add	r7, sp, #16
 801f734:	f505 72b1 	add.w	r2, r5, #354	@ 0x162
 801f738:	46be      	mov	lr, r7
 801f73a:	f505 75d1 	add.w	r5, r5, #418	@ 0x1a2
 801f73e:	6810      	ldr	r0, [r2, #0]
 801f740:	6851      	ldr	r1, [r2, #4]
 801f742:	46bc      	mov	ip, r7
 801f744:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801f748:	3208      	adds	r2, #8
 801f74a:	42aa      	cmp	r2, r5
 801f74c:	4667      	mov	r7, ip
 801f74e:	d1f6      	bne.n	801f73e <MobleProvision_UnprovisionedNode_GetOutputMessage+0x8e>
 801f750:	9600      	str	r6, [sp, #0]
 801f752:	2240      	movs	r2, #64	@ 0x40
 801f754:	4671      	mov	r1, lr
 801f756:	2003      	movs	r0, #3
 801f758:	e7e6      	b.n	801f728 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x78>
 801f75a:	2204      	movs	r2, #4
 801f75c:	701a      	strb	r2, [r3, #0]
 801f75e:	2301      	movs	r3, #1
 801f760:	6023      	str	r3, [r4, #0]
 801f762:	e7e4      	b.n	801f72e <MobleProvision_UnprovisionedNode_GetOutputMessage+0x7e>
 801f764:	9600      	str	r6, [sp, #0]
 801f766:	2210      	movs	r2, #16
 801f768:	f505 7181 	add.w	r1, r5, #258	@ 0x102
 801f76c:	2005      	movs	r0, #5
 801f76e:	e7db      	b.n	801f728 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x78>
 801f770:	9600      	str	r6, [sp, #0]
 801f772:	2210      	movs	r2, #16
 801f774:	f505 7191 	add.w	r1, r5, #290	@ 0x122
 801f778:	2006      	movs	r0, #6
 801f77a:	e7d5      	b.n	801f728 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x78>
 801f77c:	2208      	movs	r2, #8
 801f77e:	e7ed      	b.n	801f75c <MobleProvision_UnprovisionedNode_GetOutputMessage+0xac>
 801f780:	2003      	movs	r0, #3
 801f782:	e7c1      	b.n	801f708 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x58>
 801f784:	20002504 	.word	0x20002504

0801f788 <MobleProvisionBearerGatt_Transmit>:
 801f788:	b500      	push	{lr}
 801f78a:	b0a3      	sub	sp, #140	@ 0x8c
 801f78c:	aa01      	add	r2, sp, #4
 801f78e:	2180      	movs	r1, #128	@ 0x80
 801f790:	a802      	add	r0, sp, #8
 801f792:	f7ff ff8d 	bl	801f6b0 <MobleProvision_UnprovisionedNode_GetOutputMessage>
 801f796:	2801      	cmp	r0, #1
 801f798:	d805      	bhi.n	801f7a6 <MobleProvisionBearerGatt_Transmit+0x1e>
 801f79a:	9b01      	ldr	r3, [sp, #4]
 801f79c:	aa02      	add	r2, sp, #8
 801f79e:	2100      	movs	r1, #0
 801f7a0:	2003      	movs	r0, #3
 801f7a2:	f7fd fe3f 	bl	801d424 <BnrgmProxyProtocol_SendData>
 801f7a6:	b023      	add	sp, #140	@ 0x8c
 801f7a8:	f85d fb04 	ldr.w	pc, [sp], #4

0801f7ac <MobleProvision_UnprovisionedNode_IsCompleted>:
 801f7ac:	4b04      	ldr	r3, [pc, #16]	@ (801f7c0 <MobleProvision_UnprovisionedNode_IsCompleted+0x14>)
 801f7ae:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 801f7b2:	f893 0044 	ldrb.w	r0, [r3, #68]	@ 0x44
 801f7b6:	1f83      	subs	r3, r0, #6
 801f7b8:	4258      	negs	r0, r3
 801f7ba:	4158      	adcs	r0, r3
 801f7bc:	4770      	bx	lr
 801f7be:	bf00      	nop
 801f7c0:	20002504 	.word	0x20002504

0801f7c4 <MobleProvision_ProvisionerNode_Init>:
 801f7c4:	b570      	push	{r4, r5, r6, lr}
 801f7c6:	f44f 70d8 	mov.w	r0, #432	@ 0x1b0
 801f7ca:	f7fb f851 	bl	801a870 <MobleMemAlloc>
 801f7ce:	4e0d      	ldr	r6, [pc, #52]	@ (801f804 <MobleProvision_ProvisionerNode_Init+0x40>)
 801f7d0:	4605      	mov	r5, r0
 801f7d2:	f8c6 0a18 	str.w	r0, [r6, #2584]	@ 0xa18
 801f7d6:	b180      	cbz	r0, 801f7fa <MobleProvision_ProvisionerNode_Init+0x36>
 801f7d8:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	@ 0x6f0
 801f7dc:	f7ff f89e 	bl	801e91c <MobleProvisionGetRole>
 801f7e0:	4604      	mov	r4, r0
 801f7e2:	b960      	cbnz	r0, 801f7fe <MobleProvision_ProvisionerNode_Init+0x3a>
 801f7e4:	7028      	strb	r0, [r5, #0]
 801f7e6:	f7e8 fb19 	bl	8007e1c <HAL_GetTick>
 801f7ea:	f8d6 3a18 	ldr.w	r3, [r6, #2584]	@ 0xa18
 801f7ee:	f8c5 01a8 	str.w	r0, [r5, #424]	@ 0x1a8
 801f7f2:	f883 41ac 	strb.w	r4, [r3, #428]	@ 0x1ac
 801f7f6:	4620      	mov	r0, r4
 801f7f8:	bd70      	pop	{r4, r5, r6, pc}
 801f7fa:	2402      	movs	r4, #2
 801f7fc:	e7fb      	b.n	801f7f6 <MobleProvision_ProvisionerNode_Init+0x32>
 801f7fe:	2403      	movs	r4, #3
 801f800:	e7f9      	b.n	801f7f6 <MobleProvision_ProvisionerNode_Init+0x32>
 801f802:	bf00      	nop
 801f804:	20002504 	.word	0x20002504

0801f808 <MobleProvision_ProvisionerNode_DeInit>:
 801f808:	b510      	push	{r4, lr}
 801f80a:	4c09      	ldr	r4, [pc, #36]	@ (801f830 <MobleProvision_ProvisionerNode_DeInit+0x28>)
 801f80c:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	@ 0xa18
 801f810:	f891 31ac 	ldrb.w	r3, [r1, #428]	@ 0x1ac
 801f814:	2b01      	cmp	r3, #1
 801f816:	d104      	bne.n	801f822 <MobleProvision_ProvisionerNode_DeInit+0x1a>
 801f818:	f7f9 ff92 	bl	8019740 <MoblePalCryptoFreeEcc>
 801f81c:	2300      	movs	r3, #0
 801f81e:	f881 31ac 	strb.w	r3, [r1, #428]	@ 0x1ac
 801f822:	4608      	mov	r0, r1
 801f824:	f7fb f8ae 	bl	801a984 <MobleMemFree>
 801f828:	2000      	movs	r0, #0
 801f82a:	f8c4 0a18 	str.w	r0, [r4, #2584]	@ 0xa18
 801f82e:	bd10      	pop	{r4, pc}
 801f830:	20002504 	.word	0x20002504

0801f834 <MobleProvision_ProvisionerNode_GetNextOperation>:
 801f834:	4b0b      	ldr	r3, [pc, #44]	@ (801f864 <MobleProvision_ProvisionerNode_GetNextOperation+0x30>)
 801f836:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
 801f83a:	781a      	ldrb	r2, [r3, #0]
 801f83c:	2a0b      	cmp	r2, #11
 801f83e:	d80c      	bhi.n	801f85a <MobleProvision_ProvisionerNode_GetNextOperation+0x26>
 801f840:	2301      	movs	r3, #1
 801f842:	4093      	lsls	r3, r2
 801f844:	f240 524d 	movw	r2, #1357	@ 0x54d
 801f848:	4213      	tst	r3, r2
 801f84a:	d108      	bne.n	801f85e <MobleProvision_ProvisionerNode_GetNextOperation+0x2a>
 801f84c:	f640 2292 	movw	r2, #2706	@ 0xa92
 801f850:	4213      	tst	r3, r2
 801f852:	bf14      	ite	ne
 801f854:	2001      	movne	r0, #1
 801f856:	2000      	moveq	r0, #0
 801f858:	4770      	bx	lr
 801f85a:	2000      	movs	r0, #0
 801f85c:	4770      	bx	lr
 801f85e:	2002      	movs	r0, #2
 801f860:	4770      	bx	lr
 801f862:	bf00      	nop
 801f864:	20002504 	.word	0x20002504

0801f868 <MobleProvision_ProvisionerNode_StateForOOB>:
 801f868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f86a:	4e53      	ldr	r6, [pc, #332]	@ (801f9b8 <MobleProvision_ProvisionerNode_StateForOOB+0x150>)
 801f86c:	f8d6 1a18 	ldr.w	r1, [r6, #2584]	@ 0xa18
 801f870:	7808      	ldrb	r0, [r1, #0]
 801f872:	1c43      	adds	r3, r0, #1
 801f874:	700b      	strb	r3, [r1, #0]
 801f876:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 801f87a:	f893 21fb 	ldrb.w	r2, [r3, #507]	@ 0x1fb
 801f87e:	2a02      	cmp	r2, #2
 801f880:	d01b      	beq.n	801f8ba <MobleProvision_ProvisionerNode_StateForOOB+0x52>
 801f882:	2a03      	cmp	r2, #3
 801f884:	d029      	beq.n	801f8da <MobleProvision_ProvisionerNode_StateForOOB+0x72>
 801f886:	2a01      	cmp	r2, #1
 801f888:	d125      	bne.n	801f8d6 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801f88a:	f8d3 228c 	ldr.w	r2, [r3, #652]	@ 0x28c
 801f88e:	f893 01fd 	ldrb.w	r0, [r3, #509]	@ 0x1fd
 801f892:	4790      	blx	r2
 801f894:	4601      	mov	r1, r0
 801f896:	2800      	cmp	r0, #0
 801f898:	f000 8085 	beq.w	801f9a6 <MobleProvision_ProvisionerNode_StateForOOB+0x13e>
 801f89c:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	@ 0x6f0
 801f8a0:	f890 21fd 	ldrb.w	r2, [r0, #509]	@ 0x1fd
 801f8a4:	2a00      	cmp	r2, #0
 801f8a6:	d07e      	beq.n	801f9a6 <MobleProvision_ProvisionerNode_StateForOOB+0x13e>
 801f8a8:	f500 701a 	add.w	r0, r0, #616	@ 0x268
 801f8ac:	f009 fc64 	bl	8029178 <memmove>
 801f8b0:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 801f8b4:	f893 21fd 	ldrb.w	r2, [r3, #509]	@ 0x1fd
 801f8b8:	e069      	b.n	801f98e <MobleProvision_ProvisionerNode_StateForOOB+0x126>
 801f8ba:	f893 11fd 	ldrb.w	r1, [r3, #509]	@ 0x1fd
 801f8be:	b151      	cbz	r1, 801f8d6 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801f8c0:	f8d3 0284 	ldr.w	r0, [r3, #644]	@ 0x284
 801f8c4:	b138      	cbz	r0, 801f8d6 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801f8c6:	f893 01fc 	ldrb.w	r0, [r3, #508]	@ 0x1fc
 801f8ca:	2803      	cmp	r0, #3
 801f8cc:	d95f      	bls.n	801f98e <MobleProvision_ProvisionerNode_StateForOOB+0x126>
 801f8ce:	2804      	cmp	r0, #4
 801f8d0:	bf08      	it	eq
 801f8d2:	f883 1278 	strbeq.w	r1, [r3, #632]	@ 0x278
 801f8d6:	b003      	add	sp, #12
 801f8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f8da:	7008      	strb	r0, [r1, #0]
 801f8dc:	f8d3 2288 	ldr.w	r2, [r3, #648]	@ 0x288
 801f8e0:	2a00      	cmp	r2, #0
 801f8e2:	d0f8      	beq.n	801f8d6 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801f8e4:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 801f8e8:	2b02      	cmp	r3, #2
 801f8ea:	d953      	bls.n	801f994 <MobleProvision_ProvisionerNode_StateForOOB+0x12c>
 801f8ec:	2b03      	cmp	r3, #3
 801f8ee:	d1f2      	bne.n	801f8d6 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801f8f0:	2400      	movs	r4, #0
 801f8f2:	253e      	movs	r5, #62	@ 0x3e
 801f8f4:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 801f8f8:	f893 21fd 	ldrb.w	r2, [r3, #509]	@ 0x1fd
 801f8fc:	f893 1278 	ldrb.w	r1, [r3, #632]	@ 0x278
 801f900:	4291      	cmp	r1, r2
 801f902:	d244      	bcs.n	801f98e <MobleProvision_ProvisionerNode_StateForOOB+0x126>
 801f904:	4668      	mov	r0, sp
 801f906:	e9cd 4400 	strd	r4, r4, [sp]
 801f90a:	f7f5 fd0e 	bl	801532a <hci_le_rand>
 801f90e:	4669      	mov	r1, sp
 801f910:	2208      	movs	r2, #8
 801f912:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f916:	fbb3 f0f5 	udiv	r0, r3, r5
 801f91a:	fb05 3310 	mls	r3, r5, r0, r3
 801f91e:	b2db      	uxtb	r3, r3
 801f920:	2b0a      	cmp	r3, #10
 801f922:	d83b      	bhi.n	801f99c <MobleProvision_ProvisionerNode_StateForOOB+0x134>
 801f924:	3330      	adds	r3, #48	@ 0x30
 801f926:	b2db      	uxtb	r3, r3
 801f928:	3a01      	subs	r2, #1
 801f92a:	f801 3c01 	strb.w	r3, [r1, #-1]
 801f92e:	d1f0      	bne.n	801f912 <MobleProvision_ProvisionerNode_StateForOOB+0xaa>
 801f930:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 801f934:	f893 0278 	ldrb.w	r0, [r3, #632]	@ 0x278
 801f938:	f893 21fd 	ldrb.w	r2, [r3, #509]	@ 0x1fd
 801f93c:	1a12      	subs	r2, r2, r0
 801f93e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 801f942:	2a08      	cmp	r2, #8
 801f944:	bfa8      	it	ge
 801f946:	2208      	movge	r2, #8
 801f948:	4418      	add	r0, r3
 801f94a:	4669      	mov	r1, sp
 801f94c:	f009 fc14 	bl	8029178 <memmove>
 801f950:	f8d6 26f0 	ldr.w	r2, [r6, #1776]	@ 0x6f0
 801f954:	f892 3278 	ldrb.w	r3, [r2, #632]	@ 0x278
 801f958:	3308      	adds	r3, #8
 801f95a:	f882 3278 	strb.w	r3, [r2, #632]	@ 0x278
 801f95e:	e7c9      	b.n	801f8f4 <MobleProvision_ProvisionerNode_StateForOOB+0x8c>
 801f960:	f7f8 f88e 	bl	8017a80 <MoblePalBluetoothRandom>
 801f964:	fbb0 f3f7 	udiv	r3, r0, r7
 801f968:	fb03 0017 	mls	r0, r3, r7, r0
 801f96c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801f970:	b2c0      	uxtb	r0, r0
 801f972:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 801f976:	b284      	uxth	r4, r0
 801f978:	3501      	adds	r5, #1
 801f97a:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 801f97e:	f893 11fd 	ldrb.w	r1, [r3, #509]	@ 0x1fd
 801f982:	b2ea      	uxtb	r2, r5
 801f984:	4291      	cmp	r1, r2
 801f986:	d8eb      	bhi.n	801f960 <MobleProvision_ProvisionerNode_StateForOOB+0xf8>
 801f988:	f8a3 4268 	strh.w	r4, [r3, #616]	@ 0x268
 801f98c:	2202      	movs	r2, #2
 801f98e:	f883 2278 	strb.w	r2, [r3, #632]	@ 0x278
 801f992:	e7a0      	b.n	801f8d6 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801f994:	2500      	movs	r5, #0
 801f996:	462c      	mov	r4, r5
 801f998:	270a      	movs	r7, #10
 801f99a:	e7ee      	b.n	801f97a <MobleProvision_ProvisionerNode_StateForOOB+0x112>
 801f99c:	2b24      	cmp	r3, #36	@ 0x24
 801f99e:	bf94      	ite	ls
 801f9a0:	3357      	addls	r3, #87	@ 0x57
 801f9a2:	331d      	addhi	r3, #29
 801f9a4:	e7bf      	b.n	801f926 <MobleProvision_ProvisionerNode_StateForOOB+0xbe>
 801f9a6:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	@ 0x6f0
 801f9aa:	2210      	movs	r2, #16
 801f9ac:	2100      	movs	r1, #0
 801f9ae:	f500 701a 	add.w	r0, r0, #616	@ 0x268
 801f9b2:	f009 fbfb 	bl	80291ac <memset>
 801f9b6:	e77b      	b.n	801f8b0 <MobleProvision_ProvisionerNode_StateForOOB+0x48>
 801f9b8:	20002504 	.word	0x20002504

0801f9bc <MobleProvision_ProvisionerNode_CompleteOperation>:
 801f9bc:	b570      	push	{r4, r5, r6, lr}
 801f9be:	4c29      	ldr	r4, [pc, #164]	@ (801fa64 <MobleProvision_ProvisionerNode_CompleteOperation+0xa8>)
 801f9c0:	f8d4 2a18 	ldr.w	r2, [r4, #2584]	@ 0xa18
 801f9c4:	7813      	ldrb	r3, [r2, #0]
 801f9c6:	f1a3 010c 	sub.w	r1, r3, #12
 801f9ca:	2901      	cmp	r1, #1
 801f9cc:	b090      	sub	sp, #64	@ 0x40
 801f9ce:	d945      	bls.n	801fa5c <MobleProvision_ProvisionerNode_CompleteOperation+0xa0>
 801f9d0:	2b03      	cmp	r3, #3
 801f9d2:	d145      	bne.n	801fa60 <MobleProvision_ProvisionerNode_CompleteOperation+0xa4>
 801f9d4:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801f9d8:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 801f9dc:	b123      	cbz	r3, 801f9e8 <MobleProvision_ProvisionerNode_CompleteOperation+0x2c>
 801f9de:	2304      	movs	r3, #4
 801f9e0:	7013      	strb	r3, [r2, #0]
 801f9e2:	f7ff ff41 	bl	801f868 <MobleProvision_ProvisionerNode_StateForOOB>
 801f9e6:	2301      	movs	r3, #1
 801f9e8:	f8d4 2a18 	ldr.w	r2, [r4, #2584]	@ 0xa18
 801f9ec:	7812      	ldrb	r2, [r2, #0]
 801f9ee:	2a04      	cmp	r2, #4
 801f9f0:	d102      	bne.n	801f9f8 <MobleProvision_ProvisionerNode_CompleteOperation+0x3c>
 801f9f2:	bb73      	cbnz	r3, 801fa52 <MobleProvision_ProvisionerNode_CompleteOperation+0x96>
 801f9f4:	f7ff ff38 	bl	801f868 <MobleProvision_ProvisionerNode_StateForOOB>
 801f9f8:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	@ 0xa18
 801f9fc:	781b      	ldrb	r3, [r3, #0]
 801f9fe:	2b02      	cmp	r3, #2
 801fa00:	d127      	bne.n	801fa52 <MobleProvision_ProvisionerNode_CompleteOperation+0x96>
 801fa02:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 801fa06:	f893 01fa 	ldrb.w	r0, [r3, #506]	@ 0x1fa
 801fa0a:	b310      	cbz	r0, 801fa52 <MobleProvision_ProvisionerNode_CompleteOperation+0x96>
 801fa0c:	f8d3 3280 	ldr.w	r3, [r3, #640]	@ 0x280
 801fa10:	4798      	blx	r3
 801fa12:	f8d4 5a18 	ldr.w	r5, [r4, #2584]	@ 0xa18
 801fa16:	35f5      	adds	r5, #245	@ 0xf5
 801fa18:	4601      	mov	r1, r0
 801fa1a:	2240      	movs	r2, #64	@ 0x40
 801fa1c:	4628      	mov	r0, r5
 801fa1e:	f009 fbab 	bl	8029178 <memmove>
 801fa22:	2100      	movs	r1, #0
 801fa24:	223c      	movs	r2, #60	@ 0x3c
 801fa26:	a801      	add	r0, sp, #4
 801fa28:	9100      	str	r1, [sp, #0]
 801fa2a:	f009 fbbf 	bl	80291ac <memset>
 801fa2e:	4669      	mov	r1, sp
 801fa30:	4628      	mov	r0, r5
 801fa32:	f7f9 fe91 	bl	8019758 <MoblePalCrypto_PK_convert_le>
 801fa36:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	@ 0xa18
 801fa3a:	466a      	mov	r2, sp
 801fa3c:	3355      	adds	r3, #85	@ 0x55
 801fa3e:	ae10      	add	r6, sp, #64	@ 0x40
 801fa40:	4615      	mov	r5, r2
 801fa42:	cd03      	ldmia	r5!, {r0, r1}
 801fa44:	42b5      	cmp	r5, r6
 801fa46:	6018      	str	r0, [r3, #0]
 801fa48:	6059      	str	r1, [r3, #4]
 801fa4a:	462a      	mov	r2, r5
 801fa4c:	f103 0308 	add.w	r3, r3, #8
 801fa50:	d1f6      	bne.n	801fa40 <MobleProvision_ProvisionerNode_CompleteOperation+0x84>
 801fa52:	f8d4 2a18 	ldr.w	r2, [r4, #2584]	@ 0xa18
 801fa56:	7813      	ldrb	r3, [r2, #0]
 801fa58:	3301      	adds	r3, #1
 801fa5a:	7013      	strb	r3, [r2, #0]
 801fa5c:	b010      	add	sp, #64	@ 0x40
 801fa5e:	bd70      	pop	{r4, r5, r6, pc}
 801fa60:	2300      	movs	r3, #0
 801fa62:	e7c1      	b.n	801f9e8 <MobleProvision_ProvisionerNode_CompleteOperation+0x2c>
 801fa64:	20002504 	.word	0x20002504

0801fa68 <MobleProvision_ProvisionerNode_SetInputMessage>:
 801fa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fa6c:	4680      	mov	r8, r0
 801fa6e:	b094      	sub	sp, #80	@ 0x50
 801fa70:	4617      	mov	r7, r2
 801fa72:	460c      	mov	r4, r1
 801fa74:	b199      	cbz	r1, 801fa9e <MobleProvision_ProvisionerNode_SetInputMessage+0x36>
 801fa76:	4e92      	ldr	r6, [pc, #584]	@ (801fcc0 <MobleProvision_ProvisionerNode_SetInputMessage+0x258>)
 801fa78:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	@ 0x6f0
 801fa7c:	f7fe ff4e 	bl	801e91c <MobleProvisionGetRole>
 801fa80:	4605      	mov	r5, r0
 801fa82:	b960      	cbnz	r0, 801fa9e <MobleProvision_ProvisionerNode_SetInputMessage+0x36>
 801fa84:	f7e8 f9ca 	bl	8007e1c <HAL_GetTick>
 801fa88:	f8d6 9a18 	ldr.w	r9, [r6, #2584]	@ 0xa18
 801fa8c:	f8d9 31a8 	ldr.w	r3, [r9, #424]	@ 0x1a8
 801fa90:	1ac0      	subs	r0, r0, r3
 801fa92:	4b8c      	ldr	r3, [pc, #560]	@ (801fcc4 <MobleProvision_ProvisionerNode_SetInputMessage+0x25c>)
 801fa94:	4298      	cmp	r0, r3
 801fa96:	d904      	bls.n	801faa2 <MobleProvision_ProvisionerNode_SetInputMessage+0x3a>
 801fa98:	230d      	movs	r3, #13
 801fa9a:	f889 3000 	strb.w	r3, [r9]
 801fa9e:	2503      	movs	r5, #3
 801faa0:	e089      	b.n	801fbb6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801faa2:	f7e8 f9bb 	bl	8007e1c <HAL_GetTick>
 801faa6:	f1b8 0f09 	cmp.w	r8, #9
 801faaa:	f8c9 01a8 	str.w	r0, [r9, #424]	@ 0x1a8
 801faae:	d102      	bne.n	801fab6 <MobleProvision_ProvisionerNode_SetInputMessage+0x4e>
 801fab0:	2f01      	cmp	r7, #1
 801fab2:	f000 80f3 	beq.w	801fc9c <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 801fab6:	f8d6 9a18 	ldr.w	r9, [r6, #2584]	@ 0xa18
 801faba:	f899 3000 	ldrb.w	r3, [r9]
 801fabe:	3b01      	subs	r3, #1
 801fac0:	2b0a      	cmp	r3, #10
 801fac2:	f200 80ef 	bhi.w	801fca4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801fac6:	e8df f013 	tbh	[pc, r3, lsl #1]
 801faca:	000b      	.short	0x000b
 801facc:	00ed00ed 	.word	0x00ed00ed
 801fad0:	009e007a 	.word	0x009e007a
 801fad4:	00a500ed 	.word	0x00a500ed
 801fad8:	00b100ed 	.word	0x00b100ed
 801fadc:	00ef00ed 	.word	0x00ef00ed
 801fae0:	f1b8 0f01 	cmp.w	r8, #1
 801fae4:	f040 80de 	bne.w	801fca4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801fae8:	2f0b      	cmp	r7, #11
 801faea:	f040 80db 	bne.w	801fca4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801faee:	f8d6 86f0 	ldr.w	r8, [r6, #1776]	@ 0x6f0
 801faf2:	7823      	ldrb	r3, [r4, #0]
 801faf4:	f888 327c 	strb.w	r3, [r8, #636]	@ 0x27c
 801faf8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801fafc:	ba5b      	rev16	r3, r3
 801fafe:	f8a9 3002 	strh.w	r3, [r9, #2]
 801fb02:	fa1f fa83 	uxth.w	sl, r3
 801fb06:	78e3      	ldrb	r3, [r4, #3]
 801fb08:	f888 31fe 	strb.w	r3, [r8, #510]	@ 0x1fe
 801fb0c:	7923      	ldrb	r3, [r4, #4]
 801fb0e:	f888 31ff 	strb.w	r3, [r8, #511]	@ 0x1ff
 801fb12:	7963      	ldrb	r3, [r4, #5]
 801fb14:	f888 3206 	strb.w	r3, [r8, #518]	@ 0x206
 801fb18:	88e3      	ldrh	r3, [r4, #6]
 801fb1a:	f8a8 3202 	strh.w	r3, [r8, #514]	@ 0x202
 801fb1e:	7a23      	ldrb	r3, [r4, #8]
 801fb20:	f888 3207 	strb.w	r3, [r8, #519]	@ 0x207
 801fb24:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 801fb28:	f8a8 3204 	strh.w	r3, [r8, #516]	@ 0x204
 801fb2c:	463a      	mov	r2, r7
 801fb2e:	4621      	mov	r1, r4
 801fb30:	f109 0005 	add.w	r0, r9, #5
 801fb34:	f009 fb20 	bl	8029178 <memmove>
 801fb38:	f01a 0f01 	tst.w	sl, #1
 801fb3c:	f000 80ae 	beq.w	801fc9c <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 801fb40:	f8d8 4290 	ldr.w	r4, [r8, #656]	@ 0x290
 801fb44:	2c00      	cmp	r4, #0
 801fb46:	f000 80a9 	beq.w	801fc9c <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 801fb4a:	f898 0207 	ldrb.w	r0, [r8, #519]	@ 0x207
 801fb4e:	f8b8 3202 	ldrh.w	r3, [r8, #514]	@ 0x202
 801fb52:	f898 21ff 	ldrb.w	r2, [r8, #511]	@ 0x1ff
 801fb56:	f898 11fe 	ldrb.w	r1, [r8, #510]	@ 0x1fe
 801fb5a:	9002      	str	r0, [sp, #8]
 801fb5c:	f898 0206 	ldrb.w	r0, [r8, #518]	@ 0x206
 801fb60:	9001      	str	r0, [sp, #4]
 801fb62:	f8b8 0204 	ldrh.w	r0, [r8, #516]	@ 0x204
 801fb66:	9000      	str	r0, [sp, #0]
 801fb68:	4857      	ldr	r0, [pc, #348]	@ (801fcc8 <MobleProvision_ProvisionerNode_SetInputMessage+0x260>)
 801fb6a:	47a0      	blx	r4
 801fb6c:	f896 3a1c 	ldrb.w	r3, [r6, #2588]	@ 0xa1c
 801fb70:	2b00      	cmp	r3, #0
 801fb72:	f000 8093 	beq.w	801fc9c <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 801fb76:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 801fb7a:	f896 2a1d 	ldrb.w	r2, [r6, #2589]	@ 0xa1d
 801fb7e:	f883 21fa 	strb.w	r2, [r3, #506]	@ 0x1fa
 801fb82:	f896 2a1e 	ldrb.w	r2, [r6, #2590]	@ 0xa1e
 801fb86:	f896 1a1f 	ldrb.w	r1, [r6, #2591]	@ 0xa1f
 801fb8a:	f883 11fc 	strb.w	r1, [r3, #508]	@ 0x1fc
 801fb8e:	2a01      	cmp	r2, #1
 801fb90:	f896 1a20 	ldrb.w	r1, [r6, #2592]	@ 0xa20
 801fb94:	f883 21fb 	strb.w	r2, [r3, #507]	@ 0x1fb
 801fb98:	f883 11fd 	strb.w	r1, [r3, #509]	@ 0x1fd
 801fb9c:	d10b      	bne.n	801fbb6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801fb9e:	f7ff fe63 	bl	801f868 <MobleProvision_ProvisionerNode_StateForOOB>
 801fba2:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 801fba6:	f893 31fa 	ldrb.w	r3, [r3, #506]	@ 0x1fa
 801fbaa:	b123      	cbz	r3, 801fbb6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801fbac:	f8d6 2a18 	ldr.w	r2, [r6, #2584]	@ 0xa18
 801fbb0:	7813      	ldrb	r3, [r2, #0]
 801fbb2:	3b01      	subs	r3, #1
 801fbb4:	7013      	strb	r3, [r2, #0]
 801fbb6:	4628      	mov	r0, r5
 801fbb8:	b014      	add	sp, #80	@ 0x50
 801fbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fbbe:	f1b8 0f03 	cmp.w	r8, #3
 801fbc2:	d16f      	bne.n	801fca4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801fbc4:	2f40      	cmp	r7, #64	@ 0x40
 801fbc6:	d16d      	bne.n	801fca4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801fbc8:	f109 08f5 	add.w	r8, r9, #245	@ 0xf5
 801fbcc:	463a      	mov	r2, r7
 801fbce:	4621      	mov	r1, r4
 801fbd0:	4640      	mov	r0, r8
 801fbd2:	f009 fad1 	bl	8029178 <memmove>
 801fbd6:	463a      	mov	r2, r7
 801fbd8:	4621      	mov	r1, r4
 801fbda:	f109 0055 	add.w	r0, r9, #85	@ 0x55
 801fbde:	f009 facb 	bl	8029178 <memmove>
 801fbe2:	4640      	mov	r0, r8
 801fbe4:	f7f9 fd96 	bl	8019714 <MoblePalCryptoGetEccGenSecret>
 801fbe8:	2800      	cmp	r0, #0
 801fbea:	d057      	beq.n	801fc9c <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 801fbec:	f8d6 3a18 	ldr.w	r3, [r6, #2584]	@ 0xa18
 801fbf0:	1e42      	subs	r2, r0, #1
 801fbf2:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 801fbf6:	301f      	adds	r0, #31
 801fbf8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801fbfc:	f803 1f01 	strb.w	r1, [r3, #1]!
 801fc00:	4282      	cmp	r2, r0
 801fc02:	d1f9      	bne.n	801fbf8 <MobleProvision_ProvisionerNode_SetInputMessage+0x190>
 801fc04:	e7d7      	b.n	801fbb6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801fc06:	f1b8 0f04 	cmp.w	r8, #4
 801fc0a:	d14b      	bne.n	801fca4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801fc0c:	2f00      	cmp	r7, #0
 801fc0e:	bf18      	it	ne
 801fc10:	2502      	movne	r5, #2
 801fc12:	e7d0      	b.n	801fbb6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801fc14:	f1b8 0f05 	cmp.w	r8, #5
 801fc18:	d144      	bne.n	801fca4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801fc1a:	2f10      	cmp	r7, #16
 801fc1c:	d142      	bne.n	801fca4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801fc1e:	463a      	mov	r2, r7
 801fc20:	4621      	mov	r1, r4
 801fc22:	f209 1095 	addw	r0, r9, #405	@ 0x195
 801fc26:	f009 faa7 	bl	8029178 <memmove>
 801fc2a:	e7c4      	b.n	801fbb6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801fc2c:	f1b8 0f06 	cmp.w	r8, #6
 801fc30:	d138      	bne.n	801fca4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801fc32:	2f10      	cmp	r7, #16
 801fc34:	d136      	bne.n	801fca4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801fc36:	463a      	mov	r2, r7
 801fc38:	4621      	mov	r1, r4
 801fc3a:	f209 1085 	addw	r0, r9, #389	@ 0x185
 801fc3e:	af08      	add	r7, sp, #32
 801fc40:	f009 fa9a 	bl	8029178 <memmove>
 801fc44:	2300      	movs	r3, #0
 801fc46:	4638      	mov	r0, r7
 801fc48:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801fc4c:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 801fc50:	f7fe ff0a 	bl	801ea68 <MobleProvisionGenerateAuthValue>
 801fc54:	aa0c      	add	r2, sp, #48	@ 0x30
 801fc56:	f104 0c10 	add.w	ip, r4, #16
 801fc5a:	6820      	ldr	r0, [r4, #0]
 801fc5c:	6861      	ldr	r1, [r4, #4]
 801fc5e:	4613      	mov	r3, r2
 801fc60:	c303      	stmia	r3!, {r0, r1}
 801fc62:	3408      	adds	r4, #8
 801fc64:	4564      	cmp	r4, ip
 801fc66:	461a      	mov	r2, r3
 801fc68:	d1f7      	bne.n	801fc5a <MobleProvision_ProvisionerNode_SetInputMessage+0x1f2>
 801fc6a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801fc6e:	ac14      	add	r4, sp, #80	@ 0x50
 801fc70:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801fc74:	f8d6 0a18 	ldr.w	r0, [r6, #2584]	@ 0xa18
 801fc78:	2220      	movs	r2, #32
 801fc7a:	a90c      	add	r1, sp, #48	@ 0x30
 801fc7c:	f200 1055 	addw	r0, r0, #341	@ 0x155
 801fc80:	ab04      	add	r3, sp, #16
 801fc82:	f7f8 f9bd 	bl	8018000 <BAES_CmacCompute>
 801fc86:	f8d6 1a18 	ldr.w	r1, [r6, #2584]	@ 0xa18
 801fc8a:	2210      	movs	r2, #16
 801fc8c:	f201 1195 	addw	r1, r1, #405	@ 0x195
 801fc90:	eb0d 0002 	add.w	r0, sp, r2
 801fc94:	f009 fa60 	bl	8029158 <memcmp>
 801fc98:	2800      	cmp	r0, #0
 801fc9a:	d08c      	beq.n	801fbb6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801fc9c:	f8d6 3a18 	ldr.w	r3, [r6, #2584]	@ 0xa18
 801fca0:	220d      	movs	r2, #13
 801fca2:	701a      	strb	r2, [r3, #0]
 801fca4:	2502      	movs	r5, #2
 801fca6:	e786      	b.n	801fbb6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801fca8:	f1b8 0f08 	cmp.w	r8, #8
 801fcac:	d1fa      	bne.n	801fca4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801fcae:	2f00      	cmp	r7, #0
 801fcb0:	d1f8      	bne.n	801fca4 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 801fcb2:	230c      	movs	r3, #12
 801fcb4:	f889 3000 	strb.w	r3, [r9]
 801fcb8:	f7e6 fbe8 	bl	800648c <BLEMesh_ProvisionCallback>
 801fcbc:	463d      	mov	r5, r7
 801fcbe:	e77a      	b.n	801fbb6 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 801fcc0:	20002504 	.word	0x20002504
 801fcc4:	0001d4c0 	.word	0x0001d4c0
 801fcc8:	20002f20 	.word	0x20002f20

0801fccc <MobleProvision_ProvisionerNode_GetOutputMessage>:
 801fccc:	b410      	push	{r4}
 801fcce:	b129      	cbz	r1, 801fcdc <MobleProvision_ProvisionerNode_GetOutputMessage+0x10>
 801fcd0:	b122      	cbz	r2, 801fcdc <MobleProvision_ProvisionerNode_GetOutputMessage+0x10>
 801fcd2:	b118      	cbz	r0, 801fcdc <MobleProvision_ProvisionerNode_GetOutputMessage+0x10>
 801fcd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fcd8:	f7ff bac4 	b.w	801f264 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0>
 801fcdc:	2003      	movs	r0, #3
 801fcde:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fce2:	4770      	bx	lr

0801fce4 <MobleProvision_ProvisionerNode_IsCompleted>:
 801fce4:	4b04      	ldr	r3, [pc, #16]	@ (801fcf8 <MobleProvision_ProvisionerNode_IsCompleted+0x14>)
 801fce6:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	@ 0xa18
 801fcea:	7818      	ldrb	r0, [r3, #0]
 801fcec:	f1a0 030c 	sub.w	r3, r0, #12
 801fcf0:	4258      	negs	r0, r3
 801fcf2:	4158      	adcs	r0, r3
 801fcf4:	4770      	bx	lr
 801fcf6:	bf00      	nop
 801fcf8:	20002504 	.word	0x20002504

0801fcfc <MobleProvision_GetNextOperation>:
 801fcfc:	b908      	cbnz	r0, 801fd02 <MobleProvision_GetNextOperation+0x6>
 801fcfe:	f7ff bd99 	b.w	801f834 <MobleProvision_ProvisionerNode_GetNextOperation>
 801fd02:	f7fe bf63 	b.w	801ebcc <MobleProvision_UnprovisionedNode_GetNextOperation>

0801fd06 <MobleProvision_GetOutputMessage>:
 801fd06:	b410      	push	{r4}
 801fd08:	4604      	mov	r4, r0
 801fd0a:	4608      	mov	r0, r1
 801fd0c:	4611      	mov	r1, r2
 801fd0e:	461a      	mov	r2, r3
 801fd10:	b91c      	cbnz	r4, 801fd1a <MobleProvision_GetOutputMessage+0x14>
 801fd12:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fd16:	f7ff bfd9 	b.w	801fccc <MobleProvision_ProvisionerNode_GetOutputMessage>
 801fd1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fd1e:	f7ff bcc7 	b.w	801f6b0 <MobleProvision_UnprovisionedNode_GetOutputMessage>

0801fd22 <MobleProvision_IsCompleted>:
 801fd22:	b908      	cbnz	r0, 801fd28 <MobleProvision_IsCompleted+0x6>
 801fd24:	f7ff bfde 	b.w	801fce4 <MobleProvision_ProvisionerNode_IsCompleted>
 801fd28:	f7ff bd40 	b.w	801f7ac <MobleProvision_UnprovisionedNode_IsCompleted>

0801fd2c <MoblePBADVInit>:
 801fd2c:	4b0b      	ldr	r3, [pc, #44]	@ (801fd5c <MoblePBADVInit+0x30>)
 801fd2e:	f203 62fc 	addw	r2, r3, #1788	@ 0x6fc
 801fd32:	6002      	str	r2, [r0, #0]
 801fd34:	f893 26fc 	ldrb.w	r2, [r3, #1788]	@ 0x6fc
 801fd38:	b132      	cbz	r2, 801fd48 <MoblePBADVInit+0x1c>
 801fd3a:	f8d3 2700 	ldr.w	r2, [r3, #1792]	@ 0x700
 801fd3e:	3201      	adds	r2, #1
 801fd40:	f8c3 2700 	str.w	r2, [r3, #1792]	@ 0x700
 801fd44:	2000      	movs	r0, #0
 801fd46:	4770      	bx	lr
 801fd48:	2101      	movs	r1, #1
 801fd4a:	f8c3 1700 	str.w	r1, [r3, #1792]	@ 0x700
 801fd4e:	f883 16fc 	strb.w	r1, [r3, #1788]	@ 0x6fc
 801fd52:	f883 2704 	strb.w	r2, [r3, #1796]	@ 0x704
 801fd56:	f883 2878 	strb.w	r2, [r3, #2168]	@ 0x878
 801fd5a:	e7f3      	b.n	801fd44 <MoblePBADVInit+0x18>
 801fd5c:	20002504 	.word	0x20002504

0801fd60 <MoblePBADVStartProvisioning>:
 801fd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fd64:	2a01      	cmp	r2, #1
 801fd66:	9e08      	ldr	r6, [sp, #32]
 801fd68:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801fd6c:	4604      	mov	r4, r0
 801fd6e:	460f      	mov	r7, r1
 801fd70:	4615      	mov	r5, r2
 801fd72:	4698      	mov	r8, r3
 801fd74:	d145      	bne.n	801fe02 <MoblePBADVStartProvisioning+0xa2>
 801fd76:	7a03      	ldrb	r3, [r0, #8]
 801fd78:	2b01      	cmp	r3, #1
 801fd7a:	d106      	bne.n	801fd8a <MoblePBADVStartProvisioning+0x2a>
 801fd7c:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 801fd80:	2b01      	cmp	r3, #1
 801fd82:	d102      	bne.n	801fd8a <MoblePBADVStartProvisioning+0x2a>
 801fd84:	2002      	movs	r0, #2
 801fd86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fd8a:	f894 317c 	ldrb.w	r3, [r4, #380]	@ 0x17c
 801fd8e:	2b01      	cmp	r3, #1
 801fd90:	d032      	beq.n	801fdf8 <MoblePBADVStartProvisioning+0x98>
 801fd92:	4620      	mov	r0, r4
 801fd94:	f7f7 fe92 	bl	8017abc <MoblePBADVGetNewLink>
 801fd98:	4604      	mov	r4, r0
 801fd9a:	2800      	cmp	r0, #0
 801fd9c:	d0f2      	beq.n	801fd84 <MoblePBADVStartProvisioning+0x24>
 801fd9e:	2d01      	cmp	r5, #1
 801fda0:	d145      	bne.n	801fe2e <MoblePBADVStartProvisioning+0xce>
 801fda2:	2300      	movs	r3, #0
 801fda4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 801fda8:	2380      	movs	r3, #128	@ 0x80
 801fdaa:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 801fdae:	463b      	mov	r3, r7
 801fdb0:	f104 0208 	add.w	r2, r4, #8
 801fdb4:	f107 0110 	add.w	r1, r7, #16
 801fdb8:	f853 0b04 	ldr.w	r0, [r3], #4
 801fdbc:	f842 0b04 	str.w	r0, [r2], #4
 801fdc0:	428b      	cmp	r3, r1
 801fdc2:	d1f9      	bne.n	801fdb8 <MoblePBADVStartProvisioning+0x58>
 801fdc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fdc6:	f8c4 8018 	str.w	r8, [r4, #24]
 801fdca:	f884 5020 	strb.w	r5, [r4, #32]
 801fdce:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
 801fdd2:	f1b9 0f00 	cmp.w	r9, #0
 801fdd6:	d001      	beq.n	801fddc <MoblePBADVStartProvisioning+0x7c>
 801fdd8:	f8c4 916c 	str.w	r9, [r4, #364]	@ 0x16c
 801fddc:	b945      	cbnz	r5, 801fdf0 <MoblePBADVStartProvisioning+0x90>
 801fdde:	2301      	movs	r3, #1
 801fde0:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 801fde4:	463a      	mov	r2, r7
 801fde6:	2310      	movs	r3, #16
 801fde8:	4629      	mov	r1, r5
 801fdea:	4620      	mov	r0, r4
 801fdec:	f7fa fc5a 	bl	801a6a4 <MoblePBADVSendControl>
 801fdf0:	b32e      	cbz	r6, 801fe3e <MoblePBADVStartProvisioning+0xde>
 801fdf2:	6034      	str	r4, [r6, #0]
 801fdf4:	2000      	movs	r0, #0
 801fdf6:	e7c6      	b.n	801fd86 <MoblePBADVStartProvisioning+0x26>
 801fdf8:	f894 319c 	ldrb.w	r3, [r4, #412]	@ 0x19c
 801fdfc:	2b01      	cmp	r3, #1
 801fdfe:	d1c8      	bne.n	801fd92 <MoblePBADVStartProvisioning+0x32>
 801fe00:	e7c0      	b.n	801fd84 <MoblePBADVStartProvisioning+0x24>
 801fe02:	2a00      	cmp	r2, #0
 801fe04:	d1c5      	bne.n	801fd92 <MoblePBADVStartProvisioning+0x32>
 801fe06:	7a03      	ldrb	r3, [r0, #8]
 801fe08:	2b01      	cmp	r3, #1
 801fe0a:	d103      	bne.n	801fe14 <MoblePBADVStartProvisioning+0xb4>
 801fe0c:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	d0b7      	beq.n	801fd84 <MoblePBADVStartProvisioning+0x24>
 801fe14:	f894 317c 	ldrb.w	r3, [r4, #380]	@ 0x17c
 801fe18:	2b01      	cmp	r3, #1
 801fe1a:	d103      	bne.n	801fe24 <MoblePBADVStartProvisioning+0xc4>
 801fe1c:	f894 319c 	ldrb.w	r3, [r4, #412]	@ 0x19c
 801fe20:	2b00      	cmp	r3, #0
 801fe22:	d0af      	beq.n	801fd84 <MoblePBADVStartProvisioning+0x24>
 801fe24:	f7ff fcce 	bl	801f7c4 <MobleProvision_ProvisionerNode_Init>
 801fe28:	2800      	cmp	r0, #0
 801fe2a:	d0b2      	beq.n	801fd92 <MoblePBADVStartProvisioning+0x32>
 801fe2c:	e7aa      	b.n	801fd84 <MoblePBADVStartProvisioning+0x24>
 801fe2e:	2d00      	cmp	r5, #0
 801fe30:	d1bd      	bne.n	801fdae <MoblePBADVStartProvisioning+0x4e>
 801fe32:	2380      	movs	r3, #128	@ 0x80
 801fe34:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 801fe38:	f880 50b8 	strb.w	r5, [r0, #184]	@ 0xb8
 801fe3c:	e7b7      	b.n	801fdae <MoblePBADVStartProvisioning+0x4e>
 801fe3e:	4630      	mov	r0, r6
 801fe40:	e7a1      	b.n	801fd86 <MoblePBADVStartProvisioning+0x26>
	...

0801fe44 <MobleStackStartPBADVUnprovisioned>:
 801fe44:	b530      	push	{r4, r5, lr}
 801fe46:	4d0d      	ldr	r5, [pc, #52]	@ (801fe7c <MobleStackStartPBADVUnprovisioned+0x38>)
 801fe48:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 801fe4c:	781c      	ldrb	r4, [r3, #0]
 801fe4e:	b089      	sub	sp, #36	@ 0x24
 801fe50:	b98c      	cbnz	r4, 801fe76 <MobleStackStartPBADVUnprovisioned+0x32>
 801fe52:	4b0b      	ldr	r3, [pc, #44]	@ (801fe80 <MobleStackStartPBADVUnprovisioned+0x3c>)
 801fe54:	685b      	ldr	r3, [r3, #4]
 801fe56:	a804      	add	r0, sp, #16
 801fe58:	695b      	ldr	r3, [r3, #20]
 801fe5a:	4798      	blx	r3
 801fe5c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 801fe60:	f8d5 091c 	ldr.w	r0, [r5, #2332]	@ 0x91c
 801fe64:	9400      	str	r4, [sp, #0]
 801fe66:	2318      	movs	r3, #24
 801fe68:	2201      	movs	r2, #1
 801fe6a:	a904      	add	r1, sp, #16
 801fe6c:	f7ff ff78 	bl	801fd60 <MoblePBADVStartProvisioning>
 801fe70:	4620      	mov	r0, r4
 801fe72:	b009      	add	sp, #36	@ 0x24
 801fe74:	bd30      	pop	{r4, r5, pc}
 801fe76:	2401      	movs	r4, #1
 801fe78:	e7fa      	b.n	801fe70 <MobleStackStartPBADVUnprovisioned+0x2c>
 801fe7a:	bf00      	nop
 801fe7c:	2000140c 	.word	0x2000140c
 801fe80:	20000314 	.word	0x20000314

0801fe84 <MobleStackSetupBeacon>:
 801fe84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fe86:	4604      	mov	r4, r0
 801fe88:	2800      	cmp	r0, #0
 801fe8a:	d044      	beq.n	801ff16 <MobleStackSetupBeacon+0x92>
 801fe8c:	f890 31d4 	ldrb.w	r3, [r0, #468]	@ 0x1d4
 801fe90:	2b01      	cmp	r3, #1
 801fe92:	d101      	bne.n	801fe98 <MobleStackSetupBeacon+0x14>
 801fe94:	f7ff ffd6 	bl	801fe44 <MobleStackStartPBADVUnprovisioned>
 801fe98:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 801fe9c:	2200      	movs	r2, #0
 801fe9e:	9300      	str	r3, [sp, #0]
 801fea0:	481e      	ldr	r0, [pc, #120]	@ (801ff1c <MobleStackSetupBeacon+0x98>)
 801fea2:	f504 73ee 	add.w	r3, r4, #476	@ 0x1dc
 801fea6:	4611      	mov	r1, r2
 801fea8:	f7fa fbcc 	bl	801a644 <MobleTransmitRegularlyGenerated>
 801feac:	2801      	cmp	r0, #1
 801feae:	d830      	bhi.n	801ff12 <MobleStackSetupBeacon+0x8e>
 801feb0:	6823      	ldr	r3, [r4, #0]
 801feb2:	4d1b      	ldr	r5, [pc, #108]	@ (801ff20 <MobleStackSetupBeacon+0x9c>)
 801feb4:	781b      	ldrb	r3, [r3, #0]
 801feb6:	f8d5 0858 	ldr.w	r0, [r5, #2136]	@ 0x858
 801feba:	2b01      	cmp	r3, #1
 801febc:	f242 7310 	movw	r3, #10000	@ 0x2710
 801fec0:	bf18      	it	ne
 801fec2:	f44f 737a 	movne.w	r3, #1000	@ 0x3e8
 801fec6:	f8a4 31dc 	strh.w	r3, [r4, #476]	@ 0x1dc
 801feca:	f7fa fb87 	bl	801a5dc <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801fece:	f504 73f0 	add.w	r3, r4, #480	@ 0x1e0
 801fed2:	2201      	movs	r2, #1
 801fed4:	9300      	str	r3, [sp, #0]
 801fed6:	4813      	ldr	r0, [pc, #76]	@ (801ff24 <MobleStackSetupBeacon+0xa0>)
 801fed8:	f504 73f2 	add.w	r3, r4, #484	@ 0x1e4
 801fedc:	4611      	mov	r1, r2
 801fede:	f7fa fbb1 	bl	801a644 <MobleTransmitRegularlyGenerated>
 801fee2:	2801      	cmp	r0, #1
 801fee4:	d815      	bhi.n	801ff12 <MobleStackSetupBeacon+0x8e>
 801fee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801feea:	f8a4 31e4 	strh.w	r3, [r4, #484]	@ 0x1e4
 801feee:	f8d5 0860 	ldr.w	r0, [r5, #2144]	@ 0x860
 801fef2:	f7fa fb73 	bl	801a5dc <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801fef6:	f504 73f4 	add.w	r3, r4, #488	@ 0x1e8
 801fefa:	2200      	movs	r2, #0
 801fefc:	9300      	str	r3, [sp, #0]
 801fefe:	480a      	ldr	r0, [pc, #40]	@ (801ff28 <MobleStackSetupBeacon+0xa4>)
 801ff00:	f504 73f6 	add.w	r3, r4, #492	@ 0x1ec
 801ff04:	4611      	mov	r1, r2
 801ff06:	f7fa fb9d 	bl	801a644 <MobleTransmitRegularlyGenerated>
 801ff0a:	2802      	cmp	r0, #2
 801ff0c:	bf28      	it	cs
 801ff0e:	2002      	movcs	r0, #2
 801ff10:	b2c0      	uxtb	r0, r0
 801ff12:	b003      	add	sp, #12
 801ff14:	bd30      	pop	{r4, r5, pc}
 801ff16:	2002      	movs	r0, #2
 801ff18:	e7fb      	b.n	801ff12 <MobleStackSetupBeacon+0x8e>
 801ff1a:	bf00      	nop
 801ff1c:	08020a31 	.word	0x08020a31
 801ff20:	2000140c 	.word	0x2000140c
 801ff24:	0801d0cd 	.word	0x0801d0cd
 801ff28:	0801cba5 	.word	0x0801cba5

0801ff2c <MobleStackFSM>:
 801ff2c:	b538      	push	{r3, r4, r5, lr}
 801ff2e:	4605      	mov	r5, r0
 801ff30:	2800      	cmp	r0, #0
 801ff32:	d05c      	beq.n	801ffee <MobleStackFSM+0xc2>
 801ff34:	f890 416c 	ldrb.w	r4, [r0, #364]	@ 0x16c
 801ff38:	2c04      	cmp	r4, #4
 801ff3a:	d853      	bhi.n	801ffe4 <MobleStackFSM+0xb8>
 801ff3c:	e8df f004 	tbb	[pc, r4]
 801ff40:	522a1303 	.word	0x522a1303
 801ff44:	45          	.byte	0x45
 801ff45:	00          	.byte	0x00
 801ff46:	2906      	cmp	r1, #6
 801ff48:	d809      	bhi.n	801ff5e <MobleStackFSM+0x32>
 801ff4a:	e8df f001 	tbb	[pc, r1]
 801ff4e:	0849      	.short	0x0849
 801ff50:	04044908 	.word	0x04044908
 801ff54:	16          	.byte	0x16
 801ff55:	00          	.byte	0x00
 801ff56:	f7ff ff95 	bl	801fe84 <MobleStackSetupBeacon>
 801ff5a:	2801      	cmp	r0, #1
 801ff5c:	d93d      	bls.n	801ffda <MobleStackFSM+0xae>
 801ff5e:	2303      	movs	r3, #3
 801ff60:	f885 316c 	strb.w	r3, [r5, #364]	@ 0x16c
 801ff64:	e005      	b.n	801ff72 <MobleStackFSM+0x46>
 801ff66:	2905      	cmp	r1, #5
 801ff68:	d805      	bhi.n	801ff76 <MobleStackFSM+0x4a>
 801ff6a:	2903      	cmp	r1, #3
 801ff6c:	d80b      	bhi.n	801ff86 <MobleStackFSM+0x5a>
 801ff6e:	2901      	cmp	r1, #1
 801ff70:	d007      	beq.n	801ff82 <MobleStackFSM+0x56>
 801ff72:	2400      	movs	r4, #0
 801ff74:	e034      	b.n	801ffe0 <MobleStackFSM+0xb4>
 801ff76:	2906      	cmp	r1, #6
 801ff78:	d1fb      	bne.n	801ff72 <MobleStackFSM+0x46>
 801ff7a:	f7fe ffa7 	bl	801eecc <MobleTransmitSuspendAll>
 801ff7e:	2304      	movs	r3, #4
 801ff80:	e7ee      	b.n	801ff60 <MobleStackFSM+0x34>
 801ff82:	2302      	movs	r3, #2
 801ff84:	e7ec      	b.n	801ff60 <MobleStackFSM+0x34>
 801ff86:	f8d0 01d8 	ldr.w	r0, [r0, #472]	@ 0x1d8
 801ff8a:	f7fa fac1 	bl	801a510 <MobleTransmitOutOfTurn>
 801ff8e:	2801      	cmp	r0, #1
 801ff90:	d8e5      	bhi.n	801ff5e <MobleStackFSM+0x32>
 801ff92:	e7ee      	b.n	801ff72 <MobleStackFSM+0x46>
 801ff94:	3901      	subs	r1, #1
 801ff96:	2905      	cmp	r1, #5
 801ff98:	d8e1      	bhi.n	801ff5e <MobleStackFSM+0x32>
 801ff9a:	a301      	add	r3, pc, #4	@ (adr r3, 801ffa0 <MobleStackFSM+0x74>)
 801ff9c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ffa0:	0801ff73 	.word	0x0801ff73
 801ffa4:	0801ffb9 	.word	0x0801ffb9
 801ffa8:	0801ff73 	.word	0x0801ff73
 801ffac:	0801ff73 	.word	0x0801ff73
 801ffb0:	0801ff73 	.word	0x0801ff73
 801ffb4:	0801ffbd 	.word	0x0801ffbd
 801ffb8:	2301      	movs	r3, #1
 801ffba:	e7d1      	b.n	801ff60 <MobleStackFSM+0x34>
 801ffbc:	4b0d      	ldr	r3, [pc, #52]	@ (801fff4 <MobleStackFSM+0xc8>)
 801ffbe:	2116      	movs	r1, #22
 801ffc0:	f8b3 0382 	ldrh.w	r0, [r3, #898]	@ 0x382
 801ffc4:	f7f4 f891 	bl	80140ea <aci_gap_terminate>
 801ffc8:	e7d7      	b.n	801ff7a <MobleStackFSM+0x4e>
 801ffca:	2907      	cmp	r1, #7
 801ffcc:	d1d1      	bne.n	801ff72 <MobleStackFSM+0x46>
 801ffce:	4b0a      	ldr	r3, [pc, #40]	@ (801fff8 <MobleStackFSM+0xcc>)
 801ffd0:	2400      	movs	r4, #0
 801ffd2:	f883 4166 	strb.w	r4, [r3, #358]	@ 0x166
 801ffd6:	f7fe ff89 	bl	801eeec <MobleTransmitResumeAll>
 801ffda:	2301      	movs	r3, #1
 801ffdc:	f885 316c 	strb.w	r3, [r5, #364]	@ 0x16c
 801ffe0:	4620      	mov	r0, r4
 801ffe2:	bd38      	pop	{r3, r4, r5, pc}
 801ffe4:	2303      	movs	r3, #3
 801ffe6:	f880 316c 	strb.w	r3, [r0, #364]	@ 0x16c
 801ffea:	2402      	movs	r4, #2
 801ffec:	e7f8      	b.n	801ffe0 <MobleStackFSM+0xb4>
 801ffee:	2403      	movs	r4, #3
 801fff0:	e7f6      	b.n	801ffe0 <MobleStackFSM+0xb4>
 801fff2:	bf00      	nop
 801fff4:	2000140c 	.word	0x2000140c
 801fff8:	20003f54 	.word	0x20003f54

0801fffc <MobleStackTimerCallback>:
 801fffc:	4801      	ldr	r0, [pc, #4]	@ (8020004 <MobleStackTimerCallback+0x8>)
 801fffe:	2100      	movs	r1, #0
 8020000:	f7ff bf94 	b.w	801ff2c <MobleStackFSM>
 8020004:	20001a8c 	.word	0x20001a8c

08020008 <MobleStackInit>:
 8020008:	b5f0      	push	{r4, r5, r6, r7, lr}
 802000a:	b085      	sub	sp, #20
 802000c:	4616      	mov	r6, r2
 802000e:	f89d 4028 	ldrb.w	r4, [sp, #40]	@ 0x28
 8020012:	b911      	cbnz	r1, 802001a <MobleStackInit+0x12>
 8020014:	2003      	movs	r0, #3
 8020016:	b005      	add	sp, #20
 8020018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802001a:	4d45      	ldr	r5, [pc, #276]	@ (8020130 <MobleStackInit+0x128>)
 802001c:	9303      	str	r3, [sp, #12]
 802001e:	f505 67d0 	add.w	r7, r5, #1664	@ 0x680
 8020022:	07a3      	lsls	r3, r4, #30
 8020024:	600f      	str	r7, [r1, #0]
 8020026:	f8c5 0680 	str.w	r0, [r5, #1664]	@ 0x680
 802002a:	d0f3      	beq.n	8020014 <MobleStackInit+0xc>
 802002c:	f004 0201 	and.w	r2, r4, #1
 8020030:	f3c4 0440 	ubfx	r4, r4, #1, #1
 8020034:	f885 2854 	strb.w	r2, [r5, #2132]	@ 0x854
 8020038:	f885 4855 	strb.w	r4, [r5, #2133]	@ 0x855
 802003c:	f7f7 fa6c 	bl	8017518 <MoblePalTimerInit>
 8020040:	2801      	cmp	r0, #1
 8020042:	9b03      	ldr	r3, [sp, #12]
 8020044:	d8e7      	bhi.n	8020016 <MobleStackInit+0xe>
 8020046:	4a3b      	ldr	r2, [pc, #236]	@ (8020134 <MobleStackInit+0x12c>)
 8020048:	f8c5 2344 	str.w	r2, [r5, #836]	@ 0x344
 802004c:	4a3a      	ldr	r2, [pc, #232]	@ (8020138 <MobleStackInit+0x130>)
 802004e:	f8c5 2348 	str.w	r2, [r5, #840]	@ 0x348
 8020052:	2200      	movs	r2, #0
 8020054:	f8c5 27e4 	str.w	r2, [r5, #2020]	@ 0x7e4
 8020058:	4a38      	ldr	r2, [pc, #224]	@ (802013c <MobleStackInit+0x134>)
 802005a:	9201      	str	r2, [sp, #4]
 802005c:	4a38      	ldr	r2, [pc, #224]	@ (8020140 <MobleStackInit+0x138>)
 802005e:	9200      	str	r2, [sp, #0]
 8020060:	7831      	ldrb	r1, [r6, #0]
 8020062:	6872      	ldr	r2, [r6, #4]
 8020064:	4638      	mov	r0, r7
 8020066:	f7f7 fce3 	bl	8017a30 <MoblePalBluetoothInit>
 802006a:	2801      	cmp	r0, #1
 802006c:	d8d3      	bhi.n	8020016 <MobleStackInit+0xe>
 802006e:	f7f8 fc53 	bl	8018918 <MoblePalCryptoInit>
 8020072:	2801      	cmp	r0, #1
 8020074:	d8cf      	bhi.n	8020016 <MobleStackInit+0xe>
 8020076:	f895 3854 	ldrb.w	r3, [r5, #2132]	@ 0x854
 802007a:	2b01      	cmp	r3, #1
 802007c:	d012      	beq.n	80200a4 <MobleStackInit+0x9c>
 802007e:	2301      	movs	r3, #1
 8020080:	f8d5 0680 	ldr.w	r0, [r5, #1664]	@ 0x680
 8020084:	f885 3934 	strb.w	r3, [r5, #2356]	@ 0x934
 8020088:	f7fc fa8a 	bl	801c5a0 <MobleConfigNetworkLoad>
 802008c:	2801      	cmp	r0, #1
 802008e:	d810      	bhi.n	80200b2 <MobleStackInit+0xaa>
 8020090:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 8020094:	4618      	mov	r0, r3
 8020096:	f7fc fbd7 	bl	801c848 <MobleConfigCheck>
 802009a:	7018      	strb	r0, [r3, #0]
 802009c:	b978      	cbnz	r0, 80200be <MobleStackInit+0xb6>
 802009e:	f885 0934 	strb.w	r0, [r5, #2356]	@ 0x934
 80200a2:	e00c      	b.n	80200be <MobleStackInit+0xb6>
 80200a4:	f605 101c 	addw	r0, r5, #2332	@ 0x91c
 80200a8:	f7ff fe40 	bl	801fd2c <MoblePBADVInit>
 80200ac:	2801      	cmp	r0, #1
 80200ae:	d9e6      	bls.n	802007e <MobleStackInit+0x76>
 80200b0:	e7b1      	b.n	8020016 <MobleStackInit+0xe>
 80200b2:	f8d5 2680 	ldr.w	r2, [r5, #1664]	@ 0x680
 80200b6:	2300      	movs	r3, #0
 80200b8:	7013      	strb	r3, [r2, #0]
 80200ba:	f885 3934 	strb.w	r3, [r5, #2356]	@ 0x934
 80200be:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 80200c2:	6858      	ldr	r0, [r3, #4]
 80200c4:	f7f9 fa9c 	bl	8019600 <MoblePalCryptoSetIvIndex>
 80200c8:	2801      	cmp	r0, #1
 80200ca:	d8a4      	bhi.n	8020016 <MobleStackInit+0xe>
 80200cc:	f7fe fc44 	bl	801e958 <MoblePalBluetoothReset>
 80200d0:	4a1c      	ldr	r2, [pc, #112]	@ (8020144 <MobleStackInit+0x13c>)
 80200d2:	491d      	ldr	r1, [pc, #116]	@ (8020148 <MobleStackInit+0x140>)
 80200d4:	f502 70ba 	add.w	r0, r2, #372	@ 0x174
 80200d8:	f7f7 fa2e 	bl	8017538 <MoblePalTimerCreate>
 80200dc:	2801      	cmp	r0, #1
 80200de:	d89a      	bhi.n	8020016 <MobleStackInit+0xe>
 80200e0:	4b1a      	ldr	r3, [pc, #104]	@ (802014c <MobleStackInit+0x144>)
 80200e2:	4818      	ldr	r0, [pc, #96]	@ (8020144 <MobleStackInit+0x13c>)
 80200e4:	f8c5 3358 	str.w	r3, [r5, #856]	@ 0x358
 80200e8:	f7fe fa99 	bl	801e61e <MobleProvisionUpdateRole>
 80200ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80200ee:	8818      	ldrh	r0, [r3, #0]
 80200f0:	f7fe feca 	bl	801ee88 <MobleTransmitInit>
 80200f4:	f04f 33ff 	mov.w	r3, #4294967295
 80200f8:	2400      	movs	r4, #0
 80200fa:	f8c5 3858 	str.w	r3, [r5, #2136]	@ 0x858
 80200fe:	f8c5 3860 	str.w	r3, [r5, #2144]	@ 0x860
 8020102:	4b13      	ldr	r3, [pc, #76]	@ (8020150 <MobleStackInit+0x148>)
 8020104:	f8c5 3924 	str.w	r3, [r5, #2340]	@ 0x924
 8020108:	f8a5 4850 	strh.w	r4, [r5, #2128]	@ 0x850
 802010c:	f885 47ec 	strb.w	r4, [r5, #2028]	@ 0x7ec
 8020110:	f7e7 fe84 	bl	8007e1c <HAL_GetTick>
 8020114:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 8020118:	f8c5 0928 	str.w	r0, [r5, #2344]	@ 0x928
 802011c:	781b      	ldrb	r3, [r3, #0]
 802011e:	4809      	ldr	r0, [pc, #36]	@ (8020144 <MobleStackInit+0x13c>)
 8020120:	42a3      	cmp	r3, r4
 8020122:	bf0c      	ite	eq
 8020124:	2105      	moveq	r1, #5
 8020126:	2104      	movne	r1, #4
 8020128:	f7ff ff00 	bl	801ff2c <MobleStackFSM>
 802012c:	4620      	mov	r0, r4
 802012e:	e772      	b.n	8020016 <MobleStackInit+0xe>
 8020130:	2000140c 	.word	0x2000140c
 8020134:	08017385 	.word	0x08017385
 8020138:	08027685 	.word	0x08027685
 802013c:	08027ab7 	.word	0x08027ab7
 8020140:	0801ca71 	.word	0x0801ca71
 8020144:	20001a8c 	.word	0x20001a8c
 8020148:	0801fffd 	.word	0x0801fffd
 802014c:	08027491 	.word	0x08027491
 8020150:	1ee62800 	.word	0x1ee62800

08020154 <MobleStackSendData>:
 8020154:	b570      	push	{r4, r5, r6, lr}
 8020156:	4604      	mov	r4, r0
 8020158:	b08a      	sub	sp, #40	@ 0x28
 802015a:	2800      	cmp	r0, #0
 802015c:	d03e      	beq.n	80201dc <MobleStackSendData+0x88>
 802015e:	7a05      	ldrb	r5, [r0, #8]
 8020160:	f1a5 030e 	sub.w	r3, r5, #14
 8020164:	2b0f      	cmp	r3, #15
 8020166:	d839      	bhi.n	80201dc <MobleStackSendData+0x88>
 8020168:	4b1e      	ldr	r3, [pc, #120]	@ (80201e4 <MobleStackSendData+0x90>)
 802016a:	f893 27ec 	ldrb.w	r2, [r3, #2028]	@ 0x7ec
 802016e:	2a04      	cmp	r2, #4
 8020170:	d036      	beq.n	80201e0 <MobleStackSendData+0x8c>
 8020172:	f8d3 3680 	ldr.w	r3, [r3, #1664]	@ 0x680
 8020176:	781b      	ldrb	r3, [r3, #0]
 8020178:	2b01      	cmp	r3, #1
 802017a:	d128      	bne.n	80201ce <MobleStackSendData+0x7a>
 802017c:	6846      	ldr	r6, [r0, #4]
 802017e:	1c6b      	adds	r3, r5, #1
 8020180:	f88d 3008 	strb.w	r3, [sp, #8]
 8020184:	462a      	mov	r2, r5
 8020186:	232a      	movs	r3, #42	@ 0x2a
 8020188:	4631      	mov	r1, r6
 802018a:	f10d 000a 	add.w	r0, sp, #10
 802018e:	f88d 3009 	strb.w	r3, [sp, #9]
 8020192:	f009 f89c 	bl	80292ce <memcpy>
 8020196:	462b      	mov	r3, r5
 8020198:	4632      	mov	r2, r6
 802019a:	8ae1      	ldrh	r1, [r4, #22]
 802019c:	2000      	movs	r0, #0
 802019e:	f7fd f941 	bl	801d424 <BnrgmProxyProtocol_SendData>
 80201a2:	4b11      	ldr	r3, [pc, #68]	@ (80201e8 <MobleStackSendData+0x94>)
 80201a4:	f893 26f4 	ldrb.w	r2, [r3, #1780]	@ 0x6f4
 80201a8:	b122      	cbz	r2, 80201b4 <MobleStackSendData+0x60>
 80201aa:	f8b3 26f6 	ldrh.w	r2, [r3, #1782]	@ 0x6f6
 80201ae:	8ae3      	ldrh	r3, [r4, #22]
 80201b0:	429a      	cmp	r2, r3
 80201b2:	d00c      	beq.n	80201ce <MobleStackSendData+0x7a>
 80201b4:	2314      	movs	r3, #20
 80201b6:	7a22      	ldrb	r2, [r4, #8]
 80201b8:	9301      	str	r3, [sp, #4]
 80201ba:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80201be:	9300      	str	r3, [sp, #0]
 80201c0:	3202      	adds	r2, #2
 80201c2:	8b60      	ldrh	r0, [r4, #26]
 80201c4:	2300      	movs	r3, #0
 80201c6:	b2d2      	uxtb	r2, r2
 80201c8:	a902      	add	r1, sp, #8
 80201ca:	f7fa fa55 	bl	801a678 <BnrgmTransmitSend>
 80201ce:	4807      	ldr	r0, [pc, #28]	@ (80201ec <MobleStackSendData+0x98>)
 80201d0:	2103      	movs	r1, #3
 80201d2:	f7ff feab 	bl	801ff2c <MobleStackFSM>
 80201d6:	2000      	movs	r0, #0
 80201d8:	b00a      	add	sp, #40	@ 0x28
 80201da:	bd70      	pop	{r4, r5, r6, pc}
 80201dc:	2003      	movs	r0, #3
 80201de:	e7fb      	b.n	80201d8 <MobleStackSendData+0x84>
 80201e0:	2002      	movs	r0, #2
 80201e2:	e7f9      	b.n	80201d8 <MobleStackSendData+0x84>
 80201e4:	2000140c 	.word	0x2000140c
 80201e8:	20002504 	.word	0x20002504
 80201ec:	20001a8c 	.word	0x20001a8c

080201f0 <MobleNetworkSendDataEx>:
 80201f0:	b570      	push	{r4, r5, r6, lr}
 80201f2:	460c      	mov	r4, r1
 80201f4:	b08a      	sub	sp, #40	@ 0x28
 80201f6:	461d      	mov	r5, r3
 80201f8:	b930      	cbnz	r0, 8020208 <MobleNetworkSendDataEx+0x18>
 80201fa:	4b1c      	ldr	r3, [pc, #112]	@ (802026c <MobleNetworkSendDataEx+0x7c>)
 80201fc:	4a1c      	ldr	r2, [pc, #112]	@ (8020270 <MobleNetworkSendDataEx+0x80>)
 80201fe:	f240 118d 	movw	r1, #397	@ 0x18d
 8020202:	481c      	ldr	r0, [pc, #112]	@ (8020274 <MobleNetworkSendDataEx+0x84>)
 8020204:	f008 f8ea 	bl	80283dc <__assert_func>
 8020208:	b922      	cbnz	r2, 8020214 <MobleNetworkSendDataEx+0x24>
 802020a:	4b1b      	ldr	r3, [pc, #108]	@ (8020278 <MobleNetworkSendDataEx+0x88>)
 802020c:	4a18      	ldr	r2, [pc, #96]	@ (8020270 <MobleNetworkSendDataEx+0x80>)
 802020e:	f44f 71c7 	mov.w	r1, #398	@ 0x18e
 8020212:	e7f6      	b.n	8020202 <MobleNetworkSendDataEx+0x12>
 8020214:	f890 116c 	ldrb.w	r1, [r0, #364]	@ 0x16c
 8020218:	2904      	cmp	r1, #4
 802021a:	d102      	bne.n	8020222 <MobleNetworkSendDataEx+0x32>
 802021c:	2002      	movs	r0, #2
 802021e:	b00a      	add	sp, #40	@ 0x28
 8020220:	bd70      	pop	{r4, r5, r6, pc}
 8020222:	8b61      	ldrh	r1, [r4, #26]
 8020224:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8020228:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 802022c:	73a0      	strb	r0, [r4, #14]
 802022e:	8361      	strh	r1, [r4, #26]
 8020230:	4812      	ldr	r0, [pc, #72]	@ (802027c <MobleNetworkSendDataEx+0x8c>)
 8020232:	7f21      	ldrb	r1, [r4, #28]
 8020234:	4408      	add	r0, r1
 8020236:	ae02      	add	r6, sp, #8
 8020238:	f890 00c0 	ldrb.w	r0, [r0, #192]	@ 0xc0
 802023c:	1e81      	subs	r1, r0, #2
 802023e:	4248      	negs	r0, r1
 8020240:	4148      	adcs	r0, r1
 8020242:	9000      	str	r0, [sp, #0]
 8020244:	4631      	mov	r1, r6
 8020246:	4620      	mov	r0, r4
 8020248:	f7fa fcd6 	bl	801abf8 <MoblePalCryptoEncryptNetwork>
 802024c:	2801      	cmp	r0, #1
 802024e:	d8e5      	bhi.n	802021c <MobleNetworkSendDataEx+0x2c>
 8020250:	7ba3      	ldrb	r3, [r4, #14]
 8020252:	6066      	str	r6, [r4, #4]
 8020254:	2b00      	cmp	r3, #0
 8020256:	bf14      	ite	ne
 8020258:	2308      	movne	r3, #8
 802025a:	2304      	moveq	r3, #4
 802025c:	3509      	adds	r5, #9
 802025e:	441d      	add	r5, r3
 8020260:	7225      	strb	r5, [r4, #8]
 8020262:	4620      	mov	r0, r4
 8020264:	f7ff ff76 	bl	8020154 <MobleStackSendData>
 8020268:	2000      	movs	r0, #0
 802026a:	e7d8      	b.n	802021e <MobleNetworkSendDataEx+0x2e>
 802026c:	08030e80 	.word	0x08030e80
 8020270:	0802f6ed 	.word	0x0802f6ed
 8020274:	0803135e 	.word	0x0803135e
 8020278:	080310cf 	.word	0x080310cf
 802027c:	20000314 	.word	0x20000314

08020280 <BnrgmFrndFnSendLpnMsg>:
 8020280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020282:	4614      	mov	r4, r2
 8020284:	b08b      	sub	sp, #44	@ 0x2c
 8020286:	4605      	mov	r5, r0
 8020288:	460e      	mov	r6, r1
 802028a:	2228      	movs	r2, #40	@ 0x28
 802028c:	2100      	movs	r1, #0
 802028e:	4668      	mov	r0, sp
 8020290:	f008 ff8c 	bl	80291ac <memset>
 8020294:	f894 232d 	ldrb.w	r2, [r4, #813]	@ 0x32d
 8020298:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 802029c:	212c      	movs	r1, #44	@ 0x2c
 802029e:	fb01 4302 	mla	r3, r1, r2, r4
 80202a2:	461a      	mov	r2, r3
 80202a4:	f893 006e 	ldrb.w	r0, [r3, #110]	@ 0x6e
 80202a8:	6f1f      	ldr	r7, [r3, #112]	@ 0x70
 80202aa:	f8b3 c06e 	ldrh.w	ip, [r3, #110]	@ 0x6e
 80202ae:	9704      	str	r7, [sp, #16]
 80202b0:	2801      	cmp	r0, #1
 80202b2:	bf0c      	ite	eq
 80202b4:	2038      	moveq	r0, #56	@ 0x38
 80202b6:	2030      	movne	r0, #48	@ 0x30
 80202b8:	f8ad 001a 	strh.w	r0, [sp, #26]
 80202bc:	2001      	movs	r0, #1
 80202be:	f88d 0023 	strb.w	r0, [sp, #35]	@ 0x23
 80202c2:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 80202c6:	6f5f      	ldr	r7, [r3, #116]	@ 0x74
 80202c8:	f88d 001c 	strb.w	r0, [sp, #28]
 80202cc:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80202d0:	f8ad c00e 	strh.w	ip, [sp, #14]
 80202d4:	3285      	adds	r2, #133	@ 0x85
 80202d6:	4669      	mov	r1, sp
 80202d8:	4628      	mov	r0, r5
 80202da:	9705      	str	r7, [sp, #20]
 80202dc:	f7ff ff88 	bl	80201f0 <MobleNetworkSendDataEx>
 80202e0:	b00b      	add	sp, #44	@ 0x2c
 80202e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080202e4 <Test_UpperTester_Send01>:
 80202e4:	b530      	push	{r4, r5, lr}
 80202e6:	b08d      	sub	sp, #52	@ 0x34
 80202e8:	4604      	mov	r4, r0
 80202ea:	460d      	mov	r5, r1
 80202ec:	2228      	movs	r2, #40	@ 0x28
 80202ee:	2100      	movs	r1, #0
 80202f0:	a802      	add	r0, sp, #8
 80202f2:	f008 ff5b 	bl	80291ac <memset>
 80202f6:	4b16      	ldr	r3, [pc, #88]	@ (8020350 <Test_UpperTester_Send01+0x6c>)
 80202f8:	6821      	ldr	r1, [r4, #0]
 80202fa:	6818      	ldr	r0, [r3, #0]
 80202fc:	889b      	ldrh	r3, [r3, #4]
 80202fe:	f8ad 3004 	strh.w	r3, [sp, #4]
 8020302:	f8b5 3001 	ldrh.w	r3, [r5, #1]
 8020306:	9000      	str	r0, [sp, #0]
 8020308:	ba5b      	rev16	r3, r3
 802030a:	f8ad 301e 	strh.w	r3, [sp, #30]
 802030e:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
 8020312:	782a      	ldrb	r2, [r5, #0]
 8020314:	8849      	ldrh	r1, [r1, #2]
 8020316:	9306      	str	r3, [sp, #24]
 8020318:	2307      	movs	r3, #7
 802031a:	f8ad 101c 	strh.w	r1, [sp, #28]
 802031e:	f88d 2017 	strb.w	r2, [sp, #23]
 8020322:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8020326:	466a      	mov	r2, sp
 8020328:	a902      	add	r1, sp, #8
 802032a:	2306      	movs	r3, #6
 802032c:	4620      	mov	r0, r4
 802032e:	f7ff ff5f 	bl	80201f0 <MobleNetworkSendDataEx>
 8020332:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
 8020336:	3301      	adds	r3, #1
 8020338:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 802033c:	4605      	mov	r5, r0
 802033e:	f8c4 315c 	str.w	r3, [r4, #348]	@ 0x15c
 8020342:	4620      	mov	r0, r4
 8020344:	f7fc f9cc 	bl	801c6e0 <MobleNetworkSaveSeqNum>
 8020348:	4628      	mov	r0, r5
 802034a:	b00d      	add	sp, #52	@ 0x34
 802034c:	bd30      	pop	{r4, r5, pc}
 802034e:	bf00      	nop
 8020350:	0803155f 	.word	0x0803155f

08020354 <MobleModelGetOpcodeIdx>:
 8020354:	b530      	push	{r4, r5, lr}
 8020356:	2300      	movs	r3, #0
 8020358:	4293      	cmp	r3, r2
 802035a:	d102      	bne.n	8020362 <MobleModelGetOpcodeIdx+0xe>
 802035c:	2400      	movs	r4, #0
 802035e:	4620      	mov	r0, r4
 8020360:	bd30      	pop	{r4, r5, pc}
 8020362:	460c      	mov	r4, r1
 8020364:	f851 5b10 	ldr.w	r5, [r1], #16
 8020368:	4285      	cmp	r5, r0
 802036a:	d0f8      	beq.n	802035e <MobleModelGetOpcodeIdx+0xa>
 802036c:	3301      	adds	r3, #1
 802036e:	e7f3      	b.n	8020358 <MobleModelGetOpcodeIdx+0x4>

08020370 <MobleModelCheckOpcodeValid>:
 8020370:	b530      	push	{r4, r5, lr}
 8020372:	2400      	movs	r4, #0
 8020374:	429c      	cmp	r4, r3
 8020376:	d101      	bne.n	802037c <MobleModelCheckOpcodeValid+0xc>
 8020378:	2000      	movs	r0, #0
 802037a:	bd30      	pop	{r4, r5, pc}
 802037c:	8815      	ldrh	r5, [r2, #0]
 802037e:	4285      	cmp	r5, r0
 8020380:	d102      	bne.n	8020388 <MobleModelCheckOpcodeValid+0x18>
 8020382:	8855      	ldrh	r5, [r2, #2]
 8020384:	428d      	cmp	r5, r1
 8020386:	d002      	beq.n	802038e <MobleModelCheckOpcodeValid+0x1e>
 8020388:	3401      	adds	r4, #1
 802038a:	320c      	adds	r2, #12
 802038c:	e7f2      	b.n	8020374 <MobleModelCheckOpcodeValid+0x4>
 802038e:	2001      	movs	r0, #1
 8020390:	e7f3      	b.n	802037a <MobleModelCheckOpcodeValid+0xa>

08020392 <MobleModelCheckOpcodeValidity>:
 8020392:	b530      	push	{r4, r5, lr}
 8020394:	2300      	movs	r3, #0
 8020396:	3102      	adds	r1, #2
 8020398:	240c      	movs	r4, #12
 802039a:	4293      	cmp	r3, r2
 802039c:	d101      	bne.n	80203a2 <MobleModelCheckOpcodeValidity+0x10>
 802039e:	2000      	movs	r0, #0
 80203a0:	bd30      	pop	{r4, r5, pc}
 80203a2:	fb04 f503 	mul.w	r5, r4, r3
 80203a6:	5b4d      	ldrh	r5, [r1, r5]
 80203a8:	4285      	cmp	r5, r0
 80203aa:	d001      	beq.n	80203b0 <MobleModelCheckOpcodeValidity+0x1e>
 80203ac:	3301      	adds	r3, #1
 80203ae:	e7f4      	b.n	802039a <MobleModelCheckOpcodeValidity+0x8>
 80203b0:	2001      	movs	r0, #1
 80203b2:	e7f5      	b.n	80203a0 <MobleModelCheckOpcodeValidity+0xe>

080203b4 <MobleModelCheckOpCodeReliable>:
 80203b4:	b538      	push	{r3, r4, r5, lr}
 80203b6:	2300      	movs	r3, #0
 80203b8:	4293      	cmp	r3, r2
 80203ba:	d105      	bne.n	80203c8 <MobleModelCheckOpCodeReliable+0x14>
 80203bc:	4b07      	ldr	r3, [pc, #28]	@ (80203dc <MobleModelCheckOpCodeReliable+0x28>)
 80203be:	4a08      	ldr	r2, [pc, #32]	@ (80203e0 <MobleModelCheckOpCodeReliable+0x2c>)
 80203c0:	4808      	ldr	r0, [pc, #32]	@ (80203e4 <MobleModelCheckOpCodeReliable+0x30>)
 80203c2:	2168      	movs	r1, #104	@ 0x68
 80203c4:	f008 f80a 	bl	80283dc <__assert_func>
 80203c8:	460c      	mov	r4, r1
 80203ca:	310c      	adds	r1, #12
 80203cc:	8865      	ldrh	r5, [r4, #2]
 80203ce:	4285      	cmp	r5, r0
 80203d0:	d001      	beq.n	80203d6 <MobleModelCheckOpCodeReliable+0x22>
 80203d2:	3301      	adds	r3, #1
 80203d4:	e7f0      	b.n	80203b8 <MobleModelCheckOpCodeReliable+0x4>
 80203d6:	7920      	ldrb	r0, [r4, #4]
 80203d8:	bd38      	pop	{r3, r4, r5, pc}
 80203da:	bf00      	nop
 80203dc:	080318b3 	.word	0x080318b3
 80203e0:	0802f704 	.word	0x0802f704
 80203e4:	08031566 	.word	0x08031566

080203e8 <MobleModelGetMinParamLength>:
 80203e8:	b538      	push	{r3, r4, r5, lr}
 80203ea:	2300      	movs	r3, #0
 80203ec:	4293      	cmp	r3, r2
 80203ee:	d105      	bne.n	80203fc <MobleModelGetMinParamLength+0x14>
 80203f0:	4b07      	ldr	r3, [pc, #28]	@ (8020410 <MobleModelGetMinParamLength+0x28>)
 80203f2:	4a08      	ldr	r2, [pc, #32]	@ (8020414 <MobleModelGetMinParamLength+0x2c>)
 80203f4:	4808      	ldr	r0, [pc, #32]	@ (8020418 <MobleModelGetMinParamLength+0x30>)
 80203f6:	2184      	movs	r1, #132	@ 0x84
 80203f8:	f007 fff0 	bl	80283dc <__assert_func>
 80203fc:	460c      	mov	r4, r1
 80203fe:	310c      	adds	r1, #12
 8020400:	8865      	ldrh	r5, [r4, #2]
 8020402:	4285      	cmp	r5, r0
 8020404:	d001      	beq.n	802040a <MobleModelGetMinParamLength+0x22>
 8020406:	3301      	adds	r3, #1
 8020408:	e7f0      	b.n	80203ec <MobleModelGetMinParamLength+0x4>
 802040a:	7960      	ldrb	r0, [r4, #5]
 802040c:	bd38      	pop	{r3, r4, r5, pc}
 802040e:	bf00      	nop
 8020410:	080318b3 	.word	0x080318b3
 8020414:	0802f73b 	.word	0x0802f73b
 8020418:	08031566 	.word	0x08031566

0802041c <MobleModelGetMaxParamLength>:
 802041c:	b538      	push	{r3, r4, r5, lr}
 802041e:	2300      	movs	r3, #0
 8020420:	4293      	cmp	r3, r2
 8020422:	d105      	bne.n	8020430 <MobleModelGetMaxParamLength+0x14>
 8020424:	4b07      	ldr	r3, [pc, #28]	@ (8020444 <MobleModelGetMaxParamLength+0x28>)
 8020426:	4a08      	ldr	r2, [pc, #32]	@ (8020448 <MobleModelGetMaxParamLength+0x2c>)
 8020428:	4808      	ldr	r0, [pc, #32]	@ (802044c <MobleModelGetMaxParamLength+0x30>)
 802042a:	2192      	movs	r1, #146	@ 0x92
 802042c:	f007 ffd6 	bl	80283dc <__assert_func>
 8020430:	460c      	mov	r4, r1
 8020432:	310c      	adds	r1, #12
 8020434:	8865      	ldrh	r5, [r4, #2]
 8020436:	4285      	cmp	r5, r0
 8020438:	d001      	beq.n	802043e <MobleModelGetMaxParamLength+0x22>
 802043a:	3301      	adds	r3, #1
 802043c:	e7f0      	b.n	8020420 <MobleModelGetMaxParamLength+0x4>
 802043e:	79a0      	ldrb	r0, [r4, #6]
 8020440:	bd38      	pop	{r3, r4, r5, pc}
 8020442:	bf00      	nop
 8020444:	080318b3 	.word	0x080318b3
 8020448:	0802f757 	.word	0x0802f757
 802044c:	08031566 	.word	0x08031566

08020450 <MobleModelGetResponseOpCode>:
 8020450:	b538      	push	{r3, r4, r5, lr}
 8020452:	2300      	movs	r3, #0
 8020454:	4293      	cmp	r3, r2
 8020456:	d105      	bne.n	8020464 <MobleModelGetResponseOpCode+0x14>
 8020458:	4b07      	ldr	r3, [pc, #28]	@ (8020478 <MobleModelGetResponseOpCode+0x28>)
 802045a:	4a08      	ldr	r2, [pc, #32]	@ (802047c <MobleModelGetResponseOpCode+0x2c>)
 802045c:	4808      	ldr	r0, [pc, #32]	@ (8020480 <MobleModelGetResponseOpCode+0x30>)
 802045e:	21a0      	movs	r1, #160	@ 0xa0
 8020460:	f007 ffbc 	bl	80283dc <__assert_func>
 8020464:	460c      	mov	r4, r1
 8020466:	310c      	adds	r1, #12
 8020468:	8865      	ldrh	r5, [r4, #2]
 802046a:	4285      	cmp	r5, r0
 802046c:	d001      	beq.n	8020472 <MobleModelGetResponseOpCode+0x22>
 802046e:	3301      	adds	r3, #1
 8020470:	e7f0      	b.n	8020454 <MobleModelGetResponseOpCode+0x4>
 8020472:	8920      	ldrh	r0, [r4, #8]
 8020474:	bd38      	pop	{r3, r4, r5, pc}
 8020476:	bf00      	nop
 8020478:	080318b3 	.word	0x080318b3
 802047c:	0802f773 	.word	0x0802f773
 8020480:	08031566 	.word	0x08031566

08020484 <MobleModelGetMinResponseLength>:
 8020484:	b538      	push	{r3, r4, r5, lr}
 8020486:	2300      	movs	r3, #0
 8020488:	4293      	cmp	r3, r2
 802048a:	d105      	bne.n	8020498 <MobleModelGetMinResponseLength+0x14>
 802048c:	4b07      	ldr	r3, [pc, #28]	@ (80204ac <MobleModelGetMinResponseLength+0x28>)
 802048e:	4a08      	ldr	r2, [pc, #32]	@ (80204b0 <MobleModelGetMinResponseLength+0x2c>)
 8020490:	4808      	ldr	r0, [pc, #32]	@ (80204b4 <MobleModelGetMinResponseLength+0x30>)
 8020492:	21af      	movs	r1, #175	@ 0xaf
 8020494:	f007 ffa2 	bl	80283dc <__assert_func>
 8020498:	460c      	mov	r4, r1
 802049a:	310c      	adds	r1, #12
 802049c:	8865      	ldrh	r5, [r4, #2]
 802049e:	4285      	cmp	r5, r0
 80204a0:	d001      	beq.n	80204a6 <MobleModelGetMinResponseLength+0x22>
 80204a2:	3301      	adds	r3, #1
 80204a4:	e7f0      	b.n	8020488 <MobleModelGetMinResponseLength+0x4>
 80204a6:	7aa0      	ldrb	r0, [r4, #10]
 80204a8:	bd38      	pop	{r3, r4, r5, pc}
 80204aa:	bf00      	nop
 80204ac:	080318b3 	.word	0x080318b3
 80204b0:	0802f78f 	.word	0x0802f78f
 80204b4:	08031566 	.word	0x08031566

080204b8 <MobleModelGetMaxResponseLength>:
 80204b8:	b538      	push	{r3, r4, r5, lr}
 80204ba:	2300      	movs	r3, #0
 80204bc:	4293      	cmp	r3, r2
 80204be:	d105      	bne.n	80204cc <MobleModelGetMaxResponseLength+0x14>
 80204c0:	4b07      	ldr	r3, [pc, #28]	@ (80204e0 <MobleModelGetMaxResponseLength+0x28>)
 80204c2:	4a08      	ldr	r2, [pc, #32]	@ (80204e4 <MobleModelGetMaxResponseLength+0x2c>)
 80204c4:	4808      	ldr	r0, [pc, #32]	@ (80204e8 <MobleModelGetMaxResponseLength+0x30>)
 80204c6:	21bd      	movs	r1, #189	@ 0xbd
 80204c8:	f007 ff88 	bl	80283dc <__assert_func>
 80204cc:	460c      	mov	r4, r1
 80204ce:	310c      	adds	r1, #12
 80204d0:	8865      	ldrh	r5, [r4, #2]
 80204d2:	4285      	cmp	r5, r0
 80204d4:	d001      	beq.n	80204da <MobleModelGetMaxResponseLength+0x22>
 80204d6:	3301      	adds	r3, #1
 80204d8:	e7f0      	b.n	80204bc <MobleModelGetMaxResponseLength+0x4>
 80204da:	7ae0      	ldrb	r0, [r4, #11]
 80204dc:	bd38      	pop	{r3, r4, r5, pc}
 80204de:	bf00      	nop
 80204e0:	080318b3 	.word	0x080318b3
 80204e4:	0802f7ae 	.word	0x0802f7ae
 80204e8:	08031566 	.word	0x08031566

080204ec <MobleModelGetOpcodeValue>:
 80204ec:	b510      	push	{r4, lr}
 80204ee:	7803      	ldrb	r3, [r0, #0]
 80204f0:	f003 04c0 	and.w	r4, r3, #192	@ 0xc0
 80204f4:	2cc0      	cmp	r4, #192	@ 0xc0
 80204f6:	d108      	bne.n	802050a <MobleModelGetOpcodeValue+0x1e>
 80204f8:	2902      	cmp	r1, #2
 80204fa:	d914      	bls.n	8020526 <MobleModelGetOpcodeValue+0x3a>
 80204fc:	6800      	ldr	r0, [r0, #0]
 80204fe:	0a00      	lsrs	r0, r0, #8
 8020500:	f7f6 fe74 	bl	80171ec <htobe32>
 8020504:	6010      	str	r0, [r2, #0]
 8020506:	2003      	movs	r0, #3
 8020508:	bd10      	pop	{r4, pc}
 802050a:	061c      	lsls	r4, r3, #24
 802050c:	d507      	bpl.n	802051e <MobleModelGetOpcodeValue+0x32>
 802050e:	2901      	cmp	r1, #1
 8020510:	d909      	bls.n	8020526 <MobleModelGetOpcodeValue+0x3a>
 8020512:	8803      	ldrh	r3, [r0, #0]
 8020514:	ba5b      	rev16	r3, r3
 8020516:	b29b      	uxth	r3, r3
 8020518:	6013      	str	r3, [r2, #0]
 802051a:	2002      	movs	r0, #2
 802051c:	e7f4      	b.n	8020508 <MobleModelGetOpcodeValue+0x1c>
 802051e:	b121      	cbz	r1, 802052a <MobleModelGetOpcodeValue+0x3e>
 8020520:	6013      	str	r3, [r2, #0]
 8020522:	2001      	movs	r0, #1
 8020524:	e7f0      	b.n	8020508 <MobleModelGetOpcodeValue+0x1c>
 8020526:	2000      	movs	r0, #0
 8020528:	e7ee      	b.n	8020508 <MobleModelGetOpcodeValue+0x1c>
 802052a:	4608      	mov	r0, r1
 802052c:	e7ec      	b.n	8020508 <MobleModelGetOpcodeValue+0x1c>
	...

08020530 <BnrgmHealthModelNewPacket>:
 8020530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020534:	6803      	ldr	r3, [r0, #0]
 8020536:	69cd      	ldr	r5, [r1, #28]
 8020538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802053a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 802053e:	b085      	sub	sp, #20
 8020540:	4681      	mov	r9, r0
 8020542:	460f      	mov	r7, r1
 8020544:	b923      	cbnz	r3, 8020550 <BnrgmHealthModelNewPacket+0x20>
 8020546:	2402      	movs	r4, #2
 8020548:	4620      	mov	r0, r4
 802054a:	b005      	add	sp, #20
 802054c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020550:	f101 0a20 	add.w	sl, r1, #32
 8020554:	aa03      	add	r2, sp, #12
 8020556:	4629      	mov	r1, r5
 8020558:	4650      	mov	r0, sl
 802055a:	f7ff ffc7 	bl	80204ec <MobleModelGetOpcodeValue>
 802055e:	4680      	mov	r8, r0
 8020560:	2800      	cmp	r0, #0
 8020562:	d0f0      	beq.n	8020546 <BnrgmHealthModelNewPacket+0x16>
 8020564:	4913      	ldr	r1, [pc, #76]	@ (80205b4 <BnrgmHealthModelNewPacket+0x84>)
 8020566:	9803      	ldr	r0, [sp, #12]
 8020568:	220b      	movs	r2, #11
 802056a:	f7ff fef3 	bl	8020354 <MobleModelGetOpcodeIdx>
 802056e:	4604      	mov	r4, r0
 8020570:	2800      	cmp	r0, #0
 8020572:	d0e8      	beq.n	8020546 <BnrgmHealthModelNewPacket+0x16>
 8020574:	88c3      	ldrh	r3, [r0, #6]
 8020576:	eba5 0508 	sub.w	r5, r5, r8
 802057a:	42ab      	cmp	r3, r5
 802057c:	dce3      	bgt.n	8020546 <BnrgmHealthModelNewPacket+0x16>
 802057e:	8903      	ldrh	r3, [r0, #8]
 8020580:	42ab      	cmp	r3, r5
 8020582:	dbe0      	blt.n	8020546 <BnrgmHealthModelNewPacket+0x16>
 8020584:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 8020588:	f1bb 0f00 	cmp.w	fp, #0
 802058c:	d0db      	beq.n	8020546 <BnrgmHealthModelNewPacket+0x16>
 802058e:	20a7      	movs	r0, #167	@ 0xa7
 8020590:	f7fa f96e 	bl	801a870 <MobleMemAlloc>
 8020594:	4606      	mov	r6, r0
 8020596:	2800      	cmp	r0, #0
 8020598:	d0d5      	beq.n	8020546 <BnrgmHealthModelNewPacket+0x16>
 802059a:	e9cd 5000 	strd	r5, r0, [sp]
 802059e:	4622      	mov	r2, r4
 80205a0:	eb0a 0308 	add.w	r3, sl, r8
 80205a4:	4639      	mov	r1, r7
 80205a6:	4648      	mov	r0, r9
 80205a8:	47d8      	blx	fp
 80205aa:	4604      	mov	r4, r0
 80205ac:	4630      	mov	r0, r6
 80205ae:	f7fa f9e9 	bl	801a984 <MobleMemFree>
 80205b2:	e7c9      	b.n	8020548 <BnrgmHealthModelNewPacket+0x18>
 80205b4:	0802f7d0 	.word	0x0802f7d0

080205b8 <MobleConfigModelNewPacket>:
 80205b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205bc:	69ce      	ldr	r6, [r1, #28]
 80205be:	b085      	sub	sp, #20
 80205c0:	f101 0a20 	add.w	sl, r1, #32
 80205c4:	4681      	mov	r9, r0
 80205c6:	4688      	mov	r8, r1
 80205c8:	aa03      	add	r2, sp, #12
 80205ca:	4631      	mov	r1, r6
 80205cc:	4650      	mov	r0, sl
 80205ce:	f7ff ff8d 	bl	80204ec <MobleModelGetOpcodeValue>
 80205d2:	4683      	mov	fp, r0
 80205d4:	b920      	cbnz	r0, 80205e0 <MobleConfigModelNewPacket+0x28>
 80205d6:	2402      	movs	r4, #2
 80205d8:	4620      	mov	r0, r4
 80205da:	b005      	add	sp, #20
 80205dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205e0:	4916      	ldr	r1, [pc, #88]	@ (802063c <MobleConfigModelNewPacket+0x84>)
 80205e2:	9803      	ldr	r0, [sp, #12]
 80205e4:	222f      	movs	r2, #47	@ 0x2f
 80205e6:	f7ff feb5 	bl	8020354 <MobleModelGetOpcodeIdx>
 80205ea:	4605      	mov	r5, r0
 80205ec:	2800      	cmp	r0, #0
 80205ee:	d0f2      	beq.n	80205d6 <MobleConfigModelNewPacket+0x1e>
 80205f0:	88c3      	ldrh	r3, [r0, #6]
 80205f2:	eba6 060b 	sub.w	r6, r6, fp
 80205f6:	42b3      	cmp	r3, r6
 80205f8:	dced      	bgt.n	80205d6 <MobleConfigModelNewPacket+0x1e>
 80205fa:	8903      	ldrh	r3, [r0, #8]
 80205fc:	42b3      	cmp	r3, r6
 80205fe:	dbea      	blt.n	80205d6 <MobleConfigModelNewPacket+0x1e>
 8020600:	68c4      	ldr	r4, [r0, #12]
 8020602:	b93c      	cbnz	r4, 8020614 <MobleConfigModelNewPacket+0x5c>
 8020604:	4b0e      	ldr	r3, [pc, #56]	@ (8020640 <MobleConfigModelNewPacket+0x88>)
 8020606:	881a      	ldrh	r2, [r3, #0]
 8020608:	b2e3      	uxtb	r3, r4
 802060a:	4293      	cmp	r3, r2
 802060c:	f104 0401 	add.w	r4, r4, #1
 8020610:	d3fa      	bcc.n	8020608 <MobleConfigModelNewPacket+0x50>
 8020612:	e7e0      	b.n	80205d6 <MobleConfigModelNewPacket+0x1e>
 8020614:	20a7      	movs	r0, #167	@ 0xa7
 8020616:	f7fa f92b 	bl	801a870 <MobleMemAlloc>
 802061a:	4607      	mov	r7, r0
 802061c:	2800      	cmp	r0, #0
 802061e:	d0da      	beq.n	80205d6 <MobleConfigModelNewPacket+0x1e>
 8020620:	e9cd 6000 	strd	r6, r0, [sp]
 8020624:	eb0a 030b 	add.w	r3, sl, fp
 8020628:	462a      	mov	r2, r5
 802062a:	4641      	mov	r1, r8
 802062c:	4648      	mov	r0, r9
 802062e:	47a0      	blx	r4
 8020630:	4604      	mov	r4, r0
 8020632:	4638      	mov	r0, r7
 8020634:	f7fa f9a6 	bl	801a984 <MobleMemFree>
 8020638:	e7ce      	b.n	80205d8 <MobleConfigModelNewPacket+0x20>
 802063a:	bf00      	nop
 802063c:	0802f880 	.word	0x0802f880
 8020640:	20000008 	.word	0x20000008

08020644 <Moble_SIGModel_NewPacket>:
 8020644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020648:	ed2d 8b02 	vpush	{d8}
 802064c:	b089      	sub	sp, #36	@ 0x24
 802064e:	200c      	movs	r0, #12
 8020650:	9305      	str	r3, [sp, #20]
 8020652:	69cb      	ldr	r3, [r1, #28]
 8020654:	9303      	str	r3, [sp, #12]
 8020656:	f101 0320 	add.w	r3, r1, #32
 802065a:	ee08 2a10 	vmov	s16, r2
 802065e:	460d      	mov	r5, r1
 8020660:	9304      	str	r3, [sp, #16]
 8020662:	f7fa f905 	bl	801a870 <MobleMemAlloc>
 8020666:	aa07      	add	r2, sp, #28
 8020668:	4604      	mov	r4, r0
 802066a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 802066e:	f7ff ff3d 	bl	80204ec <MobleModelGetOpcodeValue>
 8020672:	4607      	mov	r7, r0
 8020674:	b930      	cbnz	r0, 8020684 <Moble_SIGModel_NewPacket+0x40>
 8020676:	2502      	movs	r5, #2
 8020678:	4628      	mov	r0, r5
 802067a:	b009      	add	sp, #36	@ 0x24
 802067c:	ecbd 8b02 	vpop	{d8}
 8020680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020684:	4e2d      	ldr	r6, [pc, #180]	@ (802073c <Moble_SIGModel_NewPacket+0xf8>)
 8020686:	f8d6 3a24 	ldr.w	r3, [r6, #2596]	@ 0xa24
 802068a:	f04f 0800 	mov.w	r8, #0
 802068e:	f8d6 2a34 	ldr.w	r2, [r6, #2612]	@ 0xa34
 8020692:	f8c6 3a30 	str.w	r3, [r6, #2608]	@ 0xa30
 8020696:	4542      	cmp	r2, r8
 8020698:	d804      	bhi.n	80206a4 <Moble_SIGModel_NewPacket+0x60>
 802069a:	2502      	movs	r5, #2
 802069c:	4620      	mov	r0, r4
 802069e:	f7fa f971 	bl	801a984 <MobleMemFree>
 80206a2:	e7e9      	b.n	8020678 <Moble_SIGModel_NewPacket+0x34>
 80206a4:	4926      	ldr	r1, [pc, #152]	@ (8020740 <Moble_SIGModel_NewPacket+0xfc>)
 80206a6:	681b      	ldr	r3, [r3, #0]
 80206a8:	1d08      	adds	r0, r1, #4
 80206aa:	4798      	blx	r3
 80206ac:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80206b0:	f8d6 aa2c 	ldr.w	sl, [r6, #2604]	@ 0xa2c
 80206b4:	f8b6 ba28 	ldrh.w	fp, [r6, #2600]	@ 0xa28
 80206b8:	ee18 0a10 	vmov	r0, s16
 80206bc:	465b      	mov	r3, fp
 80206be:	4652      	mov	r2, sl
 80206c0:	4649      	mov	r1, r9
 80206c2:	f7ff fe55 	bl	8020370 <MobleModelCheckOpcodeValid>
 80206c6:	2801      	cmp	r0, #1
 80206c8:	d005      	beq.n	80206d6 <Moble_SIGModel_NewPacket+0x92>
 80206ca:	f8d6 3a30 	ldr.w	r3, [r6, #2608]	@ 0xa30
 80206ce:	f108 0801 	add.w	r8, r8, #1
 80206d2:	330c      	adds	r3, #12
 80206d4:	e7db      	b.n	802068e <Moble_SIGModel_NewPacket+0x4a>
 80206d6:	9b03      	ldr	r3, [sp, #12]
 80206d8:	465a      	mov	r2, fp
 80206da:	4651      	mov	r1, sl
 80206dc:	4648      	mov	r0, r9
 80206de:	eba3 0807 	sub.w	r8, r3, r7
 80206e2:	f7ff fe81 	bl	80203e8 <MobleModelGetMinParamLength>
 80206e6:	4540      	cmp	r0, r8
 80206e8:	d8c5      	bhi.n	8020676 <Moble_SIGModel_NewPacket+0x32>
 80206ea:	465a      	mov	r2, fp
 80206ec:	4651      	mov	r1, sl
 80206ee:	4648      	mov	r0, r9
 80206f0:	f7ff fe94 	bl	802041c <MobleModelGetMaxParamLength>
 80206f4:	4540      	cmp	r0, r8
 80206f6:	d3be      	bcc.n	8020676 <Moble_SIGModel_NewPacket+0x32>
 80206f8:	9b04      	ldr	r3, [sp, #16]
 80206fa:	465a      	mov	r2, fp
 80206fc:	443b      	add	r3, r7
 80206fe:	4651      	mov	r1, sl
 8020700:	4648      	mov	r0, r9
 8020702:	461f      	mov	r7, r3
 8020704:	f7ff fe56 	bl	80203b4 <MobleModelCheckOpCodeReliable>
 8020708:	9b05      	ldr	r3, [sp, #20]
 802070a:	7023      	strb	r3, [r4, #0]
 802070c:	892b      	ldrh	r3, [r5, #8]
 802070e:	80a3      	strh	r3, [r4, #4]
 8020710:	896b      	ldrh	r3, [r5, #10]
 8020712:	80e3      	strh	r3, [r4, #6]
 8020714:	78eb      	ldrb	r3, [r5, #3]
 8020716:	7223      	strb	r3, [r4, #8]
 8020718:	7b2b      	ldrb	r3, [r5, #12]
 802071a:	72a3      	strb	r3, [r4, #10]
 802071c:	7c2b      	ldrb	r3, [r5, #16]
 802071e:	72e3      	strb	r3, [r4, #11]
 8020720:	7dab      	ldrb	r3, [r5, #22]
 8020722:	7263      	strb	r3, [r4, #9]
 8020724:	f8d6 3a30 	ldr.w	r3, [r6, #2608]	@ 0xa30
 8020728:	9000      	str	r0, [sp, #0]
 802072a:	689d      	ldr	r5, [r3, #8]
 802072c:	463a      	mov	r2, r7
 802072e:	4643      	mov	r3, r8
 8020730:	fa1f f189 	uxth.w	r1, r9
 8020734:	4620      	mov	r0, r4
 8020736:	47a8      	blx	r5
 8020738:	4605      	mov	r5, r0
 802073a:	e7af      	b.n	802069c <Moble_SIGModel_NewPacket+0x58>
 802073c:	20002504 	.word	0x20002504
 8020740:	20002f2c 	.word	0x20002f2c

08020744 <BnrgmConfigModelSetFeatures>:
 8020744:	b570      	push	{r4, r5, r6, lr}
 8020746:	4604      	mov	r4, r0
 8020748:	f004 0309 	and.w	r3, r4, #9
 802074c:	2b09      	cmp	r3, #9
 802074e:	4608      	mov	r0, r1
 8020750:	4616      	mov	r6, r2
 8020752:	d058      	beq.n	8020806 <BnrgmConfigModelSetFeatures+0xc2>
 8020754:	f004 030a 	and.w	r3, r4, #10
 8020758:	2b0a      	cmp	r3, #10
 802075a:	d054      	beq.n	8020806 <BnrgmConfigModelSetFeatures+0xc2>
 802075c:	f004 030c 	and.w	r3, r4, #12
 8020760:	2b0c      	cmp	r3, #12
 8020762:	d050      	beq.n	8020806 <BnrgmConfigModelSetFeatures+0xc2>
 8020764:	f014 0f01 	tst.w	r4, #1
 8020768:	4d28      	ldr	r5, [pc, #160]	@ (802080c <BnrgmConfigModelSetFeatures+0xc8>)
 802076a:	d032      	beq.n	80207d2 <BnrgmConfigModelSetFeatures+0x8e>
 802076c:	f895 30bd 	ldrb.w	r3, [r5, #189]	@ 0xbd
 8020770:	2b01      	cmp	r3, #1
 8020772:	d904      	bls.n	802077e <BnrgmConfigModelSetFeatures+0x3a>
 8020774:	2301      	movs	r3, #1
 8020776:	f885 30bd 	strb.w	r3, [r5, #189]	@ 0xbd
 802077a:	f885 30ba 	strb.w	r3, [r5, #186]	@ 0xba
 802077e:	07a2      	lsls	r2, r4, #30
 8020780:	d52b      	bpl.n	80207da <BnrgmConfigModelSetFeatures+0x96>
 8020782:	f895 30bc 	ldrb.w	r3, [r5, #188]	@ 0xbc
 8020786:	2b01      	cmp	r3, #1
 8020788:	d904      	bls.n	8020794 <BnrgmConfigModelSetFeatures+0x50>
 802078a:	2301      	movs	r3, #1
 802078c:	f8a5 30ba 	strh.w	r3, [r5, #186]	@ 0xba
 8020790:	f885 30bc 	strb.w	r3, [r5, #188]	@ 0xbc
 8020794:	0763      	lsls	r3, r4, #29
 8020796:	d526      	bpl.n	80207e6 <BnrgmConfigModelSetFeatures+0xa2>
 8020798:	f895 30be 	ldrb.w	r3, [r5, #190]	@ 0xbe
 802079c:	2b01      	cmp	r3, #1
 802079e:	d906      	bls.n	80207ae <BnrgmConfigModelSetFeatures+0x6a>
 80207a0:	2301      	movs	r3, #1
 80207a2:	f885 30be 	strb.w	r3, [r5, #190]	@ 0xbe
 80207a6:	f885 30ba 	strb.w	r3, [r5, #186]	@ 0xba
 80207aa:	f7fd fc3d 	bl	801e028 <BnrgmFrndMgmtFnInit>
 80207ae:	f014 0008 	ands.w	r0, r4, #8
 80207b2:	d01c      	beq.n	80207ee <BnrgmConfigModelSetFeatures+0xaa>
 80207b4:	f895 30bf 	ldrb.w	r3, [r5, #191]	@ 0xbf
 80207b8:	2b01      	cmp	r3, #1
 80207ba:	f04f 0400 	mov.w	r4, #0
 80207be:	d906      	bls.n	80207ce <BnrgmConfigModelSetFeatures+0x8a>
 80207c0:	4630      	mov	r0, r6
 80207c2:	f885 40bf 	strb.w	r4, [r5, #191]	@ 0xbf
 80207c6:	f885 40ba 	strb.w	r4, [r5, #186]	@ 0xba
 80207ca:	f7f2 fda7 	bl	801331c <BnrgmFrndMgmtLpnInit>
 80207ce:	4620      	mov	r0, r4
 80207d0:	e010      	b.n	80207f4 <BnrgmConfigModelSetFeatures+0xb0>
 80207d2:	2302      	movs	r3, #2
 80207d4:	f885 30bd 	strb.w	r3, [r5, #189]	@ 0xbd
 80207d8:	e7d1      	b.n	802077e <BnrgmConfigModelSetFeatures+0x3a>
 80207da:	2302      	movs	r3, #2
 80207dc:	f885 30bc 	strb.w	r3, [r5, #188]	@ 0xbc
 80207e0:	f885 30bb 	strb.w	r3, [r5, #187]	@ 0xbb
 80207e4:	e7d6      	b.n	8020794 <BnrgmConfigModelSetFeatures+0x50>
 80207e6:	2302      	movs	r3, #2
 80207e8:	f885 30be 	strb.w	r3, [r5, #190]	@ 0xbe
 80207ec:	e7df      	b.n	80207ae <BnrgmConfigModelSetFeatures+0x6a>
 80207ee:	2302      	movs	r3, #2
 80207f0:	f885 30bf 	strb.w	r3, [r5, #191]	@ 0xbf
 80207f4:	4b06      	ldr	r3, [pc, #24]	@ (8020810 <BnrgmConfigModelSetFeatures+0xcc>)
 80207f6:	8819      	ldrh	r1, [r3, #0]
 80207f8:	2300      	movs	r3, #0
 80207fa:	b2da      	uxtb	r2, r3
 80207fc:	428a      	cmp	r2, r1
 80207fe:	f103 0301 	add.w	r3, r3, #1
 8020802:	d3fa      	bcc.n	80207fa <BnrgmConfigModelSetFeatures+0xb6>
 8020804:	bd70      	pop	{r4, r5, r6, pc}
 8020806:	2003      	movs	r0, #3
 8020808:	e7f4      	b.n	80207f4 <BnrgmConfigModelSetFeatures+0xb0>
 802080a:	bf00      	nop
 802080c:	20000314 	.word	0x20000314
 8020810:	20000008 	.word	0x20000008

08020814 <MobleLibrarySetFeatures>:
 8020814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020816:	4b10      	ldr	r3, [pc, #64]	@ (8020858 <MobleLibrarySetFeatures+0x44>)
 8020818:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	@ 0x6f0
 802081c:	b087      	sub	sp, #28
 802081e:	4606      	mov	r6, r0
 8020820:	b1c3      	cbz	r3, 8020854 <MobleLibrarySetFeatures+0x40>
 8020822:	4d0e      	ldr	r5, [pc, #56]	@ (802085c <MobleLibrarySetFeatures+0x48>)
 8020824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020826:	ac01      	add	r4, sp, #4
 8020828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802082a:	682b      	ldr	r3, [r5, #0]
 802082c:	6023      	str	r3, [r4, #0]
 802082e:	2701      	movs	r7, #1
 8020830:	0733      	lsls	r3, r6, #28
 8020832:	f88d 7000 	strb.w	r7, [sp]
 8020836:	d509      	bpl.n	802084c <MobleLibrarySetFeatures+0x38>
 8020838:	2000      	movs	r0, #0
 802083a:	f7fe fb63 	bl	801ef04 <BnrgmTransmitSetAutoScanState>
 802083e:	aa01      	add	r2, sp, #4
 8020840:	4669      	mov	r1, sp
 8020842:	4630      	mov	r0, r6
 8020844:	f7ff ff7e 	bl	8020744 <BnrgmConfigModelSetFeatures>
 8020848:	b007      	add	sp, #28
 802084a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802084c:	4b04      	ldr	r3, [pc, #16]	@ (8020860 <MobleLibrarySetFeatures+0x4c>)
 802084e:	f883 716a 	strb.w	r7, [r3, #362]	@ 0x16a
 8020852:	e7f4      	b.n	802083e <MobleLibrarySetFeatures+0x2a>
 8020854:	2002      	movs	r0, #2
 8020856:	e7f7      	b.n	8020848 <MobleLibrarySetFeatures+0x34>
 8020858:	20002504 	.word	0x20002504
 802085c:	0802fbcc 	.word	0x0802fbcc
 8020860:	20003f54 	.word	0x20003f54

08020864 <Test_UpperTester_Set12>:
 8020864:	7808      	ldrb	r0, [r1, #0]
 8020866:	3830      	subs	r0, #48	@ 0x30
 8020868:	b280      	uxth	r0, r0
 802086a:	f7ff bfd3 	b.w	8020814 <MobleLibrarySetFeatures>
	...

08020870 <MobleConfigModelInit>:
 8020870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020872:	4d1d      	ldr	r5, [pc, #116]	@ (80208e8 <MobleConfigModelInit+0x78>)
 8020874:	4606      	mov	r6, r0
 8020876:	4608      	mov	r0, r1
 8020878:	4611      	mov	r1, r2
 802087a:	461a      	mov	r2, r3
 802087c:	2301      	movs	r3, #1
 802087e:	f885 30ba 	strb.w	r3, [r5, #186]	@ 0xba
 8020882:	2308      	movs	r3, #8
 8020884:	f885 30b5 	strb.w	r3, [r5, #181]	@ 0xb5
 8020888:	4b18      	ldr	r3, [pc, #96]	@ (80208ec <MobleConfigModelInit+0x7c>)
 802088a:	2400      	movs	r4, #0
 802088c:	881f      	ldrh	r7, [r3, #0]
 802088e:	46a6      	mov	lr, r4
 8020890:	b2e3      	uxtb	r3, r4
 8020892:	42bb      	cmp	r3, r7
 8020894:	f104 0c01 	add.w	ip, r4, #1
 8020898:	d321      	bcc.n	80208de <MobleConfigModelInit+0x6e>
 802089a:	2302      	movs	r3, #2
 802089c:	f885 30b6 	strb.w	r3, [r5, #182]	@ 0xb6
 80208a0:	2301      	movs	r3, #1
 80208a2:	f885 30b8 	strb.w	r3, [r5, #184]	@ 0xb8
 80208a6:	f04f 3302 	mov.w	r3, #33686018	@ 0x2020202
 80208aa:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80208ae:	f7ff ff49 	bl	8020744 <BnrgmConfigModelSetFeatures>
 80208b2:	b968      	cbnz	r0, 80208d0 <MobleConfigModelInit+0x60>
 80208b4:	490e      	ldr	r1, [pc, #56]	@ (80208f0 <MobleConfigModelInit+0x80>)
 80208b6:	480f      	ldr	r0, [pc, #60]	@ (80208f4 <MobleConfigModelInit+0x84>)
 80208b8:	4632      	mov	r2, r6
 80208ba:	f7f6 fe3d 	bl	8017538 <MoblePalTimerCreate>
 80208be:	4632      	mov	r2, r6
 80208c0:	490d      	ldr	r1, [pc, #52]	@ (80208f8 <MobleConfigModelInit+0x88>)
 80208c2:	480e      	ldr	r0, [pc, #56]	@ (80208fc <MobleConfigModelInit+0x8c>)
 80208c4:	f7f6 fe38 	bl	8017538 <MoblePalTimerCreate>
 80208c8:	4b0d      	ldr	r3, [pc, #52]	@ (8020900 <MobleConfigModelInit+0x90>)
 80208ca:	4a0e      	ldr	r2, [pc, #56]	@ (8020904 <MobleConfigModelInit+0x94>)
 80208cc:	f8c3 295c 	str.w	r2, [r3, #2396]	@ 0x95c
 80208d0:	4b0d      	ldr	r3, [pc, #52]	@ (8020908 <MobleConfigModelInit+0x98>)
 80208d2:	2200      	movs	r2, #0
 80208d4:	f883 2a38 	strb.w	r2, [r3, #2616]	@ 0xa38
 80208d8:	f883 2a39 	strb.w	r2, [r3, #2617]	@ 0xa39
 80208dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80208de:	442b      	add	r3, r5
 80208e0:	4664      	mov	r4, ip
 80208e2:	f883 e0c0 	strb.w	lr, [r3, #192]	@ 0xc0
 80208e6:	e7d3      	b.n	8020890 <MobleConfigModelInit+0x20>
 80208e8:	20000314 	.word	0x20000314
 80208ec:	20000008 	.word	0x20000008
 80208f0:	08025659 	.word	0x08025659
 80208f4:	200003f0 	.word	0x200003f0
 80208f8:	08017675 	.word	0x08017675
 80208fc:	20000400 	.word	0x20000400
 8020900:	2000140c 	.word	0x2000140c
 8020904:	08017439 	.word	0x08017439
 8020908:	20002504 	.word	0x20002504

0802090c <MobleConfigModelReset>:
 802090c:	b538      	push	{r3, r4, r5, lr}
 802090e:	4a1b      	ldr	r2, [pc, #108]	@ (802097c <MobleConfigModelReset+0x70>)
 8020910:	f892 30b4 	ldrb.w	r3, [r2, #180]	@ 0xb4
 8020914:	2b01      	cmp	r3, #1
 8020916:	d12f      	bne.n	8020978 <MobleConfigModelReset+0x6c>
 8020918:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
 802091c:	2308      	movs	r3, #8
 802091e:	f882 30b5 	strb.w	r3, [r2, #181]	@ 0xb5
 8020922:	4b17      	ldr	r3, [pc, #92]	@ (8020980 <MobleConfigModelReset+0x74>)
 8020924:	8818      	ldrh	r0, [r3, #0]
 8020926:	2300      	movs	r3, #0
 8020928:	461d      	mov	r5, r3
 802092a:	b2d9      	uxtb	r1, r3
 802092c:	4281      	cmp	r1, r0
 802092e:	f103 0401 	add.w	r4, r3, #1
 8020932:	d31c      	bcc.n	802096e <MobleConfigModelReset+0x62>
 8020934:	2302      	movs	r3, #2
 8020936:	2100      	movs	r1, #0
 8020938:	f882 30b6 	strb.w	r3, [r2, #182]	@ 0xb6
 802093c:	2301      	movs	r3, #1
 802093e:	f882 30b8 	strb.w	r3, [r2, #184]	@ 0xb8
 8020942:	e9c2 1134 	strd	r1, r1, [r2, #208]	@ 0xd0
 8020946:	f8d2 00dc 	ldr.w	r0, [r2, #220]	@ 0xdc
 802094a:	f882 10c8 	strb.w	r1, [r2, #200]	@ 0xc8
 802094e:	f8a2 10ca 	strh.w	r1, [r2, #202]	@ 0xca
 8020952:	f8a2 10d8 	strh.w	r1, [r2, #216]	@ 0xd8
 8020956:	f7f6 fe81 	bl	801765c <MoblePalTimerStop>
 802095a:	e9c2 1138 	strd	r1, r1, [r2, #224]	@ 0xe0
 802095e:	f8d2 00ec 	ldr.w	r0, [r2, #236]	@ 0xec
 8020962:	f8c2 10e8 	str.w	r1, [r2, #232]	@ 0xe8
 8020966:	f7f6 fe79 	bl	801765c <MoblePalTimerStop>
 802096a:	4608      	mov	r0, r1
 802096c:	bd38      	pop	{r3, r4, r5, pc}
 802096e:	4411      	add	r1, r2
 8020970:	4623      	mov	r3, r4
 8020972:	f881 50c0 	strb.w	r5, [r1, #192]	@ 0xc0
 8020976:	e7d8      	b.n	802092a <MobleConfigModelReset+0x1e>
 8020978:	2001      	movs	r0, #1
 802097a:	e7f7      	b.n	802096c <MobleConfigModelReset+0x60>
 802097c:	20000314 	.word	0x20000314
 8020980:	20000008 	.word	0x20000008

08020984 <MobleStackConfigInvalidate>:
 8020984:	b538      	push	{r3, r4, r5, lr}
 8020986:	4d14      	ldr	r5, [pc, #80]	@ (80209d8 <MobleStackConfigInvalidate+0x54>)
 8020988:	f8d5 4680 	ldr.w	r4, [r5, #1664]	@ 0x680
 802098c:	7823      	ldrb	r3, [r4, #0]
 802098e:	b303      	cbz	r3, 80209d2 <MobleStackConfigInvalidate+0x4e>
 8020990:	f7ff ffbc 	bl	802090c <MobleConfigModelReset>
 8020994:	4620      	mov	r0, r4
 8020996:	f7fd ff6d 	bl	801e874 <MobleConfigNetworkInvalidate>
 802099a:	2801      	cmp	r0, #1
 802099c:	4604      	mov	r4, r0
 802099e:	d816      	bhi.n	80209ce <MobleStackConfigInvalidate+0x4a>
 80209a0:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 80209a4:	781b      	ldrb	r3, [r3, #0]
 80209a6:	f885 3934 	strb.w	r3, [r5, #2356]	@ 0x934
 80209aa:	f7f8 f939 	bl	8018c20 <MoblePalCryptoForgetAllKeys>
 80209ae:	2801      	cmp	r0, #1
 80209b0:	4604      	mov	r4, r0
 80209b2:	d80c      	bhi.n	80209ce <MobleStackConfigInvalidate+0x4a>
 80209b4:	f7f8 f9ae 	bl	8018d14 <MoblePalCryptoModelsDeInit>
 80209b8:	f505 60d0 	add.w	r0, r5, #1664	@ 0x680
 80209bc:	f7fd fe2f 	bl	801e61e <MobleProvisionUpdateRole>
 80209c0:	f895 3854 	ldrb.w	r3, [r5, #2132]	@ 0x854
 80209c4:	2b01      	cmp	r3, #1
 80209c6:	d102      	bne.n	80209ce <MobleStackConfigInvalidate+0x4a>
 80209c8:	4a04      	ldr	r2, [pc, #16]	@ (80209dc <MobleStackConfigInvalidate+0x58>)
 80209ca:	f882 316a 	strb.w	r3, [r2, #362]	@ 0x16a
 80209ce:	4620      	mov	r0, r4
 80209d0:	bd38      	pop	{r3, r4, r5, pc}
 80209d2:	2401      	movs	r4, #1
 80209d4:	e7fb      	b.n	80209ce <MobleStackConfigInvalidate+0x4a>
 80209d6:	bf00      	nop
 80209d8:	2000140c 	.word	0x2000140c
 80209dc:	20003f54 	.word	0x20003f54

080209e0 <BLEMesh_Unprovision>:
 80209e0:	4b07      	ldr	r3, [pc, #28]	@ (8020a00 <BLEMesh_Unprovision+0x20>)
 80209e2:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	@ 0x6f0
 80209e6:	b510      	push	{r4, lr}
 80209e8:	b13b      	cbz	r3, 80209fa <BLEMesh_Unprovision+0x1a>
 80209ea:	f7ff ffcb 	bl	8020984 <MobleStackConfigInvalidate>
 80209ee:	4604      	mov	r4, r0
 80209f0:	b908      	cbnz	r0, 80209f6 <BLEMesh_Unprovision+0x16>
 80209f2:	f7fe fac9 	bl	801ef88 <MoblePalBluetoothGracefulReset>
 80209f6:	4620      	mov	r0, r4
 80209f8:	bd10      	pop	{r4, pc}
 80209fa:	2402      	movs	r4, #2
 80209fc:	e7fb      	b.n	80209f6 <BLEMesh_Unprovision+0x16>
 80209fe:	bf00      	nop
 8020a00:	20002504 	.word	0x20002504

08020a04 <MobleConfigModelCreate>:
 8020a04:	4b04      	ldr	r3, [pc, #16]	@ (8020a18 <MobleConfigModelCreate+0x14>)
 8020a06:	f893 00b4 	ldrb.w	r0, [r3, #180]	@ 0xb4
 8020a0a:	b918      	cbnz	r0, 8020a14 <MobleConfigModelCreate+0x10>
 8020a0c:	2201      	movs	r2, #1
 8020a0e:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
 8020a12:	4770      	bx	lr
 8020a14:	2002      	movs	r0, #2
 8020a16:	4770      	bx	lr
 8020a18:	20000314 	.word	0x20000314

08020a1c <MobleConfigModelGetConfigBeacon>:
 8020a1c:	4b03      	ldr	r3, [pc, #12]	@ (8020a2c <MobleConfigModelGetConfigBeacon+0x10>)
 8020a1e:	f893 00ba 	ldrb.w	r0, [r3, #186]	@ 0xba
 8020a22:	1e43      	subs	r3, r0, #1
 8020a24:	4258      	negs	r0, r3
 8020a26:	4158      	adcs	r0, r3
 8020a28:	4770      	bx	lr
 8020a2a:	bf00      	nop
 8020a2c:	20000314 	.word	0x20000314

08020a30 <MobleStackBeaconGenerator>:
 8020a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a32:	4e39      	ldr	r6, [pc, #228]	@ (8020b18 <MobleStackBeaconGenerator+0xe8>)
 8020a34:	4c39      	ldr	r4, [pc, #228]	@ (8020b1c <MobleStackBeaconGenerator+0xec>)
 8020a36:	460a      	mov	r2, r1
 8020a38:	f894 361c 	ldrb.w	r3, [r4, #1564]	@ 0x61c
 8020a3c:	f896 1a3a 	ldrb.w	r1, [r6, #2618]	@ 0xa3a
 8020a40:	428b      	cmp	r3, r1
 8020a42:	bf8b      	itete	hi
 8020a44:	1c4b      	addhi	r3, r1, #1
 8020a46:	2300      	movls	r3, #0
 8020a48:	b2db      	uxtbhi	r3, r3
 8020a4a:	4619      	movls	r1, r3
 8020a4c:	2a00      	cmp	r2, #0
 8020a4e:	b08d      	sub	sp, #52	@ 0x34
 8020a50:	4605      	mov	r5, r0
 8020a52:	f886 3a3a 	strb.w	r3, [r6, #2618]	@ 0xa3a
 8020a56:	db2c      	blt.n	8020ab2 <MobleStackBeaconGenerator+0x82>
 8020a58:	f8d4 3680 	ldr.w	r3, [r4, #1664]	@ 0x680
 8020a5c:	781b      	ldrb	r3, [r3, #0]
 8020a5e:	2b01      	cmp	r3, #1
 8020a60:	d133      	bne.n	8020aca <MobleStackBeaconGenerator+0x9a>
 8020a62:	f7ff ffdb 	bl	8020a1c <MobleConfigModelGetConfigBeacon>
 8020a66:	b910      	cbnz	r0, 8020a6e <MobleStackBeaconGenerator+0x3e>
 8020a68:	f04f 32ff 	mov.w	r2, #4294967295
 8020a6c:	e021      	b.n	8020ab2 <MobleStackBeaconGenerator+0x82>
 8020a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8020b20 <MobleStackBeaconGenerator+0xf0>)
 8020a70:	9208      	str	r2, [sp, #32]
 8020a72:	440b      	add	r3, r1
 8020a74:	f8d4 7658 	ldr.w	r7, [r4, #1624]	@ 0x658
 8020a78:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8020a7c:	1e9a      	subs	r2, r3, #2
 8020a7e:	4256      	negs	r6, r2
 8020a80:	4156      	adcs	r6, r2
 8020a82:	f894 265c 	ldrb.w	r2, [r4, #1628]	@ 0x65c
 8020a86:	2a01      	cmp	r2, #1
 8020a88:	bf08      	it	eq
 8020a8a:	f046 0602 	orreq.w	r6, r6, #2
 8020a8e:	2b02      	cmp	r3, #2
 8020a90:	d112      	bne.n	8020ab8 <MobleStackBeaconGenerator+0x88>
 8020a92:	2001      	movs	r0, #1
 8020a94:	f7f8 f97e 	bl	8018d94 <MoblePalCryptoGetNetworkSecurityKeys>
 8020a98:	2301      	movs	r3, #1
 8020a9a:	e9cd 7300 	strd	r7, r3, [sp]
 8020a9e:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8020aa2:	4632      	mov	r2, r6
 8020aa4:	a908      	add	r1, sp, #32
 8020aa6:	4628      	mov	r0, r5
 8020aa8:	f7fc faac 	bl	801d004 <MobleBeaconSetSecure>
 8020aac:	2801      	cmp	r0, #1
 8020aae:	d8db      	bhi.n	8020a68 <MobleStackBeaconGenerator+0x38>
 8020ab0:	9a08      	ldr	r2, [sp, #32]
 8020ab2:	4610      	mov	r0, r2
 8020ab4:	b00d      	add	sp, #52	@ 0x34
 8020ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ab8:	2000      	movs	r0, #0
 8020aba:	f7f8 f96b 	bl	8018d94 <MoblePalCryptoGetNetworkSecurityKeys>
 8020abe:	2300      	movs	r3, #0
 8020ac0:	e9cd 7300 	strd	r7, r3, [sp]
 8020ac4:	f100 0328 	add.w	r3, r0, #40	@ 0x28
 8020ac8:	e7eb      	b.n	8020aa2 <MobleStackBeaconGenerator+0x72>
 8020aca:	f7f6 ff77 	bl	80179bc <MoblePalBluetoothGetConnectionState>
 8020ace:	2802      	cmp	r0, #2
 8020ad0:	d120      	bne.n	8020b14 <MobleStackBeaconGenerator+0xe4>
 8020ad2:	f894 3854 	ldrb.w	r3, [r4, #2132]	@ 0x854
 8020ad6:	b1eb      	cbz	r3, 8020b14 <MobleStackBeaconGenerator+0xe4>
 8020ad8:	f896 6725 	ldrb.w	r6, [r6, #1829]	@ 0x725
 8020adc:	b9d6      	cbnz	r6, 8020b14 <MobleStackBeaconGenerator+0xe4>
 8020ade:	9203      	str	r2, [sp, #12]
 8020ae0:	2210      	movs	r2, #16
 8020ae2:	4631      	mov	r1, r6
 8020ae4:	eb0d 0002 	add.w	r0, sp, r2
 8020ae8:	f008 fb60 	bl	80291ac <memset>
 8020aec:	a804      	add	r0, sp, #16
 8020aee:	f7f6 ff85 	bl	80179fc <MoblePalBluetoothGetBluetoothAddress>
 8020af2:	4b0b      	ldr	r3, [pc, #44]	@ (8020b20 <MobleStackBeaconGenerator+0xf0>)
 8020af4:	685b      	ldr	r3, [r3, #4]
 8020af6:	a808      	add	r0, sp, #32
 8020af8:	695b      	ldr	r3, [r3, #20]
 8020afa:	4798      	blx	r3
 8020afc:	f8b4 38fc 	ldrh.w	r3, [r4, #2300]	@ 0x8fc
 8020b00:	9600      	str	r6, [sp, #0]
 8020b02:	aa08      	add	r2, sp, #32
 8020b04:	a903      	add	r1, sp, #12
 8020b06:	4628      	mov	r0, r5
 8020b08:	f7fc fa45 	bl	801cf96 <MobleBeaconSetUnprovisioned>
 8020b0c:	2801      	cmp	r0, #1
 8020b0e:	d8ab      	bhi.n	8020a68 <MobleStackBeaconGenerator+0x38>
 8020b10:	9a03      	ldr	r2, [sp, #12]
 8020b12:	e7ce      	b.n	8020ab2 <MobleStackBeaconGenerator+0x82>
 8020b14:	2200      	movs	r2, #0
 8020b16:	e7cc      	b.n	8020ab2 <MobleStackBeaconGenerator+0x82>
 8020b18:	20002504 	.word	0x20002504
 8020b1c:	2000140c 	.word	0x2000140c
 8020b20:	20000314 	.word	0x20000314

08020b24 <MobleConfigModelGetRelayEnableStatus>:
 8020b24:	4b03      	ldr	r3, [pc, #12]	@ (8020b34 <MobleConfigModelGetRelayEnableStatus+0x10>)
 8020b26:	f893 00bd 	ldrb.w	r0, [r3, #189]	@ 0xbd
 8020b2a:	1e43      	subs	r3, r0, #1
 8020b2c:	4258      	negs	r0, r3
 8020b2e:	4158      	adcs	r0, r3
 8020b30:	4770      	bx	lr
 8020b32:	bf00      	nop
 8020b34:	20000314 	.word	0x20000314

08020b38 <MobleNetworkDecideRetransmission>:
 8020b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020b3a:	b085      	sub	sp, #20
 8020b3c:	2300      	movs	r3, #0
 8020b3e:	460c      	mov	r4, r1
 8020b40:	f88d 3003 	strb.w	r3, [sp, #3]
 8020b44:	b928      	cbnz	r0, 8020b52 <MobleNetworkDecideRetransmission+0x1a>
 8020b46:	4b4f      	ldr	r3, [pc, #316]	@ (8020c84 <MobleNetworkDecideRetransmission+0x14c>)
 8020b48:	4a4f      	ldr	r2, [pc, #316]	@ (8020c88 <MobleNetworkDecideRetransmission+0x150>)
 8020b4a:	217a      	movs	r1, #122	@ 0x7a
 8020b4c:	484f      	ldr	r0, [pc, #316]	@ (8020c8c <MobleNetworkDecideRetransmission+0x154>)
 8020b4e:	f007 fc45 	bl	80283dc <__assert_func>
 8020b52:	b919      	cbnz	r1, 8020b5c <MobleNetworkDecideRetransmission+0x24>
 8020b54:	4b4e      	ldr	r3, [pc, #312]	@ (8020c90 <MobleNetworkDecideRetransmission+0x158>)
 8020b56:	4a4c      	ldr	r2, [pc, #304]	@ (8020c88 <MobleNetworkDecideRetransmission+0x150>)
 8020b58:	217b      	movs	r1, #123	@ 0x7b
 8020b5a:	e7f7      	b.n	8020b4c <MobleNetworkDecideRetransmission+0x14>
 8020b5c:	f9b1 3016 	ldrsh.w	r3, [r1, #22]
 8020b60:	8aca      	ldrh	r2, [r1, #22]
 8020b62:	2b00      	cmp	r3, #0
 8020b64:	dd1f      	ble.n	8020ba6 <MobleNetworkDecideRetransmission+0x6e>
 8020b66:	6801      	ldr	r1, [r0, #0]
 8020b68:	884b      	ldrh	r3, [r1, #2]
 8020b6a:	7f09      	ldrb	r1, [r1, #28]
 8020b6c:	429a      	cmp	r2, r3
 8020b6e:	d307      	bcc.n	8020b80 <MobleNetworkDecideRetransmission+0x48>
 8020b70:	440b      	add	r3, r1
 8020b72:	429a      	cmp	r2, r3
 8020b74:	da04      	bge.n	8020b80 <MobleNetworkDecideRetransmission+0x48>
 8020b76:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8020b7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8020b7e:	e00f      	b.n	8020ba0 <MobleNetworkDecideRetransmission+0x68>
 8020b80:	4b44      	ldr	r3, [pc, #272]	@ (8020c94 <MobleNetworkDecideRetransmission+0x15c>)
 8020b82:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 8020b86:	2b01      	cmp	r3, #1
 8020b88:	d10d      	bne.n	8020ba6 <MobleNetworkDecideRetransmission+0x6e>
 8020b8a:	4610      	mov	r0, r2
 8020b8c:	f7fd f85a 	bl	801dc44 <BnrgmFrndMgmtGetFriendshipStatus>
 8020b90:	b948      	cbnz	r0, 8020ba6 <MobleNetworkDecideRetransmission+0x6e>
 8020b92:	7be3      	ldrb	r3, [r4, #15]
 8020b94:	2b01      	cmp	r3, #1
 8020b96:	d92b      	bls.n	8020bf0 <MobleNetworkDecideRetransmission+0xb8>
 8020b98:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8020b9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8020ba0:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 8020ba4:	e024      	b.n	8020bf0 <MobleNetworkDecideRetransmission+0xb8>
 8020ba6:	7be3      	ldrb	r3, [r4, #15]
 8020ba8:	4e3a      	ldr	r6, [pc, #232]	@ (8020c94 <MobleNetworkDecideRetransmission+0x15c>)
 8020baa:	8ae5      	ldrh	r5, [r4, #22]
 8020bac:	f896 70be 	ldrb.w	r7, [r6, #190]	@ 0xbe
 8020bb0:	2b01      	cmp	r3, #1
 8020bb2:	bf82      	ittt	hi
 8020bb4:	f8b4 3040 	ldrhhi.w	r3, [r4, #64]	@ 0x40
 8020bb8:	f443 7380 	orrhi.w	r3, r3, #256	@ 0x100
 8020bbc:	f8a4 3040 	strhhi.w	r3, [r4, #64]	@ 0x40
 8020bc0:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8020bc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8020bc8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8020bcc:	d14f      	bne.n	8020c6e <MobleNetworkDecideRetransmission+0x136>
 8020bce:	4628      	mov	r0, r5
 8020bd0:	f7f9 fb00 	bl	801a1d4 <MoblePalCryptoIsSubscriptionExists>
 8020bd4:	b978      	cbnz	r0, 8020bf6 <MobleNetworkDecideRetransmission+0xbe>
 8020bd6:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8020bda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8020bde:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 8020be2:	2f01      	cmp	r7, #1
 8020be4:	d01d      	beq.n	8020c22 <MobleNetworkDecideRetransmission+0xea>
 8020be6:	6873      	ldr	r3, [r6, #4]
 8020be8:	6a1b      	ldr	r3, [r3, #32]
 8020bea:	4798      	blx	r3
 8020bec:	2800      	cmp	r0, #0
 8020bee:	d1c2      	bne.n	8020b76 <MobleNetworkDecideRetransmission+0x3e>
 8020bf0:	2000      	movs	r0, #0
 8020bf2:	b005      	add	sp, #20
 8020bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020bf6:	f5a5 437f 	sub.w	r3, r5, #65280	@ 0xff00
 8020bfa:	3bfc      	subs	r3, #252	@ 0xfc
 8020bfc:	2b03      	cmp	r3, #3
 8020bfe:	d832      	bhi.n	8020c66 <MobleNetworkDecideRetransmission+0x12e>
 8020c00:	e8df f003 	tbb	[pc, r3]
 8020c04:	25210702 	.word	0x25210702
 8020c08:	f896 30bc 	ldrb.w	r3, [r6, #188]	@ 0xbc
 8020c0c:	2b01      	cmp	r3, #1
 8020c0e:	d1e8      	bne.n	8020be2 <MobleNetworkDecideRetransmission+0xaa>
 8020c10:	e7e1      	b.n	8020bd6 <MobleNetworkDecideRetransmission+0x9e>
 8020c12:	2f01      	cmp	r7, #1
 8020c14:	d1e7      	bne.n	8020be6 <MobleNetworkDecideRetransmission+0xae>
 8020c16:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8020c1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8020c1e:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 8020c22:	aa01      	add	r2, sp, #4
 8020c24:	f10d 0103 	add.w	r1, sp, #3
 8020c28:	4628      	mov	r0, r5
 8020c2a:	f7fd f831 	bl	801dc90 <BnrgmFrndMgmtGetSubscrStatus>
 8020c2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	d0d7      	beq.n	8020be6 <MobleNetworkDecideRetransmission+0xae>
 8020c36:	7be3      	ldrb	r3, [r4, #15]
 8020c38:	2b01      	cmp	r3, #1
 8020c3a:	d9d4      	bls.n	8020be6 <MobleNetworkDecideRetransmission+0xae>
 8020c3c:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8020c40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8020c44:	e009      	b.n	8020c5a <MobleNetworkDecideRetransmission+0x122>
 8020c46:	f7ff ff6d 	bl	8020b24 <MobleConfigModelGetRelayEnableStatus>
 8020c4a:	2801      	cmp	r0, #1
 8020c4c:	e7df      	b.n	8020c0e <MobleNetworkDecideRetransmission+0xd6>
 8020c4e:	2f01      	cmp	r7, #1
 8020c50:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 8020c54:	d004      	beq.n	8020c60 <MobleNetworkDecideRetransmission+0x128>
 8020c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8020c5a:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 8020c5e:	e7c2      	b.n	8020be6 <MobleNetworkDecideRetransmission+0xae>
 8020c60:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8020c64:	e7db      	b.n	8020c1e <MobleNetworkDecideRetransmission+0xe6>
 8020c66:	f8b6 30e2 	ldrh.w	r3, [r6, #226]	@ 0xe2
 8020c6a:	42ab      	cmp	r3, r5
 8020c6c:	e7cf      	b.n	8020c0e <MobleNetworkDecideRetransmission+0xd6>
 8020c6e:	f405 4340 	and.w	r3, r5, #49152	@ 0xc000
 8020c72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020c76:	d1b4      	bne.n	8020be2 <MobleNetworkDecideRetransmission+0xaa>
 8020c78:	4628      	mov	r0, r5
 8020c7a:	f7f9 faab 	bl	801a1d4 <MoblePalCryptoIsSubscriptionExists>
 8020c7e:	2800      	cmp	r0, #0
 8020c80:	d0a9      	beq.n	8020bd6 <MobleNetworkDecideRetransmission+0x9e>
 8020c82:	e7ae      	b.n	8020be2 <MobleNetworkDecideRetransmission+0xaa>
 8020c84:	08030e80 	.word	0x08030e80
 8020c88:	0802fbe0 	.word	0x0802fbe0
 8020c8c:	0803135e 	.word	0x0803135e
 8020c90:	08031015 	.word	0x08031015
 8020c94:	20000314 	.word	0x20000314

08020c98 <MobleConfigModelSetNodeIdentity>:
 8020c98:	2802      	cmp	r0, #2
 8020c9a:	bf9d      	ittte	ls
 8020c9c:	4b02      	ldrls	r3, [pc, #8]	@ (8020ca8 <MobleConfigModelSetNodeIdentity+0x10>)
 8020c9e:	f883 00bb 	strbls.w	r0, [r3, #187]	@ 0xbb
 8020ca2:	2000      	movls	r0, #0
 8020ca4:	2003      	movhi	r0, #3
 8020ca6:	4770      	bx	lr
 8020ca8:	20000314 	.word	0x20000314

08020cac <BnrgmStackSetNodeIdentityState>:
 8020cac:	b510      	push	{r4, lr}
 8020cae:	4604      	mov	r4, r0
 8020cb0:	b910      	cbnz	r0, 8020cb8 <BnrgmStackSetNodeIdentityState+0xc>
 8020cb2:	2102      	movs	r1, #2
 8020cb4:	4608      	mov	r0, r1
 8020cb6:	bd10      	pop	{r4, pc}
 8020cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8020d24 <BnrgmStackSetNodeIdentityState+0x78>)
 8020cba:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 8020cbe:	428b      	cmp	r3, r1
 8020cc0:	d103      	bne.n	8020cca <BnrgmStackSetNodeIdentityState+0x1e>
 8020cc2:	2b01      	cmp	r3, #1
 8020cc4:	d020      	beq.n	8020d08 <BnrgmStackSetNodeIdentityState+0x5c>
 8020cc6:	2100      	movs	r1, #0
 8020cc8:	e7f4      	b.n	8020cb4 <BnrgmStackSetNodeIdentityState+0x8>
 8020cca:	4608      	mov	r0, r1
 8020ccc:	f7ff ffe4 	bl	8020c98 <MobleConfigModelSetNodeIdentity>
 8020cd0:	2901      	cmp	r1, #1
 8020cd2:	d10f      	bne.n	8020cf4 <BnrgmStackSetNodeIdentityState+0x48>
 8020cd4:	4914      	ldr	r1, [pc, #80]	@ (8020d28 <BnrgmStackSetNodeIdentityState+0x7c>)
 8020cd6:	4622      	mov	r2, r4
 8020cd8:	f504 70be 	add.w	r0, r4, #380	@ 0x17c
 8020cdc:	f7f6 fc2c 	bl	8017538 <MoblePalTimerCreate>
 8020ce0:	2801      	cmp	r0, #1
 8020ce2:	d8e6      	bhi.n	8020cb2 <BnrgmStackSetNodeIdentityState+0x6>
 8020ce4:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
 8020ce8:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8020cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020cf0:	f7f6 bc8c 	b.w	801760c <MoblePalTimerStartOnce>
 8020cf4:	2900      	cmp	r1, #0
 8020cf6:	d1e6      	bne.n	8020cc6 <BnrgmStackSetNodeIdentityState+0x1a>
 8020cf8:	f8d4 217c 	ldr.w	r2, [r4, #380]	@ 0x17c
 8020cfc:	4610      	mov	r0, r2
 8020cfe:	f7f6 fcad 	bl	801765c <MoblePalTimerStop>
 8020d02:	b162      	cbz	r2, 8020d1e <BnrgmStackSetNodeIdentityState+0x72>
 8020d04:	7011      	strb	r1, [r2, #0]
 8020d06:	e7d5      	b.n	8020cb4 <BnrgmStackSetNodeIdentityState+0x8>
 8020d08:	f8d0 217c 	ldr.w	r2, [r0, #380]	@ 0x17c
 8020d0c:	4610      	mov	r0, r2
 8020d0e:	f7f6 fca5 	bl	801765c <MoblePalTimerStop>
 8020d12:	2801      	cmp	r0, #1
 8020d14:	d8cd      	bhi.n	8020cb2 <BnrgmStackSetNodeIdentityState+0x6>
 8020d16:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8020d1a:	4610      	mov	r0, r2
 8020d1c:	e7e6      	b.n	8020cec <BnrgmStackSetNodeIdentityState+0x40>
 8020d1e:	2103      	movs	r1, #3
 8020d20:	e7c8      	b.n	8020cb4 <BnrgmStackSetNodeIdentityState+0x8>
 8020d22:	bf00      	nop
 8020d24:	20000314 	.word	0x20000314
 8020d28:	08017819 	.word	0x08017819

08020d2c <MobleStackConfigValidate>:
 8020d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d2e:	4b38      	ldr	r3, [pc, #224]	@ (8020e10 <MobleStackConfigValidate+0xe4>)
 8020d30:	4d38      	ldr	r5, [pc, #224]	@ (8020e14 <MobleStackConfigValidate+0xe8>)
 8020d32:	2700      	movs	r7, #0
 8020d34:	f883 7166 	strb.w	r7, [r3, #358]	@ 0x166
 8020d38:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 8020d3c:	2201      	movs	r2, #1
 8020d3e:	6858      	ldr	r0, [r3, #4]
 8020d40:	701a      	strb	r2, [r3, #0]
 8020d42:	f7f8 fc5d 	bl	8019600 <MoblePalCryptoSetIvIndex>
 8020d46:	2801      	cmp	r0, #1
 8020d48:	4604      	mov	r4, r0
 8020d4a:	d85f      	bhi.n	8020e0c <MobleStackConfigValidate+0xe0>
 8020d4c:	4e32      	ldr	r6, [pc, #200]	@ (8020e18 <MobleStackConfigValidate+0xec>)
 8020d4e:	4b33      	ldr	r3, [pc, #204]	@ (8020e1c <MobleStackConfigValidate+0xf0>)
 8020d50:	f8d5 4680 	ldr.w	r4, [r5, #1664]	@ 0x680
 8020d54:	f8c5 3924 	str.w	r3, [r5, #2340]	@ 0x924
 8020d58:	6873      	ldr	r3, [r6, #4]
 8020d5a:	f8c5 77dc 	str.w	r7, [r5, #2012]	@ 0x7dc
 8020d5e:	69db      	ldr	r3, [r3, #28]
 8020d60:	60a7      	str	r7, [r4, #8]
 8020d62:	4798      	blx	r3
 8020d64:	7720      	strb	r0, [r4, #28]
 8020d66:	f8d5 0680 	ldr.w	r0, [r5, #1664]	@ 0x680
 8020d6a:	f7fb fd75 	bl	801c858 <MobleConfigNetworkSave>
 8020d6e:	2801      	cmp	r0, #1
 8020d70:	4604      	mov	r4, r0
 8020d72:	d84b      	bhi.n	8020e0c <MobleStackConfigValidate+0xe0>
 8020d74:	f8d5 0680 	ldr.w	r0, [r5, #1664]	@ 0x680
 8020d78:	f7fb fc9c 	bl	801c6b4 <MobleConfigSaveSeq>
 8020d7c:	2801      	cmp	r0, #1
 8020d7e:	4604      	mov	r4, r0
 8020d80:	d844      	bhi.n	8020e0c <MobleStackConfigValidate+0xe0>
 8020d82:	f242 7310 	movw	r3, #10000	@ 0x2710
 8020d86:	f8d5 0858 	ldr.w	r0, [r5, #2136]	@ 0x858
 8020d8a:	f8a5 385c 	strh.w	r3, [r5, #2140]	@ 0x85c
 8020d8e:	f7f9 fc25 	bl	801a5dc <BnrgmTransmitChangeRegularlyGeneratedInterval>
 8020d92:	2801      	cmp	r0, #1
 8020d94:	4604      	mov	r4, r0
 8020d96:	d839      	bhi.n	8020e0c <MobleStackConfigValidate+0xe0>
 8020d98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020d9c:	f8d5 0860 	ldr.w	r0, [r5, #2144]	@ 0x860
 8020da0:	f8a5 3864 	strh.w	r3, [r5, #2148]	@ 0x864
 8020da4:	f7f9 fc1a 	bl	801a5dc <BnrgmTransmitChangeRegularlyGeneratedInterval>
 8020da8:	2801      	cmp	r0, #1
 8020daa:	4604      	mov	r4, r0
 8020dac:	d82e      	bhi.n	8020e0c <MobleStackConfigValidate+0xe0>
 8020dae:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 8020db2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8020db6:	2b01      	cmp	r3, #1
 8020db8:	d109      	bne.n	8020dce <MobleStackConfigValidate+0xa2>
 8020dba:	f7e5 fb67 	bl	800648c <BLEMesh_ProvisionCallback>
 8020dbe:	f8d5 3680 	ldr.w	r3, [r5, #1664]	@ 0x680
 8020dc2:	f505 60d0 	add.w	r0, r5, #1664	@ 0x680
 8020dc6:	f883 7039 	strb.w	r7, [r3, #57]	@ 0x39
 8020dca:	f7fb fd01 	bl	801c7d0 <MobleApplicationInit>
 8020dce:	4814      	ldr	r0, [pc, #80]	@ (8020e20 <MobleStackConfigValidate+0xf4>)
 8020dd0:	2101      	movs	r1, #1
 8020dd2:	f7fd fc24 	bl	801e61e <MobleProvisionUpdateRole>
 8020dd6:	f7ff ff69 	bl	8020cac <BnrgmStackSetNodeIdentityState>
 8020dda:	2801      	cmp	r0, #1
 8020ddc:	4604      	mov	r4, r0
 8020dde:	d815      	bhi.n	8020e0c <MobleStackConfigValidate+0xe0>
 8020de0:	f7f6 fdec 	bl	80179bc <MoblePalBluetoothGetConnectionState>
 8020de4:	2802      	cmp	r0, #2
 8020de6:	d011      	beq.n	8020e0c <MobleStackConfigValidate+0xe0>
 8020de8:	480d      	ldr	r0, [pc, #52]	@ (8020e20 <MobleStackConfigValidate+0xf4>)
 8020dea:	2101      	movs	r1, #1
 8020dec:	f7fb ff3c 	bl	801cc68 <BnrgmStackSetDummyProxyModeState>
 8020df0:	2801      	cmp	r0, #1
 8020df2:	4604      	mov	r4, r0
 8020df4:	d80a      	bhi.n	8020e0c <MobleStackConfigValidate+0xe0>
 8020df6:	f896 30bf 	ldrb.w	r3, [r6, #191]	@ 0xbf
 8020dfa:	2b02      	cmp	r3, #2
 8020dfc:	d006      	beq.n	8020e0c <MobleStackConfigValidate+0xe0>
 8020dfe:	f895 3854 	ldrb.w	r3, [r5, #2132]	@ 0x854
 8020e02:	2b01      	cmp	r3, #1
 8020e04:	d102      	bne.n	8020e0c <MobleStackConfigValidate+0xe0>
 8020e06:	2000      	movs	r0, #0
 8020e08:	f7fe f87c 	bl	801ef04 <BnrgmTransmitSetAutoScanState>
 8020e0c:	4620      	mov	r0, r4
 8020e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020e10:	20003f54 	.word	0x20003f54
 8020e14:	2000140c 	.word	0x2000140c
 8020e18:	20000314 	.word	0x20000314
 8020e1c:	1ee62800 	.word	0x1ee62800
 8020e20:	20001a8c 	.word	0x20001a8c

08020e24 <MobleProvision_UnprovisionedNode_CompleteOperation>:
 8020e24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8020e28:	4c91      	ldr	r4, [pc, #580]	@ (8021070 <MobleProvision_UnprovisionedNode_CompleteOperation+0x24c>)
 8020e2a:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	@ 0xa0c
 8020e2e:	f893 21a8 	ldrb.w	r2, [r3, #424]	@ 0x1a8
 8020e32:	b122      	cbz	r2, 8020e3e <MobleProvision_UnprovisionedNode_CompleteOperation+0x1a>
 8020e34:	2207      	movs	r2, #7
 8020e36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8020e3a:	2200      	movs	r2, #0
 8020e3c:	e01c      	b.n	8020e78 <MobleProvision_UnprovisionedNode_CompleteOperation+0x54>
 8020e3e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8020e42:	2a07      	cmp	r2, #7
 8020e44:	d82d      	bhi.n	8020ea2 <MobleProvision_UnprovisionedNode_CompleteOperation+0x7e>
 8020e46:	a101      	add	r1, pc, #4	@ (adr r1, 8020e4c <MobleProvision_UnprovisionedNode_CompleteOperation+0x28>)
 8020e48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020e4c:	08020e6d 	.word	0x08020e6d
 8020e50:	08020e7f 	.word	0x08020e7f
 8020e54:	08020f8f 	.word	0x08020f8f
 8020e58:	08020f87 	.word	0x08020f87
 8020e5c:	08020f9d 	.word	0x08020f9d
 8020e60:	08020fa9 	.word	0x08020fa9
 8020e64:	08020ea3 	.word	0x08020ea3
 8020e68:	08020e3b 	.word	0x08020e3b
 8020e6c:	f893 1045 	ldrb.w	r1, [r3, #69]	@ 0x45
 8020e70:	2201      	movs	r2, #1
 8020e72:	2900      	cmp	r1, #0
 8020e74:	f040 8088 	bne.w	8020f88 <MobleProvision_UnprovisionedNode_CompleteOperation+0x164>
 8020e78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8020e7c:	e011      	b.n	8020ea2 <MobleProvision_UnprovisionedNode_CompleteOperation+0x7e>
 8020e7e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8020e82:	2a01      	cmp	r2, #1
 8020e84:	f200 80a7 	bhi.w	8020fd6 <MobleProvision_UnprovisionedNode_CompleteOperation+0x1b2>
 8020e88:	3201      	adds	r2, #1
 8020e8a:	b2d2      	uxtb	r2, r2
 8020e8c:	2a02      	cmp	r2, #2
 8020e8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8020e92:	d106      	bne.n	8020ea2 <MobleProvision_UnprovisionedNode_CompleteOperation+0x7e>
 8020e94:	f8d4 26f0 	ldr.w	r2, [r4, #1776]	@ 0x6f0
 8020e98:	f892 21fa 	ldrb.w	r2, [r2, #506]	@ 0x1fa
 8020e9c:	2a00      	cmp	r2, #0
 8020e9e:	f040 809a 	bne.w	8020fd6 <MobleProvision_UnprovisionedNode_CompleteOperation+0x1b2>
 8020ea2:	b002      	add	sp, #8
 8020ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ea8:	fba3 5807 	umull	r5, r8, r3, r7
 8020eac:	fb07 8801 	mla	r8, r7, r1, r8
 8020eb0:	f7f6 fde6 	bl	8017a80 <MoblePalBluetoothRandom>
 8020eb4:	fbb0 f3f7 	udiv	r3, r0, r7
 8020eb8:	fb03 0017 	mls	r0, r3, r7, r0
 8020ebc:	b2c0      	uxtb	r0, r0
 8020ebe:	1e43      	subs	r3, r0, #1
 8020ec0:	2b08      	cmp	r3, #8
 8020ec2:	d8f5      	bhi.n	8020eb0 <MobleProvision_UnprovisionedNode_CompleteOperation+0x8c>
 8020ec4:	1943      	adds	r3, r0, r5
 8020ec6:	f148 0100 	adc.w	r1, r8, #0
 8020eca:	3601      	adds	r6, #1
 8020ecc:	e9cd 3100 	strd	r3, r1, [sp]
 8020ed0:	f8d4 26f0 	ldr.w	r2, [r4, #1776]	@ 0x6f0
 8020ed4:	f892 51fd 	ldrb.w	r5, [r2, #509]	@ 0x1fd
 8020ed8:	b2f0      	uxtb	r0, r6
 8020eda:	4285      	cmp	r5, r0
 8020edc:	d8e4      	bhi.n	8020ea8 <MobleProvision_UnprovisionedNode_CompleteOperation+0x84>
 8020ede:	2300      	movs	r3, #0
 8020ee0:	f8c2 3270 	str.w	r3, [r2, #624]	@ 0x270
 8020ee4:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274
 8020ee8:	466b      	mov	r3, sp
 8020eea:	cb03      	ldmia	r3!, {r0, r1}
 8020eec:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
 8020ef0:	f8c2 126c 	str.w	r1, [r2, #620]	@ 0x26c
 8020ef4:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	@ 0x6f0
 8020ef8:	f890 11fd 	ldrb.w	r1, [r0, #509]	@ 0x1fd
 8020efc:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 8020f00:	f880 1278 	strb.w	r1, [r0, #632]	@ 0x278
 8020f04:	f500 701a 	add.w	r0, r0, #616	@ 0x268
 8020f08:	4798      	blx	r3
 8020f0a:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 8020f0e:	f893 21fb 	ldrb.w	r2, [r3, #507]	@ 0x1fb
 8020f12:	2a03      	cmp	r2, #3
 8020f14:	d11a      	bne.n	8020f4c <MobleProvision_UnprovisionedNode_CompleteOperation+0x128>
 8020f16:	f8d3 2298 	ldr.w	r2, [r3, #664]	@ 0x298
 8020f1a:	b1ba      	cbz	r2, 8020f4c <MobleProvision_UnprovisionedNode_CompleteOperation+0x128>
 8020f1c:	f893 01fd 	ldrb.w	r0, [r3, #509]	@ 0x1fd
 8020f20:	4790      	blx	r2
 8020f22:	4601      	mov	r1, r0
 8020f24:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	@ 0x6f0
 8020f28:	f890 21fc 	ldrb.w	r2, [r0, #508]	@ 0x1fc
 8020f2c:	2a03      	cmp	r2, #3
 8020f2e:	bf14      	ite	ne
 8020f30:	f890 21fd 	ldrbne.w	r2, [r0, #509]	@ 0x1fd
 8020f34:	2202      	moveq	r2, #2
 8020f36:	f880 2278 	strb.w	r2, [r0, #632]	@ 0x278
 8020f3a:	f500 701a 	add.w	r0, r0, #616	@ 0x268
 8020f3e:	f008 f91b 	bl	8029178 <memmove>
 8020f42:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	@ 0xa0c
 8020f46:	2203      	movs	r2, #3
 8020f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8020f4c:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	@ 0x6f0
 8020f50:	f890 31fb 	ldrb.w	r3, [r0, #507]	@ 0x1fb
 8020f54:	2b01      	cmp	r3, #1
 8020f56:	d1a4      	bne.n	8020ea2 <MobleProvision_UnprovisionedNode_CompleteOperation+0x7e>
 8020f58:	f890 227e 	ldrb.w	r2, [r0, #638]	@ 0x27e
 8020f5c:	f880 2278 	strb.w	r2, [r0, #632]	@ 0x278
 8020f60:	f200 217f 	addw	r1, r0, #639	@ 0x27f
 8020f64:	f500 701a 	add.w	r0, r0, #616	@ 0x268
 8020f68:	b002      	add	sp, #8
 8020f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020f6e:	f008 b903 	b.w	8029178 <memmove>
 8020f72:	2600      	movs	r6, #0
 8020f74:	4633      	mov	r3, r6
 8020f76:	4631      	mov	r1, r6
 8020f78:	270a      	movs	r7, #10
 8020f7a:	e7a7      	b.n	8020ecc <MobleProvision_UnprovisionedNode_CompleteOperation+0xa8>
 8020f7c:	2b24      	cmp	r3, #36	@ 0x24
 8020f7e:	bf94      	ite	ls
 8020f80:	3357      	addls	r3, #87	@ 0x57
 8020f82:	331d      	addhi	r3, #29
 8020f84:	e057      	b.n	8021036 <MobleProvision_UnprovisionedNode_CompleteOperation+0x212>
 8020f86:	2202      	movs	r2, #2
 8020f88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8020f8c:	e789      	b.n	8020ea2 <MobleProvision_UnprovisionedNode_CompleteOperation+0x7e>
 8020f8e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8020f92:	b90a      	cbnz	r2, 8020f98 <MobleProvision_UnprovisionedNode_CompleteOperation+0x174>
 8020f94:	2201      	movs	r2, #1
 8020f96:	e76f      	b.n	8020e78 <MobleProvision_UnprovisionedNode_CompleteOperation+0x54>
 8020f98:	2204      	movs	r2, #4
 8020f9a:	e7f5      	b.n	8020f88 <MobleProvision_UnprovisionedNode_CompleteOperation+0x164>
 8020f9c:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8020fa0:	2a00      	cmp	r2, #0
 8020fa2:	d0f7      	beq.n	8020f94 <MobleProvision_UnprovisionedNode_CompleteOperation+0x170>
 8020fa4:	2205      	movs	r2, #5
 8020fa6:	e7ef      	b.n	8020f88 <MobleProvision_UnprovisionedNode_CompleteOperation+0x164>
 8020fa8:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8020fac:	2a00      	cmp	r2, #0
 8020fae:	d0f1      	beq.n	8020f94 <MobleProvision_UnprovisionedNode_CompleteOperation+0x170>
 8020fb0:	2206      	movs	r2, #6
 8020fb2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8020fb6:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 8020fba:	681b      	ldr	r3, [r3, #0]
 8020fbc:	2201      	movs	r2, #1
 8020fbe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8020fc2:	f7ff feb3 	bl	8020d2c <MobleStackConfigValidate>
 8020fc6:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	@ 0x6f0
 8020fca:	2104      	movs	r1, #4
 8020fcc:	b002      	add	sp, #8
 8020fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020fd2:	f7fe bfab 	b.w	801ff2c <MobleStackFSM>
 8020fd6:	2202      	movs	r2, #2
 8020fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8020fdc:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 8020fe0:	f893 21fb 	ldrb.w	r2, [r3, #507]	@ 0x1fb
 8020fe4:	2a02      	cmp	r2, #2
 8020fe6:	d190      	bne.n	8020f0a <MobleProvision_UnprovisionedNode_CompleteOperation+0xe6>
 8020fe8:	f8d3 2294 	ldr.w	r2, [r3, #660]	@ 0x294
 8020fec:	2a00      	cmp	r2, #0
 8020fee:	d08c      	beq.n	8020f0a <MobleProvision_UnprovisionedNode_CompleteOperation+0xe6>
 8020ff0:	f893 31fc 	ldrb.w	r3, [r3, #508]	@ 0x1fc
 8020ff4:	2b03      	cmp	r3, #3
 8020ff6:	d9bc      	bls.n	8020f72 <MobleProvision_UnprovisionedNode_CompleteOperation+0x14e>
 8020ff8:	2b04      	cmp	r3, #4
 8020ffa:	f47f af7b 	bne.w	8020ef4 <MobleProvision_UnprovisionedNode_CompleteOperation+0xd0>
 8020ffe:	2500      	movs	r5, #0
 8021000:	263e      	movs	r6, #62	@ 0x3e
 8021002:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 8021006:	f893 2278 	ldrb.w	r2, [r3, #632]	@ 0x278
 802100a:	f893 31fd 	ldrb.w	r3, [r3, #509]	@ 0x1fd
 802100e:	429a      	cmp	r2, r3
 8021010:	f4bf af70 	bcs.w	8020ef4 <MobleProvision_UnprovisionedNode_CompleteOperation+0xd0>
 8021014:	4668      	mov	r0, sp
 8021016:	e9cd 5500 	strd	r5, r5, [sp]
 802101a:	f7f4 f986 	bl	801532a <hci_le_rand>
 802101e:	4669      	mov	r1, sp
 8021020:	2208      	movs	r2, #8
 8021022:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021026:	fbb3 f0f6 	udiv	r0, r3, r6
 802102a:	fb06 3310 	mls	r3, r6, r0, r3
 802102e:	b2db      	uxtb	r3, r3
 8021030:	2b0a      	cmp	r3, #10
 8021032:	d8a3      	bhi.n	8020f7c <MobleProvision_UnprovisionedNode_CompleteOperation+0x158>
 8021034:	3330      	adds	r3, #48	@ 0x30
 8021036:	b2db      	uxtb	r3, r3
 8021038:	3a01      	subs	r2, #1
 802103a:	f801 3c01 	strb.w	r3, [r1, #-1]
 802103e:	d1f0      	bne.n	8021022 <MobleProvision_UnprovisionedNode_CompleteOperation+0x1fe>
 8021040:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	@ 0x6f0
 8021044:	f893 0278 	ldrb.w	r0, [r3, #632]	@ 0x278
 8021048:	f893 21fd 	ldrb.w	r2, [r3, #509]	@ 0x1fd
 802104c:	1a12      	subs	r2, r2, r0
 802104e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8021052:	2a08      	cmp	r2, #8
 8021054:	bfa8      	it	ge
 8021056:	2208      	movge	r2, #8
 8021058:	4418      	add	r0, r3
 802105a:	4669      	mov	r1, sp
 802105c:	f008 f88c 	bl	8029178 <memmove>
 8021060:	f8d4 26f0 	ldr.w	r2, [r4, #1776]	@ 0x6f0
 8021064:	f892 3278 	ldrb.w	r3, [r2, #632]	@ 0x278
 8021068:	3308      	adds	r3, #8
 802106a:	f882 3278 	strb.w	r3, [r2, #632]	@ 0x278
 802106e:	e7c8      	b.n	8021002 <MobleProvision_UnprovisionedNode_CompleteOperation+0x1de>
 8021070:	20002504 	.word	0x20002504

08021074 <MobleProvision_CompleteOperation>:
 8021074:	b908      	cbnz	r0, 802107a <MobleProvision_CompleteOperation+0x6>
 8021076:	f7fe bca1 	b.w	801f9bc <MobleProvision_ProvisionerNode_CompleteOperation>
 802107a:	f7ff bed3 	b.w	8020e24 <MobleProvision_UnprovisionedNode_CompleteOperation>

0802107e <Test_UpperTester_Set11>:
 802107e:	b510      	push	{r4, lr}
 8021080:	780b      	ldrb	r3, [r1, #0]
 8021082:	3b30      	subs	r3, #48	@ 0x30
 8021084:	2b01      	cmp	r3, #1
 8021086:	4604      	mov	r4, r0
 8021088:	d80d      	bhi.n	80210a6 <Test_UpperTester_Set11+0x28>
 802108a:	2101      	movs	r1, #1
 802108c:	2000      	movs	r0, #0
 802108e:	f7f7 fccb 	bl	8018a28 <MoblePalCryptoSetNodeIdntyState>
 8021092:	2101      	movs	r1, #1
 8021094:	4608      	mov	r0, r1
 8021096:	f7f7 fcc7 	bl	8018a28 <MoblePalCryptoSetNodeIdntyState>
 802109a:	2101      	movs	r1, #1
 802109c:	4620      	mov	r0, r4
 802109e:	f7ff fe05 	bl	8020cac <BnrgmStackSetNodeIdentityState>
 80210a2:	2000      	movs	r0, #0
 80210a4:	bd10      	pop	{r4, pc}
 80210a6:	2003      	movs	r0, #3
 80210a8:	e7fc      	b.n	80210a4 <Test_UpperTester_Set11+0x26>
	...

080210ac <ModelConfigUpdateKRState>:
 80210ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80210ae:	4e25      	ldr	r6, [pc, #148]	@ (8021144 <ModelConfigUpdateKRState+0x98>)
 80210b0:	4b25      	ldr	r3, [pc, #148]	@ (8021148 <ModelConfigUpdateKRState+0x9c>)
 80210b2:	440e      	add	r6, r1
 80210b4:	227c      	movs	r2, #124	@ 0x7c
 80210b6:	fb02 3301 	mla	r3, r2, r1, r3
 80210ba:	f896 40c0 	ldrb.w	r4, [r6, #192]	@ 0xc0
 80210be:	4605      	mov	r5, r0
 80210c0:	460f      	mov	r7, r1
 80210c2:	f8b3 0448 	ldrh.w	r0, [r3, #1096]	@ 0x448
 80210c6:	b99c      	cbnz	r4, 80210f0 <ModelConfigUpdateKRState+0x44>
 80210c8:	f7f7 fc60 	bl	801898c <MoblePalCryptoHasNewNetworkKey>
 80210cc:	2801      	cmp	r0, #1
 80210ce:	d108      	bne.n	80210e2 <ModelConfigUpdateKRState+0x36>
 80210d0:	b3b5      	cbz	r5, 8021140 <ModelConfigUpdateKRState+0x94>
 80210d2:	1e6b      	subs	r3, r5, #1
 80210d4:	2b01      	cmp	r3, #1
 80210d6:	d831      	bhi.n	802113c <ModelConfigUpdateKRState+0x90>
 80210d8:	f886 50c0 	strb.w	r5, [r6, #192]	@ 0xc0
 80210dc:	f7fd f802 	bl	801e0e4 <BnrgmFrndMgmtSendSecurityUpdate>
 80210e0:	e004      	b.n	80210ec <ModelConfigUpdateKRState+0x40>
 80210e2:	3d01      	subs	r5, #1
 80210e4:	2d01      	cmp	r5, #1
 80210e6:	bf8c      	ite	hi
 80210e8:	2401      	movhi	r4, #1
 80210ea:	2402      	movls	r4, #2
 80210ec:	4620      	mov	r0, r4
 80210ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80210f0:	2c01      	cmp	r4, #1
 80210f2:	d110      	bne.n	8021116 <ModelConfigUpdateKRState+0x6a>
 80210f4:	b325      	cbz	r5, 8021140 <ModelConfigUpdateKRState+0x94>
 80210f6:	2d03      	cmp	r5, #3
 80210f8:	f886 50c0 	strb.w	r5, [r6, #192]	@ 0xc0
 80210fc:	d107      	bne.n	802110e <ModelConfigUpdateKRState+0x62>
 80210fe:	f7f9 f80d 	bl	801a11c <MoblePalCryptoSwitchKeys>
 8021102:	4638      	mov	r0, r7
 8021104:	f7fd f92c 	bl	801e360 <BnrgmFrndMgmtSwitchKeys>
 8021108:	2300      	movs	r3, #0
 802110a:	f886 30c0 	strb.w	r3, [r6, #192]	@ 0xc0
 802110e:	f7fc ffe9 	bl	801e0e4 <BnrgmFrndMgmtSendSecurityUpdate>
 8021112:	2400      	movs	r4, #0
 8021114:	e7ea      	b.n	80210ec <ModelConfigUpdateKRState+0x40>
 8021116:	2c02      	cmp	r4, #2
 8021118:	d1fb      	bne.n	8021112 <ModelConfigUpdateKRState+0x66>
 802111a:	2d03      	cmp	r5, #3
 802111c:	d10a      	bne.n	8021134 <ModelConfigUpdateKRState+0x88>
 802111e:	f886 50c0 	strb.w	r5, [r6, #192]	@ 0xc0
 8021122:	f7f8 fffb 	bl	801a11c <MoblePalCryptoSwitchKeys>
 8021126:	2400      	movs	r4, #0
 8021128:	4638      	mov	r0, r7
 802112a:	f7fd f919 	bl	801e360 <BnrgmFrndMgmtSwitchKeys>
 802112e:	f886 40c0 	strb.w	r4, [r6, #192]	@ 0xc0
 8021132:	e7d3      	b.n	80210dc <ModelConfigUpdateKRState+0x30>
 8021134:	2d02      	cmp	r5, #2
 8021136:	bf08      	it	eq
 8021138:	2401      	moveq	r4, #1
 802113a:	e7d7      	b.n	80210ec <ModelConfigUpdateKRState+0x40>
 802113c:	4604      	mov	r4, r0
 802113e:	e7d5      	b.n	80210ec <ModelConfigUpdateKRState+0x40>
 8021140:	2402      	movs	r4, #2
 8021142:	e7d3      	b.n	80210ec <ModelConfigUpdateKRState+0x40>
 8021144:	20000314 	.word	0x20000314
 8021148:	2000140c 	.word	0x2000140c

0802114c <MobleStackProcessBeacon>:
 802114c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021150:	ed2d 8b02 	vpush	{d8}
 8021154:	b08f      	sub	sp, #60	@ 0x3c
 8021156:	ee08 2a10 	vmov	s16, r2
 802115a:	9304      	str	r3, [sp, #16]
 802115c:	f1a1 0313 	sub.w	r3, r1, #19
 8021160:	2b04      	cmp	r3, #4
 8021162:	4607      	mov	r7, r0
 8021164:	f200 80e6 	bhi.w	8021334 <MobleStackProcessBeacon+0x1e8>
 8021168:	7805      	ldrb	r5, [r0, #0]
 802116a:	b955      	cbnz	r5, 8021182 <MobleStackProcessBeacon+0x36>
 802116c:	9b04      	ldr	r3, [sp, #16]
 802116e:	9301      	str	r3, [sp, #4]
 8021170:	3701      	adds	r7, #1
 8021172:	9502      	str	r5, [sp, #8]
 8021174:	9700      	str	r7, [sp, #0]
 8021176:	462b      	mov	r3, r5
 8021178:	4629      	mov	r1, r5
 802117a:	4870      	ldr	r0, [pc, #448]	@ (802133c <MobleStackProcessBeacon+0x1f0>)
 802117c:	f7fb fddb 	bl	801cd36 <BLEMesh_UpdateNeighbors>
 8021180:	e026      	b.n	80211d0 <MobleStackProcessBeacon+0x84>
 8021182:	2d01      	cmp	r5, #1
 8021184:	f040 80d8 	bne.w	8021338 <MobleStackProcessBeacon+0x1ec>
 8021188:	2916      	cmp	r1, #22
 802118a:	f040 80d5 	bne.w	8021338 <MobleStackProcessBeacon+0x1ec>
 802118e:	f100 0a02 	add.w	sl, r0, #2
 8021192:	2108      	movs	r1, #8
 8021194:	4650      	mov	r0, sl
 8021196:	f7f7 fe2f 	bl	8018df8 <MoblePalCryptoGetSecurityKeys_Beacon>
 802119a:	4604      	mov	r4, r0
 802119c:	8c80      	ldrh	r0, [r0, #36]	@ 0x24
 802119e:	f7f8 ff89 	bl	801a0b4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80211a2:	f1b0 0800 	subs.w	r8, r0, #0
 80211a6:	db13      	blt.n	80211d0 <MobleStackProcessBeacon+0x84>
 80211a8:	4b65      	ldr	r3, [pc, #404]	@ (8021340 <MobleStackProcessBeacon+0x1f4>)
 80211aa:	4443      	add	r3, r8
 80211ac:	fa5f f988 	uxtb.w	r9, r8
 80211b0:	f893 60c0 	ldrb.w	r6, [r3, #192]	@ 0xc0
 80211b4:	2e01      	cmp	r6, #1
 80211b6:	d011      	beq.n	80211dc <MobleStackProcessBeacon+0x90>
 80211b8:	2e02      	cmp	r6, #2
 80211ba:	d030      	beq.n	802121e <MobleStackProcessBeacon+0xd2>
 80211bc:	2e00      	cmp	r6, #0
 80211be:	d167      	bne.n	8021290 <MobleStackProcessBeacon+0x144>
 80211c0:	2208      	movs	r2, #8
 80211c2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80211c6:	4650      	mov	r0, sl
 80211c8:	f007 ffc6 	bl	8029158 <memcmp>
 80211cc:	2800      	cmp	r0, #0
 80211ce:	d041      	beq.n	8021254 <MobleStackProcessBeacon+0x108>
 80211d0:	4628      	mov	r0, r5
 80211d2:	b00f      	add	sp, #60	@ 0x3c
 80211d4:	ecbd 8b02 	vpop	{d8}
 80211d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80211dc:	4b59      	ldr	r3, [pc, #356]	@ (8021344 <MobleStackProcessBeacon+0x1f8>)
 80211de:	227c      	movs	r2, #124	@ 0x7c
 80211e0:	fb02 3208 	mla	r2, r2, r8, r3
 80211e4:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 80211e8:	f892 2445 	ldrb.w	r2, [r2, #1093]	@ 0x445
 80211ec:	2a01      	cmp	r2, #1
 80211ee:	bf0c      	ite	eq
 80211f0:	464c      	moveq	r4, r9
 80211f2:	2400      	movne	r4, #0
 80211f4:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 80211f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80211fc:	f10b 0128 	add.w	r1, fp, #40	@ 0x28
 8021200:	2208      	movs	r2, #8
 8021202:	4419      	add	r1, r3
 8021204:	4650      	mov	r0, sl
 8021206:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802120a:	f007 ffa5 	bl	8029158 <memcmp>
 802120e:	2800      	cmp	r0, #0
 8021210:	d053      	beq.n	80212ba <MobleStackProcessBeacon+0x16e>
 8021212:	4b4d      	ldr	r3, [pc, #308]	@ (8021348 <MobleStackProcessBeacon+0x1fc>)
 8021214:	f10b 0130 	add.w	r1, fp, #48	@ 0x30
 8021218:	2208      	movs	r2, #8
 802121a:	4419      	add	r1, r3
 802121c:	e7d3      	b.n	80211c6 <MobleStackProcessBeacon+0x7a>
 802121e:	4c49      	ldr	r4, [pc, #292]	@ (8021344 <MobleStackProcessBeacon+0x1f8>)
 8021220:	237c      	movs	r3, #124	@ 0x7c
 8021222:	fb03 4308 	mla	r3, r3, r8, r4
 8021226:	f204 4424 	addw	r4, r4, #1060	@ 0x424
 802122a:	f893 2446 	ldrb.w	r2, [r3, #1094]	@ 0x446
 802122e:	9305      	str	r3, [sp, #20]
 8021230:	2a01      	cmp	r2, #1
 8021232:	bf0c      	ite	eq
 8021234:	464e      	moveq	r6, r9
 8021236:	2600      	movne	r6, #0
 8021238:	ebc6 1646 	rsb	r6, r6, r6, lsl #5
 802123c:	00b6      	lsls	r6, r6, #2
 802123e:	f106 0130 	add.w	r1, r6, #48	@ 0x30
 8021242:	2208      	movs	r2, #8
 8021244:	4421      	add	r1, r4
 8021246:	4650      	mov	r0, sl
 8021248:	f007 ff86 	bl	8029158 <memcmp>
 802124c:	9b05      	ldr	r3, [sp, #20]
 802124e:	bb08      	cbnz	r0, 8021294 <MobleStackProcessBeacon+0x148>
 8021250:	4434      	add	r4, r6
 8021252:	462e      	mov	r6, r5
 8021254:	2300      	movs	r3, #0
 8021256:	787d      	ldrb	r5, [r7, #1]
 8021258:	930c      	str	r3, [sp, #48]	@ 0x30
 802125a:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 802125e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8021262:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8021266:	f88d 5028 	strb.w	r5, [sp, #40]	@ 0x28
 802126a:	b346      	cbz	r6, 80212be <MobleStackProcessBeacon+0x172>
 802126c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802126e:	f8cd 3029 	str.w	r3, [sp, #41]	@ 0x29
 8021272:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021274:	f8cd 302d 	str.w	r3, [sp, #45]	@ 0x2d
 8021278:	f8d7 300a 	ldr.w	r3, [r7, #10]
 802127c:	f8cd 3031 	str.w	r3, [sp, #49]	@ 0x31
 8021280:	220d      	movs	r2, #13
 8021282:	4633      	mov	r3, r6
 8021284:	a90a      	add	r1, sp, #40	@ 0x28
 8021286:	a808      	add	r0, sp, #32
 8021288:	f7f8 f9e8 	bl	801965c <MoblePalCryptoAuthenticateSecureNetworkBeacon>
 802128c:	2801      	cmp	r0, #1
 802128e:	d91b      	bls.n	80212c8 <MobleStackProcessBeacon+0x17c>
 8021290:	2502      	movs	r5, #2
 8021292:	e79d      	b.n	80211d0 <MobleStackProcessBeacon+0x84>
 8021294:	f893 3445 	ldrb.w	r3, [r3, #1093]	@ 0x445
 8021298:	2b01      	cmp	r3, #1
 802129a:	bf0c      	ite	eq
 802129c:	464e      	moveq	r6, r9
 802129e:	2600      	movne	r6, #0
 80212a0:	ebc6 1646 	rsb	r6, r6, r6, lsl #5
 80212a4:	00b6      	lsls	r6, r6, #2
 80212a6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80212aa:	2208      	movs	r2, #8
 80212ac:	4421      	add	r1, r4
 80212ae:	4650      	mov	r0, sl
 80212b0:	f007 ff52 	bl	8029158 <memcmp>
 80212b4:	2800      	cmp	r0, #0
 80212b6:	d18b      	bne.n	80211d0 <MobleStackProcessBeacon+0x84>
 80212b8:	4434      	add	r4, r6
 80212ba:	4606      	mov	r6, r0
 80212bc:	e7ca      	b.n	8021254 <MobleStackProcessBeacon+0x108>
 80212be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80212c0:	f8cd 3029 	str.w	r3, [sp, #41]	@ 0x29
 80212c4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80212c6:	e7d5      	b.n	8021274 <MobleStackProcessBeacon+0x128>
 80212c8:	2208      	movs	r2, #8
 80212ca:	f107 010e 	add.w	r1, r7, #14
 80212ce:	a808      	add	r0, sp, #32
 80212d0:	f007 ff42 	bl	8029158 <memcmp>
 80212d4:	2800      	cmp	r0, #0
 80212d6:	d1db      	bne.n	8021290 <MobleStackProcessBeacon+0x144>
 80212d8:	9007      	str	r0, [sp, #28]
 80212da:	aa07      	add	r2, sp, #28
 80212dc:	2104      	movs	r1, #4
 80212de:	f107 000a 	add.w	r0, r7, #10
 80212e2:	f7f9 fc59 	bl	801ab98 <MobleInputStreamGetBigEndian>
 80212e6:	9907      	ldr	r1, [sp, #28]
 80212e8:	464a      	mov	r2, r9
 80212ea:	4628      	mov	r0, r5
 80212ec:	f7fc ff86 	bl	801e1fc <MobleStackProcessIvFromBeacon>
 80212f0:	2801      	cmp	r0, #1
 80212f2:	d8cd      	bhi.n	8021290 <MobleStackProcessBeacon+0x144>
 80212f4:	2e01      	cmp	r6, #1
 80212f6:	d107      	bne.n	8021308 <MobleStackProcessBeacon+0x1bc>
 80212f8:	4b11      	ldr	r3, [pc, #68]	@ (8021340 <MobleStackProcessBeacon+0x1f4>)
 80212fa:	4443      	add	r3, r8
 80212fc:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8021300:	2b01      	cmp	r3, #1
 8021302:	d00b      	beq.n	802131c <MobleStackProcessBeacon+0x1d0>
 8021304:	2b02      	cmp	r3, #2
 8021306:	d010      	beq.n	802132a <MobleStackProcessBeacon+0x1de>
 8021308:	9b04      	ldr	r3, [sp, #16]
 802130a:	2500      	movs	r5, #0
 802130c:	e9cd 5300 	strd	r5, r3, [sp]
 8021310:	2301      	movs	r3, #1
 8021312:	ee18 2a10 	vmov	r2, s16
 8021316:	9502      	str	r5, [sp, #8]
 8021318:	4619      	mov	r1, r3
 802131a:	e72e      	b.n	802117a <MobleStackProcessBeacon+0x2e>
 802131c:	07ea      	lsls	r2, r5, #31
 802131e:	4649      	mov	r1, r9
 8021320:	d506      	bpl.n	8021330 <MobleStackProcessBeacon+0x1e4>
 8021322:	2002      	movs	r0, #2
 8021324:	f7ff fec2 	bl	80210ac <ModelConfigUpdateKRState>
 8021328:	e7ee      	b.n	8021308 <MobleStackProcessBeacon+0x1bc>
 802132a:	07eb      	lsls	r3, r5, #31
 802132c:	d4ec      	bmi.n	8021308 <MobleStackProcessBeacon+0x1bc>
 802132e:	4649      	mov	r1, r9
 8021330:	2003      	movs	r0, #3
 8021332:	e7f7      	b.n	8021324 <MobleStackProcessBeacon+0x1d8>
 8021334:	2503      	movs	r5, #3
 8021336:	e74b      	b.n	80211d0 <MobleStackProcessBeacon+0x84>
 8021338:	2500      	movs	r5, #0
 802133a:	e749      	b.n	80211d0 <MobleStackProcessBeacon+0x84>
 802133c:	20001a8c 	.word	0x20001a8c
 8021340:	20000314 	.word	0x20000314
 8021344:	2000140c 	.word	0x2000140c
 8021348:	20001830 	.word	0x20001830

0802134c <MobleConfigModelAppBind>:
 802134c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021350:	b930      	cbnz	r0, 8021360 <MobleConfigModelAppBind+0x14>
 8021352:	4b2e      	ldr	r3, [pc, #184]	@ (802140c <MobleConfigModelAppBind+0xc0>)
 8021354:	4a2e      	ldr	r2, [pc, #184]	@ (8021410 <MobleConfigModelAppBind+0xc4>)
 8021356:	482f      	ldr	r0, [pc, #188]	@ (8021414 <MobleConfigModelAppBind+0xc8>)
 8021358:	f641 2129 	movw	r1, #6697	@ 0x1a29
 802135c:	f007 f83e 	bl	80283dc <__assert_func>
 8021360:	6805      	ldr	r5, [r0, #0]
 8021362:	2000      	movs	r0, #0
 8021364:	f105 0620 	add.w	r6, r5, #32
 8021368:	3534      	adds	r5, #52	@ 0x34
 802136a:	f856 4f04 	ldr.w	r4, [r6, #4]!
 802136e:	8827      	ldrh	r7, [r4, #0]
 8021370:	428f      	cmp	r7, r1
 8021372:	d146      	bne.n	8021402 <MobleConfigModelAppBind+0xb6>
 8021374:	4928      	ldr	r1, [pc, #160]	@ (8021418 <MobleConfigModelAppBind+0xcc>)
 8021376:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 802141c <MobleConfigModelAppBind+0xd0>
 802137a:	890f      	ldrh	r7, [r1, #8]
 802137c:	2500      	movs	r5, #0
 802137e:	f04f 0e2c 	mov.w	lr, #44	@ 0x2c
 8021382:	b2e9      	uxtb	r1, r5
 8021384:	42b9      	cmp	r1, r7
 8021386:	d235      	bcs.n	80213f4 <MobleConfigModelAppBind+0xa8>
 8021388:	fb0e c601 	mla	r6, lr, r1, ip
 802138c:	f896 85b8 	ldrb.w	r8, [r6, #1464]	@ 0x5b8
 8021390:	f1b8 0f01 	cmp.w	r8, #1
 8021394:	d132      	bne.n	80213fc <MobleConfigModelAppBind+0xb0>
 8021396:	f8b6 65ba 	ldrh.w	r6, [r6, #1466]	@ 0x5ba
 802139a:	429e      	cmp	r6, r3
 802139c:	d12e      	bne.n	80213fc <MobleConfigModelAppBind+0xb0>
 802139e:	eb04 0c01 	add.w	ip, r4, r1
 80213a2:	4626      	mov	r6, r4
 80213a4:	2500      	movs	r5, #0
 80213a6:	f101 0ea0 	add.w	lr, r1, #160	@ 0xa0
 80213aa:	f89c 70a6 	ldrb.w	r7, [ip, #166]	@ 0xa6
 80213ae:	b98f      	cbnz	r7, 80213d4 <MobleConfigModelAppBind+0x88>
 80213b0:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 80213b2:	4282      	cmp	r2, r0
 80213b4:	d120      	bne.n	80213f8 <MobleConfigModelAppBind+0xac>
 80213b6:	2238      	movs	r2, #56	@ 0x38
 80213b8:	fb02 4205 	mla	r2, r2, r5, r4
 80213bc:	440a      	add	r2, r1
 80213be:	2001      	movs	r0, #1
 80213c0:	f882 00a6 	strb.w	r0, [r2, #166]	@ 0xa6
 80213c4:	221c      	movs	r2, #28
 80213c6:	fb02 1205 	mla	r2, r2, r5, r1
 80213ca:	3250      	adds	r2, #80	@ 0x50
 80213cc:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 80213d0:	2000      	movs	r0, #0
 80213d2:	e00f      	b.n	80213f4 <MobleConfigModelAppBind+0xa8>
 80213d4:	2f01      	cmp	r7, #1
 80213d6:	d10f      	bne.n	80213f8 <MobleConfigModelAppBind+0xac>
 80213d8:	6fb7      	ldr	r7, [r6, #120]	@ 0x78
 80213da:	42ba      	cmp	r2, r7
 80213dc:	d103      	bne.n	80213e6 <MobleConfigModelAppBind+0x9a>
 80213de:	f83c 700e 	ldrh.w	r7, [ip, lr]
 80213e2:	429f      	cmp	r7, r3
 80213e4:	d0f4      	beq.n	80213d0 <MobleConfigModelAppBind+0x84>
 80213e6:	3501      	adds	r5, #1
 80213e8:	2d0b      	cmp	r5, #11
 80213ea:	f10c 0c38 	add.w	ip, ip, #56	@ 0x38
 80213ee:	f106 0638 	add.w	r6, r6, #56	@ 0x38
 80213f2:	d1da      	bne.n	80213aa <MobleConfigModelAppBind+0x5e>
 80213f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80213f8:	2002      	movs	r0, #2
 80213fa:	e7f4      	b.n	80213e6 <MobleConfigModelAppBind+0x9a>
 80213fc:	3501      	adds	r5, #1
 80213fe:	2003      	movs	r0, #3
 8021400:	e7bf      	b.n	8021382 <MobleConfigModelAppBind+0x36>
 8021402:	42ae      	cmp	r6, r5
 8021404:	f04f 0003 	mov.w	r0, #3
 8021408:	d1af      	bne.n	802136a <MobleConfigModelAppBind+0x1e>
 802140a:	e7f3      	b.n	80213f4 <MobleConfigModelAppBind+0xa8>
 802140c:	08031449 	.word	0x08031449
 8021410:	0802fc01 	.word	0x0802fc01
 8021414:	08030edb 	.word	0x08030edb
 8021418:	20000008 	.word	0x20000008
 802141c:	2000140c 	.word	0x2000140c

08021420 <MobleConfigModelAppUnBind>:
 8021420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021424:	b930      	cbnz	r0, 8021434 <MobleConfigModelAppUnBind+0x14>
 8021426:	4b30      	ldr	r3, [pc, #192]	@ (80214e8 <MobleConfigModelAppUnBind+0xc8>)
 8021428:	4a30      	ldr	r2, [pc, #192]	@ (80214ec <MobleConfigModelAppUnBind+0xcc>)
 802142a:	4831      	ldr	r0, [pc, #196]	@ (80214f0 <MobleConfigModelAppUnBind+0xd0>)
 802142c:	f641 2168 	movw	r1, #6760	@ 0x1a68
 8021430:	f006 ffd4 	bl	80283dc <__assert_func>
 8021434:	6805      	ldr	r5, [r0, #0]
 8021436:	2000      	movs	r0, #0
 8021438:	f105 0620 	add.w	r6, r5, #32
 802143c:	3534      	adds	r5, #52	@ 0x34
 802143e:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8021442:	8827      	ldrh	r7, [r4, #0]
 8021444:	428f      	cmp	r7, r1
 8021446:	d149      	bne.n	80214dc <MobleConfigModelAppUnBind+0xbc>
 8021448:	492a      	ldr	r1, [pc, #168]	@ (80214f4 <MobleConfigModelAppUnBind+0xd4>)
 802144a:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 80214f8 <MobleConfigModelAppUnBind+0xd8>
 802144e:	890f      	ldrh	r7, [r1, #8]
 8021450:	2500      	movs	r5, #0
 8021452:	f04f 0e2c 	mov.w	lr, #44	@ 0x2c
 8021456:	b2e9      	uxtb	r1, r5
 8021458:	42b9      	cmp	r1, r7
 802145a:	d225      	bcs.n	80214a8 <MobleConfigModelAppUnBind+0x88>
 802145c:	fb0e c601 	mla	r6, lr, r1, ip
 8021460:	f896 85b8 	ldrb.w	r8, [r6, #1464]	@ 0x5b8
 8021464:	f1b8 0f01 	cmp.w	r8, #1
 8021468:	d135      	bne.n	80214d6 <MobleConfigModelAppUnBind+0xb6>
 802146a:	f8b6 65ba 	ldrh.w	r6, [r6, #1466]	@ 0x5ba
 802146e:	429e      	cmp	r6, r3
 8021470:	d131      	bne.n	80214d6 <MobleConfigModelAppUnBind+0xb6>
 8021472:	eb04 0c01 	add.w	ip, r4, r1
 8021476:	4626      	mov	r6, r4
 8021478:	2500      	movs	r5, #0
 802147a:	f101 08a0 	add.w	r8, r1, #160	@ 0xa0
 802147e:	f89c e0a6 	ldrb.w	lr, [ip, #166]	@ 0xa6
 8021482:	f1be 0f01 	cmp.w	lr, #1
 8021486:	d111      	bne.n	80214ac <MobleConfigModelAppUnBind+0x8c>
 8021488:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 802148a:	4282      	cmp	r2, r0
 802148c:	d11a      	bne.n	80214c4 <MobleConfigModelAppUnBind+0xa4>
 802148e:	2338      	movs	r3, #56	@ 0x38
 8021490:	fb03 4305 	mla	r3, r3, r5, r4
 8021494:	440b      	add	r3, r1
 8021496:	2000      	movs	r0, #0
 8021498:	f883 00a6 	strb.w	r0, [r3, #166]	@ 0xa6
 802149c:	231c      	movs	r3, #28
 802149e:	fb03 1305 	mla	r3, r3, r5, r1
 80214a2:	3350      	adds	r3, #80	@ 0x50
 80214a4:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
 80214a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80214ac:	f1be 0f00 	cmp.w	lr, #0
 80214b0:	d108      	bne.n	80214c4 <MobleConfigModelAppUnBind+0xa4>
 80214b2:	6fb7      	ldr	r7, [r6, #120]	@ 0x78
 80214b4:	42ba      	cmp	r2, r7
 80214b6:	d106      	bne.n	80214c6 <MobleConfigModelAppUnBind+0xa6>
 80214b8:	f83c 7008 	ldrh.w	r7, [ip, r8]
 80214bc:	429f      	cmp	r7, r3
 80214be:	d102      	bne.n	80214c6 <MobleConfigModelAppUnBind+0xa6>
 80214c0:	4670      	mov	r0, lr
 80214c2:	e7f1      	b.n	80214a8 <MobleConfigModelAppUnBind+0x88>
 80214c4:	2002      	movs	r0, #2
 80214c6:	3501      	adds	r5, #1
 80214c8:	2d0b      	cmp	r5, #11
 80214ca:	f10c 0c38 	add.w	ip, ip, #56	@ 0x38
 80214ce:	f106 0638 	add.w	r6, r6, #56	@ 0x38
 80214d2:	d1d4      	bne.n	802147e <MobleConfigModelAppUnBind+0x5e>
 80214d4:	e7e8      	b.n	80214a8 <MobleConfigModelAppUnBind+0x88>
 80214d6:	3501      	adds	r5, #1
 80214d8:	2003      	movs	r0, #3
 80214da:	e7bc      	b.n	8021456 <MobleConfigModelAppUnBind+0x36>
 80214dc:	42ae      	cmp	r6, r5
 80214de:	f04f 0003 	mov.w	r0, #3
 80214e2:	d1ac      	bne.n	802143e <MobleConfigModelAppUnBind+0x1e>
 80214e4:	e7e0      	b.n	80214a8 <MobleConfigModelAppUnBind+0x88>
 80214e6:	bf00      	nop
 80214e8:	08031449 	.word	0x08031449
 80214ec:	0802fc19 	.word	0x0802fc19
 80214f0:	08030edb 	.word	0x08030edb
 80214f4:	20000008 	.word	0x20000008
 80214f8:	2000140c 	.word	0x2000140c

080214fc <MobleConfigHealthModelAppBind>:
 80214fc:	b538      	push	{r3, r4, r5, lr}
 80214fe:	b930      	cbnz	r0, 802150e <MobleConfigHealthModelAppBind+0x12>
 8021500:	4b16      	ldr	r3, [pc, #88]	@ (802155c <MobleConfigHealthModelAppBind+0x60>)
 8021502:	4a17      	ldr	r2, [pc, #92]	@ (8021560 <MobleConfigHealthModelAppBind+0x64>)
 8021504:	4817      	ldr	r0, [pc, #92]	@ (8021564 <MobleConfigHealthModelAppBind+0x68>)
 8021506:	f641 21a7 	movw	r1, #6823	@ 0x1aa7
 802150a:	f006 ff67 	bl	80283dc <__assert_func>
 802150e:	6800      	ldr	r0, [r0, #0]
 8021510:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8021512:	8820      	ldrh	r0, [r4, #0]
 8021514:	4288      	cmp	r0, r1
 8021516:	d11b      	bne.n	8021550 <MobleConfigHealthModelAppBind+0x54>
 8021518:	4913      	ldr	r1, [pc, #76]	@ (8021568 <MobleConfigHealthModelAppBind+0x6c>)
 802151a:	8908      	ldrh	r0, [r1, #8]
 802151c:	b190      	cbz	r0, 8021544 <MobleConfigHealthModelAppBind+0x48>
 802151e:	4913      	ldr	r1, [pc, #76]	@ (802156c <MobleConfigHealthModelAppBind+0x70>)
 8021520:	f891 55b8 	ldrb.w	r5, [r1, #1464]	@ 0x5b8
 8021524:	2d01      	cmp	r5, #1
 8021526:	d115      	bne.n	8021554 <MobleConfigHealthModelAppBind+0x58>
 8021528:	f8b1 15ba 	ldrh.w	r1, [r1, #1466]	@ 0x5ba
 802152c:	4299      	cmp	r1, r3
 802152e:	d111      	bne.n	8021554 <MobleConfigHealthModelAppBind+0x58>
 8021530:	f894 006c 	ldrb.w	r0, [r4, #108]	@ 0x6c
 8021534:	b938      	cbnz	r0, 8021546 <MobleConfigHealthModelAppBind+0x4a>
 8021536:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8021538:	4293      	cmp	r3, r2
 802153a:	d10d      	bne.n	8021558 <MobleConfigHealthModelAppBind+0x5c>
 802153c:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 8021540:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
 8021544:	bd38      	pop	{r3, r4, r5, pc}
 8021546:	3801      	subs	r0, #1
 8021548:	bf18      	it	ne
 802154a:	2001      	movne	r0, #1
 802154c:	0040      	lsls	r0, r0, #1
 802154e:	e7f9      	b.n	8021544 <MobleConfigHealthModelAppBind+0x48>
 8021550:	2003      	movs	r0, #3
 8021552:	e7f7      	b.n	8021544 <MobleConfigHealthModelAppBind+0x48>
 8021554:	2000      	movs	r0, #0
 8021556:	e7f5      	b.n	8021544 <MobleConfigHealthModelAppBind+0x48>
 8021558:	2002      	movs	r0, #2
 802155a:	e7f3      	b.n	8021544 <MobleConfigHealthModelAppBind+0x48>
 802155c:	08031449 	.word	0x08031449
 8021560:	0802fc33 	.word	0x0802fc33
 8021564:	08030edb 	.word	0x08030edb
 8021568:	20000008 	.word	0x20000008
 802156c:	2000140c 	.word	0x2000140c

08021570 <MobleConfigHealthModelAppUnBind>:
 8021570:	b510      	push	{r4, lr}
 8021572:	b930      	cbnz	r0, 8021582 <MobleConfigHealthModelAppUnBind+0x12>
 8021574:	4b17      	ldr	r3, [pc, #92]	@ (80215d4 <MobleConfigHealthModelAppUnBind+0x64>)
 8021576:	4a18      	ldr	r2, [pc, #96]	@ (80215d8 <MobleConfigHealthModelAppUnBind+0x68>)
 8021578:	4818      	ldr	r0, [pc, #96]	@ (80215dc <MobleConfigHealthModelAppUnBind+0x6c>)
 802157a:	f641 21da 	movw	r1, #6874	@ 0x1ada
 802157e:	f006 ff2d 	bl	80283dc <__assert_func>
 8021582:	6800      	ldr	r0, [r0, #0]
 8021584:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8021586:	8820      	ldrh	r0, [r4, #0]
 8021588:	4288      	cmp	r0, r1
 802158a:	d11d      	bne.n	80215c8 <MobleConfigHealthModelAppUnBind+0x58>
 802158c:	4914      	ldr	r1, [pc, #80]	@ (80215e0 <MobleConfigHealthModelAppUnBind+0x70>)
 802158e:	8908      	ldrh	r0, [r1, #8]
 8021590:	b1a0      	cbz	r0, 80215bc <MobleConfigHealthModelAppUnBind+0x4c>
 8021592:	4914      	ldr	r1, [pc, #80]	@ (80215e4 <MobleConfigHealthModelAppUnBind+0x74>)
 8021594:	f891 05b8 	ldrb.w	r0, [r1, #1464]	@ 0x5b8
 8021598:	2801      	cmp	r0, #1
 802159a:	d117      	bne.n	80215cc <MobleConfigHealthModelAppUnBind+0x5c>
 802159c:	f8b1 15ba 	ldrh.w	r1, [r1, #1466]	@ 0x5ba
 80215a0:	4299      	cmp	r1, r3
 80215a2:	d113      	bne.n	80215cc <MobleConfigHealthModelAppUnBind+0x5c>
 80215a4:	f894 006c 	ldrb.w	r0, [r4, #108]	@ 0x6c
 80215a8:	2801      	cmp	r0, #1
 80215aa:	d108      	bne.n	80215be <MobleConfigHealthModelAppUnBind+0x4e>
 80215ac:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80215ae:	4293      	cmp	r3, r2
 80215b0:	d10e      	bne.n	80215d0 <MobleConfigHealthModelAppUnBind+0x60>
 80215b2:	2000      	movs	r0, #0
 80215b4:	f884 006c 	strb.w	r0, [r4, #108]	@ 0x6c
 80215b8:	f8a4 006a 	strh.w	r0, [r4, #106]	@ 0x6a
 80215bc:	bd10      	pop	{r4, pc}
 80215be:	3800      	subs	r0, #0
 80215c0:	bf18      	it	ne
 80215c2:	2001      	movne	r0, #1
 80215c4:	0040      	lsls	r0, r0, #1
 80215c6:	e7f9      	b.n	80215bc <MobleConfigHealthModelAppUnBind+0x4c>
 80215c8:	2003      	movs	r0, #3
 80215ca:	e7f7      	b.n	80215bc <MobleConfigHealthModelAppUnBind+0x4c>
 80215cc:	2000      	movs	r0, #0
 80215ce:	e7f5      	b.n	80215bc <MobleConfigHealthModelAppUnBind+0x4c>
 80215d0:	2002      	movs	r0, #2
 80215d2:	e7f3      	b.n	80215bc <MobleConfigHealthModelAppUnBind+0x4c>
 80215d4:	08031449 	.word	0x08031449
 80215d8:	0802fc51 	.word	0x0802fc51
 80215dc:	08030edb 	.word	0x08030edb
 80215e0:	20000008 	.word	0x20000008
 80215e4:	2000140c 	.word	0x2000140c

080215e8 <MobleConfigModel_KR_UseNewKeyDec>:
 80215e8:	4b04      	ldr	r3, [pc, #16]	@ (80215fc <MobleConfigModel_KR_UseNewKeyDec+0x14>)
 80215ea:	4418      	add	r0, r3
 80215ec:	f890 00c0 	ldrb.w	r0, [r0, #192]	@ 0xc0
 80215f0:	3801      	subs	r0, #1
 80215f2:	2801      	cmp	r0, #1
 80215f4:	bf8c      	ite	hi
 80215f6:	2000      	movhi	r0, #0
 80215f8:	2001      	movls	r0, #1
 80215fa:	4770      	bx	lr
 80215fc:	20000314 	.word	0x20000314

08021600 <BnrgmFrndMgmtTranspSegRecvd>:
 8021600:	b508      	push	{r3, lr}
 8021602:	4b06      	ldr	r3, [pc, #24]	@ (802161c <BnrgmFrndMgmtTranspSegRecvd+0x1c>)
 8021604:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8021608:	2b02      	cmp	r3, #2
 802160a:	d005      	beq.n	8021618 <BnrgmFrndMgmtTranspSegRecvd+0x18>
 802160c:	4b04      	ldr	r3, [pc, #16]	@ (8021620 <BnrgmFrndMgmtTranspSegRecvd+0x20>)
 802160e:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	@ 0xa04
 8021612:	f7f1 fe6d 	bl	80132f0 <BnrgmFrndLpnTranspSegRecvd>
 8021616:	bd08      	pop	{r3, pc}
 8021618:	2001      	movs	r0, #1
 802161a:	e7fc      	b.n	8021616 <BnrgmFrndMgmtTranspSegRecvd+0x16>
 802161c:	20000314 	.word	0x20000314
 8021620:	20002504 	.word	0x20002504

08021624 <BnrgmFrndMgmtProcessNewPacket>:
 8021624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021626:	f890 52b4 	ldrb.w	r5, [r0, #692]	@ 0x2b4
 802162a:	9c06      	ldr	r4, [sp, #24]
 802162c:	b915      	cbnz	r5, 8021634 <BnrgmFrndMgmtProcessNewPacket+0x10>
 802162e:	2501      	movs	r5, #1
 8021630:	f880 52b4 	strb.w	r5, [r0, #692]	@ 0x2b4
 8021634:	f8b1 5040 	ldrh.w	r5, [r1, #64]	@ 0x40
 8021638:	06ad      	lsls	r5, r5, #26
 802163a:	d50a      	bpl.n	8021652 <BnrgmFrndMgmtProcessNewPacket+0x2e>
 802163c:	2a09      	cmp	r2, #9
 802163e:	d848      	bhi.n	80216d2 <BnrgmFrndMgmtProcessNewPacket+0xae>
 8021640:	1e55      	subs	r5, r2, #1
 8021642:	2d01      	cmp	r5, #1
 8021644:	d902      	bls.n	802164c <BnrgmFrndMgmtProcessNewPacket+0x28>
 8021646:	1fd5      	subs	r5, r2, #7
 8021648:	2d02      	cmp	r5, #2
 802164a:	d86d      	bhi.n	8021728 <BnrgmFrndMgmtProcessNewPacket+0x104>
 802164c:	7bcd      	ldrb	r5, [r1, #15]
 802164e:	2d00      	cmp	r5, #0
 8021650:	d16a      	bne.n	8021728 <BnrgmFrndMgmtProcessNewPacket+0x104>
 8021652:	2a08      	cmp	r2, #8
 8021654:	d83d      	bhi.n	80216d2 <BnrgmFrndMgmtProcessNewPacket+0xae>
 8021656:	f44f 75f5 	mov.w	r5, #490	@ 0x1ea
 802165a:	40d5      	lsrs	r5, r2
 802165c:	07ed      	lsls	r5, r5, #31
 802165e:	d538      	bpl.n	80216d2 <BnrgmFrndMgmtProcessNewPacket+0xae>
 8021660:	4d32      	ldr	r5, [pc, #200]	@ (802172c <BnrgmFrndMgmtProcessNewPacket+0x108>)
 8021662:	f895 50be 	ldrb.w	r5, [r5, #190]	@ 0xbe
 8021666:	2d01      	cmp	r5, #1
 8021668:	d15c      	bne.n	8021724 <BnrgmFrndMgmtProcessNewPacket+0x100>
 802166a:	3a01      	subs	r2, #1
 802166c:	2a07      	cmp	r2, #7
 802166e:	d85b      	bhi.n	8021728 <BnrgmFrndMgmtProcessNewPacket+0x104>
 8021670:	e8df f002 	tbb	[pc, r2]
 8021674:	5a0c5a04 	.word	0x5a0c5a04
 8021678:	28211a13 	.word	0x28211a13
 802167c:	4a2c      	ldr	r2, [pc, #176]	@ (8021730 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 802167e:	9400      	str	r4, [sp, #0]
 8021680:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 8021684:	f004 fa9a 	bl	8025bbc <BnrgmFrndFnProcessFrndPoll>
 8021688:	b003      	add	sp, #12
 802168a:	bd30      	pop	{r4, r5, pc}
 802168c:	4a28      	ldr	r2, [pc, #160]	@ (8021730 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 802168e:	9400      	str	r4, [sp, #0]
 8021690:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 8021694:	f004 facc 	bl	8025c30 <BnrgmFrndFnProcessFrndRequest>
 8021698:	e7f6      	b.n	8021688 <BnrgmFrndMgmtProcessNewPacket+0x64>
 802169a:	4a25      	ldr	r2, [pc, #148]	@ (8021730 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 802169c:	9400      	str	r4, [sp, #0]
 802169e:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 80216a2:	f004 fc19 	bl	8025ed8 <BnrgmFrndFnProcessFrndClear>
 80216a6:	e7ef      	b.n	8021688 <BnrgmFrndMgmtProcessNewPacket+0x64>
 80216a8:	4a21      	ldr	r2, [pc, #132]	@ (8021730 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 80216aa:	9400      	str	r4, [sp, #0]
 80216ac:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 80216b0:	f7fc fc3e 	bl	801df30 <BnrgmFrndFnProcessFrndClearConf>
 80216b4:	e7e8      	b.n	8021688 <BnrgmFrndMgmtProcessNewPacket+0x64>
 80216b6:	4a1e      	ldr	r2, [pc, #120]	@ (8021730 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 80216b8:	9400      	str	r4, [sp, #0]
 80216ba:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 80216be:	f004 fcfd 	bl	80260bc <BnrgmFrndFnProcessFrndSubscrListAdd>
 80216c2:	e7e1      	b.n	8021688 <BnrgmFrndMgmtProcessNewPacket+0x64>
 80216c4:	4a1a      	ldr	r2, [pc, #104]	@ (8021730 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 80216c6:	9400      	str	r4, [sp, #0]
 80216c8:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 80216cc:	f004 fc8a 	bl	8025fe4 <BnrgmFrndFnProcessFrndSubscrListRem>
 80216d0:	e7da      	b.n	8021688 <BnrgmFrndMgmtProcessNewPacket+0x64>
 80216d2:	4d16      	ldr	r5, [pc, #88]	@ (802172c <BnrgmFrndMgmtProcessNewPacket+0x108>)
 80216d4:	f895 50bf 	ldrb.w	r5, [r5, #191]	@ 0xbf
 80216d8:	2d02      	cmp	r5, #2
 80216da:	d023      	beq.n	8021724 <BnrgmFrndMgmtProcessNewPacket+0x100>
 80216dc:	2a04      	cmp	r2, #4
 80216de:	d00a      	beq.n	80216f6 <BnrgmFrndMgmtProcessNewPacket+0xd2>
 80216e0:	2a09      	cmp	r2, #9
 80216e2:	d00f      	beq.n	8021704 <BnrgmFrndMgmtProcessNewPacket+0xe0>
 80216e4:	2a02      	cmp	r2, #2
 80216e6:	d114      	bne.n	8021712 <BnrgmFrndMgmtProcessNewPacket+0xee>
 80216e8:	4a11      	ldr	r2, [pc, #68]	@ (8021730 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 80216ea:	9400      	str	r4, [sp, #0]
 80216ec:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 80216f0:	f7f1 fdd2 	bl	8013298 <BnrgmFrndLpnProcessFrndUpdate>
 80216f4:	e7c8      	b.n	8021688 <BnrgmFrndMgmtProcessNewPacket+0x64>
 80216f6:	4a0e      	ldr	r2, [pc, #56]	@ (8021730 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 80216f8:	9400      	str	r4, [sp, #0]
 80216fa:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 80216fe:	f7f1 fdc0 	bl	8013282 <BnrgmFrndLpnProcessFrndOffer>
 8021702:	e7c1      	b.n	8021688 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021704:	4a0a      	ldr	r2, [pc, #40]	@ (8021730 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021706:	9400      	str	r4, [sp, #0]
 8021708:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 802170c:	f7f1 fdda 	bl	80132c4 <BnrgmFrndLpnProcessFrndSubscrListConf>
 8021710:	e7ba      	b.n	8021688 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021712:	2a0a      	cmp	r2, #10
 8021714:	d908      	bls.n	8021728 <BnrgmFrndMgmtProcessNewPacket+0x104>
 8021716:	4a06      	ldr	r2, [pc, #24]	@ (8021730 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021718:	9400      	str	r4, [sp, #0]
 802171a:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	@ 0xa04
 802171e:	f7f1 fdc6 	bl	80132ae <BnrgmFrndLpnProcessFrndRfu>
 8021722:	e7b1      	b.n	8021688 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021724:	2005      	movs	r0, #5
 8021726:	e7af      	b.n	8021688 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021728:	2002      	movs	r0, #2
 802172a:	e7ad      	b.n	8021688 <BnrgmFrndMgmtProcessNewPacket+0x64>
 802172c:	20000314 	.word	0x20000314
 8021730:	20002504 	.word	0x20002504

08021734 <MobleTransControl_ProcessUnSegCtrlReq>:
 8021734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021738:	4615      	mov	r5, r2
 802173a:	460e      	mov	r6, r1
 802173c:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
 8021740:	4607      	mov	r7, r0
 8021742:	b928      	cbnz	r0, 8021750 <MobleTransControl_ProcessUnSegCtrlReq+0x1c>
 8021744:	4b1c      	ldr	r3, [pc, #112]	@ (80217b8 <MobleTransControl_ProcessUnSegCtrlReq+0x84>)
 8021746:	4a1d      	ldr	r2, [pc, #116]	@ (80217bc <MobleTransControl_ProcessUnSegCtrlReq+0x88>)
 8021748:	481d      	ldr	r0, [pc, #116]	@ (80217c0 <MobleTransControl_ProcessUnSegCtrlReq+0x8c>)
 802174a:	2160      	movs	r1, #96	@ 0x60
 802174c:	f006 fe46 	bl	80283dc <__assert_func>
 8021750:	781c      	ldrb	r4, [r3, #0]
 8021752:	f895 8000 	ldrb.w	r8, [r5]
 8021756:	f004 0e7f 	and.w	lr, r4, #127	@ 0x7f
 802175a:	f36e 0806 	bfi	r8, lr, #0, #7
 802175e:	f885 8000 	strb.w	r8, [r5]
 8021762:	781b      	ldrb	r3, [r3, #0]
 8021764:	fa5f f888 	uxtb.w	r8, r8
 8021768:	09db      	lsrs	r3, r3, #7
 802176a:	f363 18c7 	bfi	r8, r3, #7, #1
 802176e:	f885 8000 	strb.w	r8, [r5]
 8021772:	f8b1 5040 	ldrh.w	r5, [r1, #64]	@ 0x40
 8021776:	f415 7500 	ands.w	r5, r5, #512	@ 0x200
 802177a:	4674      	mov	r4, lr
 802177c:	d019      	beq.n	80217b2 <MobleTransControl_ProcessUnSegCtrlReq+0x7e>
 802177e:	2c09      	cmp	r4, #9
 8021780:	d808      	bhi.n	8021794 <MobleTransControl_ProcessUnSegCtrlReq+0x60>
 8021782:	b17c      	cbz	r4, 80217a4 <MobleTransControl_ProcessUnSegCtrlReq+0x70>
 8021784:	4613      	mov	r3, r2
 8021786:	f8cd c018 	str.w	ip, [sp, #24]
 802178a:	4672      	mov	r2, lr
 802178c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021790:	f7ff bf48 	b.w	8021624 <BnrgmFrndMgmtProcessNewPacket>
 8021794:	2c0a      	cmp	r4, #10
 8021796:	d105      	bne.n	80217a4 <MobleTransControl_ProcessUnSegCtrlReq+0x70>
 8021798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802179c:	4663      	mov	r3, ip
 802179e:	310c      	adds	r1, #12
 80217a0:	f7fa bbec 	b.w	801bf7c <BnrgmTransControlProcessHeartbeat>
 80217a4:	4613      	mov	r3, r2
 80217a6:	f8cd c018 	str.w	ip, [sp, #24]
 80217aa:	4672      	mov	r2, lr
 80217ac:	4631      	mov	r1, r6
 80217ae:	4638      	mov	r0, r7
 80217b0:	e7ec      	b.n	802178c <MobleTransControl_ProcessUnSegCtrlReq+0x58>
 80217b2:	4628      	mov	r0, r5
 80217b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217b8:	08030e80 	.word	0x08030e80
 80217bc:	0802fcb5 	.word	0x0802fcb5
 80217c0:	080315b3 	.word	0x080315b3

080217c4 <MobleTransportProcessData>:
 80217c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217c8:	f8b1 4040 	ldrh.w	r4, [r1, #64]	@ 0x40
 80217cc:	b093      	sub	sp, #76	@ 0x4c
 80217ce:	460d      	mov	r5, r1
 80217d0:	4691      	mov	r9, r2
 80217d2:	461e      	mov	r6, r3
 80217d4:	4607      	mov	r7, r0
 80217d6:	b930      	cbnz	r0, 80217e6 <MobleTransportProcessData+0x22>
 80217d8:	4b93      	ldr	r3, [pc, #588]	@ (8021a28 <MobleTransportProcessData+0x264>)
 80217da:	4a94      	ldr	r2, [pc, #592]	@ (8021a2c <MobleTransportProcessData+0x268>)
 80217dc:	f240 1189 	movw	r1, #393	@ 0x189
 80217e0:	4893      	ldr	r0, [pc, #588]	@ (8021a30 <MobleTransportProcessData+0x26c>)
 80217e2:	f006 fdfb 	bl	80283dc <__assert_func>
 80217e6:	b922      	cbnz	r2, 80217f2 <MobleTransportProcessData+0x2e>
 80217e8:	4b92      	ldr	r3, [pc, #584]	@ (8021a34 <MobleTransportProcessData+0x270>)
 80217ea:	4a90      	ldr	r2, [pc, #576]	@ (8021a2c <MobleTransportProcessData+0x268>)
 80217ec:	f240 118b 	movw	r1, #395	@ 0x18b
 80217f0:	e7f6      	b.n	80217e0 <MobleTransportProcessData+0x1c>
 80217f2:	f103 3bff 	add.w	fp, r3, #4294967295
 80217f6:	f1bb 0f0f 	cmp.w	fp, #15
 80217fa:	f200 8112 	bhi.w	8021a22 <MobleTransportProcessData+0x25e>
 80217fe:	4648      	mov	r0, r9
 8021800:	aa0e      	add	r2, sp, #56	@ 0x38
 8021802:	310c      	adds	r1, #12
 8021804:	f7fa fab2 	bl	801bd6c <MobleTransportParseHdr>
 8021808:	06a0      	lsls	r0, r4, #26
 802180a:	d506      	bpl.n	802181a <MobleTransportProcessData+0x56>
 802180c:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 8021810:	2b03      	cmp	r3, #3
 8021812:	d016      	beq.n	8021842 <MobleTransportProcessData+0x7e>
 8021814:	d91b      	bls.n	802184e <MobleTransportProcessData+0x8a>
 8021816:	2b04      	cmp	r3, #4
 8021818:	d013      	beq.n	8021842 <MobleTransportProcessData+0x7e>
 802181a:	7b28      	ldrb	r0, [r5, #12]
 802181c:	8aaa      	ldrh	r2, [r5, #20]
 802181e:	23a0      	movs	r3, #160	@ 0xa0
 8021820:	fb03 7000 	mla	r0, r3, r0, r7
 8021824:	2114      	movs	r1, #20
 8021826:	692b      	ldr	r3, [r5, #16]
 8021828:	3010      	adds	r0, #16
 802182a:	f7fa fc15 	bl	801c058 <MobleAddressIsNew>
 802182e:	4604      	mov	r4, r0
 8021830:	b188      	cbz	r0, 8021856 <MobleTransportProcessData+0x92>
 8021832:	1e44      	subs	r4, r0, #1
 8021834:	bf18      	it	ne
 8021836:	2401      	movne	r4, #1
 8021838:	0064      	lsls	r4, r4, #1
 802183a:	4620      	mov	r0, r4
 802183c:	b013      	add	sp, #76	@ 0x4c
 802183e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021842:	f89d 3039 	ldrb.w	r3, [sp, #57]	@ 0x39
 8021846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802184a:	2b0a      	cmp	r3, #10
 802184c:	d1e5      	bne.n	802181a <MobleTransportProcessData+0x56>
 802184e:	4638      	mov	r0, r7
 8021850:	f7ff fed6 	bl	8021600 <BnrgmFrndMgmtTranspSegRecvd>
 8021854:	e7e1      	b.n	802181a <MobleTransportProcessData+0x56>
 8021856:	f89d a038 	ldrb.w	sl, [sp, #56]	@ 0x38
 802185a:	f1ba 0f04 	cmp.w	sl, #4
 802185e:	d866      	bhi.n	802192e <MobleTransportProcessData+0x16a>
 8021860:	e8df f00a 	tbb	[pc, sl]
 8021864:	a78ccf03 	.word	0xa78ccf03
 8021868:	ca          	.byte	0xca
 8021869:	00          	.byte	0x00
 802186a:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 802186e:	0559      	lsls	r1, r3, #21
 8021870:	d506      	bpl.n	8021880 <MobleTransportProcessData+0xbc>
 8021872:	9600      	str	r6, [sp, #0]
 8021874:	464b      	mov	r3, r9
 8021876:	aa0e      	add	r2, sp, #56	@ 0x38
 8021878:	4629      	mov	r1, r5
 802187a:	4638      	mov	r0, r7
 802187c:	f7fc fb48 	bl	801df10 <BnrgmFrndMgmtQueLpnPkt>
 8021880:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 8021884:	059a      	lsls	r2, r3, #22
 8021886:	d5d8      	bpl.n	802183a <MobleTransportProcessData+0x76>
 8021888:	4b6b      	ldr	r3, [pc, #428]	@ (8021a38 <MobleTransportProcessData+0x274>)
 802188a:	f8b3 094e 	ldrh.w	r0, [r3, #2382]	@ 0x94e
 802188e:	f7f8 ffef 	bl	801a870 <MobleMemAlloc>
 8021892:	4680      	mov	r8, r0
 8021894:	2800      	cmp	r0, #0
 8021896:	d04a      	beq.n	802192e <MobleTransportProcessData+0x16a>
 8021898:	f109 0301 	add.w	r3, r9, #1
 802189c:	9308      	str	r3, [sp, #32]
 802189e:	683b      	ldr	r3, [r7, #0]
 80218a0:	7f1b      	ldrb	r3, [r3, #28]
 80218a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80218a4:	8aab      	ldrh	r3, [r5, #20]
 80218a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80218a8:	4654      	mov	r4, sl
 80218aa:	f04f 0900 	mov.w	r9, #0
 80218ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80218b0:	fa5f f389 	uxtb.w	r3, r9
 80218b4:	429a      	cmp	r2, r3
 80218b6:	d805      	bhi.n	80218c4 <MobleTransportProcessData+0x100>
 80218b8:	2c01      	cmp	r4, #1
 80218ba:	d92e      	bls.n	802191a <MobleTransportProcessData+0x156>
 80218bc:	4640      	mov	r0, r8
 80218be:	f7f9 f861 	bl	801a984 <MobleMemFree>
 80218c2:	e7ba      	b.n	802183a <MobleTransportProcessData+0x76>
 80218c4:	fa1f f389 	uxth.w	r3, r9
 80218c8:	f895 0042 	ldrb.w	r0, [r5, #66]	@ 0x42
 80218cc:	8aaa      	ldrh	r2, [r5, #20]
 80218ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80218d0:	f7ff fe8a 	bl	80215e8 <MobleConfigModel_KR_UseNewKeyDec>
 80218d4:	2300      	movs	r3, #0
 80218d6:	e9cd 5306 	strd	r5, r3, [sp, #24]
 80218da:	9b08      	ldr	r3, [sp, #32]
 80218dc:	9302      	str	r3, [sp, #8]
 80218de:	fa12 f289 	uxtah	r2, r2, r9
 80218e2:	8aeb      	ldrh	r3, [r5, #22]
 80218e4:	f89d 403a 	ldrb.w	r4, [sp, #58]	@ 0x3a
 80218e8:	f89d 103b 	ldrb.w	r1, [sp, #59]	@ 0x3b
 80218ec:	f8cd b00c 	str.w	fp, [sp, #12]
 80218f0:	b292      	uxth	r2, r2
 80218f2:	e9cd 2300 	strd	r2, r3, [sp]
 80218f6:	2200      	movs	r2, #0
 80218f8:	e9cd 8004 	strd	r8, r0, [sp, #16]
 80218fc:	1aa0      	subs	r0, r4, r2
 80218fe:	692b      	ldr	r3, [r5, #16]
 8021900:	bf18      	it	ne
 8021902:	2001      	movne	r0, #1
 8021904:	f7f9 fd7a 	bl	801b3fc <MoblePalCryptoDecryptApp>
 8021908:	f109 0901 	add.w	r9, r9, #1
 802190c:	4604      	mov	r4, r0
 802190e:	2800      	cmp	r0, #0
 8021910:	d1cd      	bne.n	80218ae <MobleTransportProcessData+0xea>
 8021912:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	@ 0x28
 8021916:	4413      	add	r3, r2
 8021918:	82ab      	strh	r3, [r5, #20]
 802191a:	1f71      	subs	r1, r6, #5
 802191c:	aa0d      	add	r2, sp, #52	@ 0x34
 802191e:	4640      	mov	r0, r8
 8021920:	f7fe fde4 	bl	80204ec <MobleModelGetOpcodeValue>
 8021924:	4604      	mov	r4, r0
 8021926:	b920      	cbnz	r0, 8021932 <MobleTransportProcessData+0x16e>
 8021928:	4640      	mov	r0, r8
 802192a:	f7f9 f82b 	bl	801a984 <MobleMemFree>
 802192e:	2402      	movs	r4, #2
 8021930:	e783      	b.n	802183a <MobleTransportProcessData+0x76>
 8021932:	2801      	cmp	r0, #1
 8021934:	d116      	bne.n	8021964 <MobleTransportProcessData+0x1a0>
 8021936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021938:	2b03      	cmp	r3, #3
 802193a:	d803      	bhi.n	8021944 <MobleTransportProcessData+0x180>
 802193c:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8021940:	2b01      	cmp	r3, #1
 8021942:	d0f1      	beq.n	8021928 <MobleTransportProcessData+0x164>
 8021944:	9100      	str	r1, [sp, #0]
 8021946:	4643      	mov	r3, r8
 8021948:	f10d 0239 	add.w	r2, sp, #57	@ 0x39
 802194c:	4629      	mov	r1, r5
 802194e:	4638      	mov	r0, r7
 8021950:	f7f9 fec0 	bl	801b6d4 <MobleApplicationProcessPacket>
 8021954:	4604      	mov	r4, r0
 8021956:	2c01      	cmp	r4, #1
 8021958:	4640      	mov	r0, r8
 802195a:	d8b0      	bhi.n	80218be <MobleTransportProcessData+0xfa>
 802195c:	f7f9 f812 	bl	801a984 <MobleMemFree>
 8021960:	4654      	mov	r4, sl
 8021962:	e76a      	b.n	802183a <MobleTransportProcessData+0x76>
 8021964:	2802      	cmp	r0, #2
 8021966:	d1ed      	bne.n	8021944 <MobleTransportProcessData+0x180>
 8021968:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802196a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 802196e:	2b4e      	cmp	r3, #78	@ 0x4e
 8021970:	d8e8      	bhi.n	8021944 <MobleTransportProcessData+0x180>
 8021972:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8021976:	2b01      	cmp	r3, #1
 8021978:	d1e4      	bne.n	8021944 <MobleTransportProcessData+0x180>
 802197a:	e79f      	b.n	80218bc <MobleTransportProcessData+0xf8>
 802197c:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 8021980:	055b      	lsls	r3, r3, #21
 8021982:	d506      	bpl.n	8021992 <MobleTransportProcessData+0x1ce>
 8021984:	9600      	str	r6, [sp, #0]
 8021986:	464b      	mov	r3, r9
 8021988:	aa0e      	add	r2, sp, #56	@ 0x38
 802198a:	4629      	mov	r1, r5
 802198c:	4638      	mov	r0, r7
 802198e:	f7fc fabf 	bl	801df10 <BnrgmFrndMgmtQueLpnPkt>
 8021992:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 8021996:	0598      	lsls	r0, r3, #22
 8021998:	f57f af4f 	bpl.w	802183a <MobleTransportProcessData+0x76>
 802199c:	2e07      	cmp	r6, #7
 802199e:	d1c6      	bne.n	802192e <MobleTransportProcessData+0x16a>
 80219a0:	f109 0303 	add.w	r3, r9, #3
 80219a4:	f10d 0239 	add.w	r2, sp, #57	@ 0x39
 80219a8:	4629      	mov	r1, r5
 80219aa:	4638      	mov	r0, r7
 80219ac:	f000 fbcc 	bl	8022148 <MobleTransSarProcessAck>
 80219b0:	e743      	b.n	802183a <MobleTransportProcessData+0x76>
 80219b2:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 80219b6:	0559      	lsls	r1, r3, #21
 80219b8:	d50c      	bpl.n	80219d4 <MobleTransportProcessData+0x210>
 80219ba:	f89d 3039 	ldrb.w	r3, [sp, #57]	@ 0x39
 80219be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80219c2:	2b0a      	cmp	r3, #10
 80219c4:	d106      	bne.n	80219d4 <MobleTransportProcessData+0x210>
 80219c6:	9600      	str	r6, [sp, #0]
 80219c8:	464b      	mov	r3, r9
 80219ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80219cc:	4629      	mov	r1, r5
 80219ce:	4638      	mov	r0, r7
 80219d0:	f7fc fa9e 	bl	801df10 <BnrgmFrndMgmtQueLpnPkt>
 80219d4:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 80219d8:	059a      	lsls	r2, r3, #22
 80219da:	f57f af2e 	bpl.w	802183a <MobleTransportProcessData+0x76>
 80219de:	f109 0301 	add.w	r3, r9, #1
 80219e2:	9300      	str	r3, [sp, #0]
 80219e4:	f8cd b004 	str.w	fp, [sp, #4]
 80219e8:	464b      	mov	r3, r9
 80219ea:	f10d 0239 	add.w	r2, sp, #57	@ 0x39
 80219ee:	4629      	mov	r1, r5
 80219f0:	4638      	mov	r0, r7
 80219f2:	f7ff fe9f 	bl	8021734 <MobleTransControl_ProcessUnSegCtrlReq>
 80219f6:	e720      	b.n	802183a <MobleTransportProcessData+0x76>
 80219f8:	f8b5 3040 	ldrh.w	r3, [r5, #64]	@ 0x40
 80219fc:	059b      	lsls	r3, r3, #22
 80219fe:	f57f af1c 	bpl.w	802183a <MobleTransportProcessData+0x76>
 8021a02:	2e04      	cmp	r6, #4
 8021a04:	d993      	bls.n	802192e <MobleTransportProcessData+0x16a>
 8021a06:	f995 3018 	ldrsb.w	r3, [r5, #24]
 8021a0a:	9301      	str	r3, [sp, #4]
 8021a0c:	3e04      	subs	r6, #4
 8021a0e:	9600      	str	r6, [sp, #0]
 8021a10:	f109 0304 	add.w	r3, r9, #4
 8021a14:	f10d 0239 	add.w	r2, sp, #57	@ 0x39
 8021a18:	4629      	mov	r1, r5
 8021a1a:	4638      	mov	r0, r7
 8021a1c:	f004 fd6e 	bl	80264fc <MobleTransSarProcessSeg>
 8021a20:	e70b      	b.n	802183a <MobleTransportProcessData+0x76>
 8021a22:	2403      	movs	r4, #3
 8021a24:	e709      	b.n	802183a <MobleTransportProcessData+0x76>
 8021a26:	bf00      	nop
 8021a28:	08030e80 	.word	0x08030e80
 8021a2c:	0802fcdb 	.word	0x0802fcdb
 8021a30:	08031310 	.word	0x08031310
 8021a34:	080310cf 	.word	0x080310cf
 8021a38:	2000140c 	.word	0x2000140c

08021a3c <MobleNetworkProcessData>:
 8021a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a40:	b0a9      	sub	sp, #164	@ 0xa4
 8021a42:	4604      	mov	r4, r0
 8021a44:	460d      	mov	r5, r1
 8021a46:	4617      	mov	r7, r2
 8021a48:	2100      	movs	r1, #0
 8021a4a:	224c      	movs	r2, #76	@ 0x4c
 8021a4c:	a815      	add	r0, sp, #84	@ 0x54
 8021a4e:	f89d 90c8 	ldrb.w	r9, [sp, #200]	@ 0xc8
 8021a52:	469b      	mov	fp, r3
 8021a54:	f007 fbaa 	bl	80291ac <memset>
 8021a58:	2228      	movs	r2, #40	@ 0x28
 8021a5a:	2100      	movs	r1, #0
 8021a5c:	a80b      	add	r0, sp, #44	@ 0x2c
 8021a5e:	f007 fba5 	bl	80291ac <memset>
 8021a62:	b934      	cbnz	r4, 8021a72 <MobleNetworkProcessData+0x36>
 8021a64:	4bac      	ldr	r3, [pc, #688]	@ (8021d18 <MobleNetworkProcessData+0x2dc>)
 8021a66:	4aad      	ldr	r2, [pc, #692]	@ (8021d1c <MobleNetworkProcessData+0x2e0>)
 8021a68:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8021a6c:	48ac      	ldr	r0, [pc, #688]	@ (8021d20 <MobleNetworkProcessData+0x2e4>)
 8021a6e:	f006 fcb5 	bl	80283dc <__assert_func>
 8021a72:	b927      	cbnz	r7, 8021a7e <MobleNetworkProcessData+0x42>
 8021a74:	4bab      	ldr	r3, [pc, #684]	@ (8021d24 <MobleNetworkProcessData+0x2e8>)
 8021a76:	4aa9      	ldr	r2, [pc, #676]	@ (8021d1c <MobleNetworkProcessData+0x2e0>)
 8021a78:	f240 11d9 	movw	r1, #473	@ 0x1d9
 8021a7c:	e7f6      	b.n	8021a6c <MobleNetworkProcessData+0x30>
 8021a7e:	f1ab 030e 	sub.w	r3, fp, #14
 8021a82:	2b0f      	cmp	r3, #15
 8021a84:	d904      	bls.n	8021a90 <MobleNetworkProcessData+0x54>
 8021a86:	2502      	movs	r5, #2
 8021a88:	4628      	mov	r0, r5
 8021a8a:	b029      	add	sp, #164	@ 0xa4
 8021a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a90:	f99d 30cc 	ldrsb.w	r3, [sp, #204]	@ 0xcc
 8021a94:	f88d b05c 	strb.w	fp, [sp, #92]	@ 0x5c
 8021a98:	e9cd 5715 	strd	r5, r7, [sp, #84]	@ 0x54
 8021a9c:	f88d 306c 	strb.w	r3, [sp, #108]	@ 0x6c
 8021aa0:	f1b9 0f00 	cmp.w	r9, #0
 8021aa4:	d002      	beq.n	8021aac <MobleNetworkProcessData+0x70>
 8021aa6:	2340      	movs	r3, #64	@ 0x40
 8021aa8:	f8ad 3094 	strh.w	r3, [sp, #148]	@ 0x94
 8021aac:	ae18      	add	r6, sp, #96	@ 0x60
 8021aae:	4631      	mov	r1, r6
 8021ab0:	4638      	mov	r0, r7
 8021ab2:	f7f7 fdb3 	bl	801961c <MoblePalCryptoParseNetHdr>
 8021ab6:	f89d 1061 	ldrb.w	r1, [sp, #97]	@ 0x61
 8021aba:	f10d 006e 	add.w	r0, sp, #110	@ 0x6e
 8021abe:	f7f8 f8fb 	bl	8019cb8 <BnrgmPalCryptoMatchNid>
 8021ac2:	4605      	mov	r5, r0
 8021ac4:	2800      	cmp	r0, #0
 8021ac6:	d1de      	bne.n	8021a86 <MobleNetworkProcessData+0x4a>
 8021ac8:	f1ab 0b04 	sub.w	fp, fp, #4
 8021acc:	f894 a1d1 	ldrb.w	sl, [r4, #465]	@ 0x1d1
 8021ad0:	445f      	add	r7, fp
 8021ad2:	4680      	mov	r8, r0
 8021ad4:	f04f 0b05 	mov.w	fp, #5
 8021ad8:	fa5f f388 	uxtb.w	r3, r8
 8021adc:	459a      	cmp	sl, r3
 8021ade:	d878      	bhi.n	8021bd2 <MobleNetworkProcessData+0x196>
 8021ae0:	a907      	add	r1, sp, #28
 8021ae2:	a815      	add	r0, sp, #84	@ 0x54
 8021ae4:	f7f9 fb16 	bl	801b114 <BnrgmPalCryptoDecryptNetwork>
 8021ae8:	2801      	cmp	r0, #1
 8021aea:	d8cc      	bhi.n	8021a86 <MobleNetworkProcessData+0x4a>
 8021aec:	f89d 3062 	ldrb.w	r3, [sp, #98]	@ 0x62
 8021af0:	f89d 705c 	ldrb.w	r7, [sp, #92]	@ 0x5c
 8021af4:	f8bd 0068 	ldrh.w	r0, [sp, #104]	@ 0x68
 8021af8:	2b00      	cmp	r3, #0
 8021afa:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	@ 0x68
 8021afe:	bf14      	ite	ne
 8021b00:	f04f 0808 	movne.w	r8, #8
 8021b04:	f04f 0804 	moveq.w	r8, #4
 8021b08:	2b00      	cmp	r3, #0
 8021b0a:	ddbc      	ble.n	8021a86 <MobleNetworkProcessData+0x4a>
 8021b0c:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 8021b10:	2b00      	cmp	r3, #0
 8021b12:	d0b8      	beq.n	8021a86 <MobleNetworkProcessData+0x4a>
 8021b14:	6821      	ldr	r1, [r4, #0]
 8021b16:	f891 c01c 	ldrb.w	ip, [r1, #28]
 8021b1a:	2200      	movs	r2, #0
 8021b1c:	b2d3      	uxtb	r3, r2
 8021b1e:	4563      	cmp	r3, ip
 8021b20:	d36e      	bcc.n	8021c00 <MobleNetworkProcessData+0x1c4>
 8021b22:	f1b9 0f00 	cmp.w	r9, #0
 8021b26:	d007      	beq.n	8021b38 <MobleNetworkProcessData+0xfc>
 8021b28:	4b7f      	ldr	r3, [pc, #508]	@ (8021d28 <MobleNetworkProcessData+0x2ec>)
 8021b2a:	2201      	movs	r2, #1
 8021b2c:	f883 26f4 	strb.w	r2, [r3, #1780]	@ 0x6f4
 8021b30:	f8a3 06f6 	strh.w	r0, [r3, #1782]	@ 0x6f6
 8021b34:	f7fb fc2c 	bl	801d390 <BnrgmProxyConfig_AddProxyClient_Filter>
 8021b38:	f1a7 0309 	sub.w	r3, r7, #9
 8021b3c:	eba3 0308 	sub.w	r3, r3, r8
 8021b40:	a915      	add	r1, sp, #84	@ 0x54
 8021b42:	4620      	mov	r0, r4
 8021b44:	9305      	str	r3, [sp, #20]
 8021b46:	f7fe fff7 	bl	8020b38 <MobleNetworkDecideRetransmission>
 8021b4a:	f8bd 2094 	ldrh.w	r2, [sp, #148]	@ 0x94
 8021b4e:	9b05      	ldr	r3, [sp, #20]
 8021b50:	f402 62c0 	and.w	r2, r2, #1536	@ 0x600
 8021b54:	b12a      	cbz	r2, 8021b62 <MobleNetworkProcessData+0x126>
 8021b56:	aa07      	add	r2, sp, #28
 8021b58:	a915      	add	r1, sp, #84	@ 0x54
 8021b5a:	4620      	mov	r0, r4
 8021b5c:	f7ff fe32 	bl	80217c4 <MobleTransportProcessData>
 8021b60:	9b05      	ldr	r3, [sp, #20]
 8021b62:	f894 21d1 	ldrb.w	r2, [r4, #465]	@ 0x1d1
 8021b66:	f8bd e068 	ldrh.w	lr, [sp, #104]	@ 0x68
 8021b6a:	f8dd c064 	ldr.w	ip, [sp, #100]	@ 0x64
 8021b6e:	f89d 7060 	ldrb.w	r7, [sp, #96]	@ 0x60
 8021b72:	f894 a1d0 	ldrb.w	sl, [r4, #464]	@ 0x1d0
 8021b76:	f04f 0900 	mov.w	r9, #0
 8021b7a:	2105      	movs	r1, #5
 8021b7c:	fa5f f089 	uxtb.w	r0, r9
 8021b80:	4282      	cmp	r2, r0
 8021b82:	d844      	bhi.n	8021c0e <MobleNetworkProcessData+0x1d2>
 8021b84:	4452      	add	r2, sl
 8021b86:	fbb2 f0f1 	udiv	r0, r2, r1
 8021b8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021b8e:	f89d 805c 	ldrb.w	r8, [sp, #92]	@ 0x5c
 8021b92:	1a12      	subs	r2, r2, r0
 8021b94:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8021b96:	4440      	add	r0, r8
 8021b98:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8021b9c:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8021ba0:	f8c2 0188 	str.w	r0, [r2, #392]	@ 0x188
 8021ba4:	f882 818c 	strb.w	r8, [r2, #396]	@ 0x18c
 8021ba8:	f8a2 e180 	strh.w	lr, [r2, #384]	@ 0x180
 8021bac:	f8c2 c184 	str.w	ip, [r2, #388]	@ 0x184
 8021bb0:	f882 718d 	strb.w	r7, [r2, #397]	@ 0x18d
 8021bb4:	f894 21d1 	ldrb.w	r2, [r4, #465]	@ 0x1d1
 8021bb8:	2a04      	cmp	r2, #4
 8021bba:	d941      	bls.n	8021c40 <MobleNetworkProcessData+0x204>
 8021bbc:	f894 21d0 	ldrb.w	r2, [r4, #464]	@ 0x1d0
 8021bc0:	3201      	adds	r2, #1
 8021bc2:	fbb2 f1f1 	udiv	r1, r2, r1
 8021bc6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8021bca:	1a52      	subs	r2, r2, r1
 8021bcc:	f884 21d0 	strb.w	r2, [r4, #464]	@ 0x1d0
 8021bd0:	e039      	b.n	8021c46 <MobleNetworkProcessData+0x20a>
 8021bd2:	f894 01d0 	ldrb.w	r0, [r4, #464]	@ 0x1d0
 8021bd6:	4440      	add	r0, r8
 8021bd8:	fbb0 f3fb 	udiv	r3, r0, fp
 8021bdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8021be0:	1ac0      	subs	r0, r0, r3
 8021be2:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8021be6:	2204      	movs	r2, #4
 8021be8:	4639      	mov	r1, r7
 8021bea:	f500 70c4 	add.w	r0, r0, #392	@ 0x188
 8021bee:	f007 fab3 	bl	8029158 <memcmp>
 8021bf2:	f108 0801 	add.w	r8, r8, #1
 8021bf6:	2800      	cmp	r0, #0
 8021bf8:	f47f af6e 	bne.w	8021ad8 <MobleNetworkProcessData+0x9c>
 8021bfc:	2501      	movs	r5, #1
 8021bfe:	e743      	b.n	8021a88 <MobleNetworkProcessData+0x4c>
 8021c00:	884b      	ldrh	r3, [r1, #2]
 8021c02:	4413      	add	r3, r2
 8021c04:	4298      	cmp	r0, r3
 8021c06:	f102 0201 	add.w	r2, r2, #1
 8021c0a:	d187      	bne.n	8021b1c <MobleNetworkProcessData+0xe0>
 8021c0c:	e7f6      	b.n	8021bfc <MobleNetworkProcessData+0x1c0>
 8021c0e:	eb09 080a 	add.w	r8, r9, sl
 8021c12:	fbb8 f0f1 	udiv	r0, r8, r1
 8021c16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021c1a:	eba8 0800 	sub.w	r8, r8, r0
 8021c1e:	eb04 1808 	add.w	r8, r4, r8, lsl #4
 8021c22:	f8b8 0180 	ldrh.w	r0, [r8, #384]	@ 0x180
 8021c26:	4570      	cmp	r0, lr
 8021c28:	d107      	bne.n	8021c3a <MobleNetworkProcessData+0x1fe>
 8021c2a:	f8d8 0184 	ldr.w	r0, [r8, #388]	@ 0x184
 8021c2e:	4560      	cmp	r0, ip
 8021c30:	d103      	bne.n	8021c3a <MobleNetworkProcessData+0x1fe>
 8021c32:	f898 018d 	ldrb.w	r0, [r8, #397]	@ 0x18d
 8021c36:	42b8      	cmp	r0, r7
 8021c38:	d0e0      	beq.n	8021bfc <MobleNetworkProcessData+0x1c0>
 8021c3a:	f109 0901 	add.w	r9, r9, #1
 8021c3e:	e79d      	b.n	8021b7c <MobleNetworkProcessData+0x140>
 8021c40:	3201      	adds	r2, #1
 8021c42:	f884 21d1 	strb.w	r2, [r4, #465]	@ 0x1d1
 8021c46:	f8bd 7094 	ldrh.w	r7, [sp, #148]	@ 0x94
 8021c4a:	05fa      	lsls	r2, r7, #23
 8021c4c:	d52d      	bpl.n	8021caa <MobleNetworkProcessData+0x26e>
 8021c4e:	06b8      	lsls	r0, r7, #26
 8021c50:	f89d 8063 	ldrb.w	r8, [sp, #99]	@ 0x63
 8021c54:	d541      	bpl.n	8021cda <MobleNetworkProcessData+0x29e>
 8021c56:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 8021d2c <MobleNetworkProcessData+0x2f0>
 8021c5a:	f89e 20be 	ldrb.w	r2, [lr, #190]	@ 0xbe
 8021c5e:	2a01      	cmp	r2, #1
 8021c60:	d123      	bne.n	8021caa <MobleNetworkProcessData+0x26e>
 8021c62:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8021c66:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8021c6a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8021c6e:	f89d 2096 	ldrb.w	r2, [sp, #150]	@ 0x96
 8021c72:	f88d 2048 	strb.w	r2, [sp, #72]	@ 0x48
 8021c76:	f8bd 2098 	ldrh.w	r2, [sp, #152]	@ 0x98
 8021c7a:	f8ad 204a 	strh.w	r2, [sp, #74]	@ 0x4a
 8021c7e:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8021c82:	f88d 204e 	strb.w	r2, [sp, #78]	@ 0x4e
 8021c86:	f027 0720 	bic.w	r7, r7, #32
 8021c8a:	f89e 20b8 	ldrb.w	r2, [lr, #184]	@ 0xb8
 8021c8e:	f8ad 7046 	strh.w	r7, [sp, #70]	@ 0x46
 8021c92:	3201      	adds	r2, #1
 8021c94:	f88d 204f 	strb.w	r2, [sp, #79]	@ 0x4f
 8021c98:	f108 38ff 	add.w	r8, r8, #4294967295
 8021c9c:	aa07      	add	r2, sp, #28
 8021c9e:	a90b      	add	r1, sp, #44	@ 0x2c
 8021ca0:	4620      	mov	r0, r4
 8021ca2:	f88d 803b 	strb.w	r8, [sp, #59]	@ 0x3b
 8021ca6:	f7fe faa3 	bl	80201f0 <MobleNetworkSendDataEx>
 8021caa:	f89d 3063 	ldrb.w	r3, [sp, #99]	@ 0x63
 8021cae:	f99d 606c 	ldrsb.w	r6, [sp, #108]	@ 0x6c
 8021cb2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8021cb4:	2b00      	cmp	r3, #0
 8021cb6:	bf08      	it	eq
 8021cb8:	f8bd 0068 	ldrheq.w	r0, [sp, #104]	@ 0x68
 8021cbc:	f04f 0300 	mov.w	r3, #0
 8021cc0:	bf18      	it	ne
 8021cc2:	4618      	movne	r0, r3
 8021cc4:	e9cd 6001 	strd	r6, r0, [sp, #4]
 8021cc8:	9300      	str	r3, [sp, #0]
 8021cca:	bf0c      	ite	eq
 8021ccc:	2102      	moveq	r1, #2
 8021cce:	2103      	movne	r1, #3
 8021cd0:	2301      	movs	r3, #1
 8021cd2:	4620      	mov	r0, r4
 8021cd4:	f7fb f82f 	bl	801cd36 <BLEMesh_UpdateNeighbors>
 8021cd8:	e6d6      	b.n	8021a88 <MobleNetworkProcessData+0x4c>
 8021cda:	9305      	str	r3, [sp, #20]
 8021cdc:	f7fe ff22 	bl	8020b24 <MobleConfigModelGetRelayEnableStatus>
 8021ce0:	9b05      	ldr	r3, [sp, #20]
 8021ce2:	b908      	cbnz	r0, 8021ce8 <MobleNetworkProcessData+0x2ac>
 8021ce4:	067a      	lsls	r2, r7, #25
 8021ce6:	d5e0      	bpl.n	8021caa <MobleNetworkProcessData+0x26e>
 8021ce8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8021cec:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8021cf0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8021cf4:	f89d 2096 	ldrb.w	r2, [sp, #150]	@ 0x96
 8021cf8:	f88d 2048 	strb.w	r2, [sp, #72]	@ 0x48
 8021cfc:	f8bd 2098 	ldrh.w	r2, [sp, #152]	@ 0x98
 8021d00:	f8ad 204a 	strh.w	r2, [sp, #74]	@ 0x4a
 8021d04:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8021d08:	f88d 204e 	strb.w	r2, [sp, #78]	@ 0x4e
 8021d0c:	4a07      	ldr	r2, [pc, #28]	@ (8021d2c <MobleNetworkProcessData+0x2f0>)
 8021d0e:	f8ad 7046 	strh.w	r7, [sp, #70]	@ 0x46
 8021d12:	f892 20b8 	ldrb.w	r2, [r2, #184]	@ 0xb8
 8021d16:	e7bc      	b.n	8021c92 <MobleNetworkProcessData+0x256>
 8021d18:	08030e80 	.word	0x08030e80
 8021d1c:	0802fcf5 	.word	0x0802fcf5
 8021d20:	0803135e 	.word	0x0803135e
 8021d24:	08030f20 	.word	0x08030f20
 8021d28:	20002504 	.word	0x20002504
 8021d2c:	20000314 	.word	0x20000314

08021d30 <MobleStackProcessData>:
 8021d30:	b513      	push	{r0, r1, r4, lr}
 8021d32:	f99d 4010 	ldrsb.w	r4, [sp, #16]
 8021d36:	e9cd 3400 	strd	r3, r4, [sp]
 8021d3a:	4613      	mov	r3, r2
 8021d3c:	460a      	mov	r2, r1
 8021d3e:	4601      	mov	r1, r0
 8021d40:	4802      	ldr	r0, [pc, #8]	@ (8021d4c <MobleStackProcessData+0x1c>)
 8021d42:	f7ff fe7b 	bl	8021a3c <MobleNetworkProcessData>
 8021d46:	b002      	add	sp, #8
 8021d48:	bd10      	pop	{r4, pc}
 8021d4a:	bf00      	nop
 8021d4c:	20001a8c 	.word	0x20001a8c

08021d50 <MobleNetworkSendData>:
 8021d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d54:	460d      	mov	r5, r1
 8021d56:	b098      	sub	sp, #96	@ 0x60
 8021d58:	4606      	mov	r6, r0
 8021d5a:	4617      	mov	r7, r2
 8021d5c:	2100      	movs	r1, #0
 8021d5e:	224c      	movs	r2, #76	@ 0x4c
 8021d60:	a805      	add	r0, sp, #20
 8021d62:	4698      	mov	r8, r3
 8021d64:	f007 fa22 	bl	80291ac <memset>
 8021d68:	8aab      	ldrh	r3, [r5, #20]
 8021d6a:	2400      	movs	r4, #0
 8021d6c:	f88d 4007 	strb.w	r4, [sp, #7]
 8021d70:	2b00      	cmp	r3, #0
 8021d72:	d04d      	beq.n	8021e10 <MobleNetworkSendData+0xc0>
 8021d74:	8aeb      	ldrh	r3, [r5, #22]
 8021d76:	2b00      	cmp	r3, #0
 8021d78:	d04a      	beq.n	8021e10 <MobleNetworkSendData+0xc0>
 8021d7a:	f8d6 315c 	ldr.w	r3, [r6, #348]	@ 0x15c
 8021d7e:	612b      	str	r3, [r5, #16]
 8021d80:	3301      	adds	r3, #1
 8021d82:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8021d86:	f8c6 315c 	str.w	r3, [r6, #348]	@ 0x15c
 8021d8a:	4630      	mov	r0, r6
 8021d8c:	f7fa fca8 	bl	801c6e0 <MobleNetworkSaveSeqNum>
 8021d90:	4b28      	ldr	r3, [pc, #160]	@ (8021e34 <MobleNetworkSendData+0xe4>)
 8021d92:	8ae8      	ldrh	r0, [r5, #22]
 8021d94:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 8021d98:	2b01      	cmp	r3, #1
 8021d9a:	bf08      	it	eq
 8021d9c:	8b6c      	ldrheq	r4, [r5, #26]
 8021d9e:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8021da2:	bf04      	itt	eq
 8021da4:	f084 0410 	eoreq.w	r4, r4, #16
 8021da8:	f3c4 1400 	ubfxeq	r4, r4, #4, #1
 8021dac:	2b00      	cmp	r3, #0
 8021dae:	dd33      	ble.n	8021e18 <MobleNetworkSendData+0xc8>
 8021db0:	b124      	cbz	r4, 8021dbc <MobleNetworkSendData+0x6c>
 8021db2:	f7fb ff47 	bl	801dc44 <BnrgmFrndMgmtGetFriendshipStatus>
 8021db6:	fab0 f480 	clz	r4, r0
 8021dba:	0964      	lsrs	r4, r4, #5
 8021dbc:	4643      	mov	r3, r8
 8021dbe:	463a      	mov	r2, r7
 8021dc0:	4629      	mov	r1, r5
 8021dc2:	4630      	mov	r0, r6
 8021dc4:	f7fe fa14 	bl	80201f0 <MobleNetworkSendDataEx>
 8021dc8:	b314      	cbz	r4, 8021e10 <MobleNetworkSendData+0xc0>
 8021dca:	2300      	movs	r3, #0
 8021dcc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8021dd0:	f88d 301c 	strb.w	r3, [sp, #28]
 8021dd4:	f88d 3056 	strb.w	r3, [sp, #86]	@ 0x56
 8021dd8:	8b6b      	ldrh	r3, [r5, #26]
 8021dda:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8021dde:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8021de2:	7beb      	ldrb	r3, [r5, #15]
 8021de4:	3301      	adds	r3, #1
 8021de6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8021dea:	692b      	ldr	r3, [r5, #16]
 8021dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8021dee:	696b      	ldr	r3, [r5, #20]
 8021df0:	930a      	str	r3, [sp, #40]	@ 0x28
 8021df2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8021df6:	2281      	movs	r2, #129	@ 0x81
 8021df8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8021dfc:	f88d 202c 	strb.w	r2, [sp, #44]	@ 0x2c
 8021e00:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
 8021e04:	463a      	mov	r2, r7
 8021e06:	4643      	mov	r3, r8
 8021e08:	a905      	add	r1, sp, #20
 8021e0a:	4630      	mov	r0, r6
 8021e0c:	f7ff fcda 	bl	80217c4 <MobleTransportProcessData>
 8021e10:	2000      	movs	r0, #0
 8021e12:	b018      	add	sp, #96	@ 0x60
 8021e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021e18:	2c00      	cmp	r4, #0
 8021e1a:	d0cf      	beq.n	8021dbc <MobleNetworkSendData+0x6c>
 8021e1c:	aa02      	add	r2, sp, #8
 8021e1e:	f10d 0107 	add.w	r1, sp, #7
 8021e22:	f7fb ff35 	bl	801dc90 <BnrgmFrndMgmtGetSubscrStatus>
 8021e26:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8021e2a:	3c00      	subs	r4, #0
 8021e2c:	bf18      	it	ne
 8021e2e:	2401      	movne	r4, #1
 8021e30:	e7c4      	b.n	8021dbc <MobleNetworkSendData+0x6c>
 8021e32:	bf00      	nop
 8021e34:	20000314 	.word	0x20000314

08021e38 <MobleTransSarSendEx>:
 8021e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e3c:	b095      	sub	sp, #84	@ 0x54
 8021e3e:	4606      	mov	r6, r0
 8021e40:	930a      	str	r3, [sp, #40]	@ 0x28
 8021e42:	8bc8      	ldrh	r0, [r1, #30]
 8021e44:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 8021e48:	9208      	str	r2, [sp, #32]
 8021e4a:	9305      	str	r3, [sp, #20]
 8021e4c:	f7f8 f932 	bl	801a0b4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8021e50:	f8b1 901a 	ldrh.w	r9, [r1, #26]
 8021e54:	4bb3      	ldr	r3, [pc, #716]	@ (8022124 <MobleTransSarSendEx+0x2ec>)
 8021e56:	f89d 5084 	ldrb.w	r5, [sp, #132]	@ 0x84
 8021e5a:	f019 0f04 	tst.w	r9, #4
 8021e5e:	4602      	mov	r2, r0
 8021e60:	f8b3 094c 	ldrh.w	r0, [r3, #2380]	@ 0x94c
 8021e64:	bf14      	ite	ne
 8021e66:	f04f 0a08 	movne.w	sl, #8
 8021e6a:	f04f 0a04 	moveq.w	sl, #4
 8021e6e:	460c      	mov	r4, r1
 8021e70:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8021e72:	eba0 030a 	sub.w	r3, r0, sl
 8021e76:	428b      	cmp	r3, r1
 8021e78:	f3c9 0b80 	ubfx	fp, r9, #2, #1
 8021e7c:	d206      	bcs.n	8021e8c <MobleTransSarSendEx+0x54>
 8021e7e:	4baa      	ldr	r3, [pc, #680]	@ (8022128 <MobleTransSarSendEx+0x2f0>)
 8021e80:	4aaa      	ldr	r2, [pc, #680]	@ (802212c <MobleTransSarSendEx+0x2f4>)
 8021e82:	f240 6157 	movw	r1, #1623	@ 0x657
 8021e86:	48aa      	ldr	r0, [pc, #680]	@ (8022130 <MobleTransSarSendEx+0x2f8>)
 8021e88:	f006 faa8 	bl	80283dc <__assert_func>
 8021e8c:	9206      	str	r2, [sp, #24]
 8021e8e:	f7f8 fcef 	bl	801a870 <MobleMemAlloc>
 8021e92:	9a06      	ldr	r2, [sp, #24]
 8021e94:	4607      	mov	r7, r0
 8021e96:	b920      	cbnz	r0, 8021ea2 <MobleTransSarSendEx+0x6a>
 8021e98:	2502      	movs	r5, #2
 8021e9a:	4628      	mov	r0, r5
 8021e9c:	b015      	add	sp, #84	@ 0x54
 8021e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ea2:	f8d6 315c 	ldr.w	r3, [r6, #348]	@ 0x15c
 8021ea6:	b96d      	cbnz	r5, 8021ec4 <MobleTransSarSendEx+0x8c>
 8021ea8:	9805      	ldr	r0, [sp, #20]
 8021eaa:	f423 51ff 	bic.w	r1, r3, #8160	@ 0x1fe0
 8021eae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021eb2:	4298      	cmp	r0, r3
 8021eb4:	f021 011f 	bic.w	r1, r1, #31
 8021eb8:	4401      	add	r1, r0
 8021eba:	bf94      	ite	ls
 8021ebc:	2300      	movls	r3, #0
 8021ebe:	2301      	movhi	r3, #1
 8021ec0:	eba1 3343 	sub.w	r3, r1, r3, lsl #13
 8021ec4:	6831      	ldr	r1, [r6, #0]
 8021ec6:	f8df 827c 	ldr.w	r8, [pc, #636]	@ 8022144 <MobleTransSarSendEx+0x30c>
 8021eca:	310c      	adds	r1, #12
 8021ecc:	fa58 f282 	uxtab	r2, r8, r2
 8021ed0:	9103      	str	r1, [sp, #12]
 8021ed2:	f892 20c0 	ldrb.w	r2, [r2, #192]	@ 0xc0
 8021ed6:	1e91      	subs	r1, r2, #2
 8021ed8:	424a      	negs	r2, r1
 8021eda:	414a      	adcs	r2, r1
 8021edc:	9202      	str	r2, [sp, #8]
 8021ede:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8021ee0:	9201      	str	r2, [sp, #4]
 8021ee2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021ee4:	9200      	str	r2, [sp, #0]
 8021ee6:	4621      	mov	r1, r4
 8021ee8:	465a      	mov	r2, fp
 8021eea:	4638      	mov	r0, r7
 8021eec:	f7f9 f9b0 	bl	801b250 <MoblePalCryptoEncryptApp>
 8021ef0:	2801      	cmp	r0, #1
 8021ef2:	d906      	bls.n	8021f02 <MobleTransSarSendEx+0xca>
 8021ef4:	9005      	str	r0, [sp, #20]
 8021ef6:	4638      	mov	r0, r7
 8021ef8:	f7f8 fd44 	bl	801a984 <MobleMemFree>
 8021efc:	9b05      	ldr	r3, [sp, #20]
 8021efe:	461d      	mov	r5, r3
 8021f00:	e7cb      	b.n	8021e9a <MobleTransSarSendEx+0x62>
 8021f02:	f3c9 03c0 	ubfx	r3, r9, #3, #1
 8021f06:	f019 0f08 	tst.w	r9, #8
 8021f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8021f0c:	f241 0201 	movw	r2, #4097	@ 0x1001
 8021f10:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8021f12:	bf14      	ite	ne
 8021f14:	230b      	movne	r3, #11
 8021f16:	230f      	moveq	r3, #15
 8021f18:	eba3 030a 	sub.w	r3, r3, sl
 8021f1c:	ea19 0f02 	tst.w	r9, r2
 8021f20:	bf0c      	ite	eq
 8021f22:	2201      	moveq	r2, #1
 8021f24:	2200      	movne	r2, #0
 8021f26:	428b      	cmp	r3, r1
 8021f28:	eb0a 0901 	add.w	r9, sl, r1
 8021f2c:	d332      	bcc.n	8021f94 <MobleTransSarSendEx+0x15c>
 8021f2e:	2300      	movs	r3, #0
 8021f30:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8021f34:	a910      	add	r1, sp, #64	@ 0x40
 8021f36:	9b08      	ldr	r3, [sp, #32]
 8021f38:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8021f3c:	a80c      	add	r0, sp, #48	@ 0x30
 8021f3e:	f109 0501 	add.w	r5, r9, #1
 8021f42:	f88d 2032 	strb.w	r2, [sp, #50]	@ 0x32
 8021f46:	f7f9 ff5b 	bl	801be00 <MobleTransportRenderHdr>
 8021f4a:	2d10      	cmp	r5, #16
 8021f4c:	d820      	bhi.n	8021f90 <MobleTransSarSendEx+0x158>
 8021f4e:	464a      	mov	r2, r9
 8021f50:	4639      	mov	r1, r7
 8021f52:	f10d 0041 	add.w	r0, sp, #65	@ 0x41
 8021f56:	f007 f90f 	bl	8029178 <memmove>
 8021f5a:	f898 20b6 	ldrb.w	r2, [r8, #182]	@ 0xb6
 8021f5e:	f898 30b5 	ldrb.w	r3, [r8, #181]	@ 0xb5
 8021f62:	73e3      	strb	r3, [r4, #15]
 8021f64:	3201      	adds	r2, #1
 8021f66:	f884 2023 	strb.w	r2, [r4, #35]	@ 0x23
 8021f6a:	8be0      	ldrh	r0, [r4, #30]
 8021f6c:	f7f8 f8a2 	bl	801a0b4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8021f70:	7720      	strb	r0, [r4, #28]
 8021f72:	8c20      	ldrh	r0, [r4, #32]
 8021f74:	f7f8 f8b8 	bl	801a0e8 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 8021f78:	4621      	mov	r1, r4
 8021f7a:	7760      	strb	r0, [r4, #29]
 8021f7c:	462b      	mov	r3, r5
 8021f7e:	aa10      	add	r2, sp, #64	@ 0x40
 8021f80:	4630      	mov	r0, r6
 8021f82:	f7ff fee5 	bl	8021d50 <MobleNetworkSendData>
 8021f86:	4605      	mov	r5, r0
 8021f88:	4638      	mov	r0, r7
 8021f8a:	f7f8 fcfb 	bl	801a984 <MobleMemFree>
 8021f8e:	e784      	b.n	8021e9a <MobleTransSarSendEx+0x62>
 8021f90:	2502      	movs	r5, #2
 8021f92:	e7f9      	b.n	8021f88 <MobleTransSarSendEx+0x150>
 8021f94:	b13d      	cbz	r5, 8021fa6 <MobleTransSarSendEx+0x16e>
 8021f96:	f8d6 315c 	ldr.w	r3, [r6, #348]	@ 0x15c
 8021f9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021f9e:	9305      	str	r3, [sp, #20]
 8021fa0:	68b3      	ldr	r3, [r6, #8]
 8021fa2:	3301      	adds	r3, #1
 8021fa4:	60b3      	str	r3, [r6, #8]
 8021fa6:	2301      	movs	r3, #1
 8021fa8:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8021fac:	9b08      	ldr	r3, [sp, #32]
 8021fae:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8021fb2:	9b05      	ldr	r3, [sp, #20]
 8021fb4:	f8ad 3035 	strh.w	r3, [sp, #53]	@ 0x35
 8021fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021fba:	f88d b034 	strb.w	fp, [sp, #52]	@ 0x34
 8021fbe:	2b00      	cmp	r3, #0
 8021fc0:	bf14      	ite	ne
 8021fc2:	f04f 0a08 	movne.w	sl, #8
 8021fc6:	f04f 0a0c 	moveq.w	sl, #12
 8021fca:	f109 33ff 	add.w	r3, r9, #4294967295
 8021fce:	4453      	add	r3, sl
 8021fd0:	fbb3 f3fa 	udiv	r3, r3, sl
 8021fd4:	3b01      	subs	r3, #1
 8021fd6:	b2db      	uxtb	r3, r3
 8021fd8:	f04f 0800 	mov.w	r8, #0
 8021fdc:	f88d 2032 	strb.w	r2, [sp, #50]	@ 0x32
 8021fe0:	9307      	str	r3, [sp, #28]
 8021fe2:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
 8021fe6:	46cb      	mov	fp, r9
 8021fe8:	f8cd 8018 	str.w	r8, [sp, #24]
 8021fec:	9b06      	ldr	r3, [sp, #24]
 8021fee:	454b      	cmp	r3, r9
 8021ff0:	d353      	bcc.n	802209a <MobleTransSarSendEx+0x262>
 8021ff2:	4638      	mov	r0, r7
 8021ff4:	f7f8 fcc6 	bl	801a984 <MobleMemFree>
 8021ff8:	2d00      	cmp	r5, #0
 8021ffa:	f43f af4e 	beq.w	8021e9a <MobleTransSarSendEx+0x62>
 8021ffe:	4f49      	ldr	r7, [pc, #292]	@ (8022124 <MobleTransSarSendEx+0x2ec>)
 8022000:	f897 32e8 	ldrb.w	r3, [r7, #744]	@ 0x2e8
 8022004:	b12b      	cbz	r3, 8022012 <MobleTransSarSendEx+0x1da>
 8022006:	f897 3314 	ldrb.w	r3, [r7, #788]	@ 0x314
 802200a:	2b00      	cmp	r3, #0
 802200c:	f47f af44 	bne.w	8021e98 <MobleTransSarSendEx+0x60>
 8022010:	2301      	movs	r3, #1
 8022012:	f04f 082c 	mov.w	r8, #44	@ 0x2c
 8022016:	fb08 f803 	mul.w	r8, r8, r3
 802201a:	4447      	add	r7, r8
 802201c:	2201      	movs	r2, #1
 802201e:	f887 22e8 	strb.w	r2, [r7, #744]	@ 0x2e8
 8022022:	4a44      	ldr	r2, [pc, #272]	@ (8022134 <MobleTransSarSendEx+0x2fc>)
 8022024:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022026:	f882 3a3b 	strb.w	r3, [r2, #2619]	@ 0xa3b
 802202a:	f8d7 0300 	ldr.w	r0, [r7, #768]	@ 0x300
 802202e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8022030:	f007 f94d 	bl	80292ce <memcpy>
 8022034:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8022036:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 802203a:	8b63      	ldrh	r3, [r4, #26]
 802203c:	f8a7 32ea 	strh.w	r3, [r7, #746]	@ 0x2ea
 8022040:	9b08      	ldr	r3, [sp, #32]
 8022042:	f887 32ec 	strb.w	r3, [r7, #748]	@ 0x2ec
 8022046:	8c23      	ldrh	r3, [r4, #32]
 8022048:	f8a7 32ee 	strh.w	r3, [r7, #750]	@ 0x2ee
 802204c:	8be3      	ldrh	r3, [r4, #30]
 802204e:	f8a7 32f0 	strh.w	r3, [r7, #752]	@ 0x2f0
 8022052:	8aa3      	ldrh	r3, [r4, #20]
 8022054:	f8a7 32f4 	strh.w	r3, [r7, #756]	@ 0x2f4
 8022058:	8ae3      	ldrh	r3, [r4, #22]
 802205a:	f8a7 32f2 	strh.w	r3, [r7, #754]	@ 0x2f2
 802205e:	4836      	ldr	r0, [pc, #216]	@ (8022138 <MobleTransSarSendEx+0x300>)
 8022060:	9b05      	ldr	r3, [sp, #20]
 8022062:	f8a7 32f6 	strh.w	r3, [r7, #758]	@ 0x2f6
 8022066:	2500      	movs	r5, #0
 8022068:	9b07      	ldr	r3, [sp, #28]
 802206a:	4934      	ldr	r1, [pc, #208]	@ (802213c <MobleTransSarSendEx+0x304>)
 802206c:	f8a7 32f8 	strh.w	r3, [r7, #760]	@ 0x2f8
 8022070:	f108 0208 	add.w	r2, r8, #8
 8022074:	f108 0828 	add.w	r8, r8, #40	@ 0x28
 8022078:	4402      	add	r2, r0
 802207a:	f8c7 52fc 	str.w	r5, [r7, #764]	@ 0x2fc
 802207e:	f8c7 6310 	str.w	r6, [r7, #784]	@ 0x310
 8022082:	f887 530c 	strb.w	r5, [r7, #780]	@ 0x30c
 8022086:	4440      	add	r0, r8
 8022088:	f7f5 fa56 	bl	8017538 <MoblePalTimerCreate>
 802208c:	f8d7 0308 	ldr.w	r0, [r7, #776]	@ 0x308
 8022090:	f241 3188 	movw	r1, #5000	@ 0x1388
 8022094:	f7f5 fa89 	bl	80175aa <MoblePalTimerStart>
 8022098:	e6ff      	b.n	8021e9a <MobleTransSarSendEx+0x62>
 802209a:	b92d      	cbnz	r5, 80220a8 <MobleTransSarSendEx+0x270>
 802209c:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 802209e:	2301      	movs	r3, #1
 80220a0:	fa03 f308 	lsl.w	r3, r3, r8
 80220a4:	4213      	tst	r3, r2
 80220a6:	d134      	bne.n	8022112 <MobleTransSarSendEx+0x2da>
 80220a8:	a910      	add	r1, sp, #64	@ 0x40
 80220aa:	a80c      	add	r0, sp, #48	@ 0x30
 80220ac:	f88d 8037 	strb.w	r8, [sp, #55]	@ 0x37
 80220b0:	f7f9 fea6 	bl	801be00 <MobleTransportRenderHdr>
 80220b4:	9b07      	ldr	r3, [sp, #28]
 80220b6:	4543      	cmp	r3, r8
 80220b8:	d108      	bne.n	80220cc <MobleTransSarSendEx+0x294>
 80220ba:	f1bb 0f0c 	cmp.w	fp, #12
 80220be:	465a      	mov	r2, fp
 80220c0:	dd09      	ble.n	80220d6 <MobleTransSarSendEx+0x29e>
 80220c2:	4b1f      	ldr	r3, [pc, #124]	@ (8022140 <MobleTransSarSendEx+0x308>)
 80220c4:	4a19      	ldr	r2, [pc, #100]	@ (802212c <MobleTransSarSendEx+0x2f4>)
 80220c6:	f240 61de 	movw	r1, #1758	@ 0x6de
 80220ca:	e6dc      	b.n	8021e86 <MobleTransSarSendEx+0x4e>
 80220cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80220ce:	2b00      	cmp	r3, #0
 80220d0:	bf0c      	ite	eq
 80220d2:	220c      	moveq	r2, #12
 80220d4:	2208      	movne	r2, #8
 80220d6:	9b06      	ldr	r3, [sp, #24]
 80220d8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80220da:	18f9      	adds	r1, r7, r3
 80220dc:	a811      	add	r0, sp, #68	@ 0x44
 80220de:	f007 f8f6 	bl	80292ce <memcpy>
 80220e2:	4a18      	ldr	r2, [pc, #96]	@ (8022144 <MobleTransSarSendEx+0x30c>)
 80220e4:	8be0      	ldrh	r0, [r4, #30]
 80220e6:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 80220ea:	73e3      	strb	r3, [r4, #15]
 80220ec:	f892 30b6 	ldrb.w	r3, [r2, #182]	@ 0xb6
 80220f0:	3301      	adds	r3, #1
 80220f2:	f884 3023 	strb.w	r3, [r4, #35]	@ 0x23
 80220f6:	f7f7 ffdd 	bl	801a0b4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80220fa:	7720      	strb	r0, [r4, #28]
 80220fc:	8c20      	ldrh	r0, [r4, #32]
 80220fe:	f7f7 fff3 	bl	801a0e8 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 8022102:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8022104:	7760      	strb	r0, [r4, #29]
 8022106:	1d13      	adds	r3, r2, #4
 8022108:	4621      	mov	r1, r4
 802210a:	aa10      	add	r2, sp, #64	@ 0x40
 802210c:	4630      	mov	r0, r6
 802210e:	f7ff fe1f 	bl	8021d50 <MobleNetworkSendData>
 8022112:	9b06      	ldr	r3, [sp, #24]
 8022114:	4453      	add	r3, sl
 8022116:	f108 0801 	add.w	r8, r8, #1
 802211a:	9306      	str	r3, [sp, #24]
 802211c:	ebab 0b0a 	sub.w	fp, fp, sl
 8022120:	e764      	b.n	8021fec <MobleTransSarSendEx+0x1b4>
 8022122:	bf00      	nop
 8022124:	2000140c 	.word	0x2000140c
 8022128:	08031603 	.word	0x08031603
 802212c:	0802fd0d 	.word	0x0802fd0d
 8022130:	08031310 	.word	0x08031310
 8022134:	20002504 	.word	0x20002504
 8022138:	200016ec 	.word	0x200016ec
 802213c:	08022289 	.word	0x08022289
 8022140:	0803163d 	.word	0x0803163d
 8022144:	20000314 	.word	0x20000314

08022148 <MobleTransSarProcessAck>:
 8022148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802214c:	460d      	mov	r5, r1
 802214e:	b090      	sub	sp, #64	@ 0x40
 8022150:	4617      	mov	r7, r2
 8022152:	4698      	mov	r8, r3
 8022154:	4606      	mov	r6, r0
 8022156:	b930      	cbnz	r0, 8022166 <MobleTransSarProcessAck+0x1e>
 8022158:	4b45      	ldr	r3, [pc, #276]	@ (8022270 <MobleTransSarProcessAck+0x128>)
 802215a:	4a46      	ldr	r2, [pc, #280]	@ (8022274 <MobleTransSarProcessAck+0x12c>)
 802215c:	4846      	ldr	r0, [pc, #280]	@ (8022278 <MobleTransSarProcessAck+0x130>)
 802215e:	f240 51e1 	movw	r1, #1505	@ 0x5e1
 8022162:	f006 f93b 	bl	80283dc <__assert_func>
 8022166:	4c45      	ldr	r4, [pc, #276]	@ (802227c <MobleTransSarProcessAck+0x134>)
 8022168:	2228      	movs	r2, #40	@ 0x28
 802216a:	2100      	movs	r1, #0
 802216c:	a806      	add	r0, sp, #24
 802216e:	f007 f81d 	bl	80291ac <memset>
 8022172:	f894 32e8 	ldrb.w	r3, [r4, #744]	@ 0x2e8
 8022176:	b153      	cbz	r3, 802218e <MobleTransSarProcessAck+0x46>
 8022178:	f8b4 22f6 	ldrh.w	r2, [r4, #758]	@ 0x2f6
 802217c:	f8b7 3003 	ldrh.w	r3, [r7, #3]
 8022180:	429a      	cmp	r2, r3
 8022182:	d104      	bne.n	802218e <MobleTransSarProcessAck+0x46>
 8022184:	f8b4 22f4 	ldrh.w	r2, [r4, #756]	@ 0x2f4
 8022188:	8aeb      	ldrh	r3, [r5, #22]
 802218a:	429a      	cmp	r2, r3
 802218c:	d02b      	beq.n	80221e6 <MobleTransSarProcessAck+0x9e>
 802218e:	f894 3314 	ldrb.w	r3, [r4, #788]	@ 0x314
 8022192:	b323      	cbz	r3, 80221de <MobleTransSarProcessAck+0x96>
 8022194:	f8b4 2322 	ldrh.w	r2, [r4, #802]	@ 0x322
 8022198:	f8b7 3003 	ldrh.w	r3, [r7, #3]
 802219c:	429a      	cmp	r2, r3
 802219e:	d11e      	bne.n	80221de <MobleTransSarProcessAck+0x96>
 80221a0:	f8b4 2320 	ldrh.w	r2, [r4, #800]	@ 0x320
 80221a4:	8aeb      	ldrh	r3, [r5, #22]
 80221a6:	429a      	cmp	r2, r3
 80221a8:	d119      	bne.n	80221de <MobleTransSarProcessAck+0x96>
 80221aa:	2501      	movs	r5, #1
 80221ac:	232c      	movs	r3, #44	@ 0x2c
 80221ae:	435d      	muls	r5, r3
 80221b0:	f8d8 0000 	ldr.w	r0, [r8]
 80221b4:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 8022284 <MobleTransSarProcessAck+0x13c>
 80221b8:	442c      	add	r4, r5
 80221ba:	f7f5 f817 	bl	80171ec <htobe32>
 80221be:	f8d4 32fc 	ldr.w	r3, [r4, #764]	@ 0x2fc
 80221c2:	4303      	orrs	r3, r0
 80221c4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80221c8:	f8c4 32fc 	str.w	r3, [r4, #764]	@ 0x2fc
 80221cc:	4440      	add	r0, r8
 80221ce:	b963      	cbnz	r3, 80221ea <MobleTransSarProcessAck+0xa2>
 80221d0:	f884 32e8 	strb.w	r3, [r4, #744]	@ 0x2e8
 80221d4:	f7f5 fa6a 	bl	80176ac <MobleTransEraseTimer>
 80221d8:	68b3      	ldr	r3, [r6, #8]
 80221da:	3b01      	subs	r3, #1
 80221dc:	60b3      	str	r3, [r6, #8]
 80221de:	2000      	movs	r0, #0
 80221e0:	b010      	add	sp, #64	@ 0x40
 80221e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80221e6:	2500      	movs	r5, #0
 80221e8:	e7e0      	b.n	80221ac <MobleTransSarProcessAck+0x64>
 80221ea:	f8b4 72f8 	ldrh.w	r7, [r4, #760]	@ 0x2f8
 80221ee:	2101      	movs	r1, #1
 80221f0:	3701      	adds	r7, #1
 80221f2:	40b9      	lsls	r1, r7
 80221f4:	3901      	subs	r1, #1
 80221f6:	428b      	cmp	r3, r1
 80221f8:	d101      	bne.n	80221fe <MobleTransSarProcessAck+0xb6>
 80221fa:	2300      	movs	r3, #0
 80221fc:	e7e8      	b.n	80221d0 <MobleTransSarProcessAck+0x88>
 80221fe:	3508      	adds	r5, #8
 8022200:	9005      	str	r0, [sp, #20]
 8022202:	f7f5 fa53 	bl	80176ac <MobleTransEraseTimer>
 8022206:	eb08 0205 	add.w	r2, r8, r5
 802220a:	491d      	ldr	r1, [pc, #116]	@ (8022280 <MobleTransSarProcessAck+0x138>)
 802220c:	9805      	ldr	r0, [sp, #20]
 802220e:	f7f5 f993 	bl	8017538 <MoblePalTimerCreate>
 8022212:	f8d4 0308 	ldr.w	r0, [r4, #776]	@ 0x308
 8022216:	f241 3188 	movw	r1, #5000	@ 0x1388
 802221a:	f7f5 f9c6 	bl	80175aa <MoblePalTimerStart>
 802221e:	f8b4 32ea 	ldrh.w	r3, [r4, #746]	@ 0x2ea
 8022222:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8022226:	f8b4 32ee 	ldrh.w	r3, [r4, #750]	@ 0x2ee
 802222a:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 802222e:	f8b4 32f0 	ldrh.w	r3, [r4, #752]	@ 0x2f0
 8022232:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8022236:	f8b4 32f4 	ldrh.w	r3, [r4, #756]	@ 0x2f4
 802223a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 802223e:	f8b4 32f2 	ldrh.w	r3, [r4, #754]	@ 0x2f2
 8022242:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8022246:	2300      	movs	r3, #0
 8022248:	9303      	str	r3, [sp, #12]
 802224a:	f8b4 32f6 	ldrh.w	r3, [r4, #758]	@ 0x2f6
 802224e:	9302      	str	r3, [sp, #8]
 8022250:	f8d4 32fc 	ldr.w	r3, [r4, #764]	@ 0x2fc
 8022254:	9301      	str	r3, [sp, #4]
 8022256:	f8d4 3304 	ldr.w	r3, [r4, #772]	@ 0x304
 802225a:	9300      	str	r3, [sp, #0]
 802225c:	f8d4 3300 	ldr.w	r3, [r4, #768]	@ 0x300
 8022260:	f894 22ec 	ldrb.w	r2, [r4, #748]	@ 0x2ec
 8022264:	a906      	add	r1, sp, #24
 8022266:	4630      	mov	r0, r6
 8022268:	f7ff fde6 	bl	8021e38 <MobleTransSarSendEx>
 802226c:	e7b7      	b.n	80221de <MobleTransSarProcessAck+0x96>
 802226e:	bf00      	nop
 8022270:	08030e80 	.word	0x08030e80
 8022274:	0802fd21 	.word	0x0802fd21
 8022278:	08031310 	.word	0x08031310
 802227c:	2000140c 	.word	0x2000140c
 8022280:	08022289 	.word	0x08022289
 8022284:	200016ec 	.word	0x200016ec

08022288 <MobleTransSarOnRetransmit>:
 8022288:	b510      	push	{r4, lr}
 802228a:	460c      	mov	r4, r1
 802228c:	b08e      	sub	sp, #56	@ 0x38
 802228e:	2228      	movs	r2, #40	@ 0x28
 8022290:	2100      	movs	r1, #0
 8022292:	a804      	add	r0, sp, #16
 8022294:	f006 ff8a 	bl	80291ac <memset>
 8022298:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 802229c:	2b03      	cmp	r3, #3
 802229e:	d90b      	bls.n	80222b8 <MobleTransSarOnRetransmit+0x30>
 80222a0:	f104 0020 	add.w	r0, r4, #32
 80222a4:	f7f5 fa02 	bl	80176ac <MobleTransEraseTimer>
 80222a8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80222aa:	6893      	ldr	r3, [r2, #8]
 80222ac:	3b01      	subs	r3, #1
 80222ae:	6093      	str	r3, [r2, #8]
 80222b0:	2300      	movs	r3, #0
 80222b2:	7023      	strb	r3, [r4, #0]
 80222b4:	b00e      	add	sp, #56	@ 0x38
 80222b6:	bd10      	pop	{r4, pc}
 80222b8:	3301      	adds	r3, #1
 80222ba:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80222be:	8863      	ldrh	r3, [r4, #2]
 80222c0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80222c4:	88e3      	ldrh	r3, [r4, #6]
 80222c6:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80222ca:	8923      	ldrh	r3, [r4, #8]
 80222cc:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80222d0:	89a3      	ldrh	r3, [r4, #12]
 80222d2:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 80222d6:	8963      	ldrh	r3, [r4, #10]
 80222d8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 80222dc:	2300      	movs	r3, #0
 80222de:	9303      	str	r3, [sp, #12]
 80222e0:	89e3      	ldrh	r3, [r4, #14]
 80222e2:	9302      	str	r3, [sp, #8]
 80222e4:	6963      	ldr	r3, [r4, #20]
 80222e6:	9301      	str	r3, [sp, #4]
 80222e8:	69e3      	ldr	r3, [r4, #28]
 80222ea:	9300      	str	r3, [sp, #0]
 80222ec:	7922      	ldrb	r2, [r4, #4]
 80222ee:	69a3      	ldr	r3, [r4, #24]
 80222f0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80222f2:	a904      	add	r1, sp, #16
 80222f4:	f7ff fda0 	bl	8021e38 <MobleTransSarSendEx>
 80222f8:	e7dc      	b.n	80222b4 <MobleTransSarOnRetransmit+0x2c>
	...

080222fc <MobleTransSarSend>:
 80222fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80222fe:	b930      	cbnz	r0, 802230e <MobleTransSarSend+0x12>
 8022300:	4b09      	ldr	r3, [pc, #36]	@ (8022328 <MobleTransSarSend+0x2c>)
 8022302:	4a0a      	ldr	r2, [pc, #40]	@ (802232c <MobleTransSarSend+0x30>)
 8022304:	480a      	ldr	r0, [pc, #40]	@ (8022330 <MobleTransSarSend+0x34>)
 8022306:	f240 714d 	movw	r1, #1869	@ 0x74d
 802230a:	f006 f867 	bl	80283dc <__assert_func>
 802230e:	2400      	movs	r4, #0
 8022310:	f04f 0c01 	mov.w	ip, #1
 8022314:	e9cd 4c02 	strd	r4, ip, [sp, #8]
 8022318:	9401      	str	r4, [sp, #4]
 802231a:	9c06      	ldr	r4, [sp, #24]
 802231c:	9400      	str	r4, [sp, #0]
 802231e:	f7ff fd8b 	bl	8021e38 <MobleTransSarSendEx>
 8022322:	b004      	add	sp, #16
 8022324:	bd10      	pop	{r4, pc}
 8022326:	bf00      	nop
 8022328:	08030e80 	.word	0x08030e80
 802232c:	0802fd39 	.word	0x0802fd39
 8022330:	08031310 	.word	0x08031310

08022334 <MobleTransportSendData>:
 8022334:	b570      	push	{r4, r5, r6, lr}
 8022336:	9d04      	ldr	r5, [sp, #16]
 8022338:	b930      	cbnz	r0, 8022348 <MobleTransportSendData+0x14>
 802233a:	4b09      	ldr	r3, [pc, #36]	@ (8022360 <MobleTransportSendData+0x2c>)
 802233c:	4a09      	ldr	r2, [pc, #36]	@ (8022364 <MobleTransportSendData+0x30>)
 802233e:	f44f 711a 	mov.w	r1, #616	@ 0x268
 8022342:	4809      	ldr	r0, [pc, #36]	@ (8022368 <MobleTransportSendData+0x34>)
 8022344:	f006 f84a 	bl	80283dc <__assert_func>
 8022348:	b923      	cbnz	r3, 8022354 <MobleTransportSendData+0x20>
 802234a:	4b08      	ldr	r3, [pc, #32]	@ (802236c <MobleTransportSendData+0x38>)
 802234c:	4a05      	ldr	r2, [pc, #20]	@ (8022364 <MobleTransportSendData+0x30>)
 802234e:	f240 2169 	movw	r1, #617	@ 0x269
 8022352:	e7f6      	b.n	8022342 <MobleTransportSendData+0xe>
 8022354:	9504      	str	r5, [sp, #16]
 8022356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802235a:	f7ff bfcf 	b.w	80222fc <MobleTransSarSend>
 802235e:	bf00      	nop
 8022360:	08030e80 	.word	0x08030e80
 8022364:	0802fd4b 	.word	0x0802fd4b
 8022368:	080311c0 	.word	0x080311c0
 802236c:	08031685 	.word	0x08031685

08022370 <MobleApplicationSendPacket>:
 8022370:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8022374:	4607      	mov	r7, r0
 8022376:	f103 0020 	add.w	r0, r3, #32
 802237a:	460e      	mov	r6, r1
 802237c:	461c      	mov	r4, r3
 802237e:	4690      	mov	r8, r2
 8022380:	f7f8 fa76 	bl	801a870 <MobleMemAlloc>
 8022384:	8ab3      	ldrh	r3, [r6, #20]
 8022386:	f896 901d 	ldrb.w	r9, [r6, #29]
 802238a:	f896 a01c 	ldrb.w	sl, [r6, #28]
 802238e:	8103      	strh	r3, [r0, #8]
 8022390:	8af3      	ldrh	r3, [r6, #22]
 8022392:	f880 900c 	strb.w	r9, [r0, #12]
 8022396:	8143      	strh	r3, [r0, #10]
 8022398:	8c33      	ldrh	r3, [r6, #32]
 802239a:	f880 a010 	strb.w	sl, [r0, #16]
 802239e:	81c3      	strh	r3, [r0, #14]
 80223a0:	8bf3      	ldrh	r3, [r6, #30]
 80223a2:	8243      	strh	r3, [r0, #18]
 80223a4:	f896 3022 	ldrb.w	r3, [r6, #34]	@ 0x22
 80223a8:	7503      	strb	r3, [r0, #20]
 80223aa:	8b73      	ldrh	r3, [r6, #26]
 80223ac:	43db      	mvns	r3, r3
 80223ae:	f003 0301 	and.w	r3, r3, #1
 80223b2:	7543      	strb	r3, [r0, #21]
 80223b4:	f896 3026 	ldrb.w	r3, [r6, #38]	@ 0x26
 80223b8:	7583      	strb	r3, [r0, #22]
 80223ba:	4605      	mov	r5, r0
 80223bc:	4622      	mov	r2, r4
 80223be:	4641      	mov	r1, r8
 80223c0:	3020      	adds	r0, #32
 80223c2:	f006 fed9 	bl	8029178 <memmove>
 80223c6:	61ec      	str	r4, [r5, #28]
 80223c8:	b92f      	cbnz	r7, 80223d6 <MobleApplicationSendPacket+0x66>
 80223ca:	4b2c      	ldr	r3, [pc, #176]	@ (802247c <MobleApplicationSendPacket+0x10c>)
 80223cc:	4a2c      	ldr	r2, [pc, #176]	@ (8022480 <MobleApplicationSendPacket+0x110>)
 80223ce:	482d      	ldr	r0, [pc, #180]	@ (8022484 <MobleApplicationSendPacket+0x114>)
 80223d0:	21a6      	movs	r1, #166	@ 0xa6
 80223d2:	f006 f803 	bl	80283dc <__assert_func>
 80223d6:	1e63      	subs	r3, r4, #1
 80223d8:	2b9b      	cmp	r3, #155	@ 0x9b
 80223da:	d84c      	bhi.n	8022476 <MobleApplicationSendPacket+0x106>
 80223dc:	4b2a      	ldr	r3, [pc, #168]	@ (8022488 <MobleApplicationSendPacket+0x118>)
 80223de:	4453      	add	r3, sl
 80223e0:	4649      	mov	r1, r9
 80223e2:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80223e6:	2b02      	cmp	r3, #2
 80223e8:	bf0c      	ite	eq
 80223ea:	2001      	moveq	r0, #1
 80223ec:	2000      	movne	r0, #0
 80223ee:	d01b      	beq.n	8022428 <MobleApplicationSendPacket+0xb8>
 80223f0:	f7f6 fce8 	bl	8018dc4 <MoblePalCryptoGetApplicationSecurityKeys>
 80223f4:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80223f8:	9400      	str	r4, [sp, #0]
 80223fa:	4643      	mov	r3, r8
 80223fc:	4631      	mov	r1, r6
 80223fe:	4638      	mov	r0, r7
 8022400:	f7ff ff98 	bl	8022334 <MobleTransportSendData>
 8022404:	2801      	cmp	r0, #1
 8022406:	4604      	mov	r4, r0
 8022408:	d82f      	bhi.n	802246a <MobleApplicationSendPacket+0xfa>
 802240a:	683b      	ldr	r3, [r7, #0]
 802240c:	8af1      	ldrh	r1, [r6, #22]
 802240e:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 8022412:	7f18      	ldrb	r0, [r3, #28]
 8022414:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 8022418:	2b00      	cmp	r3, #0
 802241a:	dc2a      	bgt.n	8022472 <MobleApplicationSendPacket+0x102>
 802241c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8022420:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8022424:	d11e      	bne.n	8022464 <MobleApplicationSendPacket+0xf4>
 8022426:	e00c      	b.n	8022442 <MobleApplicationSendPacket+0xd2>
 8022428:	f7f6 fccc 	bl	8018dc4 <MoblePalCryptoGetApplicationSecurityKeys>
 802242c:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8022430:	e7e2      	b.n	80223f8 <MobleApplicationSendPacket+0x88>
 8022432:	eb0c 0203 	add.w	r2, ip, r3
 8022436:	b292      	uxth	r2, r2
 8022438:	4291      	cmp	r1, r2
 802243a:	d10f      	bne.n	802245c <MobleApplicationSendPacket+0xec>
 802243c:	8ab3      	ldrh	r3, [r6, #20]
 802243e:	428b      	cmp	r3, r1
 8022440:	d010      	beq.n	8022464 <MobleApplicationSendPacket+0xf4>
 8022442:	4629      	mov	r1, r5
 8022444:	4638      	mov	r0, r7
 8022446:	f7f9 f9a5 	bl	801b794 <MobleApplicationPassPacketsToSIGModels>
 802244a:	2801      	cmp	r0, #1
 802244c:	4604      	mov	r4, r0
 802244e:	d909      	bls.n	8022464 <MobleApplicationSendPacket+0xf4>
 8022450:	4629      	mov	r1, r5
 8022452:	4638      	mov	r0, r7
 8022454:	f7f9 faae 	bl	801b9b4 <MobleApplicationPassPacketsToVENDORModelsNew>
 8022458:	4604      	mov	r4, r0
 802245a:	e003      	b.n	8022464 <MobleApplicationSendPacket+0xf4>
 802245c:	3301      	adds	r3, #1
 802245e:	b2da      	uxtb	r2, r3
 8022460:	4290      	cmp	r0, r2
 8022462:	d8e6      	bhi.n	8022432 <MobleApplicationSendPacket+0xc2>
 8022464:	4628      	mov	r0, r5
 8022466:	f7f8 fa8d 	bl	801a984 <MobleMemFree>
 802246a:	4620      	mov	r0, r4
 802246c:	b002      	add	sp, #8
 802246e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022472:	2300      	movs	r3, #0
 8022474:	e7f3      	b.n	802245e <MobleApplicationSendPacket+0xee>
 8022476:	2403      	movs	r4, #3
 8022478:	e7f7      	b.n	802246a <MobleApplicationSendPacket+0xfa>
 802247a:	bf00      	nop
 802247c:	08030e80 	.word	0x08030e80
 8022480:	0802fd62 	.word	0x0802fd62
 8022484:	08031170 	.word	0x08031170
 8022488:	20000314 	.word	0x20000314

0802248c <MobleModelSendPacket>:
 802248c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802248e:	b08b      	sub	sp, #44	@ 0x2c
 8022490:	4606      	mov	r6, r0
 8022492:	460f      	mov	r7, r1
 8022494:	4615      	mov	r5, r2
 8022496:	461c      	mov	r4, r3
 8022498:	2228      	movs	r2, #40	@ 0x28
 802249a:	2100      	movs	r1, #0
 802249c:	4668      	mov	r0, sp
 802249e:	f006 fe85 	bl	80291ac <memset>
 80224a2:	b934      	cbnz	r4, 80224b2 <MobleModelSendPacket+0x26>
 80224a4:	4b23      	ldr	r3, [pc, #140]	@ (8022534 <MobleModelSendPacket+0xa8>)
 80224a6:	4a24      	ldr	r2, [pc, #144]	@ (8022538 <MobleModelSendPacket+0xac>)
 80224a8:	4824      	ldr	r0, [pc, #144]	@ (802253c <MobleModelSendPacket+0xb0>)
 80224aa:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80224ae:	f005 ff95 	bl	80283dc <__assert_func>
 80224b2:	4b23      	ldr	r3, [pc, #140]	@ (8022540 <MobleModelSendPacket+0xb4>)
 80224b4:	f8d4 c0a3 	ldr.w	ip, [r4, #163]	@ 0xa3
 80224b8:	f8b3 3950 	ldrh.w	r3, [r3, #2384]	@ 0x950
 80224bc:	459c      	cmp	ip, r3
 80224be:	d837      	bhi.n	8022530 <MobleModelSendPacket+0xa4>
 80224c0:	6822      	ldr	r2, [r4, #0]
 80224c2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80224c6:	f003 00c0 	and.w	r0, r3, #192	@ 0xc0
 80224ca:	28c0      	cmp	r0, #192	@ 0xc0
 80224cc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80224d0:	b2d2      	uxtb	r2, r2
 80224d2:	d127      	bne.n	8022524 <MobleModelSendPacket+0x98>
 80224d4:	7163      	strb	r3, [r4, #5]
 80224d6:	71a1      	strb	r1, [r4, #6]
 80224d8:	2303      	movs	r3, #3
 80224da:	71e2      	strb	r2, [r4, #7]
 80224dc:	6828      	ldr	r0, [r5, #0]
 80224de:	6869      	ldr	r1, [r5, #4]
 80224e0:	f8ad 701a 	strh.w	r7, [sp, #26]
 80224e4:	aa03      	add	r2, sp, #12
 80224e6:	c203      	stmia	r2!, {r0, r1}
 80224e8:	896a      	ldrh	r2, [r5, #10]
 80224ea:	f8ad 2014 	strh.w	r2, [sp, #20]
 80224ee:	892a      	ldrh	r2, [r5, #8]
 80224f0:	f8ad 2016 	strh.w	r2, [sp, #22]
 80224f4:	7daa      	ldrb	r2, [r5, #22]
 80224f6:	f88d 2026 	strb.w	r2, [sp, #38]	@ 0x26
 80224fa:	89ea      	ldrh	r2, [r5, #14]
 80224fc:	f8ad 2020 	strh.w	r2, [sp, #32]
 8022500:	8a6a      	ldrh	r2, [r5, #18]
 8022502:	f8ad 201e 	strh.w	r2, [sp, #30]
 8022506:	7c2a      	ldrb	r2, [r5, #16]
 8022508:	f88d 201c 	strb.w	r2, [sp, #28]
 802250c:	7b2a      	ldrb	r2, [r5, #12]
 802250e:	f88d 201d 	strb.w	r2, [sp, #29]
 8022512:	1ae2      	subs	r2, r4, r3
 8022514:	3208      	adds	r2, #8
 8022516:	4463      	add	r3, ip
 8022518:	4669      	mov	r1, sp
 802251a:	4630      	mov	r0, r6
 802251c:	f7ff ff28 	bl	8022370 <MobleApplicationSendPacket>
 8022520:	b00b      	add	sp, #44	@ 0x2c
 8022522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022524:	060b      	lsls	r3, r1, #24
 8022526:	bf46      	itte	mi
 8022528:	71a1      	strbmi	r1, [r4, #6]
 802252a:	2302      	movmi	r3, #2
 802252c:	2301      	movpl	r3, #1
 802252e:	e7d4      	b.n	80224da <MobleModelSendPacket+0x4e>
 8022530:	2001      	movs	r0, #1
 8022532:	e7f5      	b.n	8022520 <MobleModelSendPacket+0x94>
 8022534:	08031690 	.word	0x08031690
 8022538:	0802fd7d 	.word	0x0802fd7d
 802253c:	08031566 	.word	0x08031566
 8022540:	2000140c 	.word	0x2000140c

08022544 <BnrgmHealthModel_ProcessPeriodSet>:
 8022544:	b430      	push	{r4, r5}
 8022546:	460a      	mov	r2, r1
 8022548:	7819      	ldrb	r1, [r3, #0]
 802254a:	9c03      	ldr	r4, [sp, #12]
 802254c:	290f      	cmp	r1, #15
 802254e:	d819      	bhi.n	8022584 <BnrgmHealthModel_ProcessPeriodSet+0x40>
 8022550:	6803      	ldr	r3, [r0, #0]
 8022552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022554:	2537      	movs	r5, #55	@ 0x37
 8022556:	f883 106d 	strb.w	r1, [r3, #109]	@ 0x6d
 802255a:	2300      	movs	r3, #0
 802255c:	7025      	strb	r5, [r4, #0]
 802255e:	7221      	strb	r1, [r4, #8]
 8022560:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 8022564:	2101      	movs	r1, #1
 8022566:	70a3      	strb	r3, [r4, #2]
 8022568:	70e3      	strb	r3, [r4, #3]
 802256a:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 802256e:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
 8022572:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
 8022576:	7065      	strb	r5, [r4, #1]
 8022578:	f884 10a3 	strb.w	r1, [r4, #163]	@ 0xa3
 802257c:	4623      	mov	r3, r4
 802257e:	bc30      	pop	{r4, r5}
 8022580:	f7ff bf84 	b.w	802248c <MobleModelSendPacket>
 8022584:	2003      	movs	r0, #3
 8022586:	bc30      	pop	{r4, r5}
 8022588:	4770      	bx	lr

0802258a <BnrgmHealthModel_SendFaultStatus>:
 802258a:	b4f0      	push	{r4, r5, r6, r7}
 802258c:	9d04      	ldr	r5, [sp, #16]
 802258e:	f8a5 3009 	strh.w	r3, [r5, #9]
 8022592:	6803      	ldr	r3, [r0, #0]
 8022594:	722a      	strb	r2, [r5, #8]
 8022596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022598:	2400      	movs	r4, #0
 802259a:	2605      	movs	r6, #5
 802259c:	f103 0253 	add.w	r2, r3, #83	@ 0x53
 80225a0:	702e      	strb	r6, [r5, #0]
 80225a2:	706c      	strb	r4, [r5, #1]
 80225a4:	70ac      	strb	r4, [r5, #2]
 80225a6:	70ec      	strb	r4, [r5, #3]
 80225a8:	335b      	adds	r3, #91	@ 0x5b
 80225aa:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 80225ae:	b11e      	cbz	r6, 80225b8 <BnrgmHealthModel_SendFaultStatus+0x2e>
 80225b0:	192f      	adds	r7, r5, r4
 80225b2:	3401      	adds	r4, #1
 80225b4:	72fe      	strb	r6, [r7, #11]
 80225b6:	b2e4      	uxtb	r4, r4
 80225b8:	429a      	cmp	r2, r3
 80225ba:	d1f6      	bne.n	80225aa <BnrgmHealthModel_SendFaultStatus+0x20>
 80225bc:	3403      	adds	r4, #3
 80225be:	f8c5 40a3 	str.w	r4, [r5, #163]	@ 0xa3
 80225c2:	462b      	mov	r3, r5
 80225c4:	460a      	mov	r2, r1
 80225c6:	bcf0      	pop	{r4, r5, r6, r7}
 80225c8:	2101      	movs	r1, #1
 80225ca:	f7ff bf5f 	b.w	802248c <MobleModelSendPacket>
	...

080225d0 <BnrgmHealthModel_ProcessFaultTest>:
 80225d0:	b470      	push	{r4, r5, r6}
 80225d2:	4a0d      	ldr	r2, [pc, #52]	@ (8022608 <BnrgmHealthModel_ProcessFaultTest+0x38>)
 80225d4:	781c      	ldrb	r4, [r3, #0]
 80225d6:	f892 2f20 	ldrb.w	r2, [r2, #3872]	@ 0xf20
 80225da:	9e04      	ldr	r6, [sp, #16]
 80225dc:	42a2      	cmp	r2, r4
 80225de:	4605      	mov	r5, r0
 80225e0:	d002      	beq.n	80225e8 <BnrgmHealthModel_ProcessFaultTest+0x18>
 80225e2:	2003      	movs	r0, #3
 80225e4:	bc70      	pop	{r4, r5, r6}
 80225e6:	4770      	bx	lr
 80225e8:	f8d3 4001 	ldr.w	r4, [r3, #1]
 80225ec:	4b07      	ldr	r3, [pc, #28]	@ (802260c <BnrgmHealthModel_ProcessFaultTest+0x3c>)
 80225ee:	885b      	ldrh	r3, [r3, #2]
 80225f0:	b2a4      	uxth	r4, r4
 80225f2:	42a3      	cmp	r3, r4
 80225f4:	d1f5      	bne.n	80225e2 <BnrgmHealthModel_ProcessFaultTest+0x12>
 80225f6:	682c      	ldr	r4, [r5, #0]
 80225f8:	6a64      	ldr	r4, [r4, #36]	@ 0x24
 80225fa:	f884 204a 	strb.w	r2, [r4, #74]	@ 0x4a
 80225fe:	9603      	str	r6, [sp, #12]
 8022600:	bc70      	pop	{r4, r5, r6}
 8022602:	f7ff bfc2 	b.w	802258a <BnrgmHealthModel_SendFaultStatus>
 8022606:	bf00      	nop
 8022608:	20000314 	.word	0x20000314
 802260c:	20000008 	.word	0x20000008

08022610 <BnrgmHealthModel_ProcessFaultGet>:
 8022610:	b410      	push	{r4}
 8022612:	681a      	ldr	r2, [r3, #0]
 8022614:	4b07      	ldr	r3, [pc, #28]	@ (8022634 <BnrgmHealthModel_ProcessFaultGet+0x24>)
 8022616:	9c02      	ldr	r4, [sp, #8]
 8022618:	885b      	ldrh	r3, [r3, #2]
 802261a:	b292      	uxth	r2, r2
 802261c:	4293      	cmp	r3, r2
 802261e:	d105      	bne.n	802262c <BnrgmHealthModel_ProcessFaultGet+0x1c>
 8022620:	9401      	str	r4, [sp, #4]
 8022622:	2200      	movs	r2, #0
 8022624:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022628:	f7ff bfaf 	b.w	802258a <BnrgmHealthModel_SendFaultStatus>
 802262c:	2003      	movs	r0, #3
 802262e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022632:	4770      	bx	lr
 8022634:	20000008 	.word	0x20000008

08022638 <BnrgmHealthModel_ProcessFaultClear>:
 8022638:	b470      	push	{r4, r5, r6}
 802263a:	681c      	ldr	r4, [r3, #0]
 802263c:	4b0c      	ldr	r3, [pc, #48]	@ (8022670 <BnrgmHealthModel_ProcessFaultClear+0x38>)
 802263e:	9e04      	ldr	r6, [sp, #16]
 8022640:	885b      	ldrh	r3, [r3, #2]
 8022642:	b2a4      	uxth	r4, r4
 8022644:	42a3      	cmp	r3, r4
 8022646:	d110      	bne.n	802266a <BnrgmHealthModel_ProcessFaultClear+0x32>
 8022648:	6804      	ldr	r4, [r0, #0]
 802264a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 802264c:	2400      	movs	r4, #0
 802264e:	656c      	str	r4, [r5, #84]	@ 0x54
 8022650:	65ac      	str	r4, [r5, #88]	@ 0x58
 8022652:	6805      	ldr	r5, [r0, #0]
 8022654:	6a6d      	ldr	r5, [r5, #36]	@ 0x24
 8022656:	64ec      	str	r4, [r5, #76]	@ 0x4c
 8022658:	652c      	str	r4, [r5, #80]	@ 0x50
 802265a:	6802      	ldr	r2, [r0, #0]
 802265c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 802265e:	f892 204a 	ldrb.w	r2, [r2, #74]	@ 0x4a
 8022662:	9603      	str	r6, [sp, #12]
 8022664:	bc70      	pop	{r4, r5, r6}
 8022666:	f7ff bf90 	b.w	802258a <BnrgmHealthModel_SendFaultStatus>
 802266a:	2003      	movs	r0, #3
 802266c:	bc70      	pop	{r4, r5, r6}
 802266e:	4770      	bx	lr
 8022670:	20000008 	.word	0x20000008

08022674 <BnrgmHealthModel_ProcessAttentionSet>:
 8022674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022676:	9101      	str	r1, [sp, #4]
 8022678:	7819      	ldrb	r1, [r3, #0]
 802267a:	6803      	ldr	r3, [r0, #0]
 802267c:	9c07      	ldr	r4, [sp, #28]
 802267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022680:	4605      	mov	r5, r0
 8022682:	f883 106e 	strb.w	r1, [r3, #110]	@ 0x6e
 8022686:	f7f4 ff93 	bl	80175b0 <BnrgmHealthModelSetAttentionTimer>
 802268a:	682b      	ldr	r3, [r5, #0]
 802268c:	9a01      	ldr	r2, [sp, #4]
 802268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022690:	2007      	movs	r0, #7
 8022692:	f893 106e 	ldrb.w	r1, [r3, #110]	@ 0x6e
 8022696:	7020      	strb	r0, [r4, #0]
 8022698:	2300      	movs	r3, #0
 802269a:	f06f 007f 	mvn.w	r0, #127	@ 0x7f
 802269e:	7060      	strb	r0, [r4, #1]
 80226a0:	70a3      	strb	r3, [r4, #2]
 80226a2:	70e3      	strb	r3, [r4, #3]
 80226a4:	7221      	strb	r1, [r4, #8]
 80226a6:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 80226aa:	2101      	movs	r1, #1
 80226ac:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
 80226b0:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
 80226b4:	4628      	mov	r0, r5
 80226b6:	4623      	mov	r3, r4
 80226b8:	f884 10a3 	strb.w	r1, [r4, #163]	@ 0xa3
 80226bc:	b003      	add	sp, #12
 80226be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80226c2:	f7ff bee3 	b.w	802248c <MobleModelSendPacket>
	...

080226c8 <MobleConfigModel_ProcessVendorModelSubscriptionGet>:
 80226c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226cc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80226ce:	460f      	mov	r7, r1
 80226d0:	4605      	mov	r5, r0
 80226d2:	b930      	cbnz	r0, 80226e2 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x1a>
 80226d4:	4b4d      	ldr	r3, [pc, #308]	@ (802280c <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x144>)
 80226d6:	4a4e      	ldr	r2, [pc, #312]	@ (8022810 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x148>)
 80226d8:	f641 1187 	movw	r1, #6535	@ 0x1987
 80226dc:	484d      	ldr	r0, [pc, #308]	@ (8022814 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x14c>)
 80226de:	f005 fe7d 	bl	80283dc <__assert_func>
 80226e2:	6802      	ldr	r2, [r0, #0]
 80226e4:	b922      	cbnz	r2, 80226f0 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x28>
 80226e6:	4b4c      	ldr	r3, [pc, #304]	@ (8022818 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x150>)
 80226e8:	4a49      	ldr	r2, [pc, #292]	@ (8022810 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x148>)
 80226ea:	f641 1188 	movw	r1, #6536	@ 0x1988
 80226ee:	e7f5      	b.n	80226dc <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x14>
 80226f0:	8851      	ldrh	r1, [r2, #2]
 80226f2:	f8d3 9000 	ldr.w	r9, [r3]
 80226f6:	7f12      	ldrb	r2, [r2, #28]
 80226f8:	f8d3 8002 	ldr.w	r8, [r3, #2]
 80226fc:	fa1f f689 	uxth.w	r6, r9
 8022700:	1e48      	subs	r0, r1, #1
 8022702:	4402      	add	r2, r0
 8022704:	428e      	cmp	r6, r1
 8022706:	b292      	uxth	r2, r2
 8022708:	d001      	beq.n	802270e <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x46>
 802270a:	4296      	cmp	r6, r2
 802270c:	d876      	bhi.n	80227fc <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x134>
 802270e:	eba9 0101 	sub.w	r1, r9, r1
 8022712:	b2c9      	uxtb	r1, r1
 8022714:	4640      	mov	r0, r8
 8022716:	f7f0 fd71 	bl	80131fc <ApplicationChkVendorModelActive>
 802271a:	fab0 f080 	clz	r0, r0
 802271e:	0940      	lsrs	r0, r0, #5
 8022720:	0040      	lsls	r0, r0, #1
 8022722:	682b      	ldr	r3, [r5, #0]
 8022724:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8022728:	7220      	strb	r0, [r4, #8]
 802272a:	232c      	movs	r3, #44	@ 0x2c
 802272c:	f04f 0a00 	mov.w	sl, #0
 8022730:	7023      	strb	r3, [r4, #0]
 8022732:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8022736:	2202      	movs	r2, #2
 8022738:	fa1f f189 	uxth.w	r1, r9
 802273c:	7063      	strb	r3, [r4, #1]
 802273e:	f884 a002 	strb.w	sl, [r4, #2]
 8022742:	f884 a003 	strb.w	sl, [r4, #3]
 8022746:	f104 0009 	add.w	r0, r4, #9
 802274a:	f7f8 ffb9 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 802274e:	2204      	movs	r2, #4
 8022750:	4641      	mov	r1, r8
 8022752:	f104 000b 	add.w	r0, r4, #11
 8022756:	f7f8 ffb3 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 802275a:	fa5f f38a 	uxtb.w	r3, sl
 802275e:	459b      	cmp	fp, r3
 8022760:	d951      	bls.n	8022806 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x13e>
 8022762:	682b      	ldr	r3, [r5, #0]
 8022764:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8022768:	46d1      	mov	r9, sl
 802276a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802276c:	8813      	ldrh	r3, [r2, #0]
 802276e:	42b3      	cmp	r3, r6
 8022770:	f10a 0a01 	add.w	sl, sl, #1
 8022774:	d1f1      	bne.n	802275a <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x92>
 8022776:	2300      	movs	r3, #0
 8022778:	2038      	movs	r0, #56	@ 0x38
 802277a:	3278      	adds	r2, #120	@ 0x78
 802277c:	fb00 fa03 	mul.w	sl, r0, r3
 8022780:	f852 100a 	ldr.w	r1, [r2, sl]
 8022784:	4588      	cmp	r8, r1
 8022786:	d13b      	bne.n	8022800 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x138>
 8022788:	f04f 0b00 	mov.w	fp, #0
 802278c:	f109 0908 	add.w	r9, r9, #8
 8022790:	221c      	movs	r2, #28
 8022792:	f10a 0a80 	add.w	sl, sl, #128	@ 0x80
 8022796:	465e      	mov	r6, fp
 8022798:	ea4f 0989 	mov.w	r9, r9, lsl #2
 802279c:	fb02 f803 	mul.w	r8, r2, r3
 80227a0:	682b      	ldr	r3, [r5, #0]
 80227a2:	444b      	add	r3, r9
 80227a4:	6858      	ldr	r0, [r3, #4]
 80227a6:	eb08 030b 	add.w	r3, r8, fp
 80227aa:	3340      	adds	r3, #64	@ 0x40
 80227ac:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80227b0:	b18b      	cbz	r3, 80227d6 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x10e>
 80227b2:	f10d 0206 	add.w	r2, sp, #6
 80227b6:	4659      	mov	r1, fp
 80227b8:	4450      	add	r0, sl
 80227ba:	f7fa fb8b 	bl	801ced4 <MobleSetGet>
 80227be:	2801      	cmp	r0, #1
 80227c0:	d809      	bhi.n	80227d6 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x10e>
 80227c2:	2202      	movs	r2, #2
 80227c4:	fb02 4006 	mla	r0, r2, r6, r4
 80227c8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80227cc:	300f      	adds	r0, #15
 80227ce:	f7f8 ff77 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 80227d2:	3601      	adds	r6, #1
 80227d4:	b2f6      	uxtb	r6, r6
 80227d6:	f10b 0b01 	add.w	fp, fp, #1
 80227da:	f1bb 0f0a 	cmp.w	fp, #10
 80227de:	d1df      	bne.n	80227a0 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0xd8>
 80227e0:	2307      	movs	r3, #7
 80227e2:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80227e6:	f8c4 30a3 	str.w	r3, [r4, #163]	@ 0xa3
 80227ea:	463a      	mov	r2, r7
 80227ec:	4623      	mov	r3, r4
 80227ee:	2101      	movs	r1, #1
 80227f0:	4628      	mov	r0, r5
 80227f2:	b003      	add	sp, #12
 80227f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227f8:	f7ff be48 	b.w	802248c <MobleModelSendPacket>
 80227fc:	2001      	movs	r0, #1
 80227fe:	e790      	b.n	8022722 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x5a>
 8022800:	3301      	adds	r3, #1
 8022802:	2b0b      	cmp	r3, #11
 8022804:	d1ba      	bne.n	802277c <MobleConfigModel_ProcessVendorModelSubscriptionGet+0xb4>
 8022806:	2600      	movs	r6, #0
 8022808:	e7ea      	b.n	80227e0 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x118>
 802280a:	bf00      	nop
 802280c:	08031449 	.word	0x08031449
 8022810:	0802fd92 	.word	0x0802fd92
 8022814:	08030edb 	.word	0x08030edb
 8022818:	080313a4 	.word	0x080313a4

0802281c <MobleConfigModel_SendVendorModelAppList>:
 802281c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022820:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022822:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8022826:	460e      	mov	r6, r1
 8022828:	4605      	mov	r5, r0
 802282a:	4619      	mov	r1, r3
 802282c:	e9dd 930a 	ldrd	r9, r3, [sp, #40]	@ 0x28
 8022830:	b930      	cbnz	r0, 8022840 <MobleConfigModel_SendVendorModelAppList+0x24>
 8022832:	4b18      	ldr	r3, [pc, #96]	@ (8022894 <MobleConfigModel_SendVendorModelAppList+0x78>)
 8022834:	4a18      	ldr	r2, [pc, #96]	@ (8022898 <MobleConfigModel_SendVendorModelAppList+0x7c>)
 8022836:	4819      	ldr	r0, [pc, #100]	@ (802289c <MobleConfigModel_SendVendorModelAppList+0x80>)
 8022838:	f44f 6122 	mov.w	r1, #2592	@ 0xa20
 802283c:	f005 fdce 	bl	80283dc <__assert_func>
 8022840:	204e      	movs	r0, #78	@ 0x4e
 8022842:	2700      	movs	r7, #0
 8022844:	7020      	strb	r0, [r4, #0]
 8022846:	f06f 007f 	mvn.w	r0, #127	@ 0x7f
 802284a:	7060      	strb	r0, [r4, #1]
 802284c:	7222      	strb	r2, [r4, #8]
 802284e:	70a7      	strb	r7, [r4, #2]
 8022850:	70e7      	strb	r7, [r4, #3]
 8022852:	2202      	movs	r2, #2
 8022854:	f104 0009 	add.w	r0, r4, #9
 8022858:	9301      	str	r3, [sp, #4]
 802285a:	f7f8 ff31 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 802285e:	4649      	mov	r1, r9
 8022860:	2204      	movs	r2, #4
 8022862:	f104 000b 	add.w	r0, r4, #11
 8022866:	f7f8 ff2b 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 802286a:	9b01      	ldr	r3, [sp, #4]
 802286c:	f104 020f 	add.w	r2, r4, #15
 8022870:	4641      	mov	r1, r8
 8022872:	4638      	mov	r0, r7
 8022874:	f7f4 fd30 	bl	80172d8 <MobleConfigModelPutKeyIdxs>
 8022878:	b2c3      	uxtb	r3, r0
 802287a:	3307      	adds	r3, #7
 802287c:	f8c4 30a3 	str.w	r3, [r4, #163]	@ 0xa3
 8022880:	4632      	mov	r2, r6
 8022882:	4623      	mov	r3, r4
 8022884:	2101      	movs	r1, #1
 8022886:	4628      	mov	r0, r5
 8022888:	b003      	add	sp, #12
 802288a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802288e:	f7ff bdfd 	b.w	802248c <MobleModelSendPacket>
 8022892:	bf00      	nop
 8022894:	08030ec9 	.word	0x08030ec9
 8022898:	0802fdc5 	.word	0x0802fdc5
 802289c:	08030edb 	.word	0x08030edb

080228a0 <MobleConfigModel_ProcessVendorModelAppGet>:
 80228a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80228a4:	b08a      	sub	sp, #40	@ 0x28
 80228a6:	af08      	add	r7, sp, #32
 80228a8:	469c      	mov	ip, r3
 80228aa:	2300      	movs	r3, #0
 80228ac:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80228ae:	9308      	str	r3, [sp, #32]
 80228b0:	460d      	mov	r5, r1
 80228b2:	80bb      	strh	r3, [r7, #4]
 80228b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80228b8:	4604      	mov	r4, r0
 80228ba:	b930      	cbnz	r0, 80228ca <MobleConfigModel_ProcessVendorModelAppGet+0x2a>
 80228bc:	4b23      	ldr	r3, [pc, #140]	@ (802294c <MobleConfigModel_ProcessVendorModelAppGet+0xac>)
 80228be:	4a24      	ldr	r2, [pc, #144]	@ (8022950 <MobleConfigModel_ProcessVendorModelAppGet+0xb0>)
 80228c0:	f641 112f 	movw	r1, #6447	@ 0x192f
 80228c4:	4823      	ldr	r0, [pc, #140]	@ (8022954 <MobleConfigModel_ProcessVendorModelAppGet+0xb4>)
 80228c6:	f005 fd89 	bl	80283dc <__assert_func>
 80228ca:	6802      	ldr	r2, [r0, #0]
 80228cc:	b922      	cbnz	r2, 80228d8 <MobleConfigModel_ProcessVendorModelAppGet+0x38>
 80228ce:	4b22      	ldr	r3, [pc, #136]	@ (8022958 <MobleConfigModel_ProcessVendorModelAppGet+0xb8>)
 80228d0:	4a1f      	ldr	r2, [pc, #124]	@ (8022950 <MobleConfigModel_ProcessVendorModelAppGet+0xb0>)
 80228d2:	f641 1130 	movw	r1, #6448	@ 0x1930
 80228d6:	e7f5      	b.n	80228c4 <MobleConfigModel_ProcessVendorModelAppGet+0x24>
 80228d8:	8850      	ldrh	r0, [r2, #2]
 80228da:	f8dc 1000 	ldr.w	r1, [ip]
 80228de:	7f12      	ldrb	r2, [r2, #28]
 80228e0:	f8dc 8002 	ldr.w	r8, [ip, #2]
 80228e4:	b28b      	uxth	r3, r1
 80228e6:	f100 3eff 	add.w	lr, r0, #4294967295
 80228ea:	4472      	add	r2, lr
 80228ec:	4283      	cmp	r3, r0
 80228ee:	b292      	uxth	r2, r2
 80228f0:	d001      	beq.n	80228f6 <MobleConfigModel_ProcessVendorModelAppGet+0x56>
 80228f2:	4293      	cmp	r3, r2
 80228f4:	d826      	bhi.n	8022944 <MobleConfigModel_ProcessVendorModelAppGet+0xa4>
 80228f6:	1a09      	subs	r1, r1, r0
 80228f8:	b2c9      	uxtb	r1, r1
 80228fa:	4640      	mov	r0, r8
 80228fc:	9305      	str	r3, [sp, #20]
 80228fe:	f7f0 fc7d 	bl	80131fc <ApplicationChkVendorModelActive>
 8022902:	9b05      	ldr	r3, [sp, #20]
 8022904:	b300      	cbz	r0, 8022948 <MobleConfigModel_ProcessVendorModelAppGet+0xa8>
 8022906:	4a15      	ldr	r2, [pc, #84]	@ (802295c <MobleConfigModel_ProcessVendorModelAppGet+0xbc>)
 8022908:	f892 261d 	ldrb.w	r2, [r2, #1565]	@ 0x61d
 802290c:	b95a      	cbnz	r2, 8022926 <MobleConfigModel_ProcessVendorModelAppGet+0x86>
 802290e:	e9cd 2602 	strd	r2, r6, [sp, #8]
 8022912:	9201      	str	r2, [sp, #4]
 8022914:	f8cd 8000 	str.w	r8, [sp]
 8022918:	4629      	mov	r1, r5
 802291a:	4620      	mov	r0, r4
 802291c:	f7ff ff7e 	bl	802281c <MobleConfigModel_SendVendorModelAppList>
 8022920:	b00a      	add	sp, #40	@ 0x28
 8022922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022926:	f10d 021e 	add.w	r2, sp, #30
 802292a:	4618      	mov	r0, r3
 802292c:	4639      	mov	r1, r7
 802292e:	9305      	str	r3, [sp, #20]
 8022930:	f7f7 f882 	bl	8019a38 <MoblePalCrypto_GetAppBind_VendorModel>
 8022934:	9b05      	ldr	r3, [sp, #20]
 8022936:	2200      	movs	r2, #0
 8022938:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 802293c:	9603      	str	r6, [sp, #12]
 802293e:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8022942:	e7e7      	b.n	8022914 <MobleConfigModel_ProcessVendorModelAppGet+0x74>
 8022944:	2201      	movs	r2, #1
 8022946:	e7f7      	b.n	8022938 <MobleConfigModel_ProcessVendorModelAppGet+0x98>
 8022948:	2202      	movs	r2, #2
 802294a:	e7f5      	b.n	8022938 <MobleConfigModel_ProcessVendorModelAppGet+0x98>
 802294c:	08031449 	.word	0x08031449
 8022950:	0802fded 	.word	0x0802fded
 8022954:	08030edb 	.word	0x08030edb
 8022958:	080313a4 	.word	0x080313a4
 802295c:	2000140c 	.word	0x2000140c

08022960 <MobleConfigModel_ProcessSigModelSubscriptionGet>:
 8022960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022964:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022966:	460f      	mov	r7, r1
 8022968:	4605      	mov	r5, r0
 802296a:	b930      	cbnz	r0, 802297a <MobleConfigModel_ProcessSigModelSubscriptionGet+0x1a>
 802296c:	4b4d      	ldr	r3, [pc, #308]	@ (8022aa4 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x144>)
 802296e:	4a4e      	ldr	r2, [pc, #312]	@ (8022aa8 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x148>)
 8022970:	f641 01e6 	movw	r1, #6374	@ 0x18e6
 8022974:	484d      	ldr	r0, [pc, #308]	@ (8022aac <MobleConfigModel_ProcessSigModelSubscriptionGet+0x14c>)
 8022976:	f005 fd31 	bl	80283dc <__assert_func>
 802297a:	6802      	ldr	r2, [r0, #0]
 802297c:	b922      	cbnz	r2, 8022988 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x28>
 802297e:	4b4c      	ldr	r3, [pc, #304]	@ (8022ab0 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x150>)
 8022980:	4a49      	ldr	r2, [pc, #292]	@ (8022aa8 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x148>)
 8022982:	f641 01e7 	movw	r1, #6375	@ 0x18e7
 8022986:	e7f5      	b.n	8022974 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x14>
 8022988:	8851      	ldrh	r1, [r2, #2]
 802298a:	f8d3 9000 	ldr.w	r9, [r3]
 802298e:	7f12      	ldrb	r2, [r2, #28]
 8022990:	f8d3 6002 	ldr.w	r6, [r3, #2]
 8022994:	fa1f f889 	uxth.w	r8, r9
 8022998:	1e48      	subs	r0, r1, #1
 802299a:	4402      	add	r2, r0
 802299c:	4588      	cmp	r8, r1
 802299e:	b292      	uxth	r2, r2
 80229a0:	d001      	beq.n	80229a6 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x46>
 80229a2:	4590      	cmp	r8, r2
 80229a4:	d876      	bhi.n	8022a94 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x134>
 80229a6:	eba9 0101 	sub.w	r1, r9, r1
 80229aa:	b2c9      	uxtb	r1, r1
 80229ac:	b2b0      	uxth	r0, r6
 80229ae:	f7f0 fbe9 	bl	8013184 <ApplicationChkSigModelActive>
 80229b2:	fab0 f080 	clz	r0, r0
 80229b6:	0940      	lsrs	r0, r0, #5
 80229b8:	0040      	lsls	r0, r0, #1
 80229ba:	682b      	ldr	r3, [r5, #0]
 80229bc:	f893 b01c 	ldrb.w	fp, [r3, #28]
 80229c0:	7220      	strb	r0, [r4, #8]
 80229c2:	232a      	movs	r3, #42	@ 0x2a
 80229c4:	f04f 0a00 	mov.w	sl, #0
 80229c8:	7023      	strb	r3, [r4, #0]
 80229ca:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80229ce:	fa1f f189 	uxth.w	r1, r9
 80229d2:	7063      	strb	r3, [r4, #1]
 80229d4:	f884 a002 	strb.w	sl, [r4, #2]
 80229d8:	f884 a003 	strb.w	sl, [r4, #3]
 80229dc:	2202      	movs	r2, #2
 80229de:	f104 0009 	add.w	r0, r4, #9
 80229e2:	b2b6      	uxth	r6, r6
 80229e4:	f7f8 fe6c 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 80229e8:	4631      	mov	r1, r6
 80229ea:	f104 000b 	add.w	r0, r4, #11
 80229ee:	f7f8 fe67 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 80229f2:	fa5f f38a 	uxtb.w	r3, sl
 80229f6:	459b      	cmp	fp, r3
 80229f8:	d951      	bls.n	8022a9e <MobleConfigModel_ProcessSigModelSubscriptionGet+0x13e>
 80229fa:	682b      	ldr	r3, [r5, #0]
 80229fc:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8022a00:	46d1      	mov	r9, sl
 8022a02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8022a04:	8813      	ldrh	r3, [r2, #0]
 8022a06:	4543      	cmp	r3, r8
 8022a08:	f10a 0a01 	add.w	sl, sl, #1
 8022a0c:	d1f1      	bne.n	80229f2 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x92>
 8022a0e:	2300      	movs	r3, #0
 8022a10:	2038      	movs	r0, #56	@ 0x38
 8022a12:	3278      	adds	r2, #120	@ 0x78
 8022a14:	fb00 fa03 	mul.w	sl, r0, r3
 8022a18:	f852 100a 	ldr.w	r1, [r2, sl]
 8022a1c:	42b1      	cmp	r1, r6
 8022a1e:	d13b      	bne.n	8022a98 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x138>
 8022a20:	f04f 0b00 	mov.w	fp, #0
 8022a24:	f109 0908 	add.w	r9, r9, #8
 8022a28:	221c      	movs	r2, #28
 8022a2a:	f10a 0a80 	add.w	sl, sl, #128	@ 0x80
 8022a2e:	465e      	mov	r6, fp
 8022a30:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8022a34:	fb02 f803 	mul.w	r8, r2, r3
 8022a38:	682b      	ldr	r3, [r5, #0]
 8022a3a:	444b      	add	r3, r9
 8022a3c:	6858      	ldr	r0, [r3, #4]
 8022a3e:	eb08 030b 	add.w	r3, r8, fp
 8022a42:	3340      	adds	r3, #64	@ 0x40
 8022a44:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8022a48:	b18b      	cbz	r3, 8022a6e <MobleConfigModel_ProcessSigModelSubscriptionGet+0x10e>
 8022a4a:	f10d 0206 	add.w	r2, sp, #6
 8022a4e:	4659      	mov	r1, fp
 8022a50:	4450      	add	r0, sl
 8022a52:	f7fa fa3f 	bl	801ced4 <MobleSetGet>
 8022a56:	2801      	cmp	r0, #1
 8022a58:	d809      	bhi.n	8022a6e <MobleConfigModel_ProcessSigModelSubscriptionGet+0x10e>
 8022a5a:	2202      	movs	r2, #2
 8022a5c:	fb02 4006 	mla	r0, r2, r6, r4
 8022a60:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8022a64:	300d      	adds	r0, #13
 8022a66:	f7f8 fe2b 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8022a6a:	3601      	adds	r6, #1
 8022a6c:	b2f6      	uxtb	r6, r6
 8022a6e:	f10b 0b01 	add.w	fp, fp, #1
 8022a72:	f1bb 0f0a 	cmp.w	fp, #10
 8022a76:	d1df      	bne.n	8022a38 <MobleConfigModel_ProcessSigModelSubscriptionGet+0xd8>
 8022a78:	2305      	movs	r3, #5
 8022a7a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8022a7e:	f8c4 30a3 	str.w	r3, [r4, #163]	@ 0xa3
 8022a82:	463a      	mov	r2, r7
 8022a84:	4623      	mov	r3, r4
 8022a86:	2101      	movs	r1, #1
 8022a88:	4628      	mov	r0, r5
 8022a8a:	b003      	add	sp, #12
 8022a8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a90:	f7ff bcfc 	b.w	802248c <MobleModelSendPacket>
 8022a94:	2001      	movs	r0, #1
 8022a96:	e790      	b.n	80229ba <MobleConfigModel_ProcessSigModelSubscriptionGet+0x5a>
 8022a98:	3301      	adds	r3, #1
 8022a9a:	2b0b      	cmp	r3, #11
 8022a9c:	d1ba      	bne.n	8022a14 <MobleConfigModel_ProcessSigModelSubscriptionGet+0xb4>
 8022a9e:	2600      	movs	r6, #0
 8022aa0:	e7ea      	b.n	8022a78 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x118>
 8022aa2:	bf00      	nop
 8022aa4:	08031449 	.word	0x08031449
 8022aa8:	0802fe17 	.word	0x0802fe17
 8022aac:	08030edb 	.word	0x08030edb
 8022ab0:	080313a4 	.word	0x080313a4

08022ab4 <MobleConfigModel_SendSigModelAppList>:
 8022ab4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022ab8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022aba:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 8022abe:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8022ac2:	460e      	mov	r6, r1
 8022ac4:	4605      	mov	r5, r0
 8022ac6:	4619      	mov	r1, r3
 8022ac8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022aca:	b930      	cbnz	r0, 8022ada <MobleConfigModel_SendSigModelAppList+0x26>
 8022acc:	4b17      	ldr	r3, [pc, #92]	@ (8022b2c <MobleConfigModel_SendSigModelAppList+0x78>)
 8022ace:	4a18      	ldr	r2, [pc, #96]	@ (8022b30 <MobleConfigModel_SendSigModelAppList+0x7c>)
 8022ad0:	4818      	ldr	r0, [pc, #96]	@ (8022b34 <MobleConfigModel_SendSigModelAppList+0x80>)
 8022ad2:	f640 1191 	movw	r1, #2449	@ 0x991
 8022ad6:	f005 fc81 	bl	80283dc <__assert_func>
 8022ada:	204c      	movs	r0, #76	@ 0x4c
 8022adc:	2700      	movs	r7, #0
 8022ade:	7020      	strb	r0, [r4, #0]
 8022ae0:	f06f 007f 	mvn.w	r0, #127	@ 0x7f
 8022ae4:	7060      	strb	r0, [r4, #1]
 8022ae6:	7222      	strb	r2, [r4, #8]
 8022ae8:	70a7      	strb	r7, [r4, #2]
 8022aea:	2202      	movs	r2, #2
 8022aec:	70e7      	strb	r7, [r4, #3]
 8022aee:	f104 0009 	add.w	r0, r4, #9
 8022af2:	9301      	str	r3, [sp, #4]
 8022af4:	f7f8 fde4 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8022af8:	4649      	mov	r1, r9
 8022afa:	f104 000b 	add.w	r0, r4, #11
 8022afe:	f7f8 fddf 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8022b02:	9b01      	ldr	r3, [sp, #4]
 8022b04:	f104 020d 	add.w	r2, r4, #13
 8022b08:	4641      	mov	r1, r8
 8022b0a:	4638      	mov	r0, r7
 8022b0c:	f7f4 fbe4 	bl	80172d8 <MobleConfigModelPutKeyIdxs>
 8022b10:	b2c3      	uxtb	r3, r0
 8022b12:	3305      	adds	r3, #5
 8022b14:	f8c4 30a3 	str.w	r3, [r4, #163]	@ 0xa3
 8022b18:	4632      	mov	r2, r6
 8022b1a:	4623      	mov	r3, r4
 8022b1c:	2101      	movs	r1, #1
 8022b1e:	4628      	mov	r0, r5
 8022b20:	b003      	add	sp, #12
 8022b22:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022b26:	f7ff bcb1 	b.w	802248c <MobleModelSendPacket>
 8022b2a:	bf00      	nop
 8022b2c:	08030ec9 	.word	0x08030ec9
 8022b30:	0802fe47 	.word	0x0802fe47
 8022b34:	08030edb 	.word	0x08030edb

08022b38 <MobleConfigModel_ProcessSigModelAppGet>:
 8022b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022b3c:	b08a      	sub	sp, #40	@ 0x28
 8022b3e:	f10d 0820 	add.w	r8, sp, #32
 8022b42:	461d      	mov	r5, r3
 8022b44:	2300      	movs	r3, #0
 8022b46:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8022b48:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022b4c:	460e      	mov	r6, r1
 8022b4e:	9308      	str	r3, [sp, #32]
 8022b50:	f8a8 3004 	strh.w	r3, [r8, #4]
 8022b54:	4604      	mov	r4, r0
 8022b56:	b930      	cbnz	r0, 8022b66 <MobleConfigModel_ProcessSigModelAppGet+0x2e>
 8022b58:	4b23      	ldr	r3, [pc, #140]	@ (8022be8 <MobleConfigModel_ProcessSigModelAppGet+0xb0>)
 8022b5a:	4a24      	ldr	r2, [pc, #144]	@ (8022bec <MobleConfigModel_ProcessSigModelAppGet+0xb4>)
 8022b5c:	f641 018c 	movw	r1, #6284	@ 0x188c
 8022b60:	4823      	ldr	r0, [pc, #140]	@ (8022bf0 <MobleConfigModel_ProcessSigModelAppGet+0xb8>)
 8022b62:	f005 fc3b 	bl	80283dc <__assert_func>
 8022b66:	6802      	ldr	r2, [r0, #0]
 8022b68:	b922      	cbnz	r2, 8022b74 <MobleConfigModel_ProcessSigModelAppGet+0x3c>
 8022b6a:	4b22      	ldr	r3, [pc, #136]	@ (8022bf4 <MobleConfigModel_ProcessSigModelAppGet+0xbc>)
 8022b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8022bec <MobleConfigModel_ProcessSigModelAppGet+0xb4>)
 8022b6e:	f641 018d 	movw	r1, #6285	@ 0x188d
 8022b72:	e7f5      	b.n	8022b60 <MobleConfigModel_ProcessSigModelAppGet+0x28>
 8022b74:	8850      	ldrh	r0, [r2, #2]
 8022b76:	6829      	ldr	r1, [r5, #0]
 8022b78:	7f12      	ldrb	r2, [r2, #28]
 8022b7a:	f8d5 5002 	ldr.w	r5, [r5, #2]
 8022b7e:	b28b      	uxth	r3, r1
 8022b80:	f100 3cff 	add.w	ip, r0, #4294967295
 8022b84:	4462      	add	r2, ip
 8022b86:	4283      	cmp	r3, r0
 8022b88:	b292      	uxth	r2, r2
 8022b8a:	b2ad      	uxth	r5, r5
 8022b8c:	d001      	beq.n	8022b92 <MobleConfigModel_ProcessSigModelAppGet+0x5a>
 8022b8e:	4293      	cmp	r3, r2
 8022b90:	d825      	bhi.n	8022bde <MobleConfigModel_ProcessSigModelAppGet+0xa6>
 8022b92:	1a09      	subs	r1, r1, r0
 8022b94:	b2c9      	uxtb	r1, r1
 8022b96:	4628      	mov	r0, r5
 8022b98:	9305      	str	r3, [sp, #20]
 8022b9a:	f7f0 faf3 	bl	8013184 <ApplicationChkSigModelActive>
 8022b9e:	9b05      	ldr	r3, [sp, #20]
 8022ba0:	b1f8      	cbz	r0, 8022be2 <MobleConfigModel_ProcessSigModelAppGet+0xaa>
 8022ba2:	4a15      	ldr	r2, [pc, #84]	@ (8022bf8 <MobleConfigModel_ProcessSigModelAppGet+0xc0>)
 8022ba4:	f892 261d 	ldrb.w	r2, [r2, #1565]	@ 0x61d
 8022ba8:	b952      	cbnz	r2, 8022bc0 <MobleConfigModel_ProcessSigModelAppGet+0x88>
 8022baa:	e9cd 2702 	strd	r2, r7, [sp, #8]
 8022bae:	9201      	str	r2, [sp, #4]
 8022bb0:	9500      	str	r5, [sp, #0]
 8022bb2:	4631      	mov	r1, r6
 8022bb4:	4620      	mov	r0, r4
 8022bb6:	f7ff ff7d 	bl	8022ab4 <MobleConfigModel_SendSigModelAppList>
 8022bba:	b00a      	add	sp, #40	@ 0x28
 8022bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022bc0:	f10d 021e 	add.w	r2, sp, #30
 8022bc4:	4618      	mov	r0, r3
 8022bc6:	4641      	mov	r1, r8
 8022bc8:	9305      	str	r3, [sp, #20]
 8022bca:	f7f6 ff7b 	bl	8019ac4 <MoblePalCrypto_GetAppBind_SIGModel>
 8022bce:	9b05      	ldr	r3, [sp, #20]
 8022bd0:	2200      	movs	r2, #0
 8022bd2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8022bd6:	9703      	str	r7, [sp, #12]
 8022bd8:	e9cd 8101 	strd	r8, r1, [sp, #4]
 8022bdc:	e7e8      	b.n	8022bb0 <MobleConfigModel_ProcessSigModelAppGet+0x78>
 8022bde:	2201      	movs	r2, #1
 8022be0:	e7f7      	b.n	8022bd2 <MobleConfigModel_ProcessSigModelAppGet+0x9a>
 8022be2:	2202      	movs	r2, #2
 8022be4:	e7f5      	b.n	8022bd2 <MobleConfigModel_ProcessSigModelAppGet+0x9a>
 8022be6:	bf00      	nop
 8022be8:	08031449 	.word	0x08031449
 8022bec:	0802fe6c 	.word	0x0802fe6c
 8022bf0:	08030edb 	.word	0x08030edb
 8022bf4:	080313a4 	.word	0x080313a4
 8022bf8:	2000140c 	.word	0x2000140c

08022bfc <MobleConfigModel_ProcessNodeReset>:
 8022bfc:	b510      	push	{r4, lr}
 8022bfe:	9b03      	ldr	r3, [sp, #12]
 8022c00:	460a      	mov	r2, r1
 8022c02:	b930      	cbnz	r0, 8022c12 <MobleConfigModel_ProcessNodeReset+0x16>
 8022c04:	4b12      	ldr	r3, [pc, #72]	@ (8022c50 <MobleConfigModel_ProcessNodeReset+0x54>)
 8022c06:	4a13      	ldr	r2, [pc, #76]	@ (8022c54 <MobleConfigModel_ProcessNodeReset+0x58>)
 8022c08:	4813      	ldr	r0, [pc, #76]	@ (8022c58 <MobleConfigModel_ProcessNodeReset+0x5c>)
 8022c0a:	f640 1155 	movw	r1, #2389	@ 0x955
 8022c0e:	f005 fbe5 	bl	80283dc <__assert_func>
 8022c12:	214a      	movs	r1, #74	@ 0x4a
 8022c14:	2400      	movs	r4, #0
 8022c16:	7019      	strb	r1, [r3, #0]
 8022c18:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 8022c1c:	7059      	strb	r1, [r3, #1]
 8022c1e:	709c      	strb	r4, [r3, #2]
 8022c20:	70dc      	strb	r4, [r3, #3]
 8022c22:	f883 40a3 	strb.w	r4, [r3, #163]	@ 0xa3
 8022c26:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 8022c2a:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 8022c2e:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 8022c32:	2101      	movs	r1, #1
 8022c34:	f7ff fc2a 	bl	802248c <MobleModelSendPacket>
 8022c38:	4604      	mov	r4, r0
 8022c3a:	b930      	cbnz	r0, 8022c4a <MobleConfigModel_ProcessNodeReset+0x4e>
 8022c3c:	f7fd fea2 	bl	8020984 <MobleStackConfigInvalidate>
 8022c40:	f7fc f9a2 	bl	801ef88 <MoblePalBluetoothGracefulReset>
 8022c44:	4620      	mov	r0, r4
 8022c46:	f7e3 fbdb 	bl	8006400 <BLEMesh_UnprovisionCallback>
 8022c4a:	4620      	mov	r0, r4
 8022c4c:	bd10      	pop	{r4, pc}
 8022c4e:	bf00      	nop
 8022c50:	08030ec9 	.word	0x08030ec9
 8022c54:	0802fe93 	.word	0x0802fe93
 8022c58:	08030edb 	.word	0x08030edb

08022c5c <MobleConfigModel_ProcessNodeIdentitySet>:
 8022c5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022c60:	4607      	mov	r7, r0
 8022c62:	4618      	mov	r0, r3
 8022c64:	461a      	mov	r2, r3
 8022c66:	f7f4 fb30 	bl	80172ca <MobleConfigModelGetNetIdx>
 8022c6a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022c6c:	f892 8002 	ldrb.w	r8, [r2, #2]
 8022c70:	4689      	mov	r9, r1
 8022c72:	4605      	mov	r5, r0
 8022c74:	f7f5 fea4 	bl	80189c0 <MoblePalCryptoHasNetworkKey>
 8022c78:	b1b0      	cbz	r0, 8022ca8 <MobleConfigModel_ProcessNodeIdentitySet+0x4c>
 8022c7a:	f1b8 0f01 	cmp.w	r8, #1
 8022c7e:	d83d      	bhi.n	8022cfc <MobleConfigModel_ProcessNodeIdentitySet+0xa0>
 8022c80:	4641      	mov	r1, r8
 8022c82:	4628      	mov	r0, r5
 8022c84:	f7f5 fed0 	bl	8018a28 <MoblePalCryptoSetNodeIdntyState>
 8022c88:	4606      	mov	r6, r0
 8022c8a:	b978      	cbnz	r0, 8022cac <MobleConfigModel_ProcessNodeIdentitySet+0x50>
 8022c8c:	4641      	mov	r1, r8
 8022c8e:	4638      	mov	r0, r7
 8022c90:	f7fe f80c 	bl	8020cac <BnrgmStackSetNodeIdentityState>
 8022c94:	f8ad 5006 	strh.w	r5, [sp, #6]
 8022c98:	b967      	cbnz	r7, 8022cb4 <MobleConfigModel_ProcessNodeIdentitySet+0x58>
 8022c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8022d04 <MobleConfigModel_ProcessNodeIdentitySet+0xa8>)
 8022c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8022d08 <MobleConfigModel_ProcessNodeIdentitySet+0xac>)
 8022c9e:	481b      	ldr	r0, [pc, #108]	@ (8022d0c <MobleConfigModel_ProcessNodeIdentitySet+0xb0>)
 8022ca0:	f640 113a 	movw	r1, #2362	@ 0x93a
 8022ca4:	f005 fb9a 	bl	80283dc <__assert_func>
 8022ca8:	2604      	movs	r6, #4
 8022caa:	e7f3      	b.n	8022c94 <MobleConfigModel_ProcessNodeIdentitySet+0x38>
 8022cac:	260b      	movs	r6, #11
 8022cae:	f04f 0800 	mov.w	r8, #0
 8022cb2:	e7ef      	b.n	8022c94 <MobleConfigModel_ProcessNodeIdentitySet+0x38>
 8022cb4:	2348      	movs	r3, #72	@ 0x48
 8022cb6:	2500      	movs	r5, #0
 8022cb8:	7023      	strb	r3, [r4, #0]
 8022cba:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8022cbe:	7063      	strb	r3, [r4, #1]
 8022cc0:	f104 0209 	add.w	r2, r4, #9
 8022cc4:	f10d 0306 	add.w	r3, sp, #6
 8022cc8:	70a5      	strb	r5, [r4, #2]
 8022cca:	70e5      	strb	r5, [r4, #3]
 8022ccc:	7226      	strb	r6, [r4, #8]
 8022cce:	2101      	movs	r1, #1
 8022cd0:	4628      	mov	r0, r5
 8022cd2:	f7f4 fb01 	bl	80172d8 <MobleConfigModelPutKeyIdxs>
 8022cd6:	2304      	movs	r3, #4
 8022cd8:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8022cdc:	464a      	mov	r2, r9
 8022cde:	4623      	mov	r3, r4
 8022ce0:	4638      	mov	r0, r7
 8022ce2:	f884 800b 	strb.w	r8, [r4, #11]
 8022ce6:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 8022cea:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 8022cee:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 8022cf2:	b003      	add	sp, #12
 8022cf4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022cf8:	f7ff bbc8 	b.w	802248c <MobleModelSendPacket>
 8022cfc:	2000      	movs	r0, #0
 8022cfe:	b003      	add	sp, #12
 8022d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022d04:	08030ec9 	.word	0x08030ec9
 8022d08:	0802feb8 	.word	0x0802feb8
 8022d0c:	08030edb 	.word	0x08030edb

08022d10 <MobleConfigModel_SendNetKeyStatus>:
 8022d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022d12:	9c08      	ldr	r4, [sp, #32]
 8022d14:	f8ad 3006 	strh.w	r3, [sp, #6]
 8022d18:	460f      	mov	r7, r1
 8022d1a:	4606      	mov	r6, r0
 8022d1c:	b930      	cbnz	r0, 8022d2c <MobleConfigModel_SendNetKeyStatus+0x1c>
 8022d1e:	4b14      	ldr	r3, [pc, #80]	@ (8022d70 <MobleConfigModel_SendNetKeyStatus+0x60>)
 8022d20:	4a14      	ldr	r2, [pc, #80]	@ (8022d74 <MobleConfigModel_SendNetKeyStatus+0x64>)
 8022d22:	4815      	ldr	r0, [pc, #84]	@ (8022d78 <MobleConfigModel_SendNetKeyStatus+0x68>)
 8022d24:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8022d28:	f005 fb58 	bl	80283dc <__assert_func>
 8022d2c:	2344      	movs	r3, #68	@ 0x44
 8022d2e:	2500      	movs	r5, #0
 8022d30:	7023      	strb	r3, [r4, #0]
 8022d32:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8022d36:	7063      	strb	r3, [r4, #1]
 8022d38:	7222      	strb	r2, [r4, #8]
 8022d3a:	f10d 0306 	add.w	r3, sp, #6
 8022d3e:	f104 0209 	add.w	r2, r4, #9
 8022d42:	2101      	movs	r1, #1
 8022d44:	70a5      	strb	r5, [r4, #2]
 8022d46:	70e5      	strb	r5, [r4, #3]
 8022d48:	4628      	mov	r0, r5
 8022d4a:	f7f4 fac5 	bl	80172d8 <MobleConfigModelPutKeyIdxs>
 8022d4e:	2303      	movs	r3, #3
 8022d50:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8022d54:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 8022d58:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 8022d5c:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 8022d60:	4623      	mov	r3, r4
 8022d62:	463a      	mov	r2, r7
 8022d64:	4630      	mov	r0, r6
 8022d66:	f7ff fb91 	bl	802248c <MobleModelSendPacket>
 8022d6a:	b003      	add	sp, #12
 8022d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d6e:	bf00      	nop
 8022d70:	08030ec9 	.word	0x08030ec9
 8022d74:	0802fee0 	.word	0x0802fee0
 8022d78:	08030edb 	.word	0x08030edb

08022d7c <MobleConfigModel_ProcessNetKeyUpdate>:
 8022d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022d80:	4607      	mov	r7, r0
 8022d82:	b08d      	sub	sp, #52	@ 0x34
 8022d84:	4618      	mov	r0, r3
 8022d86:	461a      	mov	r2, r3
 8022d88:	f7f4 fa9f 	bl	80172ca <MobleConfigModelGetNetIdx>
 8022d8c:	ac04      	add	r4, sp, #16
 8022d8e:	1c93      	adds	r3, r2, #2
 8022d90:	4688      	mov	r8, r1
 8022d92:	4605      	mov	r5, r0
 8022d94:	3212      	adds	r2, #18
 8022d96:	46a1      	mov	r9, r4
 8022d98:	6818      	ldr	r0, [r3, #0]
 8022d9a:	6859      	ldr	r1, [r3, #4]
 8022d9c:	4626      	mov	r6, r4
 8022d9e:	c603      	stmia	r6!, {r0, r1}
 8022da0:	3308      	adds	r3, #8
 8022da2:	4293      	cmp	r3, r2
 8022da4:	4634      	mov	r4, r6
 8022da6:	d1f7      	bne.n	8022d98 <MobleConfigModel_ProcessNetKeyUpdate+0x1c>
 8022da8:	4628      	mov	r0, r5
 8022daa:	f7f7 f983 	bl	801a0b4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8022dae:	1e06      	subs	r6, r0, #0
 8022db0:	db2f      	blt.n	8022e12 <MobleConfigModel_ProcessNetKeyUpdate+0x96>
 8022db2:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8022db6:	d22c      	bcs.n	8022e12 <MobleConfigModel_ProcessNetKeyUpdate+0x96>
 8022db8:	683b      	ldr	r3, [r7, #0]
 8022dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022dbc:	4433      	add	r3, r6
 8022dbe:	7d1c      	ldrb	r4, [r3, #20]
 8022dc0:	bb4c      	cbnz	r4, 8022e16 <MobleConfigModel_ProcessNetKeyUpdate+0x9a>
 8022dc2:	4628      	mov	r0, r5
 8022dc4:	f7f5 fde2 	bl	801898c <MoblePalCryptoHasNewNetworkKey>
 8022dc8:	2801      	cmp	r0, #1
 8022dca:	bf08      	it	eq
 8022dcc:	240b      	moveq	r4, #11
 8022dce:	4628      	mov	r0, r5
 8022dd0:	f7f5 fdf6 	bl	80189c0 <MoblePalCryptoHasNetworkKey>
 8022dd4:	bb08      	cbnz	r0, 8022e1a <MobleConfigModel_ProcessNetKeyUpdate+0x9e>
 8022dd6:	2c00      	cmp	r4, #0
 8022dd8:	bf08      	it	eq
 8022dda:	2404      	moveq	r4, #4
 8022ddc:	f8ad 5020 	strh.w	r5, [sp, #32]
 8022de0:	f88d 402d 	strb.w	r4, [sp, #45]	@ 0x2d
 8022de4:	b924      	cbnz	r4, 8022df0 <MobleConfigModel_ProcessNetKeyUpdate+0x74>
 8022de6:	2310      	movs	r3, #16
 8022de8:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8022dec:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8022df0:	4b16      	ldr	r3, [pc, #88]	@ (8022e4c <MobleConfigModel_ProcessNetKeyUpdate+0xd0>)
 8022df2:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8022df6:	a808      	add	r0, sp, #32
 8022df8:	69db      	ldr	r3, [r3, #28]
 8022dfa:	4798      	blx	r3
 8022dfc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022dfe:	9300      	str	r3, [sp, #0]
 8022e00:	4622      	mov	r2, r4
 8022e02:	462b      	mov	r3, r5
 8022e04:	4641      	mov	r1, r8
 8022e06:	4638      	mov	r0, r7
 8022e08:	f7ff ff82 	bl	8022d10 <MobleConfigModel_SendNetKeyStatus>
 8022e0c:	b00d      	add	sp, #52	@ 0x34
 8022e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022e12:	2404      	movs	r4, #4
 8022e14:	e7db      	b.n	8022dce <MobleConfigModel_ProcessNetKeyUpdate+0x52>
 8022e16:	240b      	movs	r4, #11
 8022e18:	e7d9      	b.n	8022dce <MobleConfigModel_ProcessNetKeyUpdate+0x52>
 8022e1a:	2c00      	cmp	r4, #0
 8022e1c:	d1de      	bne.n	8022ddc <MobleConfigModel_ProcessNetKeyUpdate+0x60>
 8022e1e:	4629      	mov	r1, r5
 8022e20:	4648      	mov	r0, r9
 8022e22:	f7f6 fb1f 	bl	8019464 <MoblePalCryptoSetNewNetworkKey>
 8022e26:	2803      	cmp	r0, #3
 8022e28:	4604      	mov	r4, r0
 8022e2a:	d00a      	beq.n	8022e42 <MobleConfigModel_ProcessNetKeyUpdate+0xc6>
 8022e2c:	b958      	cbnz	r0, 8022e46 <MobleConfigModel_ProcessNetKeyUpdate+0xca>
 8022e2e:	b2f1      	uxtb	r1, r6
 8022e30:	4638      	mov	r0, r7
 8022e32:	9103      	str	r1, [sp, #12]
 8022e34:	f7fb fa76 	bl	801e324 <BnrgmFrndMgmtUpdateKeys>
 8022e38:	9903      	ldr	r1, [sp, #12]
 8022e3a:	2001      	movs	r0, #1
 8022e3c:	f7fe f936 	bl	80210ac <ModelConfigUpdateKRState>
 8022e40:	e7cc      	b.n	8022ddc <MobleConfigModel_ProcessNetKeyUpdate+0x60>
 8022e42:	2406      	movs	r4, #6
 8022e44:	e7ca      	b.n	8022ddc <MobleConfigModel_ProcessNetKeyUpdate+0x60>
 8022e46:	2405      	movs	r4, #5
 8022e48:	e7c8      	b.n	8022ddc <MobleConfigModel_ProcessNetKeyUpdate+0x60>
 8022e4a:	bf00      	nop
 8022e4c:	20002504 	.word	0x20002504

08022e50 <MobleConfigModel_ProcessNetKeyDelete>:
 8022e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022e52:	4606      	mov	r6, r0
 8022e54:	b087      	sub	sp, #28
 8022e56:	4618      	mov	r0, r3
 8022e58:	f7f4 fa37 	bl	80172ca <MobleConfigModelGetNetIdx>
 8022e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8022ed0 <MobleConfigModel_ProcessNetKeyDelete+0x80>)
 8022e5e:	f893 361c 	ldrb.w	r3, [r3, #1564]	@ 0x61c
 8022e62:	2b01      	cmp	r3, #1
 8022e64:	460f      	mov	r7, r1
 8022e66:	4605      	mov	r5, r0
 8022e68:	d103      	bne.n	8022e72 <MobleConfigModel_ProcessNetKeyDelete+0x22>
 8022e6a:	f7f5 fda9 	bl	80189c0 <MoblePalCryptoHasNetworkKey>
 8022e6e:	2801      	cmp	r0, #1
 8022e70:	d007      	beq.n	8022e82 <MobleConfigModel_ProcessNetKeyDelete+0x32>
 8022e72:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8022e76:	d225      	bcs.n	8022ec4 <MobleConfigModel_ProcessNetKeyDelete+0x74>
 8022e78:	4628      	mov	r0, r5
 8022e7a:	f7f6 fd7f 	bl	801997c <MoblePalCryptoDeleteNetworkKey>
 8022e7e:	2803      	cmp	r0, #3
 8022e80:	d122      	bne.n	8022ec8 <MobleConfigModel_ProcessNetKeyDelete+0x78>
 8022e82:	240c      	movs	r4, #12
 8022e84:	f8ad 5008 	strh.w	r5, [sp, #8]
 8022e88:	f88d 4015 	strb.w	r4, [sp, #21]
 8022e8c:	b9f4      	cbnz	r4, 8022ecc <MobleConfigModel_ProcessNetKeyDelete+0x7c>
 8022e8e:	9403      	str	r4, [sp, #12]
 8022e90:	2310      	movs	r3, #16
 8022e92:	f88d 3014 	strb.w	r3, [sp, #20]
 8022e96:	4b0f      	ldr	r3, [pc, #60]	@ (8022ed4 <MobleConfigModel_ProcessNetKeyDelete+0x84>)
 8022e98:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8022e9c:	a802      	add	r0, sp, #8
 8022e9e:	695b      	ldr	r3, [r3, #20]
 8022ea0:	4798      	blx	r3
 8022ea2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022ea4:	9300      	str	r3, [sp, #0]
 8022ea6:	4622      	mov	r2, r4
 8022ea8:	462b      	mov	r3, r5
 8022eaa:	4639      	mov	r1, r7
 8022eac:	4630      	mov	r0, r6
 8022eae:	f7ff ff2f 	bl	8022d10 <MobleConfigModel_SendNetKeyStatus>
 8022eb2:	6833      	ldr	r3, [r6, #0]
 8022eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022eb6:	4602      	mov	r2, r0
 8022eb8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8022eba:	f7f4 fbcf 	bl	801765c <MoblePalTimerStop>
 8022ebe:	4610      	mov	r0, r2
 8022ec0:	b007      	add	sp, #28
 8022ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022ec4:	2404      	movs	r4, #4
 8022ec6:	e7dd      	b.n	8022e84 <MobleConfigModel_ProcessNetKeyDelete+0x34>
 8022ec8:	2400      	movs	r4, #0
 8022eca:	e7db      	b.n	8022e84 <MobleConfigModel_ProcessNetKeyDelete+0x34>
 8022ecc:	2300      	movs	r3, #0
 8022ece:	e7e0      	b.n	8022e92 <MobleConfigModel_ProcessNetKeyDelete+0x42>
 8022ed0:	2000140c 	.word	0x2000140c
 8022ed4:	20002504 	.word	0x20002504

08022ed8 <MobleConfigModel_ProcessNetKeyAdd>:
 8022ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022edc:	4606      	mov	r6, r0
 8022ede:	b08a      	sub	sp, #40	@ 0x28
 8022ee0:	4618      	mov	r0, r3
 8022ee2:	461a      	mov	r2, r3
 8022ee4:	f7f4 f9f1 	bl	80172ca <MobleConfigModelGetNetIdx>
 8022ee8:	ad02      	add	r5, sp, #8
 8022eea:	1c93      	adds	r3, r2, #2
 8022eec:	460f      	mov	r7, r1
 8022eee:	4604      	mov	r4, r0
 8022ef0:	3212      	adds	r2, #18
 8022ef2:	46a8      	mov	r8, r5
 8022ef4:	6818      	ldr	r0, [r3, #0]
 8022ef6:	6859      	ldr	r1, [r3, #4]
 8022ef8:	46ac      	mov	ip, r5
 8022efa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8022efe:	3308      	adds	r3, #8
 8022f00:	4293      	cmp	r3, r2
 8022f02:	4665      	mov	r5, ip
 8022f04:	d1f6      	bne.n	8022ef4 <MobleConfigModel_ProcessNetKeyAdd+0x1c>
 8022f06:	4b1f      	ldr	r3, [pc, #124]	@ (8022f84 <MobleConfigModel_ProcessNetKeyAdd+0xac>)
 8022f08:	881a      	ldrh	r2, [r3, #0]
 8022f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8022f88 <MobleConfigModel_ProcessNetKeyAdd+0xb0>)
 8022f0c:	f893 361c 	ldrb.w	r3, [r3, #1564]	@ 0x61c
 8022f10:	429a      	cmp	r2, r3
 8022f12:	d103      	bne.n	8022f1c <MobleConfigModel_ProcessNetKeyAdd+0x44>
 8022f14:	4620      	mov	r0, r4
 8022f16:	f7f5 fd53 	bl	80189c0 <MoblePalCryptoHasNetworkKey>
 8022f1a:	b360      	cbz	r0, 8022f76 <MobleConfigModel_ProcessNetKeyAdd+0x9e>
 8022f1c:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8022f20:	d22d      	bcs.n	8022f7e <MobleConfigModel_ProcessNetKeyAdd+0xa6>
 8022f22:	4621      	mov	r1, r4
 8022f24:	4640      	mov	r0, r8
 8022f26:	f7f6 fb09 	bl	801953c <MoblePalCryptoSetNetworkKey>
 8022f2a:	4605      	mov	r5, r0
 8022f2c:	b9e0      	cbnz	r0, 8022f68 <MobleConfigModel_ProcessNetKeyAdd+0x90>
 8022f2e:	6833      	ldr	r3, [r6, #0]
 8022f30:	f8ad 4018 	strh.w	r4, [sp, #24]
 8022f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022f36:	f8cd 801c 	str.w	r8, [sp, #28]
 8022f3a:	859c      	strh	r4, [r3, #44]	@ 0x2c
 8022f3c:	2310      	movs	r3, #16
 8022f3e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8022f42:	4b12      	ldr	r3, [pc, #72]	@ (8022f8c <MobleConfigModel_ProcessNetKeyAdd+0xb4>)
 8022f44:	f88d 5025 	strb.w	r5, [sp, #37]	@ 0x25
 8022f48:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8022f4c:	a806      	add	r0, sp, #24
 8022f4e:	691b      	ldr	r3, [r3, #16]
 8022f50:	4798      	blx	r3
 8022f52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022f54:	9300      	str	r3, [sp, #0]
 8022f56:	462a      	mov	r2, r5
 8022f58:	4623      	mov	r3, r4
 8022f5a:	4639      	mov	r1, r7
 8022f5c:	4630      	mov	r0, r6
 8022f5e:	f7ff fed7 	bl	8022d10 <MobleConfigModel_SendNetKeyStatus>
 8022f62:	b00a      	add	sp, #40	@ 0x28
 8022f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f68:	2803      	cmp	r0, #3
 8022f6a:	f8ad 4018 	strh.w	r4, [sp, #24]
 8022f6e:	bf14      	ite	ne
 8022f70:	2505      	movne	r5, #5
 8022f72:	2506      	moveq	r5, #6
 8022f74:	e7e5      	b.n	8022f42 <MobleConfigModel_ProcessNetKeyAdd+0x6a>
 8022f76:	2505      	movs	r5, #5
 8022f78:	f8ad 4018 	strh.w	r4, [sp, #24]
 8022f7c:	e7e1      	b.n	8022f42 <MobleConfigModel_ProcessNetKeyAdd+0x6a>
 8022f7e:	2504      	movs	r5, #4
 8022f80:	e7fa      	b.n	8022f78 <MobleConfigModel_ProcessNetKeyAdd+0xa0>
 8022f82:	bf00      	nop
 8022f84:	20000008 	.word	0x20000008
 8022f88:	2000140c 	.word	0x2000140c
 8022f8c:	20002504 	.word	0x20002504

08022f90 <MobleConfigModel_ProcessNetKeyGet>:
 8022f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022f94:	b087      	sub	sp, #28
 8022f96:	f10d 0804 	add.w	r8, sp, #4
 8022f9a:	4605      	mov	r5, r0
 8022f9c:	460f      	mov	r7, r1
 8022f9e:	4640      	mov	r0, r8
 8022fa0:	f10d 0102 	add.w	r1, sp, #2
 8022fa4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022fa6:	f7f5 fdef 	bl	8018b88 <MoblePalCrypto_GetNetKeyIndexes>
 8022faa:	4b18      	ldr	r3, [pc, #96]	@ (802300c <MobleConfigModel_ProcessNetKeyGet+0x7c>)
 8022fac:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8022fb0:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8022fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8022fb8:	2600      	movs	r6, #0
 8022fba:	699b      	ldr	r3, [r3, #24]
 8022fbc:	f8ad 9010 	strh.w	r9, [sp, #16]
 8022fc0:	f88d 6012 	strb.w	r6, [sp, #18]
 8022fc4:	a803      	add	r0, sp, #12
 8022fc6:	4798      	blx	r3
 8022fc8:	b935      	cbnz	r5, 8022fd8 <MobleConfigModel_ProcessNetKeyGet+0x48>
 8022fca:	4b11      	ldr	r3, [pc, #68]	@ (8023010 <MobleConfigModel_ProcessNetKeyGet+0x80>)
 8022fcc:	4a11      	ldr	r2, [pc, #68]	@ (8023014 <MobleConfigModel_ProcessNetKeyGet+0x84>)
 8022fce:	4812      	ldr	r0, [pc, #72]	@ (8023018 <MobleConfigModel_ProcessNetKeyGet+0x88>)
 8022fd0:	f640 01e4 	movw	r1, #2276	@ 0x8e4
 8022fd4:	f005 fa02 	bl	80283dc <__assert_func>
 8022fd8:	2343      	movs	r3, #67	@ 0x43
 8022fda:	7023      	strb	r3, [r4, #0]
 8022fdc:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8022fe0:	7063      	strb	r3, [r4, #1]
 8022fe2:	f104 0208 	add.w	r2, r4, #8
 8022fe6:	4643      	mov	r3, r8
 8022fe8:	4649      	mov	r1, r9
 8022fea:	70a6      	strb	r6, [r4, #2]
 8022fec:	70e6      	strb	r6, [r4, #3]
 8022fee:	4630      	mov	r0, r6
 8022ff0:	f7f4 f972 	bl	80172d8 <MobleConfigModelPutKeyIdxs>
 8022ff4:	4623      	mov	r3, r4
 8022ff6:	f8c4 00a3 	str.w	r0, [r4, #163]	@ 0xa3
 8022ffa:	463a      	mov	r2, r7
 8022ffc:	2101      	movs	r1, #1
 8022ffe:	4628      	mov	r0, r5
 8023000:	f7ff fa44 	bl	802248c <MobleModelSendPacket>
 8023004:	b007      	add	sp, #28
 8023006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802300a:	bf00      	nop
 802300c:	20002504 	.word	0x20002504
 8023010:	08030ec9 	.word	0x08030ec9
 8023014:	0802ff02 	.word	0x0802ff02
 8023018:	08030edb 	.word	0x08030edb

0802301c <MobleConfigModel_SendModelSubscriptionStatus>:
 802301c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023020:	460e      	mov	r6, r1
 8023022:	e9dd 7407 	ldrd	r7, r4, [sp, #28]
 8023026:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 802302a:	4619      	mov	r1, r3
 802302c:	4605      	mov	r5, r0
 802302e:	b930      	cbnz	r0, 802303e <MobleConfigModel_SendModelSubscriptionStatus+0x22>
 8023030:	4b18      	ldr	r3, [pc, #96]	@ (8023094 <MobleConfigModel_SendModelSubscriptionStatus+0x78>)
 8023032:	4a19      	ldr	r2, [pc, #100]	@ (8023098 <MobleConfigModel_SendModelSubscriptionStatus+0x7c>)
 8023034:	4819      	ldr	r0, [pc, #100]	@ (802309c <MobleConfigModel_SendModelSubscriptionStatus+0x80>)
 8023036:	f640 01c3 	movw	r1, #2243	@ 0x8c3
 802303a:	f005 f9cf 	bl	80283dc <__assert_func>
 802303e:	201f      	movs	r0, #31
 8023040:	2300      	movs	r3, #0
 8023042:	7020      	strb	r0, [r4, #0]
 8023044:	f06f 007f 	mvn.w	r0, #127	@ 0x7f
 8023048:	70a3      	strb	r3, [r4, #2]
 802304a:	70e3      	strb	r3, [r4, #3]
 802304c:	7060      	strb	r0, [r4, #1]
 802304e:	7222      	strb	r2, [r4, #8]
 8023050:	f104 0009 	add.w	r0, r4, #9
 8023054:	2202      	movs	r2, #2
 8023056:	f7f8 fb33 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 802305a:	4641      	mov	r1, r8
 802305c:	f104 000b 	add.w	r0, r4, #11
 8023060:	f7f8 fb2e 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8023064:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 8023068:	bf28      	it	cs
 802306a:	2204      	movcs	r2, #4
 802306c:	4639      	mov	r1, r7
 802306e:	f104 000d 	add.w	r0, r4, #13
 8023072:	f7f8 fb25 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8023076:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 802307a:	bf2c      	ite	cs
 802307c:	2309      	movcs	r3, #9
 802307e:	2307      	movcc	r3, #7
 8023080:	f8c4 30a3 	str.w	r3, [r4, #163]	@ 0xa3
 8023084:	4632      	mov	r2, r6
 8023086:	4623      	mov	r3, r4
 8023088:	4628      	mov	r0, r5
 802308a:	2101      	movs	r1, #1
 802308c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023090:	f7ff b9fc 	b.w	802248c <MobleModelSendPacket>
 8023094:	08030ec9 	.word	0x08030ec9
 8023098:	0802ff22 	.word	0x0802ff22
 802309c:	08030edb 	.word	0x08030edb

080230a0 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite>:
 80230a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230a4:	4689      	mov	r9, r1
 80230a6:	b08f      	sub	sp, #60	@ 0x3c
 80230a8:	469a      	mov	sl, r3
 80230aa:	4604      	mov	r4, r0
 80230ac:	b930      	cbnz	r0, 80230bc <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x1c>
 80230ae:	4b3c      	ldr	r3, [pc, #240]	@ (80231a0 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x100>)
 80230b0:	4a3c      	ldr	r2, [pc, #240]	@ (80231a4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x104>)
 80230b2:	f241 51b5 	movw	r1, #5557	@ 0x15b5
 80230b6:	483c      	ldr	r0, [pc, #240]	@ (80231a8 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x108>)
 80230b8:	f005 f990 	bl	80283dc <__assert_func>
 80230bc:	6803      	ldr	r3, [r0, #0]
 80230be:	b923      	cbnz	r3, 80230ca <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x2a>
 80230c0:	4b3a      	ldr	r3, [pc, #232]	@ (80231ac <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x10c>)
 80230c2:	4a38      	ldr	r2, [pc, #224]	@ (80231a4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x104>)
 80230c4:	f241 51b6 	movw	r1, #5558	@ 0x15b6
 80230c8:	e7f5      	b.n	80230b6 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x16>
 80230ca:	4652      	mov	r2, sl
 80230cc:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 80230d0:	f852 5b02 	ldr.w	r5, [r2], #2
 80230d4:	f893 801c 	ldrb.w	r8, [r3, #28]
 80230d8:	b2af      	uxth	r7, r5
 80230da:	f10b 33ff 	add.w	r3, fp, #4294967295
 80230de:	4498      	add	r8, r3
 80230e0:	9705      	str	r7, [sp, #20]
 80230e2:	463d      	mov	r5, r7
 80230e4:	ab06      	add	r3, sp, #24
 80230e6:	eba7 070b 	sub.w	r7, r7, fp
 80230ea:	fa1f f888 	uxth.w	r8, r8
 80230ee:	b2ff      	uxtb	r7, r7
 80230f0:	f10a 0e12 	add.w	lr, sl, #18
 80230f4:	469c      	mov	ip, r3
 80230f6:	6810      	ldr	r0, [r2, #0]
 80230f8:	6851      	ldr	r1, [r2, #4]
 80230fa:	461e      	mov	r6, r3
 80230fc:	c603      	stmia	r6!, {r0, r1}
 80230fe:	3208      	adds	r2, #8
 8023100:	4572      	cmp	r2, lr
 8023102:	4633      	mov	r3, r6
 8023104:	d1f7      	bne.n	80230f6 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x56>
 8023106:	4660      	mov	r0, ip
 8023108:	f7f5 febe 	bl	8018e88 <MobleConfigModelGetAddressFromVirtual>
 802310c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802310e:	2b14      	cmp	r3, #20
 8023110:	bf0c      	ite	eq
 8023112:	2102      	moveq	r1, #2
 8023114:	2104      	movne	r1, #4
 8023116:	4606      	mov	r6, r0
 8023118:	aa05      	add	r2, sp, #20
 802311a:	f10a 0012 	add.w	r0, sl, #18
 802311e:	f7f7 fd4a 	bl	801abb6 <MobleInputStreamGetLittleEndian>
 8023122:	455d      	cmp	r5, fp
 8023124:	f8dd a014 	ldr.w	sl, [sp, #20]
 8023128:	d001      	beq.n	802312e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x8e>
 802312a:	4545      	cmp	r5, r8
 802312c:	d82f      	bhi.n	802318e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xee>
 802312e:	4639      	mov	r1, r7
 8023130:	4650      	mov	r0, sl
 8023132:	f7f8 fd3e 	bl	801bbb2 <MobleApplicationModelSupported>
 8023136:	b370      	cbz	r0, 8023196 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xf6>
 8023138:	4633      	mov	r3, r6
 802313a:	462a      	mov	r2, r5
 802313c:	4651      	mov	r1, sl
 802313e:	4620      	mov	r0, r4
 8023140:	f7fa fb5c 	bl	801d7fc <MobleConfigModel_SubscriptionOverwrite>
 8023144:	4680      	mov	r8, r0
 8023146:	6820      	ldr	r0, [r4, #0]
 8023148:	f7f9 fb86 	bl	801c858 <MobleConfigNetworkSave>
 802314c:	2301      	movs	r3, #1
 802314e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8023152:	2300      	movs	r3, #0
 8023154:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8023158:	4b15      	ldr	r3, [pc, #84]	@ (80231b0 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x110>)
 802315a:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 802315e:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8023162:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 8023166:	a80a      	add	r0, sp, #40	@ 0x28
 8023168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802316a:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 802316e:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8023172:	4798      	blx	r3
 8023174:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023176:	9600      	str	r6, [sp, #0]
 8023178:	e9cd a301 	strd	sl, r3, [sp, #4]
 802317c:	4642      	mov	r2, r8
 802317e:	462b      	mov	r3, r5
 8023180:	4649      	mov	r1, r9
 8023182:	4620      	mov	r0, r4
 8023184:	f7ff ff4a 	bl	802301c <MobleConfigModel_SendModelSubscriptionStatus>
 8023188:	b00f      	add	sp, #60	@ 0x3c
 802318a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802318e:	f04f 0801 	mov.w	r8, #1
 8023192:	2600      	movs	r6, #0
 8023194:	e7da      	b.n	802314c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xac>
 8023196:	f04f 0802 	mov.w	r8, #2
 802319a:	4606      	mov	r6, r0
 802319c:	e7d6      	b.n	802314c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xac>
 802319e:	bf00      	nop
 80231a0:	08031449 	.word	0x08031449
 80231a4:	0802ff4f 	.word	0x0802ff4f
 80231a8:	08030edb 	.word	0x08030edb
 80231ac:	080313a4 	.word	0x080313a4
 80231b0:	20002504 	.word	0x20002504

080231b4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete>:
 80231b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231b8:	4689      	mov	r9, r1
 80231ba:	b08f      	sub	sp, #60	@ 0x3c
 80231bc:	469a      	mov	sl, r3
 80231be:	4604      	mov	r4, r0
 80231c0:	b930      	cbnz	r0, 80231d0 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x1c>
 80231c2:	4b3c      	ldr	r3, [pc, #240]	@ (80232b4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x100>)
 80231c4:	4a3c      	ldr	r2, [pc, #240]	@ (80232b8 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x104>)
 80231c6:	f241 5152 	movw	r1, #5458	@ 0x1552
 80231ca:	483c      	ldr	r0, [pc, #240]	@ (80232bc <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x108>)
 80231cc:	f005 f906 	bl	80283dc <__assert_func>
 80231d0:	6803      	ldr	r3, [r0, #0]
 80231d2:	b923      	cbnz	r3, 80231de <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x2a>
 80231d4:	4b3a      	ldr	r3, [pc, #232]	@ (80232c0 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x10c>)
 80231d6:	4a38      	ldr	r2, [pc, #224]	@ (80232b8 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x104>)
 80231d8:	f241 5153 	movw	r1, #5459	@ 0x1553
 80231dc:	e7f5      	b.n	80231ca <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x16>
 80231de:	4652      	mov	r2, sl
 80231e0:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 80231e4:	f852 5b02 	ldr.w	r5, [r2], #2
 80231e8:	f893 801c 	ldrb.w	r8, [r3, #28]
 80231ec:	b2af      	uxth	r7, r5
 80231ee:	f10b 33ff 	add.w	r3, fp, #4294967295
 80231f2:	4498      	add	r8, r3
 80231f4:	9705      	str	r7, [sp, #20]
 80231f6:	463d      	mov	r5, r7
 80231f8:	ab06      	add	r3, sp, #24
 80231fa:	eba7 070b 	sub.w	r7, r7, fp
 80231fe:	fa1f f888 	uxth.w	r8, r8
 8023202:	b2ff      	uxtb	r7, r7
 8023204:	f10a 0e12 	add.w	lr, sl, #18
 8023208:	469c      	mov	ip, r3
 802320a:	6810      	ldr	r0, [r2, #0]
 802320c:	6851      	ldr	r1, [r2, #4]
 802320e:	461e      	mov	r6, r3
 8023210:	c603      	stmia	r6!, {r0, r1}
 8023212:	3208      	adds	r2, #8
 8023214:	4572      	cmp	r2, lr
 8023216:	4633      	mov	r3, r6
 8023218:	d1f7      	bne.n	802320a <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x56>
 802321a:	4660      	mov	r0, ip
 802321c:	f7f5 fe34 	bl	8018e88 <MobleConfigModelGetAddressFromVirtual>
 8023220:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023222:	2b14      	cmp	r3, #20
 8023224:	bf0c      	ite	eq
 8023226:	2102      	moveq	r1, #2
 8023228:	2104      	movne	r1, #4
 802322a:	4606      	mov	r6, r0
 802322c:	aa05      	add	r2, sp, #20
 802322e:	f10a 0012 	add.w	r0, sl, #18
 8023232:	f7f7 fcc0 	bl	801abb6 <MobleInputStreamGetLittleEndian>
 8023236:	455d      	cmp	r5, fp
 8023238:	f8dd a014 	ldr.w	sl, [sp, #20]
 802323c:	d001      	beq.n	8023242 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x8e>
 802323e:	4545      	cmp	r5, r8
 8023240:	d82f      	bhi.n	80232a2 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xee>
 8023242:	4639      	mov	r1, r7
 8023244:	4650      	mov	r0, sl
 8023246:	f7f8 fcb4 	bl	801bbb2 <MobleApplicationModelSupported>
 802324a:	b370      	cbz	r0, 80232aa <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xf6>
 802324c:	4633      	mov	r3, r6
 802324e:	462a      	mov	r2, r5
 8023250:	4651      	mov	r1, sl
 8023252:	4620      	mov	r0, r4
 8023254:	f7fa fbd8 	bl	801da08 <MobleConfigModel_SubscriptionDelete>
 8023258:	4680      	mov	r8, r0
 802325a:	6820      	ldr	r0, [r4, #0]
 802325c:	f7f9 fafc 	bl	801c858 <MobleConfigNetworkSave>
 8023260:	2301      	movs	r3, #1
 8023262:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8023266:	2300      	movs	r3, #0
 8023268:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 802326c:	4b15      	ldr	r3, [pc, #84]	@ (80232c4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x110>)
 802326e:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8023272:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8023276:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
 802327a:	a80a      	add	r0, sp, #40	@ 0x28
 802327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802327e:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 8023282:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8023286:	4798      	blx	r3
 8023288:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802328a:	9600      	str	r6, [sp, #0]
 802328c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8023290:	4642      	mov	r2, r8
 8023292:	462b      	mov	r3, r5
 8023294:	4649      	mov	r1, r9
 8023296:	4620      	mov	r0, r4
 8023298:	f7ff fec0 	bl	802301c <MobleConfigModel_SendModelSubscriptionStatus>
 802329c:	b00f      	add	sp, #60	@ 0x3c
 802329e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232a2:	f04f 0801 	mov.w	r8, #1
 80232a6:	2600      	movs	r6, #0
 80232a8:	e7da      	b.n	8023260 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xac>
 80232aa:	f04f 0802 	mov.w	r8, #2
 80232ae:	4606      	mov	r6, r0
 80232b0:	e7d6      	b.n	8023260 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xac>
 80232b2:	bf00      	nop
 80232b4:	08031449 	.word	0x08031449
 80232b8:	0802ff90 	.word	0x0802ff90
 80232bc:	08030edb 	.word	0x08030edb
 80232c0:	080313a4 	.word	0x080313a4
 80232c4:	20002504 	.word	0x20002504

080232c8 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd>:
 80232c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232cc:	468a      	mov	sl, r1
 80232ce:	b08f      	sub	sp, #60	@ 0x3c
 80232d0:	4699      	mov	r9, r3
 80232d2:	4604      	mov	r4, r0
 80232d4:	b930      	cbnz	r0, 80232e4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x1c>
 80232d6:	4b44      	ldr	r3, [pc, #272]	@ (80233e8 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x120>)
 80232d8:	4a44      	ldr	r2, [pc, #272]	@ (80233ec <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x124>)
 80232da:	f241 41e8 	movw	r1, #5352	@ 0x14e8
 80232de:	4844      	ldr	r0, [pc, #272]	@ (80233f0 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x128>)
 80232e0:	f005 f87c 	bl	80283dc <__assert_func>
 80232e4:	6803      	ldr	r3, [r0, #0]
 80232e6:	b923      	cbnz	r3, 80232f2 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x2a>
 80232e8:	4b42      	ldr	r3, [pc, #264]	@ (80233f4 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x12c>)
 80232ea:	4a40      	ldr	r2, [pc, #256]	@ (80233ec <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x124>)
 80232ec:	f241 41e9 	movw	r1, #5353	@ 0x14e9
 80232f0:	e7f5      	b.n	80232de <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x16>
 80232f2:	464a      	mov	r2, r9
 80232f4:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 80232f8:	f852 5b02 	ldr.w	r5, [r2], #2
 80232fc:	f893 801c 	ldrb.w	r8, [r3, #28]
 8023300:	b2af      	uxth	r7, r5
 8023302:	f10b 33ff 	add.w	r3, fp, #4294967295
 8023306:	4498      	add	r8, r3
 8023308:	9705      	str	r7, [sp, #20]
 802330a:	463d      	mov	r5, r7
 802330c:	ab06      	add	r3, sp, #24
 802330e:	eba7 070b 	sub.w	r7, r7, fp
 8023312:	fa1f f888 	uxth.w	r8, r8
 8023316:	b2ff      	uxtb	r7, r7
 8023318:	f109 0e12 	add.w	lr, r9, #18
 802331c:	469c      	mov	ip, r3
 802331e:	6810      	ldr	r0, [r2, #0]
 8023320:	6851      	ldr	r1, [r2, #4]
 8023322:	461e      	mov	r6, r3
 8023324:	c603      	stmia	r6!, {r0, r1}
 8023326:	3208      	adds	r2, #8
 8023328:	4572      	cmp	r2, lr
 802332a:	4633      	mov	r3, r6
 802332c:	d1f7      	bne.n	802331e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x56>
 802332e:	4660      	mov	r0, ip
 8023330:	f7f5 fdaa 	bl	8018e88 <MobleConfigModelGetAddressFromVirtual>
 8023334:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023336:	2b14      	cmp	r3, #20
 8023338:	bf0c      	ite	eq
 802333a:	2102      	moveq	r1, #2
 802333c:	2104      	movne	r1, #4
 802333e:	4606      	mov	r6, r0
 8023340:	aa05      	add	r2, sp, #20
 8023342:	f109 0012 	add.w	r0, r9, #18
 8023346:	f7f7 fc36 	bl	801abb6 <MobleInputStreamGetLittleEndian>
 802334a:	455d      	cmp	r5, fp
 802334c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8023350:	f10d 0b28 	add.w	fp, sp, #40	@ 0x28
 8023354:	d001      	beq.n	802335a <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x92>
 8023356:	4545      	cmp	r5, r8
 8023358:	d83d      	bhi.n	80233d6 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x10e>
 802335a:	4639      	mov	r1, r7
 802335c:	4648      	mov	r0, r9
 802335e:	f7f8 fc28 	bl	801bbb2 <MobleApplicationModelSupported>
 8023362:	2800      	cmp	r0, #0
 8023364:	d03b      	beq.n	80233de <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x116>
 8023366:	6823      	ldr	r3, [r4, #0]
 8023368:	f10d 0c18 	add.w	ip, sp, #24
 802336c:	330c      	adds	r3, #12
 802336e:	4662      	mov	r2, ip
 8023370:	ca03      	ldmia	r2!, {r0, r1}
 8023372:	455a      	cmp	r2, fp
 8023374:	6018      	str	r0, [r3, #0]
 8023376:	6059      	str	r1, [r3, #4]
 8023378:	4694      	mov	ip, r2
 802337a:	f103 0308 	add.w	r3, r3, #8
 802337e:	d1f6      	bne.n	802336e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0xa6>
 8023380:	4633      	mov	r3, r6
 8023382:	462a      	mov	r2, r5
 8023384:	4649      	mov	r1, r9
 8023386:	4620      	mov	r0, r4
 8023388:	f7fa fa9c 	bl	801d8c4 <MobleConfigModel_SubscriptionAdd>
 802338c:	4680      	mov	r8, r0
 802338e:	6820      	ldr	r0, [r4, #0]
 8023390:	f7f9 fa62 	bl	801c858 <MobleConfigNetworkSave>
 8023394:	2301      	movs	r3, #1
 8023396:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 802339a:	2300      	movs	r3, #0
 802339c:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 80233a0:	4b15      	ldr	r3, [pc, #84]	@ (80233f8 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x130>)
 80233a2:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 80233a6:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 80233aa:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
 80233ae:	4658      	mov	r0, fp
 80233b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80233b2:	f8ad 6030 	strh.w	r6, [sp, #48]	@ 0x30
 80233b6:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 80233ba:	4798      	blx	r3
 80233bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80233be:	9600      	str	r6, [sp, #0]
 80233c0:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80233c4:	4642      	mov	r2, r8
 80233c6:	462b      	mov	r3, r5
 80233c8:	4651      	mov	r1, sl
 80233ca:	4620      	mov	r0, r4
 80233cc:	f7ff fe26 	bl	802301c <MobleConfigModel_SendModelSubscriptionStatus>
 80233d0:	b00f      	add	sp, #60	@ 0x3c
 80233d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233d6:	f04f 0801 	mov.w	r8, #1
 80233da:	2600      	movs	r6, #0
 80233dc:	e7da      	b.n	8023394 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0xcc>
 80233de:	f04f 0802 	mov.w	r8, #2
 80233e2:	4606      	mov	r6, r0
 80233e4:	e7d6      	b.n	8023394 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0xcc>
 80233e6:	bf00      	nop
 80233e8:	08031449 	.word	0x08031449
 80233ec:	0802ffce 	.word	0x0802ffce
 80233f0:	08030edb 	.word	0x08030edb
 80233f4:	080313a4 	.word	0x080313a4
 80233f8:	20002504 	.word	0x20002504

080233fc <MobleConfigModel_ProcessModelSubscriptionOverwrite>:
 80233fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023400:	4689      	mov	r9, r1
 8023402:	b08b      	sub	sp, #44	@ 0x2c
 8023404:	4604      	mov	r4, r0
 8023406:	b930      	cbnz	r0, 8023416 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x1a>
 8023408:	4b31      	ldr	r3, [pc, #196]	@ (80234d0 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xd4>)
 802340a:	4a32      	ldr	r2, [pc, #200]	@ (80234d4 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xd8>)
 802340c:	f241 4182 	movw	r1, #5250	@ 0x1482
 8023410:	4831      	ldr	r0, [pc, #196]	@ (80234d8 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xdc>)
 8023412:	f004 ffe3 	bl	80283dc <__assert_func>
 8023416:	6802      	ldr	r2, [r0, #0]
 8023418:	b922      	cbnz	r2, 8023424 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x28>
 802341a:	4b30      	ldr	r3, [pc, #192]	@ (80234dc <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xe0>)
 802341c:	4a2d      	ldr	r2, [pc, #180]	@ (80234d4 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xd8>)
 802341e:	f241 4183 	movw	r1, #5251	@ 0x1483
 8023422:	e7f5      	b.n	8023410 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x14>
 8023424:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 8023428:	7f16      	ldrb	r6, [r2, #28]
 802342a:	f8d3 7002 	ldr.w	r7, [r3, #2]
 802342e:	681d      	ldr	r5, [r3, #0]
 8023430:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023434:	4416      	add	r6, r2
 8023436:	b2ba      	uxth	r2, r7
 8023438:	9205      	str	r2, [sp, #20]
 802343a:	4617      	mov	r7, r2
 802343c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802343e:	2a06      	cmp	r2, #6
 8023440:	fa1f f885 	uxth.w	r8, r5
 8023444:	bf0c      	ite	eq
 8023446:	2102      	moveq	r1, #2
 8023448:	2104      	movne	r1, #4
 802344a:	aa05      	add	r2, sp, #20
 802344c:	1d18      	adds	r0, r3, #4
 802344e:	f7f7 fbb2 	bl	801abb6 <MobleInputStreamGetLittleEndian>
 8023452:	eba5 050b 	sub.w	r5, r5, fp
 8023456:	45d8      	cmp	r8, fp
 8023458:	f8dd a014 	ldr.w	sl, [sp, #20]
 802345c:	b2b6      	uxth	r6, r6
 802345e:	f005 05ff 	and.w	r5, r5, #255	@ 0xff
 8023462:	d001      	beq.n	8023468 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x6c>
 8023464:	45b0      	cmp	r8, r6
 8023466:	d82e      	bhi.n	80234c6 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xca>
 8023468:	4629      	mov	r1, r5
 802346a:	4650      	mov	r0, sl
 802346c:	f7f8 fba1 	bl	801bbb2 <MobleApplicationModelSupported>
 8023470:	b358      	cbz	r0, 80234ca <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xce>
 8023472:	463b      	mov	r3, r7
 8023474:	4642      	mov	r2, r8
 8023476:	4651      	mov	r1, sl
 8023478:	4620      	mov	r0, r4
 802347a:	f7fa f9bf 	bl	801d7fc <MobleConfigModel_SubscriptionOverwrite>
 802347e:	4606      	mov	r6, r0
 8023480:	6820      	ldr	r0, [r4, #0]
 8023482:	f7f9 f9e9 	bl	801c858 <MobleConfigNetworkSave>
 8023486:	2300      	movs	r3, #0
 8023488:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 802348c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8023490:	4b13      	ldr	r3, [pc, #76]	@ (80234e0 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xe4>)
 8023492:	f88d 5018 	strb.w	r5, [sp, #24]
 8023496:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 802349a:	f8cd a01c 	str.w	sl, [sp, #28]
 802349e:	a806      	add	r0, sp, #24
 80234a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80234a2:	f8ad 7020 	strh.w	r7, [sp, #32]
 80234a6:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 80234aa:	4798      	blx	r3
 80234ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80234ae:	9700      	str	r7, [sp, #0]
 80234b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80234b4:	4632      	mov	r2, r6
 80234b6:	4643      	mov	r3, r8
 80234b8:	4649      	mov	r1, r9
 80234ba:	4620      	mov	r0, r4
 80234bc:	f7ff fdae 	bl	802301c <MobleConfigModel_SendModelSubscriptionStatus>
 80234c0:	b00b      	add	sp, #44	@ 0x2c
 80234c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234c6:	2601      	movs	r6, #1
 80234c8:	e7dd      	b.n	8023486 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x8a>
 80234ca:	2602      	movs	r6, #2
 80234cc:	e7db      	b.n	8023486 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x8a>
 80234ce:	bf00      	nop
 80234d0:	08031449 	.word	0x08031449
 80234d4:	08030009 	.word	0x08030009
 80234d8:	08030edb 	.word	0x08030edb
 80234dc:	080313a4 	.word	0x080313a4
 80234e0:	20002504 	.word	0x20002504

080234e4 <MobleConfigModel_ProcessModelSubscriptionDeleteAll>:
 80234e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234e8:	b08d      	sub	sp, #52	@ 0x34
 80234ea:	4605      	mov	r5, r0
 80234ec:	4618      	mov	r0, r3
 80234ee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80234f0:	f850 6b02 	ldr.w	r6, [r0], #2
 80234f4:	f8d5 9000 	ldr.w	r9, [r5]
 80234f8:	2b04      	cmp	r3, #4
 80234fa:	4688      	mov	r8, r1
 80234fc:	b2b4      	uxth	r4, r6
 80234fe:	bf0c      	ite	eq
 8023500:	2102      	moveq	r1, #2
 8023502:	2104      	movne	r1, #4
 8023504:	aa07      	add	r2, sp, #28
 8023506:	f8b9 a002 	ldrh.w	sl, [r9, #2]
 802350a:	9407      	str	r4, [sp, #28]
 802350c:	f7f7 fb53 	bl	801abb6 <MobleInputStreamGetLittleEndian>
 8023510:	f8d9 3024 	ldr.w	r3, [r9, #36]	@ 0x24
 8023514:	9f07      	ldr	r7, [sp, #28]
 8023516:	8819      	ldrh	r1, [r3, #0]
 8023518:	f899 201c 	ldrb.w	r2, [r9, #28]
 802351c:	42a1      	cmp	r1, r4
 802351e:	4626      	mov	r6, r4
 8023520:	d10b      	bne.n	802353a <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x56>
 8023522:	2f02      	cmp	r7, #2
 8023524:	d109      	bne.n	802353a <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x56>
 8023526:	2100      	movs	r1, #0
 8023528:	f8a3 1066 	strh.w	r1, [r3, #102]	@ 0x66
 802352c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
 8023530:	4648      	mov	r0, r9
 8023532:	9205      	str	r2, [sp, #20]
 8023534:	f7f9 f990 	bl	801c858 <MobleConfigNetworkSave>
 8023538:	9a05      	ldr	r2, [sp, #20]
 802353a:	2300      	movs	r3, #0
 802353c:	4699      	mov	r9, r3
 802353e:	b2d9      	uxtb	r1, r3
 8023540:	428a      	cmp	r2, r1
 8023542:	d92e      	bls.n	80235a2 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xbe>
 8023544:	f8d5 b000 	ldr.w	fp, [r5]
 8023548:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
 802354c:	f04f 0901 	mov.w	r9, #1
 8023550:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 8023552:	8801      	ldrh	r1, [r0, #0]
 8023554:	42b1      	cmp	r1, r6
 8023556:	f103 0301 	add.w	r3, r3, #1
 802355a:	d1f0      	bne.n	802353e <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x5a>
 802355c:	2300      	movs	r3, #0
 802355e:	f04f 0c38 	mov.w	ip, #56	@ 0x38
 8023562:	f100 0e78 	add.w	lr, r0, #120	@ 0x78
 8023566:	fb0c f103 	mul.w	r1, ip, r3
 802356a:	f85e 2001 	ldr.w	r2, [lr, r1]
 802356e:	4297      	cmp	r7, r2
 8023570:	d112      	bne.n	8023598 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xb4>
 8023572:	f101 0380 	add.w	r3, r1, #128	@ 0x80
 8023576:	2214      	movs	r2, #20
 8023578:	2100      	movs	r1, #0
 802357a:	4418      	add	r0, r3
 802357c:	f005 fe16 	bl	80291ac <memset>
 8023580:	4658      	mov	r0, fp
 8023582:	f7f9 f969 	bl	801c858 <MobleConfigNetworkSave>
 8023586:	eba4 040a 	sub.w	r4, r4, sl
 802358a:	b2e4      	uxtb	r4, r4
 802358c:	f04f 0900 	mov.w	r9, #0
 8023590:	6828      	ldr	r0, [r5, #0]
 8023592:	f7f9 f961 	bl	801c858 <MobleConfigNetworkSave>
 8023596:	e00a      	b.n	80235ae <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xca>
 8023598:	3301      	adds	r3, #1
 802359a:	2b0b      	cmp	r3, #11
 802359c:	d1e3      	bne.n	8023566 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x82>
 802359e:	f04f 0902 	mov.w	r9, #2
 80235a2:	eba4 040a 	sub.w	r4, r4, sl
 80235a6:	f1b9 0f02 	cmp.w	r9, #2
 80235aa:	b2e4      	uxtb	r4, r4
 80235ac:	d1f0      	bne.n	8023590 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xac>
 80235ae:	2301      	movs	r3, #1
 80235b0:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80235b4:	4b0e      	ldr	r3, [pc, #56]	@ (80235f0 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x10c>)
 80235b6:	f88d 4020 	strb.w	r4, [sp, #32]
 80235ba:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 80235be:	9709      	str	r7, [sp, #36]	@ 0x24
 80235c0:	2400      	movs	r4, #0
 80235c2:	a808      	add	r0, sp, #32
 80235c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80235c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80235c8:	4798      	blx	r3
 80235ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80235cc:	9400      	str	r4, [sp, #0]
 80235ce:	f1b9 0f02 	cmp.w	r9, #2
 80235d2:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80235d6:	bf08      	it	eq
 80235d8:	2205      	moveq	r2, #5
 80235da:	4633      	mov	r3, r6
 80235dc:	bf18      	it	ne
 80235de:	4622      	movne	r2, r4
 80235e0:	4641      	mov	r1, r8
 80235e2:	4628      	mov	r0, r5
 80235e4:	f7ff fd1a 	bl	802301c <MobleConfigModel_SendModelSubscriptionStatus>
 80235e8:	b00d      	add	sp, #52	@ 0x34
 80235ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235ee:	bf00      	nop
 80235f0:	20002504 	.word	0x20002504

080235f4 <MobleConfigModel_ProcessModelSubscriptionDelete>:
 80235f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235f8:	4689      	mov	r9, r1
 80235fa:	b08b      	sub	sp, #44	@ 0x2c
 80235fc:	4604      	mov	r4, r0
 80235fe:	b930      	cbnz	r0, 802360e <MobleConfigModel_ProcessModelSubscriptionDelete+0x1a>
 8023600:	4b31      	ldr	r3, [pc, #196]	@ (80236c8 <MobleConfigModel_ProcessModelSubscriptionDelete+0xd4>)
 8023602:	4a32      	ldr	r2, [pc, #200]	@ (80236cc <MobleConfigModel_ProcessModelSubscriptionDelete+0xd8>)
 8023604:	f241 31e5 	movw	r1, #5093	@ 0x13e5
 8023608:	4831      	ldr	r0, [pc, #196]	@ (80236d0 <MobleConfigModel_ProcessModelSubscriptionDelete+0xdc>)
 802360a:	f004 fee7 	bl	80283dc <__assert_func>
 802360e:	6802      	ldr	r2, [r0, #0]
 8023610:	b922      	cbnz	r2, 802361c <MobleConfigModel_ProcessModelSubscriptionDelete+0x28>
 8023612:	4b30      	ldr	r3, [pc, #192]	@ (80236d4 <MobleConfigModel_ProcessModelSubscriptionDelete+0xe0>)
 8023614:	4a2d      	ldr	r2, [pc, #180]	@ (80236cc <MobleConfigModel_ProcessModelSubscriptionDelete+0xd8>)
 8023616:	f241 31e6 	movw	r1, #5094	@ 0x13e6
 802361a:	e7f5      	b.n	8023608 <MobleConfigModel_ProcessModelSubscriptionDelete+0x14>
 802361c:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 8023620:	7f16      	ldrb	r6, [r2, #28]
 8023622:	f8d3 7002 	ldr.w	r7, [r3, #2]
 8023626:	681d      	ldr	r5, [r3, #0]
 8023628:	f10b 32ff 	add.w	r2, fp, #4294967295
 802362c:	4416      	add	r6, r2
 802362e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023630:	b2b9      	uxth	r1, r7
 8023632:	2a06      	cmp	r2, #6
 8023634:	9105      	str	r1, [sp, #20]
 8023636:	fa1f f885 	uxth.w	r8, r5
 802363a:	460f      	mov	r7, r1
 802363c:	aa05      	add	r2, sp, #20
 802363e:	bf0c      	ite	eq
 8023640:	2102      	moveq	r1, #2
 8023642:	2104      	movne	r1, #4
 8023644:	1d18      	adds	r0, r3, #4
 8023646:	f7f7 fab6 	bl	801abb6 <MobleInputStreamGetLittleEndian>
 802364a:	eba5 050b 	sub.w	r5, r5, fp
 802364e:	45d8      	cmp	r8, fp
 8023650:	f8dd a014 	ldr.w	sl, [sp, #20]
 8023654:	b2b6      	uxth	r6, r6
 8023656:	f005 05ff 	and.w	r5, r5, #255	@ 0xff
 802365a:	d001      	beq.n	8023660 <MobleConfigModel_ProcessModelSubscriptionDelete+0x6c>
 802365c:	45b0      	cmp	r8, r6
 802365e:	d82e      	bhi.n	80236be <MobleConfigModel_ProcessModelSubscriptionDelete+0xca>
 8023660:	4629      	mov	r1, r5
 8023662:	4650      	mov	r0, sl
 8023664:	f7f8 faa5 	bl	801bbb2 <MobleApplicationModelSupported>
 8023668:	b358      	cbz	r0, 80236c2 <MobleConfigModel_ProcessModelSubscriptionDelete+0xce>
 802366a:	463b      	mov	r3, r7
 802366c:	4642      	mov	r2, r8
 802366e:	4651      	mov	r1, sl
 8023670:	4620      	mov	r0, r4
 8023672:	f7fa f9c9 	bl	801da08 <MobleConfigModel_SubscriptionDelete>
 8023676:	4606      	mov	r6, r0
 8023678:	6820      	ldr	r0, [r4, #0]
 802367a:	f7f9 f8ed 	bl	801c858 <MobleConfigNetworkSave>
 802367e:	2300      	movs	r3, #0
 8023680:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8023684:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8023688:	4b13      	ldr	r3, [pc, #76]	@ (80236d8 <MobleConfigModel_ProcessModelSubscriptionDelete+0xe4>)
 802368a:	f88d 5018 	strb.w	r5, [sp, #24]
 802368e:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8023692:	f8cd a01c 	str.w	sl, [sp, #28]
 8023696:	a806      	add	r0, sp, #24
 8023698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802369a:	f8ad 7020 	strh.w	r7, [sp, #32]
 802369e:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 80236a2:	4798      	blx	r3
 80236a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80236a6:	9700      	str	r7, [sp, #0]
 80236a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80236ac:	4632      	mov	r2, r6
 80236ae:	4643      	mov	r3, r8
 80236b0:	4649      	mov	r1, r9
 80236b2:	4620      	mov	r0, r4
 80236b4:	f7ff fcb2 	bl	802301c <MobleConfigModel_SendModelSubscriptionStatus>
 80236b8:	b00b      	add	sp, #44	@ 0x2c
 80236ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236be:	2601      	movs	r6, #1
 80236c0:	e7dd      	b.n	802367e <MobleConfigModel_ProcessModelSubscriptionDelete+0x8a>
 80236c2:	2602      	movs	r6, #2
 80236c4:	e7db      	b.n	802367e <MobleConfigModel_ProcessModelSubscriptionDelete+0x8a>
 80236c6:	bf00      	nop
 80236c8:	08031449 	.word	0x08031449
 80236cc:	0803003c 	.word	0x0803003c
 80236d0:	08030edb 	.word	0x08030edb
 80236d4:	080313a4 	.word	0x080313a4
 80236d8:	20002504 	.word	0x20002504

080236dc <MobleConfigModel_ProcessModelSubscriptionAdd>:
 80236dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236e0:	4607      	mov	r7, r0
 80236e2:	4618      	mov	r0, r3
 80236e4:	f8d7 b000 	ldr.w	fp, [r7]
 80236e8:	f8d0 6002 	ldr.w	r6, [r0, #2]
 80236ec:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80236f0:	f89b 501c 	ldrb.w	r5, [fp, #28]
 80236f4:	6804      	ldr	r4, [r0, #0]
 80236f6:	b08d      	sub	sp, #52	@ 0x34
 80236f8:	1e5a      	subs	r2, r3, #1
 80236fa:	4415      	add	r5, r2
 80236fc:	b2b2      	uxth	r2, r6
 80236fe:	9207      	str	r2, [sp, #28]
 8023700:	4616      	mov	r6, r2
 8023702:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023704:	9305      	str	r3, [sp, #20]
 8023706:	2a06      	cmp	r2, #6
 8023708:	468a      	mov	sl, r1
 802370a:	aa07      	add	r2, sp, #28
 802370c:	bf0c      	ite	eq
 802370e:	2102      	moveq	r1, #2
 8023710:	2104      	movne	r1, #4
 8023712:	3004      	adds	r0, #4
 8023714:	fa1f f884 	uxth.w	r8, r4
 8023718:	1ae4      	subs	r4, r4, r3
 802371a:	f7f7 fa4c 	bl	801abb6 <MobleInputStreamGetLittleEndian>
 802371e:	9b05      	ldr	r3, [sp, #20]
 8023720:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8023724:	4543      	cmp	r3, r8
 8023726:	b2ad      	uxth	r5, r5
 8023728:	f004 04ff 	and.w	r4, r4, #255	@ 0xff
 802372c:	d025      	beq.n	802377a <MobleConfigModel_ProcessModelSubscriptionAdd+0x9e>
 802372e:	4545      	cmp	r5, r8
 8023730:	d223      	bcs.n	802377a <MobleConfigModel_ProcessModelSubscriptionAdd+0x9e>
 8023732:	4658      	mov	r0, fp
 8023734:	f7f9 f890 	bl	801c858 <MobleConfigNetworkSave>
 8023738:	2501      	movs	r5, #1
 802373a:	2300      	movs	r3, #0
 802373c:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8023740:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8023744:	4b14      	ldr	r3, [pc, #80]	@ (8023798 <MobleConfigModel_ProcessModelSubscriptionAdd+0xbc>)
 8023746:	f88d 4020 	strb.w	r4, [sp, #32]
 802374a:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 802374e:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8023752:	a808      	add	r0, sp, #32
 8023754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023756:	f8ad 6028 	strh.w	r6, [sp, #40]	@ 0x28
 802375a:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 802375e:	4798      	blx	r3
 8023760:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8023762:	9600      	str	r6, [sp, #0]
 8023764:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8023768:	462a      	mov	r2, r5
 802376a:	4643      	mov	r3, r8
 802376c:	4651      	mov	r1, sl
 802376e:	4638      	mov	r0, r7
 8023770:	f7ff fc54 	bl	802301c <MobleConfigModel_SendModelSubscriptionStatus>
 8023774:	b00d      	add	sp, #52	@ 0x34
 8023776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802377a:	4621      	mov	r1, r4
 802377c:	4648      	mov	r0, r9
 802377e:	f7f8 fa18 	bl	801bbb2 <MobleApplicationModelSupported>
 8023782:	b138      	cbz	r0, 8023794 <MobleConfigModel_ProcessModelSubscriptionAdd+0xb8>
 8023784:	4633      	mov	r3, r6
 8023786:	4642      	mov	r2, r8
 8023788:	4649      	mov	r1, r9
 802378a:	4638      	mov	r0, r7
 802378c:	f7fa f89a 	bl	801d8c4 <MobleConfigModel_SubscriptionAdd>
 8023790:	4605      	mov	r5, r0
 8023792:	e7d2      	b.n	802373a <MobleConfigModel_ProcessModelSubscriptionAdd+0x5e>
 8023794:	2502      	movs	r5, #2
 8023796:	e7d0      	b.n	802373a <MobleConfigModel_ProcessModelSubscriptionAdd+0x5e>
 8023798:	20002504 	.word	0x20002504

0802379c <MobleConfigModel_SendModelPublicationStatus>:
 802379c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237a0:	b085      	sub	sp, #20
 80237a2:	460e      	mov	r6, r1
 80237a4:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 80237a8:	9401      	str	r4, [sp, #4]
 80237aa:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 80237ae:	9402      	str	r4, [sp, #8]
 80237b0:	4619      	mov	r1, r3
 80237b2:	e9dd 7415 	ldrd	r7, r4, [sp, #84]	@ 0x54
 80237b6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80237ba:	f8bd b03c 	ldrh.w	fp, [sp, #60]	@ 0x3c
 80237be:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 80237c2:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80237c6:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 80237ca:	4605      	mov	r5, r0
 80237cc:	b930      	cbnz	r0, 80237dc <MobleConfigModel_SendModelPublicationStatus+0x40>
 80237ce:	4b25      	ldr	r3, [pc, #148]	@ (8023864 <MobleConfigModel_SendModelPublicationStatus+0xc8>)
 80237d0:	4a25      	ldr	r2, [pc, #148]	@ (8023868 <MobleConfigModel_SendModelPublicationStatus+0xcc>)
 80237d2:	4826      	ldr	r0, [pc, #152]	@ (802386c <MobleConfigModel_SendModelPublicationStatus+0xd0>)
 80237d4:	f640 0199 	movw	r1, #2201	@ 0x899
 80237d8:	f004 fe00 	bl	80283dc <__assert_func>
 80237dc:	f04f 0c19 	mov.w	ip, #25
 80237e0:	2000      	movs	r0, #0
 80237e2:	f884 c000 	strb.w	ip, [r4]
 80237e6:	f06f 0c7f 	mvn.w	ip, #127	@ 0x7f
 80237ea:	f884 c001 	strb.w	ip, [r4, #1]
 80237ee:	70a0      	strb	r0, [r4, #2]
 80237f0:	70e0      	strb	r0, [r4, #3]
 80237f2:	7222      	strb	r2, [r4, #8]
 80237f4:	f104 0009 	add.w	r0, r4, #9
 80237f8:	2202      	movs	r2, #2
 80237fa:	9303      	str	r3, [sp, #12]
 80237fc:	f7f7 ff60 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8023800:	9b03      	ldr	r3, [sp, #12]
 8023802:	f104 000b 	add.w	r0, r4, #11
 8023806:	4619      	mov	r1, r3
 8023808:	f7f7 ff5a 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 802380c:	4659      	mov	r1, fp
 802380e:	f104 000d 	add.w	r0, r4, #13
 8023812:	f7f7 ff55 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8023816:	7ba3      	ldrb	r3, [r4, #14]
 8023818:	f884 900f 	strb.w	r9, [r4, #15]
 802381c:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
 8023820:	73a3      	strb	r3, [r4, #14]
 8023822:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8023826:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 802382a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 802382e:	7463      	strb	r3, [r4, #17]
 8023830:	bf28      	it	cs
 8023832:	2204      	movcs	r2, #4
 8023834:	4639      	mov	r1, r7
 8023836:	f884 8010 	strb.w	r8, [r4, #16]
 802383a:	f104 0012 	add.w	r0, r4, #18
 802383e:	f7f7 ff3f 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8023842:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 8023846:	bf2c      	ite	cs
 8023848:	230e      	movcs	r3, #14
 802384a:	230c      	movcc	r3, #12
 802384c:	f8c4 30a3 	str.w	r3, [r4, #163]	@ 0xa3
 8023850:	4632      	mov	r2, r6
 8023852:	4623      	mov	r3, r4
 8023854:	2101      	movs	r1, #1
 8023856:	4628      	mov	r0, r5
 8023858:	b005      	add	sp, #20
 802385a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802385e:	f7fe be15 	b.w	802248c <MobleModelSendPacket>
 8023862:	bf00      	nop
 8023864:	08030ec9 	.word	0x08030ec9
 8023868:	0803006c 	.word	0x0803006c
 802386c:	08030edb 	.word	0x08030edb

08023870 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet>:
 8023870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023874:	461c      	mov	r4, r3
 8023876:	6803      	ldr	r3, [r0, #0]
 8023878:	f893 b01c 	ldrb.w	fp, [r3, #28]
 802387c:	885b      	ldrh	r3, [r3, #2]
 802387e:	1e5a      	subs	r2, r3, #1
 8023880:	b0a3      	sub	sp, #140	@ 0x8c
 8023882:	445a      	add	r2, fp
 8023884:	b292      	uxth	r2, r2
 8023886:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023888:	4622      	mov	r2, r4
 802388a:	ad10      	add	r5, sp, #64	@ 0x40
 802388c:	f852 ab02 	ldr.w	sl, [r2], #2
 8023890:	4606      	mov	r6, r0
 8023892:	4688      	mov	r8, r1
 8023894:	fa1f f78a 	uxth.w	r7, sl
 8023898:	f104 0912 	add.w	r9, r4, #18
 802389c:	46ae      	mov	lr, r5
 802389e:	6810      	ldr	r0, [r2, #0]
 80238a0:	6851      	ldr	r1, [r2, #4]
 80238a2:	46ac      	mov	ip, r5
 80238a4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80238a8:	3208      	adds	r2, #8
 80238aa:	454a      	cmp	r2, r9
 80238ac:	4665      	mov	r5, ip
 80238ae:	d1f6      	bne.n	802389e <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x2e>
 80238b0:	4670      	mov	r0, lr
 80238b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80238b4:	f7f5 fae8 	bl	8018e88 <MobleConfigModelGetAddressFromVirtual>
 80238b8:	f8d4 5012 	ldr.w	r5, [r4, #18]
 80238bc:	900c      	str	r0, [sp, #48]	@ 0x30
 80238be:	b2aa      	uxth	r2, r5
 80238c0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80238c2:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 80238c4:	2a19      	cmp	r2, #25
 80238c6:	bf08      	it	eq
 80238c8:	2102      	moveq	r1, #2
 80238ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 80238cc:	bf18      	it	ne
 80238ce:	2104      	movne	r1, #4
 80238d0:	f104 0017 	add.w	r0, r4, #23
 80238d4:	f7f7 f96f 	bl	801abb6 <MobleInputStreamGetLittleEndian>
 80238d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80238da:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 80238de:	2200      	movs	r2, #0
 80238e0:	42bb      	cmp	r3, r7
 80238e2:	9215      	str	r2, [sp, #84]	@ 0x54
 80238e4:	921b      	str	r2, [sp, #108]	@ 0x6c
 80238e6:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 80238ea:	d002      	beq.n	80238f2 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x82>
 80238ec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80238ee:	42ba      	cmp	r2, r7
 80238f0:	d34e      	bcc.n	8023990 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x120>
 80238f2:	ebaa 0103 	sub.w	r1, sl, r3
 80238f6:	b2c9      	uxtb	r1, r1
 80238f8:	4648      	mov	r0, r9
 80238fa:	f7f8 f95a 	bl	801bbb2 <MobleApplicationModelSupported>
 80238fe:	2800      	cmp	r0, #0
 8023900:	d048      	beq.n	8023994 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x124>
 8023902:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8023906:	4628      	mov	r0, r5
 8023908:	f7f5 f874 	bl	80189f4 <MoblePalCryptoHasAppKey>
 802390c:	2800      	cmp	r0, #0
 802390e:	d043      	beq.n	8023998 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x128>
 8023910:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023912:	f8ad 3054 	strh.w	r3, [sp, #84]	@ 0x54
 8023916:	7ce3      	ldrb	r3, [r4, #19]
 8023918:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 802391c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8023920:	f88d 306c 	strb.w	r3, [sp, #108]	@ 0x6c
 8023924:	7d23      	ldrb	r3, [r4, #20]
 8023926:	f88d 306d 	strb.w	r3, [sp, #109]	@ 0x6d
 802392a:	7d63      	ldrb	r3, [r4, #21]
 802392c:	f88d 306e 	strb.w	r3, [sp, #110]	@ 0x6e
 8023930:	7da3      	ldrb	r3, [r4, #22]
 8023932:	f8ad 5056 	strh.w	r5, [sp, #86]	@ 0x56
 8023936:	f003 0207 	and.w	r2, r3, #7
 802393a:	f88d 206f 	strb.w	r2, [sp, #111]	@ 0x6f
 802393e:	08db      	lsrs	r3, r3, #3
 8023940:	aa14      	add	r2, sp, #80	@ 0x50
 8023942:	4639      	mov	r1, r7
 8023944:	4658      	mov	r0, fp
 8023946:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 802394a:	f7f6 fae3 	bl	8019f14 <MoblePalCrypto_UpdateModelPublicationParameters>
 802394e:	2200      	movs	r2, #0
 8023950:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8023952:	e9cd 9307 	strd	r9, r3, [sp, #28]
 8023956:	f89d 3070 	ldrb.w	r3, [sp, #112]	@ 0x70
 802395a:	9306      	str	r3, [sp, #24]
 802395c:	f89d 306f 	ldrb.w	r3, [sp, #111]	@ 0x6f
 8023960:	9305      	str	r3, [sp, #20]
 8023962:	f89d 306e 	ldrb.w	r3, [sp, #110]	@ 0x6e
 8023966:	9304      	str	r3, [sp, #16]
 8023968:	f89d 306d 	ldrb.w	r3, [sp, #109]	@ 0x6d
 802396c:	9303      	str	r3, [sp, #12]
 802396e:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 8023972:	9302      	str	r3, [sp, #8]
 8023974:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 8023978:	9301      	str	r3, [sp, #4]
 802397a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 802397e:	9300      	str	r3, [sp, #0]
 8023980:	4641      	mov	r1, r8
 8023982:	463b      	mov	r3, r7
 8023984:	4630      	mov	r0, r6
 8023986:	f7ff ff09 	bl	802379c <MobleConfigModel_SendModelPublicationStatus>
 802398a:	b023      	add	sp, #140	@ 0x8c
 802398c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023990:	2201      	movs	r2, #1
 8023992:	e7dd      	b.n	8023950 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0xe0>
 8023994:	2202      	movs	r2, #2
 8023996:	e7db      	b.n	8023950 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0xe0>
 8023998:	2203      	movs	r2, #3
 802399a:	e7d9      	b.n	8023950 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0xe0>

0802399c <MobleConfigModel_ProcessModelPublicationSet>:
 802399c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239a0:	6802      	ldr	r2, [r0, #0]
 80239a2:	ed2d 8b02 	vpush	{d8}
 80239a6:	469a      	mov	sl, r3
 80239a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80239ac:	f892 b01c 	ldrb.w	fp, [r2, #28]
 80239b0:	f8da 7004 	ldr.w	r7, [sl, #4]
 80239b4:	f8da 8000 	ldr.w	r8, [sl]
 80239b8:	f109 32ff 	add.w	r2, r9, #4294967295
 80239bc:	b0a3      	sub	sp, #140	@ 0x8c
 80239be:	445a      	add	r2, fp
 80239c0:	b293      	uxth	r3, r2
 80239c2:	b2ba      	uxth	r2, r7
 80239c4:	920e      	str	r2, [sp, #56]	@ 0x38
 80239c6:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 80239c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80239ca:	2a0b      	cmp	r2, #11
 80239cc:	ee08 1a10 	vmov	s16, r1
 80239d0:	f8da 3002 	ldr.w	r3, [sl, #2]
 80239d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80239d6:	fa1f f588 	uxth.w	r5, r8
 80239da:	aa0e      	add	r2, sp, #56	@ 0x38
 80239dc:	bf0c      	ite	eq
 80239de:	2102      	moveq	r1, #2
 80239e0:	2104      	movne	r1, #4
 80239e2:	4606      	mov	r6, r0
 80239e4:	f10a 0009 	add.w	r0, sl, #9
 80239e8:	f7f7 f8e5 	bl	801abb6 <MobleInputStreamGetLittleEndian>
 80239ec:	2200      	movs	r2, #0
 80239ee:	45a9      	cmp	r9, r5
 80239f0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80239f2:	9215      	str	r2, [sp, #84]	@ 0x54
 80239f4:	fa5f f888 	uxtb.w	r8, r8
 80239f8:	921b      	str	r2, [sp, #108]	@ 0x6c
 80239fa:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 80239fe:	d003      	beq.n	8023a08 <MobleConfigModel_ProcessModelPublicationSet+0x6c>
 8023a00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023a02:	42ab      	cmp	r3, r5
 8023a04:	f0c0 80a8 	bcc.w	8023b58 <MobleConfigModel_ProcessModelPublicationSet+0x1bc>
 8023a08:	eba8 0109 	sub.w	r1, r8, r9
 8023a0c:	b2c9      	uxtb	r1, r1
 8023a0e:	4620      	mov	r0, r4
 8023a10:	f7f8 f8cf 	bl	801bbb2 <MobleApplicationModelSupported>
 8023a14:	2800      	cmp	r0, #0
 8023a16:	f000 80a1 	beq.w	8023b5c <MobleConfigModel_ProcessModelPublicationSet+0x1c0>
 8023a1a:	f3c7 020b 	ubfx	r2, r7, #0, #12
 8023a1e:	4610      	mov	r0, r2
 8023a20:	920a      	str	r2, [sp, #40]	@ 0x28
 8023a22:	f7f4 ffe7 	bl	80189f4 <MoblePalCryptoHasAppKey>
 8023a26:	2800      	cmp	r0, #0
 8023a28:	f000 809a 	beq.w	8023b60 <MobleConfigModel_ProcessModelPublicationSet+0x1c4>
 8023a2c:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 8023a30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023a32:	2f00      	cmp	r7, #0
 8023a34:	d164      	bne.n	8023b00 <MobleConfigModel_ProcessModelPublicationSet+0x164>
 8023a36:	2c02      	cmp	r4, #2
 8023a38:	9414      	str	r4, [sp, #80]	@ 0x50
 8023a3a:	d15b      	bne.n	8023af4 <MobleConfigModel_ProcessModelPublicationSet+0x158>
 8023a3c:	a914      	add	r1, sp, #80	@ 0x50
 8023a3e:	4628      	mov	r0, r5
 8023a40:	f7f6 fac2 	bl	8019fc8 <MoblePalCrypto_UpdateHealthModelPublicationParameters>
 8023a44:	6830      	ldr	r0, [r6, #0]
 8023a46:	f7f8 ff07 	bl	801c858 <MobleConfigNetworkSave>
 8023a4a:	2c02      	cmp	r4, #2
 8023a4c:	d102      	bne.n	8023a54 <MobleConfigModel_ProcessModelPublicationSet+0xb8>
 8023a4e:	4630      	mov	r0, r6
 8023a50:	f7f3 fe8e 	bl	8017770 <BnrgmHealthModelSetPublishTimer>
 8023a54:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 8023a58:	f88d 803c 	strb.w	r8, [sp, #60]	@ 0x3c
 8023a5c:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 8023b64 <MobleConfigModel_ProcessModelPublicationSet+0x1c8>
 8023a60:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8023a62:	9112      	str	r1, [sp, #72]	@ 0x48
 8023a64:	469a      	mov	sl, r3
 8023a66:	f89d 306d 	ldrb.w	r3, [sp, #109]	@ 0x6d
 8023a6a:	f8d8 16f8 	ldr.w	r1, [r8, #1784]	@ 0x6f8
 8023a6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023a70:	f89d 306e 	ldrb.w	r3, [sp, #110]	@ 0x6e
 8023a74:	f8bd 9054 	ldrh.w	r9, [sp, #84]	@ 0x54
 8023a78:	f8bd b056 	ldrh.w	fp, [sp, #86]	@ 0x56
 8023a7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023a7e:	f89d 3070 	ldrb.w	r3, [sp, #112]	@ 0x70
 8023a82:	f89d 206f 	ldrb.w	r2, [sp, #111]	@ 0x6f
 8023a86:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8023a8a:	a80f      	add	r0, sp, #60	@ 0x3c
 8023a8c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8023a8e:	9410      	str	r4, [sp, #64]	@ 0x40
 8023a90:	f8ad 9044 	strh.w	r9, [sp, #68]	@ 0x44
 8023a94:	f8ad b046 	strh.w	fp, [sp, #70]	@ 0x46
 8023a98:	f88d 704d 	strb.w	r7, [sp, #77]	@ 0x4d
 8023a9c:	920d      	str	r2, [sp, #52]	@ 0x34
 8023a9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8023aa0:	4788      	blx	r1
 8023aa2:	f898 1a39 	ldrb.w	r1, [r8, #2617]	@ 0xa39
 8023aa6:	f898 0a38 	ldrb.w	r0, [r8, #2616]	@ 0xa38
 8023aaa:	3101      	adds	r1, #1
 8023aac:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	@ 0x30
 8023ab0:	b2c9      	uxtb	r1, r1
 8023ab2:	4288      	cmp	r0, r1
 8023ab4:	f888 1a39 	strb.w	r1, [r8, #2617]	@ 0xa39
 8023ab8:	bf08      	it	eq
 8023aba:	2101      	moveq	r1, #1
 8023abc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023ac0:	bf08      	it	eq
 8023ac2:	f886 12b4 	strbeq.w	r1, [r6, #692]	@ 0x2b4
 8023ac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023ac8:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8023aca:	9304      	str	r3, [sp, #16]
 8023acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023ace:	9303      	str	r3, [sp, #12]
 8023ad0:	e9cd 4107 	strd	r4, r1, [sp, #28]
 8023ad4:	e9cd ba01 	strd	fp, sl, [sp, #4]
 8023ad8:	ee18 1a10 	vmov	r1, s16
 8023adc:	f8cd 9000 	str.w	r9, [sp]
 8023ae0:	462b      	mov	r3, r5
 8023ae2:	463a      	mov	r2, r7
 8023ae4:	4630      	mov	r0, r6
 8023ae6:	f7ff fe59 	bl	802379c <MobleConfigModel_SendModelPublicationStatus>
 8023aea:	b023      	add	sp, #140	@ 0x8c
 8023aec:	ecbd 8b02 	vpop	{d8}
 8023af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023af4:	aa14      	add	r2, sp, #80	@ 0x50
 8023af6:	4629      	mov	r1, r5
 8023af8:	4658      	mov	r0, fp
 8023afa:	f7f6 fa0b 	bl	8019f14 <MoblePalCrypto_UpdateModelPublicationParameters>
 8023afe:	e7a1      	b.n	8023a44 <MobleConfigModel_ProcessModelPublicationSet+0xa8>
 8023b00:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8023b04:	f89a 1005 	ldrb.w	r1, [sl, #5]
 8023b08:	f89a c006 	ldrb.w	ip, [sl, #6]
 8023b0c:	f89a 0007 	ldrb.w	r0, [sl, #7]
 8023b10:	9414      	str	r4, [sp, #80]	@ 0x50
 8023b12:	f003 0e07 	and.w	lr, r3, #7
 8023b16:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8023b1a:	08db      	lsrs	r3, r3, #3
 8023b1c:	2c02      	cmp	r4, #2
 8023b1e:	f8ad 7054 	strh.w	r7, [sp, #84]	@ 0x54
 8023b22:	f8ad 2056 	strh.w	r2, [sp, #86]	@ 0x56
 8023b26:	f88d 106c 	strb.w	r1, [sp, #108]	@ 0x6c
 8023b2a:	f88d c06d 	strb.w	ip, [sp, #109]	@ 0x6d
 8023b2e:	f88d 006e 	strb.w	r0, [sp, #110]	@ 0x6e
 8023b32:	f88d e06f 	strb.w	lr, [sp, #111]	@ 0x6f
 8023b36:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8023b3a:	d107      	bne.n	8023b4c <MobleConfigModel_ProcessModelPublicationSet+0x1b0>
 8023b3c:	45a9      	cmp	r9, r5
 8023b3e:	d105      	bne.n	8023b4c <MobleConfigModel_ProcessModelPublicationSet+0x1b0>
 8023b40:	a914      	add	r1, sp, #80	@ 0x50
 8023b42:	4628      	mov	r0, r5
 8023b44:	f7f6 fa40 	bl	8019fc8 <MoblePalCrypto_UpdateHealthModelPublicationParameters>
 8023b48:	2700      	movs	r7, #0
 8023b4a:	e77b      	b.n	8023a44 <MobleConfigModel_ProcessModelPublicationSet+0xa8>
 8023b4c:	aa14      	add	r2, sp, #80	@ 0x50
 8023b4e:	4629      	mov	r1, r5
 8023b50:	4658      	mov	r0, fp
 8023b52:	f7f6 f9df 	bl	8019f14 <MoblePalCrypto_UpdateModelPublicationParameters>
 8023b56:	e7f7      	b.n	8023b48 <MobleConfigModel_ProcessModelPublicationSet+0x1ac>
 8023b58:	2701      	movs	r7, #1
 8023b5a:	e773      	b.n	8023a44 <MobleConfigModel_ProcessModelPublicationSet+0xa8>
 8023b5c:	2702      	movs	r7, #2
 8023b5e:	e771      	b.n	8023a44 <MobleConfigModel_ProcessModelPublicationSet+0xa8>
 8023b60:	2703      	movs	r7, #3
 8023b62:	e76f      	b.n	8023a44 <MobleConfigModel_ProcessModelPublicationSet+0xa8>
 8023b64:	20002504 	.word	0x20002504

08023b68 <MobleConfigModel_ProcessModelPublicationGet>:
 8023b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b6c:	b093      	sub	sp, #76	@ 0x4c
 8023b6e:	4680      	mov	r8, r0
 8023b70:	4618      	mov	r0, r3
 8023b72:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023b74:	f850 5b02 	ldr.w	r5, [r0], #2
 8023b78:	f8df b174 	ldr.w	fp, [pc, #372]	@ 8023cf0 <MobleConfigModel_ProcessModelPublicationGet+0x188>
 8023b7c:	2b04      	cmp	r3, #4
 8023b7e:	4689      	mov	r9, r1
 8023b80:	b2af      	uxth	r7, r5
 8023b82:	bf0c      	ite	eq
 8023b84:	2102      	moveq	r1, #2
 8023b86:	2104      	movne	r1, #4
 8023b88:	aa0c      	add	r2, sp, #48	@ 0x30
 8023b8a:	970c      	str	r7, [sp, #48]	@ 0x30
 8023b8c:	f7f7 f813 	bl	801abb6 <MobleInputStreamGetLittleEndian>
 8023b90:	f8d8 3000 	ldr.w	r3, [r8]
 8023b94:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023b96:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8023b9a:	7f18      	ldrb	r0, [r3, #28]
 8023b9c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8023ba0:	463d      	mov	r5, r7
 8023ba2:	4403      	add	r3, r0
 8023ba4:	b29b      	uxth	r3, r3
 8023ba6:	4632      	mov	r2, r6
 8023ba8:	4629      	mov	r1, r5
 8023baa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023bac:	f7f6 fa3e 	bl	801a02c <MoblePalCrypto_GetModelPublicationParameters>
 8023bb0:	4555      	cmp	r5, sl
 8023bb2:	88c2      	ldrh	r2, [r0, #6]
 8023bb4:	b2ff      	uxtb	r7, r7
 8023bb6:	4604      	mov	r4, r0
 8023bb8:	d034      	beq.n	8023c24 <MobleConfigModel_ProcessModelPublicationGet+0xbc>
 8023bba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023bbc:	429d      	cmp	r5, r3
 8023bbe:	d931      	bls.n	8023c24 <MobleConfigModel_ProcessModelPublicationGet+0xbc>
 8023bc0:	2300      	movs	r3, #0
 8023bc2:	6043      	str	r3, [r0, #4]
 8023bc4:	61c3      	str	r3, [r0, #28]
 8023bc6:	f880 3020 	strb.w	r3, [r0, #32]
 8023bca:	2201      	movs	r2, #1
 8023bcc:	88a3      	ldrh	r3, [r4, #4]
 8023bce:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
 8023bd2:	88e3      	ldrh	r3, [r4, #6]
 8023bd4:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 8023bd8:	f894 3020 	ldrb.w	r3, [r4, #32]
 8023bdc:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
 8023be0:	f8db 36f8 	ldr.w	r3, [fp, #1784]	@ 0x6f8
 8023be4:	69e1      	ldr	r1, [r4, #28]
 8023be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023be8:	f88d 2045 	strb.w	r2, [sp, #69]	@ 0x45
 8023bec:	f88d 7034 	strb.w	r7, [sp, #52]	@ 0x34
 8023bf0:	960e      	str	r6, [sp, #56]	@ 0x38
 8023bf2:	9110      	str	r1, [sp, #64]	@ 0x40
 8023bf4:	a80d      	add	r0, sp, #52	@ 0x34
 8023bf6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023bf8:	4798      	blx	r3
 8023bfa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023bfc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023bfe:	e9cd 6307 	strd	r6, r3, [sp, #28]
 8023c02:	f894 3020 	ldrb.w	r3, [r4, #32]
 8023c06:	9306      	str	r3, [sp, #24]
 8023c08:	7fe3      	ldrb	r3, [r4, #31]
 8023c0a:	9305      	str	r3, [sp, #20]
 8023c0c:	7fa3      	ldrb	r3, [r4, #30]
 8023c0e:	9304      	str	r3, [sp, #16]
 8023c10:	7f63      	ldrb	r3, [r4, #29]
 8023c12:	9303      	str	r3, [sp, #12]
 8023c14:	7f23      	ldrb	r3, [r4, #28]
 8023c16:	9302      	str	r3, [sp, #8]
 8023c18:	88e3      	ldrh	r3, [r4, #6]
 8023c1a:	9301      	str	r3, [sp, #4]
 8023c1c:	88a3      	ldrh	r3, [r4, #4]
 8023c1e:	9300      	str	r3, [sp, #0]
 8023c20:	462b      	mov	r3, r5
 8023c22:	e059      	b.n	8023cd8 <MobleConfigModel_ProcessModelPublicationGet+0x170>
 8023c24:	eba7 010a 	sub.w	r1, r7, sl
 8023c28:	b2c9      	uxtb	r1, r1
 8023c2a:	4630      	mov	r0, r6
 8023c2c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023c2e:	f7f7 ffc0 	bl	801bbb2 <MobleApplicationModelSupported>
 8023c32:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023c34:	b928      	cbnz	r0, 8023c42 <MobleConfigModel_ProcessModelPublicationGet+0xda>
 8023c36:	6060      	str	r0, [r4, #4]
 8023c38:	61e0      	str	r0, [r4, #28]
 8023c3a:	f884 0020 	strb.w	r0, [r4, #32]
 8023c3e:	2202      	movs	r2, #2
 8023c40:	e7c4      	b.n	8023bcc <MobleConfigModel_ProcessModelPublicationGet+0x64>
 8023c42:	4629      	mov	r1, r5
 8023c44:	4630      	mov	r0, r6
 8023c46:	f7f5 ff81 	bl	8019b4c <MoblePalCryptoHasAppKeyBind>
 8023c4a:	f8db 36f8 	ldr.w	r3, [fp, #1784]	@ 0x6f8
 8023c4e:	4602      	mov	r2, r0
 8023c50:	b908      	cbnz	r0, 8023c56 <MobleConfigModel_ProcessModelPublicationGet+0xee>
 8023c52:	80a0      	strh	r0, [r4, #4]
 8023c54:	e7ba      	b.n	8023bcc <MobleConfigModel_ProcessModelPublicationGet+0x64>
 8023c56:	2e02      	cmp	r6, #2
 8023c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023c5a:	d144      	bne.n	8023ce6 <MobleConfigModel_ProcessModelPublicationGet+0x17e>
 8023c5c:	4555      	cmp	r5, sl
 8023c5e:	d142      	bne.n	8023ce6 <MobleConfigModel_ProcessModelPublicationGet+0x17e>
 8023c60:	4c22      	ldr	r4, [pc, #136]	@ (8023cec <MobleConfigModel_ProcessModelPublicationGet+0x184>)
 8023c62:	f88d 7034 	strb.w	r7, [sp, #52]	@ 0x34
 8023c66:	f8b4 210a 	ldrh.w	r2, [r4, #266]	@ 0x10a
 8023c6a:	f8ad 203c 	strh.w	r2, [sp, #60]	@ 0x3c
 8023c6e:	f8b4 210c 	ldrh.w	r2, [r4, #268]	@ 0x10c
 8023c72:	f8ad 203e 	strh.w	r2, [sp, #62]	@ 0x3e
 8023c76:	f8b4 210e 	ldrh.w	r2, [r4, #270]	@ 0x10e
 8023c7a:	960e      	str	r6, [sp, #56]	@ 0x38
 8023c7c:	ba52      	rev16	r2, r2
 8023c7e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8023c82:	f8b4 2108 	ldrh.w	r2, [r4, #264]	@ 0x108
 8023c86:	f88d 2042 	strb.w	r2, [sp, #66]	@ 0x42
 8023c8a:	f894 2110 	ldrb.w	r2, [r4, #272]	@ 0x110
 8023c8e:	f88d 2043 	strb.w	r2, [sp, #67]	@ 0x43
 8023c92:	2700      	movs	r7, #0
 8023c94:	f894 2111 	ldrb.w	r2, [r4, #273]	@ 0x111
 8023c98:	f88d 2044 	strb.w	r2, [sp, #68]	@ 0x44
 8023c9c:	f88d 7045 	strb.w	r7, [sp, #69]	@ 0x45
 8023ca0:	a80d      	add	r0, sp, #52	@ 0x34
 8023ca2:	4798      	blx	r3
 8023ca4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023ca6:	e9cd 6307 	strd	r6, r3, [sp, #28]
 8023caa:	f894 3111 	ldrb.w	r3, [r4, #273]	@ 0x111
 8023cae:	9306      	str	r3, [sp, #24]
 8023cb0:	f894 3110 	ldrb.w	r3, [r4, #272]	@ 0x110
 8023cb4:	9305      	str	r3, [sp, #20]
 8023cb6:	f894 3108 	ldrb.w	r3, [r4, #264]	@ 0x108
 8023cba:	9304      	str	r3, [sp, #16]
 8023cbc:	f894 310e 	ldrb.w	r3, [r4, #270]	@ 0x10e
 8023cc0:	9303      	str	r3, [sp, #12]
 8023cc2:	f894 310f 	ldrb.w	r3, [r4, #271]	@ 0x10f
 8023cc6:	9302      	str	r3, [sp, #8]
 8023cc8:	f8b4 310c 	ldrh.w	r3, [r4, #268]	@ 0x10c
 8023ccc:	9301      	str	r3, [sp, #4]
 8023cce:	f8b4 310a 	ldrh.w	r3, [r4, #266]	@ 0x10a
 8023cd2:	9300      	str	r3, [sp, #0]
 8023cd4:	463a      	mov	r2, r7
 8023cd6:	462b      	mov	r3, r5
 8023cd8:	4649      	mov	r1, r9
 8023cda:	4640      	mov	r0, r8
 8023cdc:	f7ff fd5e 	bl	802379c <MobleConfigModel_SendModelPublicationStatus>
 8023ce0:	b013      	add	sp, #76	@ 0x4c
 8023ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ce6:	2200      	movs	r2, #0
 8023ce8:	e770      	b.n	8023bcc <MobleConfigModel_ProcessModelPublicationGet+0x64>
 8023cea:	bf00      	nop
 8023cec:	20000314 	.word	0x20000314
 8023cf0:	20002504 	.word	0x20002504

08023cf4 <MobleConfigModel_SendAppStatus>:
 8023cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023cf8:	460e      	mov	r6, r1
 8023cfa:	e9dd 7407 	ldrd	r7, r4, [sp, #28]
 8023cfe:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 8023d02:	4619      	mov	r1, r3
 8023d04:	4605      	mov	r5, r0
 8023d06:	b930      	cbnz	r0, 8023d16 <MobleConfigModel_SendAppStatus+0x22>
 8023d08:	4b18      	ldr	r3, [pc, #96]	@ (8023d6c <MobleConfigModel_SendAppStatus+0x78>)
 8023d0a:	4a19      	ldr	r2, [pc, #100]	@ (8023d70 <MobleConfigModel_SendAppStatus+0x7c>)
 8023d0c:	4819      	ldr	r0, [pc, #100]	@ (8023d74 <MobleConfigModel_SendAppStatus+0x80>)
 8023d0e:	f640 0172 	movw	r1, #2162	@ 0x872
 8023d12:	f004 fb63 	bl	80283dc <__assert_func>
 8023d16:	203e      	movs	r0, #62	@ 0x3e
 8023d18:	2300      	movs	r3, #0
 8023d1a:	7020      	strb	r0, [r4, #0]
 8023d1c:	f06f 007f 	mvn.w	r0, #127	@ 0x7f
 8023d20:	70a3      	strb	r3, [r4, #2]
 8023d22:	70e3      	strb	r3, [r4, #3]
 8023d24:	7060      	strb	r0, [r4, #1]
 8023d26:	7222      	strb	r2, [r4, #8]
 8023d28:	f104 0009 	add.w	r0, r4, #9
 8023d2c:	2202      	movs	r2, #2
 8023d2e:	f7f7 fcc7 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8023d32:	4641      	mov	r1, r8
 8023d34:	f104 000b 	add.w	r0, r4, #11
 8023d38:	f7f7 fcc2 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8023d3c:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 8023d40:	bf28      	it	cs
 8023d42:	2204      	movcs	r2, #4
 8023d44:	4639      	mov	r1, r7
 8023d46:	f104 000d 	add.w	r0, r4, #13
 8023d4a:	f7f7 fcb9 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8023d4e:	f5b7 3f80 	cmp.w	r7, #65536	@ 0x10000
 8023d52:	bf2c      	ite	cs
 8023d54:	2309      	movcs	r3, #9
 8023d56:	2307      	movcc	r3, #7
 8023d58:	f8c4 30a3 	str.w	r3, [r4, #163]	@ 0xa3
 8023d5c:	4632      	mov	r2, r6
 8023d5e:	4623      	mov	r3, r4
 8023d60:	4628      	mov	r0, r5
 8023d62:	2101      	movs	r1, #1
 8023d64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023d68:	f7fe bb90 	b.w	802248c <MobleModelSendPacket>
 8023d6c:	08030ec9 	.word	0x08030ec9
 8023d70:	08030098 	.word	0x08030098
 8023d74:	08030edb 	.word	0x08030edb

08023d78 <MobleConfigModel_ProcessAppUnbind>:
 8023d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d7c:	468a      	mov	sl, r1
 8023d7e:	b089      	sub	sp, #36	@ 0x24
 8023d80:	4605      	mov	r5, r0
 8023d82:	b930      	cbnz	r0, 8023d92 <MobleConfigModel_ProcessAppUnbind+0x1a>
 8023d84:	4b3a      	ldr	r3, [pc, #232]	@ (8023e70 <MobleConfigModel_ProcessAppUnbind+0xf8>)
 8023d86:	4a3b      	ldr	r2, [pc, #236]	@ (8023e74 <MobleConfigModel_ProcessAppUnbind+0xfc>)
 8023d88:	f241 01e2 	movw	r1, #4322	@ 0x10e2
 8023d8c:	483a      	ldr	r0, [pc, #232]	@ (8023e78 <MobleConfigModel_ProcessAppUnbind+0x100>)
 8023d8e:	f004 fb25 	bl	80283dc <__assert_func>
 8023d92:	6802      	ldr	r2, [r0, #0]
 8023d94:	b922      	cbnz	r2, 8023da0 <MobleConfigModel_ProcessAppUnbind+0x28>
 8023d96:	4b39      	ldr	r3, [pc, #228]	@ (8023e7c <MobleConfigModel_ProcessAppUnbind+0x104>)
 8023d98:	4a36      	ldr	r2, [pc, #216]	@ (8023e74 <MobleConfigModel_ProcessAppUnbind+0xfc>)
 8023d9a:	f241 01e3 	movw	r1, #4323	@ 0x10e3
 8023d9e:	e7f5      	b.n	8023d8c <MobleConfigModel_ProcessAppUnbind+0x14>
 8023da0:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 8023da4:	7f14      	ldrb	r4, [r2, #28]
 8023da6:	f8d3 6002 	ldr.w	r6, [r3, #2]
 8023daa:	681f      	ldr	r7, [r3, #0]
 8023dac:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023db0:	4414      	add	r4, r2
 8023db2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023db4:	b2b1      	uxth	r1, r6
 8023db6:	2a06      	cmp	r2, #6
 8023db8:	9104      	str	r1, [sp, #16]
 8023dba:	fa1f f887 	uxth.w	r8, r7
 8023dbe:	460e      	mov	r6, r1
 8023dc0:	aa04      	add	r2, sp, #16
 8023dc2:	bf0c      	ite	eq
 8023dc4:	2102      	moveq	r1, #2
 8023dc6:	2104      	movne	r1, #4
 8023dc8:	1d18      	adds	r0, r3, #4
 8023dca:	f7f6 fef4 	bl	801abb6 <MobleInputStreamGetLittleEndian>
 8023dce:	eba7 070b 	sub.w	r7, r7, fp
 8023dd2:	45d8      	cmp	r8, fp
 8023dd4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8023dd8:	b2a4      	uxth	r4, r4
 8023dda:	f007 07ff 	and.w	r7, r7, #255	@ 0xff
 8023dde:	d001      	beq.n	8023de4 <MobleConfigModel_ProcessAppUnbind+0x6c>
 8023de0:	45a0      	cmp	r8, r4
 8023de2:	d840      	bhi.n	8023e66 <MobleConfigModel_ProcessAppUnbind+0xee>
 8023de4:	4639      	mov	r1, r7
 8023de6:	4648      	mov	r0, r9
 8023de8:	f7f7 fee3 	bl	801bbb2 <MobleApplicationModelSupported>
 8023dec:	2800      	cmp	r0, #0
 8023dee:	d03c      	beq.n	8023e6a <MobleConfigModel_ProcessAppUnbind+0xf2>
 8023df0:	f1b9 0f02 	cmp.w	r9, #2
 8023df4:	d12d      	bne.n	8023e52 <MobleConfigModel_ProcessAppUnbind+0xda>
 8023df6:	45d8      	cmp	r8, fp
 8023df8:	d12b      	bne.n	8023e52 <MobleConfigModel_ProcessAppUnbind+0xda>
 8023dfa:	4633      	mov	r3, r6
 8023dfc:	464a      	mov	r2, r9
 8023dfe:	4641      	mov	r1, r8
 8023e00:	4628      	mov	r0, r5
 8023e02:	f7fd fbb5 	bl	8021570 <MobleConfigHealthModelAppUnBind>
 8023e06:	4604      	mov	r4, r0
 8023e08:	b918      	cbnz	r0, 8023e12 <MobleConfigModel_ProcessAppUnbind+0x9a>
 8023e0a:	6828      	ldr	r0, [r5, #0]
 8023e0c:	f7f8 fd24 	bl	801c858 <MobleConfigNetworkSave>
 8023e10:	e002      	b.n	8023e18 <MobleConfigModel_ProcessAppUnbind+0xa0>
 8023e12:	2c03      	cmp	r4, #3
 8023e14:	d11b      	bne.n	8023e4e <MobleConfigModel_ProcessAppUnbind+0xd6>
 8023e16:	2403      	movs	r4, #3
 8023e18:	4b19      	ldr	r3, [pc, #100]	@ (8023e80 <MobleConfigModel_ProcessAppUnbind+0x108>)
 8023e1a:	f88d 7014 	strb.w	r7, [sp, #20]
 8023e1e:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8023e22:	f8ad 6016 	strh.w	r6, [sp, #22]
 8023e26:	a805      	add	r0, sp, #20
 8023e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023e2a:	f8cd 9018 	str.w	r9, [sp, #24]
 8023e2e:	f88d 401c 	strb.w	r4, [sp, #28]
 8023e32:	4798      	blx	r3
 8023e34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023e36:	9600      	str	r6, [sp, #0]
 8023e38:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8023e3c:	4622      	mov	r2, r4
 8023e3e:	4643      	mov	r3, r8
 8023e40:	4651      	mov	r1, sl
 8023e42:	4628      	mov	r0, r5
 8023e44:	f7ff ff56 	bl	8023cf4 <MobleConfigModel_SendAppStatus>
 8023e48:	b009      	add	sp, #36	@ 0x24
 8023e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e4e:	2405      	movs	r4, #5
 8023e50:	e7e2      	b.n	8023e18 <MobleConfigModel_ProcessAppUnbind+0xa0>
 8023e52:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 8023e56:	d2de      	bcs.n	8023e16 <MobleConfigModel_ProcessAppUnbind+0x9e>
 8023e58:	4633      	mov	r3, r6
 8023e5a:	464a      	mov	r2, r9
 8023e5c:	4641      	mov	r1, r8
 8023e5e:	4628      	mov	r0, r5
 8023e60:	f7fd fade 	bl	8021420 <MobleConfigModelAppUnBind>
 8023e64:	e7cf      	b.n	8023e06 <MobleConfigModel_ProcessAppUnbind+0x8e>
 8023e66:	2401      	movs	r4, #1
 8023e68:	e7d6      	b.n	8023e18 <MobleConfigModel_ProcessAppUnbind+0xa0>
 8023e6a:	2402      	movs	r4, #2
 8023e6c:	e7d4      	b.n	8023e18 <MobleConfigModel_ProcessAppUnbind+0xa0>
 8023e6e:	bf00      	nop
 8023e70:	08031449 	.word	0x08031449
 8023e74:	080300b7 	.word	0x080300b7
 8023e78:	08030edb 	.word	0x08030edb
 8023e7c:	080313a4 	.word	0x080313a4
 8023e80:	20002504 	.word	0x20002504

08023e84 <MobleConfigModel_ProcessAppBind>:
 8023e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e88:	468a      	mov	sl, r1
 8023e8a:	b089      	sub	sp, #36	@ 0x24
 8023e8c:	4605      	mov	r5, r0
 8023e8e:	b930      	cbnz	r0, 8023e9e <MobleConfigModel_ProcessAppBind+0x1a>
 8023e90:	4b3b      	ldr	r3, [pc, #236]	@ (8023f80 <MobleConfigModel_ProcessAppBind+0xfc>)
 8023e92:	4a3c      	ldr	r2, [pc, #240]	@ (8023f84 <MobleConfigModel_ProcessAppBind+0x100>)
 8023e94:	f241 0146 	movw	r1, #4166	@ 0x1046
 8023e98:	483b      	ldr	r0, [pc, #236]	@ (8023f88 <MobleConfigModel_ProcessAppBind+0x104>)
 8023e9a:	f004 fa9f 	bl	80283dc <__assert_func>
 8023e9e:	6802      	ldr	r2, [r0, #0]
 8023ea0:	b922      	cbnz	r2, 8023eac <MobleConfigModel_ProcessAppBind+0x28>
 8023ea2:	4b3a      	ldr	r3, [pc, #232]	@ (8023f8c <MobleConfigModel_ProcessAppBind+0x108>)
 8023ea4:	4a37      	ldr	r2, [pc, #220]	@ (8023f84 <MobleConfigModel_ProcessAppBind+0x100>)
 8023ea6:	f241 0147 	movw	r1, #4167	@ 0x1047
 8023eaa:	e7f5      	b.n	8023e98 <MobleConfigModel_ProcessAppBind+0x14>
 8023eac:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 8023eb0:	7f14      	ldrb	r4, [r2, #28]
 8023eb2:	f8d3 6002 	ldr.w	r6, [r3, #2]
 8023eb6:	f8d3 8000 	ldr.w	r8, [r3]
 8023eba:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023ebe:	4414      	add	r4, r2
 8023ec0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8023ec2:	b2b1      	uxth	r1, r6
 8023ec4:	2a06      	cmp	r2, #6
 8023ec6:	9104      	str	r1, [sp, #16]
 8023ec8:	fa1f f988 	uxth.w	r9, r8
 8023ecc:	460e      	mov	r6, r1
 8023ece:	aa04      	add	r2, sp, #16
 8023ed0:	bf0c      	ite	eq
 8023ed2:	2102      	moveq	r1, #2
 8023ed4:	2104      	movne	r1, #4
 8023ed6:	1d18      	adds	r0, r3, #4
 8023ed8:	f7f6 fe6d 	bl	801abb6 <MobleInputStreamGetLittleEndian>
 8023edc:	eba8 080b 	sub.w	r8, r8, fp
 8023ee0:	45d9      	cmp	r9, fp
 8023ee2:	9f04      	ldr	r7, [sp, #16]
 8023ee4:	b2a4      	uxth	r4, r4
 8023ee6:	f008 08ff 	and.w	r8, r8, #255	@ 0xff
 8023eea:	d001      	beq.n	8023ef0 <MobleConfigModel_ProcessAppBind+0x6c>
 8023eec:	45a1      	cmp	r9, r4
 8023eee:	d840      	bhi.n	8023f72 <MobleConfigModel_ProcessAppBind+0xee>
 8023ef0:	4641      	mov	r1, r8
 8023ef2:	4638      	mov	r0, r7
 8023ef4:	f7f7 fe5d 	bl	801bbb2 <MobleApplicationModelSupported>
 8023ef8:	2800      	cmp	r0, #0
 8023efa:	d03c      	beq.n	8023f76 <MobleConfigModel_ProcessAppBind+0xf2>
 8023efc:	2f00      	cmp	r7, #0
 8023efe:	d03c      	beq.n	8023f7a <MobleConfigModel_ProcessAppBind+0xf6>
 8023f00:	2f02      	cmp	r7, #2
 8023f02:	d12c      	bne.n	8023f5e <MobleConfigModel_ProcessAppBind+0xda>
 8023f04:	45d9      	cmp	r9, fp
 8023f06:	d12a      	bne.n	8023f5e <MobleConfigModel_ProcessAppBind+0xda>
 8023f08:	4633      	mov	r3, r6
 8023f0a:	463a      	mov	r2, r7
 8023f0c:	4649      	mov	r1, r9
 8023f0e:	4628      	mov	r0, r5
 8023f10:	f7fd faf4 	bl	80214fc <MobleConfigHealthModelAppBind>
 8023f14:	4604      	mov	r4, r0
 8023f16:	b918      	cbnz	r0, 8023f20 <MobleConfigModel_ProcessAppBind+0x9c>
 8023f18:	6828      	ldr	r0, [r5, #0]
 8023f1a:	f7f8 fc9d 	bl	801c858 <MobleConfigNetworkSave>
 8023f1e:	e002      	b.n	8023f26 <MobleConfigModel_ProcessAppBind+0xa2>
 8023f20:	2c03      	cmp	r4, #3
 8023f22:	d11a      	bne.n	8023f5a <MobleConfigModel_ProcessAppBind+0xd6>
 8023f24:	2403      	movs	r4, #3
 8023f26:	4b1a      	ldr	r3, [pc, #104]	@ (8023f90 <MobleConfigModel_ProcessAppBind+0x10c>)
 8023f28:	f88d 8014 	strb.w	r8, [sp, #20]
 8023f2c:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 8023f30:	f8ad 6016 	strh.w	r6, [sp, #22]
 8023f34:	a805      	add	r0, sp, #20
 8023f36:	6a1b      	ldr	r3, [r3, #32]
 8023f38:	9706      	str	r7, [sp, #24]
 8023f3a:	f88d 401c 	strb.w	r4, [sp, #28]
 8023f3e:	4798      	blx	r3
 8023f40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023f42:	9600      	str	r6, [sp, #0]
 8023f44:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8023f48:	4622      	mov	r2, r4
 8023f4a:	464b      	mov	r3, r9
 8023f4c:	4651      	mov	r1, sl
 8023f4e:	4628      	mov	r0, r5
 8023f50:	f7ff fed0 	bl	8023cf4 <MobleConfigModel_SendAppStatus>
 8023f54:	b009      	add	sp, #36	@ 0x24
 8023f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f5a:	2405      	movs	r4, #5
 8023f5c:	e7e3      	b.n	8023f26 <MobleConfigModel_ProcessAppBind+0xa2>
 8023f5e:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 8023f62:	d2df      	bcs.n	8023f24 <MobleConfigModel_ProcessAppBind+0xa0>
 8023f64:	4633      	mov	r3, r6
 8023f66:	463a      	mov	r2, r7
 8023f68:	4649      	mov	r1, r9
 8023f6a:	4628      	mov	r0, r5
 8023f6c:	f7fd f9ee 	bl	802134c <MobleConfigModelAppBind>
 8023f70:	e7d0      	b.n	8023f14 <MobleConfigModel_ProcessAppBind+0x90>
 8023f72:	2401      	movs	r4, #1
 8023f74:	e7d7      	b.n	8023f26 <MobleConfigModel_ProcessAppBind+0xa2>
 8023f76:	2402      	movs	r4, #2
 8023f78:	e7d5      	b.n	8023f26 <MobleConfigModel_ProcessAppBind+0xa2>
 8023f7a:	240d      	movs	r4, #13
 8023f7c:	e7d3      	b.n	8023f26 <MobleConfigModel_ProcessAppBind+0xa2>
 8023f7e:	bf00      	nop
 8023f80:	08031449 	.word	0x08031449
 8023f84:	080300d9 	.word	0x080300d9
 8023f88:	08030edb 	.word	0x08030edb
 8023f8c:	080313a4 	.word	0x080313a4
 8023f90:	20002504 	.word	0x20002504

08023f94 <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet>:
 8023f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023f98:	f8d3 9000 	ldr.w	r9, [r3]
 8023f9c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023f9e:	fa0f f389 	sxth.w	r3, r9
 8023fa2:	2b00      	cmp	r3, #0
 8023fa4:	4606      	mov	r6, r0
 8023fa6:	4688      	mov	r8, r1
 8023fa8:	dd31      	ble.n	802400e <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet+0x7a>
 8023faa:	6803      	ldr	r3, [r0, #0]
 8023fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023fae:	7c9b      	ldrb	r3, [r3, #18]
 8023fb0:	2b02      	cmp	r3, #2
 8023fb2:	d02a      	beq.n	802400a <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet+0x76>
 8023fb4:	fa1f f089 	uxth.w	r0, r9
 8023fb8:	f7f9 fdee 	bl	801db98 <BnrgmFrndMgmtGetLpnPollTimeout>
 8023fbc:	4607      	mov	r7, r0
 8023fbe:	232e      	movs	r3, #46	@ 0x2e
 8023fc0:	2500      	movs	r5, #0
 8023fc2:	7023      	strb	r3, [r4, #0]
 8023fc4:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8023fc8:	7063      	strb	r3, [r4, #1]
 8023fca:	fa1f f189 	uxth.w	r1, r9
 8023fce:	70a5      	strb	r5, [r4, #2]
 8023fd0:	70e5      	strb	r5, [r4, #3]
 8023fd2:	2202      	movs	r2, #2
 8023fd4:	f104 0008 	add.w	r0, r4, #8
 8023fd8:	f7f7 fb72 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8023fdc:	4639      	mov	r1, r7
 8023fde:	2203      	movs	r2, #3
 8023fe0:	f104 000a 	add.w	r0, r4, #10
 8023fe4:	f7f7 fb6c 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8023fe8:	2305      	movs	r3, #5
 8023fea:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8023fee:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 8023ff2:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 8023ff6:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 8023ffa:	4623      	mov	r3, r4
 8023ffc:	4642      	mov	r2, r8
 8023ffe:	4630      	mov	r0, r6
 8024000:	2101      	movs	r1, #1
 8024002:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024006:	f7fe ba41 	b.w	802248c <MobleModelSendPacket>
 802400a:	2700      	movs	r7, #0
 802400c:	e7d7      	b.n	8023fbe <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet+0x2a>
 802400e:	2002      	movs	r0, #2
 8024010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08024014 <MobleConfigModel_ProcessKeyRefreshPhaseSet>:
 8024014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8024018:	461d      	mov	r5, r3
 802401a:	4606      	mov	r6, r0
 802401c:	4618      	mov	r0, r3
 802401e:	f7f3 f954 	bl	80172ca <MobleConfigModelGetNetIdx>
 8024022:	f895 9002 	ldrb.w	r9, [r5, #2]
 8024026:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024028:	f1b9 0f03 	cmp.w	r9, #3
 802402c:	460f      	mov	r7, r1
 802402e:	4680      	mov	r8, r0
 8024030:	d837      	bhi.n	80240a2 <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x8e>
 8024032:	f7f6 f83f 	bl	801a0b4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8024036:	1e05      	subs	r5, r0, #0
 8024038:	db31      	blt.n	802409e <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x8a>
 802403a:	b2e9      	uxtb	r1, r5
 802403c:	4648      	mov	r0, r9
 802403e:	f7fd f835 	bl	80210ac <ModelConfigUpdateKRState>
 8024042:	2802      	cmp	r0, #2
 8024044:	d02d      	beq.n	80240a2 <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x8e>
 8024046:	2200      	movs	r2, #0
 8024048:	6833      	ldr	r3, [r6, #0]
 802404a:	f8ad 8006 	strh.w	r8, [sp, #6]
 802404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024050:	442b      	add	r3, r5
 8024052:	2500      	movs	r5, #0
 8024054:	f893 9014 	ldrb.w	r9, [r3, #20]
 8024058:	7222      	strb	r2, [r4, #8]
 802405a:	2317      	movs	r3, #23
 802405c:	7023      	strb	r3, [r4, #0]
 802405e:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8024062:	7063      	strb	r3, [r4, #1]
 8024064:	f104 0209 	add.w	r2, r4, #9
 8024068:	f10d 0306 	add.w	r3, sp, #6
 802406c:	70a5      	strb	r5, [r4, #2]
 802406e:	70e5      	strb	r5, [r4, #3]
 8024070:	2101      	movs	r1, #1
 8024072:	4628      	mov	r0, r5
 8024074:	f7f3 f930 	bl	80172d8 <MobleConfigModelPutKeyIdxs>
 8024078:	2304      	movs	r3, #4
 802407a:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 802407e:	463a      	mov	r2, r7
 8024080:	4623      	mov	r3, r4
 8024082:	4630      	mov	r0, r6
 8024084:	f884 900b 	strb.w	r9, [r4, #11]
 8024088:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 802408c:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 8024090:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 8024094:	b003      	add	sp, #12
 8024096:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802409a:	f7fe b9f7 	b.w	802248c <MobleModelSendPacket>
 802409e:	220f      	movs	r2, #15
 80240a0:	e7d2      	b.n	8024048 <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x34>
 80240a2:	2002      	movs	r0, #2
 80240a4:	b003      	add	sp, #12
 80240a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080240aa <MobleConfigModel_ProcessGattProxyGet>:
 80240aa:	b430      	push	{r4, r5}
 80240ac:	460a      	mov	r2, r1
 80240ae:	6801      	ldr	r1, [r0, #0]
 80240b0:	9b03      	ldr	r3, [sp, #12]
 80240b2:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80240b4:	2514      	movs	r5, #20
 80240b6:	7c09      	ldrb	r1, [r1, #16]
 80240b8:	7219      	strb	r1, [r3, #8]
 80240ba:	2400      	movs	r4, #0
 80240bc:	701d      	strb	r5, [r3, #0]
 80240be:	2101      	movs	r1, #1
 80240c0:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 80240c4:	705d      	strb	r5, [r3, #1]
 80240c6:	709c      	strb	r4, [r3, #2]
 80240c8:	70dc      	strb	r4, [r3, #3]
 80240ca:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 80240ce:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 80240d2:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 80240d6:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 80240da:	bc30      	pop	{r4, r5}
 80240dc:	f7fe b9d6 	b.w	802248c <MobleModelSendPacket>

080240e0 <MobleConfigModel_ProcessFriendGet>:
 80240e0:	b430      	push	{r4, r5}
 80240e2:	460a      	mov	r2, r1
 80240e4:	6801      	ldr	r1, [r0, #0]
 80240e6:	9b03      	ldr	r3, [sp, #12]
 80240e8:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80240ea:	2511      	movs	r5, #17
 80240ec:	7c89      	ldrb	r1, [r1, #18]
 80240ee:	7219      	strb	r1, [r3, #8]
 80240f0:	2400      	movs	r4, #0
 80240f2:	701d      	strb	r5, [r3, #0]
 80240f4:	2101      	movs	r1, #1
 80240f6:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 80240fa:	705d      	strb	r5, [r3, #1]
 80240fc:	709c      	strb	r4, [r3, #2]
 80240fe:	70dc      	strb	r4, [r3, #3]
 8024100:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 8024104:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 8024108:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 802410c:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 8024110:	bc30      	pop	{r4, r5}
 8024112:	f7fe b9bb 	b.w	802248c <MobleModelSendPacket>

08024116 <MobleConfigModel_ProcessDefaultTTLSet>:
 8024116:	b430      	push	{r4, r5}
 8024118:	461d      	mov	r5, r3
 802411a:	460a      	mov	r2, r1
 802411c:	7829      	ldrb	r1, [r5, #0]
 802411e:	f995 5000 	ldrsb.w	r5, [r5]
 8024122:	9b03      	ldr	r3, [sp, #12]
 8024124:	2d00      	cmp	r5, #0
 8024126:	db19      	blt.n	802415c <MobleConfigModel_ProcessDefaultTTLSet+0x46>
 8024128:	2901      	cmp	r1, #1
 802412a:	d017      	beq.n	802415c <MobleConfigModel_ProcessDefaultTTLSet+0x46>
 802412c:	6804      	ldr	r4, [r0, #0]
 802412e:	6a64      	ldr	r4, [r4, #36]	@ 0x24
 8024130:	250e      	movs	r5, #14
 8024132:	7261      	strb	r1, [r4, #9]
 8024134:	2400      	movs	r4, #0
 8024136:	701d      	strb	r5, [r3, #0]
 8024138:	7219      	strb	r1, [r3, #8]
 802413a:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 802413e:	2101      	movs	r1, #1
 8024140:	705d      	strb	r5, [r3, #1]
 8024142:	709c      	strb	r4, [r3, #2]
 8024144:	70dc      	strb	r4, [r3, #3]
 8024146:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 802414a:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 802414e:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 8024152:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 8024156:	bc30      	pop	{r4, r5}
 8024158:	f7fe b998 	b.w	802248c <MobleModelSendPacket>
 802415c:	2002      	movs	r0, #2
 802415e:	bc30      	pop	{r4, r5}
 8024160:	4770      	bx	lr
	...

08024164 <MobleConfigModel_ProcessBeaconSet>:
 8024164:	b570      	push	{r4, r5, r6, lr}
 8024166:	460a      	mov	r2, r1
 8024168:	9c05      	ldr	r4, [sp, #20]
 802416a:	7819      	ldrb	r1, [r3, #0]
 802416c:	b930      	cbnz	r0, 802417c <MobleConfigModel_ProcessBeaconSet+0x18>
 802416e:	4b12      	ldr	r3, [pc, #72]	@ (80241b8 <MobleConfigModel_ProcessBeaconSet+0x54>)
 8024170:	4a12      	ldr	r2, [pc, #72]	@ (80241bc <MobleConfigModel_ProcessBeaconSet+0x58>)
 8024172:	4813      	ldr	r0, [pc, #76]	@ (80241c0 <MobleConfigModel_ProcessBeaconSet+0x5c>)
 8024174:	f640 4135 	movw	r1, #3125	@ 0xc35
 8024178:	f004 f930 	bl	80283dc <__assert_func>
 802417c:	2901      	cmp	r1, #1
 802417e:	d819      	bhi.n	80241b4 <MobleConfigModel_ProcessBeaconSet+0x50>
 8024180:	4b10      	ldr	r3, [pc, #64]	@ (80241c4 <MobleConfigModel_ProcessBeaconSet+0x60>)
 8024182:	250b      	movs	r5, #11
 8024184:	f883 10ba 	strb.w	r1, [r3, #186]	@ 0xba
 8024188:	2300      	movs	r3, #0
 802418a:	7025      	strb	r5, [r4, #0]
 802418c:	7221      	strb	r1, [r4, #8]
 802418e:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 8024192:	2101      	movs	r1, #1
 8024194:	70a3      	strb	r3, [r4, #2]
 8024196:	70e3      	strb	r3, [r4, #3]
 8024198:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 802419c:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
 80241a0:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
 80241a4:	7065      	strb	r5, [r4, #1]
 80241a6:	f884 10a3 	strb.w	r1, [r4, #163]	@ 0xa3
 80241aa:	4623      	mov	r3, r4
 80241ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80241b0:	f7fe b96c 	b.w	802248c <MobleModelSendPacket>
 80241b4:	2002      	movs	r0, #2
 80241b6:	bd70      	pop	{r4, r5, r6, pc}
 80241b8:	08031449 	.word	0x08031449
 80241bc:	080300f9 	.word	0x080300f9
 80241c0:	08030edb 	.word	0x08030edb
 80241c4:	20000314 	.word	0x20000314

080241c8 <MobleConfigModel_SendAppKeyStatus>:
 80241c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80241ca:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80241cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80241d0:	460f      	mov	r7, r1
 80241d2:	4606      	mov	r6, r0
 80241d4:	b930      	cbnz	r0, 80241e4 <MobleConfigModel_SendAppKeyStatus+0x1c>
 80241d6:	4b16      	ldr	r3, [pc, #88]	@ (8024230 <MobleConfigModel_SendAppKeyStatus+0x68>)
 80241d8:	4a16      	ldr	r2, [pc, #88]	@ (8024234 <MobleConfigModel_SendAppKeyStatus+0x6c>)
 80241da:	4817      	ldr	r0, [pc, #92]	@ (8024238 <MobleConfigModel_SendAppKeyStatus+0x70>)
 80241dc:	f240 7145 	movw	r1, #1861	@ 0x745
 80241e0:	f004 f8fc 	bl	80283dc <__assert_func>
 80241e4:	2303      	movs	r3, #3
 80241e6:	2500      	movs	r5, #0
 80241e8:	7023      	strb	r3, [r4, #0]
 80241ea:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80241ee:	2101      	movs	r1, #1
 80241f0:	7063      	strb	r3, [r4, #1]
 80241f2:	7222      	strb	r2, [r4, #8]
 80241f4:	f10d 0306 	add.w	r3, sp, #6
 80241f8:	f104 0209 	add.w	r2, r4, #9
 80241fc:	70a5      	strb	r5, [r4, #2]
 80241fe:	70e5      	strb	r5, [r4, #3]
 8024200:	4628      	mov	r0, r5
 8024202:	f7f3 f869 	bl	80172d8 <MobleConfigModelPutKeyIdxs>
 8024206:	ab08      	add	r3, sp, #32
 8024208:	4608      	mov	r0, r1
 802420a:	f7f3 f865 	bl	80172d8 <MobleConfigModelPutKeyIdxs>
 802420e:	2304      	movs	r3, #4
 8024210:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8024214:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 8024218:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 802421c:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 8024220:	4623      	mov	r3, r4
 8024222:	463a      	mov	r2, r7
 8024224:	4630      	mov	r0, r6
 8024226:	f7fe f931 	bl	802248c <MobleModelSendPacket>
 802422a:	b003      	add	sp, #12
 802422c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802422e:	bf00      	nop
 8024230:	08030ec9 	.word	0x08030ec9
 8024234:	0803011b 	.word	0x0803011b
 8024238:	08030edb 	.word	0x08030edb

0802423c <MobleConfigModel_ProcessAppKeyUpdate>:
 802423c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024240:	461c      	mov	r4, r3
 8024242:	b08a      	sub	sp, #40	@ 0x28
 8024244:	4607      	mov	r7, r0
 8024246:	4618      	mov	r0, r3
 8024248:	f7f3 f83f 	bl	80172ca <MobleConfigModelGetNetIdx>
 802424c:	78a6      	ldrb	r6, [r4, #2]
 802424e:	7863      	ldrb	r3, [r4, #1]
 8024250:	0136      	lsls	r6, r6, #4
 8024252:	eb06 1613 	add.w	r6, r6, r3, lsr #4
 8024256:	4605      	mov	r5, r0
 8024258:	f7f5 ff2c 	bl	801a0b4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 802425c:	aa02      	add	r2, sp, #8
 802425e:	1ce3      	adds	r3, r4, #3
 8024260:	4688      	mov	r8, r1
 8024262:	4682      	mov	sl, r0
 8024264:	3413      	adds	r4, #19
 8024266:	4691      	mov	r9, r2
 8024268:	6818      	ldr	r0, [r3, #0]
 802426a:	6859      	ldr	r1, [r3, #4]
 802426c:	4694      	mov	ip, r2
 802426e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8024272:	3308      	adds	r3, #8
 8024274:	42a3      	cmp	r3, r4
 8024276:	4662      	mov	r2, ip
 8024278:	d1f6      	bne.n	8024268 <MobleConfigModel_ProcessAppKeyUpdate+0x2c>
 802427a:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 802427e:	d255      	bcs.n	802432c <MobleConfigModel_ProcessAppKeyUpdate+0xf0>
 8024280:	f3ca 14c0 	ubfx	r4, sl, #7, #1
 8024284:	00a4      	lsls	r4, r4, #2
 8024286:	4628      	mov	r0, r5
 8024288:	f7f4 fb9a 	bl	80189c0 <MoblePalCryptoHasNetworkKey>
 802428c:	4320      	orrs	r0, r4
 802428e:	b2c3      	uxtb	r3, r0
 8024290:	2b00      	cmp	r3, #0
 8024292:	4b27      	ldr	r3, [pc, #156]	@ (8024330 <MobleConfigModel_ProcessAppKeyUpdate+0xf4>)
 8024294:	4453      	add	r3, sl
 8024296:	bf08      	it	eq
 8024298:	2404      	moveq	r4, #4
 802429a:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 802429e:	2b01      	cmp	r3, #1
 80242a0:	d002      	beq.n	80242a8 <MobleConfigModel_ProcessAppKeyUpdate+0x6c>
 80242a2:	2c00      	cmp	r4, #0
 80242a4:	bf08      	it	eq
 80242a6:	240b      	moveq	r4, #11
 80242a8:	4630      	mov	r0, r6
 80242aa:	f7f4 fba3 	bl	80189f4 <MoblePalCryptoHasAppKey>
 80242ae:	bb00      	cbnz	r0, 80242f2 <MobleConfigModel_ProcessAppKeyUpdate+0xb6>
 80242b0:	2c00      	cmp	r4, #0
 80242b2:	bf08      	it	eq
 80242b4:	2403      	moveq	r4, #3
 80242b6:	f8ad 5018 	strh.w	r5, [sp, #24]
 80242ba:	f8ad 601a 	strh.w	r6, [sp, #26]
 80242be:	b924      	cbnz	r4, 80242ca <MobleConfigModel_ProcessAppKeyUpdate+0x8e>
 80242c0:	2310      	movs	r3, #16
 80242c2:	f8cd 9020 	str.w	r9, [sp, #32]
 80242c6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80242ca:	4b1a      	ldr	r3, [pc, #104]	@ (8024334 <MobleConfigModel_ProcessAppKeyUpdate+0xf8>)
 80242cc:	f88d 4025 	strb.w	r4, [sp, #37]	@ 0x25
 80242d0:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 80242d4:	a806      	add	r0, sp, #24
 80242d6:	68db      	ldr	r3, [r3, #12]
 80242d8:	4798      	blx	r3
 80242da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80242dc:	4622      	mov	r2, r4
 80242de:	e9cd 6300 	strd	r6, r3, [sp]
 80242e2:	4641      	mov	r1, r8
 80242e4:	462b      	mov	r3, r5
 80242e6:	4638      	mov	r0, r7
 80242e8:	f7ff ff6e 	bl	80241c8 <MobleConfigModel_SendAppKeyStatus>
 80242ec:	b00a      	add	sp, #40	@ 0x28
 80242ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80242f2:	2c00      	cmp	r4, #0
 80242f4:	d1df      	bne.n	80242b6 <MobleConfigModel_ProcessAppKeyUpdate+0x7a>
 80242f6:	4631      	mov	r1, r6
 80242f8:	4628      	mov	r0, r5
 80242fa:	f7f5 fc73 	bl	8019be4 <MoblePalCryptoHasAppKeyIndex>
 80242fe:	2803      	cmp	r0, #3
 8024300:	d010      	beq.n	8024324 <MobleConfigModel_ProcessAppKeyUpdate+0xe8>
 8024302:	2801      	cmp	r0, #1
 8024304:	d010      	beq.n	8024328 <MobleConfigModel_ProcessAppKeyUpdate+0xec>
 8024306:	462a      	mov	r2, r5
 8024308:	4648      	mov	r0, r9
 802430a:	f7f4 fe95 	bl	8019038 <MoblePalCryptoSetNewAppKey>
 802430e:	4604      	mov	r4, r0
 8024310:	b918      	cbnz	r0, 802431a <MobleConfigModel_ProcessAppKeyUpdate+0xde>
 8024312:	6838      	ldr	r0, [r7, #0]
 8024314:	f7f8 faa0 	bl	801c858 <MobleConfigNetworkSave>
 8024318:	e7cd      	b.n	80242b6 <MobleConfigModel_ProcessAppKeyUpdate+0x7a>
 802431a:	2803      	cmp	r0, #3
 802431c:	bf0c      	ite	eq
 802431e:	2406      	moveq	r4, #6
 8024320:	2405      	movne	r4, #5
 8024322:	e7c8      	b.n	80242b6 <MobleConfigModel_ProcessAppKeyUpdate+0x7a>
 8024324:	2411      	movs	r4, #17
 8024326:	e7c6      	b.n	80242b6 <MobleConfigModel_ProcessAppKeyUpdate+0x7a>
 8024328:	2403      	movs	r4, #3
 802432a:	e7c4      	b.n	80242b6 <MobleConfigModel_ProcessAppKeyUpdate+0x7a>
 802432c:	2404      	movs	r4, #4
 802432e:	e7aa      	b.n	8024286 <MobleConfigModel_ProcessAppKeyUpdate+0x4a>
 8024330:	20000314 	.word	0x20000314
 8024334:	20002504 	.word	0x20002504

08024338 <MobleConfigModel_ProcessAppKeyDelete>:
 8024338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802433c:	461a      	mov	r2, r3
 802433e:	b086      	sub	sp, #24
 8024340:	4606      	mov	r6, r0
 8024342:	4618      	mov	r0, r3
 8024344:	f7f2 ffc1 	bl	80172ca <MobleConfigModelGetNetIdx>
 8024348:	7895      	ldrb	r5, [r2, #2]
 802434a:	7853      	ldrb	r3, [r2, #1]
 802434c:	012d      	lsls	r5, r5, #4
 802434e:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8024352:	460f      	mov	r7, r1
 8024354:	4680      	mov	r8, r0
 8024356:	eb05 1513 	add.w	r5, r5, r3, lsr #4
 802435a:	d226      	bcs.n	80243aa <MobleConfigModel_ProcessAppKeyDelete+0x72>
 802435c:	4601      	mov	r1, r0
 802435e:	4628      	mov	r0, r5
 8024360:	f7f5 facc 	bl	80198fc <MoblePalCryptoDeleteAppKey>
 8024364:	1e04      	subs	r4, r0, #0
 8024366:	bf18      	it	ne
 8024368:	2403      	movne	r4, #3
 802436a:	6830      	ldr	r0, [r6, #0]
 802436c:	f7f8 fa74 	bl	801c858 <MobleConfigNetworkSave>
 8024370:	f8ad 8008 	strh.w	r8, [sp, #8]
 8024374:	f8ad 500a 	strh.w	r5, [sp, #10]
 8024378:	f88d 4015 	strb.w	r4, [sp, #21]
 802437c:	b9bc      	cbnz	r4, 80243ae <MobleConfigModel_ProcessAppKeyDelete+0x76>
 802437e:	9404      	str	r4, [sp, #16]
 8024380:	2310      	movs	r3, #16
 8024382:	f88d 3014 	strb.w	r3, [sp, #20]
 8024386:	4b0b      	ldr	r3, [pc, #44]	@ (80243b4 <MobleConfigModel_ProcessAppKeyDelete+0x7c>)
 8024388:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 802438c:	a802      	add	r0, sp, #8
 802438e:	685b      	ldr	r3, [r3, #4]
 8024390:	4798      	blx	r3
 8024392:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024394:	4622      	mov	r2, r4
 8024396:	e9cd 5300 	strd	r5, r3, [sp]
 802439a:	4639      	mov	r1, r7
 802439c:	4643      	mov	r3, r8
 802439e:	4630      	mov	r0, r6
 80243a0:	f7ff ff12 	bl	80241c8 <MobleConfigModel_SendAppKeyStatus>
 80243a4:	b006      	add	sp, #24
 80243a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80243aa:	2404      	movs	r4, #4
 80243ac:	e7dd      	b.n	802436a <MobleConfigModel_ProcessAppKeyDelete+0x32>
 80243ae:	2300      	movs	r3, #0
 80243b0:	e7e7      	b.n	8024382 <MobleConfigModel_ProcessAppKeyDelete+0x4a>
 80243b2:	bf00      	nop
 80243b4:	20002504 	.word	0x20002504

080243b8 <MobleConfigModel_ProcessAppKeyAdd>:
 80243b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80243bc:	461c      	mov	r4, r3
 80243be:	b08b      	sub	sp, #44	@ 0x2c
 80243c0:	4607      	mov	r7, r0
 80243c2:	4618      	mov	r0, r3
 80243c4:	f7f2 ff81 	bl	80172ca <MobleConfigModelGetNetIdx>
 80243c8:	78a5      	ldrb	r5, [r4, #2]
 80243ca:	7863      	ldrb	r3, [r4, #1]
 80243cc:	012d      	lsls	r5, r5, #4
 80243ce:	aa02      	add	r2, sp, #8
 80243d0:	eb05 1513 	add.w	r5, r5, r3, lsr #4
 80243d4:	4688      	mov	r8, r1
 80243d6:	1ce3      	adds	r3, r4, #3
 80243d8:	4606      	mov	r6, r0
 80243da:	3413      	adds	r4, #19
 80243dc:	4691      	mov	r9, r2
 80243de:	6818      	ldr	r0, [r3, #0]
 80243e0:	6859      	ldr	r1, [r3, #4]
 80243e2:	4694      	mov	ip, r2
 80243e4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80243e8:	3308      	adds	r3, #8
 80243ea:	42a3      	cmp	r3, r4
 80243ec:	4662      	mov	r2, ip
 80243ee:	d1f6      	bne.n	80243de <MobleConfigModel_ProcessAppKeyAdd+0x26>
 80243f0:	f5b6 5f80 	cmp.w	r6, #4096	@ 0x1000
 80243f4:	4630      	mov	r0, r6
 80243f6:	bf34      	ite	cc
 80243f8:	2400      	movcc	r4, #0
 80243fa:	2401      	movcs	r4, #1
 80243fc:	f7f4 fae0 	bl	80189c0 <MoblePalCryptoHasNetworkKey>
 8024400:	00a4      	lsls	r4, r4, #2
 8024402:	4320      	orrs	r0, r4
 8024404:	b2c0      	uxtb	r0, r0
 8024406:	2800      	cmp	r0, #0
 8024408:	4628      	mov	r0, r5
 802440a:	bf08      	it	eq
 802440c:	2404      	moveq	r4, #4
 802440e:	f7f4 faf1 	bl	80189f4 <MoblePalCryptoHasAppKey>
 8024412:	2801      	cmp	r0, #1
 8024414:	d111      	bne.n	802443a <MobleConfigModel_ProcessAppKeyAdd+0x82>
 8024416:	b994      	cbnz	r4, 802443e <MobleConfigModel_ProcessAppKeyAdd+0x86>
 8024418:	4628      	mov	r0, r5
 802441a:	f7f5 f9f3 	bl	8019804 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 802441e:	42b0      	cmp	r0, r6
 8024420:	d12f      	bne.n	8024482 <MobleConfigModel_ProcessAppKeyAdd+0xca>
 8024422:	4632      	mov	r2, r6
 8024424:	4629      	mov	r1, r5
 8024426:	4648      	mov	r0, r9
 8024428:	f7f4 fe94 	bl	8019154 <MoblePalCryptoSetAppKey>
 802442c:	4604      	mov	r4, r0
 802442e:	bb18      	cbnz	r0, 8024478 <MobleConfigModel_ProcessAppKeyAdd+0xc0>
 8024430:	6838      	ldr	r0, [r7, #0]
 8024432:	6084      	str	r4, [r0, #8]
 8024434:	f7f8 fa10 	bl	801c858 <MobleConfigNetworkSave>
 8024438:	e001      	b.n	802443e <MobleConfigModel_ProcessAppKeyAdd+0x86>
 802443a:	2c00      	cmp	r4, #0
 802443c:	d0f1      	beq.n	8024422 <MobleConfigModel_ProcessAppKeyAdd+0x6a>
 802443e:	2310      	movs	r3, #16
 8024440:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8024444:	4b10      	ldr	r3, [pc, #64]	@ (8024488 <MobleConfigModel_ProcessAppKeyAdd+0xd0>)
 8024446:	f88d 4025 	strb.w	r4, [sp, #37]	@ 0x25
 802444a:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 802444e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8024452:	a806      	add	r0, sp, #24
 8024454:	681b      	ldr	r3, [r3, #0]
 8024456:	f8ad 501a 	strh.w	r5, [sp, #26]
 802445a:	f8cd 9020 	str.w	r9, [sp, #32]
 802445e:	4798      	blx	r3
 8024460:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024462:	4622      	mov	r2, r4
 8024464:	e9cd 5300 	strd	r5, r3, [sp]
 8024468:	4641      	mov	r1, r8
 802446a:	4633      	mov	r3, r6
 802446c:	4638      	mov	r0, r7
 802446e:	f7ff feab 	bl	80241c8 <MobleConfigModel_SendAppKeyStatus>
 8024472:	b00b      	add	sp, #44	@ 0x2c
 8024474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024478:	2803      	cmp	r0, #3
 802447a:	bf0c      	ite	eq
 802447c:	2406      	moveq	r4, #6
 802447e:	2403      	movne	r4, #3
 8024480:	e7dd      	b.n	802443e <MobleConfigModel_ProcessAppKeyAdd+0x86>
 8024482:	2404      	movs	r4, #4
 8024484:	e7db      	b.n	802443e <MobleConfigModel_ProcessAppKeyAdd+0x86>
 8024486:	bf00      	nop
 8024488:	20002504 	.word	0x20002504

0802448c <MobleConfigModel_SendAppKeyList>:
 802448c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8024490:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024492:	f8ad 3006 	strh.w	r3, [sp, #6]
 8024496:	4688      	mov	r8, r1
 8024498:	4606      	mov	r6, r0
 802449a:	b930      	cbnz	r0, 80244aa <MobleConfigModel_SendAppKeyList+0x1e>
 802449c:	4b16      	ldr	r3, [pc, #88]	@ (80244f8 <MobleConfigModel_SendAppKeyList+0x6c>)
 802449e:	4a17      	ldr	r2, [pc, #92]	@ (80244fc <MobleConfigModel_SendAppKeyList+0x70>)
 80244a0:	4817      	ldr	r0, [pc, #92]	@ (8024500 <MobleConfigModel_SendAppKeyList+0x74>)
 80244a2:	f240 711a 	movw	r1, #1818	@ 0x71a
 80244a6:	f003 ff99 	bl	80283dc <__assert_func>
 80244aa:	2302      	movs	r3, #2
 80244ac:	2700      	movs	r7, #0
 80244ae:	7023      	strb	r3, [r4, #0]
 80244b0:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80244b4:	7063      	strb	r3, [r4, #1]
 80244b6:	7222      	strb	r2, [r4, #8]
 80244b8:	f10d 0306 	add.w	r3, sp, #6
 80244bc:	f104 0209 	add.w	r2, r4, #9
 80244c0:	70a7      	strb	r7, [r4, #2]
 80244c2:	70e7      	strb	r7, [r4, #3]
 80244c4:	2101      	movs	r1, #1
 80244c6:	4638      	mov	r0, r7
 80244c8:	f7f2 ff06 	bl	80172d8 <MobleConfigModelPutKeyIdxs>
 80244cc:	9b08      	ldr	r3, [sp, #32]
 80244ce:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80244d2:	f104 020b 	add.w	r2, r4, #11
 80244d6:	4605      	mov	r5, r0
 80244d8:	4638      	mov	r0, r7
 80244da:	f7f2 fefd 	bl	80172d8 <MobleConfigModelPutKeyIdxs>
 80244de:	4405      	add	r5, r0
 80244e0:	3501      	adds	r5, #1
 80244e2:	f8c4 50a3 	str.w	r5, [r4, #163]	@ 0xa3
 80244e6:	4623      	mov	r3, r4
 80244e8:	4642      	mov	r2, r8
 80244ea:	2101      	movs	r1, #1
 80244ec:	4630      	mov	r0, r6
 80244ee:	f7fd ffcd 	bl	802248c <MobleModelSendPacket>
 80244f2:	b002      	add	sp, #8
 80244f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80244f8:	08030ec9 	.word	0x08030ec9
 80244fc:	0803013d 	.word	0x0803013d
 8024500:	08030edb 	.word	0x08030edb

08024504 <MobleConfigModel_ProcessAppKeyGet>:
 8024504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024508:	4605      	mov	r5, r0
 802450a:	b08d      	sub	sp, #52	@ 0x34
 802450c:	4618      	mov	r0, r3
 802450e:	f7f2 fedc 	bl	80172ca <MobleConfigModelGetNetIdx>
 8024512:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8024516:	bf28      	it	cs
 8024518:	2200      	movcs	r2, #0
 802451a:	460f      	mov	r7, r1
 802451c:	bf28      	it	cs
 802451e:	f8ad 201a 	strhcs.w	r2, [sp, #26]
 8024522:	9005      	str	r0, [sp, #20]
 8024524:	f7f4 fa4c 	bl	80189c0 <MoblePalCryptoHasNetworkKey>
 8024528:	f8dd 8054 	ldr.w	r8, [sp, #84]	@ 0x54
 802452c:	9b05      	ldr	r3, [sp, #20]
 802452e:	b908      	cbnz	r0, 8024534 <MobleConfigModel_ProcessAppKeyGet+0x30>
 8024530:	f8ad 001a 	strh.w	r0, [sp, #26]
 8024534:	ae07      	add	r6, sp, #28
 8024536:	461a      	mov	r2, r3
 8024538:	f10d 011a 	add.w	r1, sp, #26
 802453c:	4630      	mov	r0, r6
 802453e:	9305      	str	r3, [sp, #20]
 8024540:	f7f5 f920 	bl	8019784 <MoblePalCryptoGetAppKeyIndexes>
 8024544:	9b05      	ldr	r3, [sp, #20]
 8024546:	4604      	mov	r4, r0
 8024548:	b118      	cbz	r0, 8024552 <MobleConfigModel_ProcessAppKeyGet+0x4e>
 802454a:	2200      	movs	r2, #0
 802454c:	f8ad 201a 	strh.w	r2, [sp, #26]
 8024550:	2404      	movs	r4, #4
 8024552:	4a10      	ldr	r2, [pc, #64]	@ (8024594 <MobleConfigModel_ProcessAppKeyGet+0x90>)
 8024554:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8024558:	f8d2 26f8 	ldr.w	r2, [r2, #1784]	@ 0x6f8
 802455c:	f88d 402e 	strb.w	r4, [sp, #46]	@ 0x2e
 8024560:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8024564:	6892      	ldr	r2, [r2, #8]
 8024566:	960a      	str	r6, [sp, #40]	@ 0x28
 8024568:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 802456c:	a809      	add	r0, sp, #36	@ 0x24
 802456e:	9305      	str	r3, [sp, #20]
 8024570:	4790      	blx	r2
 8024572:	e9cd 9801 	strd	r9, r8, [sp, #4]
 8024576:	9b05      	ldr	r3, [sp, #20]
 8024578:	b944      	cbnz	r4, 802458c <MobleConfigModel_ProcessAppKeyGet+0x88>
 802457a:	9600      	str	r6, [sp, #0]
 802457c:	4622      	mov	r2, r4
 802457e:	4639      	mov	r1, r7
 8024580:	4628      	mov	r0, r5
 8024582:	f7ff ff83 	bl	802448c <MobleConfigModel_SendAppKeyList>
 8024586:	b00d      	add	sp, #52	@ 0x34
 8024588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802458c:	2200      	movs	r2, #0
 802458e:	9200      	str	r2, [sp, #0]
 8024590:	2204      	movs	r2, #4
 8024592:	e7f4      	b.n	802457e <MobleConfigModel_ProcessAppKeyGet+0x7a>
 8024594:	20002504 	.word	0x20002504

08024598 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus>:
 8024598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802459c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802459e:	f89d 8020 	ldrb.w	r8, [sp, #32]
 80245a2:	f89d e024 	ldrb.w	lr, [sp, #36]	@ 0x24
 80245a6:	f89d c028 	ldrb.w	ip, [sp, #40]	@ 0x28
 80245aa:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 80245ae:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 80245b2:	b930      	cbnz	r0, 80245c2 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x2a>
 80245b4:	4b14      	ldr	r3, [pc, #80]	@ (8024608 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x70>)
 80245b6:	4a15      	ldr	r2, [pc, #84]	@ (802460c <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x74>)
 80245b8:	4815      	ldr	r0, [pc, #84]	@ (8024610 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x78>)
 80245ba:	f240 71f1 	movw	r1, #2033	@ 0x7f1
 80245be:	f003 ff0d 	bl	80283dc <__assert_func>
 80245c2:	2500      	movs	r5, #0
 80245c4:	f04f 0906 	mov.w	r9, #6
 80245c8:	f8a4 3009 	strh.w	r3, [r4, #9]
 80245cc:	81e7      	strh	r7, [r4, #14]
 80245ce:	230a      	movs	r3, #10
 80245d0:	8226      	strh	r6, [r4, #16]
 80245d2:	7222      	strb	r2, [r4, #8]
 80245d4:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 80245d8:	f884 9000 	strb.w	r9, [r4]
 80245dc:	7065      	strb	r5, [r4, #1]
 80245de:	70a5      	strb	r5, [r4, #2]
 80245e0:	70e5      	strb	r5, [r4, #3]
 80245e2:	f884 800b 	strb.w	r8, [r4, #11]
 80245e6:	f884 e00c 	strb.w	lr, [r4, #12]
 80245ea:	f884 c00d 	strb.w	ip, [r4, #13]
 80245ee:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 80245f2:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 80245f6:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 80245fa:	4623      	mov	r3, r4
 80245fc:	460a      	mov	r2, r1
 80245fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024602:	2101      	movs	r1, #1
 8024604:	f7fd bf42 	b.w	802248c <MobleModelSendPacket>
 8024608:	08030ec9 	.word	0x08030ec9
 802460c:	0803015d 	.word	0x0803015d
 8024610:	08030edb 	.word	0x08030edb

08024614 <BnrgmConfigModel_ProcessHeartBeatPublicationSet>:
 8024614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024618:	789d      	ldrb	r5, [r3, #2]
 802461a:	681f      	ldr	r7, [r3, #0]
 802461c:	469a      	mov	sl, r3
 802461e:	f1a5 0312 	sub.w	r3, r5, #18
 8024622:	b2db      	uxtb	r3, r3
 8024624:	2bec      	cmp	r3, #236	@ 0xec
 8024626:	b2bf      	uxth	r7, r7
 8024628:	bf88      	it	hi
 802462a:	fab7 f487 	clzhi	r4, r7
 802462e:	f89a 8003 	ldrb.w	r8, [sl, #3]
 8024632:	f99a 3004 	ldrsb.w	r3, [sl, #4]
 8024636:	f89a 9004 	ldrb.w	r9, [sl, #4]
 802463a:	bf86      	itte	hi
 802463c:	0964      	lsrhi	r4, r4, #5
 802463e:	0064      	lslhi	r4, r4, #1
 8024640:	2402      	movls	r4, #2
 8024642:	f1b8 0f12 	cmp.w	r8, #18
 8024646:	bf28      	it	cs
 8024648:	2402      	movcs	r4, #2
 802464a:	b086      	sub	sp, #24
 802464c:	2b00      	cmp	r3, #0
 802464e:	4606      	mov	r6, r0
 8024650:	f10a 0007 	add.w	r0, sl, #7
 8024654:	bfb8      	it	lt
 8024656:	2402      	movlt	r4, #2
 8024658:	f7f2 fe37 	bl	80172ca <MobleConfigModelGetNetIdx>
 802465c:	2800      	cmp	r0, #0
 802465e:	d058      	beq.n	8024712 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xfe>
 8024660:	4b33      	ldr	r3, [pc, #204]	@ (8024730 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x11c>)
 8024662:	227c      	movs	r2, #124	@ 0x7c
 8024664:	fb02 3300 	mla	r3, r2, r0, r3
 8024668:	f893 2445 	ldrb.w	r2, [r3, #1093]	@ 0x445
 802466c:	fab2 f282 	clz	r2, r2
 8024670:	0952      	lsrs	r2, r2, #5
 8024672:	0092      	lsls	r2, r2, #2
 8024674:	2c00      	cmp	r4, #0
 8024676:	d158      	bne.n	802472a <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x116>
 8024678:	6833      	ldr	r3, [r6, #0]
 802467a:	f8da c005 	ldr.w	ip, [sl, #5]
 802467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024680:	2d00      	cmp	r5, #0
 8024682:	d048      	beq.n	8024716 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x102>
 8024684:	2dff      	cmp	r5, #255	@ 0xff
 8024686:	d048      	beq.n	802471a <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x106>
 8024688:	2d11      	cmp	r5, #17
 802468a:	d049      	beq.n	8024720 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x10c>
 802468c:	f105 3eff 	add.w	lr, r5, #4294967295
 8024690:	fa5f fe8e 	uxtb.w	lr, lr
 8024694:	f1be 0f1f 	cmp.w	lr, #31
 8024698:	bf9c      	itt	ls
 802469a:	2401      	movls	r4, #1
 802469c:	fa04 f40e 	lslls.w	r4, r4, lr
 80246a0:	b2a4      	uxth	r4, r4
 80246a2:	83df      	strh	r7, [r3, #30]
 80246a4:	625c      	str	r4, [r3, #36]	@ 0x24
 80246a6:	f1b8 0f00 	cmp.w	r8, #0
 80246aa:	d03c      	beq.n	8024726 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x112>
 80246ac:	f108 3eff 	add.w	lr, r8, #4294967295
 80246b0:	fa5f fe8e 	uxtb.w	lr, lr
 80246b4:	f1be 0f1f 	cmp.w	lr, #31
 80246b8:	bf9a      	itte	ls
 80246ba:	2401      	movls	r4, #1
 80246bc:	fa04 f40e 	lslls.w	r4, r4, lr
 80246c0:	2400      	movhi	r4, #0
 80246c2:	b2a4      	uxth	r4, r4
 80246c4:	f00c 0c0f 	and.w	ip, ip, #15
 80246c8:	851c      	strh	r4, [r3, #40]	@ 0x28
 80246ca:	f8a3 c02a 	strh.w	ip, [r3, #42]	@ 0x2a
 80246ce:	8598      	strh	r0, [r3, #44]	@ 0x2c
 80246d0:	f883 901c 	strb.w	r9, [r3, #28]
 80246d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80246d6:	e9cd 9c02 	strd	r9, ip, [sp, #8]
 80246da:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80246de:	e9cd 5800 	strd	r5, r8, [sp]
 80246e2:	463b      	mov	r3, r7
 80246e4:	4630      	mov	r0, r6
 80246e6:	f7ff ff57 	bl	8024598 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus>
 80246ea:	6833      	ldr	r3, [r6, #0]
 80246ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80246ee:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80246f0:	4604      	mov	r4, r0
 80246f2:	4628      	mov	r0, r5
 80246f4:	f7f2 ffb2 	bl	801765c <MoblePalTimerStop>
 80246f8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80246fa:	b133      	cbz	r3, 802470a <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xf6>
 80246fc:	8d13      	ldrh	r3, [r2, #40]	@ 0x28
 80246fe:	b123      	cbz	r3, 802470a <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xf6>
 8024700:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8024704:	4628      	mov	r0, r5
 8024706:	f7f2 ff81 	bl	801760c <MoblePalTimerStartOnce>
 802470a:	4620      	mov	r0, r4
 802470c:	b006      	add	sp, #24
 802470e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024712:	4602      	mov	r2, r0
 8024714:	e7ae      	b.n	8024674 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x60>
 8024716:	462c      	mov	r4, r5
 8024718:	e7c3      	b.n	80246a2 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x8e>
 802471a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 802471e:	e7c0      	b.n	80246a2 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x8e>
 8024720:	f64f 74fe 	movw	r4, #65534	@ 0xfffe
 8024724:	e7bd      	b.n	80246a2 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x8e>
 8024726:	4644      	mov	r4, r8
 8024728:	e7cc      	b.n	80246c4 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xb0>
 802472a:	2402      	movs	r4, #2
 802472c:	e7ed      	b.n	802470a <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xf6>
 802472e:	bf00      	nop
 8024730:	2000140c 	.word	0x2000140c

08024734 <BnrgmConfigModel_ProcessHeartBeatPublicationGet>:
 8024734:	6803      	ldr	r3, [r0, #0]
 8024736:	b570      	push	{r4, r5, r6, lr}
 8024738:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 802473a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 802473c:	b086      	sub	sp, #24
 802473e:	b313      	cbz	r3, 8024786 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x52>
 8024740:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8024744:	4293      	cmp	r3, r2
 8024746:	d020      	beq.n	802478a <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x56>
 8024748:	2400      	movs	r4, #0
 802474a:	3401      	adds	r4, #1
 802474c:	2b01      	cmp	r3, #1
 802474e:	b2e4      	uxtb	r4, r4
 8024750:	d117      	bne.n	8024782 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x4e>
 8024752:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8024754:	b12a      	cbz	r2, 8024762 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x2e>
 8024756:	4613      	mov	r3, r2
 8024758:	2200      	movs	r2, #0
 802475a:	3201      	adds	r2, #1
 802475c:	2b01      	cmp	r3, #1
 802475e:	b2d2      	uxtb	r2, r2
 8024760:	d115      	bne.n	802478e <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x5a>
 8024762:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024764:	8beb      	ldrh	r3, [r5, #30]
 8024766:	9605      	str	r6, [sp, #20]
 8024768:	8dae      	ldrh	r6, [r5, #44]	@ 0x2c
 802476a:	9604      	str	r6, [sp, #16]
 802476c:	8d6e      	ldrh	r6, [r5, #42]	@ 0x2a
 802476e:	9603      	str	r6, [sp, #12]
 8024770:	7f2d      	ldrb	r5, [r5, #28]
 8024772:	9400      	str	r4, [sp, #0]
 8024774:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8024778:	2200      	movs	r2, #0
 802477a:	f7ff ff0d 	bl	8024598 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus>
 802477e:	b006      	add	sp, #24
 8024780:	bd70      	pop	{r4, r5, r6, pc}
 8024782:	085b      	lsrs	r3, r3, #1
 8024784:	e7e1      	b.n	802474a <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x16>
 8024786:	461c      	mov	r4, r3
 8024788:	e7e3      	b.n	8024752 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x1e>
 802478a:	24ff      	movs	r4, #255	@ 0xff
 802478c:	e7e1      	b.n	8024752 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x1e>
 802478e:	085b      	lsrs	r3, r3, #1
 8024790:	e7e3      	b.n	802475a <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x26>
	...

08024794 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus>:
 8024794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024798:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802479a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 802479e:	f89d e024 	ldrb.w	lr, [sp, #36]	@ 0x24
 80247a2:	f89d c028 	ldrb.w	ip, [sp, #40]	@ 0x28
 80247a6:	f89d 702c 	ldrb.w	r7, [sp, #44]	@ 0x2c
 80247aa:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
 80247ae:	b930      	cbnz	r0, 80247be <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x2a>
 80247b0:	4b16      	ldr	r3, [pc, #88]	@ (802480c <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x78>)
 80247b2:	4a17      	ldr	r2, [pc, #92]	@ (8024810 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x7c>)
 80247b4:	4817      	ldr	r0, [pc, #92]	@ (8024814 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x80>)
 80247b6:	f640 0118 	movw	r1, #2072	@ 0x818
 80247ba:	f003 fe0f 	bl	80283dc <__assert_func>
 80247be:	f04f 093c 	mov.w	r9, #60	@ 0x3c
 80247c2:	2500      	movs	r5, #0
 80247c4:	f884 9000 	strb.w	r9, [r4]
 80247c8:	f8a4 3009 	strh.w	r3, [r4, #9]
 80247cc:	f06f 097f 	mvn.w	r9, #127	@ 0x7f
 80247d0:	2309      	movs	r3, #9
 80247d2:	f8a4 800b 	strh.w	r8, [r4, #11]
 80247d6:	7222      	strb	r2, [r4, #8]
 80247d8:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 80247dc:	f884 9001 	strb.w	r9, [r4, #1]
 80247e0:	70a5      	strb	r5, [r4, #2]
 80247e2:	70e5      	strb	r5, [r4, #3]
 80247e4:	f884 e00d 	strb.w	lr, [r4, #13]
 80247e8:	f884 c00e 	strb.w	ip, [r4, #14]
 80247ec:	73e7      	strb	r7, [r4, #15]
 80247ee:	7426      	strb	r6, [r4, #16]
 80247f0:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 80247f4:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 80247f8:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 80247fc:	4623      	mov	r3, r4
 80247fe:	460a      	mov	r2, r1
 8024800:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024804:	2101      	movs	r1, #1
 8024806:	f7fd be41 	b.w	802248c <MobleModelSendPacket>
 802480a:	bf00      	nop
 802480c:	08030ec9 	.word	0x08030ec9
 8024810:	08030193 	.word	0x08030193
 8024814:	08030edb 	.word	0x08030edb

08024818 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet>:
 8024818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802481c:	4688      	mov	r8, r1
 802481e:	4943      	ldr	r1, [pc, #268]	@ (802492c <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x114>)
 8024820:	2600      	movs	r6, #0
 8024822:	f8c1 60e8 	str.w	r6, [r1, #232]	@ 0xe8
 8024826:	681a      	ldr	r2, [r3, #0]
 8024828:	4607      	mov	r7, r0
 802482a:	b290      	uxth	r0, r2
 802482c:	b212      	sxth	r2, r2
 802482e:	42b2      	cmp	r2, r6
 8024830:	b086      	sub	sp, #24
 8024832:	dc01      	bgt.n	8024838 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x20>
 8024834:	b9a0      	cbnz	r0, 8024860 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x48>
 8024836:	2601      	movs	r6, #1
 8024838:	f8d3 9002 	ldr.w	r9, [r3, #2]
 802483c:	fa1f fa89 	uxth.w	sl, r9
 8024840:	f1ba 0f00 	cmp.w	sl, #0
 8024844:	d00e      	beq.n	8024864 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x4c>
 8024846:	f409 4240 	and.w	r2, r9, #49152	@ 0xc000
 802484a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 802484e:	d007      	beq.n	8024860 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x48>
 8024850:	fa0f f289 	sxth.w	r2, r9
 8024854:	2a00      	cmp	r2, #0
 8024856:	dd06      	ble.n	8024866 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x4e>
 8024858:	683a      	ldr	r2, [r7, #0]
 802485a:	8852      	ldrh	r2, [r2, #2]
 802485c:	4552      	cmp	r2, sl
 802485e:	d002      	beq.n	8024866 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x4e>
 8024860:	2002      	movs	r0, #2
 8024862:	e04b      	b.n	80248fc <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xe4>
 8024864:	2601      	movs	r6, #1
 8024866:	791c      	ldrb	r4, [r3, #4]
 8024868:	683b      	ldr	r3, [r7, #0]
 802486a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802486c:	8e93      	ldrh	r3, [r2, #52]	@ 0x34
 802486e:	4283      	cmp	r3, r0
 8024870:	d103      	bne.n	802487a <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x62>
 8024872:	8ed3      	ldrh	r3, [r2, #54]	@ 0x36
 8024874:	4553      	cmp	r3, sl
 8024876:	d100      	bne.n	802487a <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x62>
 8024878:	b114      	cbz	r4, 8024880 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x68>
 802487a:	f44f 03fe 	mov.w	r3, #8323072	@ 0x7f0000
 802487e:	6393      	str	r3, [r2, #56]	@ 0x38
 8024880:	8f13      	ldrh	r3, [r2, #56]	@ 0x38
 8024882:	2b00      	cmp	r3, #0
 8024884:	d03f      	beq.n	8024906 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xee>
 8024886:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 802488a:	42ab      	cmp	r3, r5
 802488c:	d03d      	beq.n	802490a <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xf2>
 802488e:	2500      	movs	r5, #0
 8024890:	3501      	adds	r5, #1
 8024892:	2b01      	cmp	r3, #1
 8024894:	b2ed      	uxtb	r5, r5
 8024896:	d134      	bne.n	8024902 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xea>
 8024898:	2c00      	cmp	r4, #0
 802489a:	d138      	bne.n	802490e <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xf6>
 802489c:	6354      	str	r4, [r2, #52]	@ 0x34
 802489e:	b10e      	cbz	r6, 80248a4 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x8c>
 80248a0:	2300      	movs	r3, #0
 80248a2:	6353      	str	r3, [r2, #52]	@ 0x34
 80248a4:	2400      	movs	r4, #0
 80248a6:	f8c1 40e8 	str.w	r4, [r1, #232]	@ 0xe8
 80248aa:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 80248ac:	4630      	mov	r0, r6
 80248ae:	f7f2 fed5 	bl	801765c <MoblePalTimerStop>
 80248b2:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80248b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80248b8:	d304      	bcc.n	80248c4 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xac>
 80248ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80248be:	4630      	mov	r0, r6
 80248c0:	f7f2 fe73 	bl	80175aa <MoblePalTimerStart>
 80248c4:	fa0f f989 	sxth.w	r9, r9
 80248c8:	f1b9 0f00 	cmp.w	r9, #0
 80248cc:	dc02      	bgt.n	80248d4 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xbc>
 80248ce:	4650      	mov	r0, sl
 80248d0:	f7f8 ff80 	bl	801d7d4 <BnrgmFrndMgmtSubscriptionListAdd>
 80248d4:	683b      	ldr	r3, [r7, #0]
 80248d6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80248d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80248da:	8e93      	ldrh	r3, [r2, #52]	@ 0x34
 80248dc:	9105      	str	r1, [sp, #20]
 80248de:	f892 103b 	ldrb.w	r1, [r2, #59]	@ 0x3b
 80248e2:	9104      	str	r1, [sp, #16]
 80248e4:	f892 103a 	ldrb.w	r1, [r2, #58]	@ 0x3a
 80248e8:	9401      	str	r4, [sp, #4]
 80248ea:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80248ee:	8ed2      	ldrh	r2, [r2, #54]	@ 0x36
 80248f0:	9200      	str	r2, [sp, #0]
 80248f2:	4641      	mov	r1, r8
 80248f4:	2200      	movs	r2, #0
 80248f6:	4638      	mov	r0, r7
 80248f8:	f7ff ff4c 	bl	8024794 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus>
 80248fc:	b006      	add	sp, #24
 80248fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024902:	085b      	lsrs	r3, r3, #1
 8024904:	e7c4      	b.n	8024890 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x78>
 8024906:	461d      	mov	r5, r3
 8024908:	e7c6      	b.n	8024898 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x80>
 802490a:	25ff      	movs	r5, #255	@ 0xff
 802490c:	e7c4      	b.n	8024898 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x80>
 802490e:	8690      	strh	r0, [r2, #52]	@ 0x34
 8024910:	f8a2 a036 	strh.w	sl, [r2, #54]	@ 0x36
 8024914:	2e00      	cmp	r6, #0
 8024916:	d1c3      	bne.n	80248a0 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x88>
 8024918:	2c11      	cmp	r4, #17
 802491a:	d8c6      	bhi.n	80248aa <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x92>
 802491c:	1e60      	subs	r0, r4, #1
 802491e:	b2c0      	uxtb	r0, r0
 8024920:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8024924:	4083      	lsls	r3, r0
 8024926:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 802492a:	e7be      	b.n	80248aa <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x92>
 802492c:	20000314 	.word	0x20000314

08024930 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet>:
 8024930:	6803      	ldr	r3, [r0, #0]
 8024932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024934:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8024936:	8f2b      	ldrh	r3, [r5, #56]	@ 0x38
 8024938:	b087      	sub	sp, #28
 802493a:	468c      	mov	ip, r1
 802493c:	b3a3      	cbz	r3, 80249a8 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x78>
 802493e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8024942:	4293      	cmp	r3, r2
 8024944:	d032      	beq.n	80249ac <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x7c>
 8024946:	2200      	movs	r2, #0
 8024948:	3201      	adds	r2, #1
 802494a:	2b01      	cmp	r3, #1
 802494c:	b2d2      	uxtb	r2, r2
 802494e:	d129      	bne.n	80249a4 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x74>
 8024950:	4b1c      	ldr	r3, [pc, #112]	@ (80249c4 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x94>)
 8024952:	f8d3 40e8 	ldr.w	r4, [r3, #232]	@ 0xe8
 8024956:	f1b4 7f7a 	cmp.w	r4, #65536000	@ 0x3e80000
 802495a:	d229      	bcs.n	80249b0 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x80>
 802495c:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 8024960:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8024964:	fbb4 f3f3 	udiv	r3, r4, r3
 8024968:	b29b      	uxth	r3, r3
 802496a:	d326      	bcc.n	80249ba <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x8a>
 802496c:	2400      	movs	r4, #0
 802496e:	3401      	adds	r4, #1
 8024970:	2b01      	cmp	r3, #1
 8024972:	b2e4      	uxtb	r4, r4
 8024974:	d11f      	bne.n	80249b6 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x86>
 8024976:	8eab      	ldrh	r3, [r5, #52]	@ 0x34
 8024978:	f895 603a 	ldrb.w	r6, [r5, #58]	@ 0x3a
 802497c:	8eef      	ldrh	r7, [r5, #54]	@ 0x36
 802497e:	b1f3      	cbz	r3, 80249be <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x8e>
 8024980:	2f00      	cmp	r7, #0
 8024982:	bf08      	it	eq
 8024984:	2600      	moveq	r6, #0
 8024986:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024988:	9105      	str	r1, [sp, #20]
 802498a:	f895 503b 	ldrb.w	r5, [r5, #59]	@ 0x3b
 802498e:	9700      	str	r7, [sp, #0]
 8024990:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8024994:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8024998:	2200      	movs	r2, #0
 802499a:	4661      	mov	r1, ip
 802499c:	f7ff fefa 	bl	8024794 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus>
 80249a0:	b007      	add	sp, #28
 80249a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80249a4:	085b      	lsrs	r3, r3, #1
 80249a6:	e7cf      	b.n	8024948 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x18>
 80249a8:	461a      	mov	r2, r3
 80249aa:	e7d1      	b.n	8024950 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x20>
 80249ac:	22ff      	movs	r2, #255	@ 0xff
 80249ae:	e7cf      	b.n	8024950 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x20>
 80249b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80249b4:	e7da      	b.n	802496c <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x3c>
 80249b6:	085b      	lsrs	r3, r3, #1
 80249b8:	e7d9      	b.n	802496e <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x3e>
 80249ba:	2400      	movs	r4, #0
 80249bc:	e7db      	b.n	8024976 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x46>
 80249be:	461e      	mov	r6, r3
 80249c0:	e7e1      	b.n	8024986 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x56>
 80249c2:	bf00      	nop
 80249c4:	20000314 	.word	0x20000314

080249c8 <BnrgmConfigModel_SendConfigNetworkTransmitStatus>:
 80249c8:	b570      	push	{r4, r5, r6, lr}
 80249ca:	9c04      	ldr	r4, [sp, #16]
 80249cc:	460e      	mov	r6, r1
 80249ce:	b930      	cbnz	r0, 80249de <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x16>
 80249d0:	4b10      	ldr	r3, [pc, #64]	@ (8024a14 <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x4c>)
 80249d2:	4a11      	ldr	r2, [pc, #68]	@ (8024a18 <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x50>)
 80249d4:	4811      	ldr	r0, [pc, #68]	@ (8024a1c <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x54>)
 80249d6:	f640 111d 	movw	r1, #2333	@ 0x91d
 80249da:	f003 fcff 	bl	80283dc <__assert_func>
 80249de:	2125      	movs	r1, #37	@ 0x25
 80249e0:	7021      	strb	r1, [r4, #0]
 80249e2:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 80249e6:	2500      	movs	r5, #0
 80249e8:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
 80249ec:	7061      	strb	r1, [r4, #1]
 80249ee:	2101      	movs	r1, #1
 80249f0:	7223      	strb	r3, [r4, #8]
 80249f2:	70a5      	strb	r5, [r4, #2]
 80249f4:	70e5      	strb	r5, [r4, #3]
 80249f6:	f884 10a3 	strb.w	r1, [r4, #163]	@ 0xa3
 80249fa:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 80249fe:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 8024a02:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 8024a06:	4623      	mov	r3, r4
 8024a08:	4632      	mov	r2, r6
 8024a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024a0e:	f7fd bd3d 	b.w	802248c <MobleModelSendPacket>
 8024a12:	bf00      	nop
 8024a14:	08030ec9 	.word	0x08030ec9
 8024a18:	080301ca 	.word	0x080301ca
 8024a1c:	08030edb 	.word	0x08030edb

08024a20 <BnrgmConfigModel_ProcessNetworkTransmitSet>:
 8024a20:	b410      	push	{r4}
 8024a22:	6804      	ldr	r4, [r0, #0]
 8024a24:	781b      	ldrb	r3, [r3, #0]
 8024a26:	6a64      	ldr	r4, [r4, #36]	@ 0x24
 8024a28:	f003 0207 	and.w	r2, r3, #7
 8024a2c:	08db      	lsrs	r3, r3, #3
 8024a2e:	72a2      	strb	r2, [r4, #10]
 8024a30:	72e3      	strb	r3, [r4, #11]
 8024a32:	9c02      	ldr	r4, [sp, #8]
 8024a34:	9401      	str	r4, [sp, #4]
 8024a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024a3a:	f7ff bfc5 	b.w	80249c8 <BnrgmConfigModel_SendConfigNetworkTransmitStatus>

08024a3e <BnrgmConfigModel_ProcessNetworkTransmitGet>:
 8024a3e:	b410      	push	{r4}
 8024a40:	6803      	ldr	r3, [r0, #0]
 8024a42:	9c02      	ldr	r4, [sp, #8]
 8024a44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8024a46:	7ad3      	ldrb	r3, [r2, #11]
 8024a48:	7a92      	ldrb	r2, [r2, #10]
 8024a4a:	9401      	str	r4, [sp, #4]
 8024a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024a50:	f7ff bfba 	b.w	80249c8 <BnrgmConfigModel_SendConfigNetworkTransmitStatus>

08024a54 <MobleConfigModel_ProcessDeviceCompositionDataGet>:
 8024a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a58:	ed2d 8b02 	vpush	{d8}
 8024a5c:	6803      	ldr	r3, [r0, #0]
 8024a5e:	b0dd      	sub	sp, #372	@ 0x174
 8024a60:	885a      	ldrh	r2, [r3, #2]
 8024a62:	7f1b      	ldrb	r3, [r3, #28]
 8024a64:	9303      	str	r3, [sp, #12]
 8024a66:	4b7a      	ldr	r3, [pc, #488]	@ (8024c50 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1fc>)
 8024a68:	9206      	str	r2, [sp, #24]
 8024a6a:	f893 40bd 	ldrb.w	r4, [r3, #189]	@ 0xbd
 8024a6e:	f893 20bc 	ldrb.w	r2, [r3, #188]	@ 0xbc
 8024a72:	9007      	str	r0, [sp, #28]
 8024a74:	3c02      	subs	r4, #2
 8024a76:	bf18      	it	ne
 8024a78:	2401      	movne	r4, #1
 8024a7a:	2a02      	cmp	r2, #2
 8024a7c:	f893 20be 	ldrb.w	r2, [r3, #190]	@ 0xbe
 8024a80:	9e69      	ldr	r6, [sp, #420]	@ 0x1a4
 8024a82:	bf18      	it	ne
 8024a84:	f044 0402 	orrne.w	r4, r4, #2
 8024a88:	2a02      	cmp	r2, #2
 8024a8a:	f893 20bf 	ldrb.w	r2, [r3, #191]	@ 0xbf
 8024a8e:	685b      	ldr	r3, [r3, #4]
 8024a90:	bf18      	it	ne
 8024a92:	f044 0404 	orrne.w	r4, r4, #4
 8024a96:	699b      	ldr	r3, [r3, #24]
 8024a98:	2a02      	cmp	r2, #2
 8024a9a:	a80a      	add	r0, sp, #40	@ 0x28
 8024a9c:	bf18      	it	ne
 8024a9e:	f044 0408 	orrne.w	r4, r4, #8
 8024aa2:	ee08 1a10 	vmov	s16, r1
 8024aa6:	4798      	blx	r3
 8024aa8:	2202      	movs	r2, #2
 8024aaa:	f89d 1028 	ldrb.w	r1, [sp, #40]	@ 0x28
 8024aae:	a81d      	add	r0, sp, #116	@ 0x74
 8024ab0:	f7f6 fe06 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8024ab4:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
 8024ab8:	f10d 0076 	add.w	r0, sp, #118	@ 0x76
 8024abc:	f7f6 fe00 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8024ac0:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 8024ac4:	a81e      	add	r0, sp, #120	@ 0x78
 8024ac6:	f7f6 fdfb 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8024aca:	2114      	movs	r1, #20
 8024acc:	f10d 007a 	add.w	r0, sp, #122	@ 0x7a
 8024ad0:	f7f6 fdf6 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8024ad4:	4621      	mov	r1, r4
 8024ad6:	a81f      	add	r0, sp, #124	@ 0x7c
 8024ad8:	f7f6 fdf2 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8024adc:	9b03      	ldr	r3, [sp, #12]
 8024ade:	005b      	lsls	r3, r3, #1
 8024ae0:	3305      	adds	r3, #5
 8024ae2:	f04f 0a00 	mov.w	sl, #0
 8024ae6:	b2db      	uxtb	r3, r3
 8024ae8:	9308      	str	r3, [sp, #32]
 8024aea:	46d0      	mov	r8, sl
 8024aec:	4654      	mov	r4, sl
 8024aee:	9a03      	ldr	r2, [sp, #12]
 8024af0:	fa5f f38a 	uxtb.w	r3, sl
 8024af4:	4293      	cmp	r3, r2
 8024af6:	d321      	bcc.n	8024b3c <MobleConfigModel_ProcessDeviceCompositionDataGet+0xe8>
 8024af8:	4a56      	ldr	r2, [pc, #344]	@ (8024c54 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x200>)
 8024afa:	f892 3a38 	ldrb.w	r3, [r2, #2616]	@ 0xa38
 8024afe:	3b02      	subs	r3, #2
 8024b00:	f882 3a38 	strb.w	r3, [r2, #2616]	@ 0xa38
 8024b04:	2300      	movs	r3, #0
 8024b06:	2202      	movs	r2, #2
 8024b08:	7032      	strb	r2, [r6, #0]
 8024b0a:	7073      	strb	r3, [r6, #1]
 8024b0c:	4622      	mov	r2, r4
 8024b0e:	70b3      	strb	r3, [r6, #2]
 8024b10:	70f3      	strb	r3, [r6, #3]
 8024b12:	7233      	strb	r3, [r6, #8]
 8024b14:	a91d      	add	r1, sp, #116	@ 0x74
 8024b16:	f106 0009 	add.w	r0, r6, #9
 8024b1a:	3401      	adds	r4, #1
 8024b1c:	f004 fbd7 	bl	80292ce <memcpy>
 8024b20:	ee18 2a10 	vmov	r2, s16
 8024b24:	9807      	ldr	r0, [sp, #28]
 8024b26:	f8c6 40a3 	str.w	r4, [r6, #163]	@ 0xa3
 8024b2a:	4633      	mov	r3, r6
 8024b2c:	2101      	movs	r1, #1
 8024b2e:	f7fd fcad 	bl	802248c <MobleModelSendPacket>
 8024b32:	b05d      	add	sp, #372	@ 0x174
 8024b34:	ecbd 8b02 	vpop	{d8}
 8024b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b3c:	4619      	mov	r1, r3
 8024b3e:	a80c      	add	r0, sp, #48	@ 0x30
 8024b40:	9304      	str	r3, [sp, #16]
 8024b42:	f7f7 f80b 	bl	801bb5c <MobleApplicationGetSigModelList>
 8024b46:	9b04      	ldr	r3, [sp, #16]
 8024b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8024b4a:	4605      	mov	r5, r0
 8024b4c:	4619      	mov	r1, r3
 8024b4e:	a812      	add	r0, sp, #72	@ 0x48
 8024b50:	f7f7 f826 	bl	801bba0 <MobleApplicationGetVendorModelList>
 8024b54:	1c69      	adds	r1, r5, #1
 8024b56:	9004      	str	r0, [sp, #16]
 8024b58:	d078      	beq.n	8024c4c <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1f8>
 8024b5a:	1c42      	adds	r2, r0, #1
 8024b5c:	d076      	beq.n	8024c4c <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1f8>
 8024b5e:	2202      	movs	r2, #2
 8024b60:	fb12 5300 	smlabb	r3, r2, r0, r5
 8024b64:	f89d 9010 	ldrb.w	r9, [sp, #16]
 8024b68:	9305      	str	r3, [sp, #20]
 8024b6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024b6c:	fa59 f785 	uxtab	r7, r9, r5
 8024b70:	fa5f fb85 	uxtb.w	fp, r5
 8024b74:	b2ff      	uxtb	r7, r7
 8024b76:	2b00      	cmp	r3, #0
 8024b78:	d14d      	bne.n	8024c16 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1c2>
 8024b7a:	9a08      	ldr	r2, [sp, #32]
 8024b7c:	9905      	ldr	r1, [sp, #20]
 8024b7e:	1854      	adds	r4, r2, r1
 8024b80:	0064      	lsls	r4, r4, #1
 8024b82:	9a03      	ldr	r2, [sp, #12]
 8024b84:	9201      	str	r2, [sp, #4]
 8024b86:	9a06      	ldr	r2, [sp, #24]
 8024b88:	9200      	str	r2, [sp, #0]
 8024b8a:	4639      	mov	r1, r7
 8024b8c:	465a      	mov	r2, fp
 8024b8e:	a80c      	add	r0, sp, #48	@ 0x30
 8024b90:	9309      	str	r3, [sp, #36]	@ 0x24
 8024b92:	f7f7 f827 	bl	801bbe4 <MobleApplicationUpdateSigModelList>
 8024b96:	9b03      	ldr	r3, [sp, #12]
 8024b98:	9301      	str	r3, [sp, #4]
 8024b9a:	9b06      	ldr	r3, [sp, #24]
 8024b9c:	9300      	str	r3, [sp, #0]
 8024b9e:	464a      	mov	r2, r9
 8024ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ba2:	4639      	mov	r1, r7
 8024ba4:	a812      	add	r0, sp, #72	@ 0x48
 8024ba6:	f7f7 f85b 	bl	801bc60 <MobleApplicationUpdateVendorModelList>
 8024baa:	ab1d      	add	r3, sp, #116	@ 0x74
 8024bac:	f108 000a 	add.w	r0, r8, #10
 8024bb0:	4418      	add	r0, r3
 8024bb2:	2202      	movs	r2, #2
 8024bb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8024bb8:	f7f6 fd82 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8024bbc:	f508 73b8 	add.w	r3, r8, #368	@ 0x170
 8024bc0:	446b      	add	r3, sp
 8024bc2:	b2e4      	uxtb	r4, r4
 8024bc4:	f803 bcf0 	strb.w	fp, [r3, #-240]
 8024bc8:	f803 9cef 	strb.w	r9, [r3, #-239]
 8024bcc:	f108 0b0e 	add.w	fp, r8, #14
 8024bd0:	f04f 0900 	mov.w	r9, #0
 8024bd4:	fa5f f389 	uxtb.w	r3, r9
 8024bd8:	42ab      	cmp	r3, r5
 8024bda:	f109 0901 	add.w	r9, r9, #1
 8024bde:	db1e      	blt.n	8024c1e <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1ca>
 8024be0:	f04f 0900 	mov.w	r9, #0
 8024be4:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8024be8:	3507      	adds	r5, #7
 8024bea:	9a04      	ldr	r2, [sp, #16]
 8024bec:	fa5f f389 	uxtb.w	r3, r9
 8024bf0:	4293      	cmp	r3, r2
 8024bf2:	f109 0901 	add.w	r9, r9, #1
 8024bf6:	db1d      	blt.n	8024c34 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1e0>
 8024bf8:	9b05      	ldr	r3, [sp, #20]
 8024bfa:	4a16      	ldr	r2, [pc, #88]	@ (8024c54 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x200>)
 8024bfc:	3302      	adds	r3, #2
 8024bfe:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8024c02:	fa5f f883 	uxtb.w	r8, r3
 8024c06:	f892 3a38 	ldrb.w	r3, [r2, #2616]	@ 0xa38
 8024c0a:	441f      	add	r7, r3
 8024c0c:	f882 7a38 	strb.w	r7, [r2, #2616]	@ 0xa38
 8024c10:	f10a 0a01 	add.w	sl, sl, #1
 8024c14:	e76b      	b.n	8024aee <MobleConfigModel_ProcessDeviceCompositionDataGet+0x9a>
 8024c16:	9a05      	ldr	r2, [sp, #20]
 8024c18:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8024c1c:	e7b1      	b.n	8024b82 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x12e>
 8024c1e:	a90c      	add	r1, sp, #48	@ 0x30
 8024c20:	eb0b 0043 	add.w	r0, fp, r3, lsl #1
 8024c24:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8024c28:	ab1d      	add	r3, sp, #116	@ 0x74
 8024c2a:	2202      	movs	r2, #2
 8024c2c:	4418      	add	r0, r3
 8024c2e:	f7f6 fd47 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8024c32:	e7cf      	b.n	8024bd4 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x180>
 8024c34:	eb05 0043 	add.w	r0, r5, r3, lsl #1
 8024c38:	f85b 1023 	ldr.w	r1, [fp, r3, lsl #2]
 8024c3c:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 8024c40:	ab1d      	add	r3, sp, #116	@ 0x74
 8024c42:	2204      	movs	r2, #4
 8024c44:	4418      	add	r0, r3
 8024c46:	f7f6 fd3b 	bl	801b6c0 <MobleOutputStreamPutLittleEndian>
 8024c4a:	e7ce      	b.n	8024bea <MobleConfigModel_ProcessDeviceCompositionDataGet+0x196>
 8024c4c:	2002      	movs	r0, #2
 8024c4e:	e770      	b.n	8024b32 <MobleConfigModel_ProcessDeviceCompositionDataGet+0xde>
 8024c50:	20000314 	.word	0x20000314
 8024c54:	20002504 	.word	0x20002504

08024c58 <BnrgmHealthModelPublish_TimerCallback>:
 8024c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c5c:	f8d1 8000 	ldr.w	r8, [r1]
 8024c60:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 8024c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8024c68:	b088      	sub	sp, #32
 8024c6a:	460d      	mov	r5, r1
 8024c6c:	2b00      	cmp	r3, #0
 8024c6e:	d062      	beq.n	8024d36 <BnrgmHealthModelPublish_TimerCallback+0xde>
 8024c70:	4f32      	ldr	r7, [pc, #200]	@ (8024d3c <BnrgmHealthModelPublish_TimerCallback+0xe4>)
 8024c72:	20a7      	movs	r0, #167	@ 0xa7
 8024c74:	f7f5 fdfc 	bl	801a870 <MobleMemAlloc>
 8024c78:	f8b7 610c 	ldrh.w	r6, [r7, #268]	@ 0x10c
 8024c7c:	4604      	mov	r4, r0
 8024c7e:	4630      	mov	r0, r6
 8024c80:	f7f4 fdc0 	bl	8019804 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 8024c84:	4601      	mov	r1, r0
 8024c86:	f8ad 0012 	strh.w	r0, [sp, #18]
 8024c8a:	4630      	mov	r0, r6
 8024c8c:	f8ad 600e 	strh.w	r6, [sp, #14]
 8024c90:	f7f5 fa2a 	bl	801a0e8 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 8024c94:	f88d 000c 	strb.w	r0, [sp, #12]
 8024c98:	4608      	mov	r0, r1
 8024c9a:	f7f5 fa0b 	bl	801a0b4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8024c9e:	b2c0      	uxtb	r0, r0
 8024ca0:	f88d 0010 	strb.w	r0, [sp, #16]
 8024ca4:	f88d 0014 	strb.w	r0, [sp, #20]
 8024ca8:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 8024cac:	f8ad 300a 	strh.w	r3, [sp, #10]
 8024cb0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8024cb4:	4e22      	ldr	r6, [pc, #136]	@ (8024d40 <BnrgmHealthModelPublish_TimerCallback+0xe8>)
 8024cb6:	f8ad 3008 	strh.w	r3, [sp, #8]
 8024cba:	b36c      	cbz	r4, 8024d18 <BnrgmHealthModelPublish_TimerCallback+0xc0>
 8024cbc:	8873      	ldrh	r3, [r6, #2]
 8024cbe:	f8a4 3009 	strh.w	r3, [r4, #9]
 8024cc2:	682b      	ldr	r3, [r5, #0]
 8024cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024cc6:	2200      	movs	r2, #0
 8024cc8:	2104      	movs	r1, #4
 8024cca:	7021      	strb	r1, [r4, #0]
 8024ccc:	7062      	strb	r2, [r4, #1]
 8024cce:	70a2      	strb	r2, [r4, #2]
 8024cd0:	70e2      	strb	r2, [r4, #3]
 8024cd2:	7222      	strb	r2, [r4, #8]
 8024cd4:	f103 014b 	add.w	r1, r3, #75	@ 0x4b
 8024cd8:	f103 0753 	add.w	r7, r3, #83	@ 0x53
 8024cdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8024ce0:	b128      	cbz	r0, 8024cee <BnrgmHealthModelPublish_TimerCallback+0x96>
 8024ce2:	eb04 0c02 	add.w	ip, r4, r2
 8024ce6:	3201      	adds	r2, #1
 8024ce8:	f88c 000b 	strb.w	r0, [ip, #11]
 8024cec:	b2d2      	uxtb	r2, r2
 8024cee:	428f      	cmp	r7, r1
 8024cf0:	d1f4      	bne.n	8024cdc <BnrgmHealthModelPublish_TimerCallback+0x84>
 8024cf2:	3203      	adds	r2, #3
 8024cf4:	f8c4 20a3 	str.w	r2, [r4, #163]	@ 0xa3
 8024cf8:	f893 1063 	ldrb.w	r1, [r3, #99]	@ 0x63
 8024cfc:	3900      	subs	r1, #0
 8024cfe:	bf18      	it	ne
 8024d00:	2101      	movne	r1, #1
 8024d02:	0149      	lsls	r1, r1, #5
 8024d04:	4623      	mov	r3, r4
 8024d06:	466a      	mov	r2, sp
 8024d08:	f041 0101 	orr.w	r1, r1, #1
 8024d0c:	4628      	mov	r0, r5
 8024d0e:	f7fd fbbd 	bl	802248c <MobleModelSendPacket>
 8024d12:	4620      	mov	r0, r4
 8024d14:	f7f5 fe36 	bl	801a984 <MobleMemFree>
 8024d18:	f896 3024 	ldrb.w	r3, [r6, #36]	@ 0x24
 8024d1c:	3b01      	subs	r3, #1
 8024d1e:	b2db      	uxtb	r3, r3
 8024d20:	f886 3024 	strb.w	r3, [r6, #36]	@ 0x24
 8024d24:	b93b      	cbnz	r3, 8024d36 <BnrgmHealthModelPublish_TimerCallback+0xde>
 8024d26:	682b      	ldr	r3, [r5, #0]
 8024d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024d2a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8024d2c:	f7f2 fcb6 	bl	801769c <MoblePalTimerDestroy>
 8024d30:	2308      	movs	r3, #8
 8024d32:	f886 3024 	strb.w	r3, [r6, #36]	@ 0x24
 8024d36:	b008      	add	sp, #32
 8024d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024d3c:	20000314 	.word	0x20000314
 8024d40:	20000008 	.word	0x20000008

08024d44 <BnrgmHealthModel_ProcessPeriodGet>:
 8024d44:	b430      	push	{r4, r5}
 8024d46:	460a      	mov	r2, r1
 8024d48:	6801      	ldr	r1, [r0, #0]
 8024d4a:	9b03      	ldr	r3, [sp, #12]
 8024d4c:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8024d4e:	2537      	movs	r5, #55	@ 0x37
 8024d50:	f891 106d 	ldrb.w	r1, [r1, #109]	@ 0x6d
 8024d54:	7219      	strb	r1, [r3, #8]
 8024d56:	2400      	movs	r4, #0
 8024d58:	701d      	strb	r5, [r3, #0]
 8024d5a:	2101      	movs	r1, #1
 8024d5c:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 8024d60:	705d      	strb	r5, [r3, #1]
 8024d62:	709c      	strb	r4, [r3, #2]
 8024d64:	70dc      	strb	r4, [r3, #3]
 8024d66:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 8024d6a:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 8024d6e:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 8024d72:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 8024d76:	bc30      	pop	{r4, r5}
 8024d78:	f7fd bb88 	b.w	802248c <MobleModelSendPacket>

08024d7c <BnrgmHealthModel_ProcessAttentionGet>:
 8024d7c:	b430      	push	{r4, r5}
 8024d7e:	460a      	mov	r2, r1
 8024d80:	6801      	ldr	r1, [r0, #0]
 8024d82:	9b03      	ldr	r3, [sp, #12]
 8024d84:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8024d86:	2507      	movs	r5, #7
 8024d88:	f891 106e 	ldrb.w	r1, [r1, #110]	@ 0x6e
 8024d8c:	7219      	strb	r1, [r3, #8]
 8024d8e:	2400      	movs	r4, #0
 8024d90:	701d      	strb	r5, [r3, #0]
 8024d92:	2101      	movs	r1, #1
 8024d94:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 8024d98:	705d      	strb	r5, [r3, #1]
 8024d9a:	709c      	strb	r4, [r3, #2]
 8024d9c:	70dc      	strb	r4, [r3, #3]
 8024d9e:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 8024da2:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 8024da6:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 8024daa:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 8024dae:	bc30      	pop	{r4, r5}
 8024db0:	f7fd bb6c 	b.w	802248c <MobleModelSendPacket>

08024db4 <MobleConfigModel_ProcessRelayGet>:
 8024db4:	b4f0      	push	{r4, r5, r6, r7}
 8024db6:	460a      	mov	r2, r1
 8024db8:	6801      	ldr	r1, [r0, #0]
 8024dba:	9b05      	ldr	r3, [sp, #20]
 8024dbc:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8024dbe:	7b61      	ldrb	r1, [r4, #13]
 8024dc0:	7b25      	ldrb	r5, [r4, #12]
 8024dc2:	7c66      	ldrb	r6, [r4, #17]
 8024dc4:	721e      	strb	r6, [r3, #8]
 8024dc6:	2728      	movs	r7, #40	@ 0x28
 8024dc8:	2400      	movs	r4, #0
 8024dca:	ea45 05c1 	orr.w	r5, r5, r1, lsl #3
 8024dce:	701f      	strb	r7, [r3, #0]
 8024dd0:	2102      	movs	r1, #2
 8024dd2:	f06f 077f 	mvn.w	r7, #127	@ 0x7f
 8024dd6:	705f      	strb	r7, [r3, #1]
 8024dd8:	709c      	strb	r4, [r3, #2]
 8024dda:	70dc      	strb	r4, [r3, #3]
 8024ddc:	725d      	strb	r5, [r3, #9]
 8024dde:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 8024de2:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 8024de6:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 8024dea:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 8024dee:	2101      	movs	r1, #1
 8024df0:	bcf0      	pop	{r4, r5, r6, r7}
 8024df2:	f7fd bb4b 	b.w	802248c <MobleModelSendPacket>
	...

08024df8 <MobleConfigModel_ProcessNodeIdentityGet>:
 8024df8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8024dfc:	4607      	mov	r7, r0
 8024dfe:	4618      	mov	r0, r3
 8024e00:	f7f2 fa63 	bl	80172ca <MobleConfigModelGetNetIdx>
 8024e04:	4688      	mov	r8, r1
 8024e06:	4606      	mov	r6, r0
 8024e08:	f7f3 fdda 	bl	80189c0 <MoblePalCryptoHasNetworkKey>
 8024e0c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8024e0e:	4605      	mov	r5, r0
 8024e10:	b170      	cbz	r0, 8024e30 <MobleConfigModel_ProcessNodeIdentityGet+0x38>
 8024e12:	4630      	mov	r0, r6
 8024e14:	f7f3 fe2e 	bl	8018a74 <MoblePalCryptoGetNodeIdntyState>
 8024e18:	2300      	movs	r3, #0
 8024e1a:	4605      	mov	r5, r0
 8024e1c:	f8ad 6006 	strh.w	r6, [sp, #6]
 8024e20:	b947      	cbnz	r7, 8024e34 <MobleConfigModel_ProcessNodeIdentityGet+0x3c>
 8024e22:	4b16      	ldr	r3, [pc, #88]	@ (8024e7c <MobleConfigModel_ProcessNodeIdentityGet+0x84>)
 8024e24:	4a16      	ldr	r2, [pc, #88]	@ (8024e80 <MobleConfigModel_ProcessNodeIdentityGet+0x88>)
 8024e26:	4817      	ldr	r0, [pc, #92]	@ (8024e84 <MobleConfigModel_ProcessNodeIdentityGet+0x8c>)
 8024e28:	f640 113a 	movw	r1, #2362	@ 0x93a
 8024e2c:	f003 fad6 	bl	80283dc <__assert_func>
 8024e30:	2304      	movs	r3, #4
 8024e32:	e7f3      	b.n	8024e1c <MobleConfigModel_ProcessNodeIdentityGet+0x24>
 8024e34:	2248      	movs	r2, #72	@ 0x48
 8024e36:	2600      	movs	r6, #0
 8024e38:	7022      	strb	r2, [r4, #0]
 8024e3a:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8024e3e:	7062      	strb	r2, [r4, #1]
 8024e40:	7223      	strb	r3, [r4, #8]
 8024e42:	f104 0209 	add.w	r2, r4, #9
 8024e46:	f10d 0306 	add.w	r3, sp, #6
 8024e4a:	70a6      	strb	r6, [r4, #2]
 8024e4c:	70e6      	strb	r6, [r4, #3]
 8024e4e:	2101      	movs	r1, #1
 8024e50:	4630      	mov	r0, r6
 8024e52:	f7f2 fa41 	bl	80172d8 <MobleConfigModelPutKeyIdxs>
 8024e56:	2304      	movs	r3, #4
 8024e58:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8024e5c:	4642      	mov	r2, r8
 8024e5e:	4623      	mov	r3, r4
 8024e60:	4638      	mov	r0, r7
 8024e62:	72e5      	strb	r5, [r4, #11]
 8024e64:	f884 60a4 	strb.w	r6, [r4, #164]	@ 0xa4
 8024e68:	f884 60a5 	strb.w	r6, [r4, #165]	@ 0xa5
 8024e6c:	f884 60a6 	strb.w	r6, [r4, #166]	@ 0xa6
 8024e70:	b002      	add	sp, #8
 8024e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024e76:	f7fd bb09 	b.w	802248c <MobleModelSendPacket>
 8024e7a:	bf00      	nop
 8024e7c:	08030ec9 	.word	0x08030ec9
 8024e80:	0802feb8 	.word	0x0802feb8
 8024e84:	08030edb 	.word	0x08030edb

08024e88 <MobleConfigModel_ProcessKeyRefreshPhaseGet>:
 8024e88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8024e8c:	4606      	mov	r6, r0
 8024e8e:	4618      	mov	r0, r3
 8024e90:	f7f2 fa1b 	bl	80172ca <MobleConfigModelGetNetIdx>
 8024e94:	460f      	mov	r7, r1
 8024e96:	4601      	mov	r1, r0
 8024e98:	f7f5 f90c 	bl	801a0b4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8024e9c:	6833      	ldr	r3, [r6, #0]
 8024e9e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8024ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024ea2:	f8ad 1006 	strh.w	r1, [sp, #6]
 8024ea6:	1e02      	subs	r2, r0, #0
 8024ea8:	bfb8      	it	lt
 8024eaa:	2200      	movlt	r2, #0
 8024eac:	4413      	add	r3, r2
 8024eae:	f04f 0500 	mov.w	r5, #0
 8024eb2:	f893 8014 	ldrb.w	r8, [r3, #20]
 8024eb6:	70a5      	strb	r5, [r4, #2]
 8024eb8:	f04f 0317 	mov.w	r3, #23
 8024ebc:	bfb4      	ite	lt
 8024ebe:	f04f 0c04 	movlt.w	ip, #4
 8024ec2:	f04f 0c00 	movge.w	ip, #0
 8024ec6:	7023      	strb	r3, [r4, #0]
 8024ec8:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8024ecc:	7063      	strb	r3, [r4, #1]
 8024ece:	f104 0209 	add.w	r2, r4, #9
 8024ed2:	f10d 0306 	add.w	r3, sp, #6
 8024ed6:	70e5      	strb	r5, [r4, #3]
 8024ed8:	f884 c008 	strb.w	ip, [r4, #8]
 8024edc:	2101      	movs	r1, #1
 8024ede:	4628      	mov	r0, r5
 8024ee0:	f7f2 f9fa 	bl	80172d8 <MobleConfigModelPutKeyIdxs>
 8024ee4:	2304      	movs	r3, #4
 8024ee6:	f884 30a3 	strb.w	r3, [r4, #163]	@ 0xa3
 8024eea:	463a      	mov	r2, r7
 8024eec:	4623      	mov	r3, r4
 8024eee:	4630      	mov	r0, r6
 8024ef0:	f884 800b 	strb.w	r8, [r4, #11]
 8024ef4:	f884 50a4 	strb.w	r5, [r4, #164]	@ 0xa4
 8024ef8:	f884 50a5 	strb.w	r5, [r4, #165]	@ 0xa5
 8024efc:	f884 50a6 	strb.w	r5, [r4, #166]	@ 0xa6
 8024f00:	b002      	add	sp, #8
 8024f02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024f06:	f7fd bac1 	b.w	802248c <MobleModelSendPacket>

08024f0a <MobleConfigModel_ProcessDefaultTTLGet>:
 8024f0a:	b430      	push	{r4, r5}
 8024f0c:	460a      	mov	r2, r1
 8024f0e:	6801      	ldr	r1, [r0, #0]
 8024f10:	9b03      	ldr	r3, [sp, #12]
 8024f12:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8024f14:	250e      	movs	r5, #14
 8024f16:	7a49      	ldrb	r1, [r1, #9]
 8024f18:	7219      	strb	r1, [r3, #8]
 8024f1a:	2400      	movs	r4, #0
 8024f1c:	701d      	strb	r5, [r3, #0]
 8024f1e:	2101      	movs	r1, #1
 8024f20:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 8024f24:	705d      	strb	r5, [r3, #1]
 8024f26:	709c      	strb	r4, [r3, #2]
 8024f28:	70dc      	strb	r4, [r3, #3]
 8024f2a:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 8024f2e:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 8024f32:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 8024f36:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 8024f3a:	bc30      	pop	{r4, r5}
 8024f3c:	f7fd baa6 	b.w	802248c <MobleModelSendPacket>

08024f40 <MobleConfigModel_ProcessBeaconGet>:
 8024f40:	b570      	push	{r4, r5, r6, lr}
 8024f42:	460a      	mov	r2, r1
 8024f44:	4910      	ldr	r1, [pc, #64]	@ (8024f88 <MobleConfigModel_ProcessBeaconGet+0x48>)
 8024f46:	9b05      	ldr	r3, [sp, #20]
 8024f48:	f891 10ba 	ldrb.w	r1, [r1, #186]	@ 0xba
 8024f4c:	b930      	cbnz	r0, 8024f5c <MobleConfigModel_ProcessBeaconGet+0x1c>
 8024f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8024f8c <MobleConfigModel_ProcessBeaconGet+0x4c>)
 8024f50:	4a0f      	ldr	r2, [pc, #60]	@ (8024f90 <MobleConfigModel_ProcessBeaconGet+0x50>)
 8024f52:	4810      	ldr	r0, [pc, #64]	@ (8024f94 <MobleConfigModel_ProcessBeaconGet+0x54>)
 8024f54:	f240 7165 	movw	r1, #1893	@ 0x765
 8024f58:	f003 fa40 	bl	80283dc <__assert_func>
 8024f5c:	250b      	movs	r5, #11
 8024f5e:	2400      	movs	r4, #0
 8024f60:	701d      	strb	r5, [r3, #0]
 8024f62:	7219      	strb	r1, [r3, #8]
 8024f64:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 8024f68:	2101      	movs	r1, #1
 8024f6a:	705d      	strb	r5, [r3, #1]
 8024f6c:	709c      	strb	r4, [r3, #2]
 8024f6e:	70dc      	strb	r4, [r3, #3]
 8024f70:	f883 40a4 	strb.w	r4, [r3, #164]	@ 0xa4
 8024f74:	f883 40a5 	strb.w	r4, [r3, #165]	@ 0xa5
 8024f78:	f883 40a6 	strb.w	r4, [r3, #166]	@ 0xa6
 8024f7c:	f883 10a3 	strb.w	r1, [r3, #163]	@ 0xa3
 8024f80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024f84:	f7fd ba82 	b.w	802248c <MobleModelSendPacket>
 8024f88:	20000314 	.word	0x20000314
 8024f8c:	08030ec9 	.word	0x08030ec9
 8024f90:	080301fb 	.word	0x080301fb
 8024f94:	08030edb 	.word	0x08030edb

08024f98 <MobleBluemeshModelReadElement>:
 8024f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024f9c:	f04f 0800 	mov.w	r8, #0
 8024fa0:	b08c      	sub	sp, #48	@ 0x30
 8024fa2:	4607      	mov	r7, r0
 8024fa4:	460d      	mov	r5, r1
 8024fa6:	4616      	mov	r6, r2
 8024fa8:	4641      	mov	r1, r8
 8024faa:	2228      	movs	r2, #40	@ 0x28
 8024fac:	a802      	add	r0, sp, #8
 8024fae:	461c      	mov	r4, r3
 8024fb0:	f8cd 8000 	str.w	r8, [sp]
 8024fb4:	f88d 8004 	strb.w	r8, [sp, #4]
 8024fb8:	f004 f8f8 	bl	80291ac <memset>
 8024fbc:	b38f      	cbz	r7, 8025022 <MobleBluemeshModelReadElement+0x8a>
 8024fbe:	f004 030f 	and.w	r3, r4, #15
 8024fc2:	f443 5343 	orr.w	r3, r3, #12480	@ 0x30c0
 8024fc6:	f006 0601 	and.w	r6, r6, #1
 8024fca:	f043 0310 	orr.w	r3, r3, #16
 8024fce:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 8024fd2:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
 8024fd6:	f10d 0003 	add.w	r0, sp, #3
 8024fda:	f8ad 3000 	strh.w	r3, [sp]
 8024fde:	f88d 8002 	strb.w	r8, [sp, #2]
 8024fe2:	f7f5 fdf3 	bl	801abcc <MobleOutputStreamPutArray>
 8024fe6:	88ab      	ldrh	r3, [r5, #4]
 8024fe8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024fec:	88eb      	ldrh	r3, [r5, #6]
 8024fee:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024ff2:	7aeb      	ldrb	r3, [r5, #11]
 8024ff4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8024ff8:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 8024ffc:	7a6b      	ldrb	r3, [r5, #9]
 8024ffe:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8025002:	f10d 0303 	add.w	r3, sp, #3
 8025006:	466c      	mov	r4, sp
 8025008:	4418      	add	r0, r3
 802500a:	1b03      	subs	r3, r0, r4
 802500c:	4622      	mov	r2, r4
 802500e:	a902      	add	r1, sp, #8
 8025010:	4638      	mov	r0, r7
 8025012:	f7fd f9ad 	bl	8022370 <MobleApplicationSendPacket>
 8025016:	2801      	cmp	r0, #1
 8025018:	bf98      	it	ls
 802501a:	4640      	movls	r0, r8
 802501c:	b00c      	add	sp, #48	@ 0x30
 802501e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025022:	2003      	movs	r0, #3
 8025024:	e7fa      	b.n	802501c <MobleBluemeshModelReadElement+0x84>
	...

08025028 <MobleLibraryRequestData>:
 8025028:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802502a:	4e0e      	ldr	r6, [pc, #56]	@ (8025064 <MobleLibraryRequestData+0x3c>)
 802502c:	4605      	mov	r5, r0
 802502e:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	@ 0x6f0
 8025032:	b1a8      	cbz	r0, 8025060 <MobleLibraryRequestData+0x38>
 8025034:	88ac      	ldrh	r4, [r5, #4]
 8025036:	b19c      	cbz	r4, 8025060 <MobleLibraryRequestData+0x38>
 8025038:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 802503c:	b2a4      	uxth	r4, r4
 802503e:	2cfb      	cmp	r4, #251	@ 0xfb
 8025040:	d90e      	bls.n	8025060 <MobleLibraryRequestData+0x38>
 8025042:	2a10      	cmp	r2, #16
 8025044:	d80c      	bhi.n	8025060 <MobleLibraryRequestData+0x38>
 8025046:	f896 46b4 	ldrb.w	r4, [r6, #1716]	@ 0x6b4
 802504a:	b14c      	cbz	r4, 8025060 <MobleLibraryRequestData+0x38>
 802504c:	9c06      	ldr	r4, [sp, #24]
 802504e:	e9cd 3400 	strd	r3, r4, [sp]
 8025052:	4613      	mov	r3, r2
 8025054:	460a      	mov	r2, r1
 8025056:	4629      	mov	r1, r5
 8025058:	f7ff ff9e 	bl	8024f98 <MobleBluemeshModelReadElement>
 802505c:	b002      	add	sp, #8
 802505e:	bd70      	pop	{r4, r5, r6, pc}
 8025060:	2002      	movs	r0, #2
 8025062:	e7fb      	b.n	802505c <MobleLibraryRequestData+0x34>
 8025064:	20002504 	.word	0x20002504

08025068 <BLEMesh_ReadRemoteData>:
 8025068:	b507      	push	{r0, r1, r2, lr}
 802506a:	9300      	str	r3, [sp, #0]
 802506c:	4613      	mov	r3, r2
 802506e:	460a      	mov	r2, r1
 8025070:	2101      	movs	r1, #1
 8025072:	f7ff ffd9 	bl	8025028 <MobleLibraryRequestData>
 8025076:	b003      	add	sp, #12
 8025078:	f85d fb04 	ldr.w	pc, [sp], #4

0802507c <MobleBluemeshModelWriteElement>:
 802507c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025080:	461d      	mov	r5, r3
 8025082:	4b2c      	ldr	r3, [pc, #176]	@ (8025134 <MobleBluemeshModelWriteElement+0xb8>)
 8025084:	f8b3 994e 	ldrh.w	r9, [r3, #2382]	@ 0x94e
 8025088:	b08b      	sub	sp, #44	@ 0x2c
 802508a:	4606      	mov	r6, r0
 802508c:	4648      	mov	r0, r9
 802508e:	4688      	mov	r8, r1
 8025090:	4617      	mov	r7, r2
 8025092:	e9dd ab15 	ldrd	sl, fp, [sp, #84]	@ 0x54
 8025096:	f7f5 fbeb 	bl	801a870 <MobleMemAlloc>
 802509a:	2228      	movs	r2, #40	@ 0x28
 802509c:	4604      	mov	r4, r0
 802509e:	2100      	movs	r1, #0
 80250a0:	4668      	mov	r0, sp
 80250a2:	f004 f883 	bl	80291ac <memset>
 80250a6:	2c00      	cmp	r4, #0
 80250a8:	d042      	beq.n	8025130 <MobleBluemeshModelWriteElement+0xb4>
 80250aa:	b14e      	cbz	r6, 80250c0 <MobleBluemeshModelWriteElement+0x44>
 80250ac:	f1ba 0f00 	cmp.w	sl, #0
 80250b0:	d006      	beq.n	80250c0 <MobleBluemeshModelWriteElement+0x44>
 80250b2:	f1bb 0f00 	cmp.w	fp, #0
 80250b6:	d003      	beq.n	80250c0 <MobleBluemeshModelWriteElement+0x44>
 80250b8:	f1a9 0904 	sub.w	r9, r9, #4
 80250bc:	45d9      	cmp	r9, fp
 80250be:	d207      	bcs.n	80250d0 <MobleBluemeshModelWriteElement+0x54>
 80250c0:	4620      	mov	r0, r4
 80250c2:	f7f5 fc5f 	bl	801a984 <MobleMemFree>
 80250c6:	2503      	movs	r5, #3
 80250c8:	4628      	mov	r0, r5
 80250ca:	b00b      	add	sp, #44	@ 0x2c
 80250cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250d0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80250d4:	016d      	lsls	r5, r5, #5
 80250d6:	f003 030f 	and.w	r3, r3, #15
 80250da:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80250de:	f005 0520 	and.w	r5, r5, #32
 80250e2:	431d      	orrs	r5, r3
 80250e4:	7025      	strb	r5, [r4, #0]
 80250e6:	2330      	movs	r3, #48	@ 0x30
 80250e8:	1ce5      	adds	r5, r4, #3
 80250ea:	f04f 0900 	mov.w	r9, #0
 80250ee:	7063      	strb	r3, [r4, #1]
 80250f0:	465a      	mov	r2, fp
 80250f2:	4651      	mov	r1, sl
 80250f4:	4628      	mov	r0, r5
 80250f6:	f884 9002 	strb.w	r9, [r4, #2]
 80250fa:	f7f5 fd67 	bl	801abcc <MobleOutputStreamPutArray>
 80250fe:	6833      	ldr	r3, [r6, #0]
 8025100:	f8ad 8016 	strh.w	r8, [sp, #22]
 8025104:	885b      	ldrh	r3, [r3, #2]
 8025106:	4428      	add	r0, r5
 8025108:	441f      	add	r7, r3
 802510a:	4622      	mov	r2, r4
 802510c:	1b03      	subs	r3, r0, r4
 802510e:	4669      	mov	r1, sp
 8025110:	4630      	mov	r0, r6
 8025112:	f8ad 7014 	strh.w	r7, [sp, #20]
 8025116:	f7fd f92b 	bl	8022370 <MobleApplicationSendPacket>
 802511a:	4605      	mov	r5, r0
 802511c:	2d01      	cmp	r5, #1
 802511e:	4620      	mov	r0, r4
 8025120:	d902      	bls.n	8025128 <MobleBluemeshModelWriteElement+0xac>
 8025122:	f7f5 fc2f 	bl	801a984 <MobleMemFree>
 8025126:	e7cf      	b.n	80250c8 <MobleBluemeshModelWriteElement+0x4c>
 8025128:	f7f5 fc2c 	bl	801a984 <MobleMemFree>
 802512c:	464d      	mov	r5, r9
 802512e:	e7cb      	b.n	80250c8 <MobleBluemeshModelWriteElement+0x4c>
 8025130:	4625      	mov	r5, r4
 8025132:	e7c9      	b.n	80250c8 <MobleBluemeshModelWriteElement+0x4c>
 8025134:	2000140c 	.word	0x2000140c

08025138 <MobleLibrarySendData>:
 8025138:	b5f0      	push	{r4, r5, r6, r7, lr}
 802513a:	4f10      	ldr	r7, [pc, #64]	@ (802517c <MobleLibrarySendData+0x44>)
 802513c:	b085      	sub	sp, #20
 802513e:	4604      	mov	r4, r0
 8025140:	f8d7 06f0 	ldr.w	r0, [r7, #1776]	@ 0x6f0
 8025144:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8025146:	b1b8      	cbz	r0, 8025178 <MobleLibrarySendData+0x40>
 8025148:	b1b3      	cbz	r3, 8025178 <MobleLibrarySendData+0x40>
 802514a:	b1ae      	cbz	r6, 8025178 <MobleLibrarySendData+0x40>
 802514c:	b1a4      	cbz	r4, 8025178 <MobleLibrarySendData+0x40>
 802514e:	f504 7580 	add.w	r5, r4, #256	@ 0x100
 8025152:	b2ad      	uxth	r5, r5
 8025154:	2dfb      	cmp	r5, #251	@ 0xfb
 8025156:	d90f      	bls.n	8025178 <MobleLibrarySendData+0x40>
 8025158:	2a10      	cmp	r2, #16
 802515a:	d80d      	bhi.n	8025178 <MobleLibrarySendData+0x40>
 802515c:	f897 56b4 	ldrb.w	r5, [r7, #1716]	@ 0x6b4
 8025160:	b155      	cbz	r5, 8025178 <MobleLibrarySendData+0x40>
 8025162:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8025166:	9200      	str	r2, [sp, #0]
 8025168:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 802516c:	460a      	mov	r2, r1
 802516e:	4621      	mov	r1, r4
 8025170:	f7ff ff84 	bl	802507c <MobleBluemeshModelWriteElement>
 8025174:	b005      	add	sp, #20
 8025176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025178:	2002      	movs	r0, #2
 802517a:	e7fb      	b.n	8025174 <MobleLibrarySendData+0x3c>
 802517c:	20002504 	.word	0x20002504

08025180 <MobleBluemeshModelWritePublishElement>:
 8025180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025184:	461e      	mov	r6, r3
 8025186:	4b3a      	ldr	r3, [pc, #232]	@ (8025270 <MobleBluemeshModelWritePublishElement+0xf0>)
 8025188:	f8b3 a94e 	ldrh.w	sl, [r3, #2382]	@ 0x94e
 802518c:	b08d      	sub	sp, #52	@ 0x34
 802518e:	4607      	mov	r7, r0
 8025190:	4650      	mov	r0, sl
 8025192:	4689      	mov	r9, r1
 8025194:	4615      	mov	r5, r2
 8025196:	f8dd 8060 	ldr.w	r8, [sp, #96]	@ 0x60
 802519a:	f7f5 fb69 	bl	801a870 <MobleMemAlloc>
 802519e:	f8d7 b000 	ldr.w	fp, [r7]
 80251a2:	464a      	mov	r2, r9
 80251a4:	4604      	mov	r4, r0
 80251a6:	4629      	mov	r1, r5
 80251a8:	f89b 001c 	ldrb.w	r0, [fp, #28]
 80251ac:	f7f4 ff3e 	bl	801a02c <MoblePalCrypto_GetModelPublicationParameters>
 80251b0:	2228      	movs	r2, #40	@ 0x28
 80251b2:	4681      	mov	r9, r0
 80251b4:	2100      	movs	r1, #0
 80251b6:	a802      	add	r0, sp, #8
 80251b8:	f003 fff8 	bl	80291ac <memset>
 80251bc:	2c00      	cmp	r4, #0
 80251be:	d052      	beq.n	8025266 <MobleBluemeshModelWritePublishElement+0xe6>
 80251c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80251c2:	b133      	cbz	r3, 80251d2 <MobleBluemeshModelWritePublishElement+0x52>
 80251c4:	f1b8 0f00 	cmp.w	r8, #0
 80251c8:	d003      	beq.n	80251d2 <MobleBluemeshModelWritePublishElement+0x52>
 80251ca:	f1aa 0304 	sub.w	r3, sl, #4
 80251ce:	4543      	cmp	r3, r8
 80251d0:	d207      	bcs.n	80251e2 <MobleBluemeshModelWritePublishElement+0x62>
 80251d2:	4620      	mov	r0, r4
 80251d4:	f7f5 fbd6 	bl	801a984 <MobleMemFree>
 80251d8:	2503      	movs	r5, #3
 80251da:	4628      	mov	r0, r5
 80251dc:	b00d      	add	sp, #52	@ 0x34
 80251de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251e2:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80251e6:	9301      	str	r3, [sp, #4]
 80251e8:	2b00      	cmp	r3, #0
 80251ea:	d03e      	beq.n	802526a <MobleBluemeshModelWritePublishElement+0xea>
 80251ec:	f8b9 9006 	ldrh.w	r9, [r9, #6]
 80251f0:	4648      	mov	r0, r9
 80251f2:	f7f4 fb07 	bl	8019804 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 80251f6:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 80251fa:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80251fc:	1aad      	subs	r5, r5, r2
 80251fe:	f89d 2058 	ldrb.w	r2, [sp, #88]	@ 0x58
 8025202:	0176      	lsls	r6, r6, #5
 8025204:	f002 020f 	and.w	r2, r2, #15
 8025208:	f062 023f 	orn	r2, r2, #63	@ 0x3f
 802520c:	f006 0620 	and.w	r6, r6, #32
 8025210:	4316      	orrs	r6, r2
 8025212:	7026      	strb	r6, [r4, #0]
 8025214:	2230      	movs	r2, #48	@ 0x30
 8025216:	2600      	movs	r6, #0
 8025218:	4682      	mov	sl, r0
 802521a:	7062      	strb	r2, [r4, #1]
 802521c:	1ce0      	adds	r0, r4, #3
 802521e:	4642      	mov	r2, r8
 8025220:	70a6      	strb	r6, [r4, #2]
 8025222:	4680      	mov	r8, r0
 8025224:	f7f5 fcd2 	bl	801abcc <MobleOutputStreamPutArray>
 8025228:	683a      	ldr	r2, [r7, #0]
 802522a:	9b01      	ldr	r3, [sp, #4]
 802522c:	8852      	ldrh	r2, [r2, #2]
 802522e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025232:	4440      	add	r0, r8
 8025234:	b2ed      	uxtb	r5, r5
 8025236:	4415      	add	r5, r2
 8025238:	1b03      	subs	r3, r0, r4
 802523a:	4622      	mov	r2, r4
 802523c:	a902      	add	r1, sp, #8
 802523e:	4638      	mov	r0, r7
 8025240:	f8ad 501c 	strh.w	r5, [sp, #28]
 8025244:	f8ad a026 	strh.w	sl, [sp, #38]	@ 0x26
 8025248:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 802524c:	f7fd f890 	bl	8022370 <MobleApplicationSendPacket>
 8025250:	4605      	mov	r5, r0
 8025252:	2d01      	cmp	r5, #1
 8025254:	4620      	mov	r0, r4
 8025256:	d902      	bls.n	802525e <MobleBluemeshModelWritePublishElement+0xde>
 8025258:	f7f5 fb94 	bl	801a984 <MobleMemFree>
 802525c:	e7bd      	b.n	80251da <MobleBluemeshModelWritePublishElement+0x5a>
 802525e:	f7f5 fb91 	bl	801a984 <MobleMemFree>
 8025262:	4635      	mov	r5, r6
 8025264:	e7b9      	b.n	80251da <MobleBluemeshModelWritePublishElement+0x5a>
 8025266:	4625      	mov	r5, r4
 8025268:	e7b7      	b.n	80251da <MobleBluemeshModelWritePublishElement+0x5a>
 802526a:	2502      	movs	r5, #2
 802526c:	e7b5      	b.n	80251da <MobleBluemeshModelWritePublishElement+0x5a>
 802526e:	bf00      	nop
 8025270:	2000140c 	.word	0x2000140c

08025274 <MobleLibrarySendRemoteData>:
 8025274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025276:	4f10      	ldr	r7, [pc, #64]	@ (80252b8 <MobleLibrarySendRemoteData+0x44>)
 8025278:	b085      	sub	sp, #20
 802527a:	4604      	mov	r4, r0
 802527c:	f8d7 06f0 	ldr.w	r0, [r7, #1776]	@ 0x6f0
 8025280:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8025282:	b1b8      	cbz	r0, 80252b4 <MobleLibrarySendRemoteData+0x40>
 8025284:	b1b3      	cbz	r3, 80252b4 <MobleLibrarySendRemoteData+0x40>
 8025286:	b1ae      	cbz	r6, 80252b4 <MobleLibrarySendRemoteData+0x40>
 8025288:	b1a1      	cbz	r1, 80252b4 <MobleLibrarySendRemoteData+0x40>
 802528a:	f501 7580 	add.w	r5, r1, #256	@ 0x100
 802528e:	b2ad      	uxth	r5, r5
 8025290:	2dfb      	cmp	r5, #251	@ 0xfb
 8025292:	d90f      	bls.n	80252b4 <MobleLibrarySendRemoteData+0x40>
 8025294:	2a10      	cmp	r2, #16
 8025296:	d80d      	bhi.n	80252b4 <MobleLibrarySendRemoteData+0x40>
 8025298:	f897 56b4 	ldrb.w	r5, [r7, #1716]	@ 0x6b4
 802529c:	b155      	cbz	r5, 80252b4 <MobleLibrarySendRemoteData+0x40>
 802529e:	e9cd 3601 	strd	r3, r6, [sp, #4]
 80252a2:	9200      	str	r2, [sp, #0]
 80252a4:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80252a8:	460a      	mov	r2, r1
 80252aa:	4621      	mov	r1, r4
 80252ac:	f7ff ff68 	bl	8025180 <MobleBluemeshModelWritePublishElement>
 80252b0:	b005      	add	sp, #20
 80252b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80252b4:	2002      	movs	r0, #2
 80252b6:	e7fb      	b.n	80252b0 <MobleLibrarySendRemoteData+0x3c>
 80252b8:	20002504 	.word	0x20002504

080252bc <MobleBluemeshModelResponse>:
 80252bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80252c0:	b08b      	sub	sp, #44	@ 0x2c
 80252c2:	e9dd 9614 	ldrd	r9, r6, [sp, #80]	@ 0x50
 80252c6:	4680      	mov	r8, r0
 80252c8:	468a      	mov	sl, r1
 80252ca:	4617      	mov	r7, r2
 80252cc:	2100      	movs	r1, #0
 80252ce:	2228      	movs	r2, #40	@ 0x28
 80252d0:	4668      	mov	r0, sp
 80252d2:	461d      	mov	r5, r3
 80252d4:	f003 ff6a 	bl	80291ac <memset>
 80252d8:	f1b9 0f00 	cmp.w	r9, #0
 80252dc:	d100      	bne.n	80252e0 <MobleBluemeshModelResponse+0x24>
 80252de:	b98e      	cbnz	r6, 8025304 <MobleBluemeshModelResponse+0x48>
 80252e0:	4b21      	ldr	r3, [pc, #132]	@ (8025368 <MobleBluemeshModelResponse+0xac>)
 80252e2:	f8b3 b94e 	ldrh.w	fp, [r3, #2382]	@ 0x94e
 80252e6:	4658      	mov	r0, fp
 80252e8:	f7f5 fac2 	bl	801a870 <MobleMemAlloc>
 80252ec:	4604      	mov	r4, r0
 80252ee:	b3a8      	cbz	r0, 802535c <MobleBluemeshModelResponse+0xa0>
 80252f0:	f1b8 0f00 	cmp.w	r8, #0
 80252f4:	d003      	beq.n	80252fe <MobleBluemeshModelResponse+0x42>
 80252f6:	f1ab 0b03 	sub.w	fp, fp, #3
 80252fa:	45b3      	cmp	fp, r6
 80252fc:	d204      	bcs.n	8025308 <MobleBluemeshModelResponse+0x4c>
 80252fe:	4620      	mov	r0, r4
 8025300:	f7f5 fb40 	bl	801a984 <MobleMemFree>
 8025304:	2503      	movs	r5, #3
 8025306:	e025      	b.n	8025354 <MobleBluemeshModelResponse+0x98>
 8025308:	f005 050f 	and.w	r5, r5, #15
 802530c:	f065 052f 	orn	r5, r5, #47	@ 0x2f
 8025310:	7005      	strb	r5, [r0, #0]
 8025312:	f8a0 a001 	strh.w	sl, [r0, #1]
 8025316:	f1b9 0f00 	cmp.w	r9, #0
 802531a:	d005      	beq.n	8025328 <MobleBluemeshModelResponse+0x6c>
 802531c:	b126      	cbz	r6, 8025328 <MobleBluemeshModelResponse+0x6c>
 802531e:	4632      	mov	r2, r6
 8025320:	4649      	mov	r1, r9
 8025322:	3003      	adds	r0, #3
 8025324:	f7f5 fc52 	bl	801abcc <MobleOutputStreamPutArray>
 8025328:	88fb      	ldrh	r3, [r7, #6]
 802532a:	f8ad 3014 	strh.w	r3, [sp, #20]
 802532e:	88bb      	ldrh	r3, [r7, #4]
 8025330:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025334:	897b      	ldrh	r3, [r7, #10]
 8025336:	ba5b      	rev16	r3, r3
 8025338:	f8ad 301c 	strh.w	r3, [sp, #28]
 802533c:	4622      	mov	r2, r4
 802533e:	1cf3      	adds	r3, r6, #3
 8025340:	4669      	mov	r1, sp
 8025342:	4640      	mov	r0, r8
 8025344:	f7fd f814 	bl	8022370 <MobleApplicationSendPacket>
 8025348:	2801      	cmp	r0, #1
 802534a:	4605      	mov	r5, r0
 802534c:	d906      	bls.n	802535c <MobleBluemeshModelResponse+0xa0>
 802534e:	4620      	mov	r0, r4
 8025350:	f7f5 fb18 	bl	801a984 <MobleMemFree>
 8025354:	4628      	mov	r0, r5
 8025356:	b00b      	add	sp, #44	@ 0x2c
 8025358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802535c:	4620      	mov	r0, r4
 802535e:	f7f5 fb11 	bl	801a984 <MobleMemFree>
 8025362:	2500      	movs	r5, #0
 8025364:	e7f6      	b.n	8025354 <MobleBluemeshModelResponse+0x98>
 8025366:	bf00      	nop
 8025368:	2000140c 	.word	0x2000140c

0802536c <VendorModel_SendResponse>:
 802536c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802536e:	4c08      	ldr	r4, [pc, #32]	@ (8025390 <VendorModel_SendResponse+0x24>)
 8025370:	f8d4 46f0 	ldr.w	r4, [r4, #1776]	@ 0x6f0
 8025374:	b154      	cbz	r4, 802538c <VendorModel_SendResponse+0x20>
 8025376:	9d06      	ldr	r5, [sp, #24]
 8025378:	e9cd 3500 	strd	r3, r5, [sp]
 802537c:	4613      	mov	r3, r2
 802537e:	460a      	mov	r2, r1
 8025380:	4601      	mov	r1, r0
 8025382:	4620      	mov	r0, r4
 8025384:	f7ff ff9a 	bl	80252bc <MobleBluemeshModelResponse>
 8025388:	b003      	add	sp, #12
 802538a:	bd30      	pop	{r4, r5, pc}
 802538c:	2002      	movs	r0, #2
 802538e:	e7fb      	b.n	8025388 <VendorModel_SendResponse+0x1c>
 8025390:	20002504 	.word	0x20002504

08025394 <Test_UpperTester_Send02>:
 8025394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025398:	4b29      	ldr	r3, [pc, #164]	@ (8025440 <Test_UpperTester_Send02+0xac>)
 802539a:	b09d      	sub	sp, #116	@ 0x74
 802539c:	aa0f      	add	r2, sp, #60	@ 0x3c
 802539e:	4604      	mov	r4, r0
 80253a0:	460f      	mov	r7, r1
 80253a2:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
 80253a6:	4616      	mov	r6, r2
 80253a8:	6818      	ldr	r0, [r3, #0]
 80253aa:	6859      	ldr	r1, [r3, #4]
 80253ac:	4615      	mov	r5, r2
 80253ae:	c503      	stmia	r5!, {r0, r1}
 80253b0:	3308      	adds	r3, #8
 80253b2:	4563      	cmp	r3, ip
 80253b4:	462a      	mov	r2, r5
 80253b6:	d1f7      	bne.n	80253a8 <Test_UpperTester_Send02+0x14>
 80253b8:	881b      	ldrh	r3, [r3, #0]
 80253ba:	802b      	strh	r3, [r5, #0]
 80253bc:	4b21      	ldr	r3, [pc, #132]	@ (8025444 <Test_UpperTester_Send02+0xb0>)
 80253be:	aa01      	add	r2, sp, #4
 80253c0:	f103 0e10 	add.w	lr, r3, #16
 80253c4:	4615      	mov	r5, r2
 80253c6:	6818      	ldr	r0, [r3, #0]
 80253c8:	6859      	ldr	r1, [r3, #4]
 80253ca:	4694      	mov	ip, r2
 80253cc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80253d0:	3308      	adds	r3, #8
 80253d2:	4573      	cmp	r3, lr
 80253d4:	4662      	mov	r2, ip
 80253d6:	d1f6      	bne.n	80253c6 <Test_UpperTester_Send02+0x32>
 80253d8:	f10d 0814 	add.w	r8, sp, #20
 80253dc:	2228      	movs	r2, #40	@ 0x28
 80253de:	2100      	movs	r1, #0
 80253e0:	4640      	mov	r0, r8
 80253e2:	f003 fee3 	bl	80291ac <memset>
 80253e6:	f897 9000 	ldrb.w	r9, [r7]
 80253ea:	f8b7 7001 	ldrh.w	r7, [r7, #1]
 80253ee:	ba7f      	rev16	r7, r7
 80253f0:	f407 4340 	and.w	r3, r7, #49152	@ 0xc000
 80253f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80253f8:	d112      	bne.n	8025420 <Test_UpperTester_Send02+0x8c>
 80253fa:	4b13      	ldr	r3, [pc, #76]	@ (8025448 <Test_UpperTester_Send02+0xb4>)
 80253fc:	685b      	ldr	r3, [r3, #4]
 80253fe:	4628      	mov	r0, r5
 8025400:	695b      	ldr	r3, [r3, #20]
 8025402:	4798      	blx	r3
 8025404:	6822      	ldr	r2, [r4, #0]
 8025406:	320c      	adds	r2, #12
 8025408:	462b      	mov	r3, r5
 802540a:	cb03      	ldmia	r3!, {r0, r1}
 802540c:	4543      	cmp	r3, r8
 802540e:	6010      	str	r0, [r2, #0]
 8025410:	6051      	str	r1, [r2, #4]
 8025412:	461d      	mov	r5, r3
 8025414:	f102 0208 	add.w	r2, r2, #8
 8025418:	d1f6      	bne.n	8025408 <Test_UpperTester_Send02+0x74>
 802541a:	6820      	ldr	r0, [r4, #0]
 802541c:	f7f7 fa1c 	bl	801c858 <MobleConfigNetworkSave>
 8025420:	6823      	ldr	r3, [r4, #0]
 8025422:	f8ad 702a 	strh.w	r7, [sp, #42]	@ 0x2a
 8025426:	885b      	ldrh	r3, [r3, #2]
 8025428:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 802542c:	4632      	mov	r2, r6
 802542e:	464b      	mov	r3, r9
 8025430:	4641      	mov	r1, r8
 8025432:	4620      	mov	r0, r4
 8025434:	f7fc ff9c 	bl	8022370 <MobleApplicationSendPacket>
 8025438:	b01d      	add	sp, #116	@ 0x74
 802543a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802543e:	bf00      	nop
 8025440:	08031697 	.word	0x08031697
 8025444:	080316ca 	.word	0x080316ca
 8025448:	20000314 	.word	0x20000314

0802544c <MobleTransSendControl>:
 802544c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025450:	b088      	sub	sp, #32
 8025452:	4606      	mov	r6, r0
 8025454:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8025456:	2f0e      	cmp	r7, #14
 8025458:	460d      	mov	r5, r1
 802545a:	4614      	mov	r4, r2
 802545c:	4698      	mov	r8, r3
 802545e:	dd06      	ble.n	802546e <MobleTransSendControl+0x22>
 8025460:	4b15      	ldr	r3, [pc, #84]	@ (80254b8 <MobleTransSendControl+0x6c>)
 8025462:	4a16      	ldr	r2, [pc, #88]	@ (80254bc <MobleTransSendControl+0x70>)
 8025464:	4816      	ldr	r0, [pc, #88]	@ (80254c0 <MobleTransSendControl+0x74>)
 8025466:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 802546a:	f002 ffb7 	bl	80283dc <__assert_func>
 802546e:	2210      	movs	r2, #16
 8025470:	eb0d 0002 	add.w	r0, sp, r2
 8025474:	2100      	movs	r1, #0
 8025476:	0224      	lsls	r4, r4, #8
 8025478:	f003 fe98 	bl	80291ac <memset>
 802547c:	f044 0403 	orr.w	r4, r4, #3
 8025480:	a904      	add	r1, sp, #16
 8025482:	4668      	mov	r0, sp
 8025484:	f8ad 4000 	strh.w	r4, [sp]
 8025488:	f7f6 fcba 	bl	801be00 <MobleTransportRenderHdr>
 802548c:	463a      	mov	r2, r7
 802548e:	4641      	mov	r1, r8
 8025490:	f10d 0011 	add.w	r0, sp, #17
 8025494:	f003 ff1b 	bl	80292ce <memcpy>
 8025498:	8b6b      	ldrh	r3, [r5, #26]
 802549a:	f043 0308 	orr.w	r3, r3, #8
 802549e:	836b      	strh	r3, [r5, #26]
 80254a0:	6833      	ldr	r3, [r6, #0]
 80254a2:	885b      	ldrh	r3, [r3, #2]
 80254a4:	82ab      	strh	r3, [r5, #20]
 80254a6:	aa04      	add	r2, sp, #16
 80254a8:	1c7b      	adds	r3, r7, #1
 80254aa:	4629      	mov	r1, r5
 80254ac:	4630      	mov	r0, r6
 80254ae:	f7fc fc4f 	bl	8021d50 <MobleNetworkSendData>
 80254b2:	b008      	add	sp, #32
 80254b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80254b8:	080316db 	.word	0x080316db
 80254bc:	08030235 	.word	0x08030235
 80254c0:	080311c0 	.word	0x080311c0

080254c4 <MobleTransportSendHeartbeat>:
 80254c4:	b507      	push	{r0, r1, r2, lr}
 80254c6:	9300      	str	r3, [sp, #0]
 80254c8:	4613      	mov	r3, r2
 80254ca:	220a      	movs	r2, #10
 80254cc:	f7ff ffbe 	bl	802544c <MobleTransSendControl>
 80254d0:	b003      	add	sp, #12
 80254d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080254d8 <BnrgmConfigModelSendHeartbeat>:
 80254d8:	b530      	push	{r4, r5, lr}
 80254da:	b08d      	sub	sp, #52	@ 0x34
 80254dc:	4604      	mov	r4, r0
 80254de:	2228      	movs	r2, #40	@ 0x28
 80254e0:	2100      	movs	r1, #0
 80254e2:	a802      	add	r0, sp, #8
 80254e4:	f003 fe62 	bl	80291ac <memset>
 80254e8:	4b1c      	ldr	r3, [pc, #112]	@ (802555c <BnrgmConfigModelSendHeartbeat+0x84>)
 80254ea:	f8b3 50ca 	ldrh.w	r5, [r3, #202]	@ 0xca
 80254ee:	b39d      	cbz	r5, 8025558 <BnrgmConfigModelSendHeartbeat+0x80>
 80254f0:	f893 10bd 	ldrb.w	r1, [r3, #189]	@ 0xbd
 80254f4:	f893 20bc 	ldrb.w	r2, [r3, #188]	@ 0xbc
 80254f8:	2902      	cmp	r1, #2
 80254fa:	bf28      	it	cs
 80254fc:	2100      	movcs	r1, #0
 80254fe:	b289      	uxth	r1, r1
 8025500:	2a01      	cmp	r2, #1
 8025502:	bf98      	it	ls
 8025504:	ea41 0142 	orrls.w	r1, r1, r2, lsl #1
 8025508:	f893 20be 	ldrb.w	r2, [r3, #190]	@ 0xbe
 802550c:	2a01      	cmp	r2, #1
 802550e:	bf98      	it	ls
 8025510:	ea41 0182 	orrls.w	r1, r1, r2, lsl #2
 8025514:	f893 20bf 	ldrb.w	r2, [r3, #191]	@ 0xbf
 8025518:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 802551c:	f88d 3004 	strb.w	r3, [sp, #4]
 8025520:	2a01      	cmp	r2, #1
 8025522:	bf98      	it	ls
 8025524:	ea41 01c2 	orrls.w	r1, r1, r2, lsl #3
 8025528:	f10d 0005 	add.w	r0, sp, #5
 802552c:	2202      	movs	r2, #2
 802552e:	f7f5 fb5a 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 8025532:	f88d 3017 	strb.w	r3, [sp, #23]
 8025536:	2302      	movs	r3, #2
 8025538:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 802553c:	aa01      	add	r2, sp, #4
 802553e:	2303      	movs	r3, #3
 8025540:	a902      	add	r1, sp, #8
 8025542:	4620      	mov	r0, r4
 8025544:	f8ad 501e 	strh.w	r5, [sp, #30]
 8025548:	f7ff ffbc 	bl	80254c4 <MobleTransportSendHeartbeat>
 802554c:	3800      	subs	r0, #0
 802554e:	bf18      	it	ne
 8025550:	2001      	movne	r0, #1
 8025552:	0040      	lsls	r0, r0, #1
 8025554:	b00d      	add	sp, #52	@ 0x34
 8025556:	bd30      	pop	{r4, r5, pc}
 8025558:	2001      	movs	r0, #1
 802555a:	e7fb      	b.n	8025554 <BnrgmConfigModelSendHeartbeat+0x7c>
 802555c:	20000314 	.word	0x20000314

08025560 <MobleConfigModel_ProcessRelaySet>:
 8025560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025562:	460a      	mov	r2, r1
 8025564:	7819      	ldrb	r1, [r3, #0]
 8025566:	9c07      	ldr	r4, [sp, #28]
 8025568:	2901      	cmp	r1, #1
 802556a:	4606      	mov	r6, r0
 802556c:	d839      	bhi.n	80255e2 <MobleConfigModel_ProcessRelaySet+0x82>
 802556e:	6800      	ldr	r0, [r0, #0]
 8025570:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8025572:	7c6f      	ldrb	r7, [r5, #17]
 8025574:	2f02      	cmp	r7, #2
 8025576:	d006      	beq.n	8025586 <MobleConfigModel_ProcessRelaySet+0x26>
 8025578:	785b      	ldrb	r3, [r3, #1]
 802557a:	7469      	strb	r1, [r5, #17]
 802557c:	f003 0107 	and.w	r1, r3, #7
 8025580:	08db      	lsrs	r3, r3, #3
 8025582:	7329      	strb	r1, [r5, #12]
 8025584:	736b      	strb	r3, [r5, #13]
 8025586:	7b68      	ldrb	r0, [r5, #13]
 8025588:	7b29      	ldrb	r1, [r5, #12]
 802558a:	f895 c011 	ldrb.w	ip, [r5, #17]
 802558e:	f884 c008 	strb.w	ip, [r4, #8]
 8025592:	ea41 01c0 	orr.w	r1, r1, r0, lsl #3
 8025596:	2528      	movs	r5, #40	@ 0x28
 8025598:	2300      	movs	r3, #0
 802559a:	7025      	strb	r5, [r4, #0]
 802559c:	7261      	strb	r1, [r4, #9]
 802559e:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
 80255a2:	2102      	movs	r1, #2
 80255a4:	70a3      	strb	r3, [r4, #2]
 80255a6:	70e3      	strb	r3, [r4, #3]
 80255a8:	f884 10a3 	strb.w	r1, [r4, #163]	@ 0xa3
 80255ac:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 80255b0:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
 80255b4:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
 80255b8:	7065      	strb	r5, [r4, #1]
 80255ba:	4623      	mov	r3, r4
 80255bc:	2101      	movs	r1, #1
 80255be:	4630      	mov	r0, r6
 80255c0:	f7fc ff64 	bl	802248c <MobleModelSendPacket>
 80255c4:	4604      	mov	r4, r0
 80255c6:	b950      	cbnz	r0, 80255de <MobleConfigModel_ProcessRelaySet+0x7e>
 80255c8:	6833      	ldr	r3, [r6, #0]
 80255ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80255cc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80255ce:	07d2      	lsls	r2, r2, #31
 80255d0:	d505      	bpl.n	80255de <MobleConfigModel_ProcessRelaySet+0x7e>
 80255d2:	7c5b      	ldrb	r3, [r3, #17]
 80255d4:	42bb      	cmp	r3, r7
 80255d6:	d002      	beq.n	80255de <MobleConfigModel_ProcessRelaySet+0x7e>
 80255d8:	4630      	mov	r0, r6
 80255da:	f7ff ff7d 	bl	80254d8 <BnrgmConfigModelSendHeartbeat>
 80255de:	4620      	mov	r0, r4
 80255e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80255e2:	2402      	movs	r4, #2
 80255e4:	e7fb      	b.n	80255de <MobleConfigModel_ProcessRelaySet+0x7e>

080255e6 <MobleConfigModel_ProcessGattProxySet>:
 80255e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80255e8:	460a      	mov	r2, r1
 80255ea:	7819      	ldrb	r1, [r3, #0]
 80255ec:	9c07      	ldr	r4, [sp, #28]
 80255ee:	2901      	cmp	r1, #1
 80255f0:	4605      	mov	r5, r0
 80255f2:	d82e      	bhi.n	8025652 <MobleConfigModel_ProcessGattProxySet+0x6c>
 80255f4:	6803      	ldr	r3, [r0, #0]
 80255f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80255f8:	2714      	movs	r7, #20
 80255fa:	7c1e      	ldrb	r6, [r3, #16]
 80255fc:	7419      	strb	r1, [r3, #16]
 80255fe:	2300      	movs	r3, #0
 8025600:	7027      	strb	r7, [r4, #0]
 8025602:	7221      	strb	r1, [r4, #8]
 8025604:	f06f 077f 	mvn.w	r7, #127	@ 0x7f
 8025608:	2101      	movs	r1, #1
 802560a:	70a3      	strb	r3, [r4, #2]
 802560c:	70e3      	strb	r3, [r4, #3]
 802560e:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 8025612:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
 8025616:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
 802561a:	7067      	strb	r7, [r4, #1]
 802561c:	f884 10a3 	strb.w	r1, [r4, #163]	@ 0xa3
 8025620:	4623      	mov	r3, r4
 8025622:	f7fc ff33 	bl	802248c <MobleModelSendPacket>
 8025626:	4604      	mov	r4, r0
 8025628:	b988      	cbnz	r0, 802564e <MobleConfigModel_ProcessGattProxySet+0x68>
 802562a:	682b      	ldr	r3, [r5, #0]
 802562c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802562e:	7c1a      	ldrb	r2, [r3, #16]
 8025630:	42b2      	cmp	r2, r6
 8025632:	d00c      	beq.n	802564e <MobleConfigModel_ProcessGattProxySet+0x68>
 8025634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8025636:	079b      	lsls	r3, r3, #30
 8025638:	d502      	bpl.n	8025640 <MobleConfigModel_ProcessGattProxySet+0x5a>
 802563a:	4628      	mov	r0, r5
 802563c:	f7ff ff4c 	bl	80254d8 <BnrgmConfigModelSendHeartbeat>
 8025640:	682b      	ldr	r3, [r5, #0]
 8025642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025644:	7c1b      	ldrb	r3, [r3, #16]
 8025646:	2b01      	cmp	r3, #1
 8025648:	d001      	beq.n	802564e <MobleConfigModel_ProcessGattProxySet+0x68>
 802564a:	f7f9 fc9d 	bl	801ef88 <MoblePalBluetoothGracefulReset>
 802564e:	4620      	mov	r0, r4
 8025650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025652:	2402      	movs	r4, #2
 8025654:	e7fb      	b.n	802564e <MobleConfigModel_ProcessGattProxySet+0x68>
	...

08025658 <BnrgmConfigModelHeartbeatPublication_TimerCallback>:
 8025658:	b538      	push	{r3, r4, r5, lr}
 802565a:	4604      	mov	r4, r0
 802565c:	b330      	cbz	r0, 80256ac <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x54>
 802565e:	4d14      	ldr	r5, [pc, #80]	@ (80256b0 <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x58>)
 8025660:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8025664:	b1eb      	cbz	r3, 80256a2 <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x4a>
 8025666:	f8b5 30d4 	ldrh.w	r3, [r5, #212]	@ 0xd4
 802566a:	b1d3      	cbz	r3, 80256a2 <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x4a>
 802566c:	4608      	mov	r0, r1
 802566e:	f7ff ff33 	bl	80254d8 <BnrgmConfigModelSendHeartbeat>
 8025672:	b948      	cbnz	r0, 8025688 <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x30>
 8025674:	f8d5 30d0 	ldr.w	r3, [r5, #208]	@ 0xd0
 8025678:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 802567c:	4293      	cmp	r3, r2
 802567e:	bf1c      	itt	ne
 8025680:	f103 33ff 	addne.w	r3, r3, #4294967295
 8025684:	f8c5 30d0 	strne.w	r3, [r5, #208]	@ 0xd0
 8025688:	f8b5 10d4 	ldrh.w	r1, [r5, #212]	@ 0xd4
 802568c:	ebc1 1341 	rsb	r3, r1, r1, lsl #5
 8025690:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8025694:	00c9      	lsls	r1, r1, #3
 8025696:	4620      	mov	r0, r4
 8025698:	b289      	uxth	r1, r1
 802569a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802569e:	f7f1 bfb5 	b.w	801760c <MoblePalTimerStartOnce>
 80256a2:	4620      	mov	r0, r4
 80256a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80256a8:	f7f1 bfd8 	b.w	801765c <MoblePalTimerStop>
 80256ac:	bd38      	pop	{r3, r4, r5, pc}
 80256ae:	bf00      	nop
 80256b0:	20000314 	.word	0x20000314

080256b4 <BnrgmFrndFnSendFriendPollResponse>:
 80256b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80256b8:	f892 932d 	ldrb.w	r9, [r2, #813]	@ 0x32d
 80256bc:	252c      	movs	r5, #44	@ 0x2c
 80256be:	fb05 2309 	mla	r3, r5, r9, r2
 80256c2:	b08f      	sub	sp, #60	@ 0x3c
 80256c4:	f893 8096 	ldrb.w	r8, [r3, #150]	@ 0x96
 80256c8:	f1b8 0f01 	cmp.w	r8, #1
 80256cc:	4606      	mov	r6, r0
 80256ce:	460f      	mov	r7, r1
 80256d0:	4614      	mov	r4, r2
 80256d2:	d004      	beq.n	80256de <BnrgmFrndFnSendFriendPollResponse+0x2a>
 80256d4:	b00f      	add	sp, #60	@ 0x3c
 80256d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80256da:	f7fa bdd1 	b.w	8020280 <BnrgmFrndFnSendLpnMsg>
 80256de:	2228      	movs	r2, #40	@ 0x28
 80256e0:	2100      	movs	r1, #0
 80256e2:	a804      	add	r0, sp, #16
 80256e4:	f003 fd62 	bl	80291ac <memset>
 80256e8:	2385      	movs	r3, #133	@ 0x85
 80256ea:	fb15 3509 	smlabb	r5, r5, r9, r3
 80256ee:	1963      	adds	r3, r4, r5
 80256f0:	5960      	ldr	r0, [r4, r5]
 80256f2:	791b      	ldrb	r3, [r3, #4]
 80256f4:	f88d 300c 	strb.w	r3, [sp, #12]
 80256f8:	f894 332c 	ldrb.w	r3, [r4, #812]	@ 0x32c
 80256fc:	9002      	str	r0, [sp, #8]
 80256fe:	2b01      	cmp	r3, #1
 8025700:	bf94      	ite	ls
 8025702:	2300      	movls	r3, #0
 8025704:	2301      	movhi	r3, #1
 8025706:	f88d 300d 	strb.w	r3, [sp, #13]
 802570a:	2330      	movs	r3, #48	@ 0x30
 802570c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8025710:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
 8025714:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8025718:	88a3      	ldrh	r3, [r4, #4]
 802571a:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 802571e:	2306      	movs	r3, #6
 8025720:	9300      	str	r3, [sp, #0]
 8025722:	2202      	movs	r2, #2
 8025724:	ab02      	add	r3, sp, #8
 8025726:	a904      	add	r1, sp, #16
 8025728:	4630      	mov	r0, r6
 802572a:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 802572e:	f88d 8033 	strb.w	r8, [sp, #51]	@ 0x33
 8025732:	f7ff fe8b 	bl	802544c <MobleTransSendControl>
 8025736:	b00f      	add	sp, #60	@ 0x3c
 8025738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0802573c <BnrgmFrndFnSendFrndClear>:
 802573c:	b530      	push	{r4, r5, lr}
 802573e:	460c      	mov	r4, r1
 8025740:	b08f      	sub	sp, #60	@ 0x3c
 8025742:	4605      	mov	r5, r0
 8025744:	2228      	movs	r2, #40	@ 0x28
 8025746:	2100      	movs	r1, #0
 8025748:	a804      	add	r0, sp, #16
 802574a:	f003 fd2f 	bl	80291ac <memset>
 802574e:	8a23      	ldrh	r3, [r4, #16]
 8025750:	b323      	cbz	r3, 802579c <BnrgmFrndFnSendFrndClear+0x60>
 8025752:	88a1      	ldrh	r1, [r4, #4]
 8025754:	2202      	movs	r2, #2
 8025756:	a803      	add	r0, sp, #12
 8025758:	f7f5 fa45 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 802575c:	88e1      	ldrh	r1, [r4, #6]
 802575e:	2202      	movs	r2, #2
 8025760:	f10d 000e 	add.w	r0, sp, #14
 8025764:	f7f5 fa3f 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 8025768:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
 802576c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8025770:	8a23      	ldrh	r3, [r4, #16]
 8025772:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8025776:	237f      	movs	r3, #127	@ 0x7f
 8025778:	f88d 301f 	strb.w	r3, [sp, #31]
 802577c:	4b08      	ldr	r3, [pc, #32]	@ (80257a0 <BnrgmFrndFnSendFrndClear+0x64>)
 802577e:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8025782:	3301      	adds	r3, #1
 8025784:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8025788:	2304      	movs	r3, #4
 802578a:	9300      	str	r3, [sp, #0]
 802578c:	2205      	movs	r2, #5
 802578e:	ab03      	add	r3, sp, #12
 8025790:	a904      	add	r1, sp, #16
 8025792:	4628      	mov	r0, r5
 8025794:	f7ff fe5a 	bl	802544c <MobleTransSendControl>
 8025798:	b00f      	add	sp, #60	@ 0x3c
 802579a:	bd30      	pop	{r4, r5, pc}
 802579c:	2002      	movs	r0, #2
 802579e:	e7fb      	b.n	8025798 <BnrgmFrndFnSendFrndClear+0x5c>
 80257a0:	20000314 	.word	0x20000314

080257a4 <BnrgmStackSendFrndClear>:
 80257a4:	b508      	push	{r3, lr}
 80257a6:	4601      	mov	r1, r0
 80257a8:	4801      	ldr	r0, [pc, #4]	@ (80257b0 <BnrgmStackSendFrndClear+0xc>)
 80257aa:	f7ff ffc7 	bl	802573c <BnrgmFrndFnSendFrndClear>
 80257ae:	bd08      	pop	{r3, pc}
 80257b0:	20001a8c 	.word	0x20001a8c

080257b4 <BnrgmFrndFnClear_TimerCallback>:
 80257b4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80257b8:	4293      	cmp	r3, r2
 80257ba:	bf88      	it	hi
 80257bc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80257c0:	1ad3      	subs	r3, r2, r3
 80257c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80257c6:	b510      	push	{r4, lr}
 80257c8:	460c      	mov	r4, r1
 80257ca:	d30f      	bcc.n	80257ec <BnrgmFrndFnClear_TimerCallback+0x38>
 80257cc:	005b      	lsls	r3, r3, #1
 80257ce:	1e59      	subs	r1, r3, #1
 80257d0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80257d4:	4291      	cmp	r1, r2
 80257d6:	d90b      	bls.n	80257f0 <BnrgmFrndFnClear_TimerCallback+0x3c>
 80257d8:	f7f1 ff60 	bl	801769c <MoblePalTimerDestroy>
 80257dc:	2300      	movs	r3, #0
 80257de:	6163      	str	r3, [r4, #20]
 80257e0:	8223      	strh	r3, [r4, #16]
 80257e2:	4620      	mov	r0, r4
 80257e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80257e8:	f7ff bfdc 	b.w	80257a4 <BnrgmStackSendFrndClear>
 80257ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80257f0:	b299      	uxth	r1, r3
 80257f2:	f7f1 ff0b 	bl	801760c <MoblePalTimerStartOnce>
 80257f6:	e7f4      	b.n	80257e2 <BnrgmFrndFnClear_TimerCallback+0x2e>

080257f8 <BnrgmFrndLpnSendFrndClear.isra.0>:
 80257f8:	b530      	push	{r4, r5, lr}
 80257fa:	4605      	mov	r5, r0
 80257fc:	b08f      	sub	sp, #60	@ 0x3c
 80257fe:	460c      	mov	r4, r1
 8025800:	2228      	movs	r2, #40	@ 0x28
 8025802:	2100      	movs	r1, #0
 8025804:	a804      	add	r0, sp, #16
 8025806:	f003 fcd1 	bl	80291ac <memset>
 802580a:	682b      	ldr	r3, [r5, #0]
 802580c:	2202      	movs	r2, #2
 802580e:	8859      	ldrh	r1, [r3, #2]
 8025810:	a803      	add	r0, sp, #12
 8025812:	f7f5 f9e8 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 8025816:	8a61      	ldrh	r1, [r4, #18]
 8025818:	2202      	movs	r2, #2
 802581a:	f10d 000e 	add.w	r0, sp, #14
 802581e:	f7f5 f9e2 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 8025822:	8a23      	ldrh	r3, [r4, #16]
 8025824:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8025828:	4b0b      	ldr	r3, [pc, #44]	@ (8025858 <BnrgmFrndLpnSendFrndClear.isra.0+0x60>)
 802582a:	f893 20b5 	ldrb.w	r2, [r3, #181]	@ 0xb5
 802582e:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 8025832:	f88d 201f 	strb.w	r2, [sp, #31]
 8025836:	2000      	movs	r0, #0
 8025838:	3301      	adds	r3, #1
 802583a:	8220      	strh	r0, [r4, #16]
 802583c:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8025840:	f7f4 fb54 	bl	8019eec <BnrgmPalCryptoDeleteFriendshipKeys>
 8025844:	2304      	movs	r3, #4
 8025846:	9300      	str	r3, [sp, #0]
 8025848:	2205      	movs	r2, #5
 802584a:	ab03      	add	r3, sp, #12
 802584c:	a904      	add	r1, sp, #16
 802584e:	4628      	mov	r0, r5
 8025850:	f7ff fdfc 	bl	802544c <MobleTransSendControl>
 8025854:	b00f      	add	sp, #60	@ 0x3c
 8025856:	bd30      	pop	{r4, r5, pc}
 8025858:	20000314 	.word	0x20000314

0802585c <BnrgmFrndMgmtBreakFriendship>:
 802585c:	b510      	push	{r4, lr}
 802585e:	4b0e      	ldr	r3, [pc, #56]	@ (8025898 <BnrgmFrndMgmtBreakFriendship+0x3c>)
 8025860:	f893 20bf 	ldrb.w	r2, [r3, #191]	@ 0xbf
 8025864:	2a01      	cmp	r2, #1
 8025866:	d109      	bne.n	802587c <BnrgmFrndMgmtBreakFriendship+0x20>
 8025868:	4b0c      	ldr	r3, [pc, #48]	@ (802589c <BnrgmFrndMgmtBreakFriendship+0x40>)
 802586a:	f8d3 4a04 	ldr.w	r4, [r3, #2564]	@ 0xa04
 802586e:	4621      	mov	r1, r4
 8025870:	f7ff ffc2 	bl	80257f8 <BnrgmFrndLpnSendFrndClear.isra.0>
 8025874:	2000      	movs	r0, #0
 8025876:	f884 005e 	strb.w	r0, [r4, #94]	@ 0x5e
 802587a:	bd10      	pop	{r4, pc}
 802587c:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 8025880:	2b01      	cmp	r3, #1
 8025882:	d106      	bne.n	8025892 <BnrgmFrndMgmtBreakFriendship+0x36>
 8025884:	4b05      	ldr	r3, [pc, #20]	@ (802589c <BnrgmFrndMgmtBreakFriendship+0x40>)
 8025886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802588a:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	@ 0xa04
 802588e:	f7f8 b937 	b.w	801db00 <BnrgmFrndFnBreakFriendship>
 8025892:	2001      	movs	r0, #1
 8025894:	e7f1      	b.n	802587a <BnrgmFrndMgmtBreakFriendship+0x1e>
 8025896:	bf00      	nop
 8025898:	20000314 	.word	0x20000314
 802589c:	20002504 	.word	0x20002504

080258a0 <MobleConfigModel_ProcessFriendSet>:
 80258a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80258a2:	460a      	mov	r2, r1
 80258a4:	7819      	ldrb	r1, [r3, #0]
 80258a6:	9c07      	ldr	r4, [sp, #28]
 80258a8:	2901      	cmp	r1, #1
 80258aa:	4605      	mov	r5, r0
 80258ac:	d82f      	bhi.n	802590e <MobleConfigModel_ProcessFriendSet+0x6e>
 80258ae:	6803      	ldr	r3, [r0, #0]
 80258b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80258b2:	2711      	movs	r7, #17
 80258b4:	7c9e      	ldrb	r6, [r3, #18]
 80258b6:	7499      	strb	r1, [r3, #18]
 80258b8:	2300      	movs	r3, #0
 80258ba:	7027      	strb	r7, [r4, #0]
 80258bc:	7221      	strb	r1, [r4, #8]
 80258be:	f06f 077f 	mvn.w	r7, #127	@ 0x7f
 80258c2:	2101      	movs	r1, #1
 80258c4:	70a3      	strb	r3, [r4, #2]
 80258c6:	70e3      	strb	r3, [r4, #3]
 80258c8:	f884 30a4 	strb.w	r3, [r4, #164]	@ 0xa4
 80258cc:	f884 30a5 	strb.w	r3, [r4, #165]	@ 0xa5
 80258d0:	f884 30a6 	strb.w	r3, [r4, #166]	@ 0xa6
 80258d4:	7067      	strb	r7, [r4, #1]
 80258d6:	f884 10a3 	strb.w	r1, [r4, #163]	@ 0xa3
 80258da:	4623      	mov	r3, r4
 80258dc:	f7fc fdd6 	bl	802248c <MobleModelSendPacket>
 80258e0:	4604      	mov	r4, r0
 80258e2:	b990      	cbnz	r0, 802590a <MobleConfigModel_ProcessFriendSet+0x6a>
 80258e4:	682b      	ldr	r3, [r5, #0]
 80258e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80258e8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80258ea:	0752      	lsls	r2, r2, #29
 80258ec:	d505      	bpl.n	80258fa <MobleConfigModel_ProcessFriendSet+0x5a>
 80258ee:	7c9b      	ldrb	r3, [r3, #18]
 80258f0:	42b3      	cmp	r3, r6
 80258f2:	d002      	beq.n	80258fa <MobleConfigModel_ProcessFriendSet+0x5a>
 80258f4:	4628      	mov	r0, r5
 80258f6:	f7ff fdef 	bl	80254d8 <BnrgmConfigModelSendHeartbeat>
 80258fa:	682b      	ldr	r3, [r5, #0]
 80258fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80258fe:	7c9b      	ldrb	r3, [r3, #18]
 8025900:	2b01      	cmp	r3, #1
 8025902:	d002      	beq.n	802590a <MobleConfigModel_ProcessFriendSet+0x6a>
 8025904:	4628      	mov	r0, r5
 8025906:	f7ff ffa9 	bl	802585c <BnrgmFrndMgmtBreakFriendship>
 802590a:	4620      	mov	r0, r4
 802590c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802590e:	2402      	movs	r4, #2
 8025910:	e7fb      	b.n	802590a <MobleConfigModel_ProcessFriendSet+0x6a>

08025912 <Test_UpperTester_Set06>:
 8025912:	f7ff bfa3 	b.w	802585c <BnrgmFrndMgmtBreakFriendship>
	...

08025918 <BnrgmFrndFn_FSM>:
 8025918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802591c:	b08f      	sub	sp, #60	@ 0x3c
 802591e:	461c      	mov	r4, r3
 8025920:	4617      	mov	r7, r2
 8025922:	f89d 5060 	ldrb.w	r5, [sp, #96]	@ 0x60
 8025926:	4680      	mov	r8, r0
 8025928:	468a      	mov	sl, r1
 802592a:	f7e2 fa77 	bl	8007e1c <HAL_GetTick>
 802592e:	6823      	ldr	r3, [r4, #0]
 8025930:	f894 206a 	ldrb.w	r2, [r4, #106]	@ 0x6a
 8025934:	4606      	mov	r6, r0
 8025936:	1ac3      	subs	r3, r0, r3
 8025938:	2a06      	cmp	r2, #6
 802593a:	f200 80d1 	bhi.w	8025ae0 <BnrgmFrndFn_FSM+0x1c8>
 802593e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8025942:	0007      	.short	0x0007
 8025944:	005f0011 	.word	0x005f0011
 8025948:	00a0007a 	.word	0x00a0007a
 802594c:	010d00d4 	.word	0x010d00d4
 8025950:	2d00      	cmp	r5, #0
 8025952:	d051      	beq.n	80259f8 <BnrgmFrndFn_FSM+0xe0>
 8025954:	2d01      	cmp	r5, #1
 8025956:	f040 812c 	bne.w	8025bb2 <BnrgmFrndFn_FSM+0x29a>
 802595a:	6020      	str	r0, [r4, #0]
 802595c:	f884 506a 	strb.w	r5, [r4, #106]	@ 0x6a
 8025960:	4615      	mov	r5, r2
 8025962:	e049      	b.n	80259f8 <BnrgmFrndFn_FSM+0xe0>
 8025964:	2d00      	cmp	r5, #0
 8025966:	f040 8124 	bne.w	8025bb2 <BnrgmFrndFn_FSM+0x29a>
 802596a:	8b22      	ldrh	r2, [r4, #24]
 802596c:	429a      	cmp	r2, r3
 802596e:	d243      	bcs.n	80259f8 <BnrgmFrndFn_FSM+0xe0>
 8025970:	f8ba 9000 	ldrh.w	r9, [sl]
 8025974:	f109 0901 	add.w	r9, r9, #1
 8025978:	fa1f f989 	uxth.w	r9, r9
 802597c:	f8aa 9000 	strh.w	r9, [sl]
 8025980:	2228      	movs	r2, #40	@ 0x28
 8025982:	4629      	mov	r1, r5
 8025984:	f8a4 9008 	strh.w	r9, [r4, #8]
 8025988:	a804      	add	r0, sp, #16
 802598a:	f003 fc0f 	bl	80291ac <memset>
 802598e:	f894 232e 	ldrb.w	r2, [r4, #814]	@ 0x32e
 8025992:	f88d 200b 	strb.w	r2, [sp, #11]
 8025996:	f241 03ff 	movw	r3, #4351	@ 0x10ff
 802599a:	f8ad 3008 	strh.w	r3, [sp, #8]
 802599e:	2202      	movs	r2, #2
 80259a0:	2306      	movs	r3, #6
 80259a2:	4649      	mov	r1, r9
 80259a4:	a803      	add	r0, sp, #12
 80259a6:	f88d 300a 	strb.w	r3, [sp, #10]
 80259aa:	f7f5 f91c 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 80259ae:	2210      	movs	r2, #16
 80259b0:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80259b4:	f894 2068 	ldrb.w	r2, [r4, #104]	@ 0x68
 80259b8:	f88d 202c 	strb.w	r2, [sp, #44]	@ 0x2c
 80259bc:	88a2      	ldrh	r2, [r4, #4]
 80259be:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 80259c2:	2201      	movs	r2, #1
 80259c4:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 80259c8:	9300      	str	r3, [sp, #0]
 80259ca:	2204      	movs	r2, #4
 80259cc:	ab02      	add	r3, sp, #8
 80259ce:	a904      	add	r1, sp, #16
 80259d0:	4640      	mov	r0, r8
 80259d2:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 80259d6:	f7ff fd39 	bl	802544c <MobleTransSendControl>
 80259da:	f8d8 3000 	ldr.w	r3, [r8]
 80259de:	88a1      	ldrh	r1, [r4, #4]
 80259e0:	885a      	ldrh	r2, [r3, #2]
 80259e2:	8923      	ldrh	r3, [r4, #8]
 80259e4:	9300      	str	r3, [sp, #0]
 80259e6:	9501      	str	r5, [sp, #4]
 80259e8:	88e3      	ldrh	r3, [r4, #6]
 80259ea:	4638      	mov	r0, r7
 80259ec:	f7f4 f9e8 	bl	8019dc0 <BnrgmPalCryptoSetFriendshipKeys>
 80259f0:	2302      	movs	r3, #2
 80259f2:	6026      	str	r6, [r4, #0]
 80259f4:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 80259f8:	4628      	mov	r0, r5
 80259fa:	b00f      	add	sp, #60	@ 0x3c
 80259fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025a00:	b95d      	cbnz	r5, 8025a1a <BnrgmFrndFn_FSM+0x102>
 8025a02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8025a06:	d9f7      	bls.n	80259f8 <BnrgmFrndFn_FSM+0xe0>
 8025a08:	80a5      	strh	r5, [r4, #4]
 8025a0a:	4638      	mov	r0, r7
 8025a0c:	f7f4 fa6e 	bl	8019eec <BnrgmPalCryptoDeleteFriendshipKeys>
 8025a10:	f884 506a 	strb.w	r5, [r4, #106]	@ 0x6a
 8025a14:	6026      	str	r6, [r4, #0]
 8025a16:	2501      	movs	r5, #1
 8025a18:	e7ee      	b.n	80259f8 <BnrgmFrndFn_FSM+0xe0>
 8025a1a:	3d02      	subs	r5, #2
 8025a1c:	2d01      	cmp	r5, #1
 8025a1e:	d89f      	bhi.n	8025960 <BnrgmFrndFn_FSM+0x48>
 8025a20:	2500      	movs	r5, #0
 8025a22:	f8a4 532c 	strh.w	r5, [r4, #812]	@ 0x32c
 8025a26:	4620      	mov	r0, r4
 8025a28:	f7f8 f8be 	bl	801dba8 <BnrgmFrndFnInsertFriendUpdate>
 8025a2c:	2303      	movs	r3, #3
 8025a2e:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 8025a32:	6026      	str	r6, [r4, #0]
 8025a34:	e7e0      	b.n	80259f8 <BnrgmFrndFn_FSM+0xe0>
 8025a36:	2d00      	cmp	r5, #0
 8025a38:	d1ed      	bne.n	8025a16 <BnrgmFrndFn_FSM+0xfe>
 8025a3a:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8025a3e:	8a23      	ldrh	r3, [r4, #16]
 8025a40:	2a00      	cmp	r2, #0
 8025a42:	dd10      	ble.n	8025a66 <BnrgmFrndFn_FSM+0x14e>
 8025a44:	f8d8 2000 	ldr.w	r2, [r8]
 8025a48:	8852      	ldrh	r2, [r2, #2]
 8025a4a:	429a      	cmp	r2, r3
 8025a4c:	d00b      	beq.n	8025a66 <BnrgmFrndFn_FSM+0x14e>
 8025a4e:	495a      	ldr	r1, [pc, #360]	@ (8025bb8 <BnrgmFrndFn_FSM+0x2a0>)
 8025a50:	4622      	mov	r2, r4
 8025a52:	f104 0014 	add.w	r0, r4, #20
 8025a56:	f7f1 fd6f 	bl	8017538 <MoblePalTimerCreate>
 8025a5a:	2801      	cmp	r0, #1
 8025a5c:	d803      	bhi.n	8025a66 <BnrgmFrndFn_FSM+0x14e>
 8025a5e:	6960      	ldr	r0, [r4, #20]
 8025a60:	2101      	movs	r1, #1
 8025a62:	f7f1 fdd3 	bl	801760c <MoblePalTimerStartOnce>
 8025a66:	2305      	movs	r3, #5
 8025a68:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 8025a6c:	8a23      	ldrh	r3, [r4, #16]
 8025a6e:	9300      	str	r3, [sp, #0]
 8025a70:	68e2      	ldr	r2, [r4, #12]
 8025a72:	f894 332f 	ldrb.w	r3, [r4, #815]	@ 0x32f
 8025a76:	f894 1330 	ldrb.w	r1, [r4, #816]	@ 0x330
 8025a7a:	88a0      	ldrh	r0, [r4, #4]
 8025a7c:	f7f7 f8ae 	bl	801cbdc <BnrgmLibraryFnOnFriendshipEstablished>
 8025a80:	e7ba      	b.n	80259f8 <BnrgmFrndFn_FSM+0xe0>
 8025a82:	b9a5      	cbnz	r5, 8025aae <BnrgmFrndFn_FSM+0x196>
 8025a84:	68e2      	ldr	r2, [r4, #12]
 8025a86:	429a      	cmp	r2, r3
 8025a88:	d2b6      	bcs.n	80259f8 <BnrgmFrndFn_FSM+0xe0>
 8025a8a:	88a1      	ldrh	r1, [r4, #4]
 8025a8c:	2002      	movs	r0, #2
 8025a8e:	f7e0 fd4b 	bl	8006528 <BLEMesh_FnFriendshipClearedCallback>
 8025a92:	4638      	mov	r0, r7
 8025a94:	f7f4 fa2a 	bl	8019eec <BnrgmPalCryptoDeleteFriendshipKeys>
 8025a98:	6960      	ldr	r0, [r4, #20]
 8025a9a:	b108      	cbz	r0, 8025aa0 <BnrgmFrndFn_FSM+0x188>
 8025a9c:	f7f1 fdfe 	bl	801769c <MoblePalTimerDestroy>
 8025aa0:	f44f 724d 	mov.w	r2, #820	@ 0x334
 8025aa4:	2100      	movs	r1, #0
 8025aa6:	4620      	mov	r0, r4
 8025aa8:	f003 fb80 	bl	80291ac <memset>
 8025aac:	e7b2      	b.n	8025a14 <BnrgmFrndFn_FSM+0xfc>
 8025aae:	3d02      	subs	r5, #2
 8025ab0:	2d04      	cmp	r5, #4
 8025ab2:	d87e      	bhi.n	8025bb2 <BnrgmFrndFn_FSM+0x29a>
 8025ab4:	e8df f005 	tbb	[pc, r5]
 8025ab8:	16161003 	.word	0x16161003
 8025abc:	40          	.byte	0x40
 8025abd:	00          	.byte	0x00
 8025abe:	f894 332c 	ldrb.w	r3, [r4, #812]	@ 0x32c
 8025ac2:	b14b      	cbz	r3, 8025ad8 <BnrgmFrndFn_FSM+0x1c0>
 8025ac4:	3b01      	subs	r3, #1
 8025ac6:	f884 332c 	strb.w	r3, [r4, #812]	@ 0x32c
 8025aca:	f894 332d 	ldrb.w	r3, [r4, #813]	@ 0x32d
 8025ace:	3301      	adds	r3, #1
 8025ad0:	f003 030f 	and.w	r3, r3, #15
 8025ad4:	f884 332d 	strb.w	r3, [r4, #813]	@ 0x32d
 8025ad8:	6026      	str	r6, [r4, #0]
 8025ada:	2305      	movs	r3, #5
 8025adc:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 8025ae0:	2500      	movs	r5, #0
 8025ae2:	e789      	b.n	80259f8 <BnrgmFrndFn_FSM+0xe0>
 8025ae4:	6020      	str	r0, [r4, #0]
 8025ae6:	2306      	movs	r3, #6
 8025ae8:	e7f8      	b.n	8025adc <BnrgmFrndFn_FSM+0x1c4>
 8025aea:	b985      	cbnz	r5, 8025b0e <BnrgmFrndFn_FSM+0x1f6>
 8025aec:	f894 2330 	ldrb.w	r2, [r4, #816]	@ 0x330
 8025af0:	429a      	cmp	r2, r3
 8025af2:	d281      	bcs.n	80259f8 <BnrgmFrndFn_FSM+0xe0>
 8025af4:	f894 332c 	ldrb.w	r3, [r4, #812]	@ 0x32c
 8025af8:	b913      	cbnz	r3, 8025b00 <BnrgmFrndFn_FSM+0x1e8>
 8025afa:	4620      	mov	r0, r4
 8025afc:	f7f8 f854 	bl	801dba8 <BnrgmFrndFnInsertFriendUpdate>
 8025b00:	4622      	mov	r2, r4
 8025b02:	4639      	mov	r1, r7
 8025b04:	4640      	mov	r0, r8
 8025b06:	f7ff fdd5 	bl	80256b4 <BnrgmFrndFnSendFriendPollResponse>
 8025b0a:	2304      	movs	r3, #4
 8025b0c:	e78f      	b.n	8025a2e <BnrgmFrndFn_FSM+0x116>
 8025b0e:	2d02      	cmp	r5, #2
 8025b10:	d10e      	bne.n	8025b30 <BnrgmFrndFn_FSM+0x218>
 8025b12:	f894 332c 	ldrb.w	r3, [r4, #812]	@ 0x32c
 8025b16:	b14b      	cbz	r3, 8025b2c <BnrgmFrndFn_FSM+0x214>
 8025b18:	3b01      	subs	r3, #1
 8025b1a:	f884 332c 	strb.w	r3, [r4, #812]	@ 0x32c
 8025b1e:	f894 332d 	ldrb.w	r3, [r4, #813]	@ 0x32d
 8025b22:	3301      	adds	r3, #1
 8025b24:	f003 030f 	and.w	r3, r3, #15
 8025b28:	f884 332d 	strb.w	r3, [r4, #813]	@ 0x32d
 8025b2c:	6026      	str	r6, [r4, #0]
 8025b2e:	e7d7      	b.n	8025ae0 <BnrgmFrndFn_FSM+0x1c8>
 8025b30:	2d03      	cmp	r5, #3
 8025b32:	d0fb      	beq.n	8025b2c <BnrgmFrndFn_FSM+0x214>
 8025b34:	2d06      	cmp	r5, #6
 8025b36:	d13c      	bne.n	8025bb2 <BnrgmFrndFn_FSM+0x29a>
 8025b38:	88a1      	ldrh	r1, [r4, #4]
 8025b3a:	2003      	movs	r0, #3
 8025b3c:	f7e0 fcf4 	bl	8006528 <BLEMesh_FnFriendshipClearedCallback>
 8025b40:	4638      	mov	r0, r7
 8025b42:	f7f4 f9d3 	bl	8019eec <BnrgmPalCryptoDeleteFriendshipKeys>
 8025b46:	6960      	ldr	r0, [r4, #20]
 8025b48:	b108      	cbz	r0, 8025b4e <BnrgmFrndFn_FSM+0x236>
 8025b4a:	f7f1 fda7 	bl	801769c <MoblePalTimerDestroy>
 8025b4e:	f44f 724d 	mov.w	r2, #820	@ 0x334
 8025b52:	2100      	movs	r1, #0
 8025b54:	4620      	mov	r0, r4
 8025b56:	f003 fb29 	bl	80291ac <memset>
 8025b5a:	e7c1      	b.n	8025ae0 <BnrgmFrndFn_FSM+0x1c8>
 8025b5c:	bb2d      	cbnz	r5, 8025baa <BnrgmFrndFn_FSM+0x292>
 8025b5e:	f894 2330 	ldrb.w	r2, [r4, #816]	@ 0x330
 8025b62:	429a      	cmp	r2, r3
 8025b64:	f4bf af48 	bcs.w	80259f8 <BnrgmFrndFn_FSM+0xe0>
 8025b68:	4629      	mov	r1, r5
 8025b6a:	2228      	movs	r2, #40	@ 0x28
 8025b6c:	a804      	add	r0, sp, #16
 8025b6e:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 8025b72:	f894 a068 	ldrb.w	sl, [r4, #104]	@ 0x68
 8025b76:	f894 b332 	ldrb.w	fp, [r4, #818]	@ 0x332
 8025b7a:	f003 fb17 	bl	80291ac <memset>
 8025b7e:	2330      	movs	r3, #48	@ 0x30
 8025b80:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8025b84:	2301      	movs	r3, #1
 8025b86:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8025b8a:	9300      	str	r3, [sp, #0]
 8025b8c:	2209      	movs	r2, #9
 8025b8e:	ab02      	add	r3, sp, #8
 8025b90:	a904      	add	r1, sp, #16
 8025b92:	4640      	mov	r0, r8
 8025b94:	f88d b008 	strb.w	fp, [sp, #8]
 8025b98:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8025b9c:	f88d a02c 	strb.w	sl, [sp, #44]	@ 0x2c
 8025ba0:	f8ad 9026 	strh.w	r9, [sp, #38]	@ 0x26
 8025ba4:	f7ff fc52 	bl	802544c <MobleTransSendControl>
 8025ba8:	e7af      	b.n	8025b0a <BnrgmFrndFn_FSM+0x1f2>
 8025baa:	1f2b      	subs	r3, r5, #4
 8025bac:	2b01      	cmp	r3, #1
 8025bae:	d8c1      	bhi.n	8025b34 <BnrgmFrndFn_FSM+0x21c>
 8025bb0:	e7bc      	b.n	8025b2c <BnrgmFrndFn_FSM+0x214>
 8025bb2:	2502      	movs	r5, #2
 8025bb4:	e720      	b.n	80259f8 <BnrgmFrndFn_FSM+0xe0>
 8025bb6:	bf00      	nop
 8025bb8:	080257b5 	.word	0x080257b5

08025bbc <BnrgmFrndFnProcessFrndPoll>:
 8025bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025bc0:	9c06      	ldr	r4, [sp, #24]
 8025bc2:	4615      	mov	r5, r2
 8025bc4:	4606      	mov	r6, r0
 8025bc6:	b930      	cbnz	r0, 8025bd6 <BnrgmFrndFnProcessFrndPoll+0x1a>
 8025bc8:	4b16      	ldr	r3, [pc, #88]	@ (8025c24 <BnrgmFrndFnProcessFrndPoll+0x68>)
 8025bca:	4a17      	ldr	r2, [pc, #92]	@ (8025c28 <BnrgmFrndFnProcessFrndPoll+0x6c>)
 8025bcc:	4817      	ldr	r0, [pc, #92]	@ (8025c2c <BnrgmFrndFnProcessFrndPoll+0x70>)
 8025bce:	f240 2156 	movw	r1, #598	@ 0x256
 8025bd2:	f002 fc03 	bl	80283dc <__assert_func>
 8025bd6:	2c01      	cmp	r4, #1
 8025bd8:	d11f      	bne.n	8025c1a <BnrgmFrndFnProcessFrndPoll+0x5e>
 8025bda:	781f      	ldrb	r7, [r3, #0]
 8025bdc:	2f01      	cmp	r7, #1
 8025bde:	d81c      	bhi.n	8025c1a <BnrgmFrndFnProcessFrndPoll+0x5e>
 8025be0:	4610      	mov	r0, r2
 8025be2:	8a89      	ldrh	r1, [r1, #20]
 8025be4:	f7f7 ffa7 	bl	801db36 <BnrgmFrndFnGetLpnOffset>
 8025be8:	1c42      	adds	r2, r0, #1
 8025bea:	d019      	beq.n	8025c20 <BnrgmFrndFnProcessFrndPoll+0x64>
 8025bec:	f44f 714d 	mov.w	r1, #820	@ 0x334
 8025bf0:	fb01 f400 	mul.w	r4, r1, r0
 8025bf4:	1d23      	adds	r3, r4, #4
 8025bf6:	442c      	add	r4, r5
 8025bf8:	b2c2      	uxtb	r2, r0
 8025bfa:	f894 1335 	ldrb.w	r1, [r4, #821]	@ 0x335
 8025bfe:	42b9      	cmp	r1, r7
 8025c00:	bf0e      	itee	eq
 8025c02:	2103      	moveq	r1, #3
 8025c04:	f884 7335 	strbne.w	r7, [r4, #821]	@ 0x335
 8025c08:	2102      	movne	r1, #2
 8025c0a:	9106      	str	r1, [sp, #24]
 8025c0c:	442b      	add	r3, r5
 8025c0e:	4629      	mov	r1, r5
 8025c10:	4630      	mov	r0, r6
 8025c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025c16:	f7ff be7f 	b.w	8025918 <BnrgmFrndFn_FSM>
 8025c1a:	2002      	movs	r0, #2
 8025c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025c20:	4620      	mov	r0, r4
 8025c22:	e7fb      	b.n	8025c1c <BnrgmFrndFnProcessFrndPoll+0x60>
 8025c24:	08030e80 	.word	0x08030e80
 8025c28:	0803024b 	.word	0x0803024b
 8025c2c:	08031453 	.word	0x08031453

08025c30 <BnrgmFrndFnProcessFrndRequest>:
 8025c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c34:	ed2d 8b02 	vpush	{d8}
 8025c38:	b085      	sub	sp, #20
 8025c3a:	461f      	mov	r7, r3
 8025c3c:	ee08 0a10 	vmov	s16, r0
 8025c40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025c42:	4688      	mov	r8, r1
 8025c44:	4615      	mov	r5, r2
 8025c46:	b930      	cbnz	r0, 8025c56 <BnrgmFrndFnProcessFrndRequest+0x26>
 8025c48:	4b69      	ldr	r3, [pc, #420]	@ (8025df0 <BnrgmFrndFnProcessFrndRequest+0x1c0>)
 8025c4a:	4a6a      	ldr	r2, [pc, #424]	@ (8025df4 <BnrgmFrndFnProcessFrndRequest+0x1c4>)
 8025c4c:	486a      	ldr	r0, [pc, #424]	@ (8025df8 <BnrgmFrndFnProcessFrndRequest+0x1c8>)
 8025c4e:	f240 217b 	movw	r1, #635	@ 0x27b
 8025c52:	f002 fbc3 	bl	80283dc <__assert_func>
 8025c56:	2f00      	cmp	r7, #0
 8025c58:	d067      	beq.n	8025d2a <BnrgmFrndFnProcessFrndRequest+0xfa>
 8025c5a:	2b09      	cmp	r3, #9
 8025c5c:	d965      	bls.n	8025d2a <BnrgmFrndFnProcessFrndRequest+0xfa>
 8025c5e:	7bcb      	ldrb	r3, [r1, #15]
 8025c60:	2b00      	cmp	r3, #0
 8025c62:	d162      	bne.n	8025d2a <BnrgmFrndFnProcessFrndRequest+0xfa>
 8025c64:	78a9      	ldrb	r1, [r5, #2]
 8025c66:	f44f 704d 	mov.w	r0, #820	@ 0x334
 8025c6a:	f105 0c08 	add.w	ip, r5, #8
 8025c6e:	b2da      	uxtb	r2, r3
 8025c70:	4291      	cmp	r1, r2
 8025c72:	d929      	bls.n	8025cc8 <BnrgmFrndFnProcessFrndRequest+0x98>
 8025c74:	fb00 f403 	mul.w	r4, r0, r3
 8025c78:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 8025c7c:	f83c e004 	ldrh.w	lr, [ip, r4]
 8025c80:	4596      	cmp	lr, r2
 8025c82:	461e      	mov	r6, r3
 8025c84:	f103 0301 	add.w	r3, r3, #1
 8025c88:	d1f1      	bne.n	8025c6e <BnrgmFrndFnProcessFrndRequest+0x3e>
 8025c8a:	f104 0904 	add.w	r9, r4, #4
 8025c8e:	442c      	add	r4, r5
 8025c90:	44a9      	add	r9, r5
 8025c92:	8aa3      	ldrh	r3, [r4, #20]
 8025c94:	b123      	cbz	r3, 8025ca0 <BnrgmFrndFnProcessFrndRequest+0x70>
 8025c96:	ee18 0a10 	vmov	r0, s16
 8025c9a:	4649      	mov	r1, r9
 8025c9c:	f7ff fd4e 	bl	802573c <BnrgmFrndFnSendFrndClear>
 8025ca0:	2001      	movs	r0, #1
 8025ca2:	8921      	ldrh	r1, [r4, #8]
 8025ca4:	f7e0 fc40 	bl	8006528 <BLEMesh_FnFriendshipClearedCallback>
 8025ca8:	2300      	movs	r3, #0
 8025caa:	8123      	strh	r3, [r4, #8]
 8025cac:	f44f 734d 	mov.w	r3, #820	@ 0x334
 8025cb0:	fb03 5606 	mla	r6, r3, r6, r5
 8025cb4:	69b0      	ldr	r0, [r6, #24]
 8025cb6:	b108      	cbz	r0, 8025cbc <BnrgmFrndFnProcessFrndRequest+0x8c>
 8025cb8:	f7f1 fcf0 	bl	801769c <MoblePalTimerDestroy>
 8025cbc:	f44f 724d 	mov.w	r2, #820	@ 0x334
 8025cc0:	2100      	movs	r1, #0
 8025cc2:	4648      	mov	r0, r9
 8025cc4:	f003 fa72 	bl	80291ac <memset>
 8025cc8:	78aa      	ldrb	r2, [r5, #2]
 8025cca:	2600      	movs	r6, #0
 8025ccc:	f5a5 714b 	sub.w	r1, r5, #812	@ 0x32c
 8025cd0:	f44f 734d 	mov.w	r3, #820	@ 0x334
 8025cd4:	fa5f fb86 	uxtb.w	fp, r6
 8025cd8:	455a      	cmp	r2, fp
 8025cda:	d907      	bls.n	8025cec <BnrgmFrndFnProcessFrndRequest+0xbc>
 8025cdc:	fb06 3403 	mla	r4, r6, r3, r3
 8025ce0:	1c70      	adds	r0, r6, #1
 8025ce2:	5b0c      	ldrh	r4, [r1, r4]
 8025ce4:	b944      	cbnz	r4, 8025cf8 <BnrgmFrndFnProcessFrndRequest+0xc8>
 8025ce6:	b276      	sxtb	r6, r6
 8025ce8:	1c72      	adds	r2, r6, #1
 8025cea:	d107      	bne.n	8025cfc <BnrgmFrndFnProcessFrndRequest+0xcc>
 8025cec:	2001      	movs	r0, #1
 8025cee:	b005      	add	sp, #20
 8025cf0:	ecbd 8b02 	vpop	{d8}
 8025cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025cf8:	4606      	mov	r6, r0
 8025cfa:	e7eb      	b.n	8025cd4 <BnrgmFrndFnProcessFrndRequest+0xa4>
 8025cfc:	783a      	ldrb	r2, [r7, #0]
 8025cfe:	f3c2 1341 	ubfx	r3, r2, #5, #2
 8025d02:	1e59      	subs	r1, r3, #1
 8025d04:	2902      	cmp	r1, #2
 8025d06:	bf98      	it	ls
 8025d08:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
 8025d0c:	f3c2 04c1 	ubfx	r4, r2, #3, #2
 8025d10:	bf94      	ite	ls
 8025d12:	330a      	addls	r3, #10
 8025d14:	230a      	movhi	r3, #10
 8025d16:	9300      	str	r3, [sp, #0]
 8025d18:	1e63      	subs	r3, r4, #1
 8025d1a:	2b02      	cmp	r3, #2
 8025d1c:	bf9a      	itte	ls
 8025d1e:	eb04 0484 	addls.w	r4, r4, r4, lsl #2
 8025d22:	340a      	addls	r4, #10
 8025d24:	240a      	movhi	r4, #10
 8025d26:	0753      	lsls	r3, r2, #29
 8025d28:	d101      	bne.n	8025d2e <BnrgmFrndFnProcessFrndRequest+0xfe>
 8025d2a:	2002      	movs	r0, #2
 8025d2c:	e7df      	b.n	8025cee <BnrgmFrndFnProcessFrndRequest+0xbe>
 8025d2e:	787a      	ldrb	r2, [r7, #1]
 8025d30:	2a09      	cmp	r2, #9
 8025d32:	d9fa      	bls.n	8025d2a <BnrgmFrndFnProcessFrndRequest+0xfa>
 8025d34:	f44f 734d 	mov.w	r3, #820	@ 0x334
 8025d38:	4373      	muls	r3, r6
 8025d3a:	eb05 0a03 	add.w	sl, r5, r3
 8025d3e:	2103      	movs	r1, #3
 8025d40:	f88a 2334 	strb.w	r2, [sl, #820]	@ 0x334
 8025d44:	1cb8      	adds	r0, r7, #2
 8025d46:	aa02      	add	r2, sp, #8
 8025d48:	9301      	str	r3, [sp, #4]
 8025d4a:	f7f4 ff25 	bl	801ab98 <MobleInputStreamGetBigEndian>
 8025d4e:	9a02      	ldr	r2, [sp, #8]
 8025d50:	492a      	ldr	r1, [pc, #168]	@ (8025dfc <BnrgmFrndFnProcessFrndRequest+0x1cc>)
 8025d52:	f1a2 000a 	sub.w	r0, r2, #10
 8025d56:	4288      	cmp	r0, r1
 8025d58:	d8e7      	bhi.n	8025d2a <BnrgmFrndFnProcessFrndRequest+0xfa>
 8025d5a:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8025d5e:	fb09 f202 	mul.w	r2, r9, r2
 8025d62:	f8ca 2010 	str.w	r2, [sl, #16]
 8025d66:	2102      	movs	r1, #2
 8025d68:	aa03      	add	r2, sp, #12
 8025d6a:	1d78      	adds	r0, r7, #5
 8025d6c:	f7f4 ff14 	bl	801ab98 <MobleInputStreamGetBigEndian>
 8025d70:	9903      	ldr	r1, [sp, #12]
 8025d72:	f8aa 1014 	strh.w	r1, [sl, #20]
 8025d76:	79f9      	ldrb	r1, [r7, #7]
 8025d78:	1e48      	subs	r0, r1, #1
 8025d7a:	2804      	cmp	r0, #4
 8025d7c:	d8d5      	bhi.n	8025d2a <BnrgmFrndFnProcessFrndRequest+0xfa>
 8025d7e:	f88a 1333 	strb.w	r1, [sl, #819]	@ 0x333
 8025d82:	f107 0008 	add.w	r0, r7, #8
 8025d86:	2102      	movs	r1, #2
 8025d88:	f7f4 ff06 	bl	801ab98 <MobleInputStreamGetBigEndian>
 8025d8c:	9a03      	ldr	r2, [sp, #12]
 8025d8e:	f8aa 200a 	strh.w	r2, [sl, #10]
 8025d92:	f998 2018 	ldrsb.w	r2, [r8, #24]
 8025d96:	9b00      	ldr	r3, [sp, #0]
 8025d98:	f44f 714d 	mov.w	r1, #820	@ 0x334
 8025d9c:	fb01 5606 	mla	r6, r1, r6, r5
 8025da0:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 8025da4:	fb03 4412 	mls	r4, r3, r2, r4
 8025da8:	f886 2332 	strb.w	r2, [r6, #818]	@ 0x332
 8025dac:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 8025db0:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 8025db4:	bfa4      	itt	ge
 8025db6:	f04f 090a 	movge.w	r9, #10
 8025dba:	fb94 f9f9 	sdivge	r9, r4, r9
 8025dbe:	f8a6 901c 	strh.w	r9, [r6, #28]
 8025dc2:	f8aa 2008 	strh.w	r2, [sl, #8]
 8025dc6:	f898 1042 	ldrb.w	r1, [r8, #66]	@ 0x42
 8025dca:	4658      	mov	r0, fp
 8025dcc:	f7f3 ffe2 	bl	8019d94 <BnrgmPalCryptoSetFriendshipNetKeyOffset>
 8025dd0:	9b01      	ldr	r3, [sp, #4]
 8025dd2:	2201      	movs	r2, #1
 8025dd4:	ee18 0a10 	vmov	r0, s16
 8025dd8:	3304      	adds	r3, #4
 8025dda:	9210      	str	r2, [sp, #64]	@ 0x40
 8025ddc:	442b      	add	r3, r5
 8025dde:	465a      	mov	r2, fp
 8025de0:	4629      	mov	r1, r5
 8025de2:	b005      	add	sp, #20
 8025de4:	ecbd 8b02 	vpop	{d8}
 8025de8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025dec:	f7ff bd94 	b.w	8025918 <BnrgmFrndFn_FSM>
 8025df0:	08030e80 	.word	0x08030e80
 8025df4:	08030266 	.word	0x08030266
 8025df8:	08031453 	.word	0x08031453
 8025dfc:	00034bb5 	.word	0x00034bb5

08025e00 <BnrgmFrndFnProcess>:
 8025e00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025e04:	2500      	movs	r5, #0
 8025e06:	4606      	mov	r6, r0
 8025e08:	460c      	mov	r4, r1
 8025e0a:	f44f 774d 	mov.w	r7, #820	@ 0x334
 8025e0e:	46a8      	mov	r8, r5
 8025e10:	78a3      	ldrb	r3, [r4, #2]
 8025e12:	b2ea      	uxtb	r2, r5
 8025e14:	4293      	cmp	r3, r2
 8025e16:	d802      	bhi.n	8025e1e <BnrgmFrndFnProcess+0x1e>
 8025e18:	b002      	add	sp, #8
 8025e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e1e:	fb07 4302 	mla	r3, r7, r2, r4
 8025e22:	f8cd 8000 	str.w	r8, [sp]
 8025e26:	3304      	adds	r3, #4
 8025e28:	4621      	mov	r1, r4
 8025e2a:	4630      	mov	r0, r6
 8025e2c:	f7ff fd74 	bl	8025918 <BnrgmFrndFn_FSM>
 8025e30:	3501      	adds	r5, #1
 8025e32:	e7ed      	b.n	8025e10 <BnrgmFrndFnProcess+0x10>

08025e34 <BnrgmFrndMgmtFriendshipProcess>:
 8025e34:	b508      	push	{r3, lr}
 8025e36:	4b0a      	ldr	r3, [pc, #40]	@ (8025e60 <BnrgmFrndMgmtFriendshipProcess+0x2c>)
 8025e38:	f893 20be 	ldrb.w	r2, [r3, #190]	@ 0xbe
 8025e3c:	2a01      	cmp	r2, #1
 8025e3e:	d105      	bne.n	8025e4c <BnrgmFrndMgmtFriendshipProcess+0x18>
 8025e40:	4b08      	ldr	r3, [pc, #32]	@ (8025e64 <BnrgmFrndMgmtFriendshipProcess+0x30>)
 8025e42:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	@ 0xa04
 8025e46:	f7ff ffdb 	bl	8025e00 <BnrgmFrndFnProcess>
 8025e4a:	bd08      	pop	{r3, pc}
 8025e4c:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 8025e50:	2b02      	cmp	r3, #2
 8025e52:	d0fa      	beq.n	8025e4a <BnrgmFrndMgmtFriendshipProcess+0x16>
 8025e54:	4b03      	ldr	r3, [pc, #12]	@ (8025e64 <BnrgmFrndMgmtFriendshipProcess+0x30>)
 8025e56:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	@ 0xa04
 8025e5a:	f7ed fa07 	bl	801326c <BnrgmFrndLpnProcess>
 8025e5e:	e7f4      	b.n	8025e4a <BnrgmFrndMgmtFriendshipProcess+0x16>
 8025e60:	20000314 	.word	0x20000314
 8025e64:	20002504 	.word	0x20002504

08025e68 <MobleStackProcess>:
 8025e68:	b510      	push	{r4, lr}
 8025e6a:	4c11      	ldr	r4, [pc, #68]	@ (8025eb0 <MobleStackProcess+0x48>)
 8025e6c:	f894 37ec 	ldrb.w	r3, [r4, #2028]	@ 0x7ec
 8025e70:	2b04      	cmp	r3, #4
 8025e72:	d01b      	beq.n	8025eac <MobleStackProcess+0x44>
 8025e74:	f7f9 f87c 	bl	801ef70 <BnrgmTransmitProcess>
 8025e78:	f7f4 fe14 	bl	801aaa4 <MoblePalProcess>
 8025e7c:	f504 60d0 	add.w	r0, r4, #1664	@ 0x680
 8025e80:	f7f5 fe4e 	bl	801bb20 <MobleApplicationProcess>
 8025e84:	f7f8 fa14 	bl	801e2b0 <MobleStackProcessIvUpdate>
 8025e88:	f8d4 3680 	ldr.w	r3, [r4, #1664]	@ 0x680
 8025e8c:	781b      	ldrb	r3, [r3, #0]
 8025e8e:	b16b      	cbz	r3, 8025eac <MobleStackProcess+0x44>
 8025e90:	f894 3934 	ldrb.w	r3, [r4, #2356]	@ 0x934
 8025e94:	b153      	cbz	r3, 8025eac <MobleStackProcess+0x44>
 8025e96:	f894 37ec 	ldrb.w	r3, [r4, #2028]	@ 0x7ec
 8025e9a:	2b02      	cmp	r3, #2
 8025e9c:	d001      	beq.n	8025ea2 <MobleStackProcess+0x3a>
 8025e9e:	f7e0 fb03 	bl	80064a8 <BLEMesh_ConfigurationCallback>
 8025ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025ea6:	4803      	ldr	r0, [pc, #12]	@ (8025eb4 <MobleStackProcess+0x4c>)
 8025ea8:	f7ff bfc4 	b.w	8025e34 <BnrgmFrndMgmtFriendshipProcess>
 8025eac:	bd10      	pop	{r4, pc}
 8025eae:	bf00      	nop
 8025eb0:	2000140c 	.word	0x2000140c
 8025eb4:	20001a8c 	.word	0x20001a8c

08025eb8 <MobleLibraryProcess>:
 8025eb8:	b508      	push	{r3, lr}
 8025eba:	4b05      	ldr	r3, [pc, #20]	@ (8025ed0 <MobleLibraryProcess+0x18>)
 8025ebc:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	@ 0x6f0
 8025ec0:	b11b      	cbz	r3, 8025eca <MobleLibraryProcess+0x12>
 8025ec2:	f7ff ffd1 	bl	8025e68 <MobleStackProcess>
 8025ec6:	2000      	movs	r0, #0
 8025ec8:	bd08      	pop	{r3, pc}
 8025eca:	2002      	movs	r0, #2
 8025ecc:	e7fc      	b.n	8025ec8 <MobleLibraryProcess+0x10>
 8025ece:	bf00      	nop
 8025ed0:	20002504 	.word	0x20002504

08025ed4 <BLEMesh_Process>:
 8025ed4:	f7ff bff0 	b.w	8025eb8 <MobleLibraryProcess>

08025ed8 <BnrgmFrndFnProcessFrndClear>:
 8025ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025edc:	b08e      	sub	sp, #56	@ 0x38
 8025ede:	461c      	mov	r4, r3
 8025ee0:	460f      	mov	r7, r1
 8025ee2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025ee4:	4615      	mov	r5, r2
 8025ee6:	4606      	mov	r6, r0
 8025ee8:	b930      	cbnz	r0, 8025ef8 <BnrgmFrndFnProcessFrndClear+0x20>
 8025eea:	4b3a      	ldr	r3, [pc, #232]	@ (8025fd4 <BnrgmFrndFnProcessFrndClear+0xfc>)
 8025eec:	4a3a      	ldr	r2, [pc, #232]	@ (8025fd8 <BnrgmFrndFnProcessFrndClear+0x100>)
 8025eee:	483b      	ldr	r0, [pc, #236]	@ (8025fdc <BnrgmFrndFnProcessFrndClear+0x104>)
 8025ef0:	f240 3157 	movw	r1, #855	@ 0x357
 8025ef4:	f002 fa72 	bl	80283dc <__assert_func>
 8025ef8:	2c00      	cmp	r4, #0
 8025efa:	d068      	beq.n	8025fce <BnrgmFrndFnProcessFrndClear+0xf6>
 8025efc:	2b04      	cmp	r3, #4
 8025efe:	d166      	bne.n	8025fce <BnrgmFrndFnProcessFrndClear+0xf6>
 8025f00:	aa02      	add	r2, sp, #8
 8025f02:	2102      	movs	r1, #2
 8025f04:	4620      	mov	r0, r4
 8025f06:	f7f4 fe47 	bl	801ab98 <MobleInputStreamGetBigEndian>
 8025f0a:	2102      	movs	r1, #2
 8025f0c:	1860      	adds	r0, r4, r1
 8025f0e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8025f12:	f7f4 fe41 	bl	801ab98 <MobleInputStreamGetBigEndian>
 8025f16:	78a8      	ldrb	r0, [r5, #2]
 8025f18:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8025f1c:	462a      	mov	r2, r5
 8025f1e:	2300      	movs	r3, #0
 8025f20:	fa5f f883 	uxtb.w	r8, r3
 8025f24:	4540      	cmp	r0, r8
 8025f26:	d90a      	bls.n	8025f3e <BnrgmFrndFnProcessFrndClear+0x66>
 8025f28:	8911      	ldrh	r1, [r2, #8]
 8025f2a:	4551      	cmp	r1, sl
 8025f2c:	d10b      	bne.n	8025f46 <BnrgmFrndFnProcessFrndClear+0x6e>
 8025f2e:	8951      	ldrh	r1, [r2, #10]
 8025f30:	eba9 0101 	sub.w	r1, r9, r1
 8025f34:	29ff      	cmp	r1, #255	@ 0xff
 8025f36:	dc06      	bgt.n	8025f46 <BnrgmFrndFnProcessFrndClear+0x6e>
 8025f38:	b25c      	sxtb	r4, r3
 8025f3a:	1c63      	adds	r3, r4, #1
 8025f3c:	d107      	bne.n	8025f4e <BnrgmFrndFnProcessFrndClear+0x76>
 8025f3e:	2001      	movs	r0, #1
 8025f40:	b00e      	add	sp, #56	@ 0x38
 8025f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025f46:	3301      	adds	r3, #1
 8025f48:	f502 724d 	add.w	r2, r2, #820	@ 0x334
 8025f4c:	e7e8      	b.n	8025f20 <BnrgmFrndFnProcessFrndClear+0x48>
 8025f4e:	f44f 734d 	mov.w	r3, #820	@ 0x334
 8025f52:	435c      	muls	r4, r3
 8025f54:	f104 0a04 	add.w	sl, r4, #4
 8025f58:	442c      	add	r4, r5
 8025f5a:	2228      	movs	r2, #40	@ 0x28
 8025f5c:	2100      	movs	r1, #0
 8025f5e:	a804      	add	r0, sp, #16
 8025f60:	f003 f924 	bl	80291ac <memset>
 8025f64:	8921      	ldrh	r1, [r4, #8]
 8025f66:	2202      	movs	r2, #2
 8025f68:	a803      	add	r0, sp, #12
 8025f6a:	f7f4 fe3c 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 8025f6e:	2310      	movs	r3, #16
 8025f70:	2202      	movs	r2, #2
 8025f72:	4649      	mov	r1, r9
 8025f74:	f10d 000e 	add.w	r0, sp, #14
 8025f78:	f7f4 fe35 	bl	801abe6 <MobleOutputStreamPutBigEndian>
 8025f7c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8025f80:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
 8025f84:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8025f88:	8abb      	ldrh	r3, [r7, #20]
 8025f8a:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8025f8e:	7bfb      	ldrb	r3, [r7, #15]
 8025f90:	4a13      	ldr	r2, [pc, #76]	@ (8025fe0 <BnrgmFrndFnProcessFrndClear+0x108>)
 8025f92:	44aa      	add	sl, r5
 8025f94:	b10b      	cbz	r3, 8025f9a <BnrgmFrndFnProcessFrndClear+0xc2>
 8025f96:	f892 30b5 	ldrb.w	r3, [r2, #181]	@ 0xb5
 8025f9a:	f88d 301f 	strb.w	r3, [sp, #31]
 8025f9e:	f892 30b6 	ldrb.w	r3, [r2, #182]	@ 0xb6
 8025fa2:	3301      	adds	r3, #1
 8025fa4:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8025fa8:	2304      	movs	r3, #4
 8025faa:	9300      	str	r3, [sp, #0]
 8025fac:	a904      	add	r1, sp, #16
 8025fae:	ab03      	add	r3, sp, #12
 8025fb0:	2206      	movs	r2, #6
 8025fb2:	4630      	mov	r0, r6
 8025fb4:	f7ff fa4a 	bl	802544c <MobleTransSendControl>
 8025fb8:	2306      	movs	r3, #6
 8025fba:	9316      	str	r3, [sp, #88]	@ 0x58
 8025fbc:	4642      	mov	r2, r8
 8025fbe:	4653      	mov	r3, sl
 8025fc0:	4629      	mov	r1, r5
 8025fc2:	4630      	mov	r0, r6
 8025fc4:	b00e      	add	sp, #56	@ 0x38
 8025fc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025fca:	f7ff bca5 	b.w	8025918 <BnrgmFrndFn_FSM>
 8025fce:	2002      	movs	r0, #2
 8025fd0:	e7b6      	b.n	8025f40 <BnrgmFrndFnProcessFrndClear+0x68>
 8025fd2:	bf00      	nop
 8025fd4:	08030e80 	.word	0x08030e80
 8025fd8:	08030284 	.word	0x08030284
 8025fdc:	08031453 	.word	0x08031453
 8025fe0:	20000314 	.word	0x20000314

08025fe4 <BnrgmFrndFnProcessFrndSubscrListRem>:
 8025fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025fe8:	b087      	sub	sp, #28
 8025fea:	4614      	mov	r4, r2
 8025fec:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8025fee:	4699      	mov	r9, r3
 8025ff0:	4682      	mov	sl, r0
 8025ff2:	b930      	cbnz	r0, 8026002 <BnrgmFrndFnProcessFrndSubscrListRem+0x1e>
 8025ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80260b0 <BnrgmFrndFnProcessFrndSubscrListRem+0xcc>)
 8025ff6:	4a2f      	ldr	r2, [pc, #188]	@ (80260b4 <BnrgmFrndFnProcessFrndSubscrListRem+0xd0>)
 8025ff8:	482f      	ldr	r0, [pc, #188]	@ (80260b8 <BnrgmFrndFnProcessFrndSubscrListRem+0xd4>)
 8025ffa:	f240 4114 	movw	r1, #1044	@ 0x414
 8025ffe:	f002 f9ed 	bl	80283dc <__assert_func>
 8026002:	2b00      	cmp	r3, #0
 8026004:	d052      	beq.n	80260ac <BnrgmFrndFnProcessFrndSubscrListRem+0xc8>
 8026006:	2f02      	cmp	r7, #2
 8026008:	d950      	bls.n	80260ac <BnrgmFrndFnProcessFrndSubscrListRem+0xc8>
 802600a:	07fa      	lsls	r2, r7, #31
 802600c:	d54e      	bpl.n	80260ac <BnrgmFrndFnProcessFrndSubscrListRem+0xc8>
 802600e:	8a89      	ldrh	r1, [r1, #20]
 8026010:	4620      	mov	r0, r4
 8026012:	f7f7 fd90 	bl	801db36 <BnrgmFrndFnGetLpnOffset>
 8026016:	1c43      	adds	r3, r0, #1
 8026018:	4606      	mov	r6, r0
 802601a:	d047      	beq.n	80260ac <BnrgmFrndFnProcessFrndSubscrListRem+0xc8>
 802601c:	f44f 754d 	mov.w	r5, #820	@ 0x334
 8026020:	4345      	muls	r5, r0
 8026022:	1963      	adds	r3, r4, r5
 8026024:	f899 b000 	ldrb.w	fp, [r9]
 8026028:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 802602c:	455b      	cmp	r3, fp
 802602e:	d02a      	beq.n	8026086 <BnrgmFrndFnProcessFrndSubscrListRem+0xa2>
 8026030:	087b      	lsrs	r3, r7, #1
 8026032:	351c      	adds	r5, #28
 8026034:	2700      	movs	r7, #0
 8026036:	9303      	str	r3, [sp, #12]
 8026038:	4425      	add	r5, r4
 802603a:	46b8      	mov	r8, r7
 802603c:	2102      	movs	r1, #2
 802603e:	fb01 9008 	mla	r0, r1, r8, r9
 8026042:	aa05      	add	r2, sp, #20
 8026044:	3001      	adds	r0, #1
 8026046:	f7f4 fda7 	bl	801ab98 <MobleInputStreamGetBigEndian>
 802604a:	f8bd c014 	ldrh.w	ip, [sp, #20]
 802604e:	4629      	mov	r1, r5
 8026050:	2206      	movs	r2, #6
 8026052:	2300      	movs	r3, #0
 8026054:	f831 0f02 	ldrh.w	r0, [r1, #2]!
 8026058:	b328      	cbz	r0, 80260a6 <BnrgmFrndFnProcessFrndSubscrListRem+0xc2>
 802605a:	4584      	cmp	ip, r0
 802605c:	d100      	bne.n	8026060 <BnrgmFrndFnProcessFrndSubscrListRem+0x7c>
 802605e:	800b      	strh	r3, [r1, #0]
 8026060:	3a01      	subs	r2, #1
 8026062:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 8026066:	d1f5      	bne.n	8026054 <BnrgmFrndFnProcessFrndSubscrListRem+0x70>
 8026068:	2f06      	cmp	r7, #6
 802606a:	d006      	beq.n	802607a <BnrgmFrndFnProcessFrndSubscrListRem+0x96>
 802606c:	9a03      	ldr	r2, [sp, #12]
 802606e:	f108 0801 	add.w	r8, r8, #1
 8026072:	fa5f f888 	uxtb.w	r8, r8
 8026076:	4590      	cmp	r8, r2
 8026078:	d3e0      	bcc.n	802603c <BnrgmFrndFnProcessFrndSubscrListRem+0x58>
 802607a:	f44f 734d 	mov.w	r3, #820	@ 0x334
 802607e:	fb03 4306 	mla	r3, r3, r6, r4
 8026082:	f883 b336 	strb.w	fp, [r3, #822]	@ 0x336
 8026086:	f44f 734d 	mov.w	r3, #820	@ 0x334
 802608a:	2205      	movs	r2, #5
 802608c:	fb03 4306 	mla	r3, r3, r6, r4
 8026090:	9200      	str	r2, [sp, #0]
 8026092:	3304      	adds	r3, #4
 8026094:	b2f2      	uxtb	r2, r6
 8026096:	4621      	mov	r1, r4
 8026098:	4650      	mov	r0, sl
 802609a:	f7ff fc3d 	bl	8025918 <BnrgmFrndFn_FSM>
 802609e:	2000      	movs	r0, #0
 80260a0:	b007      	add	sp, #28
 80260a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260a6:	3701      	adds	r7, #1
 80260a8:	b2ff      	uxtb	r7, r7
 80260aa:	e7d9      	b.n	8026060 <BnrgmFrndFnProcessFrndSubscrListRem+0x7c>
 80260ac:	2002      	movs	r0, #2
 80260ae:	e7f7      	b.n	80260a0 <BnrgmFrndFnProcessFrndSubscrListRem+0xbc>
 80260b0:	08030e80 	.word	0x08030e80
 80260b4:	080302a0 	.word	0x080302a0
 80260b8:	08031453 	.word	0x08031453

080260bc <BnrgmFrndFnProcessFrndSubscrListAdd>:
 80260bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80260c0:	b087      	sub	sp, #28
 80260c2:	4614      	mov	r4, r2
 80260c4:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80260c6:	4698      	mov	r8, r3
 80260c8:	4681      	mov	r9, r0
 80260ca:	b930      	cbnz	r0, 80260da <BnrgmFrndFnProcessFrndSubscrListAdd+0x1e>
 80260cc:	4b32      	ldr	r3, [pc, #200]	@ (8026198 <BnrgmFrndFnProcessFrndSubscrListAdd+0xdc>)
 80260ce:	4a33      	ldr	r2, [pc, #204]	@ (802619c <BnrgmFrndFnProcessFrndSubscrListAdd+0xe0>)
 80260d0:	4833      	ldr	r0, [pc, #204]	@ (80261a0 <BnrgmFrndFnProcessFrndSubscrListAdd+0xe4>)
 80260d2:	f240 31c1 	movw	r1, #961	@ 0x3c1
 80260d6:	f002 f981 	bl	80283dc <__assert_func>
 80260da:	2b00      	cmp	r3, #0
 80260dc:	d05a      	beq.n	8026194 <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 80260de:	2f02      	cmp	r7, #2
 80260e0:	d958      	bls.n	8026194 <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 80260e2:	07f8      	lsls	r0, r7, #31
 80260e4:	d556      	bpl.n	8026194 <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 80260e6:	4610      	mov	r0, r2
 80260e8:	8a89      	ldrh	r1, [r1, #20]
 80260ea:	f7f7 fd24 	bl	801db36 <BnrgmFrndFnGetLpnOffset>
 80260ee:	1c42      	adds	r2, r0, #1
 80260f0:	4605      	mov	r5, r0
 80260f2:	d04f      	beq.n	8026194 <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 80260f4:	f44f 764d 	mov.w	r6, #820	@ 0x334
 80260f8:	4346      	muls	r6, r0
 80260fa:	19a3      	adds	r3, r4, r6
 80260fc:	f898 b000 	ldrb.w	fp, [r8]
 8026100:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8026104:	455b      	cmp	r3, fp
 8026106:	d033      	beq.n	8026170 <BnrgmFrndFnProcessFrndSubscrListAdd+0xb4>
 8026108:	087b      	lsrs	r3, r7, #1
 802610a:	361c      	adds	r6, #28
 802610c:	f44f 7acd 	mov.w	sl, #410	@ 0x19a
 8026110:	9303      	str	r3, [sp, #12]
 8026112:	4426      	add	r6, r4
 8026114:	2700      	movs	r7, #0
 8026116:	fb0a fa00 	mul.w	sl, sl, r0
 802611a:	2102      	movs	r1, #2
 802611c:	fb01 8007 	mla	r0, r1, r7, r8
 8026120:	aa05      	add	r2, sp, #20
 8026122:	3001      	adds	r0, #1
 8026124:	f7f4 fd38 	bl	801ab98 <MobleInputStreamGetBigEndian>
 8026128:	2300      	movs	r3, #0
 802612a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 802612e:	46b4      	mov	ip, r6
 8026130:	4619      	mov	r1, r3
 8026132:	f04f 32ff 	mov.w	r2, #4294967295
 8026136:	f83c ef02 	ldrh.w	lr, [ip, #2]!
 802613a:	f1be 0f00 	cmp.w	lr, #0
 802613e:	d027      	beq.n	8026190 <BnrgmFrndFnProcessFrndSubscrListAdd+0xd4>
 8026140:	4570      	cmp	r0, lr
 8026142:	bf08      	it	eq
 8026144:	2101      	moveq	r1, #1
 8026146:	3301      	adds	r3, #1
 8026148:	2b06      	cmp	r3, #6
 802614a:	d1f4      	bne.n	8026136 <BnrgmFrndFnProcessFrndSubscrListAdd+0x7a>
 802614c:	1c53      	adds	r3, r2, #1
 802614e:	d009      	beq.n	8026164 <BnrgmFrndFnProcessFrndSubscrListAdd+0xa8>
 8026150:	b919      	cbnz	r1, 802615a <BnrgmFrndFnProcessFrndSubscrListAdd+0x9e>
 8026152:	4452      	add	r2, sl
 8026154:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8026158:	83d0      	strh	r0, [r2, #30]
 802615a:	9b03      	ldr	r3, [sp, #12]
 802615c:	3701      	adds	r7, #1
 802615e:	b2ff      	uxtb	r7, r7
 8026160:	429f      	cmp	r7, r3
 8026162:	d3da      	bcc.n	802611a <BnrgmFrndFnProcessFrndSubscrListAdd+0x5e>
 8026164:	f44f 734d 	mov.w	r3, #820	@ 0x334
 8026168:	fb03 4305 	mla	r3, r3, r5, r4
 802616c:	f883 b336 	strb.w	fp, [r3, #822]	@ 0x336
 8026170:	f44f 734d 	mov.w	r3, #820	@ 0x334
 8026174:	2204      	movs	r2, #4
 8026176:	fb03 4305 	mla	r3, r3, r5, r4
 802617a:	9200      	str	r2, [sp, #0]
 802617c:	4413      	add	r3, r2
 802617e:	4621      	mov	r1, r4
 8026180:	b2ea      	uxtb	r2, r5
 8026182:	4648      	mov	r0, r9
 8026184:	f7ff fbc8 	bl	8025918 <BnrgmFrndFn_FSM>
 8026188:	2000      	movs	r0, #0
 802618a:	b007      	add	sp, #28
 802618c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026190:	b25a      	sxtb	r2, r3
 8026192:	e7d8      	b.n	8026146 <BnrgmFrndFnProcessFrndSubscrListAdd+0x8a>
 8026194:	2002      	movs	r0, #2
 8026196:	e7f8      	b.n	802618a <BnrgmFrndFnProcessFrndSubscrListAdd+0xce>
 8026198:	08030e80 	.word	0x08030e80
 802619c:	080302c4 	.word	0x080302c4
 80261a0:	08031453 	.word	0x08031453

080261a4 <MobleTransSarSendAck.isra.0>:
 80261a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80261a8:	b090      	sub	sp, #64	@ 0x40
 80261aa:	2500      	movs	r5, #0
 80261ac:	4606      	mov	r6, r0
 80261ae:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80261b0:	9500      	str	r5, [sp, #0]
 80261b2:	f8ad 5004 	strh.w	r5, [sp, #4]
 80261b6:	f88d 5006 	strb.w	r5, [sp, #6]
 80261ba:	f7f1 f817 	bl	80171ec <htobe32>
 80261be:	460c      	mov	r4, r1
 80261c0:	4690      	mov	r8, r2
 80261c2:	4682      	mov	sl, r0
 80261c4:	2228      	movs	r2, #40	@ 0x28
 80261c6:	4629      	mov	r1, r5
 80261c8:	a806      	add	r0, sp, #24
 80261ca:	461f      	mov	r7, r3
 80261cc:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 80261d0:	f002 ffec 	bl	80291ac <memset>
 80261d4:	2302      	movs	r3, #2
 80261d6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80261da:	f89d 3068 	ldrb.w	r3, [sp, #104]	@ 0x68
 80261de:	f88d 300b 	strb.w	r3, [sp, #11]
 80261e2:	a802      	add	r0, sp, #8
 80261e4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80261e8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80261ec:	4669      	mov	r1, sp
 80261ee:	f88d 500a 	strb.w	r5, [sp, #10]
 80261f2:	f7f5 fe05 	bl	801be00 <MobleTransportRenderHdr>
 80261f6:	2308      	movs	r3, #8
 80261f8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80261fc:	4b17      	ldr	r3, [pc, #92]	@ (802625c <MobleTransSarSendAck.isra.0+0xb8>)
 80261fe:	f8cd a003 	str.w	sl, [sp, #3]
 8026202:	f893 20b5 	ldrb.w	r2, [r3, #181]	@ 0xb5
 8026206:	f893 30b6 	ldrb.w	r3, [r3, #182]	@ 0xb6
 802620a:	f88d 2027 	strb.w	r2, [sp, #39]	@ 0x27
 802620e:	3301      	adds	r3, #1
 8026210:	4648      	mov	r0, r9
 8026212:	f88d 303b 	strb.w	r3, [sp, #59]	@ 0x3b
 8026216:	f8ad 402e 	strh.w	r4, [sp, #46]	@ 0x2e
 802621a:	f8ad 802c 	strh.w	r8, [sp, #44]	@ 0x2c
 802621e:	f7f3 ff49 	bl	801a0b4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8026222:	f88d 0034 	strb.w	r0, [sp, #52]	@ 0x34
 8026226:	4638      	mov	r0, r7
 8026228:	f7f3 ff5e 	bl	801a0e8 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 802622c:	6833      	ldr	r3, [r6, #0]
 802622e:	f88d 0035 	strb.w	r0, [sp, #53]	@ 0x35
 8026232:	885a      	ldrh	r2, [r3, #2]
 8026234:	f8ad 9036 	strh.w	r9, [sp, #54]	@ 0x36
 8026238:	4294      	cmp	r4, r2
 802623a:	f8ad 7038 	strh.w	r7, [sp, #56]	@ 0x38
 802623e:	d303      	bcc.n	8026248 <MobleTransSarSendAck.isra.0+0xa4>
 8026240:	7f1b      	ldrb	r3, [r3, #28]
 8026242:	4413      	add	r3, r2
 8026244:	429c      	cmp	r4, r3
 8026246:	db05      	blt.n	8026254 <MobleTransSarSendAck.isra.0+0xb0>
 8026248:	2307      	movs	r3, #7
 802624a:	466a      	mov	r2, sp
 802624c:	a906      	add	r1, sp, #24
 802624e:	4630      	mov	r0, r6
 8026250:	f7fb fd7e 	bl	8021d50 <MobleNetworkSendData>
 8026254:	b010      	add	sp, #64	@ 0x40
 8026256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802625a:	bf00      	nop
 802625c:	20000314 	.word	0x20000314

08026260 <MobleTransSarAssemble>:
 8026260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026264:	b0b9      	sub	sp, #228	@ 0xe4
 8026266:	460c      	mov	r4, r1
 8026268:	930b      	str	r3, [sp, #44]	@ 0x2c
 802626a:	6909      	ldr	r1, [r1, #16]
 802626c:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 80264f8 <MobleTransSarAssemble+0x298>
 8026270:	4615      	mov	r5, r2
 8026272:	8892      	ldrh	r2, [r2, #4]
 8026274:	f421 53ff 	bic.w	r3, r1, #8160	@ 0x1fe0
 8026278:	f3c1 010c 	ubfx	r1, r1, #0, #13
 802627c:	428a      	cmp	r2, r1
 802627e:	f023 031f 	bic.w	r3, r3, #31
 8026282:	4413      	add	r3, r2
 8026284:	bf94      	ite	ls
 8026286:	2200      	movls	r2, #0
 8026288:	2201      	movhi	r2, #1
 802628a:	eba3 3342 	sub.w	r3, r3, r2, lsl #13
 802628e:	4606      	mov	r6, r0
 8026290:	f8b8 094c 	ldrh.w	r0, [r8, #2380]	@ 0x94c
 8026294:	930a      	str	r3, [sp, #40]	@ 0x28
 8026296:	f7f4 faeb 	bl	801a870 <MobleMemAlloc>
 802629a:	4607      	mov	r7, r0
 802629c:	b150      	cbz	r0, 80262b4 <MobleTransSarAssemble+0x54>
 802629e:	f8b8 094e 	ldrh.w	r0, [r8, #2382]	@ 0x94e
 80262a2:	f7f4 fae5 	bl	801a870 <MobleMemAlloc>
 80262a6:	9008      	str	r0, [sp, #32]
 80262a8:	2800      	cmp	r0, #0
 80262aa:	f040 8120 	bne.w	80264ee <MobleTransSarAssemble+0x28e>
 80262ae:	4638      	mov	r0, r7
 80262b0:	f7f4 fb68 	bl	801a984 <MobleMemFree>
 80262b4:	2302      	movs	r3, #2
 80262b6:	e085      	b.n	80263c4 <MobleTransSarAssemble+0x164>
 80262b8:	79aa      	ldrb	r2, [r5, #6]
 80262ba:	454a      	cmp	r2, r9
 80262bc:	d142      	bne.n	8026344 <MobleTransSarAssemble+0xe4>
 80262be:	a938      	add	r1, sp, #224	@ 0xe0
 80262c0:	eb01 0189 	add.w	r1, r1, r9, lsl #2
 80262c4:	6922      	ldr	r2, [r4, #16]
 80262c6:	f841 2c8c 	str.w	r2, [r1, #-140]
 80262ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80262cc:	f8dd a108 	ldr.w	sl, [sp, #264]	@ 0x108
 80262d0:	2a00      	cmp	r2, #0
 80262d2:	f000 80ff 	beq.w	80264d4 <MobleTransSarAssemble+0x274>
 80262d6:	4611      	mov	r1, r2
 80262d8:	4652      	mov	r2, sl
 80262da:	eb07 000b 	add.w	r0, r7, fp
 80262de:	f002 fff6 	bl	80292ce <memcpy>
 80262e2:	79ea      	ldrb	r2, [r5, #7]
 80262e4:	454a      	cmp	r2, r9
 80262e6:	44d3      	add	fp, sl
 80262e8:	f109 0301 	add.w	r3, r9, #1
 80262ec:	f040 80fb 	bne.w	80264e6 <MobleTransSarAssemble+0x286>
 80262f0:	68f3      	ldr	r3, [r6, #12]
 80262f2:	3b01      	subs	r3, #1
 80262f4:	60f3      	str	r3, [r6, #12]
 80262f6:	f8b4 3040 	ldrh.w	r3, [r4, #64]	@ 0x40
 80262fa:	f413 7800 	ands.w	r8, r3, #512	@ 0x200
 80262fe:	f000 80a1 	beq.w	8026444 <MobleTransSarAssemble+0x1e4>
 8026302:	7ba3      	ldrb	r3, [r4, #14]
 8026304:	2b00      	cmp	r3, #0
 8026306:	d048      	beq.n	802639a <MobleTransSarAssemble+0x13a>
 8026308:	2200      	movs	r2, #0
 802630a:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802630e:	2b00      	cmp	r3, #0
 8026310:	dd16      	ble.n	8026340 <MobleTransSarAssemble+0xe0>
 8026312:	b112      	cbz	r2, 802631a <MobleTransSarAssemble+0xba>
 8026314:	6833      	ldr	r3, [r6, #0]
 8026316:	885b      	ldrh	r3, [r3, #2]
 8026318:	82e3      	strh	r3, [r4, #22]
 802631a:	79e9      	ldrb	r1, [r5, #7]
 802631c:	2301      	movs	r3, #1
 802631e:	3101      	adds	r1, #1
 8026320:	408b      	lsls	r3, r1
 8026322:	3b01      	subs	r3, #1
 8026324:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8026328:	88ab      	ldrh	r3, [r5, #4]
 802632a:	9301      	str	r3, [sp, #4]
 802632c:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 8026330:	9300      	str	r3, [sp, #0]
 8026332:	8ae2      	ldrh	r2, [r4, #22]
 8026334:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8026338:	8aa1      	ldrh	r1, [r4, #20]
 802633a:	4630      	mov	r0, r6
 802633c:	f7ff ff32 	bl	80261a4 <MobleTransSarSendAck.isra.0>
 8026340:	2300      	movs	r3, #0
 8026342:	e037      	b.n	80263b4 <MobleTransSarAssemble+0x154>
 8026344:	222c      	movs	r2, #44	@ 0x2c
 8026346:	435a      	muls	r2, r3
 8026348:	9209      	str	r2, [sp, #36]	@ 0x24
 802634a:	f8d8 c2e0 	ldr.w	ip, [r8, #736]	@ 0x2e0
 802634e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8026350:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8026354:	4462      	add	r2, ip
 8026356:	2900      	cmp	r1, #0
 8026358:	f000 80bd 	beq.w	80264d6 <MobleTransSarAssemble+0x276>
 802635c:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 8026360:	8aa1      	ldrh	r1, [r4, #20]
 8026362:	458e      	cmp	lr, r1
 8026364:	f040 80b7 	bne.w	80264d6 <MobleTransSarAssemble+0x276>
 8026368:	6851      	ldr	r1, [r2, #4]
 802636a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802636c:	4281      	cmp	r1, r0
 802636e:	f040 80b2 	bne.w	80264d6 <MobleTransSarAssemble+0x276>
 8026372:	7c91      	ldrb	r1, [r2, #18]
 8026374:	4549      	cmp	r1, r9
 8026376:	f040 80ae 	bne.w	80264d6 <MobleTransSarAssemble+0x276>
 802637a:	ab38      	add	r3, sp, #224	@ 0xe0
 802637c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8026380:	f8d2 a028 	ldr.w	sl, [r2, #40]	@ 0x28
 8026384:	f102 0115 	add.w	r1, r2, #21
 8026388:	6892      	ldr	r2, [r2, #8]
 802638a:	f843 2c8c 	str.w	r2, [r3, #-140]
 802638e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026390:	f04f 0300 	mov.w	r3, #0
 8026394:	f80c 3002 	strb.w	r3, [ip, r2]
 8026398:	e79e      	b.n	80262d8 <MobleTransSarAssemble+0x78>
 802639a:	6832      	ldr	r2, [r6, #0]
 802639c:	f892 a01c 	ldrb.w	sl, [r2, #28]
 80263a0:	8aa2      	ldrh	r2, [r4, #20]
 80263a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80263a4:	4698      	mov	r8, r3
 80263a6:	2302      	movs	r3, #2
 80263a8:	fa5f f288 	uxtb.w	r2, r8
 80263ac:	4552      	cmp	r2, sl
 80263ae:	d30d      	bcc.n	80263cc <MobleTransSarAssemble+0x16c>
 80263b0:	2b01      	cmp	r3, #1
 80263b2:	d035      	beq.n	8026420 <MobleTransSarAssemble+0x1c0>
 80263b4:	4638      	mov	r0, r7
 80263b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80263b8:	f7f4 fae4 	bl	801a984 <MobleMemFree>
 80263bc:	9808      	ldr	r0, [sp, #32]
 80263be:	f7f4 fae1 	bl	801a984 <MobleMemFree>
 80263c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80263c4:	4618      	mov	r0, r3
 80263c6:	b039      	add	sp, #228	@ 0xe4
 80263c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80263cc:	f894 0042 	ldrb.w	r0, [r4, #66]	@ 0x42
 80263d0:	8aa2      	ldrh	r2, [r4, #20]
 80263d2:	f7fb f909 	bl	80215e8 <MobleConfigModel_KR_UseNewKeyDec>
 80263d6:	6833      	ldr	r3, [r6, #0]
 80263d8:	f895 c001 	ldrb.w	ip, [r5, #1]
 80263dc:	9005      	str	r0, [sp, #20]
 80263de:	330c      	adds	r3, #12
 80263e0:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80263e4:	9b08      	ldr	r3, [sp, #32]
 80263e6:	78a9      	ldrb	r1, [r5, #2]
 80263e8:	9702      	str	r7, [sp, #8]
 80263ea:	e9cd b303 	strd	fp, r3, [sp, #12]
 80263ee:	fa12 f288 	uxtah	r2, r2, r8
 80263f2:	8ae3      	ldrh	r3, [r4, #22]
 80263f4:	b292      	uxth	r2, r2
 80263f6:	f1bc 0000 	subs.w	r0, ip, #0
 80263fa:	e9cd 2300 	strd	r2, r3, [sp]
 80263fe:	bf18      	it	ne
 8026400:	2001      	movne	r0, #1
 8026402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026404:	78ea      	ldrb	r2, [r5, #3]
 8026406:	f7f4 fff9 	bl	801b3fc <MoblePalCryptoDecryptApp>
 802640a:	fa1f f988 	uxth.w	r9, r8
 802640e:	4603      	mov	r3, r0
 8026410:	f108 0801 	add.w	r8, r8, #1
 8026414:	2800      	cmp	r0, #0
 8026416:	d1c7      	bne.n	80263a8 <MobleTransSarAssemble+0x148>
 8026418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802641a:	4499      	add	r9, r3
 802641c:	f8a4 9014 	strh.w	r9, [r4, #20]
 8026420:	78eb      	ldrb	r3, [r5, #3]
 8026422:	2b00      	cmp	r3, #0
 8026424:	bf14      	ite	ne
 8026426:	2308      	movne	r3, #8
 8026428:	2304      	moveq	r3, #4
 802642a:	ebab 0303 	sub.w	r3, fp, r3
 802642e:	9300      	str	r3, [sp, #0]
 8026430:	462a      	mov	r2, r5
 8026432:	9b08      	ldr	r3, [sp, #32]
 8026434:	4621      	mov	r1, r4
 8026436:	4630      	mov	r0, r6
 8026438:	f7f5 f94c 	bl	801b6d4 <MobleApplicationProcessPacket>
 802643c:	2801      	cmp	r0, #1
 802643e:	4603      	mov	r3, r0
 8026440:	d8b8      	bhi.n	80263b4 <MobleTransSarAssemble+0x154>
 8026442:	e761      	b.n	8026308 <MobleTransSarAssemble+0xa8>
 8026444:	055b      	lsls	r3, r3, #21
 8026446:	f57f af5f 	bpl.w	8026308 <MobleTransSarAssemble+0xa8>
 802644a:	2301      	movs	r3, #1
 802644c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8026450:	78eb      	ldrb	r3, [r5, #3]
 8026452:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
 8026456:	78ab      	ldrb	r3, [r5, #2]
 8026458:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 802645c:	786b      	ldrb	r3, [r5, #1]
 802645e:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
 8026462:	224c      	movs	r2, #76	@ 0x4c
 8026464:	88ab      	ldrh	r3, [r5, #4]
 8026466:	f88d 903c 	strb.w	r9, [sp, #60]	@ 0x3c
 802646a:	4621      	mov	r1, r4
 802646c:	a825      	add	r0, sp, #148	@ 0x94
 802646e:	f8ad 3039 	strh.w	r3, [sp, #57]	@ 0x39
 8026472:	f002 ff2c 	bl	80292ce <memcpy>
 8026476:	46c1      	mov	r9, r8
 8026478:	fa5f fa88 	uxtb.w	sl, r8
 802647c:	a911      	add	r1, sp, #68	@ 0x44
 802647e:	a80d      	add	r0, sp, #52	@ 0x34
 8026480:	f88d a03b 	strb.w	sl, [sp, #59]	@ 0x3b
 8026484:	f7f5 fcbc 	bl	801be00 <MobleTransportRenderHdr>
 8026488:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 802648c:	fb19 fa0a 	smulbb	sl, r9, sl
 8026490:	4543      	cmp	r3, r8
 8026492:	fa5f fa8a 	uxtb.w	sl, sl
 8026496:	ab15      	add	r3, sp, #84	@ 0x54
 8026498:	bf0c      	ite	eq
 802649a:	ebab 090a 	subeq.w	r9, fp, sl
 802649e:	f04f 090c 	movne.w	r9, #12
 80264a2:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80264a6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80264a8:	464a      	mov	r2, r9
 80264aa:	eb07 010a 	add.w	r1, r7, sl
 80264ae:	a812      	add	r0, sp, #72	@ 0x48
 80264b0:	f002 ff0d 	bl	80292ce <memcpy>
 80264b4:	f109 0304 	add.w	r3, r9, #4
 80264b8:	9300      	str	r3, [sp, #0]
 80264ba:	aa0d      	add	r2, sp, #52	@ 0x34
 80264bc:	ab11      	add	r3, sp, #68	@ 0x44
 80264be:	a925      	add	r1, sp, #148	@ 0x94
 80264c0:	4630      	mov	r0, r6
 80264c2:	f7f7 fd25 	bl	801df10 <BnrgmFrndMgmtQueLpnPkt>
 80264c6:	79eb      	ldrb	r3, [r5, #7]
 80264c8:	f108 0801 	add.w	r8, r8, #1
 80264cc:	4543      	cmp	r3, r8
 80264ce:	dad3      	bge.n	8026478 <MobleTransSarAssemble+0x218>
 80264d0:	2201      	movs	r2, #1
 80264d2:	e71a      	b.n	802630a <MobleTransSarAssemble+0xaa>
 80264d4:	3b01      	subs	r3, #1
 80264d6:	3301      	adds	r3, #1
 80264d8:	f898 22dc 	ldrb.w	r2, [r8, #732]	@ 0x2dc
 80264dc:	429a      	cmp	r2, r3
 80264de:	f73f aeeb 	bgt.w	80262b8 <MobleTransSarAssemble+0x58>
 80264e2:	2302      	movs	r3, #2
 80264e4:	e766      	b.n	80263b4 <MobleTransSarAssemble+0x154>
 80264e6:	4699      	mov	r9, r3
 80264e8:	f04f 33ff 	mov.w	r3, #4294967295
 80264ec:	e7f3      	b.n	80264d6 <MobleTransSarAssemble+0x276>
 80264ee:	2300      	movs	r3, #0
 80264f0:	469b      	mov	fp, r3
 80264f2:	4699      	mov	r9, r3
 80264f4:	e7f0      	b.n	80264d8 <MobleTransSarAssemble+0x278>
 80264f6:	bf00      	nop
 80264f8:	2000140c 	.word	0x2000140c

080264fc <MobleTransSarProcessSeg>:
 80264fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026500:	ed2d 8b02 	vpush	{d8}
 8026504:	b089      	sub	sp, #36	@ 0x24
 8026506:	ee08 3a10 	vmov	s16, r3
 802650a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802650c:	9305      	str	r3, [sp, #20]
 802650e:	460c      	mov	r4, r1
 8026510:	6909      	ldr	r1, [r1, #16]
 8026512:	4616      	mov	r6, r2
 8026514:	8892      	ldrh	r2, [r2, #4]
 8026516:	f421 58ff 	bic.w	r8, r1, #8160	@ 0x1fe0
 802651a:	f3c1 050c 	ubfx	r5, r1, #0, #13
 802651e:	42aa      	cmp	r2, r5
 8026520:	f028 081f 	bic.w	r8, r8, #31
 8026524:	4490      	add	r8, r2
 8026526:	bf94      	ite	ls
 8026528:	2200      	movls	r2, #0
 802652a:	2201      	movhi	r2, #1
 802652c:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
 8026530:	4681      	mov	r9, r0
 8026532:	b930      	cbnz	r0, 8026542 <MobleTransSarProcessSeg+0x46>
 8026534:	4bb4      	ldr	r3, [pc, #720]	@ (8026808 <MobleTransSarProcessSeg+0x30c>)
 8026536:	4ab5      	ldr	r2, [pc, #724]	@ (802680c <MobleTransSarProcessSeg+0x310>)
 8026538:	48b5      	ldr	r0, [pc, #724]	@ (8026810 <MobleTransSarProcessSeg+0x314>)
 802653a:	f240 41d3 	movw	r1, #1235	@ 0x4d3
 802653e:	f001 ff4d 	bl	80283dc <__assert_func>
 8026542:	4541      	cmp	r1, r8
 8026544:	d205      	bcs.n	8026552 <MobleTransSarProcessSeg+0x56>
 8026546:	2002      	movs	r0, #2
 8026548:	b009      	add	sp, #36	@ 0x24
 802654a:	ecbd 8b02 	vpop	{d8}
 802654e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026552:	79b1      	ldrb	r1, [r6, #6]
 8026554:	79f3      	ldrb	r3, [r6, #7]
 8026556:	4299      	cmp	r1, r3
 8026558:	d8f5      	bhi.n	8026546 <MobleTransSarProcessSeg+0x4a>
 802655a:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 8026820 <MobleTransSarProcessSeg+0x324>
 802655e:	2700      	movs	r7, #0
 8026560:	f89a 22dc 	ldrb.w	r2, [sl, #732]	@ 0x2dc
 8026564:	f8da 52e4 	ldr.w	r5, [sl, #740]	@ 0x2e4
 8026568:	42ba      	cmp	r2, r7
 802656a:	dc41      	bgt.n	80265f0 <MobleTransSarProcessSeg+0xf4>
 802656c:	2700      	movs	r7, #0
 802656e:	42ba      	cmp	r2, r7
 8026570:	d029      	beq.n	80265c6 <MobleTransSarProcessSeg+0xca>
 8026572:	46ab      	mov	fp, r5
 8026574:	f815 0b2c 	ldrb.w	r0, [r5], #44
 8026578:	2800      	cmp	r0, #0
 802657a:	f040 80ea 	bne.w	8026752 <MobleTransSarProcessSeg+0x256>
 802657e:	2001      	movs	r0, #1
 8026580:	f8ab 0000 	strh.w	r0, [fp]
 8026584:	8aa2      	ldrh	r2, [r4, #20]
 8026586:	f8ab 2004 	strh.w	r2, [fp, #4]
 802658a:	8ae2      	ldrh	r2, [r4, #22]
 802658c:	f8ab 2006 	strh.w	r2, [fp, #6]
 8026590:	b212      	sxth	r2, r2
 8026592:	4088      	lsls	r0, r1
 8026594:	2a00      	cmp	r2, #0
 8026596:	f8cb 800c 	str.w	r8, [fp, #12]
 802659a:	f8cb 0010 	str.w	r0, [fp, #16]
 802659e:	f8cb 9028 	str.w	r9, [fp, #40]	@ 0x28
 80265a2:	dd10      	ble.n	80265c6 <MobleTransSarProcessSeg+0xca>
 80265a4:	465a      	mov	r2, fp
 80265a6:	499b      	ldr	r1, [pc, #620]	@ (8026814 <MobleTransSarProcessSeg+0x318>)
 80265a8:	f10b 0014 	add.w	r0, fp, #20
 80265ac:	f7f0 ffc4 	bl	8017538 <MoblePalTimerCreate>
 80265b0:	f8db 0014 	ldr.w	r0, [fp, #20]
 80265b4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80265b8:	f7f0 fff7 	bl	80175aa <MoblePalTimerStart>
 80265bc:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80265c0:	3201      	adds	r2, #1
 80265c2:	f8c9 200c 	str.w	r2, [r9, #12]
 80265c6:	79f1      	ldrb	r1, [r6, #7]
 80265c8:	f89a 22dc 	ldrb.w	r2, [sl, #732]	@ 0x2dc
 80265cc:	2900      	cmp	r1, #0
 80265ce:	f040 80c2 	bne.w	8026756 <MobleTransSarProcessSeg+0x25a>
 80265d2:	4297      	cmp	r7, r2
 80265d4:	f280 80bf 	bge.w	8026756 <MobleTransSarProcessSeg+0x25a>
 80265d8:	252c      	movs	r5, #44	@ 0x2c
 80265da:	437d      	muls	r5, r7
 80265dc:	f8da 72e4 	ldr.w	r7, [sl, #740]	@ 0x2e4
 80265e0:	1978      	adds	r0, r7, r5
 80265e2:	3014      	adds	r0, #20
 80265e4:	f7f1 f862 	bl	80176ac <MobleTransEraseTimer>
 80265e8:	f240 1201 	movw	r2, #257	@ 0x101
 80265ec:	537a      	strh	r2, [r7, r5]
 80265ee:	e073      	b.n	80266d8 <MobleTransSarProcessSeg+0x1dc>
 80265f0:	222c      	movs	r2, #44	@ 0x2c
 80265f2:	437a      	muls	r2, r7
 80265f4:	eb05 0b02 	add.w	fp, r5, r2
 80265f8:	9204      	str	r2, [sp, #16]
 80265fa:	5caa      	ldrb	r2, [r5, r2]
 80265fc:	f8bb 0004 	ldrh.w	r0, [fp, #4]
 8026600:	f8b4 c014 	ldrh.w	ip, [r4, #20]
 8026604:	2a00      	cmp	r2, #0
 8026606:	f000 8087 	beq.w	8026718 <MobleTransSarProcessSeg+0x21c>
 802660a:	4584      	cmp	ip, r0
 802660c:	f040 809d 	bne.w	802674a <MobleTransSarProcessSeg+0x24e>
 8026610:	f8db 000c 	ldr.w	r0, [fp, #12]
 8026614:	4540      	cmp	r0, r8
 8026616:	f040 8085 	bne.w	8026724 <MobleTransSarProcessSeg+0x228>
 802661a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 802661e:	b390      	cbz	r0, 8026686 <MobleTransSarProcessSeg+0x18a>
 8026620:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8026624:	8ae0      	ldrh	r0, [r4, #22]
 8026626:	2b00      	cmp	r3, #0
 8026628:	dd2b      	ble.n	8026682 <MobleTransSarProcessSeg+0x186>
 802662a:	f7f7 fb0b 	bl	801dc44 <BnrgmFrndMgmtGetFriendshipStatus>
 802662e:	f8da 72e4 	ldr.w	r7, [sl, #740]	@ 0x2e4
 8026632:	9b04      	ldr	r3, [sp, #16]
 8026634:	441f      	add	r7, r3
 8026636:	4680      	mov	r8, r0
 8026638:	fab0 f580 	clz	r5, r0
 802663c:	f107 0014 	add.w	r0, r7, #20
 8026640:	f7f1 f834 	bl	80176ac <MobleTransEraseTimer>
 8026644:	f107 001c 	add.w	r0, r7, #28
 8026648:	096d      	lsrs	r5, r5, #5
 802664a:	f7f1 f82f 	bl	80176ac <MobleTransEraseTimer>
 802664e:	f1b8 0f00 	cmp.w	r8, #0
 8026652:	d103      	bne.n	802665c <MobleTransSarProcessSeg+0x160>
 8026654:	f8d9 3000 	ldr.w	r3, [r9]
 8026658:	885b      	ldrh	r3, [r3, #2]
 802665a:	82e3      	strh	r3, [r4, #22]
 802665c:	79f2      	ldrb	r2, [r6, #7]
 802665e:	8aa1      	ldrh	r1, [r4, #20]
 8026660:	3201      	adds	r2, #1
 8026662:	2301      	movs	r3, #1
 8026664:	4093      	lsls	r3, r2
 8026666:	3b01      	subs	r3, #1
 8026668:	e9cd 5302 	strd	r5, r3, [sp, #8]
 802666c:	88b3      	ldrh	r3, [r6, #4]
 802666e:	9301      	str	r3, [sp, #4]
 8026670:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
 8026674:	9300      	str	r3, [sp, #0]
 8026676:	8ae2      	ldrh	r2, [r4, #22]
 8026678:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 802667c:	4648      	mov	r0, r9
 802667e:	f7ff fd91 	bl	80261a4 <MobleTransSarSendAck.isra.0>
 8026682:	2000      	movs	r0, #0
 8026684:	e760      	b.n	8026548 <MobleTransSarProcessSeg+0x4c>
 8026686:	f8db 0010 	ldr.w	r0, [fp, #16]
 802668a:	2501      	movs	r5, #1
 802668c:	fa05 f101 	lsl.w	r1, r5, r1
 8026690:	4208      	tst	r0, r1
 8026692:	d12f      	bne.n	80266f4 <MobleTransSarProcessSeg+0x1f8>
 8026694:	4308      	orrs	r0, r1
 8026696:	1959      	adds	r1, r3, r5
 8026698:	fa05 f101 	lsl.w	r1, r5, r1
 802669c:	3901      	subs	r1, #1
 802669e:	4288      	cmp	r0, r1
 80266a0:	f8cb 0010 	str.w	r0, [fp, #16]
 80266a4:	d15a      	bne.n	802675c <MobleTransSarProcessSeg+0x260>
 80266a6:	f10b 0014 	add.w	r0, fp, #20
 80266aa:	f7f0 ffff 	bl	80176ac <MobleTransEraseTimer>
 80266ae:	f10b 0020 	add.w	r0, fp, #32
 80266b2:	f7f0 fffb 	bl	80176ac <MobleTransEraseTimer>
 80266b6:	465a      	mov	r2, fp
 80266b8:	4957      	ldr	r1, [pc, #348]	@ (8026818 <MobleTransSarProcessSeg+0x31c>)
 80266ba:	f10b 001c 	add.w	r0, fp, #28
 80266be:	f7f0 ff3b 	bl	8017538 <MoblePalTimerCreate>
 80266c2:	f8db 001c 	ldr.w	r0, [fp, #28]
 80266c6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80266ca:	f7f0 ff9f 	bl	801760c <MoblePalTimerStartOnce>
 80266ce:	f8da 22e4 	ldr.w	r2, [sl, #740]	@ 0x2e4
 80266d2:	9b04      	ldr	r3, [sp, #16]
 80266d4:	441a      	add	r2, r3
 80266d6:	7055      	strb	r5, [r2, #1]
 80266d8:	9b05      	ldr	r3, [sp, #20]
 80266da:	9314      	str	r3, [sp, #80]	@ 0x50
 80266dc:	ee18 3a10 	vmov	r3, s16
 80266e0:	4632      	mov	r2, r6
 80266e2:	4621      	mov	r1, r4
 80266e4:	4648      	mov	r0, r9
 80266e6:	b009      	add	sp, #36	@ 0x24
 80266e8:	ecbd 8b02 	vpop	{d8}
 80266ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266f0:	f7ff bdb6 	b.w	8026260 <MobleTransSarAssemble>
 80266f4:	f10b 001c 	add.w	r0, fp, #28
 80266f8:	9004      	str	r0, [sp, #16]
 80266fa:	f7f0 ffd7 	bl	80176ac <MobleTransEraseTimer>
 80266fe:	4946      	ldr	r1, [pc, #280]	@ (8026818 <MobleTransSarProcessSeg+0x31c>)
 8026700:	9804      	ldr	r0, [sp, #16]
 8026702:	465a      	mov	r2, fp
 8026704:	f7f0 ff18 	bl	8017538 <MoblePalTimerCreate>
 8026708:	f8db 001c 	ldr.w	r0, [fp, #28]
 802670c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8026710:	f7f0 ff7c 	bl	801760c <MoblePalTimerStartOnce>
 8026714:	2001      	movs	r0, #1
 8026716:	e717      	b.n	8026548 <MobleTransSarProcessSeg+0x4c>
 8026718:	4584      	cmp	ip, r0
 802671a:	d116      	bne.n	802674a <MobleTransSarProcessSeg+0x24e>
 802671c:	f8db 000c 	ldr.w	r0, [fp, #12]
 8026720:	4540      	cmp	r0, r8
 8026722:	d0f7      	beq.n	8026714 <MobleTransSarProcessSeg+0x218>
 8026724:	f8db 000c 	ldr.w	r0, [fp, #12]
 8026728:	4540      	cmp	r0, r8
 802672a:	d210      	bcs.n	802674e <MobleTransSarProcessSeg+0x252>
 802672c:	f10b 001c 	add.w	r0, fp, #28
 8026730:	e9cd 1306 	strd	r1, r3, [sp, #24]
 8026734:	f7f0 ffba 	bl	80176ac <MobleTransEraseTimer>
 8026738:	f10b 0014 	add.w	r0, fp, #20
 802673c:	f7f0 ffb6 	bl	80176ac <MobleTransEraseTimer>
 8026740:	9b04      	ldr	r3, [sp, #16]
 8026742:	2200      	movs	r2, #0
 8026744:	54ea      	strb	r2, [r5, r3]
 8026746:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802674a:	3701      	adds	r7, #1
 802674c:	e708      	b.n	8026560 <MobleTransSarProcessSeg+0x64>
 802674e:	d9fc      	bls.n	802674a <MobleTransSarProcessSeg+0x24e>
 8026750:	e6f9      	b.n	8026546 <MobleTransSarProcessSeg+0x4a>
 8026752:	3701      	adds	r7, #1
 8026754:	e70b      	b.n	802656e <MobleTransSarProcessSeg+0x72>
 8026756:	4297      	cmp	r7, r2
 8026758:	f43f aef5 	beq.w	8026546 <MobleTransSarProcessSeg+0x4a>
 802675c:	222c      	movs	r2, #44	@ 0x2c
 802675e:	f8da 52e4 	ldr.w	r5, [sl, #740]	@ 0x2e4
 8026762:	4357      	muls	r7, r2
 8026764:	443d      	add	r5, r7
 8026766:	f105 0020 	add.w	r0, r5, #32
 802676a:	9004      	str	r0, [sp, #16]
 802676c:	f7f0 ff9e 	bl	80176ac <MobleTransEraseTimer>
 8026770:	462a      	mov	r2, r5
 8026772:	492a      	ldr	r1, [pc, #168]	@ (802681c <MobleTransSarProcessSeg+0x320>)
 8026774:	9804      	ldr	r0, [sp, #16]
 8026776:	f7f0 fedf 	bl	8017538 <MoblePalTimerCreate>
 802677a:	6a28      	ldr	r0, [r5, #32]
 802677c:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8026780:	f7f0 ff44 	bl	801760c <MoblePalTimerStartOnce>
 8026784:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 8026788:	2a00      	cmp	r2, #0
 802678a:	dd0f      	ble.n	80267ac <MobleTransSarProcessSeg+0x2b0>
 802678c:	f8da 52e4 	ldr.w	r5, [sl, #740]	@ 0x2e4
 8026790:	443d      	add	r5, r7
 8026792:	696a      	ldr	r2, [r5, #20]
 8026794:	b952      	cbnz	r2, 80267ac <MobleTransSarProcessSeg+0x2b0>
 8026796:	491f      	ldr	r1, [pc, #124]	@ (8026814 <MobleTransSarProcessSeg+0x318>)
 8026798:	462a      	mov	r2, r5
 802679a:	f105 0014 	add.w	r0, r5, #20
 802679e:	f7f0 fecb 	bl	8017538 <MoblePalTimerCreate>
 80267a2:	6968      	ldr	r0, [r5, #20]
 80267a4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80267a8:	f7f0 feff 	bl	80175aa <MoblePalTimerStart>
 80267ac:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8026820 <MobleTransSarProcessSeg+0x324>
 80267b0:	f899 12dc 	ldrb.w	r1, [r9, #732]	@ 0x2dc
 80267b4:	f8d9 22e0 	ldr.w	r2, [r9, #736]	@ 0x2e0
 80267b8:	2700      	movs	r7, #0
 80267ba:	42b9      	cmp	r1, r7
 80267bc:	dd1a      	ble.n	80267f4 <MobleTransSarProcessSeg+0x2f8>
 80267be:	4615      	mov	r5, r2
 80267c0:	f812 0b2c 	ldrb.w	r0, [r2], #44
 80267c4:	b9e8      	cbnz	r0, 8026802 <MobleTransSarProcessSeg+0x306>
 80267c6:	2201      	movs	r2, #1
 80267c8:	702a      	strb	r2, [r5, #0]
 80267ca:	8aa2      	ldrh	r2, [r4, #20]
 80267cc:	806a      	strh	r2, [r5, #2]
 80267ce:	6922      	ldr	r2, [r4, #16]
 80267d0:	6830      	ldr	r0, [r6, #0]
 80267d2:	6871      	ldr	r1, [r6, #4]
 80267d4:	e9c5 8201 	strd	r8, r2, [r5, #4]
 80267d8:	f105 020c 	add.w	r2, r5, #12
 80267dc:	c203      	stmia	r2!, {r0, r1}
 80267de:	7a31      	ldrb	r1, [r6, #8]
 80267e0:	7011      	strb	r1, [r2, #0]
 80267e2:	f105 0015 	add.w	r0, r5, #21
 80267e6:	9a05      	ldr	r2, [sp, #20]
 80267e8:	ee18 1a10 	vmov	r1, s16
 80267ec:	f002 fd6f 	bl	80292ce <memcpy>
 80267f0:	9b05      	ldr	r3, [sp, #20]
 80267f2:	62ab      	str	r3, [r5, #40]	@ 0x28
 80267f4:	f899 02dc 	ldrb.w	r0, [r9, #732]	@ 0x2dc
 80267f8:	1bc3      	subs	r3, r0, r7
 80267fa:	4258      	negs	r0, r3
 80267fc:	4158      	adcs	r0, r3
 80267fe:	0040      	lsls	r0, r0, #1
 8026800:	e6a2      	b.n	8026548 <MobleTransSarProcessSeg+0x4c>
 8026802:	3701      	adds	r7, #1
 8026804:	e7d9      	b.n	80267ba <MobleTransSarProcessSeg+0x2be>
 8026806:	bf00      	nop
 8026808:	08030e80 	.word	0x08030e80
 802680c:	080302e8 	.word	0x080302e8
 8026810:	08031310 	.word	0x08031310
 8026814:	08026869 	.word	0x08026869
 8026818:	08026825 	.word	0x08026825
 802681c:	080176e5 	.word	0x080176e5
 8026820:	2000140c 	.word	0x2000140c

08026824 <MobleTransSarOnAckSentInsurance>:
 8026824:	b530      	push	{r4, r5, lr}
 8026826:	460c      	mov	r4, r1
 8026828:	b085      	sub	sp, #20
 802682a:	f101 001c 	add.w	r0, r1, #28
 802682e:	f7f0 ff3d 	bl	80176ac <MobleTransEraseTimer>
 8026832:	88e0      	ldrh	r0, [r4, #6]
 8026834:	f7f7 fa06 	bl	801dc44 <BnrgmFrndMgmtGetFriendshipStatus>
 8026838:	2800      	cmp	r0, #0
 802683a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 802683c:	6925      	ldr	r5, [r4, #16]
 802683e:	bf08      	it	eq
 8026840:	6802      	ldreq	r2, [r0, #0]
 8026842:	88a1      	ldrh	r1, [r4, #4]
 8026844:	bf0b      	itete	eq
 8026846:	8852      	ldrheq	r2, [r2, #2]
 8026848:	88e2      	ldrhne	r2, [r4, #6]
 802684a:	2301      	moveq	r3, #1
 802684c:	2300      	movne	r3, #0
 802684e:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8026852:	68e3      	ldr	r3, [r4, #12]
 8026854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8026858:	9301      	str	r3, [sp, #4]
 802685a:	8963      	ldrh	r3, [r4, #10]
 802685c:	9300      	str	r3, [sp, #0]
 802685e:	8923      	ldrh	r3, [r4, #8]
 8026860:	f7ff fca0 	bl	80261a4 <MobleTransSarSendAck.isra.0>
 8026864:	b005      	add	sp, #20
 8026866:	bd30      	pop	{r4, r5, pc}

08026868 <MobleTransSarOnAckTimer>:
 8026868:	b530      	push	{r4, r5, lr}
 802686a:	f891 3024 	ldrb.w	r3, [r1, #36]	@ 0x24
 802686e:	2b05      	cmp	r3, #5
 8026870:	b085      	sub	sp, #20
 8026872:	460c      	mov	r4, r1
 8026874:	d906      	bls.n	8026884 <MobleTransSarOnAckTimer+0x1c>
 8026876:	f101 0014 	add.w	r0, r1, #20
 802687a:	b005      	add	sp, #20
 802687c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026880:	f7f0 bf14 	b.w	80176ac <MobleTransEraseTimer>
 8026884:	3301      	adds	r3, #1
 8026886:	f881 3024 	strb.w	r3, [r1, #36]	@ 0x24
 802688a:	88c8      	ldrh	r0, [r1, #6]
 802688c:	f7f7 f9da 	bl	801dc44 <BnrgmFrndMgmtGetFriendshipStatus>
 8026890:	2800      	cmp	r0, #0
 8026892:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8026894:	6925      	ldr	r5, [r4, #16]
 8026896:	bf08      	it	eq
 8026898:	6802      	ldreq	r2, [r0, #0]
 802689a:	88a1      	ldrh	r1, [r4, #4]
 802689c:	bf0b      	itete	eq
 802689e:	8852      	ldrheq	r2, [r2, #2]
 80268a0:	88e2      	ldrhne	r2, [r4, #6]
 80268a2:	2301      	moveq	r3, #1
 80268a4:	2300      	movne	r3, #0
 80268a6:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80268aa:	68e3      	ldr	r3, [r4, #12]
 80268ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80268b0:	9301      	str	r3, [sp, #4]
 80268b2:	8963      	ldrh	r3, [r4, #10]
 80268b4:	9300      	str	r3, [sp, #0]
 80268b6:	8923      	ldrh	r3, [r4, #8]
 80268b8:	f7ff fc74 	bl	80261a4 <MobleTransSarSendAck.isra.0>
 80268bc:	b005      	add	sp, #20
 80268be:	bd30      	pop	{r4, r5, pc}

080268c0 <BnrgmHealthModelCreate>:
 80268c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80268c2:	4d0d      	ldr	r5, [pc, #52]	@ (80268f8 <BnrgmHealthModelCreate+0x38>)
 80268c4:	f895 30f4 	ldrb.w	r3, [r5, #244]	@ 0xf4
 80268c8:	2b01      	cmp	r3, #1
 80268ca:	d012      	beq.n	80268f2 <BnrgmHealthModelCreate+0x32>
 80268cc:	2301      	movs	r3, #1
 80268ce:	f885 30f4 	strb.w	r3, [r5, #244]	@ 0xf4
 80268d2:	2400      	movs	r4, #0
 80268d4:	686b      	ldr	r3, [r5, #4]
 80268d6:	f885 40f6 	strb.w	r4, [r5, #246]	@ 0xf6
 80268da:	699b      	ldr	r3, [r3, #24]
 80268dc:	4668      	mov	r0, sp
 80268de:	4798      	blx	r3
 80268e0:	4b06      	ldr	r3, [pc, #24]	@ (80268fc <BnrgmHealthModelCreate+0x3c>)
 80268e2:	f8bd 2000 	ldrh.w	r2, [sp]
 80268e6:	805a      	strh	r2, [r3, #2]
 80268e8:	f885 4f20 	strb.w	r4, [r5, #3872]	@ 0xf20
 80268ec:	4620      	mov	r0, r4
 80268ee:	b003      	add	sp, #12
 80268f0:	bd30      	pop	{r4, r5, pc}
 80268f2:	2002      	movs	r0, #2
 80268f4:	e7fb      	b.n	80268ee <BnrgmHealthModelCreate+0x2e>
 80268f6:	bf00      	nop
 80268f8:	20000314 	.word	0x20000314
 80268fc:	20000008 	.word	0x20000008

08026900 <MobleLibraryInit>:
 8026900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026902:	b085      	sub	sp, #20
 8026904:	4604      	mov	r4, r0
 8026906:	f7f5 ff71 	bl	801c7ec <MobleConfigInit>
 802690a:	2801      	cmp	r0, #1
 802690c:	d903      	bls.n	8026916 <MobleLibraryInit+0x16>
 802690e:	2602      	movs	r6, #2
 8026910:	4630      	mov	r0, r6
 8026912:	b005      	add	sp, #20
 8026914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026916:	6a23      	ldr	r3, [r4, #32]
 8026918:	4d33      	ldr	r5, [pc, #204]	@ (80269e8 <MobleLibraryInit+0xe8>)
 802691a:	88da      	ldrh	r2, [r3, #6]
 802691c:	8899      	ldrh	r1, [r3, #4]
 802691e:	681b      	ldr	r3, [r3, #0]
 8026920:	f8a5 2a08 	strh.w	r2, [r5, #2568]	@ 0xa08
 8026924:	440b      	add	r3, r1
 8026926:	f8c5 3a04 	str.w	r3, [r5, #2564]	@ 0xa04
 802692a:	68a3      	ldr	r3, [r4, #8]
 802692c:	9301      	str	r3, [sp, #4]
 802692e:	7ea3      	ldrb	r3, [r4, #26]
 8026930:	9300      	str	r3, [sp, #0]
 8026932:	f505 61de 	add.w	r1, r5, #1776	@ 0x6f0
 8026936:	e9d4 2300 	ldrd	r2, r3, [r4]
 802693a:	f205 60b4 	addw	r0, r5, #1716	@ 0x6b4
 802693e:	f7f9 fb63 	bl	8020008 <MobleStackInit>
 8026942:	2801      	cmp	r0, #1
 8026944:	d8e3      	bhi.n	802690e <MobleLibraryInit+0xe>
 8026946:	6a23      	ldr	r3, [r4, #32]
 8026948:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	@ 0x6f0
 802694c:	8959      	ldrh	r1, [r3, #10]
 802694e:	2900      	cmp	r1, #0
 8026950:	d03f      	beq.n	80269d2 <MobleLibraryInit+0xd2>
 8026952:	88da      	ldrh	r2, [r3, #6]
 8026954:	889e      	ldrh	r6, [r3, #4]
 8026956:	4416      	add	r6, r2
 8026958:	681a      	ldr	r2, [r3, #0]
 802695a:	4432      	add	r2, r6
 802695c:	6966      	ldr	r6, [r4, #20]
 802695e:	7937      	ldrb	r7, [r6, #4]
 8026960:	7833      	ldrb	r3, [r6, #0]
 8026962:	9703      	str	r7, [sp, #12]
 8026964:	78f7      	ldrb	r7, [r6, #3]
 8026966:	9702      	str	r7, [sp, #8]
 8026968:	78b7      	ldrb	r7, [r6, #2]
 802696a:	9701      	str	r7, [sp, #4]
 802696c:	7876      	ldrb	r6, [r6, #1]
 802696e:	9600      	str	r6, [sp, #0]
 8026970:	f7f6 f9b4 	bl	801ccdc <BLEMesh_NeighborTableInit>
 8026974:	2801      	cmp	r0, #1
 8026976:	d8ca      	bhi.n	802690e <MobleLibraryInit+0xe>
 8026978:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	@ 0x6f0
 802697c:	f7f5 ff28 	bl	801c7d0 <MobleApplicationInit>
 8026980:	2801      	cmp	r0, #1
 8026982:	4606      	mov	r6, r0
 8026984:	d8c3      	bhi.n	802690e <MobleLibraryInit+0xe>
 8026986:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	@ 0x6f0
 802698a:	f7fa f83b 	bl	8020a04 <MobleConfigModelCreate>
 802698e:	2801      	cmp	r0, #1
 8026990:	d8bd      	bhi.n	802690e <MobleLibraryInit+0xe>
 8026992:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8026996:	8b21      	ldrh	r1, [r4, #24]
 8026998:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	@ 0x6f0
 802699c:	f7f9 ff68 	bl	8020870 <MobleConfigModelInit>
 80269a0:	2801      	cmp	r0, #1
 80269a2:	d8b4      	bhi.n	802690e <MobleLibraryInit+0xe>
 80269a4:	f8d5 36f0 	ldr.w	r3, [r5, #1776]	@ 0x6f0
 80269a8:	b15b      	cbz	r3, 80269c2 <MobleLibraryInit+0xc2>
 80269aa:	681a      	ldr	r2, [r3, #0]
 80269ac:	7812      	ldrb	r2, [r2, #0]
 80269ae:	2a01      	cmp	r2, #1
 80269b0:	d111      	bne.n	80269d6 <MobleLibraryInit+0xd6>
 80269b2:	4b0e      	ldr	r3, [pc, #56]	@ (80269ec <MobleLibraryInit+0xec>)
 80269b4:	f893 30bf 	ldrb.w	r3, [r3, #191]	@ 0xbf
 80269b8:	2b02      	cmp	r3, #2
 80269ba:	d010      	beq.n	80269de <MobleLibraryInit+0xde>
 80269bc:	2000      	movs	r0, #0
 80269be:	f7f8 faa1 	bl	801ef04 <BnrgmTransmitSetAutoScanState>
 80269c2:	f7ff ff7d 	bl	80268c0 <BnrgmHealthModelCreate>
 80269c6:	2801      	cmp	r0, #1
 80269c8:	d8a1      	bhi.n	802690e <MobleLibraryInit+0xe>
 80269ca:	4b08      	ldr	r3, [pc, #32]	@ (80269ec <MobleLibraryInit+0xec>)
 80269cc:	69e2      	ldr	r2, [r4, #28]
 80269ce:	601a      	str	r2, [r3, #0]
 80269d0:	e79e      	b.n	8026910 <MobleLibraryInit+0x10>
 80269d2:	460a      	mov	r2, r1
 80269d4:	e7c2      	b.n	802695c <MobleLibraryInit+0x5c>
 80269d6:	f893 31d4 	ldrb.w	r3, [r3, #468]	@ 0x1d4
 80269da:	2b01      	cmp	r3, #1
 80269dc:	d1e9      	bne.n	80269b2 <MobleLibraryInit+0xb2>
 80269de:	4b04      	ldr	r3, [pc, #16]	@ (80269f0 <MobleLibraryInit+0xf0>)
 80269e0:	2201      	movs	r2, #1
 80269e2:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
 80269e6:	e7ec      	b.n	80269c2 <MobleLibraryInit+0xc2>
 80269e8:	20002504 	.word	0x20002504
 80269ec:	20000314 	.word	0x20000314
 80269f0:	20003f54 	.word	0x20003f54

080269f4 <BLEMesh_Init>:
 80269f4:	b510      	push	{r4, lr}
 80269f6:	4604      	mov	r4, r0
 80269f8:	f7f4 f8ae 	bl	801ab58 <mem_alloc_init>
 80269fc:	4620      	mov	r0, r4
 80269fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026a02:	f7ff bf7d 	b.w	8026900 <MobleLibraryInit>

08026a06 <BnrgmHealthModelAttentionTimerSet>:
 8026a06:	6803      	ldr	r3, [r0, #0]
 8026a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8026a0a:	f883 106e 	strb.w	r1, [r3, #110]	@ 0x6e
 8026a0e:	f7f0 bdcf 	b.w	80175b0 <BnrgmHealthModelSetAttentionTimer>
	...

08026a14 <MobleProvision_UnprovisionedNode_DeInit>:
 8026a14:	b538      	push	{r3, r4, r5, lr}
 8026a16:	4d0c      	ldr	r5, [pc, #48]	@ (8026a48 <MobleProvision_UnprovisionedNode_DeInit+0x34>)
 8026a18:	f8d5 1a0c 	ldr.w	r1, [r5, #2572]	@ 0xa0c
 8026a1c:	f891 31a9 	ldrb.w	r3, [r1, #425]	@ 0x1a9
 8026a20:	2b01      	cmp	r3, #1
 8026a22:	d104      	bne.n	8026a2e <MobleProvision_UnprovisionedNode_DeInit+0x1a>
 8026a24:	f7f2 fe8c 	bl	8019740 <MoblePalCryptoFreeEcc>
 8026a28:	2300      	movs	r3, #0
 8026a2a:	f881 31a9 	strb.w	r3, [r1, #425]	@ 0x1a9
 8026a2e:	2400      	movs	r4, #0
 8026a30:	4608      	mov	r0, r1
 8026a32:	f7f3 ffa7 	bl	801a984 <MobleMemFree>
 8026a36:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	@ 0x6f0
 8026a3a:	f8c5 4a0c 	str.w	r4, [r5, #2572]	@ 0xa0c
 8026a3e:	4621      	mov	r1, r4
 8026a40:	f7ff ffe1 	bl	8026a06 <BnrgmHealthModelAttentionTimerSet>
 8026a44:	4620      	mov	r0, r4
 8026a46:	bd38      	pop	{r3, r4, r5, pc}
 8026a48:	20002504 	.word	0x20002504

08026a4c <MobleProvisionBearerGatt_DeInit>:
 8026a4c:	b508      	push	{r3, lr}
 8026a4e:	4906      	ldr	r1, [pc, #24]	@ (8026a68 <MobleProvisionBearerGatt_DeInit+0x1c>)
 8026a50:	f501 6024 	add.w	r0, r1, #2624	@ 0xa40
 8026a54:	f7f8 f850 	bl	801eaf8 <MobleProvisionBearerGatt_DeleteTimer>
 8026a58:	f601 2044 	addw	r0, r1, #2628	@ 0xa44
 8026a5c:	f7f8 f84c 	bl	801eaf8 <MobleProvisionBearerGatt_DeleteTimer>
 8026a60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8026a64:	f7ff bfd6 	b.w	8026a14 <MobleProvision_UnprovisionedNode_DeInit>
 8026a68:	20002504 	.word	0x20002504

08026a6c <MobleProvision_DeInit>:
 8026a6c:	b908      	cbnz	r0, 8026a72 <MobleProvision_DeInit+0x6>
 8026a6e:	f7f8 becb 	b.w	801f808 <MobleProvision_ProvisionerNode_DeInit>
 8026a72:	f7ff bfcf 	b.w	8026a14 <MobleProvision_UnprovisionedNode_DeInit>

08026a76 <MoblePBADVCloseLink>:
 8026a76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026a78:	2300      	movs	r3, #0
 8026a7a:	4604      	mov	r4, r0
 8026a7c:	f88d 3007 	strb.w	r3, [sp, #7]
 8026a80:	b149      	cbz	r1, 8026a96 <MoblePBADVCloseLink+0x20>
 8026a82:	2503      	movs	r5, #3
 8026a84:	2301      	movs	r3, #1
 8026a86:	f10d 0207 	add.w	r2, sp, #7
 8026a8a:	2102      	movs	r1, #2
 8026a8c:	4620      	mov	r0, r4
 8026a8e:	f7f3 fe09 	bl	801a6a4 <MoblePBADVSendControl>
 8026a92:	3d01      	subs	r5, #1
 8026a94:	d1f6      	bne.n	8026a84 <MoblePBADVCloseLink+0xe>
 8026a96:	f894 3020 	ldrb.w	r3, [r4, #32]
 8026a9a:	3b00      	subs	r3, #0
 8026a9c:	bf18      	it	ne
 8026a9e:	2301      	movne	r3, #1
 8026aa0:	7023      	strb	r3, [r4, #0]
 8026aa2:	2300      	movs	r3, #0
 8026aa4:	61e3      	str	r3, [r4, #28]
 8026aa6:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8026aaa:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
 8026aae:	62a3      	str	r3, [r4, #40]	@ 0x28
 8026ab0:	4620      	mov	r0, r4
 8026ab2:	f7f0 fe4c 	bl	801774e <MoblePBADVClearTimers>
 8026ab6:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 8026aba:	b113      	cbz	r3, 8026ac2 <MoblePBADVCloseLink+0x4c>
 8026abc:	f8d4 0170 	ldr.w	r0, [r4, #368]	@ 0x170
 8026ac0:	4798      	blx	r3
 8026ac2:	f894 315c 	ldrb.w	r3, [r4, #348]	@ 0x15c
 8026ac6:	b91b      	cbnz	r3, 8026ad0 <MoblePBADVCloseLink+0x5a>
 8026ac8:	f894 0020 	ldrb.w	r0, [r4, #32]
 8026acc:	f7ff ffce 	bl	8026a6c <MobleProvision_DeInit>
 8026ad0:	b003      	add	sp, #12
 8026ad2:	bd30      	pop	{r4, r5, pc}

08026ad4 <MoblePBADVOnOpenLinkRetransmit>:
 8026ad4:	b513      	push	{r0, r1, r4, lr}
 8026ad6:	f8d1 3158 	ldr.w	r3, [r1, #344]	@ 0x158
 8026ada:	9001      	str	r0, [sp, #4]
 8026adc:	2b63      	cmp	r3, #99	@ 0x63
 8026ade:	460c      	mov	r4, r1
 8026ae0:	dd05      	ble.n	8026aee <MoblePBADVOnOpenLinkRetransmit+0x1a>
 8026ae2:	2101      	movs	r1, #1
 8026ae4:	4620      	mov	r0, r4
 8026ae6:	f7ff ffc6 	bl	8026a76 <MoblePBADVCloseLink>
 8026aea:	b002      	add	sp, #8
 8026aec:	bd10      	pop	{r4, pc}
 8026aee:	a801      	add	r0, sp, #4
 8026af0:	f7f0 fe24 	bl	801773c <MoblePBADVEraseTimer>
 8026af4:	f101 0208 	add.w	r2, r1, #8
 8026af8:	2310      	movs	r3, #16
 8026afa:	2100      	movs	r1, #0
 8026afc:	4620      	mov	r0, r4
 8026afe:	f7f3 fdd1 	bl	801a6a4 <MoblePBADVSendControl>
 8026b02:	e7f2      	b.n	8026aea <MoblePBADVOnOpenLinkRetransmit+0x16>

08026b04 <MoblePBADVOnTransactionTimeout>:
 8026b04:	4608      	mov	r0, r1
 8026b06:	2100      	movs	r1, #0
 8026b08:	f7ff bfb5 	b.w	8026a76 <MoblePBADVCloseLink>

08026b0c <MoblePBADVOnLinkIdleTimeout>:
 8026b0c:	4608      	mov	r0, r1
 8026b0e:	2101      	movs	r1, #1
 8026b10:	f7ff bfb1 	b.w	8026a76 <MoblePBADVCloseLink>

08026b14 <MoblePBADVStopProvisioning>:
 8026b14:	b508      	push	{r3, lr}
 8026b16:	2101      	movs	r1, #1
 8026b18:	f7ff ffad 	bl	8026a76 <MoblePBADVCloseLink>
 8026b1c:	2000      	movs	r0, #0
 8026b1e:	bd08      	pop	{r3, pc}

08026b20 <MoblePBADVSendTransaction.isra.0>:
 8026b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026b24:	4604      	mov	r4, r0
 8026b26:	6840      	ldr	r0, [r0, #4]
 8026b28:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 8026b2c:	2b63      	cmp	r3, #99	@ 0x63
 8026b2e:	b0a2      	sub	sp, #136	@ 0x88
 8026b30:	dd4a      	ble.n	8026bc8 <MoblePBADVSendTransaction.isra.0+0xa8>
 8026b32:	2101      	movs	r1, #1
 8026b34:	b022      	add	sp, #136	@ 0x88
 8026b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026b3a:	f7ff bf9c 	b.w	8026a76 <MoblePBADVCloseLink>
 8026b3e:	89a5      	ldrh	r5, [r4, #12]
 8026b40:	3b01      	subs	r3, #1
 8026b42:	429e      	cmp	r6, r3
 8026b44:	fb06 7105 	mla	r1, r6, r5, r7
 8026b48:	d108      	bne.n	8026b5c <MoblePBADVSendTransaction.isra.0+0x3c>
 8026b4a:	8a23      	ldrh	r3, [r4, #16]
 8026b4c:	fbb3 f2f5 	udiv	r2, r3, r5
 8026b50:	fb05 3312 	mls	r3, r5, r2, r3
 8026b54:	b29b      	uxth	r3, r3
 8026b56:	2b00      	cmp	r3, #0
 8026b58:	bf18      	it	ne
 8026b5a:	461d      	movne	r5, r3
 8026b5c:	1dab      	adds	r3, r5, #6
 8026b5e:	f88d 3008 	strb.w	r3, [sp, #8]
 8026b62:	69c3      	ldr	r3, [r0, #28]
 8026b64:	f8cd 300a 	str.w	r3, [sp, #10]
 8026b68:	462a      	mov	r2, r5
 8026b6a:	7823      	ldrb	r3, [r4, #0]
 8026b6c:	f88d 300e 	strb.w	r3, [sp, #14]
 8026b70:	f10d 000f 	add.w	r0, sp, #15
 8026b74:	f88d 8009 	strb.w	r8, [sp, #9]
 8026b78:	f002 fba9 	bl	80292ce <memcpy>
 8026b7c:	2301      	movs	r3, #1
 8026b7e:	2114      	movs	r1, #20
 8026b80:	e9cd 3100 	strd	r3, r1, [sp]
 8026b84:	1dea      	adds	r2, r5, #7
 8026b86:	2300      	movs	r3, #0
 8026b88:	b2d2      	uxtb	r2, r2
 8026b8a:	a902      	add	r1, sp, #8
 8026b8c:	4618      	mov	r0, r3
 8026b8e:	f7f3 fd73 	bl	801a678 <BnrgmTransmitSend>
 8026b92:	3601      	adds	r6, #1
 8026b94:	7a23      	ldrb	r3, [r4, #8]
 8026b96:	6860      	ldr	r0, [r4, #4]
 8026b98:	429e      	cmp	r6, r3
 8026b9a:	dbd0      	blt.n	8026b3e <MoblePBADVSendTransaction.isra.0+0x1e>
 8026b9c:	f8d0 3158 	ldr.w	r3, [r0, #344]	@ 0x158
 8026ba0:	490c      	ldr	r1, [pc, #48]	@ (8026bd4 <MoblePBADVSendTransaction.isra.0+0xb4>)
 8026ba2:	3301      	adds	r3, #1
 8026ba4:	f8c0 3158 	str.w	r3, [r0, #344]	@ 0x158
 8026ba8:	4622      	mov	r2, r4
 8026baa:	f500 70aa 	add.w	r0, r0, #340	@ 0x154
 8026bae:	f7f0 fcc3 	bl	8017538 <MoblePalTimerCreate>
 8026bb2:	b930      	cbnz	r0, 8026bc2 <MoblePBADVSendTransaction.isra.0+0xa2>
 8026bb4:	6863      	ldr	r3, [r4, #4]
 8026bb6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8026bba:	f8d3 0154 	ldr.w	r0, [r3, #340]	@ 0x154
 8026bbe:	f7f0 fd25 	bl	801760c <MoblePalTimerStartOnce>
 8026bc2:	b022      	add	sp, #136	@ 0x88
 8026bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026bc8:	2600      	movs	r6, #0
 8026bca:	f104 0712 	add.w	r7, r4, #18
 8026bce:	f04f 0829 	mov.w	r8, #41	@ 0x29
 8026bd2:	e7df      	b.n	8026b94 <MoblePBADVSendTransaction.isra.0+0x74>
 8026bd4:	08026bd9 	.word	0x08026bd9

08026bd8 <MoblePBADVOnRetransmit>:
 8026bd8:	b507      	push	{r0, r1, r2, lr}
 8026bda:	9001      	str	r0, [sp, #4]
 8026bdc:	a801      	add	r0, sp, #4
 8026bde:	f7f0 fdad 	bl	801773c <MoblePBADVEraseTimer>
 8026be2:	4608      	mov	r0, r1
 8026be4:	f7ff ff9c 	bl	8026b20 <MoblePBADVSendTransaction.isra.0>
 8026be8:	b003      	add	sp, #12
 8026bea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08026bf0 <MoblePBADVFireProvisionStateMach>:
 8026bf0:	b530      	push	{r4, r5, lr}
 8026bf2:	f890 5020 	ldrb.w	r5, [r0, #32]
 8026bf6:	b0a7      	sub	sp, #156	@ 0x9c
 8026bf8:	4604      	mov	r4, r0
 8026bfa:	4628      	mov	r0, r5
 8026bfc:	f7f9 f87e 	bl	801fcfc <MobleProvision_GetNextOperation>
 8026c00:	b118      	cbz	r0, 8026c0a <MoblePBADVFireProvisionStateMach+0x1a>
 8026c02:	2802      	cmp	r0, #2
 8026c04:	d019      	beq.n	8026c3a <MoblePBADVFireProvisionStateMach+0x4a>
 8026c06:	b027      	add	sp, #156	@ 0x9c
 8026c08:	bd30      	pop	{r4, r5, pc}
 8026c0a:	4628      	mov	r0, r5
 8026c0c:	f7f9 f889 	bl	801fd22 <MobleProvision_IsCompleted>
 8026c10:	2800      	cmp	r0, #0
 8026c12:	d0f8      	beq.n	8026c06 <MoblePBADVFireProvisionStateMach+0x16>
 8026c14:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 8026c18:	9003      	str	r0, [sp, #12]
 8026c1a:	491f      	ldr	r1, [pc, #124]	@ (8026c98 <MoblePBADVFireProvisionStateMach+0xa8>)
 8026c1c:	f7f0 fd8e 	bl	801773c <MoblePBADVEraseTimer>
 8026c20:	9803      	ldr	r0, [sp, #12]
 8026c22:	4622      	mov	r2, r4
 8026c24:	f7f0 fc88 	bl	8017538 <MoblePalTimerCreate>
 8026c28:	f8d4 014c 	ldr.w	r0, [r4, #332]	@ 0x14c
 8026c2c:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8026c30:	b027      	add	sp, #156	@ 0x9c
 8026c32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026c36:	f7f0 bce9 	b.w	801760c <MoblePalTimerStartOnce>
 8026c3a:	ab05      	add	r3, sp, #20
 8026c3c:	2280      	movs	r2, #128	@ 0x80
 8026c3e:	a906      	add	r1, sp, #24
 8026c40:	4628      	mov	r0, r5
 8026c42:	f7f9 f860 	bl	801fd06 <MobleProvision_GetOutputMessage>
 8026c46:	b118      	cbz	r0, 8026c50 <MoblePBADVFireProvisionStateMach+0x60>
 8026c48:	2101      	movs	r1, #1
 8026c4a:	4620      	mov	r0, r4
 8026c4c:	f7ff ff13 	bl	8026a76 <MoblePBADVCloseLink>
 8026c50:	2501      	movs	r5, #1
 8026c52:	69a2      	ldr	r2, [r4, #24]
 8026c54:	9905      	ldr	r1, [sp, #20]
 8026c56:	9500      	str	r5, [sp, #0]
 8026c58:	f104 03c0 	add.w	r3, r4, #192	@ 0xc0
 8026c5c:	a806      	add	r0, sp, #24
 8026c5e:	f7f7 fc3f 	bl	801e4e0 <MobleSARSplit>
 8026c62:	b118      	cbz	r0, 8026c6c <MoblePBADVFireProvisionStateMach+0x7c>
 8026c64:	4629      	mov	r1, r5
 8026c66:	4620      	mov	r0, r4
 8026c68:	f7ff ff05 	bl	8026a76 <MoblePBADVCloseLink>
 8026c6c:	2300      	movs	r3, #0
 8026c6e:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
 8026c72:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8026c76:	f8c4 40bc 	str.w	r4, [r4, #188]	@ 0xbc
 8026c7a:	f7ff ff51 	bl	8026b20 <MoblePBADVSendTransaction.isra.0>
 8026c7e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 8026c82:	f7f0 fcc7 	bl	8017614 <MoblePBADVRaiseTransTimeoutTimer>
 8026c86:	f504 70a6 	add.w	r0, r4, #332	@ 0x14c
 8026c8a:	f7f0 fd57 	bl	801773c <MoblePBADVEraseTimer>
 8026c8e:	4620      	mov	r0, r4
 8026c90:	f7f0 fcd2 	bl	8017638 <MoblePBADVRaiseLinkIdleTimer>
 8026c94:	e7b7      	b.n	8026c06 <MoblePBADVFireProvisionStateMach+0x16>
 8026c96:	bf00      	nop
 8026c98:	08026b0d 	.word	0x08026b0d

08026c9c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0>:
 8026c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026ca0:	4eaf      	ldr	r6, [pc, #700]	@ (8026f60 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2c4>)
 8026ca2:	b0bc      	sub	sp, #240	@ 0xf0
 8026ca4:	4604      	mov	r4, r0
 8026ca6:	460f      	mov	r7, r1
 8026ca8:	4690      	mov	r8, r2
 8026caa:	f7e1 f8b7 	bl	8007e1c <HAL_GetTick>
 8026cae:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	@ 0xa0c
 8026cb2:	f8d5 31a4 	ldr.w	r3, [r5, #420]	@ 0x1a4
 8026cb6:	1ac0      	subs	r0, r0, r3
 8026cb8:	4baa      	ldr	r3, [pc, #680]	@ (8026f64 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2c8>)
 8026cba:	4298      	cmp	r0, r3
 8026cbc:	f200 82fa 	bhi.w	80272b4 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x618>
 8026cc0:	2c09      	cmp	r4, #9
 8026cc2:	d901      	bls.n	8026cc8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2c>
 8026cc4:	2402      	movs	r4, #2
 8026cc6:	e058      	b.n	8026d7a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xde>
 8026cc8:	f7e1 f8a8 	bl	8007e1c <HAL_GetTick>
 8026ccc:	f8c5 01a4 	str.w	r0, [r5, #420]	@ 0x1a4
 8026cd0:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	@ 0xa0c
 8026cd4:	f895 9044 	ldrb.w	r9, [r5, #68]	@ 0x44
 8026cd8:	f1b9 0f07 	cmp.w	r9, #7
 8026cdc:	f200 82e4 	bhi.w	80272a8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x60c>
 8026ce0:	e8df f019 	tbh	[pc, r9, lsl #1]
 8026ce4:	003d0008 	.word	0x003d0008
 8026ce8:	02e20142 	.word	0x02e20142
 8026cec:	020201b2 	.word	0x020201b2
 8026cf0:	02e602e6 	.word	0x02e602e6
 8026cf4:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8026cf8:	4323      	orrs	r3, r4
 8026cfa:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 8026cfe:	f040 82d7 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8026d02:	f1b8 0f01 	cmp.w	r8, #1
 8026d06:	f040 82d3 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8026d0a:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 8026d0e:	681a      	ldr	r2, [r3, #0]
 8026d10:	7812      	ldrb	r2, [r2, #0]
 8026d12:	2a01      	cmp	r2, #1
 8026d14:	f000 82cc 	beq.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8026d18:	f8d3 3290 	ldr.w	r3, [r3, #656]	@ 0x290
 8026d1c:	b10b      	cbz	r3, 8026d22 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x86>
 8026d1e:	7838      	ldrb	r0, [r7, #0]
 8026d20:	4798      	blx	r3
 8026d22:	7839      	ldrb	r1, [r7, #0]
 8026d24:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	@ 0x6f0
 8026d28:	f7ff fe6d 	bl	8026a06 <BnrgmHealthModelAttentionTimerSet>
 8026d2c:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	@ 0xa0c
 8026d30:	783a      	ldrb	r2, [r7, #0]
 8026d32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8026d36:	f8d3 2046 	ldr.w	r2, [r3, #70]	@ 0x46
 8026d3a:	f8c3 2052 	str.w	r2, [r3, #82]	@ 0x52
 8026d3e:	f8d3 204a 	ldr.w	r2, [r3, #74]	@ 0x4a
 8026d42:	f8c3 2056 	str.w	r2, [r3, #86]	@ 0x56
 8026d46:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8026d4a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 8026d4e:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8026d52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8026d56:	4620      	mov	r0, r4
 8026d58:	b03c      	add	sp, #240	@ 0xf0
 8026d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026d5e:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8026d62:	2b00      	cmp	r3, #0
 8026d64:	f040 809a 	bne.w	8026e9c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x200>
 8026d68:	2c02      	cmp	r4, #2
 8026d6a:	f040 82a1 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8026d6e:	f1b8 0f05 	cmp.w	r8, #5
 8026d72:	f040 829d 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8026d76:	783b      	ldrb	r3, [r7, #0]
 8026d78:	b113      	cbz	r3, 8026d80 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xe4>
 8026d7a:	f885 41a8 	strb.w	r4, [r5, #424]	@ 0x1a8
 8026d7e:	e7ea      	b.n	8026d56 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8026d80:	787b      	ldrb	r3, [r7, #1]
 8026d82:	2b01      	cmp	r3, #1
 8026d84:	d805      	bhi.n	8026d92 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8026d86:	f8d6 86f0 	ldr.w	r8, [r6, #1776]	@ 0x6f0
 8026d8a:	f898 21fe 	ldrb.w	r2, [r8, #510]	@ 0x1fe
 8026d8e:	429a      	cmp	r2, r3
 8026d90:	d203      	bcs.n	8026d9a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xfe>
 8026d92:	2302      	movs	r3, #2
 8026d94:	f885 31a8 	strb.w	r3, [r5, #424]	@ 0x1a8
 8026d98:	e7dd      	b.n	8026d56 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8026d9a:	78b9      	ldrb	r1, [r7, #2]
 8026d9c:	2903      	cmp	r1, #3
 8026d9e:	d8ec      	bhi.n	8026d7a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xde>
 8026da0:	2901      	cmp	r1, #1
 8026da2:	78fa      	ldrb	r2, [r7, #3]
 8026da4:	d815      	bhi.n	8026dd2 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x136>
 8026da6:	2a00      	cmp	r2, #0
 8026da8:	d1f3      	bne.n	8026d92 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8026daa:	793a      	ldrb	r2, [r7, #4]
 8026dac:	2a00      	cmp	r2, #0
 8026dae:	d1f0      	bne.n	8026d92 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8026db0:	f888 31fa 	strb.w	r3, [r8, #506]	@ 0x1fa
 8026db4:	78bb      	ldrb	r3, [r7, #2]
 8026db6:	f888 31fb 	strb.w	r3, [r8, #507]	@ 0x1fb
 8026dba:	78fa      	ldrb	r2, [r7, #3]
 8026dbc:	f888 21fc 	strb.w	r2, [r8, #508]	@ 0x1fc
 8026dc0:	7939      	ldrb	r1, [r7, #4]
 8026dc2:	f888 11fd 	strb.w	r1, [r8, #509]	@ 0x1fd
 8026dc6:	2b03      	cmp	r3, #3
 8026dc8:	d82a      	bhi.n	8026e20 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x184>
 8026dca:	e8df f003 	tbb	[pc, r3]
 8026dce:	1355      	.short	0x1355
 8026dd0:	4b18      	.short	0x4b18
 8026dd2:	2902      	cmp	r1, #2
 8026dd4:	d107      	bne.n	8026de6 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x14a>
 8026dd6:	2a04      	cmp	r2, #4
 8026dd8:	f63f af74 	bhi.w	8026cc4 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x28>
 8026ddc:	793a      	ldrb	r2, [r7, #4]
 8026dde:	3a01      	subs	r2, #1
 8026de0:	2a07      	cmp	r2, #7
 8026de2:	d9e5      	bls.n	8026db0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x114>
 8026de4:	e76e      	b.n	8026cc4 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x28>
 8026de6:	2a03      	cmp	r2, #3
 8026de8:	d8d3      	bhi.n	8026d92 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8026dea:	793a      	ldrb	r2, [r7, #4]
 8026dec:	3a01      	subs	r2, #1
 8026dee:	2a07      	cmp	r2, #7
 8026df0:	d9de      	bls.n	8026db0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x114>
 8026df2:	e7ce      	b.n	8026d92 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8026df4:	f898 31ff 	ldrb.w	r3, [r8, #511]	@ 0x1ff
 8026df8:	07d9      	lsls	r1, r3, #31
 8026dfa:	d411      	bmi.n	8026e20 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x184>
 8026dfc:	e7c9      	b.n	8026d92 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8026dfe:	2a04      	cmp	r2, #4
 8026e00:	d904      	bls.n	8026e0c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x170>
 8026e02:	2202      	movs	r2, #2
 8026e04:	f885 21a8 	strb.w	r2, [r5, #424]	@ 0x1a8
 8026e08:	461c      	mov	r4, r3
 8026e0a:	e7a4      	b.n	8026d56 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8026e0c:	f898 0206 	ldrb.w	r0, [r8, #518]	@ 0x206
 8026e10:	4288      	cmp	r0, r1
 8026e12:	d3f6      	bcc.n	8026e02 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x166>
 8026e14:	f8b8 1202 	ldrh.w	r1, [r8, #514]	@ 0x202
 8026e18:	fa41 f202 	asr.w	r2, r1, r2
 8026e1c:	07d0      	lsls	r0, r2, #31
 8026e1e:	d5f0      	bpl.n	8026e02 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x166>
 8026e20:	2205      	movs	r2, #5
 8026e22:	4639      	mov	r1, r7
 8026e24:	f105 005d 	add.w	r0, r5, #93	@ 0x5d
 8026e28:	f002 f9a6 	bl	8029178 <memmove>
 8026e2c:	f898 31fa 	ldrb.w	r3, [r8, #506]	@ 0x1fa
 8026e30:	bb3b      	cbnz	r3, 8026e82 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x1e6>
 8026e32:	461d      	mov	r5, r3
 8026e34:	f8d6 7a0c 	ldr.w	r7, [r6, #2572]	@ 0xa0c
 8026e38:	f7f0 fe22 	bl	8017a80 <MoblePalBluetoothRandom>
 8026e3c:	442f      	add	r7, r5
 8026e3e:	3501      	adds	r5, #1
 8026e40:	2d20      	cmp	r5, #32
 8026e42:	f887 0142 	strb.w	r0, [r7, #322]	@ 0x142
 8026e46:	d1f5      	bne.n	8026e34 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x198>
 8026e48:	f8d6 0a0c 	ldr.w	r0, [r6, #2572]	@ 0xa0c
 8026e4c:	2120      	movs	r1, #32
 8026e4e:	f500 70a1 	add.w	r0, r0, #322	@ 0x142
 8026e52:	f7f2 fc4b 	bl	80196ec <MoblePalCryptoInitEcc>
 8026e56:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	@ 0xa0c
 8026e5a:	b1d0      	cbz	r0, 8026e92 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x1f6>
 8026e5c:	2202      	movs	r2, #2
 8026e5e:	f883 21a8 	strb.w	r2, [r3, #424]	@ 0x1a8
 8026e62:	e778      	b.n	8026d56 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8026e64:	2a03      	cmp	r2, #3
 8026e66:	d894      	bhi.n	8026d92 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8026e68:	f898 3207 	ldrb.w	r3, [r8, #519]	@ 0x207
 8026e6c:	428b      	cmp	r3, r1
 8026e6e:	d390      	bcc.n	8026d92 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8026e70:	f8b8 3204 	ldrh.w	r3, [r8, #516]	@ 0x204
 8026e74:	4113      	asrs	r3, r2
 8026e76:	e7bf      	b.n	8026df8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x15c>
 8026e78:	f898 3200 	ldrb.w	r3, [r8, #512]	@ 0x200
 8026e7c:	2b00      	cmp	r3, #0
 8026e7e:	d1cf      	bne.n	8026e20 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x184>
 8026e80:	e787      	b.n	8026d92 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8026e82:	2220      	movs	r2, #32
 8026e84:	f508 7112 	add.w	r1, r8, #584	@ 0x248
 8026e88:	f505 70a1 	add.w	r0, r5, #322	@ 0x142
 8026e8c:	f002 f974 	bl	8029178 <memmove>
 8026e90:	e7da      	b.n	8026e48 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x1ac>
 8026e92:	2201      	movs	r2, #1
 8026e94:	f883 21a9 	strb.w	r2, [r3, #425]	@ 0x1a9
 8026e98:	2400      	movs	r4, #0
 8026e9a:	e75c      	b.n	8026d56 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8026e9c:	2b01      	cmp	r3, #1
 8026e9e:	f040 8207 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8026ea2:	2c03      	cmp	r4, #3
 8026ea4:	f040 8204 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8026ea8:	f1b8 0f40 	cmp.w	r8, #64	@ 0x40
 8026eac:	f040 8200 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8026eb0:	f8d6 16f0 	ldr.w	r1, [r6, #1776]	@ 0x6f0
 8026eb4:	f891 31fa 	ldrb.w	r3, [r1, #506]	@ 0x1fa
 8026eb8:	b32b      	cbz	r3, 8026f06 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x26a>
 8026eba:	4642      	mov	r2, r8
 8026ebc:	f501 7102 	add.w	r1, r1, #520	@ 0x208
 8026ec0:	f505 70b1 	add.w	r0, r5, #354	@ 0x162
 8026ec4:	f002 f958 	bl	8029178 <memmove>
 8026ec8:	2240      	movs	r2, #64	@ 0x40
 8026eca:	f8d6 0a0c 	ldr.w	r0, [r6, #2572]	@ 0xa0c
 8026ece:	4639      	mov	r1, r7
 8026ed0:	f002 f952 	bl	8029178 <memmove>
 8026ed4:	f8d6 4a0c 	ldr.w	r4, [r6, #2572]	@ 0xa0c
 8026ed8:	aa2c      	add	r2, sp, #176	@ 0xb0
 8026eda:	f504 73b1 	add.w	r3, r4, #354	@ 0x162
 8026ede:	f504 7ed1 	add.w	lr, r4, #418	@ 0x1a2
 8026ee2:	4615      	mov	r5, r2
 8026ee4:	6818      	ldr	r0, [r3, #0]
 8026ee6:	6859      	ldr	r1, [r3, #4]
 8026ee8:	4694      	mov	ip, r2
 8026eea:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8026eee:	3308      	adds	r3, #8
 8026ef0:	4573      	cmp	r3, lr
 8026ef2:	4662      	mov	r2, ip
 8026ef4:	d1f6      	bne.n	8026ee4 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x248>
 8026ef6:	4620      	mov	r0, r4
 8026ef8:	f7f2 fc0c 	bl	8019714 <MoblePalCryptoGetEccGenSecret>
 8026efc:	6420      	str	r0, [r4, #64]	@ 0x40
 8026efe:	b9d0      	cbnz	r0, 8026f36 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x29a>
 8026f00:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	@ 0xa0c
 8026f04:	e005      	b.n	8026f12 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x276>
 8026f06:	a81c      	add	r0, sp, #112	@ 0x70
 8026f08:	f7f1 fcf2 	bl	80188f0 <MoblePalCryptoGetEccPublicKey.part.0>
 8026f0c:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	@ 0xa0c
 8026f10:	b118      	cbz	r0, 8026f1a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x27e>
 8026f12:	2402      	movs	r4, #2
 8026f14:	f883 41a8 	strb.w	r4, [r3, #424]	@ 0x1a8
 8026f18:	e71d      	b.n	8026d56 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8026f1a:	aa1c      	add	r2, sp, #112	@ 0x70
 8026f1c:	f503 73b1 	add.w	r3, r3, #354	@ 0x162
 8026f20:	ad2c      	add	r5, sp, #176	@ 0xb0
 8026f22:	4614      	mov	r4, r2
 8026f24:	cc03      	ldmia	r4!, {r0, r1}
 8026f26:	42ac      	cmp	r4, r5
 8026f28:	6018      	str	r0, [r3, #0]
 8026f2a:	6059      	str	r1, [r3, #4]
 8026f2c:	4622      	mov	r2, r4
 8026f2e:	f103 0308 	add.w	r3, r3, #8
 8026f32:	d1f6      	bne.n	8026f22 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x286>
 8026f34:	e7c8      	b.n	8026ec8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x22c>
 8026f36:	f8d6 4a0c 	ldr.w	r4, [r6, #2572]	@ 0xa0c
 8026f3a:	2240      	movs	r2, #64	@ 0x40
 8026f3c:	f104 0062 	add.w	r0, r4, #98	@ 0x62
 8026f40:	4639      	mov	r1, r7
 8026f42:	f002 f919 	bl	8029178 <memmove>
 8026f46:	f104 03a2 	add.w	r3, r4, #162	@ 0xa2
 8026f4a:	ac3c      	add	r4, sp, #240	@ 0xf0
 8026f4c:	462a      	mov	r2, r5
 8026f4e:	ca03      	ldmia	r2!, {r0, r1}
 8026f50:	42a2      	cmp	r2, r4
 8026f52:	6018      	str	r0, [r3, #0]
 8026f54:	6059      	str	r1, [r3, #4]
 8026f56:	4615      	mov	r5, r2
 8026f58:	f103 0308 	add.w	r3, r3, #8
 8026f5c:	d1f6      	bne.n	8026f4c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2b0>
 8026f5e:	e79b      	b.n	8026e98 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x1fc>
 8026f60:	20002504 	.word	0x20002504
 8026f64:	0001d4c0 	.word	0x0001d4c0
 8026f68:	f895 a045 	ldrb.w	sl, [r5, #69]	@ 0x45
 8026f6c:	f1ba 0f00 	cmp.w	sl, #0
 8026f70:	f040 819e 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8026f74:	2c05      	cmp	r4, #5
 8026f76:	f040 819b 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8026f7a:	f1b8 0f10 	cmp.w	r8, #16
 8026f7e:	f040 8197 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8026f82:	4628      	mov	r0, r5
 8026f84:	f7f2 fbc6 	bl	8019714 <MoblePalCryptoGetEccGenSecret>
 8026f88:	6428      	str	r0, [r5, #64]	@ 0x40
 8026f8a:	b930      	cbnz	r0, 8026f9a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2fe>
 8026f8c:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	@ 0xa0c
 8026f90:	2202      	movs	r2, #2
 8026f92:	f883 21a8 	strb.w	r2, [r3, #424]	@ 0x1a8
 8026f96:	464c      	mov	r4, r9
 8026f98:	e6dd      	b.n	8026d56 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8026f9a:	f8d6 4a0c 	ldr.w	r4, [r6, #2572]	@ 0xa0c
 8026f9e:	4642      	mov	r2, r8
 8026fa0:	4639      	mov	r1, r7
 8026fa2:	f504 7089 	add.w	r0, r4, #274	@ 0x112
 8026fa6:	f002 f8e7 	bl	8029178 <memmove>
 8026faa:	f104 03e2 	add.w	r3, r4, #226	@ 0xe2
 8026fae:	2291      	movs	r2, #145	@ 0x91
 8026fb0:	f104 0151 	add.w	r1, r4, #81	@ 0x51
 8026fb4:	a818      	add	r0, sp, #96	@ 0x60
 8026fb6:	e9cd aa18 	strd	sl, sl, [sp, #96]	@ 0x60
 8026fba:	e9cd aa1a 	strd	sl, sl, [sp, #104]	@ 0x68
 8026fbe:	f7f1 f81f 	bl	8018000 <BAES_CmacCompute>
 8026fc2:	2304      	movs	r3, #4
 8026fc4:	f8d6 0a0c 	ldr.w	r0, [r6, #2572]	@ 0xa0c
 8026fc8:	9302      	str	r3, [sp, #8]
 8026fca:	4bbb      	ldr	r3, [pc, #748]	@ (80272b8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x61c>)
 8026fcc:	e9cd 8300 	strd	r8, r3, [sp]
 8026fd0:	2220      	movs	r2, #32
 8026fd2:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8026fd4:	f100 03e2 	add.w	r3, r0, #226	@ 0xe2
 8026fd8:	30f2      	adds	r0, #242	@ 0xf2
 8026fda:	f7f1 f8df 	bl	801819c <MoblePalCryptoK1.part.0>
 8026fde:	2800      	cmp	r0, #0
 8026fe0:	d1d4      	bne.n	8026f8c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2f0>
 8026fe2:	4604      	mov	r4, r0
 8026fe4:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	@ 0xa0c
 8026fe8:	f7f0 fd4a 	bl	8017a80 <MoblePalBluetoothRandom>
 8026fec:	4425      	add	r5, r4
 8026fee:	3401      	adds	r4, #1
 8026ff0:	2c10      	cmp	r4, #16
 8026ff2:	f885 0122 	strb.w	r0, [r5, #290]	@ 0x122
 8026ff6:	d1f5      	bne.n	8026fe4 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x348>
 8026ff8:	ac1c      	add	r4, sp, #112	@ 0x70
 8026ffa:	2300      	movs	r3, #0
 8026ffc:	4620      	mov	r0, r4
 8026ffe:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8027002:	e9cd 331e 	strd	r3, r3, [sp, #120]	@ 0x78
 8027006:	f7f7 fd2f 	bl	801ea68 <MobleProvisionGenerateAuthValue>
 802700a:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	@ 0xa0c
 802700e:	ae2c      	add	r6, sp, #176	@ 0xb0
 8027010:	f505 7391 	add.w	r3, r5, #290	@ 0x122
 8027014:	f505 7799 	add.w	r7, r5, #306	@ 0x132
 8027018:	6818      	ldr	r0, [r3, #0]
 802701a:	6859      	ldr	r1, [r3, #4]
 802701c:	4632      	mov	r2, r6
 802701e:	c203      	stmia	r2!, {r0, r1}
 8027020:	3308      	adds	r3, #8
 8027022:	42bb      	cmp	r3, r7
 8027024:	4616      	mov	r6, r2
 8027026:	d1f7      	bne.n	8027018 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x37c>
 8027028:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 802702c:	ae30      	add	r6, sp, #192	@ 0xc0
 802702e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8027032:	f505 7381 	add.w	r3, r5, #258	@ 0x102
 8027036:	2220      	movs	r2, #32
 8027038:	a92c      	add	r1, sp, #176	@ 0xb0
 802703a:	f105 00f2 	add.w	r0, r5, #242	@ 0xf2
 802703e:	f7f0 ffdf 	bl	8018000 <BAES_CmacCompute>
 8027042:	f04f 0900 	mov.w	r9, #0
 8027046:	e7a6      	b.n	8026f96 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2fa>
 8027048:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 802704c:	f1b9 0f00 	cmp.w	r9, #0
 8027050:	f040 812e 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8027054:	2c06      	cmp	r4, #6
 8027056:	f040 812b 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 802705a:	f1b8 0f10 	cmp.w	r8, #16
 802705e:	f040 8127 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8027062:	4639      	mov	r1, r7
 8027064:	4642      	mov	r2, r8
 8027066:	f505 7099 	add.w	r0, r5, #306	@ 0x132
 802706a:	ac1c      	add	r4, sp, #112	@ 0x70
 802706c:	f002 f884 	bl	8029178 <memmove>
 8027070:	4620      	mov	r0, r4
 8027072:	e9cd 9918 	strd	r9, r9, [sp, #96]	@ 0x60
 8027076:	e9cd 991a 	strd	r9, r9, [sp, #104]	@ 0x68
 802707a:	e9cd 991c 	strd	r9, r9, [sp, #112]	@ 0x70
 802707e:	e9cd 991e 	strd	r9, r9, [sp, #120]	@ 0x78
 8027082:	f7f7 fcf1 	bl	801ea68 <MobleProvisionGenerateAuthValue>
 8027086:	f8d6 7a0c 	ldr.w	r7, [r6, #2572]	@ 0xa0c
 802708a:	ad2c      	add	r5, sp, #176	@ 0xb0
 802708c:	f507 7399 	add.w	r3, r7, #306	@ 0x132
 8027090:	f507 7ca1 	add.w	ip, r7, #322	@ 0x142
 8027094:	6818      	ldr	r0, [r3, #0]
 8027096:	6859      	ldr	r1, [r3, #4]
 8027098:	462a      	mov	r2, r5
 802709a:	c203      	stmia	r2!, {r0, r1}
 802709c:	3308      	adds	r3, #8
 802709e:	4563      	cmp	r3, ip
 80270a0:	4615      	mov	r5, r2
 80270a2:	d1f7      	bne.n	8027094 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x3f8>
 80270a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80270a8:	ad30      	add	r5, sp, #192	@ 0xc0
 80270aa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80270ae:	ab18      	add	r3, sp, #96	@ 0x60
 80270b0:	2220      	movs	r2, #32
 80270b2:	a92c      	add	r1, sp, #176	@ 0xb0
 80270b4:	f107 00f2 	add.w	r0, r7, #242	@ 0xf2
 80270b8:	f7f0 ffa2 	bl	8018000 <BAES_CmacCompute>
 80270bc:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	@ 0xa0c
 80270c0:	ab18      	add	r3, sp, #96	@ 0x60
 80270c2:	f201 1211 	addw	r2, r1, #273	@ 0x111
 80270c6:	f201 1021 	addw	r0, r1, #289	@ 0x121
 80270ca:	f813 4b01 	ldrb.w	r4, [r3], #1
 80270ce:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80270d2:	42a5      	cmp	r5, r4
 80270d4:	d005      	beq.n	80270e2 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x446>
 80270d6:	2304      	movs	r3, #4
 80270d8:	f881 31a8 	strb.w	r3, [r1, #424]	@ 0x1a8
 80270dc:	f04f 0902 	mov.w	r9, #2
 80270e0:	e759      	b.n	8026f96 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2fa>
 80270e2:	4282      	cmp	r2, r0
 80270e4:	d1f1      	bne.n	80270ca <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x42e>
 80270e6:	e756      	b.n	8026f96 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2fa>
 80270e8:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 80270ec:	2b00      	cmp	r3, #0
 80270ee:	f040 80df 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 80270f2:	2c07      	cmp	r4, #7
 80270f4:	f040 80dc 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 80270f8:	f1b8 0f21 	cmp.w	r8, #33	@ 0x21
 80270fc:	f040 80d8 	bne.w	80272b0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x614>
 8027100:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8027104:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8027108:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
 802710c:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
 8027110:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
 8027114:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
 8027118:	ac2c      	add	r4, sp, #176	@ 0xb0
 802711a:	f105 03e2 	add.w	r3, r5, #226	@ 0xe2
 802711e:	f105 0cf2 	add.w	ip, r5, #242	@ 0xf2
 8027122:	6818      	ldr	r0, [r3, #0]
 8027124:	6859      	ldr	r1, [r3, #4]
 8027126:	4622      	mov	r2, r4
 8027128:	c203      	stmia	r2!, {r0, r1}
 802712a:	3308      	adds	r3, #8
 802712c:	4563      	cmp	r3, ip
 802712e:	4614      	mov	r4, r2
 8027130:	d1f7      	bne.n	8027122 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x486>
 8027132:	f505 7399 	add.w	r3, r5, #306	@ 0x132
 8027136:	ac30      	add	r4, sp, #192	@ 0xc0
 8027138:	f505 7ea1 	add.w	lr, r5, #322	@ 0x142
 802713c:	469c      	mov	ip, r3
 802713e:	6818      	ldr	r0, [r3, #0]
 8027140:	6859      	ldr	r1, [r3, #4]
 8027142:	4622      	mov	r2, r4
 8027144:	c203      	stmia	r2!, {r0, r1}
 8027146:	3308      	adds	r3, #8
 8027148:	4573      	cmp	r3, lr
 802714a:	4614      	mov	r4, r2
 802714c:	d1f7      	bne.n	802713e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x4a2>
 802714e:	f505 7591 	add.w	r5, r5, #290	@ 0x122
 8027152:	aa34      	add	r2, sp, #208	@ 0xd0
 8027154:	6828      	ldr	r0, [r5, #0]
 8027156:	6869      	ldr	r1, [r5, #4]
 8027158:	4613      	mov	r3, r2
 802715a:	c303      	stmia	r3!, {r0, r1}
 802715c:	3508      	adds	r5, #8
 802715e:	4565      	cmp	r5, ip
 8027160:	461a      	mov	r2, r3
 8027162:	d1f7      	bne.n	8027154 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x4b8>
 8027164:	ab14      	add	r3, sp, #80	@ 0x50
 8027166:	2230      	movs	r2, #48	@ 0x30
 8027168:	a92c      	add	r1, sp, #176	@ 0xb0
 802716a:	a810      	add	r0, sp, #64	@ 0x40
 802716c:	f7f0 ff48 	bl	8018000 <BAES_CmacCompute>
 8027170:	f04f 0804 	mov.w	r8, #4
 8027174:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	@ 0xa0c
 8027178:	4b50      	ldr	r3, [pc, #320]	@ (80272bc <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x620>)
 802717a:	9301      	str	r3, [sp, #4]
 802717c:	2510      	movs	r5, #16
 802717e:	f8cd 8008 	str.w	r8, [sp, #8]
 8027182:	9500      	str	r5, [sp, #0]
 8027184:	2220      	movs	r2, #32
 8027186:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8027188:	ab14      	add	r3, sp, #80	@ 0x50
 802718a:	eb0d 0002 	add.w	r0, sp, r2
 802718e:	f7f1 f805 	bl	801819c <MoblePalCryptoK1.part.0>
 8027192:	2800      	cmp	r0, #0
 8027194:	f47f aeb4 	bne.w	8026f00 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x264>
 8027198:	4b49      	ldr	r3, [pc, #292]	@ (80272c0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x624>)
 802719a:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	@ 0xa0c
 802719e:	f8cd 8008 	str.w	r8, [sp, #8]
 80271a2:	e9cd 5300 	strd	r5, r3, [sp]
 80271a6:	2220      	movs	r2, #32
 80271a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80271aa:	ab14      	add	r3, sp, #80	@ 0x50
 80271ac:	a80c      	add	r0, sp, #48	@ 0x30
 80271ae:	f7f0 fff5 	bl	801819c <MoblePalCryptoK1.part.0>
 80271b2:	4604      	mov	r4, r0
 80271b4:	2800      	cmp	r0, #0
 80271b6:	f47f aea3 	bne.w	8026f00 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x264>
 80271ba:	2319      	movs	r3, #25
 80271bc:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80271c0:	2308      	movs	r3, #8
 80271c2:	3719      	adds	r7, #25
 80271c4:	e9cd 0004 	strd	r0, r0, [sp, #16]
 80271c8:	9301      	str	r3, [sp, #4]
 80271ca:	9700      	str	r7, [sp, #0]
 80271cc:	230d      	movs	r3, #13
 80271ce:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80271d2:	a908      	add	r1, sp, #32
 80271d4:	a81c      	add	r0, sp, #112	@ 0x70
 80271d6:	f7f2 f8bd 	bl	8019354 <MoblePalCryptoAesCcmDecrypt>
 80271da:	2801      	cmp	r0, #1
 80271dc:	d906      	bls.n	80271ec <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x550>
 80271de:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	@ 0xa0c
 80271e2:	2206      	movs	r2, #6
 80271e4:	f883 21a8 	strb.w	r2, [r3, #424]	@ 0x1a8
 80271e8:	2402      	movs	r4, #2
 80271ea:	e5b4      	b.n	8026d56 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 80271ec:	4b35      	ldr	r3, [pc, #212]	@ (80272c4 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x628>)
 80271ee:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	@ 0xa0c
 80271f2:	f8cd 8008 	str.w	r8, [sp, #8]
 80271f6:	e9cd 5300 	strd	r5, r3, [sp]
 80271fa:	e9cd 4418 	strd	r4, r4, [sp, #96]	@ 0x60
 80271fe:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
 8027202:	ab14      	add	r3, sp, #80	@ 0x50
 8027204:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8027206:	2220      	movs	r2, #32
 8027208:	a818      	add	r0, sp, #96	@ 0x60
 802720a:	f7f0 ffc7 	bl	801819c <MoblePalCryptoK1.part.0>
 802720e:	2801      	cmp	r0, #1
 8027210:	f63f ae76 	bhi.w	8026f00 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x264>
 8027214:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 8027218:	f89d 5081 	ldrb.w	r5, [sp, #129]	@ 0x81
 802721c:	021b      	lsls	r3, r3, #8
 802721e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8027222:	441d      	add	r5, r3
 8027224:	a818      	add	r0, sp, #96	@ 0x60
 8027226:	f7f1 fced 	bl	8018c04 <MoblePalCryptoSetDevKey>
 802722a:	4629      	mov	r1, r5
 802722c:	a81c      	add	r0, sp, #112	@ 0x70
 802722e:	f7f2 f985 	bl	801953c <MoblePalCryptoSetNetworkKey>
 8027232:	2801      	cmp	r0, #1
 8027234:	4604      	mov	r4, r0
 8027236:	f63f ad8e 	bhi.w	8026d56 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 802723a:	2101      	movs	r1, #1
 802723c:	4628      	mov	r0, r5
 802723e:	f7f1 fbf3 	bl	8018a28 <MoblePalCryptoSetNodeIdntyState>
 8027242:	f89d 7082 	ldrb.w	r7, [sp, #130]	@ 0x82
 8027246:	07fa      	lsls	r2, r7, #31
 8027248:	d50b      	bpl.n	8027262 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x5c6>
 802724a:	4628      	mov	r0, r5
 802724c:	f7f2 ff32 	bl	801a0b4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8027250:	4629      	mov	r1, r5
 8027252:	4604      	mov	r4, r0
 8027254:	a81c      	add	r0, sp, #112	@ 0x70
 8027256:	f7f2 f905 	bl	8019464 <MoblePalCryptoSetNewNetworkKey>
 802725a:	b2e1      	uxtb	r1, r4
 802725c:	2002      	movs	r0, #2
 802725e:	f7f9 ff25 	bl	80210ac <ModelConfigUpdateKRState>
 8027262:	07bb      	lsls	r3, r7, #30
 8027264:	bf42      	ittt	mi
 8027266:	4b18      	ldrmi	r3, [pc, #96]	@ (80272c8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x62c>)
 8027268:	2201      	movmi	r2, #1
 802726a:	f883 265c 	strbmi.w	r2, [r3, #1628]	@ 0x65c
 802726e:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 8027272:	681c      	ldr	r4, [r3, #0]
 8027274:	2104      	movs	r1, #4
 8027276:	1d22      	adds	r2, r4, #4
 8027278:	f10d 0083 	add.w	r0, sp, #131	@ 0x83
 802727c:	f7f3 fc8c 	bl	801ab98 <MobleInputStreamGetBigEndian>
 8027280:	6860      	ldr	r0, [r4, #4]
 8027282:	f7f6 ff5b 	bl	801e13c <MobleStackForcedSetIvIndex>
 8027286:	2400      	movs	r4, #0
 8027288:	aa07      	add	r2, sp, #28
 802728a:	2102      	movs	r1, #2
 802728c:	f10d 0087 	add.w	r0, sp, #135	@ 0x87
 8027290:	9407      	str	r4, [sp, #28]
 8027292:	f7f3 fc81 	bl	801ab98 <MobleInputStreamGetBigEndian>
 8027296:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	@ 0x6f0
 802729a:	9a07      	ldr	r2, [sp, #28]
 802729c:	681b      	ldr	r3, [r3, #0]
 802729e:	805a      	strh	r2, [r3, #2]
 80272a0:	2205      	movs	r2, #5
 80272a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80272a6:	e556      	b.n	8026d56 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 80272a8:	2301      	movs	r3, #1
 80272aa:	f885 31a8 	strb.w	r3, [r5, #424]	@ 0x1a8
 80272ae:	e79b      	b.n	80271e8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x54c>
 80272b0:	2303      	movs	r3, #3
 80272b2:	e7fa      	b.n	80272aa <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x60e>
 80272b4:	2403      	movs	r4, #3
 80272b6:	e54e      	b.n	8026d56 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 80272b8:	0803154b 	.word	0x0803154b
 80272bc:	08031550 	.word	0x08031550
 80272c0:	08031555 	.word	0x08031555
 80272c4:	0803155a 	.word	0x0803155a
 80272c8:	2000140c 	.word	0x2000140c

080272cc <MobleProvision_UnprovisionedNode_SetInputMessage>:
 80272cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80272ce:	4b0d      	ldr	r3, [pc, #52]	@ (8027304 <MobleProvision_UnprovisionedNode_SetInputMessage+0x38>)
 80272d0:	4605      	mov	r5, r0
 80272d2:	460c      	mov	r4, r1
 80272d4:	b939      	cbnz	r1, 80272e6 <MobleProvision_UnprovisionedNode_SetInputMessage+0x1a>
 80272d6:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 80272da:	2202      	movs	r2, #2
 80272dc:	f883 21a8 	strb.w	r2, [r3, #424]	@ 0x1a8
 80272e0:	2003      	movs	r0, #3
 80272e2:	b003      	add	sp, #12
 80272e4:	bd30      	pop	{r4, r5, pc}
 80272e6:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 80272ea:	9201      	str	r2, [sp, #4]
 80272ec:	f7f7 fb16 	bl	801e91c <MobleProvisionGetRole>
 80272f0:	2801      	cmp	r0, #1
 80272f2:	d1f5      	bne.n	80272e0 <MobleProvision_UnprovisionedNode_SetInputMessage+0x14>
 80272f4:	9a01      	ldr	r2, [sp, #4]
 80272f6:	4621      	mov	r1, r4
 80272f8:	4628      	mov	r0, r5
 80272fa:	b003      	add	sp, #12
 80272fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027300:	f7ff bccc 	b.w	8026c9c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0>
 8027304:	20002504 	.word	0x20002504

08027308 <MobleProvisionBearerGatt_FSM>:
 8027308:	b538      	push	{r3, r4, r5, lr}
 802730a:	4d25      	ldr	r5, [pc, #148]	@ (80273a0 <MobleProvisionBearerGatt_FSM+0x98>)
 802730c:	461c      	mov	r4, r3
 802730e:	2803      	cmp	r0, #3
 8027310:	d804      	bhi.n	802731c <MobleProvisionBearerGatt_FSM+0x14>
 8027312:	e8df f000 	tbb	[pc, r0]
 8027316:	3202      	.short	0x3202
 8027318:	1143      	.short	0x1143
 802731a:	b109      	cbz	r1, 8027320 <MobleProvisionBearerGatt_FSM+0x18>
 802731c:	2002      	movs	r0, #2
 802731e:	e00b      	b.n	8027338 <MobleProvisionBearerGatt_FSM+0x30>
 8027320:	f7f8 fa44 	bl	801f7ac <MobleProvision_UnprovisionedNode_IsCompleted>
 8027324:	2801      	cmp	r0, #1
 8027326:	d108      	bne.n	802733a <MobleProvisionBearerGatt_FSM+0x32>
 8027328:	4b1d      	ldr	r3, [pc, #116]	@ (80273a0 <MobleProvisionBearerGatt_FSM+0x98>)
 802732a:	f8d3 0a44 	ldr.w	r0, [r3, #2628]	@ 0xa44
 802732e:	f7f0 f995 	bl	801765c <MoblePalTimerStop>
 8027332:	f7f0 fc05 	bl	8017b40 <MoblePalBluetoothPrvnCmpltReset>
 8027336:	2003      	movs	r0, #3
 8027338:	bd38      	pop	{r3, r4, r5, pc}
 802733a:	f7f7 fc47 	bl	801ebcc <MobleProvision_UnprovisionedNode_GetNextOperation>
 802733e:	2801      	cmp	r0, #1
 8027340:	d0fa      	beq.n	8027338 <MobleProvisionBearerGatt_FSM+0x30>
 8027342:	2802      	cmp	r0, #2
 8027344:	d1ea      	bne.n	802731c <MobleProvisionBearerGatt_FSM+0x14>
 8027346:	f8d5 2a44 	ldr.w	r2, [r5, #2628]	@ 0xa44
 802734a:	4610      	mov	r0, r2
 802734c:	f7f0 f986 	bl	801765c <MoblePalTimerStop>
 8027350:	f241 3188 	movw	r1, #5000	@ 0x1388
 8027354:	4610      	mov	r0, r2
 8027356:	f7f0 f959 	bl	801760c <MoblePalTimerStartOnce>
 802735a:	2801      	cmp	r0, #1
 802735c:	d8de      	bhi.n	802731c <MobleProvisionBearerGatt_FSM+0x14>
 802735e:	f7f8 fa13 	bl	801f788 <MobleProvisionBearerGatt_Transmit>
 8027362:	f7f9 fd5f 	bl	8020e24 <MobleProvision_UnprovisionedNode_CompleteOperation>
 8027366:	f7f7 fc55 	bl	801ec14 <BnrgmProvision_UnprovisionedGetState>
 802736a:	1fc3      	subs	r3, r0, #7
 802736c:	4258      	negs	r0, r3
 802736e:	4158      	adcs	r0, r3
 8027370:	0040      	lsls	r0, r0, #1
 8027372:	2400      	movs	r4, #0
 8027374:	4622      	mov	r2, r4
 8027376:	4621      	mov	r1, r4
 8027378:	e7c9      	b.n	802730e <MobleProvisionBearerGatt_FSM+0x6>
 802737a:	2901      	cmp	r1, #1
 802737c:	d1ce      	bne.n	802731c <MobleProvisionBearerGatt_FSM+0x14>
 802737e:	4611      	mov	r1, r2
 8027380:	f8d5 0a44 	ldr.w	r0, [r5, #2628]	@ 0xa44
 8027384:	3c01      	subs	r4, #1
 8027386:	f7f0 f969 	bl	801765c <MoblePalTimerStop>
 802738a:	b2e2      	uxtb	r2, r4
 802738c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8027390:	f7ff ff9c 	bl	80272cc <MobleProvision_UnprovisionedNode_SetInputMessage>
 8027394:	f7f9 fd46 	bl	8020e24 <MobleProvision_UnprovisionedNode_CompleteOperation>
 8027398:	2000      	movs	r0, #0
 802739a:	e7ea      	b.n	8027372 <MobleProvisionBearerGatt_FSM+0x6a>
 802739c:	2001      	movs	r0, #1
 802739e:	e7cb      	b.n	8027338 <MobleProvisionBearerGatt_FSM+0x30>
 80273a0:	20002504 	.word	0x20002504

080273a4 <MobleProvisionBearerGatt_TimerCallback>:
 80273a4:	b510      	push	{r4, lr}
 80273a6:	460c      	mov	r4, r1
 80273a8:	2300      	movs	r3, #0
 80273aa:	7820      	ldrb	r0, [r4, #0]
 80273ac:	461a      	mov	r2, r3
 80273ae:	2102      	movs	r1, #2
 80273b0:	f7ff ffaa 	bl	8027308 <MobleProvisionBearerGatt_FSM>
 80273b4:	7020      	strb	r0, [r4, #0]
 80273b6:	f7f9 fae5 	bl	8020984 <MobleStackConfigInvalidate>
 80273ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80273be:	f7f7 bde3 	b.w	801ef88 <MoblePalBluetoothGracefulReset>
	...

080273c4 <MobleProvisionBearerGatt_Init>:
 80273c4:	b538      	push	{r3, r4, r5, lr}
 80273c6:	f7f7 fba1 	bl	801eb0c <MobleProvision_UnprovisionedNode_Init>
 80273ca:	2801      	cmp	r0, #1
 80273cc:	4604      	mov	r4, r0
 80273ce:	d81a      	bhi.n	8027406 <MobleProvisionBearerGatt_Init+0x42>
 80273d0:	4d15      	ldr	r5, [pc, #84]	@ (8027428 <MobleProvisionBearerGatt_Init+0x64>)
 80273d2:	4916      	ldr	r1, [pc, #88]	@ (802742c <MobleProvisionBearerGatt_Init+0x68>)
 80273d4:	2302      	movs	r3, #2
 80273d6:	f605 223c 	addw	r2, r5, #2620	@ 0xa3c
 80273da:	f505 6024 	add.w	r0, r5, #2624	@ 0xa40
 80273de:	f885 3a3c 	strb.w	r3, [r5, #2620]	@ 0xa3c
 80273e2:	f7f0 f8a9 	bl	8017538 <MoblePalTimerCreate>
 80273e6:	2801      	cmp	r0, #1
 80273e8:	4604      	mov	r4, r0
 80273ea:	d80c      	bhi.n	8027406 <MobleProvisionBearerGatt_Init+0x42>
 80273ec:	4910      	ldr	r1, [pc, #64]	@ (8027430 <MobleProvisionBearerGatt_Init+0x6c>)
 80273ee:	2200      	movs	r2, #0
 80273f0:	f605 2044 	addw	r0, r5, #2628	@ 0xa44
 80273f4:	f7f0 f8a0 	bl	8017538 <MoblePalTimerCreate>
 80273f8:	2801      	cmp	r0, #1
 80273fa:	4604      	mov	r4, r0
 80273fc:	d905      	bls.n	802740a <MobleProvisionBearerGatt_Init+0x46>
 80273fe:	f505 6024 	add.w	r0, r5, #2624	@ 0xa40
 8027402:	f7f7 fb79 	bl	801eaf8 <MobleProvisionBearerGatt_DeleteTimer>
 8027406:	4620      	mov	r0, r4
 8027408:	bd38      	pop	{r3, r4, r5, pc}
 802740a:	2300      	movs	r3, #0
 802740c:	4619      	mov	r1, r3
 802740e:	461a      	mov	r2, r3
 8027410:	4618      	mov	r0, r3
 8027412:	f7ff ff79 	bl	8027308 <MobleProvisionBearerGatt_FSM>
 8027416:	f24c 3150 	movw	r1, #50000	@ 0xc350
 802741a:	f885 0a3c 	strb.w	r0, [r5, #2620]	@ 0xa3c
 802741e:	f8d5 0a40 	ldr.w	r0, [r5, #2624]	@ 0xa40
 8027422:	f7f0 f8f3 	bl	801760c <MoblePalTimerStartOnce>
 8027426:	e7ee      	b.n	8027406 <MobleProvisionBearerGatt_Init+0x42>
 8027428:	20002504 	.word	0x20002504
 802742c:	080273a5 	.word	0x080273a5
 8027430:	080172c9 	.word	0x080172c9

08027434 <MobleGattOnConnectDisconnect>:
 8027434:	b508      	push	{r3, lr}
 8027436:	b318      	cbz	r0, 8027480 <MobleGattOnConnectDisconnect+0x4c>
 8027438:	f8d0 3164 	ldr.w	r3, [r0, #356]	@ 0x164
 802743c:	b313      	cbz	r3, 8027484 <MobleGattOnConnectDisconnect+0x50>
 802743e:	4a12      	ldr	r2, [pc, #72]	@ (8027488 <MobleGattOnConnectDisconnect+0x54>)
 8027440:	2901      	cmp	r1, #1
 8027442:	8992      	ldrh	r2, [r2, #12]
 8027444:	d112      	bne.n	802746c <MobleGattOnConnectDisconnect+0x38>
 8027446:	f8c0 3168 	str.w	r3, [r0, #360]	@ 0x168
 802744a:	881b      	ldrh	r3, [r3, #0]
 802744c:	4293      	cmp	r3, r2
 802744e:	d008      	beq.n	8027462 <MobleGattOnConnectDisconnect+0x2e>
 8027450:	f7f5 ff3a 	bl	801d2c8 <BnrgmProxyProtocol_Init>
 8027454:	4b0d      	ldr	r3, [pc, #52]	@ (802748c <MobleGattOnConnectDisconnect+0x58>)
 8027456:	2000      	movs	r0, #0
 8027458:	f883 06f4 	strb.w	r0, [r3, #1780]	@ 0x6f4
 802745c:	f8a3 06f6 	strh.w	r0, [r3, #1782]	@ 0x6f6
 8027460:	e003      	b.n	802746a <MobleGattOnConnectDisconnect+0x36>
 8027462:	f7ff ffaf 	bl	80273c4 <MobleProvisionBearerGatt_Init>
 8027466:	2801      	cmp	r0, #1
 8027468:	d9f2      	bls.n	8027450 <MobleGattOnConnectDisconnect+0x1c>
 802746a:	bd08      	pop	{r3, pc}
 802746c:	f8d0 3168 	ldr.w	r3, [r0, #360]	@ 0x168
 8027470:	881b      	ldrh	r3, [r3, #0]
 8027472:	4293      	cmp	r3, r2
 8027474:	d101      	bne.n	802747a <MobleGattOnConnectDisconnect+0x46>
 8027476:	f7ff fae9 	bl	8026a4c <MobleProvisionBearerGatt_DeInit>
 802747a:	f7f5 ff17 	bl	801d2ac <BnrgmProxyProtocol_DeInit>
 802747e:	e7e9      	b.n	8027454 <MobleGattOnConnectDisconnect+0x20>
 8027480:	2003      	movs	r0, #3
 8027482:	e7f2      	b.n	802746a <MobleGattOnConnectDisconnect+0x36>
 8027484:	2002      	movs	r0, #2
 8027486:	e7f0      	b.n	802746a <MobleGattOnConnectDisconnect+0x36>
 8027488:	20000008 	.word	0x20000008
 802748c:	20002504 	.word	0x20002504

08027490 <MobleStackConnectionCallback>:
 8027490:	b510      	push	{r4, lr}
 8027492:	f7f0 fa93 	bl	80179bc <MoblePalBluetoothGetConnectionState>
 8027496:	2801      	cmp	r0, #1
 8027498:	4604      	mov	r4, r0
 802749a:	d01b      	beq.n	80274d4 <MobleStackConnectionCallback+0x44>
 802749c:	2802      	cmp	r0, #2
 802749e:	d01d      	beq.n	80274dc <MobleStackConnectionCallback+0x4c>
 80274a0:	bb50      	cbnz	r0, 80274f8 <MobleStackConnectionCallback+0x68>
 80274a2:	4c16      	ldr	r4, [pc, #88]	@ (80274fc <MobleStackConnectionCallback+0x6c>)
 80274a4:	f7f5 ff62 	bl	801d36c <BnrgmProxyConfig_ResetFilter>
 80274a8:	f7f7 fd10 	bl	801eecc <MobleTransmitSuspendAll>
 80274ac:	f7f7 fd1e 	bl	801eeec <MobleTransmitResumeAll>
 80274b0:	2101      	movs	r1, #1
 80274b2:	f504 60d0 	add.w	r0, r4, #1664	@ 0x680
 80274b6:	f7ff ffbd 	bl	8027434 <MobleGattOnConnectDisconnect>
 80274ba:	2101      	movs	r1, #1
 80274bc:	f504 60d0 	add.w	r0, r4, #1664	@ 0x680
 80274c0:	f7f8 fd34 	bl	801ff2c <MobleStackFSM>
 80274c4:	f8d4 07f8 	ldr.w	r0, [r4, #2040]	@ 0x7f8
 80274c8:	f504 61d0 	add.w	r1, r4, #1664	@ 0x680
 80274cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80274d0:	f7f3 b8a2 	b.w	801a618 <MobleStackFastAdvTimeoutTimerCallback>
 80274d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80274d8:	f7f7 bd08 	b.w	801eeec <MobleTransmitResumeAll>
 80274dc:	f7f7 fd06 	bl	801eeec <MobleTransmitResumeAll>
 80274e0:	2100      	movs	r1, #0
 80274e2:	4807      	ldr	r0, [pc, #28]	@ (8027500 <MobleStackConnectionCallback+0x70>)
 80274e4:	f7ff ffa6 	bl	8027434 <MobleGattOnConnectDisconnect>
 80274e8:	4621      	mov	r1, r4
 80274ea:	4805      	ldr	r0, [pc, #20]	@ (8027500 <MobleStackConnectionCallback+0x70>)
 80274ec:	f7f8 fd1e 	bl	801ff2c <MobleStackFSM>
 80274f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80274f4:	f7f5 bb80 	b.w	801cbf8 <MobleStackCreateStartFastAdvTimer>
 80274f8:	bd10      	pop	{r4, pc}
 80274fa:	bf00      	nop
 80274fc:	2000140c 	.word	0x2000140c
 8027500:	20001a8c 	.word	0x20001a8c

08027504 <MobleProvisionBearerGatt_ProcessPacket>:
 8027504:	b510      	push	{r4, lr}
 8027506:	4602      	mov	r2, r0
 8027508:	4c06      	ldr	r4, [pc, #24]	@ (8027524 <MobleProvisionBearerGatt_ProcessPacket+0x20>)
 802750a:	460b      	mov	r3, r1
 802750c:	b141      	cbz	r1, 8027520 <MobleProvisionBearerGatt_ProcessPacket+0x1c>
 802750e:	f894 0a3c 	ldrb.w	r0, [r4, #2620]	@ 0xa3c
 8027512:	2101      	movs	r1, #1
 8027514:	f7ff fef8 	bl	8027308 <MobleProvisionBearerGatt_FSM>
 8027518:	f884 0a3c 	strb.w	r0, [r4, #2620]	@ 0xa3c
 802751c:	2000      	movs	r0, #0
 802751e:	bd10      	pop	{r4, pc}
 8027520:	2002      	movs	r0, #2
 8027522:	e7f9      	b.n	8027518 <MobleProvisionBearerGatt_ProcessPacket+0x14>
 8027524:	20002504 	.word	0x20002504

08027528 <BnrgmProxyProtocol_ProcessPacket>:
 8027528:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802752c:	460e      	mov	r6, r1
 802752e:	4611      	mov	r1, r2
 8027530:	2a00      	cmp	r2, #0
 8027532:	f000 80a1 	beq.w	8027678 <BnrgmProxyProtocol_ProcessPacket+0x150>
 8027536:	2e00      	cmp	r6, #0
 8027538:	f000 809e 	beq.w	8027678 <BnrgmProxyProtocol_ProcessPacket+0x150>
 802753c:	7833      	ldrb	r3, [r6, #0]
 802753e:	f003 083f 	and.w	r8, r3, #63	@ 0x3f
 8027542:	b920      	cbnz	r0, 802754e <BnrgmProxyProtocol_ProcessPacket+0x26>
 8027544:	f1b8 0f03 	cmp.w	r8, #3
 8027548:	d106      	bne.n	8027558 <BnrgmProxyProtocol_ProcessPacket+0x30>
 802754a:	2502      	movs	r5, #2
 802754c:	e042      	b.n	80275d4 <BnrgmProxyProtocol_ProcessPacket+0xac>
 802754e:	2801      	cmp	r0, #1
 8027550:	d102      	bne.n	8027558 <BnrgmProxyProtocol_ProcessPacket+0x30>
 8027552:	f1b8 0f03 	cmp.w	r8, #3
 8027556:	d1f8      	bne.n	802754a <BnrgmProxyProtocol_ProcessPacket+0x22>
 8027558:	f003 05c0 	and.w	r5, r3, #192	@ 0xc0
 802755c:	2d40      	cmp	r5, #64	@ 0x40
 802755e:	d050      	beq.n	8027602 <BnrgmProxyProtocol_ProcessPacket+0xda>
 8027560:	d802      	bhi.n	8027568 <BnrgmProxyProtocol_ProcessPacket+0x40>
 8027562:	b30d      	cbz	r5, 80275a8 <BnrgmProxyProtocol_ProcessPacket+0x80>
 8027564:	2500      	movs	r5, #0
 8027566:	e035      	b.n	80275d4 <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027568:	061b      	lsls	r3, r3, #24
 802756a:	d5fb      	bpl.n	8027564 <BnrgmProxyProtocol_ProcessPacket+0x3c>
 802756c:	4f43      	ldr	r7, [pc, #268]	@ (802767c <BnrgmProxyProtocol_ProcessPacket+0x154>)
 802756e:	7a3b      	ldrb	r3, [r7, #8]
 8027570:	2b00      	cmp	r3, #0
 8027572:	d0ea      	beq.n	802754a <BnrgmProxyProtocol_ProcessPacket+0x22>
 8027574:	7a7b      	ldrb	r3, [r7, #9]
 8027576:	4543      	cmp	r3, r8
 8027578:	d1e7      	bne.n	802754a <BnrgmProxyProtocol_ProcessPacket+0x22>
 802757a:	1e4c      	subs	r4, r1, #1
 802757c:	b2e1      	uxtb	r1, r4
 802757e:	1c70      	adds	r0, r6, #1
 8027580:	f7f5 fedc 	bl	801d33c <BnrgmProxyProtocol_AddFragment>
 8027584:	2800      	cmp	r0, #0
 8027586:	d047      	beq.n	8027618 <BnrgmProxyProtocol_ProcessPacket+0xf0>
 8027588:	7833      	ldrb	r3, [r6, #0]
 802758a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 802758e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8027592:	2b80      	cmp	r3, #128	@ 0x80
 8027594:	4610      	mov	r0, r2
 8027596:	d14a      	bne.n	802762e <BnrgmProxyProtocol_ProcessPacket+0x106>
 8027598:	f7f0 f860 	bl	801765c <MoblePalTimerStop>
 802759c:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80275a0:	4610      	mov	r0, r2
 80275a2:	f7f0 f833 	bl	801760c <MoblePalTimerStartOnce>
 80275a6:	e7dd      	b.n	8027564 <BnrgmProxyProtocol_ProcessPacket+0x3c>
 80275a8:	4b34      	ldr	r3, [pc, #208]	@ (802767c <BnrgmProxyProtocol_ProcessPacket+0x154>)
 80275aa:	7a1b      	ldrb	r3, [r3, #8]
 80275ac:	b10b      	cbz	r3, 80275b2 <BnrgmProxyProtocol_ProcessPacket+0x8a>
 80275ae:	f7f5 feb7 	bl	801d320 <BnrgmProxyProtocol_ResetSar>
 80275b2:	f1b8 0f03 	cmp.w	r8, #3
 80275b6:	d8d5      	bhi.n	8027564 <BnrgmProxyProtocol_ProcessPacket+0x3c>
 80275b8:	e8df f008 	tbb	[pc, r8]
 80275bc:	1d171002 	.word	0x1d171002
 80275c0:	237f      	movs	r3, #127	@ 0x7f
 80275c2:	1e4a      	subs	r2, r1, #1
 80275c4:	9300      	str	r3, [sp, #0]
 80275c6:	2301      	movs	r3, #1
 80275c8:	b2d2      	uxtb	r2, r2
 80275ca:	18f1      	adds	r1, r6, r3
 80275cc:	2000      	movs	r0, #0
 80275ce:	f7fa fbaf 	bl	8021d30 <MobleStackProcessData>
 80275d2:	4645      	mov	r5, r8
 80275d4:	4628      	mov	r0, r5
 80275d6:	b002      	add	sp, #8
 80275d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80275dc:	237f      	movs	r3, #127	@ 0x7f
 80275de:	2200      	movs	r2, #0
 80275e0:	3901      	subs	r1, #1
 80275e2:	1c70      	adds	r0, r6, #1
 80275e4:	f7f9 fdb2 	bl	802114c <MobleStackProcessBeacon>
 80275e8:	e7f4      	b.n	80275d4 <BnrgmProxyProtocol_ProcessPacket+0xac>
 80275ea:	3901      	subs	r1, #1
 80275ec:	b2c9      	uxtb	r1, r1
 80275ee:	1c70      	adds	r0, r6, #1
 80275f0:	f7f6 f816 	bl	801d620 <BnrgmProxyConfig_ProcessData>
 80275f4:	e7ee      	b.n	80275d4 <BnrgmProxyProtocol_ProcessPacket+0xac>
 80275f6:	3901      	subs	r1, #1
 80275f8:	b2c9      	uxtb	r1, r1
 80275fa:	1c70      	adds	r0, r6, #1
 80275fc:	f7ff ff82 	bl	8027504 <MobleProvisionBearerGatt_ProcessPacket>
 8027600:	e7e8      	b.n	80275d4 <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027602:	4d1e      	ldr	r5, [pc, #120]	@ (802767c <BnrgmProxyProtocol_ProcessPacket+0x154>)
 8027604:	7a2b      	ldrb	r3, [r5, #8]
 8027606:	b10b      	cbz	r3, 802760c <BnrgmProxyProtocol_ProcessPacket+0xe4>
 8027608:	f7f5 fe8a 	bl	801d320 <BnrgmProxyProtocol_ResetSar>
 802760c:	3901      	subs	r1, #1
 802760e:	b2c9      	uxtb	r1, r1
 8027610:	1c70      	adds	r0, r6, #1
 8027612:	f7f5 fe93 	bl	801d33c <BnrgmProxyProtocol_AddFragment>
 8027616:	b908      	cbnz	r0, 802761c <BnrgmProxyProtocol_ProcessPacket+0xf4>
 8027618:	2504      	movs	r5, #4
 802761a:	e7db      	b.n	80275d4 <BnrgmProxyProtocol_ProcessPacket+0xac>
 802761c:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 8027620:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8027624:	f7ef fff2 	bl	801760c <MoblePalTimerStartOnce>
 8027628:	f885 8009 	strb.w	r8, [r5, #9]
 802762c:	e79a      	b.n	8027564 <BnrgmProxyProtocol_ProcessPacket+0x3c>
 802762e:	f7f0 f815 	bl	801765c <MoblePalTimerStop>
 8027632:	7a7b      	ldrb	r3, [r7, #9]
 8027634:	2b03      	cmp	r3, #3
 8027636:	d80b      	bhi.n	8027650 <BnrgmProxyProtocol_ProcessPacket+0x128>
 8027638:	e8df f003 	tbb	[pc, r3]
 802763c:	19140d02 	.word	0x19140d02
 8027640:	237f      	movs	r3, #127	@ 0x7f
 8027642:	9300      	str	r3, [sp, #0]
 8027644:	7a3a      	ldrb	r2, [r7, #8]
 8027646:	490e      	ldr	r1, [pc, #56]	@ (8027680 <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8027648:	2301      	movs	r3, #1
 802764a:	2000      	movs	r0, #0
 802764c:	f7fa fb70 	bl	8021d30 <MobleStackProcessData>
 8027650:	2500      	movs	r5, #0
 8027652:	723d      	strb	r5, [r7, #8]
 8027654:	e7be      	b.n	80275d4 <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027656:	7a39      	ldrb	r1, [r7, #8]
 8027658:	4809      	ldr	r0, [pc, #36]	@ (8027680 <BnrgmProxyProtocol_ProcessPacket+0x158>)
 802765a:	237f      	movs	r3, #127	@ 0x7f
 802765c:	2200      	movs	r2, #0
 802765e:	f7f9 fd75 	bl	802114c <MobleStackProcessBeacon>
 8027662:	e7f5      	b.n	8027650 <BnrgmProxyProtocol_ProcessPacket+0x128>
 8027664:	7a39      	ldrb	r1, [r7, #8]
 8027666:	4806      	ldr	r0, [pc, #24]	@ (8027680 <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8027668:	f7f5 ffda 	bl	801d620 <BnrgmProxyConfig_ProcessData>
 802766c:	e7f0      	b.n	8027650 <BnrgmProxyProtocol_ProcessPacket+0x128>
 802766e:	7a39      	ldrb	r1, [r7, #8]
 8027670:	4803      	ldr	r0, [pc, #12]	@ (8027680 <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8027672:	f7ff ff47 	bl	8027504 <MobleProvisionBearerGatt_ProcessPacket>
 8027676:	e7eb      	b.n	8027650 <BnrgmProxyProtocol_ProcessPacket+0x128>
 8027678:	2503      	movs	r5, #3
 802767a:	e7ab      	b.n	80275d4 <BnrgmProxyProtocol_ProcessPacket+0xac>
 802767c:	20000314 	.word	0x20000314
 8027680:	2000031e 	.word	0x2000031e

08027684 <MobleGattWriteCallback>:
 8027684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027686:	460c      	mov	r4, r1
 8027688:	4611      	mov	r1, r2
 802768a:	461a      	mov	r2, r3
 802768c:	2800      	cmp	r0, #0
 802768e:	d052      	beq.n	8027736 <MobleGattWriteCallback+0xb2>
 8027690:	2900      	cmp	r1, #0
 8027692:	d050      	beq.n	8027736 <MobleGattWriteCallback+0xb2>
 8027694:	2b00      	cmp	r3, #0
 8027696:	d04e      	beq.n	8027736 <MobleGattWriteCallback+0xb2>
 8027698:	f8d0 3164 	ldr.w	r3, [r0, #356]	@ 0x164
 802769c:	2b00      	cmp	r3, #0
 802769e:	d048      	beq.n	8027732 <MobleGattWriteCallback+0xae>
 80276a0:	6858      	ldr	r0, [r3, #4]
 80276a2:	2800      	cmp	r0, #0
 80276a4:	d045      	beq.n	8027732 <MobleGattWriteCallback+0xae>
 80276a6:	789f      	ldrb	r7, [r3, #2]
 80276a8:	2f00      	cmp	r7, #0
 80276aa:	d042      	beq.n	8027732 <MobleGattWriteCallback+0xae>
 80276ac:	2500      	movs	r5, #0
 80276ae:	8983      	ldrh	r3, [r0, #12]
 80276b0:	1c5e      	adds	r6, r3, #1
 80276b2:	b2b6      	uxth	r6, r6
 80276b4:	42b4      	cmp	r4, r6
 80276b6:	d116      	bne.n	80276e6 <MobleGattWriteCallback+0x62>
 80276b8:	7903      	ldrb	r3, [r0, #4]
 80276ba:	4293      	cmp	r3, r2
 80276bc:	d33b      	bcc.n	8027736 <MobleGattWriteCallback+0xb2>
 80276be:	7883      	ldrb	r3, [r0, #2]
 80276c0:	f013 0f06 	tst.w	r3, #6
 80276c4:	d035      	beq.n	8027732 <MobleGattWriteCallback+0xae>
 80276c6:	8803      	ldrh	r3, [r0, #0]
 80276c8:	f642 20db 	movw	r0, #10971	@ 0x2adb
 80276cc:	4283      	cmp	r3, r0
 80276ce:	d008      	beq.n	80276e2 <MobleGattWriteCallback+0x5e>
 80276d0:	f642 20dd 	movw	r0, #10973	@ 0x2add
 80276d4:	4283      	cmp	r3, r0
 80276d6:	d12c      	bne.n	8027732 <MobleGattWriteCallback+0xae>
 80276d8:	2000      	movs	r0, #0
 80276da:	f7ff ff25 	bl	8027528 <BnrgmProxyProtocol_ProcessPacket>
 80276de:	2000      	movs	r0, #0
 80276e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80276e2:	2001      	movs	r0, #1
 80276e4:	e7f9      	b.n	80276da <MobleGattWriteCallback+0x56>
 80276e6:	3302      	adds	r3, #2
 80276e8:	b29b      	uxth	r3, r3
 80276ea:	429c      	cmp	r4, r3
 80276ec:	d11b      	bne.n	8027726 <MobleGattWriteCallback+0xa2>
 80276ee:	7883      	ldrb	r3, [r0, #2]
 80276f0:	071b      	lsls	r3, r3, #28
 80276f2:	d51e      	bpl.n	8027732 <MobleGattWriteCallback+0xae>
 80276f4:	8803      	ldrh	r3, [r0, #0]
 80276f6:	f642 22dc 	movw	r2, #10972	@ 0x2adc
 80276fa:	4293      	cmp	r3, r2
 80276fc:	d00c      	beq.n	8027718 <MobleGattWriteCallback+0x94>
 80276fe:	f642 22de 	movw	r2, #10974	@ 0x2ade
 8027702:	4293      	cmp	r3, r2
 8027704:	d115      	bne.n	8027732 <MobleGattWriteCallback+0xae>
 8027706:	780b      	ldrb	r3, [r1, #0]
 8027708:	4a0c      	ldr	r2, [pc, #48]	@ (802773c <MobleGattWriteCallback+0xb8>)
 802770a:	f003 0301 	and.w	r3, r3, #1
 802770e:	f882 308e 	strb.w	r3, [r2, #142]	@ 0x8e
 8027712:	f7f5 fecf 	bl	801d4b4 <BnrgmStackSendBeaconOverGatt>
 8027716:	e7e2      	b.n	80276de <MobleGattWriteCallback+0x5a>
 8027718:	780b      	ldrb	r3, [r1, #0]
 802771a:	4a08      	ldr	r2, [pc, #32]	@ (802773c <MobleGattWriteCallback+0xb8>)
 802771c:	f003 0301 	and.w	r3, r3, #1
 8027720:	f882 308e 	strb.w	r3, [r2, #142]	@ 0x8e
 8027724:	e7db      	b.n	80276de <MobleGattWriteCallback+0x5a>
 8027726:	3501      	adds	r5, #1
 8027728:	b2eb      	uxtb	r3, r5
 802772a:	429f      	cmp	r7, r3
 802772c:	f100 0010 	add.w	r0, r0, #16
 8027730:	d8bd      	bhi.n	80276ae <MobleGattWriteCallback+0x2a>
 8027732:	2002      	movs	r0, #2
 8027734:	e7d4      	b.n	80276e0 <MobleGattWriteCallback+0x5c>
 8027736:	2003      	movs	r0, #3
 8027738:	e7d2      	b.n	80276e0 <MobleGattWriteCallback+0x5c>
 802773a:	bf00      	nop
 802773c:	20000314 	.word	0x20000314

08027740 <MobleProvision_SetInputMessage>:
 8027740:	b410      	push	{r4}
 8027742:	4604      	mov	r4, r0
 8027744:	4608      	mov	r0, r1
 8027746:	4611      	mov	r1, r2
 8027748:	461a      	mov	r2, r3
 802774a:	b91c      	cbnz	r4, 8027754 <MobleProvision_SetInputMessage+0x14>
 802774c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027750:	f7f8 b98a 	b.w	801fa68 <MobleProvision_ProvisionerNode_SetInputMessage>
 8027754:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027758:	f7ff bdb8 	b.w	80272cc <MobleProvision_UnprovisionedNode_SetInputMessage>

0802775c <MoblePBADVProcessData>:
 802775c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027760:	2a05      	cmp	r2, #5
 8027762:	b0a5      	sub	sp, #148	@ 0x94
 8027764:	4605      	mov	r5, r0
 8027766:	460c      	mov	r4, r1
 8027768:	4693      	mov	fp, r2
 802776a:	f240 8163 	bls.w	8027a34 <MoblePBADVProcessData+0x2d8>
 802776e:	7a03      	ldrb	r3, [r0, #8]
 8027770:	680f      	ldr	r7, [r1, #0]
 8027772:	f891 9004 	ldrb.w	r9, [r1, #4]
 8027776:	b113      	cbz	r3, 802777e <MoblePBADVProcessData+0x22>
 8027778:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 802777a:	4297      	cmp	r7, r2
 802777c:	d025      	beq.n	80277ca <MoblePBADVProcessData+0x6e>
 802777e:	f895 217c 	ldrb.w	r2, [r5, #380]	@ 0x17c
 8027782:	2a00      	cmp	r2, #0
 8027784:	f000 814d 	beq.w	8027a22 <MoblePBADVProcessData+0x2c6>
 8027788:	f8d5 1198 	ldr.w	r1, [r5, #408]	@ 0x198
 802778c:	428f      	cmp	r7, r1
 802778e:	f040 8153 	bne.w	8027a38 <MoblePBADVProcessData+0x2dc>
 8027792:	2601      	movs	r6, #1
 8027794:	f44f 78ba 	mov.w	r8, #372	@ 0x174
 8027798:	fb08 f806 	mul.w	r8, r8, r6
 802779c:	f108 0708 	add.w	r7, r8, #8
 80277a0:	f508 70aa 	add.w	r0, r8, #340	@ 0x154
 80277a4:	4428      	add	r0, r5
 80277a6:	442f      	add	r7, r5
 80277a8:	f7ef ffc8 	bl	801773c <MoblePBADVEraseTimer>
 80277ac:	4638      	mov	r0, r7
 80277ae:	f7ef ff43 	bl	8017638 <MoblePBADVRaiseLinkIdleTimer>
 80277b2:	7963      	ldrb	r3, [r4, #5]
 80277b4:	f003 0203 	and.w	r2, r3, #3
 80277b8:	2a03      	cmp	r2, #3
 80277ba:	d108      	bne.n	80277ce <MoblePBADVProcessData+0x72>
 80277bc:	089b      	lsrs	r3, r3, #2
 80277be:	2b03      	cmp	r3, #3
 80277c0:	d835      	bhi.n	802782e <MoblePBADVProcessData+0xd2>
 80277c2:	e8df f003 	tbb	[pc, r3]
 80277c6:	a686      	.short	0xa686
 80277c8:	0874      	.short	0x0874
 80277ca:	2600      	movs	r6, #0
 80277cc:	e7e2      	b.n	8027794 <MoblePBADVProcessData+0x38>
 80277ce:	2a01      	cmp	r2, #1
 80277d0:	d12f      	bne.n	8027832 <MoblePBADVProcessData+0xd6>
 80277d2:	2b01      	cmp	r3, #1
 80277d4:	d1f2      	bne.n	80277bc <MoblePBADVProcessData+0x60>
 80277d6:	f894 9004 	ldrb.w	r9, [r4, #4]
 80277da:	f44f 74ba 	mov.w	r4, #372	@ 0x174
 80277de:	fb04 5406 	mla	r4, r4, r6, r5
 80277e2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80277e6:	2b00      	cmp	r3, #0
 80277e8:	f000 8124 	beq.w	8027a34 <MoblePBADVProcessData+0x2d8>
 80277ec:	f894 30c0 	ldrb.w	r3, [r4, #192]	@ 0xc0
 80277f0:	4599      	cmp	r9, r3
 80277f2:	f040 811f 	bne.w	8027a34 <MoblePBADVProcessData+0x2d8>
 80277f6:	4638      	mov	r0, r7
 80277f8:	f7ef ffa9 	bl	801774e <MoblePBADVClearTimers>
 80277fc:	f108 00c0 	add.w	r0, r8, #192	@ 0xc0
 8027800:	4428      	add	r0, r5
 8027802:	f7ef fe12 	bl	801742a <MoblePBADVEraseTransaction>
 8027806:	f894 3164 	ldrb.w	r3, [r4, #356]	@ 0x164
 802780a:	f109 0901 	add.w	r9, r9, #1
 802780e:	f884 90c0 	strb.w	r9, [r4, #192]	@ 0xc0
 8027812:	b3c3      	cbz	r3, 8027886 <MoblePBADVProcessData+0x12a>
 8027814:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
 8027818:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
 802781c:	4798      	blx	r3
 802781e:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 8027822:	fb03 5306 	mla	r3, r3, r6, r5
 8027826:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 802782a:	2b03      	cmp	r3, #3
 802782c:	d03a      	beq.n	80278a4 <MoblePBADVProcessData+0x148>
 802782e:	2400      	movs	r4, #0
 8027830:	e13d      	b.n	8027aae <MoblePBADVProcessData+0x352>
 8027832:	eb05 0308 	add.w	r3, r5, r8
 8027836:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 802783a:	2a01      	cmp	r2, #1
 802783c:	d801      	bhi.n	8027842 <MoblePBADVProcessData+0xe6>
 802783e:	f883 902c 	strb.w	r9, [r3, #44]	@ 0x2c
 8027842:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 8027846:	fb03 5606 	mla	r6, r3, r6, r5
 802784a:	f896 302c 	ldrb.w	r3, [r6, #44]	@ 0x2c
 802784e:	4599      	cmp	r9, r3
 8027850:	f000 8090 	beq.w	8027974 <MoblePBADVProcessData+0x218>
 8027854:	3b01      	subs	r3, #1
 8027856:	454b      	cmp	r3, r9
 8027858:	f040 80ec 	bne.w	8027a34 <MoblePBADVProcessData+0x2d8>
 802785c:	2300      	movs	r3, #0
 802785e:	461a      	mov	r2, r3
 8027860:	f886 902c 	strb.w	r9, [r6, #44]	@ 0x2c
 8027864:	2103      	movs	r1, #3
 8027866:	4638      	mov	r0, r7
 8027868:	f7f2 ff1c 	bl	801a6a4 <MoblePBADVSendControl>
 802786c:	f896 302c 	ldrb.w	r3, [r6, #44]	@ 0x2c
 8027870:	3301      	adds	r3, #1
 8027872:	f886 302c 	strb.w	r3, [r6, #44]	@ 0x2c
 8027876:	e0dd      	b.n	8027a34 <MoblePBADVProcessData+0x2d8>
 8027878:	2a01      	cmp	r2, #1
 802787a:	f040 80db 	bne.w	8027a34 <MoblePBADVProcessData+0x2d8>
 802787e:	2b01      	cmp	r3, #1
 8027880:	f040 80ea 	bne.w	8027a58 <MoblePBADVProcessData+0x2fc>
 8027884:	e0d6      	b.n	8027a34 <MoblePBADVProcessData+0x2d8>
 8027886:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 802788a:	2a01      	cmp	r2, #1
 802788c:	d103      	bne.n	8027896 <MoblePBADVProcessData+0x13a>
 802788e:	f7f7 f9c1 	bl	801ec14 <BnrgmProvision_UnprovisionedGetState>
 8027892:	2807      	cmp	r0, #7
 8027894:	d0c3      	beq.n	802781e <MoblePBADVProcessData+0xc2>
 8027896:	4610      	mov	r0, r2
 8027898:	f7f9 fbec 	bl	8021074 <MobleProvision_CompleteOperation>
 802789c:	4638      	mov	r0, r7
 802789e:	f7ff f9a7 	bl	8026bf0 <MoblePBADVFireProvisionStateMach>
 80278a2:	e7bc      	b.n	802781e <MoblePBADVProcessData+0xc2>
 80278a4:	2101      	movs	r1, #1
 80278a6:	4638      	mov	r0, r7
 80278a8:	f7ff f8e5 	bl	8026a76 <MoblePBADVCloseLink>
 80278ac:	e7bf      	b.n	802782e <MoblePBADVProcessData+0xd2>
 80278ae:	6823      	ldr	r3, [r4, #0]
 80278b0:	9303      	str	r3, [sp, #12]
 80278b2:	2204      	movs	r2, #4
 80278b4:	69fb      	ldr	r3, [r7, #28]
 80278b6:	9304      	str	r3, [sp, #16]
 80278b8:	a903      	add	r1, sp, #12
 80278ba:	a804      	add	r0, sp, #16
 80278bc:	f001 fc4c 	bl	8029158 <memcmp>
 80278c0:	4604      	mov	r4, r0
 80278c2:	2800      	cmp	r0, #0
 80278c4:	f040 80b6 	bne.w	8027a34 <MoblePBADVProcessData+0x2d8>
 80278c8:	4601      	mov	r1, r0
 80278ca:	4638      	mov	r0, r7
 80278cc:	f7ff f8d3 	bl	8026a76 <MoblePBADVCloseLink>
 80278d0:	e0ed      	b.n	8027aae <MoblePBADVProcessData+0x352>
 80278d2:	7924      	ldrb	r4, [r4, #4]
 80278d4:	2c00      	cmp	r4, #0
 80278d6:	f040 80ad 	bne.w	8027a34 <MoblePBADVProcessData+0x2d8>
 80278da:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 80278de:	fb03 5506 	mla	r5, r3, r6, r5
 80278e2:	f895 6028 	ldrb.w	r6, [r5, #40]	@ 0x28
 80278e6:	2e01      	cmp	r6, #1
 80278e8:	f040 80a4 	bne.w	8027a34 <MoblePBADVProcessData+0x2d8>
 80278ec:	f895 3029 	ldrb.w	r3, [r5, #41]	@ 0x29
 80278f0:	2b03      	cmp	r3, #3
 80278f2:	f000 809f 	beq.w	8027a34 <MoblePBADVProcessData+0x2d8>
 80278f6:	2380      	movs	r3, #128	@ 0x80
 80278f8:	f885 30c0 	strb.w	r3, [r5, #192]	@ 0xc0
 80278fc:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 8027900:	4623      	mov	r3, r4
 8027902:	4622      	mov	r2, r4
 8027904:	4631      	mov	r1, r6
 8027906:	4638      	mov	r0, r7
 8027908:	f7f2 fecc 	bl	801a6a4 <MoblePBADVSendControl>
 802790c:	f885 602c 	strb.w	r6, [r5, #44]	@ 0x2c
 8027910:	e0cd      	b.n	8027aae <MoblePBADVProcessData+0x352>
 8027912:	7923      	ldrb	r3, [r4, #4]
 8027914:	2b00      	cmp	r3, #0
 8027916:	f040 808d 	bne.w	8027a34 <MoblePBADVProcessData+0x2d8>
 802791a:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 802791e:	fb03 5606 	mla	r6, r3, r6, r5
 8027922:	f896 4028 	ldrb.w	r4, [r6, #40]	@ 0x28
 8027926:	2c00      	cmp	r4, #0
 8027928:	f040 8084 	bne.w	8027a34 <MoblePBADVProcessData+0x2d8>
 802792c:	f896 3029 	ldrb.w	r3, [r6, #41]	@ 0x29
 8027930:	2b03      	cmp	r3, #3
 8027932:	d101      	bne.n	8027938 <MoblePBADVProcessData+0x1dc>
 8027934:	2101      	movs	r1, #1
 8027936:	e7c8      	b.n	80278ca <MoblePBADVProcessData+0x16e>
 8027938:	2b01      	cmp	r3, #1
 802793a:	d17b      	bne.n	8027a34 <MoblePBADVProcessData+0x2d8>
 802793c:	2302      	movs	r3, #2
 802793e:	f108 00c0 	add.w	r0, r8, #192	@ 0xc0
 8027942:	f886 3029 	strb.w	r3, [r6, #41]	@ 0x29
 8027946:	4428      	add	r0, r5
 8027948:	f886 40c0 	strb.w	r4, [r6, #192]	@ 0xc0
 802794c:	f7ef fd6d 	bl	801742a <MoblePBADVEraseTransaction>
 8027950:	4638      	mov	r0, r7
 8027952:	f7ef fefc 	bl	801774e <MoblePBADVClearTimers>
 8027956:	f896 3164 	ldrb.w	r3, [r6, #356]	@ 0x164
 802795a:	b13b      	cbz	r3, 802796c <MoblePBADVProcessData+0x210>
 802795c:	f8d6 3170 	ldr.w	r3, [r6, #368]	@ 0x170
 8027960:	f8d6 0178 	ldr.w	r0, [r6, #376]	@ 0x178
 8027964:	4798      	blx	r3
 8027966:	f7de fd7f 	bl	8006468 <BLEMesh_PbAdvLinkOpenCb>
 802796a:	e0a0      	b.n	8027aae <MoblePBADVProcessData+0x352>
 802796c:	4638      	mov	r0, r7
 802796e:	f7ff f93f 	bl	8026bf0 <MoblePBADVFireProvisionStateMach>
 8027972:	e7f8      	b.n	8027966 <MoblePBADVProcessData+0x20a>
 8027974:	f8d6 90c4 	ldr.w	r9, [r6, #196]	@ 0xc4
 8027978:	f1b9 0f00 	cmp.w	r9, #0
 802797c:	d15a      	bne.n	8027a34 <MoblePBADVProcessData+0x2d8>
 802797e:	ab03      	add	r3, sp, #12
 8027980:	f108 0034 	add.w	r0, r8, #52	@ 0x34
 8027984:	f04f 0a01 	mov.w	sl, #1
 8027988:	9300      	str	r3, [sp, #0]
 802798a:	1d61      	adds	r1, r4, #5
 802798c:	f8cd a004 	str.w	sl, [sp, #4]
 8027990:	ab04      	add	r3, sp, #16
 8027992:	f1ab 0205 	sub.w	r2, fp, #5
 8027996:	4428      	add	r0, r5
 8027998:	f7f6 fd1c 	bl	801e3d4 <MobleSARJoin>
 802799c:	4604      	mov	r4, r0
 802799e:	bbb8      	cbnz	r0, 8027a10 <MoblePBADVProcessData+0x2b4>
 80279a0:	f896 1029 	ldrb.w	r1, [r6, #41]	@ 0x29
 80279a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80279a8:	2903      	cmp	r1, #3
 80279aa:	4603      	mov	r3, r0
 80279ac:	4602      	mov	r2, r0
 80279ae:	d103      	bne.n	80279b8 <MoblePBADVProcessData+0x25c>
 80279b0:	4638      	mov	r0, r7
 80279b2:	f7f2 fe77 	bl	801a6a4 <MoblePBADVSendControl>
 80279b6:	e7bd      	b.n	8027934 <MoblePBADVProcessData+0x1d8>
 80279b8:	2103      	movs	r1, #3
 80279ba:	4638      	mov	r0, r7
 80279bc:	f7f2 fe72 	bl	801a6a4 <MoblePBADVSendControl>
 80279c0:	f896 302c 	ldrb.w	r3, [r6, #44]	@ 0x2c
 80279c4:	f108 002c 	add.w	r0, r8, #44	@ 0x2c
 80279c8:	3301      	adds	r3, #1
 80279ca:	f886 302c 	strb.w	r3, [r6, #44]	@ 0x2c
 80279ce:	4428      	add	r0, r5
 80279d0:	f7ef fd2b 	bl	801742a <MoblePBADVEraseTransaction>
 80279d4:	f896 3164 	ldrb.w	r3, [r6, #356]	@ 0x164
 80279d8:	b13b      	cbz	r3, 80279ea <MoblePBADVProcessData+0x28e>
 80279da:	f8d6 3168 	ldr.w	r3, [r6, #360]	@ 0x168
 80279de:	f8d6 0178 	ldr.w	r0, [r6, #376]	@ 0x178
 80279e2:	464a      	mov	r2, r9
 80279e4:	a904      	add	r1, sp, #16
 80279e6:	4798      	blx	r3
 80279e8:	e061      	b.n	8027aae <MoblePBADVProcessData+0x352>
 80279ea:	f109 33ff 	add.w	r3, r9, #4294967295
 80279ee:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80279f2:	f896 0028 	ldrb.w	r0, [r6, #40]	@ 0x28
 80279f6:	b2db      	uxtb	r3, r3
 80279f8:	f10d 0211 	add.w	r2, sp, #17
 80279fc:	f7ff fea0 	bl	8027740 <MobleProvision_SetInputMessage>
 8027a00:	f896 0028 	ldrb.w	r0, [r6, #40]	@ 0x28
 8027a04:	f7f9 fb36 	bl	8021074 <MobleProvision_CompleteOperation>
 8027a08:	4638      	mov	r0, r7
 8027a0a:	f7ff f8f1 	bl	8026bf0 <MoblePBADVFireProvisionStateMach>
 8027a0e:	e04e      	b.n	8027aae <MoblePBADVProcessData+0x352>
 8027a10:	2801      	cmp	r0, #1
 8027a12:	f43f af0c 	beq.w	802782e <MoblePBADVProcessData+0xd2>
 8027a16:	4638      	mov	r0, r7
 8027a18:	f7ff f87c 	bl	8026b14 <MoblePBADVStopProvisioning>
 8027a1c:	e707      	b.n	802782e <MoblePBADVProcessData+0xd2>
 8027a1e:	461c      	mov	r4, r3
 8027a20:	e045      	b.n	8027aae <MoblePBADVProcessData+0x352>
 8027a22:	b13b      	cbz	r3, 8027a34 <MoblePBADVProcessData+0x2d8>
 8027a24:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 8027a28:	2b01      	cmp	r3, #1
 8027a2a:	d102      	bne.n	8027a32 <MoblePBADVProcessData+0x2d6>
 8027a2c:	f895 6029 	ldrb.w	r6, [r5, #41]	@ 0x29
 8027a30:	b166      	cbz	r6, 8027a4c <MoblePBADVProcessData+0x2f0>
 8027a32:	b91a      	cbnz	r2, 8027a3c <MoblePBADVProcessData+0x2e0>
 8027a34:	2401      	movs	r4, #1
 8027a36:	e03a      	b.n	8027aae <MoblePBADVProcessData+0x352>
 8027a38:	2b00      	cmp	r3, #0
 8027a3a:	d1f3      	bne.n	8027a24 <MoblePBADVProcessData+0x2c8>
 8027a3c:	f895 619c 	ldrb.w	r6, [r5, #412]	@ 0x19c
 8027a40:	2e01      	cmp	r6, #1
 8027a42:	d1f7      	bne.n	8027a34 <MoblePBADVProcessData+0x2d8>
 8027a44:	f895 319d 	ldrb.w	r3, [r5, #413]	@ 0x19d
 8027a48:	2b00      	cmp	r3, #0
 8027a4a:	d1f3      	bne.n	8027a34 <MoblePBADVProcessData+0x2d8>
 8027a4c:	7963      	ldrb	r3, [r4, #5]
 8027a4e:	f003 0203 	and.w	r2, r3, #3
 8027a52:	2a03      	cmp	r2, #3
 8027a54:	f47f af10 	bne.w	8027878 <MoblePBADVProcessData+0x11c>
 8027a58:	089b      	lsrs	r3, r3, #2
 8027a5a:	d1eb      	bne.n	8027a34 <MoblePBADVProcessData+0x2d8>
 8027a5c:	f1b9 0f00 	cmp.w	r9, #0
 8027a60:	d1e8      	bne.n	8027a34 <MoblePBADVProcessData+0x2d8>
 8027a62:	f1bb 0f14 	cmp.w	fp, #20
 8027a66:	d9e5      	bls.n	8027a34 <MoblePBADVProcessData+0x2d8>
 8027a68:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 8027a6c:	435e      	muls	r6, r3
 8027a6e:	f106 0010 	add.w	r0, r6, #16
 8027a72:	2210      	movs	r2, #16
 8027a74:	1da1      	adds	r1, r4, #6
 8027a76:	4428      	add	r0, r5
 8027a78:	f001 fb6e 	bl	8029158 <memcmp>
 8027a7c:	2800      	cmp	r0, #0
 8027a7e:	d1d9      	bne.n	8027a34 <MoblePBADVProcessData+0x2d8>
 8027a80:	f7f7 f844 	bl	801eb0c <MobleProvision_UnprovisionedNode_Init>
 8027a84:	2302      	movs	r3, #2
 8027a86:	4604      	mov	r4, r0
 8027a88:	2800      	cmp	r0, #0
 8027a8a:	d1c8      	bne.n	8027a1e <MoblePBADVProcessData+0x2c2>
 8027a8c:	eb05 0806 	add.w	r8, r5, r6
 8027a90:	f106 0008 	add.w	r0, r6, #8
 8027a94:	f888 3029 	strb.w	r3, [r8, #41]	@ 0x29
 8027a98:	f8c8 7024 	str.w	r7, [r8, #36]	@ 0x24
 8027a9c:	464b      	mov	r3, r9
 8027a9e:	464a      	mov	r2, r9
 8027aa0:	2101      	movs	r1, #1
 8027aa2:	4428      	add	r0, r5
 8027aa4:	f7f2 fdfe 	bl	801a6a4 <MoblePBADVSendControl>
 8027aa8:	2301      	movs	r3, #1
 8027aaa:	f888 302c 	strb.w	r3, [r8, #44]	@ 0x2c
 8027aae:	4620      	mov	r0, r4
 8027ab0:	b025      	add	sp, #148	@ 0x94
 8027ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027ab6 <MobleStackScanCallback>:
 8027ab6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027aba:	4689      	mov	r9, r1
 8027abc:	f99d b030 	ldrsb.w	fp, [sp, #48]	@ 0x30
 8027ac0:	4692      	mov	sl, r2
 8027ac2:	461f      	mov	r7, r3
 8027ac4:	4680      	mov	r8, r0
 8027ac6:	2800      	cmp	r0, #0
 8027ac8:	d03f      	beq.n	8027b4a <MobleStackScanCallback+0x94>
 8027aca:	2b01      	cmp	r3, #1
 8027acc:	d93d      	bls.n	8027b4a <MobleStackScanCallback+0x94>
 8027ace:	2500      	movs	r5, #0
 8027ad0:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8027ad4:	2c01      	cmp	r4, #1
 8027ad6:	eb0a 0605 	add.w	r6, sl, r5
 8027ada:	d936      	bls.n	8027b4a <MobleStackScanCallback+0x94>
 8027adc:	1b7a      	subs	r2, r7, r5
 8027ade:	42a2      	cmp	r2, r4
 8027ae0:	dd33      	ble.n	8027b4a <MobleStackScanCallback+0x94>
 8027ae2:	7873      	ldrb	r3, [r6, #1]
 8027ae4:	1e61      	subs	r1, r4, #1
 8027ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8027ae8:	b2c9      	uxtb	r1, r1
 8027aea:	d111      	bne.n	8027b10 <MobleStackScanCallback+0x5a>
 8027aec:	3c0d      	subs	r4, #13
 8027aee:	2c13      	cmp	r4, #19
 8027af0:	d807      	bhi.n	8027b02 <MobleStackScanCallback+0x4c>
 8027af2:	460a      	mov	r2, r1
 8027af4:	f8cd b000 	str.w	fp, [sp]
 8027af8:	2300      	movs	r3, #0
 8027afa:	1cb1      	adds	r1, r6, #2
 8027afc:	4648      	mov	r0, r9
 8027afe:	f7fa f917 	bl	8021d30 <MobleStackProcessData>
 8027b02:	7833      	ldrb	r3, [r6, #0]
 8027b04:	3301      	adds	r3, #1
 8027b06:	442b      	add	r3, r5
 8027b08:	b2dd      	uxtb	r5, r3
 8027b0a:	42af      	cmp	r7, r5
 8027b0c:	d8e0      	bhi.n	8027ad0 <MobleStackScanCallback+0x1a>
 8027b0e:	e01c      	b.n	8027b4a <MobleStackScanCallback+0x94>
 8027b10:	2b29      	cmp	r3, #41	@ 0x29
 8027b12:	d10d      	bne.n	8027b30 <MobleStackScanCallback+0x7a>
 8027b14:	3c07      	subs	r4, #7
 8027b16:	2c19      	cmp	r4, #25
 8027b18:	d8f3      	bhi.n	8027b02 <MobleStackScanCallback+0x4c>
 8027b1a:	f898 31d4 	ldrb.w	r3, [r8, #468]	@ 0x1d4
 8027b1e:	2b01      	cmp	r3, #1
 8027b20:	d1ef      	bne.n	8027b02 <MobleStackScanCallback+0x4c>
 8027b22:	460a      	mov	r2, r1
 8027b24:	f8d8 029c 	ldr.w	r0, [r8, #668]	@ 0x29c
 8027b28:	1cb1      	adds	r1, r6, #2
 8027b2a:	f7ff fe17 	bl	802775c <MoblePBADVProcessData>
 8027b2e:	e7e8      	b.n	8027b02 <MobleStackScanCallback+0x4c>
 8027b30:	2b2b      	cmp	r3, #43	@ 0x2b
 8027b32:	465b      	mov	r3, fp
 8027b34:	d104      	bne.n	8027b40 <MobleStackScanCallback+0x8a>
 8027b36:	464a      	mov	r2, r9
 8027b38:	1cb0      	adds	r0, r6, #2
 8027b3a:	f7f9 fb07 	bl	802114c <MobleStackProcessBeacon>
 8027b3e:	e7e0      	b.n	8027b02 <MobleStackScanCallback+0x4c>
 8027b40:	b2d2      	uxtb	r2, r2
 8027b42:	4631      	mov	r1, r6
 8027b44:	4648      	mov	r0, r9
 8027b46:	f7f5 f840 	bl	801cbca <BLEMesh_CustomBeaconReceivedCallback>
 8027b4a:	b003      	add	sp, #12
 8027b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027b50 <BnrgmHealthModelSetFault>:
 8027b50:	2a08      	cmp	r2, #8
 8027b52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027b56:	4605      	mov	r5, r0
 8027b58:	d902      	bls.n	8027b60 <BnrgmHealthModelSetFault+0x10>
 8027b5a:	2004      	movs	r0, #4
 8027b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027b60:	b35a      	cbz	r2, 8027bba <BnrgmHealthModelSetFault+0x6a>
 8027b62:	3a01      	subs	r2, #1
 8027b64:	1e4e      	subs	r6, r1, #1
 8027b66:	fa51 f482 	uxtab	r4, r1, r2
 8027b6a:	f04f 0801 	mov.w	r8, #1
 8027b6e:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8027b72:	f1b9 0f00 	cmp.w	r9, #0
 8027b76:	d015      	beq.n	8027ba4 <BnrgmHealthModelSetFault+0x54>
 8027b78:	682b      	ldr	r3, [r5, #0]
 8027b7a:	6a5f      	ldr	r7, [r3, #36]	@ 0x24
 8027b7c:	2208      	movs	r2, #8
 8027b7e:	4649      	mov	r1, r9
 8027b80:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8027b84:	f7d8 fb0c 	bl	80001a0 <memchr>
 8027b88:	4603      	mov	r3, r0
 8027b8a:	b968      	cbnz	r0, 8027ba8 <BnrgmHealthModelSetFault+0x58>
 8027b8c:	f107 024b 	add.w	r2, r7, #75	@ 0x4b
 8027b90:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8027b94:	b969      	cbnz	r1, 8027bb2 <BnrgmHealthModelSetFault+0x62>
 8027b96:	443b      	add	r3, r7
 8027b98:	f883 904c 	strb.w	r9, [r3, #76]	@ 0x4c
 8027b9c:	f883 9054 	strb.w	r9, [r3, #84]	@ 0x54
 8027ba0:	f887 8049 	strb.w	r8, [r7, #73]	@ 0x49
 8027ba4:	42a6      	cmp	r6, r4
 8027ba6:	d1e2      	bne.n	8027b6e <BnrgmHealthModelSetFault+0x1e>
 8027ba8:	4628      	mov	r0, r5
 8027baa:	f7ef fde1 	bl	8017770 <BnrgmHealthModelSetPublishTimer>
 8027bae:	2000      	movs	r0, #0
 8027bb0:	e7d4      	b.n	8027b5c <BnrgmHealthModelSetFault+0xc>
 8027bb2:	3301      	adds	r3, #1
 8027bb4:	2b08      	cmp	r3, #8
 8027bb6:	d1eb      	bne.n	8027b90 <BnrgmHealthModelSetFault+0x40>
 8027bb8:	e7cf      	b.n	8027b5a <BnrgmHealthModelSetFault+0xa>
 8027bba:	2003      	movs	r0, #3
 8027bbc:	e7ce      	b.n	8027b5c <BnrgmHealthModelSetFault+0xc>
	...

08027bc0 <BLEMesh_SetFault>:
 8027bc0:	b410      	push	{r4}
 8027bc2:	460a      	mov	r2, r1
 8027bc4:	b190      	cbz	r0, 8027bec <BLEMesh_SetFault+0x2c>
 8027bc6:	1e4b      	subs	r3, r1, #1
 8027bc8:	2b07      	cmp	r3, #7
 8027bca:	d80f      	bhi.n	8027bec <BLEMesh_SetFault+0x2c>
 8027bcc:	1e43      	subs	r3, r0, #1
 8027bce:	1dc1      	adds	r1, r0, #7
 8027bd0:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8027bd4:	2c32      	cmp	r4, #50	@ 0x32
 8027bd6:	d809      	bhi.n	8027bec <BLEMesh_SetFault+0x2c>
 8027bd8:	428b      	cmp	r3, r1
 8027bda:	d1f9      	bne.n	8027bd0 <BLEMesh_SetFault+0x10>
 8027bdc:	4b05      	ldr	r3, [pc, #20]	@ (8027bf4 <BLEMesh_SetFault+0x34>)
 8027bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027be2:	4601      	mov	r1, r0
 8027be4:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 8027be8:	f7ff bfb2 	b.w	8027b50 <BnrgmHealthModelSetFault>
 8027bec:	2003      	movs	r0, #3
 8027bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027bf2:	4770      	bx	lr
 8027bf4:	20002504 	.word	0x20002504

08027bf8 <BnrgmHealthModelClearFault>:
 8027bf8:	2a08      	cmp	r2, #8
 8027bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027bfc:	4606      	mov	r6, r0
 8027bfe:	d831      	bhi.n	8027c64 <BnrgmHealthModelClearFault+0x6c>
 8027c00:	b392      	cbz	r2, 8027c68 <BnrgmHealthModelClearFault+0x70>
 8027c02:	2300      	movs	r3, #0
 8027c04:	3901      	subs	r1, #1
 8027c06:	461d      	mov	r5, r3
 8027c08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8027c0c:	b980      	cbnz	r0, 8027c30 <BnrgmHealthModelClearFault+0x38>
 8027c0e:	3301      	adds	r3, #1
 8027c10:	b2db      	uxtb	r3, r3
 8027c12:	429a      	cmp	r2, r3
 8027c14:	d1f8      	bne.n	8027c08 <BnrgmHealthModelClearFault+0x10>
 8027c16:	2500      	movs	r5, #0
 8027c18:	6833      	ldr	r3, [r6, #0]
 8027c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027c1c:	195a      	adds	r2, r3, r5
 8027c1e:	f892 404c 	ldrb.w	r4, [r2, #76]	@ 0x4c
 8027c22:	b1a4      	cbz	r4, 8027c4e <BnrgmHealthModelClearFault+0x56>
 8027c24:	2201      	movs	r2, #1
 8027c26:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8027c2a:	2400      	movs	r4, #0
 8027c2c:	4620      	mov	r0, r4
 8027c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027c30:	6830      	ldr	r0, [r6, #0]
 8027c32:	6a44      	ldr	r4, [r0, #36]	@ 0x24
 8027c34:	f104 004b 	add.w	r0, r4, #75	@ 0x4b
 8027c38:	3453      	adds	r4, #83	@ 0x53
 8027c3a:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8027c3e:	780f      	ldrb	r7, [r1, #0]
 8027c40:	45bc      	cmp	ip, r7
 8027c42:	bf04      	itt	eq
 8027c44:	7005      	strbeq	r5, [r0, #0]
 8027c46:	7205      	strbeq	r5, [r0, #8]
 8027c48:	4284      	cmp	r4, r0
 8027c4a:	d1f6      	bne.n	8027c3a <BnrgmHealthModelClearFault+0x42>
 8027c4c:	e7df      	b.n	8027c0e <BnrgmHealthModelClearFault+0x16>
 8027c4e:	2d07      	cmp	r5, #7
 8027c50:	d104      	bne.n	8027c5c <BnrgmHealthModelClearFault+0x64>
 8027c52:	f883 4049 	strb.w	r4, [r3, #73]	@ 0x49
 8027c56:	4630      	mov	r0, r6
 8027c58:	f7ef fd8a 	bl	8017770 <BnrgmHealthModelSetPublishTimer>
 8027c5c:	3501      	adds	r5, #1
 8027c5e:	2d08      	cmp	r5, #8
 8027c60:	d1da      	bne.n	8027c18 <BnrgmHealthModelClearFault+0x20>
 8027c62:	e7e3      	b.n	8027c2c <BnrgmHealthModelClearFault+0x34>
 8027c64:	2404      	movs	r4, #4
 8027c66:	e7e1      	b.n	8027c2c <BnrgmHealthModelClearFault+0x34>
 8027c68:	2403      	movs	r4, #3
 8027c6a:	e7df      	b.n	8027c2c <BnrgmHealthModelClearFault+0x34>

08027c6c <BLEMesh_ClearFault>:
 8027c6c:	460a      	mov	r2, r1
 8027c6e:	4601      	mov	r1, r0
 8027c70:	b128      	cbz	r0, 8027c7e <BLEMesh_ClearFault+0x12>
 8027c72:	b122      	cbz	r2, 8027c7e <BLEMesh_ClearFault+0x12>
 8027c74:	4b03      	ldr	r3, [pc, #12]	@ (8027c84 <BLEMesh_ClearFault+0x18>)
 8027c76:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	@ 0x6f0
 8027c7a:	f7ff bfbd 	b.w	8027bf8 <BnrgmHealthModelClearFault>
 8027c7e:	2002      	movs	r0, #2
 8027c80:	4770      	bx	lr
 8027c82:	bf00      	nop
 8027c84:	20002504 	.word	0x20002504

08027c88 <Test_UpperTester_Set10>:
 8027c88:	784b      	ldrb	r3, [r1, #1]
 8027c8a:	2b31      	cmp	r3, #49	@ 0x31
 8027c8c:	4608      	mov	r0, r1
 8027c8e:	d102      	bne.n	8027c96 <Test_UpperTester_Set10+0xe>
 8027c90:	2101      	movs	r1, #1
 8027c92:	f7ff bf95 	b.w	8027bc0 <BLEMesh_SetFault>
 8027c96:	2b30      	cmp	r3, #48	@ 0x30
 8027c98:	d102      	bne.n	8027ca0 <Test_UpperTester_Set10+0x18>
 8027c9a:	2101      	movs	r1, #1
 8027c9c:	f7ff bfe6 	b.w	8027c6c <BLEMesh_ClearFault>
 8027ca0:	2000      	movs	r0, #0
 8027ca2:	4770      	bx	lr

08027ca4 <BLEMesh_SetSIGModelsCbMap>:
 8027ca4:	4b04      	ldr	r3, [pc, #16]	@ (8027cb8 <BLEMesh_SetSIGModelsCbMap+0x14>)
 8027ca6:	2800      	cmp	r0, #0
 8027ca8:	f8c3 0a24 	str.w	r0, [r3, #2596]	@ 0xa24
 8027cac:	f8c3 1a34 	str.w	r1, [r3, #2612]	@ 0xa34
 8027cb0:	bf0c      	ite	eq
 8027cb2:	2003      	moveq	r0, #3
 8027cb4:	2000      	movne	r0, #0
 8027cb6:	4770      	bx	lr
 8027cb8:	20002504 	.word	0x20002504

08027cbc <MobleSIGModelReplyStatus>:
 8027cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cc0:	ed2d 8b02 	vpush	{d8}
 8027cc4:	b08b      	sub	sp, #44	@ 0x2c
 8027cc6:	ee08 0a10 	vmov	s16, r0
 8027cca:	20a7      	movs	r0, #167	@ 0xa7
 8027ccc:	460d      	mov	r5, r1
 8027cce:	4617      	mov	r7, r2
 8027cd0:	9305      	str	r3, [sp, #20]
 8027cd2:	f7f2 fdcd 	bl	801a870 <MobleMemAlloc>
 8027cd6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027cd8:	f8df b104 	ldr.w	fp, [pc, #260]	@ 8027de0 <MobleSIGModelReplyStatus+0x124>
 8027cdc:	4606      	mov	r6, r0
 8027cde:	f103 0020 	add.w	r0, r3, #32
 8027ce2:	f7f2 fdc5 	bl	801a870 <MobleMemAlloc>
 8027ce6:	88ab      	ldrh	r3, [r5, #4]
 8027ce8:	8103      	strh	r3, [r0, #8]
 8027cea:	88eb      	ldrh	r3, [r5, #6]
 8027cec:	8143      	strh	r3, [r0, #10]
 8027cee:	7a2b      	ldrb	r3, [r5, #8]
 8027cf0:	70c3      	strb	r3, [r0, #3]
 8027cf2:	7a6b      	ldrb	r3, [r5, #9]
 8027cf4:	7583      	strb	r3, [r0, #22]
 8027cf6:	7aeb      	ldrb	r3, [r5, #11]
 8027cf8:	7403      	strb	r3, [r0, #16]
 8027cfa:	7aab      	ldrb	r3, [r5, #10]
 8027cfc:	f8db 2a24 	ldr.w	r2, [fp, #2596]	@ 0xa24
 8027d00:	7303      	strb	r3, [r0, #12]
 8027d02:	4604      	mov	r4, r0
 8027d04:	f04f 0800 	mov.w	r8, #0
 8027d08:	f60b 2928 	addw	r9, fp, #2600	@ 0xa28
 8027d0c:	f8db 1a34 	ldr.w	r1, [fp, #2612]	@ 0xa34
 8027d10:	f8cb 2a30 	str.w	r2, [fp, #2608]	@ 0xa30
 8027d14:	4541      	cmp	r1, r8
 8027d16:	d846      	bhi.n	8027da6 <MobleSIGModelReplyStatus+0xea>
 8027d18:	f04f 0802 	mov.w	r8, #2
 8027d1c:	f8db 1a2c 	ldr.w	r1, [fp, #2604]	@ 0xa2c
 8027d20:	f8bb 2a28 	ldrh.w	r2, [fp, #2600]	@ 0xa28
 8027d24:	9206      	str	r2, [sp, #24]
 8027d26:	4638      	mov	r0, r7
 8027d28:	9104      	str	r1, [sp, #16]
 8027d2a:	f7f8 fb91 	bl	8020450 <MobleModelGetResponseOpCode>
 8027d2e:	46b2      	mov	sl, r6
 8027d30:	9a06      	ldr	r2, [sp, #24]
 8027d32:	9904      	ldr	r1, [sp, #16]
 8027d34:	f84a 0b08 	str.w	r0, [sl], #8
 8027d38:	4681      	mov	r9, r0
 8027d3a:	4638      	mov	r0, r7
 8027d3c:	9207      	str	r2, [sp, #28]
 8027d3e:	9106      	str	r1, [sp, #24]
 8027d40:	f7f8 fba0 	bl	8020484 <MobleModelGetMinResponseLength>
 8027d44:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8027d48:	9004      	str	r0, [sp, #16]
 8027d4a:	4638      	mov	r0, r7
 8027d4c:	f7f8 fbb4 	bl	80204b8 <MobleModelGetMaxResponseLength>
 8027d50:	2200      	movs	r2, #0
 8027d52:	f8db 3a30 	ldr.w	r3, [fp, #2608]	@ 0xa30
 8027d56:	9202      	str	r2, [sp, #8]
 8027d58:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8027d5a:	9201      	str	r2, [sp, #4]
 8027d5c:	9a05      	ldr	r2, [sp, #20]
 8027d5e:	9200      	str	r2, [sp, #0]
 8027d60:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8027d64:	4652      	mov	r2, sl
 8027d66:	ab09      	add	r3, sp, #36	@ 0x24
 8027d68:	4607      	mov	r7, r0
 8027d6a:	4649      	mov	r1, r9
 8027d6c:	4628      	mov	r0, r5
 8027d6e:	47d8      	blx	fp
 8027d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027d72:	9a04      	ldr	r2, [sp, #16]
 8027d74:	429a      	cmp	r2, r3
 8027d76:	d92c      	bls.n	8027dd2 <MobleSIGModelReplyStatus+0x116>
 8027d78:	9209      	str	r2, [sp, #36]	@ 0x24
 8027d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027d7c:	f8c6 30a3 	str.w	r3, [r6, #163]	@ 0xa3
 8027d80:	4622      	mov	r2, r4
 8027d82:	4633      	mov	r3, r6
 8027d84:	2100      	movs	r1, #0
 8027d86:	ee18 0a10 	vmov	r0, s16
 8027d8a:	f7fa fb7f 	bl	802248c <MobleModelSendPacket>
 8027d8e:	4630      	mov	r0, r6
 8027d90:	f7f2 fdf8 	bl	801a984 <MobleMemFree>
 8027d94:	4620      	mov	r0, r4
 8027d96:	f7f2 fdf5 	bl	801a984 <MobleMemFree>
 8027d9a:	4640      	mov	r0, r8
 8027d9c:	b00b      	add	sp, #44	@ 0x2c
 8027d9e:	ecbd 8b02 	vpop	{d8}
 8027da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027da6:	6812      	ldr	r2, [r2, #0]
 8027da8:	480c      	ldr	r0, [pc, #48]	@ (8027ddc <MobleSIGModelReplyStatus+0x120>)
 8027daa:	4649      	mov	r1, r9
 8027dac:	4790      	blx	r2
 8027dae:	f8bb 2a28 	ldrh.w	r2, [fp, #2600]	@ 0xa28
 8027db2:	f8db 1a2c 	ldr.w	r1, [fp, #2604]	@ 0xa2c
 8027db6:	4638      	mov	r0, r7
 8027db8:	f7f8 faeb 	bl	8020392 <MobleModelCheckOpcodeValidity>
 8027dbc:	2801      	cmp	r0, #1
 8027dbe:	d005      	beq.n	8027dcc <MobleSIGModelReplyStatus+0x110>
 8027dc0:	f8db 2a30 	ldr.w	r2, [fp, #2608]	@ 0xa30
 8027dc4:	f108 0801 	add.w	r8, r8, #1
 8027dc8:	320c      	adds	r2, #12
 8027dca:	e79f      	b.n	8027d0c <MobleSIGModelReplyStatus+0x50>
 8027dcc:	f04f 0800 	mov.w	r8, #0
 8027dd0:	e7a4      	b.n	8027d1c <MobleSIGModelReplyStatus+0x60>
 8027dd2:	42bb      	cmp	r3, r7
 8027dd4:	bf88      	it	hi
 8027dd6:	9709      	strhi	r7, [sp, #36]	@ 0x24
 8027dd8:	e7cf      	b.n	8027d7a <MobleSIGModelReplyStatus+0xbe>
 8027dda:	bf00      	nop
 8027ddc:	20002f30 	.word	0x20002f30
 8027de0:	20002504 	.word	0x20002504

08027de4 <Model_SendResponse>:
 8027de4:	b513      	push	{r0, r1, r4, lr}
 8027de6:	4c07      	ldr	r4, [pc, #28]	@ (8027e04 <Model_SendResponse+0x20>)
 8027de8:	f8d4 46f0 	ldr.w	r4, [r4, #1776]	@ 0x6f0
 8027dec:	b144      	cbz	r4, 8027e00 <Model_SendResponse+0x1c>
 8027dee:	9300      	str	r3, [sp, #0]
 8027df0:	4613      	mov	r3, r2
 8027df2:	460a      	mov	r2, r1
 8027df4:	4601      	mov	r1, r0
 8027df6:	4620      	mov	r0, r4
 8027df8:	f7ff ff60 	bl	8027cbc <MobleSIGModelReplyStatus>
 8027dfc:	b002      	add	sp, #8
 8027dfe:	bd10      	pop	{r4, pc}
 8027e00:	2002      	movs	r0, #2
 8027e02:	e7fb      	b.n	8027dfc <Model_SendResponse+0x18>
 8027e04:	20002504 	.word	0x20002504

08027e08 <MobleLibraryGenericSendData>:
 8027e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027e0c:	4607      	mov	r7, r0
 8027e0e:	20a7      	movs	r0, #167	@ 0xa7
 8027e10:	468a      	mov	sl, r1
 8027e12:	4616      	mov	r6, r2
 8027e14:	4699      	mov	r9, r3
 8027e16:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8027e1a:	f7f2 fd29 	bl	801a870 <MobleMemAlloc>
 8027e1e:	4605      	mov	r5, r0
 8027e20:	f108 0020 	add.w	r0, r8, #32
 8027e24:	f7f2 fd24 	bl	801a870 <MobleMemAlloc>
 8027e28:	683b      	ldr	r3, [r7, #0]
 8027e2a:	f8a0 a008 	strh.w	sl, [r0, #8]
 8027e2e:	885b      	ldrh	r3, [r3, #2]
 8027e30:	441e      	add	r6, r3
 8027e32:	8146      	strh	r6, [r0, #10]
 8027e34:	2600      	movs	r6, #0
 8027e36:	4604      	mov	r4, r0
 8027e38:	7406      	strb	r6, [r0, #16]
 8027e3a:	7306      	strb	r6, [r0, #12]
 8027e3c:	8246      	strh	r6, [r0, #18]
 8027e3e:	81c6      	strh	r6, [r0, #14]
 8027e40:	b1e5      	cbz	r5, 8027e7c <MobleLibraryGenericSendData+0x74>
 8027e42:	9908      	ldr	r1, [sp, #32]
 8027e44:	f8c5 9000 	str.w	r9, [r5]
 8027e48:	f8c5 80a3 	str.w	r8, [r5, #163]	@ 0xa3
 8027e4c:	4642      	mov	r2, r8
 8027e4e:	f105 0008 	add.w	r0, r5, #8
 8027e52:	f7f2 febb 	bl	801abcc <MobleOutputStreamPutArray>
 8027e56:	f1b8 0f9a 	cmp.w	r8, #154	@ 0x9a
 8027e5a:	d811      	bhi.n	8027e80 <MobleLibraryGenericSendData+0x78>
 8027e5c:	4631      	mov	r1, r6
 8027e5e:	462b      	mov	r3, r5
 8027e60:	4622      	mov	r2, r4
 8027e62:	4638      	mov	r0, r7
 8027e64:	f7fa fb12 	bl	802248c <MobleModelSendPacket>
 8027e68:	4606      	mov	r6, r0
 8027e6a:	4628      	mov	r0, r5
 8027e6c:	f7f2 fd8a 	bl	801a984 <MobleMemFree>
 8027e70:	4620      	mov	r0, r4
 8027e72:	f7f2 fd87 	bl	801a984 <MobleMemFree>
 8027e76:	4630      	mov	r0, r6
 8027e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e7c:	2604      	movs	r6, #4
 8027e7e:	e7f4      	b.n	8027e6a <MobleLibraryGenericSendData+0x62>
 8027e80:	2602      	movs	r6, #2
 8027e82:	e7f2      	b.n	8027e6a <MobleLibraryGenericSendData+0x62>

08027e84 <BLEMesh_SetRemoteData>:
 8027e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027e86:	f89d e01c 	ldrb.w	lr, [sp, #28]
 8027e8a:	9f05      	ldr	r7, [sp, #20]
 8027e8c:	f89d c018 	ldrb.w	ip, [sp, #24]
 8027e90:	f1be 0f01 	cmp.w	lr, #1
 8027e94:	d106      	bne.n	8027ea4 <BLEMesh_SetRemoteData+0x20>
 8027e96:	f8cd c018 	str.w	ip, [sp, #24]
 8027e9a:	b2d2      	uxtb	r2, r2
 8027e9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8027ea0:	f7fd b94a 	b.w	8025138 <MobleLibrarySendData>
 8027ea4:	e9cd 7c06 	strd	r7, ip, [sp, #24]
 8027ea8:	9305      	str	r3, [sp, #20]
 8027eaa:	4613      	mov	r3, r2
 8027eac:	460a      	mov	r2, r1
 8027eae:	4601      	mov	r1, r0
 8027eb0:	4803      	ldr	r0, [pc, #12]	@ (8027ec0 <BLEMesh_SetRemoteData+0x3c>)
 8027eb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8027eb6:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	@ 0x6f0
 8027eba:	f7ff bfa5 	b.w	8027e08 <MobleLibraryGenericSendData>
 8027ebe:	bf00      	nop
 8027ec0:	20002504 	.word	0x20002504

08027ec4 <MobleLibraryGenericSendRemoteData>:
 8027ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027ec8:	4698      	mov	r8, r3
 8027eca:	6803      	ldr	r3, [r0, #0]
 8027ecc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8027ece:	4691      	mov	r9, r2
 8027ed0:	4606      	mov	r6, r0
 8027ed2:	460a      	mov	r2, r1
 8027ed4:	7f18      	ldrb	r0, [r3, #28]
 8027ed6:	4649      	mov	r1, r9
 8027ed8:	f7f2 f8a8 	bl	801a02c <MoblePalCrypto_GetModelPublicationParameters>
 8027edc:	8883      	ldrh	r3, [r0, #4]
 8027ede:	4605      	mov	r5, r0
 8027ee0:	2b00      	cmp	r3, #0
 8027ee2:	d042      	beq.n	8027f6a <MobleLibraryGenericSendRemoteData+0xa6>
 8027ee4:	f107 0020 	add.w	r0, r7, #32
 8027ee8:	f7f2 fcc2 	bl	801a870 <MobleMemAlloc>
 8027eec:	4604      	mov	r4, r0
 8027eee:	b950      	cbnz	r0, 8027f06 <MobleLibraryGenericSendRemoteData+0x42>
 8027ef0:	2500      	movs	r5, #0
 8027ef2:	2604      	movs	r6, #4
 8027ef4:	4628      	mov	r0, r5
 8027ef6:	f7f2 fd45 	bl	801a984 <MobleMemFree>
 8027efa:	4620      	mov	r0, r4
 8027efc:	f7f2 fd42 	bl	801a984 <MobleMemFree>
 8027f00:	4630      	mov	r0, r6
 8027f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027f06:	2220      	movs	r2, #32
 8027f08:	2100      	movs	r1, #0
 8027f0a:	f001 f94f 	bl	80291ac <memset>
 8027f0e:	f8a4 900a 	strh.w	r9, [r4, #10]
 8027f12:	f8b5 9006 	ldrh.w	r9, [r5, #6]
 8027f16:	88ab      	ldrh	r3, [r5, #4]
 8027f18:	8123      	strh	r3, [r4, #8]
 8027f1a:	f8a4 900e 	strh.w	r9, [r4, #14]
 8027f1e:	4648      	mov	r0, r9
 8027f20:	f7f1 fc70 	bl	8019804 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 8027f24:	8260      	strh	r0, [r4, #18]
 8027f26:	f7f2 f8c5 	bl	801a0b4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8027f2a:	7420      	strb	r0, [r4, #16]
 8027f2c:	4648      	mov	r0, r9
 8027f2e:	f7f2 f8db 	bl	801a0e8 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 8027f32:	7320      	strb	r0, [r4, #12]
 8027f34:	20a7      	movs	r0, #167	@ 0xa7
 8027f36:	f7f2 fc9b 	bl	801a870 <MobleMemAlloc>
 8027f3a:	4605      	mov	r5, r0
 8027f3c:	2800      	cmp	r0, #0
 8027f3e:	d0d7      	beq.n	8027ef0 <MobleLibraryGenericSendRemoteData+0x2c>
 8027f40:	f8c0 8000 	str.w	r8, [r0]
 8027f44:	f8c0 70a3 	str.w	r7, [r0, #163]	@ 0xa3
 8027f48:	9908      	ldr	r1, [sp, #32]
 8027f4a:	463a      	mov	r2, r7
 8027f4c:	3008      	adds	r0, #8
 8027f4e:	f7f2 fe3d 	bl	801abcc <MobleOutputStreamPutArray>
 8027f52:	2f9a      	cmp	r7, #154	@ 0x9a
 8027f54:	d807      	bhi.n	8027f66 <MobleLibraryGenericSendRemoteData+0xa2>
 8027f56:	4630      	mov	r0, r6
 8027f58:	462b      	mov	r3, r5
 8027f5a:	4622      	mov	r2, r4
 8027f5c:	2100      	movs	r1, #0
 8027f5e:	f7fa fa95 	bl	802248c <MobleModelSendPacket>
 8027f62:	4606      	mov	r6, r0
 8027f64:	e7c6      	b.n	8027ef4 <MobleLibraryGenericSendRemoteData+0x30>
 8027f66:	2602      	movs	r6, #2
 8027f68:	e7c4      	b.n	8027ef4 <MobleLibraryGenericSendRemoteData+0x30>
 8027f6a:	2602      	movs	r6, #2
 8027f6c:	e7c8      	b.n	8027f00 <MobleLibraryGenericSendRemoteData+0x3c>
	...

08027f70 <BLEMesh_SetRemotePublication>:
 8027f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027f72:	f89d e01c 	ldrb.w	lr, [sp, #28]
 8027f76:	9f05      	ldr	r7, [sp, #20]
 8027f78:	f89d c018 	ldrb.w	ip, [sp, #24]
 8027f7c:	f1be 0f01 	cmp.w	lr, #1
 8027f80:	d106      	bne.n	8027f90 <BLEMesh_SetRemotePublication+0x20>
 8027f82:	f8cd c018 	str.w	ip, [sp, #24]
 8027f86:	b2d2      	uxtb	r2, r2
 8027f88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8027f8c:	f7fd b972 	b.w	8025274 <MobleLibrarySendRemoteData>
 8027f90:	e9cd 7c06 	strd	r7, ip, [sp, #24]
 8027f94:	9305      	str	r3, [sp, #20]
 8027f96:	4613      	mov	r3, r2
 8027f98:	460a      	mov	r2, r1
 8027f9a:	4601      	mov	r1, r0
 8027f9c:	4803      	ldr	r0, [pc, #12]	@ (8027fac <BLEMesh_SetRemotePublication+0x3c>)
 8027f9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8027fa2:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	@ 0x6f0
 8027fa6:	f7ff bf8d 	b.w	8027ec4 <MobleLibraryGenericSendRemoteData>
 8027faa:	bf00      	nop
 8027fac:	20002504 	.word	0x20002504

08027fb0 <Test_UpperTester_ProcessData>:
 8027fb0:	4b05      	ldr	r3, [pc, #20]	@ (8027fc8 <Test_UpperTester_ProcessData+0x18>)
 8027fb2:	b410      	push	{r4}
 8027fb4:	4604      	mov	r4, r0
 8027fb6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8027fba:	4608      	mov	r0, r1
 8027fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8027fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027fc4:	4611      	mov	r1, r2
 8027fc6:	4718      	bx	r3
 8027fc8:	0803026c 	.word	0x0803026c

08027fcc <MobleUpperTesterDataProcess>:
 8027fcc:	4b02      	ldr	r3, [pc, #8]	@ (8027fd8 <MobleUpperTesterDataProcess+0xc>)
 8027fce:	460a      	mov	r2, r1
 8027fd0:	f8d3 16f0 	ldr.w	r1, [r3, #1776]	@ 0x6f0
 8027fd4:	f7ff bfec 	b.w	8027fb0 <Test_UpperTester_ProcessData>
 8027fd8:	20002504 	.word	0x20002504

08027fdc <BLEMesh_UpperTesterDataProcess>:
 8027fdc:	f7ff bff6 	b.w	8027fcc <MobleUpperTesterDataProcess>

08027fe0 <Test_Upper_Tester_PrintStringCb>:
 8027fe0:	b40f      	push	{r0, r1, r2, r3}
 8027fe2:	b004      	add	sp, #16
 8027fe4:	4770      	bx	lr
	...

08027fe8 <Test_UpperTester_Print01>:
 8027fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027fec:	4605      	mov	r5, r0
 8027fee:	4859      	ldr	r0, [pc, #356]	@ (8028154 <Test_UpperTester_Print01+0x16c>)
 8027ff0:	f7ff fff6 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 8027ff4:	682b      	ldr	r3, [r5, #0]
 8027ff6:	781b      	ldrb	r3, [r3, #0]
 8027ff8:	2b00      	cmp	r3, #0
 8027ffa:	d036      	beq.n	802806a <Test_UpperTester_Print01+0x82>
 8027ffc:	4856      	ldr	r0, [pc, #344]	@ (8028158 <Test_UpperTester_Print01+0x170>)
 8027ffe:	4f57      	ldr	r7, [pc, #348]	@ (802815c <Test_UpperTester_Print01+0x174>)
 8028000:	f7ff ffee 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 8028004:	682b      	ldr	r3, [r5, #0]
 8028006:	885b      	ldrh	r3, [r3, #2]
 8028008:	2102      	movs	r1, #2
 802800a:	ba5b      	rev16	r3, r3
 802800c:	a801      	add	r0, sp, #4
 802800e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8028012:	f7ea f9c3 	bl	801239c <BLEMesh_PrintDataCb>
 8028016:	f04f 0a00 	mov.w	sl, #0
 802801a:	f207 4824 	addw	r8, r7, #1060	@ 0x424
 802801e:	682b      	ldr	r3, [r5, #0]
 8028020:	6a1b      	ldr	r3, [r3, #32]
 8028022:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 8028026:	fa5f f48a 	uxtb.w	r4, sl
 802802a:	42a3      	cmp	r3, r4
 802802c:	d81f      	bhi.n	802806e <Test_UpperTester_Print01+0x86>
 802802e:	f8df a154 	ldr.w	sl, [pc, #340]	@ 8028184 <Test_UpperTester_Print01+0x19c>
 8028032:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 8028188 <Test_UpperTester_Print01+0x1a0>
 8028036:	f04f 0800 	mov.w	r8, #0
 802803a:	682b      	ldr	r3, [r5, #0]
 802803c:	6a1b      	ldr	r3, [r3, #32]
 802803e:	f893 31f9 	ldrb.w	r3, [r3, #505]	@ 0x1f9
 8028042:	fa5f f488 	uxtb.w	r4, r8
 8028046:	42a3      	cmp	r3, r4
 8028048:	d85b      	bhi.n	8028102 <Test_UpperTester_Print01+0x11a>
 802804a:	4845      	ldr	r0, [pc, #276]	@ (8028160 <Test_UpperTester_Print01+0x178>)
 802804c:	f7ff ffc8 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 8028050:	4844      	ldr	r0, [pc, #272]	@ (8028164 <Test_UpperTester_Print01+0x17c>)
 8028052:	2110      	movs	r1, #16
 8028054:	f7ea f9a2 	bl	801239c <BLEMesh_PrintDataCb>
 8028058:	f8d7 1658 	ldr.w	r1, [r7, #1624]	@ 0x658
 802805c:	4842      	ldr	r0, [pc, #264]	@ (8028168 <Test_UpperTester_Print01+0x180>)
 802805e:	f7ff ffbf 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 8028062:	2000      	movs	r0, #0
 8028064:	b003      	add	sp, #12
 8028066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802806a:	4840      	ldr	r0, [pc, #256]	@ (802816c <Test_UpperTester_Print01+0x184>)
 802806c:	e7c7      	b.n	8027ffe <Test_UpperTester_Print01+0x16>
 802806e:	267c      	movs	r6, #124	@ 0x7c
 8028070:	fb06 7904 	mla	r9, r6, r4, r7
 8028074:	483e      	ldr	r0, [pc, #248]	@ (8028170 <Test_UpperTester_Print01+0x188>)
 8028076:	4621      	mov	r1, r4
 8028078:	f7ff ffb2 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 802807c:	f899 3445 	ldrb.w	r3, [r9, #1093]	@ 0x445
 8028080:	2b01      	cmp	r3, #1
 8028082:	bf0c      	ite	eq
 8028084:	4620      	moveq	r0, r4
 8028086:	2000      	movne	r0, #0
 8028088:	b200      	sxth	r0, r0
 802808a:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 802808e:	2110      	movs	r1, #16
 8028090:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8028094:	f7ea f982 	bl	801239c <BLEMesh_PrintDataCb>
 8028098:	4836      	ldr	r0, [pc, #216]	@ (8028174 <Test_UpperTester_Print01+0x18c>)
 802809a:	4621      	mov	r1, r4
 802809c:	f7ff ffa0 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 80280a0:	f899 3445 	ldrb.w	r3, [r9, #1093]	@ 0x445
 80280a4:	2b01      	cmp	r3, #1
 80280a6:	bf0c      	ite	eq
 80280a8:	4620      	moveq	r0, r4
 80280aa:	2000      	movne	r0, #0
 80280ac:	233c      	movs	r3, #60	@ 0x3c
 80280ae:	fb16 3000 	smlabb	r0, r6, r0, r3
 80280b2:	2110      	movs	r1, #16
 80280b4:	4440      	add	r0, r8
 80280b6:	f7ea f971 	bl	801239c <BLEMesh_PrintDataCb>
 80280ba:	482f      	ldr	r0, [pc, #188]	@ (8028178 <Test_UpperTester_Print01+0x190>)
 80280bc:	4621      	mov	r1, r4
 80280be:	f7ff ff8f 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 80280c2:	f899 3445 	ldrb.w	r3, [r9, #1093]	@ 0x445
 80280c6:	2b01      	cmp	r3, #1
 80280c8:	bf0c      	ite	eq
 80280ca:	4620      	moveq	r0, r4
 80280cc:	2000      	movne	r0, #0
 80280ce:	2328      	movs	r3, #40	@ 0x28
 80280d0:	fb16 3000 	smlabb	r0, r6, r0, r3
 80280d4:	2108      	movs	r1, #8
 80280d6:	4440      	add	r0, r8
 80280d8:	f7ea f960 	bl	801239c <BLEMesh_PrintDataCb>
 80280dc:	4621      	mov	r1, r4
 80280de:	4827      	ldr	r0, [pc, #156]	@ (802817c <Test_UpperTester_Print01+0x194>)
 80280e0:	f7ff ff7e 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 80280e4:	f899 3445 	ldrb.w	r3, [r9, #1093]	@ 0x445
 80280e8:	2b01      	cmp	r3, #1
 80280ea:	bf18      	it	ne
 80280ec:	2400      	movne	r4, #0
 80280ee:	2338      	movs	r3, #56	@ 0x38
 80280f0:	fb16 3004 	smlabb	r0, r6, r4, r3
 80280f4:	2101      	movs	r1, #1
 80280f6:	4440      	add	r0, r8
 80280f8:	f7ea f950 	bl	801239c <BLEMesh_PrintDataCb>
 80280fc:	f10a 0a01 	add.w	sl, sl, #1
 8028100:	e78d      	b.n	802801e <Test_UpperTester_Print01+0x36>
 8028102:	262c      	movs	r6, #44	@ 0x2c
 8028104:	fb06 7b04 	mla	fp, r6, r4, r7
 8028108:	4650      	mov	r0, sl
 802810a:	4621      	mov	r1, r4
 802810c:	f7ff ff68 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 8028110:	f89b 35b8 	ldrb.w	r3, [fp, #1464]	@ 0x5b8
 8028114:	2b01      	cmp	r3, #1
 8028116:	bf0c      	ite	eq
 8028118:	4620      	moveq	r0, r4
 802811a:	2000      	movne	r0, #0
 802811c:	f44f 73cc 	mov.w	r3, #408	@ 0x198
 8028120:	fb16 3000 	smlabb	r0, r6, r0, r3
 8028124:	2101      	movs	r1, #1
 8028126:	4448      	add	r0, r9
 8028128:	f7ea f938 	bl	801239c <BLEMesh_PrintDataCb>
 802812c:	4621      	mov	r1, r4
 802812e:	4814      	ldr	r0, [pc, #80]	@ (8028180 <Test_UpperTester_Print01+0x198>)
 8028130:	f7ff ff56 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 8028134:	f89b 35b8 	ldrb.w	r3, [fp, #1464]	@ 0x5b8
 8028138:	2b01      	cmp	r3, #1
 802813a:	bf18      	it	ne
 802813c:	2400      	movne	r4, #0
 802813e:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 8028142:	fb16 3004 	smlabb	r0, r6, r4, r3
 8028146:	2110      	movs	r1, #16
 8028148:	4448      	add	r0, r9
 802814a:	f7ea f927 	bl	801239c <BLEMesh_PrintDataCb>
 802814e:	f108 0801 	add.w	r8, r8, #1
 8028152:	e772      	b.n	802803a <Test_UpperTester_Print01+0x52>
 8028154:	08031728 	.word	0x08031728
 8028158:	08031747 	.word	0x08031747
 802815c:	2000140c 	.word	0x2000140c
 8028160:	08031819 	.word	0x08031819
 8028164:	20001a2c 	.word	0x20001a2c
 8028168:	08031822 	.word	0x08031822
 802816c:	0803176c 	.word	0x0803176c
 8028170:	08031793 	.word	0x08031793
 8028174:	080317ac 	.word	0x080317ac
 8028178:	080317c8 	.word	0x080317c8
 802817c:	080317e0 	.word	0x080317e0
 8028180:	08031804 	.word	0x08031804
 8028184:	080317f2 	.word	0x080317f2
 8028188:	20001830 	.word	0x20001830

0802818c <Test_UpperTester_Set15>:
 802818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802818e:	6803      	ldr	r3, [r0, #0]
 8028190:	2400      	movs	r4, #0
 8028192:	7f1f      	ldrb	r7, [r3, #28]
 8028194:	4605      	mov	r5, r0
 8028196:	4626      	mov	r6, r4
 8028198:	b2e3      	uxtb	r3, r4
 802819a:	429f      	cmp	r7, r3
 802819c:	d801      	bhi.n	80281a2 <Test_UpperTester_Set15+0x16>
 802819e:	2000      	movs	r0, #0
 80281a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80281a2:	682b      	ldr	r3, [r5, #0]
 80281a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80281a8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80281aa:	f101 037e 	add.w	r3, r1, #126	@ 0x7e
 80281ae:	f201 21e6 	addw	r1, r1, #742	@ 0x2e6
 80281b2:	f853 2c06 	ldr.w	r2, [r3, #-6]
 80281b6:	b1a2      	cbz	r2, 80281e2 <Test_UpperTester_Set15+0x56>
 80281b8:	4618      	mov	r0, r3
 80281ba:	2200      	movs	r2, #0
 80281bc:	f830 cf02 	ldrh.w	ip, [r0, #2]!
 80281c0:	f1bc 0f00 	cmp.w	ip, #0
 80281c4:	d004      	beq.n	80281d0 <Test_UpperTester_Set15+0x44>
 80281c6:	3201      	adds	r2, #1
 80281c8:	b2d2      	uxtb	r2, r2
 80281ca:	2a0a      	cmp	r2, #10
 80281cc:	8006      	strh	r6, [r0, #0]
 80281ce:	d1f5      	bne.n	80281bc <Test_UpperTester_Set15+0x30>
 80281d0:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80281d4:	b10a      	cbz	r2, 80281da <Test_UpperTester_Set15+0x4e>
 80281d6:	f823 6c02 	strh.w	r6, [r3, #-2]
 80281da:	3338      	adds	r3, #56	@ 0x38
 80281dc:	428b      	cmp	r3, r1
 80281de:	d1e8      	bne.n	80281b2 <Test_UpperTester_Set15+0x26>
 80281e0:	e005      	b.n	80281ee <Test_UpperTester_Set15+0x62>
 80281e2:	4804      	ldr	r0, [pc, #16]	@ (80281f4 <Test_UpperTester_Set15+0x68>)
 80281e4:	f7ff fefc 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 80281e8:	4803      	ldr	r0, [pc, #12]	@ (80281f8 <Test_UpperTester_Set15+0x6c>)
 80281ea:	f7ff fef9 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 80281ee:	3401      	adds	r4, #1
 80281f0:	e7d2      	b.n	8028198 <Test_UpperTester_Set15+0xc>
 80281f2:	bf00      	nop
 80281f4:	08031832 	.word	0x08031832
 80281f8:	0803184b 	.word	0x0803184b

080281fc <Test_UpperTester_Set13>:
 80281fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028200:	4b35      	ldr	r3, [pc, #212]	@ (80282d8 <Test_UpperTester_Set13+0xdc>)
 8028202:	f893 661c 	ldrb.w	r6, [r3, #1564]	@ 0x61c
 8028206:	f893 761d 	ldrb.w	r7, [r3, #1565]	@ 0x61d
 802820a:	4604      	mov	r4, r0
 802820c:	2e00      	cmp	r6, #0
 802820e:	d05e      	beq.n	80282ce <Test_UpperTester_Set13+0xd2>
 8028210:	6803      	ldr	r3, [r0, #0]
 8028212:	6a18      	ldr	r0, [r3, #32]
 8028214:	2500      	movs	r5, #0
 8028216:	f880 509d 	strb.w	r5, [r0, #157]	@ 0x9d
 802821a:	f880 5022 	strb.w	r5, [r0, #34]	@ 0x22
 802821e:	2210      	movs	r2, #16
 8028220:	4629      	mov	r1, r5
 8028222:	307c      	adds	r0, #124	@ 0x7c
 8028224:	f000 ffc2 	bl	80291ac <memset>
 8028228:	6823      	ldr	r3, [r4, #0]
 802822a:	6a18      	ldr	r0, [r3, #32]
 802822c:	2210      	movs	r2, #16
 802822e:	4629      	mov	r1, r5
 8028230:	4410      	add	r0, r2
 8028232:	f000 ffbb 	bl	80291ac <memset>
 8028236:	2e01      	cmp	r6, #1
 8028238:	d018      	beq.n	802826c <Test_UpperTester_Set13+0x70>
 802823a:	6823      	ldr	r3, [r4, #0]
 802823c:	6a18      	ldr	r0, [r3, #32]
 802823e:	2210      	movs	r2, #16
 8028240:	f880 5119 	strb.w	r5, [r0, #281]	@ 0x119
 8028244:	f880 509e 	strb.w	r5, [r0, #158]	@ 0x9e
 8028248:	4629      	mov	r1, r5
 802824a:	30f8      	adds	r0, #248	@ 0xf8
 802824c:	f000 ffae 	bl	80291ac <memset>
 8028250:	6823      	ldr	r3, [r4, #0]
 8028252:	6a18      	ldr	r0, [r3, #32]
 8028254:	2210      	movs	r2, #16
 8028256:	4629      	mov	r1, r5
 8028258:	308c      	adds	r0, #140	@ 0x8c
 802825a:	f000 ffa7 	bl	80291ac <memset>
 802825e:	6823      	ldr	r3, [r4, #0]
 8028260:	6a1a      	ldr	r2, [r3, #32]
 8028262:	f892 31f8 	ldrb.w	r3, [r2, #504]	@ 0x1f8
 8028266:	3b01      	subs	r3, #1
 8028268:	f882 31f8 	strb.w	r3, [r2, #504]	@ 0x1f8
 802826c:	481b      	ldr	r0, [pc, #108]	@ (80282dc <Test_UpperTester_Set13+0xe0>)
 802826e:	f7ff feb7 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 8028272:	b377      	cbz	r7, 80282d2 <Test_UpperTester_Set13+0xd6>
 8028274:	2500      	movs	r5, #0
 8028276:	f44f 76ba 	mov.w	r6, #372	@ 0x174
 802827a:	f04f 092c 	mov.w	r9, #44	@ 0x2c
 802827e:	46a8      	mov	r8, r5
 8028280:	6823      	ldr	r3, [r4, #0]
 8028282:	6a18      	ldr	r0, [r3, #32]
 8028284:	fb09 0305 	mla	r3, r9, r5, r0
 8028288:	2210      	movs	r2, #16
 802828a:	f8a3 8194 	strh.w	r8, [r3, #404]	@ 0x194
 802828e:	2100      	movs	r1, #0
 8028290:	4430      	add	r0, r6
 8028292:	f000 ff8b 	bl	80291ac <memset>
 8028296:	6822      	ldr	r2, [r4, #0]
 8028298:	6a10      	ldr	r0, [r2, #32]
 802829a:	f106 0310 	add.w	r3, r6, #16
 802829e:	2210      	movs	r2, #16
 80282a0:	4418      	add	r0, r3
 80282a2:	2100      	movs	r1, #0
 80282a4:	f000 ff82 	bl	80291ac <memset>
 80282a8:	6823      	ldr	r3, [r4, #0]
 80282aa:	6a1a      	ldr	r2, [r3, #32]
 80282ac:	f892 31f9 	ldrb.w	r3, [r2, #505]	@ 0x1f9
 80282b0:	3501      	adds	r5, #1
 80282b2:	3b01      	subs	r3, #1
 80282b4:	f882 31f9 	strb.w	r3, [r2, #505]	@ 0x1f9
 80282b8:	b2eb      	uxtb	r3, r5
 80282ba:	429f      	cmp	r7, r3
 80282bc:	f106 062c 	add.w	r6, r6, #44	@ 0x2c
 80282c0:	d8de      	bhi.n	8028280 <Test_UpperTester_Set13+0x84>
 80282c2:	4807      	ldr	r0, [pc, #28]	@ (80282e0 <Test_UpperTester_Set13+0xe4>)
 80282c4:	f7ff fe8c 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 80282c8:	2000      	movs	r0, #0
 80282ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80282ce:	4805      	ldr	r0, [pc, #20]	@ (80282e4 <Test_UpperTester_Set13+0xe8>)
 80282d0:	e7cd      	b.n	802826e <Test_UpperTester_Set13+0x72>
 80282d2:	4805      	ldr	r0, [pc, #20]	@ (80282e8 <Test_UpperTester_Set13+0xec>)
 80282d4:	e7f6      	b.n	80282c4 <Test_UpperTester_Set13+0xc8>
 80282d6:	bf00      	nop
 80282d8:	2000140c 	.word	0x2000140c
 80282dc:	08031865 	.word	0x08031865
 80282e0:	0803189a 	.word	0x0803189a
 80282e4:	08031880 	.word	0x08031880
 80282e8:	080318b5 	.word	0x080318b5

080282ec <Test_UpperTester_Set05>:
 80282ec:	b508      	push	{r3, lr}
 80282ee:	780b      	ldrb	r3, [r1, #0]
 80282f0:	2b30      	cmp	r3, #48	@ 0x30
 80282f2:	d108      	bne.n	8028306 <Test_UpperTester_Set05+0x1a>
 80282f4:	480c      	ldr	r0, [pc, #48]	@ (8028328 <Test_UpperTester_Set05+0x3c>)
 80282f6:	f7ff fe73 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 80282fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80282fe:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8028302:	f7f5 bb6b 	b.w	801d9dc <BnrgmFrndMgmtSubscriptionListRemove>
 8028306:	2b31      	cmp	r3, #49	@ 0x31
 8028308:	d108      	bne.n	802831c <Test_UpperTester_Set05+0x30>
 802830a:	4808      	ldr	r0, [pc, #32]	@ (802832c <Test_UpperTester_Set05+0x40>)
 802830c:	f7ff fe68 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 8028310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8028314:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 8028318:	f7f5 ba5c 	b.w	801d7d4 <BnrgmFrndMgmtSubscriptionListAdd>
 802831c:	4804      	ldr	r0, [pc, #16]	@ (8028330 <Test_UpperTester_Set05+0x44>)
 802831e:	f7ff fe5f 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 8028322:	2003      	movs	r0, #3
 8028324:	bd08      	pop	{r3, pc}
 8028326:	bf00      	nop
 8028328:	080318cf 	.word	0x080318cf
 802832c:	080318e4 	.word	0x080318e4
 8028330:	080318f7 	.word	0x080318f7

08028334 <Test_UpperTester_Set03>:
 8028334:	780b      	ldrb	r3, [r1, #0]
 8028336:	2b30      	cmp	r3, #48	@ 0x30
 8028338:	b510      	push	{r4, lr}
 802833a:	4604      	mov	r4, r0
 802833c:	d107      	bne.n	802834e <Test_UpperTester_Set03+0x1a>
 802833e:	2301      	movs	r3, #1
 8028340:	f880 32ac 	strb.w	r3, [r0, #684]	@ 0x2ac
 8028344:	4809      	ldr	r0, [pc, #36]	@ (802836c <Test_UpperTester_Set03+0x38>)
 8028346:	f7ff fe4b 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 802834a:	2000      	movs	r0, #0
 802834c:	bd10      	pop	{r4, pc}
 802834e:	2b31      	cmp	r3, #49	@ 0x31
 8028350:	d106      	bne.n	8028360 <Test_UpperTester_Set03+0x2c>
 8028352:	4806      	ldr	r0, [pc, #24]	@ (802836c <Test_UpperTester_Set03+0x38>)
 8028354:	f7ff fe44 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 8028358:	2300      	movs	r3, #0
 802835a:	f884 32ac 	strb.w	r3, [r4, #684]	@ 0x2ac
 802835e:	e7f4      	b.n	802834a <Test_UpperTester_Set03+0x16>
 8028360:	4803      	ldr	r0, [pc, #12]	@ (8028370 <Test_UpperTester_Set03+0x3c>)
 8028362:	f7ff fe3d 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 8028366:	2003      	movs	r0, #3
 8028368:	e7f0      	b.n	802834c <Test_UpperTester_Set03+0x18>
 802836a:	bf00      	nop
 802836c:	0803190a 	.word	0x0803190a
 8028370:	080318f7 	.word	0x080318f7

08028374 <Test_UpperTester_Set02>:
 8028374:	b510      	push	{r4, lr}
 8028376:	f7f8 fb05 	bl	8020984 <MobleStackConfigInvalidate>
 802837a:	4604      	mov	r4, r0
 802837c:	b930      	cbnz	r0, 802838c <Test_UpperTester_Set02+0x18>
 802837e:	f7f6 fe03 	bl	801ef88 <MoblePalBluetoothGracefulReset>
 8028382:	4806      	ldr	r0, [pc, #24]	@ (802839c <Test_UpperTester_Set02+0x28>)
 8028384:	f7ff fe2c 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 8028388:	4620      	mov	r0, r4
 802838a:	bd10      	pop	{r4, pc}
 802838c:	2801      	cmp	r0, #1
 802838e:	d1fb      	bne.n	8028388 <Test_UpperTester_Set02+0x14>
 8028390:	4803      	ldr	r0, [pc, #12]	@ (80283a0 <Test_UpperTester_Set02+0x2c>)
 8028392:	f7ff fe25 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 8028396:	2400      	movs	r4, #0
 8028398:	e7f6      	b.n	8028388 <Test_UpperTester_Set02+0x14>
 802839a:	bf00      	nop
 802839c:	0803192c 	.word	0x0803192c
 80283a0:	0803194e 	.word	0x0803194e

080283a4 <Test_UpperTester_Set01>:
 80283a4:	b508      	push	{r3, lr}
 80283a6:	4809      	ldr	r0, [pc, #36]	@ (80283cc <Test_UpperTester_Set01+0x28>)
 80283a8:	f7ff fe1a 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 80283ac:	4808      	ldr	r0, [pc, #32]	@ (80283d0 <Test_UpperTester_Set01+0x2c>)
 80283ae:	f7ff fe17 	bl	8027fe0 <Test_Upper_Tester_PrintStringCb>
 80283b2:	f3bf 8f4f 	dsb	sy
 80283b6:	4907      	ldr	r1, [pc, #28]	@ (80283d4 <Test_UpperTester_Set01+0x30>)
 80283b8:	4b07      	ldr	r3, [pc, #28]	@ (80283d8 <Test_UpperTester_Set01+0x34>)
 80283ba:	68ca      	ldr	r2, [r1, #12]
 80283bc:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80283c0:	4313      	orrs	r3, r2
 80283c2:	60cb      	str	r3, [r1, #12]
 80283c4:	f3bf 8f4f 	dsb	sy
 80283c8:	bf00      	nop
 80283ca:	e7fd      	b.n	80283c8 <Test_UpperTester_Set01+0x24>
 80283cc:	0803196b 	.word	0x0803196b
 80283d0:	08031979 	.word	0x08031979
 80283d4:	e000ed00 	.word	0xe000ed00
 80283d8:	05fa0004 	.word	0x05fa0004

080283dc <__assert_func>:
 80283dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80283de:	4614      	mov	r4, r2
 80283e0:	461a      	mov	r2, r3
 80283e2:	4b09      	ldr	r3, [pc, #36]	@ (8028408 <__assert_func+0x2c>)
 80283e4:	681b      	ldr	r3, [r3, #0]
 80283e6:	4605      	mov	r5, r0
 80283e8:	68d8      	ldr	r0, [r3, #12]
 80283ea:	b954      	cbnz	r4, 8028402 <__assert_func+0x26>
 80283ec:	4b07      	ldr	r3, [pc, #28]	@ (802840c <__assert_func+0x30>)
 80283ee:	461c      	mov	r4, r3
 80283f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80283f4:	9100      	str	r1, [sp, #0]
 80283f6:	462b      	mov	r3, r5
 80283f8:	4905      	ldr	r1, [pc, #20]	@ (8028410 <__assert_func+0x34>)
 80283fa:	f000 fd09 	bl	8028e10 <fiprintf>
 80283fe:	f000 ff74 	bl	80292ea <abort>
 8028402:	4b04      	ldr	r3, [pc, #16]	@ (8028414 <__assert_func+0x38>)
 8028404:	e7f4      	b.n	80283f0 <__assert_func+0x14>
 8028406:	bf00      	nop
 8028408:	200000c8 	.word	0x200000c8
 802840c:	08030f87 	.word	0x08030f87
 8028410:	08031997 	.word	0x08031997
 8028414:	0803198a 	.word	0x0803198a

08028418 <__cvt>:
 8028418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802841c:	ec57 6b10 	vmov	r6, r7, d0
 8028420:	2f00      	cmp	r7, #0
 8028422:	460c      	mov	r4, r1
 8028424:	4619      	mov	r1, r3
 8028426:	463b      	mov	r3, r7
 8028428:	bfbb      	ittet	lt
 802842a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 802842e:	461f      	movlt	r7, r3
 8028430:	2300      	movge	r3, #0
 8028432:	232d      	movlt	r3, #45	@ 0x2d
 8028434:	700b      	strb	r3, [r1, #0]
 8028436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028438:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 802843c:	4691      	mov	r9, r2
 802843e:	f023 0820 	bic.w	r8, r3, #32
 8028442:	bfbc      	itt	lt
 8028444:	4632      	movlt	r2, r6
 8028446:	4616      	movlt	r6, r2
 8028448:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 802844c:	d005      	beq.n	802845a <__cvt+0x42>
 802844e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8028452:	d100      	bne.n	8028456 <__cvt+0x3e>
 8028454:	3401      	adds	r4, #1
 8028456:	2102      	movs	r1, #2
 8028458:	e000      	b.n	802845c <__cvt+0x44>
 802845a:	2103      	movs	r1, #3
 802845c:	ab03      	add	r3, sp, #12
 802845e:	9301      	str	r3, [sp, #4]
 8028460:	ab02      	add	r3, sp, #8
 8028462:	9300      	str	r3, [sp, #0]
 8028464:	ec47 6b10 	vmov	d0, r6, r7
 8028468:	4653      	mov	r3, sl
 802846a:	4622      	mov	r2, r4
 802846c:	f000 ffcc 	bl	8029408 <_dtoa_r>
 8028470:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8028474:	4605      	mov	r5, r0
 8028476:	d119      	bne.n	80284ac <__cvt+0x94>
 8028478:	f019 0f01 	tst.w	r9, #1
 802847c:	d00e      	beq.n	802849c <__cvt+0x84>
 802847e:	eb00 0904 	add.w	r9, r0, r4
 8028482:	2200      	movs	r2, #0
 8028484:	2300      	movs	r3, #0
 8028486:	4630      	mov	r0, r6
 8028488:	4639      	mov	r1, r7
 802848a:	f7d8 fb05 	bl	8000a98 <__aeabi_dcmpeq>
 802848e:	b108      	cbz	r0, 8028494 <__cvt+0x7c>
 8028490:	f8cd 900c 	str.w	r9, [sp, #12]
 8028494:	2230      	movs	r2, #48	@ 0x30
 8028496:	9b03      	ldr	r3, [sp, #12]
 8028498:	454b      	cmp	r3, r9
 802849a:	d31e      	bcc.n	80284da <__cvt+0xc2>
 802849c:	9b03      	ldr	r3, [sp, #12]
 802849e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80284a0:	1b5b      	subs	r3, r3, r5
 80284a2:	4628      	mov	r0, r5
 80284a4:	6013      	str	r3, [r2, #0]
 80284a6:	b004      	add	sp, #16
 80284a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80284ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80284b0:	eb00 0904 	add.w	r9, r0, r4
 80284b4:	d1e5      	bne.n	8028482 <__cvt+0x6a>
 80284b6:	7803      	ldrb	r3, [r0, #0]
 80284b8:	2b30      	cmp	r3, #48	@ 0x30
 80284ba:	d10a      	bne.n	80284d2 <__cvt+0xba>
 80284bc:	2200      	movs	r2, #0
 80284be:	2300      	movs	r3, #0
 80284c0:	4630      	mov	r0, r6
 80284c2:	4639      	mov	r1, r7
 80284c4:	f7d8 fae8 	bl	8000a98 <__aeabi_dcmpeq>
 80284c8:	b918      	cbnz	r0, 80284d2 <__cvt+0xba>
 80284ca:	f1c4 0401 	rsb	r4, r4, #1
 80284ce:	f8ca 4000 	str.w	r4, [sl]
 80284d2:	f8da 3000 	ldr.w	r3, [sl]
 80284d6:	4499      	add	r9, r3
 80284d8:	e7d3      	b.n	8028482 <__cvt+0x6a>
 80284da:	1c59      	adds	r1, r3, #1
 80284dc:	9103      	str	r1, [sp, #12]
 80284de:	701a      	strb	r2, [r3, #0]
 80284e0:	e7d9      	b.n	8028496 <__cvt+0x7e>

080284e2 <__exponent>:
 80284e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80284e4:	2900      	cmp	r1, #0
 80284e6:	bfba      	itte	lt
 80284e8:	4249      	neglt	r1, r1
 80284ea:	232d      	movlt	r3, #45	@ 0x2d
 80284ec:	232b      	movge	r3, #43	@ 0x2b
 80284ee:	2909      	cmp	r1, #9
 80284f0:	7002      	strb	r2, [r0, #0]
 80284f2:	7043      	strb	r3, [r0, #1]
 80284f4:	dd29      	ble.n	802854a <__exponent+0x68>
 80284f6:	f10d 0307 	add.w	r3, sp, #7
 80284fa:	461d      	mov	r5, r3
 80284fc:	270a      	movs	r7, #10
 80284fe:	461a      	mov	r2, r3
 8028500:	fbb1 f6f7 	udiv	r6, r1, r7
 8028504:	fb07 1416 	mls	r4, r7, r6, r1
 8028508:	3430      	adds	r4, #48	@ 0x30
 802850a:	f802 4c01 	strb.w	r4, [r2, #-1]
 802850e:	460c      	mov	r4, r1
 8028510:	2c63      	cmp	r4, #99	@ 0x63
 8028512:	f103 33ff 	add.w	r3, r3, #4294967295
 8028516:	4631      	mov	r1, r6
 8028518:	dcf1      	bgt.n	80284fe <__exponent+0x1c>
 802851a:	3130      	adds	r1, #48	@ 0x30
 802851c:	1e94      	subs	r4, r2, #2
 802851e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8028522:	1c41      	adds	r1, r0, #1
 8028524:	4623      	mov	r3, r4
 8028526:	42ab      	cmp	r3, r5
 8028528:	d30a      	bcc.n	8028540 <__exponent+0x5e>
 802852a:	f10d 0309 	add.w	r3, sp, #9
 802852e:	1a9b      	subs	r3, r3, r2
 8028530:	42ac      	cmp	r4, r5
 8028532:	bf88      	it	hi
 8028534:	2300      	movhi	r3, #0
 8028536:	3302      	adds	r3, #2
 8028538:	4403      	add	r3, r0
 802853a:	1a18      	subs	r0, r3, r0
 802853c:	b003      	add	sp, #12
 802853e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028540:	f813 6b01 	ldrb.w	r6, [r3], #1
 8028544:	f801 6f01 	strb.w	r6, [r1, #1]!
 8028548:	e7ed      	b.n	8028526 <__exponent+0x44>
 802854a:	2330      	movs	r3, #48	@ 0x30
 802854c:	3130      	adds	r1, #48	@ 0x30
 802854e:	7083      	strb	r3, [r0, #2]
 8028550:	70c1      	strb	r1, [r0, #3]
 8028552:	1d03      	adds	r3, r0, #4
 8028554:	e7f1      	b.n	802853a <__exponent+0x58>
	...

08028558 <_printf_float>:
 8028558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802855c:	b08d      	sub	sp, #52	@ 0x34
 802855e:	460c      	mov	r4, r1
 8028560:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8028564:	4616      	mov	r6, r2
 8028566:	461f      	mov	r7, r3
 8028568:	4605      	mov	r5, r0
 802856a:	f000 fe39 	bl	80291e0 <_localeconv_r>
 802856e:	6803      	ldr	r3, [r0, #0]
 8028570:	9304      	str	r3, [sp, #16]
 8028572:	4618      	mov	r0, r3
 8028574:	f7d7 fe64 	bl	8000240 <strlen>
 8028578:	2300      	movs	r3, #0
 802857a:	930a      	str	r3, [sp, #40]	@ 0x28
 802857c:	f8d8 3000 	ldr.w	r3, [r8]
 8028580:	9005      	str	r0, [sp, #20]
 8028582:	3307      	adds	r3, #7
 8028584:	f023 0307 	bic.w	r3, r3, #7
 8028588:	f103 0208 	add.w	r2, r3, #8
 802858c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8028590:	f8d4 b000 	ldr.w	fp, [r4]
 8028594:	f8c8 2000 	str.w	r2, [r8]
 8028598:	e9d3 8900 	ldrd	r8, r9, [r3]
 802859c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80285a0:	9307      	str	r3, [sp, #28]
 80285a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80285a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80285aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80285ae:	4b9c      	ldr	r3, [pc, #624]	@ (8028820 <_printf_float+0x2c8>)
 80285b0:	f04f 32ff 	mov.w	r2, #4294967295
 80285b4:	f7d8 faa2 	bl	8000afc <__aeabi_dcmpun>
 80285b8:	bb70      	cbnz	r0, 8028618 <_printf_float+0xc0>
 80285ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80285be:	4b98      	ldr	r3, [pc, #608]	@ (8028820 <_printf_float+0x2c8>)
 80285c0:	f04f 32ff 	mov.w	r2, #4294967295
 80285c4:	f7d8 fa7c 	bl	8000ac0 <__aeabi_dcmple>
 80285c8:	bb30      	cbnz	r0, 8028618 <_printf_float+0xc0>
 80285ca:	2200      	movs	r2, #0
 80285cc:	2300      	movs	r3, #0
 80285ce:	4640      	mov	r0, r8
 80285d0:	4649      	mov	r1, r9
 80285d2:	f7d8 fa6b 	bl	8000aac <__aeabi_dcmplt>
 80285d6:	b110      	cbz	r0, 80285de <_printf_float+0x86>
 80285d8:	232d      	movs	r3, #45	@ 0x2d
 80285da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80285de:	4a91      	ldr	r2, [pc, #580]	@ (8028824 <_printf_float+0x2cc>)
 80285e0:	4b91      	ldr	r3, [pc, #580]	@ (8028828 <_printf_float+0x2d0>)
 80285e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80285e6:	bf94      	ite	ls
 80285e8:	4690      	movls	r8, r2
 80285ea:	4698      	movhi	r8, r3
 80285ec:	2303      	movs	r3, #3
 80285ee:	6123      	str	r3, [r4, #16]
 80285f0:	f02b 0304 	bic.w	r3, fp, #4
 80285f4:	6023      	str	r3, [r4, #0]
 80285f6:	f04f 0900 	mov.w	r9, #0
 80285fa:	9700      	str	r7, [sp, #0]
 80285fc:	4633      	mov	r3, r6
 80285fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8028600:	4621      	mov	r1, r4
 8028602:	4628      	mov	r0, r5
 8028604:	f000 f9d2 	bl	80289ac <_printf_common>
 8028608:	3001      	adds	r0, #1
 802860a:	f040 808d 	bne.w	8028728 <_printf_float+0x1d0>
 802860e:	f04f 30ff 	mov.w	r0, #4294967295
 8028612:	b00d      	add	sp, #52	@ 0x34
 8028614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028618:	4642      	mov	r2, r8
 802861a:	464b      	mov	r3, r9
 802861c:	4640      	mov	r0, r8
 802861e:	4649      	mov	r1, r9
 8028620:	f7d8 fa6c 	bl	8000afc <__aeabi_dcmpun>
 8028624:	b140      	cbz	r0, 8028638 <_printf_float+0xe0>
 8028626:	464b      	mov	r3, r9
 8028628:	2b00      	cmp	r3, #0
 802862a:	bfbc      	itt	lt
 802862c:	232d      	movlt	r3, #45	@ 0x2d
 802862e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8028632:	4a7e      	ldr	r2, [pc, #504]	@ (802882c <_printf_float+0x2d4>)
 8028634:	4b7e      	ldr	r3, [pc, #504]	@ (8028830 <_printf_float+0x2d8>)
 8028636:	e7d4      	b.n	80285e2 <_printf_float+0x8a>
 8028638:	6863      	ldr	r3, [r4, #4]
 802863a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 802863e:	9206      	str	r2, [sp, #24]
 8028640:	1c5a      	adds	r2, r3, #1
 8028642:	d13b      	bne.n	80286bc <_printf_float+0x164>
 8028644:	2306      	movs	r3, #6
 8028646:	6063      	str	r3, [r4, #4]
 8028648:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 802864c:	2300      	movs	r3, #0
 802864e:	6022      	str	r2, [r4, #0]
 8028650:	9303      	str	r3, [sp, #12]
 8028652:	ab0a      	add	r3, sp, #40	@ 0x28
 8028654:	e9cd a301 	strd	sl, r3, [sp, #4]
 8028658:	ab09      	add	r3, sp, #36	@ 0x24
 802865a:	9300      	str	r3, [sp, #0]
 802865c:	6861      	ldr	r1, [r4, #4]
 802865e:	ec49 8b10 	vmov	d0, r8, r9
 8028662:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8028666:	4628      	mov	r0, r5
 8028668:	f7ff fed6 	bl	8028418 <__cvt>
 802866c:	9b06      	ldr	r3, [sp, #24]
 802866e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028670:	2b47      	cmp	r3, #71	@ 0x47
 8028672:	4680      	mov	r8, r0
 8028674:	d129      	bne.n	80286ca <_printf_float+0x172>
 8028676:	1cc8      	adds	r0, r1, #3
 8028678:	db02      	blt.n	8028680 <_printf_float+0x128>
 802867a:	6863      	ldr	r3, [r4, #4]
 802867c:	4299      	cmp	r1, r3
 802867e:	dd41      	ble.n	8028704 <_printf_float+0x1ac>
 8028680:	f1aa 0a02 	sub.w	sl, sl, #2
 8028684:	fa5f fa8a 	uxtb.w	sl, sl
 8028688:	3901      	subs	r1, #1
 802868a:	4652      	mov	r2, sl
 802868c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8028690:	9109      	str	r1, [sp, #36]	@ 0x24
 8028692:	f7ff ff26 	bl	80284e2 <__exponent>
 8028696:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028698:	1813      	adds	r3, r2, r0
 802869a:	2a01      	cmp	r2, #1
 802869c:	4681      	mov	r9, r0
 802869e:	6123      	str	r3, [r4, #16]
 80286a0:	dc02      	bgt.n	80286a8 <_printf_float+0x150>
 80286a2:	6822      	ldr	r2, [r4, #0]
 80286a4:	07d2      	lsls	r2, r2, #31
 80286a6:	d501      	bpl.n	80286ac <_printf_float+0x154>
 80286a8:	3301      	adds	r3, #1
 80286aa:	6123      	str	r3, [r4, #16]
 80286ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80286b0:	2b00      	cmp	r3, #0
 80286b2:	d0a2      	beq.n	80285fa <_printf_float+0xa2>
 80286b4:	232d      	movs	r3, #45	@ 0x2d
 80286b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80286ba:	e79e      	b.n	80285fa <_printf_float+0xa2>
 80286bc:	9a06      	ldr	r2, [sp, #24]
 80286be:	2a47      	cmp	r2, #71	@ 0x47
 80286c0:	d1c2      	bne.n	8028648 <_printf_float+0xf0>
 80286c2:	2b00      	cmp	r3, #0
 80286c4:	d1c0      	bne.n	8028648 <_printf_float+0xf0>
 80286c6:	2301      	movs	r3, #1
 80286c8:	e7bd      	b.n	8028646 <_printf_float+0xee>
 80286ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80286ce:	d9db      	bls.n	8028688 <_printf_float+0x130>
 80286d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80286d4:	d118      	bne.n	8028708 <_printf_float+0x1b0>
 80286d6:	2900      	cmp	r1, #0
 80286d8:	6863      	ldr	r3, [r4, #4]
 80286da:	dd0b      	ble.n	80286f4 <_printf_float+0x19c>
 80286dc:	6121      	str	r1, [r4, #16]
 80286de:	b913      	cbnz	r3, 80286e6 <_printf_float+0x18e>
 80286e0:	6822      	ldr	r2, [r4, #0]
 80286e2:	07d0      	lsls	r0, r2, #31
 80286e4:	d502      	bpl.n	80286ec <_printf_float+0x194>
 80286e6:	3301      	adds	r3, #1
 80286e8:	440b      	add	r3, r1
 80286ea:	6123      	str	r3, [r4, #16]
 80286ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80286ee:	f04f 0900 	mov.w	r9, #0
 80286f2:	e7db      	b.n	80286ac <_printf_float+0x154>
 80286f4:	b913      	cbnz	r3, 80286fc <_printf_float+0x1a4>
 80286f6:	6822      	ldr	r2, [r4, #0]
 80286f8:	07d2      	lsls	r2, r2, #31
 80286fa:	d501      	bpl.n	8028700 <_printf_float+0x1a8>
 80286fc:	3302      	adds	r3, #2
 80286fe:	e7f4      	b.n	80286ea <_printf_float+0x192>
 8028700:	2301      	movs	r3, #1
 8028702:	e7f2      	b.n	80286ea <_printf_float+0x192>
 8028704:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8028708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802870a:	4299      	cmp	r1, r3
 802870c:	db05      	blt.n	802871a <_printf_float+0x1c2>
 802870e:	6823      	ldr	r3, [r4, #0]
 8028710:	6121      	str	r1, [r4, #16]
 8028712:	07d8      	lsls	r0, r3, #31
 8028714:	d5ea      	bpl.n	80286ec <_printf_float+0x194>
 8028716:	1c4b      	adds	r3, r1, #1
 8028718:	e7e7      	b.n	80286ea <_printf_float+0x192>
 802871a:	2900      	cmp	r1, #0
 802871c:	bfd4      	ite	le
 802871e:	f1c1 0202 	rsble	r2, r1, #2
 8028722:	2201      	movgt	r2, #1
 8028724:	4413      	add	r3, r2
 8028726:	e7e0      	b.n	80286ea <_printf_float+0x192>
 8028728:	6823      	ldr	r3, [r4, #0]
 802872a:	055a      	lsls	r2, r3, #21
 802872c:	d407      	bmi.n	802873e <_printf_float+0x1e6>
 802872e:	6923      	ldr	r3, [r4, #16]
 8028730:	4642      	mov	r2, r8
 8028732:	4631      	mov	r1, r6
 8028734:	4628      	mov	r0, r5
 8028736:	47b8      	blx	r7
 8028738:	3001      	adds	r0, #1
 802873a:	d12b      	bne.n	8028794 <_printf_float+0x23c>
 802873c:	e767      	b.n	802860e <_printf_float+0xb6>
 802873e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8028742:	f240 80dd 	bls.w	8028900 <_printf_float+0x3a8>
 8028746:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 802874a:	2200      	movs	r2, #0
 802874c:	2300      	movs	r3, #0
 802874e:	f7d8 f9a3 	bl	8000a98 <__aeabi_dcmpeq>
 8028752:	2800      	cmp	r0, #0
 8028754:	d033      	beq.n	80287be <_printf_float+0x266>
 8028756:	4a37      	ldr	r2, [pc, #220]	@ (8028834 <_printf_float+0x2dc>)
 8028758:	2301      	movs	r3, #1
 802875a:	4631      	mov	r1, r6
 802875c:	4628      	mov	r0, r5
 802875e:	47b8      	blx	r7
 8028760:	3001      	adds	r0, #1
 8028762:	f43f af54 	beq.w	802860e <_printf_float+0xb6>
 8028766:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 802876a:	4543      	cmp	r3, r8
 802876c:	db02      	blt.n	8028774 <_printf_float+0x21c>
 802876e:	6823      	ldr	r3, [r4, #0]
 8028770:	07d8      	lsls	r0, r3, #31
 8028772:	d50f      	bpl.n	8028794 <_printf_float+0x23c>
 8028774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8028778:	4631      	mov	r1, r6
 802877a:	4628      	mov	r0, r5
 802877c:	47b8      	blx	r7
 802877e:	3001      	adds	r0, #1
 8028780:	f43f af45 	beq.w	802860e <_printf_float+0xb6>
 8028784:	f04f 0900 	mov.w	r9, #0
 8028788:	f108 38ff 	add.w	r8, r8, #4294967295
 802878c:	f104 0a1a 	add.w	sl, r4, #26
 8028790:	45c8      	cmp	r8, r9
 8028792:	dc09      	bgt.n	80287a8 <_printf_float+0x250>
 8028794:	6823      	ldr	r3, [r4, #0]
 8028796:	079b      	lsls	r3, r3, #30
 8028798:	f100 8103 	bmi.w	80289a2 <_printf_float+0x44a>
 802879c:	68e0      	ldr	r0, [r4, #12]
 802879e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80287a0:	4298      	cmp	r0, r3
 80287a2:	bfb8      	it	lt
 80287a4:	4618      	movlt	r0, r3
 80287a6:	e734      	b.n	8028612 <_printf_float+0xba>
 80287a8:	2301      	movs	r3, #1
 80287aa:	4652      	mov	r2, sl
 80287ac:	4631      	mov	r1, r6
 80287ae:	4628      	mov	r0, r5
 80287b0:	47b8      	blx	r7
 80287b2:	3001      	adds	r0, #1
 80287b4:	f43f af2b 	beq.w	802860e <_printf_float+0xb6>
 80287b8:	f109 0901 	add.w	r9, r9, #1
 80287bc:	e7e8      	b.n	8028790 <_printf_float+0x238>
 80287be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80287c0:	2b00      	cmp	r3, #0
 80287c2:	dc39      	bgt.n	8028838 <_printf_float+0x2e0>
 80287c4:	4a1b      	ldr	r2, [pc, #108]	@ (8028834 <_printf_float+0x2dc>)
 80287c6:	2301      	movs	r3, #1
 80287c8:	4631      	mov	r1, r6
 80287ca:	4628      	mov	r0, r5
 80287cc:	47b8      	blx	r7
 80287ce:	3001      	adds	r0, #1
 80287d0:	f43f af1d 	beq.w	802860e <_printf_float+0xb6>
 80287d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80287d8:	ea59 0303 	orrs.w	r3, r9, r3
 80287dc:	d102      	bne.n	80287e4 <_printf_float+0x28c>
 80287de:	6823      	ldr	r3, [r4, #0]
 80287e0:	07d9      	lsls	r1, r3, #31
 80287e2:	d5d7      	bpl.n	8028794 <_printf_float+0x23c>
 80287e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80287e8:	4631      	mov	r1, r6
 80287ea:	4628      	mov	r0, r5
 80287ec:	47b8      	blx	r7
 80287ee:	3001      	adds	r0, #1
 80287f0:	f43f af0d 	beq.w	802860e <_printf_float+0xb6>
 80287f4:	f04f 0a00 	mov.w	sl, #0
 80287f8:	f104 0b1a 	add.w	fp, r4, #26
 80287fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80287fe:	425b      	negs	r3, r3
 8028800:	4553      	cmp	r3, sl
 8028802:	dc01      	bgt.n	8028808 <_printf_float+0x2b0>
 8028804:	464b      	mov	r3, r9
 8028806:	e793      	b.n	8028730 <_printf_float+0x1d8>
 8028808:	2301      	movs	r3, #1
 802880a:	465a      	mov	r2, fp
 802880c:	4631      	mov	r1, r6
 802880e:	4628      	mov	r0, r5
 8028810:	47b8      	blx	r7
 8028812:	3001      	adds	r0, #1
 8028814:	f43f aefb 	beq.w	802860e <_printf_float+0xb6>
 8028818:	f10a 0a01 	add.w	sl, sl, #1
 802881c:	e7ee      	b.n	80287fc <_printf_float+0x2a4>
 802881e:	bf00      	nop
 8028820:	7fefffff 	.word	0x7fefffff
 8028824:	080319c6 	.word	0x080319c6
 8028828:	080319ca 	.word	0x080319ca
 802882c:	080319ce 	.word	0x080319ce
 8028830:	080319d2 	.word	0x080319d2
 8028834:	080318b3 	.word	0x080318b3
 8028838:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802883a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802883e:	4553      	cmp	r3, sl
 8028840:	bfa8      	it	ge
 8028842:	4653      	movge	r3, sl
 8028844:	2b00      	cmp	r3, #0
 8028846:	4699      	mov	r9, r3
 8028848:	dc36      	bgt.n	80288b8 <_printf_float+0x360>
 802884a:	f04f 0b00 	mov.w	fp, #0
 802884e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8028852:	f104 021a 	add.w	r2, r4, #26
 8028856:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8028858:	9306      	str	r3, [sp, #24]
 802885a:	eba3 0309 	sub.w	r3, r3, r9
 802885e:	455b      	cmp	r3, fp
 8028860:	dc31      	bgt.n	80288c6 <_printf_float+0x36e>
 8028862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028864:	459a      	cmp	sl, r3
 8028866:	dc3a      	bgt.n	80288de <_printf_float+0x386>
 8028868:	6823      	ldr	r3, [r4, #0]
 802886a:	07da      	lsls	r2, r3, #31
 802886c:	d437      	bmi.n	80288de <_printf_float+0x386>
 802886e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028870:	ebaa 0903 	sub.w	r9, sl, r3
 8028874:	9b06      	ldr	r3, [sp, #24]
 8028876:	ebaa 0303 	sub.w	r3, sl, r3
 802887a:	4599      	cmp	r9, r3
 802887c:	bfa8      	it	ge
 802887e:	4699      	movge	r9, r3
 8028880:	f1b9 0f00 	cmp.w	r9, #0
 8028884:	dc33      	bgt.n	80288ee <_printf_float+0x396>
 8028886:	f04f 0800 	mov.w	r8, #0
 802888a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802888e:	f104 0b1a 	add.w	fp, r4, #26
 8028892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028894:	ebaa 0303 	sub.w	r3, sl, r3
 8028898:	eba3 0309 	sub.w	r3, r3, r9
 802889c:	4543      	cmp	r3, r8
 802889e:	f77f af79 	ble.w	8028794 <_printf_float+0x23c>
 80288a2:	2301      	movs	r3, #1
 80288a4:	465a      	mov	r2, fp
 80288a6:	4631      	mov	r1, r6
 80288a8:	4628      	mov	r0, r5
 80288aa:	47b8      	blx	r7
 80288ac:	3001      	adds	r0, #1
 80288ae:	f43f aeae 	beq.w	802860e <_printf_float+0xb6>
 80288b2:	f108 0801 	add.w	r8, r8, #1
 80288b6:	e7ec      	b.n	8028892 <_printf_float+0x33a>
 80288b8:	4642      	mov	r2, r8
 80288ba:	4631      	mov	r1, r6
 80288bc:	4628      	mov	r0, r5
 80288be:	47b8      	blx	r7
 80288c0:	3001      	adds	r0, #1
 80288c2:	d1c2      	bne.n	802884a <_printf_float+0x2f2>
 80288c4:	e6a3      	b.n	802860e <_printf_float+0xb6>
 80288c6:	2301      	movs	r3, #1
 80288c8:	4631      	mov	r1, r6
 80288ca:	4628      	mov	r0, r5
 80288cc:	9206      	str	r2, [sp, #24]
 80288ce:	47b8      	blx	r7
 80288d0:	3001      	adds	r0, #1
 80288d2:	f43f ae9c 	beq.w	802860e <_printf_float+0xb6>
 80288d6:	9a06      	ldr	r2, [sp, #24]
 80288d8:	f10b 0b01 	add.w	fp, fp, #1
 80288dc:	e7bb      	b.n	8028856 <_printf_float+0x2fe>
 80288de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80288e2:	4631      	mov	r1, r6
 80288e4:	4628      	mov	r0, r5
 80288e6:	47b8      	blx	r7
 80288e8:	3001      	adds	r0, #1
 80288ea:	d1c0      	bne.n	802886e <_printf_float+0x316>
 80288ec:	e68f      	b.n	802860e <_printf_float+0xb6>
 80288ee:	9a06      	ldr	r2, [sp, #24]
 80288f0:	464b      	mov	r3, r9
 80288f2:	4442      	add	r2, r8
 80288f4:	4631      	mov	r1, r6
 80288f6:	4628      	mov	r0, r5
 80288f8:	47b8      	blx	r7
 80288fa:	3001      	adds	r0, #1
 80288fc:	d1c3      	bne.n	8028886 <_printf_float+0x32e>
 80288fe:	e686      	b.n	802860e <_printf_float+0xb6>
 8028900:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8028904:	f1ba 0f01 	cmp.w	sl, #1
 8028908:	dc01      	bgt.n	802890e <_printf_float+0x3b6>
 802890a:	07db      	lsls	r3, r3, #31
 802890c:	d536      	bpl.n	802897c <_printf_float+0x424>
 802890e:	2301      	movs	r3, #1
 8028910:	4642      	mov	r2, r8
 8028912:	4631      	mov	r1, r6
 8028914:	4628      	mov	r0, r5
 8028916:	47b8      	blx	r7
 8028918:	3001      	adds	r0, #1
 802891a:	f43f ae78 	beq.w	802860e <_printf_float+0xb6>
 802891e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8028922:	4631      	mov	r1, r6
 8028924:	4628      	mov	r0, r5
 8028926:	47b8      	blx	r7
 8028928:	3001      	adds	r0, #1
 802892a:	f43f ae70 	beq.w	802860e <_printf_float+0xb6>
 802892e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8028932:	2200      	movs	r2, #0
 8028934:	2300      	movs	r3, #0
 8028936:	f10a 3aff 	add.w	sl, sl, #4294967295
 802893a:	f7d8 f8ad 	bl	8000a98 <__aeabi_dcmpeq>
 802893e:	b9c0      	cbnz	r0, 8028972 <_printf_float+0x41a>
 8028940:	4653      	mov	r3, sl
 8028942:	f108 0201 	add.w	r2, r8, #1
 8028946:	4631      	mov	r1, r6
 8028948:	4628      	mov	r0, r5
 802894a:	47b8      	blx	r7
 802894c:	3001      	adds	r0, #1
 802894e:	d10c      	bne.n	802896a <_printf_float+0x412>
 8028950:	e65d      	b.n	802860e <_printf_float+0xb6>
 8028952:	2301      	movs	r3, #1
 8028954:	465a      	mov	r2, fp
 8028956:	4631      	mov	r1, r6
 8028958:	4628      	mov	r0, r5
 802895a:	47b8      	blx	r7
 802895c:	3001      	adds	r0, #1
 802895e:	f43f ae56 	beq.w	802860e <_printf_float+0xb6>
 8028962:	f108 0801 	add.w	r8, r8, #1
 8028966:	45d0      	cmp	r8, sl
 8028968:	dbf3      	blt.n	8028952 <_printf_float+0x3fa>
 802896a:	464b      	mov	r3, r9
 802896c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8028970:	e6df      	b.n	8028732 <_printf_float+0x1da>
 8028972:	f04f 0800 	mov.w	r8, #0
 8028976:	f104 0b1a 	add.w	fp, r4, #26
 802897a:	e7f4      	b.n	8028966 <_printf_float+0x40e>
 802897c:	2301      	movs	r3, #1
 802897e:	4642      	mov	r2, r8
 8028980:	e7e1      	b.n	8028946 <_printf_float+0x3ee>
 8028982:	2301      	movs	r3, #1
 8028984:	464a      	mov	r2, r9
 8028986:	4631      	mov	r1, r6
 8028988:	4628      	mov	r0, r5
 802898a:	47b8      	blx	r7
 802898c:	3001      	adds	r0, #1
 802898e:	f43f ae3e 	beq.w	802860e <_printf_float+0xb6>
 8028992:	f108 0801 	add.w	r8, r8, #1
 8028996:	68e3      	ldr	r3, [r4, #12]
 8028998:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802899a:	1a5b      	subs	r3, r3, r1
 802899c:	4543      	cmp	r3, r8
 802899e:	dcf0      	bgt.n	8028982 <_printf_float+0x42a>
 80289a0:	e6fc      	b.n	802879c <_printf_float+0x244>
 80289a2:	f04f 0800 	mov.w	r8, #0
 80289a6:	f104 0919 	add.w	r9, r4, #25
 80289aa:	e7f4      	b.n	8028996 <_printf_float+0x43e>

080289ac <_printf_common>:
 80289ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80289b0:	4616      	mov	r6, r2
 80289b2:	4698      	mov	r8, r3
 80289b4:	688a      	ldr	r2, [r1, #8]
 80289b6:	690b      	ldr	r3, [r1, #16]
 80289b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80289bc:	4293      	cmp	r3, r2
 80289be:	bfb8      	it	lt
 80289c0:	4613      	movlt	r3, r2
 80289c2:	6033      	str	r3, [r6, #0]
 80289c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80289c8:	4607      	mov	r7, r0
 80289ca:	460c      	mov	r4, r1
 80289cc:	b10a      	cbz	r2, 80289d2 <_printf_common+0x26>
 80289ce:	3301      	adds	r3, #1
 80289d0:	6033      	str	r3, [r6, #0]
 80289d2:	6823      	ldr	r3, [r4, #0]
 80289d4:	0699      	lsls	r1, r3, #26
 80289d6:	bf42      	ittt	mi
 80289d8:	6833      	ldrmi	r3, [r6, #0]
 80289da:	3302      	addmi	r3, #2
 80289dc:	6033      	strmi	r3, [r6, #0]
 80289de:	6825      	ldr	r5, [r4, #0]
 80289e0:	f015 0506 	ands.w	r5, r5, #6
 80289e4:	d106      	bne.n	80289f4 <_printf_common+0x48>
 80289e6:	f104 0a19 	add.w	sl, r4, #25
 80289ea:	68e3      	ldr	r3, [r4, #12]
 80289ec:	6832      	ldr	r2, [r6, #0]
 80289ee:	1a9b      	subs	r3, r3, r2
 80289f0:	42ab      	cmp	r3, r5
 80289f2:	dc26      	bgt.n	8028a42 <_printf_common+0x96>
 80289f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80289f8:	6822      	ldr	r2, [r4, #0]
 80289fa:	3b00      	subs	r3, #0
 80289fc:	bf18      	it	ne
 80289fe:	2301      	movne	r3, #1
 8028a00:	0692      	lsls	r2, r2, #26
 8028a02:	d42b      	bmi.n	8028a5c <_printf_common+0xb0>
 8028a04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8028a08:	4641      	mov	r1, r8
 8028a0a:	4638      	mov	r0, r7
 8028a0c:	47c8      	blx	r9
 8028a0e:	3001      	adds	r0, #1
 8028a10:	d01e      	beq.n	8028a50 <_printf_common+0xa4>
 8028a12:	6823      	ldr	r3, [r4, #0]
 8028a14:	6922      	ldr	r2, [r4, #16]
 8028a16:	f003 0306 	and.w	r3, r3, #6
 8028a1a:	2b04      	cmp	r3, #4
 8028a1c:	bf02      	ittt	eq
 8028a1e:	68e5      	ldreq	r5, [r4, #12]
 8028a20:	6833      	ldreq	r3, [r6, #0]
 8028a22:	1aed      	subeq	r5, r5, r3
 8028a24:	68a3      	ldr	r3, [r4, #8]
 8028a26:	bf0c      	ite	eq
 8028a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8028a2c:	2500      	movne	r5, #0
 8028a2e:	4293      	cmp	r3, r2
 8028a30:	bfc4      	itt	gt
 8028a32:	1a9b      	subgt	r3, r3, r2
 8028a34:	18ed      	addgt	r5, r5, r3
 8028a36:	2600      	movs	r6, #0
 8028a38:	341a      	adds	r4, #26
 8028a3a:	42b5      	cmp	r5, r6
 8028a3c:	d11a      	bne.n	8028a74 <_printf_common+0xc8>
 8028a3e:	2000      	movs	r0, #0
 8028a40:	e008      	b.n	8028a54 <_printf_common+0xa8>
 8028a42:	2301      	movs	r3, #1
 8028a44:	4652      	mov	r2, sl
 8028a46:	4641      	mov	r1, r8
 8028a48:	4638      	mov	r0, r7
 8028a4a:	47c8      	blx	r9
 8028a4c:	3001      	adds	r0, #1
 8028a4e:	d103      	bne.n	8028a58 <_printf_common+0xac>
 8028a50:	f04f 30ff 	mov.w	r0, #4294967295
 8028a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028a58:	3501      	adds	r5, #1
 8028a5a:	e7c6      	b.n	80289ea <_printf_common+0x3e>
 8028a5c:	18e1      	adds	r1, r4, r3
 8028a5e:	1c5a      	adds	r2, r3, #1
 8028a60:	2030      	movs	r0, #48	@ 0x30
 8028a62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8028a66:	4422      	add	r2, r4
 8028a68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8028a6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8028a70:	3302      	adds	r3, #2
 8028a72:	e7c7      	b.n	8028a04 <_printf_common+0x58>
 8028a74:	2301      	movs	r3, #1
 8028a76:	4622      	mov	r2, r4
 8028a78:	4641      	mov	r1, r8
 8028a7a:	4638      	mov	r0, r7
 8028a7c:	47c8      	blx	r9
 8028a7e:	3001      	adds	r0, #1
 8028a80:	d0e6      	beq.n	8028a50 <_printf_common+0xa4>
 8028a82:	3601      	adds	r6, #1
 8028a84:	e7d9      	b.n	8028a3a <_printf_common+0x8e>
	...

08028a88 <_printf_i>:
 8028a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028a8c:	7e0f      	ldrb	r7, [r1, #24]
 8028a8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8028a90:	2f78      	cmp	r7, #120	@ 0x78
 8028a92:	4691      	mov	r9, r2
 8028a94:	4680      	mov	r8, r0
 8028a96:	460c      	mov	r4, r1
 8028a98:	469a      	mov	sl, r3
 8028a9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8028a9e:	d807      	bhi.n	8028ab0 <_printf_i+0x28>
 8028aa0:	2f62      	cmp	r7, #98	@ 0x62
 8028aa2:	d80a      	bhi.n	8028aba <_printf_i+0x32>
 8028aa4:	2f00      	cmp	r7, #0
 8028aa6:	f000 80d2 	beq.w	8028c4e <_printf_i+0x1c6>
 8028aaa:	2f58      	cmp	r7, #88	@ 0x58
 8028aac:	f000 80b9 	beq.w	8028c22 <_printf_i+0x19a>
 8028ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8028ab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8028ab8:	e03a      	b.n	8028b30 <_printf_i+0xa8>
 8028aba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8028abe:	2b15      	cmp	r3, #21
 8028ac0:	d8f6      	bhi.n	8028ab0 <_printf_i+0x28>
 8028ac2:	a101      	add	r1, pc, #4	@ (adr r1, 8028ac8 <_printf_i+0x40>)
 8028ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8028ac8:	08028b21 	.word	0x08028b21
 8028acc:	08028b35 	.word	0x08028b35
 8028ad0:	08028ab1 	.word	0x08028ab1
 8028ad4:	08028ab1 	.word	0x08028ab1
 8028ad8:	08028ab1 	.word	0x08028ab1
 8028adc:	08028ab1 	.word	0x08028ab1
 8028ae0:	08028b35 	.word	0x08028b35
 8028ae4:	08028ab1 	.word	0x08028ab1
 8028ae8:	08028ab1 	.word	0x08028ab1
 8028aec:	08028ab1 	.word	0x08028ab1
 8028af0:	08028ab1 	.word	0x08028ab1
 8028af4:	08028c35 	.word	0x08028c35
 8028af8:	08028b5f 	.word	0x08028b5f
 8028afc:	08028bef 	.word	0x08028bef
 8028b00:	08028ab1 	.word	0x08028ab1
 8028b04:	08028ab1 	.word	0x08028ab1
 8028b08:	08028c57 	.word	0x08028c57
 8028b0c:	08028ab1 	.word	0x08028ab1
 8028b10:	08028b5f 	.word	0x08028b5f
 8028b14:	08028ab1 	.word	0x08028ab1
 8028b18:	08028ab1 	.word	0x08028ab1
 8028b1c:	08028bf7 	.word	0x08028bf7
 8028b20:	6833      	ldr	r3, [r6, #0]
 8028b22:	1d1a      	adds	r2, r3, #4
 8028b24:	681b      	ldr	r3, [r3, #0]
 8028b26:	6032      	str	r2, [r6, #0]
 8028b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8028b2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8028b30:	2301      	movs	r3, #1
 8028b32:	e09d      	b.n	8028c70 <_printf_i+0x1e8>
 8028b34:	6833      	ldr	r3, [r6, #0]
 8028b36:	6820      	ldr	r0, [r4, #0]
 8028b38:	1d19      	adds	r1, r3, #4
 8028b3a:	6031      	str	r1, [r6, #0]
 8028b3c:	0606      	lsls	r6, r0, #24
 8028b3e:	d501      	bpl.n	8028b44 <_printf_i+0xbc>
 8028b40:	681d      	ldr	r5, [r3, #0]
 8028b42:	e003      	b.n	8028b4c <_printf_i+0xc4>
 8028b44:	0645      	lsls	r5, r0, #25
 8028b46:	d5fb      	bpl.n	8028b40 <_printf_i+0xb8>
 8028b48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8028b4c:	2d00      	cmp	r5, #0
 8028b4e:	da03      	bge.n	8028b58 <_printf_i+0xd0>
 8028b50:	232d      	movs	r3, #45	@ 0x2d
 8028b52:	426d      	negs	r5, r5
 8028b54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028b58:	4859      	ldr	r0, [pc, #356]	@ (8028cc0 <_printf_i+0x238>)
 8028b5a:	230a      	movs	r3, #10
 8028b5c:	e011      	b.n	8028b82 <_printf_i+0xfa>
 8028b5e:	6821      	ldr	r1, [r4, #0]
 8028b60:	6833      	ldr	r3, [r6, #0]
 8028b62:	0608      	lsls	r0, r1, #24
 8028b64:	f853 5b04 	ldr.w	r5, [r3], #4
 8028b68:	d402      	bmi.n	8028b70 <_printf_i+0xe8>
 8028b6a:	0649      	lsls	r1, r1, #25
 8028b6c:	bf48      	it	mi
 8028b6e:	b2ad      	uxthmi	r5, r5
 8028b70:	2f6f      	cmp	r7, #111	@ 0x6f
 8028b72:	4853      	ldr	r0, [pc, #332]	@ (8028cc0 <_printf_i+0x238>)
 8028b74:	6033      	str	r3, [r6, #0]
 8028b76:	bf14      	ite	ne
 8028b78:	230a      	movne	r3, #10
 8028b7a:	2308      	moveq	r3, #8
 8028b7c:	2100      	movs	r1, #0
 8028b7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8028b82:	6866      	ldr	r6, [r4, #4]
 8028b84:	60a6      	str	r6, [r4, #8]
 8028b86:	2e00      	cmp	r6, #0
 8028b88:	bfa2      	ittt	ge
 8028b8a:	6821      	ldrge	r1, [r4, #0]
 8028b8c:	f021 0104 	bicge.w	r1, r1, #4
 8028b90:	6021      	strge	r1, [r4, #0]
 8028b92:	b90d      	cbnz	r5, 8028b98 <_printf_i+0x110>
 8028b94:	2e00      	cmp	r6, #0
 8028b96:	d04b      	beq.n	8028c30 <_printf_i+0x1a8>
 8028b98:	4616      	mov	r6, r2
 8028b9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8028b9e:	fb03 5711 	mls	r7, r3, r1, r5
 8028ba2:	5dc7      	ldrb	r7, [r0, r7]
 8028ba4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8028ba8:	462f      	mov	r7, r5
 8028baa:	42bb      	cmp	r3, r7
 8028bac:	460d      	mov	r5, r1
 8028bae:	d9f4      	bls.n	8028b9a <_printf_i+0x112>
 8028bb0:	2b08      	cmp	r3, #8
 8028bb2:	d10b      	bne.n	8028bcc <_printf_i+0x144>
 8028bb4:	6823      	ldr	r3, [r4, #0]
 8028bb6:	07df      	lsls	r7, r3, #31
 8028bb8:	d508      	bpl.n	8028bcc <_printf_i+0x144>
 8028bba:	6923      	ldr	r3, [r4, #16]
 8028bbc:	6861      	ldr	r1, [r4, #4]
 8028bbe:	4299      	cmp	r1, r3
 8028bc0:	bfde      	ittt	le
 8028bc2:	2330      	movle	r3, #48	@ 0x30
 8028bc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8028bc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8028bcc:	1b92      	subs	r2, r2, r6
 8028bce:	6122      	str	r2, [r4, #16]
 8028bd0:	f8cd a000 	str.w	sl, [sp]
 8028bd4:	464b      	mov	r3, r9
 8028bd6:	aa03      	add	r2, sp, #12
 8028bd8:	4621      	mov	r1, r4
 8028bda:	4640      	mov	r0, r8
 8028bdc:	f7ff fee6 	bl	80289ac <_printf_common>
 8028be0:	3001      	adds	r0, #1
 8028be2:	d14a      	bne.n	8028c7a <_printf_i+0x1f2>
 8028be4:	f04f 30ff 	mov.w	r0, #4294967295
 8028be8:	b004      	add	sp, #16
 8028bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028bee:	6823      	ldr	r3, [r4, #0]
 8028bf0:	f043 0320 	orr.w	r3, r3, #32
 8028bf4:	6023      	str	r3, [r4, #0]
 8028bf6:	4833      	ldr	r0, [pc, #204]	@ (8028cc4 <_printf_i+0x23c>)
 8028bf8:	2778      	movs	r7, #120	@ 0x78
 8028bfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8028bfe:	6823      	ldr	r3, [r4, #0]
 8028c00:	6831      	ldr	r1, [r6, #0]
 8028c02:	061f      	lsls	r7, r3, #24
 8028c04:	f851 5b04 	ldr.w	r5, [r1], #4
 8028c08:	d402      	bmi.n	8028c10 <_printf_i+0x188>
 8028c0a:	065f      	lsls	r7, r3, #25
 8028c0c:	bf48      	it	mi
 8028c0e:	b2ad      	uxthmi	r5, r5
 8028c10:	6031      	str	r1, [r6, #0]
 8028c12:	07d9      	lsls	r1, r3, #31
 8028c14:	bf44      	itt	mi
 8028c16:	f043 0320 	orrmi.w	r3, r3, #32
 8028c1a:	6023      	strmi	r3, [r4, #0]
 8028c1c:	b11d      	cbz	r5, 8028c26 <_printf_i+0x19e>
 8028c1e:	2310      	movs	r3, #16
 8028c20:	e7ac      	b.n	8028b7c <_printf_i+0xf4>
 8028c22:	4827      	ldr	r0, [pc, #156]	@ (8028cc0 <_printf_i+0x238>)
 8028c24:	e7e9      	b.n	8028bfa <_printf_i+0x172>
 8028c26:	6823      	ldr	r3, [r4, #0]
 8028c28:	f023 0320 	bic.w	r3, r3, #32
 8028c2c:	6023      	str	r3, [r4, #0]
 8028c2e:	e7f6      	b.n	8028c1e <_printf_i+0x196>
 8028c30:	4616      	mov	r6, r2
 8028c32:	e7bd      	b.n	8028bb0 <_printf_i+0x128>
 8028c34:	6833      	ldr	r3, [r6, #0]
 8028c36:	6825      	ldr	r5, [r4, #0]
 8028c38:	6961      	ldr	r1, [r4, #20]
 8028c3a:	1d18      	adds	r0, r3, #4
 8028c3c:	6030      	str	r0, [r6, #0]
 8028c3e:	062e      	lsls	r6, r5, #24
 8028c40:	681b      	ldr	r3, [r3, #0]
 8028c42:	d501      	bpl.n	8028c48 <_printf_i+0x1c0>
 8028c44:	6019      	str	r1, [r3, #0]
 8028c46:	e002      	b.n	8028c4e <_printf_i+0x1c6>
 8028c48:	0668      	lsls	r0, r5, #25
 8028c4a:	d5fb      	bpl.n	8028c44 <_printf_i+0x1bc>
 8028c4c:	8019      	strh	r1, [r3, #0]
 8028c4e:	2300      	movs	r3, #0
 8028c50:	6123      	str	r3, [r4, #16]
 8028c52:	4616      	mov	r6, r2
 8028c54:	e7bc      	b.n	8028bd0 <_printf_i+0x148>
 8028c56:	6833      	ldr	r3, [r6, #0]
 8028c58:	1d1a      	adds	r2, r3, #4
 8028c5a:	6032      	str	r2, [r6, #0]
 8028c5c:	681e      	ldr	r6, [r3, #0]
 8028c5e:	6862      	ldr	r2, [r4, #4]
 8028c60:	2100      	movs	r1, #0
 8028c62:	4630      	mov	r0, r6
 8028c64:	f7d7 fa9c 	bl	80001a0 <memchr>
 8028c68:	b108      	cbz	r0, 8028c6e <_printf_i+0x1e6>
 8028c6a:	1b80      	subs	r0, r0, r6
 8028c6c:	6060      	str	r0, [r4, #4]
 8028c6e:	6863      	ldr	r3, [r4, #4]
 8028c70:	6123      	str	r3, [r4, #16]
 8028c72:	2300      	movs	r3, #0
 8028c74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8028c78:	e7aa      	b.n	8028bd0 <_printf_i+0x148>
 8028c7a:	6923      	ldr	r3, [r4, #16]
 8028c7c:	4632      	mov	r2, r6
 8028c7e:	4649      	mov	r1, r9
 8028c80:	4640      	mov	r0, r8
 8028c82:	47d0      	blx	sl
 8028c84:	3001      	adds	r0, #1
 8028c86:	d0ad      	beq.n	8028be4 <_printf_i+0x15c>
 8028c88:	6823      	ldr	r3, [r4, #0]
 8028c8a:	079b      	lsls	r3, r3, #30
 8028c8c:	d413      	bmi.n	8028cb6 <_printf_i+0x22e>
 8028c8e:	68e0      	ldr	r0, [r4, #12]
 8028c90:	9b03      	ldr	r3, [sp, #12]
 8028c92:	4298      	cmp	r0, r3
 8028c94:	bfb8      	it	lt
 8028c96:	4618      	movlt	r0, r3
 8028c98:	e7a6      	b.n	8028be8 <_printf_i+0x160>
 8028c9a:	2301      	movs	r3, #1
 8028c9c:	4632      	mov	r2, r6
 8028c9e:	4649      	mov	r1, r9
 8028ca0:	4640      	mov	r0, r8
 8028ca2:	47d0      	blx	sl
 8028ca4:	3001      	adds	r0, #1
 8028ca6:	d09d      	beq.n	8028be4 <_printf_i+0x15c>
 8028ca8:	3501      	adds	r5, #1
 8028caa:	68e3      	ldr	r3, [r4, #12]
 8028cac:	9903      	ldr	r1, [sp, #12]
 8028cae:	1a5b      	subs	r3, r3, r1
 8028cb0:	42ab      	cmp	r3, r5
 8028cb2:	dcf2      	bgt.n	8028c9a <_printf_i+0x212>
 8028cb4:	e7eb      	b.n	8028c8e <_printf_i+0x206>
 8028cb6:	2500      	movs	r5, #0
 8028cb8:	f104 0619 	add.w	r6, r4, #25
 8028cbc:	e7f5      	b.n	8028caa <_printf_i+0x222>
 8028cbe:	bf00      	nop
 8028cc0:	080319d6 	.word	0x080319d6
 8028cc4:	080319e7 	.word	0x080319e7

08028cc8 <std>:
 8028cc8:	2300      	movs	r3, #0
 8028cca:	b510      	push	{r4, lr}
 8028ccc:	4604      	mov	r4, r0
 8028cce:	e9c0 3300 	strd	r3, r3, [r0]
 8028cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028cd6:	6083      	str	r3, [r0, #8]
 8028cd8:	8181      	strh	r1, [r0, #12]
 8028cda:	6643      	str	r3, [r0, #100]	@ 0x64
 8028cdc:	81c2      	strh	r2, [r0, #14]
 8028cde:	6183      	str	r3, [r0, #24]
 8028ce0:	4619      	mov	r1, r3
 8028ce2:	2208      	movs	r2, #8
 8028ce4:	305c      	adds	r0, #92	@ 0x5c
 8028ce6:	f000 fa61 	bl	80291ac <memset>
 8028cea:	4b0d      	ldr	r3, [pc, #52]	@ (8028d20 <std+0x58>)
 8028cec:	6263      	str	r3, [r4, #36]	@ 0x24
 8028cee:	4b0d      	ldr	r3, [pc, #52]	@ (8028d24 <std+0x5c>)
 8028cf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8028cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8028d28 <std+0x60>)
 8028cf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8028cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8028d2c <std+0x64>)
 8028cf8:	6323      	str	r3, [r4, #48]	@ 0x30
 8028cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8028d30 <std+0x68>)
 8028cfc:	6224      	str	r4, [r4, #32]
 8028cfe:	429c      	cmp	r4, r3
 8028d00:	d006      	beq.n	8028d10 <std+0x48>
 8028d02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8028d06:	4294      	cmp	r4, r2
 8028d08:	d002      	beq.n	8028d10 <std+0x48>
 8028d0a:	33d0      	adds	r3, #208	@ 0xd0
 8028d0c:	429c      	cmp	r4, r3
 8028d0e:	d105      	bne.n	8028d1c <std+0x54>
 8028d10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8028d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028d18:	f000 bad6 	b.w	80292c8 <__retarget_lock_init_recursive>
 8028d1c:	bd10      	pop	{r4, pc}
 8028d1e:	bf00      	nop
 8028d20:	08028fa5 	.word	0x08028fa5
 8028d24:	08028fcb 	.word	0x08028fcb
 8028d28:	08029003 	.word	0x08029003
 8028d2c:	08029027 	.word	0x08029027
 8028d30:	20007fa8 	.word	0x20007fa8

08028d34 <stdio_exit_handler>:
 8028d34:	4a02      	ldr	r2, [pc, #8]	@ (8028d40 <stdio_exit_handler+0xc>)
 8028d36:	4903      	ldr	r1, [pc, #12]	@ (8028d44 <stdio_exit_handler+0x10>)
 8028d38:	4803      	ldr	r0, [pc, #12]	@ (8028d48 <stdio_exit_handler+0x14>)
 8028d3a:	f000 b87b 	b.w	8028e34 <_fwalk_sglue>
 8028d3e:	bf00      	nop
 8028d40:	200000bc 	.word	0x200000bc
 8028d44:	0802b255 	.word	0x0802b255
 8028d48:	200000cc 	.word	0x200000cc

08028d4c <cleanup_stdio>:
 8028d4c:	6841      	ldr	r1, [r0, #4]
 8028d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8028d80 <cleanup_stdio+0x34>)
 8028d50:	4299      	cmp	r1, r3
 8028d52:	b510      	push	{r4, lr}
 8028d54:	4604      	mov	r4, r0
 8028d56:	d001      	beq.n	8028d5c <cleanup_stdio+0x10>
 8028d58:	f002 fa7c 	bl	802b254 <_fflush_r>
 8028d5c:	68a1      	ldr	r1, [r4, #8]
 8028d5e:	4b09      	ldr	r3, [pc, #36]	@ (8028d84 <cleanup_stdio+0x38>)
 8028d60:	4299      	cmp	r1, r3
 8028d62:	d002      	beq.n	8028d6a <cleanup_stdio+0x1e>
 8028d64:	4620      	mov	r0, r4
 8028d66:	f002 fa75 	bl	802b254 <_fflush_r>
 8028d6a:	68e1      	ldr	r1, [r4, #12]
 8028d6c:	4b06      	ldr	r3, [pc, #24]	@ (8028d88 <cleanup_stdio+0x3c>)
 8028d6e:	4299      	cmp	r1, r3
 8028d70:	d004      	beq.n	8028d7c <cleanup_stdio+0x30>
 8028d72:	4620      	mov	r0, r4
 8028d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028d78:	f002 ba6c 	b.w	802b254 <_fflush_r>
 8028d7c:	bd10      	pop	{r4, pc}
 8028d7e:	bf00      	nop
 8028d80:	20007fa8 	.word	0x20007fa8
 8028d84:	20008010 	.word	0x20008010
 8028d88:	20008078 	.word	0x20008078

08028d8c <global_stdio_init.part.0>:
 8028d8c:	b510      	push	{r4, lr}
 8028d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8028dbc <global_stdio_init.part.0+0x30>)
 8028d90:	4c0b      	ldr	r4, [pc, #44]	@ (8028dc0 <global_stdio_init.part.0+0x34>)
 8028d92:	4a0c      	ldr	r2, [pc, #48]	@ (8028dc4 <global_stdio_init.part.0+0x38>)
 8028d94:	601a      	str	r2, [r3, #0]
 8028d96:	4620      	mov	r0, r4
 8028d98:	2200      	movs	r2, #0
 8028d9a:	2104      	movs	r1, #4
 8028d9c:	f7ff ff94 	bl	8028cc8 <std>
 8028da0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8028da4:	2201      	movs	r2, #1
 8028da6:	2109      	movs	r1, #9
 8028da8:	f7ff ff8e 	bl	8028cc8 <std>
 8028dac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8028db0:	2202      	movs	r2, #2
 8028db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028db6:	2112      	movs	r1, #18
 8028db8:	f7ff bf86 	b.w	8028cc8 <std>
 8028dbc:	200080e0 	.word	0x200080e0
 8028dc0:	20007fa8 	.word	0x20007fa8
 8028dc4:	08028d35 	.word	0x08028d35

08028dc8 <__sfp_lock_acquire>:
 8028dc8:	4801      	ldr	r0, [pc, #4]	@ (8028dd0 <__sfp_lock_acquire+0x8>)
 8028dca:	f000 ba7e 	b.w	80292ca <__retarget_lock_acquire_recursive>
 8028dce:	bf00      	nop
 8028dd0:	200080e9 	.word	0x200080e9

08028dd4 <__sfp_lock_release>:
 8028dd4:	4801      	ldr	r0, [pc, #4]	@ (8028ddc <__sfp_lock_release+0x8>)
 8028dd6:	f000 ba79 	b.w	80292cc <__retarget_lock_release_recursive>
 8028dda:	bf00      	nop
 8028ddc:	200080e9 	.word	0x200080e9

08028de0 <__sinit>:
 8028de0:	b510      	push	{r4, lr}
 8028de2:	4604      	mov	r4, r0
 8028de4:	f7ff fff0 	bl	8028dc8 <__sfp_lock_acquire>
 8028de8:	6a23      	ldr	r3, [r4, #32]
 8028dea:	b11b      	cbz	r3, 8028df4 <__sinit+0x14>
 8028dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028df0:	f7ff bff0 	b.w	8028dd4 <__sfp_lock_release>
 8028df4:	4b04      	ldr	r3, [pc, #16]	@ (8028e08 <__sinit+0x28>)
 8028df6:	6223      	str	r3, [r4, #32]
 8028df8:	4b04      	ldr	r3, [pc, #16]	@ (8028e0c <__sinit+0x2c>)
 8028dfa:	681b      	ldr	r3, [r3, #0]
 8028dfc:	2b00      	cmp	r3, #0
 8028dfe:	d1f5      	bne.n	8028dec <__sinit+0xc>
 8028e00:	f7ff ffc4 	bl	8028d8c <global_stdio_init.part.0>
 8028e04:	e7f2      	b.n	8028dec <__sinit+0xc>
 8028e06:	bf00      	nop
 8028e08:	08028d4d 	.word	0x08028d4d
 8028e0c:	200080e0 	.word	0x200080e0

08028e10 <fiprintf>:
 8028e10:	b40e      	push	{r1, r2, r3}
 8028e12:	b503      	push	{r0, r1, lr}
 8028e14:	4601      	mov	r1, r0
 8028e16:	ab03      	add	r3, sp, #12
 8028e18:	4805      	ldr	r0, [pc, #20]	@ (8028e30 <fiprintf+0x20>)
 8028e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8028e1e:	6800      	ldr	r0, [r0, #0]
 8028e20:	9301      	str	r3, [sp, #4]
 8028e22:	f001 ff2d 	bl	802ac80 <_vfiprintf_r>
 8028e26:	b002      	add	sp, #8
 8028e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8028e2c:	b003      	add	sp, #12
 8028e2e:	4770      	bx	lr
 8028e30:	200000c8 	.word	0x200000c8

08028e34 <_fwalk_sglue>:
 8028e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028e38:	4607      	mov	r7, r0
 8028e3a:	4688      	mov	r8, r1
 8028e3c:	4614      	mov	r4, r2
 8028e3e:	2600      	movs	r6, #0
 8028e40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8028e44:	f1b9 0901 	subs.w	r9, r9, #1
 8028e48:	d505      	bpl.n	8028e56 <_fwalk_sglue+0x22>
 8028e4a:	6824      	ldr	r4, [r4, #0]
 8028e4c:	2c00      	cmp	r4, #0
 8028e4e:	d1f7      	bne.n	8028e40 <_fwalk_sglue+0xc>
 8028e50:	4630      	mov	r0, r6
 8028e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028e56:	89ab      	ldrh	r3, [r5, #12]
 8028e58:	2b01      	cmp	r3, #1
 8028e5a:	d907      	bls.n	8028e6c <_fwalk_sglue+0x38>
 8028e5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8028e60:	3301      	adds	r3, #1
 8028e62:	d003      	beq.n	8028e6c <_fwalk_sglue+0x38>
 8028e64:	4629      	mov	r1, r5
 8028e66:	4638      	mov	r0, r7
 8028e68:	47c0      	blx	r8
 8028e6a:	4306      	orrs	r6, r0
 8028e6c:	3568      	adds	r5, #104	@ 0x68
 8028e6e:	e7e9      	b.n	8028e44 <_fwalk_sglue+0x10>

08028e70 <iprintf>:
 8028e70:	b40f      	push	{r0, r1, r2, r3}
 8028e72:	b507      	push	{r0, r1, r2, lr}
 8028e74:	4906      	ldr	r1, [pc, #24]	@ (8028e90 <iprintf+0x20>)
 8028e76:	ab04      	add	r3, sp, #16
 8028e78:	6808      	ldr	r0, [r1, #0]
 8028e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8028e7e:	6881      	ldr	r1, [r0, #8]
 8028e80:	9301      	str	r3, [sp, #4]
 8028e82:	f001 fefd 	bl	802ac80 <_vfiprintf_r>
 8028e86:	b003      	add	sp, #12
 8028e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8028e8c:	b004      	add	sp, #16
 8028e8e:	4770      	bx	lr
 8028e90:	200000c8 	.word	0x200000c8

08028e94 <_puts_r>:
 8028e94:	6a03      	ldr	r3, [r0, #32]
 8028e96:	b570      	push	{r4, r5, r6, lr}
 8028e98:	6884      	ldr	r4, [r0, #8]
 8028e9a:	4605      	mov	r5, r0
 8028e9c:	460e      	mov	r6, r1
 8028e9e:	b90b      	cbnz	r3, 8028ea4 <_puts_r+0x10>
 8028ea0:	f7ff ff9e 	bl	8028de0 <__sinit>
 8028ea4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028ea6:	07db      	lsls	r3, r3, #31
 8028ea8:	d405      	bmi.n	8028eb6 <_puts_r+0x22>
 8028eaa:	89a3      	ldrh	r3, [r4, #12]
 8028eac:	0598      	lsls	r0, r3, #22
 8028eae:	d402      	bmi.n	8028eb6 <_puts_r+0x22>
 8028eb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028eb2:	f000 fa0a 	bl	80292ca <__retarget_lock_acquire_recursive>
 8028eb6:	89a3      	ldrh	r3, [r4, #12]
 8028eb8:	0719      	lsls	r1, r3, #28
 8028eba:	d502      	bpl.n	8028ec2 <_puts_r+0x2e>
 8028ebc:	6923      	ldr	r3, [r4, #16]
 8028ebe:	2b00      	cmp	r3, #0
 8028ec0:	d135      	bne.n	8028f2e <_puts_r+0x9a>
 8028ec2:	4621      	mov	r1, r4
 8028ec4:	4628      	mov	r0, r5
 8028ec6:	f000 f8f1 	bl	80290ac <__swsetup_r>
 8028eca:	b380      	cbz	r0, 8028f2e <_puts_r+0x9a>
 8028ecc:	f04f 35ff 	mov.w	r5, #4294967295
 8028ed0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028ed2:	07da      	lsls	r2, r3, #31
 8028ed4:	d405      	bmi.n	8028ee2 <_puts_r+0x4e>
 8028ed6:	89a3      	ldrh	r3, [r4, #12]
 8028ed8:	059b      	lsls	r3, r3, #22
 8028eda:	d402      	bmi.n	8028ee2 <_puts_r+0x4e>
 8028edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028ede:	f000 f9f5 	bl	80292cc <__retarget_lock_release_recursive>
 8028ee2:	4628      	mov	r0, r5
 8028ee4:	bd70      	pop	{r4, r5, r6, pc}
 8028ee6:	2b00      	cmp	r3, #0
 8028ee8:	da04      	bge.n	8028ef4 <_puts_r+0x60>
 8028eea:	69a2      	ldr	r2, [r4, #24]
 8028eec:	429a      	cmp	r2, r3
 8028eee:	dc17      	bgt.n	8028f20 <_puts_r+0x8c>
 8028ef0:	290a      	cmp	r1, #10
 8028ef2:	d015      	beq.n	8028f20 <_puts_r+0x8c>
 8028ef4:	6823      	ldr	r3, [r4, #0]
 8028ef6:	1c5a      	adds	r2, r3, #1
 8028ef8:	6022      	str	r2, [r4, #0]
 8028efa:	7019      	strb	r1, [r3, #0]
 8028efc:	68a3      	ldr	r3, [r4, #8]
 8028efe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8028f02:	3b01      	subs	r3, #1
 8028f04:	60a3      	str	r3, [r4, #8]
 8028f06:	2900      	cmp	r1, #0
 8028f08:	d1ed      	bne.n	8028ee6 <_puts_r+0x52>
 8028f0a:	2b00      	cmp	r3, #0
 8028f0c:	da11      	bge.n	8028f32 <_puts_r+0x9e>
 8028f0e:	4622      	mov	r2, r4
 8028f10:	210a      	movs	r1, #10
 8028f12:	4628      	mov	r0, r5
 8028f14:	f000 f88b 	bl	802902e <__swbuf_r>
 8028f18:	3001      	adds	r0, #1
 8028f1a:	d0d7      	beq.n	8028ecc <_puts_r+0x38>
 8028f1c:	250a      	movs	r5, #10
 8028f1e:	e7d7      	b.n	8028ed0 <_puts_r+0x3c>
 8028f20:	4622      	mov	r2, r4
 8028f22:	4628      	mov	r0, r5
 8028f24:	f000 f883 	bl	802902e <__swbuf_r>
 8028f28:	3001      	adds	r0, #1
 8028f2a:	d1e7      	bne.n	8028efc <_puts_r+0x68>
 8028f2c:	e7ce      	b.n	8028ecc <_puts_r+0x38>
 8028f2e:	3e01      	subs	r6, #1
 8028f30:	e7e4      	b.n	8028efc <_puts_r+0x68>
 8028f32:	6823      	ldr	r3, [r4, #0]
 8028f34:	1c5a      	adds	r2, r3, #1
 8028f36:	6022      	str	r2, [r4, #0]
 8028f38:	220a      	movs	r2, #10
 8028f3a:	701a      	strb	r2, [r3, #0]
 8028f3c:	e7ee      	b.n	8028f1c <_puts_r+0x88>
	...

08028f40 <puts>:
 8028f40:	4b02      	ldr	r3, [pc, #8]	@ (8028f4c <puts+0xc>)
 8028f42:	4601      	mov	r1, r0
 8028f44:	6818      	ldr	r0, [r3, #0]
 8028f46:	f7ff bfa5 	b.w	8028e94 <_puts_r>
 8028f4a:	bf00      	nop
 8028f4c:	200000c8 	.word	0x200000c8

08028f50 <siscanf>:
 8028f50:	b40e      	push	{r1, r2, r3}
 8028f52:	b530      	push	{r4, r5, lr}
 8028f54:	b09c      	sub	sp, #112	@ 0x70
 8028f56:	ac1f      	add	r4, sp, #124	@ 0x7c
 8028f58:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8028f5c:	f854 5b04 	ldr.w	r5, [r4], #4
 8028f60:	f8ad 2014 	strh.w	r2, [sp, #20]
 8028f64:	9002      	str	r0, [sp, #8]
 8028f66:	9006      	str	r0, [sp, #24]
 8028f68:	f7d7 f96a 	bl	8000240 <strlen>
 8028f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8028f9c <siscanf+0x4c>)
 8028f6e:	9003      	str	r0, [sp, #12]
 8028f70:	9007      	str	r0, [sp, #28]
 8028f72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028f74:	480a      	ldr	r0, [pc, #40]	@ (8028fa0 <siscanf+0x50>)
 8028f76:	9401      	str	r4, [sp, #4]
 8028f78:	2300      	movs	r3, #0
 8028f7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028f7c:	9314      	str	r3, [sp, #80]	@ 0x50
 8028f7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8028f82:	f8ad 3016 	strh.w	r3, [sp, #22]
 8028f86:	462a      	mov	r2, r5
 8028f88:	4623      	mov	r3, r4
 8028f8a:	a902      	add	r1, sp, #8
 8028f8c:	6800      	ldr	r0, [r0, #0]
 8028f8e:	f001 fcd9 	bl	802a944 <__ssvfiscanf_r>
 8028f92:	b01c      	add	sp, #112	@ 0x70
 8028f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8028f98:	b003      	add	sp, #12
 8028f9a:	4770      	bx	lr
 8028f9c:	08028fc7 	.word	0x08028fc7
 8028fa0:	200000c8 	.word	0x200000c8

08028fa4 <__sread>:
 8028fa4:	b510      	push	{r4, lr}
 8028fa6:	460c      	mov	r4, r1
 8028fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028fac:	f000 f93e 	bl	802922c <_read_r>
 8028fb0:	2800      	cmp	r0, #0
 8028fb2:	bfab      	itete	ge
 8028fb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8028fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8028fb8:	181b      	addge	r3, r3, r0
 8028fba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8028fbe:	bfac      	ite	ge
 8028fc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8028fc2:	81a3      	strhlt	r3, [r4, #12]
 8028fc4:	bd10      	pop	{r4, pc}

08028fc6 <__seofread>:
 8028fc6:	2000      	movs	r0, #0
 8028fc8:	4770      	bx	lr

08028fca <__swrite>:
 8028fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028fce:	461f      	mov	r7, r3
 8028fd0:	898b      	ldrh	r3, [r1, #12]
 8028fd2:	05db      	lsls	r3, r3, #23
 8028fd4:	4605      	mov	r5, r0
 8028fd6:	460c      	mov	r4, r1
 8028fd8:	4616      	mov	r6, r2
 8028fda:	d505      	bpl.n	8028fe8 <__swrite+0x1e>
 8028fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8028fe0:	2302      	movs	r3, #2
 8028fe2:	2200      	movs	r2, #0
 8028fe4:	f000 f910 	bl	8029208 <_lseek_r>
 8028fe8:	89a3      	ldrh	r3, [r4, #12]
 8028fea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8028fee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8028ff2:	81a3      	strh	r3, [r4, #12]
 8028ff4:	4632      	mov	r2, r6
 8028ff6:	463b      	mov	r3, r7
 8028ff8:	4628      	mov	r0, r5
 8028ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028ffe:	f000 b927 	b.w	8029250 <_write_r>

08029002 <__sseek>:
 8029002:	b510      	push	{r4, lr}
 8029004:	460c      	mov	r4, r1
 8029006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802900a:	f000 f8fd 	bl	8029208 <_lseek_r>
 802900e:	1c43      	adds	r3, r0, #1
 8029010:	89a3      	ldrh	r3, [r4, #12]
 8029012:	bf15      	itete	ne
 8029014:	6560      	strne	r0, [r4, #84]	@ 0x54
 8029016:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802901a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802901e:	81a3      	strheq	r3, [r4, #12]
 8029020:	bf18      	it	ne
 8029022:	81a3      	strhne	r3, [r4, #12]
 8029024:	bd10      	pop	{r4, pc}

08029026 <__sclose>:
 8029026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802902a:	f000 b8dd 	b.w	80291e8 <_close_r>

0802902e <__swbuf_r>:
 802902e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029030:	460e      	mov	r6, r1
 8029032:	4614      	mov	r4, r2
 8029034:	4605      	mov	r5, r0
 8029036:	b118      	cbz	r0, 8029040 <__swbuf_r+0x12>
 8029038:	6a03      	ldr	r3, [r0, #32]
 802903a:	b90b      	cbnz	r3, 8029040 <__swbuf_r+0x12>
 802903c:	f7ff fed0 	bl	8028de0 <__sinit>
 8029040:	69a3      	ldr	r3, [r4, #24]
 8029042:	60a3      	str	r3, [r4, #8]
 8029044:	89a3      	ldrh	r3, [r4, #12]
 8029046:	071a      	lsls	r2, r3, #28
 8029048:	d501      	bpl.n	802904e <__swbuf_r+0x20>
 802904a:	6923      	ldr	r3, [r4, #16]
 802904c:	b943      	cbnz	r3, 8029060 <__swbuf_r+0x32>
 802904e:	4621      	mov	r1, r4
 8029050:	4628      	mov	r0, r5
 8029052:	f000 f82b 	bl	80290ac <__swsetup_r>
 8029056:	b118      	cbz	r0, 8029060 <__swbuf_r+0x32>
 8029058:	f04f 37ff 	mov.w	r7, #4294967295
 802905c:	4638      	mov	r0, r7
 802905e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029060:	6823      	ldr	r3, [r4, #0]
 8029062:	6922      	ldr	r2, [r4, #16]
 8029064:	1a98      	subs	r0, r3, r2
 8029066:	6963      	ldr	r3, [r4, #20]
 8029068:	b2f6      	uxtb	r6, r6
 802906a:	4283      	cmp	r3, r0
 802906c:	4637      	mov	r7, r6
 802906e:	dc05      	bgt.n	802907c <__swbuf_r+0x4e>
 8029070:	4621      	mov	r1, r4
 8029072:	4628      	mov	r0, r5
 8029074:	f002 f8ee 	bl	802b254 <_fflush_r>
 8029078:	2800      	cmp	r0, #0
 802907a:	d1ed      	bne.n	8029058 <__swbuf_r+0x2a>
 802907c:	68a3      	ldr	r3, [r4, #8]
 802907e:	3b01      	subs	r3, #1
 8029080:	60a3      	str	r3, [r4, #8]
 8029082:	6823      	ldr	r3, [r4, #0]
 8029084:	1c5a      	adds	r2, r3, #1
 8029086:	6022      	str	r2, [r4, #0]
 8029088:	701e      	strb	r6, [r3, #0]
 802908a:	6962      	ldr	r2, [r4, #20]
 802908c:	1c43      	adds	r3, r0, #1
 802908e:	429a      	cmp	r2, r3
 8029090:	d004      	beq.n	802909c <__swbuf_r+0x6e>
 8029092:	89a3      	ldrh	r3, [r4, #12]
 8029094:	07db      	lsls	r3, r3, #31
 8029096:	d5e1      	bpl.n	802905c <__swbuf_r+0x2e>
 8029098:	2e0a      	cmp	r6, #10
 802909a:	d1df      	bne.n	802905c <__swbuf_r+0x2e>
 802909c:	4621      	mov	r1, r4
 802909e:	4628      	mov	r0, r5
 80290a0:	f002 f8d8 	bl	802b254 <_fflush_r>
 80290a4:	2800      	cmp	r0, #0
 80290a6:	d0d9      	beq.n	802905c <__swbuf_r+0x2e>
 80290a8:	e7d6      	b.n	8029058 <__swbuf_r+0x2a>
	...

080290ac <__swsetup_r>:
 80290ac:	b538      	push	{r3, r4, r5, lr}
 80290ae:	4b29      	ldr	r3, [pc, #164]	@ (8029154 <__swsetup_r+0xa8>)
 80290b0:	4605      	mov	r5, r0
 80290b2:	6818      	ldr	r0, [r3, #0]
 80290b4:	460c      	mov	r4, r1
 80290b6:	b118      	cbz	r0, 80290c0 <__swsetup_r+0x14>
 80290b8:	6a03      	ldr	r3, [r0, #32]
 80290ba:	b90b      	cbnz	r3, 80290c0 <__swsetup_r+0x14>
 80290bc:	f7ff fe90 	bl	8028de0 <__sinit>
 80290c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80290c4:	0719      	lsls	r1, r3, #28
 80290c6:	d422      	bmi.n	802910e <__swsetup_r+0x62>
 80290c8:	06da      	lsls	r2, r3, #27
 80290ca:	d407      	bmi.n	80290dc <__swsetup_r+0x30>
 80290cc:	2209      	movs	r2, #9
 80290ce:	602a      	str	r2, [r5, #0]
 80290d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80290d4:	81a3      	strh	r3, [r4, #12]
 80290d6:	f04f 30ff 	mov.w	r0, #4294967295
 80290da:	e033      	b.n	8029144 <__swsetup_r+0x98>
 80290dc:	0758      	lsls	r0, r3, #29
 80290de:	d512      	bpl.n	8029106 <__swsetup_r+0x5a>
 80290e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80290e2:	b141      	cbz	r1, 80290f6 <__swsetup_r+0x4a>
 80290e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80290e8:	4299      	cmp	r1, r3
 80290ea:	d002      	beq.n	80290f2 <__swsetup_r+0x46>
 80290ec:	4628      	mov	r0, r5
 80290ee:	f000 ff4f 	bl	8029f90 <_free_r>
 80290f2:	2300      	movs	r3, #0
 80290f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80290f6:	89a3      	ldrh	r3, [r4, #12]
 80290f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80290fc:	81a3      	strh	r3, [r4, #12]
 80290fe:	2300      	movs	r3, #0
 8029100:	6063      	str	r3, [r4, #4]
 8029102:	6923      	ldr	r3, [r4, #16]
 8029104:	6023      	str	r3, [r4, #0]
 8029106:	89a3      	ldrh	r3, [r4, #12]
 8029108:	f043 0308 	orr.w	r3, r3, #8
 802910c:	81a3      	strh	r3, [r4, #12]
 802910e:	6923      	ldr	r3, [r4, #16]
 8029110:	b94b      	cbnz	r3, 8029126 <__swsetup_r+0x7a>
 8029112:	89a3      	ldrh	r3, [r4, #12]
 8029114:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8029118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802911c:	d003      	beq.n	8029126 <__swsetup_r+0x7a>
 802911e:	4621      	mov	r1, r4
 8029120:	4628      	mov	r0, r5
 8029122:	f002 f8e5 	bl	802b2f0 <__smakebuf_r>
 8029126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802912a:	f013 0201 	ands.w	r2, r3, #1
 802912e:	d00a      	beq.n	8029146 <__swsetup_r+0x9a>
 8029130:	2200      	movs	r2, #0
 8029132:	60a2      	str	r2, [r4, #8]
 8029134:	6962      	ldr	r2, [r4, #20]
 8029136:	4252      	negs	r2, r2
 8029138:	61a2      	str	r2, [r4, #24]
 802913a:	6922      	ldr	r2, [r4, #16]
 802913c:	b942      	cbnz	r2, 8029150 <__swsetup_r+0xa4>
 802913e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8029142:	d1c5      	bne.n	80290d0 <__swsetup_r+0x24>
 8029144:	bd38      	pop	{r3, r4, r5, pc}
 8029146:	0799      	lsls	r1, r3, #30
 8029148:	bf58      	it	pl
 802914a:	6962      	ldrpl	r2, [r4, #20]
 802914c:	60a2      	str	r2, [r4, #8]
 802914e:	e7f4      	b.n	802913a <__swsetup_r+0x8e>
 8029150:	2000      	movs	r0, #0
 8029152:	e7f7      	b.n	8029144 <__swsetup_r+0x98>
 8029154:	200000c8 	.word	0x200000c8

08029158 <memcmp>:
 8029158:	b510      	push	{r4, lr}
 802915a:	3901      	subs	r1, #1
 802915c:	4402      	add	r2, r0
 802915e:	4290      	cmp	r0, r2
 8029160:	d101      	bne.n	8029166 <memcmp+0xe>
 8029162:	2000      	movs	r0, #0
 8029164:	e005      	b.n	8029172 <memcmp+0x1a>
 8029166:	7803      	ldrb	r3, [r0, #0]
 8029168:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802916c:	42a3      	cmp	r3, r4
 802916e:	d001      	beq.n	8029174 <memcmp+0x1c>
 8029170:	1b18      	subs	r0, r3, r4
 8029172:	bd10      	pop	{r4, pc}
 8029174:	3001      	adds	r0, #1
 8029176:	e7f2      	b.n	802915e <memcmp+0x6>

08029178 <memmove>:
 8029178:	4288      	cmp	r0, r1
 802917a:	b510      	push	{r4, lr}
 802917c:	eb01 0402 	add.w	r4, r1, r2
 8029180:	d902      	bls.n	8029188 <memmove+0x10>
 8029182:	4284      	cmp	r4, r0
 8029184:	4623      	mov	r3, r4
 8029186:	d807      	bhi.n	8029198 <memmove+0x20>
 8029188:	1e43      	subs	r3, r0, #1
 802918a:	42a1      	cmp	r1, r4
 802918c:	d008      	beq.n	80291a0 <memmove+0x28>
 802918e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8029192:	f803 2f01 	strb.w	r2, [r3, #1]!
 8029196:	e7f8      	b.n	802918a <memmove+0x12>
 8029198:	4402      	add	r2, r0
 802919a:	4601      	mov	r1, r0
 802919c:	428a      	cmp	r2, r1
 802919e:	d100      	bne.n	80291a2 <memmove+0x2a>
 80291a0:	bd10      	pop	{r4, pc}
 80291a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80291a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80291aa:	e7f7      	b.n	802919c <memmove+0x24>

080291ac <memset>:
 80291ac:	4402      	add	r2, r0
 80291ae:	4603      	mov	r3, r0
 80291b0:	4293      	cmp	r3, r2
 80291b2:	d100      	bne.n	80291b6 <memset+0xa>
 80291b4:	4770      	bx	lr
 80291b6:	f803 1b01 	strb.w	r1, [r3], #1
 80291ba:	e7f9      	b.n	80291b0 <memset+0x4>

080291bc <strncmp>:
 80291bc:	b510      	push	{r4, lr}
 80291be:	b16a      	cbz	r2, 80291dc <strncmp+0x20>
 80291c0:	3901      	subs	r1, #1
 80291c2:	1884      	adds	r4, r0, r2
 80291c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80291c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80291cc:	429a      	cmp	r2, r3
 80291ce:	d103      	bne.n	80291d8 <strncmp+0x1c>
 80291d0:	42a0      	cmp	r0, r4
 80291d2:	d001      	beq.n	80291d8 <strncmp+0x1c>
 80291d4:	2a00      	cmp	r2, #0
 80291d6:	d1f5      	bne.n	80291c4 <strncmp+0x8>
 80291d8:	1ad0      	subs	r0, r2, r3
 80291da:	bd10      	pop	{r4, pc}
 80291dc:	4610      	mov	r0, r2
 80291de:	e7fc      	b.n	80291da <strncmp+0x1e>

080291e0 <_localeconv_r>:
 80291e0:	4800      	ldr	r0, [pc, #0]	@ (80291e4 <_localeconv_r+0x4>)
 80291e2:	4770      	bx	lr
 80291e4:	20000208 	.word	0x20000208

080291e8 <_close_r>:
 80291e8:	b538      	push	{r3, r4, r5, lr}
 80291ea:	4d06      	ldr	r5, [pc, #24]	@ (8029204 <_close_r+0x1c>)
 80291ec:	2300      	movs	r3, #0
 80291ee:	4604      	mov	r4, r0
 80291f0:	4608      	mov	r0, r1
 80291f2:	602b      	str	r3, [r5, #0]
 80291f4:	f7da f9b5 	bl	8003562 <_close>
 80291f8:	1c43      	adds	r3, r0, #1
 80291fa:	d102      	bne.n	8029202 <_close_r+0x1a>
 80291fc:	682b      	ldr	r3, [r5, #0]
 80291fe:	b103      	cbz	r3, 8029202 <_close_r+0x1a>
 8029200:	6023      	str	r3, [r4, #0]
 8029202:	bd38      	pop	{r3, r4, r5, pc}
 8029204:	200080e4 	.word	0x200080e4

08029208 <_lseek_r>:
 8029208:	b538      	push	{r3, r4, r5, lr}
 802920a:	4d07      	ldr	r5, [pc, #28]	@ (8029228 <_lseek_r+0x20>)
 802920c:	4604      	mov	r4, r0
 802920e:	4608      	mov	r0, r1
 8029210:	4611      	mov	r1, r2
 8029212:	2200      	movs	r2, #0
 8029214:	602a      	str	r2, [r5, #0]
 8029216:	461a      	mov	r2, r3
 8029218:	f7da f9ca 	bl	80035b0 <_lseek>
 802921c:	1c43      	adds	r3, r0, #1
 802921e:	d102      	bne.n	8029226 <_lseek_r+0x1e>
 8029220:	682b      	ldr	r3, [r5, #0]
 8029222:	b103      	cbz	r3, 8029226 <_lseek_r+0x1e>
 8029224:	6023      	str	r3, [r4, #0]
 8029226:	bd38      	pop	{r3, r4, r5, pc}
 8029228:	200080e4 	.word	0x200080e4

0802922c <_read_r>:
 802922c:	b538      	push	{r3, r4, r5, lr}
 802922e:	4d07      	ldr	r5, [pc, #28]	@ (802924c <_read_r+0x20>)
 8029230:	4604      	mov	r4, r0
 8029232:	4608      	mov	r0, r1
 8029234:	4611      	mov	r1, r2
 8029236:	2200      	movs	r2, #0
 8029238:	602a      	str	r2, [r5, #0]
 802923a:	461a      	mov	r2, r3
 802923c:	f7da f974 	bl	8003528 <_read>
 8029240:	1c43      	adds	r3, r0, #1
 8029242:	d102      	bne.n	802924a <_read_r+0x1e>
 8029244:	682b      	ldr	r3, [r5, #0]
 8029246:	b103      	cbz	r3, 802924a <_read_r+0x1e>
 8029248:	6023      	str	r3, [r4, #0]
 802924a:	bd38      	pop	{r3, r4, r5, pc}
 802924c:	200080e4 	.word	0x200080e4

08029250 <_write_r>:
 8029250:	b538      	push	{r3, r4, r5, lr}
 8029252:	4d07      	ldr	r5, [pc, #28]	@ (8029270 <_write_r+0x20>)
 8029254:	4604      	mov	r4, r0
 8029256:	4608      	mov	r0, r1
 8029258:	4611      	mov	r1, r2
 802925a:	2200      	movs	r2, #0
 802925c:	602a      	str	r2, [r5, #0]
 802925e:	461a      	mov	r2, r3
 8029260:	f7ec ffce 	bl	8016200 <_write>
 8029264:	1c43      	adds	r3, r0, #1
 8029266:	d102      	bne.n	802926e <_write_r+0x1e>
 8029268:	682b      	ldr	r3, [r5, #0]
 802926a:	b103      	cbz	r3, 802926e <_write_r+0x1e>
 802926c:	6023      	str	r3, [r4, #0]
 802926e:	bd38      	pop	{r3, r4, r5, pc}
 8029270:	200080e4 	.word	0x200080e4

08029274 <__errno>:
 8029274:	4b01      	ldr	r3, [pc, #4]	@ (802927c <__errno+0x8>)
 8029276:	6818      	ldr	r0, [r3, #0]
 8029278:	4770      	bx	lr
 802927a:	bf00      	nop
 802927c:	200000c8 	.word	0x200000c8

08029280 <__libc_init_array>:
 8029280:	b570      	push	{r4, r5, r6, lr}
 8029282:	4d0d      	ldr	r5, [pc, #52]	@ (80292b8 <__libc_init_array+0x38>)
 8029284:	4c0d      	ldr	r4, [pc, #52]	@ (80292bc <__libc_init_array+0x3c>)
 8029286:	1b64      	subs	r4, r4, r5
 8029288:	10a4      	asrs	r4, r4, #2
 802928a:	2600      	movs	r6, #0
 802928c:	42a6      	cmp	r6, r4
 802928e:	d109      	bne.n	80292a4 <__libc_init_array+0x24>
 8029290:	4d0b      	ldr	r5, [pc, #44]	@ (80292c0 <__libc_init_array+0x40>)
 8029292:	4c0c      	ldr	r4, [pc, #48]	@ (80292c4 <__libc_init_array+0x44>)
 8029294:	f003 fa34 	bl	802c700 <_init>
 8029298:	1b64      	subs	r4, r4, r5
 802929a:	10a4      	asrs	r4, r4, #2
 802929c:	2600      	movs	r6, #0
 802929e:	42a6      	cmp	r6, r4
 80292a0:	d105      	bne.n	80292ae <__libc_init_array+0x2e>
 80292a2:	bd70      	pop	{r4, r5, r6, pc}
 80292a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80292a8:	4798      	blx	r3
 80292aa:	3601      	adds	r6, #1
 80292ac:	e7ee      	b.n	802928c <__libc_init_array+0xc>
 80292ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80292b2:	4798      	blx	r3
 80292b4:	3601      	adds	r6, #1
 80292b6:	e7f2      	b.n	802929e <__libc_init_array+0x1e>
 80292b8:	08031d50 	.word	0x08031d50
 80292bc:	08031d50 	.word	0x08031d50
 80292c0:	08031d50 	.word	0x08031d50
 80292c4:	08031d54 	.word	0x08031d54

080292c8 <__retarget_lock_init_recursive>:
 80292c8:	4770      	bx	lr

080292ca <__retarget_lock_acquire_recursive>:
 80292ca:	4770      	bx	lr

080292cc <__retarget_lock_release_recursive>:
 80292cc:	4770      	bx	lr

080292ce <memcpy>:
 80292ce:	440a      	add	r2, r1
 80292d0:	4291      	cmp	r1, r2
 80292d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80292d6:	d100      	bne.n	80292da <memcpy+0xc>
 80292d8:	4770      	bx	lr
 80292da:	b510      	push	{r4, lr}
 80292dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80292e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80292e4:	4291      	cmp	r1, r2
 80292e6:	d1f9      	bne.n	80292dc <memcpy+0xe>
 80292e8:	bd10      	pop	{r4, pc}

080292ea <abort>:
 80292ea:	b508      	push	{r3, lr}
 80292ec:	2006      	movs	r0, #6
 80292ee:	f002 f8d7 	bl	802b4a0 <raise>
 80292f2:	2001      	movs	r0, #1
 80292f4:	f7da f90d 	bl	8003512 <_exit>

080292f8 <quorem>:
 80292f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80292fc:	6903      	ldr	r3, [r0, #16]
 80292fe:	690c      	ldr	r4, [r1, #16]
 8029300:	42a3      	cmp	r3, r4
 8029302:	4607      	mov	r7, r0
 8029304:	db7e      	blt.n	8029404 <quorem+0x10c>
 8029306:	3c01      	subs	r4, #1
 8029308:	f101 0814 	add.w	r8, r1, #20
 802930c:	00a3      	lsls	r3, r4, #2
 802930e:	f100 0514 	add.w	r5, r0, #20
 8029312:	9300      	str	r3, [sp, #0]
 8029314:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8029318:	9301      	str	r3, [sp, #4]
 802931a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802931e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8029322:	3301      	adds	r3, #1
 8029324:	429a      	cmp	r2, r3
 8029326:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802932a:	fbb2 f6f3 	udiv	r6, r2, r3
 802932e:	d32e      	bcc.n	802938e <quorem+0x96>
 8029330:	f04f 0a00 	mov.w	sl, #0
 8029334:	46c4      	mov	ip, r8
 8029336:	46ae      	mov	lr, r5
 8029338:	46d3      	mov	fp, sl
 802933a:	f85c 3b04 	ldr.w	r3, [ip], #4
 802933e:	b298      	uxth	r0, r3
 8029340:	fb06 a000 	mla	r0, r6, r0, sl
 8029344:	0c02      	lsrs	r2, r0, #16
 8029346:	0c1b      	lsrs	r3, r3, #16
 8029348:	fb06 2303 	mla	r3, r6, r3, r2
 802934c:	f8de 2000 	ldr.w	r2, [lr]
 8029350:	b280      	uxth	r0, r0
 8029352:	b292      	uxth	r2, r2
 8029354:	1a12      	subs	r2, r2, r0
 8029356:	445a      	add	r2, fp
 8029358:	f8de 0000 	ldr.w	r0, [lr]
 802935c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8029360:	b29b      	uxth	r3, r3
 8029362:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8029366:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802936a:	b292      	uxth	r2, r2
 802936c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8029370:	45e1      	cmp	r9, ip
 8029372:	f84e 2b04 	str.w	r2, [lr], #4
 8029376:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802937a:	d2de      	bcs.n	802933a <quorem+0x42>
 802937c:	9b00      	ldr	r3, [sp, #0]
 802937e:	58eb      	ldr	r3, [r5, r3]
 8029380:	b92b      	cbnz	r3, 802938e <quorem+0x96>
 8029382:	9b01      	ldr	r3, [sp, #4]
 8029384:	3b04      	subs	r3, #4
 8029386:	429d      	cmp	r5, r3
 8029388:	461a      	mov	r2, r3
 802938a:	d32f      	bcc.n	80293ec <quorem+0xf4>
 802938c:	613c      	str	r4, [r7, #16]
 802938e:	4638      	mov	r0, r7
 8029390:	f001 f978 	bl	802a684 <__mcmp>
 8029394:	2800      	cmp	r0, #0
 8029396:	db25      	blt.n	80293e4 <quorem+0xec>
 8029398:	4629      	mov	r1, r5
 802939a:	2000      	movs	r0, #0
 802939c:	f858 2b04 	ldr.w	r2, [r8], #4
 80293a0:	f8d1 c000 	ldr.w	ip, [r1]
 80293a4:	fa1f fe82 	uxth.w	lr, r2
 80293a8:	fa1f f38c 	uxth.w	r3, ip
 80293ac:	eba3 030e 	sub.w	r3, r3, lr
 80293b0:	4403      	add	r3, r0
 80293b2:	0c12      	lsrs	r2, r2, #16
 80293b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80293b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80293bc:	b29b      	uxth	r3, r3
 80293be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80293c2:	45c1      	cmp	r9, r8
 80293c4:	f841 3b04 	str.w	r3, [r1], #4
 80293c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80293cc:	d2e6      	bcs.n	802939c <quorem+0xa4>
 80293ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80293d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80293d6:	b922      	cbnz	r2, 80293e2 <quorem+0xea>
 80293d8:	3b04      	subs	r3, #4
 80293da:	429d      	cmp	r5, r3
 80293dc:	461a      	mov	r2, r3
 80293de:	d30b      	bcc.n	80293f8 <quorem+0x100>
 80293e0:	613c      	str	r4, [r7, #16]
 80293e2:	3601      	adds	r6, #1
 80293e4:	4630      	mov	r0, r6
 80293e6:	b003      	add	sp, #12
 80293e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80293ec:	6812      	ldr	r2, [r2, #0]
 80293ee:	3b04      	subs	r3, #4
 80293f0:	2a00      	cmp	r2, #0
 80293f2:	d1cb      	bne.n	802938c <quorem+0x94>
 80293f4:	3c01      	subs	r4, #1
 80293f6:	e7c6      	b.n	8029386 <quorem+0x8e>
 80293f8:	6812      	ldr	r2, [r2, #0]
 80293fa:	3b04      	subs	r3, #4
 80293fc:	2a00      	cmp	r2, #0
 80293fe:	d1ef      	bne.n	80293e0 <quorem+0xe8>
 8029400:	3c01      	subs	r4, #1
 8029402:	e7ea      	b.n	80293da <quorem+0xe2>
 8029404:	2000      	movs	r0, #0
 8029406:	e7ee      	b.n	80293e6 <quorem+0xee>

08029408 <_dtoa_r>:
 8029408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802940c:	69c7      	ldr	r7, [r0, #28]
 802940e:	b099      	sub	sp, #100	@ 0x64
 8029410:	ed8d 0b02 	vstr	d0, [sp, #8]
 8029414:	ec55 4b10 	vmov	r4, r5, d0
 8029418:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802941a:	9109      	str	r1, [sp, #36]	@ 0x24
 802941c:	4683      	mov	fp, r0
 802941e:	920e      	str	r2, [sp, #56]	@ 0x38
 8029420:	9313      	str	r3, [sp, #76]	@ 0x4c
 8029422:	b97f      	cbnz	r7, 8029444 <_dtoa_r+0x3c>
 8029424:	2010      	movs	r0, #16
 8029426:	f000 fdfd 	bl	802a024 <malloc>
 802942a:	4602      	mov	r2, r0
 802942c:	f8cb 001c 	str.w	r0, [fp, #28]
 8029430:	b920      	cbnz	r0, 802943c <_dtoa_r+0x34>
 8029432:	4ba7      	ldr	r3, [pc, #668]	@ (80296d0 <_dtoa_r+0x2c8>)
 8029434:	21ef      	movs	r1, #239	@ 0xef
 8029436:	48a7      	ldr	r0, [pc, #668]	@ (80296d4 <_dtoa_r+0x2cc>)
 8029438:	f7fe ffd0 	bl	80283dc <__assert_func>
 802943c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8029440:	6007      	str	r7, [r0, #0]
 8029442:	60c7      	str	r7, [r0, #12]
 8029444:	f8db 301c 	ldr.w	r3, [fp, #28]
 8029448:	6819      	ldr	r1, [r3, #0]
 802944a:	b159      	cbz	r1, 8029464 <_dtoa_r+0x5c>
 802944c:	685a      	ldr	r2, [r3, #4]
 802944e:	604a      	str	r2, [r1, #4]
 8029450:	2301      	movs	r3, #1
 8029452:	4093      	lsls	r3, r2
 8029454:	608b      	str	r3, [r1, #8]
 8029456:	4658      	mov	r0, fp
 8029458:	f000 feda 	bl	802a210 <_Bfree>
 802945c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8029460:	2200      	movs	r2, #0
 8029462:	601a      	str	r2, [r3, #0]
 8029464:	1e2b      	subs	r3, r5, #0
 8029466:	bfb9      	ittee	lt
 8029468:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802946c:	9303      	strlt	r3, [sp, #12]
 802946e:	2300      	movge	r3, #0
 8029470:	6033      	strge	r3, [r6, #0]
 8029472:	9f03      	ldr	r7, [sp, #12]
 8029474:	4b98      	ldr	r3, [pc, #608]	@ (80296d8 <_dtoa_r+0x2d0>)
 8029476:	bfbc      	itt	lt
 8029478:	2201      	movlt	r2, #1
 802947a:	6032      	strlt	r2, [r6, #0]
 802947c:	43bb      	bics	r3, r7
 802947e:	d112      	bne.n	80294a6 <_dtoa_r+0x9e>
 8029480:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8029482:	f242 730f 	movw	r3, #9999	@ 0x270f
 8029486:	6013      	str	r3, [r2, #0]
 8029488:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802948c:	4323      	orrs	r3, r4
 802948e:	f000 854d 	beq.w	8029f2c <_dtoa_r+0xb24>
 8029492:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029494:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80296ec <_dtoa_r+0x2e4>
 8029498:	2b00      	cmp	r3, #0
 802949a:	f000 854f 	beq.w	8029f3c <_dtoa_r+0xb34>
 802949e:	f10a 0303 	add.w	r3, sl, #3
 80294a2:	f000 bd49 	b.w	8029f38 <_dtoa_r+0xb30>
 80294a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80294aa:	2200      	movs	r2, #0
 80294ac:	ec51 0b17 	vmov	r0, r1, d7
 80294b0:	2300      	movs	r3, #0
 80294b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80294b6:	f7d7 faef 	bl	8000a98 <__aeabi_dcmpeq>
 80294ba:	4680      	mov	r8, r0
 80294bc:	b158      	cbz	r0, 80294d6 <_dtoa_r+0xce>
 80294be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80294c0:	2301      	movs	r3, #1
 80294c2:	6013      	str	r3, [r2, #0]
 80294c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80294c6:	b113      	cbz	r3, 80294ce <_dtoa_r+0xc6>
 80294c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80294ca:	4b84      	ldr	r3, [pc, #528]	@ (80296dc <_dtoa_r+0x2d4>)
 80294cc:	6013      	str	r3, [r2, #0]
 80294ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80296f0 <_dtoa_r+0x2e8>
 80294d2:	f000 bd33 	b.w	8029f3c <_dtoa_r+0xb34>
 80294d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80294da:	aa16      	add	r2, sp, #88	@ 0x58
 80294dc:	a917      	add	r1, sp, #92	@ 0x5c
 80294de:	4658      	mov	r0, fp
 80294e0:	f001 f980 	bl	802a7e4 <__d2b>
 80294e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80294e8:	4681      	mov	r9, r0
 80294ea:	2e00      	cmp	r6, #0
 80294ec:	d077      	beq.n	80295de <_dtoa_r+0x1d6>
 80294ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80294f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80294f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80294f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80294fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8029500:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8029504:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8029508:	4619      	mov	r1, r3
 802950a:	2200      	movs	r2, #0
 802950c:	4b74      	ldr	r3, [pc, #464]	@ (80296e0 <_dtoa_r+0x2d8>)
 802950e:	f7d6 fea3 	bl	8000258 <__aeabi_dsub>
 8029512:	a369      	add	r3, pc, #420	@ (adr r3, 80296b8 <_dtoa_r+0x2b0>)
 8029514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029518:	f7d7 f856 	bl	80005c8 <__aeabi_dmul>
 802951c:	a368      	add	r3, pc, #416	@ (adr r3, 80296c0 <_dtoa_r+0x2b8>)
 802951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029522:	f7d6 fe9b 	bl	800025c <__adddf3>
 8029526:	4604      	mov	r4, r0
 8029528:	4630      	mov	r0, r6
 802952a:	460d      	mov	r5, r1
 802952c:	f7d6 ffe2 	bl	80004f4 <__aeabi_i2d>
 8029530:	a365      	add	r3, pc, #404	@ (adr r3, 80296c8 <_dtoa_r+0x2c0>)
 8029532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029536:	f7d7 f847 	bl	80005c8 <__aeabi_dmul>
 802953a:	4602      	mov	r2, r0
 802953c:	460b      	mov	r3, r1
 802953e:	4620      	mov	r0, r4
 8029540:	4629      	mov	r1, r5
 8029542:	f7d6 fe8b 	bl	800025c <__adddf3>
 8029546:	4604      	mov	r4, r0
 8029548:	460d      	mov	r5, r1
 802954a:	f7d7 faed 	bl	8000b28 <__aeabi_d2iz>
 802954e:	2200      	movs	r2, #0
 8029550:	4607      	mov	r7, r0
 8029552:	2300      	movs	r3, #0
 8029554:	4620      	mov	r0, r4
 8029556:	4629      	mov	r1, r5
 8029558:	f7d7 faa8 	bl	8000aac <__aeabi_dcmplt>
 802955c:	b140      	cbz	r0, 8029570 <_dtoa_r+0x168>
 802955e:	4638      	mov	r0, r7
 8029560:	f7d6 ffc8 	bl	80004f4 <__aeabi_i2d>
 8029564:	4622      	mov	r2, r4
 8029566:	462b      	mov	r3, r5
 8029568:	f7d7 fa96 	bl	8000a98 <__aeabi_dcmpeq>
 802956c:	b900      	cbnz	r0, 8029570 <_dtoa_r+0x168>
 802956e:	3f01      	subs	r7, #1
 8029570:	2f16      	cmp	r7, #22
 8029572:	d851      	bhi.n	8029618 <_dtoa_r+0x210>
 8029574:	4b5b      	ldr	r3, [pc, #364]	@ (80296e4 <_dtoa_r+0x2dc>)
 8029576:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802957e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8029582:	f7d7 fa93 	bl	8000aac <__aeabi_dcmplt>
 8029586:	2800      	cmp	r0, #0
 8029588:	d048      	beq.n	802961c <_dtoa_r+0x214>
 802958a:	3f01      	subs	r7, #1
 802958c:	2300      	movs	r3, #0
 802958e:	9312      	str	r3, [sp, #72]	@ 0x48
 8029590:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029592:	1b9b      	subs	r3, r3, r6
 8029594:	1e5a      	subs	r2, r3, #1
 8029596:	bf44      	itt	mi
 8029598:	f1c3 0801 	rsbmi	r8, r3, #1
 802959c:	2300      	movmi	r3, #0
 802959e:	9208      	str	r2, [sp, #32]
 80295a0:	bf54      	ite	pl
 80295a2:	f04f 0800 	movpl.w	r8, #0
 80295a6:	9308      	strmi	r3, [sp, #32]
 80295a8:	2f00      	cmp	r7, #0
 80295aa:	db39      	blt.n	8029620 <_dtoa_r+0x218>
 80295ac:	9b08      	ldr	r3, [sp, #32]
 80295ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 80295b0:	443b      	add	r3, r7
 80295b2:	9308      	str	r3, [sp, #32]
 80295b4:	2300      	movs	r3, #0
 80295b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80295b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80295ba:	2b09      	cmp	r3, #9
 80295bc:	d864      	bhi.n	8029688 <_dtoa_r+0x280>
 80295be:	2b05      	cmp	r3, #5
 80295c0:	bfc4      	itt	gt
 80295c2:	3b04      	subgt	r3, #4
 80295c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80295c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80295c8:	f1a3 0302 	sub.w	r3, r3, #2
 80295cc:	bfcc      	ite	gt
 80295ce:	2400      	movgt	r4, #0
 80295d0:	2401      	movle	r4, #1
 80295d2:	2b03      	cmp	r3, #3
 80295d4:	d863      	bhi.n	802969e <_dtoa_r+0x296>
 80295d6:	e8df f003 	tbb	[pc, r3]
 80295da:	372a      	.short	0x372a
 80295dc:	5535      	.short	0x5535
 80295de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80295e2:	441e      	add	r6, r3
 80295e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80295e8:	2b20      	cmp	r3, #32
 80295ea:	bfc1      	itttt	gt
 80295ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80295f0:	409f      	lslgt	r7, r3
 80295f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80295f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80295fa:	bfd6      	itet	le
 80295fc:	f1c3 0320 	rsble	r3, r3, #32
 8029600:	ea47 0003 	orrgt.w	r0, r7, r3
 8029604:	fa04 f003 	lslle.w	r0, r4, r3
 8029608:	f7d6 ff64 	bl	80004d4 <__aeabi_ui2d>
 802960c:	2201      	movs	r2, #1
 802960e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8029612:	3e01      	subs	r6, #1
 8029614:	9214      	str	r2, [sp, #80]	@ 0x50
 8029616:	e777      	b.n	8029508 <_dtoa_r+0x100>
 8029618:	2301      	movs	r3, #1
 802961a:	e7b8      	b.n	802958e <_dtoa_r+0x186>
 802961c:	9012      	str	r0, [sp, #72]	@ 0x48
 802961e:	e7b7      	b.n	8029590 <_dtoa_r+0x188>
 8029620:	427b      	negs	r3, r7
 8029622:	930a      	str	r3, [sp, #40]	@ 0x28
 8029624:	2300      	movs	r3, #0
 8029626:	eba8 0807 	sub.w	r8, r8, r7
 802962a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802962c:	e7c4      	b.n	80295b8 <_dtoa_r+0x1b0>
 802962e:	2300      	movs	r3, #0
 8029630:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029634:	2b00      	cmp	r3, #0
 8029636:	dc35      	bgt.n	80296a4 <_dtoa_r+0x29c>
 8029638:	2301      	movs	r3, #1
 802963a:	9300      	str	r3, [sp, #0]
 802963c:	9307      	str	r3, [sp, #28]
 802963e:	461a      	mov	r2, r3
 8029640:	920e      	str	r2, [sp, #56]	@ 0x38
 8029642:	e00b      	b.n	802965c <_dtoa_r+0x254>
 8029644:	2301      	movs	r3, #1
 8029646:	e7f3      	b.n	8029630 <_dtoa_r+0x228>
 8029648:	2300      	movs	r3, #0
 802964a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802964c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802964e:	18fb      	adds	r3, r7, r3
 8029650:	9300      	str	r3, [sp, #0]
 8029652:	3301      	adds	r3, #1
 8029654:	2b01      	cmp	r3, #1
 8029656:	9307      	str	r3, [sp, #28]
 8029658:	bfb8      	it	lt
 802965a:	2301      	movlt	r3, #1
 802965c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8029660:	2100      	movs	r1, #0
 8029662:	2204      	movs	r2, #4
 8029664:	f102 0514 	add.w	r5, r2, #20
 8029668:	429d      	cmp	r5, r3
 802966a:	d91f      	bls.n	80296ac <_dtoa_r+0x2a4>
 802966c:	6041      	str	r1, [r0, #4]
 802966e:	4658      	mov	r0, fp
 8029670:	f000 fd8e 	bl	802a190 <_Balloc>
 8029674:	4682      	mov	sl, r0
 8029676:	2800      	cmp	r0, #0
 8029678:	d13c      	bne.n	80296f4 <_dtoa_r+0x2ec>
 802967a:	4b1b      	ldr	r3, [pc, #108]	@ (80296e8 <_dtoa_r+0x2e0>)
 802967c:	4602      	mov	r2, r0
 802967e:	f240 11af 	movw	r1, #431	@ 0x1af
 8029682:	e6d8      	b.n	8029436 <_dtoa_r+0x2e>
 8029684:	2301      	movs	r3, #1
 8029686:	e7e0      	b.n	802964a <_dtoa_r+0x242>
 8029688:	2401      	movs	r4, #1
 802968a:	2300      	movs	r3, #0
 802968c:	9309      	str	r3, [sp, #36]	@ 0x24
 802968e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8029690:	f04f 33ff 	mov.w	r3, #4294967295
 8029694:	9300      	str	r3, [sp, #0]
 8029696:	9307      	str	r3, [sp, #28]
 8029698:	2200      	movs	r2, #0
 802969a:	2312      	movs	r3, #18
 802969c:	e7d0      	b.n	8029640 <_dtoa_r+0x238>
 802969e:	2301      	movs	r3, #1
 80296a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80296a2:	e7f5      	b.n	8029690 <_dtoa_r+0x288>
 80296a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80296a6:	9300      	str	r3, [sp, #0]
 80296a8:	9307      	str	r3, [sp, #28]
 80296aa:	e7d7      	b.n	802965c <_dtoa_r+0x254>
 80296ac:	3101      	adds	r1, #1
 80296ae:	0052      	lsls	r2, r2, #1
 80296b0:	e7d8      	b.n	8029664 <_dtoa_r+0x25c>
 80296b2:	bf00      	nop
 80296b4:	f3af 8000 	nop.w
 80296b8:	636f4361 	.word	0x636f4361
 80296bc:	3fd287a7 	.word	0x3fd287a7
 80296c0:	8b60c8b3 	.word	0x8b60c8b3
 80296c4:	3fc68a28 	.word	0x3fc68a28
 80296c8:	509f79fb 	.word	0x509f79fb
 80296cc:	3fd34413 	.word	0x3fd34413
 80296d0:	08031a05 	.word	0x08031a05
 80296d4:	08031a1c 	.word	0x08031a1c
 80296d8:	7ff00000 	.word	0x7ff00000
 80296dc:	080318b4 	.word	0x080318b4
 80296e0:	3ff80000 	.word	0x3ff80000
 80296e4:	08031b18 	.word	0x08031b18
 80296e8:	08031a74 	.word	0x08031a74
 80296ec:	08031a01 	.word	0x08031a01
 80296f0:	080318b3 	.word	0x080318b3
 80296f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80296f8:	6018      	str	r0, [r3, #0]
 80296fa:	9b07      	ldr	r3, [sp, #28]
 80296fc:	2b0e      	cmp	r3, #14
 80296fe:	f200 80a4 	bhi.w	802984a <_dtoa_r+0x442>
 8029702:	2c00      	cmp	r4, #0
 8029704:	f000 80a1 	beq.w	802984a <_dtoa_r+0x442>
 8029708:	2f00      	cmp	r7, #0
 802970a:	dd33      	ble.n	8029774 <_dtoa_r+0x36c>
 802970c:	4bad      	ldr	r3, [pc, #692]	@ (80299c4 <_dtoa_r+0x5bc>)
 802970e:	f007 020f 	and.w	r2, r7, #15
 8029712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8029716:	ed93 7b00 	vldr	d7, [r3]
 802971a:	05f8      	lsls	r0, r7, #23
 802971c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8029720:	ea4f 1427 	mov.w	r4, r7, asr #4
 8029724:	d516      	bpl.n	8029754 <_dtoa_r+0x34c>
 8029726:	4ba8      	ldr	r3, [pc, #672]	@ (80299c8 <_dtoa_r+0x5c0>)
 8029728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802972c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8029730:	f7d7 f874 	bl	800081c <__aeabi_ddiv>
 8029734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029738:	f004 040f 	and.w	r4, r4, #15
 802973c:	2603      	movs	r6, #3
 802973e:	4da2      	ldr	r5, [pc, #648]	@ (80299c8 <_dtoa_r+0x5c0>)
 8029740:	b954      	cbnz	r4, 8029758 <_dtoa_r+0x350>
 8029742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8029746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802974a:	f7d7 f867 	bl	800081c <__aeabi_ddiv>
 802974e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029752:	e028      	b.n	80297a6 <_dtoa_r+0x39e>
 8029754:	2602      	movs	r6, #2
 8029756:	e7f2      	b.n	802973e <_dtoa_r+0x336>
 8029758:	07e1      	lsls	r1, r4, #31
 802975a:	d508      	bpl.n	802976e <_dtoa_r+0x366>
 802975c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8029760:	e9d5 2300 	ldrd	r2, r3, [r5]
 8029764:	f7d6 ff30 	bl	80005c8 <__aeabi_dmul>
 8029768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802976c:	3601      	adds	r6, #1
 802976e:	1064      	asrs	r4, r4, #1
 8029770:	3508      	adds	r5, #8
 8029772:	e7e5      	b.n	8029740 <_dtoa_r+0x338>
 8029774:	f000 80d2 	beq.w	802991c <_dtoa_r+0x514>
 8029778:	427c      	negs	r4, r7
 802977a:	4b92      	ldr	r3, [pc, #584]	@ (80299c4 <_dtoa_r+0x5bc>)
 802977c:	4d92      	ldr	r5, [pc, #584]	@ (80299c8 <_dtoa_r+0x5c0>)
 802977e:	f004 020f 	and.w	r2, r4, #15
 8029782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8029786:	e9d3 2300 	ldrd	r2, r3, [r3]
 802978a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802978e:	f7d6 ff1b 	bl	80005c8 <__aeabi_dmul>
 8029792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029796:	1124      	asrs	r4, r4, #4
 8029798:	2300      	movs	r3, #0
 802979a:	2602      	movs	r6, #2
 802979c:	2c00      	cmp	r4, #0
 802979e:	f040 80b2 	bne.w	8029906 <_dtoa_r+0x4fe>
 80297a2:	2b00      	cmp	r3, #0
 80297a4:	d1d3      	bne.n	802974e <_dtoa_r+0x346>
 80297a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80297a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80297ac:	2b00      	cmp	r3, #0
 80297ae:	f000 80b7 	beq.w	8029920 <_dtoa_r+0x518>
 80297b2:	4b86      	ldr	r3, [pc, #536]	@ (80299cc <_dtoa_r+0x5c4>)
 80297b4:	2200      	movs	r2, #0
 80297b6:	4620      	mov	r0, r4
 80297b8:	4629      	mov	r1, r5
 80297ba:	f7d7 f977 	bl	8000aac <__aeabi_dcmplt>
 80297be:	2800      	cmp	r0, #0
 80297c0:	f000 80ae 	beq.w	8029920 <_dtoa_r+0x518>
 80297c4:	9b07      	ldr	r3, [sp, #28]
 80297c6:	2b00      	cmp	r3, #0
 80297c8:	f000 80aa 	beq.w	8029920 <_dtoa_r+0x518>
 80297cc:	9b00      	ldr	r3, [sp, #0]
 80297ce:	2b00      	cmp	r3, #0
 80297d0:	dd37      	ble.n	8029842 <_dtoa_r+0x43a>
 80297d2:	1e7b      	subs	r3, r7, #1
 80297d4:	9304      	str	r3, [sp, #16]
 80297d6:	4620      	mov	r0, r4
 80297d8:	4b7d      	ldr	r3, [pc, #500]	@ (80299d0 <_dtoa_r+0x5c8>)
 80297da:	2200      	movs	r2, #0
 80297dc:	4629      	mov	r1, r5
 80297de:	f7d6 fef3 	bl	80005c8 <__aeabi_dmul>
 80297e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80297e6:	9c00      	ldr	r4, [sp, #0]
 80297e8:	3601      	adds	r6, #1
 80297ea:	4630      	mov	r0, r6
 80297ec:	f7d6 fe82 	bl	80004f4 <__aeabi_i2d>
 80297f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80297f4:	f7d6 fee8 	bl	80005c8 <__aeabi_dmul>
 80297f8:	4b76      	ldr	r3, [pc, #472]	@ (80299d4 <_dtoa_r+0x5cc>)
 80297fa:	2200      	movs	r2, #0
 80297fc:	f7d6 fd2e 	bl	800025c <__adddf3>
 8029800:	4605      	mov	r5, r0
 8029802:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8029806:	2c00      	cmp	r4, #0
 8029808:	f040 808d 	bne.w	8029926 <_dtoa_r+0x51e>
 802980c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029810:	4b71      	ldr	r3, [pc, #452]	@ (80299d8 <_dtoa_r+0x5d0>)
 8029812:	2200      	movs	r2, #0
 8029814:	f7d6 fd20 	bl	8000258 <__aeabi_dsub>
 8029818:	4602      	mov	r2, r0
 802981a:	460b      	mov	r3, r1
 802981c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8029820:	462a      	mov	r2, r5
 8029822:	4633      	mov	r3, r6
 8029824:	f7d7 f960 	bl	8000ae8 <__aeabi_dcmpgt>
 8029828:	2800      	cmp	r0, #0
 802982a:	f040 828b 	bne.w	8029d44 <_dtoa_r+0x93c>
 802982e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029832:	462a      	mov	r2, r5
 8029834:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8029838:	f7d7 f938 	bl	8000aac <__aeabi_dcmplt>
 802983c:	2800      	cmp	r0, #0
 802983e:	f040 8128 	bne.w	8029a92 <_dtoa_r+0x68a>
 8029842:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8029846:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802984a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802984c:	2b00      	cmp	r3, #0
 802984e:	f2c0 815a 	blt.w	8029b06 <_dtoa_r+0x6fe>
 8029852:	2f0e      	cmp	r7, #14
 8029854:	f300 8157 	bgt.w	8029b06 <_dtoa_r+0x6fe>
 8029858:	4b5a      	ldr	r3, [pc, #360]	@ (80299c4 <_dtoa_r+0x5bc>)
 802985a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802985e:	ed93 7b00 	vldr	d7, [r3]
 8029862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029864:	2b00      	cmp	r3, #0
 8029866:	ed8d 7b00 	vstr	d7, [sp]
 802986a:	da03      	bge.n	8029874 <_dtoa_r+0x46c>
 802986c:	9b07      	ldr	r3, [sp, #28]
 802986e:	2b00      	cmp	r3, #0
 8029870:	f340 8101 	ble.w	8029a76 <_dtoa_r+0x66e>
 8029874:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8029878:	4656      	mov	r6, sl
 802987a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802987e:	4620      	mov	r0, r4
 8029880:	4629      	mov	r1, r5
 8029882:	f7d6 ffcb 	bl	800081c <__aeabi_ddiv>
 8029886:	f7d7 f94f 	bl	8000b28 <__aeabi_d2iz>
 802988a:	4680      	mov	r8, r0
 802988c:	f7d6 fe32 	bl	80004f4 <__aeabi_i2d>
 8029890:	e9dd 2300 	ldrd	r2, r3, [sp]
 8029894:	f7d6 fe98 	bl	80005c8 <__aeabi_dmul>
 8029898:	4602      	mov	r2, r0
 802989a:	460b      	mov	r3, r1
 802989c:	4620      	mov	r0, r4
 802989e:	4629      	mov	r1, r5
 80298a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80298a4:	f7d6 fcd8 	bl	8000258 <__aeabi_dsub>
 80298a8:	f806 4b01 	strb.w	r4, [r6], #1
 80298ac:	9d07      	ldr	r5, [sp, #28]
 80298ae:	eba6 040a 	sub.w	r4, r6, sl
 80298b2:	42a5      	cmp	r5, r4
 80298b4:	4602      	mov	r2, r0
 80298b6:	460b      	mov	r3, r1
 80298b8:	f040 8117 	bne.w	8029aea <_dtoa_r+0x6e2>
 80298bc:	f7d6 fcce 	bl	800025c <__adddf3>
 80298c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80298c4:	4604      	mov	r4, r0
 80298c6:	460d      	mov	r5, r1
 80298c8:	f7d7 f90e 	bl	8000ae8 <__aeabi_dcmpgt>
 80298cc:	2800      	cmp	r0, #0
 80298ce:	f040 80f9 	bne.w	8029ac4 <_dtoa_r+0x6bc>
 80298d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80298d6:	4620      	mov	r0, r4
 80298d8:	4629      	mov	r1, r5
 80298da:	f7d7 f8dd 	bl	8000a98 <__aeabi_dcmpeq>
 80298de:	b118      	cbz	r0, 80298e8 <_dtoa_r+0x4e0>
 80298e0:	f018 0f01 	tst.w	r8, #1
 80298e4:	f040 80ee 	bne.w	8029ac4 <_dtoa_r+0x6bc>
 80298e8:	4649      	mov	r1, r9
 80298ea:	4658      	mov	r0, fp
 80298ec:	f000 fc90 	bl	802a210 <_Bfree>
 80298f0:	2300      	movs	r3, #0
 80298f2:	7033      	strb	r3, [r6, #0]
 80298f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80298f6:	3701      	adds	r7, #1
 80298f8:	601f      	str	r7, [r3, #0]
 80298fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80298fc:	2b00      	cmp	r3, #0
 80298fe:	f000 831d 	beq.w	8029f3c <_dtoa_r+0xb34>
 8029902:	601e      	str	r6, [r3, #0]
 8029904:	e31a      	b.n	8029f3c <_dtoa_r+0xb34>
 8029906:	07e2      	lsls	r2, r4, #31
 8029908:	d505      	bpl.n	8029916 <_dtoa_r+0x50e>
 802990a:	e9d5 2300 	ldrd	r2, r3, [r5]
 802990e:	f7d6 fe5b 	bl	80005c8 <__aeabi_dmul>
 8029912:	3601      	adds	r6, #1
 8029914:	2301      	movs	r3, #1
 8029916:	1064      	asrs	r4, r4, #1
 8029918:	3508      	adds	r5, #8
 802991a:	e73f      	b.n	802979c <_dtoa_r+0x394>
 802991c:	2602      	movs	r6, #2
 802991e:	e742      	b.n	80297a6 <_dtoa_r+0x39e>
 8029920:	9c07      	ldr	r4, [sp, #28]
 8029922:	9704      	str	r7, [sp, #16]
 8029924:	e761      	b.n	80297ea <_dtoa_r+0x3e2>
 8029926:	4b27      	ldr	r3, [pc, #156]	@ (80299c4 <_dtoa_r+0x5bc>)
 8029928:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802992a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802992e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8029932:	4454      	add	r4, sl
 8029934:	2900      	cmp	r1, #0
 8029936:	d053      	beq.n	80299e0 <_dtoa_r+0x5d8>
 8029938:	4928      	ldr	r1, [pc, #160]	@ (80299dc <_dtoa_r+0x5d4>)
 802993a:	2000      	movs	r0, #0
 802993c:	f7d6 ff6e 	bl	800081c <__aeabi_ddiv>
 8029940:	4633      	mov	r3, r6
 8029942:	462a      	mov	r2, r5
 8029944:	f7d6 fc88 	bl	8000258 <__aeabi_dsub>
 8029948:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802994c:	4656      	mov	r6, sl
 802994e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029952:	f7d7 f8e9 	bl	8000b28 <__aeabi_d2iz>
 8029956:	4605      	mov	r5, r0
 8029958:	f7d6 fdcc 	bl	80004f4 <__aeabi_i2d>
 802995c:	4602      	mov	r2, r0
 802995e:	460b      	mov	r3, r1
 8029960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029964:	f7d6 fc78 	bl	8000258 <__aeabi_dsub>
 8029968:	3530      	adds	r5, #48	@ 0x30
 802996a:	4602      	mov	r2, r0
 802996c:	460b      	mov	r3, r1
 802996e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8029972:	f806 5b01 	strb.w	r5, [r6], #1
 8029976:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802997a:	f7d7 f897 	bl	8000aac <__aeabi_dcmplt>
 802997e:	2800      	cmp	r0, #0
 8029980:	d171      	bne.n	8029a66 <_dtoa_r+0x65e>
 8029982:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8029986:	4911      	ldr	r1, [pc, #68]	@ (80299cc <_dtoa_r+0x5c4>)
 8029988:	2000      	movs	r0, #0
 802998a:	f7d6 fc65 	bl	8000258 <__aeabi_dsub>
 802998e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8029992:	f7d7 f88b 	bl	8000aac <__aeabi_dcmplt>
 8029996:	2800      	cmp	r0, #0
 8029998:	f040 8095 	bne.w	8029ac6 <_dtoa_r+0x6be>
 802999c:	42a6      	cmp	r6, r4
 802999e:	f43f af50 	beq.w	8029842 <_dtoa_r+0x43a>
 80299a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80299a6:	4b0a      	ldr	r3, [pc, #40]	@ (80299d0 <_dtoa_r+0x5c8>)
 80299a8:	2200      	movs	r2, #0
 80299aa:	f7d6 fe0d 	bl	80005c8 <__aeabi_dmul>
 80299ae:	4b08      	ldr	r3, [pc, #32]	@ (80299d0 <_dtoa_r+0x5c8>)
 80299b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80299b4:	2200      	movs	r2, #0
 80299b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80299ba:	f7d6 fe05 	bl	80005c8 <__aeabi_dmul>
 80299be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80299c2:	e7c4      	b.n	802994e <_dtoa_r+0x546>
 80299c4:	08031b18 	.word	0x08031b18
 80299c8:	08031af0 	.word	0x08031af0
 80299cc:	3ff00000 	.word	0x3ff00000
 80299d0:	40240000 	.word	0x40240000
 80299d4:	401c0000 	.word	0x401c0000
 80299d8:	40140000 	.word	0x40140000
 80299dc:	3fe00000 	.word	0x3fe00000
 80299e0:	4631      	mov	r1, r6
 80299e2:	4628      	mov	r0, r5
 80299e4:	f7d6 fdf0 	bl	80005c8 <__aeabi_dmul>
 80299e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80299ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80299ee:	4656      	mov	r6, sl
 80299f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80299f4:	f7d7 f898 	bl	8000b28 <__aeabi_d2iz>
 80299f8:	4605      	mov	r5, r0
 80299fa:	f7d6 fd7b 	bl	80004f4 <__aeabi_i2d>
 80299fe:	4602      	mov	r2, r0
 8029a00:	460b      	mov	r3, r1
 8029a02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029a06:	f7d6 fc27 	bl	8000258 <__aeabi_dsub>
 8029a0a:	3530      	adds	r5, #48	@ 0x30
 8029a0c:	f806 5b01 	strb.w	r5, [r6], #1
 8029a10:	4602      	mov	r2, r0
 8029a12:	460b      	mov	r3, r1
 8029a14:	42a6      	cmp	r6, r4
 8029a16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8029a1a:	f04f 0200 	mov.w	r2, #0
 8029a1e:	d124      	bne.n	8029a6a <_dtoa_r+0x662>
 8029a20:	4bac      	ldr	r3, [pc, #688]	@ (8029cd4 <_dtoa_r+0x8cc>)
 8029a22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8029a26:	f7d6 fc19 	bl	800025c <__adddf3>
 8029a2a:	4602      	mov	r2, r0
 8029a2c:	460b      	mov	r3, r1
 8029a2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029a32:	f7d7 f859 	bl	8000ae8 <__aeabi_dcmpgt>
 8029a36:	2800      	cmp	r0, #0
 8029a38:	d145      	bne.n	8029ac6 <_dtoa_r+0x6be>
 8029a3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8029a3e:	49a5      	ldr	r1, [pc, #660]	@ (8029cd4 <_dtoa_r+0x8cc>)
 8029a40:	2000      	movs	r0, #0
 8029a42:	f7d6 fc09 	bl	8000258 <__aeabi_dsub>
 8029a46:	4602      	mov	r2, r0
 8029a48:	460b      	mov	r3, r1
 8029a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029a4e:	f7d7 f82d 	bl	8000aac <__aeabi_dcmplt>
 8029a52:	2800      	cmp	r0, #0
 8029a54:	f43f aef5 	beq.w	8029842 <_dtoa_r+0x43a>
 8029a58:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8029a5a:	1e73      	subs	r3, r6, #1
 8029a5c:	9315      	str	r3, [sp, #84]	@ 0x54
 8029a5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8029a62:	2b30      	cmp	r3, #48	@ 0x30
 8029a64:	d0f8      	beq.n	8029a58 <_dtoa_r+0x650>
 8029a66:	9f04      	ldr	r7, [sp, #16]
 8029a68:	e73e      	b.n	80298e8 <_dtoa_r+0x4e0>
 8029a6a:	4b9b      	ldr	r3, [pc, #620]	@ (8029cd8 <_dtoa_r+0x8d0>)
 8029a6c:	f7d6 fdac 	bl	80005c8 <__aeabi_dmul>
 8029a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029a74:	e7bc      	b.n	80299f0 <_dtoa_r+0x5e8>
 8029a76:	d10c      	bne.n	8029a92 <_dtoa_r+0x68a>
 8029a78:	4b98      	ldr	r3, [pc, #608]	@ (8029cdc <_dtoa_r+0x8d4>)
 8029a7a:	2200      	movs	r2, #0
 8029a7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8029a80:	f7d6 fda2 	bl	80005c8 <__aeabi_dmul>
 8029a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8029a88:	f7d7 f824 	bl	8000ad4 <__aeabi_dcmpge>
 8029a8c:	2800      	cmp	r0, #0
 8029a8e:	f000 8157 	beq.w	8029d40 <_dtoa_r+0x938>
 8029a92:	2400      	movs	r4, #0
 8029a94:	4625      	mov	r5, r4
 8029a96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029a98:	43db      	mvns	r3, r3
 8029a9a:	9304      	str	r3, [sp, #16]
 8029a9c:	4656      	mov	r6, sl
 8029a9e:	2700      	movs	r7, #0
 8029aa0:	4621      	mov	r1, r4
 8029aa2:	4658      	mov	r0, fp
 8029aa4:	f000 fbb4 	bl	802a210 <_Bfree>
 8029aa8:	2d00      	cmp	r5, #0
 8029aaa:	d0dc      	beq.n	8029a66 <_dtoa_r+0x65e>
 8029aac:	b12f      	cbz	r7, 8029aba <_dtoa_r+0x6b2>
 8029aae:	42af      	cmp	r7, r5
 8029ab0:	d003      	beq.n	8029aba <_dtoa_r+0x6b2>
 8029ab2:	4639      	mov	r1, r7
 8029ab4:	4658      	mov	r0, fp
 8029ab6:	f000 fbab 	bl	802a210 <_Bfree>
 8029aba:	4629      	mov	r1, r5
 8029abc:	4658      	mov	r0, fp
 8029abe:	f000 fba7 	bl	802a210 <_Bfree>
 8029ac2:	e7d0      	b.n	8029a66 <_dtoa_r+0x65e>
 8029ac4:	9704      	str	r7, [sp, #16]
 8029ac6:	4633      	mov	r3, r6
 8029ac8:	461e      	mov	r6, r3
 8029aca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8029ace:	2a39      	cmp	r2, #57	@ 0x39
 8029ad0:	d107      	bne.n	8029ae2 <_dtoa_r+0x6da>
 8029ad2:	459a      	cmp	sl, r3
 8029ad4:	d1f8      	bne.n	8029ac8 <_dtoa_r+0x6c0>
 8029ad6:	9a04      	ldr	r2, [sp, #16]
 8029ad8:	3201      	adds	r2, #1
 8029ada:	9204      	str	r2, [sp, #16]
 8029adc:	2230      	movs	r2, #48	@ 0x30
 8029ade:	f88a 2000 	strb.w	r2, [sl]
 8029ae2:	781a      	ldrb	r2, [r3, #0]
 8029ae4:	3201      	adds	r2, #1
 8029ae6:	701a      	strb	r2, [r3, #0]
 8029ae8:	e7bd      	b.n	8029a66 <_dtoa_r+0x65e>
 8029aea:	4b7b      	ldr	r3, [pc, #492]	@ (8029cd8 <_dtoa_r+0x8d0>)
 8029aec:	2200      	movs	r2, #0
 8029aee:	f7d6 fd6b 	bl	80005c8 <__aeabi_dmul>
 8029af2:	2200      	movs	r2, #0
 8029af4:	2300      	movs	r3, #0
 8029af6:	4604      	mov	r4, r0
 8029af8:	460d      	mov	r5, r1
 8029afa:	f7d6 ffcd 	bl	8000a98 <__aeabi_dcmpeq>
 8029afe:	2800      	cmp	r0, #0
 8029b00:	f43f aebb 	beq.w	802987a <_dtoa_r+0x472>
 8029b04:	e6f0      	b.n	80298e8 <_dtoa_r+0x4e0>
 8029b06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029b08:	2a00      	cmp	r2, #0
 8029b0a:	f000 80db 	beq.w	8029cc4 <_dtoa_r+0x8bc>
 8029b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029b10:	2a01      	cmp	r2, #1
 8029b12:	f300 80bf 	bgt.w	8029c94 <_dtoa_r+0x88c>
 8029b16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8029b18:	2a00      	cmp	r2, #0
 8029b1a:	f000 80b7 	beq.w	8029c8c <_dtoa_r+0x884>
 8029b1e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8029b22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8029b24:	4646      	mov	r6, r8
 8029b26:	9a08      	ldr	r2, [sp, #32]
 8029b28:	2101      	movs	r1, #1
 8029b2a:	441a      	add	r2, r3
 8029b2c:	4658      	mov	r0, fp
 8029b2e:	4498      	add	r8, r3
 8029b30:	9208      	str	r2, [sp, #32]
 8029b32:	f000 fc21 	bl	802a378 <__i2b>
 8029b36:	4605      	mov	r5, r0
 8029b38:	b15e      	cbz	r6, 8029b52 <_dtoa_r+0x74a>
 8029b3a:	9b08      	ldr	r3, [sp, #32]
 8029b3c:	2b00      	cmp	r3, #0
 8029b3e:	dd08      	ble.n	8029b52 <_dtoa_r+0x74a>
 8029b40:	42b3      	cmp	r3, r6
 8029b42:	9a08      	ldr	r2, [sp, #32]
 8029b44:	bfa8      	it	ge
 8029b46:	4633      	movge	r3, r6
 8029b48:	eba8 0803 	sub.w	r8, r8, r3
 8029b4c:	1af6      	subs	r6, r6, r3
 8029b4e:	1ad3      	subs	r3, r2, r3
 8029b50:	9308      	str	r3, [sp, #32]
 8029b52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029b54:	b1f3      	cbz	r3, 8029b94 <_dtoa_r+0x78c>
 8029b56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029b58:	2b00      	cmp	r3, #0
 8029b5a:	f000 80b7 	beq.w	8029ccc <_dtoa_r+0x8c4>
 8029b5e:	b18c      	cbz	r4, 8029b84 <_dtoa_r+0x77c>
 8029b60:	4629      	mov	r1, r5
 8029b62:	4622      	mov	r2, r4
 8029b64:	4658      	mov	r0, fp
 8029b66:	f000 fcc7 	bl	802a4f8 <__pow5mult>
 8029b6a:	464a      	mov	r2, r9
 8029b6c:	4601      	mov	r1, r0
 8029b6e:	4605      	mov	r5, r0
 8029b70:	4658      	mov	r0, fp
 8029b72:	f000 fc17 	bl	802a3a4 <__multiply>
 8029b76:	4649      	mov	r1, r9
 8029b78:	9004      	str	r0, [sp, #16]
 8029b7a:	4658      	mov	r0, fp
 8029b7c:	f000 fb48 	bl	802a210 <_Bfree>
 8029b80:	9b04      	ldr	r3, [sp, #16]
 8029b82:	4699      	mov	r9, r3
 8029b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029b86:	1b1a      	subs	r2, r3, r4
 8029b88:	d004      	beq.n	8029b94 <_dtoa_r+0x78c>
 8029b8a:	4649      	mov	r1, r9
 8029b8c:	4658      	mov	r0, fp
 8029b8e:	f000 fcb3 	bl	802a4f8 <__pow5mult>
 8029b92:	4681      	mov	r9, r0
 8029b94:	2101      	movs	r1, #1
 8029b96:	4658      	mov	r0, fp
 8029b98:	f000 fbee 	bl	802a378 <__i2b>
 8029b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029b9e:	4604      	mov	r4, r0
 8029ba0:	2b00      	cmp	r3, #0
 8029ba2:	f000 81cf 	beq.w	8029f44 <_dtoa_r+0xb3c>
 8029ba6:	461a      	mov	r2, r3
 8029ba8:	4601      	mov	r1, r0
 8029baa:	4658      	mov	r0, fp
 8029bac:	f000 fca4 	bl	802a4f8 <__pow5mult>
 8029bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029bb2:	2b01      	cmp	r3, #1
 8029bb4:	4604      	mov	r4, r0
 8029bb6:	f300 8095 	bgt.w	8029ce4 <_dtoa_r+0x8dc>
 8029bba:	9b02      	ldr	r3, [sp, #8]
 8029bbc:	2b00      	cmp	r3, #0
 8029bbe:	f040 8087 	bne.w	8029cd0 <_dtoa_r+0x8c8>
 8029bc2:	9b03      	ldr	r3, [sp, #12]
 8029bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8029bc8:	2b00      	cmp	r3, #0
 8029bca:	f040 8089 	bne.w	8029ce0 <_dtoa_r+0x8d8>
 8029bce:	9b03      	ldr	r3, [sp, #12]
 8029bd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8029bd4:	0d1b      	lsrs	r3, r3, #20
 8029bd6:	051b      	lsls	r3, r3, #20
 8029bd8:	b12b      	cbz	r3, 8029be6 <_dtoa_r+0x7de>
 8029bda:	9b08      	ldr	r3, [sp, #32]
 8029bdc:	3301      	adds	r3, #1
 8029bde:	9308      	str	r3, [sp, #32]
 8029be0:	f108 0801 	add.w	r8, r8, #1
 8029be4:	2301      	movs	r3, #1
 8029be6:	930a      	str	r3, [sp, #40]	@ 0x28
 8029be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029bea:	2b00      	cmp	r3, #0
 8029bec:	f000 81b0 	beq.w	8029f50 <_dtoa_r+0xb48>
 8029bf0:	6923      	ldr	r3, [r4, #16]
 8029bf2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8029bf6:	6918      	ldr	r0, [r3, #16]
 8029bf8:	f000 fb72 	bl	802a2e0 <__hi0bits>
 8029bfc:	f1c0 0020 	rsb	r0, r0, #32
 8029c00:	9b08      	ldr	r3, [sp, #32]
 8029c02:	4418      	add	r0, r3
 8029c04:	f010 001f 	ands.w	r0, r0, #31
 8029c08:	d077      	beq.n	8029cfa <_dtoa_r+0x8f2>
 8029c0a:	f1c0 0320 	rsb	r3, r0, #32
 8029c0e:	2b04      	cmp	r3, #4
 8029c10:	dd6b      	ble.n	8029cea <_dtoa_r+0x8e2>
 8029c12:	9b08      	ldr	r3, [sp, #32]
 8029c14:	f1c0 001c 	rsb	r0, r0, #28
 8029c18:	4403      	add	r3, r0
 8029c1a:	4480      	add	r8, r0
 8029c1c:	4406      	add	r6, r0
 8029c1e:	9308      	str	r3, [sp, #32]
 8029c20:	f1b8 0f00 	cmp.w	r8, #0
 8029c24:	dd05      	ble.n	8029c32 <_dtoa_r+0x82a>
 8029c26:	4649      	mov	r1, r9
 8029c28:	4642      	mov	r2, r8
 8029c2a:	4658      	mov	r0, fp
 8029c2c:	f000 fcbe 	bl	802a5ac <__lshift>
 8029c30:	4681      	mov	r9, r0
 8029c32:	9b08      	ldr	r3, [sp, #32]
 8029c34:	2b00      	cmp	r3, #0
 8029c36:	dd05      	ble.n	8029c44 <_dtoa_r+0x83c>
 8029c38:	4621      	mov	r1, r4
 8029c3a:	461a      	mov	r2, r3
 8029c3c:	4658      	mov	r0, fp
 8029c3e:	f000 fcb5 	bl	802a5ac <__lshift>
 8029c42:	4604      	mov	r4, r0
 8029c44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8029c46:	2b00      	cmp	r3, #0
 8029c48:	d059      	beq.n	8029cfe <_dtoa_r+0x8f6>
 8029c4a:	4621      	mov	r1, r4
 8029c4c:	4648      	mov	r0, r9
 8029c4e:	f000 fd19 	bl	802a684 <__mcmp>
 8029c52:	2800      	cmp	r0, #0
 8029c54:	da53      	bge.n	8029cfe <_dtoa_r+0x8f6>
 8029c56:	1e7b      	subs	r3, r7, #1
 8029c58:	9304      	str	r3, [sp, #16]
 8029c5a:	4649      	mov	r1, r9
 8029c5c:	2300      	movs	r3, #0
 8029c5e:	220a      	movs	r2, #10
 8029c60:	4658      	mov	r0, fp
 8029c62:	f000 faf7 	bl	802a254 <__multadd>
 8029c66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029c68:	4681      	mov	r9, r0
 8029c6a:	2b00      	cmp	r3, #0
 8029c6c:	f000 8172 	beq.w	8029f54 <_dtoa_r+0xb4c>
 8029c70:	2300      	movs	r3, #0
 8029c72:	4629      	mov	r1, r5
 8029c74:	220a      	movs	r2, #10
 8029c76:	4658      	mov	r0, fp
 8029c78:	f000 faec 	bl	802a254 <__multadd>
 8029c7c:	9b00      	ldr	r3, [sp, #0]
 8029c7e:	2b00      	cmp	r3, #0
 8029c80:	4605      	mov	r5, r0
 8029c82:	dc67      	bgt.n	8029d54 <_dtoa_r+0x94c>
 8029c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029c86:	2b02      	cmp	r3, #2
 8029c88:	dc41      	bgt.n	8029d0e <_dtoa_r+0x906>
 8029c8a:	e063      	b.n	8029d54 <_dtoa_r+0x94c>
 8029c8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029c8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8029c92:	e746      	b.n	8029b22 <_dtoa_r+0x71a>
 8029c94:	9b07      	ldr	r3, [sp, #28]
 8029c96:	1e5c      	subs	r4, r3, #1
 8029c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029c9a:	42a3      	cmp	r3, r4
 8029c9c:	bfbf      	itttt	lt
 8029c9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8029ca0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8029ca2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8029ca4:	1ae3      	sublt	r3, r4, r3
 8029ca6:	bfb4      	ite	lt
 8029ca8:	18d2      	addlt	r2, r2, r3
 8029caa:	1b1c      	subge	r4, r3, r4
 8029cac:	9b07      	ldr	r3, [sp, #28]
 8029cae:	bfbc      	itt	lt
 8029cb0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8029cb2:	2400      	movlt	r4, #0
 8029cb4:	2b00      	cmp	r3, #0
 8029cb6:	bfb5      	itete	lt
 8029cb8:	eba8 0603 	sublt.w	r6, r8, r3
 8029cbc:	9b07      	ldrge	r3, [sp, #28]
 8029cbe:	2300      	movlt	r3, #0
 8029cc0:	4646      	movge	r6, r8
 8029cc2:	e730      	b.n	8029b26 <_dtoa_r+0x71e>
 8029cc4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8029cc6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8029cc8:	4646      	mov	r6, r8
 8029cca:	e735      	b.n	8029b38 <_dtoa_r+0x730>
 8029ccc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029cce:	e75c      	b.n	8029b8a <_dtoa_r+0x782>
 8029cd0:	2300      	movs	r3, #0
 8029cd2:	e788      	b.n	8029be6 <_dtoa_r+0x7de>
 8029cd4:	3fe00000 	.word	0x3fe00000
 8029cd8:	40240000 	.word	0x40240000
 8029cdc:	40140000 	.word	0x40140000
 8029ce0:	9b02      	ldr	r3, [sp, #8]
 8029ce2:	e780      	b.n	8029be6 <_dtoa_r+0x7de>
 8029ce4:	2300      	movs	r3, #0
 8029ce6:	930a      	str	r3, [sp, #40]	@ 0x28
 8029ce8:	e782      	b.n	8029bf0 <_dtoa_r+0x7e8>
 8029cea:	d099      	beq.n	8029c20 <_dtoa_r+0x818>
 8029cec:	9a08      	ldr	r2, [sp, #32]
 8029cee:	331c      	adds	r3, #28
 8029cf0:	441a      	add	r2, r3
 8029cf2:	4498      	add	r8, r3
 8029cf4:	441e      	add	r6, r3
 8029cf6:	9208      	str	r2, [sp, #32]
 8029cf8:	e792      	b.n	8029c20 <_dtoa_r+0x818>
 8029cfa:	4603      	mov	r3, r0
 8029cfc:	e7f6      	b.n	8029cec <_dtoa_r+0x8e4>
 8029cfe:	9b07      	ldr	r3, [sp, #28]
 8029d00:	9704      	str	r7, [sp, #16]
 8029d02:	2b00      	cmp	r3, #0
 8029d04:	dc20      	bgt.n	8029d48 <_dtoa_r+0x940>
 8029d06:	9300      	str	r3, [sp, #0]
 8029d08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029d0a:	2b02      	cmp	r3, #2
 8029d0c:	dd1e      	ble.n	8029d4c <_dtoa_r+0x944>
 8029d0e:	9b00      	ldr	r3, [sp, #0]
 8029d10:	2b00      	cmp	r3, #0
 8029d12:	f47f aec0 	bne.w	8029a96 <_dtoa_r+0x68e>
 8029d16:	4621      	mov	r1, r4
 8029d18:	2205      	movs	r2, #5
 8029d1a:	4658      	mov	r0, fp
 8029d1c:	f000 fa9a 	bl	802a254 <__multadd>
 8029d20:	4601      	mov	r1, r0
 8029d22:	4604      	mov	r4, r0
 8029d24:	4648      	mov	r0, r9
 8029d26:	f000 fcad 	bl	802a684 <__mcmp>
 8029d2a:	2800      	cmp	r0, #0
 8029d2c:	f77f aeb3 	ble.w	8029a96 <_dtoa_r+0x68e>
 8029d30:	4656      	mov	r6, sl
 8029d32:	2331      	movs	r3, #49	@ 0x31
 8029d34:	f806 3b01 	strb.w	r3, [r6], #1
 8029d38:	9b04      	ldr	r3, [sp, #16]
 8029d3a:	3301      	adds	r3, #1
 8029d3c:	9304      	str	r3, [sp, #16]
 8029d3e:	e6ae      	b.n	8029a9e <_dtoa_r+0x696>
 8029d40:	9c07      	ldr	r4, [sp, #28]
 8029d42:	9704      	str	r7, [sp, #16]
 8029d44:	4625      	mov	r5, r4
 8029d46:	e7f3      	b.n	8029d30 <_dtoa_r+0x928>
 8029d48:	9b07      	ldr	r3, [sp, #28]
 8029d4a:	9300      	str	r3, [sp, #0]
 8029d4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029d4e:	2b00      	cmp	r3, #0
 8029d50:	f000 8104 	beq.w	8029f5c <_dtoa_r+0xb54>
 8029d54:	2e00      	cmp	r6, #0
 8029d56:	dd05      	ble.n	8029d64 <_dtoa_r+0x95c>
 8029d58:	4629      	mov	r1, r5
 8029d5a:	4632      	mov	r2, r6
 8029d5c:	4658      	mov	r0, fp
 8029d5e:	f000 fc25 	bl	802a5ac <__lshift>
 8029d62:	4605      	mov	r5, r0
 8029d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029d66:	2b00      	cmp	r3, #0
 8029d68:	d05a      	beq.n	8029e20 <_dtoa_r+0xa18>
 8029d6a:	6869      	ldr	r1, [r5, #4]
 8029d6c:	4658      	mov	r0, fp
 8029d6e:	f000 fa0f 	bl	802a190 <_Balloc>
 8029d72:	4606      	mov	r6, r0
 8029d74:	b928      	cbnz	r0, 8029d82 <_dtoa_r+0x97a>
 8029d76:	4b84      	ldr	r3, [pc, #528]	@ (8029f88 <_dtoa_r+0xb80>)
 8029d78:	4602      	mov	r2, r0
 8029d7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8029d7e:	f7ff bb5a 	b.w	8029436 <_dtoa_r+0x2e>
 8029d82:	692a      	ldr	r2, [r5, #16]
 8029d84:	3202      	adds	r2, #2
 8029d86:	0092      	lsls	r2, r2, #2
 8029d88:	f105 010c 	add.w	r1, r5, #12
 8029d8c:	300c      	adds	r0, #12
 8029d8e:	f7ff fa9e 	bl	80292ce <memcpy>
 8029d92:	2201      	movs	r2, #1
 8029d94:	4631      	mov	r1, r6
 8029d96:	4658      	mov	r0, fp
 8029d98:	f000 fc08 	bl	802a5ac <__lshift>
 8029d9c:	f10a 0301 	add.w	r3, sl, #1
 8029da0:	9307      	str	r3, [sp, #28]
 8029da2:	9b00      	ldr	r3, [sp, #0]
 8029da4:	4453      	add	r3, sl
 8029da6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8029da8:	9b02      	ldr	r3, [sp, #8]
 8029daa:	f003 0301 	and.w	r3, r3, #1
 8029dae:	462f      	mov	r7, r5
 8029db0:	930a      	str	r3, [sp, #40]	@ 0x28
 8029db2:	4605      	mov	r5, r0
 8029db4:	9b07      	ldr	r3, [sp, #28]
 8029db6:	4621      	mov	r1, r4
 8029db8:	3b01      	subs	r3, #1
 8029dba:	4648      	mov	r0, r9
 8029dbc:	9300      	str	r3, [sp, #0]
 8029dbe:	f7ff fa9b 	bl	80292f8 <quorem>
 8029dc2:	4639      	mov	r1, r7
 8029dc4:	9002      	str	r0, [sp, #8]
 8029dc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8029dca:	4648      	mov	r0, r9
 8029dcc:	f000 fc5a 	bl	802a684 <__mcmp>
 8029dd0:	462a      	mov	r2, r5
 8029dd2:	9008      	str	r0, [sp, #32]
 8029dd4:	4621      	mov	r1, r4
 8029dd6:	4658      	mov	r0, fp
 8029dd8:	f000 fc70 	bl	802a6bc <__mdiff>
 8029ddc:	68c2      	ldr	r2, [r0, #12]
 8029dde:	4606      	mov	r6, r0
 8029de0:	bb02      	cbnz	r2, 8029e24 <_dtoa_r+0xa1c>
 8029de2:	4601      	mov	r1, r0
 8029de4:	4648      	mov	r0, r9
 8029de6:	f000 fc4d 	bl	802a684 <__mcmp>
 8029dea:	4602      	mov	r2, r0
 8029dec:	4631      	mov	r1, r6
 8029dee:	4658      	mov	r0, fp
 8029df0:	920e      	str	r2, [sp, #56]	@ 0x38
 8029df2:	f000 fa0d 	bl	802a210 <_Bfree>
 8029df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029df8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8029dfa:	9e07      	ldr	r6, [sp, #28]
 8029dfc:	ea43 0102 	orr.w	r1, r3, r2
 8029e00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029e02:	4319      	orrs	r1, r3
 8029e04:	d110      	bne.n	8029e28 <_dtoa_r+0xa20>
 8029e06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8029e0a:	d029      	beq.n	8029e60 <_dtoa_r+0xa58>
 8029e0c:	9b08      	ldr	r3, [sp, #32]
 8029e0e:	2b00      	cmp	r3, #0
 8029e10:	dd02      	ble.n	8029e18 <_dtoa_r+0xa10>
 8029e12:	9b02      	ldr	r3, [sp, #8]
 8029e14:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8029e18:	9b00      	ldr	r3, [sp, #0]
 8029e1a:	f883 8000 	strb.w	r8, [r3]
 8029e1e:	e63f      	b.n	8029aa0 <_dtoa_r+0x698>
 8029e20:	4628      	mov	r0, r5
 8029e22:	e7bb      	b.n	8029d9c <_dtoa_r+0x994>
 8029e24:	2201      	movs	r2, #1
 8029e26:	e7e1      	b.n	8029dec <_dtoa_r+0x9e4>
 8029e28:	9b08      	ldr	r3, [sp, #32]
 8029e2a:	2b00      	cmp	r3, #0
 8029e2c:	db04      	blt.n	8029e38 <_dtoa_r+0xa30>
 8029e2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029e30:	430b      	orrs	r3, r1
 8029e32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8029e34:	430b      	orrs	r3, r1
 8029e36:	d120      	bne.n	8029e7a <_dtoa_r+0xa72>
 8029e38:	2a00      	cmp	r2, #0
 8029e3a:	dded      	ble.n	8029e18 <_dtoa_r+0xa10>
 8029e3c:	4649      	mov	r1, r9
 8029e3e:	2201      	movs	r2, #1
 8029e40:	4658      	mov	r0, fp
 8029e42:	f000 fbb3 	bl	802a5ac <__lshift>
 8029e46:	4621      	mov	r1, r4
 8029e48:	4681      	mov	r9, r0
 8029e4a:	f000 fc1b 	bl	802a684 <__mcmp>
 8029e4e:	2800      	cmp	r0, #0
 8029e50:	dc03      	bgt.n	8029e5a <_dtoa_r+0xa52>
 8029e52:	d1e1      	bne.n	8029e18 <_dtoa_r+0xa10>
 8029e54:	f018 0f01 	tst.w	r8, #1
 8029e58:	d0de      	beq.n	8029e18 <_dtoa_r+0xa10>
 8029e5a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8029e5e:	d1d8      	bne.n	8029e12 <_dtoa_r+0xa0a>
 8029e60:	9a00      	ldr	r2, [sp, #0]
 8029e62:	2339      	movs	r3, #57	@ 0x39
 8029e64:	7013      	strb	r3, [r2, #0]
 8029e66:	4633      	mov	r3, r6
 8029e68:	461e      	mov	r6, r3
 8029e6a:	3b01      	subs	r3, #1
 8029e6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8029e70:	2a39      	cmp	r2, #57	@ 0x39
 8029e72:	d052      	beq.n	8029f1a <_dtoa_r+0xb12>
 8029e74:	3201      	adds	r2, #1
 8029e76:	701a      	strb	r2, [r3, #0]
 8029e78:	e612      	b.n	8029aa0 <_dtoa_r+0x698>
 8029e7a:	2a00      	cmp	r2, #0
 8029e7c:	dd07      	ble.n	8029e8e <_dtoa_r+0xa86>
 8029e7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8029e82:	d0ed      	beq.n	8029e60 <_dtoa_r+0xa58>
 8029e84:	9a00      	ldr	r2, [sp, #0]
 8029e86:	f108 0301 	add.w	r3, r8, #1
 8029e8a:	7013      	strb	r3, [r2, #0]
 8029e8c:	e608      	b.n	8029aa0 <_dtoa_r+0x698>
 8029e8e:	9b07      	ldr	r3, [sp, #28]
 8029e90:	9a07      	ldr	r2, [sp, #28]
 8029e92:	f803 8c01 	strb.w	r8, [r3, #-1]
 8029e96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029e98:	4293      	cmp	r3, r2
 8029e9a:	d028      	beq.n	8029eee <_dtoa_r+0xae6>
 8029e9c:	4649      	mov	r1, r9
 8029e9e:	2300      	movs	r3, #0
 8029ea0:	220a      	movs	r2, #10
 8029ea2:	4658      	mov	r0, fp
 8029ea4:	f000 f9d6 	bl	802a254 <__multadd>
 8029ea8:	42af      	cmp	r7, r5
 8029eaa:	4681      	mov	r9, r0
 8029eac:	f04f 0300 	mov.w	r3, #0
 8029eb0:	f04f 020a 	mov.w	r2, #10
 8029eb4:	4639      	mov	r1, r7
 8029eb6:	4658      	mov	r0, fp
 8029eb8:	d107      	bne.n	8029eca <_dtoa_r+0xac2>
 8029eba:	f000 f9cb 	bl	802a254 <__multadd>
 8029ebe:	4607      	mov	r7, r0
 8029ec0:	4605      	mov	r5, r0
 8029ec2:	9b07      	ldr	r3, [sp, #28]
 8029ec4:	3301      	adds	r3, #1
 8029ec6:	9307      	str	r3, [sp, #28]
 8029ec8:	e774      	b.n	8029db4 <_dtoa_r+0x9ac>
 8029eca:	f000 f9c3 	bl	802a254 <__multadd>
 8029ece:	4629      	mov	r1, r5
 8029ed0:	4607      	mov	r7, r0
 8029ed2:	2300      	movs	r3, #0
 8029ed4:	220a      	movs	r2, #10
 8029ed6:	4658      	mov	r0, fp
 8029ed8:	f000 f9bc 	bl	802a254 <__multadd>
 8029edc:	4605      	mov	r5, r0
 8029ede:	e7f0      	b.n	8029ec2 <_dtoa_r+0xaba>
 8029ee0:	9b00      	ldr	r3, [sp, #0]
 8029ee2:	2b00      	cmp	r3, #0
 8029ee4:	bfcc      	ite	gt
 8029ee6:	461e      	movgt	r6, r3
 8029ee8:	2601      	movle	r6, #1
 8029eea:	4456      	add	r6, sl
 8029eec:	2700      	movs	r7, #0
 8029eee:	4649      	mov	r1, r9
 8029ef0:	2201      	movs	r2, #1
 8029ef2:	4658      	mov	r0, fp
 8029ef4:	f000 fb5a 	bl	802a5ac <__lshift>
 8029ef8:	4621      	mov	r1, r4
 8029efa:	4681      	mov	r9, r0
 8029efc:	f000 fbc2 	bl	802a684 <__mcmp>
 8029f00:	2800      	cmp	r0, #0
 8029f02:	dcb0      	bgt.n	8029e66 <_dtoa_r+0xa5e>
 8029f04:	d102      	bne.n	8029f0c <_dtoa_r+0xb04>
 8029f06:	f018 0f01 	tst.w	r8, #1
 8029f0a:	d1ac      	bne.n	8029e66 <_dtoa_r+0xa5e>
 8029f0c:	4633      	mov	r3, r6
 8029f0e:	461e      	mov	r6, r3
 8029f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8029f14:	2a30      	cmp	r2, #48	@ 0x30
 8029f16:	d0fa      	beq.n	8029f0e <_dtoa_r+0xb06>
 8029f18:	e5c2      	b.n	8029aa0 <_dtoa_r+0x698>
 8029f1a:	459a      	cmp	sl, r3
 8029f1c:	d1a4      	bne.n	8029e68 <_dtoa_r+0xa60>
 8029f1e:	9b04      	ldr	r3, [sp, #16]
 8029f20:	3301      	adds	r3, #1
 8029f22:	9304      	str	r3, [sp, #16]
 8029f24:	2331      	movs	r3, #49	@ 0x31
 8029f26:	f88a 3000 	strb.w	r3, [sl]
 8029f2a:	e5b9      	b.n	8029aa0 <_dtoa_r+0x698>
 8029f2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8029f2e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8029f8c <_dtoa_r+0xb84>
 8029f32:	b11b      	cbz	r3, 8029f3c <_dtoa_r+0xb34>
 8029f34:	f10a 0308 	add.w	r3, sl, #8
 8029f38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8029f3a:	6013      	str	r3, [r2, #0]
 8029f3c:	4650      	mov	r0, sl
 8029f3e:	b019      	add	sp, #100	@ 0x64
 8029f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029f46:	2b01      	cmp	r3, #1
 8029f48:	f77f ae37 	ble.w	8029bba <_dtoa_r+0x7b2>
 8029f4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029f4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8029f50:	2001      	movs	r0, #1
 8029f52:	e655      	b.n	8029c00 <_dtoa_r+0x7f8>
 8029f54:	9b00      	ldr	r3, [sp, #0]
 8029f56:	2b00      	cmp	r3, #0
 8029f58:	f77f aed6 	ble.w	8029d08 <_dtoa_r+0x900>
 8029f5c:	4656      	mov	r6, sl
 8029f5e:	4621      	mov	r1, r4
 8029f60:	4648      	mov	r0, r9
 8029f62:	f7ff f9c9 	bl	80292f8 <quorem>
 8029f66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8029f6a:	f806 8b01 	strb.w	r8, [r6], #1
 8029f6e:	9b00      	ldr	r3, [sp, #0]
 8029f70:	eba6 020a 	sub.w	r2, r6, sl
 8029f74:	4293      	cmp	r3, r2
 8029f76:	ddb3      	ble.n	8029ee0 <_dtoa_r+0xad8>
 8029f78:	4649      	mov	r1, r9
 8029f7a:	2300      	movs	r3, #0
 8029f7c:	220a      	movs	r2, #10
 8029f7e:	4658      	mov	r0, fp
 8029f80:	f000 f968 	bl	802a254 <__multadd>
 8029f84:	4681      	mov	r9, r0
 8029f86:	e7ea      	b.n	8029f5e <_dtoa_r+0xb56>
 8029f88:	08031a74 	.word	0x08031a74
 8029f8c:	080319f8 	.word	0x080319f8

08029f90 <_free_r>:
 8029f90:	b538      	push	{r3, r4, r5, lr}
 8029f92:	4605      	mov	r5, r0
 8029f94:	2900      	cmp	r1, #0
 8029f96:	d041      	beq.n	802a01c <_free_r+0x8c>
 8029f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029f9c:	1f0c      	subs	r4, r1, #4
 8029f9e:	2b00      	cmp	r3, #0
 8029fa0:	bfb8      	it	lt
 8029fa2:	18e4      	addlt	r4, r4, r3
 8029fa4:	f000 f8e8 	bl	802a178 <__malloc_lock>
 8029fa8:	4a1d      	ldr	r2, [pc, #116]	@ (802a020 <_free_r+0x90>)
 8029faa:	6813      	ldr	r3, [r2, #0]
 8029fac:	b933      	cbnz	r3, 8029fbc <_free_r+0x2c>
 8029fae:	6063      	str	r3, [r4, #4]
 8029fb0:	6014      	str	r4, [r2, #0]
 8029fb2:	4628      	mov	r0, r5
 8029fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029fb8:	f000 b8e4 	b.w	802a184 <__malloc_unlock>
 8029fbc:	42a3      	cmp	r3, r4
 8029fbe:	d908      	bls.n	8029fd2 <_free_r+0x42>
 8029fc0:	6820      	ldr	r0, [r4, #0]
 8029fc2:	1821      	adds	r1, r4, r0
 8029fc4:	428b      	cmp	r3, r1
 8029fc6:	bf01      	itttt	eq
 8029fc8:	6819      	ldreq	r1, [r3, #0]
 8029fca:	685b      	ldreq	r3, [r3, #4]
 8029fcc:	1809      	addeq	r1, r1, r0
 8029fce:	6021      	streq	r1, [r4, #0]
 8029fd0:	e7ed      	b.n	8029fae <_free_r+0x1e>
 8029fd2:	461a      	mov	r2, r3
 8029fd4:	685b      	ldr	r3, [r3, #4]
 8029fd6:	b10b      	cbz	r3, 8029fdc <_free_r+0x4c>
 8029fd8:	42a3      	cmp	r3, r4
 8029fda:	d9fa      	bls.n	8029fd2 <_free_r+0x42>
 8029fdc:	6811      	ldr	r1, [r2, #0]
 8029fde:	1850      	adds	r0, r2, r1
 8029fe0:	42a0      	cmp	r0, r4
 8029fe2:	d10b      	bne.n	8029ffc <_free_r+0x6c>
 8029fe4:	6820      	ldr	r0, [r4, #0]
 8029fe6:	4401      	add	r1, r0
 8029fe8:	1850      	adds	r0, r2, r1
 8029fea:	4283      	cmp	r3, r0
 8029fec:	6011      	str	r1, [r2, #0]
 8029fee:	d1e0      	bne.n	8029fb2 <_free_r+0x22>
 8029ff0:	6818      	ldr	r0, [r3, #0]
 8029ff2:	685b      	ldr	r3, [r3, #4]
 8029ff4:	6053      	str	r3, [r2, #4]
 8029ff6:	4408      	add	r0, r1
 8029ff8:	6010      	str	r0, [r2, #0]
 8029ffa:	e7da      	b.n	8029fb2 <_free_r+0x22>
 8029ffc:	d902      	bls.n	802a004 <_free_r+0x74>
 8029ffe:	230c      	movs	r3, #12
 802a000:	602b      	str	r3, [r5, #0]
 802a002:	e7d6      	b.n	8029fb2 <_free_r+0x22>
 802a004:	6820      	ldr	r0, [r4, #0]
 802a006:	1821      	adds	r1, r4, r0
 802a008:	428b      	cmp	r3, r1
 802a00a:	bf04      	itt	eq
 802a00c:	6819      	ldreq	r1, [r3, #0]
 802a00e:	685b      	ldreq	r3, [r3, #4]
 802a010:	6063      	str	r3, [r4, #4]
 802a012:	bf04      	itt	eq
 802a014:	1809      	addeq	r1, r1, r0
 802a016:	6021      	streq	r1, [r4, #0]
 802a018:	6054      	str	r4, [r2, #4]
 802a01a:	e7ca      	b.n	8029fb2 <_free_r+0x22>
 802a01c:	bd38      	pop	{r3, r4, r5, pc}
 802a01e:	bf00      	nop
 802a020:	200080f0 	.word	0x200080f0

0802a024 <malloc>:
 802a024:	4b02      	ldr	r3, [pc, #8]	@ (802a030 <malloc+0xc>)
 802a026:	4601      	mov	r1, r0
 802a028:	6818      	ldr	r0, [r3, #0]
 802a02a:	f000 b825 	b.w	802a078 <_malloc_r>
 802a02e:	bf00      	nop
 802a030:	200000c8 	.word	0x200000c8

0802a034 <sbrk_aligned>:
 802a034:	b570      	push	{r4, r5, r6, lr}
 802a036:	4e0f      	ldr	r6, [pc, #60]	@ (802a074 <sbrk_aligned+0x40>)
 802a038:	460c      	mov	r4, r1
 802a03a:	6831      	ldr	r1, [r6, #0]
 802a03c:	4605      	mov	r5, r0
 802a03e:	b911      	cbnz	r1, 802a046 <sbrk_aligned+0x12>
 802a040:	f001 fa6c 	bl	802b51c <_sbrk_r>
 802a044:	6030      	str	r0, [r6, #0]
 802a046:	4621      	mov	r1, r4
 802a048:	4628      	mov	r0, r5
 802a04a:	f001 fa67 	bl	802b51c <_sbrk_r>
 802a04e:	1c43      	adds	r3, r0, #1
 802a050:	d103      	bne.n	802a05a <sbrk_aligned+0x26>
 802a052:	f04f 34ff 	mov.w	r4, #4294967295
 802a056:	4620      	mov	r0, r4
 802a058:	bd70      	pop	{r4, r5, r6, pc}
 802a05a:	1cc4      	adds	r4, r0, #3
 802a05c:	f024 0403 	bic.w	r4, r4, #3
 802a060:	42a0      	cmp	r0, r4
 802a062:	d0f8      	beq.n	802a056 <sbrk_aligned+0x22>
 802a064:	1a21      	subs	r1, r4, r0
 802a066:	4628      	mov	r0, r5
 802a068:	f001 fa58 	bl	802b51c <_sbrk_r>
 802a06c:	3001      	adds	r0, #1
 802a06e:	d1f2      	bne.n	802a056 <sbrk_aligned+0x22>
 802a070:	e7ef      	b.n	802a052 <sbrk_aligned+0x1e>
 802a072:	bf00      	nop
 802a074:	200080ec 	.word	0x200080ec

0802a078 <_malloc_r>:
 802a078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a07c:	1ccd      	adds	r5, r1, #3
 802a07e:	f025 0503 	bic.w	r5, r5, #3
 802a082:	3508      	adds	r5, #8
 802a084:	2d0c      	cmp	r5, #12
 802a086:	bf38      	it	cc
 802a088:	250c      	movcc	r5, #12
 802a08a:	2d00      	cmp	r5, #0
 802a08c:	4606      	mov	r6, r0
 802a08e:	db01      	blt.n	802a094 <_malloc_r+0x1c>
 802a090:	42a9      	cmp	r1, r5
 802a092:	d904      	bls.n	802a09e <_malloc_r+0x26>
 802a094:	230c      	movs	r3, #12
 802a096:	6033      	str	r3, [r6, #0]
 802a098:	2000      	movs	r0, #0
 802a09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a09e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802a174 <_malloc_r+0xfc>
 802a0a2:	f000 f869 	bl	802a178 <__malloc_lock>
 802a0a6:	f8d8 3000 	ldr.w	r3, [r8]
 802a0aa:	461c      	mov	r4, r3
 802a0ac:	bb44      	cbnz	r4, 802a100 <_malloc_r+0x88>
 802a0ae:	4629      	mov	r1, r5
 802a0b0:	4630      	mov	r0, r6
 802a0b2:	f7ff ffbf 	bl	802a034 <sbrk_aligned>
 802a0b6:	1c43      	adds	r3, r0, #1
 802a0b8:	4604      	mov	r4, r0
 802a0ba:	d158      	bne.n	802a16e <_malloc_r+0xf6>
 802a0bc:	f8d8 4000 	ldr.w	r4, [r8]
 802a0c0:	4627      	mov	r7, r4
 802a0c2:	2f00      	cmp	r7, #0
 802a0c4:	d143      	bne.n	802a14e <_malloc_r+0xd6>
 802a0c6:	2c00      	cmp	r4, #0
 802a0c8:	d04b      	beq.n	802a162 <_malloc_r+0xea>
 802a0ca:	6823      	ldr	r3, [r4, #0]
 802a0cc:	4639      	mov	r1, r7
 802a0ce:	4630      	mov	r0, r6
 802a0d0:	eb04 0903 	add.w	r9, r4, r3
 802a0d4:	f001 fa22 	bl	802b51c <_sbrk_r>
 802a0d8:	4581      	cmp	r9, r0
 802a0da:	d142      	bne.n	802a162 <_malloc_r+0xea>
 802a0dc:	6821      	ldr	r1, [r4, #0]
 802a0de:	1a6d      	subs	r5, r5, r1
 802a0e0:	4629      	mov	r1, r5
 802a0e2:	4630      	mov	r0, r6
 802a0e4:	f7ff ffa6 	bl	802a034 <sbrk_aligned>
 802a0e8:	3001      	adds	r0, #1
 802a0ea:	d03a      	beq.n	802a162 <_malloc_r+0xea>
 802a0ec:	6823      	ldr	r3, [r4, #0]
 802a0ee:	442b      	add	r3, r5
 802a0f0:	6023      	str	r3, [r4, #0]
 802a0f2:	f8d8 3000 	ldr.w	r3, [r8]
 802a0f6:	685a      	ldr	r2, [r3, #4]
 802a0f8:	bb62      	cbnz	r2, 802a154 <_malloc_r+0xdc>
 802a0fa:	f8c8 7000 	str.w	r7, [r8]
 802a0fe:	e00f      	b.n	802a120 <_malloc_r+0xa8>
 802a100:	6822      	ldr	r2, [r4, #0]
 802a102:	1b52      	subs	r2, r2, r5
 802a104:	d420      	bmi.n	802a148 <_malloc_r+0xd0>
 802a106:	2a0b      	cmp	r2, #11
 802a108:	d917      	bls.n	802a13a <_malloc_r+0xc2>
 802a10a:	1961      	adds	r1, r4, r5
 802a10c:	42a3      	cmp	r3, r4
 802a10e:	6025      	str	r5, [r4, #0]
 802a110:	bf18      	it	ne
 802a112:	6059      	strne	r1, [r3, #4]
 802a114:	6863      	ldr	r3, [r4, #4]
 802a116:	bf08      	it	eq
 802a118:	f8c8 1000 	streq.w	r1, [r8]
 802a11c:	5162      	str	r2, [r4, r5]
 802a11e:	604b      	str	r3, [r1, #4]
 802a120:	4630      	mov	r0, r6
 802a122:	f000 f82f 	bl	802a184 <__malloc_unlock>
 802a126:	f104 000b 	add.w	r0, r4, #11
 802a12a:	1d23      	adds	r3, r4, #4
 802a12c:	f020 0007 	bic.w	r0, r0, #7
 802a130:	1ac2      	subs	r2, r0, r3
 802a132:	bf1c      	itt	ne
 802a134:	1a1b      	subne	r3, r3, r0
 802a136:	50a3      	strne	r3, [r4, r2]
 802a138:	e7af      	b.n	802a09a <_malloc_r+0x22>
 802a13a:	6862      	ldr	r2, [r4, #4]
 802a13c:	42a3      	cmp	r3, r4
 802a13e:	bf0c      	ite	eq
 802a140:	f8c8 2000 	streq.w	r2, [r8]
 802a144:	605a      	strne	r2, [r3, #4]
 802a146:	e7eb      	b.n	802a120 <_malloc_r+0xa8>
 802a148:	4623      	mov	r3, r4
 802a14a:	6864      	ldr	r4, [r4, #4]
 802a14c:	e7ae      	b.n	802a0ac <_malloc_r+0x34>
 802a14e:	463c      	mov	r4, r7
 802a150:	687f      	ldr	r7, [r7, #4]
 802a152:	e7b6      	b.n	802a0c2 <_malloc_r+0x4a>
 802a154:	461a      	mov	r2, r3
 802a156:	685b      	ldr	r3, [r3, #4]
 802a158:	42a3      	cmp	r3, r4
 802a15a:	d1fb      	bne.n	802a154 <_malloc_r+0xdc>
 802a15c:	2300      	movs	r3, #0
 802a15e:	6053      	str	r3, [r2, #4]
 802a160:	e7de      	b.n	802a120 <_malloc_r+0xa8>
 802a162:	230c      	movs	r3, #12
 802a164:	6033      	str	r3, [r6, #0]
 802a166:	4630      	mov	r0, r6
 802a168:	f000 f80c 	bl	802a184 <__malloc_unlock>
 802a16c:	e794      	b.n	802a098 <_malloc_r+0x20>
 802a16e:	6005      	str	r5, [r0, #0]
 802a170:	e7d6      	b.n	802a120 <_malloc_r+0xa8>
 802a172:	bf00      	nop
 802a174:	200080f0 	.word	0x200080f0

0802a178 <__malloc_lock>:
 802a178:	4801      	ldr	r0, [pc, #4]	@ (802a180 <__malloc_lock+0x8>)
 802a17a:	f7ff b8a6 	b.w	80292ca <__retarget_lock_acquire_recursive>
 802a17e:	bf00      	nop
 802a180:	200080e8 	.word	0x200080e8

0802a184 <__malloc_unlock>:
 802a184:	4801      	ldr	r0, [pc, #4]	@ (802a18c <__malloc_unlock+0x8>)
 802a186:	f7ff b8a1 	b.w	80292cc <__retarget_lock_release_recursive>
 802a18a:	bf00      	nop
 802a18c:	200080e8 	.word	0x200080e8

0802a190 <_Balloc>:
 802a190:	b570      	push	{r4, r5, r6, lr}
 802a192:	69c6      	ldr	r6, [r0, #28]
 802a194:	4604      	mov	r4, r0
 802a196:	460d      	mov	r5, r1
 802a198:	b976      	cbnz	r6, 802a1b8 <_Balloc+0x28>
 802a19a:	2010      	movs	r0, #16
 802a19c:	f7ff ff42 	bl	802a024 <malloc>
 802a1a0:	4602      	mov	r2, r0
 802a1a2:	61e0      	str	r0, [r4, #28]
 802a1a4:	b920      	cbnz	r0, 802a1b0 <_Balloc+0x20>
 802a1a6:	4b18      	ldr	r3, [pc, #96]	@ (802a208 <_Balloc+0x78>)
 802a1a8:	4818      	ldr	r0, [pc, #96]	@ (802a20c <_Balloc+0x7c>)
 802a1aa:	216b      	movs	r1, #107	@ 0x6b
 802a1ac:	f7fe f916 	bl	80283dc <__assert_func>
 802a1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a1b4:	6006      	str	r6, [r0, #0]
 802a1b6:	60c6      	str	r6, [r0, #12]
 802a1b8:	69e6      	ldr	r6, [r4, #28]
 802a1ba:	68f3      	ldr	r3, [r6, #12]
 802a1bc:	b183      	cbz	r3, 802a1e0 <_Balloc+0x50>
 802a1be:	69e3      	ldr	r3, [r4, #28]
 802a1c0:	68db      	ldr	r3, [r3, #12]
 802a1c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802a1c6:	b9b8      	cbnz	r0, 802a1f8 <_Balloc+0x68>
 802a1c8:	2101      	movs	r1, #1
 802a1ca:	fa01 f605 	lsl.w	r6, r1, r5
 802a1ce:	1d72      	adds	r2, r6, #5
 802a1d0:	0092      	lsls	r2, r2, #2
 802a1d2:	4620      	mov	r0, r4
 802a1d4:	f001 f9b2 	bl	802b53c <_calloc_r>
 802a1d8:	b160      	cbz	r0, 802a1f4 <_Balloc+0x64>
 802a1da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802a1de:	e00e      	b.n	802a1fe <_Balloc+0x6e>
 802a1e0:	2221      	movs	r2, #33	@ 0x21
 802a1e2:	2104      	movs	r1, #4
 802a1e4:	4620      	mov	r0, r4
 802a1e6:	f001 f9a9 	bl	802b53c <_calloc_r>
 802a1ea:	69e3      	ldr	r3, [r4, #28]
 802a1ec:	60f0      	str	r0, [r6, #12]
 802a1ee:	68db      	ldr	r3, [r3, #12]
 802a1f0:	2b00      	cmp	r3, #0
 802a1f2:	d1e4      	bne.n	802a1be <_Balloc+0x2e>
 802a1f4:	2000      	movs	r0, #0
 802a1f6:	bd70      	pop	{r4, r5, r6, pc}
 802a1f8:	6802      	ldr	r2, [r0, #0]
 802a1fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802a1fe:	2300      	movs	r3, #0
 802a200:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a204:	e7f7      	b.n	802a1f6 <_Balloc+0x66>
 802a206:	bf00      	nop
 802a208:	08031a05 	.word	0x08031a05
 802a20c:	08031a85 	.word	0x08031a85

0802a210 <_Bfree>:
 802a210:	b570      	push	{r4, r5, r6, lr}
 802a212:	69c6      	ldr	r6, [r0, #28]
 802a214:	4605      	mov	r5, r0
 802a216:	460c      	mov	r4, r1
 802a218:	b976      	cbnz	r6, 802a238 <_Bfree+0x28>
 802a21a:	2010      	movs	r0, #16
 802a21c:	f7ff ff02 	bl	802a024 <malloc>
 802a220:	4602      	mov	r2, r0
 802a222:	61e8      	str	r0, [r5, #28]
 802a224:	b920      	cbnz	r0, 802a230 <_Bfree+0x20>
 802a226:	4b09      	ldr	r3, [pc, #36]	@ (802a24c <_Bfree+0x3c>)
 802a228:	4809      	ldr	r0, [pc, #36]	@ (802a250 <_Bfree+0x40>)
 802a22a:	218f      	movs	r1, #143	@ 0x8f
 802a22c:	f7fe f8d6 	bl	80283dc <__assert_func>
 802a230:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a234:	6006      	str	r6, [r0, #0]
 802a236:	60c6      	str	r6, [r0, #12]
 802a238:	b13c      	cbz	r4, 802a24a <_Bfree+0x3a>
 802a23a:	69eb      	ldr	r3, [r5, #28]
 802a23c:	6862      	ldr	r2, [r4, #4]
 802a23e:	68db      	ldr	r3, [r3, #12]
 802a240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802a244:	6021      	str	r1, [r4, #0]
 802a246:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802a24a:	bd70      	pop	{r4, r5, r6, pc}
 802a24c:	08031a05 	.word	0x08031a05
 802a250:	08031a85 	.word	0x08031a85

0802a254 <__multadd>:
 802a254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a258:	690d      	ldr	r5, [r1, #16]
 802a25a:	4607      	mov	r7, r0
 802a25c:	460c      	mov	r4, r1
 802a25e:	461e      	mov	r6, r3
 802a260:	f101 0c14 	add.w	ip, r1, #20
 802a264:	2000      	movs	r0, #0
 802a266:	f8dc 3000 	ldr.w	r3, [ip]
 802a26a:	b299      	uxth	r1, r3
 802a26c:	fb02 6101 	mla	r1, r2, r1, r6
 802a270:	0c1e      	lsrs	r6, r3, #16
 802a272:	0c0b      	lsrs	r3, r1, #16
 802a274:	fb02 3306 	mla	r3, r2, r6, r3
 802a278:	b289      	uxth	r1, r1
 802a27a:	3001      	adds	r0, #1
 802a27c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a280:	4285      	cmp	r5, r0
 802a282:	f84c 1b04 	str.w	r1, [ip], #4
 802a286:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802a28a:	dcec      	bgt.n	802a266 <__multadd+0x12>
 802a28c:	b30e      	cbz	r6, 802a2d2 <__multadd+0x7e>
 802a28e:	68a3      	ldr	r3, [r4, #8]
 802a290:	42ab      	cmp	r3, r5
 802a292:	dc19      	bgt.n	802a2c8 <__multadd+0x74>
 802a294:	6861      	ldr	r1, [r4, #4]
 802a296:	4638      	mov	r0, r7
 802a298:	3101      	adds	r1, #1
 802a29a:	f7ff ff79 	bl	802a190 <_Balloc>
 802a29e:	4680      	mov	r8, r0
 802a2a0:	b928      	cbnz	r0, 802a2ae <__multadd+0x5a>
 802a2a2:	4602      	mov	r2, r0
 802a2a4:	4b0c      	ldr	r3, [pc, #48]	@ (802a2d8 <__multadd+0x84>)
 802a2a6:	480d      	ldr	r0, [pc, #52]	@ (802a2dc <__multadd+0x88>)
 802a2a8:	21ba      	movs	r1, #186	@ 0xba
 802a2aa:	f7fe f897 	bl	80283dc <__assert_func>
 802a2ae:	6922      	ldr	r2, [r4, #16]
 802a2b0:	3202      	adds	r2, #2
 802a2b2:	f104 010c 	add.w	r1, r4, #12
 802a2b6:	0092      	lsls	r2, r2, #2
 802a2b8:	300c      	adds	r0, #12
 802a2ba:	f7ff f808 	bl	80292ce <memcpy>
 802a2be:	4621      	mov	r1, r4
 802a2c0:	4638      	mov	r0, r7
 802a2c2:	f7ff ffa5 	bl	802a210 <_Bfree>
 802a2c6:	4644      	mov	r4, r8
 802a2c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802a2cc:	3501      	adds	r5, #1
 802a2ce:	615e      	str	r6, [r3, #20]
 802a2d0:	6125      	str	r5, [r4, #16]
 802a2d2:	4620      	mov	r0, r4
 802a2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a2d8:	08031a74 	.word	0x08031a74
 802a2dc:	08031a85 	.word	0x08031a85

0802a2e0 <__hi0bits>:
 802a2e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802a2e4:	4603      	mov	r3, r0
 802a2e6:	bf36      	itet	cc
 802a2e8:	0403      	lslcc	r3, r0, #16
 802a2ea:	2000      	movcs	r0, #0
 802a2ec:	2010      	movcc	r0, #16
 802a2ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802a2f2:	bf3c      	itt	cc
 802a2f4:	021b      	lslcc	r3, r3, #8
 802a2f6:	3008      	addcc	r0, #8
 802a2f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802a2fc:	bf3c      	itt	cc
 802a2fe:	011b      	lslcc	r3, r3, #4
 802a300:	3004      	addcc	r0, #4
 802a302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802a306:	bf3c      	itt	cc
 802a308:	009b      	lslcc	r3, r3, #2
 802a30a:	3002      	addcc	r0, #2
 802a30c:	2b00      	cmp	r3, #0
 802a30e:	db05      	blt.n	802a31c <__hi0bits+0x3c>
 802a310:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802a314:	f100 0001 	add.w	r0, r0, #1
 802a318:	bf08      	it	eq
 802a31a:	2020      	moveq	r0, #32
 802a31c:	4770      	bx	lr

0802a31e <__lo0bits>:
 802a31e:	6803      	ldr	r3, [r0, #0]
 802a320:	4602      	mov	r2, r0
 802a322:	f013 0007 	ands.w	r0, r3, #7
 802a326:	d00b      	beq.n	802a340 <__lo0bits+0x22>
 802a328:	07d9      	lsls	r1, r3, #31
 802a32a:	d421      	bmi.n	802a370 <__lo0bits+0x52>
 802a32c:	0798      	lsls	r0, r3, #30
 802a32e:	bf49      	itett	mi
 802a330:	085b      	lsrmi	r3, r3, #1
 802a332:	089b      	lsrpl	r3, r3, #2
 802a334:	2001      	movmi	r0, #1
 802a336:	6013      	strmi	r3, [r2, #0]
 802a338:	bf5c      	itt	pl
 802a33a:	6013      	strpl	r3, [r2, #0]
 802a33c:	2002      	movpl	r0, #2
 802a33e:	4770      	bx	lr
 802a340:	b299      	uxth	r1, r3
 802a342:	b909      	cbnz	r1, 802a348 <__lo0bits+0x2a>
 802a344:	0c1b      	lsrs	r3, r3, #16
 802a346:	2010      	movs	r0, #16
 802a348:	b2d9      	uxtb	r1, r3
 802a34a:	b909      	cbnz	r1, 802a350 <__lo0bits+0x32>
 802a34c:	3008      	adds	r0, #8
 802a34e:	0a1b      	lsrs	r3, r3, #8
 802a350:	0719      	lsls	r1, r3, #28
 802a352:	bf04      	itt	eq
 802a354:	091b      	lsreq	r3, r3, #4
 802a356:	3004      	addeq	r0, #4
 802a358:	0799      	lsls	r1, r3, #30
 802a35a:	bf04      	itt	eq
 802a35c:	089b      	lsreq	r3, r3, #2
 802a35e:	3002      	addeq	r0, #2
 802a360:	07d9      	lsls	r1, r3, #31
 802a362:	d403      	bmi.n	802a36c <__lo0bits+0x4e>
 802a364:	085b      	lsrs	r3, r3, #1
 802a366:	f100 0001 	add.w	r0, r0, #1
 802a36a:	d003      	beq.n	802a374 <__lo0bits+0x56>
 802a36c:	6013      	str	r3, [r2, #0]
 802a36e:	4770      	bx	lr
 802a370:	2000      	movs	r0, #0
 802a372:	4770      	bx	lr
 802a374:	2020      	movs	r0, #32
 802a376:	4770      	bx	lr

0802a378 <__i2b>:
 802a378:	b510      	push	{r4, lr}
 802a37a:	460c      	mov	r4, r1
 802a37c:	2101      	movs	r1, #1
 802a37e:	f7ff ff07 	bl	802a190 <_Balloc>
 802a382:	4602      	mov	r2, r0
 802a384:	b928      	cbnz	r0, 802a392 <__i2b+0x1a>
 802a386:	4b05      	ldr	r3, [pc, #20]	@ (802a39c <__i2b+0x24>)
 802a388:	4805      	ldr	r0, [pc, #20]	@ (802a3a0 <__i2b+0x28>)
 802a38a:	f240 1145 	movw	r1, #325	@ 0x145
 802a38e:	f7fe f825 	bl	80283dc <__assert_func>
 802a392:	2301      	movs	r3, #1
 802a394:	6144      	str	r4, [r0, #20]
 802a396:	6103      	str	r3, [r0, #16]
 802a398:	bd10      	pop	{r4, pc}
 802a39a:	bf00      	nop
 802a39c:	08031a74 	.word	0x08031a74
 802a3a0:	08031a85 	.word	0x08031a85

0802a3a4 <__multiply>:
 802a3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a3a8:	4614      	mov	r4, r2
 802a3aa:	690a      	ldr	r2, [r1, #16]
 802a3ac:	6923      	ldr	r3, [r4, #16]
 802a3ae:	429a      	cmp	r2, r3
 802a3b0:	bfa8      	it	ge
 802a3b2:	4623      	movge	r3, r4
 802a3b4:	460f      	mov	r7, r1
 802a3b6:	bfa4      	itt	ge
 802a3b8:	460c      	movge	r4, r1
 802a3ba:	461f      	movge	r7, r3
 802a3bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802a3c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802a3c4:	68a3      	ldr	r3, [r4, #8]
 802a3c6:	6861      	ldr	r1, [r4, #4]
 802a3c8:	eb0a 0609 	add.w	r6, sl, r9
 802a3cc:	42b3      	cmp	r3, r6
 802a3ce:	b085      	sub	sp, #20
 802a3d0:	bfb8      	it	lt
 802a3d2:	3101      	addlt	r1, #1
 802a3d4:	f7ff fedc 	bl	802a190 <_Balloc>
 802a3d8:	b930      	cbnz	r0, 802a3e8 <__multiply+0x44>
 802a3da:	4602      	mov	r2, r0
 802a3dc:	4b44      	ldr	r3, [pc, #272]	@ (802a4f0 <__multiply+0x14c>)
 802a3de:	4845      	ldr	r0, [pc, #276]	@ (802a4f4 <__multiply+0x150>)
 802a3e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802a3e4:	f7fd fffa 	bl	80283dc <__assert_func>
 802a3e8:	f100 0514 	add.w	r5, r0, #20
 802a3ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802a3f0:	462b      	mov	r3, r5
 802a3f2:	2200      	movs	r2, #0
 802a3f4:	4543      	cmp	r3, r8
 802a3f6:	d321      	bcc.n	802a43c <__multiply+0x98>
 802a3f8:	f107 0114 	add.w	r1, r7, #20
 802a3fc:	f104 0214 	add.w	r2, r4, #20
 802a400:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802a404:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802a408:	9302      	str	r3, [sp, #8]
 802a40a:	1b13      	subs	r3, r2, r4
 802a40c:	3b15      	subs	r3, #21
 802a40e:	f023 0303 	bic.w	r3, r3, #3
 802a412:	3304      	adds	r3, #4
 802a414:	f104 0715 	add.w	r7, r4, #21
 802a418:	42ba      	cmp	r2, r7
 802a41a:	bf38      	it	cc
 802a41c:	2304      	movcc	r3, #4
 802a41e:	9301      	str	r3, [sp, #4]
 802a420:	9b02      	ldr	r3, [sp, #8]
 802a422:	9103      	str	r1, [sp, #12]
 802a424:	428b      	cmp	r3, r1
 802a426:	d80c      	bhi.n	802a442 <__multiply+0x9e>
 802a428:	2e00      	cmp	r6, #0
 802a42a:	dd03      	ble.n	802a434 <__multiply+0x90>
 802a42c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802a430:	2b00      	cmp	r3, #0
 802a432:	d05b      	beq.n	802a4ec <__multiply+0x148>
 802a434:	6106      	str	r6, [r0, #16]
 802a436:	b005      	add	sp, #20
 802a438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a43c:	f843 2b04 	str.w	r2, [r3], #4
 802a440:	e7d8      	b.n	802a3f4 <__multiply+0x50>
 802a442:	f8b1 a000 	ldrh.w	sl, [r1]
 802a446:	f1ba 0f00 	cmp.w	sl, #0
 802a44a:	d024      	beq.n	802a496 <__multiply+0xf2>
 802a44c:	f104 0e14 	add.w	lr, r4, #20
 802a450:	46a9      	mov	r9, r5
 802a452:	f04f 0c00 	mov.w	ip, #0
 802a456:	f85e 7b04 	ldr.w	r7, [lr], #4
 802a45a:	f8d9 3000 	ldr.w	r3, [r9]
 802a45e:	fa1f fb87 	uxth.w	fp, r7
 802a462:	b29b      	uxth	r3, r3
 802a464:	fb0a 330b 	mla	r3, sl, fp, r3
 802a468:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802a46c:	f8d9 7000 	ldr.w	r7, [r9]
 802a470:	4463      	add	r3, ip
 802a472:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802a476:	fb0a c70b 	mla	r7, sl, fp, ip
 802a47a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802a47e:	b29b      	uxth	r3, r3
 802a480:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802a484:	4572      	cmp	r2, lr
 802a486:	f849 3b04 	str.w	r3, [r9], #4
 802a48a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802a48e:	d8e2      	bhi.n	802a456 <__multiply+0xb2>
 802a490:	9b01      	ldr	r3, [sp, #4]
 802a492:	f845 c003 	str.w	ip, [r5, r3]
 802a496:	9b03      	ldr	r3, [sp, #12]
 802a498:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802a49c:	3104      	adds	r1, #4
 802a49e:	f1b9 0f00 	cmp.w	r9, #0
 802a4a2:	d021      	beq.n	802a4e8 <__multiply+0x144>
 802a4a4:	682b      	ldr	r3, [r5, #0]
 802a4a6:	f104 0c14 	add.w	ip, r4, #20
 802a4aa:	46ae      	mov	lr, r5
 802a4ac:	f04f 0a00 	mov.w	sl, #0
 802a4b0:	f8bc b000 	ldrh.w	fp, [ip]
 802a4b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802a4b8:	fb09 770b 	mla	r7, r9, fp, r7
 802a4bc:	4457      	add	r7, sl
 802a4be:	b29b      	uxth	r3, r3
 802a4c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802a4c4:	f84e 3b04 	str.w	r3, [lr], #4
 802a4c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 802a4cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802a4d0:	f8be 3000 	ldrh.w	r3, [lr]
 802a4d4:	fb09 330a 	mla	r3, r9, sl, r3
 802a4d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802a4dc:	4562      	cmp	r2, ip
 802a4de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802a4e2:	d8e5      	bhi.n	802a4b0 <__multiply+0x10c>
 802a4e4:	9f01      	ldr	r7, [sp, #4]
 802a4e6:	51eb      	str	r3, [r5, r7]
 802a4e8:	3504      	adds	r5, #4
 802a4ea:	e799      	b.n	802a420 <__multiply+0x7c>
 802a4ec:	3e01      	subs	r6, #1
 802a4ee:	e79b      	b.n	802a428 <__multiply+0x84>
 802a4f0:	08031a74 	.word	0x08031a74
 802a4f4:	08031a85 	.word	0x08031a85

0802a4f8 <__pow5mult>:
 802a4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a4fc:	4615      	mov	r5, r2
 802a4fe:	f012 0203 	ands.w	r2, r2, #3
 802a502:	4607      	mov	r7, r0
 802a504:	460e      	mov	r6, r1
 802a506:	d007      	beq.n	802a518 <__pow5mult+0x20>
 802a508:	4c25      	ldr	r4, [pc, #148]	@ (802a5a0 <__pow5mult+0xa8>)
 802a50a:	3a01      	subs	r2, #1
 802a50c:	2300      	movs	r3, #0
 802a50e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802a512:	f7ff fe9f 	bl	802a254 <__multadd>
 802a516:	4606      	mov	r6, r0
 802a518:	10ad      	asrs	r5, r5, #2
 802a51a:	d03d      	beq.n	802a598 <__pow5mult+0xa0>
 802a51c:	69fc      	ldr	r4, [r7, #28]
 802a51e:	b97c      	cbnz	r4, 802a540 <__pow5mult+0x48>
 802a520:	2010      	movs	r0, #16
 802a522:	f7ff fd7f 	bl	802a024 <malloc>
 802a526:	4602      	mov	r2, r0
 802a528:	61f8      	str	r0, [r7, #28]
 802a52a:	b928      	cbnz	r0, 802a538 <__pow5mult+0x40>
 802a52c:	4b1d      	ldr	r3, [pc, #116]	@ (802a5a4 <__pow5mult+0xac>)
 802a52e:	481e      	ldr	r0, [pc, #120]	@ (802a5a8 <__pow5mult+0xb0>)
 802a530:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802a534:	f7fd ff52 	bl	80283dc <__assert_func>
 802a538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802a53c:	6004      	str	r4, [r0, #0]
 802a53e:	60c4      	str	r4, [r0, #12]
 802a540:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802a544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802a548:	b94c      	cbnz	r4, 802a55e <__pow5mult+0x66>
 802a54a:	f240 2171 	movw	r1, #625	@ 0x271
 802a54e:	4638      	mov	r0, r7
 802a550:	f7ff ff12 	bl	802a378 <__i2b>
 802a554:	2300      	movs	r3, #0
 802a556:	f8c8 0008 	str.w	r0, [r8, #8]
 802a55a:	4604      	mov	r4, r0
 802a55c:	6003      	str	r3, [r0, #0]
 802a55e:	f04f 0900 	mov.w	r9, #0
 802a562:	07eb      	lsls	r3, r5, #31
 802a564:	d50a      	bpl.n	802a57c <__pow5mult+0x84>
 802a566:	4631      	mov	r1, r6
 802a568:	4622      	mov	r2, r4
 802a56a:	4638      	mov	r0, r7
 802a56c:	f7ff ff1a 	bl	802a3a4 <__multiply>
 802a570:	4631      	mov	r1, r6
 802a572:	4680      	mov	r8, r0
 802a574:	4638      	mov	r0, r7
 802a576:	f7ff fe4b 	bl	802a210 <_Bfree>
 802a57a:	4646      	mov	r6, r8
 802a57c:	106d      	asrs	r5, r5, #1
 802a57e:	d00b      	beq.n	802a598 <__pow5mult+0xa0>
 802a580:	6820      	ldr	r0, [r4, #0]
 802a582:	b938      	cbnz	r0, 802a594 <__pow5mult+0x9c>
 802a584:	4622      	mov	r2, r4
 802a586:	4621      	mov	r1, r4
 802a588:	4638      	mov	r0, r7
 802a58a:	f7ff ff0b 	bl	802a3a4 <__multiply>
 802a58e:	6020      	str	r0, [r4, #0]
 802a590:	f8c0 9000 	str.w	r9, [r0]
 802a594:	4604      	mov	r4, r0
 802a596:	e7e4      	b.n	802a562 <__pow5mult+0x6a>
 802a598:	4630      	mov	r0, r6
 802a59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a59e:	bf00      	nop
 802a5a0:	08031ae0 	.word	0x08031ae0
 802a5a4:	08031a05 	.word	0x08031a05
 802a5a8:	08031a85 	.word	0x08031a85

0802a5ac <__lshift>:
 802a5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a5b0:	460c      	mov	r4, r1
 802a5b2:	6849      	ldr	r1, [r1, #4]
 802a5b4:	6923      	ldr	r3, [r4, #16]
 802a5b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802a5ba:	68a3      	ldr	r3, [r4, #8]
 802a5bc:	4607      	mov	r7, r0
 802a5be:	4691      	mov	r9, r2
 802a5c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802a5c4:	f108 0601 	add.w	r6, r8, #1
 802a5c8:	42b3      	cmp	r3, r6
 802a5ca:	db0b      	blt.n	802a5e4 <__lshift+0x38>
 802a5cc:	4638      	mov	r0, r7
 802a5ce:	f7ff fddf 	bl	802a190 <_Balloc>
 802a5d2:	4605      	mov	r5, r0
 802a5d4:	b948      	cbnz	r0, 802a5ea <__lshift+0x3e>
 802a5d6:	4602      	mov	r2, r0
 802a5d8:	4b28      	ldr	r3, [pc, #160]	@ (802a67c <__lshift+0xd0>)
 802a5da:	4829      	ldr	r0, [pc, #164]	@ (802a680 <__lshift+0xd4>)
 802a5dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802a5e0:	f7fd fefc 	bl	80283dc <__assert_func>
 802a5e4:	3101      	adds	r1, #1
 802a5e6:	005b      	lsls	r3, r3, #1
 802a5e8:	e7ee      	b.n	802a5c8 <__lshift+0x1c>
 802a5ea:	2300      	movs	r3, #0
 802a5ec:	f100 0114 	add.w	r1, r0, #20
 802a5f0:	f100 0210 	add.w	r2, r0, #16
 802a5f4:	4618      	mov	r0, r3
 802a5f6:	4553      	cmp	r3, sl
 802a5f8:	db33      	blt.n	802a662 <__lshift+0xb6>
 802a5fa:	6920      	ldr	r0, [r4, #16]
 802a5fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802a600:	f104 0314 	add.w	r3, r4, #20
 802a604:	f019 091f 	ands.w	r9, r9, #31
 802a608:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802a60c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802a610:	d02b      	beq.n	802a66a <__lshift+0xbe>
 802a612:	f1c9 0e20 	rsb	lr, r9, #32
 802a616:	468a      	mov	sl, r1
 802a618:	2200      	movs	r2, #0
 802a61a:	6818      	ldr	r0, [r3, #0]
 802a61c:	fa00 f009 	lsl.w	r0, r0, r9
 802a620:	4310      	orrs	r0, r2
 802a622:	f84a 0b04 	str.w	r0, [sl], #4
 802a626:	f853 2b04 	ldr.w	r2, [r3], #4
 802a62a:	459c      	cmp	ip, r3
 802a62c:	fa22 f20e 	lsr.w	r2, r2, lr
 802a630:	d8f3      	bhi.n	802a61a <__lshift+0x6e>
 802a632:	ebac 0304 	sub.w	r3, ip, r4
 802a636:	3b15      	subs	r3, #21
 802a638:	f023 0303 	bic.w	r3, r3, #3
 802a63c:	3304      	adds	r3, #4
 802a63e:	f104 0015 	add.w	r0, r4, #21
 802a642:	4584      	cmp	ip, r0
 802a644:	bf38      	it	cc
 802a646:	2304      	movcc	r3, #4
 802a648:	50ca      	str	r2, [r1, r3]
 802a64a:	b10a      	cbz	r2, 802a650 <__lshift+0xa4>
 802a64c:	f108 0602 	add.w	r6, r8, #2
 802a650:	3e01      	subs	r6, #1
 802a652:	4638      	mov	r0, r7
 802a654:	612e      	str	r6, [r5, #16]
 802a656:	4621      	mov	r1, r4
 802a658:	f7ff fdda 	bl	802a210 <_Bfree>
 802a65c:	4628      	mov	r0, r5
 802a65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a662:	f842 0f04 	str.w	r0, [r2, #4]!
 802a666:	3301      	adds	r3, #1
 802a668:	e7c5      	b.n	802a5f6 <__lshift+0x4a>
 802a66a:	3904      	subs	r1, #4
 802a66c:	f853 2b04 	ldr.w	r2, [r3], #4
 802a670:	f841 2f04 	str.w	r2, [r1, #4]!
 802a674:	459c      	cmp	ip, r3
 802a676:	d8f9      	bhi.n	802a66c <__lshift+0xc0>
 802a678:	e7ea      	b.n	802a650 <__lshift+0xa4>
 802a67a:	bf00      	nop
 802a67c:	08031a74 	.word	0x08031a74
 802a680:	08031a85 	.word	0x08031a85

0802a684 <__mcmp>:
 802a684:	690a      	ldr	r2, [r1, #16]
 802a686:	4603      	mov	r3, r0
 802a688:	6900      	ldr	r0, [r0, #16]
 802a68a:	1a80      	subs	r0, r0, r2
 802a68c:	b530      	push	{r4, r5, lr}
 802a68e:	d10e      	bne.n	802a6ae <__mcmp+0x2a>
 802a690:	3314      	adds	r3, #20
 802a692:	3114      	adds	r1, #20
 802a694:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802a698:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802a69c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802a6a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802a6a4:	4295      	cmp	r5, r2
 802a6a6:	d003      	beq.n	802a6b0 <__mcmp+0x2c>
 802a6a8:	d205      	bcs.n	802a6b6 <__mcmp+0x32>
 802a6aa:	f04f 30ff 	mov.w	r0, #4294967295
 802a6ae:	bd30      	pop	{r4, r5, pc}
 802a6b0:	42a3      	cmp	r3, r4
 802a6b2:	d3f3      	bcc.n	802a69c <__mcmp+0x18>
 802a6b4:	e7fb      	b.n	802a6ae <__mcmp+0x2a>
 802a6b6:	2001      	movs	r0, #1
 802a6b8:	e7f9      	b.n	802a6ae <__mcmp+0x2a>
	...

0802a6bc <__mdiff>:
 802a6bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a6c0:	4689      	mov	r9, r1
 802a6c2:	4606      	mov	r6, r0
 802a6c4:	4611      	mov	r1, r2
 802a6c6:	4648      	mov	r0, r9
 802a6c8:	4614      	mov	r4, r2
 802a6ca:	f7ff ffdb 	bl	802a684 <__mcmp>
 802a6ce:	1e05      	subs	r5, r0, #0
 802a6d0:	d112      	bne.n	802a6f8 <__mdiff+0x3c>
 802a6d2:	4629      	mov	r1, r5
 802a6d4:	4630      	mov	r0, r6
 802a6d6:	f7ff fd5b 	bl	802a190 <_Balloc>
 802a6da:	4602      	mov	r2, r0
 802a6dc:	b928      	cbnz	r0, 802a6ea <__mdiff+0x2e>
 802a6de:	4b3f      	ldr	r3, [pc, #252]	@ (802a7dc <__mdiff+0x120>)
 802a6e0:	f240 2137 	movw	r1, #567	@ 0x237
 802a6e4:	483e      	ldr	r0, [pc, #248]	@ (802a7e0 <__mdiff+0x124>)
 802a6e6:	f7fd fe79 	bl	80283dc <__assert_func>
 802a6ea:	2301      	movs	r3, #1
 802a6ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802a6f0:	4610      	mov	r0, r2
 802a6f2:	b003      	add	sp, #12
 802a6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a6f8:	bfbc      	itt	lt
 802a6fa:	464b      	movlt	r3, r9
 802a6fc:	46a1      	movlt	r9, r4
 802a6fe:	4630      	mov	r0, r6
 802a700:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802a704:	bfba      	itte	lt
 802a706:	461c      	movlt	r4, r3
 802a708:	2501      	movlt	r5, #1
 802a70a:	2500      	movge	r5, #0
 802a70c:	f7ff fd40 	bl	802a190 <_Balloc>
 802a710:	4602      	mov	r2, r0
 802a712:	b918      	cbnz	r0, 802a71c <__mdiff+0x60>
 802a714:	4b31      	ldr	r3, [pc, #196]	@ (802a7dc <__mdiff+0x120>)
 802a716:	f240 2145 	movw	r1, #581	@ 0x245
 802a71a:	e7e3      	b.n	802a6e4 <__mdiff+0x28>
 802a71c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802a720:	6926      	ldr	r6, [r4, #16]
 802a722:	60c5      	str	r5, [r0, #12]
 802a724:	f109 0310 	add.w	r3, r9, #16
 802a728:	f109 0514 	add.w	r5, r9, #20
 802a72c:	f104 0e14 	add.w	lr, r4, #20
 802a730:	f100 0b14 	add.w	fp, r0, #20
 802a734:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802a738:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802a73c:	9301      	str	r3, [sp, #4]
 802a73e:	46d9      	mov	r9, fp
 802a740:	f04f 0c00 	mov.w	ip, #0
 802a744:	9b01      	ldr	r3, [sp, #4]
 802a746:	f85e 0b04 	ldr.w	r0, [lr], #4
 802a74a:	f853 af04 	ldr.w	sl, [r3, #4]!
 802a74e:	9301      	str	r3, [sp, #4]
 802a750:	fa1f f38a 	uxth.w	r3, sl
 802a754:	4619      	mov	r1, r3
 802a756:	b283      	uxth	r3, r0
 802a758:	1acb      	subs	r3, r1, r3
 802a75a:	0c00      	lsrs	r0, r0, #16
 802a75c:	4463      	add	r3, ip
 802a75e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802a762:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802a766:	b29b      	uxth	r3, r3
 802a768:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802a76c:	4576      	cmp	r6, lr
 802a76e:	f849 3b04 	str.w	r3, [r9], #4
 802a772:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802a776:	d8e5      	bhi.n	802a744 <__mdiff+0x88>
 802a778:	1b33      	subs	r3, r6, r4
 802a77a:	3b15      	subs	r3, #21
 802a77c:	f023 0303 	bic.w	r3, r3, #3
 802a780:	3415      	adds	r4, #21
 802a782:	3304      	adds	r3, #4
 802a784:	42a6      	cmp	r6, r4
 802a786:	bf38      	it	cc
 802a788:	2304      	movcc	r3, #4
 802a78a:	441d      	add	r5, r3
 802a78c:	445b      	add	r3, fp
 802a78e:	461e      	mov	r6, r3
 802a790:	462c      	mov	r4, r5
 802a792:	4544      	cmp	r4, r8
 802a794:	d30e      	bcc.n	802a7b4 <__mdiff+0xf8>
 802a796:	f108 0103 	add.w	r1, r8, #3
 802a79a:	1b49      	subs	r1, r1, r5
 802a79c:	f021 0103 	bic.w	r1, r1, #3
 802a7a0:	3d03      	subs	r5, #3
 802a7a2:	45a8      	cmp	r8, r5
 802a7a4:	bf38      	it	cc
 802a7a6:	2100      	movcc	r1, #0
 802a7a8:	440b      	add	r3, r1
 802a7aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802a7ae:	b191      	cbz	r1, 802a7d6 <__mdiff+0x11a>
 802a7b0:	6117      	str	r7, [r2, #16]
 802a7b2:	e79d      	b.n	802a6f0 <__mdiff+0x34>
 802a7b4:	f854 1b04 	ldr.w	r1, [r4], #4
 802a7b8:	46e6      	mov	lr, ip
 802a7ba:	0c08      	lsrs	r0, r1, #16
 802a7bc:	fa1c fc81 	uxtah	ip, ip, r1
 802a7c0:	4471      	add	r1, lr
 802a7c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802a7c6:	b289      	uxth	r1, r1
 802a7c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802a7cc:	f846 1b04 	str.w	r1, [r6], #4
 802a7d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802a7d4:	e7dd      	b.n	802a792 <__mdiff+0xd6>
 802a7d6:	3f01      	subs	r7, #1
 802a7d8:	e7e7      	b.n	802a7aa <__mdiff+0xee>
 802a7da:	bf00      	nop
 802a7dc:	08031a74 	.word	0x08031a74
 802a7e0:	08031a85 	.word	0x08031a85

0802a7e4 <__d2b>:
 802a7e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802a7e8:	460f      	mov	r7, r1
 802a7ea:	2101      	movs	r1, #1
 802a7ec:	ec59 8b10 	vmov	r8, r9, d0
 802a7f0:	4616      	mov	r6, r2
 802a7f2:	f7ff fccd 	bl	802a190 <_Balloc>
 802a7f6:	4604      	mov	r4, r0
 802a7f8:	b930      	cbnz	r0, 802a808 <__d2b+0x24>
 802a7fa:	4602      	mov	r2, r0
 802a7fc:	4b23      	ldr	r3, [pc, #140]	@ (802a88c <__d2b+0xa8>)
 802a7fe:	4824      	ldr	r0, [pc, #144]	@ (802a890 <__d2b+0xac>)
 802a800:	f240 310f 	movw	r1, #783	@ 0x30f
 802a804:	f7fd fdea 	bl	80283dc <__assert_func>
 802a808:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802a80c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802a810:	b10d      	cbz	r5, 802a816 <__d2b+0x32>
 802a812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802a816:	9301      	str	r3, [sp, #4]
 802a818:	f1b8 0300 	subs.w	r3, r8, #0
 802a81c:	d023      	beq.n	802a866 <__d2b+0x82>
 802a81e:	4668      	mov	r0, sp
 802a820:	9300      	str	r3, [sp, #0]
 802a822:	f7ff fd7c 	bl	802a31e <__lo0bits>
 802a826:	e9dd 1200 	ldrd	r1, r2, [sp]
 802a82a:	b1d0      	cbz	r0, 802a862 <__d2b+0x7e>
 802a82c:	f1c0 0320 	rsb	r3, r0, #32
 802a830:	fa02 f303 	lsl.w	r3, r2, r3
 802a834:	430b      	orrs	r3, r1
 802a836:	40c2      	lsrs	r2, r0
 802a838:	6163      	str	r3, [r4, #20]
 802a83a:	9201      	str	r2, [sp, #4]
 802a83c:	9b01      	ldr	r3, [sp, #4]
 802a83e:	61a3      	str	r3, [r4, #24]
 802a840:	2b00      	cmp	r3, #0
 802a842:	bf0c      	ite	eq
 802a844:	2201      	moveq	r2, #1
 802a846:	2202      	movne	r2, #2
 802a848:	6122      	str	r2, [r4, #16]
 802a84a:	b1a5      	cbz	r5, 802a876 <__d2b+0x92>
 802a84c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802a850:	4405      	add	r5, r0
 802a852:	603d      	str	r5, [r7, #0]
 802a854:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802a858:	6030      	str	r0, [r6, #0]
 802a85a:	4620      	mov	r0, r4
 802a85c:	b003      	add	sp, #12
 802a85e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802a862:	6161      	str	r1, [r4, #20]
 802a864:	e7ea      	b.n	802a83c <__d2b+0x58>
 802a866:	a801      	add	r0, sp, #4
 802a868:	f7ff fd59 	bl	802a31e <__lo0bits>
 802a86c:	9b01      	ldr	r3, [sp, #4]
 802a86e:	6163      	str	r3, [r4, #20]
 802a870:	3020      	adds	r0, #32
 802a872:	2201      	movs	r2, #1
 802a874:	e7e8      	b.n	802a848 <__d2b+0x64>
 802a876:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802a87a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802a87e:	6038      	str	r0, [r7, #0]
 802a880:	6918      	ldr	r0, [r3, #16]
 802a882:	f7ff fd2d 	bl	802a2e0 <__hi0bits>
 802a886:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802a88a:	e7e5      	b.n	802a858 <__d2b+0x74>
 802a88c:	08031a74 	.word	0x08031a74
 802a890:	08031a85 	.word	0x08031a85

0802a894 <_sungetc_r>:
 802a894:	b538      	push	{r3, r4, r5, lr}
 802a896:	1c4b      	adds	r3, r1, #1
 802a898:	4614      	mov	r4, r2
 802a89a:	d103      	bne.n	802a8a4 <_sungetc_r+0x10>
 802a89c:	f04f 35ff 	mov.w	r5, #4294967295
 802a8a0:	4628      	mov	r0, r5
 802a8a2:	bd38      	pop	{r3, r4, r5, pc}
 802a8a4:	8993      	ldrh	r3, [r2, #12]
 802a8a6:	f023 0320 	bic.w	r3, r3, #32
 802a8aa:	8193      	strh	r3, [r2, #12]
 802a8ac:	6853      	ldr	r3, [r2, #4]
 802a8ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 802a8b0:	b2cd      	uxtb	r5, r1
 802a8b2:	b18a      	cbz	r2, 802a8d8 <_sungetc_r+0x44>
 802a8b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 802a8b6:	429a      	cmp	r2, r3
 802a8b8:	dd08      	ble.n	802a8cc <_sungetc_r+0x38>
 802a8ba:	6823      	ldr	r3, [r4, #0]
 802a8bc:	1e5a      	subs	r2, r3, #1
 802a8be:	6022      	str	r2, [r4, #0]
 802a8c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 802a8c4:	6863      	ldr	r3, [r4, #4]
 802a8c6:	3301      	adds	r3, #1
 802a8c8:	6063      	str	r3, [r4, #4]
 802a8ca:	e7e9      	b.n	802a8a0 <_sungetc_r+0xc>
 802a8cc:	4621      	mov	r1, r4
 802a8ce:	f000 fd84 	bl	802b3da <__submore>
 802a8d2:	2800      	cmp	r0, #0
 802a8d4:	d0f1      	beq.n	802a8ba <_sungetc_r+0x26>
 802a8d6:	e7e1      	b.n	802a89c <_sungetc_r+0x8>
 802a8d8:	6921      	ldr	r1, [r4, #16]
 802a8da:	6822      	ldr	r2, [r4, #0]
 802a8dc:	b141      	cbz	r1, 802a8f0 <_sungetc_r+0x5c>
 802a8de:	4291      	cmp	r1, r2
 802a8e0:	d206      	bcs.n	802a8f0 <_sungetc_r+0x5c>
 802a8e2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 802a8e6:	42a9      	cmp	r1, r5
 802a8e8:	d102      	bne.n	802a8f0 <_sungetc_r+0x5c>
 802a8ea:	3a01      	subs	r2, #1
 802a8ec:	6022      	str	r2, [r4, #0]
 802a8ee:	e7ea      	b.n	802a8c6 <_sungetc_r+0x32>
 802a8f0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 802a8f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802a8f8:	6363      	str	r3, [r4, #52]	@ 0x34
 802a8fa:	2303      	movs	r3, #3
 802a8fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 802a8fe:	4623      	mov	r3, r4
 802a900:	f803 5f46 	strb.w	r5, [r3, #70]!
 802a904:	6023      	str	r3, [r4, #0]
 802a906:	2301      	movs	r3, #1
 802a908:	e7de      	b.n	802a8c8 <_sungetc_r+0x34>

0802a90a <__ssrefill_r>:
 802a90a:	b510      	push	{r4, lr}
 802a90c:	460c      	mov	r4, r1
 802a90e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 802a910:	b169      	cbz	r1, 802a92e <__ssrefill_r+0x24>
 802a912:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802a916:	4299      	cmp	r1, r3
 802a918:	d001      	beq.n	802a91e <__ssrefill_r+0x14>
 802a91a:	f7ff fb39 	bl	8029f90 <_free_r>
 802a91e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802a920:	6063      	str	r3, [r4, #4]
 802a922:	2000      	movs	r0, #0
 802a924:	6360      	str	r0, [r4, #52]	@ 0x34
 802a926:	b113      	cbz	r3, 802a92e <__ssrefill_r+0x24>
 802a928:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802a92a:	6023      	str	r3, [r4, #0]
 802a92c:	bd10      	pop	{r4, pc}
 802a92e:	6923      	ldr	r3, [r4, #16]
 802a930:	6023      	str	r3, [r4, #0]
 802a932:	2300      	movs	r3, #0
 802a934:	6063      	str	r3, [r4, #4]
 802a936:	89a3      	ldrh	r3, [r4, #12]
 802a938:	f043 0320 	orr.w	r3, r3, #32
 802a93c:	81a3      	strh	r3, [r4, #12]
 802a93e:	f04f 30ff 	mov.w	r0, #4294967295
 802a942:	e7f3      	b.n	802a92c <__ssrefill_r+0x22>

0802a944 <__ssvfiscanf_r>:
 802a944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a948:	460c      	mov	r4, r1
 802a94a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 802a94e:	2100      	movs	r1, #0
 802a950:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 802a954:	49a5      	ldr	r1, [pc, #660]	@ (802abec <__ssvfiscanf_r+0x2a8>)
 802a956:	91a0      	str	r1, [sp, #640]	@ 0x280
 802a958:	f10d 0804 	add.w	r8, sp, #4
 802a95c:	49a4      	ldr	r1, [pc, #656]	@ (802abf0 <__ssvfiscanf_r+0x2ac>)
 802a95e:	4fa5      	ldr	r7, [pc, #660]	@ (802abf4 <__ssvfiscanf_r+0x2b0>)
 802a960:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 802a964:	4606      	mov	r6, r0
 802a966:	91a1      	str	r1, [sp, #644]	@ 0x284
 802a968:	9300      	str	r3, [sp, #0]
 802a96a:	7813      	ldrb	r3, [r2, #0]
 802a96c:	2b00      	cmp	r3, #0
 802a96e:	f000 8158 	beq.w	802ac22 <__ssvfiscanf_r+0x2de>
 802a972:	5cf9      	ldrb	r1, [r7, r3]
 802a974:	f011 0108 	ands.w	r1, r1, #8
 802a978:	f102 0501 	add.w	r5, r2, #1
 802a97c:	d019      	beq.n	802a9b2 <__ssvfiscanf_r+0x6e>
 802a97e:	6863      	ldr	r3, [r4, #4]
 802a980:	2b00      	cmp	r3, #0
 802a982:	dd0f      	ble.n	802a9a4 <__ssvfiscanf_r+0x60>
 802a984:	6823      	ldr	r3, [r4, #0]
 802a986:	781a      	ldrb	r2, [r3, #0]
 802a988:	5cba      	ldrb	r2, [r7, r2]
 802a98a:	0712      	lsls	r2, r2, #28
 802a98c:	d401      	bmi.n	802a992 <__ssvfiscanf_r+0x4e>
 802a98e:	462a      	mov	r2, r5
 802a990:	e7eb      	b.n	802a96a <__ssvfiscanf_r+0x26>
 802a992:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802a994:	3201      	adds	r2, #1
 802a996:	9245      	str	r2, [sp, #276]	@ 0x114
 802a998:	6862      	ldr	r2, [r4, #4]
 802a99a:	3301      	adds	r3, #1
 802a99c:	3a01      	subs	r2, #1
 802a99e:	6062      	str	r2, [r4, #4]
 802a9a0:	6023      	str	r3, [r4, #0]
 802a9a2:	e7ec      	b.n	802a97e <__ssvfiscanf_r+0x3a>
 802a9a4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802a9a6:	4621      	mov	r1, r4
 802a9a8:	4630      	mov	r0, r6
 802a9aa:	4798      	blx	r3
 802a9ac:	2800      	cmp	r0, #0
 802a9ae:	d0e9      	beq.n	802a984 <__ssvfiscanf_r+0x40>
 802a9b0:	e7ed      	b.n	802a98e <__ssvfiscanf_r+0x4a>
 802a9b2:	2b25      	cmp	r3, #37	@ 0x25
 802a9b4:	d012      	beq.n	802a9dc <__ssvfiscanf_r+0x98>
 802a9b6:	4699      	mov	r9, r3
 802a9b8:	6863      	ldr	r3, [r4, #4]
 802a9ba:	2b00      	cmp	r3, #0
 802a9bc:	f340 8093 	ble.w	802aae6 <__ssvfiscanf_r+0x1a2>
 802a9c0:	6822      	ldr	r2, [r4, #0]
 802a9c2:	7813      	ldrb	r3, [r2, #0]
 802a9c4:	454b      	cmp	r3, r9
 802a9c6:	f040 812c 	bne.w	802ac22 <__ssvfiscanf_r+0x2de>
 802a9ca:	6863      	ldr	r3, [r4, #4]
 802a9cc:	3b01      	subs	r3, #1
 802a9ce:	6063      	str	r3, [r4, #4]
 802a9d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 802a9d2:	3201      	adds	r2, #1
 802a9d4:	3301      	adds	r3, #1
 802a9d6:	6022      	str	r2, [r4, #0]
 802a9d8:	9345      	str	r3, [sp, #276]	@ 0x114
 802a9da:	e7d8      	b.n	802a98e <__ssvfiscanf_r+0x4a>
 802a9dc:	9141      	str	r1, [sp, #260]	@ 0x104
 802a9de:	9143      	str	r1, [sp, #268]	@ 0x10c
 802a9e0:	7853      	ldrb	r3, [r2, #1]
 802a9e2:	2b2a      	cmp	r3, #42	@ 0x2a
 802a9e4:	bf02      	ittt	eq
 802a9e6:	2310      	moveq	r3, #16
 802a9e8:	1c95      	addeq	r5, r2, #2
 802a9ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 802a9ec:	220a      	movs	r2, #10
 802a9ee:	46a9      	mov	r9, r5
 802a9f0:	f819 1b01 	ldrb.w	r1, [r9], #1
 802a9f4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 802a9f8:	2b09      	cmp	r3, #9
 802a9fa:	d91e      	bls.n	802aa3a <__ssvfiscanf_r+0xf6>
 802a9fc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 802abf8 <__ssvfiscanf_r+0x2b4>
 802aa00:	2203      	movs	r2, #3
 802aa02:	4650      	mov	r0, sl
 802aa04:	f7d5 fbcc 	bl	80001a0 <memchr>
 802aa08:	b138      	cbz	r0, 802aa1a <__ssvfiscanf_r+0xd6>
 802aa0a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802aa0c:	eba0 000a 	sub.w	r0, r0, sl
 802aa10:	2301      	movs	r3, #1
 802aa12:	4083      	lsls	r3, r0
 802aa14:	4313      	orrs	r3, r2
 802aa16:	9341      	str	r3, [sp, #260]	@ 0x104
 802aa18:	464d      	mov	r5, r9
 802aa1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 802aa1e:	2b78      	cmp	r3, #120	@ 0x78
 802aa20:	d806      	bhi.n	802aa30 <__ssvfiscanf_r+0xec>
 802aa22:	2b57      	cmp	r3, #87	@ 0x57
 802aa24:	d810      	bhi.n	802aa48 <__ssvfiscanf_r+0x104>
 802aa26:	2b25      	cmp	r3, #37	@ 0x25
 802aa28:	d0c5      	beq.n	802a9b6 <__ssvfiscanf_r+0x72>
 802aa2a:	d857      	bhi.n	802aadc <__ssvfiscanf_r+0x198>
 802aa2c:	2b00      	cmp	r3, #0
 802aa2e:	d065      	beq.n	802aafc <__ssvfiscanf_r+0x1b8>
 802aa30:	2303      	movs	r3, #3
 802aa32:	9347      	str	r3, [sp, #284]	@ 0x11c
 802aa34:	230a      	movs	r3, #10
 802aa36:	9342      	str	r3, [sp, #264]	@ 0x108
 802aa38:	e078      	b.n	802ab2c <__ssvfiscanf_r+0x1e8>
 802aa3a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 802aa3c:	fb02 1103 	mla	r1, r2, r3, r1
 802aa40:	3930      	subs	r1, #48	@ 0x30
 802aa42:	9143      	str	r1, [sp, #268]	@ 0x10c
 802aa44:	464d      	mov	r5, r9
 802aa46:	e7d2      	b.n	802a9ee <__ssvfiscanf_r+0xaa>
 802aa48:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 802aa4c:	2a20      	cmp	r2, #32
 802aa4e:	d8ef      	bhi.n	802aa30 <__ssvfiscanf_r+0xec>
 802aa50:	a101      	add	r1, pc, #4	@ (adr r1, 802aa58 <__ssvfiscanf_r+0x114>)
 802aa52:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802aa56:	bf00      	nop
 802aa58:	0802ab0b 	.word	0x0802ab0b
 802aa5c:	0802aa31 	.word	0x0802aa31
 802aa60:	0802aa31 	.word	0x0802aa31
 802aa64:	0802ab65 	.word	0x0802ab65
 802aa68:	0802aa31 	.word	0x0802aa31
 802aa6c:	0802aa31 	.word	0x0802aa31
 802aa70:	0802aa31 	.word	0x0802aa31
 802aa74:	0802aa31 	.word	0x0802aa31
 802aa78:	0802aa31 	.word	0x0802aa31
 802aa7c:	0802aa31 	.word	0x0802aa31
 802aa80:	0802aa31 	.word	0x0802aa31
 802aa84:	0802ab7b 	.word	0x0802ab7b
 802aa88:	0802ab61 	.word	0x0802ab61
 802aa8c:	0802aae3 	.word	0x0802aae3
 802aa90:	0802aae3 	.word	0x0802aae3
 802aa94:	0802aae3 	.word	0x0802aae3
 802aa98:	0802aa31 	.word	0x0802aa31
 802aa9c:	0802ab1d 	.word	0x0802ab1d
 802aaa0:	0802aa31 	.word	0x0802aa31
 802aaa4:	0802aa31 	.word	0x0802aa31
 802aaa8:	0802aa31 	.word	0x0802aa31
 802aaac:	0802aa31 	.word	0x0802aa31
 802aab0:	0802ab8b 	.word	0x0802ab8b
 802aab4:	0802ab25 	.word	0x0802ab25
 802aab8:	0802ab03 	.word	0x0802ab03
 802aabc:	0802aa31 	.word	0x0802aa31
 802aac0:	0802aa31 	.word	0x0802aa31
 802aac4:	0802ab87 	.word	0x0802ab87
 802aac8:	0802aa31 	.word	0x0802aa31
 802aacc:	0802ab61 	.word	0x0802ab61
 802aad0:	0802aa31 	.word	0x0802aa31
 802aad4:	0802aa31 	.word	0x0802aa31
 802aad8:	0802ab0b 	.word	0x0802ab0b
 802aadc:	3b45      	subs	r3, #69	@ 0x45
 802aade:	2b02      	cmp	r3, #2
 802aae0:	d8a6      	bhi.n	802aa30 <__ssvfiscanf_r+0xec>
 802aae2:	2305      	movs	r3, #5
 802aae4:	e021      	b.n	802ab2a <__ssvfiscanf_r+0x1e6>
 802aae6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802aae8:	4621      	mov	r1, r4
 802aaea:	4630      	mov	r0, r6
 802aaec:	4798      	blx	r3
 802aaee:	2800      	cmp	r0, #0
 802aaf0:	f43f af66 	beq.w	802a9c0 <__ssvfiscanf_r+0x7c>
 802aaf4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 802aaf6:	2800      	cmp	r0, #0
 802aaf8:	f040 808b 	bne.w	802ac12 <__ssvfiscanf_r+0x2ce>
 802aafc:	f04f 30ff 	mov.w	r0, #4294967295
 802ab00:	e08b      	b.n	802ac1a <__ssvfiscanf_r+0x2d6>
 802ab02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802ab04:	f042 0220 	orr.w	r2, r2, #32
 802ab08:	9241      	str	r2, [sp, #260]	@ 0x104
 802ab0a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802ab0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802ab10:	9241      	str	r2, [sp, #260]	@ 0x104
 802ab12:	2210      	movs	r2, #16
 802ab14:	2b6e      	cmp	r3, #110	@ 0x6e
 802ab16:	9242      	str	r2, [sp, #264]	@ 0x108
 802ab18:	d902      	bls.n	802ab20 <__ssvfiscanf_r+0x1dc>
 802ab1a:	e005      	b.n	802ab28 <__ssvfiscanf_r+0x1e4>
 802ab1c:	2300      	movs	r3, #0
 802ab1e:	9342      	str	r3, [sp, #264]	@ 0x108
 802ab20:	2303      	movs	r3, #3
 802ab22:	e002      	b.n	802ab2a <__ssvfiscanf_r+0x1e6>
 802ab24:	2308      	movs	r3, #8
 802ab26:	9342      	str	r3, [sp, #264]	@ 0x108
 802ab28:	2304      	movs	r3, #4
 802ab2a:	9347      	str	r3, [sp, #284]	@ 0x11c
 802ab2c:	6863      	ldr	r3, [r4, #4]
 802ab2e:	2b00      	cmp	r3, #0
 802ab30:	dd39      	ble.n	802aba6 <__ssvfiscanf_r+0x262>
 802ab32:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802ab34:	0659      	lsls	r1, r3, #25
 802ab36:	d404      	bmi.n	802ab42 <__ssvfiscanf_r+0x1fe>
 802ab38:	6823      	ldr	r3, [r4, #0]
 802ab3a:	781a      	ldrb	r2, [r3, #0]
 802ab3c:	5cba      	ldrb	r2, [r7, r2]
 802ab3e:	0712      	lsls	r2, r2, #28
 802ab40:	d438      	bmi.n	802abb4 <__ssvfiscanf_r+0x270>
 802ab42:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 802ab44:	2b02      	cmp	r3, #2
 802ab46:	dc47      	bgt.n	802abd8 <__ssvfiscanf_r+0x294>
 802ab48:	466b      	mov	r3, sp
 802ab4a:	4622      	mov	r2, r4
 802ab4c:	a941      	add	r1, sp, #260	@ 0x104
 802ab4e:	4630      	mov	r0, r6
 802ab50:	f000 f9ae 	bl	802aeb0 <_scanf_chars>
 802ab54:	2801      	cmp	r0, #1
 802ab56:	d064      	beq.n	802ac22 <__ssvfiscanf_r+0x2de>
 802ab58:	2802      	cmp	r0, #2
 802ab5a:	f47f af18 	bne.w	802a98e <__ssvfiscanf_r+0x4a>
 802ab5e:	e7c9      	b.n	802aaf4 <__ssvfiscanf_r+0x1b0>
 802ab60:	220a      	movs	r2, #10
 802ab62:	e7d7      	b.n	802ab14 <__ssvfiscanf_r+0x1d0>
 802ab64:	4629      	mov	r1, r5
 802ab66:	4640      	mov	r0, r8
 802ab68:	f000 fbfe 	bl	802b368 <__sccl>
 802ab6c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802ab6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ab72:	9341      	str	r3, [sp, #260]	@ 0x104
 802ab74:	4605      	mov	r5, r0
 802ab76:	2301      	movs	r3, #1
 802ab78:	e7d7      	b.n	802ab2a <__ssvfiscanf_r+0x1e6>
 802ab7a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802ab7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802ab80:	9341      	str	r3, [sp, #260]	@ 0x104
 802ab82:	2300      	movs	r3, #0
 802ab84:	e7d1      	b.n	802ab2a <__ssvfiscanf_r+0x1e6>
 802ab86:	2302      	movs	r3, #2
 802ab88:	e7cf      	b.n	802ab2a <__ssvfiscanf_r+0x1e6>
 802ab8a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 802ab8c:	06c3      	lsls	r3, r0, #27
 802ab8e:	f53f aefe 	bmi.w	802a98e <__ssvfiscanf_r+0x4a>
 802ab92:	9b00      	ldr	r3, [sp, #0]
 802ab94:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802ab96:	1d19      	adds	r1, r3, #4
 802ab98:	9100      	str	r1, [sp, #0]
 802ab9a:	681b      	ldr	r3, [r3, #0]
 802ab9c:	07c0      	lsls	r0, r0, #31
 802ab9e:	bf4c      	ite	mi
 802aba0:	801a      	strhmi	r2, [r3, #0]
 802aba2:	601a      	strpl	r2, [r3, #0]
 802aba4:	e6f3      	b.n	802a98e <__ssvfiscanf_r+0x4a>
 802aba6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802aba8:	4621      	mov	r1, r4
 802abaa:	4630      	mov	r0, r6
 802abac:	4798      	blx	r3
 802abae:	2800      	cmp	r0, #0
 802abb0:	d0bf      	beq.n	802ab32 <__ssvfiscanf_r+0x1ee>
 802abb2:	e79f      	b.n	802aaf4 <__ssvfiscanf_r+0x1b0>
 802abb4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802abb6:	3201      	adds	r2, #1
 802abb8:	9245      	str	r2, [sp, #276]	@ 0x114
 802abba:	6862      	ldr	r2, [r4, #4]
 802abbc:	3a01      	subs	r2, #1
 802abbe:	2a00      	cmp	r2, #0
 802abc0:	6062      	str	r2, [r4, #4]
 802abc2:	dd02      	ble.n	802abca <__ssvfiscanf_r+0x286>
 802abc4:	3301      	adds	r3, #1
 802abc6:	6023      	str	r3, [r4, #0]
 802abc8:	e7b6      	b.n	802ab38 <__ssvfiscanf_r+0x1f4>
 802abca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802abcc:	4621      	mov	r1, r4
 802abce:	4630      	mov	r0, r6
 802abd0:	4798      	blx	r3
 802abd2:	2800      	cmp	r0, #0
 802abd4:	d0b0      	beq.n	802ab38 <__ssvfiscanf_r+0x1f4>
 802abd6:	e78d      	b.n	802aaf4 <__ssvfiscanf_r+0x1b0>
 802abd8:	2b04      	cmp	r3, #4
 802abda:	dc0f      	bgt.n	802abfc <__ssvfiscanf_r+0x2b8>
 802abdc:	466b      	mov	r3, sp
 802abde:	4622      	mov	r2, r4
 802abe0:	a941      	add	r1, sp, #260	@ 0x104
 802abe2:	4630      	mov	r0, r6
 802abe4:	f000 f9be 	bl	802af64 <_scanf_i>
 802abe8:	e7b4      	b.n	802ab54 <__ssvfiscanf_r+0x210>
 802abea:	bf00      	nop
 802abec:	0802a895 	.word	0x0802a895
 802abf0:	0802a90b 	.word	0x0802a90b
 802abf4:	08031c17 	.word	0x08031c17
 802abf8:	08031be0 	.word	0x08031be0
 802abfc:	4b0a      	ldr	r3, [pc, #40]	@ (802ac28 <__ssvfiscanf_r+0x2e4>)
 802abfe:	2b00      	cmp	r3, #0
 802ac00:	f43f aec5 	beq.w	802a98e <__ssvfiscanf_r+0x4a>
 802ac04:	466b      	mov	r3, sp
 802ac06:	4622      	mov	r2, r4
 802ac08:	a941      	add	r1, sp, #260	@ 0x104
 802ac0a:	4630      	mov	r0, r6
 802ac0c:	f3af 8000 	nop.w
 802ac10:	e7a0      	b.n	802ab54 <__ssvfiscanf_r+0x210>
 802ac12:	89a3      	ldrh	r3, [r4, #12]
 802ac14:	065b      	lsls	r3, r3, #25
 802ac16:	f53f af71 	bmi.w	802aafc <__ssvfiscanf_r+0x1b8>
 802ac1a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 802ac1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ac22:	9844      	ldr	r0, [sp, #272]	@ 0x110
 802ac24:	e7f9      	b.n	802ac1a <__ssvfiscanf_r+0x2d6>
 802ac26:	bf00      	nop
 802ac28:	00000000 	.word	0x00000000

0802ac2c <__sfputc_r>:
 802ac2c:	6893      	ldr	r3, [r2, #8]
 802ac2e:	3b01      	subs	r3, #1
 802ac30:	2b00      	cmp	r3, #0
 802ac32:	b410      	push	{r4}
 802ac34:	6093      	str	r3, [r2, #8]
 802ac36:	da08      	bge.n	802ac4a <__sfputc_r+0x1e>
 802ac38:	6994      	ldr	r4, [r2, #24]
 802ac3a:	42a3      	cmp	r3, r4
 802ac3c:	db01      	blt.n	802ac42 <__sfputc_r+0x16>
 802ac3e:	290a      	cmp	r1, #10
 802ac40:	d103      	bne.n	802ac4a <__sfputc_r+0x1e>
 802ac42:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ac46:	f7fe b9f2 	b.w	802902e <__swbuf_r>
 802ac4a:	6813      	ldr	r3, [r2, #0]
 802ac4c:	1c58      	adds	r0, r3, #1
 802ac4e:	6010      	str	r0, [r2, #0]
 802ac50:	7019      	strb	r1, [r3, #0]
 802ac52:	4608      	mov	r0, r1
 802ac54:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ac58:	4770      	bx	lr

0802ac5a <__sfputs_r>:
 802ac5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ac5c:	4606      	mov	r6, r0
 802ac5e:	460f      	mov	r7, r1
 802ac60:	4614      	mov	r4, r2
 802ac62:	18d5      	adds	r5, r2, r3
 802ac64:	42ac      	cmp	r4, r5
 802ac66:	d101      	bne.n	802ac6c <__sfputs_r+0x12>
 802ac68:	2000      	movs	r0, #0
 802ac6a:	e007      	b.n	802ac7c <__sfputs_r+0x22>
 802ac6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ac70:	463a      	mov	r2, r7
 802ac72:	4630      	mov	r0, r6
 802ac74:	f7ff ffda 	bl	802ac2c <__sfputc_r>
 802ac78:	1c43      	adds	r3, r0, #1
 802ac7a:	d1f3      	bne.n	802ac64 <__sfputs_r+0xa>
 802ac7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802ac80 <_vfiprintf_r>:
 802ac80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ac84:	460d      	mov	r5, r1
 802ac86:	b09d      	sub	sp, #116	@ 0x74
 802ac88:	4614      	mov	r4, r2
 802ac8a:	4698      	mov	r8, r3
 802ac8c:	4606      	mov	r6, r0
 802ac8e:	b118      	cbz	r0, 802ac98 <_vfiprintf_r+0x18>
 802ac90:	6a03      	ldr	r3, [r0, #32]
 802ac92:	b90b      	cbnz	r3, 802ac98 <_vfiprintf_r+0x18>
 802ac94:	f7fe f8a4 	bl	8028de0 <__sinit>
 802ac98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802ac9a:	07d9      	lsls	r1, r3, #31
 802ac9c:	d405      	bmi.n	802acaa <_vfiprintf_r+0x2a>
 802ac9e:	89ab      	ldrh	r3, [r5, #12]
 802aca0:	059a      	lsls	r2, r3, #22
 802aca2:	d402      	bmi.n	802acaa <_vfiprintf_r+0x2a>
 802aca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802aca6:	f7fe fb10 	bl	80292ca <__retarget_lock_acquire_recursive>
 802acaa:	89ab      	ldrh	r3, [r5, #12]
 802acac:	071b      	lsls	r3, r3, #28
 802acae:	d501      	bpl.n	802acb4 <_vfiprintf_r+0x34>
 802acb0:	692b      	ldr	r3, [r5, #16]
 802acb2:	b99b      	cbnz	r3, 802acdc <_vfiprintf_r+0x5c>
 802acb4:	4629      	mov	r1, r5
 802acb6:	4630      	mov	r0, r6
 802acb8:	f7fe f9f8 	bl	80290ac <__swsetup_r>
 802acbc:	b170      	cbz	r0, 802acdc <_vfiprintf_r+0x5c>
 802acbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802acc0:	07dc      	lsls	r4, r3, #31
 802acc2:	d504      	bpl.n	802acce <_vfiprintf_r+0x4e>
 802acc4:	f04f 30ff 	mov.w	r0, #4294967295
 802acc8:	b01d      	add	sp, #116	@ 0x74
 802acca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802acce:	89ab      	ldrh	r3, [r5, #12]
 802acd0:	0598      	lsls	r0, r3, #22
 802acd2:	d4f7      	bmi.n	802acc4 <_vfiprintf_r+0x44>
 802acd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802acd6:	f7fe faf9 	bl	80292cc <__retarget_lock_release_recursive>
 802acda:	e7f3      	b.n	802acc4 <_vfiprintf_r+0x44>
 802acdc:	2300      	movs	r3, #0
 802acde:	9309      	str	r3, [sp, #36]	@ 0x24
 802ace0:	2320      	movs	r3, #32
 802ace2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802ace6:	f8cd 800c 	str.w	r8, [sp, #12]
 802acea:	2330      	movs	r3, #48	@ 0x30
 802acec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802ae9c <_vfiprintf_r+0x21c>
 802acf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802acf4:	f04f 0901 	mov.w	r9, #1
 802acf8:	4623      	mov	r3, r4
 802acfa:	469a      	mov	sl, r3
 802acfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ad00:	b10a      	cbz	r2, 802ad06 <_vfiprintf_r+0x86>
 802ad02:	2a25      	cmp	r2, #37	@ 0x25
 802ad04:	d1f9      	bne.n	802acfa <_vfiprintf_r+0x7a>
 802ad06:	ebba 0b04 	subs.w	fp, sl, r4
 802ad0a:	d00b      	beq.n	802ad24 <_vfiprintf_r+0xa4>
 802ad0c:	465b      	mov	r3, fp
 802ad0e:	4622      	mov	r2, r4
 802ad10:	4629      	mov	r1, r5
 802ad12:	4630      	mov	r0, r6
 802ad14:	f7ff ffa1 	bl	802ac5a <__sfputs_r>
 802ad18:	3001      	adds	r0, #1
 802ad1a:	f000 80a7 	beq.w	802ae6c <_vfiprintf_r+0x1ec>
 802ad1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802ad20:	445a      	add	r2, fp
 802ad22:	9209      	str	r2, [sp, #36]	@ 0x24
 802ad24:	f89a 3000 	ldrb.w	r3, [sl]
 802ad28:	2b00      	cmp	r3, #0
 802ad2a:	f000 809f 	beq.w	802ae6c <_vfiprintf_r+0x1ec>
 802ad2e:	2300      	movs	r3, #0
 802ad30:	f04f 32ff 	mov.w	r2, #4294967295
 802ad34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ad38:	f10a 0a01 	add.w	sl, sl, #1
 802ad3c:	9304      	str	r3, [sp, #16]
 802ad3e:	9307      	str	r3, [sp, #28]
 802ad40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802ad44:	931a      	str	r3, [sp, #104]	@ 0x68
 802ad46:	4654      	mov	r4, sl
 802ad48:	2205      	movs	r2, #5
 802ad4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ad4e:	4853      	ldr	r0, [pc, #332]	@ (802ae9c <_vfiprintf_r+0x21c>)
 802ad50:	f7d5 fa26 	bl	80001a0 <memchr>
 802ad54:	9a04      	ldr	r2, [sp, #16]
 802ad56:	b9d8      	cbnz	r0, 802ad90 <_vfiprintf_r+0x110>
 802ad58:	06d1      	lsls	r1, r2, #27
 802ad5a:	bf44      	itt	mi
 802ad5c:	2320      	movmi	r3, #32
 802ad5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802ad62:	0713      	lsls	r3, r2, #28
 802ad64:	bf44      	itt	mi
 802ad66:	232b      	movmi	r3, #43	@ 0x2b
 802ad68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802ad6c:	f89a 3000 	ldrb.w	r3, [sl]
 802ad70:	2b2a      	cmp	r3, #42	@ 0x2a
 802ad72:	d015      	beq.n	802ada0 <_vfiprintf_r+0x120>
 802ad74:	9a07      	ldr	r2, [sp, #28]
 802ad76:	4654      	mov	r4, sl
 802ad78:	2000      	movs	r0, #0
 802ad7a:	f04f 0c0a 	mov.w	ip, #10
 802ad7e:	4621      	mov	r1, r4
 802ad80:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ad84:	3b30      	subs	r3, #48	@ 0x30
 802ad86:	2b09      	cmp	r3, #9
 802ad88:	d94b      	bls.n	802ae22 <_vfiprintf_r+0x1a2>
 802ad8a:	b1b0      	cbz	r0, 802adba <_vfiprintf_r+0x13a>
 802ad8c:	9207      	str	r2, [sp, #28]
 802ad8e:	e014      	b.n	802adba <_vfiprintf_r+0x13a>
 802ad90:	eba0 0308 	sub.w	r3, r0, r8
 802ad94:	fa09 f303 	lsl.w	r3, r9, r3
 802ad98:	4313      	orrs	r3, r2
 802ad9a:	9304      	str	r3, [sp, #16]
 802ad9c:	46a2      	mov	sl, r4
 802ad9e:	e7d2      	b.n	802ad46 <_vfiprintf_r+0xc6>
 802ada0:	9b03      	ldr	r3, [sp, #12]
 802ada2:	1d19      	adds	r1, r3, #4
 802ada4:	681b      	ldr	r3, [r3, #0]
 802ada6:	9103      	str	r1, [sp, #12]
 802ada8:	2b00      	cmp	r3, #0
 802adaa:	bfbb      	ittet	lt
 802adac:	425b      	neglt	r3, r3
 802adae:	f042 0202 	orrlt.w	r2, r2, #2
 802adb2:	9307      	strge	r3, [sp, #28]
 802adb4:	9307      	strlt	r3, [sp, #28]
 802adb6:	bfb8      	it	lt
 802adb8:	9204      	strlt	r2, [sp, #16]
 802adba:	7823      	ldrb	r3, [r4, #0]
 802adbc:	2b2e      	cmp	r3, #46	@ 0x2e
 802adbe:	d10a      	bne.n	802add6 <_vfiprintf_r+0x156>
 802adc0:	7863      	ldrb	r3, [r4, #1]
 802adc2:	2b2a      	cmp	r3, #42	@ 0x2a
 802adc4:	d132      	bne.n	802ae2c <_vfiprintf_r+0x1ac>
 802adc6:	9b03      	ldr	r3, [sp, #12]
 802adc8:	1d1a      	adds	r2, r3, #4
 802adca:	681b      	ldr	r3, [r3, #0]
 802adcc:	9203      	str	r2, [sp, #12]
 802adce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802add2:	3402      	adds	r4, #2
 802add4:	9305      	str	r3, [sp, #20]
 802add6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802aeac <_vfiprintf_r+0x22c>
 802adda:	7821      	ldrb	r1, [r4, #0]
 802addc:	2203      	movs	r2, #3
 802adde:	4650      	mov	r0, sl
 802ade0:	f7d5 f9de 	bl	80001a0 <memchr>
 802ade4:	b138      	cbz	r0, 802adf6 <_vfiprintf_r+0x176>
 802ade6:	9b04      	ldr	r3, [sp, #16]
 802ade8:	eba0 000a 	sub.w	r0, r0, sl
 802adec:	2240      	movs	r2, #64	@ 0x40
 802adee:	4082      	lsls	r2, r0
 802adf0:	4313      	orrs	r3, r2
 802adf2:	3401      	adds	r4, #1
 802adf4:	9304      	str	r3, [sp, #16]
 802adf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802adfa:	4829      	ldr	r0, [pc, #164]	@ (802aea0 <_vfiprintf_r+0x220>)
 802adfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802ae00:	2206      	movs	r2, #6
 802ae02:	f7d5 f9cd 	bl	80001a0 <memchr>
 802ae06:	2800      	cmp	r0, #0
 802ae08:	d03f      	beq.n	802ae8a <_vfiprintf_r+0x20a>
 802ae0a:	4b26      	ldr	r3, [pc, #152]	@ (802aea4 <_vfiprintf_r+0x224>)
 802ae0c:	bb1b      	cbnz	r3, 802ae56 <_vfiprintf_r+0x1d6>
 802ae0e:	9b03      	ldr	r3, [sp, #12]
 802ae10:	3307      	adds	r3, #7
 802ae12:	f023 0307 	bic.w	r3, r3, #7
 802ae16:	3308      	adds	r3, #8
 802ae18:	9303      	str	r3, [sp, #12]
 802ae1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ae1c:	443b      	add	r3, r7
 802ae1e:	9309      	str	r3, [sp, #36]	@ 0x24
 802ae20:	e76a      	b.n	802acf8 <_vfiprintf_r+0x78>
 802ae22:	fb0c 3202 	mla	r2, ip, r2, r3
 802ae26:	460c      	mov	r4, r1
 802ae28:	2001      	movs	r0, #1
 802ae2a:	e7a8      	b.n	802ad7e <_vfiprintf_r+0xfe>
 802ae2c:	2300      	movs	r3, #0
 802ae2e:	3401      	adds	r4, #1
 802ae30:	9305      	str	r3, [sp, #20]
 802ae32:	4619      	mov	r1, r3
 802ae34:	f04f 0c0a 	mov.w	ip, #10
 802ae38:	4620      	mov	r0, r4
 802ae3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ae3e:	3a30      	subs	r2, #48	@ 0x30
 802ae40:	2a09      	cmp	r2, #9
 802ae42:	d903      	bls.n	802ae4c <_vfiprintf_r+0x1cc>
 802ae44:	2b00      	cmp	r3, #0
 802ae46:	d0c6      	beq.n	802add6 <_vfiprintf_r+0x156>
 802ae48:	9105      	str	r1, [sp, #20]
 802ae4a:	e7c4      	b.n	802add6 <_vfiprintf_r+0x156>
 802ae4c:	fb0c 2101 	mla	r1, ip, r1, r2
 802ae50:	4604      	mov	r4, r0
 802ae52:	2301      	movs	r3, #1
 802ae54:	e7f0      	b.n	802ae38 <_vfiprintf_r+0x1b8>
 802ae56:	ab03      	add	r3, sp, #12
 802ae58:	9300      	str	r3, [sp, #0]
 802ae5a:	462a      	mov	r2, r5
 802ae5c:	4b12      	ldr	r3, [pc, #72]	@ (802aea8 <_vfiprintf_r+0x228>)
 802ae5e:	a904      	add	r1, sp, #16
 802ae60:	4630      	mov	r0, r6
 802ae62:	f7fd fb79 	bl	8028558 <_printf_float>
 802ae66:	4607      	mov	r7, r0
 802ae68:	1c78      	adds	r0, r7, #1
 802ae6a:	d1d6      	bne.n	802ae1a <_vfiprintf_r+0x19a>
 802ae6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802ae6e:	07d9      	lsls	r1, r3, #31
 802ae70:	d405      	bmi.n	802ae7e <_vfiprintf_r+0x1fe>
 802ae72:	89ab      	ldrh	r3, [r5, #12]
 802ae74:	059a      	lsls	r2, r3, #22
 802ae76:	d402      	bmi.n	802ae7e <_vfiprintf_r+0x1fe>
 802ae78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802ae7a:	f7fe fa27 	bl	80292cc <__retarget_lock_release_recursive>
 802ae7e:	89ab      	ldrh	r3, [r5, #12]
 802ae80:	065b      	lsls	r3, r3, #25
 802ae82:	f53f af1f 	bmi.w	802acc4 <_vfiprintf_r+0x44>
 802ae86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802ae88:	e71e      	b.n	802acc8 <_vfiprintf_r+0x48>
 802ae8a:	ab03      	add	r3, sp, #12
 802ae8c:	9300      	str	r3, [sp, #0]
 802ae8e:	462a      	mov	r2, r5
 802ae90:	4b05      	ldr	r3, [pc, #20]	@ (802aea8 <_vfiprintf_r+0x228>)
 802ae92:	a904      	add	r1, sp, #16
 802ae94:	4630      	mov	r0, r6
 802ae96:	f7fd fdf7 	bl	8028a88 <_printf_i>
 802ae9a:	e7e4      	b.n	802ae66 <_vfiprintf_r+0x1e6>
 802ae9c:	08031be4 	.word	0x08031be4
 802aea0:	08031bea 	.word	0x08031bea
 802aea4:	08028559 	.word	0x08028559
 802aea8:	0802ac5b 	.word	0x0802ac5b
 802aeac:	08031be0 	.word	0x08031be0

0802aeb0 <_scanf_chars>:
 802aeb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802aeb4:	4615      	mov	r5, r2
 802aeb6:	688a      	ldr	r2, [r1, #8]
 802aeb8:	4680      	mov	r8, r0
 802aeba:	460c      	mov	r4, r1
 802aebc:	b932      	cbnz	r2, 802aecc <_scanf_chars+0x1c>
 802aebe:	698a      	ldr	r2, [r1, #24]
 802aec0:	2a00      	cmp	r2, #0
 802aec2:	bf14      	ite	ne
 802aec4:	f04f 32ff 	movne.w	r2, #4294967295
 802aec8:	2201      	moveq	r2, #1
 802aeca:	608a      	str	r2, [r1, #8]
 802aecc:	6822      	ldr	r2, [r4, #0]
 802aece:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 802af60 <_scanf_chars+0xb0>
 802aed2:	06d1      	lsls	r1, r2, #27
 802aed4:	bf5f      	itttt	pl
 802aed6:	681a      	ldrpl	r2, [r3, #0]
 802aed8:	1d11      	addpl	r1, r2, #4
 802aeda:	6019      	strpl	r1, [r3, #0]
 802aedc:	6816      	ldrpl	r6, [r2, #0]
 802aede:	2700      	movs	r7, #0
 802aee0:	69a0      	ldr	r0, [r4, #24]
 802aee2:	b188      	cbz	r0, 802af08 <_scanf_chars+0x58>
 802aee4:	2801      	cmp	r0, #1
 802aee6:	d107      	bne.n	802aef8 <_scanf_chars+0x48>
 802aee8:	682b      	ldr	r3, [r5, #0]
 802aeea:	781a      	ldrb	r2, [r3, #0]
 802aeec:	6963      	ldr	r3, [r4, #20]
 802aeee:	5c9b      	ldrb	r3, [r3, r2]
 802aef0:	b953      	cbnz	r3, 802af08 <_scanf_chars+0x58>
 802aef2:	2f00      	cmp	r7, #0
 802aef4:	d031      	beq.n	802af5a <_scanf_chars+0xaa>
 802aef6:	e022      	b.n	802af3e <_scanf_chars+0x8e>
 802aef8:	2802      	cmp	r0, #2
 802aefa:	d120      	bne.n	802af3e <_scanf_chars+0x8e>
 802aefc:	682b      	ldr	r3, [r5, #0]
 802aefe:	781b      	ldrb	r3, [r3, #0]
 802af00:	f819 3003 	ldrb.w	r3, [r9, r3]
 802af04:	071b      	lsls	r3, r3, #28
 802af06:	d41a      	bmi.n	802af3e <_scanf_chars+0x8e>
 802af08:	6823      	ldr	r3, [r4, #0]
 802af0a:	06da      	lsls	r2, r3, #27
 802af0c:	bf5e      	ittt	pl
 802af0e:	682b      	ldrpl	r3, [r5, #0]
 802af10:	781b      	ldrbpl	r3, [r3, #0]
 802af12:	f806 3b01 	strbpl.w	r3, [r6], #1
 802af16:	682a      	ldr	r2, [r5, #0]
 802af18:	686b      	ldr	r3, [r5, #4]
 802af1a:	3201      	adds	r2, #1
 802af1c:	602a      	str	r2, [r5, #0]
 802af1e:	68a2      	ldr	r2, [r4, #8]
 802af20:	3b01      	subs	r3, #1
 802af22:	3a01      	subs	r2, #1
 802af24:	606b      	str	r3, [r5, #4]
 802af26:	3701      	adds	r7, #1
 802af28:	60a2      	str	r2, [r4, #8]
 802af2a:	b142      	cbz	r2, 802af3e <_scanf_chars+0x8e>
 802af2c:	2b00      	cmp	r3, #0
 802af2e:	dcd7      	bgt.n	802aee0 <_scanf_chars+0x30>
 802af30:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802af34:	4629      	mov	r1, r5
 802af36:	4640      	mov	r0, r8
 802af38:	4798      	blx	r3
 802af3a:	2800      	cmp	r0, #0
 802af3c:	d0d0      	beq.n	802aee0 <_scanf_chars+0x30>
 802af3e:	6823      	ldr	r3, [r4, #0]
 802af40:	f013 0310 	ands.w	r3, r3, #16
 802af44:	d105      	bne.n	802af52 <_scanf_chars+0xa2>
 802af46:	68e2      	ldr	r2, [r4, #12]
 802af48:	3201      	adds	r2, #1
 802af4a:	60e2      	str	r2, [r4, #12]
 802af4c:	69a2      	ldr	r2, [r4, #24]
 802af4e:	b102      	cbz	r2, 802af52 <_scanf_chars+0xa2>
 802af50:	7033      	strb	r3, [r6, #0]
 802af52:	6923      	ldr	r3, [r4, #16]
 802af54:	443b      	add	r3, r7
 802af56:	6123      	str	r3, [r4, #16]
 802af58:	2000      	movs	r0, #0
 802af5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802af5e:	bf00      	nop
 802af60:	08031c17 	.word	0x08031c17

0802af64 <_scanf_i>:
 802af64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802af68:	4698      	mov	r8, r3
 802af6a:	4b74      	ldr	r3, [pc, #464]	@ (802b13c <_scanf_i+0x1d8>)
 802af6c:	460c      	mov	r4, r1
 802af6e:	4682      	mov	sl, r0
 802af70:	4616      	mov	r6, r2
 802af72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802af76:	b087      	sub	sp, #28
 802af78:	ab03      	add	r3, sp, #12
 802af7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802af7e:	4b70      	ldr	r3, [pc, #448]	@ (802b140 <_scanf_i+0x1dc>)
 802af80:	69a1      	ldr	r1, [r4, #24]
 802af82:	4a70      	ldr	r2, [pc, #448]	@ (802b144 <_scanf_i+0x1e0>)
 802af84:	2903      	cmp	r1, #3
 802af86:	bf08      	it	eq
 802af88:	461a      	moveq	r2, r3
 802af8a:	68a3      	ldr	r3, [r4, #8]
 802af8c:	9201      	str	r2, [sp, #4]
 802af8e:	1e5a      	subs	r2, r3, #1
 802af90:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 802af94:	bf88      	it	hi
 802af96:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 802af9a:	4627      	mov	r7, r4
 802af9c:	bf82      	ittt	hi
 802af9e:	eb03 0905 	addhi.w	r9, r3, r5
 802afa2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802afa6:	60a3      	strhi	r3, [r4, #8]
 802afa8:	f857 3b1c 	ldr.w	r3, [r7], #28
 802afac:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 802afb0:	bf98      	it	ls
 802afb2:	f04f 0900 	movls.w	r9, #0
 802afb6:	6023      	str	r3, [r4, #0]
 802afb8:	463d      	mov	r5, r7
 802afba:	f04f 0b00 	mov.w	fp, #0
 802afbe:	6831      	ldr	r1, [r6, #0]
 802afc0:	ab03      	add	r3, sp, #12
 802afc2:	7809      	ldrb	r1, [r1, #0]
 802afc4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802afc8:	2202      	movs	r2, #2
 802afca:	f7d5 f8e9 	bl	80001a0 <memchr>
 802afce:	b328      	cbz	r0, 802b01c <_scanf_i+0xb8>
 802afd0:	f1bb 0f01 	cmp.w	fp, #1
 802afd4:	d159      	bne.n	802b08a <_scanf_i+0x126>
 802afd6:	6862      	ldr	r2, [r4, #4]
 802afd8:	b92a      	cbnz	r2, 802afe6 <_scanf_i+0x82>
 802afda:	6822      	ldr	r2, [r4, #0]
 802afdc:	2108      	movs	r1, #8
 802afde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802afe2:	6061      	str	r1, [r4, #4]
 802afe4:	6022      	str	r2, [r4, #0]
 802afe6:	6822      	ldr	r2, [r4, #0]
 802afe8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 802afec:	6022      	str	r2, [r4, #0]
 802afee:	68a2      	ldr	r2, [r4, #8]
 802aff0:	1e51      	subs	r1, r2, #1
 802aff2:	60a1      	str	r1, [r4, #8]
 802aff4:	b192      	cbz	r2, 802b01c <_scanf_i+0xb8>
 802aff6:	6832      	ldr	r2, [r6, #0]
 802aff8:	1c51      	adds	r1, r2, #1
 802affa:	6031      	str	r1, [r6, #0]
 802affc:	7812      	ldrb	r2, [r2, #0]
 802affe:	f805 2b01 	strb.w	r2, [r5], #1
 802b002:	6872      	ldr	r2, [r6, #4]
 802b004:	3a01      	subs	r2, #1
 802b006:	2a00      	cmp	r2, #0
 802b008:	6072      	str	r2, [r6, #4]
 802b00a:	dc07      	bgt.n	802b01c <_scanf_i+0xb8>
 802b00c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 802b010:	4631      	mov	r1, r6
 802b012:	4650      	mov	r0, sl
 802b014:	4790      	blx	r2
 802b016:	2800      	cmp	r0, #0
 802b018:	f040 8085 	bne.w	802b126 <_scanf_i+0x1c2>
 802b01c:	f10b 0b01 	add.w	fp, fp, #1
 802b020:	f1bb 0f03 	cmp.w	fp, #3
 802b024:	d1cb      	bne.n	802afbe <_scanf_i+0x5a>
 802b026:	6863      	ldr	r3, [r4, #4]
 802b028:	b90b      	cbnz	r3, 802b02e <_scanf_i+0xca>
 802b02a:	230a      	movs	r3, #10
 802b02c:	6063      	str	r3, [r4, #4]
 802b02e:	6863      	ldr	r3, [r4, #4]
 802b030:	4945      	ldr	r1, [pc, #276]	@ (802b148 <_scanf_i+0x1e4>)
 802b032:	6960      	ldr	r0, [r4, #20]
 802b034:	1ac9      	subs	r1, r1, r3
 802b036:	f000 f997 	bl	802b368 <__sccl>
 802b03a:	f04f 0b00 	mov.w	fp, #0
 802b03e:	68a3      	ldr	r3, [r4, #8]
 802b040:	6822      	ldr	r2, [r4, #0]
 802b042:	2b00      	cmp	r3, #0
 802b044:	d03d      	beq.n	802b0c2 <_scanf_i+0x15e>
 802b046:	6831      	ldr	r1, [r6, #0]
 802b048:	6960      	ldr	r0, [r4, #20]
 802b04a:	f891 c000 	ldrb.w	ip, [r1]
 802b04e:	f810 000c 	ldrb.w	r0, [r0, ip]
 802b052:	2800      	cmp	r0, #0
 802b054:	d035      	beq.n	802b0c2 <_scanf_i+0x15e>
 802b056:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 802b05a:	d124      	bne.n	802b0a6 <_scanf_i+0x142>
 802b05c:	0510      	lsls	r0, r2, #20
 802b05e:	d522      	bpl.n	802b0a6 <_scanf_i+0x142>
 802b060:	f10b 0b01 	add.w	fp, fp, #1
 802b064:	f1b9 0f00 	cmp.w	r9, #0
 802b068:	d003      	beq.n	802b072 <_scanf_i+0x10e>
 802b06a:	3301      	adds	r3, #1
 802b06c:	f109 39ff 	add.w	r9, r9, #4294967295
 802b070:	60a3      	str	r3, [r4, #8]
 802b072:	6873      	ldr	r3, [r6, #4]
 802b074:	3b01      	subs	r3, #1
 802b076:	2b00      	cmp	r3, #0
 802b078:	6073      	str	r3, [r6, #4]
 802b07a:	dd1b      	ble.n	802b0b4 <_scanf_i+0x150>
 802b07c:	6833      	ldr	r3, [r6, #0]
 802b07e:	3301      	adds	r3, #1
 802b080:	6033      	str	r3, [r6, #0]
 802b082:	68a3      	ldr	r3, [r4, #8]
 802b084:	3b01      	subs	r3, #1
 802b086:	60a3      	str	r3, [r4, #8]
 802b088:	e7d9      	b.n	802b03e <_scanf_i+0xda>
 802b08a:	f1bb 0f02 	cmp.w	fp, #2
 802b08e:	d1ae      	bne.n	802afee <_scanf_i+0x8a>
 802b090:	6822      	ldr	r2, [r4, #0]
 802b092:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 802b096:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802b09a:	d1bf      	bne.n	802b01c <_scanf_i+0xb8>
 802b09c:	2110      	movs	r1, #16
 802b09e:	6061      	str	r1, [r4, #4]
 802b0a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802b0a4:	e7a2      	b.n	802afec <_scanf_i+0x88>
 802b0a6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 802b0aa:	6022      	str	r2, [r4, #0]
 802b0ac:	780b      	ldrb	r3, [r1, #0]
 802b0ae:	f805 3b01 	strb.w	r3, [r5], #1
 802b0b2:	e7de      	b.n	802b072 <_scanf_i+0x10e>
 802b0b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802b0b8:	4631      	mov	r1, r6
 802b0ba:	4650      	mov	r0, sl
 802b0bc:	4798      	blx	r3
 802b0be:	2800      	cmp	r0, #0
 802b0c0:	d0df      	beq.n	802b082 <_scanf_i+0x11e>
 802b0c2:	6823      	ldr	r3, [r4, #0]
 802b0c4:	05d9      	lsls	r1, r3, #23
 802b0c6:	d50d      	bpl.n	802b0e4 <_scanf_i+0x180>
 802b0c8:	42bd      	cmp	r5, r7
 802b0ca:	d909      	bls.n	802b0e0 <_scanf_i+0x17c>
 802b0cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802b0d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802b0d4:	4632      	mov	r2, r6
 802b0d6:	4650      	mov	r0, sl
 802b0d8:	4798      	blx	r3
 802b0da:	f105 39ff 	add.w	r9, r5, #4294967295
 802b0de:	464d      	mov	r5, r9
 802b0e0:	42bd      	cmp	r5, r7
 802b0e2:	d028      	beq.n	802b136 <_scanf_i+0x1d2>
 802b0e4:	6822      	ldr	r2, [r4, #0]
 802b0e6:	f012 0210 	ands.w	r2, r2, #16
 802b0ea:	d113      	bne.n	802b114 <_scanf_i+0x1b0>
 802b0ec:	702a      	strb	r2, [r5, #0]
 802b0ee:	6863      	ldr	r3, [r4, #4]
 802b0f0:	9e01      	ldr	r6, [sp, #4]
 802b0f2:	4639      	mov	r1, r7
 802b0f4:	4650      	mov	r0, sl
 802b0f6:	47b0      	blx	r6
 802b0f8:	f8d8 3000 	ldr.w	r3, [r8]
 802b0fc:	6821      	ldr	r1, [r4, #0]
 802b0fe:	1d1a      	adds	r2, r3, #4
 802b100:	f8c8 2000 	str.w	r2, [r8]
 802b104:	f011 0f20 	tst.w	r1, #32
 802b108:	681b      	ldr	r3, [r3, #0]
 802b10a:	d00f      	beq.n	802b12c <_scanf_i+0x1c8>
 802b10c:	6018      	str	r0, [r3, #0]
 802b10e:	68e3      	ldr	r3, [r4, #12]
 802b110:	3301      	adds	r3, #1
 802b112:	60e3      	str	r3, [r4, #12]
 802b114:	6923      	ldr	r3, [r4, #16]
 802b116:	1bed      	subs	r5, r5, r7
 802b118:	445d      	add	r5, fp
 802b11a:	442b      	add	r3, r5
 802b11c:	6123      	str	r3, [r4, #16]
 802b11e:	2000      	movs	r0, #0
 802b120:	b007      	add	sp, #28
 802b122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b126:	f04f 0b00 	mov.w	fp, #0
 802b12a:	e7ca      	b.n	802b0c2 <_scanf_i+0x15e>
 802b12c:	07ca      	lsls	r2, r1, #31
 802b12e:	bf4c      	ite	mi
 802b130:	8018      	strhmi	r0, [r3, #0]
 802b132:	6018      	strpl	r0, [r3, #0]
 802b134:	e7eb      	b.n	802b10e <_scanf_i+0x1aa>
 802b136:	2001      	movs	r0, #1
 802b138:	e7f2      	b.n	802b120 <_scanf_i+0x1bc>
 802b13a:	bf00      	nop
 802b13c:	08030368 	.word	0x08030368
 802b140:	0802b6d9 	.word	0x0802b6d9
 802b144:	0802b7b9 	.word	0x0802b7b9
 802b148:	08031c01 	.word	0x08031c01

0802b14c <__sflush_r>:
 802b14c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802b150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b154:	0716      	lsls	r6, r2, #28
 802b156:	4605      	mov	r5, r0
 802b158:	460c      	mov	r4, r1
 802b15a:	d454      	bmi.n	802b206 <__sflush_r+0xba>
 802b15c:	684b      	ldr	r3, [r1, #4]
 802b15e:	2b00      	cmp	r3, #0
 802b160:	dc02      	bgt.n	802b168 <__sflush_r+0x1c>
 802b162:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802b164:	2b00      	cmp	r3, #0
 802b166:	dd48      	ble.n	802b1fa <__sflush_r+0xae>
 802b168:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b16a:	2e00      	cmp	r6, #0
 802b16c:	d045      	beq.n	802b1fa <__sflush_r+0xae>
 802b16e:	2300      	movs	r3, #0
 802b170:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802b174:	682f      	ldr	r7, [r5, #0]
 802b176:	6a21      	ldr	r1, [r4, #32]
 802b178:	602b      	str	r3, [r5, #0]
 802b17a:	d030      	beq.n	802b1de <__sflush_r+0x92>
 802b17c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802b17e:	89a3      	ldrh	r3, [r4, #12]
 802b180:	0759      	lsls	r1, r3, #29
 802b182:	d505      	bpl.n	802b190 <__sflush_r+0x44>
 802b184:	6863      	ldr	r3, [r4, #4]
 802b186:	1ad2      	subs	r2, r2, r3
 802b188:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802b18a:	b10b      	cbz	r3, 802b190 <__sflush_r+0x44>
 802b18c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802b18e:	1ad2      	subs	r2, r2, r3
 802b190:	2300      	movs	r3, #0
 802b192:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802b194:	6a21      	ldr	r1, [r4, #32]
 802b196:	4628      	mov	r0, r5
 802b198:	47b0      	blx	r6
 802b19a:	1c43      	adds	r3, r0, #1
 802b19c:	89a3      	ldrh	r3, [r4, #12]
 802b19e:	d106      	bne.n	802b1ae <__sflush_r+0x62>
 802b1a0:	6829      	ldr	r1, [r5, #0]
 802b1a2:	291d      	cmp	r1, #29
 802b1a4:	d82b      	bhi.n	802b1fe <__sflush_r+0xb2>
 802b1a6:	4a2a      	ldr	r2, [pc, #168]	@ (802b250 <__sflush_r+0x104>)
 802b1a8:	410a      	asrs	r2, r1
 802b1aa:	07d6      	lsls	r6, r2, #31
 802b1ac:	d427      	bmi.n	802b1fe <__sflush_r+0xb2>
 802b1ae:	2200      	movs	r2, #0
 802b1b0:	6062      	str	r2, [r4, #4]
 802b1b2:	04d9      	lsls	r1, r3, #19
 802b1b4:	6922      	ldr	r2, [r4, #16]
 802b1b6:	6022      	str	r2, [r4, #0]
 802b1b8:	d504      	bpl.n	802b1c4 <__sflush_r+0x78>
 802b1ba:	1c42      	adds	r2, r0, #1
 802b1bc:	d101      	bne.n	802b1c2 <__sflush_r+0x76>
 802b1be:	682b      	ldr	r3, [r5, #0]
 802b1c0:	b903      	cbnz	r3, 802b1c4 <__sflush_r+0x78>
 802b1c2:	6560      	str	r0, [r4, #84]	@ 0x54
 802b1c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b1c6:	602f      	str	r7, [r5, #0]
 802b1c8:	b1b9      	cbz	r1, 802b1fa <__sflush_r+0xae>
 802b1ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b1ce:	4299      	cmp	r1, r3
 802b1d0:	d002      	beq.n	802b1d8 <__sflush_r+0x8c>
 802b1d2:	4628      	mov	r0, r5
 802b1d4:	f7fe fedc 	bl	8029f90 <_free_r>
 802b1d8:	2300      	movs	r3, #0
 802b1da:	6363      	str	r3, [r4, #52]	@ 0x34
 802b1dc:	e00d      	b.n	802b1fa <__sflush_r+0xae>
 802b1de:	2301      	movs	r3, #1
 802b1e0:	4628      	mov	r0, r5
 802b1e2:	47b0      	blx	r6
 802b1e4:	4602      	mov	r2, r0
 802b1e6:	1c50      	adds	r0, r2, #1
 802b1e8:	d1c9      	bne.n	802b17e <__sflush_r+0x32>
 802b1ea:	682b      	ldr	r3, [r5, #0]
 802b1ec:	2b00      	cmp	r3, #0
 802b1ee:	d0c6      	beq.n	802b17e <__sflush_r+0x32>
 802b1f0:	2b1d      	cmp	r3, #29
 802b1f2:	d001      	beq.n	802b1f8 <__sflush_r+0xac>
 802b1f4:	2b16      	cmp	r3, #22
 802b1f6:	d11e      	bne.n	802b236 <__sflush_r+0xea>
 802b1f8:	602f      	str	r7, [r5, #0]
 802b1fa:	2000      	movs	r0, #0
 802b1fc:	e022      	b.n	802b244 <__sflush_r+0xf8>
 802b1fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b202:	b21b      	sxth	r3, r3
 802b204:	e01b      	b.n	802b23e <__sflush_r+0xf2>
 802b206:	690f      	ldr	r7, [r1, #16]
 802b208:	2f00      	cmp	r7, #0
 802b20a:	d0f6      	beq.n	802b1fa <__sflush_r+0xae>
 802b20c:	0793      	lsls	r3, r2, #30
 802b20e:	680e      	ldr	r6, [r1, #0]
 802b210:	bf08      	it	eq
 802b212:	694b      	ldreq	r3, [r1, #20]
 802b214:	600f      	str	r7, [r1, #0]
 802b216:	bf18      	it	ne
 802b218:	2300      	movne	r3, #0
 802b21a:	eba6 0807 	sub.w	r8, r6, r7
 802b21e:	608b      	str	r3, [r1, #8]
 802b220:	f1b8 0f00 	cmp.w	r8, #0
 802b224:	dde9      	ble.n	802b1fa <__sflush_r+0xae>
 802b226:	6a21      	ldr	r1, [r4, #32]
 802b228:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802b22a:	4643      	mov	r3, r8
 802b22c:	463a      	mov	r2, r7
 802b22e:	4628      	mov	r0, r5
 802b230:	47b0      	blx	r6
 802b232:	2800      	cmp	r0, #0
 802b234:	dc08      	bgt.n	802b248 <__sflush_r+0xfc>
 802b236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b23a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802b23e:	81a3      	strh	r3, [r4, #12]
 802b240:	f04f 30ff 	mov.w	r0, #4294967295
 802b244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b248:	4407      	add	r7, r0
 802b24a:	eba8 0800 	sub.w	r8, r8, r0
 802b24e:	e7e7      	b.n	802b220 <__sflush_r+0xd4>
 802b250:	dfbffffe 	.word	0xdfbffffe

0802b254 <_fflush_r>:
 802b254:	b538      	push	{r3, r4, r5, lr}
 802b256:	690b      	ldr	r3, [r1, #16]
 802b258:	4605      	mov	r5, r0
 802b25a:	460c      	mov	r4, r1
 802b25c:	b913      	cbnz	r3, 802b264 <_fflush_r+0x10>
 802b25e:	2500      	movs	r5, #0
 802b260:	4628      	mov	r0, r5
 802b262:	bd38      	pop	{r3, r4, r5, pc}
 802b264:	b118      	cbz	r0, 802b26e <_fflush_r+0x1a>
 802b266:	6a03      	ldr	r3, [r0, #32]
 802b268:	b90b      	cbnz	r3, 802b26e <_fflush_r+0x1a>
 802b26a:	f7fd fdb9 	bl	8028de0 <__sinit>
 802b26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b272:	2b00      	cmp	r3, #0
 802b274:	d0f3      	beq.n	802b25e <_fflush_r+0xa>
 802b276:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802b278:	07d0      	lsls	r0, r2, #31
 802b27a:	d404      	bmi.n	802b286 <_fflush_r+0x32>
 802b27c:	0599      	lsls	r1, r3, #22
 802b27e:	d402      	bmi.n	802b286 <_fflush_r+0x32>
 802b280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b282:	f7fe f822 	bl	80292ca <__retarget_lock_acquire_recursive>
 802b286:	4628      	mov	r0, r5
 802b288:	4621      	mov	r1, r4
 802b28a:	f7ff ff5f 	bl	802b14c <__sflush_r>
 802b28e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802b290:	07da      	lsls	r2, r3, #31
 802b292:	4605      	mov	r5, r0
 802b294:	d4e4      	bmi.n	802b260 <_fflush_r+0xc>
 802b296:	89a3      	ldrh	r3, [r4, #12]
 802b298:	059b      	lsls	r3, r3, #22
 802b29a:	d4e1      	bmi.n	802b260 <_fflush_r+0xc>
 802b29c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802b29e:	f7fe f815 	bl	80292cc <__retarget_lock_release_recursive>
 802b2a2:	e7dd      	b.n	802b260 <_fflush_r+0xc>

0802b2a4 <__swhatbuf_r>:
 802b2a4:	b570      	push	{r4, r5, r6, lr}
 802b2a6:	460c      	mov	r4, r1
 802b2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b2ac:	2900      	cmp	r1, #0
 802b2ae:	b096      	sub	sp, #88	@ 0x58
 802b2b0:	4615      	mov	r5, r2
 802b2b2:	461e      	mov	r6, r3
 802b2b4:	da0d      	bge.n	802b2d2 <__swhatbuf_r+0x2e>
 802b2b6:	89a3      	ldrh	r3, [r4, #12]
 802b2b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802b2bc:	f04f 0100 	mov.w	r1, #0
 802b2c0:	bf14      	ite	ne
 802b2c2:	2340      	movne	r3, #64	@ 0x40
 802b2c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802b2c8:	2000      	movs	r0, #0
 802b2ca:	6031      	str	r1, [r6, #0]
 802b2cc:	602b      	str	r3, [r5, #0]
 802b2ce:	b016      	add	sp, #88	@ 0x58
 802b2d0:	bd70      	pop	{r4, r5, r6, pc}
 802b2d2:	466a      	mov	r2, sp
 802b2d4:	f000 f8ec 	bl	802b4b0 <_fstat_r>
 802b2d8:	2800      	cmp	r0, #0
 802b2da:	dbec      	blt.n	802b2b6 <__swhatbuf_r+0x12>
 802b2dc:	9901      	ldr	r1, [sp, #4]
 802b2de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802b2e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802b2e6:	4259      	negs	r1, r3
 802b2e8:	4159      	adcs	r1, r3
 802b2ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b2ee:	e7eb      	b.n	802b2c8 <__swhatbuf_r+0x24>

0802b2f0 <__smakebuf_r>:
 802b2f0:	898b      	ldrh	r3, [r1, #12]
 802b2f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802b2f4:	079d      	lsls	r5, r3, #30
 802b2f6:	4606      	mov	r6, r0
 802b2f8:	460c      	mov	r4, r1
 802b2fa:	d507      	bpl.n	802b30c <__smakebuf_r+0x1c>
 802b2fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802b300:	6023      	str	r3, [r4, #0]
 802b302:	6123      	str	r3, [r4, #16]
 802b304:	2301      	movs	r3, #1
 802b306:	6163      	str	r3, [r4, #20]
 802b308:	b003      	add	sp, #12
 802b30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b30c:	ab01      	add	r3, sp, #4
 802b30e:	466a      	mov	r2, sp
 802b310:	f7ff ffc8 	bl	802b2a4 <__swhatbuf_r>
 802b314:	9f00      	ldr	r7, [sp, #0]
 802b316:	4605      	mov	r5, r0
 802b318:	4639      	mov	r1, r7
 802b31a:	4630      	mov	r0, r6
 802b31c:	f7fe feac 	bl	802a078 <_malloc_r>
 802b320:	b948      	cbnz	r0, 802b336 <__smakebuf_r+0x46>
 802b322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b326:	059a      	lsls	r2, r3, #22
 802b328:	d4ee      	bmi.n	802b308 <__smakebuf_r+0x18>
 802b32a:	f023 0303 	bic.w	r3, r3, #3
 802b32e:	f043 0302 	orr.w	r3, r3, #2
 802b332:	81a3      	strh	r3, [r4, #12]
 802b334:	e7e2      	b.n	802b2fc <__smakebuf_r+0xc>
 802b336:	89a3      	ldrh	r3, [r4, #12]
 802b338:	6020      	str	r0, [r4, #0]
 802b33a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b33e:	81a3      	strh	r3, [r4, #12]
 802b340:	9b01      	ldr	r3, [sp, #4]
 802b342:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802b346:	b15b      	cbz	r3, 802b360 <__smakebuf_r+0x70>
 802b348:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b34c:	4630      	mov	r0, r6
 802b34e:	f000 f8c1 	bl	802b4d4 <_isatty_r>
 802b352:	b128      	cbz	r0, 802b360 <__smakebuf_r+0x70>
 802b354:	89a3      	ldrh	r3, [r4, #12]
 802b356:	f023 0303 	bic.w	r3, r3, #3
 802b35a:	f043 0301 	orr.w	r3, r3, #1
 802b35e:	81a3      	strh	r3, [r4, #12]
 802b360:	89a3      	ldrh	r3, [r4, #12]
 802b362:	431d      	orrs	r5, r3
 802b364:	81a5      	strh	r5, [r4, #12]
 802b366:	e7cf      	b.n	802b308 <__smakebuf_r+0x18>

0802b368 <__sccl>:
 802b368:	b570      	push	{r4, r5, r6, lr}
 802b36a:	780b      	ldrb	r3, [r1, #0]
 802b36c:	4604      	mov	r4, r0
 802b36e:	2b5e      	cmp	r3, #94	@ 0x5e
 802b370:	bf0b      	itete	eq
 802b372:	784b      	ldrbeq	r3, [r1, #1]
 802b374:	1c4a      	addne	r2, r1, #1
 802b376:	1c8a      	addeq	r2, r1, #2
 802b378:	2100      	movne	r1, #0
 802b37a:	bf08      	it	eq
 802b37c:	2101      	moveq	r1, #1
 802b37e:	3801      	subs	r0, #1
 802b380:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 802b384:	f800 1f01 	strb.w	r1, [r0, #1]!
 802b388:	42a8      	cmp	r0, r5
 802b38a:	d1fb      	bne.n	802b384 <__sccl+0x1c>
 802b38c:	b90b      	cbnz	r3, 802b392 <__sccl+0x2a>
 802b38e:	1e50      	subs	r0, r2, #1
 802b390:	bd70      	pop	{r4, r5, r6, pc}
 802b392:	f081 0101 	eor.w	r1, r1, #1
 802b396:	54e1      	strb	r1, [r4, r3]
 802b398:	4610      	mov	r0, r2
 802b39a:	4602      	mov	r2, r0
 802b39c:	f812 5b01 	ldrb.w	r5, [r2], #1
 802b3a0:	2d2d      	cmp	r5, #45	@ 0x2d
 802b3a2:	d005      	beq.n	802b3b0 <__sccl+0x48>
 802b3a4:	2d5d      	cmp	r5, #93	@ 0x5d
 802b3a6:	d016      	beq.n	802b3d6 <__sccl+0x6e>
 802b3a8:	2d00      	cmp	r5, #0
 802b3aa:	d0f1      	beq.n	802b390 <__sccl+0x28>
 802b3ac:	462b      	mov	r3, r5
 802b3ae:	e7f2      	b.n	802b396 <__sccl+0x2e>
 802b3b0:	7846      	ldrb	r6, [r0, #1]
 802b3b2:	2e5d      	cmp	r6, #93	@ 0x5d
 802b3b4:	d0fa      	beq.n	802b3ac <__sccl+0x44>
 802b3b6:	42b3      	cmp	r3, r6
 802b3b8:	dcf8      	bgt.n	802b3ac <__sccl+0x44>
 802b3ba:	3002      	adds	r0, #2
 802b3bc:	461a      	mov	r2, r3
 802b3be:	3201      	adds	r2, #1
 802b3c0:	4296      	cmp	r6, r2
 802b3c2:	54a1      	strb	r1, [r4, r2]
 802b3c4:	dcfb      	bgt.n	802b3be <__sccl+0x56>
 802b3c6:	1af2      	subs	r2, r6, r3
 802b3c8:	3a01      	subs	r2, #1
 802b3ca:	1c5d      	adds	r5, r3, #1
 802b3cc:	42b3      	cmp	r3, r6
 802b3ce:	bfa8      	it	ge
 802b3d0:	2200      	movge	r2, #0
 802b3d2:	18ab      	adds	r3, r5, r2
 802b3d4:	e7e1      	b.n	802b39a <__sccl+0x32>
 802b3d6:	4610      	mov	r0, r2
 802b3d8:	e7da      	b.n	802b390 <__sccl+0x28>

0802b3da <__submore>:
 802b3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b3de:	460c      	mov	r4, r1
 802b3e0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 802b3e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802b3e6:	4299      	cmp	r1, r3
 802b3e8:	d11d      	bne.n	802b426 <__submore+0x4c>
 802b3ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 802b3ee:	f7fe fe43 	bl	802a078 <_malloc_r>
 802b3f2:	b918      	cbnz	r0, 802b3fc <__submore+0x22>
 802b3f4:	f04f 30ff 	mov.w	r0, #4294967295
 802b3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b3fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b400:	63a3      	str	r3, [r4, #56]	@ 0x38
 802b402:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 802b406:	6360      	str	r0, [r4, #52]	@ 0x34
 802b408:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 802b40c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 802b410:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 802b414:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 802b418:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 802b41c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 802b420:	6020      	str	r0, [r4, #0]
 802b422:	2000      	movs	r0, #0
 802b424:	e7e8      	b.n	802b3f8 <__submore+0x1e>
 802b426:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 802b428:	0077      	lsls	r7, r6, #1
 802b42a:	463a      	mov	r2, r7
 802b42c:	f000 f8ac 	bl	802b588 <_realloc_r>
 802b430:	4605      	mov	r5, r0
 802b432:	2800      	cmp	r0, #0
 802b434:	d0de      	beq.n	802b3f4 <__submore+0x1a>
 802b436:	eb00 0806 	add.w	r8, r0, r6
 802b43a:	4601      	mov	r1, r0
 802b43c:	4632      	mov	r2, r6
 802b43e:	4640      	mov	r0, r8
 802b440:	f7fd ff45 	bl	80292ce <memcpy>
 802b444:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 802b448:	f8c4 8000 	str.w	r8, [r4]
 802b44c:	e7e9      	b.n	802b422 <__submore+0x48>

0802b44e <_raise_r>:
 802b44e:	291f      	cmp	r1, #31
 802b450:	b538      	push	{r3, r4, r5, lr}
 802b452:	4605      	mov	r5, r0
 802b454:	460c      	mov	r4, r1
 802b456:	d904      	bls.n	802b462 <_raise_r+0x14>
 802b458:	2316      	movs	r3, #22
 802b45a:	6003      	str	r3, [r0, #0]
 802b45c:	f04f 30ff 	mov.w	r0, #4294967295
 802b460:	bd38      	pop	{r3, r4, r5, pc}
 802b462:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802b464:	b112      	cbz	r2, 802b46c <_raise_r+0x1e>
 802b466:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b46a:	b94b      	cbnz	r3, 802b480 <_raise_r+0x32>
 802b46c:	4628      	mov	r0, r5
 802b46e:	f000 f853 	bl	802b518 <_getpid_r>
 802b472:	4622      	mov	r2, r4
 802b474:	4601      	mov	r1, r0
 802b476:	4628      	mov	r0, r5
 802b478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b47c:	f000 b83a 	b.w	802b4f4 <_kill_r>
 802b480:	2b01      	cmp	r3, #1
 802b482:	d00a      	beq.n	802b49a <_raise_r+0x4c>
 802b484:	1c59      	adds	r1, r3, #1
 802b486:	d103      	bne.n	802b490 <_raise_r+0x42>
 802b488:	2316      	movs	r3, #22
 802b48a:	6003      	str	r3, [r0, #0]
 802b48c:	2001      	movs	r0, #1
 802b48e:	e7e7      	b.n	802b460 <_raise_r+0x12>
 802b490:	2100      	movs	r1, #0
 802b492:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802b496:	4620      	mov	r0, r4
 802b498:	4798      	blx	r3
 802b49a:	2000      	movs	r0, #0
 802b49c:	e7e0      	b.n	802b460 <_raise_r+0x12>
	...

0802b4a0 <raise>:
 802b4a0:	4b02      	ldr	r3, [pc, #8]	@ (802b4ac <raise+0xc>)
 802b4a2:	4601      	mov	r1, r0
 802b4a4:	6818      	ldr	r0, [r3, #0]
 802b4a6:	f7ff bfd2 	b.w	802b44e <_raise_r>
 802b4aa:	bf00      	nop
 802b4ac:	200000c8 	.word	0x200000c8

0802b4b0 <_fstat_r>:
 802b4b0:	b538      	push	{r3, r4, r5, lr}
 802b4b2:	4d07      	ldr	r5, [pc, #28]	@ (802b4d0 <_fstat_r+0x20>)
 802b4b4:	2300      	movs	r3, #0
 802b4b6:	4604      	mov	r4, r0
 802b4b8:	4608      	mov	r0, r1
 802b4ba:	4611      	mov	r1, r2
 802b4bc:	602b      	str	r3, [r5, #0]
 802b4be:	f7d8 f85c 	bl	800357a <_fstat>
 802b4c2:	1c43      	adds	r3, r0, #1
 802b4c4:	d102      	bne.n	802b4cc <_fstat_r+0x1c>
 802b4c6:	682b      	ldr	r3, [r5, #0]
 802b4c8:	b103      	cbz	r3, 802b4cc <_fstat_r+0x1c>
 802b4ca:	6023      	str	r3, [r4, #0]
 802b4cc:	bd38      	pop	{r3, r4, r5, pc}
 802b4ce:	bf00      	nop
 802b4d0:	200080e4 	.word	0x200080e4

0802b4d4 <_isatty_r>:
 802b4d4:	b538      	push	{r3, r4, r5, lr}
 802b4d6:	4d06      	ldr	r5, [pc, #24]	@ (802b4f0 <_isatty_r+0x1c>)
 802b4d8:	2300      	movs	r3, #0
 802b4da:	4604      	mov	r4, r0
 802b4dc:	4608      	mov	r0, r1
 802b4de:	602b      	str	r3, [r5, #0]
 802b4e0:	f7d8 f85b 	bl	800359a <_isatty>
 802b4e4:	1c43      	adds	r3, r0, #1
 802b4e6:	d102      	bne.n	802b4ee <_isatty_r+0x1a>
 802b4e8:	682b      	ldr	r3, [r5, #0]
 802b4ea:	b103      	cbz	r3, 802b4ee <_isatty_r+0x1a>
 802b4ec:	6023      	str	r3, [r4, #0]
 802b4ee:	bd38      	pop	{r3, r4, r5, pc}
 802b4f0:	200080e4 	.word	0x200080e4

0802b4f4 <_kill_r>:
 802b4f4:	b538      	push	{r3, r4, r5, lr}
 802b4f6:	4d07      	ldr	r5, [pc, #28]	@ (802b514 <_kill_r+0x20>)
 802b4f8:	2300      	movs	r3, #0
 802b4fa:	4604      	mov	r4, r0
 802b4fc:	4608      	mov	r0, r1
 802b4fe:	4611      	mov	r1, r2
 802b500:	602b      	str	r3, [r5, #0]
 802b502:	f7d7 fff6 	bl	80034f2 <_kill>
 802b506:	1c43      	adds	r3, r0, #1
 802b508:	d102      	bne.n	802b510 <_kill_r+0x1c>
 802b50a:	682b      	ldr	r3, [r5, #0]
 802b50c:	b103      	cbz	r3, 802b510 <_kill_r+0x1c>
 802b50e:	6023      	str	r3, [r4, #0]
 802b510:	bd38      	pop	{r3, r4, r5, pc}
 802b512:	bf00      	nop
 802b514:	200080e4 	.word	0x200080e4

0802b518 <_getpid_r>:
 802b518:	f7d7 bfe3 	b.w	80034e2 <_getpid>

0802b51c <_sbrk_r>:
 802b51c:	b538      	push	{r3, r4, r5, lr}
 802b51e:	4d06      	ldr	r5, [pc, #24]	@ (802b538 <_sbrk_r+0x1c>)
 802b520:	2300      	movs	r3, #0
 802b522:	4604      	mov	r4, r0
 802b524:	4608      	mov	r0, r1
 802b526:	602b      	str	r3, [r5, #0]
 802b528:	f7d8 f850 	bl	80035cc <_sbrk>
 802b52c:	1c43      	adds	r3, r0, #1
 802b52e:	d102      	bne.n	802b536 <_sbrk_r+0x1a>
 802b530:	682b      	ldr	r3, [r5, #0]
 802b532:	b103      	cbz	r3, 802b536 <_sbrk_r+0x1a>
 802b534:	6023      	str	r3, [r4, #0]
 802b536:	bd38      	pop	{r3, r4, r5, pc}
 802b538:	200080e4 	.word	0x200080e4

0802b53c <_calloc_r>:
 802b53c:	b570      	push	{r4, r5, r6, lr}
 802b53e:	fba1 5402 	umull	r5, r4, r1, r2
 802b542:	b93c      	cbnz	r4, 802b554 <_calloc_r+0x18>
 802b544:	4629      	mov	r1, r5
 802b546:	f7fe fd97 	bl	802a078 <_malloc_r>
 802b54a:	4606      	mov	r6, r0
 802b54c:	b928      	cbnz	r0, 802b55a <_calloc_r+0x1e>
 802b54e:	2600      	movs	r6, #0
 802b550:	4630      	mov	r0, r6
 802b552:	bd70      	pop	{r4, r5, r6, pc}
 802b554:	220c      	movs	r2, #12
 802b556:	6002      	str	r2, [r0, #0]
 802b558:	e7f9      	b.n	802b54e <_calloc_r+0x12>
 802b55a:	462a      	mov	r2, r5
 802b55c:	4621      	mov	r1, r4
 802b55e:	f7fd fe25 	bl	80291ac <memset>
 802b562:	e7f5      	b.n	802b550 <_calloc_r+0x14>

0802b564 <__ascii_mbtowc>:
 802b564:	b082      	sub	sp, #8
 802b566:	b901      	cbnz	r1, 802b56a <__ascii_mbtowc+0x6>
 802b568:	a901      	add	r1, sp, #4
 802b56a:	b142      	cbz	r2, 802b57e <__ascii_mbtowc+0x1a>
 802b56c:	b14b      	cbz	r3, 802b582 <__ascii_mbtowc+0x1e>
 802b56e:	7813      	ldrb	r3, [r2, #0]
 802b570:	600b      	str	r3, [r1, #0]
 802b572:	7812      	ldrb	r2, [r2, #0]
 802b574:	1e10      	subs	r0, r2, #0
 802b576:	bf18      	it	ne
 802b578:	2001      	movne	r0, #1
 802b57a:	b002      	add	sp, #8
 802b57c:	4770      	bx	lr
 802b57e:	4610      	mov	r0, r2
 802b580:	e7fb      	b.n	802b57a <__ascii_mbtowc+0x16>
 802b582:	f06f 0001 	mvn.w	r0, #1
 802b586:	e7f8      	b.n	802b57a <__ascii_mbtowc+0x16>

0802b588 <_realloc_r>:
 802b588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b58c:	4680      	mov	r8, r0
 802b58e:	4615      	mov	r5, r2
 802b590:	460c      	mov	r4, r1
 802b592:	b921      	cbnz	r1, 802b59e <_realloc_r+0x16>
 802b594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b598:	4611      	mov	r1, r2
 802b59a:	f7fe bd6d 	b.w	802a078 <_malloc_r>
 802b59e:	b92a      	cbnz	r2, 802b5ac <_realloc_r+0x24>
 802b5a0:	f7fe fcf6 	bl	8029f90 <_free_r>
 802b5a4:	2400      	movs	r4, #0
 802b5a6:	4620      	mov	r0, r4
 802b5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b5ac:	f000 f913 	bl	802b7d6 <_malloc_usable_size_r>
 802b5b0:	4285      	cmp	r5, r0
 802b5b2:	4606      	mov	r6, r0
 802b5b4:	d802      	bhi.n	802b5bc <_realloc_r+0x34>
 802b5b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802b5ba:	d8f4      	bhi.n	802b5a6 <_realloc_r+0x1e>
 802b5bc:	4629      	mov	r1, r5
 802b5be:	4640      	mov	r0, r8
 802b5c0:	f7fe fd5a 	bl	802a078 <_malloc_r>
 802b5c4:	4607      	mov	r7, r0
 802b5c6:	2800      	cmp	r0, #0
 802b5c8:	d0ec      	beq.n	802b5a4 <_realloc_r+0x1c>
 802b5ca:	42b5      	cmp	r5, r6
 802b5cc:	462a      	mov	r2, r5
 802b5ce:	4621      	mov	r1, r4
 802b5d0:	bf28      	it	cs
 802b5d2:	4632      	movcs	r2, r6
 802b5d4:	f7fd fe7b 	bl	80292ce <memcpy>
 802b5d8:	4621      	mov	r1, r4
 802b5da:	4640      	mov	r0, r8
 802b5dc:	f7fe fcd8 	bl	8029f90 <_free_r>
 802b5e0:	463c      	mov	r4, r7
 802b5e2:	e7e0      	b.n	802b5a6 <_realloc_r+0x1e>

0802b5e4 <_strtol_l.constprop.0>:
 802b5e4:	2b24      	cmp	r3, #36	@ 0x24
 802b5e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b5ea:	4686      	mov	lr, r0
 802b5ec:	4690      	mov	r8, r2
 802b5ee:	d801      	bhi.n	802b5f4 <_strtol_l.constprop.0+0x10>
 802b5f0:	2b01      	cmp	r3, #1
 802b5f2:	d106      	bne.n	802b602 <_strtol_l.constprop.0+0x1e>
 802b5f4:	f7fd fe3e 	bl	8029274 <__errno>
 802b5f8:	2316      	movs	r3, #22
 802b5fa:	6003      	str	r3, [r0, #0]
 802b5fc:	2000      	movs	r0, #0
 802b5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b602:	4834      	ldr	r0, [pc, #208]	@ (802b6d4 <_strtol_l.constprop.0+0xf0>)
 802b604:	460d      	mov	r5, r1
 802b606:	462a      	mov	r2, r5
 802b608:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b60c:	5d06      	ldrb	r6, [r0, r4]
 802b60e:	f016 0608 	ands.w	r6, r6, #8
 802b612:	d1f8      	bne.n	802b606 <_strtol_l.constprop.0+0x22>
 802b614:	2c2d      	cmp	r4, #45	@ 0x2d
 802b616:	d12d      	bne.n	802b674 <_strtol_l.constprop.0+0x90>
 802b618:	782c      	ldrb	r4, [r5, #0]
 802b61a:	2601      	movs	r6, #1
 802b61c:	1c95      	adds	r5, r2, #2
 802b61e:	f033 0210 	bics.w	r2, r3, #16
 802b622:	d109      	bne.n	802b638 <_strtol_l.constprop.0+0x54>
 802b624:	2c30      	cmp	r4, #48	@ 0x30
 802b626:	d12a      	bne.n	802b67e <_strtol_l.constprop.0+0x9a>
 802b628:	782a      	ldrb	r2, [r5, #0]
 802b62a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802b62e:	2a58      	cmp	r2, #88	@ 0x58
 802b630:	d125      	bne.n	802b67e <_strtol_l.constprop.0+0x9a>
 802b632:	786c      	ldrb	r4, [r5, #1]
 802b634:	2310      	movs	r3, #16
 802b636:	3502      	adds	r5, #2
 802b638:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 802b63c:	f10c 3cff 	add.w	ip, ip, #4294967295
 802b640:	2200      	movs	r2, #0
 802b642:	fbbc f9f3 	udiv	r9, ip, r3
 802b646:	4610      	mov	r0, r2
 802b648:	fb03 ca19 	mls	sl, r3, r9, ip
 802b64c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802b650:	2f09      	cmp	r7, #9
 802b652:	d81b      	bhi.n	802b68c <_strtol_l.constprop.0+0xa8>
 802b654:	463c      	mov	r4, r7
 802b656:	42a3      	cmp	r3, r4
 802b658:	dd27      	ble.n	802b6aa <_strtol_l.constprop.0+0xc6>
 802b65a:	1c57      	adds	r7, r2, #1
 802b65c:	d007      	beq.n	802b66e <_strtol_l.constprop.0+0x8a>
 802b65e:	4581      	cmp	r9, r0
 802b660:	d320      	bcc.n	802b6a4 <_strtol_l.constprop.0+0xc0>
 802b662:	d101      	bne.n	802b668 <_strtol_l.constprop.0+0x84>
 802b664:	45a2      	cmp	sl, r4
 802b666:	db1d      	blt.n	802b6a4 <_strtol_l.constprop.0+0xc0>
 802b668:	fb00 4003 	mla	r0, r0, r3, r4
 802b66c:	2201      	movs	r2, #1
 802b66e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b672:	e7eb      	b.n	802b64c <_strtol_l.constprop.0+0x68>
 802b674:	2c2b      	cmp	r4, #43	@ 0x2b
 802b676:	bf04      	itt	eq
 802b678:	782c      	ldrbeq	r4, [r5, #0]
 802b67a:	1c95      	addeq	r5, r2, #2
 802b67c:	e7cf      	b.n	802b61e <_strtol_l.constprop.0+0x3a>
 802b67e:	2b00      	cmp	r3, #0
 802b680:	d1da      	bne.n	802b638 <_strtol_l.constprop.0+0x54>
 802b682:	2c30      	cmp	r4, #48	@ 0x30
 802b684:	bf0c      	ite	eq
 802b686:	2308      	moveq	r3, #8
 802b688:	230a      	movne	r3, #10
 802b68a:	e7d5      	b.n	802b638 <_strtol_l.constprop.0+0x54>
 802b68c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802b690:	2f19      	cmp	r7, #25
 802b692:	d801      	bhi.n	802b698 <_strtol_l.constprop.0+0xb4>
 802b694:	3c37      	subs	r4, #55	@ 0x37
 802b696:	e7de      	b.n	802b656 <_strtol_l.constprop.0+0x72>
 802b698:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 802b69c:	2f19      	cmp	r7, #25
 802b69e:	d804      	bhi.n	802b6aa <_strtol_l.constprop.0+0xc6>
 802b6a0:	3c57      	subs	r4, #87	@ 0x57
 802b6a2:	e7d8      	b.n	802b656 <_strtol_l.constprop.0+0x72>
 802b6a4:	f04f 32ff 	mov.w	r2, #4294967295
 802b6a8:	e7e1      	b.n	802b66e <_strtol_l.constprop.0+0x8a>
 802b6aa:	1c53      	adds	r3, r2, #1
 802b6ac:	d108      	bne.n	802b6c0 <_strtol_l.constprop.0+0xdc>
 802b6ae:	2322      	movs	r3, #34	@ 0x22
 802b6b0:	f8ce 3000 	str.w	r3, [lr]
 802b6b4:	4660      	mov	r0, ip
 802b6b6:	f1b8 0f00 	cmp.w	r8, #0
 802b6ba:	d0a0      	beq.n	802b5fe <_strtol_l.constprop.0+0x1a>
 802b6bc:	1e69      	subs	r1, r5, #1
 802b6be:	e006      	b.n	802b6ce <_strtol_l.constprop.0+0xea>
 802b6c0:	b106      	cbz	r6, 802b6c4 <_strtol_l.constprop.0+0xe0>
 802b6c2:	4240      	negs	r0, r0
 802b6c4:	f1b8 0f00 	cmp.w	r8, #0
 802b6c8:	d099      	beq.n	802b5fe <_strtol_l.constprop.0+0x1a>
 802b6ca:	2a00      	cmp	r2, #0
 802b6cc:	d1f6      	bne.n	802b6bc <_strtol_l.constprop.0+0xd8>
 802b6ce:	f8c8 1000 	str.w	r1, [r8]
 802b6d2:	e794      	b.n	802b5fe <_strtol_l.constprop.0+0x1a>
 802b6d4:	08031c17 	.word	0x08031c17

0802b6d8 <_strtol_r>:
 802b6d8:	f7ff bf84 	b.w	802b5e4 <_strtol_l.constprop.0>

0802b6dc <_strtoul_l.constprop.0>:
 802b6dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802b6e0:	4e34      	ldr	r6, [pc, #208]	@ (802b7b4 <_strtoul_l.constprop.0+0xd8>)
 802b6e2:	4686      	mov	lr, r0
 802b6e4:	460d      	mov	r5, r1
 802b6e6:	4628      	mov	r0, r5
 802b6e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b6ec:	5d37      	ldrb	r7, [r6, r4]
 802b6ee:	f017 0708 	ands.w	r7, r7, #8
 802b6f2:	d1f8      	bne.n	802b6e6 <_strtoul_l.constprop.0+0xa>
 802b6f4:	2c2d      	cmp	r4, #45	@ 0x2d
 802b6f6:	d12f      	bne.n	802b758 <_strtoul_l.constprop.0+0x7c>
 802b6f8:	782c      	ldrb	r4, [r5, #0]
 802b6fa:	2701      	movs	r7, #1
 802b6fc:	1c85      	adds	r5, r0, #2
 802b6fe:	f033 0010 	bics.w	r0, r3, #16
 802b702:	d109      	bne.n	802b718 <_strtoul_l.constprop.0+0x3c>
 802b704:	2c30      	cmp	r4, #48	@ 0x30
 802b706:	d12c      	bne.n	802b762 <_strtoul_l.constprop.0+0x86>
 802b708:	7828      	ldrb	r0, [r5, #0]
 802b70a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 802b70e:	2858      	cmp	r0, #88	@ 0x58
 802b710:	d127      	bne.n	802b762 <_strtoul_l.constprop.0+0x86>
 802b712:	786c      	ldrb	r4, [r5, #1]
 802b714:	2310      	movs	r3, #16
 802b716:	3502      	adds	r5, #2
 802b718:	f04f 38ff 	mov.w	r8, #4294967295
 802b71c:	2600      	movs	r6, #0
 802b71e:	fbb8 f8f3 	udiv	r8, r8, r3
 802b722:	fb03 f908 	mul.w	r9, r3, r8
 802b726:	ea6f 0909 	mvn.w	r9, r9
 802b72a:	4630      	mov	r0, r6
 802b72c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 802b730:	f1bc 0f09 	cmp.w	ip, #9
 802b734:	d81c      	bhi.n	802b770 <_strtoul_l.constprop.0+0x94>
 802b736:	4664      	mov	r4, ip
 802b738:	42a3      	cmp	r3, r4
 802b73a:	dd2a      	ble.n	802b792 <_strtoul_l.constprop.0+0xb6>
 802b73c:	f1b6 3fff 	cmp.w	r6, #4294967295
 802b740:	d007      	beq.n	802b752 <_strtoul_l.constprop.0+0x76>
 802b742:	4580      	cmp	r8, r0
 802b744:	d322      	bcc.n	802b78c <_strtoul_l.constprop.0+0xb0>
 802b746:	d101      	bne.n	802b74c <_strtoul_l.constprop.0+0x70>
 802b748:	45a1      	cmp	r9, r4
 802b74a:	db1f      	blt.n	802b78c <_strtoul_l.constprop.0+0xb0>
 802b74c:	fb00 4003 	mla	r0, r0, r3, r4
 802b750:	2601      	movs	r6, #1
 802b752:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b756:	e7e9      	b.n	802b72c <_strtoul_l.constprop.0+0x50>
 802b758:	2c2b      	cmp	r4, #43	@ 0x2b
 802b75a:	bf04      	itt	eq
 802b75c:	782c      	ldrbeq	r4, [r5, #0]
 802b75e:	1c85      	addeq	r5, r0, #2
 802b760:	e7cd      	b.n	802b6fe <_strtoul_l.constprop.0+0x22>
 802b762:	2b00      	cmp	r3, #0
 802b764:	d1d8      	bne.n	802b718 <_strtoul_l.constprop.0+0x3c>
 802b766:	2c30      	cmp	r4, #48	@ 0x30
 802b768:	bf0c      	ite	eq
 802b76a:	2308      	moveq	r3, #8
 802b76c:	230a      	movne	r3, #10
 802b76e:	e7d3      	b.n	802b718 <_strtoul_l.constprop.0+0x3c>
 802b770:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 802b774:	f1bc 0f19 	cmp.w	ip, #25
 802b778:	d801      	bhi.n	802b77e <_strtoul_l.constprop.0+0xa2>
 802b77a:	3c37      	subs	r4, #55	@ 0x37
 802b77c:	e7dc      	b.n	802b738 <_strtoul_l.constprop.0+0x5c>
 802b77e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 802b782:	f1bc 0f19 	cmp.w	ip, #25
 802b786:	d804      	bhi.n	802b792 <_strtoul_l.constprop.0+0xb6>
 802b788:	3c57      	subs	r4, #87	@ 0x57
 802b78a:	e7d5      	b.n	802b738 <_strtoul_l.constprop.0+0x5c>
 802b78c:	f04f 36ff 	mov.w	r6, #4294967295
 802b790:	e7df      	b.n	802b752 <_strtoul_l.constprop.0+0x76>
 802b792:	1c73      	adds	r3, r6, #1
 802b794:	d106      	bne.n	802b7a4 <_strtoul_l.constprop.0+0xc8>
 802b796:	2322      	movs	r3, #34	@ 0x22
 802b798:	f8ce 3000 	str.w	r3, [lr]
 802b79c:	4630      	mov	r0, r6
 802b79e:	b932      	cbnz	r2, 802b7ae <_strtoul_l.constprop.0+0xd2>
 802b7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b7a4:	b107      	cbz	r7, 802b7a8 <_strtoul_l.constprop.0+0xcc>
 802b7a6:	4240      	negs	r0, r0
 802b7a8:	2a00      	cmp	r2, #0
 802b7aa:	d0f9      	beq.n	802b7a0 <_strtoul_l.constprop.0+0xc4>
 802b7ac:	b106      	cbz	r6, 802b7b0 <_strtoul_l.constprop.0+0xd4>
 802b7ae:	1e69      	subs	r1, r5, #1
 802b7b0:	6011      	str	r1, [r2, #0]
 802b7b2:	e7f5      	b.n	802b7a0 <_strtoul_l.constprop.0+0xc4>
 802b7b4:	08031c17 	.word	0x08031c17

0802b7b8 <_strtoul_r>:
 802b7b8:	f7ff bf90 	b.w	802b6dc <_strtoul_l.constprop.0>

0802b7bc <__ascii_wctomb>:
 802b7bc:	4603      	mov	r3, r0
 802b7be:	4608      	mov	r0, r1
 802b7c0:	b141      	cbz	r1, 802b7d4 <__ascii_wctomb+0x18>
 802b7c2:	2aff      	cmp	r2, #255	@ 0xff
 802b7c4:	d904      	bls.n	802b7d0 <__ascii_wctomb+0x14>
 802b7c6:	228a      	movs	r2, #138	@ 0x8a
 802b7c8:	601a      	str	r2, [r3, #0]
 802b7ca:	f04f 30ff 	mov.w	r0, #4294967295
 802b7ce:	4770      	bx	lr
 802b7d0:	700a      	strb	r2, [r1, #0]
 802b7d2:	2001      	movs	r0, #1
 802b7d4:	4770      	bx	lr

0802b7d6 <_malloc_usable_size_r>:
 802b7d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b7da:	1f18      	subs	r0, r3, #4
 802b7dc:	2b00      	cmp	r3, #0
 802b7de:	bfbc      	itt	lt
 802b7e0:	580b      	ldrlt	r3, [r1, r0]
 802b7e2:	18c0      	addlt	r0, r0, r3
 802b7e4:	4770      	bx	lr
	...

0802b7e8 <pow>:
 802b7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b7ea:	ed2d 8b02 	vpush	{d8}
 802b7ee:	eeb0 8a40 	vmov.f32	s16, s0
 802b7f2:	eef0 8a60 	vmov.f32	s17, s1
 802b7f6:	ec55 4b11 	vmov	r4, r5, d1
 802b7fa:	f000 f979 	bl	802baf0 <__ieee754_pow>
 802b7fe:	4622      	mov	r2, r4
 802b800:	462b      	mov	r3, r5
 802b802:	4620      	mov	r0, r4
 802b804:	4629      	mov	r1, r5
 802b806:	ec57 6b10 	vmov	r6, r7, d0
 802b80a:	f7d5 f977 	bl	8000afc <__aeabi_dcmpun>
 802b80e:	2800      	cmp	r0, #0
 802b810:	d13b      	bne.n	802b88a <pow+0xa2>
 802b812:	ec51 0b18 	vmov	r0, r1, d8
 802b816:	2200      	movs	r2, #0
 802b818:	2300      	movs	r3, #0
 802b81a:	f7d5 f93d 	bl	8000a98 <__aeabi_dcmpeq>
 802b81e:	b1b8      	cbz	r0, 802b850 <pow+0x68>
 802b820:	2200      	movs	r2, #0
 802b822:	2300      	movs	r3, #0
 802b824:	4620      	mov	r0, r4
 802b826:	4629      	mov	r1, r5
 802b828:	f7d5 f936 	bl	8000a98 <__aeabi_dcmpeq>
 802b82c:	2800      	cmp	r0, #0
 802b82e:	d146      	bne.n	802b8be <pow+0xd6>
 802b830:	ec45 4b10 	vmov	d0, r4, r5
 802b834:	f000 f874 	bl	802b920 <finite>
 802b838:	b338      	cbz	r0, 802b88a <pow+0xa2>
 802b83a:	2200      	movs	r2, #0
 802b83c:	2300      	movs	r3, #0
 802b83e:	4620      	mov	r0, r4
 802b840:	4629      	mov	r1, r5
 802b842:	f7d5 f933 	bl	8000aac <__aeabi_dcmplt>
 802b846:	b300      	cbz	r0, 802b88a <pow+0xa2>
 802b848:	f7fd fd14 	bl	8029274 <__errno>
 802b84c:	2322      	movs	r3, #34	@ 0x22
 802b84e:	e01b      	b.n	802b888 <pow+0xa0>
 802b850:	ec47 6b10 	vmov	d0, r6, r7
 802b854:	f000 f864 	bl	802b920 <finite>
 802b858:	b9e0      	cbnz	r0, 802b894 <pow+0xac>
 802b85a:	eeb0 0a48 	vmov.f32	s0, s16
 802b85e:	eef0 0a68 	vmov.f32	s1, s17
 802b862:	f000 f85d 	bl	802b920 <finite>
 802b866:	b1a8      	cbz	r0, 802b894 <pow+0xac>
 802b868:	ec45 4b10 	vmov	d0, r4, r5
 802b86c:	f000 f858 	bl	802b920 <finite>
 802b870:	b180      	cbz	r0, 802b894 <pow+0xac>
 802b872:	4632      	mov	r2, r6
 802b874:	463b      	mov	r3, r7
 802b876:	4630      	mov	r0, r6
 802b878:	4639      	mov	r1, r7
 802b87a:	f7d5 f93f 	bl	8000afc <__aeabi_dcmpun>
 802b87e:	2800      	cmp	r0, #0
 802b880:	d0e2      	beq.n	802b848 <pow+0x60>
 802b882:	f7fd fcf7 	bl	8029274 <__errno>
 802b886:	2321      	movs	r3, #33	@ 0x21
 802b888:	6003      	str	r3, [r0, #0]
 802b88a:	ecbd 8b02 	vpop	{d8}
 802b88e:	ec47 6b10 	vmov	d0, r6, r7
 802b892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b894:	2200      	movs	r2, #0
 802b896:	2300      	movs	r3, #0
 802b898:	4630      	mov	r0, r6
 802b89a:	4639      	mov	r1, r7
 802b89c:	f7d5 f8fc 	bl	8000a98 <__aeabi_dcmpeq>
 802b8a0:	2800      	cmp	r0, #0
 802b8a2:	d0f2      	beq.n	802b88a <pow+0xa2>
 802b8a4:	eeb0 0a48 	vmov.f32	s0, s16
 802b8a8:	eef0 0a68 	vmov.f32	s1, s17
 802b8ac:	f000 f838 	bl	802b920 <finite>
 802b8b0:	2800      	cmp	r0, #0
 802b8b2:	d0ea      	beq.n	802b88a <pow+0xa2>
 802b8b4:	ec45 4b10 	vmov	d0, r4, r5
 802b8b8:	f000 f832 	bl	802b920 <finite>
 802b8bc:	e7c3      	b.n	802b846 <pow+0x5e>
 802b8be:	4f01      	ldr	r7, [pc, #4]	@ (802b8c4 <pow+0xdc>)
 802b8c0:	2600      	movs	r6, #0
 802b8c2:	e7e2      	b.n	802b88a <pow+0xa2>
 802b8c4:	3ff00000 	.word	0x3ff00000

0802b8c8 <sqrt>:
 802b8c8:	b538      	push	{r3, r4, r5, lr}
 802b8ca:	ed2d 8b02 	vpush	{d8}
 802b8ce:	ec55 4b10 	vmov	r4, r5, d0
 802b8d2:	f000 f831 	bl	802b938 <__ieee754_sqrt>
 802b8d6:	4622      	mov	r2, r4
 802b8d8:	462b      	mov	r3, r5
 802b8da:	4620      	mov	r0, r4
 802b8dc:	4629      	mov	r1, r5
 802b8de:	eeb0 8a40 	vmov.f32	s16, s0
 802b8e2:	eef0 8a60 	vmov.f32	s17, s1
 802b8e6:	f7d5 f909 	bl	8000afc <__aeabi_dcmpun>
 802b8ea:	b990      	cbnz	r0, 802b912 <sqrt+0x4a>
 802b8ec:	2200      	movs	r2, #0
 802b8ee:	2300      	movs	r3, #0
 802b8f0:	4620      	mov	r0, r4
 802b8f2:	4629      	mov	r1, r5
 802b8f4:	f7d5 f8da 	bl	8000aac <__aeabi_dcmplt>
 802b8f8:	b158      	cbz	r0, 802b912 <sqrt+0x4a>
 802b8fa:	f7fd fcbb 	bl	8029274 <__errno>
 802b8fe:	2321      	movs	r3, #33	@ 0x21
 802b900:	6003      	str	r3, [r0, #0]
 802b902:	2200      	movs	r2, #0
 802b904:	2300      	movs	r3, #0
 802b906:	4610      	mov	r0, r2
 802b908:	4619      	mov	r1, r3
 802b90a:	f7d4 ff87 	bl	800081c <__aeabi_ddiv>
 802b90e:	ec41 0b18 	vmov	d8, r0, r1
 802b912:	eeb0 0a48 	vmov.f32	s0, s16
 802b916:	eef0 0a68 	vmov.f32	s1, s17
 802b91a:	ecbd 8b02 	vpop	{d8}
 802b91e:	bd38      	pop	{r3, r4, r5, pc}

0802b920 <finite>:
 802b920:	b082      	sub	sp, #8
 802b922:	ed8d 0b00 	vstr	d0, [sp]
 802b926:	9801      	ldr	r0, [sp, #4]
 802b928:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 802b92c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 802b930:	0fc0      	lsrs	r0, r0, #31
 802b932:	b002      	add	sp, #8
 802b934:	4770      	bx	lr
	...

0802b938 <__ieee754_sqrt>:
 802b938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b93c:	4a68      	ldr	r2, [pc, #416]	@ (802bae0 <__ieee754_sqrt+0x1a8>)
 802b93e:	ec55 4b10 	vmov	r4, r5, d0
 802b942:	43aa      	bics	r2, r5
 802b944:	462b      	mov	r3, r5
 802b946:	4621      	mov	r1, r4
 802b948:	d110      	bne.n	802b96c <__ieee754_sqrt+0x34>
 802b94a:	4622      	mov	r2, r4
 802b94c:	4620      	mov	r0, r4
 802b94e:	4629      	mov	r1, r5
 802b950:	f7d4 fe3a 	bl	80005c8 <__aeabi_dmul>
 802b954:	4602      	mov	r2, r0
 802b956:	460b      	mov	r3, r1
 802b958:	4620      	mov	r0, r4
 802b95a:	4629      	mov	r1, r5
 802b95c:	f7d4 fc7e 	bl	800025c <__adddf3>
 802b960:	4604      	mov	r4, r0
 802b962:	460d      	mov	r5, r1
 802b964:	ec45 4b10 	vmov	d0, r4, r5
 802b968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b96c:	2d00      	cmp	r5, #0
 802b96e:	dc0e      	bgt.n	802b98e <__ieee754_sqrt+0x56>
 802b970:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 802b974:	4322      	orrs	r2, r4
 802b976:	d0f5      	beq.n	802b964 <__ieee754_sqrt+0x2c>
 802b978:	b19d      	cbz	r5, 802b9a2 <__ieee754_sqrt+0x6a>
 802b97a:	4622      	mov	r2, r4
 802b97c:	4620      	mov	r0, r4
 802b97e:	4629      	mov	r1, r5
 802b980:	f7d4 fc6a 	bl	8000258 <__aeabi_dsub>
 802b984:	4602      	mov	r2, r0
 802b986:	460b      	mov	r3, r1
 802b988:	f7d4 ff48 	bl	800081c <__aeabi_ddiv>
 802b98c:	e7e8      	b.n	802b960 <__ieee754_sqrt+0x28>
 802b98e:	152a      	asrs	r2, r5, #20
 802b990:	d115      	bne.n	802b9be <__ieee754_sqrt+0x86>
 802b992:	2000      	movs	r0, #0
 802b994:	e009      	b.n	802b9aa <__ieee754_sqrt+0x72>
 802b996:	0acb      	lsrs	r3, r1, #11
 802b998:	3a15      	subs	r2, #21
 802b99a:	0549      	lsls	r1, r1, #21
 802b99c:	2b00      	cmp	r3, #0
 802b99e:	d0fa      	beq.n	802b996 <__ieee754_sqrt+0x5e>
 802b9a0:	e7f7      	b.n	802b992 <__ieee754_sqrt+0x5a>
 802b9a2:	462a      	mov	r2, r5
 802b9a4:	e7fa      	b.n	802b99c <__ieee754_sqrt+0x64>
 802b9a6:	005b      	lsls	r3, r3, #1
 802b9a8:	3001      	adds	r0, #1
 802b9aa:	02dc      	lsls	r4, r3, #11
 802b9ac:	d5fb      	bpl.n	802b9a6 <__ieee754_sqrt+0x6e>
 802b9ae:	1e44      	subs	r4, r0, #1
 802b9b0:	1b12      	subs	r2, r2, r4
 802b9b2:	f1c0 0420 	rsb	r4, r0, #32
 802b9b6:	fa21 f404 	lsr.w	r4, r1, r4
 802b9ba:	4323      	orrs	r3, r4
 802b9bc:	4081      	lsls	r1, r0
 802b9be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802b9c2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 802b9c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802b9ca:	07d2      	lsls	r2, r2, #31
 802b9cc:	bf5c      	itt	pl
 802b9ce:	005b      	lslpl	r3, r3, #1
 802b9d0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 802b9d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802b9d8:	bf58      	it	pl
 802b9da:	0049      	lslpl	r1, r1, #1
 802b9dc:	2600      	movs	r6, #0
 802b9de:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 802b9e2:	106d      	asrs	r5, r5, #1
 802b9e4:	0049      	lsls	r1, r1, #1
 802b9e6:	2016      	movs	r0, #22
 802b9e8:	4632      	mov	r2, r6
 802b9ea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 802b9ee:	1917      	adds	r7, r2, r4
 802b9f0:	429f      	cmp	r7, r3
 802b9f2:	bfde      	ittt	le
 802b9f4:	193a      	addle	r2, r7, r4
 802b9f6:	1bdb      	suble	r3, r3, r7
 802b9f8:	1936      	addle	r6, r6, r4
 802b9fa:	0fcf      	lsrs	r7, r1, #31
 802b9fc:	3801      	subs	r0, #1
 802b9fe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 802ba02:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802ba06:	ea4f 0454 	mov.w	r4, r4, lsr #1
 802ba0a:	d1f0      	bne.n	802b9ee <__ieee754_sqrt+0xb6>
 802ba0c:	4604      	mov	r4, r0
 802ba0e:	2720      	movs	r7, #32
 802ba10:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 802ba14:	429a      	cmp	r2, r3
 802ba16:	eb00 0e0c 	add.w	lr, r0, ip
 802ba1a:	db02      	blt.n	802ba22 <__ieee754_sqrt+0xea>
 802ba1c:	d113      	bne.n	802ba46 <__ieee754_sqrt+0x10e>
 802ba1e:	458e      	cmp	lr, r1
 802ba20:	d811      	bhi.n	802ba46 <__ieee754_sqrt+0x10e>
 802ba22:	f1be 0f00 	cmp.w	lr, #0
 802ba26:	eb0e 000c 	add.w	r0, lr, ip
 802ba2a:	da42      	bge.n	802bab2 <__ieee754_sqrt+0x17a>
 802ba2c:	2800      	cmp	r0, #0
 802ba2e:	db40      	blt.n	802bab2 <__ieee754_sqrt+0x17a>
 802ba30:	f102 0801 	add.w	r8, r2, #1
 802ba34:	1a9b      	subs	r3, r3, r2
 802ba36:	458e      	cmp	lr, r1
 802ba38:	bf88      	it	hi
 802ba3a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 802ba3e:	eba1 010e 	sub.w	r1, r1, lr
 802ba42:	4464      	add	r4, ip
 802ba44:	4642      	mov	r2, r8
 802ba46:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 802ba4a:	3f01      	subs	r7, #1
 802ba4c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 802ba50:	ea4f 0141 	mov.w	r1, r1, lsl #1
 802ba54:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 802ba58:	d1dc      	bne.n	802ba14 <__ieee754_sqrt+0xdc>
 802ba5a:	4319      	orrs	r1, r3
 802ba5c:	d01b      	beq.n	802ba96 <__ieee754_sqrt+0x15e>
 802ba5e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 802bae4 <__ieee754_sqrt+0x1ac>
 802ba62:	f8df b084 	ldr.w	fp, [pc, #132]	@ 802bae8 <__ieee754_sqrt+0x1b0>
 802ba66:	e9da 0100 	ldrd	r0, r1, [sl]
 802ba6a:	e9db 2300 	ldrd	r2, r3, [fp]
 802ba6e:	f7d4 fbf3 	bl	8000258 <__aeabi_dsub>
 802ba72:	e9da 8900 	ldrd	r8, r9, [sl]
 802ba76:	4602      	mov	r2, r0
 802ba78:	460b      	mov	r3, r1
 802ba7a:	4640      	mov	r0, r8
 802ba7c:	4649      	mov	r1, r9
 802ba7e:	f7d5 f81f 	bl	8000ac0 <__aeabi_dcmple>
 802ba82:	b140      	cbz	r0, 802ba96 <__ieee754_sqrt+0x15e>
 802ba84:	f1b4 3fff 	cmp.w	r4, #4294967295
 802ba88:	e9da 0100 	ldrd	r0, r1, [sl]
 802ba8c:	e9db 2300 	ldrd	r2, r3, [fp]
 802ba90:	d111      	bne.n	802bab6 <__ieee754_sqrt+0x17e>
 802ba92:	3601      	adds	r6, #1
 802ba94:	463c      	mov	r4, r7
 802ba96:	1072      	asrs	r2, r6, #1
 802ba98:	0863      	lsrs	r3, r4, #1
 802ba9a:	07f1      	lsls	r1, r6, #31
 802ba9c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 802baa0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 802baa4:	bf48      	it	mi
 802baa6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 802baaa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 802baae:	4618      	mov	r0, r3
 802bab0:	e756      	b.n	802b960 <__ieee754_sqrt+0x28>
 802bab2:	4690      	mov	r8, r2
 802bab4:	e7be      	b.n	802ba34 <__ieee754_sqrt+0xfc>
 802bab6:	f7d4 fbd1 	bl	800025c <__adddf3>
 802baba:	e9da 8900 	ldrd	r8, r9, [sl]
 802babe:	4602      	mov	r2, r0
 802bac0:	460b      	mov	r3, r1
 802bac2:	4640      	mov	r0, r8
 802bac4:	4649      	mov	r1, r9
 802bac6:	f7d4 fff1 	bl	8000aac <__aeabi_dcmplt>
 802baca:	b120      	cbz	r0, 802bad6 <__ieee754_sqrt+0x19e>
 802bacc:	1ca0      	adds	r0, r4, #2
 802bace:	bf08      	it	eq
 802bad0:	3601      	addeq	r6, #1
 802bad2:	3402      	adds	r4, #2
 802bad4:	e7df      	b.n	802ba96 <__ieee754_sqrt+0x15e>
 802bad6:	1c63      	adds	r3, r4, #1
 802bad8:	f023 0401 	bic.w	r4, r3, #1
 802badc:	e7db      	b.n	802ba96 <__ieee754_sqrt+0x15e>
 802bade:	bf00      	nop
 802bae0:	7ff00000 	.word	0x7ff00000
 802bae4:	20000290 	.word	0x20000290
 802bae8:	20000288 	.word	0x20000288
 802baec:	00000000 	.word	0x00000000

0802baf0 <__ieee754_pow>:
 802baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802baf4:	b091      	sub	sp, #68	@ 0x44
 802baf6:	ed8d 1b00 	vstr	d1, [sp]
 802bafa:	e9dd 1900 	ldrd	r1, r9, [sp]
 802bafe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 802bb02:	ea5a 0001 	orrs.w	r0, sl, r1
 802bb06:	ec57 6b10 	vmov	r6, r7, d0
 802bb0a:	d113      	bne.n	802bb34 <__ieee754_pow+0x44>
 802bb0c:	19b3      	adds	r3, r6, r6
 802bb0e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 802bb12:	4152      	adcs	r2, r2
 802bb14:	4298      	cmp	r0, r3
 802bb16:	4b98      	ldr	r3, [pc, #608]	@ (802bd78 <__ieee754_pow+0x288>)
 802bb18:	4193      	sbcs	r3, r2
 802bb1a:	f080 84ea 	bcs.w	802c4f2 <__ieee754_pow+0xa02>
 802bb1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 802bb22:	4630      	mov	r0, r6
 802bb24:	4639      	mov	r1, r7
 802bb26:	f7d4 fb99 	bl	800025c <__adddf3>
 802bb2a:	ec41 0b10 	vmov	d0, r0, r1
 802bb2e:	b011      	add	sp, #68	@ 0x44
 802bb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb34:	4a91      	ldr	r2, [pc, #580]	@ (802bd7c <__ieee754_pow+0x28c>)
 802bb36:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 802bb3a:	4590      	cmp	r8, r2
 802bb3c:	463d      	mov	r5, r7
 802bb3e:	4633      	mov	r3, r6
 802bb40:	d806      	bhi.n	802bb50 <__ieee754_pow+0x60>
 802bb42:	d101      	bne.n	802bb48 <__ieee754_pow+0x58>
 802bb44:	2e00      	cmp	r6, #0
 802bb46:	d1ea      	bne.n	802bb1e <__ieee754_pow+0x2e>
 802bb48:	4592      	cmp	sl, r2
 802bb4a:	d801      	bhi.n	802bb50 <__ieee754_pow+0x60>
 802bb4c:	d10e      	bne.n	802bb6c <__ieee754_pow+0x7c>
 802bb4e:	b169      	cbz	r1, 802bb6c <__ieee754_pow+0x7c>
 802bb50:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 802bb54:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 802bb58:	431d      	orrs	r5, r3
 802bb5a:	d1e0      	bne.n	802bb1e <__ieee754_pow+0x2e>
 802bb5c:	e9dd 3200 	ldrd	r3, r2, [sp]
 802bb60:	18db      	adds	r3, r3, r3
 802bb62:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 802bb66:	4152      	adcs	r2, r2
 802bb68:	429d      	cmp	r5, r3
 802bb6a:	e7d4      	b.n	802bb16 <__ieee754_pow+0x26>
 802bb6c:	2d00      	cmp	r5, #0
 802bb6e:	46c3      	mov	fp, r8
 802bb70:	da3a      	bge.n	802bbe8 <__ieee754_pow+0xf8>
 802bb72:	4a83      	ldr	r2, [pc, #524]	@ (802bd80 <__ieee754_pow+0x290>)
 802bb74:	4592      	cmp	sl, r2
 802bb76:	d84d      	bhi.n	802bc14 <__ieee754_pow+0x124>
 802bb78:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 802bb7c:	4592      	cmp	sl, r2
 802bb7e:	f240 84c7 	bls.w	802c510 <__ieee754_pow+0xa20>
 802bb82:	ea4f 522a 	mov.w	r2, sl, asr #20
 802bb86:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 802bb8a:	2a14      	cmp	r2, #20
 802bb8c:	dd0f      	ble.n	802bbae <__ieee754_pow+0xbe>
 802bb8e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 802bb92:	fa21 f402 	lsr.w	r4, r1, r2
 802bb96:	fa04 f202 	lsl.w	r2, r4, r2
 802bb9a:	428a      	cmp	r2, r1
 802bb9c:	f040 84b8 	bne.w	802c510 <__ieee754_pow+0xa20>
 802bba0:	f004 0401 	and.w	r4, r4, #1
 802bba4:	f1c4 0402 	rsb	r4, r4, #2
 802bba8:	2900      	cmp	r1, #0
 802bbaa:	d158      	bne.n	802bc5e <__ieee754_pow+0x16e>
 802bbac:	e00e      	b.n	802bbcc <__ieee754_pow+0xdc>
 802bbae:	2900      	cmp	r1, #0
 802bbb0:	d154      	bne.n	802bc5c <__ieee754_pow+0x16c>
 802bbb2:	f1c2 0214 	rsb	r2, r2, #20
 802bbb6:	fa4a f402 	asr.w	r4, sl, r2
 802bbba:	fa04 f202 	lsl.w	r2, r4, r2
 802bbbe:	4552      	cmp	r2, sl
 802bbc0:	f040 84a3 	bne.w	802c50a <__ieee754_pow+0xa1a>
 802bbc4:	f004 0401 	and.w	r4, r4, #1
 802bbc8:	f1c4 0402 	rsb	r4, r4, #2
 802bbcc:	4a6d      	ldr	r2, [pc, #436]	@ (802bd84 <__ieee754_pow+0x294>)
 802bbce:	4592      	cmp	sl, r2
 802bbd0:	d12e      	bne.n	802bc30 <__ieee754_pow+0x140>
 802bbd2:	f1b9 0f00 	cmp.w	r9, #0
 802bbd6:	f280 8494 	bge.w	802c502 <__ieee754_pow+0xa12>
 802bbda:	496a      	ldr	r1, [pc, #424]	@ (802bd84 <__ieee754_pow+0x294>)
 802bbdc:	4632      	mov	r2, r6
 802bbde:	463b      	mov	r3, r7
 802bbe0:	2000      	movs	r0, #0
 802bbe2:	f7d4 fe1b 	bl	800081c <__aeabi_ddiv>
 802bbe6:	e7a0      	b.n	802bb2a <__ieee754_pow+0x3a>
 802bbe8:	2400      	movs	r4, #0
 802bbea:	bbc1      	cbnz	r1, 802bc5e <__ieee754_pow+0x16e>
 802bbec:	4a63      	ldr	r2, [pc, #396]	@ (802bd7c <__ieee754_pow+0x28c>)
 802bbee:	4592      	cmp	sl, r2
 802bbf0:	d1ec      	bne.n	802bbcc <__ieee754_pow+0xdc>
 802bbf2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 802bbf6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 802bbfa:	431a      	orrs	r2, r3
 802bbfc:	f000 8479 	beq.w	802c4f2 <__ieee754_pow+0xa02>
 802bc00:	4b61      	ldr	r3, [pc, #388]	@ (802bd88 <__ieee754_pow+0x298>)
 802bc02:	4598      	cmp	r8, r3
 802bc04:	d908      	bls.n	802bc18 <__ieee754_pow+0x128>
 802bc06:	f1b9 0f00 	cmp.w	r9, #0
 802bc0a:	f2c0 8476 	blt.w	802c4fa <__ieee754_pow+0xa0a>
 802bc0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 802bc12:	e78a      	b.n	802bb2a <__ieee754_pow+0x3a>
 802bc14:	2402      	movs	r4, #2
 802bc16:	e7e8      	b.n	802bbea <__ieee754_pow+0xfa>
 802bc18:	f1b9 0f00 	cmp.w	r9, #0
 802bc1c:	f04f 0000 	mov.w	r0, #0
 802bc20:	f04f 0100 	mov.w	r1, #0
 802bc24:	da81      	bge.n	802bb2a <__ieee754_pow+0x3a>
 802bc26:	e9dd 0300 	ldrd	r0, r3, [sp]
 802bc2a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 802bc2e:	e77c      	b.n	802bb2a <__ieee754_pow+0x3a>
 802bc30:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 802bc34:	d106      	bne.n	802bc44 <__ieee754_pow+0x154>
 802bc36:	4632      	mov	r2, r6
 802bc38:	463b      	mov	r3, r7
 802bc3a:	4630      	mov	r0, r6
 802bc3c:	4639      	mov	r1, r7
 802bc3e:	f7d4 fcc3 	bl	80005c8 <__aeabi_dmul>
 802bc42:	e772      	b.n	802bb2a <__ieee754_pow+0x3a>
 802bc44:	4a51      	ldr	r2, [pc, #324]	@ (802bd8c <__ieee754_pow+0x29c>)
 802bc46:	4591      	cmp	r9, r2
 802bc48:	d109      	bne.n	802bc5e <__ieee754_pow+0x16e>
 802bc4a:	2d00      	cmp	r5, #0
 802bc4c:	db07      	blt.n	802bc5e <__ieee754_pow+0x16e>
 802bc4e:	ec47 6b10 	vmov	d0, r6, r7
 802bc52:	b011      	add	sp, #68	@ 0x44
 802bc54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bc58:	f7ff be6e 	b.w	802b938 <__ieee754_sqrt>
 802bc5c:	2400      	movs	r4, #0
 802bc5e:	ec47 6b10 	vmov	d0, r6, r7
 802bc62:	9302      	str	r3, [sp, #8]
 802bc64:	f000 fc88 	bl	802c578 <fabs>
 802bc68:	9b02      	ldr	r3, [sp, #8]
 802bc6a:	ec51 0b10 	vmov	r0, r1, d0
 802bc6e:	bb53      	cbnz	r3, 802bcc6 <__ieee754_pow+0x1d6>
 802bc70:	4b44      	ldr	r3, [pc, #272]	@ (802bd84 <__ieee754_pow+0x294>)
 802bc72:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 802bc76:	429a      	cmp	r2, r3
 802bc78:	d002      	beq.n	802bc80 <__ieee754_pow+0x190>
 802bc7a:	f1b8 0f00 	cmp.w	r8, #0
 802bc7e:	d122      	bne.n	802bcc6 <__ieee754_pow+0x1d6>
 802bc80:	f1b9 0f00 	cmp.w	r9, #0
 802bc84:	da05      	bge.n	802bc92 <__ieee754_pow+0x1a2>
 802bc86:	4602      	mov	r2, r0
 802bc88:	460b      	mov	r3, r1
 802bc8a:	2000      	movs	r0, #0
 802bc8c:	493d      	ldr	r1, [pc, #244]	@ (802bd84 <__ieee754_pow+0x294>)
 802bc8e:	f7d4 fdc5 	bl	800081c <__aeabi_ddiv>
 802bc92:	2d00      	cmp	r5, #0
 802bc94:	f6bf af49 	bge.w	802bb2a <__ieee754_pow+0x3a>
 802bc98:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 802bc9c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 802bca0:	ea58 0804 	orrs.w	r8, r8, r4
 802bca4:	d108      	bne.n	802bcb8 <__ieee754_pow+0x1c8>
 802bca6:	4602      	mov	r2, r0
 802bca8:	460b      	mov	r3, r1
 802bcaa:	4610      	mov	r0, r2
 802bcac:	4619      	mov	r1, r3
 802bcae:	f7d4 fad3 	bl	8000258 <__aeabi_dsub>
 802bcb2:	4602      	mov	r2, r0
 802bcb4:	460b      	mov	r3, r1
 802bcb6:	e794      	b.n	802bbe2 <__ieee754_pow+0xf2>
 802bcb8:	2c01      	cmp	r4, #1
 802bcba:	f47f af36 	bne.w	802bb2a <__ieee754_pow+0x3a>
 802bcbe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802bcc2:	4619      	mov	r1, r3
 802bcc4:	e731      	b.n	802bb2a <__ieee754_pow+0x3a>
 802bcc6:	0feb      	lsrs	r3, r5, #31
 802bcc8:	3b01      	subs	r3, #1
 802bcca:	ea53 0204 	orrs.w	r2, r3, r4
 802bcce:	d102      	bne.n	802bcd6 <__ieee754_pow+0x1e6>
 802bcd0:	4632      	mov	r2, r6
 802bcd2:	463b      	mov	r3, r7
 802bcd4:	e7e9      	b.n	802bcaa <__ieee754_pow+0x1ba>
 802bcd6:	3c01      	subs	r4, #1
 802bcd8:	431c      	orrs	r4, r3
 802bcda:	d016      	beq.n	802bd0a <__ieee754_pow+0x21a>
 802bcdc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 802bd68 <__ieee754_pow+0x278>
 802bce0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 802bce4:	ed8d 7b02 	vstr	d7, [sp, #8]
 802bce8:	f240 8112 	bls.w	802bf10 <__ieee754_pow+0x420>
 802bcec:	4b28      	ldr	r3, [pc, #160]	@ (802bd90 <__ieee754_pow+0x2a0>)
 802bcee:	459a      	cmp	sl, r3
 802bcf0:	4b25      	ldr	r3, [pc, #148]	@ (802bd88 <__ieee754_pow+0x298>)
 802bcf2:	d916      	bls.n	802bd22 <__ieee754_pow+0x232>
 802bcf4:	4598      	cmp	r8, r3
 802bcf6:	d80b      	bhi.n	802bd10 <__ieee754_pow+0x220>
 802bcf8:	f1b9 0f00 	cmp.w	r9, #0
 802bcfc:	da0b      	bge.n	802bd16 <__ieee754_pow+0x226>
 802bcfe:	2000      	movs	r0, #0
 802bd00:	b011      	add	sp, #68	@ 0x44
 802bd02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bd06:	f000 bcf3 	b.w	802c6f0 <__math_oflow>
 802bd0a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 802bd70 <__ieee754_pow+0x280>
 802bd0e:	e7e7      	b.n	802bce0 <__ieee754_pow+0x1f0>
 802bd10:	f1b9 0f00 	cmp.w	r9, #0
 802bd14:	dcf3      	bgt.n	802bcfe <__ieee754_pow+0x20e>
 802bd16:	2000      	movs	r0, #0
 802bd18:	b011      	add	sp, #68	@ 0x44
 802bd1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bd1e:	f000 bcdf 	b.w	802c6e0 <__math_uflow>
 802bd22:	4598      	cmp	r8, r3
 802bd24:	d20c      	bcs.n	802bd40 <__ieee754_pow+0x250>
 802bd26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802bd2a:	2200      	movs	r2, #0
 802bd2c:	2300      	movs	r3, #0
 802bd2e:	f7d4 febd 	bl	8000aac <__aeabi_dcmplt>
 802bd32:	3800      	subs	r0, #0
 802bd34:	bf18      	it	ne
 802bd36:	2001      	movne	r0, #1
 802bd38:	f1b9 0f00 	cmp.w	r9, #0
 802bd3c:	daec      	bge.n	802bd18 <__ieee754_pow+0x228>
 802bd3e:	e7df      	b.n	802bd00 <__ieee754_pow+0x210>
 802bd40:	4b10      	ldr	r3, [pc, #64]	@ (802bd84 <__ieee754_pow+0x294>)
 802bd42:	4598      	cmp	r8, r3
 802bd44:	f04f 0200 	mov.w	r2, #0
 802bd48:	d924      	bls.n	802bd94 <__ieee754_pow+0x2a4>
 802bd4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802bd4e:	2300      	movs	r3, #0
 802bd50:	f7d4 feac 	bl	8000aac <__aeabi_dcmplt>
 802bd54:	3800      	subs	r0, #0
 802bd56:	bf18      	it	ne
 802bd58:	2001      	movne	r0, #1
 802bd5a:	f1b9 0f00 	cmp.w	r9, #0
 802bd5e:	dccf      	bgt.n	802bd00 <__ieee754_pow+0x210>
 802bd60:	e7da      	b.n	802bd18 <__ieee754_pow+0x228>
 802bd62:	bf00      	nop
 802bd64:	f3af 8000 	nop.w
 802bd68:	00000000 	.word	0x00000000
 802bd6c:	3ff00000 	.word	0x3ff00000
 802bd70:	00000000 	.word	0x00000000
 802bd74:	bff00000 	.word	0xbff00000
 802bd78:	fff00000 	.word	0xfff00000
 802bd7c:	7ff00000 	.word	0x7ff00000
 802bd80:	433fffff 	.word	0x433fffff
 802bd84:	3ff00000 	.word	0x3ff00000
 802bd88:	3fefffff 	.word	0x3fefffff
 802bd8c:	3fe00000 	.word	0x3fe00000
 802bd90:	43f00000 	.word	0x43f00000
 802bd94:	4b5a      	ldr	r3, [pc, #360]	@ (802bf00 <__ieee754_pow+0x410>)
 802bd96:	f7d4 fa5f 	bl	8000258 <__aeabi_dsub>
 802bd9a:	a351      	add	r3, pc, #324	@ (adr r3, 802bee0 <__ieee754_pow+0x3f0>)
 802bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bda0:	4604      	mov	r4, r0
 802bda2:	460d      	mov	r5, r1
 802bda4:	f7d4 fc10 	bl	80005c8 <__aeabi_dmul>
 802bda8:	a34f      	add	r3, pc, #316	@ (adr r3, 802bee8 <__ieee754_pow+0x3f8>)
 802bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bdae:	4606      	mov	r6, r0
 802bdb0:	460f      	mov	r7, r1
 802bdb2:	4620      	mov	r0, r4
 802bdb4:	4629      	mov	r1, r5
 802bdb6:	f7d4 fc07 	bl	80005c8 <__aeabi_dmul>
 802bdba:	4b52      	ldr	r3, [pc, #328]	@ (802bf04 <__ieee754_pow+0x414>)
 802bdbc:	4682      	mov	sl, r0
 802bdbe:	468b      	mov	fp, r1
 802bdc0:	2200      	movs	r2, #0
 802bdc2:	4620      	mov	r0, r4
 802bdc4:	4629      	mov	r1, r5
 802bdc6:	f7d4 fbff 	bl	80005c8 <__aeabi_dmul>
 802bdca:	4602      	mov	r2, r0
 802bdcc:	460b      	mov	r3, r1
 802bdce:	a148      	add	r1, pc, #288	@ (adr r1, 802bef0 <__ieee754_pow+0x400>)
 802bdd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 802bdd4:	f7d4 fa40 	bl	8000258 <__aeabi_dsub>
 802bdd8:	4622      	mov	r2, r4
 802bdda:	462b      	mov	r3, r5
 802bddc:	f7d4 fbf4 	bl	80005c8 <__aeabi_dmul>
 802bde0:	4602      	mov	r2, r0
 802bde2:	460b      	mov	r3, r1
 802bde4:	2000      	movs	r0, #0
 802bde6:	4948      	ldr	r1, [pc, #288]	@ (802bf08 <__ieee754_pow+0x418>)
 802bde8:	f7d4 fa36 	bl	8000258 <__aeabi_dsub>
 802bdec:	4622      	mov	r2, r4
 802bdee:	4680      	mov	r8, r0
 802bdf0:	4689      	mov	r9, r1
 802bdf2:	462b      	mov	r3, r5
 802bdf4:	4620      	mov	r0, r4
 802bdf6:	4629      	mov	r1, r5
 802bdf8:	f7d4 fbe6 	bl	80005c8 <__aeabi_dmul>
 802bdfc:	4602      	mov	r2, r0
 802bdfe:	460b      	mov	r3, r1
 802be00:	4640      	mov	r0, r8
 802be02:	4649      	mov	r1, r9
 802be04:	f7d4 fbe0 	bl	80005c8 <__aeabi_dmul>
 802be08:	a33b      	add	r3, pc, #236	@ (adr r3, 802bef8 <__ieee754_pow+0x408>)
 802be0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802be0e:	f7d4 fbdb 	bl	80005c8 <__aeabi_dmul>
 802be12:	4602      	mov	r2, r0
 802be14:	460b      	mov	r3, r1
 802be16:	4650      	mov	r0, sl
 802be18:	4659      	mov	r1, fp
 802be1a:	f7d4 fa1d 	bl	8000258 <__aeabi_dsub>
 802be1e:	4602      	mov	r2, r0
 802be20:	460b      	mov	r3, r1
 802be22:	4680      	mov	r8, r0
 802be24:	4689      	mov	r9, r1
 802be26:	4630      	mov	r0, r6
 802be28:	4639      	mov	r1, r7
 802be2a:	f7d4 fa17 	bl	800025c <__adddf3>
 802be2e:	2400      	movs	r4, #0
 802be30:	4632      	mov	r2, r6
 802be32:	463b      	mov	r3, r7
 802be34:	4620      	mov	r0, r4
 802be36:	460d      	mov	r5, r1
 802be38:	f7d4 fa0e 	bl	8000258 <__aeabi_dsub>
 802be3c:	4602      	mov	r2, r0
 802be3e:	460b      	mov	r3, r1
 802be40:	4640      	mov	r0, r8
 802be42:	4649      	mov	r1, r9
 802be44:	f7d4 fa08 	bl	8000258 <__aeabi_dsub>
 802be48:	e9dd 2300 	ldrd	r2, r3, [sp]
 802be4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802be50:	2300      	movs	r3, #0
 802be52:	9304      	str	r3, [sp, #16]
 802be54:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 802be58:	4606      	mov	r6, r0
 802be5a:	460f      	mov	r7, r1
 802be5c:	4652      	mov	r2, sl
 802be5e:	465b      	mov	r3, fp
 802be60:	e9dd 0100 	ldrd	r0, r1, [sp]
 802be64:	f7d4 f9f8 	bl	8000258 <__aeabi_dsub>
 802be68:	4622      	mov	r2, r4
 802be6a:	462b      	mov	r3, r5
 802be6c:	f7d4 fbac 	bl	80005c8 <__aeabi_dmul>
 802be70:	e9dd 2300 	ldrd	r2, r3, [sp]
 802be74:	4680      	mov	r8, r0
 802be76:	4689      	mov	r9, r1
 802be78:	4630      	mov	r0, r6
 802be7a:	4639      	mov	r1, r7
 802be7c:	f7d4 fba4 	bl	80005c8 <__aeabi_dmul>
 802be80:	4602      	mov	r2, r0
 802be82:	460b      	mov	r3, r1
 802be84:	4640      	mov	r0, r8
 802be86:	4649      	mov	r1, r9
 802be88:	f7d4 f9e8 	bl	800025c <__adddf3>
 802be8c:	4652      	mov	r2, sl
 802be8e:	465b      	mov	r3, fp
 802be90:	4606      	mov	r6, r0
 802be92:	460f      	mov	r7, r1
 802be94:	4620      	mov	r0, r4
 802be96:	4629      	mov	r1, r5
 802be98:	f7d4 fb96 	bl	80005c8 <__aeabi_dmul>
 802be9c:	460b      	mov	r3, r1
 802be9e:	4602      	mov	r2, r0
 802bea0:	4680      	mov	r8, r0
 802bea2:	4689      	mov	r9, r1
 802bea4:	4630      	mov	r0, r6
 802bea6:	4639      	mov	r1, r7
 802bea8:	f7d4 f9d8 	bl	800025c <__adddf3>
 802beac:	4b17      	ldr	r3, [pc, #92]	@ (802bf0c <__ieee754_pow+0x41c>)
 802beae:	4299      	cmp	r1, r3
 802beb0:	4604      	mov	r4, r0
 802beb2:	460d      	mov	r5, r1
 802beb4:	468a      	mov	sl, r1
 802beb6:	468b      	mov	fp, r1
 802beb8:	f340 82ef 	ble.w	802c49a <__ieee754_pow+0x9aa>
 802bebc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 802bec0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 802bec4:	4303      	orrs	r3, r0
 802bec6:	f000 81e8 	beq.w	802c29a <__ieee754_pow+0x7aa>
 802beca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802bece:	2200      	movs	r2, #0
 802bed0:	2300      	movs	r3, #0
 802bed2:	f7d4 fdeb 	bl	8000aac <__aeabi_dcmplt>
 802bed6:	3800      	subs	r0, #0
 802bed8:	bf18      	it	ne
 802beda:	2001      	movne	r0, #1
 802bedc:	e710      	b.n	802bd00 <__ieee754_pow+0x210>
 802bede:	bf00      	nop
 802bee0:	60000000 	.word	0x60000000
 802bee4:	3ff71547 	.word	0x3ff71547
 802bee8:	f85ddf44 	.word	0xf85ddf44
 802beec:	3e54ae0b 	.word	0x3e54ae0b
 802bef0:	55555555 	.word	0x55555555
 802bef4:	3fd55555 	.word	0x3fd55555
 802bef8:	652b82fe 	.word	0x652b82fe
 802befc:	3ff71547 	.word	0x3ff71547
 802bf00:	3ff00000 	.word	0x3ff00000
 802bf04:	3fd00000 	.word	0x3fd00000
 802bf08:	3fe00000 	.word	0x3fe00000
 802bf0c:	408fffff 	.word	0x408fffff
 802bf10:	4bd5      	ldr	r3, [pc, #852]	@ (802c268 <__ieee754_pow+0x778>)
 802bf12:	402b      	ands	r3, r5
 802bf14:	2200      	movs	r2, #0
 802bf16:	b92b      	cbnz	r3, 802bf24 <__ieee754_pow+0x434>
 802bf18:	4bd4      	ldr	r3, [pc, #848]	@ (802c26c <__ieee754_pow+0x77c>)
 802bf1a:	f7d4 fb55 	bl	80005c8 <__aeabi_dmul>
 802bf1e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 802bf22:	468b      	mov	fp, r1
 802bf24:	ea4f 532b 	mov.w	r3, fp, asr #20
 802bf28:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 802bf2c:	4413      	add	r3, r2
 802bf2e:	930a      	str	r3, [sp, #40]	@ 0x28
 802bf30:	4bcf      	ldr	r3, [pc, #828]	@ (802c270 <__ieee754_pow+0x780>)
 802bf32:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 802bf36:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 802bf3a:	459b      	cmp	fp, r3
 802bf3c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802bf40:	dd08      	ble.n	802bf54 <__ieee754_pow+0x464>
 802bf42:	4bcc      	ldr	r3, [pc, #816]	@ (802c274 <__ieee754_pow+0x784>)
 802bf44:	459b      	cmp	fp, r3
 802bf46:	f340 81a5 	ble.w	802c294 <__ieee754_pow+0x7a4>
 802bf4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802bf4c:	3301      	adds	r3, #1
 802bf4e:	930a      	str	r3, [sp, #40]	@ 0x28
 802bf50:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 802bf54:	f04f 0a00 	mov.w	sl, #0
 802bf58:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 802bf5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802bf5e:	4bc6      	ldr	r3, [pc, #792]	@ (802c278 <__ieee754_pow+0x788>)
 802bf60:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802bf64:	ed93 7b00 	vldr	d7, [r3]
 802bf68:	4629      	mov	r1, r5
 802bf6a:	ec53 2b17 	vmov	r2, r3, d7
 802bf6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 802bf72:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802bf76:	f7d4 f96f 	bl	8000258 <__aeabi_dsub>
 802bf7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802bf7e:	4606      	mov	r6, r0
 802bf80:	460f      	mov	r7, r1
 802bf82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802bf86:	f7d4 f969 	bl	800025c <__adddf3>
 802bf8a:	4602      	mov	r2, r0
 802bf8c:	460b      	mov	r3, r1
 802bf8e:	2000      	movs	r0, #0
 802bf90:	49ba      	ldr	r1, [pc, #744]	@ (802c27c <__ieee754_pow+0x78c>)
 802bf92:	f7d4 fc43 	bl	800081c <__aeabi_ddiv>
 802bf96:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 802bf9a:	4602      	mov	r2, r0
 802bf9c:	460b      	mov	r3, r1
 802bf9e:	4630      	mov	r0, r6
 802bfa0:	4639      	mov	r1, r7
 802bfa2:	f7d4 fb11 	bl	80005c8 <__aeabi_dmul>
 802bfa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802bfaa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 802bfae:	106d      	asrs	r5, r5, #1
 802bfb0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 802bfb4:	f04f 0b00 	mov.w	fp, #0
 802bfb8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 802bfbc:	4661      	mov	r1, ip
 802bfbe:	2200      	movs	r2, #0
 802bfc0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 802bfc4:	4658      	mov	r0, fp
 802bfc6:	46e1      	mov	r9, ip
 802bfc8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 802bfcc:	4614      	mov	r4, r2
 802bfce:	461d      	mov	r5, r3
 802bfd0:	f7d4 fafa 	bl	80005c8 <__aeabi_dmul>
 802bfd4:	4602      	mov	r2, r0
 802bfd6:	460b      	mov	r3, r1
 802bfd8:	4630      	mov	r0, r6
 802bfda:	4639      	mov	r1, r7
 802bfdc:	f7d4 f93c 	bl	8000258 <__aeabi_dsub>
 802bfe0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802bfe4:	4606      	mov	r6, r0
 802bfe6:	460f      	mov	r7, r1
 802bfe8:	4620      	mov	r0, r4
 802bfea:	4629      	mov	r1, r5
 802bfec:	f7d4 f934 	bl	8000258 <__aeabi_dsub>
 802bff0:	4602      	mov	r2, r0
 802bff2:	460b      	mov	r3, r1
 802bff4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802bff8:	f7d4 f92e 	bl	8000258 <__aeabi_dsub>
 802bffc:	465a      	mov	r2, fp
 802bffe:	464b      	mov	r3, r9
 802c000:	f7d4 fae2 	bl	80005c8 <__aeabi_dmul>
 802c004:	4602      	mov	r2, r0
 802c006:	460b      	mov	r3, r1
 802c008:	4630      	mov	r0, r6
 802c00a:	4639      	mov	r1, r7
 802c00c:	f7d4 f924 	bl	8000258 <__aeabi_dsub>
 802c010:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 802c014:	f7d4 fad8 	bl	80005c8 <__aeabi_dmul>
 802c018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802c01c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802c020:	4610      	mov	r0, r2
 802c022:	4619      	mov	r1, r3
 802c024:	f7d4 fad0 	bl	80005c8 <__aeabi_dmul>
 802c028:	a37d      	add	r3, pc, #500	@ (adr r3, 802c220 <__ieee754_pow+0x730>)
 802c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c02e:	4604      	mov	r4, r0
 802c030:	460d      	mov	r5, r1
 802c032:	f7d4 fac9 	bl	80005c8 <__aeabi_dmul>
 802c036:	a37c      	add	r3, pc, #496	@ (adr r3, 802c228 <__ieee754_pow+0x738>)
 802c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c03c:	f7d4 f90e 	bl	800025c <__adddf3>
 802c040:	4622      	mov	r2, r4
 802c042:	462b      	mov	r3, r5
 802c044:	f7d4 fac0 	bl	80005c8 <__aeabi_dmul>
 802c048:	a379      	add	r3, pc, #484	@ (adr r3, 802c230 <__ieee754_pow+0x740>)
 802c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c04e:	f7d4 f905 	bl	800025c <__adddf3>
 802c052:	4622      	mov	r2, r4
 802c054:	462b      	mov	r3, r5
 802c056:	f7d4 fab7 	bl	80005c8 <__aeabi_dmul>
 802c05a:	a377      	add	r3, pc, #476	@ (adr r3, 802c238 <__ieee754_pow+0x748>)
 802c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c060:	f7d4 f8fc 	bl	800025c <__adddf3>
 802c064:	4622      	mov	r2, r4
 802c066:	462b      	mov	r3, r5
 802c068:	f7d4 faae 	bl	80005c8 <__aeabi_dmul>
 802c06c:	a374      	add	r3, pc, #464	@ (adr r3, 802c240 <__ieee754_pow+0x750>)
 802c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c072:	f7d4 f8f3 	bl	800025c <__adddf3>
 802c076:	4622      	mov	r2, r4
 802c078:	462b      	mov	r3, r5
 802c07a:	f7d4 faa5 	bl	80005c8 <__aeabi_dmul>
 802c07e:	a372      	add	r3, pc, #456	@ (adr r3, 802c248 <__ieee754_pow+0x758>)
 802c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c084:	f7d4 f8ea 	bl	800025c <__adddf3>
 802c088:	4622      	mov	r2, r4
 802c08a:	4606      	mov	r6, r0
 802c08c:	460f      	mov	r7, r1
 802c08e:	462b      	mov	r3, r5
 802c090:	4620      	mov	r0, r4
 802c092:	4629      	mov	r1, r5
 802c094:	f7d4 fa98 	bl	80005c8 <__aeabi_dmul>
 802c098:	4602      	mov	r2, r0
 802c09a:	460b      	mov	r3, r1
 802c09c:	4630      	mov	r0, r6
 802c09e:	4639      	mov	r1, r7
 802c0a0:	f7d4 fa92 	bl	80005c8 <__aeabi_dmul>
 802c0a4:	465a      	mov	r2, fp
 802c0a6:	4604      	mov	r4, r0
 802c0a8:	460d      	mov	r5, r1
 802c0aa:	464b      	mov	r3, r9
 802c0ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802c0b0:	f7d4 f8d4 	bl	800025c <__adddf3>
 802c0b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802c0b8:	f7d4 fa86 	bl	80005c8 <__aeabi_dmul>
 802c0bc:	4622      	mov	r2, r4
 802c0be:	462b      	mov	r3, r5
 802c0c0:	f7d4 f8cc 	bl	800025c <__adddf3>
 802c0c4:	465a      	mov	r2, fp
 802c0c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802c0ca:	464b      	mov	r3, r9
 802c0cc:	4658      	mov	r0, fp
 802c0ce:	4649      	mov	r1, r9
 802c0d0:	f7d4 fa7a 	bl	80005c8 <__aeabi_dmul>
 802c0d4:	4b6a      	ldr	r3, [pc, #424]	@ (802c280 <__ieee754_pow+0x790>)
 802c0d6:	2200      	movs	r2, #0
 802c0d8:	4606      	mov	r6, r0
 802c0da:	460f      	mov	r7, r1
 802c0dc:	f7d4 f8be 	bl	800025c <__adddf3>
 802c0e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802c0e4:	f7d4 f8ba 	bl	800025c <__adddf3>
 802c0e8:	46d8      	mov	r8, fp
 802c0ea:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 802c0ee:	460d      	mov	r5, r1
 802c0f0:	465a      	mov	r2, fp
 802c0f2:	460b      	mov	r3, r1
 802c0f4:	4640      	mov	r0, r8
 802c0f6:	4649      	mov	r1, r9
 802c0f8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 802c0fc:	f7d4 fa64 	bl	80005c8 <__aeabi_dmul>
 802c100:	465c      	mov	r4, fp
 802c102:	4680      	mov	r8, r0
 802c104:	4689      	mov	r9, r1
 802c106:	4b5e      	ldr	r3, [pc, #376]	@ (802c280 <__ieee754_pow+0x790>)
 802c108:	2200      	movs	r2, #0
 802c10a:	4620      	mov	r0, r4
 802c10c:	4629      	mov	r1, r5
 802c10e:	f7d4 f8a3 	bl	8000258 <__aeabi_dsub>
 802c112:	4632      	mov	r2, r6
 802c114:	463b      	mov	r3, r7
 802c116:	f7d4 f89f 	bl	8000258 <__aeabi_dsub>
 802c11a:	4602      	mov	r2, r0
 802c11c:	460b      	mov	r3, r1
 802c11e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802c122:	f7d4 f899 	bl	8000258 <__aeabi_dsub>
 802c126:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802c12a:	f7d4 fa4d 	bl	80005c8 <__aeabi_dmul>
 802c12e:	4622      	mov	r2, r4
 802c130:	4606      	mov	r6, r0
 802c132:	460f      	mov	r7, r1
 802c134:	462b      	mov	r3, r5
 802c136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802c13a:	f7d4 fa45 	bl	80005c8 <__aeabi_dmul>
 802c13e:	4602      	mov	r2, r0
 802c140:	460b      	mov	r3, r1
 802c142:	4630      	mov	r0, r6
 802c144:	4639      	mov	r1, r7
 802c146:	f7d4 f889 	bl	800025c <__adddf3>
 802c14a:	4606      	mov	r6, r0
 802c14c:	460f      	mov	r7, r1
 802c14e:	4602      	mov	r2, r0
 802c150:	460b      	mov	r3, r1
 802c152:	4640      	mov	r0, r8
 802c154:	4649      	mov	r1, r9
 802c156:	f7d4 f881 	bl	800025c <__adddf3>
 802c15a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 802c15e:	a33c      	add	r3, pc, #240	@ (adr r3, 802c250 <__ieee754_pow+0x760>)
 802c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c164:	4658      	mov	r0, fp
 802c166:	e9cd bc08 	strd	fp, ip, [sp, #32]
 802c16a:	460d      	mov	r5, r1
 802c16c:	f7d4 fa2c 	bl	80005c8 <__aeabi_dmul>
 802c170:	465c      	mov	r4, fp
 802c172:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802c176:	4642      	mov	r2, r8
 802c178:	464b      	mov	r3, r9
 802c17a:	4620      	mov	r0, r4
 802c17c:	4629      	mov	r1, r5
 802c17e:	f7d4 f86b 	bl	8000258 <__aeabi_dsub>
 802c182:	4602      	mov	r2, r0
 802c184:	460b      	mov	r3, r1
 802c186:	4630      	mov	r0, r6
 802c188:	4639      	mov	r1, r7
 802c18a:	f7d4 f865 	bl	8000258 <__aeabi_dsub>
 802c18e:	a332      	add	r3, pc, #200	@ (adr r3, 802c258 <__ieee754_pow+0x768>)
 802c190:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c194:	f7d4 fa18 	bl	80005c8 <__aeabi_dmul>
 802c198:	a331      	add	r3, pc, #196	@ (adr r3, 802c260 <__ieee754_pow+0x770>)
 802c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c19e:	4606      	mov	r6, r0
 802c1a0:	460f      	mov	r7, r1
 802c1a2:	4620      	mov	r0, r4
 802c1a4:	4629      	mov	r1, r5
 802c1a6:	f7d4 fa0f 	bl	80005c8 <__aeabi_dmul>
 802c1aa:	4602      	mov	r2, r0
 802c1ac:	460b      	mov	r3, r1
 802c1ae:	4630      	mov	r0, r6
 802c1b0:	4639      	mov	r1, r7
 802c1b2:	f7d4 f853 	bl	800025c <__adddf3>
 802c1b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802c1b8:	4b32      	ldr	r3, [pc, #200]	@ (802c284 <__ieee754_pow+0x794>)
 802c1ba:	4413      	add	r3, r2
 802c1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c1c0:	f7d4 f84c 	bl	800025c <__adddf3>
 802c1c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802c1c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802c1ca:	f7d4 f993 	bl	80004f4 <__aeabi_i2d>
 802c1ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802c1d0:	4b2d      	ldr	r3, [pc, #180]	@ (802c288 <__ieee754_pow+0x798>)
 802c1d2:	4413      	add	r3, r2
 802c1d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 802c1d8:	4606      	mov	r6, r0
 802c1da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802c1de:	460f      	mov	r7, r1
 802c1e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802c1e4:	f7d4 f83a 	bl	800025c <__adddf3>
 802c1e8:	4642      	mov	r2, r8
 802c1ea:	464b      	mov	r3, r9
 802c1ec:	f7d4 f836 	bl	800025c <__adddf3>
 802c1f0:	4632      	mov	r2, r6
 802c1f2:	463b      	mov	r3, r7
 802c1f4:	f7d4 f832 	bl	800025c <__adddf3>
 802c1f8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 802c1fc:	4632      	mov	r2, r6
 802c1fe:	463b      	mov	r3, r7
 802c200:	4658      	mov	r0, fp
 802c202:	460d      	mov	r5, r1
 802c204:	f7d4 f828 	bl	8000258 <__aeabi_dsub>
 802c208:	4642      	mov	r2, r8
 802c20a:	464b      	mov	r3, r9
 802c20c:	f7d4 f824 	bl	8000258 <__aeabi_dsub>
 802c210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802c214:	f7d4 f820 	bl	8000258 <__aeabi_dsub>
 802c218:	465c      	mov	r4, fp
 802c21a:	4602      	mov	r2, r0
 802c21c:	e036      	b.n	802c28c <__ieee754_pow+0x79c>
 802c21e:	bf00      	nop
 802c220:	4a454eef 	.word	0x4a454eef
 802c224:	3fca7e28 	.word	0x3fca7e28
 802c228:	93c9db65 	.word	0x93c9db65
 802c22c:	3fcd864a 	.word	0x3fcd864a
 802c230:	a91d4101 	.word	0xa91d4101
 802c234:	3fd17460 	.word	0x3fd17460
 802c238:	518f264d 	.word	0x518f264d
 802c23c:	3fd55555 	.word	0x3fd55555
 802c240:	db6fabff 	.word	0xdb6fabff
 802c244:	3fdb6db6 	.word	0x3fdb6db6
 802c248:	33333303 	.word	0x33333303
 802c24c:	3fe33333 	.word	0x3fe33333
 802c250:	e0000000 	.word	0xe0000000
 802c254:	3feec709 	.word	0x3feec709
 802c258:	dc3a03fd 	.word	0xdc3a03fd
 802c25c:	3feec709 	.word	0x3feec709
 802c260:	145b01f5 	.word	0x145b01f5
 802c264:	be3e2fe0 	.word	0xbe3e2fe0
 802c268:	7ff00000 	.word	0x7ff00000
 802c26c:	43400000 	.word	0x43400000
 802c270:	0003988e 	.word	0x0003988e
 802c274:	000bb679 	.word	0x000bb679
 802c278:	08031d38 	.word	0x08031d38
 802c27c:	3ff00000 	.word	0x3ff00000
 802c280:	40080000 	.word	0x40080000
 802c284:	08031d18 	.word	0x08031d18
 802c288:	08031d28 	.word	0x08031d28
 802c28c:	460b      	mov	r3, r1
 802c28e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802c292:	e5d7      	b.n	802be44 <__ieee754_pow+0x354>
 802c294:	f04f 0a01 	mov.w	sl, #1
 802c298:	e65e      	b.n	802bf58 <__ieee754_pow+0x468>
 802c29a:	a3b4      	add	r3, pc, #720	@ (adr r3, 802c56c <__ieee754_pow+0xa7c>)
 802c29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c2a0:	4630      	mov	r0, r6
 802c2a2:	4639      	mov	r1, r7
 802c2a4:	f7d3 ffda 	bl	800025c <__adddf3>
 802c2a8:	4642      	mov	r2, r8
 802c2aa:	e9cd 0100 	strd	r0, r1, [sp]
 802c2ae:	464b      	mov	r3, r9
 802c2b0:	4620      	mov	r0, r4
 802c2b2:	4629      	mov	r1, r5
 802c2b4:	f7d3 ffd0 	bl	8000258 <__aeabi_dsub>
 802c2b8:	4602      	mov	r2, r0
 802c2ba:	460b      	mov	r3, r1
 802c2bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 802c2c0:	f7d4 fc12 	bl	8000ae8 <__aeabi_dcmpgt>
 802c2c4:	2800      	cmp	r0, #0
 802c2c6:	f47f ae00 	bne.w	802beca <__ieee754_pow+0x3da>
 802c2ca:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 802c2ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802c2d2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 802c2d6:	fa43 fa0a 	asr.w	sl, r3, sl
 802c2da:	44da      	add	sl, fp
 802c2dc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 802c2e0:	489d      	ldr	r0, [pc, #628]	@ (802c558 <__ieee754_pow+0xa68>)
 802c2e2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 802c2e6:	4108      	asrs	r0, r1
 802c2e8:	ea00 030a 	and.w	r3, r0, sl
 802c2ec:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 802c2f0:	f1c1 0114 	rsb	r1, r1, #20
 802c2f4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 802c2f8:	fa4a fa01 	asr.w	sl, sl, r1
 802c2fc:	f1bb 0f00 	cmp.w	fp, #0
 802c300:	4640      	mov	r0, r8
 802c302:	4649      	mov	r1, r9
 802c304:	f04f 0200 	mov.w	r2, #0
 802c308:	bfb8      	it	lt
 802c30a:	f1ca 0a00 	rsblt	sl, sl, #0
 802c30e:	f7d3 ffa3 	bl	8000258 <__aeabi_dsub>
 802c312:	4680      	mov	r8, r0
 802c314:	4689      	mov	r9, r1
 802c316:	4632      	mov	r2, r6
 802c318:	463b      	mov	r3, r7
 802c31a:	4640      	mov	r0, r8
 802c31c:	4649      	mov	r1, r9
 802c31e:	f7d3 ff9d 	bl	800025c <__adddf3>
 802c322:	2400      	movs	r4, #0
 802c324:	a37c      	add	r3, pc, #496	@ (adr r3, 802c518 <__ieee754_pow+0xa28>)
 802c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c32a:	4620      	mov	r0, r4
 802c32c:	460d      	mov	r5, r1
 802c32e:	f7d4 f94b 	bl	80005c8 <__aeabi_dmul>
 802c332:	4642      	mov	r2, r8
 802c334:	e9cd 0100 	strd	r0, r1, [sp]
 802c338:	464b      	mov	r3, r9
 802c33a:	4620      	mov	r0, r4
 802c33c:	4629      	mov	r1, r5
 802c33e:	f7d3 ff8b 	bl	8000258 <__aeabi_dsub>
 802c342:	4602      	mov	r2, r0
 802c344:	460b      	mov	r3, r1
 802c346:	4630      	mov	r0, r6
 802c348:	4639      	mov	r1, r7
 802c34a:	f7d3 ff85 	bl	8000258 <__aeabi_dsub>
 802c34e:	a374      	add	r3, pc, #464	@ (adr r3, 802c520 <__ieee754_pow+0xa30>)
 802c350:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c354:	f7d4 f938 	bl	80005c8 <__aeabi_dmul>
 802c358:	a373      	add	r3, pc, #460	@ (adr r3, 802c528 <__ieee754_pow+0xa38>)
 802c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c35e:	4680      	mov	r8, r0
 802c360:	4689      	mov	r9, r1
 802c362:	4620      	mov	r0, r4
 802c364:	4629      	mov	r1, r5
 802c366:	f7d4 f92f 	bl	80005c8 <__aeabi_dmul>
 802c36a:	4602      	mov	r2, r0
 802c36c:	460b      	mov	r3, r1
 802c36e:	4640      	mov	r0, r8
 802c370:	4649      	mov	r1, r9
 802c372:	f7d3 ff73 	bl	800025c <__adddf3>
 802c376:	4604      	mov	r4, r0
 802c378:	460d      	mov	r5, r1
 802c37a:	4602      	mov	r2, r0
 802c37c:	460b      	mov	r3, r1
 802c37e:	e9dd 0100 	ldrd	r0, r1, [sp]
 802c382:	f7d3 ff6b 	bl	800025c <__adddf3>
 802c386:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c38a:	4680      	mov	r8, r0
 802c38c:	4689      	mov	r9, r1
 802c38e:	f7d3 ff63 	bl	8000258 <__aeabi_dsub>
 802c392:	4602      	mov	r2, r0
 802c394:	460b      	mov	r3, r1
 802c396:	4620      	mov	r0, r4
 802c398:	4629      	mov	r1, r5
 802c39a:	f7d3 ff5d 	bl	8000258 <__aeabi_dsub>
 802c39e:	4642      	mov	r2, r8
 802c3a0:	4606      	mov	r6, r0
 802c3a2:	460f      	mov	r7, r1
 802c3a4:	464b      	mov	r3, r9
 802c3a6:	4640      	mov	r0, r8
 802c3a8:	4649      	mov	r1, r9
 802c3aa:	f7d4 f90d 	bl	80005c8 <__aeabi_dmul>
 802c3ae:	a360      	add	r3, pc, #384	@ (adr r3, 802c530 <__ieee754_pow+0xa40>)
 802c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c3b4:	4604      	mov	r4, r0
 802c3b6:	460d      	mov	r5, r1
 802c3b8:	f7d4 f906 	bl	80005c8 <__aeabi_dmul>
 802c3bc:	a35e      	add	r3, pc, #376	@ (adr r3, 802c538 <__ieee754_pow+0xa48>)
 802c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c3c2:	f7d3 ff49 	bl	8000258 <__aeabi_dsub>
 802c3c6:	4622      	mov	r2, r4
 802c3c8:	462b      	mov	r3, r5
 802c3ca:	f7d4 f8fd 	bl	80005c8 <__aeabi_dmul>
 802c3ce:	a35c      	add	r3, pc, #368	@ (adr r3, 802c540 <__ieee754_pow+0xa50>)
 802c3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c3d4:	f7d3 ff42 	bl	800025c <__adddf3>
 802c3d8:	4622      	mov	r2, r4
 802c3da:	462b      	mov	r3, r5
 802c3dc:	f7d4 f8f4 	bl	80005c8 <__aeabi_dmul>
 802c3e0:	a359      	add	r3, pc, #356	@ (adr r3, 802c548 <__ieee754_pow+0xa58>)
 802c3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c3e6:	f7d3 ff37 	bl	8000258 <__aeabi_dsub>
 802c3ea:	4622      	mov	r2, r4
 802c3ec:	462b      	mov	r3, r5
 802c3ee:	f7d4 f8eb 	bl	80005c8 <__aeabi_dmul>
 802c3f2:	a357      	add	r3, pc, #348	@ (adr r3, 802c550 <__ieee754_pow+0xa60>)
 802c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c3f8:	f7d3 ff30 	bl	800025c <__adddf3>
 802c3fc:	4622      	mov	r2, r4
 802c3fe:	462b      	mov	r3, r5
 802c400:	f7d4 f8e2 	bl	80005c8 <__aeabi_dmul>
 802c404:	4602      	mov	r2, r0
 802c406:	460b      	mov	r3, r1
 802c408:	4640      	mov	r0, r8
 802c40a:	4649      	mov	r1, r9
 802c40c:	f7d3 ff24 	bl	8000258 <__aeabi_dsub>
 802c410:	4604      	mov	r4, r0
 802c412:	460d      	mov	r5, r1
 802c414:	4602      	mov	r2, r0
 802c416:	460b      	mov	r3, r1
 802c418:	4640      	mov	r0, r8
 802c41a:	4649      	mov	r1, r9
 802c41c:	f7d4 f8d4 	bl	80005c8 <__aeabi_dmul>
 802c420:	2200      	movs	r2, #0
 802c422:	e9cd 0100 	strd	r0, r1, [sp]
 802c426:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802c42a:	4620      	mov	r0, r4
 802c42c:	4629      	mov	r1, r5
 802c42e:	f7d3 ff13 	bl	8000258 <__aeabi_dsub>
 802c432:	4602      	mov	r2, r0
 802c434:	460b      	mov	r3, r1
 802c436:	e9dd 0100 	ldrd	r0, r1, [sp]
 802c43a:	f7d4 f9ef 	bl	800081c <__aeabi_ddiv>
 802c43e:	4632      	mov	r2, r6
 802c440:	4604      	mov	r4, r0
 802c442:	460d      	mov	r5, r1
 802c444:	463b      	mov	r3, r7
 802c446:	4640      	mov	r0, r8
 802c448:	4649      	mov	r1, r9
 802c44a:	f7d4 f8bd 	bl	80005c8 <__aeabi_dmul>
 802c44e:	4632      	mov	r2, r6
 802c450:	463b      	mov	r3, r7
 802c452:	f7d3 ff03 	bl	800025c <__adddf3>
 802c456:	4602      	mov	r2, r0
 802c458:	460b      	mov	r3, r1
 802c45a:	4620      	mov	r0, r4
 802c45c:	4629      	mov	r1, r5
 802c45e:	f7d3 fefb 	bl	8000258 <__aeabi_dsub>
 802c462:	4642      	mov	r2, r8
 802c464:	464b      	mov	r3, r9
 802c466:	f7d3 fef7 	bl	8000258 <__aeabi_dsub>
 802c46a:	460b      	mov	r3, r1
 802c46c:	4602      	mov	r2, r0
 802c46e:	493b      	ldr	r1, [pc, #236]	@ (802c55c <__ieee754_pow+0xa6c>)
 802c470:	2000      	movs	r0, #0
 802c472:	f7d3 fef1 	bl	8000258 <__aeabi_dsub>
 802c476:	ec41 0b10 	vmov	d0, r0, r1
 802c47a:	ee10 3a90 	vmov	r3, s1
 802c47e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802c482:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802c486:	da30      	bge.n	802c4ea <__ieee754_pow+0x9fa>
 802c488:	4650      	mov	r0, sl
 802c48a:	f000 f87d 	bl	802c588 <scalbn>
 802c48e:	ec51 0b10 	vmov	r0, r1, d0
 802c492:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802c496:	f7ff bbd2 	b.w	802bc3e <__ieee754_pow+0x14e>
 802c49a:	4c31      	ldr	r4, [pc, #196]	@ (802c560 <__ieee754_pow+0xa70>)
 802c49c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 802c4a0:	42a3      	cmp	r3, r4
 802c4a2:	d91a      	bls.n	802c4da <__ieee754_pow+0x9ea>
 802c4a4:	4b2f      	ldr	r3, [pc, #188]	@ (802c564 <__ieee754_pow+0xa74>)
 802c4a6:	440b      	add	r3, r1
 802c4a8:	4303      	orrs	r3, r0
 802c4aa:	d009      	beq.n	802c4c0 <__ieee754_pow+0x9d0>
 802c4ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802c4b0:	2200      	movs	r2, #0
 802c4b2:	2300      	movs	r3, #0
 802c4b4:	f7d4 fafa 	bl	8000aac <__aeabi_dcmplt>
 802c4b8:	3800      	subs	r0, #0
 802c4ba:	bf18      	it	ne
 802c4bc:	2001      	movne	r0, #1
 802c4be:	e42b      	b.n	802bd18 <__ieee754_pow+0x228>
 802c4c0:	4642      	mov	r2, r8
 802c4c2:	464b      	mov	r3, r9
 802c4c4:	f7d3 fec8 	bl	8000258 <__aeabi_dsub>
 802c4c8:	4632      	mov	r2, r6
 802c4ca:	463b      	mov	r3, r7
 802c4cc:	f7d4 fb02 	bl	8000ad4 <__aeabi_dcmpge>
 802c4d0:	2800      	cmp	r0, #0
 802c4d2:	d1eb      	bne.n	802c4ac <__ieee754_pow+0x9bc>
 802c4d4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 802c574 <__ieee754_pow+0xa84>
 802c4d8:	e6f7      	b.n	802c2ca <__ieee754_pow+0x7da>
 802c4da:	469a      	mov	sl, r3
 802c4dc:	4b22      	ldr	r3, [pc, #136]	@ (802c568 <__ieee754_pow+0xa78>)
 802c4de:	459a      	cmp	sl, r3
 802c4e0:	f63f aef3 	bhi.w	802c2ca <__ieee754_pow+0x7da>
 802c4e4:	f8dd a010 	ldr.w	sl, [sp, #16]
 802c4e8:	e715      	b.n	802c316 <__ieee754_pow+0x826>
 802c4ea:	ec51 0b10 	vmov	r0, r1, d0
 802c4ee:	4619      	mov	r1, r3
 802c4f0:	e7cf      	b.n	802c492 <__ieee754_pow+0x9a2>
 802c4f2:	491a      	ldr	r1, [pc, #104]	@ (802c55c <__ieee754_pow+0xa6c>)
 802c4f4:	2000      	movs	r0, #0
 802c4f6:	f7ff bb18 	b.w	802bb2a <__ieee754_pow+0x3a>
 802c4fa:	2000      	movs	r0, #0
 802c4fc:	2100      	movs	r1, #0
 802c4fe:	f7ff bb14 	b.w	802bb2a <__ieee754_pow+0x3a>
 802c502:	4630      	mov	r0, r6
 802c504:	4639      	mov	r1, r7
 802c506:	f7ff bb10 	b.w	802bb2a <__ieee754_pow+0x3a>
 802c50a:	460c      	mov	r4, r1
 802c50c:	f7ff bb5e 	b.w	802bbcc <__ieee754_pow+0xdc>
 802c510:	2400      	movs	r4, #0
 802c512:	f7ff bb49 	b.w	802bba8 <__ieee754_pow+0xb8>
 802c516:	bf00      	nop
 802c518:	00000000 	.word	0x00000000
 802c51c:	3fe62e43 	.word	0x3fe62e43
 802c520:	fefa39ef 	.word	0xfefa39ef
 802c524:	3fe62e42 	.word	0x3fe62e42
 802c528:	0ca86c39 	.word	0x0ca86c39
 802c52c:	be205c61 	.word	0xbe205c61
 802c530:	72bea4d0 	.word	0x72bea4d0
 802c534:	3e663769 	.word	0x3e663769
 802c538:	c5d26bf1 	.word	0xc5d26bf1
 802c53c:	3ebbbd41 	.word	0x3ebbbd41
 802c540:	af25de2c 	.word	0xaf25de2c
 802c544:	3f11566a 	.word	0x3f11566a
 802c548:	16bebd93 	.word	0x16bebd93
 802c54c:	3f66c16c 	.word	0x3f66c16c
 802c550:	5555553e 	.word	0x5555553e
 802c554:	3fc55555 	.word	0x3fc55555
 802c558:	fff00000 	.word	0xfff00000
 802c55c:	3ff00000 	.word	0x3ff00000
 802c560:	4090cbff 	.word	0x4090cbff
 802c564:	3f6f3400 	.word	0x3f6f3400
 802c568:	3fe00000 	.word	0x3fe00000
 802c56c:	652b82fe 	.word	0x652b82fe
 802c570:	3c971547 	.word	0x3c971547
 802c574:	4090cc00 	.word	0x4090cc00

0802c578 <fabs>:
 802c578:	ec51 0b10 	vmov	r0, r1, d0
 802c57c:	4602      	mov	r2, r0
 802c57e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 802c582:	ec43 2b10 	vmov	d0, r2, r3
 802c586:	4770      	bx	lr

0802c588 <scalbn>:
 802c588:	b570      	push	{r4, r5, r6, lr}
 802c58a:	ec55 4b10 	vmov	r4, r5, d0
 802c58e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 802c592:	4606      	mov	r6, r0
 802c594:	462b      	mov	r3, r5
 802c596:	b991      	cbnz	r1, 802c5be <scalbn+0x36>
 802c598:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 802c59c:	4323      	orrs	r3, r4
 802c59e:	d03d      	beq.n	802c61c <scalbn+0x94>
 802c5a0:	4b35      	ldr	r3, [pc, #212]	@ (802c678 <scalbn+0xf0>)
 802c5a2:	4620      	mov	r0, r4
 802c5a4:	4629      	mov	r1, r5
 802c5a6:	2200      	movs	r2, #0
 802c5a8:	f7d4 f80e 	bl	80005c8 <__aeabi_dmul>
 802c5ac:	4b33      	ldr	r3, [pc, #204]	@ (802c67c <scalbn+0xf4>)
 802c5ae:	429e      	cmp	r6, r3
 802c5b0:	4604      	mov	r4, r0
 802c5b2:	460d      	mov	r5, r1
 802c5b4:	da0f      	bge.n	802c5d6 <scalbn+0x4e>
 802c5b6:	a328      	add	r3, pc, #160	@ (adr r3, 802c658 <scalbn+0xd0>)
 802c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c5bc:	e01e      	b.n	802c5fc <scalbn+0x74>
 802c5be:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 802c5c2:	4291      	cmp	r1, r2
 802c5c4:	d10b      	bne.n	802c5de <scalbn+0x56>
 802c5c6:	4622      	mov	r2, r4
 802c5c8:	4620      	mov	r0, r4
 802c5ca:	4629      	mov	r1, r5
 802c5cc:	f7d3 fe46 	bl	800025c <__adddf3>
 802c5d0:	4604      	mov	r4, r0
 802c5d2:	460d      	mov	r5, r1
 802c5d4:	e022      	b.n	802c61c <scalbn+0x94>
 802c5d6:	460b      	mov	r3, r1
 802c5d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 802c5dc:	3936      	subs	r1, #54	@ 0x36
 802c5de:	f24c 3250 	movw	r2, #50000	@ 0xc350
 802c5e2:	4296      	cmp	r6, r2
 802c5e4:	dd0d      	ble.n	802c602 <scalbn+0x7a>
 802c5e6:	2d00      	cmp	r5, #0
 802c5e8:	a11d      	add	r1, pc, #116	@ (adr r1, 802c660 <scalbn+0xd8>)
 802c5ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 802c5ee:	da02      	bge.n	802c5f6 <scalbn+0x6e>
 802c5f0:	a11d      	add	r1, pc, #116	@ (adr r1, 802c668 <scalbn+0xe0>)
 802c5f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 802c5f6:	a31a      	add	r3, pc, #104	@ (adr r3, 802c660 <scalbn+0xd8>)
 802c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c5fc:	f7d3 ffe4 	bl	80005c8 <__aeabi_dmul>
 802c600:	e7e6      	b.n	802c5d0 <scalbn+0x48>
 802c602:	1872      	adds	r2, r6, r1
 802c604:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 802c608:	428a      	cmp	r2, r1
 802c60a:	dcec      	bgt.n	802c5e6 <scalbn+0x5e>
 802c60c:	2a00      	cmp	r2, #0
 802c60e:	dd08      	ble.n	802c622 <scalbn+0x9a>
 802c610:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802c614:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802c618:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802c61c:	ec45 4b10 	vmov	d0, r4, r5
 802c620:	bd70      	pop	{r4, r5, r6, pc}
 802c622:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 802c626:	da08      	bge.n	802c63a <scalbn+0xb2>
 802c628:	2d00      	cmp	r5, #0
 802c62a:	a10b      	add	r1, pc, #44	@ (adr r1, 802c658 <scalbn+0xd0>)
 802c62c:	e9d1 0100 	ldrd	r0, r1, [r1]
 802c630:	dac1      	bge.n	802c5b6 <scalbn+0x2e>
 802c632:	a10f      	add	r1, pc, #60	@ (adr r1, 802c670 <scalbn+0xe8>)
 802c634:	e9d1 0100 	ldrd	r0, r1, [r1]
 802c638:	e7bd      	b.n	802c5b6 <scalbn+0x2e>
 802c63a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 802c63e:	3236      	adds	r2, #54	@ 0x36
 802c640:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 802c644:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802c648:	4620      	mov	r0, r4
 802c64a:	4b0d      	ldr	r3, [pc, #52]	@ (802c680 <scalbn+0xf8>)
 802c64c:	4629      	mov	r1, r5
 802c64e:	2200      	movs	r2, #0
 802c650:	e7d4      	b.n	802c5fc <scalbn+0x74>
 802c652:	bf00      	nop
 802c654:	f3af 8000 	nop.w
 802c658:	c2f8f359 	.word	0xc2f8f359
 802c65c:	01a56e1f 	.word	0x01a56e1f
 802c660:	8800759c 	.word	0x8800759c
 802c664:	7e37e43c 	.word	0x7e37e43c
 802c668:	8800759c 	.word	0x8800759c
 802c66c:	fe37e43c 	.word	0xfe37e43c
 802c670:	c2f8f359 	.word	0xc2f8f359
 802c674:	81a56e1f 	.word	0x81a56e1f
 802c678:	43500000 	.word	0x43500000
 802c67c:	ffff3cb0 	.word	0xffff3cb0
 802c680:	3c900000 	.word	0x3c900000

0802c684 <with_errno>:
 802c684:	b510      	push	{r4, lr}
 802c686:	ed2d 8b02 	vpush	{d8}
 802c68a:	eeb0 8a40 	vmov.f32	s16, s0
 802c68e:	eef0 8a60 	vmov.f32	s17, s1
 802c692:	4604      	mov	r4, r0
 802c694:	f7fc fdee 	bl	8029274 <__errno>
 802c698:	eeb0 0a48 	vmov.f32	s0, s16
 802c69c:	eef0 0a68 	vmov.f32	s1, s17
 802c6a0:	ecbd 8b02 	vpop	{d8}
 802c6a4:	6004      	str	r4, [r0, #0]
 802c6a6:	bd10      	pop	{r4, pc}

0802c6a8 <xflow>:
 802c6a8:	4603      	mov	r3, r0
 802c6aa:	b507      	push	{r0, r1, r2, lr}
 802c6ac:	ec51 0b10 	vmov	r0, r1, d0
 802c6b0:	b183      	cbz	r3, 802c6d4 <xflow+0x2c>
 802c6b2:	4602      	mov	r2, r0
 802c6b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802c6b8:	e9cd 2300 	strd	r2, r3, [sp]
 802c6bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c6c0:	f7d3 ff82 	bl	80005c8 <__aeabi_dmul>
 802c6c4:	ec41 0b10 	vmov	d0, r0, r1
 802c6c8:	2022      	movs	r0, #34	@ 0x22
 802c6ca:	b003      	add	sp, #12
 802c6cc:	f85d eb04 	ldr.w	lr, [sp], #4
 802c6d0:	f7ff bfd8 	b.w	802c684 <with_errno>
 802c6d4:	4602      	mov	r2, r0
 802c6d6:	460b      	mov	r3, r1
 802c6d8:	e7ee      	b.n	802c6b8 <xflow+0x10>
 802c6da:	0000      	movs	r0, r0
 802c6dc:	0000      	movs	r0, r0
	...

0802c6e0 <__math_uflow>:
 802c6e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 802c6e8 <__math_uflow+0x8>
 802c6e4:	f7ff bfe0 	b.w	802c6a8 <xflow>
 802c6e8:	00000000 	.word	0x00000000
 802c6ec:	10000000 	.word	0x10000000

0802c6f0 <__math_oflow>:
 802c6f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 802c6f8 <__math_oflow+0x8>
 802c6f4:	f7ff bfd8 	b.w	802c6a8 <xflow>
 802c6f8:	00000000 	.word	0x00000000
 802c6fc:	70000000 	.word	0x70000000

0802c700 <_init>:
 802c700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c702:	bf00      	nop
 802c704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c706:	bc08      	pop	{r3}
 802c708:	469e      	mov	lr, r3
 802c70a:	4770      	bx	lr

0802c70c <_fini>:
 802c70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c70e:	bf00      	nop
 802c710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c712:	bc08      	pop	{r3}
 802c714:	469e      	mov	lr, r3
 802c716:	4770      	bx	lr

Disassembly of section .RamFunc:

0802c718 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 802c718:	b480      	push	{r7}
 802c71a:	b089      	sub	sp, #36	@ 0x24
 802c71c:	af00      	add	r7, sp, #0
 802c71e:	6078      	str	r0, [r7, #4]
 802c720:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 802c722:	2380      	movs	r3, #128	@ 0x80
 802c724:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 802c726:	687b      	ldr	r3, [r7, #4]
 802c728:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 802c72a:	683b      	ldr	r3, [r7, #0]
 802c72c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 802c72e:	4b18      	ldr	r3, [pc, #96]	@ (802c790 <FLASH_Program_Fast+0x78>)
 802c730:	695b      	ldr	r3, [r3, #20]
 802c732:	4a17      	ldr	r2, [pc, #92]	@ (802c790 <FLASH_Program_Fast+0x78>)
 802c734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 802c738:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802c73a:	f3ef 8310 	mrs	r3, PRIMASK
 802c73e:	60fb      	str	r3, [r7, #12]
  return(result);
 802c740:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 802c742:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 802c744:	b672      	cpsid	i
}
 802c746:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 802c748:	697b      	ldr	r3, [r7, #20]
 802c74a:	681a      	ldr	r2, [r3, #0]
 802c74c:	69bb      	ldr	r3, [r7, #24]
 802c74e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 802c750:	69bb      	ldr	r3, [r7, #24]
 802c752:	3304      	adds	r3, #4
 802c754:	61bb      	str	r3, [r7, #24]
    src_addr++;
 802c756:	697b      	ldr	r3, [r7, #20]
 802c758:	3304      	adds	r3, #4
 802c75a:	617b      	str	r3, [r7, #20]
    row_index--;
 802c75c:	7ffb      	ldrb	r3, [r7, #31]
 802c75e:	3b01      	subs	r3, #1
 802c760:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 802c762:	7ffb      	ldrb	r3, [r7, #31]
 802c764:	2b00      	cmp	r3, #0
 802c766:	d1ef      	bne.n	802c748 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 802c768:	bf00      	nop
 802c76a:	4b09      	ldr	r3, [pc, #36]	@ (802c790 <FLASH_Program_Fast+0x78>)
 802c76c:	691b      	ldr	r3, [r3, #16]
 802c76e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802c772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802c776:	d0f8      	beq.n	802c76a <FLASH_Program_Fast+0x52>
 802c778:	693b      	ldr	r3, [r7, #16]
 802c77a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802c77c:	68bb      	ldr	r3, [r7, #8]
 802c77e:	f383 8810 	msr	PRIMASK, r3
}
 802c782:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 802c784:	bf00      	nop
 802c786:	3724      	adds	r7, #36	@ 0x24
 802c788:	46bd      	mov	sp, r7
 802c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c78e:	4770      	bx	lr
 802c790:	58004000 	.word	0x58004000
