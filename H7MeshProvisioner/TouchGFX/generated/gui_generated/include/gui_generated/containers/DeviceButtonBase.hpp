/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef DEVICEBUTTONBASE_HPP
#define DEVICEBUTTONBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class DeviceButtonBase : public touchgfx::Container
{
public:
    DeviceButtonBase();
    virtual ~DeviceButtonBase();
    virtual void initialize();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Button interactBtn;
    touchgfx::IconButtonStyle< touchgfx::ClickButtonTrigger >  icon;
    touchgfx::TextAreaWithOneWildcard typeText;
    touchgfx::TextAreaWithOneWildcard statusText;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TYPETEXT_SIZE = 20;
    touchgfx::Unicode::UnicodeChar typeTextBuffer[TYPETEXT_SIZE];
    static const uint16_t STATUSTEXT_SIZE = 20;
    touchgfx::Unicode::UnicodeChar statusTextBuffer[STATUSTEXT_SIZE];

private:

};

#endif // DEVICEBUTTONBASE_HPP
